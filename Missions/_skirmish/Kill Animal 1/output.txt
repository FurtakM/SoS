// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// InitGlobalVariables ;
  18: CALL 19213 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := 0 ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 4
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_EXP 91
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 447: LD_ADDR_VAR 0 8
 451: PUSH
 452: LD_INT 20
 454: PUSH
 455: EMPTY
 456: LIST
 457: ST_TO_ADDR
// InitHc_All ( ) ;
 458: CALL_OW 584
// for i := 1 to numbers - 2 do
 462: LD_ADDR_VAR 0 5
 466: PUSH
 467: DOUBLE
 468: LD_INT 1
 470: DEC
 471: ST_TO_ADDR
 472: LD_VAR 0 3
 476: PUSH
 477: LD_INT 2
 479: MINUS
 480: PUSH
 481: FOR_TO
 482: IFFALSE 623
// begin if numbers [ i ] = 0 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_VAR 0 5
 493: ARRAY
 494: PUSH
 495: LD_INT 0
 497: EQUAL
 498: IFFALSE 502
// continue ;
 500: GO 481
// hc_class := classes [ i ] ;
 502: LD_ADDR_OWVAR 28
 506: PUSH
 507: LD_VAR 0 7
 511: PUSH
 512: LD_VAR 0 5
 516: ARRAY
 517: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 518: LD_ADDR_OWVAR 29
 522: PUSH
 523: LD_INT 8
 525: PPUSH
 526: LD_INT 12
 528: PPUSH
 529: CALL_OW 12
 533: PUSH
 534: LD_INT 8
 536: PPUSH
 537: LD_INT 12
 539: PPUSH
 540: CALL_OW 12
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 549: LD_ADDR_OWVAR 35
 553: PUSH
 554: LD_INT 5
 556: NEG
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_OWVAR 67
 570: PUSH
 571: LD_INT 5
 573: MUL
 574: PLUS
 575: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 576: LD_ADDR_VAR 0 6
 580: PUSH
 581: DOUBLE
 582: LD_INT 1
 584: DEC
 585: ST_TO_ADDR
 586: LD_VAR 0 3
 590: PUSH
 591: LD_VAR 0 5
 595: ARRAY
 596: PUSH
 597: FOR_TO
 598: IFFALSE 619
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
 617: GO 597
 619: POP
 620: POP
// end ;
 621: GO 481
 623: POP
 624: POP
// if not waterArea then
 625: LD_VAR 0 2
 629: NOT
 630: IFFALSE 634
// exit ;
 632: GO 714
// hc_class := waterClass [ 1 ] ;
 634: LD_ADDR_OWVAR 28
 638: PUSH
 639: LD_VAR 0 8
 643: PUSH
 644: LD_INT 1
 646: ARRAY
 647: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 648: LD_ADDR_OWVAR 29
 652: PUSH
 653: LD_INT 10
 655: PUSH
 656: LD_INT 10
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: ST_TO_ADDR
// hc_agressivity := 0 ;
 663: LD_ADDR_OWVAR 35
 667: PUSH
 668: LD_INT 0
 670: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 671: LD_ADDR_VAR 0 6
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 3
 685: PUSH
 686: LD_INT 7
 688: ARRAY
 689: PUSH
 690: FOR_TO
 691: IFFALSE 712
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 693: CALL_OW 44
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 49
 710: GO 690
 712: POP
 713: POP
// end ; end_of_file
 714: LD_VAR 0 4
 718: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 719: LD_INT 22
 721: PUSH
 722: LD_INT 0
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 25
 731: PUSH
 732: LD_INT 15
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: IFFALSE 853
 749: GO 751
 751: DISABLE
 752: LD_INT 0
 754: PPUSH
// begin enable ;
 755: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 756: LD_ADDR_VAR 0 1
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 25
 773: PUSH
 774: LD_INT 15
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: FOR_IN
 791: IFFALSE 851
// if GetLives ( i ) < 1000 then
 793: LD_VAR 0 1
 797: PPUSH
 798: CALL_OW 256
 802: PUSH
 803: LD_INT 1000
 805: LESS
 806: IFFALSE 849
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 808: LD_VAR 0 1
 812: PPUSH
 813: LD_INT 3
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PPUSH
 830: CALL_OW 69
 834: PPUSH
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 74
 844: PPUSH
 845: CALL_OW 115
 849: GO 790
 851: POP
 852: POP
// end ;
 853: PPOPN 1
 855: END
// every 3 do var i , enemy , x , y , d ;
 856: GO 858
 858: DISABLE
 859: LD_INT 0
 861: PPUSH
 862: PPUSH
 863: PPUSH
 864: PPUSH
 865: PPUSH
// begin enable ;
 866: ENABLE
// for i := 2 to huntersAmount do
 867: LD_ADDR_VAR 0 1
 871: PUSH
 872: DOUBLE
 873: LD_INT 2
 875: DEC
 876: ST_TO_ADDR
 877: LD_EXP 3
 881: PUSH
 882: FOR_TO
 883: IFFALSE 1222
// begin if not HasTask ( hunters [ i ] ) then
 885: LD_EXP 6
 889: PUSH
 890: LD_VAR 0 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 314
 900: NOT
 901: IFFALSE 1220
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_EXP 6
 927: PUSH
 928: LD_VAR 0 1
 932: ARRAY
 933: PPUSH
 934: CALL_OW 74
 938: ST_TO_ADDR
// if not enemy then
 939: LD_VAR 0 2
 943: NOT
 944: IFFALSE 948
// continue ;
 946: GO 882
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 948: LD_EXP 6
 952: PUSH
 953: LD_VAR 0 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: CALL_OW 296
 968: PUSH
 969: LD_INT 17
 971: LESS
 972: IFFALSE 1075
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 974: LD_EXP 6
 978: PUSH
 979: LD_VAR 0 1
 983: ARRAY
 984: PPUSH
 985: CALL_OW 257
 989: PUSH
 990: LD_INT 11
 992: EQUAL
 993: IFFALSE 1053
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL_OW 257
1004: PUSH
1005: LD_INT 19
1007: PUSH
1008: LD_INT 20
1010: PUSH
1011: LD_INT 13
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: IN
1019: IFFALSE 1038
// ComCarabine ( hunters [ i ] ) else
1021: LD_EXP 6
1025: PUSH
1026: LD_VAR 0 1
1030: ARRAY
1031: PPUSH
1032: CALL_OW 162
1036: GO 1053
// ComSabre ( hunters [ i ] ) ;
1038: LD_EXP 6
1042: PUSH
1043: LD_VAR 0 1
1047: ARRAY
1048: PPUSH
1049: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1053: LD_EXP 6
1057: PUSH
1058: LD_VAR 0 1
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 115
// end else
1073: GO 1220
// begin d := rand ( 0 , 5 ) ;
1075: LD_ADDR_VAR 0 5
1079: PUSH
1080: LD_INT 0
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 12
1090: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_VAR 0 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 5
1116: PPUSH
1117: LD_INT 8
1119: PPUSH
1120: CALL_OW 272
1124: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1125: LD_ADDR_VAR 0 4
1129: PUSH
1130: LD_EXP 6
1134: PUSH
1135: LD_VAR 0 1
1139: ARRAY
1140: PPUSH
1141: CALL_OW 251
1145: PPUSH
1146: LD_VAR 0 5
1150: PPUSH
1151: LD_INT 8
1153: PPUSH
1154: CALL_OW 273
1158: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 488
1173: PUSH
1174: LD_VAR 0 3
1178: PPUSH
1179: LD_VAR 0 4
1183: PPUSH
1184: CALL_OW 428
1188: PUSH
1189: LD_INT 0
1191: EQUAL
1192: AND
1193: IFFALSE 1220
// ComMoveXY ( hunters [ i ] , x , y ) ;
1195: LD_EXP 6
1199: PUSH
1200: LD_VAR 0 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 3
1210: PPUSH
1211: LD_VAR 0 4
1215: PPUSH
1216: CALL_OW 111
// end ; end ; end ;
1220: GO 882
1222: POP
1223: POP
// end ; end_of_file
1224: PPOPN 5
1226: END
// on UnitGoesToRed ( un ) do var i ;
1227: LD_INT 0
1229: PPUSH
// begin if GetSide ( un ) = 1 then
1230: LD_VAR 0 1
1234: PPUSH
1235: CALL_OW 255
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1252
// YouLost ( hunt2 ) ;
1245: LD_STRING hunt2
1247: PPUSH
1248: CALL_OW 104
// if GetSide ( un ) > 1 then
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 255
1261: PUSH
1262: LD_INT 1
1264: GREATER
1265: IFFALSE 1318
// begin for i := 1 to 6 do
1267: LD_ADDR_VAR 0 2
1271: PUSH
1272: DOUBLE
1273: LD_INT 1
1275: DEC
1276: ST_TO_ADDR
1277: LD_INT 6
1279: PUSH
1280: FOR_TO
1281: IFFALSE 1304
// begin wait ( 0 0$1 ) ;
1283: LD_INT 35
1285: PPUSH
1286: CALL_OW 67
// SetLives ( un , 249 ) ;
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 249
1297: PPUSH
1298: CALL_OW 234
// end ;
1302: GO 1280
1304: POP
1305: POP
// SetLives ( un , 1000 ) ;
1306: LD_VAR 0 1
1310: PPUSH
1311: LD_INT 1000
1313: PPUSH
1314: CALL_OW 234
// end ; end ;
1318: PPOPN 2
1320: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1321: LD_VAR 0 1
1325: PUSH
1326: LD_INT 1
1328: EQUAL
1329: PUSH
1330: LD_VAR 0 2
1334: PUSH
1335: LD_INT 1
1337: GREATER
1338: AND
1339: IFFALSE 1348
// YouLost ( hunt1 ) ;
1341: LD_STRING hunt1
1343: PPUSH
1344: CALL_OW 104
// end ;
1348: PPOPN 2
1350: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1351: LD_INT 0
1353: PPUSH
// begin point := 0 ;
1354: LD_ADDR_VAR 0 4
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL_OW 257
1371: PUSH
1372: LD_INT 20
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1391
1380: POP
// point := 10 ; class_horse :
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 10
1388: ST_TO_ADDR
1389: GO 1527
1391: LD_EXP 91
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1412
1401: POP
// point := 10 ; class_baggie :
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 10
1409: ST_TO_ADDR
1410: GO 1527
1412: LD_INT 13
1414: DOUBLE
1415: EQUAL
1416: IFTRUE 1420
1418: GO 1431
1420: POP
// point := 5 ; class_phororhacos :
1421: LD_ADDR_VAR 0 4
1425: PUSH
1426: LD_INT 5
1428: ST_TO_ADDR
1429: GO 1527
1431: LD_INT 18
1433: DOUBLE
1434: EQUAL
1435: IFTRUE 1439
1437: GO 1450
1439: POP
// point := 10 ; class_tiger :
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 10
1447: ST_TO_ADDR
1448: GO 1527
1450: LD_INT 14
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1469
1458: POP
// point := 20 ; class_apeman :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 20
1466: ST_TO_ADDR
1467: GO 1527
1469: LD_INT 12
1471: DOUBLE
1472: EQUAL
1473: IFTRUE 1477
1475: GO 1488
1477: POP
// point := 30 ; class_apeman_soldier :
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: LD_INT 30
1485: ST_TO_ADDR
1486: GO 1527
1488: LD_INT 15
1490: DOUBLE
1491: EQUAL
1492: IFTRUE 1496
1494: GO 1507
1496: POP
// point := 50 ; class_frog :
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: LD_INT 50
1504: ST_TO_ADDR
1505: GO 1527
1507: LD_INT 19
1509: DOUBLE
1510: EQUAL
1511: IFTRUE 1515
1513: GO 1526
1515: POP
// point := 10 ; end ;
1516: LD_ADDR_VAR 0 4
1520: PUSH
1521: LD_INT 10
1523: ST_TO_ADDR
1524: GO 1527
1526: POP
// if point then
1527: LD_VAR 0 4
1531: IFFALSE 1570
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1533: LD_ADDR_EXP 5
1537: PUSH
1538: LD_EXP 5
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_EXP 5
1552: PUSH
1553: LD_VAR 0 2
1557: ARRAY
1558: PUSH
1559: LD_VAR 0 4
1563: PLUS
1564: PPUSH
1565: CALL_OW 1
1569: ST_TO_ADDR
// end ;
1570: PPOPN 4
1572: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1573: LD_INT 22
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: PUSH
1588: LD_INT 10
1590: LESS
1591: IFFALSE 1693
1593: GO 1595
1595: DISABLE
// begin enable ;
1596: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1597: LD_INT 2
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: LD_INT 4
1608: PPUSH
1609: CALL_OW 12
1613: PUSH
1614: LD_INT 0
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 12
1624: PUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 4
1630: PPUSH
1631: CALL_OW 12
1635: PUSH
1636: LD_INT 2
1638: PPUSH
1639: LD_INT 4
1641: PPUSH
1642: CALL_OW 12
1646: PUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 12
1657: PUSH
1658: LD_INT 0
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 12
1668: PUSH
1669: LD_INT 0
1671: PPUSH
1672: LD_INT 4
1674: PPUSH
1675: CALL_OW 12
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL 391 0 3
// end ;
1693: END
// every 0 0$1 do var i ;
1694: GO 1696
1696: DISABLE
1697: LD_INT 0
1699: PPUSH
// begin enable ;
1700: ENABLE
// display_strings := [ ] ;
1701: LD_ADDR_OWVAR 47
1705: PUSH
1706: EMPTY
1707: ST_TO_ADDR
// for i := 1 to huntersAmount do
1708: LD_ADDR_VAR 0 1
1712: PUSH
1713: DOUBLE
1714: LD_INT 1
1716: DEC
1717: ST_TO_ADDR
1718: LD_EXP 3
1722: PUSH
1723: FOR_TO
1724: IFFALSE 1858
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1726: LD_ADDR_OWVAR 47
1730: PUSH
1731: LD_OWVAR 47
1735: PUSH
1736: LD_STRING #player
1738: PUSH
1739: LD_VAR 0 1
1743: STR
1744: PUSH
1745: LD_VAR 0 1
1749: PUSH
1750: LD_EXP 5
1754: PUSH
1755: LD_VAR 0 1
1759: ARRAY
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: ADD
1766: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1767: LD_EXP 5
1771: PUSH
1772: LD_VAR 0 1
1776: ARRAY
1777: PUSH
1778: LD_INT 750
1780: PUSH
1781: LD_INT 1250
1783: PUSH
1784: LD_INT 2000
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_OWVAR 67
1796: ARRAY
1797: GREATEREQUAL
1798: IFFALSE 1856
// begin if i = 1 then
1800: LD_VAR 0 1
1804: PUSH
1805: LD_INT 1
1807: EQUAL
1808: IFFALSE 1849
// begin DialogueOn ;
1810: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1814: LD_STRING ACH_HUNT
1816: PPUSH
1817: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1821: LD_ADDR_OWVAR 47
1825: PUSH
1826: LD_STRING #hunting-win
1828: PUSH
1829: EMPTY
1830: LIST
1831: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1832: LD_INT 175
1834: PPUSH
1835: CALL_OW 68
// YouWin ;
1839: CALL_OW 103
// DialogueOff ;
1843: CALL_OW 7
// end else
1847: GO 1856
// YouLost ( hunt3 ) ;
1849: LD_STRING hunt3
1851: PPUSH
1852: CALL_OW 104
// end ; end ;
1856: GO 1723
1858: POP
1859: POP
// end ; end_of_file end_of_file
1860: PPOPN 1
1862: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1863: LD_INT 0
1865: PPUSH
// if p2 = 100 then
1866: LD_VAR 0 2
1870: PUSH
1871: LD_INT 100
1873: EQUAL
1874: IFFALSE 2823
// begin if not StreamModeActive then
1876: LD_EXP 7
1880: NOT
1881: IFFALSE 1891
// StreamModeActive := true ;
1883: LD_ADDR_EXP 7
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// if p3 = 0 then
1891: LD_VAR 0 3
1895: PUSH
1896: LD_INT 0
1898: EQUAL
1899: IFFALSE 1905
// InitStreamMode ;
1901: CALL 2983 0 0
// if p3 = 1 then
1905: LD_VAR 0 3
1909: PUSH
1910: LD_INT 1
1912: EQUAL
1913: IFFALSE 1923
// sRocket := true ;
1915: LD_ADDR_EXP 12
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// if p3 = 2 then
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 2
1930: EQUAL
1931: IFFALSE 1941
// sSpeed := true ;
1933: LD_ADDR_EXP 11
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// if p3 = 3 then
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 3
1948: EQUAL
1949: IFFALSE 1959
// sEngine := true ;
1951: LD_ADDR_EXP 13
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 4 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 4
1966: EQUAL
1967: IFFALSE 1977
// sSpec := true ;
1969: LD_ADDR_EXP 10
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// if p3 = 5 then
1977: LD_VAR 0 3
1981: PUSH
1982: LD_INT 5
1984: EQUAL
1985: IFFALSE 1995
// sLevel := true ;
1987: LD_ADDR_EXP 14
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if p3 = 6 then
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 6
2002: EQUAL
2003: IFFALSE 2013
// sArmoury := true ;
2005: LD_ADDR_EXP 15
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 7 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 7
2020: EQUAL
2021: IFFALSE 2031
// sRadar := true ;
2023: LD_ADDR_EXP 16
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 8 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 8
2038: EQUAL
2039: IFFALSE 2049
// sBunker := true ;
2041: LD_ADDR_EXP 17
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 9 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 9
2056: EQUAL
2057: IFFALSE 2067
// sHack := true ;
2059: LD_ADDR_EXP 18
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 10 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 10
2074: EQUAL
2075: IFFALSE 2085
// sFire := true ;
2077: LD_ADDR_EXP 19
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 11 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 11
2092: EQUAL
2093: IFFALSE 2103
// sRefresh := true ;
2095: LD_ADDR_EXP 20
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 12 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 12
2110: EQUAL
2111: IFFALSE 2121
// sExp := true ;
2113: LD_ADDR_EXP 21
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 13 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 13
2128: EQUAL
2129: IFFALSE 2139
// sDepot := true ;
2131: LD_ADDR_EXP 22
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 14 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 14
2146: EQUAL
2147: IFFALSE 2157
// sFlag := true ;
2149: LD_ADDR_EXP 23
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 15 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 15
2164: EQUAL
2165: IFFALSE 2175
// sKamikadze := true ;
2167: LD_ADDR_EXP 31
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 16 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 16
2182: EQUAL
2183: IFFALSE 2193
// sTroll := true ;
2185: LD_ADDR_EXP 32
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 17 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 17
2200: EQUAL
2201: IFFALSE 2211
// sSlow := true ;
2203: LD_ADDR_EXP 33
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 18 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 18
2218: EQUAL
2219: IFFALSE 2229
// sLack := true ;
2221: LD_ADDR_EXP 34
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 19 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 19
2236: EQUAL
2237: IFFALSE 2247
// sTank := true ;
2239: LD_ADDR_EXP 36
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 20 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 20
2254: EQUAL
2255: IFFALSE 2265
// sRemote := true ;
2257: LD_ADDR_EXP 37
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 21 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 21
2272: EQUAL
2273: IFFALSE 2283
// sPowell := true ;
2275: LD_ADDR_EXP 38
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 22 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 22
2290: EQUAL
2291: IFFALSE 2301
// sTeleport := true ;
2293: LD_ADDR_EXP 41
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 23 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 23
2308: EQUAL
2309: IFFALSE 2319
// sOilTower := true ;
2311: LD_ADDR_EXP 43
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 24 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 24
2326: EQUAL
2327: IFFALSE 2337
// sShovel := true ;
2329: LD_ADDR_EXP 44
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 25 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 25
2344: EQUAL
2345: IFFALSE 2355
// sSheik := true ;
2347: LD_ADDR_EXP 45
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 26 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 26
2362: EQUAL
2363: IFFALSE 2373
// sEarthquake := true ;
2365: LD_ADDR_EXP 47
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 27 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 27
2380: EQUAL
2381: IFFALSE 2391
// sAI := true ;
2383: LD_ADDR_EXP 48
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 28 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 28
2398: EQUAL
2399: IFFALSE 2409
// sCargo := true ;
2401: LD_ADDR_EXP 51
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 29 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 29
2416: EQUAL
2417: IFFALSE 2427
// sDLaser := true ;
2419: LD_ADDR_EXP 52
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 30 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 30
2434: EQUAL
2435: IFFALSE 2445
// sExchange := true ;
2437: LD_ADDR_EXP 53
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 31 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 31
2452: EQUAL
2453: IFFALSE 2463
// sFac := true ;
2455: LD_ADDR_EXP 54
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 32 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 32
2470: EQUAL
2471: IFFALSE 2481
// sPower := true ;
2473: LD_ADDR_EXP 55
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 33 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 33
2488: EQUAL
2489: IFFALSE 2499
// sRandom := true ;
2491: LD_ADDR_EXP 56
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 34 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 34
2506: EQUAL
2507: IFFALSE 2517
// sShield := true ;
2509: LD_ADDR_EXP 57
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 35 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 35
2524: EQUAL
2525: IFFALSE 2535
// sTime := true ;
2527: LD_ADDR_EXP 58
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 36 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 36
2542: EQUAL
2543: IFFALSE 2553
// sTools := true ;
2545: LD_ADDR_EXP 59
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// if p3 = 101 then
2553: LD_VAR 0 3
2557: PUSH
2558: LD_INT 101
2560: EQUAL
2561: IFFALSE 2571
// sSold := true ;
2563: LD_ADDR_EXP 24
2567: PUSH
2568: LD_INT 1
2570: ST_TO_ADDR
// if p3 = 102 then
2571: LD_VAR 0 3
2575: PUSH
2576: LD_INT 102
2578: EQUAL
2579: IFFALSE 2589
// sDiff := true ;
2581: LD_ADDR_EXP 25
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// if p3 = 103 then
2589: LD_VAR 0 3
2593: PUSH
2594: LD_INT 103
2596: EQUAL
2597: IFFALSE 2607
// sFog := true ;
2599: LD_ADDR_EXP 28
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if p3 = 104 then
2607: LD_VAR 0 3
2611: PUSH
2612: LD_INT 104
2614: EQUAL
2615: IFFALSE 2625
// sReset := true ;
2617: LD_ADDR_EXP 29
2621: PUSH
2622: LD_INT 1
2624: ST_TO_ADDR
// if p3 = 105 then
2625: LD_VAR 0 3
2629: PUSH
2630: LD_INT 105
2632: EQUAL
2633: IFFALSE 2643
// sSun := true ;
2635: LD_ADDR_EXP 30
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// if p3 = 106 then
2643: LD_VAR 0 3
2647: PUSH
2648: LD_INT 106
2650: EQUAL
2651: IFFALSE 2661
// sTiger := true ;
2653: LD_ADDR_EXP 26
2657: PUSH
2658: LD_INT 1
2660: ST_TO_ADDR
// if p3 = 107 then
2661: LD_VAR 0 3
2665: PUSH
2666: LD_INT 107
2668: EQUAL
2669: IFFALSE 2679
// sBomb := true ;
2671: LD_ADDR_EXP 27
2675: PUSH
2676: LD_INT 1
2678: ST_TO_ADDR
// if p3 = 108 then
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 108
2686: EQUAL
2687: IFFALSE 2697
// sWound := true ;
2689: LD_ADDR_EXP 35
2693: PUSH
2694: LD_INT 1
2696: ST_TO_ADDR
// if p3 = 109 then
2697: LD_VAR 0 3
2701: PUSH
2702: LD_INT 109
2704: EQUAL
2705: IFFALSE 2715
// sBetray := true ;
2707: LD_ADDR_EXP 39
2711: PUSH
2712: LD_INT 1
2714: ST_TO_ADDR
// if p3 = 110 then
2715: LD_VAR 0 3
2719: PUSH
2720: LD_INT 110
2722: EQUAL
2723: IFFALSE 2733
// sContamin := true ;
2725: LD_ADDR_EXP 40
2729: PUSH
2730: LD_INT 1
2732: ST_TO_ADDR
// if p3 = 111 then
2733: LD_VAR 0 3
2737: PUSH
2738: LD_INT 111
2740: EQUAL
2741: IFFALSE 2751
// sOil := true ;
2743: LD_ADDR_EXP 42
2747: PUSH
2748: LD_INT 1
2750: ST_TO_ADDR
// if p3 = 112 then
2751: LD_VAR 0 3
2755: PUSH
2756: LD_INT 112
2758: EQUAL
2759: IFFALSE 2769
// sStu := true ;
2761: LD_ADDR_EXP 46
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// if p3 = 113 then
2769: LD_VAR 0 3
2773: PUSH
2774: LD_INT 113
2776: EQUAL
2777: IFFALSE 2787
// sBazooka := true ;
2779: LD_ADDR_EXP 49
2783: PUSH
2784: LD_INT 1
2786: ST_TO_ADDR
// if p3 = 114 then
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 114
2794: EQUAL
2795: IFFALSE 2805
// sMortar := true ;
2797: LD_ADDR_EXP 50
2801: PUSH
2802: LD_INT 1
2804: ST_TO_ADDR
// if p3 = 115 then
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 115
2812: EQUAL
2813: IFFALSE 2823
// sRanger := true ;
2815: LD_ADDR_EXP 60
2819: PUSH
2820: LD_INT 1
2822: ST_TO_ADDR
// end ; if p2 = 101 then
2823: LD_VAR 0 2
2827: PUSH
2828: LD_INT 101
2830: EQUAL
2831: IFFALSE 2959
// begin case p3 of 1 :
2833: LD_VAR 0 3
2837: PUSH
2838: LD_INT 1
2840: DOUBLE
2841: EQUAL
2842: IFTRUE 2846
2844: GO 2853
2846: POP
// hHackUnlimitedResources ; 2 :
2847: CALL 13996 0 0
2851: GO 2959
2853: LD_INT 2
2855: DOUBLE
2856: EQUAL
2857: IFTRUE 2861
2859: GO 2868
2861: POP
// hHackSetLevel10 ; 3 :
2862: CALL 14129 0 0
2866: GO 2959
2868: LD_INT 3
2870: DOUBLE
2871: EQUAL
2872: IFTRUE 2876
2874: GO 2883
2876: POP
// hHackSetLevel10YourUnits ; 4 :
2877: CALL 14214 0 0
2881: GO 2959
2883: LD_INT 4
2885: DOUBLE
2886: EQUAL
2887: IFTRUE 2891
2889: GO 2898
2891: POP
// hHackInvincible ; 5 :
2892: CALL 14662 0 0
2896: GO 2959
2898: LD_INT 5
2900: DOUBLE
2901: EQUAL
2902: IFTRUE 2906
2904: GO 2913
2906: POP
// hHackInvisible ; 6 :
2907: CALL 14773 0 0
2911: GO 2959
2913: LD_INT 6
2915: DOUBLE
2916: EQUAL
2917: IFTRUE 2921
2919: GO 2928
2921: POP
// hHackChangeYourSide ; 7 :
2922: CALL 14830 0 0
2926: GO 2959
2928: LD_INT 7
2930: DOUBLE
2931: EQUAL
2932: IFTRUE 2936
2934: GO 2943
2936: POP
// hHackChangeUnitSide ; 8 :
2937: CALL 14872 0 0
2941: GO 2959
2943: LD_INT 8
2945: DOUBLE
2946: EQUAL
2947: IFTRUE 2951
2949: GO 2958
2951: POP
// hHackFog ; end ;
2952: CALL 14973 0 0
2956: GO 2959
2958: POP
// end ; end ;
2959: LD_VAR 0 7
2963: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
2964: GO 2966
2966: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2967: LD_STRING initStreamRollete();
2969: PPUSH
2970: CALL_OW 559
// InitStreamMode ;
2974: CALL 2983 0 0
// DefineStreamItems ( ) ;
2978: CALL 3423 0 0
// end ;
2982: END
// function InitStreamMode ; begin
2983: LD_INT 0
2985: PPUSH
// streamModeActive := false ;
2986: LD_ADDR_EXP 7
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// normalCounter := 36 ;
2994: LD_ADDR_EXP 8
2998: PUSH
2999: LD_INT 36
3001: ST_TO_ADDR
// hardcoreCounter := 16 ;
3002: LD_ADDR_EXP 9
3006: PUSH
3007: LD_INT 16
3009: ST_TO_ADDR
// sRocket := false ;
3010: LD_ADDR_EXP 12
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// sSpeed := false ;
3018: LD_ADDR_EXP 11
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// sEngine := false ;
3026: LD_ADDR_EXP 13
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// sSpec := false ;
3034: LD_ADDR_EXP 10
3038: PUSH
3039: LD_INT 0
3041: ST_TO_ADDR
// sLevel := false ;
3042: LD_ADDR_EXP 14
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// sArmoury := false ;
3050: LD_ADDR_EXP 15
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// sRadar := false ;
3058: LD_ADDR_EXP 16
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// sBunker := false ;
3066: LD_ADDR_EXP 17
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// sHack := false ;
3074: LD_ADDR_EXP 18
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// sFire := false ;
3082: LD_ADDR_EXP 19
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// sRefresh := false ;
3090: LD_ADDR_EXP 20
3094: PUSH
3095: LD_INT 0
3097: ST_TO_ADDR
// sExp := false ;
3098: LD_ADDR_EXP 21
3102: PUSH
3103: LD_INT 0
3105: ST_TO_ADDR
// sDepot := false ;
3106: LD_ADDR_EXP 22
3110: PUSH
3111: LD_INT 0
3113: ST_TO_ADDR
// sFlag := false ;
3114: LD_ADDR_EXP 23
3118: PUSH
3119: LD_INT 0
3121: ST_TO_ADDR
// sKamikadze := false ;
3122: LD_ADDR_EXP 31
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// sTroll := false ;
3130: LD_ADDR_EXP 32
3134: PUSH
3135: LD_INT 0
3137: ST_TO_ADDR
// sSlow := false ;
3138: LD_ADDR_EXP 33
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// sLack := false ;
3146: LD_ADDR_EXP 34
3150: PUSH
3151: LD_INT 0
3153: ST_TO_ADDR
// sTank := false ;
3154: LD_ADDR_EXP 36
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// sRemote := false ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// sPowell := false ;
3170: LD_ADDR_EXP 38
3174: PUSH
3175: LD_INT 0
3177: ST_TO_ADDR
// sTeleport := false ;
3178: LD_ADDR_EXP 41
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// sOilTower := false ;
3186: LD_ADDR_EXP 43
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// sShovel := false ;
3194: LD_ADDR_EXP 44
3198: PUSH
3199: LD_INT 0
3201: ST_TO_ADDR
// sSheik := false ;
3202: LD_ADDR_EXP 45
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// sEarthquake := false ;
3210: LD_ADDR_EXP 47
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// sAI := false ;
3218: LD_ADDR_EXP 48
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// sCargo := false ;
3226: LD_ADDR_EXP 51
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// sDLaser := false ;
3234: LD_ADDR_EXP 52
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// sExchange := false ;
3242: LD_ADDR_EXP 53
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// sFac := false ;
3250: LD_ADDR_EXP 54
3254: PUSH
3255: LD_INT 0
3257: ST_TO_ADDR
// sPower := false ;
3258: LD_ADDR_EXP 55
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// sRandom := false ;
3266: LD_ADDR_EXP 56
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// sShield := false ;
3274: LD_ADDR_EXP 57
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// sTime := false ;
3282: LD_ADDR_EXP 58
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// sTools := false ;
3290: LD_ADDR_EXP 59
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// sSold := false ;
3298: LD_ADDR_EXP 24
3302: PUSH
3303: LD_INT 0
3305: ST_TO_ADDR
// sDiff := false ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 0
3313: ST_TO_ADDR
// sFog := false ;
3314: LD_ADDR_EXP 28
3318: PUSH
3319: LD_INT 0
3321: ST_TO_ADDR
// sReset := false ;
3322: LD_ADDR_EXP 29
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// sSun := false ;
3330: LD_ADDR_EXP 30
3334: PUSH
3335: LD_INT 0
3337: ST_TO_ADDR
// sTiger := false ;
3338: LD_ADDR_EXP 26
3342: PUSH
3343: LD_INT 0
3345: ST_TO_ADDR
// sBomb := false ;
3346: LD_ADDR_EXP 27
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// sWound := false ;
3354: LD_ADDR_EXP 35
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// sBetray := false ;
3362: LD_ADDR_EXP 39
3366: PUSH
3367: LD_INT 0
3369: ST_TO_ADDR
// sContamin := false ;
3370: LD_ADDR_EXP 40
3374: PUSH
3375: LD_INT 0
3377: ST_TO_ADDR
// sOil := false ;
3378: LD_ADDR_EXP 42
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sStu := false ;
3386: LD_ADDR_EXP 46
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sBazooka := false ;
3394: LD_ADDR_EXP 49
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// sMortar := false ;
3402: LD_ADDR_EXP 50
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// sRanger := false ;
3410: LD_ADDR_EXP 60
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// end ;
3418: LD_VAR 0 1
3422: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// result := [ ] ;
3430: LD_ADDR_VAR 0 1
3434: PUSH
3435: EMPTY
3436: ST_TO_ADDR
// if campaign_id = 1 then
3437: LD_OWVAR 69
3441: PUSH
3442: LD_INT 1
3444: EQUAL
3445: IFFALSE 6383
// begin case mission_number of 1 :
3447: LD_OWVAR 70
3451: PUSH
3452: LD_INT 1
3454: DOUBLE
3455: EQUAL
3456: IFTRUE 3460
3458: GO 3524
3460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: LD_INT 2
3468: PUSH
3469: LD_INT 4
3471: PUSH
3472: LD_INT 11
3474: PUSH
3475: LD_INT 12
3477: PUSH
3478: LD_INT 15
3480: PUSH
3481: LD_INT 16
3483: PUSH
3484: LD_INT 22
3486: PUSH
3487: LD_INT 23
3489: PUSH
3490: LD_INT 26
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 101
3506: PUSH
3507: LD_INT 102
3509: PUSH
3510: LD_INT 106
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: ST_TO_ADDR
3522: GO 6381
3524: LD_INT 2
3526: DOUBLE
3527: EQUAL
3528: IFTRUE 3532
3530: GO 3604
3532: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3533: LD_ADDR_VAR 0 1
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 11
3546: PUSH
3547: LD_INT 12
3549: PUSH
3550: LD_INT 15
3552: PUSH
3553: LD_INT 16
3555: PUSH
3556: LD_INT 22
3558: PUSH
3559: LD_INT 23
3561: PUSH
3562: LD_INT 26
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 101
3578: PUSH
3579: LD_INT 102
3581: PUSH
3582: LD_INT 105
3584: PUSH
3585: LD_INT 106
3587: PUSH
3588: LD_INT 108
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: ST_TO_ADDR
3602: GO 6381
3604: LD_INT 3
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3612
3610: GO 3688
3612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3613: LD_ADDR_VAR 0 1
3617: PUSH
3618: LD_INT 2
3620: PUSH
3621: LD_INT 4
3623: PUSH
3624: LD_INT 5
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 15
3635: PUSH
3636: LD_INT 16
3638: PUSH
3639: LD_INT 22
3641: PUSH
3642: LD_INT 26
3644: PUSH
3645: LD_INT 36
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 101
3662: PUSH
3663: LD_INT 102
3665: PUSH
3666: LD_INT 105
3668: PUSH
3669: LD_INT 106
3671: PUSH
3672: LD_INT 108
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
3686: GO 6381
3688: LD_INT 4
3690: DOUBLE
3691: EQUAL
3692: IFTRUE 3696
3694: GO 3780
3696: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3697: LD_ADDR_VAR 0 1
3701: PUSH
3702: LD_INT 2
3704: PUSH
3705: LD_INT 4
3707: PUSH
3708: LD_INT 5
3710: PUSH
3711: LD_INT 8
3713: PUSH
3714: LD_INT 11
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 15
3722: PUSH
3723: LD_INT 16
3725: PUSH
3726: LD_INT 22
3728: PUSH
3729: LD_INT 23
3731: PUSH
3732: LD_INT 26
3734: PUSH
3735: LD_INT 36
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 101
3754: PUSH
3755: LD_INT 102
3757: PUSH
3758: LD_INT 105
3760: PUSH
3761: LD_INT 106
3763: PUSH
3764: LD_INT 108
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: ST_TO_ADDR
3778: GO 6381
3780: LD_INT 5
3782: DOUBLE
3783: EQUAL
3784: IFTRUE 3788
3786: GO 3888
3788: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3789: LD_ADDR_VAR 0 1
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 5
3802: PUSH
3803: LD_INT 6
3805: PUSH
3806: LD_INT 8
3808: PUSH
3809: LD_INT 11
3811: PUSH
3812: LD_INT 12
3814: PUSH
3815: LD_INT 15
3817: PUSH
3818: LD_INT 16
3820: PUSH
3821: LD_INT 22
3823: PUSH
3824: LD_INT 23
3826: PUSH
3827: LD_INT 25
3829: PUSH
3830: LD_INT 26
3832: PUSH
3833: LD_INT 36
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 101
3854: PUSH
3855: LD_INT 102
3857: PUSH
3858: LD_INT 105
3860: PUSH
3861: LD_INT 106
3863: PUSH
3864: LD_INT 108
3866: PUSH
3867: LD_INT 109
3869: PUSH
3870: LD_INT 112
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 6381
3888: LD_INT 6
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4016
3896: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3897: LD_ADDR_VAR 0 1
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 4
3907: PUSH
3908: LD_INT 5
3910: PUSH
3911: LD_INT 6
3913: PUSH
3914: LD_INT 8
3916: PUSH
3917: LD_INT 11
3919: PUSH
3920: LD_INT 12
3922: PUSH
3923: LD_INT 15
3925: PUSH
3926: LD_INT 16
3928: PUSH
3929: LD_INT 20
3931: PUSH
3932: LD_INT 21
3934: PUSH
3935: LD_INT 22
3937: PUSH
3938: LD_INT 23
3940: PUSH
3941: LD_INT 25
3943: PUSH
3944: LD_INT 26
3946: PUSH
3947: LD_INT 30
3949: PUSH
3950: LD_INT 31
3952: PUSH
3953: LD_INT 32
3955: PUSH
3956: LD_INT 36
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PUSH
3980: LD_INT 101
3982: PUSH
3983: LD_INT 102
3985: PUSH
3986: LD_INT 105
3988: PUSH
3989: LD_INT 106
3991: PUSH
3992: LD_INT 108
3994: PUSH
3995: LD_INT 109
3997: PUSH
3998: LD_INT 112
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: ST_TO_ADDR
4014: GO 6381
4016: LD_INT 7
4018: DOUBLE
4019: EQUAL
4020: IFTRUE 4024
4022: GO 4124
4024: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4025: LD_ADDR_VAR 0 1
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 4
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: LD_INT 7
4041: PUSH
4042: LD_INT 11
4044: PUSH
4045: LD_INT 12
4047: PUSH
4048: LD_INT 15
4050: PUSH
4051: LD_INT 16
4053: PUSH
4054: LD_INT 20
4056: PUSH
4057: LD_INT 21
4059: PUSH
4060: LD_INT 22
4062: PUSH
4063: LD_INT 23
4065: PUSH
4066: LD_INT 25
4068: PUSH
4069: LD_INT 26
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 101
4090: PUSH
4091: LD_INT 102
4093: PUSH
4094: LD_INT 103
4096: PUSH
4097: LD_INT 105
4099: PUSH
4100: LD_INT 106
4102: PUSH
4103: LD_INT 108
4105: PUSH
4106: LD_INT 112
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: ST_TO_ADDR
4122: GO 6381
4124: LD_INT 8
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4260
4132: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4133: LD_ADDR_VAR 0 1
4137: PUSH
4138: LD_INT 2
4140: PUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 6
4149: PUSH
4150: LD_INT 7
4152: PUSH
4153: LD_INT 8
4155: PUSH
4156: LD_INT 11
4158: PUSH
4159: LD_INT 12
4161: PUSH
4162: LD_INT 15
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: LD_INT 20
4170: PUSH
4171: LD_INT 21
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 23
4179: PUSH
4180: LD_INT 25
4182: PUSH
4183: LD_INT 26
4185: PUSH
4186: LD_INT 30
4188: PUSH
4189: LD_INT 31
4191: PUSH
4192: LD_INT 32
4194: PUSH
4195: LD_INT 36
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 101
4222: PUSH
4223: LD_INT 102
4225: PUSH
4226: LD_INT 103
4228: PUSH
4229: LD_INT 105
4231: PUSH
4232: LD_INT 106
4234: PUSH
4235: LD_INT 108
4237: PUSH
4238: LD_INT 109
4240: PUSH
4241: LD_INT 112
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: ST_TO_ADDR
4258: GO 6381
4260: LD_INT 9
4262: DOUBLE
4263: EQUAL
4264: IFTRUE 4268
4266: GO 4404
4268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 2
4276: PUSH
4277: LD_INT 4
4279: PUSH
4280: LD_INT 5
4282: PUSH
4283: LD_INT 6
4285: PUSH
4286: LD_INT 7
4288: PUSH
4289: LD_INT 8
4291: PUSH
4292: LD_INT 11
4294: PUSH
4295: LD_INT 12
4297: PUSH
4298: LD_INT 15
4300: PUSH
4301: LD_INT 16
4303: PUSH
4304: LD_INT 20
4306: PUSH
4307: LD_INT 21
4309: PUSH
4310: LD_INT 22
4312: PUSH
4313: LD_INT 23
4315: PUSH
4316: LD_INT 25
4318: PUSH
4319: LD_INT 26
4321: PUSH
4322: LD_INT 28
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 31
4330: PUSH
4331: LD_INT 32
4333: PUSH
4334: LD_INT 36
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 101
4362: PUSH
4363: LD_INT 102
4365: PUSH
4366: LD_INT 103
4368: PUSH
4369: LD_INT 105
4371: PUSH
4372: LD_INT 106
4374: PUSH
4375: LD_INT 108
4377: PUSH
4378: LD_INT 109
4380: PUSH
4381: LD_INT 112
4383: PUSH
4384: LD_INT 114
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: ST_TO_ADDR
4402: GO 6381
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4596
4412: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4413: LD_ADDR_VAR 0 1
4417: PUSH
4418: LD_INT 2
4420: PUSH
4421: LD_INT 4
4423: PUSH
4424: LD_INT 5
4426: PUSH
4427: LD_INT 6
4429: PUSH
4430: LD_INT 7
4432: PUSH
4433: LD_INT 8
4435: PUSH
4436: LD_INT 9
4438: PUSH
4439: LD_INT 10
4441: PUSH
4442: LD_INT 11
4444: PUSH
4445: LD_INT 12
4447: PUSH
4448: LD_INT 13
4450: PUSH
4451: LD_INT 14
4453: PUSH
4454: LD_INT 15
4456: PUSH
4457: LD_INT 16
4459: PUSH
4460: LD_INT 17
4462: PUSH
4463: LD_INT 18
4465: PUSH
4466: LD_INT 19
4468: PUSH
4469: LD_INT 20
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 23
4480: PUSH
4481: LD_INT 24
4483: PUSH
4484: LD_INT 25
4486: PUSH
4487: LD_INT 26
4489: PUSH
4490: LD_INT 28
4492: PUSH
4493: LD_INT 30
4495: PUSH
4496: LD_INT 31
4498: PUSH
4499: LD_INT 32
4501: PUSH
4502: LD_INT 36
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: PUSH
4536: LD_INT 101
4538: PUSH
4539: LD_INT 102
4541: PUSH
4542: LD_INT 103
4544: PUSH
4545: LD_INT 104
4547: PUSH
4548: LD_INT 105
4550: PUSH
4551: LD_INT 106
4553: PUSH
4554: LD_INT 107
4556: PUSH
4557: LD_INT 108
4559: PUSH
4560: LD_INT 109
4562: PUSH
4563: LD_INT 110
4565: PUSH
4566: LD_INT 111
4568: PUSH
4569: LD_INT 112
4571: PUSH
4572: LD_INT 114
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: ST_TO_ADDR
4594: GO 6381
4596: LD_INT 11
4598: DOUBLE
4599: EQUAL
4600: IFTRUE 4604
4602: GO 4796
4604: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4605: LD_ADDR_VAR 0 1
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: LD_INT 3
4615: PUSH
4616: LD_INT 4
4618: PUSH
4619: LD_INT 5
4621: PUSH
4622: LD_INT 6
4624: PUSH
4625: LD_INT 7
4627: PUSH
4628: LD_INT 8
4630: PUSH
4631: LD_INT 9
4633: PUSH
4634: LD_INT 10
4636: PUSH
4637: LD_INT 11
4639: PUSH
4640: LD_INT 12
4642: PUSH
4643: LD_INT 13
4645: PUSH
4646: LD_INT 14
4648: PUSH
4649: LD_INT 15
4651: PUSH
4652: LD_INT 16
4654: PUSH
4655: LD_INT 17
4657: PUSH
4658: LD_INT 18
4660: PUSH
4661: LD_INT 19
4663: PUSH
4664: LD_INT 20
4666: PUSH
4667: LD_INT 21
4669: PUSH
4670: LD_INT 22
4672: PUSH
4673: LD_INT 23
4675: PUSH
4676: LD_INT 24
4678: PUSH
4679: LD_INT 25
4681: PUSH
4682: LD_INT 26
4684: PUSH
4685: LD_INT 28
4687: PUSH
4688: LD_INT 30
4690: PUSH
4691: LD_INT 31
4693: PUSH
4694: LD_INT 32
4696: PUSH
4697: LD_INT 34
4699: PUSH
4700: LD_INT 36
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 101
4738: PUSH
4739: LD_INT 102
4741: PUSH
4742: LD_INT 103
4744: PUSH
4745: LD_INT 104
4747: PUSH
4748: LD_INT 105
4750: PUSH
4751: LD_INT 106
4753: PUSH
4754: LD_INT 107
4756: PUSH
4757: LD_INT 108
4759: PUSH
4760: LD_INT 109
4762: PUSH
4763: LD_INT 110
4765: PUSH
4766: LD_INT 111
4768: PUSH
4769: LD_INT 112
4771: PUSH
4772: LD_INT 114
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
4794: GO 6381
4796: LD_INT 12
4798: DOUBLE
4799: EQUAL
4800: IFTRUE 4804
4802: GO 5012
4804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4805: LD_ADDR_VAR 0 1
4809: PUSH
4810: LD_INT 1
4812: PUSH
4813: LD_INT 2
4815: PUSH
4816: LD_INT 3
4818: PUSH
4819: LD_INT 4
4821: PUSH
4822: LD_INT 5
4824: PUSH
4825: LD_INT 6
4827: PUSH
4828: LD_INT 7
4830: PUSH
4831: LD_INT 8
4833: PUSH
4834: LD_INT 9
4836: PUSH
4837: LD_INT 10
4839: PUSH
4840: LD_INT 11
4842: PUSH
4843: LD_INT 12
4845: PUSH
4846: LD_INT 13
4848: PUSH
4849: LD_INT 14
4851: PUSH
4852: LD_INT 15
4854: PUSH
4855: LD_INT 16
4857: PUSH
4858: LD_INT 17
4860: PUSH
4861: LD_INT 18
4863: PUSH
4864: LD_INT 19
4866: PUSH
4867: LD_INT 20
4869: PUSH
4870: LD_INT 21
4872: PUSH
4873: LD_INT 22
4875: PUSH
4876: LD_INT 23
4878: PUSH
4879: LD_INT 24
4881: PUSH
4882: LD_INT 25
4884: PUSH
4885: LD_INT 26
4887: PUSH
4888: LD_INT 27
4890: PUSH
4891: LD_INT 28
4893: PUSH
4894: LD_INT 30
4896: PUSH
4897: LD_INT 31
4899: PUSH
4900: LD_INT 32
4902: PUSH
4903: LD_INT 33
4905: PUSH
4906: LD_INT 34
4908: PUSH
4909: LD_INT 36
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 101
4950: PUSH
4951: LD_INT 102
4953: PUSH
4954: LD_INT 103
4956: PUSH
4957: LD_INT 104
4959: PUSH
4960: LD_INT 105
4962: PUSH
4963: LD_INT 106
4965: PUSH
4966: LD_INT 107
4968: PUSH
4969: LD_INT 108
4971: PUSH
4972: LD_INT 109
4974: PUSH
4975: LD_INT 110
4977: PUSH
4978: LD_INT 111
4980: PUSH
4981: LD_INT 112
4983: PUSH
4984: LD_INT 113
4986: PUSH
4987: LD_INT 114
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: ST_TO_ADDR
5010: GO 6381
5012: LD_INT 13
5014: DOUBLE
5015: EQUAL
5016: IFTRUE 5020
5018: GO 5216
5020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5021: LD_ADDR_VAR 0 1
5025: PUSH
5026: LD_INT 1
5028: PUSH
5029: LD_INT 2
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: LD_INT 4
5037: PUSH
5038: LD_INT 5
5040: PUSH
5041: LD_INT 8
5043: PUSH
5044: LD_INT 9
5046: PUSH
5047: LD_INT 10
5049: PUSH
5050: LD_INT 11
5052: PUSH
5053: LD_INT 12
5055: PUSH
5056: LD_INT 14
5058: PUSH
5059: LD_INT 15
5061: PUSH
5062: LD_INT 16
5064: PUSH
5065: LD_INT 17
5067: PUSH
5068: LD_INT 18
5070: PUSH
5071: LD_INT 19
5073: PUSH
5074: LD_INT 20
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 23
5085: PUSH
5086: LD_INT 24
5088: PUSH
5089: LD_INT 25
5091: PUSH
5092: LD_INT 26
5094: PUSH
5095: LD_INT 27
5097: PUSH
5098: LD_INT 28
5100: PUSH
5101: LD_INT 30
5103: PUSH
5104: LD_INT 31
5106: PUSH
5107: LD_INT 32
5109: PUSH
5110: LD_INT 33
5112: PUSH
5113: LD_INT 34
5115: PUSH
5116: LD_INT 36
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 101
5154: PUSH
5155: LD_INT 102
5157: PUSH
5158: LD_INT 103
5160: PUSH
5161: LD_INT 104
5163: PUSH
5164: LD_INT 105
5166: PUSH
5167: LD_INT 106
5169: PUSH
5170: LD_INT 107
5172: PUSH
5173: LD_INT 108
5175: PUSH
5176: LD_INT 109
5178: PUSH
5179: LD_INT 110
5181: PUSH
5182: LD_INT 111
5184: PUSH
5185: LD_INT 112
5187: PUSH
5188: LD_INT 113
5190: PUSH
5191: LD_INT 114
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 6381
5216: LD_INT 14
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5436
5224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5225: LD_ADDR_VAR 0 1
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: LD_INT 2
5235: PUSH
5236: LD_INT 3
5238: PUSH
5239: LD_INT 4
5241: PUSH
5242: LD_INT 5
5244: PUSH
5245: LD_INT 6
5247: PUSH
5248: LD_INT 7
5250: PUSH
5251: LD_INT 8
5253: PUSH
5254: LD_INT 9
5256: PUSH
5257: LD_INT 10
5259: PUSH
5260: LD_INT 11
5262: PUSH
5263: LD_INT 12
5265: PUSH
5266: LD_INT 13
5268: PUSH
5269: LD_INT 14
5271: PUSH
5272: LD_INT 15
5274: PUSH
5275: LD_INT 16
5277: PUSH
5278: LD_INT 17
5280: PUSH
5281: LD_INT 18
5283: PUSH
5284: LD_INT 19
5286: PUSH
5287: LD_INT 20
5289: PUSH
5290: LD_INT 21
5292: PUSH
5293: LD_INT 22
5295: PUSH
5296: LD_INT 23
5298: PUSH
5299: LD_INT 24
5301: PUSH
5302: LD_INT 25
5304: PUSH
5305: LD_INT 26
5307: PUSH
5308: LD_INT 27
5310: PUSH
5311: LD_INT 28
5313: PUSH
5314: LD_INT 29
5316: PUSH
5317: LD_INT 30
5319: PUSH
5320: LD_INT 31
5322: PUSH
5323: LD_INT 32
5325: PUSH
5326: LD_INT 33
5328: PUSH
5329: LD_INT 34
5331: PUSH
5332: LD_INT 36
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 101
5374: PUSH
5375: LD_INT 102
5377: PUSH
5378: LD_INT 103
5380: PUSH
5381: LD_INT 104
5383: PUSH
5384: LD_INT 105
5386: PUSH
5387: LD_INT 106
5389: PUSH
5390: LD_INT 107
5392: PUSH
5393: LD_INT 108
5395: PUSH
5396: LD_INT 109
5398: PUSH
5399: LD_INT 110
5401: PUSH
5402: LD_INT 111
5404: PUSH
5405: LD_INT 112
5407: PUSH
5408: LD_INT 113
5410: PUSH
5411: LD_INT 114
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: ST_TO_ADDR
5434: GO 6381
5436: LD_INT 15
5438: DOUBLE
5439: EQUAL
5440: IFTRUE 5444
5442: GO 5656
5444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5445: LD_ADDR_VAR 0 1
5449: PUSH
5450: LD_INT 1
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 3
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: LD_INT 5
5464: PUSH
5465: LD_INT 6
5467: PUSH
5468: LD_INT 7
5470: PUSH
5471: LD_INT 8
5473: PUSH
5474: LD_INT 9
5476: PUSH
5477: LD_INT 10
5479: PUSH
5480: LD_INT 11
5482: PUSH
5483: LD_INT 12
5485: PUSH
5486: LD_INT 13
5488: PUSH
5489: LD_INT 14
5491: PUSH
5492: LD_INT 15
5494: PUSH
5495: LD_INT 16
5497: PUSH
5498: LD_INT 17
5500: PUSH
5501: LD_INT 18
5503: PUSH
5504: LD_INT 19
5506: PUSH
5507: LD_INT 20
5509: PUSH
5510: LD_INT 21
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 23
5518: PUSH
5519: LD_INT 24
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 26
5527: PUSH
5528: LD_INT 27
5530: PUSH
5531: LD_INT 28
5533: PUSH
5534: LD_INT 29
5536: PUSH
5537: LD_INT 30
5539: PUSH
5540: LD_INT 31
5542: PUSH
5543: LD_INT 32
5545: PUSH
5546: LD_INT 33
5548: PUSH
5549: LD_INT 34
5551: PUSH
5552: LD_INT 36
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 101
5594: PUSH
5595: LD_INT 102
5597: PUSH
5598: LD_INT 103
5600: PUSH
5601: LD_INT 104
5603: PUSH
5604: LD_INT 105
5606: PUSH
5607: LD_INT 106
5609: PUSH
5610: LD_INT 107
5612: PUSH
5613: LD_INT 108
5615: PUSH
5616: LD_INT 109
5618: PUSH
5619: LD_INT 110
5621: PUSH
5622: LD_INT 111
5624: PUSH
5625: LD_INT 112
5627: PUSH
5628: LD_INT 113
5630: PUSH
5631: LD_INT 114
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: ST_TO_ADDR
5654: GO 6381
5656: LD_INT 16
5658: DOUBLE
5659: EQUAL
5660: IFTRUE 5664
5662: GO 5788
5664: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5665: LD_ADDR_VAR 0 1
5669: PUSH
5670: LD_INT 2
5672: PUSH
5673: LD_INT 4
5675: PUSH
5676: LD_INT 5
5678: PUSH
5679: LD_INT 7
5681: PUSH
5682: LD_INT 11
5684: PUSH
5685: LD_INT 12
5687: PUSH
5688: LD_INT 15
5690: PUSH
5691: LD_INT 16
5693: PUSH
5694: LD_INT 20
5696: PUSH
5697: LD_INT 21
5699: PUSH
5700: LD_INT 22
5702: PUSH
5703: LD_INT 23
5705: PUSH
5706: LD_INT 25
5708: PUSH
5709: LD_INT 26
5711: PUSH
5712: LD_INT 30
5714: PUSH
5715: LD_INT 31
5717: PUSH
5718: LD_INT 32
5720: PUSH
5721: LD_INT 33
5723: PUSH
5724: LD_INT 34
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 101
5750: PUSH
5751: LD_INT 102
5753: PUSH
5754: LD_INT 103
5756: PUSH
5757: LD_INT 106
5759: PUSH
5760: LD_INT 108
5762: PUSH
5763: LD_INT 112
5765: PUSH
5766: LD_INT 113
5768: PUSH
5769: LD_INT 114
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: ST_TO_ADDR
5786: GO 6381
5788: LD_INT 17
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5796
5794: GO 6008
5796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5797: LD_ADDR_VAR 0 1
5801: PUSH
5802: LD_INT 1
5804: PUSH
5805: LD_INT 2
5807: PUSH
5808: LD_INT 3
5810: PUSH
5811: LD_INT 4
5813: PUSH
5814: LD_INT 5
5816: PUSH
5817: LD_INT 6
5819: PUSH
5820: LD_INT 7
5822: PUSH
5823: LD_INT 8
5825: PUSH
5826: LD_INT 9
5828: PUSH
5829: LD_INT 10
5831: PUSH
5832: LD_INT 11
5834: PUSH
5835: LD_INT 12
5837: PUSH
5838: LD_INT 13
5840: PUSH
5841: LD_INT 14
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 16
5849: PUSH
5850: LD_INT 17
5852: PUSH
5853: LD_INT 18
5855: PUSH
5856: LD_INT 19
5858: PUSH
5859: LD_INT 20
5861: PUSH
5862: LD_INT 21
5864: PUSH
5865: LD_INT 22
5867: PUSH
5868: LD_INT 23
5870: PUSH
5871: LD_INT 24
5873: PUSH
5874: LD_INT 25
5876: PUSH
5877: LD_INT 26
5879: PUSH
5880: LD_INT 27
5882: PUSH
5883: LD_INT 28
5885: PUSH
5886: LD_INT 29
5888: PUSH
5889: LD_INT 30
5891: PUSH
5892: LD_INT 31
5894: PUSH
5895: LD_INT 32
5897: PUSH
5898: LD_INT 33
5900: PUSH
5901: LD_INT 34
5903: PUSH
5904: LD_INT 36
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 101
5946: PUSH
5947: LD_INT 102
5949: PUSH
5950: LD_INT 103
5952: PUSH
5953: LD_INT 104
5955: PUSH
5956: LD_INT 105
5958: PUSH
5959: LD_INT 106
5961: PUSH
5962: LD_INT 107
5964: PUSH
5965: LD_INT 108
5967: PUSH
5968: LD_INT 109
5970: PUSH
5971: LD_INT 110
5973: PUSH
5974: LD_INT 111
5976: PUSH
5977: LD_INT 112
5979: PUSH
5980: LD_INT 113
5982: PUSH
5983: LD_INT 114
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: ST_TO_ADDR
6006: GO 6381
6008: LD_INT 18
6010: DOUBLE
6011: EQUAL
6012: IFTRUE 6016
6014: GO 6152
6016: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_INT 2
6024: PUSH
6025: LD_INT 4
6027: PUSH
6028: LD_INT 5
6030: PUSH
6031: LD_INT 7
6033: PUSH
6034: LD_INT 11
6036: PUSH
6037: LD_INT 12
6039: PUSH
6040: LD_INT 15
6042: PUSH
6043: LD_INT 16
6045: PUSH
6046: LD_INT 20
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 23
6057: PUSH
6058: LD_INT 25
6060: PUSH
6061: LD_INT 26
6063: PUSH
6064: LD_INT 30
6066: PUSH
6067: LD_INT 31
6069: PUSH
6070: LD_INT 32
6072: PUSH
6073: LD_INT 33
6075: PUSH
6076: LD_INT 34
6078: PUSH
6079: LD_INT 35
6081: PUSH
6082: LD_INT 36
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 101
6110: PUSH
6111: LD_INT 102
6113: PUSH
6114: LD_INT 103
6116: PUSH
6117: LD_INT 106
6119: PUSH
6120: LD_INT 108
6122: PUSH
6123: LD_INT 112
6125: PUSH
6126: LD_INT 113
6128: PUSH
6129: LD_INT 114
6131: PUSH
6132: LD_INT 115
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: ST_TO_ADDR
6150: GO 6381
6152: LD_INT 19
6154: DOUBLE
6155: EQUAL
6156: IFTRUE 6160
6158: GO 6380
6160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 7
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: LD_INT 11
6198: PUSH
6199: LD_INT 12
6201: PUSH
6202: LD_INT 13
6204: PUSH
6205: LD_INT 14
6207: PUSH
6208: LD_INT 15
6210: PUSH
6211: LD_INT 16
6213: PUSH
6214: LD_INT 17
6216: PUSH
6217: LD_INT 18
6219: PUSH
6220: LD_INT 19
6222: PUSH
6223: LD_INT 20
6225: PUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 23
6234: PUSH
6235: LD_INT 24
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 26
6243: PUSH
6244: LD_INT 27
6246: PUSH
6247: LD_INT 28
6249: PUSH
6250: LD_INT 29
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 31
6258: PUSH
6259: LD_INT 32
6261: PUSH
6262: LD_INT 33
6264: PUSH
6265: LD_INT 34
6267: PUSH
6268: LD_INT 35
6270: PUSH
6271: LD_INT 36
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 101
6314: PUSH
6315: LD_INT 102
6317: PUSH
6318: LD_INT 103
6320: PUSH
6321: LD_INT 104
6323: PUSH
6324: LD_INT 105
6326: PUSH
6327: LD_INT 106
6329: PUSH
6330: LD_INT 107
6332: PUSH
6333: LD_INT 108
6335: PUSH
6336: LD_INT 109
6338: PUSH
6339: LD_INT 110
6341: PUSH
6342: LD_INT 111
6344: PUSH
6345: LD_INT 112
6347: PUSH
6348: LD_INT 113
6350: PUSH
6351: LD_INT 114
6353: PUSH
6354: LD_INT 115
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: ST_TO_ADDR
6378: GO 6381
6380: POP
// end else
6381: GO 6600
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6383: LD_ADDR_VAR 0 1
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: LD_INT 3
6396: PUSH
6397: LD_INT 4
6399: PUSH
6400: LD_INT 5
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: LD_INT 7
6408: PUSH
6409: LD_INT 8
6411: PUSH
6412: LD_INT 9
6414: PUSH
6415: LD_INT 10
6417: PUSH
6418: LD_INT 11
6420: PUSH
6421: LD_INT 12
6423: PUSH
6424: LD_INT 13
6426: PUSH
6427: LD_INT 14
6429: PUSH
6430: LD_INT 15
6432: PUSH
6433: LD_INT 16
6435: PUSH
6436: LD_INT 17
6438: PUSH
6439: LD_INT 18
6441: PUSH
6442: LD_INT 19
6444: PUSH
6445: LD_INT 20
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 23
6456: PUSH
6457: LD_INT 24
6459: PUSH
6460: LD_INT 25
6462: PUSH
6463: LD_INT 26
6465: PUSH
6466: LD_INT 27
6468: PUSH
6469: LD_INT 28
6471: PUSH
6472: LD_INT 29
6474: PUSH
6475: LD_INT 30
6477: PUSH
6478: LD_INT 31
6480: PUSH
6481: LD_INT 32
6483: PUSH
6484: LD_INT 33
6486: PUSH
6487: LD_INT 34
6489: PUSH
6490: LD_INT 35
6492: PUSH
6493: LD_INT 36
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 101
6536: PUSH
6537: LD_INT 102
6539: PUSH
6540: LD_INT 103
6542: PUSH
6543: LD_INT 104
6545: PUSH
6546: LD_INT 105
6548: PUSH
6549: LD_INT 106
6551: PUSH
6552: LD_INT 107
6554: PUSH
6555: LD_INT 108
6557: PUSH
6558: LD_INT 109
6560: PUSH
6561: LD_INT 110
6563: PUSH
6564: LD_INT 111
6566: PUSH
6567: LD_INT 112
6569: PUSH
6570: LD_INT 113
6572: PUSH
6573: LD_INT 114
6575: PUSH
6576: LD_INT 115
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: ST_TO_ADDR
// if result then
6600: LD_VAR 0 1
6604: IFFALSE 6893
// begin normal :=  ;
6606: LD_ADDR_VAR 0 3
6610: PUSH
6611: LD_STRING 
6613: ST_TO_ADDR
// hardcore :=  ;
6614: LD_ADDR_VAR 0 4
6618: PUSH
6619: LD_STRING 
6621: ST_TO_ADDR
// for i = 1 to normalCounter do
6622: LD_ADDR_VAR 0 5
6626: PUSH
6627: DOUBLE
6628: LD_INT 1
6630: DEC
6631: ST_TO_ADDR
6632: LD_EXP 8
6636: PUSH
6637: FOR_TO
6638: IFFALSE 6739
// begin tmp := 0 ;
6640: LD_ADDR_VAR 0 2
6644: PUSH
6645: LD_STRING 0
6647: ST_TO_ADDR
// if result [ 1 ] then
6648: LD_VAR 0 1
6652: PUSH
6653: LD_INT 1
6655: ARRAY
6656: IFFALSE 6721
// if result [ 1 ] [ 1 ] = i then
6658: LD_VAR 0 1
6662: PUSH
6663: LD_INT 1
6665: ARRAY
6666: PUSH
6667: LD_INT 1
6669: ARRAY
6670: PUSH
6671: LD_VAR 0 5
6675: EQUAL
6676: IFFALSE 6721
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6678: LD_ADDR_VAR 0 1
6682: PUSH
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: ARRAY
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 3
6707: PPUSH
6708: CALL_OW 1
6712: ST_TO_ADDR
// tmp := 1 ;
6713: LD_ADDR_VAR 0 2
6717: PUSH
6718: LD_STRING 1
6720: ST_TO_ADDR
// end ; normal := normal & tmp ;
6721: LD_ADDR_VAR 0 3
6725: PUSH
6726: LD_VAR 0 3
6730: PUSH
6731: LD_VAR 0 2
6735: STR
6736: ST_TO_ADDR
// end ;
6737: GO 6637
6739: POP
6740: POP
// for i = 1 to hardcoreCounter do
6741: LD_ADDR_VAR 0 5
6745: PUSH
6746: DOUBLE
6747: LD_INT 1
6749: DEC
6750: ST_TO_ADDR
6751: LD_EXP 9
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6862
// begin tmp := 0 ;
6759: LD_ADDR_VAR 0 2
6763: PUSH
6764: LD_STRING 0
6766: ST_TO_ADDR
// if result [ 2 ] then
6767: LD_VAR 0 1
6771: PUSH
6772: LD_INT 2
6774: ARRAY
6775: IFFALSE 6844
// if result [ 2 ] [ 1 ] = 100 + i then
6777: LD_VAR 0 1
6781: PUSH
6782: LD_INT 2
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_INT 100
6792: PUSH
6793: LD_VAR 0 5
6797: PLUS
6798: EQUAL
6799: IFFALSE 6844
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6801: LD_ADDR_VAR 0 1
6805: PUSH
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 2
6813: PPUSH
6814: LD_VAR 0 1
6818: PUSH
6819: LD_INT 2
6821: ARRAY
6822: PPUSH
6823: LD_INT 1
6825: PPUSH
6826: CALL_OW 3
6830: PPUSH
6831: CALL_OW 1
6835: ST_TO_ADDR
// tmp := 1 ;
6836: LD_ADDR_VAR 0 2
6840: PUSH
6841: LD_STRING 1
6843: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: LD_VAR 0 4
6853: PUSH
6854: LD_VAR 0 2
6858: STR
6859: ST_TO_ADDR
// end ;
6860: GO 6756
6862: POP
6863: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6864: LD_STRING getStreamItemsFromMission("
6866: PUSH
6867: LD_VAR 0 3
6871: STR
6872: PUSH
6873: LD_STRING ","
6875: STR
6876: PUSH
6877: LD_VAR 0 4
6881: STR
6882: PUSH
6883: LD_STRING ")
6885: STR
6886: PPUSH
6887: CALL_OW 559
// end else
6891: GO 6900
// ToLua ( getStreamItemsFromMission("","") ) ;
6893: LD_STRING getStreamItemsFromMission("","")
6895: PPUSH
6896: CALL_OW 559
// end ;
6900: LD_VAR 0 1
6904: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6905: LD_EXP 7
6909: PUSH
6910: LD_EXP 12
6914: AND
6915: IFFALSE 7039
6917: GO 6919
6919: DISABLE
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
// begin enable ;
6924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 22
6932: PUSH
6933: LD_OWVAR 2
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: LD_INT 34
6947: PUSH
6948: LD_INT 7
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 34
6957: PUSH
6958: LD_INT 45
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: LD_INT 28
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 34
6977: PUSH
6978: LD_INT 47
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PPUSH
6996: CALL_OW 69
7000: ST_TO_ADDR
// if not tmp then
7001: LD_VAR 0 2
7005: NOT
7006: IFFALSE 7010
// exit ;
7008: GO 7039
// for i in tmp do
7010: LD_ADDR_VAR 0 1
7014: PUSH
7015: LD_VAR 0 2
7019: PUSH
7020: FOR_IN
7021: IFFALSE 7037
// begin SetLives ( i , 0 ) ;
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_INT 0
7030: PPUSH
7031: CALL_OW 234
// end ;
7035: GO 7020
7037: POP
7038: POP
// end ;
7039: PPOPN 2
7041: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7042: LD_EXP 7
7046: PUSH
7047: LD_EXP 13
7051: AND
7052: IFFALSE 7136
7054: GO 7056
7056: DISABLE
7057: LD_INT 0
7059: PPUSH
7060: PPUSH
// begin enable ;
7061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_OWVAR 2
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 32
7081: PUSH
7082: LD_INT 3
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 69
7097: ST_TO_ADDR
// if not tmp then
7098: LD_VAR 0 2
7102: NOT
7103: IFFALSE 7107
// exit ;
7105: GO 7136
// for i in tmp do
7107: LD_ADDR_VAR 0 1
7111: PUSH
7112: LD_VAR 0 2
7116: PUSH
7117: FOR_IN
7118: IFFALSE 7134
// begin SetLives ( i , 0 ) ;
7120: LD_VAR 0 1
7124: PPUSH
7125: LD_INT 0
7127: PPUSH
7128: CALL_OW 234
// end ;
7132: GO 7117
7134: POP
7135: POP
// end ;
7136: PPOPN 2
7138: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7139: LD_EXP 7
7143: PUSH
7144: LD_EXP 10
7148: AND
7149: IFFALSE 7242
7151: GO 7153
7153: DISABLE
7154: LD_INT 0
7156: PPUSH
// begin enable ;
7157: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: LD_INT 22
7165: PUSH
7166: LD_OWVAR 2
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 25
7180: PUSH
7181: LD_INT 5
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 25
7190: PUSH
7191: LD_INT 9
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 25
7200: PUSH
7201: LD_INT 8
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PPUSH
7218: CALL_OW 69
7222: PUSH
7223: FOR_IN
7224: IFFALSE 7240
// begin SetClass ( i , 1 ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 336
// end ;
7238: GO 7223
7240: POP
7241: POP
// end ;
7242: PPOPN 1
7244: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7245: LD_EXP 7
7249: PUSH
7250: LD_EXP 11
7254: AND
7255: PUSH
7256: LD_OWVAR 65
7260: PUSH
7261: LD_INT 7
7263: LESS
7264: AND
7265: IFFALSE 7279
7267: GO 7269
7269: DISABLE
// begin enable ;
7270: ENABLE
// game_speed := 7 ;
7271: LD_ADDR_OWVAR 65
7275: PUSH
7276: LD_INT 7
7278: ST_TO_ADDR
// end ;
7279: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7280: LD_EXP 7
7284: PUSH
7285: LD_EXP 14
7289: AND
7290: IFFALSE 7492
7292: GO 7294
7294: DISABLE
7295: LD_INT 0
7297: PPUSH
7298: PPUSH
7299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: LD_INT 81
7307: PUSH
7308: LD_OWVAR 2
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 21
7319: PUSH
7320: LD_INT 1
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PPUSH
7331: CALL_OW 69
7335: ST_TO_ADDR
// if not tmp then
7336: LD_VAR 0 3
7340: NOT
7341: IFFALSE 7345
// exit ;
7343: GO 7492
// if tmp > 5 then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 5
7352: GREATER
7353: IFFALSE 7365
// k := 5 else
7355: LD_ADDR_VAR 0 2
7359: PUSH
7360: LD_INT 5
7362: ST_TO_ADDR
7363: GO 7375
// k := tmp ;
7365: LD_ADDR_VAR 0 2
7369: PUSH
7370: LD_VAR 0 3
7374: ST_TO_ADDR
// for i := 1 to k do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_VAR 0 2
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7490
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7393: LD_VAR 0 3
7397: PUSH
7398: LD_VAR 0 1
7402: ARRAY
7403: PPUSH
7404: LD_VAR 0 1
7408: PUSH
7409: LD_INT 4
7411: MOD
7412: PUSH
7413: LD_INT 1
7415: PLUS
7416: PPUSH
7417: CALL_OW 259
7421: PUSH
7422: LD_INT 10
7424: LESS
7425: IFFALSE 7488
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7427: LD_VAR 0 3
7431: PUSH
7432: LD_VAR 0 1
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 1
7442: PUSH
7443: LD_INT 4
7445: MOD
7446: PUSH
7447: LD_INT 1
7449: PLUS
7450: PPUSH
7451: LD_VAR 0 3
7455: PUSH
7456: LD_VAR 0 1
7460: ARRAY
7461: PPUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 4
7469: MOD
7470: PUSH
7471: LD_INT 1
7473: PLUS
7474: PPUSH
7475: CALL_OW 259
7479: PUSH
7480: LD_INT 1
7482: PLUS
7483: PPUSH
7484: CALL_OW 237
7488: GO 7390
7490: POP
7491: POP
// end ;
7492: PPOPN 3
7494: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7495: LD_EXP 7
7499: PUSH
7500: LD_EXP 15
7504: AND
7505: IFFALSE 7525
7507: GO 7509
7509: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7510: LD_INT 4
7512: PPUSH
7513: LD_OWVAR 2
7517: PPUSH
7518: LD_INT 0
7520: PPUSH
7521: CALL_OW 324
7525: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7526: LD_EXP 7
7530: PUSH
7531: LD_EXP 44
7535: AND
7536: IFFALSE 7556
7538: GO 7540
7540: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7541: LD_INT 19
7543: PPUSH
7544: LD_OWVAR 2
7548: PPUSH
7549: LD_INT 0
7551: PPUSH
7552: CALL_OW 324
7556: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7557: LD_EXP 7
7561: PUSH
7562: LD_EXP 16
7566: AND
7567: IFFALSE 7669
7569: GO 7571
7571: DISABLE
7572: LD_INT 0
7574: PPUSH
7575: PPUSH
// begin enable ;
7576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7577: LD_ADDR_VAR 0 2
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_OWVAR 2
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 34
7599: PUSH
7600: LD_INT 11
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 34
7609: PUSH
7610: LD_INT 30
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: ST_TO_ADDR
// if not tmp then
7631: LD_VAR 0 2
7635: NOT
7636: IFFALSE 7640
// exit ;
7638: GO 7669
// for i in tmp do
7640: LD_ADDR_VAR 0 1
7644: PUSH
7645: LD_VAR 0 2
7649: PUSH
7650: FOR_IN
7651: IFFALSE 7667
// begin SetLives ( i , 0 ) ;
7653: LD_VAR 0 1
7657: PPUSH
7658: LD_INT 0
7660: PPUSH
7661: CALL_OW 234
// end ;
7665: GO 7650
7667: POP
7668: POP
// end ;
7669: PPOPN 2
7671: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7672: LD_EXP 7
7676: PUSH
7677: LD_EXP 17
7681: AND
7682: IFFALSE 7702
7684: GO 7686
7686: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7687: LD_INT 32
7689: PPUSH
7690: LD_OWVAR 2
7694: PPUSH
7695: LD_INT 0
7697: PPUSH
7698: CALL_OW 324
7702: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7703: LD_EXP 7
7707: PUSH
7708: LD_EXP 18
7712: AND
7713: IFFALSE 7894
7715: GO 7717
7717: DISABLE
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_INT 22
7730: PUSH
7731: LD_OWVAR 2
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PPUSH
7754: CALL_OW 69
7758: ST_TO_ADDR
// if not tmp then
7759: LD_VAR 0 2
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7894
// side := 0 ;
7768: LD_ADDR_VAR 0 3
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// for i := 1 to 8 do
7776: LD_ADDR_VAR 0 1
7780: PUSH
7781: DOUBLE
7782: LD_INT 1
7784: DEC
7785: ST_TO_ADDR
7786: LD_INT 8
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7838
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7792: LD_OWVAR 2
7796: PUSH
7797: LD_VAR 0 1
7801: NONEQUAL
7802: PUSH
7803: LD_OWVAR 2
7807: PPUSH
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 81
7817: PUSH
7818: LD_INT 2
7820: EQUAL
7821: AND
7822: IFFALSE 7836
// begin side := i ;
7824: LD_ADDR_VAR 0 3
7828: PUSH
7829: LD_VAR 0 1
7833: ST_TO_ADDR
// break ;
7834: GO 7838
// end ;
7836: GO 7789
7838: POP
7839: POP
// if not side then
7840: LD_VAR 0 3
7844: NOT
7845: IFFALSE 7849
// exit ;
7847: GO 7894
// for i := 1 to tmp do
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: DOUBLE
7855: LD_INT 1
7857: DEC
7858: ST_TO_ADDR
7859: LD_VAR 0 2
7863: PUSH
7864: FOR_TO
7865: IFFALSE 7892
// if Prob ( 60 ) then
7867: LD_INT 60
7869: PPUSH
7870: CALL_OW 13
7874: IFFALSE 7890
// SetSide ( i , side ) ;
7876: LD_VAR 0 1
7880: PPUSH
7881: LD_VAR 0 3
7885: PPUSH
7886: CALL_OW 235
7890: GO 7864
7892: POP
7893: POP
// end ;
7894: PPOPN 3
7896: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7897: LD_EXP 7
7901: PUSH
7902: LD_EXP 20
7906: AND
7907: IFFALSE 8026
7909: GO 7911
7911: DISABLE
7912: LD_INT 0
7914: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7915: LD_ADDR_VAR 0 1
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: LD_OWVAR 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 21
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 3
7944: PUSH
7945: LD_INT 23
7947: PUSH
7948: LD_INT 0
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: PUSH
7969: FOR_IN
7970: IFFALSE 8024
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 257
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: LD_INT 4
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: IN
8000: IFFALSE 8022
// SetClass ( un , rand ( 1 , 4 ) ) ;
8002: LD_VAR 0 1
8006: PPUSH
8007: LD_INT 1
8009: PPUSH
8010: LD_INT 4
8012: PPUSH
8013: CALL_OW 12
8017: PPUSH
8018: CALL_OW 336
8022: GO 7969
8024: POP
8025: POP
// end ;
8026: PPOPN 1
8028: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8029: LD_EXP 7
8033: PUSH
8034: LD_EXP 19
8038: AND
8039: IFFALSE 8118
8041: GO 8043
8043: DISABLE
8044: LD_INT 0
8046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8047: LD_ADDR_VAR 0 1
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_OWVAR 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 21
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PPUSH
8078: CALL_OW 69
8082: ST_TO_ADDR
// if not tmp then
8083: LD_VAR 0 1
8087: NOT
8088: IFFALSE 8092
// exit ;
8090: GO 8118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8092: LD_VAR 0 1
8096: PUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 12
8109: ARRAY
8110: PPUSH
8111: LD_INT 100
8113: PPUSH
8114: CALL_OW 234
// end ;
8118: PPOPN 1
8120: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8121: LD_EXP 7
8125: PUSH
8126: LD_EXP 21
8130: AND
8131: IFFALSE 8229
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8139: LD_ADDR_VAR 0 1
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_OWVAR 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not tmp then
8175: LD_VAR 0 1
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8229
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8184: LD_VAR 0 1
8188: PUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: LD_INT 4
8208: PPUSH
8209: CALL_OW 12
8213: PPUSH
8214: LD_INT 3000
8216: PPUSH
8217: LD_INT 9000
8219: PPUSH
8220: CALL_OW 12
8224: PPUSH
8225: CALL_OW 492
// end ;
8229: PPOPN 1
8231: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8232: LD_EXP 7
8236: PUSH
8237: LD_EXP 22
8241: AND
8242: IFFALSE 8262
8244: GO 8246
8246: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8247: LD_INT 1
8249: PPUSH
8250: LD_OWVAR 2
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 324
8262: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8263: LD_EXP 7
8267: PUSH
8268: LD_EXP 23
8272: AND
8273: IFFALSE 8356
8275: GO 8277
8277: DISABLE
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8282: LD_ADDR_VAR 0 2
8286: PUSH
8287: LD_INT 22
8289: PUSH
8290: LD_OWVAR 2
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 21
8301: PUSH
8302: LD_INT 3
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 69
8317: ST_TO_ADDR
// if not tmp then
8318: LD_VAR 0 2
8322: NOT
8323: IFFALSE 8327
// exit ;
8325: GO 8356
// for i in tmp do
8327: LD_ADDR_VAR 0 1
8331: PUSH
8332: LD_VAR 0 2
8336: PUSH
8337: FOR_IN
8338: IFFALSE 8354
// SetBLevel ( i , 10 ) ;
8340: LD_VAR 0 1
8344: PPUSH
8345: LD_INT 10
8347: PPUSH
8348: CALL_OW 241
8352: GO 8337
8354: POP
8355: POP
// end ;
8356: PPOPN 2
8358: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8359: LD_EXP 7
8363: PUSH
8364: LD_EXP 24
8368: AND
8369: IFFALSE 8480
8371: GO 8373
8373: DISABLE
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
8378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8379: LD_ADDR_VAR 0 3
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_OWVAR 2
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 25
8398: PUSH
8399: LD_INT 1
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PPUSH
8410: CALL_OW 69
8414: ST_TO_ADDR
// if not tmp then
8415: LD_VAR 0 3
8419: NOT
8420: IFFALSE 8424
// exit ;
8422: GO 8480
// un := tmp [ rand ( 1 , tmp ) ] ;
8424: LD_ADDR_VAR 0 2
8428: PUSH
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_VAR 0 3
8441: PPUSH
8442: CALL_OW 12
8446: ARRAY
8447: ST_TO_ADDR
// if Crawls ( un ) then
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 318
8457: IFFALSE 8468
// ComWalk ( un ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8468: LD_VAR 0 2
8472: PPUSH
8473: LD_INT 5
8475: PPUSH
8476: CALL_OW 336
// end ;
8480: PPOPN 3
8482: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8483: LD_EXP 7
8487: PUSH
8488: LD_EXP 25
8492: AND
8493: PUSH
8494: LD_OWVAR 67
8498: PUSH
8499: LD_INT 3
8501: LESS
8502: AND
8503: IFFALSE 8522
8505: GO 8507
8507: DISABLE
// Difficulty := Difficulty + 1 ;
8508: LD_ADDR_OWVAR 67
8512: PUSH
8513: LD_OWVAR 67
8517: PUSH
8518: LD_INT 1
8520: PLUS
8521: ST_TO_ADDR
8522: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8523: LD_EXP 7
8527: PUSH
8528: LD_EXP 26
8532: AND
8533: IFFALSE 8636
8535: GO 8537
8537: DISABLE
8538: LD_INT 0
8540: PPUSH
// begin for i := 1 to 5 do
8541: LD_ADDR_VAR 0 1
8545: PUSH
8546: DOUBLE
8547: LD_INT 1
8549: DEC
8550: ST_TO_ADDR
8551: LD_INT 5
8553: PUSH
8554: FOR_TO
8555: IFFALSE 8634
// begin uc_nation := nation_nature ;
8557: LD_ADDR_OWVAR 21
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// uc_side := 0 ;
8565: LD_ADDR_OWVAR 20
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8573: LD_ADDR_OWVAR 29
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 12
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: ST_TO_ADDR
// hc_agressivity := 20 ;
8588: LD_ADDR_OWVAR 35
8592: PUSH
8593: LD_INT 20
8595: ST_TO_ADDR
// hc_class := class_tiger ;
8596: LD_ADDR_OWVAR 28
8600: PUSH
8601: LD_INT 14
8603: ST_TO_ADDR
// hc_gallery :=  ;
8604: LD_ADDR_OWVAR 33
8608: PUSH
8609: LD_STRING 
8611: ST_TO_ADDR
// hc_name :=  ;
8612: LD_ADDR_OWVAR 26
8616: PUSH
8617: LD_STRING 
8619: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8620: CALL_OW 44
8624: PPUSH
8625: LD_INT 0
8627: PPUSH
8628: CALL_OW 51
// end ;
8632: GO 8554
8634: POP
8635: POP
// end ;
8636: PPOPN 1
8638: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8639: LD_EXP 7
8643: PUSH
8644: LD_EXP 27
8648: AND
8649: IFFALSE 8658
8651: GO 8653
8653: DISABLE
// StreamSibBomb ;
8654: CALL 8659 0 0
8658: END
// export function StreamSibBomb ; var i , x , y ; begin
8659: LD_INT 0
8661: PPUSH
8662: PPUSH
8663: PPUSH
8664: PPUSH
// result := false ;
8665: LD_ADDR_VAR 0 1
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// for i := 1 to 16 do
8673: LD_ADDR_VAR 0 2
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_INT 16
8685: PUSH
8686: FOR_TO
8687: IFFALSE 8886
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8689: LD_ADDR_VAR 0 3
8693: PUSH
8694: LD_INT 10
8696: PUSH
8697: LD_INT 20
8699: PUSH
8700: LD_INT 30
8702: PUSH
8703: LD_INT 40
8705: PUSH
8706: LD_INT 50
8708: PUSH
8709: LD_INT 60
8711: PUSH
8712: LD_INT 70
8714: PUSH
8715: LD_INT 80
8717: PUSH
8718: LD_INT 90
8720: PUSH
8721: LD_INT 100
8723: PUSH
8724: LD_INT 110
8726: PUSH
8727: LD_INT 120
8729: PUSH
8730: LD_INT 130
8732: PUSH
8733: LD_INT 140
8735: PUSH
8736: LD_INT 150
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_INT 15
8761: PPUSH
8762: CALL_OW 12
8766: ARRAY
8767: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8768: LD_ADDR_VAR 0 4
8772: PUSH
8773: LD_INT 10
8775: PUSH
8776: LD_INT 20
8778: PUSH
8779: LD_INT 30
8781: PUSH
8782: LD_INT 40
8784: PUSH
8785: LD_INT 50
8787: PUSH
8788: LD_INT 60
8790: PUSH
8791: LD_INT 70
8793: PUSH
8794: LD_INT 80
8796: PUSH
8797: LD_INT 90
8799: PUSH
8800: LD_INT 100
8802: PUSH
8803: LD_INT 110
8805: PUSH
8806: LD_INT 120
8808: PUSH
8809: LD_INT 130
8811: PUSH
8812: LD_INT 140
8814: PUSH
8815: LD_INT 150
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 1
8837: PPUSH
8838: LD_INT 15
8840: PPUSH
8841: CALL_OW 12
8845: ARRAY
8846: ST_TO_ADDR
// if ValidHex ( x , y ) then
8847: LD_VAR 0 3
8851: PPUSH
8852: LD_VAR 0 4
8856: PPUSH
8857: CALL_OW 488
8861: IFFALSE 8884
// begin result := [ x , y ] ;
8863: LD_ADDR_VAR 0 1
8867: PUSH
8868: LD_VAR 0 3
8872: PUSH
8873: LD_VAR 0 4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: ST_TO_ADDR
// break ;
8882: GO 8886
// end ; end ;
8884: GO 8686
8886: POP
8887: POP
// if result then
8888: LD_VAR 0 1
8892: IFFALSE 8952
// begin ToLua ( playSibBomb() ) ;
8894: LD_STRING playSibBomb()
8896: PPUSH
8897: CALL_OW 559
// wait ( 0 0$14 ) ;
8901: LD_INT 490
8903: PPUSH
8904: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8908: LD_VAR 0 1
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 2
8924: ARRAY
8925: PPUSH
8926: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8930: LD_VAR 0 1
8934: PUSH
8935: LD_INT 1
8937: ARRAY
8938: PPUSH
8939: LD_VAR 0 1
8943: PUSH
8944: LD_INT 2
8946: ARRAY
8947: PPUSH
8948: CALL_OW 429
// end ; end ;
8952: LD_VAR 0 1
8956: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8957: LD_EXP 7
8961: PUSH
8962: LD_EXP 29
8966: AND
8967: IFFALSE 8979
8969: GO 8971
8971: DISABLE
// YouLost (  ) ;
8972: LD_STRING 
8974: PPUSH
8975: CALL_OW 104
8979: END
// every 0 0$1 trigger StreamModeActive and sFog do
8980: LD_EXP 7
8984: PUSH
8985: LD_EXP 28
8989: AND
8990: IFFALSE 9004
8992: GO 8994
8994: DISABLE
// FogOff ( your_side ) ;
8995: LD_OWVAR 2
8999: PPUSH
9000: CALL_OW 344
9004: END
// every 0 0$1 trigger StreamModeActive and sSun do
9005: LD_EXP 7
9009: PUSH
9010: LD_EXP 30
9014: AND
9015: IFFALSE 9043
9017: GO 9019
9019: DISABLE
// begin solar_recharge_percent := 0 ;
9020: LD_ADDR_OWVAR 79
9024: PUSH
9025: LD_INT 0
9027: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9028: LD_INT 10500
9030: PPUSH
9031: CALL_OW 67
// solar_recharge_percent := 100 ;
9035: LD_ADDR_OWVAR 79
9039: PUSH
9040: LD_INT 100
9042: ST_TO_ADDR
// end ;
9043: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9044: LD_EXP 7
9048: PUSH
9049: LD_EXP 31
9053: AND
9054: IFFALSE 9293
9056: GO 9058
9058: DISABLE
9059: LD_INT 0
9061: PPUSH
9062: PPUSH
9063: PPUSH
// begin tmp := [ ] ;
9064: LD_ADDR_VAR 0 3
9068: PUSH
9069: EMPTY
9070: ST_TO_ADDR
// for i := 1 to 6 do
9071: LD_ADDR_VAR 0 1
9075: PUSH
9076: DOUBLE
9077: LD_INT 1
9079: DEC
9080: ST_TO_ADDR
9081: LD_INT 6
9083: PUSH
9084: FOR_TO
9085: IFFALSE 9190
// begin uc_nation := nation_nature ;
9087: LD_ADDR_OWVAR 21
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// uc_side := 0 ;
9095: LD_ADDR_OWVAR 20
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9103: LD_ADDR_OWVAR 29
9107: PUSH
9108: LD_INT 12
9110: PUSH
9111: LD_INT 12
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: ST_TO_ADDR
// hc_agressivity := 20 ;
9118: LD_ADDR_OWVAR 35
9122: PUSH
9123: LD_INT 20
9125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9126: LD_ADDR_OWVAR 28
9130: PUSH
9131: LD_INT 17
9133: ST_TO_ADDR
// hc_gallery :=  ;
9134: LD_ADDR_OWVAR 33
9138: PUSH
9139: LD_STRING 
9141: ST_TO_ADDR
// hc_name :=  ;
9142: LD_ADDR_OWVAR 26
9146: PUSH
9147: LD_STRING 
9149: ST_TO_ADDR
// un := CreateHuman ;
9150: LD_ADDR_VAR 0 2
9154: PUSH
9155: CALL_OW 44
9159: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9160: LD_VAR 0 2
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: CALL_OW 51
// tmp := tmp ^ un ;
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_VAR 0 3
9181: PUSH
9182: LD_VAR 0 2
9186: ADD
9187: ST_TO_ADDR
// end ;
9188: GO 9084
9190: POP
9191: POP
// repeat wait ( 0 0$1 ) ;
9192: LD_INT 35
9194: PPUSH
9195: CALL_OW 67
// for un in tmp do
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: LD_VAR 0 3
9208: PUSH
9209: FOR_IN
9210: IFFALSE 9284
// begin if IsDead ( un ) then
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 301
9221: IFFALSE 9241
// begin tmp := tmp diff un ;
9223: LD_ADDR_VAR 0 3
9227: PUSH
9228: LD_VAR 0 3
9232: PUSH
9233: LD_VAR 0 2
9237: DIFF
9238: ST_TO_ADDR
// continue ;
9239: GO 9209
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9241: LD_VAR 0 2
9245: PPUSH
9246: LD_INT 3
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 0
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PPUSH
9263: CALL_OW 69
9267: PPUSH
9268: LD_VAR 0 2
9272: PPUSH
9273: CALL_OW 74
9277: PPUSH
9278: CALL_OW 115
// end ;
9282: GO 9209
9284: POP
9285: POP
// until not tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: IFFALSE 9192
// end ;
9293: PPOPN 3
9295: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9296: LD_EXP 7
9300: PUSH
9301: LD_EXP 32
9305: AND
9306: IFFALSE 9360
9308: GO 9310
9310: DISABLE
// begin ToLua ( displayTroll(); ) ;
9311: LD_STRING displayTroll();
9313: PPUSH
9314: CALL_OW 559
// wait ( 3 3$00 ) ;
9318: LD_INT 6300
9320: PPUSH
9321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9325: LD_STRING hideTroll();
9327: PPUSH
9328: CALL_OW 559
// wait ( 1 1$00 ) ;
9332: LD_INT 2100
9334: PPUSH
9335: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9339: LD_STRING displayTroll();
9341: PPUSH
9342: CALL_OW 559
// wait ( 1 1$00 ) ;
9346: LD_INT 2100
9348: PPUSH
9349: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9353: LD_STRING hideTroll();
9355: PPUSH
9356: CALL_OW 559
// end ;
9360: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9361: LD_EXP 7
9365: PUSH
9366: LD_EXP 33
9370: AND
9371: IFFALSE 9434
9373: GO 9375
9375: DISABLE
9376: LD_INT 0
9378: PPUSH
// begin p := 0 ;
9379: LD_ADDR_VAR 0 1
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// repeat game_speed := 1 ;
9387: LD_ADDR_OWVAR 65
9391: PUSH
9392: LD_INT 1
9394: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9395: LD_INT 35
9397: PPUSH
9398: CALL_OW 67
// p := p + 1 ;
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: LD_VAR 0 1
9411: PUSH
9412: LD_INT 1
9414: PLUS
9415: ST_TO_ADDR
// until p >= 60 ;
9416: LD_VAR 0 1
9420: PUSH
9421: LD_INT 60
9423: GREATEREQUAL
9424: IFFALSE 9387
// game_speed := 4 ;
9426: LD_ADDR_OWVAR 65
9430: PUSH
9431: LD_INT 4
9433: ST_TO_ADDR
// end ;
9434: PPOPN 1
9436: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9437: LD_EXP 7
9441: PUSH
9442: LD_EXP 34
9446: AND
9447: IFFALSE 9593
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9456: LD_ADDR_VAR 0 1
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_OWVAR 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 2
9475: PUSH
9476: LD_INT 30
9478: PUSH
9479: LD_INT 0
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 30
9488: PUSH
9489: LD_INT 1
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 69
9509: ST_TO_ADDR
// if not depot then
9510: LD_VAR 0 1
9514: NOT
9515: IFFALSE 9519
// exit ;
9517: GO 9593
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9519: LD_ADDR_VAR 0 2
9523: PUSH
9524: LD_VAR 0 1
9528: PUSH
9529: LD_INT 1
9531: PPUSH
9532: LD_VAR 0 1
9536: PPUSH
9537: CALL_OW 12
9541: ARRAY
9542: PPUSH
9543: CALL_OW 274
9547: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9548: LD_VAR 0 2
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: LD_INT 0
9558: PPUSH
9559: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9563: LD_VAR 0 2
9567: PPUSH
9568: LD_INT 2
9570: PPUSH
9571: LD_INT 0
9573: PPUSH
9574: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 3
9585: PPUSH
9586: LD_INT 0
9588: PPUSH
9589: CALL_OW 277
// end ;
9593: PPOPN 2
9595: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9596: LD_EXP 7
9600: PUSH
9601: LD_EXP 35
9605: AND
9606: IFFALSE 9703
9608: GO 9610
9610: DISABLE
9611: LD_INT 0
9613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9614: LD_ADDR_VAR 0 1
9618: PUSH
9619: LD_INT 22
9621: PUSH
9622: LD_OWVAR 2
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 21
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: LD_INT 23
9646: PUSH
9647: LD_INT 0
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: ST_TO_ADDR
// if not tmp then
9668: LD_VAR 0 1
9672: NOT
9673: IFFALSE 9677
// exit ;
9675: GO 9703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9677: LD_VAR 0 1
9681: PUSH
9682: LD_INT 1
9684: PPUSH
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 12
9694: ARRAY
9695: PPUSH
9696: LD_INT 200
9698: PPUSH
9699: CALL_OW 234
// end ;
9703: PPOPN 1
9705: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9706: LD_EXP 7
9710: PUSH
9711: LD_EXP 36
9715: AND
9716: IFFALSE 9795
9718: GO 9720
9720: DISABLE
9721: LD_INT 0
9723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9724: LD_ADDR_VAR 0 1
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_OWVAR 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: ST_TO_ADDR
// if not tmp then
9760: LD_VAR 0 1
9764: NOT
9765: IFFALSE 9769
// exit ;
9767: GO 9795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: LD_INT 60
9790: PPUSH
9791: CALL_OW 234
// end ;
9795: PPOPN 1
9797: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9798: LD_EXP 7
9802: PUSH
9803: LD_EXP 37
9807: AND
9808: IFFALSE 9907
9810: GO 9812
9812: DISABLE
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
// begin enable ;
9817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9818: LD_ADDR_VAR 0 1
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_OWVAR 2
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 61
9837: PUSH
9838: EMPTY
9839: LIST
9840: PUSH
9841: LD_INT 33
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// if not tmp then
9861: LD_VAR 0 1
9865: NOT
9866: IFFALSE 9870
// exit ;
9868: GO 9907
// for i in tmp do
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_VAR 0 1
9879: PUSH
9880: FOR_IN
9881: IFFALSE 9905
// if IsControledBy ( i ) then
9883: LD_VAR 0 2
9887: PPUSH
9888: CALL_OW 312
9892: IFFALSE 9903
// ComUnlink ( i ) ;
9894: LD_VAR 0 2
9898: PPUSH
9899: CALL_OW 136
9903: GO 9880
9905: POP
9906: POP
// end ;
9907: PPOPN 2
9909: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9910: LD_EXP 7
9914: PUSH
9915: LD_EXP 38
9919: AND
9920: IFFALSE 10060
9922: GO 9924
9924: DISABLE
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// begin ToLua ( displayPowell(); ) ;
9929: LD_STRING displayPowell();
9931: PPUSH
9932: CALL_OW 559
// uc_side := 0 ;
9936: LD_ADDR_OWVAR 20
9940: PUSH
9941: LD_INT 0
9943: ST_TO_ADDR
// uc_nation := 2 ;
9944: LD_ADDR_OWVAR 21
9948: PUSH
9949: LD_INT 2
9951: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9952: LD_ADDR_OWVAR 37
9956: PUSH
9957: LD_INT 14
9959: ST_TO_ADDR
// vc_engine := engine_siberite ;
9960: LD_ADDR_OWVAR 39
9964: PUSH
9965: LD_INT 3
9967: ST_TO_ADDR
// vc_control := control_apeman ;
9968: LD_ADDR_OWVAR 38
9972: PUSH
9973: LD_INT 5
9975: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9976: LD_ADDR_OWVAR 40
9980: PUSH
9981: LD_INT 29
9983: ST_TO_ADDR
// un := CreateVehicle ;
9984: LD_ADDR_VAR 0 2
9988: PUSH
9989: CALL_OW 45
9993: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9994: LD_VAR 0 2
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10006: LD_INT 35
10008: PPUSH
10009: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_INT 22
10020: PUSH
10021: LD_OWVAR 2
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PPUSH
10030: CALL_OW 69
10034: PPUSH
10035: LD_VAR 0 2
10039: PPUSH
10040: CALL_OW 74
10044: PPUSH
10045: CALL_OW 115
// until IsDead ( un ) ;
10049: LD_VAR 0 2
10053: PPUSH
10054: CALL_OW 301
10058: IFFALSE 10006
// end ;
10060: PPOPN 2
10062: END
// every 0 0$1 trigger StreamModeActive and sStu do
10063: LD_EXP 7
10067: PUSH
10068: LD_EXP 46
10072: AND
10073: IFFALSE 10089
10075: GO 10077
10077: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10078: LD_STRING displayStucuk();
10080: PPUSH
10081: CALL_OW 559
// ResetFog ;
10085: CALL_OW 335
// end ;
10089: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10090: LD_EXP 7
10094: PUSH
10095: LD_EXP 39
10099: AND
10100: IFFALSE 10241
10102: GO 10104
10104: DISABLE
10105: LD_INT 0
10107: PPUSH
10108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10109: LD_ADDR_VAR 0 2
10113: PUSH
10114: LD_INT 22
10116: PUSH
10117: LD_OWVAR 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 21
10128: PUSH
10129: LD_INT 1
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: ST_TO_ADDR
// if not tmp then
10145: LD_VAR 0 2
10149: NOT
10150: IFFALSE 10154
// exit ;
10152: GO 10241
// un := tmp [ rand ( 1 , tmp ) ] ;
10154: LD_ADDR_VAR 0 1
10158: PUSH
10159: LD_VAR 0 2
10163: PUSH
10164: LD_INT 1
10166: PPUSH
10167: LD_VAR 0 2
10171: PPUSH
10172: CALL_OW 12
10176: ARRAY
10177: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10178: LD_VAR 0 1
10182: PPUSH
10183: LD_INT 0
10185: PPUSH
10186: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_OWVAR 3
10199: PUSH
10200: LD_VAR 0 1
10204: DIFF
10205: PPUSH
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 74
10215: PPUSH
10216: CALL_OW 115
// wait ( 0 0$20 ) ;
10220: LD_INT 700
10222: PPUSH
10223: CALL_OW 67
// SetSide ( un , your_side ) ;
10227: LD_VAR 0 1
10231: PPUSH
10232: LD_OWVAR 2
10236: PPUSH
10237: CALL_OW 235
// end ;
10241: PPOPN 2
10243: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10244: LD_EXP 7
10248: PUSH
10249: LD_EXP 40
10253: AND
10254: IFFALSE 10360
10256: GO 10258
10258: DISABLE
10259: LD_INT 0
10261: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10262: LD_ADDR_VAR 0 1
10266: PUSH
10267: LD_INT 22
10269: PUSH
10270: LD_OWVAR 2
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: LD_INT 30
10284: PUSH
10285: LD_INT 0
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 30
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PPUSH
10311: CALL_OW 69
10315: ST_TO_ADDR
// if not depot then
10316: LD_VAR 0 1
10320: NOT
10321: IFFALSE 10325
// exit ;
10323: GO 10360
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10325: LD_VAR 0 1
10329: PUSH
10330: LD_INT 1
10332: ARRAY
10333: PPUSH
10334: CALL_OW 250
10338: PPUSH
10339: LD_VAR 0 1
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: CALL_OW 251
10352: PPUSH
10353: LD_INT 70
10355: PPUSH
10356: CALL_OW 495
// end ;
10360: PPOPN 1
10362: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10363: LD_EXP 7
10367: PUSH
10368: LD_EXP 41
10372: AND
10373: IFFALSE 10584
10375: GO 10377
10377: DISABLE
10378: LD_INT 0
10380: PPUSH
10381: PPUSH
10382: PPUSH
10383: PPUSH
10384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10385: LD_ADDR_VAR 0 5
10389: PUSH
10390: LD_INT 22
10392: PUSH
10393: LD_OWVAR 2
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 21
10404: PUSH
10405: LD_INT 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PPUSH
10416: CALL_OW 69
10420: ST_TO_ADDR
// if not tmp then
10421: LD_VAR 0 5
10425: NOT
10426: IFFALSE 10430
// exit ;
10428: GO 10584
// for i in tmp do
10430: LD_ADDR_VAR 0 1
10434: PUSH
10435: LD_VAR 0 5
10439: PUSH
10440: FOR_IN
10441: IFFALSE 10582
// begin d := rand ( 0 , 5 ) ;
10443: LD_ADDR_VAR 0 4
10447: PUSH
10448: LD_INT 0
10450: PPUSH
10451: LD_INT 5
10453: PPUSH
10454: CALL_OW 12
10458: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 4
10478: PPUSH
10479: LD_INT 3
10481: PPUSH
10482: LD_INT 12
10484: PPUSH
10485: CALL_OW 12
10489: PPUSH
10490: CALL_OW 272
10494: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10495: LD_ADDR_VAR 0 3
10499: PUSH
10500: LD_VAR 0 1
10504: PPUSH
10505: CALL_OW 251
10509: PPUSH
10510: LD_VAR 0 4
10514: PPUSH
10515: LD_INT 3
10517: PPUSH
10518: LD_INT 12
10520: PPUSH
10521: CALL_OW 12
10525: PPUSH
10526: CALL_OW 273
10530: ST_TO_ADDR
// if ValidHex ( x , y ) then
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_VAR 0 3
10540: PPUSH
10541: CALL_OW 488
10545: IFFALSE 10580
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_VAR 0 2
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 3
10564: PPUSH
10565: LD_INT 6
10567: PPUSH
10568: CALL_OW 12
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 483
// end ;
10580: GO 10440
10582: POP
10583: POP
// end ;
10584: PPOPN 5
10586: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10587: LD_EXP 7
10591: PUSH
10592: LD_EXP 42
10596: AND
10597: IFFALSE 10691
10599: GO 10601
10601: DISABLE
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10606: LD_ADDR_VAR 0 2
10610: PUSH
10611: LD_INT 22
10613: PUSH
10614: LD_OWVAR 2
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 32
10625: PUSH
10626: LD_INT 1
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 21
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 69
10652: ST_TO_ADDR
// if not tmp then
10653: LD_VAR 0 2
10657: NOT
10658: IFFALSE 10662
// exit ;
10660: GO 10691
// for i in tmp do
10662: LD_ADDR_VAR 0 1
10666: PUSH
10667: LD_VAR 0 2
10671: PUSH
10672: FOR_IN
10673: IFFALSE 10689
// SetFuel ( i , 0 ) ;
10675: LD_VAR 0 1
10679: PPUSH
10680: LD_INT 0
10682: PPUSH
10683: CALL_OW 240
10687: GO 10672
10689: POP
10690: POP
// end ;
10691: PPOPN 2
10693: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10694: LD_EXP 7
10698: PUSH
10699: LD_EXP 43
10703: AND
10704: IFFALSE 10770
10706: GO 10708
10708: DISABLE
10709: LD_INT 0
10711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_OWVAR 2
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 30
10731: PUSH
10732: LD_INT 29
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 69
10747: ST_TO_ADDR
// if not tmp then
10748: LD_VAR 0 1
10752: NOT
10753: IFFALSE 10757
// exit ;
10755: GO 10770
// DestroyUnit ( tmp [ 1 ] ) ;
10757: LD_VAR 0 1
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 65
// end ;
10770: PPOPN 1
10772: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10773: LD_EXP 7
10777: PUSH
10778: LD_EXP 45
10782: AND
10783: IFFALSE 10912
10785: GO 10787
10787: DISABLE
10788: LD_INT 0
10790: PPUSH
// begin uc_side := 0 ;
10791: LD_ADDR_OWVAR 20
10795: PUSH
10796: LD_INT 0
10798: ST_TO_ADDR
// uc_nation := nation_arabian ;
10799: LD_ADDR_OWVAR 21
10803: PUSH
10804: LD_INT 2
10806: ST_TO_ADDR
// hc_gallery :=  ;
10807: LD_ADDR_OWVAR 33
10811: PUSH
10812: LD_STRING 
10814: ST_TO_ADDR
// hc_name :=  ;
10815: LD_ADDR_OWVAR 26
10819: PUSH
10820: LD_STRING 
10822: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10823: LD_INT 1
10825: PPUSH
10826: LD_INT 11
10828: PPUSH
10829: LD_INT 10
10831: PPUSH
10832: CALL_OW 380
// un := CreateHuman ;
10836: LD_ADDR_VAR 0 1
10840: PUSH
10841: CALL_OW 44
10845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10846: LD_VAR 0 1
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10858: LD_INT 35
10860: PPUSH
10861: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10865: LD_VAR 0 1
10869: PPUSH
10870: LD_INT 22
10872: PUSH
10873: LD_OWVAR 2
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PPUSH
10882: CALL_OW 69
10886: PPUSH
10887: LD_VAR 0 1
10891: PPUSH
10892: CALL_OW 74
10896: PPUSH
10897: CALL_OW 115
// until IsDead ( un ) ;
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 301
10910: IFFALSE 10858
// end ;
10912: PPOPN 1
10914: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10915: LD_EXP 7
10919: PUSH
10920: LD_EXP 47
10924: AND
10925: IFFALSE 10937
10927: GO 10929
10929: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10930: LD_STRING earthquake(getX(game), 0, 32)
10932: PPUSH
10933: CALL_OW 559
10937: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10938: LD_EXP 7
10942: PUSH
10943: LD_EXP 48
10947: AND
10948: IFFALSE 11039
10950: GO 10952
10952: DISABLE
10953: LD_INT 0
10955: PPUSH
// begin enable ;
10956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10957: LD_ADDR_VAR 0 1
10961: PUSH
10962: LD_INT 22
10964: PUSH
10965: LD_OWVAR 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 21
10976: PUSH
10977: LD_INT 2
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 33
10986: PUSH
10987: LD_INT 3
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 69
11003: ST_TO_ADDR
// if not tmp then
11004: LD_VAR 0 1
11008: NOT
11009: IFFALSE 11013
// exit ;
11011: GO 11039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11013: LD_VAR 0 1
11017: PUSH
11018: LD_INT 1
11020: PPUSH
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 12
11030: ARRAY
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 234
// end ;
11039: PPOPN 1
11041: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11042: LD_EXP 7
11046: PUSH
11047: LD_EXP 49
11051: AND
11052: IFFALSE 11193
11054: GO 11056
11056: DISABLE
11057: LD_INT 0
11059: PPUSH
11060: PPUSH
11061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11062: LD_ADDR_VAR 0 3
11066: PUSH
11067: LD_INT 22
11069: PUSH
11070: LD_OWVAR 2
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 69
11097: ST_TO_ADDR
// if not tmp then
11098: LD_VAR 0 3
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11193
// un := tmp [ rand ( 1 , tmp ) ] ;
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: LD_VAR 0 3
11116: PUSH
11117: LD_INT 1
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: CALL_OW 12
11129: ARRAY
11130: ST_TO_ADDR
// if Crawls ( un ) then
11131: LD_VAR 0 2
11135: PPUSH
11136: CALL_OW 318
11140: IFFALSE 11151
// ComWalk ( un ) ;
11142: LD_VAR 0 2
11146: PPUSH
11147: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11151: LD_VAR 0 2
11155: PPUSH
11156: LD_INT 9
11158: PPUSH
11159: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11163: LD_INT 28
11165: PPUSH
11166: LD_OWVAR 2
11170: PPUSH
11171: LD_INT 2
11173: PPUSH
11174: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11178: LD_INT 29
11180: PPUSH
11181: LD_OWVAR 2
11185: PPUSH
11186: LD_INT 2
11188: PPUSH
11189: CALL_OW 322
// end ;
11193: PPOPN 3
11195: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11196: LD_EXP 7
11200: PUSH
11201: LD_EXP 50
11205: AND
11206: IFFALSE 11317
11208: GO 11210
11210: DISABLE
11211: LD_INT 0
11213: PPUSH
11214: PPUSH
11215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: LD_INT 22
11223: PUSH
11224: LD_OWVAR 2
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 25
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: ST_TO_ADDR
// if not tmp then
11252: LD_VAR 0 3
11256: NOT
11257: IFFALSE 11261
// exit ;
11259: GO 11317
// un := tmp [ rand ( 1 , tmp ) ] ;
11261: LD_ADDR_VAR 0 2
11265: PUSH
11266: LD_VAR 0 3
11270: PUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_VAR 0 3
11278: PPUSH
11279: CALL_OW 12
11283: ARRAY
11284: ST_TO_ADDR
// if Crawls ( un ) then
11285: LD_VAR 0 2
11289: PPUSH
11290: CALL_OW 318
11294: IFFALSE 11305
// ComWalk ( un ) ;
11296: LD_VAR 0 2
11300: PPUSH
11301: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11305: LD_VAR 0 2
11309: PPUSH
11310: LD_INT 8
11312: PPUSH
11313: CALL_OW 336
// end ;
11317: PPOPN 3
11319: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11320: LD_EXP 7
11324: PUSH
11325: LD_EXP 51
11329: AND
11330: IFFALSE 11474
11332: GO 11334
11334: DISABLE
11335: LD_INT 0
11337: PPUSH
11338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11339: LD_ADDR_VAR 0 2
11343: PUSH
11344: LD_INT 22
11346: PUSH
11347: LD_OWVAR 2
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 2
11368: PUSH
11369: LD_INT 34
11371: PUSH
11372: LD_INT 12
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 34
11381: PUSH
11382: LD_INT 51
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 34
11391: PUSH
11392: LD_INT 32
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PPUSH
11410: CALL_OW 69
11414: ST_TO_ADDR
// if not tmp then
11415: LD_VAR 0 2
11419: NOT
11420: IFFALSE 11424
// exit ;
11422: GO 11474
// for i in tmp do
11424: LD_ADDR_VAR 0 1
11428: PUSH
11429: LD_VAR 0 2
11433: PUSH
11434: FOR_IN
11435: IFFALSE 11472
// if GetCargo ( i , mat_artifact ) = 0 then
11437: LD_VAR 0 1
11441: PPUSH
11442: LD_INT 4
11444: PPUSH
11445: CALL_OW 289
11449: PUSH
11450: LD_INT 0
11452: EQUAL
11453: IFFALSE 11470
// SetCargo ( i , mat_siberit , 100 ) ;
11455: LD_VAR 0 1
11459: PPUSH
11460: LD_INT 3
11462: PPUSH
11463: LD_INT 100
11465: PPUSH
11466: CALL_OW 290
11470: GO 11434
11472: POP
11473: POP
// end ;
11474: PPOPN 2
11476: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11477: LD_EXP 7
11481: PUSH
11482: LD_EXP 52
11486: AND
11487: IFFALSE 11670
11489: GO 11491
11491: DISABLE
11492: LD_INT 0
11494: PPUSH
11495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11496: LD_ADDR_VAR 0 2
11500: PUSH
11501: LD_INT 22
11503: PUSH
11504: LD_OWVAR 2
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: ST_TO_ADDR
// if not tmp then
11518: LD_VAR 0 2
11522: NOT
11523: IFFALSE 11527
// exit ;
11525: GO 11670
// for i := 1 to 2 do
11527: LD_ADDR_VAR 0 1
11531: PUSH
11532: DOUBLE
11533: LD_INT 1
11535: DEC
11536: ST_TO_ADDR
11537: LD_INT 2
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11668
// begin uc_side := your_side ;
11543: LD_ADDR_OWVAR 20
11547: PUSH
11548: LD_OWVAR 2
11552: ST_TO_ADDR
// uc_nation := nation_american ;
11553: LD_ADDR_OWVAR 21
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// vc_chassis := us_morphling ;
11561: LD_ADDR_OWVAR 37
11565: PUSH
11566: LD_INT 5
11568: ST_TO_ADDR
// vc_engine := engine_siberite ;
11569: LD_ADDR_OWVAR 39
11573: PUSH
11574: LD_INT 3
11576: ST_TO_ADDR
// vc_control := control_computer ;
11577: LD_ADDR_OWVAR 38
11581: PUSH
11582: LD_INT 3
11584: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11585: LD_ADDR_OWVAR 40
11589: PUSH
11590: LD_INT 10
11592: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11593: LD_VAR 0 2
11597: PUSH
11598: LD_INT 1
11600: ARRAY
11601: PPUSH
11602: CALL_OW 310
11606: NOT
11607: IFFALSE 11654
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11609: CALL_OW 45
11613: PPUSH
11614: LD_VAR 0 2
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: PPUSH
11623: CALL_OW 250
11627: PPUSH
11628: LD_VAR 0 2
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: CALL_OW 251
11641: PPUSH
11642: LD_INT 12
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 50
11652: GO 11666
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11654: CALL_OW 45
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 51
// end ;
11666: GO 11540
11668: POP
11669: POP
// end ;
11670: PPOPN 2
11672: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11673: LD_EXP 7
11677: PUSH
11678: LD_EXP 53
11682: AND
11683: IFFALSE 11905
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
11693: PPUSH
11694: PPUSH
11695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11696: LD_ADDR_VAR 0 6
11700: PUSH
11701: LD_INT 22
11703: PUSH
11704: LD_OWVAR 2
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 21
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 3
11725: PUSH
11726: LD_INT 23
11728: PUSH
11729: LD_INT 0
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: ST_TO_ADDR
// if not tmp then
11750: LD_VAR 0 6
11754: NOT
11755: IFFALSE 11759
// exit ;
11757: GO 11905
// s1 := rand ( 1 , 4 ) ;
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: LD_INT 1
11766: PPUSH
11767: LD_INT 4
11769: PPUSH
11770: CALL_OW 12
11774: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11775: LD_ADDR_VAR 0 4
11779: PUSH
11780: LD_VAR 0 6
11784: PUSH
11785: LD_INT 1
11787: ARRAY
11788: PPUSH
11789: LD_VAR 0 2
11793: PPUSH
11794: CALL_OW 259
11798: ST_TO_ADDR
// if s1 = 1 then
11799: LD_VAR 0 2
11803: PUSH
11804: LD_INT 1
11806: EQUAL
11807: IFFALSE 11827
// s2 := rand ( 2 , 4 ) else
11809: LD_ADDR_VAR 0 3
11813: PUSH
11814: LD_INT 2
11816: PPUSH
11817: LD_INT 4
11819: PPUSH
11820: CALL_OW 12
11824: ST_TO_ADDR
11825: GO 11835
// s2 := 1 ;
11827: LD_ADDR_VAR 0 3
11831: PUSH
11832: LD_INT 1
11834: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11835: LD_ADDR_VAR 0 5
11839: PUSH
11840: LD_VAR 0 6
11844: PUSH
11845: LD_INT 1
11847: ARRAY
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: CALL_OW 259
11858: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11859: LD_VAR 0 6
11863: PUSH
11864: LD_INT 1
11866: ARRAY
11867: PPUSH
11868: LD_VAR 0 2
11872: PPUSH
11873: LD_VAR 0 5
11877: PPUSH
11878: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11882: LD_VAR 0 6
11886: PUSH
11887: LD_INT 1
11889: ARRAY
11890: PPUSH
11891: LD_VAR 0 3
11895: PPUSH
11896: LD_VAR 0 4
11900: PPUSH
11901: CALL_OW 237
// end ;
11905: PPOPN 6
11907: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11908: LD_EXP 7
11912: PUSH
11913: LD_EXP 54
11917: AND
11918: IFFALSE 11997
11920: GO 11922
11922: DISABLE
11923: LD_INT 0
11925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_OWVAR 2
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 30
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PPUSH
11957: CALL_OW 69
11961: ST_TO_ADDR
// if not tmp then
11962: LD_VAR 0 1
11966: NOT
11967: IFFALSE 11971
// exit ;
11969: GO 11997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11971: LD_VAR 0 1
11975: PUSH
11976: LD_INT 1
11978: PPUSH
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 12
11988: ARRAY
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 234
// end ;
11997: PPOPN 1
11999: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12000: LD_EXP 7
12004: PUSH
12005: LD_EXP 55
12009: AND
12010: IFFALSE 12122
12012: GO 12014
12014: DISABLE
12015: LD_INT 0
12017: PPUSH
12018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12019: LD_ADDR_VAR 0 2
12023: PUSH
12024: LD_INT 22
12026: PUSH
12027: LD_OWVAR 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 27
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 30
12051: PUSH
12052: LD_INT 26
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 30
12061: PUSH
12062: LD_INT 28
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PPUSH
12079: CALL_OW 69
12083: ST_TO_ADDR
// if not tmp then
12084: LD_VAR 0 2
12088: NOT
12089: IFFALSE 12093
// exit ;
12091: GO 12122
// for i in tmp do
12093: LD_ADDR_VAR 0 1
12097: PUSH
12098: LD_VAR 0 2
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12120
// SetLives ( i , 1 ) ;
12106: LD_VAR 0 1
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 234
12118: GO 12103
12120: POP
12121: POP
// end ;
12122: PPOPN 2
12124: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12125: LD_EXP 7
12129: PUSH
12130: LD_EXP 56
12134: AND
12135: IFFALSE 12409
12137: GO 12139
12139: DISABLE
12140: LD_INT 0
12142: PPUSH
12143: PPUSH
12144: PPUSH
// begin i := rand ( 1 , 7 ) ;
12145: LD_ADDR_VAR 0 1
12149: PUSH
12150: LD_INT 1
12152: PPUSH
12153: LD_INT 7
12155: PPUSH
12156: CALL_OW 12
12160: ST_TO_ADDR
// case i of 1 :
12161: LD_VAR 0 1
12165: PUSH
12166: LD_INT 1
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12184
12174: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12175: LD_STRING earthquake(getX(game), 0, 32)
12177: PPUSH
12178: CALL_OW 559
12182: GO 12409
12184: LD_INT 2
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12206
12192: POP
// begin ToLua ( displayStucuk(); ) ;
12193: LD_STRING displayStucuk();
12195: PPUSH
12196: CALL_OW 559
// ResetFog ;
12200: CALL_OW 335
// end ; 3 :
12204: GO 12409
12206: LD_INT 3
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12318
12214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_OWVAR 2
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 25
12234: PUSH
12235: LD_INT 1
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 69
12250: ST_TO_ADDR
// if not tmp then
12251: LD_VAR 0 2
12255: NOT
12256: IFFALSE 12260
// exit ;
12258: GO 12409
// un := tmp [ rand ( 1 , tmp ) ] ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_VAR 0 2
12269: PUSH
12270: LD_INT 1
12272: PPUSH
12273: LD_VAR 0 2
12277: PPUSH
12278: CALL_OW 12
12282: ARRAY
12283: ST_TO_ADDR
// if Crawls ( un ) then
12284: LD_VAR 0 3
12288: PPUSH
12289: CALL_OW 318
12293: IFFALSE 12304
// ComWalk ( un ) ;
12295: LD_VAR 0 3
12299: PPUSH
12300: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 8
12311: PPUSH
12312: CALL_OW 336
// end ; 4 :
12316: GO 12409
12318: LD_INT 4
12320: DOUBLE
12321: EQUAL
12322: IFTRUE 12326
12324: GO 12387
12326: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12327: LD_ADDR_VAR 0 2
12331: PUSH
12332: LD_INT 22
12334: PUSH
12335: LD_OWVAR 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 29
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ST_TO_ADDR
// if not tmp then
12363: LD_VAR 0 2
12367: NOT
12368: IFFALSE 12372
// exit ;
12370: GO 12409
// DestroyUnit ( tmp [ 1 ] ) ;
12372: LD_VAR 0 2
12376: PUSH
12377: LD_INT 1
12379: ARRAY
12380: PPUSH
12381: CALL_OW 65
// end ; 5 .. 7 :
12385: GO 12409
12387: LD_INT 5
12389: DOUBLE
12390: GREATEREQUAL
12391: IFFALSE 12399
12393: LD_INT 7
12395: DOUBLE
12396: LESSEQUAL
12397: IFTRUE 12401
12399: GO 12408
12401: POP
// StreamSibBomb ; end ;
12402: CALL 8659 0 0
12406: GO 12409
12408: POP
// end ;
12409: PPOPN 3
12411: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12412: LD_EXP 7
12416: PUSH
12417: LD_EXP 57
12421: AND
12422: IFFALSE 12578
12424: GO 12426
12426: DISABLE
12427: LD_INT 0
12429: PPUSH
12430: PPUSH
12431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12432: LD_ADDR_VAR 0 2
12436: PUSH
12437: LD_INT 81
12439: PUSH
12440: LD_OWVAR 2
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 2
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 1
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 21
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 69
12485: ST_TO_ADDR
// if not tmp then
12486: LD_VAR 0 2
12490: NOT
12491: IFFALSE 12495
// exit ;
12493: GO 12578
// p := 0 ;
12495: LD_ADDR_VAR 0 3
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12503: LD_INT 35
12505: PPUSH
12506: CALL_OW 67
// p := p + 1 ;
12510: LD_ADDR_VAR 0 3
12514: PUSH
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 1
12522: PLUS
12523: ST_TO_ADDR
// for i in tmp do
12524: LD_ADDR_VAR 0 1
12528: PUSH
12529: LD_VAR 0 2
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12566
// if GetLives ( i ) < 1000 then
12537: LD_VAR 0 1
12541: PPUSH
12542: CALL_OW 256
12546: PUSH
12547: LD_INT 1000
12549: LESS
12550: IFFALSE 12564
// SetLives ( i , 1000 ) ;
12552: LD_VAR 0 1
12556: PPUSH
12557: LD_INT 1000
12559: PPUSH
12560: CALL_OW 234
12564: GO 12534
12566: POP
12567: POP
// until p > 20 ;
12568: LD_VAR 0 3
12572: PUSH
12573: LD_INT 20
12575: GREATER
12576: IFFALSE 12503
// end ;
12578: PPOPN 3
12580: END
// every 0 0$1 trigger StreamModeActive and sTime do
12581: LD_EXP 7
12585: PUSH
12586: LD_EXP 58
12590: AND
12591: IFFALSE 12626
12593: GO 12595
12595: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12596: LD_INT 28
12598: PPUSH
12599: LD_OWVAR 2
12603: PPUSH
12604: LD_INT 2
12606: PPUSH
12607: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12611: LD_INT 30
12613: PPUSH
12614: LD_OWVAR 2
12618: PPUSH
12619: LD_INT 2
12621: PPUSH
12622: CALL_OW 322
// end ;
12626: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12627: LD_EXP 7
12631: PUSH
12632: LD_EXP 59
12636: AND
12637: IFFALSE 12758
12639: GO 12641
12641: DISABLE
12642: LD_INT 0
12644: PPUSH
12645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12646: LD_ADDR_VAR 0 2
12650: PUSH
12651: LD_INT 22
12653: PUSH
12654: LD_OWVAR 2
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 21
12665: PUSH
12666: LD_INT 1
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 3
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 0
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 69
12699: ST_TO_ADDR
// if not tmp then
12700: LD_VAR 0 2
12704: NOT
12705: IFFALSE 12709
// exit ;
12707: GO 12758
// for i in tmp do
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_VAR 0 2
12718: PUSH
12719: FOR_IN
12720: IFFALSE 12756
// begin if Crawls ( i ) then
12722: LD_VAR 0 1
12726: PPUSH
12727: CALL_OW 318
12731: IFFALSE 12742
// ComWalk ( i ) ;
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 138
// SetClass ( i , 2 ) ;
12742: LD_VAR 0 1
12746: PPUSH
12747: LD_INT 2
12749: PPUSH
12750: CALL_OW 336
// end ;
12754: GO 12719
12756: POP
12757: POP
// end ;
12758: PPOPN 2
12760: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12761: LD_EXP 7
12765: PUSH
12766: LD_EXP 60
12770: AND
12771: IFFALSE 13052
12773: GO 12775
12775: DISABLE
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
12780: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12781: LD_OWVAR 2
12785: PPUSH
12786: LD_INT 9
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12799: LD_INT 9
12801: PPUSH
12802: LD_OWVAR 2
12806: PPUSH
12807: CALL_OW 343
// uc_side := 9 ;
12811: LD_ADDR_OWVAR 20
12815: PUSH
12816: LD_INT 9
12818: ST_TO_ADDR
// uc_nation := 2 ;
12819: LD_ADDR_OWVAR 21
12823: PUSH
12824: LD_INT 2
12826: ST_TO_ADDR
// hc_name := Dark Warrior ;
12827: LD_ADDR_OWVAR 26
12831: PUSH
12832: LD_STRING Dark Warrior
12834: ST_TO_ADDR
// hc_gallery :=  ;
12835: LD_ADDR_OWVAR 33
12839: PUSH
12840: LD_STRING 
12842: ST_TO_ADDR
// hc_noskilllimit := true ;
12843: LD_ADDR_OWVAR 76
12847: PUSH
12848: LD_INT 1
12850: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12851: LD_ADDR_OWVAR 31
12855: PUSH
12856: LD_INT 30
12858: PUSH
12859: LD_INT 30
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 30
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: ST_TO_ADDR
// un := CreateHuman ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: CALL_OW 44
12883: ST_TO_ADDR
// hc_noskilllimit := false ;
12884: LD_ADDR_OWVAR 76
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12892: LD_VAR 0 3
12896: PPUSH
12897: LD_INT 1
12899: PPUSH
12900: CALL_OW 51
// p := 0 ;
12904: LD_ADDR_VAR 0 2
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12912: LD_INT 35
12914: PPUSH
12915: CALL_OW 67
// p := p + 1 ;
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 1
12931: PLUS
12932: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12933: LD_VAR 0 3
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 1000
12945: LESS
12946: IFFALSE 12960
// SetLives ( un , 1000 ) ;
12948: LD_VAR 0 3
12952: PPUSH
12953: LD_INT 1000
12955: PPUSH
12956: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12960: LD_VAR 0 3
12964: PPUSH
12965: LD_INT 81
12967: PUSH
12968: LD_OWVAR 2
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 91
12979: PUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 30
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PPUSH
12997: CALL_OW 69
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: CALL_OW 74
13011: PPUSH
13012: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13016: LD_VAR 0 2
13020: PUSH
13021: LD_INT 60
13023: GREATER
13024: PUSH
13025: LD_VAR 0 3
13029: PPUSH
13030: CALL_OW 301
13034: OR
13035: IFFALSE 12912
// if un then
13037: LD_VAR 0 3
13041: IFFALSE 13052
// RemoveUnit ( un ) ;
13043: LD_VAR 0 3
13047: PPUSH
13048: CALL_OW 64
// end ;
13052: PPOPN 3
13054: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13055: LD_INT 0
13057: PPUSH
// case cmd of 301 :
13058: LD_VAR 0 1
13062: PUSH
13063: LD_INT 301
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13103
13071: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13072: LD_VAR 0 6
13076: PPUSH
13077: LD_VAR 0 7
13081: PPUSH
13082: LD_VAR 0 8
13086: PPUSH
13087: LD_VAR 0 4
13091: PPUSH
13092: LD_VAR 0 5
13096: PPUSH
13097: CALL 14304 0 5
13101: GO 13224
13103: LD_INT 302
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13148
13111: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13112: LD_VAR 0 6
13116: PPUSH
13117: LD_VAR 0 7
13121: PPUSH
13122: LD_VAR 0 8
13126: PPUSH
13127: LD_VAR 0 9
13131: PPUSH
13132: LD_VAR 0 4
13136: PPUSH
13137: LD_VAR 0 5
13141: PPUSH
13142: CALL 14395 0 6
13146: GO 13224
13148: LD_INT 303
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13193
13156: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13157: LD_VAR 0 6
13161: PPUSH
13162: LD_VAR 0 7
13166: PPUSH
13167: LD_VAR 0 8
13171: PPUSH
13172: LD_VAR 0 9
13176: PPUSH
13177: LD_VAR 0 4
13181: PPUSH
13182: LD_VAR 0 5
13186: PPUSH
13187: CALL 13229 0 6
13191: GO 13224
13193: LD_INT 304
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13223
13201: POP
// hHackTeleport ( unit , x , y ) ; end ;
13202: LD_VAR 0 2
13206: PPUSH
13207: LD_VAR 0 4
13211: PPUSH
13212: LD_VAR 0 5
13216: PPUSH
13217: CALL 14988 0 3
13221: GO 13224
13223: POP
// end ;
13224: LD_VAR 0 12
13228: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13233: LD_VAR 0 1
13237: PUSH
13238: LD_INT 1
13240: LESS
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: LD_INT 3
13249: GREATER
13250: OR
13251: PUSH
13252: LD_VAR 0 5
13256: PPUSH
13257: LD_VAR 0 6
13261: PPUSH
13262: CALL_OW 428
13266: OR
13267: IFFALSE 13271
// exit ;
13269: GO 13991
// uc_side := your_side ;
13271: LD_ADDR_OWVAR 20
13275: PUSH
13276: LD_OWVAR 2
13280: ST_TO_ADDR
// uc_nation := nation ;
13281: LD_ADDR_OWVAR 21
13285: PUSH
13286: LD_VAR 0 1
13290: ST_TO_ADDR
// bc_level = 1 ;
13291: LD_ADDR_OWVAR 43
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// case btype of 1 :
13299: LD_VAR 0 2
13303: PUSH
13304: LD_INT 1
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13323
13312: POP
// bc_type := b_depot ; 2 :
13313: LD_ADDR_OWVAR 42
13317: PUSH
13318: LD_INT 0
13320: ST_TO_ADDR
13321: GO 13935
13323: LD_INT 2
13325: DOUBLE
13326: EQUAL
13327: IFTRUE 13331
13329: GO 13342
13331: POP
// bc_type := b_warehouse ; 3 :
13332: LD_ADDR_OWVAR 42
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
13340: GO 13935
13342: LD_INT 3
13344: DOUBLE
13345: EQUAL
13346: IFTRUE 13350
13348: GO 13361
13350: POP
// bc_type := b_lab ; 4 .. 9 :
13351: LD_ADDR_OWVAR 42
13355: PUSH
13356: LD_INT 6
13358: ST_TO_ADDR
13359: GO 13935
13361: LD_INT 4
13363: DOUBLE
13364: GREATEREQUAL
13365: IFFALSE 13373
13367: LD_INT 9
13369: DOUBLE
13370: LESSEQUAL
13371: IFTRUE 13375
13373: GO 13427
13375: POP
// begin bc_type := b_lab_half ;
13376: LD_ADDR_OWVAR 42
13380: PUSH
13381: LD_INT 7
13383: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13384: LD_ADDR_OWVAR 44
13388: PUSH
13389: LD_INT 10
13391: PUSH
13392: LD_INT 11
13394: PUSH
13395: LD_INT 12
13397: PUSH
13398: LD_INT 15
13400: PUSH
13401: LD_INT 14
13403: PUSH
13404: LD_INT 13
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_VAR 0 2
13419: PUSH
13420: LD_INT 3
13422: MINUS
13423: ARRAY
13424: ST_TO_ADDR
// end ; 10 .. 13 :
13425: GO 13935
13427: LD_INT 10
13429: DOUBLE
13430: GREATEREQUAL
13431: IFFALSE 13439
13433: LD_INT 13
13435: DOUBLE
13436: LESSEQUAL
13437: IFTRUE 13441
13439: GO 13518
13441: POP
// begin bc_type := b_lab_full ;
13442: LD_ADDR_OWVAR 42
13446: PUSH
13447: LD_INT 8
13449: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13450: LD_ADDR_OWVAR 44
13454: PUSH
13455: LD_INT 10
13457: PUSH
13458: LD_INT 12
13460: PUSH
13461: LD_INT 14
13463: PUSH
13464: LD_INT 13
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: LD_VAR 0 2
13477: PUSH
13478: LD_INT 9
13480: MINUS
13481: ARRAY
13482: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13483: LD_ADDR_OWVAR 45
13487: PUSH
13488: LD_INT 11
13490: PUSH
13491: LD_INT 15
13493: PUSH
13494: LD_INT 12
13496: PUSH
13497: LD_INT 15
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PUSH
13506: LD_VAR 0 2
13510: PUSH
13511: LD_INT 9
13513: MINUS
13514: ARRAY
13515: ST_TO_ADDR
// end ; 14 :
13516: GO 13935
13518: LD_INT 14
13520: DOUBLE
13521: EQUAL
13522: IFTRUE 13526
13524: GO 13537
13526: POP
// bc_type := b_workshop ; 15 :
13527: LD_ADDR_OWVAR 42
13531: PUSH
13532: LD_INT 2
13534: ST_TO_ADDR
13535: GO 13935
13537: LD_INT 15
13539: DOUBLE
13540: EQUAL
13541: IFTRUE 13545
13543: GO 13556
13545: POP
// bc_type := b_factory ; 16 :
13546: LD_ADDR_OWVAR 42
13550: PUSH
13551: LD_INT 3
13553: ST_TO_ADDR
13554: GO 13935
13556: LD_INT 16
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13575
13564: POP
// bc_type := b_ext_gun ; 17 :
13565: LD_ADDR_OWVAR 42
13569: PUSH
13570: LD_INT 17
13572: ST_TO_ADDR
13573: GO 13935
13575: LD_INT 17
13577: DOUBLE
13578: EQUAL
13579: IFTRUE 13583
13581: GO 13611
13583: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13584: LD_ADDR_OWVAR 42
13588: PUSH
13589: LD_INT 19
13591: PUSH
13592: LD_INT 23
13594: PUSH
13595: LD_INT 19
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_VAR 0 1
13607: ARRAY
13608: ST_TO_ADDR
13609: GO 13935
13611: LD_INT 18
13613: DOUBLE
13614: EQUAL
13615: IFTRUE 13619
13617: GO 13630
13619: POP
// bc_type := b_ext_radar ; 19 :
13620: LD_ADDR_OWVAR 42
13624: PUSH
13625: LD_INT 20
13627: ST_TO_ADDR
13628: GO 13935
13630: LD_INT 19
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13649
13638: POP
// bc_type := b_ext_radio ; 20 :
13639: LD_ADDR_OWVAR 42
13643: PUSH
13644: LD_INT 22
13646: ST_TO_ADDR
13647: GO 13935
13649: LD_INT 20
13651: DOUBLE
13652: EQUAL
13653: IFTRUE 13657
13655: GO 13668
13657: POP
// bc_type := b_ext_siberium ; 21 :
13658: LD_ADDR_OWVAR 42
13662: PUSH
13663: LD_INT 21
13665: ST_TO_ADDR
13666: GO 13935
13668: LD_INT 21
13670: DOUBLE
13671: EQUAL
13672: IFTRUE 13676
13674: GO 13687
13676: POP
// bc_type := b_ext_computer ; 22 :
13677: LD_ADDR_OWVAR 42
13681: PUSH
13682: LD_INT 24
13684: ST_TO_ADDR
13685: GO 13935
13687: LD_INT 22
13689: DOUBLE
13690: EQUAL
13691: IFTRUE 13695
13693: GO 13706
13695: POP
// bc_type := b_ext_track ; 23 :
13696: LD_ADDR_OWVAR 42
13700: PUSH
13701: LD_INT 16
13703: ST_TO_ADDR
13704: GO 13935
13706: LD_INT 23
13708: DOUBLE
13709: EQUAL
13710: IFTRUE 13714
13712: GO 13725
13714: POP
// bc_type := b_ext_laser ; 24 :
13715: LD_ADDR_OWVAR 42
13719: PUSH
13720: LD_INT 25
13722: ST_TO_ADDR
13723: GO 13935
13725: LD_INT 24
13727: DOUBLE
13728: EQUAL
13729: IFTRUE 13733
13731: GO 13744
13733: POP
// bc_type := b_control_tower ; 25 :
13734: LD_ADDR_OWVAR 42
13738: PUSH
13739: LD_INT 36
13741: ST_TO_ADDR
13742: GO 13935
13744: LD_INT 25
13746: DOUBLE
13747: EQUAL
13748: IFTRUE 13752
13750: GO 13763
13752: POP
// bc_type := b_breastwork ; 26 :
13753: LD_ADDR_OWVAR 42
13757: PUSH
13758: LD_INT 31
13760: ST_TO_ADDR
13761: GO 13935
13763: LD_INT 26
13765: DOUBLE
13766: EQUAL
13767: IFTRUE 13771
13769: GO 13782
13771: POP
// bc_type := b_bunker ; 27 :
13772: LD_ADDR_OWVAR 42
13776: PUSH
13777: LD_INT 32
13779: ST_TO_ADDR
13780: GO 13935
13782: LD_INT 27
13784: DOUBLE
13785: EQUAL
13786: IFTRUE 13790
13788: GO 13801
13790: POP
// bc_type := b_turret ; 28 :
13791: LD_ADDR_OWVAR 42
13795: PUSH
13796: LD_INT 33
13798: ST_TO_ADDR
13799: GO 13935
13801: LD_INT 28
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13820
13809: POP
// bc_type := b_armoury ; 29 :
13810: LD_ADDR_OWVAR 42
13814: PUSH
13815: LD_INT 4
13817: ST_TO_ADDR
13818: GO 13935
13820: LD_INT 29
13822: DOUBLE
13823: EQUAL
13824: IFTRUE 13828
13826: GO 13839
13828: POP
// bc_type := b_barracks ; 30 :
13829: LD_ADDR_OWVAR 42
13833: PUSH
13834: LD_INT 5
13836: ST_TO_ADDR
13837: GO 13935
13839: LD_INT 30
13841: DOUBLE
13842: EQUAL
13843: IFTRUE 13847
13845: GO 13858
13847: POP
// bc_type := b_solar_power ; 31 :
13848: LD_ADDR_OWVAR 42
13852: PUSH
13853: LD_INT 27
13855: ST_TO_ADDR
13856: GO 13935
13858: LD_INT 31
13860: DOUBLE
13861: EQUAL
13862: IFTRUE 13866
13864: GO 13877
13866: POP
// bc_type := b_oil_power ; 32 :
13867: LD_ADDR_OWVAR 42
13871: PUSH
13872: LD_INT 26
13874: ST_TO_ADDR
13875: GO 13935
13877: LD_INT 32
13879: DOUBLE
13880: EQUAL
13881: IFTRUE 13885
13883: GO 13896
13885: POP
// bc_type := b_siberite_power ; 33 :
13886: LD_ADDR_OWVAR 42
13890: PUSH
13891: LD_INT 28
13893: ST_TO_ADDR
13894: GO 13935
13896: LD_INT 33
13898: DOUBLE
13899: EQUAL
13900: IFTRUE 13904
13902: GO 13915
13904: POP
// bc_type := b_oil_mine ; 34 :
13905: LD_ADDR_OWVAR 42
13909: PUSH
13910: LD_INT 29
13912: ST_TO_ADDR
13913: GO 13935
13915: LD_INT 34
13917: DOUBLE
13918: EQUAL
13919: IFTRUE 13923
13921: GO 13934
13923: POP
// bc_type := b_siberite_mine ; end ;
13924: LD_ADDR_OWVAR 42
13928: PUSH
13929: LD_INT 30
13931: ST_TO_ADDR
13932: GO 13935
13934: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13935: LD_ADDR_VAR 0 8
13939: PUSH
13940: LD_VAR 0 5
13944: PPUSH
13945: LD_VAR 0 6
13949: PPUSH
13950: LD_VAR 0 3
13954: PPUSH
13955: CALL_OW 47
13959: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13960: LD_OWVAR 42
13964: PUSH
13965: LD_INT 32
13967: PUSH
13968: LD_INT 33
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: IN
13975: IFFALSE 13991
// PlaceWeaponTurret ( b , weapon ) ;
13977: LD_VAR 0 8
13981: PPUSH
13982: LD_VAR 0 4
13986: PPUSH
13987: CALL_OW 431
// end ;
13991: LD_VAR 0 7
13995: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14002: LD_ADDR_VAR 0 4
14006: PUSH
14007: LD_INT 22
14009: PUSH
14010: LD_OWVAR 2
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: LD_INT 30
14024: PUSH
14025: LD_INT 0
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 30
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 69
14055: ST_TO_ADDR
// if not tmp then
14056: LD_VAR 0 4
14060: NOT
14061: IFFALSE 14065
// exit ;
14063: GO 14124
// for i in tmp do
14065: LD_ADDR_VAR 0 2
14069: PUSH
14070: LD_VAR 0 4
14074: PUSH
14075: FOR_IN
14076: IFFALSE 14122
// for j = 1 to 3 do
14078: LD_ADDR_VAR 0 3
14082: PUSH
14083: DOUBLE
14084: LD_INT 1
14086: DEC
14087: ST_TO_ADDR
14088: LD_INT 3
14090: PUSH
14091: FOR_TO
14092: IFFALSE 14118
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14094: LD_VAR 0 2
14098: PPUSH
14099: CALL_OW 274
14103: PPUSH
14104: LD_VAR 0 3
14108: PPUSH
14109: LD_INT 99999
14111: PPUSH
14112: CALL_OW 277
14116: GO 14091
14118: POP
14119: POP
14120: GO 14075
14122: POP
14123: POP
// end ;
14124: LD_VAR 0 1
14128: RET
// export function hHackSetLevel10 ; var i , j ; begin
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
14133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14134: LD_ADDR_VAR 0 2
14138: PUSH
14139: LD_INT 21
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PPUSH
14149: CALL_OW 69
14153: PUSH
14154: FOR_IN
14155: IFFALSE 14207
// if IsSelected ( i ) then
14157: LD_VAR 0 2
14161: PPUSH
14162: CALL_OW 306
14166: IFFALSE 14205
// begin for j := 1 to 4 do
14168: LD_ADDR_VAR 0 3
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_INT 4
14180: PUSH
14181: FOR_TO
14182: IFFALSE 14203
// SetSkill ( i , j , 10 ) ;
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 10
14196: PPUSH
14197: CALL_OW 237
14201: GO 14181
14203: POP
14204: POP
// end ;
14205: GO 14154
14207: POP
14208: POP
// end ;
14209: LD_VAR 0 1
14213: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14214: LD_INT 0
14216: PPUSH
14217: PPUSH
14218: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14219: LD_ADDR_VAR 0 2
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 21
14238: PUSH
14239: LD_INT 1
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PPUSH
14250: CALL_OW 69
14254: PUSH
14255: FOR_IN
14256: IFFALSE 14297
// begin for j := 1 to 4 do
14258: LD_ADDR_VAR 0 3
14262: PUSH
14263: DOUBLE
14264: LD_INT 1
14266: DEC
14267: ST_TO_ADDR
14268: LD_INT 4
14270: PUSH
14271: FOR_TO
14272: IFFALSE 14293
// SetSkill ( i , j , 10 ) ;
14274: LD_VAR 0 2
14278: PPUSH
14279: LD_VAR 0 3
14283: PPUSH
14284: LD_INT 10
14286: PPUSH
14287: CALL_OW 237
14291: GO 14271
14293: POP
14294: POP
// end ;
14295: GO 14255
14297: POP
14298: POP
// end ;
14299: LD_VAR 0 1
14303: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14304: LD_INT 0
14306: PPUSH
// uc_side := your_side ;
14307: LD_ADDR_OWVAR 20
14311: PUSH
14312: LD_OWVAR 2
14316: ST_TO_ADDR
// uc_nation := nation ;
14317: LD_ADDR_OWVAR 21
14321: PUSH
14322: LD_VAR 0 1
14326: ST_TO_ADDR
// InitHc ;
14327: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14331: LD_INT 0
14333: PPUSH
14334: LD_VAR 0 2
14338: PPUSH
14339: LD_VAR 0 3
14343: PPUSH
14344: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14348: LD_VAR 0 4
14352: PPUSH
14353: LD_VAR 0 5
14357: PPUSH
14358: CALL_OW 428
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: IFFALSE 14390
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14368: CALL_OW 44
14372: PPUSH
14373: LD_VAR 0 4
14377: PPUSH
14378: LD_VAR 0 5
14382: PPUSH
14383: LD_INT 1
14385: PPUSH
14386: CALL_OW 48
// end ;
14390: LD_VAR 0 6
14394: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14395: LD_INT 0
14397: PPUSH
14398: PPUSH
// uc_side := your_side ;
14399: LD_ADDR_OWVAR 20
14403: PUSH
14404: LD_OWVAR 2
14408: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14409: LD_VAR 0 1
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: LD_INT 3
14422: PUSH
14423: LD_INT 4
14425: PUSH
14426: LD_INT 5
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: IN
14436: IFFALSE 14448
// uc_nation := nation_american else
14438: LD_ADDR_OWVAR 21
14442: PUSH
14443: LD_INT 1
14445: ST_TO_ADDR
14446: GO 14491
// if chassis in [ 11 , 12 , 13 , 14 ] then
14448: LD_VAR 0 1
14452: PUSH
14453: LD_INT 11
14455: PUSH
14456: LD_INT 12
14458: PUSH
14459: LD_INT 13
14461: PUSH
14462: LD_INT 14
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: IN
14471: IFFALSE 14483
// uc_nation := nation_arabian else
14473: LD_ADDR_OWVAR 21
14477: PUSH
14478: LD_INT 2
14480: ST_TO_ADDR
14481: GO 14491
// uc_nation := nation_russian ;
14483: LD_ADDR_OWVAR 21
14487: PUSH
14488: LD_INT 3
14490: ST_TO_ADDR
// vc_chassis := chassis ;
14491: LD_ADDR_OWVAR 37
14495: PUSH
14496: LD_VAR 0 1
14500: ST_TO_ADDR
// vc_engine := engine ;
14501: LD_ADDR_OWVAR 39
14505: PUSH
14506: LD_VAR 0 2
14510: ST_TO_ADDR
// vc_control := control ;
14511: LD_ADDR_OWVAR 38
14515: PUSH
14516: LD_VAR 0 3
14520: ST_TO_ADDR
// vc_weapon := weapon ;
14521: LD_ADDR_OWVAR 40
14525: PUSH
14526: LD_VAR 0 4
14530: ST_TO_ADDR
// un := CreateVehicle ;
14531: LD_ADDR_VAR 0 8
14535: PUSH
14536: CALL_OW 45
14540: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14541: LD_VAR 0 8
14545: PPUSH
14546: LD_INT 0
14548: PPUSH
14549: LD_INT 5
14551: PPUSH
14552: CALL_OW 12
14556: PPUSH
14557: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14561: LD_VAR 0 8
14565: PPUSH
14566: LD_VAR 0 5
14570: PPUSH
14571: LD_VAR 0 6
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 48
// end ;
14583: LD_VAR 0 7
14587: RET
// export hInvincible ; every 1 do
14588: GO 14590
14590: DISABLE
// hInvincible := [ ] ;
14591: LD_ADDR_EXP 61
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
14598: END
// every 10 do var i ;
14599: GO 14601
14601: DISABLE
14602: LD_INT 0
14604: PPUSH
// begin enable ;
14605: ENABLE
// if not hInvincible then
14606: LD_EXP 61
14610: NOT
14611: IFFALSE 14615
// exit ;
14613: GO 14659
// for i in hInvincible do
14615: LD_ADDR_VAR 0 1
14619: PUSH
14620: LD_EXP 61
14624: PUSH
14625: FOR_IN
14626: IFFALSE 14657
// if GetLives ( i ) < 1000 then
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 256
14637: PUSH
14638: LD_INT 1000
14640: LESS
14641: IFFALSE 14655
// SetLives ( i , 1000 ) ;
14643: LD_VAR 0 1
14647: PPUSH
14648: LD_INT 1000
14650: PPUSH
14651: CALL_OW 234
14655: GO 14625
14657: POP
14658: POP
// end ;
14659: PPOPN 1
14661: END
// export function hHackInvincible ; var i ; begin
14662: LD_INT 0
14664: PPUSH
14665: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 21
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: PUSH
14704: FOR_IN
14705: IFFALSE 14766
// if IsSelected ( i ) then
14707: LD_VAR 0 2
14711: PPUSH
14712: CALL_OW 306
14716: IFFALSE 14764
// begin if i in hInvincible then
14718: LD_VAR 0 2
14722: PUSH
14723: LD_EXP 61
14727: IN
14728: IFFALSE 14748
// hInvincible := hInvincible diff i else
14730: LD_ADDR_EXP 61
14734: PUSH
14735: LD_EXP 61
14739: PUSH
14740: LD_VAR 0 2
14744: DIFF
14745: ST_TO_ADDR
14746: GO 14764
// hInvincible := hInvincible union i ;
14748: LD_ADDR_EXP 61
14752: PUSH
14753: LD_EXP 61
14757: PUSH
14758: LD_VAR 0 2
14762: UNION
14763: ST_TO_ADDR
// end ;
14764: GO 14704
14766: POP
14767: POP
// end ;
14768: LD_VAR 0 1
14772: RET
// export function hHackInvisible ; var i , j ; begin
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
14777: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14778: LD_ADDR_VAR 0 2
14782: PUSH
14783: LD_INT 21
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PPUSH
14793: CALL_OW 69
14797: PUSH
14798: FOR_IN
14799: IFFALSE 14823
// if IsSelected ( i ) then
14801: LD_VAR 0 2
14805: PPUSH
14806: CALL_OW 306
14810: IFFALSE 14821
// ComForceInvisible ( i ) ;
14812: LD_VAR 0 2
14816: PPUSH
14817: CALL_OW 496
14821: GO 14798
14823: POP
14824: POP
// end ;
14825: LD_VAR 0 1
14829: RET
// export function hHackChangeYourSide ; begin
14830: LD_INT 0
14832: PPUSH
// if your_side = 8 then
14833: LD_OWVAR 2
14837: PUSH
14838: LD_INT 8
14840: EQUAL
14841: IFFALSE 14853
// your_side := 0 else
14843: LD_ADDR_OWVAR 2
14847: PUSH
14848: LD_INT 0
14850: ST_TO_ADDR
14851: GO 14867
// your_side := your_side + 1 ;
14853: LD_ADDR_OWVAR 2
14857: PUSH
14858: LD_OWVAR 2
14862: PUSH
14863: LD_INT 1
14865: PLUS
14866: ST_TO_ADDR
// end ;
14867: LD_VAR 0 1
14871: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// for i in all_units do
14877: LD_ADDR_VAR 0 2
14881: PUSH
14882: LD_OWVAR 3
14886: PUSH
14887: FOR_IN
14888: IFFALSE 14966
// if IsSelected ( i ) then
14890: LD_VAR 0 2
14894: PPUSH
14895: CALL_OW 306
14899: IFFALSE 14964
// begin j := GetSide ( i ) ;
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: LD_VAR 0 2
14910: PPUSH
14911: CALL_OW 255
14915: ST_TO_ADDR
// if j = 8 then
14916: LD_VAR 0 3
14920: PUSH
14921: LD_INT 8
14923: EQUAL
14924: IFFALSE 14936
// j := 0 else
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_INT 0
14933: ST_TO_ADDR
14934: GO 14950
// j := j + 1 ;
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_VAR 0 3
14945: PUSH
14946: LD_INT 1
14948: PLUS
14949: ST_TO_ADDR
// SetSide ( i , j ) ;
14950: LD_VAR 0 2
14954: PPUSH
14955: LD_VAR 0 3
14959: PPUSH
14960: CALL_OW 235
// end ;
14964: GO 14887
14966: POP
14967: POP
// end ;
14968: LD_VAR 0 1
14972: RET
// export function hHackFog ; begin
14973: LD_INT 0
14975: PPUSH
// FogOff ( true ) ;
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 344
// end ;
14983: LD_VAR 0 1
14987: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14988: LD_INT 0
14990: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14991: LD_VAR 0 1
14995: PPUSH
14996: LD_VAR 0 2
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: LD_INT 1
15011: PPUSH
15012: CALL_OW 483
// CenterOnXY ( x , y ) ;
15016: LD_VAR 0 2
15020: PPUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: CALL_OW 84
// end ; end_of_file
15030: LD_VAR 0 4
15034: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15035: LD_VAR 0 1
15039: PUSH
15040: LD_INT 200
15042: DOUBLE
15043: GREATEREQUAL
15044: IFFALSE 15052
15046: LD_INT 299
15048: DOUBLE
15049: LESSEQUAL
15050: IFTRUE 15054
15052: GO 15086
15054: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15055: LD_VAR 0 1
15059: PPUSH
15060: LD_VAR 0 2
15064: PPUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_VAR 0 4
15074: PPUSH
15075: LD_VAR 0 5
15079: PPUSH
15080: CALL 15330 0 5
15084: GO 15163
15086: LD_INT 300
15088: DOUBLE
15089: GREATEREQUAL
15090: IFFALSE 15098
15092: LD_INT 399
15094: DOUBLE
15095: LESSEQUAL
15096: IFTRUE 15100
15098: GO 15162
15100: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_VAR 0 4
15120: PPUSH
15121: LD_VAR 0 5
15125: PPUSH
15126: LD_VAR 0 6
15130: PPUSH
15131: LD_VAR 0 7
15135: PPUSH
15136: LD_VAR 0 8
15140: PPUSH
15141: LD_VAR 0 9
15145: PPUSH
15146: LD_VAR 0 10
15150: PPUSH
15151: LD_VAR 0 11
15155: PPUSH
15156: CALL 13055 0 11
15160: GO 15163
15162: POP
// end ;
15163: PPOPN 11
15165: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_VAR 0 2
15175: PPUSH
15176: LD_VAR 0 3
15180: PPUSH
15181: LD_VAR 0 4
15185: PPUSH
15186: LD_VAR 0 5
15190: PPUSH
15191: CALL 15312 0 5
// end ; end_of_file
15195: PPOPN 5
15197: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15198: LD_INT 0
15200: PPUSH
15201: PPUSH
15202: PPUSH
15203: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 264
15213: PUSH
15214: LD_EXP 78
15218: EQUAL
15219: IFFALSE 15291
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15221: LD_INT 68
15223: PPUSH
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 255
15233: PPUSH
15234: CALL_OW 321
15238: PUSH
15239: LD_INT 2
15241: EQUAL
15242: IFFALSE 15254
// eff := 70 else
15244: LD_ADDR_VAR 0 4
15248: PUSH
15249: LD_INT 70
15251: ST_TO_ADDR
15252: GO 15262
// eff := 30 ;
15254: LD_ADDR_VAR 0 4
15258: PUSH
15259: LD_INT 30
15261: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 250
15271: PPUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 251
15281: PPUSH
15282: LD_VAR 0 4
15286: PPUSH
15287: CALL_OW 495
// end ; end ;
15291: LD_VAR 0 2
15295: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15296: LD_INT 0
15298: PPUSH
// end ;
15299: LD_VAR 0 4
15303: RET
// export function SOS_Command ( cmd ) ; begin
15304: LD_INT 0
15306: PPUSH
// end ;
15307: LD_VAR 0 2
15311: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15312: LD_INT 0
15314: PPUSH
// if cmd = 121 then
15315: LD_VAR 0 1
15319: PUSH
15320: LD_INT 121
15322: EQUAL
15323: IFFALSE 15325
// end ;
15325: LD_VAR 0 6
15329: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15330: LD_INT 0
15332: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15333: LD_VAR 0 1
15337: PUSH
15338: LD_INT 250
15340: EQUAL
15341: PUSH
15342: LD_VAR 0 2
15346: PPUSH
15347: CALL_OW 264
15351: PUSH
15352: LD_EXP 81
15356: EQUAL
15357: AND
15358: IFFALSE 15379
// MinerPlaceMine ( unit , x , y ) ;
15360: LD_VAR 0 2
15364: PPUSH
15365: LD_VAR 0 4
15369: PPUSH
15370: LD_VAR 0 5
15374: PPUSH
15375: CALL 17728 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15379: LD_VAR 0 1
15383: PUSH
15384: LD_INT 251
15386: EQUAL
15387: PUSH
15388: LD_VAR 0 2
15392: PPUSH
15393: CALL_OW 264
15397: PUSH
15398: LD_EXP 81
15402: EQUAL
15403: AND
15404: IFFALSE 15425
// MinerDetonateMine ( unit , x , y ) ;
15406: LD_VAR 0 2
15410: PPUSH
15411: LD_VAR 0 4
15415: PPUSH
15416: LD_VAR 0 5
15420: PPUSH
15421: CALL 18005 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15425: LD_VAR 0 1
15429: PUSH
15430: LD_INT 252
15432: EQUAL
15433: PUSH
15434: LD_VAR 0 2
15438: PPUSH
15439: CALL_OW 264
15443: PUSH
15444: LD_EXP 81
15448: EQUAL
15449: AND
15450: IFFALSE 15471
// MinerCreateMinefield ( unit , x , y ) ;
15452: LD_VAR 0 2
15456: PPUSH
15457: LD_VAR 0 4
15461: PPUSH
15462: LD_VAR 0 5
15466: PPUSH
15467: CALL 18422 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15471: LD_VAR 0 1
15475: PUSH
15476: LD_INT 253
15478: EQUAL
15479: PUSH
15480: LD_VAR 0 2
15484: PPUSH
15485: CALL_OW 257
15489: PUSH
15490: LD_INT 5
15492: EQUAL
15493: AND
15494: IFFALSE 15515
// ComBinocular ( unit , x , y ) ;
15496: LD_VAR 0 2
15500: PPUSH
15501: LD_VAR 0 4
15505: PPUSH
15506: LD_VAR 0 5
15510: PPUSH
15511: CALL 18793 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 254
15522: EQUAL
15523: PUSH
15524: LD_VAR 0 2
15528: PPUSH
15529: CALL_OW 264
15533: PUSH
15534: LD_EXP 76
15538: EQUAL
15539: AND
15540: PUSH
15541: LD_VAR 0 3
15545: PPUSH
15546: CALL_OW 263
15550: PUSH
15551: LD_INT 3
15553: EQUAL
15554: AND
15555: IFFALSE 15571
// HackDestroyVehicle ( unit , selectedUnit ) ;
15557: LD_VAR 0 2
15561: PPUSH
15562: LD_VAR 0 3
15566: PPUSH
15567: CALL 17088 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 255
15578: EQUAL
15579: PUSH
15580: LD_VAR 0 2
15584: PPUSH
15585: CALL_OW 264
15589: PUSH
15590: LD_INT 14
15592: PUSH
15593: LD_INT 53
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: IN
15600: AND
15601: PUSH
15602: LD_VAR 0 4
15606: PPUSH
15607: LD_VAR 0 5
15611: PPUSH
15612: CALL_OW 488
15616: AND
15617: IFFALSE 15641
// CutTreeXYR ( unit , x , y , 12 ) ;
15619: LD_VAR 0 2
15623: PPUSH
15624: LD_VAR 0 4
15628: PPUSH
15629: LD_VAR 0 5
15633: PPUSH
15634: LD_INT 12
15636: PPUSH
15637: CALL 15654 0 4
// end ;
15641: LD_VAR 0 6
15645: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
15646: LD_INT 0
15648: PPUSH
// end ;
15649: LD_VAR 0 4
15653: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
15659: PPUSH
15660: PPUSH
15661: PPUSH
15662: PPUSH
15663: PPUSH
15664: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15665: LD_VAR 0 1
15669: NOT
15670: PUSH
15671: LD_VAR 0 2
15675: PPUSH
15676: LD_VAR 0 3
15680: PPUSH
15681: CALL_OW 488
15685: NOT
15686: OR
15687: PUSH
15688: LD_VAR 0 4
15692: NOT
15693: OR
15694: IFFALSE 15698
// exit ;
15696: GO 16038
// list := [ ] ;
15698: LD_ADDR_VAR 0 13
15702: PUSH
15703: EMPTY
15704: ST_TO_ADDR
// if x - r < 0 then
15705: LD_VAR 0 2
15709: PUSH
15710: LD_VAR 0 4
15714: MINUS
15715: PUSH
15716: LD_INT 0
15718: LESS
15719: IFFALSE 15731
// min_x := 0 else
15721: LD_ADDR_VAR 0 7
15725: PUSH
15726: LD_INT 0
15728: ST_TO_ADDR
15729: GO 15747
// min_x := x - r ;
15731: LD_ADDR_VAR 0 7
15735: PUSH
15736: LD_VAR 0 2
15740: PUSH
15741: LD_VAR 0 4
15745: MINUS
15746: ST_TO_ADDR
// if y - r < 0 then
15747: LD_VAR 0 3
15751: PUSH
15752: LD_VAR 0 4
15756: MINUS
15757: PUSH
15758: LD_INT 0
15760: LESS
15761: IFFALSE 15773
// min_y := 0 else
15763: LD_ADDR_VAR 0 8
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
15771: GO 15789
// min_y := y - r ;
15773: LD_ADDR_VAR 0 8
15777: PUSH
15778: LD_VAR 0 3
15782: PUSH
15783: LD_VAR 0 4
15787: MINUS
15788: ST_TO_ADDR
// max_x := x + r ;
15789: LD_ADDR_VAR 0 9
15793: PUSH
15794: LD_VAR 0 2
15798: PUSH
15799: LD_VAR 0 4
15803: PLUS
15804: ST_TO_ADDR
// max_y := y + r ;
15805: LD_ADDR_VAR 0 10
15809: PUSH
15810: LD_VAR 0 3
15814: PUSH
15815: LD_VAR 0 4
15819: PLUS
15820: ST_TO_ADDR
// for _x = min_x to max_x do
15821: LD_ADDR_VAR 0 11
15825: PUSH
15826: DOUBLE
15827: LD_VAR 0 7
15831: DEC
15832: ST_TO_ADDR
15833: LD_VAR 0 9
15837: PUSH
15838: FOR_TO
15839: IFFALSE 15956
// for _y = min_y to max_y do
15841: LD_ADDR_VAR 0 12
15845: PUSH
15846: DOUBLE
15847: LD_VAR 0 8
15851: DEC
15852: ST_TO_ADDR
15853: LD_VAR 0 10
15857: PUSH
15858: FOR_TO
15859: IFFALSE 15952
// begin if not ValidHex ( _x , _y ) then
15861: LD_VAR 0 11
15865: PPUSH
15866: LD_VAR 0 12
15870: PPUSH
15871: CALL_OW 488
15875: NOT
15876: IFFALSE 15880
// continue ;
15878: GO 15858
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15880: LD_VAR 0 11
15884: PPUSH
15885: LD_VAR 0 12
15889: PPUSH
15890: CALL_OW 351
15894: PUSH
15895: LD_VAR 0 11
15899: PPUSH
15900: LD_VAR 0 12
15904: PPUSH
15905: CALL_OW 554
15909: AND
15910: IFFALSE 15950
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15912: LD_ADDR_VAR 0 13
15916: PUSH
15917: LD_VAR 0 13
15921: PPUSH
15922: LD_VAR 0 13
15926: PUSH
15927: LD_INT 1
15929: PLUS
15930: PPUSH
15931: LD_VAR 0 11
15935: PUSH
15936: LD_VAR 0 12
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PPUSH
15945: CALL_OW 2
15949: ST_TO_ADDR
// end ;
15950: GO 15858
15952: POP
15953: POP
15954: GO 15838
15956: POP
15957: POP
// if not list then
15958: LD_VAR 0 13
15962: NOT
15963: IFFALSE 15967
// exit ;
15965: GO 16038
// for i in list do
15967: LD_ADDR_VAR 0 6
15971: PUSH
15972: LD_VAR 0 13
15976: PUSH
15977: FOR_IN
15978: IFFALSE 16036
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15980: LD_VAR 0 1
15984: PPUSH
15985: LD_STRING M
15987: PUSH
15988: LD_VAR 0 6
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PUSH
15997: LD_VAR 0 6
16001: PUSH
16002: LD_INT 2
16004: ARRAY
16005: PUSH
16006: LD_INT 0
16008: PUSH
16009: LD_INT 0
16011: PUSH
16012: LD_INT 0
16014: PUSH
16015: LD_INT 0
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: PPUSH
16030: CALL_OW 447
16034: GO 15977
16036: POP
16037: POP
// end ;
16038: LD_VAR 0 5
16042: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16043: LD_EXP 64
16047: NOT
16048: IFFALSE 16098
16050: GO 16052
16052: DISABLE
// begin initHack := true ;
16053: LD_ADDR_EXP 64
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// hackTanks := [ ] ;
16061: LD_ADDR_EXP 65
16065: PUSH
16066: EMPTY
16067: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16068: LD_ADDR_EXP 66
16072: PUSH
16073: EMPTY
16074: ST_TO_ADDR
// hackLimit := 3 ;
16075: LD_ADDR_EXP 67
16079: PUSH
16080: LD_INT 3
16082: ST_TO_ADDR
// hackDist := 12 ;
16083: LD_ADDR_EXP 68
16087: PUSH
16088: LD_INT 12
16090: ST_TO_ADDR
// hackCounter := [ ] ;
16091: LD_ADDR_EXP 69
16095: PUSH
16096: EMPTY
16097: ST_TO_ADDR
// end ;
16098: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16099: LD_EXP 64
16103: PUSH
16104: LD_INT 34
16106: PUSH
16107: LD_EXP 76
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PPUSH
16116: CALL_OW 69
16120: AND
16121: IFFALSE 16376
16123: GO 16125
16125: DISABLE
16126: LD_INT 0
16128: PPUSH
16129: PPUSH
// begin enable ;
16130: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16131: LD_ADDR_VAR 0 1
16135: PUSH
16136: LD_INT 34
16138: PUSH
16139: LD_EXP 76
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: PUSH
16153: FOR_IN
16154: IFFALSE 16374
// begin if not i in hackTanks then
16156: LD_VAR 0 1
16160: PUSH
16161: LD_EXP 65
16165: IN
16166: NOT
16167: IFFALSE 16250
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16169: LD_ADDR_EXP 65
16173: PUSH
16174: LD_EXP 65
16178: PPUSH
16179: LD_EXP 65
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: PPUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 1
16197: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16198: LD_ADDR_EXP 66
16202: PUSH
16203: LD_EXP 66
16207: PPUSH
16208: LD_EXP 66
16212: PUSH
16213: LD_INT 1
16215: PLUS
16216: PPUSH
16217: EMPTY
16218: PPUSH
16219: CALL_OW 1
16223: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16224: LD_ADDR_EXP 69
16228: PUSH
16229: LD_EXP 69
16233: PPUSH
16234: LD_EXP 69
16238: PUSH
16239: LD_INT 1
16241: PLUS
16242: PPUSH
16243: EMPTY
16244: PPUSH
16245: CALL_OW 1
16249: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16250: LD_VAR 0 1
16254: PPUSH
16255: CALL_OW 302
16259: NOT
16260: IFFALSE 16273
// begin HackUnlinkAll ( i ) ;
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL 16379 0 1
// continue ;
16271: GO 16153
// end ; HackCheckCapturedStatus ( i ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL 16822 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16282: LD_ADDR_VAR 0 2
16286: PUSH
16287: LD_INT 81
16289: PUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 255
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 33
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 91
16316: PUSH
16317: LD_VAR 0 1
16321: PUSH
16322: LD_EXP 68
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 50
16334: PUSH
16335: EMPTY
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if not tmp then
16349: LD_VAR 0 2
16353: NOT
16354: IFFALSE 16358
// continue ;
16356: GO 16153
// HackLink ( i , tmp ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_VAR 0 2
16367: PPUSH
16368: CALL 16515 0 2
// end ;
16372: GO 16153
16374: POP
16375: POP
// end ;
16376: PPOPN 2
16378: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16379: LD_INT 0
16381: PPUSH
16382: PPUSH
16383: PPUSH
// if not hack in hackTanks then
16384: LD_VAR 0 1
16388: PUSH
16389: LD_EXP 65
16393: IN
16394: NOT
16395: IFFALSE 16399
// exit ;
16397: GO 16510
// index := GetElementIndex ( hackTanks , hack ) ;
16399: LD_ADDR_VAR 0 4
16403: PUSH
16404: LD_EXP 65
16408: PPUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL 24104 0 2
16418: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16419: LD_EXP 66
16423: PUSH
16424: LD_VAR 0 4
16428: ARRAY
16429: IFFALSE 16510
// begin for i in hackTanksCaptured [ index ] do
16431: LD_ADDR_VAR 0 3
16435: PUSH
16436: LD_EXP 66
16440: PUSH
16441: LD_VAR 0 4
16445: ARRAY
16446: PUSH
16447: FOR_IN
16448: IFFALSE 16474
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16450: LD_VAR 0 3
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: PPUSH
16459: LD_VAR 0 3
16463: PUSH
16464: LD_INT 2
16466: ARRAY
16467: PPUSH
16468: CALL_OW 235
16472: GO 16447
16474: POP
16475: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16476: LD_ADDR_EXP 66
16480: PUSH
16481: LD_EXP 66
16485: PPUSH
16486: LD_VAR 0 4
16490: PPUSH
16491: EMPTY
16492: PPUSH
16493: CALL_OW 1
16497: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_INT 0
16505: PPUSH
16506: CALL_OW 505
// end ; end ;
16510: LD_VAR 0 2
16514: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16515: LD_INT 0
16517: PPUSH
16518: PPUSH
16519: PPUSH
// if not hack in hackTanks or not vehicles then
16520: LD_VAR 0 1
16524: PUSH
16525: LD_EXP 65
16529: IN
16530: NOT
16531: PUSH
16532: LD_VAR 0 2
16536: NOT
16537: OR
16538: IFFALSE 16542
// exit ;
16540: GO 16817
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_VAR 0 2
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: LD_INT 1
16562: PPUSH
16563: CALL 24754 0 4
16567: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16568: LD_ADDR_VAR 0 5
16572: PUSH
16573: LD_EXP 65
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL 24104 0 2
16587: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16588: LD_EXP 66
16592: PUSH
16593: LD_VAR 0 5
16597: ARRAY
16598: PUSH
16599: LD_EXP 67
16603: LESS
16604: IFFALSE 16793
// begin for i := 1 to vehicles do
16606: LD_ADDR_VAR 0 4
16610: PUSH
16611: DOUBLE
16612: LD_INT 1
16614: DEC
16615: ST_TO_ADDR
16616: LD_VAR 0 2
16620: PUSH
16621: FOR_TO
16622: IFFALSE 16791
// begin if hackTanksCaptured [ index ] = hackLimit then
16624: LD_EXP 66
16628: PUSH
16629: LD_VAR 0 5
16633: ARRAY
16634: PUSH
16635: LD_EXP 67
16639: EQUAL
16640: IFFALSE 16644
// break ;
16642: GO 16791
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16644: LD_ADDR_EXP 69
16648: PUSH
16649: LD_EXP 69
16653: PPUSH
16654: LD_VAR 0 5
16658: PPUSH
16659: LD_EXP 69
16663: PUSH
16664: LD_VAR 0 5
16668: ARRAY
16669: PUSH
16670: LD_INT 1
16672: PLUS
16673: PPUSH
16674: CALL_OW 1
16678: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16679: LD_ADDR_EXP 66
16683: PUSH
16684: LD_EXP 66
16688: PPUSH
16689: LD_VAR 0 5
16693: PUSH
16694: LD_EXP 66
16698: PUSH
16699: LD_VAR 0 5
16703: ARRAY
16704: PUSH
16705: LD_INT 1
16707: PLUS
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PPUSH
16713: LD_VAR 0 2
16717: PUSH
16718: LD_VAR 0 4
16722: ARRAY
16723: PUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_VAR 0 4
16733: ARRAY
16734: PPUSH
16735: CALL_OW 255
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PPUSH
16744: CALL 24319 0 3
16748: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16749: LD_VAR 0 2
16753: PUSH
16754: LD_VAR 0 4
16758: ARRAY
16759: PPUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 255
16769: PPUSH
16770: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16774: LD_VAR 0 2
16778: PUSH
16779: LD_VAR 0 4
16783: ARRAY
16784: PPUSH
16785: CALL_OW 141
// end ;
16789: GO 16621
16791: POP
16792: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16793: LD_VAR 0 1
16797: PPUSH
16798: LD_EXP 66
16802: PUSH
16803: LD_VAR 0 5
16807: ARRAY
16808: PUSH
16809: LD_INT 0
16811: PLUS
16812: PPUSH
16813: CALL_OW 505
// end ;
16817: LD_VAR 0 3
16821: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16822: LD_INT 0
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
// if not hack in hackTanks then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_EXP 65
16837: IN
16838: NOT
16839: IFFALSE 16843
// exit ;
16841: GO 17083
// index := GetElementIndex ( hackTanks , hack ) ;
16843: LD_ADDR_VAR 0 4
16847: PUSH
16848: LD_EXP 65
16852: PPUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL 24104 0 2
16862: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16863: LD_ADDR_VAR 0 3
16867: PUSH
16868: DOUBLE
16869: LD_EXP 66
16873: PUSH
16874: LD_VAR 0 4
16878: ARRAY
16879: INC
16880: ST_TO_ADDR
16881: LD_INT 1
16883: PUSH
16884: FOR_DOWNTO
16885: IFFALSE 17057
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16887: LD_ADDR_VAR 0 5
16891: PUSH
16892: LD_EXP 66
16896: PUSH
16897: LD_VAR 0 4
16901: ARRAY
16902: PUSH
16903: LD_VAR 0 3
16907: ARRAY
16908: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16909: LD_VAR 0 5
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: CALL_OW 302
16922: NOT
16923: PUSH
16924: LD_VAR 0 5
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: CALL_OW 255
16937: PUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: CALL_OW 255
16947: NONEQUAL
16948: OR
16949: IFFALSE 17055
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16951: LD_VAR 0 5
16955: PUSH
16956: LD_INT 1
16958: ARRAY
16959: PPUSH
16960: CALL_OW 305
16964: PUSH
16965: LD_VAR 0 5
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PPUSH
16974: CALL_OW 255
16978: PUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 255
16988: EQUAL
16989: AND
16990: IFFALSE 17014
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16992: LD_VAR 0 5
16996: PUSH
16997: LD_INT 1
16999: ARRAY
17000: PPUSH
17001: LD_VAR 0 5
17005: PUSH
17006: LD_INT 2
17008: ARRAY
17009: PPUSH
17010: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17014: LD_ADDR_EXP 66
17018: PUSH
17019: LD_EXP 66
17023: PPUSH
17024: LD_VAR 0 4
17028: PPUSH
17029: LD_EXP 66
17033: PUSH
17034: LD_VAR 0 4
17038: ARRAY
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: CALL_OW 3
17049: PPUSH
17050: CALL_OW 1
17054: ST_TO_ADDR
// end ; end ;
17055: GO 16884
17057: POP
17058: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_EXP 66
17068: PUSH
17069: LD_VAR 0 4
17073: ARRAY
17074: PUSH
17075: LD_INT 0
17077: PLUS
17078: PPUSH
17079: CALL_OW 505
// end ;
17083: LD_VAR 0 2
17087: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
// if not hack in hackTanks then
17094: LD_VAR 0 1
17098: PUSH
17099: LD_EXP 65
17103: IN
17104: NOT
17105: IFFALSE 17109
// exit ;
17107: GO 17194
// index := GetElementIndex ( hackTanks , hack ) ;
17109: LD_ADDR_VAR 0 5
17113: PUSH
17114: LD_EXP 65
17118: PPUSH
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL 24104 0 2
17128: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17129: LD_ADDR_VAR 0 4
17133: PUSH
17134: DOUBLE
17135: LD_INT 1
17137: DEC
17138: ST_TO_ADDR
17139: LD_EXP 66
17143: PUSH
17144: LD_VAR 0 5
17148: ARRAY
17149: PUSH
17150: FOR_TO
17151: IFFALSE 17192
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17153: LD_EXP 66
17157: PUSH
17158: LD_VAR 0 5
17162: ARRAY
17163: PUSH
17164: LD_VAR 0 4
17168: ARRAY
17169: PUSH
17170: LD_INT 1
17172: ARRAY
17173: PUSH
17174: LD_VAR 0 2
17178: EQUAL
17179: IFFALSE 17190
// KillUnit ( vehicle ) ;
17181: LD_VAR 0 2
17185: PPUSH
17186: CALL_OW 66
17190: GO 17150
17192: POP
17193: POP
// end ;
17194: LD_VAR 0 3
17198: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17199: LD_EXP 70
17203: NOT
17204: IFFALSE 17239
17206: GO 17208
17208: DISABLE
// begin initMiner := true ;
17209: LD_ADDR_EXP 70
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// minersList := [ ] ;
17217: LD_ADDR_EXP 71
17221: PUSH
17222: EMPTY
17223: ST_TO_ADDR
// minerMinesList := [ ] ;
17224: LD_ADDR_EXP 72
17228: PUSH
17229: EMPTY
17230: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17231: LD_ADDR_EXP 73
17235: PUSH
17236: LD_INT 5
17238: ST_TO_ADDR
// end ;
17239: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17240: LD_EXP 70
17244: PUSH
17245: LD_INT 34
17247: PUSH
17248: LD_EXP 81
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 69
17261: AND
17262: IFFALSE 17725
17264: GO 17266
17266: DISABLE
17267: LD_INT 0
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
// begin enable ;
17273: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: LD_INT 34
17281: PUSH
17282: LD_EXP 81
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: PUSH
17296: FOR_IN
17297: IFFALSE 17369
// begin if not i in minersList then
17299: LD_VAR 0 1
17303: PUSH
17304: LD_EXP 71
17308: IN
17309: NOT
17310: IFFALSE 17367
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17312: LD_ADDR_EXP 71
17316: PUSH
17317: LD_EXP 71
17321: PPUSH
17322: LD_EXP 71
17326: PUSH
17327: LD_INT 1
17329: PLUS
17330: PPUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: CALL_OW 1
17340: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17341: LD_ADDR_EXP 72
17345: PUSH
17346: LD_EXP 72
17350: PPUSH
17351: LD_EXP 72
17355: PUSH
17356: LD_INT 1
17358: PLUS
17359: PPUSH
17360: EMPTY
17361: PPUSH
17362: CALL_OW 1
17366: ST_TO_ADDR
// end end ;
17367: GO 17296
17369: POP
17370: POP
// for i := minerMinesList downto 1 do
17371: LD_ADDR_VAR 0 1
17375: PUSH
17376: DOUBLE
17377: LD_EXP 72
17381: INC
17382: ST_TO_ADDR
17383: LD_INT 1
17385: PUSH
17386: FOR_DOWNTO
17387: IFFALSE 17723
// begin if IsLive ( minersList [ i ] ) then
17389: LD_EXP 71
17393: PUSH
17394: LD_VAR 0 1
17398: ARRAY
17399: PPUSH
17400: CALL_OW 300
17404: IFFALSE 17432
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17406: LD_EXP 71
17410: PUSH
17411: LD_VAR 0 1
17415: ARRAY
17416: PPUSH
17417: LD_EXP 72
17421: PUSH
17422: LD_VAR 0 1
17426: ARRAY
17427: PPUSH
17428: CALL_OW 505
// if not minerMinesList [ i ] then
17432: LD_EXP 72
17436: PUSH
17437: LD_VAR 0 1
17441: ARRAY
17442: NOT
17443: IFFALSE 17447
// continue ;
17445: GO 17386
// for j := minerMinesList [ i ] downto 1 do
17447: LD_ADDR_VAR 0 2
17451: PUSH
17452: DOUBLE
17453: LD_EXP 72
17457: PUSH
17458: LD_VAR 0 1
17462: ARRAY
17463: INC
17464: ST_TO_ADDR
17465: LD_INT 1
17467: PUSH
17468: FOR_DOWNTO
17469: IFFALSE 17719
// begin side := GetSide ( minersList [ i ] ) ;
17471: LD_ADDR_VAR 0 3
17475: PUSH
17476: LD_EXP 71
17480: PUSH
17481: LD_VAR 0 1
17485: ARRAY
17486: PPUSH
17487: CALL_OW 255
17491: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17492: LD_ADDR_VAR 0 4
17496: PUSH
17497: LD_EXP 72
17501: PUSH
17502: LD_VAR 0 1
17506: ARRAY
17507: PUSH
17508: LD_VAR 0 2
17512: ARRAY
17513: PUSH
17514: LD_INT 1
17516: ARRAY
17517: PPUSH
17518: LD_EXP 72
17522: PUSH
17523: LD_VAR 0 1
17527: ARRAY
17528: PUSH
17529: LD_VAR 0 2
17533: ARRAY
17534: PUSH
17535: LD_INT 2
17537: ARRAY
17538: PPUSH
17539: CALL_OW 428
17543: ST_TO_ADDR
// if not tmp then
17544: LD_VAR 0 4
17548: NOT
17549: IFFALSE 17553
// continue ;
17551: GO 17468
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17553: LD_VAR 0 4
17557: PUSH
17558: LD_INT 81
17560: PUSH
17561: LD_VAR 0 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PPUSH
17570: CALL_OW 69
17574: IN
17575: PUSH
17576: LD_EXP 72
17580: PUSH
17581: LD_VAR 0 1
17585: ARRAY
17586: PUSH
17587: LD_VAR 0 2
17591: ARRAY
17592: PUSH
17593: LD_INT 1
17595: ARRAY
17596: PPUSH
17597: LD_EXP 72
17601: PUSH
17602: LD_VAR 0 1
17606: ARRAY
17607: PUSH
17608: LD_VAR 0 2
17612: ARRAY
17613: PUSH
17614: LD_INT 2
17616: ARRAY
17617: PPUSH
17618: CALL_OW 458
17622: AND
17623: IFFALSE 17717
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17625: LD_EXP 72
17629: PUSH
17630: LD_VAR 0 1
17634: ARRAY
17635: PUSH
17636: LD_VAR 0 2
17640: ARRAY
17641: PUSH
17642: LD_INT 1
17644: ARRAY
17645: PPUSH
17646: LD_EXP 72
17650: PUSH
17651: LD_VAR 0 1
17655: ARRAY
17656: PUSH
17657: LD_VAR 0 2
17661: ARRAY
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PPUSH
17667: LD_VAR 0 3
17671: PPUSH
17672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17676: LD_ADDR_EXP 72
17680: PUSH
17681: LD_EXP 72
17685: PPUSH
17686: LD_VAR 0 1
17690: PPUSH
17691: LD_EXP 72
17695: PUSH
17696: LD_VAR 0 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 2
17706: PPUSH
17707: CALL_OW 3
17711: PPUSH
17712: CALL_OW 1
17716: ST_TO_ADDR
// end ; end ;
17717: GO 17468
17719: POP
17720: POP
// end ;
17721: GO 17386
17723: POP
17724: POP
// end ;
17725: PPOPN 4
17727: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17728: LD_INT 0
17730: PPUSH
17731: PPUSH
// result := false ;
17732: LD_ADDR_VAR 0 4
17736: PUSH
17737: LD_INT 0
17739: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL_OW 264
17749: PUSH
17750: LD_EXP 81
17754: EQUAL
17755: NOT
17756: IFFALSE 17760
// exit ;
17758: GO 18000
// index := GetElementIndex ( minersList , unit ) ;
17760: LD_ADDR_VAR 0 5
17764: PUSH
17765: LD_EXP 71
17769: PPUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL 24104 0 2
17779: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17780: LD_EXP 72
17784: PUSH
17785: LD_VAR 0 5
17789: ARRAY
17790: PUSH
17791: LD_EXP 73
17795: GREATEREQUAL
17796: IFFALSE 17800
// exit ;
17798: GO 18000
// ComMoveXY ( unit , x , y ) ;
17800: LD_VAR 0 1
17804: PPUSH
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17819: LD_INT 35
17821: PPUSH
17822: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17826: LD_VAR 0 1
17830: PPUSH
17831: LD_VAR 0 2
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: CALL 54501 0 3
17845: NOT
17846: PUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 314
17856: AND
17857: IFFALSE 17861
// exit ;
17859: GO 18000
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17861: LD_VAR 0 2
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: CALL_OW 428
17875: PUSH
17876: LD_VAR 0 1
17880: EQUAL
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 314
17891: NOT
17892: AND
17893: IFFALSE 17819
// PlaySoundXY ( x , y , PlantMine ) ;
17895: LD_VAR 0 2
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: LD_STRING PlantMine
17907: PPUSH
17908: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17912: LD_VAR 0 2
17916: PPUSH
17917: LD_VAR 0 3
17921: PPUSH
17922: LD_VAR 0 1
17926: PPUSH
17927: CALL_OW 255
17931: PPUSH
17932: LD_INT 0
17934: PPUSH
17935: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17939: LD_ADDR_EXP 72
17943: PUSH
17944: LD_EXP 72
17948: PPUSH
17949: LD_VAR 0 5
17953: PUSH
17954: LD_EXP 72
17958: PUSH
17959: LD_VAR 0 5
17963: ARRAY
17964: PUSH
17965: LD_INT 1
17967: PLUS
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PPUSH
17973: LD_VAR 0 2
17977: PUSH
17978: LD_VAR 0 3
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL 24319 0 3
17991: ST_TO_ADDR
// result := true ;
17992: LD_ADDR_VAR 0 4
17996: PUSH
17997: LD_INT 1
17999: ST_TO_ADDR
// end ;
18000: LD_VAR 0 4
18004: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18005: LD_INT 0
18007: PPUSH
18008: PPUSH
18009: PPUSH
// if not unit in minersList then
18010: LD_VAR 0 1
18014: PUSH
18015: LD_EXP 71
18019: IN
18020: NOT
18021: IFFALSE 18025
// exit ;
18023: GO 18417
// index := GetElementIndex ( minersList , unit ) ;
18025: LD_ADDR_VAR 0 6
18029: PUSH
18030: LD_EXP 71
18034: PPUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL 24104 0 2
18044: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18045: LD_ADDR_VAR 0 5
18049: PUSH
18050: DOUBLE
18051: LD_EXP 72
18055: PUSH
18056: LD_VAR 0 6
18060: ARRAY
18061: INC
18062: ST_TO_ADDR
18063: LD_INT 1
18065: PUSH
18066: FOR_DOWNTO
18067: IFFALSE 18228
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18069: LD_EXP 72
18073: PUSH
18074: LD_VAR 0 6
18078: ARRAY
18079: PUSH
18080: LD_VAR 0 5
18084: ARRAY
18085: PUSH
18086: LD_INT 1
18088: ARRAY
18089: PUSH
18090: LD_VAR 0 2
18094: EQUAL
18095: PUSH
18096: LD_EXP 72
18100: PUSH
18101: LD_VAR 0 6
18105: ARRAY
18106: PUSH
18107: LD_VAR 0 5
18111: ARRAY
18112: PUSH
18113: LD_INT 2
18115: ARRAY
18116: PUSH
18117: LD_VAR 0 3
18121: EQUAL
18122: AND
18123: IFFALSE 18226
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18125: LD_EXP 72
18129: PUSH
18130: LD_VAR 0 6
18134: ARRAY
18135: PUSH
18136: LD_VAR 0 5
18140: ARRAY
18141: PUSH
18142: LD_INT 1
18144: ARRAY
18145: PPUSH
18146: LD_EXP 72
18150: PUSH
18151: LD_VAR 0 6
18155: ARRAY
18156: PUSH
18157: LD_VAR 0 5
18161: ARRAY
18162: PUSH
18163: LD_INT 2
18165: ARRAY
18166: PPUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 255
18176: PPUSH
18177: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18181: LD_ADDR_EXP 72
18185: PUSH
18186: LD_EXP 72
18190: PPUSH
18191: LD_VAR 0 6
18195: PPUSH
18196: LD_EXP 72
18200: PUSH
18201: LD_VAR 0 6
18205: ARRAY
18206: PPUSH
18207: LD_VAR 0 5
18211: PPUSH
18212: CALL_OW 3
18216: PPUSH
18217: CALL_OW 1
18221: ST_TO_ADDR
// exit ;
18222: POP
18223: POP
18224: GO 18417
// end ; end ;
18226: GO 18066
18228: POP
18229: POP
// for i := minerMinesList [ index ] downto 1 do
18230: LD_ADDR_VAR 0 5
18234: PUSH
18235: DOUBLE
18236: LD_EXP 72
18240: PUSH
18241: LD_VAR 0 6
18245: ARRAY
18246: INC
18247: ST_TO_ADDR
18248: LD_INT 1
18250: PUSH
18251: FOR_DOWNTO
18252: IFFALSE 18415
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18254: LD_EXP 72
18258: PUSH
18259: LD_VAR 0 6
18263: ARRAY
18264: PUSH
18265: LD_VAR 0 5
18269: ARRAY
18270: PUSH
18271: LD_INT 1
18273: ARRAY
18274: PPUSH
18275: LD_EXP 72
18279: PUSH
18280: LD_VAR 0 6
18284: ARRAY
18285: PUSH
18286: LD_VAR 0 5
18290: ARRAY
18291: PUSH
18292: LD_INT 2
18294: ARRAY
18295: PPUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: CALL_OW 298
18310: PUSH
18311: LD_INT 6
18313: LESS
18314: IFFALSE 18413
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18316: LD_EXP 72
18320: PUSH
18321: LD_VAR 0 6
18325: ARRAY
18326: PUSH
18327: LD_VAR 0 5
18331: ARRAY
18332: PUSH
18333: LD_INT 1
18335: ARRAY
18336: PPUSH
18337: LD_EXP 72
18341: PUSH
18342: LD_VAR 0 6
18346: ARRAY
18347: PUSH
18348: LD_VAR 0 5
18352: ARRAY
18353: PUSH
18354: LD_INT 2
18356: ARRAY
18357: PPUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 255
18367: PPUSH
18368: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18372: LD_ADDR_EXP 72
18376: PUSH
18377: LD_EXP 72
18381: PPUSH
18382: LD_VAR 0 6
18386: PPUSH
18387: LD_EXP 72
18391: PUSH
18392: LD_VAR 0 6
18396: ARRAY
18397: PPUSH
18398: LD_VAR 0 5
18402: PPUSH
18403: CALL_OW 3
18407: PPUSH
18408: CALL_OW 1
18412: ST_TO_ADDR
// end ; end ;
18413: GO 18251
18415: POP
18416: POP
// end ;
18417: LD_VAR 0 4
18421: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18422: LD_INT 0
18424: PPUSH
18425: PPUSH
18426: PPUSH
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 264
18442: PUSH
18443: LD_EXP 81
18447: EQUAL
18448: NOT
18449: PUSH
18450: LD_VAR 0 1
18454: PUSH
18455: LD_EXP 71
18459: IN
18460: NOT
18461: OR
18462: IFFALSE 18466
// exit ;
18464: GO 18788
// index := GetElementIndex ( minersList , unit ) ;
18466: LD_ADDR_VAR 0 6
18470: PUSH
18471: LD_EXP 71
18475: PPUSH
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL 24104 0 2
18485: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18486: LD_ADDR_VAR 0 8
18490: PUSH
18491: LD_EXP 73
18495: PUSH
18496: LD_EXP 72
18500: PUSH
18501: LD_VAR 0 6
18505: ARRAY
18506: MINUS
18507: ST_TO_ADDR
// if not minesFreeAmount then
18508: LD_VAR 0 8
18512: NOT
18513: IFFALSE 18517
// exit ;
18515: GO 18788
// tmp := [ ] ;
18517: LD_ADDR_VAR 0 7
18521: PUSH
18522: EMPTY
18523: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18524: LD_ADDR_VAR 0 5
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_VAR 0 8
18538: PUSH
18539: FOR_TO
18540: IFFALSE 18735
// begin _d := rand ( 0 , 5 ) ;
18542: LD_ADDR_VAR 0 11
18546: PUSH
18547: LD_INT 0
18549: PPUSH
18550: LD_INT 5
18552: PPUSH
18553: CALL_OW 12
18557: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18558: LD_ADDR_VAR 0 12
18562: PUSH
18563: LD_INT 2
18565: PPUSH
18566: LD_INT 6
18568: PPUSH
18569: CALL_OW 12
18573: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18574: LD_ADDR_VAR 0 9
18578: PUSH
18579: LD_VAR 0 2
18583: PPUSH
18584: LD_VAR 0 11
18588: PPUSH
18589: LD_VAR 0 12
18593: PPUSH
18594: CALL_OW 272
18598: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18599: LD_ADDR_VAR 0 10
18603: PUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_VAR 0 11
18613: PPUSH
18614: LD_VAR 0 12
18618: PPUSH
18619: CALL_OW 273
18623: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18624: LD_VAR 0 9
18628: PPUSH
18629: LD_VAR 0 10
18633: PPUSH
18634: CALL_OW 488
18638: PUSH
18639: LD_VAR 0 9
18643: PUSH
18644: LD_VAR 0 10
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_VAR 0 7
18657: IN
18658: NOT
18659: AND
18660: PUSH
18661: LD_VAR 0 9
18665: PPUSH
18666: LD_VAR 0 10
18670: PPUSH
18671: CALL_OW 458
18675: NOT
18676: AND
18677: IFFALSE 18719
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18679: LD_ADDR_VAR 0 7
18683: PUSH
18684: LD_VAR 0 7
18688: PPUSH
18689: LD_VAR 0 7
18693: PUSH
18694: LD_INT 1
18696: PLUS
18697: PPUSH
18698: LD_VAR 0 9
18702: PUSH
18703: LD_VAR 0 10
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 1
18716: ST_TO_ADDR
18717: GO 18733
// i := i - 1 ;
18719: LD_ADDR_VAR 0 5
18723: PUSH
18724: LD_VAR 0 5
18728: PUSH
18729: LD_INT 1
18731: MINUS
18732: ST_TO_ADDR
// end ;
18733: GO 18539
18735: POP
18736: POP
// for i in tmp do
18737: LD_ADDR_VAR 0 5
18741: PUSH
18742: LD_VAR 0 7
18746: PUSH
18747: FOR_IN
18748: IFFALSE 18786
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18750: LD_VAR 0 1
18754: PPUSH
18755: LD_VAR 0 5
18759: PUSH
18760: LD_INT 1
18762: ARRAY
18763: PPUSH
18764: LD_VAR 0 5
18768: PUSH
18769: LD_INT 2
18771: ARRAY
18772: PPUSH
18773: CALL 17728 0 3
18777: NOT
18778: IFFALSE 18784
// exit ;
18780: POP
18781: POP
18782: GO 18788
18784: GO 18747
18786: POP
18787: POP
// end ;
18788: LD_VAR 0 4
18792: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
18797: PPUSH
18798: PPUSH
18799: PPUSH
18800: PPUSH
18801: PPUSH
// if not GetClass ( unit ) = class_sniper then
18802: LD_VAR 0 1
18806: PPUSH
18807: CALL_OW 257
18811: PUSH
18812: LD_INT 5
18814: EQUAL
18815: NOT
18816: IFFALSE 18820
// exit ;
18818: GO 19208
// dist := 8 ;
18820: LD_ADDR_VAR 0 5
18824: PUSH
18825: LD_INT 8
18827: ST_TO_ADDR
// viewRange := 12 ;
18828: LD_ADDR_VAR 0 7
18832: PUSH
18833: LD_INT 12
18835: ST_TO_ADDR
// side := GetSide ( unit ) ;
18836: LD_ADDR_VAR 0 6
18840: PUSH
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL_OW 255
18850: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18851: LD_INT 61
18853: PPUSH
18854: LD_VAR 0 6
18858: PPUSH
18859: CALL_OW 321
18863: PUSH
18864: LD_INT 2
18866: EQUAL
18867: IFFALSE 18877
// viewRange := 16 ;
18869: LD_ADDR_VAR 0 7
18873: PUSH
18874: LD_INT 16
18876: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18877: LD_VAR 0 1
18881: PPUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: LD_VAR 0 3
18891: PPUSH
18892: CALL_OW 297
18896: PUSH
18897: LD_VAR 0 5
18901: GREATER
18902: IFFALSE 18981
// begin ComMoveXY ( unit , x , y ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_VAR 0 2
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18923: LD_INT 35
18925: PPUSH
18926: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18930: LD_VAR 0 1
18934: PPUSH
18935: LD_VAR 0 2
18939: PPUSH
18940: LD_VAR 0 3
18944: PPUSH
18945: CALL 54501 0 3
18949: NOT
18950: IFFALSE 18954
// exit ;
18952: GO 19208
// until GetDistUnitXY ( unit , x , y ) < dist ;
18954: LD_VAR 0 1
18958: PPUSH
18959: LD_VAR 0 2
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: CALL_OW 297
18973: PUSH
18974: LD_VAR 0 5
18978: LESS
18979: IFFALSE 18923
// end ; ComTurnXY ( unit , x , y ) ;
18981: LD_VAR 0 1
18985: PPUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: LD_VAR 0 3
18995: PPUSH
18996: CALL_OW 118
// wait ( 5 ) ;
19000: LD_INT 5
19002: PPUSH
19003: CALL_OW 67
// _d := GetDir ( unit ) ;
19007: LD_ADDR_VAR 0 10
19011: PUSH
19012: LD_VAR 0 1
19016: PPUSH
19017: CALL_OW 254
19021: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19022: LD_ADDR_VAR 0 8
19026: PUSH
19027: LD_VAR 0 1
19031: PPUSH
19032: CALL_OW 250
19036: PPUSH
19037: LD_VAR 0 10
19041: PPUSH
19042: LD_VAR 0 5
19046: PPUSH
19047: CALL_OW 272
19051: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19052: LD_ADDR_VAR 0 9
19056: PUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL_OW 251
19066: PPUSH
19067: LD_VAR 0 10
19071: PPUSH
19072: LD_VAR 0 5
19076: PPUSH
19077: CALL_OW 273
19081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19082: LD_VAR 0 8
19086: PPUSH
19087: LD_VAR 0 9
19091: PPUSH
19092: CALL_OW 488
19096: NOT
19097: IFFALSE 19101
// exit ;
19099: GO 19208
// ComAnimCustom ( unit , 1 ) ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_INT 1
19108: PPUSH
19109: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19113: LD_VAR 0 8
19117: PPUSH
19118: LD_VAR 0 9
19122: PPUSH
19123: LD_VAR 0 6
19127: PPUSH
19128: LD_VAR 0 7
19132: PPUSH
19133: CALL_OW 330
// repeat wait ( 1 ) ;
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL_OW 316
19153: PUSH
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 314
19163: OR
19164: PUSH
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 302
19174: NOT
19175: OR
19176: PUSH
19177: LD_VAR 0 1
19181: PPUSH
19182: CALL_OW 301
19186: OR
19187: IFFALSE 19137
// RemoveSeeing ( _x , _y , side ) ;
19189: LD_VAR 0 8
19193: PPUSH
19194: LD_VAR 0 9
19198: PPUSH
19199: LD_VAR 0 6
19203: PPUSH
19204: CALL_OW 331
// end ; end_of_file
19208: LD_VAR 0 4
19212: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19213: LD_INT 0
19215: PPUSH
// ar_miner := 81 ;
19216: LD_ADDR_EXP 81
19220: PUSH
19221: LD_INT 81
19223: ST_TO_ADDR
// ar_crane := 88 ;
19224: LD_ADDR_EXP 80
19228: PUSH
19229: LD_INT 88
19231: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19232: LD_ADDR_EXP 75
19236: PUSH
19237: LD_INT 89
19239: ST_TO_ADDR
// us_hack := 99 ;
19240: LD_ADDR_EXP 76
19244: PUSH
19245: LD_INT 99
19247: ST_TO_ADDR
// us_artillery := 97 ;
19248: LD_ADDR_EXP 77
19252: PUSH
19253: LD_INT 97
19255: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19256: LD_ADDR_EXP 78
19260: PUSH
19261: LD_INT 91
19263: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19264: LD_ADDR_EXP 79
19268: PUSH
19269: LD_INT 92
19271: ST_TO_ADDR
// ru_radar := 98 ;
19272: LD_ADDR_EXP 74
19276: PUSH
19277: LD_INT 98
19279: ST_TO_ADDR
// tech_Artillery := 80 ;
19280: LD_ADDR_EXP 82
19284: PUSH
19285: LD_INT 80
19287: ST_TO_ADDR
// tech_RadMat := 81 ;
19288: LD_ADDR_EXP 83
19292: PUSH
19293: LD_INT 81
19295: ST_TO_ADDR
// tech_BasicTools := 82 ;
19296: LD_ADDR_EXP 84
19300: PUSH
19301: LD_INT 82
19303: ST_TO_ADDR
// tech_Cargo := 83 ;
19304: LD_ADDR_EXP 85
19308: PUSH
19309: LD_INT 83
19311: ST_TO_ADDR
// tech_Track := 84 ;
19312: LD_ADDR_EXP 86
19316: PUSH
19317: LD_INT 84
19319: ST_TO_ADDR
// tech_Crane := 85 ;
19320: LD_ADDR_EXP 87
19324: PUSH
19325: LD_INT 85
19327: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19328: LD_ADDR_EXP 88
19332: PUSH
19333: LD_INT 86
19335: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19336: LD_ADDR_EXP 89
19340: PUSH
19341: LD_INT 87
19343: ST_TO_ADDR
// class_mastodont := 31 ;
19344: LD_ADDR_EXP 90
19348: PUSH
19349: LD_INT 31
19351: ST_TO_ADDR
// class_horse := 21 ;
19352: LD_ADDR_EXP 91
19356: PUSH
19357: LD_INT 21
19359: ST_TO_ADDR
// end ;
19360: LD_VAR 0 1
19364: RET
// every 1 do
19365: GO 19367
19367: DISABLE
// InitGlobalVariables ; end_of_file
19368: CALL 19213 0 0
19372: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19373: LD_INT 0
19375: PPUSH
19376: PPUSH
// if exist_mode then
19377: LD_VAR 0 2
19381: IFFALSE 19406
// unit := CreateCharacter ( prefix & ident ) else
19383: LD_ADDR_VAR 0 5
19387: PUSH
19388: LD_VAR 0 3
19392: PUSH
19393: LD_VAR 0 1
19397: STR
19398: PPUSH
19399: CALL_OW 34
19403: ST_TO_ADDR
19404: GO 19421
// unit := NewCharacter ( ident ) ;
19406: LD_ADDR_VAR 0 5
19410: PUSH
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 25
19420: ST_TO_ADDR
// result := unit ;
19421: LD_ADDR_VAR 0 4
19425: PUSH
19426: LD_VAR 0 5
19430: ST_TO_ADDR
// end ;
19431: LD_VAR 0 4
19435: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19436: LD_INT 0
19438: PPUSH
19439: PPUSH
// if not side or not nation then
19440: LD_VAR 0 1
19444: NOT
19445: PUSH
19446: LD_VAR 0 2
19450: NOT
19451: OR
19452: IFFALSE 19456
// exit ;
19454: GO 20220
// case nation of nation_american :
19456: LD_VAR 0 2
19460: PUSH
19461: LD_INT 1
19463: DOUBLE
19464: EQUAL
19465: IFTRUE 19469
19467: GO 19683
19469: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19470: LD_ADDR_VAR 0 4
19474: PUSH
19475: LD_INT 35
19477: PUSH
19478: LD_INT 45
19480: PUSH
19481: LD_INT 46
19483: PUSH
19484: LD_INT 47
19486: PUSH
19487: LD_INT 82
19489: PUSH
19490: LD_INT 83
19492: PUSH
19493: LD_INT 84
19495: PUSH
19496: LD_INT 85
19498: PUSH
19499: LD_INT 86
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: LD_INT 6
19510: PUSH
19511: LD_INT 15
19513: PUSH
19514: LD_INT 16
19516: PUSH
19517: LD_INT 7
19519: PUSH
19520: LD_INT 12
19522: PUSH
19523: LD_INT 13
19525: PUSH
19526: LD_INT 10
19528: PUSH
19529: LD_INT 14
19531: PUSH
19532: LD_INT 20
19534: PUSH
19535: LD_INT 21
19537: PUSH
19538: LD_INT 22
19540: PUSH
19541: LD_INT 25
19543: PUSH
19544: LD_INT 32
19546: PUSH
19547: LD_INT 27
19549: PUSH
19550: LD_INT 36
19552: PUSH
19553: LD_INT 69
19555: PUSH
19556: LD_INT 39
19558: PUSH
19559: LD_INT 34
19561: PUSH
19562: LD_INT 40
19564: PUSH
19565: LD_INT 48
19567: PUSH
19568: LD_INT 49
19570: PUSH
19571: LD_INT 50
19573: PUSH
19574: LD_INT 51
19576: PUSH
19577: LD_INT 52
19579: PUSH
19580: LD_INT 53
19582: PUSH
19583: LD_INT 54
19585: PUSH
19586: LD_INT 55
19588: PUSH
19589: LD_INT 56
19591: PUSH
19592: LD_INT 57
19594: PUSH
19595: LD_INT 58
19597: PUSH
19598: LD_INT 59
19600: PUSH
19601: LD_INT 60
19603: PUSH
19604: LD_INT 61
19606: PUSH
19607: LD_INT 62
19609: PUSH
19610: LD_INT 80
19612: PUSH
19613: LD_INT 82
19615: PUSH
19616: LD_INT 83
19618: PUSH
19619: LD_INT 84
19621: PUSH
19622: LD_INT 85
19624: PUSH
19625: LD_INT 86
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: ST_TO_ADDR
19681: GO 20144
19683: LD_INT 2
19685: DOUBLE
19686: EQUAL
19687: IFTRUE 19691
19689: GO 19913
19691: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19692: LD_ADDR_VAR 0 4
19696: PUSH
19697: LD_INT 35
19699: PUSH
19700: LD_INT 45
19702: PUSH
19703: LD_INT 46
19705: PUSH
19706: LD_INT 47
19708: PUSH
19709: LD_INT 82
19711: PUSH
19712: LD_INT 83
19714: PUSH
19715: LD_INT 84
19717: PUSH
19718: LD_INT 85
19720: PUSH
19721: LD_INT 87
19723: PUSH
19724: LD_INT 70
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 11
19732: PUSH
19733: LD_INT 3
19735: PUSH
19736: LD_INT 4
19738: PUSH
19739: LD_INT 5
19741: PUSH
19742: LD_INT 6
19744: PUSH
19745: LD_INT 15
19747: PUSH
19748: LD_INT 18
19750: PUSH
19751: LD_INT 7
19753: PUSH
19754: LD_INT 17
19756: PUSH
19757: LD_INT 8
19759: PUSH
19760: LD_INT 20
19762: PUSH
19763: LD_INT 21
19765: PUSH
19766: LD_INT 22
19768: PUSH
19769: LD_INT 72
19771: PUSH
19772: LD_INT 26
19774: PUSH
19775: LD_INT 69
19777: PUSH
19778: LD_INT 39
19780: PUSH
19781: LD_INT 40
19783: PUSH
19784: LD_INT 41
19786: PUSH
19787: LD_INT 42
19789: PUSH
19790: LD_INT 43
19792: PUSH
19793: LD_INT 48
19795: PUSH
19796: LD_INT 49
19798: PUSH
19799: LD_INT 50
19801: PUSH
19802: LD_INT 51
19804: PUSH
19805: LD_INT 52
19807: PUSH
19808: LD_INT 53
19810: PUSH
19811: LD_INT 54
19813: PUSH
19814: LD_INT 55
19816: PUSH
19817: LD_INT 56
19819: PUSH
19820: LD_INT 60
19822: PUSH
19823: LD_INT 61
19825: PUSH
19826: LD_INT 62
19828: PUSH
19829: LD_INT 66
19831: PUSH
19832: LD_INT 67
19834: PUSH
19835: LD_INT 68
19837: PUSH
19838: LD_INT 81
19840: PUSH
19841: LD_INT 82
19843: PUSH
19844: LD_INT 83
19846: PUSH
19847: LD_INT 84
19849: PUSH
19850: LD_INT 85
19852: PUSH
19853: LD_INT 87
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: ST_TO_ADDR
19911: GO 20144
19913: LD_INT 3
19915: DOUBLE
19916: EQUAL
19917: IFTRUE 19921
19919: GO 20143
19921: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19922: LD_ADDR_VAR 0 4
19926: PUSH
19927: LD_INT 46
19929: PUSH
19930: LD_INT 47
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 82
19941: PUSH
19942: LD_INT 83
19944: PUSH
19945: LD_INT 84
19947: PUSH
19948: LD_INT 85
19950: PUSH
19951: LD_INT 86
19953: PUSH
19954: LD_INT 11
19956: PUSH
19957: LD_INT 9
19959: PUSH
19960: LD_INT 20
19962: PUSH
19963: LD_INT 19
19965: PUSH
19966: LD_INT 21
19968: PUSH
19969: LD_INT 24
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_INT 25
19977: PUSH
19978: LD_INT 28
19980: PUSH
19981: LD_INT 29
19983: PUSH
19984: LD_INT 30
19986: PUSH
19987: LD_INT 31
19989: PUSH
19990: LD_INT 37
19992: PUSH
19993: LD_INT 38
19995: PUSH
19996: LD_INT 32
19998: PUSH
19999: LD_INT 27
20001: PUSH
20002: LD_INT 33
20004: PUSH
20005: LD_INT 69
20007: PUSH
20008: LD_INT 39
20010: PUSH
20011: LD_INT 34
20013: PUSH
20014: LD_INT 40
20016: PUSH
20017: LD_INT 71
20019: PUSH
20020: LD_INT 23
20022: PUSH
20023: LD_INT 44
20025: PUSH
20026: LD_INT 48
20028: PUSH
20029: LD_INT 49
20031: PUSH
20032: LD_INT 50
20034: PUSH
20035: LD_INT 51
20037: PUSH
20038: LD_INT 52
20040: PUSH
20041: LD_INT 53
20043: PUSH
20044: LD_INT 54
20046: PUSH
20047: LD_INT 55
20049: PUSH
20050: LD_INT 56
20052: PUSH
20053: LD_INT 57
20055: PUSH
20056: LD_INT 58
20058: PUSH
20059: LD_INT 59
20061: PUSH
20062: LD_INT 63
20064: PUSH
20065: LD_INT 64
20067: PUSH
20068: LD_INT 65
20070: PUSH
20071: LD_INT 82
20073: PUSH
20074: LD_INT 83
20076: PUSH
20077: LD_INT 84
20079: PUSH
20080: LD_INT 85
20082: PUSH
20083: LD_INT 86
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: ST_TO_ADDR
20141: GO 20144
20143: POP
// if state > - 1 and state < 3 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: GREATER
20153: PUSH
20154: LD_VAR 0 3
20158: PUSH
20159: LD_INT 3
20161: LESS
20162: AND
20163: IFFALSE 20220
// for i in result do
20165: LD_ADDR_VAR 0 5
20169: PUSH
20170: LD_VAR 0 4
20174: PUSH
20175: FOR_IN
20176: IFFALSE 20218
// if GetTech ( i , side ) <> state then
20178: LD_VAR 0 5
20182: PPUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 321
20192: PUSH
20193: LD_VAR 0 3
20197: NONEQUAL
20198: IFFALSE 20216
// result := result diff i ;
20200: LD_ADDR_VAR 0 4
20204: PUSH
20205: LD_VAR 0 4
20209: PUSH
20210: LD_VAR 0 5
20214: DIFF
20215: ST_TO_ADDR
20216: GO 20175
20218: POP
20219: POP
// end ;
20220: LD_VAR 0 4
20224: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
20229: PPUSH
// result := true ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20238: LD_ADDR_VAR 0 5
20242: PUSH
20243: LD_VAR 0 2
20247: PPUSH
20248: CALL_OW 480
20252: ST_TO_ADDR
// if not tmp then
20253: LD_VAR 0 5
20257: NOT
20258: IFFALSE 20262
// exit ;
20260: GO 20311
// for i in tmp do
20262: LD_ADDR_VAR 0 4
20266: PUSH
20267: LD_VAR 0 5
20271: PUSH
20272: FOR_IN
20273: IFFALSE 20309
// if GetTech ( i , side ) <> state_researched then
20275: LD_VAR 0 4
20279: PPUSH
20280: LD_VAR 0 1
20284: PPUSH
20285: CALL_OW 321
20289: PUSH
20290: LD_INT 2
20292: NONEQUAL
20293: IFFALSE 20307
// begin result := false ;
20295: LD_ADDR_VAR 0 3
20299: PUSH
20300: LD_INT 0
20302: ST_TO_ADDR
// exit ;
20303: POP
20304: POP
20305: GO 20311
// end ;
20307: GO 20272
20309: POP
20310: POP
// end ;
20311: LD_VAR 0 3
20315: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20316: LD_INT 0
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20331: LD_VAR 0 1
20335: NOT
20336: PUSH
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 257
20346: PUSH
20347: LD_INT 9
20349: NONEQUAL
20350: OR
20351: IFFALSE 20355
// exit ;
20353: GO 20928
// side := GetSide ( unit ) ;
20355: LD_ADDR_VAR 0 9
20359: PUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 255
20369: ST_TO_ADDR
// tech_space := tech_spacanom ;
20370: LD_ADDR_VAR 0 12
20374: PUSH
20375: LD_INT 29
20377: ST_TO_ADDR
// tech_time := tech_taurad ;
20378: LD_ADDR_VAR 0 13
20382: PUSH
20383: LD_INT 28
20385: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20386: LD_ADDR_VAR 0 11
20390: PUSH
20391: LD_VAR 0 1
20395: PPUSH
20396: CALL_OW 310
20400: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20401: LD_VAR 0 11
20405: PPUSH
20406: CALL_OW 247
20410: PUSH
20411: LD_INT 2
20413: EQUAL
20414: IFFALSE 20418
// exit ;
20416: GO 20928
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20418: LD_ADDR_VAR 0 8
20422: PUSH
20423: LD_INT 81
20425: PUSH
20426: LD_VAR 0 9
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 3
20437: PUSH
20438: LD_INT 21
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: ST_TO_ADDR
// if not tmp then
20461: LD_VAR 0 8
20465: NOT
20466: IFFALSE 20470
// exit ;
20468: GO 20928
// if in_unit then
20470: LD_VAR 0 11
20474: IFFALSE 20498
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20476: LD_ADDR_VAR 0 10
20480: PUSH
20481: LD_VAR 0 8
20485: PPUSH
20486: LD_VAR 0 11
20490: PPUSH
20491: CALL_OW 74
20495: ST_TO_ADDR
20496: GO 20518
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20498: LD_ADDR_VAR 0 10
20502: PUSH
20503: LD_VAR 0 8
20507: PPUSH
20508: LD_VAR 0 1
20512: PPUSH
20513: CALL_OW 74
20517: ST_TO_ADDR
// if not enemy then
20518: LD_VAR 0 10
20522: NOT
20523: IFFALSE 20527
// exit ;
20525: GO 20928
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20527: LD_VAR 0 11
20531: PUSH
20532: LD_VAR 0 11
20536: PPUSH
20537: LD_VAR 0 10
20541: PPUSH
20542: CALL_OW 296
20546: PUSH
20547: LD_INT 13
20549: GREATER
20550: AND
20551: PUSH
20552: LD_VAR 0 1
20556: PPUSH
20557: LD_VAR 0 10
20561: PPUSH
20562: CALL_OW 296
20566: PUSH
20567: LD_INT 12
20569: GREATER
20570: OR
20571: IFFALSE 20575
// exit ;
20573: GO 20928
// missile := [ 1 ] ;
20575: LD_ADDR_VAR 0 14
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20586: LD_VAR 0 9
20590: PPUSH
20591: LD_VAR 0 12
20595: PPUSH
20596: CALL_OW 325
20600: IFFALSE 20629
// missile := Insert ( missile , missile + 1 , 2 ) ;
20602: LD_ADDR_VAR 0 14
20606: PUSH
20607: LD_VAR 0 14
20611: PPUSH
20612: LD_VAR 0 14
20616: PUSH
20617: LD_INT 1
20619: PLUS
20620: PPUSH
20621: LD_INT 2
20623: PPUSH
20624: CALL_OW 2
20628: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20629: LD_VAR 0 9
20633: PPUSH
20634: LD_VAR 0 13
20638: PPUSH
20639: CALL_OW 325
20643: PUSH
20644: LD_VAR 0 10
20648: PPUSH
20649: CALL_OW 255
20653: PPUSH
20654: LD_VAR 0 13
20658: PPUSH
20659: CALL_OW 325
20663: NOT
20664: AND
20665: IFFALSE 20694
// missile := Insert ( missile , missile + 1 , 3 ) ;
20667: LD_ADDR_VAR 0 14
20671: PUSH
20672: LD_VAR 0 14
20676: PPUSH
20677: LD_VAR 0 14
20681: PUSH
20682: LD_INT 1
20684: PLUS
20685: PPUSH
20686: LD_INT 3
20688: PPUSH
20689: CALL_OW 2
20693: ST_TO_ADDR
// if missile < 2 then
20694: LD_VAR 0 14
20698: PUSH
20699: LD_INT 2
20701: LESS
20702: IFFALSE 20706
// exit ;
20704: GO 20928
// x := GetX ( enemy ) ;
20706: LD_ADDR_VAR 0 4
20710: PUSH
20711: LD_VAR 0 10
20715: PPUSH
20716: CALL_OW 250
20720: ST_TO_ADDR
// y := GetY ( enemy ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 10
20730: PPUSH
20731: CALL_OW 251
20735: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20736: LD_ADDR_VAR 0 6
20740: PUSH
20741: LD_VAR 0 4
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PPUSH
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 12
20757: PLUS
20758: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20759: LD_ADDR_VAR 0 7
20763: PUSH
20764: LD_VAR 0 5
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PPUSH
20773: LD_INT 1
20775: PPUSH
20776: CALL_OW 12
20780: PLUS
20781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20782: LD_VAR 0 6
20786: PPUSH
20787: LD_VAR 0 7
20791: PPUSH
20792: CALL_OW 488
20796: NOT
20797: IFFALSE 20819
// begin _x := x ;
20799: LD_ADDR_VAR 0 6
20803: PUSH
20804: LD_VAR 0 4
20808: ST_TO_ADDR
// _y := y ;
20809: LD_ADDR_VAR 0 7
20813: PUSH
20814: LD_VAR 0 5
20818: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: PPUSH
20827: LD_VAR 0 14
20831: PPUSH
20832: CALL_OW 12
20836: ST_TO_ADDR
// case i of 1 :
20837: LD_VAR 0 3
20841: PUSH
20842: LD_INT 1
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20867
20850: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20851: LD_VAR 0 1
20855: PPUSH
20856: LD_VAR 0 10
20860: PPUSH
20861: CALL_OW 115
20865: GO 20928
20867: LD_INT 2
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 20897
20875: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20876: LD_VAR 0 1
20880: PPUSH
20881: LD_VAR 0 6
20885: PPUSH
20886: LD_VAR 0 7
20890: PPUSH
20891: CALL_OW 153
20895: GO 20928
20897: LD_INT 3
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20927
20905: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20906: LD_VAR 0 1
20910: PPUSH
20911: LD_VAR 0 6
20915: PPUSH
20916: LD_VAR 0 7
20920: PPUSH
20921: CALL_OW 154
20925: GO 20928
20927: POP
// end ;
20928: LD_VAR 0 2
20932: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20933: LD_INT 0
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
// if not unit or not building then
20941: LD_VAR 0 1
20945: NOT
20946: PUSH
20947: LD_VAR 0 2
20951: NOT
20952: OR
20953: IFFALSE 20957
// exit ;
20955: GO 21115
// x := GetX ( building ) ;
20957: LD_ADDR_VAR 0 5
20961: PUSH
20962: LD_VAR 0 2
20966: PPUSH
20967: CALL_OW 250
20971: ST_TO_ADDR
// y := GetY ( building ) ;
20972: LD_ADDR_VAR 0 6
20976: PUSH
20977: LD_VAR 0 2
20981: PPUSH
20982: CALL_OW 251
20986: ST_TO_ADDR
// for i = 0 to 5 do
20987: LD_ADDR_VAR 0 4
20991: PUSH
20992: DOUBLE
20993: LD_INT 0
20995: DEC
20996: ST_TO_ADDR
20997: LD_INT 5
20999: PUSH
21000: FOR_TO
21001: IFFALSE 21113
// begin _x := ShiftX ( x , i , 3 ) ;
21003: LD_ADDR_VAR 0 7
21007: PUSH
21008: LD_VAR 0 5
21012: PPUSH
21013: LD_VAR 0 4
21017: PPUSH
21018: LD_INT 3
21020: PPUSH
21021: CALL_OW 272
21025: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21026: LD_ADDR_VAR 0 8
21030: PUSH
21031: LD_VAR 0 6
21035: PPUSH
21036: LD_VAR 0 4
21040: PPUSH
21041: LD_INT 3
21043: PPUSH
21044: CALL_OW 273
21048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21049: LD_VAR 0 7
21053: PPUSH
21054: LD_VAR 0 8
21058: PPUSH
21059: CALL_OW 488
21063: NOT
21064: IFFALSE 21068
// continue ;
21066: GO 21000
// if HexInfo ( _x , _y ) = 0 then
21068: LD_VAR 0 7
21072: PPUSH
21073: LD_VAR 0 8
21077: PPUSH
21078: CALL_OW 428
21082: PUSH
21083: LD_INT 0
21085: EQUAL
21086: IFFALSE 21111
// begin ComMoveXY ( unit , _x , _y ) ;
21088: LD_VAR 0 1
21092: PPUSH
21093: LD_VAR 0 7
21097: PPUSH
21098: LD_VAR 0 8
21102: PPUSH
21103: CALL_OW 111
// exit ;
21107: POP
21108: POP
21109: GO 21115
// end ; end ;
21111: GO 21000
21113: POP
21114: POP
// end ;
21115: LD_VAR 0 3
21119: RET
// export function ScanBase ( side , base_area ) ; begin
21120: LD_INT 0
21122: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21123: LD_ADDR_VAR 0 3
21127: PUSH
21128: LD_VAR 0 2
21132: PPUSH
21133: LD_INT 81
21135: PUSH
21136: LD_VAR 0 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 70
21149: ST_TO_ADDR
// end ;
21150: LD_VAR 0 3
21154: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21155: LD_INT 0
21157: PPUSH
21158: PPUSH
21159: PPUSH
21160: PPUSH
// result := false ;
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// side := GetSide ( unit ) ;
21169: LD_ADDR_VAR 0 3
21173: PUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 255
21183: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21184: LD_ADDR_VAR 0 4
21188: PUSH
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 248
21198: ST_TO_ADDR
// case nat of 1 :
21199: LD_VAR 0 4
21203: PUSH
21204: LD_INT 1
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21223
21212: POP
// tech := tech_lassight ; 2 :
21213: LD_ADDR_VAR 0 5
21217: PUSH
21218: LD_INT 12
21220: ST_TO_ADDR
21221: GO 21262
21223: LD_INT 2
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21242
21231: POP
// tech := tech_mortar ; 3 :
21232: LD_ADDR_VAR 0 5
21236: PUSH
21237: LD_INT 41
21239: ST_TO_ADDR
21240: GO 21262
21242: LD_INT 3
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21261
21250: POP
// tech := tech_bazooka ; end ;
21251: LD_ADDR_VAR 0 5
21255: PUSH
21256: LD_INT 44
21258: ST_TO_ADDR
21259: GO 21262
21261: POP
// if Researched ( side , tech ) then
21262: LD_VAR 0 3
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL_OW 325
21276: IFFALSE 21303
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_INT 5
21285: PUSH
21286: LD_INT 8
21288: PUSH
21289: LD_INT 9
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: LD_VAR 0 4
21301: ARRAY
21302: ST_TO_ADDR
// end ;
21303: LD_VAR 0 2
21307: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
// if not mines then
21313: LD_VAR 0 2
21317: NOT
21318: IFFALSE 21322
// exit ;
21320: GO 21466
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21322: LD_ADDR_VAR 0 5
21326: PUSH
21327: LD_INT 81
21329: PUSH
21330: LD_VAR 0 1
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 3
21341: PUSH
21342: LD_INT 21
21344: PUSH
21345: LD_INT 3
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PPUSH
21360: CALL_OW 69
21364: ST_TO_ADDR
// for i in mines do
21365: LD_ADDR_VAR 0 4
21369: PUSH
21370: LD_VAR 0 2
21374: PUSH
21375: FOR_IN
21376: IFFALSE 21464
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21378: LD_VAR 0 4
21382: PUSH
21383: LD_INT 1
21385: ARRAY
21386: PPUSH
21387: LD_VAR 0 4
21391: PUSH
21392: LD_INT 2
21394: ARRAY
21395: PPUSH
21396: CALL_OW 458
21400: NOT
21401: IFFALSE 21405
// continue ;
21403: GO 21375
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21405: LD_VAR 0 4
21409: PUSH
21410: LD_INT 1
21412: ARRAY
21413: PPUSH
21414: LD_VAR 0 4
21418: PUSH
21419: LD_INT 2
21421: ARRAY
21422: PPUSH
21423: CALL_OW 428
21427: PUSH
21428: LD_VAR 0 5
21432: IN
21433: IFFALSE 21462
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21435: LD_VAR 0 4
21439: PUSH
21440: LD_INT 1
21442: ARRAY
21443: PPUSH
21444: LD_VAR 0 4
21448: PUSH
21449: LD_INT 2
21451: ARRAY
21452: PPUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 456
// end ;
21462: GO 21375
21464: POP
21465: POP
// end ;
21466: LD_VAR 0 3
21470: RET
// export function Count ( array ) ; var i ; begin
21471: LD_INT 0
21473: PPUSH
21474: PPUSH
// result := 0 ;
21475: LD_ADDR_VAR 0 2
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
// for i in array do
21483: LD_ADDR_VAR 0 3
21487: PUSH
21488: LD_VAR 0 1
21492: PUSH
21493: FOR_IN
21494: IFFALSE 21518
// if i then
21496: LD_VAR 0 3
21500: IFFALSE 21516
// result := result + 1 ;
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_VAR 0 2
21511: PUSH
21512: LD_INT 1
21514: PLUS
21515: ST_TO_ADDR
21516: GO 21493
21518: POP
21519: POP
// end ;
21520: LD_VAR 0 2
21524: RET
// export function IsEmpty ( building ) ; begin
21525: LD_INT 0
21527: PPUSH
// if not building then
21528: LD_VAR 0 1
21532: NOT
21533: IFFALSE 21537
// exit ;
21535: GO 21580
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_VAR 0 1
21546: PUSH
21547: LD_INT 22
21549: PUSH
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL_OW 255
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 58
21566: PUSH
21567: EMPTY
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PPUSH
21574: CALL_OW 69
21578: IN
21579: ST_TO_ADDR
// end ;
21580: LD_VAR 0 2
21584: RET
// export function IsNotFull ( building ) ; begin
21585: LD_INT 0
21587: PPUSH
// if not building then
21588: LD_VAR 0 1
21592: NOT
21593: IFFALSE 21597
// exit ;
21595: GO 21616
// result := UnitsInside ( building ) < 6 ;
21597: LD_ADDR_VAR 0 2
21601: PUSH
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 313
21611: PUSH
21612: LD_INT 6
21614: LESS
21615: ST_TO_ADDR
// end ;
21616: LD_VAR 0 2
21620: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21621: LD_INT 0
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
// tmp := [ ] ;
21627: LD_ADDR_VAR 0 3
21631: PUSH
21632: EMPTY
21633: ST_TO_ADDR
// list := [ ] ;
21634: LD_ADDR_VAR 0 5
21638: PUSH
21639: EMPTY
21640: ST_TO_ADDR
// for i = 16 to 25 do
21641: LD_ADDR_VAR 0 4
21645: PUSH
21646: DOUBLE
21647: LD_INT 16
21649: DEC
21650: ST_TO_ADDR
21651: LD_INT 25
21653: PUSH
21654: FOR_TO
21655: IFFALSE 21728
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21657: LD_ADDR_VAR 0 3
21661: PUSH
21662: LD_VAR 0 3
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_VAR 0 1
21674: PPUSH
21675: CALL_OW 255
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 91
21686: PUSH
21687: LD_VAR 0 1
21691: PUSH
21692: LD_INT 6
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 30
21702: PUSH
21703: LD_VAR 0 4
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: PPUSH
21720: CALL_OW 69
21724: ADD
21725: ST_TO_ADDR
21726: GO 21654
21728: POP
21729: POP
// for i = 1 to tmp do
21730: LD_ADDR_VAR 0 4
21734: PUSH
21735: DOUBLE
21736: LD_INT 1
21738: DEC
21739: ST_TO_ADDR
21740: LD_VAR 0 3
21744: PUSH
21745: FOR_TO
21746: IFFALSE 21834
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21748: LD_ADDR_VAR 0 5
21752: PUSH
21753: LD_VAR 0 5
21757: PUSH
21758: LD_VAR 0 3
21762: PUSH
21763: LD_VAR 0 4
21767: ARRAY
21768: PPUSH
21769: CALL_OW 266
21773: PUSH
21774: LD_VAR 0 3
21778: PUSH
21779: LD_VAR 0 4
21783: ARRAY
21784: PPUSH
21785: CALL_OW 250
21789: PUSH
21790: LD_VAR 0 3
21794: PUSH
21795: LD_VAR 0 4
21799: ARRAY
21800: PPUSH
21801: CALL_OW 251
21805: PUSH
21806: LD_VAR 0 3
21810: PUSH
21811: LD_VAR 0 4
21815: ARRAY
21816: PPUSH
21817: CALL_OW 254
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: ADD
21831: ST_TO_ADDR
21832: GO 21745
21834: POP
21835: POP
// result := list ;
21836: LD_ADDR_VAR 0 2
21840: PUSH
21841: LD_VAR 0 5
21845: ST_TO_ADDR
// end ;
21846: LD_VAR 0 2
21850: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
21857: PPUSH
21858: PPUSH
21859: PPUSH
// if not factory then
21860: LD_VAR 0 1
21864: NOT
21865: IFFALSE 21869
// exit ;
21867: GO 22462
// if control = control_apeman then
21869: LD_VAR 0 4
21873: PUSH
21874: LD_INT 5
21876: EQUAL
21877: IFFALSE 21986
// begin tmp := UnitsInside ( factory ) ;
21879: LD_ADDR_VAR 0 8
21883: PUSH
21884: LD_VAR 0 1
21888: PPUSH
21889: CALL_OW 313
21893: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21894: LD_VAR 0 8
21898: PPUSH
21899: LD_INT 25
21901: PUSH
21902: LD_INT 12
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 72
21913: NOT
21914: IFFALSE 21924
// control := control_manual ;
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: LD_INT 1
21923: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21924: LD_ADDR_VAR 0 8
21928: PUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL 21621 0 1
21938: ST_TO_ADDR
// if tmp then
21939: LD_VAR 0 8
21943: IFFALSE 21986
// begin for i in tmp do
21945: LD_ADDR_VAR 0 7
21949: PUSH
21950: LD_VAR 0 8
21954: PUSH
21955: FOR_IN
21956: IFFALSE 21984
// if i [ 1 ] = b_ext_radio then
21958: LD_VAR 0 7
21962: PUSH
21963: LD_INT 1
21965: ARRAY
21966: PUSH
21967: LD_INT 22
21969: EQUAL
21970: IFFALSE 21982
// begin control := control_remote ;
21972: LD_ADDR_VAR 0 4
21976: PUSH
21977: LD_INT 2
21979: ST_TO_ADDR
// break ;
21980: GO 21984
// end ;
21982: GO 21955
21984: POP
21985: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21986: LD_VAR 0 1
21990: PPUSH
21991: LD_VAR 0 2
21995: PPUSH
21996: LD_VAR 0 3
22000: PPUSH
22001: LD_VAR 0 4
22005: PPUSH
22006: LD_VAR 0 5
22010: PPUSH
22011: CALL_OW 448
22015: IFFALSE 22050
// begin result := [ chassis , engine , control , weapon ] ;
22017: LD_ADDR_VAR 0 6
22021: PUSH
22022: LD_VAR 0 2
22026: PUSH
22027: LD_VAR 0 3
22031: PUSH
22032: LD_VAR 0 4
22036: PUSH
22037: LD_VAR 0 5
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: ST_TO_ADDR
// exit ;
22048: GO 22462
// end ; _chassis := AvailableChassisList ( factory ) ;
22050: LD_ADDR_VAR 0 9
22054: PUSH
22055: LD_VAR 0 1
22059: PPUSH
22060: CALL_OW 475
22064: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22065: LD_ADDR_VAR 0 11
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 476
22079: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22080: LD_ADDR_VAR 0 12
22084: PUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 477
22094: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22095: LD_ADDR_VAR 0 10
22099: PUSH
22100: LD_VAR 0 1
22104: PPUSH
22105: CALL_OW 478
22109: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22110: LD_VAR 0 9
22114: NOT
22115: PUSH
22116: LD_VAR 0 11
22120: NOT
22121: OR
22122: PUSH
22123: LD_VAR 0 12
22127: NOT
22128: OR
22129: PUSH
22130: LD_VAR 0 10
22134: NOT
22135: OR
22136: IFFALSE 22171
// begin result := [ chassis , engine , control , weapon ] ;
22138: LD_ADDR_VAR 0 6
22142: PUSH
22143: LD_VAR 0 2
22147: PUSH
22148: LD_VAR 0 3
22152: PUSH
22153: LD_VAR 0 4
22157: PUSH
22158: LD_VAR 0 5
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: ST_TO_ADDR
// exit ;
22169: GO 22462
// end ; if not chassis in _chassis then
22171: LD_VAR 0 2
22175: PUSH
22176: LD_VAR 0 9
22180: IN
22181: NOT
22182: IFFALSE 22208
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22184: LD_ADDR_VAR 0 2
22188: PUSH
22189: LD_VAR 0 9
22193: PUSH
22194: LD_INT 1
22196: PPUSH
22197: LD_VAR 0 9
22201: PPUSH
22202: CALL_OW 12
22206: ARRAY
22207: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22208: LD_VAR 0 2
22212: PPUSH
22213: LD_VAR 0 3
22217: PPUSH
22218: CALL 22467 0 2
22222: NOT
22223: IFFALSE 22282
// repeat engine := _engine [ 1 ] ;
22225: LD_ADDR_VAR 0 3
22229: PUSH
22230: LD_VAR 0 11
22234: PUSH
22235: LD_INT 1
22237: ARRAY
22238: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22239: LD_ADDR_VAR 0 11
22243: PUSH
22244: LD_VAR 0 11
22248: PPUSH
22249: LD_INT 1
22251: PPUSH
22252: CALL_OW 3
22256: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22257: LD_VAR 0 2
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: CALL 22467 0 2
22271: PUSH
22272: LD_VAR 0 11
22276: PUSH
22277: EMPTY
22278: EQUAL
22279: OR
22280: IFFALSE 22225
// if not control in _control then
22282: LD_VAR 0 4
22286: PUSH
22287: LD_VAR 0 12
22291: IN
22292: NOT
22293: IFFALSE 22319
// control := _control [ rand ( 1 , _control ) ] ;
22295: LD_ADDR_VAR 0 4
22299: PUSH
22300: LD_VAR 0 12
22304: PUSH
22305: LD_INT 1
22307: PPUSH
22308: LD_VAR 0 12
22312: PPUSH
22313: CALL_OW 12
22317: ARRAY
22318: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 5
22328: PPUSH
22329: CALL 22687 0 2
22333: NOT
22334: IFFALSE 22393
// repeat weapon := _weapon [ 1 ] ;
22336: LD_ADDR_VAR 0 5
22340: PUSH
22341: LD_VAR 0 10
22345: PUSH
22346: LD_INT 1
22348: ARRAY
22349: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22350: LD_ADDR_VAR 0 10
22354: PUSH
22355: LD_VAR 0 10
22359: PPUSH
22360: LD_INT 1
22362: PPUSH
22363: CALL_OW 3
22367: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22368: LD_VAR 0 2
22372: PPUSH
22373: LD_VAR 0 5
22377: PPUSH
22378: CALL 22687 0 2
22382: PUSH
22383: LD_VAR 0 10
22387: PUSH
22388: EMPTY
22389: EQUAL
22390: OR
22391: IFFALSE 22336
// result := [ ] ;
22393: LD_ADDR_VAR 0 6
22397: PUSH
22398: EMPTY
22399: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22400: LD_VAR 0 1
22404: PPUSH
22405: LD_VAR 0 2
22409: PPUSH
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_VAR 0 4
22419: PPUSH
22420: LD_VAR 0 5
22424: PPUSH
22425: CALL_OW 448
22429: IFFALSE 22462
// result := [ chassis , engine , control , weapon ] ;
22431: LD_ADDR_VAR 0 6
22435: PUSH
22436: LD_VAR 0 2
22440: PUSH
22441: LD_VAR 0 3
22445: PUSH
22446: LD_VAR 0 4
22450: PUSH
22451: LD_VAR 0 5
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: ST_TO_ADDR
// end ;
22462: LD_VAR 0 6
22466: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22467: LD_INT 0
22469: PPUSH
// if not chassis or not engine then
22470: LD_VAR 0 1
22474: NOT
22475: PUSH
22476: LD_VAR 0 2
22480: NOT
22481: OR
22482: IFFALSE 22486
// exit ;
22484: GO 22682
// case engine of engine_solar :
22486: LD_VAR 0 2
22490: PUSH
22491: LD_INT 2
22493: DOUBLE
22494: EQUAL
22495: IFTRUE 22499
22497: GO 22537
22499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22500: LD_ADDR_VAR 0 3
22504: PUSH
22505: LD_INT 11
22507: PUSH
22508: LD_INT 12
22510: PUSH
22511: LD_INT 13
22513: PUSH
22514: LD_INT 14
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 3
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: ST_TO_ADDR
22535: GO 22666
22537: LD_INT 1
22539: DOUBLE
22540: EQUAL
22541: IFTRUE 22545
22543: GO 22607
22545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22546: LD_ADDR_VAR 0 3
22550: PUSH
22551: LD_INT 11
22553: PUSH
22554: LD_INT 12
22556: PUSH
22557: LD_INT 13
22559: PUSH
22560: LD_INT 14
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 4
22574: PUSH
22575: LD_INT 5
22577: PUSH
22578: LD_INT 21
22580: PUSH
22581: LD_INT 23
22583: PUSH
22584: LD_INT 22
22586: PUSH
22587: LD_INT 24
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: ST_TO_ADDR
22605: GO 22666
22607: LD_INT 3
22609: DOUBLE
22610: EQUAL
22611: IFTRUE 22615
22613: GO 22665
22615: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22616: LD_ADDR_VAR 0 3
22620: PUSH
22621: LD_INT 13
22623: PUSH
22624: LD_INT 14
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 21
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 23
22647: PUSH
22648: LD_INT 24
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: ST_TO_ADDR
22663: GO 22666
22665: POP
// result := ( chassis in result ) ;
22666: LD_ADDR_VAR 0 3
22670: PUSH
22671: LD_VAR 0 1
22675: PUSH
22676: LD_VAR 0 3
22680: IN
22681: ST_TO_ADDR
// end ;
22682: LD_VAR 0 3
22686: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22687: LD_INT 0
22689: PPUSH
// if not chassis or not weapon then
22690: LD_VAR 0 1
22694: NOT
22695: PUSH
22696: LD_VAR 0 2
22700: NOT
22701: OR
22702: IFFALSE 22706
// exit ;
22704: GO 23732
// case weapon of us_machine_gun :
22706: LD_VAR 0 2
22710: PUSH
22711: LD_INT 2
22713: DOUBLE
22714: EQUAL
22715: IFTRUE 22719
22717: GO 22749
22719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22720: LD_ADDR_VAR 0 3
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: LD_INT 2
22730: PUSH
22731: LD_INT 3
22733: PUSH
22734: LD_INT 4
22736: PUSH
22737: LD_INT 5
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
22747: GO 23716
22749: LD_INT 3
22751: DOUBLE
22752: EQUAL
22753: IFTRUE 22757
22755: GO 22787
22757: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: LD_INT 3
22771: PUSH
22772: LD_INT 4
22774: PUSH
22775: LD_INT 5
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
22785: GO 23716
22787: LD_INT 11
22789: DOUBLE
22790: EQUAL
22791: IFTRUE 22795
22793: GO 22825
22795: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22796: LD_ADDR_VAR 0 3
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: ST_TO_ADDR
22823: GO 23716
22825: LD_INT 4
22827: DOUBLE
22828: EQUAL
22829: IFTRUE 22833
22831: GO 22859
22833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22834: LD_ADDR_VAR 0 3
22838: PUSH
22839: LD_INT 2
22841: PUSH
22842: LD_INT 3
22844: PUSH
22845: LD_INT 4
22847: PUSH
22848: LD_INT 5
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: ST_TO_ADDR
22857: GO 23716
22859: LD_INT 5
22861: DOUBLE
22862: EQUAL
22863: IFTRUE 22867
22865: GO 22893
22867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22868: LD_ADDR_VAR 0 3
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: LD_INT 5
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: ST_TO_ADDR
22891: GO 23716
22893: LD_INT 9
22895: DOUBLE
22896: EQUAL
22897: IFTRUE 22901
22899: GO 22927
22901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22902: LD_ADDR_VAR 0 3
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: LD_INT 3
22912: PUSH
22913: LD_INT 4
22915: PUSH
22916: LD_INT 5
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: ST_TO_ADDR
22925: GO 23716
22927: LD_INT 7
22929: DOUBLE
22930: EQUAL
22931: IFTRUE 22935
22933: GO 22961
22935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22936: LD_ADDR_VAR 0 3
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: LD_INT 3
22946: PUSH
22947: LD_INT 4
22949: PUSH
22950: LD_INT 5
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: ST_TO_ADDR
22959: GO 23716
22961: LD_INT 12
22963: DOUBLE
22964: EQUAL
22965: IFTRUE 22969
22967: GO 22995
22969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22970: LD_ADDR_VAR 0 3
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: LD_INT 4
22983: PUSH
22984: LD_INT 5
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
22993: GO 23716
22995: LD_INT 13
22997: DOUBLE
22998: EQUAL
22999: IFTRUE 23003
23001: GO 23029
23003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: LD_INT 4
23017: PUSH
23018: LD_INT 5
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
23027: GO 23716
23029: LD_INT 14
23031: DOUBLE
23032: EQUAL
23033: IFTRUE 23037
23035: GO 23055
23037: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23038: LD_ADDR_VAR 0 3
23042: PUSH
23043: LD_INT 4
23045: PUSH
23046: LD_INT 5
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: ST_TO_ADDR
23053: GO 23716
23055: LD_INT 6
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23081
23063: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23064: LD_ADDR_VAR 0 3
23068: PUSH
23069: LD_INT 4
23071: PUSH
23072: LD_INT 5
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: ST_TO_ADDR
23079: GO 23716
23081: LD_INT 10
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23107
23089: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: ST_TO_ADDR
23105: GO 23716
23107: LD_INT 22
23109: DOUBLE
23110: EQUAL
23111: IFTRUE 23115
23113: GO 23141
23115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23116: LD_ADDR_VAR 0 3
23120: PUSH
23121: LD_INT 11
23123: PUSH
23124: LD_INT 12
23126: PUSH
23127: LD_INT 13
23129: PUSH
23130: LD_INT 14
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
23139: GO 23716
23141: LD_INT 23
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23175
23149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23150: LD_ADDR_VAR 0 3
23154: PUSH
23155: LD_INT 11
23157: PUSH
23158: LD_INT 12
23160: PUSH
23161: LD_INT 13
23163: PUSH
23164: LD_INT 14
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: ST_TO_ADDR
23173: GO 23716
23175: LD_INT 24
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23183
23181: GO 23209
23183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23184: LD_ADDR_VAR 0 3
23188: PUSH
23189: LD_INT 11
23191: PUSH
23192: LD_INT 12
23194: PUSH
23195: LD_INT 13
23197: PUSH
23198: LD_INT 14
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: ST_TO_ADDR
23207: GO 23716
23209: LD_INT 30
23211: DOUBLE
23212: EQUAL
23213: IFTRUE 23217
23215: GO 23243
23217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23218: LD_ADDR_VAR 0 3
23222: PUSH
23223: LD_INT 11
23225: PUSH
23226: LD_INT 12
23228: PUSH
23229: LD_INT 13
23231: PUSH
23232: LD_INT 14
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: ST_TO_ADDR
23241: GO 23716
23243: LD_INT 25
23245: DOUBLE
23246: EQUAL
23247: IFTRUE 23251
23249: GO 23269
23251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_INT 13
23259: PUSH
23260: LD_INT 14
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: ST_TO_ADDR
23267: GO 23716
23269: LD_INT 27
23271: DOUBLE
23272: EQUAL
23273: IFTRUE 23277
23275: GO 23295
23277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23278: LD_ADDR_VAR 0 3
23282: PUSH
23283: LD_INT 13
23285: PUSH
23286: LD_INT 14
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: ST_TO_ADDR
23293: GO 23716
23295: LD_INT 28
23297: DOUBLE
23298: EQUAL
23299: IFTRUE 23303
23301: GO 23321
23303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23304: LD_ADDR_VAR 0 3
23308: PUSH
23309: LD_INT 13
23311: PUSH
23312: LD_INT 14
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: ST_TO_ADDR
23319: GO 23716
23321: LD_INT 29
23323: DOUBLE
23324: EQUAL
23325: IFTRUE 23329
23327: GO 23347
23329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23330: LD_ADDR_VAR 0 3
23334: PUSH
23335: LD_INT 13
23337: PUSH
23338: LD_INT 14
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: ST_TO_ADDR
23345: GO 23716
23347: LD_INT 31
23349: DOUBLE
23350: EQUAL
23351: IFTRUE 23355
23353: GO 23373
23355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23356: LD_ADDR_VAR 0 3
23360: PUSH
23361: LD_INT 13
23363: PUSH
23364: LD_INT 14
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23716
23373: LD_INT 26
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23399
23381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_INT 13
23389: PUSH
23390: LD_INT 14
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: ST_TO_ADDR
23397: GO 23716
23399: LD_INT 42
23401: DOUBLE
23402: EQUAL
23403: IFTRUE 23407
23405: GO 23433
23407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23408: LD_ADDR_VAR 0 3
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: LD_INT 24
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: ST_TO_ADDR
23431: GO 23716
23433: LD_INT 43
23435: DOUBLE
23436: EQUAL
23437: IFTRUE 23441
23439: GO 23467
23441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23442: LD_ADDR_VAR 0 3
23446: PUSH
23447: LD_INT 21
23449: PUSH
23450: LD_INT 22
23452: PUSH
23453: LD_INT 23
23455: PUSH
23456: LD_INT 24
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: ST_TO_ADDR
23465: GO 23716
23467: LD_INT 44
23469: DOUBLE
23470: EQUAL
23471: IFTRUE 23475
23473: GO 23501
23475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: LD_INT 21
23483: PUSH
23484: LD_INT 22
23486: PUSH
23487: LD_INT 23
23489: PUSH
23490: LD_INT 24
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: ST_TO_ADDR
23499: GO 23716
23501: LD_INT 45
23503: DOUBLE
23504: EQUAL
23505: IFTRUE 23509
23507: GO 23535
23509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23510: LD_ADDR_VAR 0 3
23514: PUSH
23515: LD_INT 21
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 23
23523: PUSH
23524: LD_INT 24
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: ST_TO_ADDR
23533: GO 23716
23535: LD_INT 49
23537: DOUBLE
23538: EQUAL
23539: IFTRUE 23543
23541: GO 23569
23543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23544: LD_ADDR_VAR 0 3
23548: PUSH
23549: LD_INT 21
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_INT 23
23557: PUSH
23558: LD_INT 24
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: ST_TO_ADDR
23567: GO 23716
23569: LD_INT 51
23571: DOUBLE
23572: EQUAL
23573: IFTRUE 23577
23575: GO 23603
23577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23578: LD_ADDR_VAR 0 3
23582: PUSH
23583: LD_INT 21
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_INT 23
23591: PUSH
23592: LD_INT 24
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: ST_TO_ADDR
23601: GO 23716
23603: LD_INT 52
23605: DOUBLE
23606: EQUAL
23607: IFTRUE 23611
23609: GO 23637
23611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: LD_INT 21
23619: PUSH
23620: LD_INT 22
23622: PUSH
23623: LD_INT 23
23625: PUSH
23626: LD_INT 24
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: ST_TO_ADDR
23635: GO 23716
23637: LD_INT 53
23639: DOUBLE
23640: EQUAL
23641: IFTRUE 23645
23643: GO 23663
23645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23646: LD_ADDR_VAR 0 3
23650: PUSH
23651: LD_INT 23
23653: PUSH
23654: LD_INT 24
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: ST_TO_ADDR
23661: GO 23716
23663: LD_INT 46
23665: DOUBLE
23666: EQUAL
23667: IFTRUE 23671
23669: GO 23689
23671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23672: LD_ADDR_VAR 0 3
23676: PUSH
23677: LD_INT 23
23679: PUSH
23680: LD_INT 24
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: ST_TO_ADDR
23687: GO 23716
23689: LD_INT 47
23691: DOUBLE
23692: EQUAL
23693: IFTRUE 23697
23695: GO 23715
23697: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_INT 23
23705: PUSH
23706: LD_INT 24
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: ST_TO_ADDR
23713: GO 23716
23715: POP
// result := ( chassis in result ) ;
23716: LD_ADDR_VAR 0 3
23720: PUSH
23721: LD_VAR 0 1
23725: PUSH
23726: LD_VAR 0 3
23730: IN
23731: ST_TO_ADDR
// end ;
23732: LD_VAR 0 3
23736: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23737: LD_INT 0
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
23743: PPUSH
23744: PPUSH
23745: PPUSH
// result := array ;
23746: LD_ADDR_VAR 0 5
23750: PUSH
23751: LD_VAR 0 1
23755: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23756: LD_VAR 0 1
23760: NOT
23761: PUSH
23762: LD_VAR 0 2
23766: NOT
23767: OR
23768: PUSH
23769: LD_VAR 0 3
23773: NOT
23774: OR
23775: PUSH
23776: LD_VAR 0 2
23780: PUSH
23781: LD_VAR 0 1
23785: GREATER
23786: OR
23787: PUSH
23788: LD_VAR 0 3
23792: PUSH
23793: LD_VAR 0 1
23797: GREATER
23798: OR
23799: IFFALSE 23803
// exit ;
23801: GO 24099
// if direction then
23803: LD_VAR 0 4
23807: IFFALSE 23871
// begin d := 1 ;
23809: LD_ADDR_VAR 0 9
23813: PUSH
23814: LD_INT 1
23816: ST_TO_ADDR
// if i_from > i_to then
23817: LD_VAR 0 2
23821: PUSH
23822: LD_VAR 0 3
23826: GREATER
23827: IFFALSE 23853
// length := ( array - i_from ) + i_to else
23829: LD_ADDR_VAR 0 11
23833: PUSH
23834: LD_VAR 0 1
23838: PUSH
23839: LD_VAR 0 2
23843: MINUS
23844: PUSH
23845: LD_VAR 0 3
23849: PLUS
23850: ST_TO_ADDR
23851: GO 23869
// length := i_to - i_from ;
23853: LD_ADDR_VAR 0 11
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_VAR 0 2
23867: MINUS
23868: ST_TO_ADDR
// end else
23869: GO 23932
// begin d := - 1 ;
23871: LD_ADDR_VAR 0 9
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: ST_TO_ADDR
// if i_from > i_to then
23880: LD_VAR 0 2
23884: PUSH
23885: LD_VAR 0 3
23889: GREATER
23890: IFFALSE 23910
// length := i_from - i_to else
23892: LD_ADDR_VAR 0 11
23896: PUSH
23897: LD_VAR 0 2
23901: PUSH
23902: LD_VAR 0 3
23906: MINUS
23907: ST_TO_ADDR
23908: GO 23932
// length := ( array - i_to ) + i_from ;
23910: LD_ADDR_VAR 0 11
23914: PUSH
23915: LD_VAR 0 1
23919: PUSH
23920: LD_VAR 0 3
23924: MINUS
23925: PUSH
23926: LD_VAR 0 2
23930: PLUS
23931: ST_TO_ADDR
// end ; if not length then
23932: LD_VAR 0 11
23936: NOT
23937: IFFALSE 23941
// exit ;
23939: GO 24099
// tmp := array ;
23941: LD_ADDR_VAR 0 10
23945: PUSH
23946: LD_VAR 0 1
23950: ST_TO_ADDR
// for i = 1 to length do
23951: LD_ADDR_VAR 0 6
23955: PUSH
23956: DOUBLE
23957: LD_INT 1
23959: DEC
23960: ST_TO_ADDR
23961: LD_VAR 0 11
23965: PUSH
23966: FOR_TO
23967: IFFALSE 24087
// begin for j = 1 to array do
23969: LD_ADDR_VAR 0 7
23973: PUSH
23974: DOUBLE
23975: LD_INT 1
23977: DEC
23978: ST_TO_ADDR
23979: LD_VAR 0 1
23983: PUSH
23984: FOR_TO
23985: IFFALSE 24073
// begin k := j + d ;
23987: LD_ADDR_VAR 0 8
23991: PUSH
23992: LD_VAR 0 7
23996: PUSH
23997: LD_VAR 0 9
24001: PLUS
24002: ST_TO_ADDR
// if k > array then
24003: LD_VAR 0 8
24007: PUSH
24008: LD_VAR 0 1
24012: GREATER
24013: IFFALSE 24023
// k := 1 ;
24015: LD_ADDR_VAR 0 8
24019: PUSH
24020: LD_INT 1
24022: ST_TO_ADDR
// if not k then
24023: LD_VAR 0 8
24027: NOT
24028: IFFALSE 24040
// k := array ;
24030: LD_ADDR_VAR 0 8
24034: PUSH
24035: LD_VAR 0 1
24039: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24040: LD_ADDR_VAR 0 10
24044: PUSH
24045: LD_VAR 0 10
24049: PPUSH
24050: LD_VAR 0 8
24054: PPUSH
24055: LD_VAR 0 1
24059: PUSH
24060: LD_VAR 0 7
24064: ARRAY
24065: PPUSH
24066: CALL_OW 1
24070: ST_TO_ADDR
// end ;
24071: GO 23984
24073: POP
24074: POP
// array := tmp ;
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_VAR 0 10
24084: ST_TO_ADDR
// end ;
24085: GO 23966
24087: POP
24088: POP
// result := array ;
24089: LD_ADDR_VAR 0 5
24093: PUSH
24094: LD_VAR 0 1
24098: ST_TO_ADDR
// end ;
24099: LD_VAR 0 5
24103: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24104: LD_INT 0
24106: PPUSH
24107: PPUSH
// result := 0 ;
24108: LD_ADDR_VAR 0 3
24112: PUSH
24113: LD_INT 0
24115: ST_TO_ADDR
// if not array or not value in array then
24116: LD_VAR 0 1
24120: NOT
24121: PUSH
24122: LD_VAR 0 2
24126: PUSH
24127: LD_VAR 0 1
24131: IN
24132: NOT
24133: OR
24134: IFFALSE 24138
// exit ;
24136: GO 24192
// for i = 1 to array do
24138: LD_ADDR_VAR 0 4
24142: PUSH
24143: DOUBLE
24144: LD_INT 1
24146: DEC
24147: ST_TO_ADDR
24148: LD_VAR 0 1
24152: PUSH
24153: FOR_TO
24154: IFFALSE 24190
// if value = array [ i ] then
24156: LD_VAR 0 2
24160: PUSH
24161: LD_VAR 0 1
24165: PUSH
24166: LD_VAR 0 4
24170: ARRAY
24171: EQUAL
24172: IFFALSE 24188
// begin result := i ;
24174: LD_ADDR_VAR 0 3
24178: PUSH
24179: LD_VAR 0 4
24183: ST_TO_ADDR
// exit ;
24184: POP
24185: POP
24186: GO 24192
// end ;
24188: GO 24153
24190: POP
24191: POP
// end ;
24192: LD_VAR 0 3
24196: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24197: LD_INT 0
24199: PPUSH
// vc_chassis := chassis ;
24200: LD_ADDR_OWVAR 37
24204: PUSH
24205: LD_VAR 0 1
24209: ST_TO_ADDR
// vc_engine := engine ;
24210: LD_ADDR_OWVAR 39
24214: PUSH
24215: LD_VAR 0 2
24219: ST_TO_ADDR
// vc_control := control ;
24220: LD_ADDR_OWVAR 38
24224: PUSH
24225: LD_VAR 0 3
24229: ST_TO_ADDR
// vc_weapon := weapon ;
24230: LD_ADDR_OWVAR 40
24234: PUSH
24235: LD_VAR 0 4
24239: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24240: LD_ADDR_OWVAR 41
24244: PUSH
24245: LD_VAR 0 5
24249: ST_TO_ADDR
// end ;
24250: LD_VAR 0 6
24254: RET
// export function WantPlant ( unit ) ; var task ; begin
24255: LD_INT 0
24257: PPUSH
24258: PPUSH
// result := false ;
24259: LD_ADDR_VAR 0 2
24263: PUSH
24264: LD_INT 0
24266: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 437
24281: ST_TO_ADDR
// if task then
24282: LD_VAR 0 3
24286: IFFALSE 24314
// if task [ 1 ] [ 1 ] = p then
24288: LD_VAR 0 3
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PUSH
24297: LD_INT 1
24299: ARRAY
24300: PUSH
24301: LD_STRING p
24303: EQUAL
24304: IFFALSE 24314
// result := true ;
24306: LD_ADDR_VAR 0 2
24310: PUSH
24311: LD_INT 1
24313: ST_TO_ADDR
// end ;
24314: LD_VAR 0 2
24318: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24319: LD_INT 0
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
// if pos < 1 then
24325: LD_VAR 0 2
24329: PUSH
24330: LD_INT 1
24332: LESS
24333: IFFALSE 24337
// exit ;
24335: GO 24640
// if pos = 1 then
24337: LD_VAR 0 2
24341: PUSH
24342: LD_INT 1
24344: EQUAL
24345: IFFALSE 24378
// result := Replace ( arr , pos [ 1 ] , value ) else
24347: LD_ADDR_VAR 0 4
24351: PUSH
24352: LD_VAR 0 1
24356: PPUSH
24357: LD_VAR 0 2
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: PPUSH
24366: LD_VAR 0 3
24370: PPUSH
24371: CALL_OW 1
24375: ST_TO_ADDR
24376: GO 24640
// begin tmp := arr ;
24378: LD_ADDR_VAR 0 6
24382: PUSH
24383: LD_VAR 0 1
24387: ST_TO_ADDR
// s_arr := [ tmp ] ;
24388: LD_ADDR_VAR 0 7
24392: PUSH
24393: LD_VAR 0 6
24397: PUSH
24398: EMPTY
24399: LIST
24400: ST_TO_ADDR
// for i = 1 to pos - 1 do
24401: LD_ADDR_VAR 0 5
24405: PUSH
24406: DOUBLE
24407: LD_INT 1
24409: DEC
24410: ST_TO_ADDR
24411: LD_VAR 0 2
24415: PUSH
24416: LD_INT 1
24418: MINUS
24419: PUSH
24420: FOR_TO
24421: IFFALSE 24466
// begin tmp := tmp [ pos [ i ] ] ;
24423: LD_ADDR_VAR 0 6
24427: PUSH
24428: LD_VAR 0 6
24432: PUSH
24433: LD_VAR 0 2
24437: PUSH
24438: LD_VAR 0 5
24442: ARRAY
24443: ARRAY
24444: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24445: LD_ADDR_VAR 0 7
24449: PUSH
24450: LD_VAR 0 7
24454: PUSH
24455: LD_VAR 0 6
24459: PUSH
24460: EMPTY
24461: LIST
24462: ADD
24463: ST_TO_ADDR
// end ;
24464: GO 24420
24466: POP
24467: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24468: LD_ADDR_VAR 0 6
24472: PUSH
24473: LD_VAR 0 6
24477: PPUSH
24478: LD_VAR 0 2
24482: PUSH
24483: LD_VAR 0 2
24487: ARRAY
24488: PPUSH
24489: LD_VAR 0 3
24493: PPUSH
24494: CALL_OW 1
24498: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24499: LD_ADDR_VAR 0 7
24503: PUSH
24504: LD_VAR 0 7
24508: PPUSH
24509: LD_VAR 0 7
24513: PPUSH
24514: LD_VAR 0 6
24518: PPUSH
24519: CALL_OW 1
24523: ST_TO_ADDR
// for i = s_arr downto 2 do
24524: LD_ADDR_VAR 0 5
24528: PUSH
24529: DOUBLE
24530: LD_VAR 0 7
24534: INC
24535: ST_TO_ADDR
24536: LD_INT 2
24538: PUSH
24539: FOR_DOWNTO
24540: IFFALSE 24624
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24542: LD_ADDR_VAR 0 6
24546: PUSH
24547: LD_VAR 0 7
24551: PUSH
24552: LD_VAR 0 5
24556: PUSH
24557: LD_INT 1
24559: MINUS
24560: ARRAY
24561: PPUSH
24562: LD_VAR 0 2
24566: PUSH
24567: LD_VAR 0 5
24571: PUSH
24572: LD_INT 1
24574: MINUS
24575: ARRAY
24576: PPUSH
24577: LD_VAR 0 7
24581: PUSH
24582: LD_VAR 0 5
24586: ARRAY
24587: PPUSH
24588: CALL_OW 1
24592: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24593: LD_ADDR_VAR 0 7
24597: PUSH
24598: LD_VAR 0 7
24602: PPUSH
24603: LD_VAR 0 5
24607: PUSH
24608: LD_INT 1
24610: MINUS
24611: PPUSH
24612: LD_VAR 0 6
24616: PPUSH
24617: CALL_OW 1
24621: ST_TO_ADDR
// end ;
24622: GO 24539
24624: POP
24625: POP
// result := s_arr [ 1 ] ;
24626: LD_ADDR_VAR 0 4
24630: PUSH
24631: LD_VAR 0 7
24635: PUSH
24636: LD_INT 1
24638: ARRAY
24639: ST_TO_ADDR
// end ; end ;
24640: LD_VAR 0 4
24644: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24645: LD_INT 0
24647: PPUSH
24648: PPUSH
// if not list then
24649: LD_VAR 0 1
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24749
// i := list [ pos1 ] ;
24658: LD_ADDR_VAR 0 5
24662: PUSH
24663: LD_VAR 0 1
24667: PUSH
24668: LD_VAR 0 2
24672: ARRAY
24673: ST_TO_ADDR
// if not i then
24674: LD_VAR 0 5
24678: NOT
24679: IFFALSE 24683
// exit ;
24681: GO 24749
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24683: LD_ADDR_VAR 0 1
24687: PUSH
24688: LD_VAR 0 1
24692: PPUSH
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 1
24702: PUSH
24703: LD_VAR 0 3
24707: ARRAY
24708: PPUSH
24709: CALL_OW 1
24713: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24714: LD_ADDR_VAR 0 1
24718: PUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: LD_VAR 0 3
24728: PPUSH
24729: LD_VAR 0 5
24733: PPUSH
24734: CALL_OW 1
24738: ST_TO_ADDR
// result := list ;
24739: LD_ADDR_VAR 0 4
24743: PUSH
24744: LD_VAR 0 1
24748: ST_TO_ADDR
// end ;
24749: LD_VAR 0 4
24753: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24754: LD_INT 0
24756: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24757: LD_ADDR_VAR 0 5
24761: PUSH
24762: LD_VAR 0 1
24766: PPUSH
24767: CALL_OW 250
24771: PPUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: CALL_OW 251
24781: PPUSH
24782: LD_VAR 0 2
24786: PPUSH
24787: LD_VAR 0 3
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: CALL 24807 0 5
24801: ST_TO_ADDR
// end ;
24802: LD_VAR 0 5
24806: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24807: LD_INT 0
24809: PPUSH
24810: PPUSH
24811: PPUSH
24812: PPUSH
// if not list then
24813: LD_VAR 0 3
24817: NOT
24818: IFFALSE 24822
// exit ;
24820: GO 25210
// result := [ ] ;
24822: LD_ADDR_VAR 0 6
24826: PUSH
24827: EMPTY
24828: ST_TO_ADDR
// for i in list do
24829: LD_ADDR_VAR 0 7
24833: PUSH
24834: LD_VAR 0 3
24838: PUSH
24839: FOR_IN
24840: IFFALSE 25042
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24842: LD_ADDR_VAR 0 9
24846: PUSH
24847: LD_VAR 0 7
24851: PPUSH
24852: LD_VAR 0 1
24856: PPUSH
24857: LD_VAR 0 2
24861: PPUSH
24862: CALL_OW 297
24866: ST_TO_ADDR
// if not result then
24867: LD_VAR 0 6
24871: NOT
24872: IFFALSE 24898
// result := [ [ i , tmp ] ] else
24874: LD_ADDR_VAR 0 6
24878: PUSH
24879: LD_VAR 0 7
24883: PUSH
24884: LD_VAR 0 9
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: ST_TO_ADDR
24896: GO 25040
// begin if result [ result ] [ 2 ] < tmp then
24898: LD_VAR 0 6
24902: PUSH
24903: LD_VAR 0 6
24907: ARRAY
24908: PUSH
24909: LD_INT 2
24911: ARRAY
24912: PUSH
24913: LD_VAR 0 9
24917: LESS
24918: IFFALSE 24960
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24920: LD_ADDR_VAR 0 6
24924: PUSH
24925: LD_VAR 0 6
24929: PPUSH
24930: LD_VAR 0 6
24934: PUSH
24935: LD_INT 1
24937: PLUS
24938: PPUSH
24939: LD_VAR 0 7
24943: PUSH
24944: LD_VAR 0 9
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PPUSH
24953: CALL_OW 2
24957: ST_TO_ADDR
24958: GO 25040
// for j = 1 to result do
24960: LD_ADDR_VAR 0 8
24964: PUSH
24965: DOUBLE
24966: LD_INT 1
24968: DEC
24969: ST_TO_ADDR
24970: LD_VAR 0 6
24974: PUSH
24975: FOR_TO
24976: IFFALSE 25038
// begin if tmp < result [ j ] [ 2 ] then
24978: LD_VAR 0 9
24982: PUSH
24983: LD_VAR 0 6
24987: PUSH
24988: LD_VAR 0 8
24992: ARRAY
24993: PUSH
24994: LD_INT 2
24996: ARRAY
24997: LESS
24998: IFFALSE 25036
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25000: LD_ADDR_VAR 0 6
25004: PUSH
25005: LD_VAR 0 6
25009: PPUSH
25010: LD_VAR 0 8
25014: PPUSH
25015: LD_VAR 0 7
25019: PUSH
25020: LD_VAR 0 9
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PPUSH
25029: CALL_OW 2
25033: ST_TO_ADDR
// break ;
25034: GO 25038
// end ; end ;
25036: GO 24975
25038: POP
25039: POP
// end ; end ;
25040: GO 24839
25042: POP
25043: POP
// if result and not asc then
25044: LD_VAR 0 6
25048: PUSH
25049: LD_VAR 0 4
25053: NOT
25054: AND
25055: IFFALSE 25130
// begin tmp := result ;
25057: LD_ADDR_VAR 0 9
25061: PUSH
25062: LD_VAR 0 6
25066: ST_TO_ADDR
// for i = tmp downto 1 do
25067: LD_ADDR_VAR 0 7
25071: PUSH
25072: DOUBLE
25073: LD_VAR 0 9
25077: INC
25078: ST_TO_ADDR
25079: LD_INT 1
25081: PUSH
25082: FOR_DOWNTO
25083: IFFALSE 25128
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25085: LD_ADDR_VAR 0 6
25089: PUSH
25090: LD_VAR 0 6
25094: PPUSH
25095: LD_VAR 0 9
25099: PUSH
25100: LD_VAR 0 7
25104: MINUS
25105: PUSH
25106: LD_INT 1
25108: PLUS
25109: PPUSH
25110: LD_VAR 0 9
25114: PUSH
25115: LD_VAR 0 7
25119: ARRAY
25120: PPUSH
25121: CALL_OW 1
25125: ST_TO_ADDR
25126: GO 25082
25128: POP
25129: POP
// end ; tmp := [ ] ;
25130: LD_ADDR_VAR 0 9
25134: PUSH
25135: EMPTY
25136: ST_TO_ADDR
// if mode then
25137: LD_VAR 0 5
25141: IFFALSE 25210
// begin for i = 1 to result do
25143: LD_ADDR_VAR 0 7
25147: PUSH
25148: DOUBLE
25149: LD_INT 1
25151: DEC
25152: ST_TO_ADDR
25153: LD_VAR 0 6
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25198
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25161: LD_ADDR_VAR 0 9
25165: PUSH
25166: LD_VAR 0 9
25170: PPUSH
25171: LD_VAR 0 7
25175: PPUSH
25176: LD_VAR 0 6
25180: PUSH
25181: LD_VAR 0 7
25185: ARRAY
25186: PUSH
25187: LD_INT 1
25189: ARRAY
25190: PPUSH
25191: CALL_OW 1
25195: ST_TO_ADDR
25196: GO 25158
25198: POP
25199: POP
// result := tmp ;
25200: LD_ADDR_VAR 0 6
25204: PUSH
25205: LD_VAR 0 9
25209: ST_TO_ADDR
// end ; end ;
25210: LD_VAR 0 6
25214: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25215: LD_INT 0
25217: PPUSH
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25223: LD_ADDR_VAR 0 5
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: ST_TO_ADDR
// if not x or not y then
25245: LD_VAR 0 2
25249: NOT
25250: PUSH
25251: LD_VAR 0 3
25255: NOT
25256: OR
25257: IFFALSE 25261
// exit ;
25259: GO 26907
// if not range then
25261: LD_VAR 0 4
25265: NOT
25266: IFFALSE 25276
// range := 10 ;
25268: LD_ADDR_VAR 0 4
25272: PUSH
25273: LD_INT 10
25275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25276: LD_ADDR_VAR 0 8
25280: PUSH
25281: LD_INT 81
25283: PUSH
25284: LD_VAR 0 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 92
25295: PUSH
25296: LD_VAR 0 2
25300: PUSH
25301: LD_VAR 0 3
25305: PUSH
25306: LD_VAR 0 4
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 3
25319: PUSH
25320: LD_INT 21
25322: PUSH
25323: LD_INT 3
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: PPUSH
25339: CALL_OW 69
25343: ST_TO_ADDR
// if not tmp then
25344: LD_VAR 0 8
25348: NOT
25349: IFFALSE 25353
// exit ;
25351: GO 26907
// for i in tmp do
25353: LD_ADDR_VAR 0 6
25357: PUSH
25358: LD_VAR 0 8
25362: PUSH
25363: FOR_IN
25364: IFFALSE 26882
// begin points := [ 0 , 0 , 0 ] ;
25366: LD_ADDR_VAR 0 9
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: ST_TO_ADDR
// bpoints := 1 ;
25385: LD_ADDR_VAR 0 10
25389: PUSH
25390: LD_INT 1
25392: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25393: LD_VAR 0 6
25397: PPUSH
25398: CALL_OW 247
25402: PUSH
25403: LD_INT 1
25405: DOUBLE
25406: EQUAL
25407: IFTRUE 25411
25409: GO 25989
25411: POP
// begin if GetClass ( i ) = 1 then
25412: LD_VAR 0 6
25416: PPUSH
25417: CALL_OW 257
25421: PUSH
25422: LD_INT 1
25424: EQUAL
25425: IFFALSE 25446
// points := [ 10 , 5 , 3 ] ;
25427: LD_ADDR_VAR 0 9
25431: PUSH
25432: LD_INT 10
25434: PUSH
25435: LD_INT 5
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25446: LD_VAR 0 6
25450: PPUSH
25451: CALL_OW 257
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 4
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: IN
25470: IFFALSE 25491
// points := [ 3 , 2 , 1 ] ;
25472: LD_ADDR_VAR 0 9
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25491: LD_VAR 0 6
25495: PPUSH
25496: CALL_OW 257
25500: PUSH
25501: LD_INT 5
25503: EQUAL
25504: IFFALSE 25525
// points := [ 130 , 5 , 2 ] ;
25506: LD_ADDR_VAR 0 9
25510: PUSH
25511: LD_INT 130
25513: PUSH
25514: LD_INT 5
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25525: LD_VAR 0 6
25529: PPUSH
25530: CALL_OW 257
25534: PUSH
25535: LD_INT 8
25537: EQUAL
25538: IFFALSE 25559
// points := [ 35 , 35 , 30 ] ;
25540: LD_ADDR_VAR 0 9
25544: PUSH
25545: LD_INT 35
25547: PUSH
25548: LD_INT 35
25550: PUSH
25551: LD_INT 30
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: LIST
25558: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25559: LD_VAR 0 6
25563: PPUSH
25564: CALL_OW 257
25568: PUSH
25569: LD_INT 9
25571: EQUAL
25572: IFFALSE 25593
// points := [ 20 , 55 , 40 ] ;
25574: LD_ADDR_VAR 0 9
25578: PUSH
25579: LD_INT 20
25581: PUSH
25582: LD_INT 55
25584: PUSH
25585: LD_INT 40
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: LIST
25592: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25593: LD_VAR 0 6
25597: PPUSH
25598: CALL_OW 257
25602: PUSH
25603: LD_INT 12
25605: PUSH
25606: LD_INT 16
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: IN
25613: IFFALSE 25634
// points := [ 5 , 3 , 2 ] ;
25615: LD_ADDR_VAR 0 9
25619: PUSH
25620: LD_INT 5
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25634: LD_VAR 0 6
25638: PPUSH
25639: CALL_OW 257
25643: PUSH
25644: LD_INT 17
25646: EQUAL
25647: IFFALSE 25668
// points := [ 100 , 50 , 75 ] ;
25649: LD_ADDR_VAR 0 9
25653: PUSH
25654: LD_INT 100
25656: PUSH
25657: LD_INT 50
25659: PUSH
25660: LD_INT 75
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25668: LD_VAR 0 6
25672: PPUSH
25673: CALL_OW 257
25677: PUSH
25678: LD_INT 15
25680: EQUAL
25681: IFFALSE 25702
// points := [ 10 , 5 , 3 ] ;
25683: LD_ADDR_VAR 0 9
25687: PUSH
25688: LD_INT 10
25690: PUSH
25691: LD_INT 5
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25702: LD_VAR 0 6
25706: PPUSH
25707: CALL_OW 257
25711: PUSH
25712: LD_INT 14
25714: EQUAL
25715: IFFALSE 25736
// points := [ 10 , 0 , 0 ] ;
25717: LD_ADDR_VAR 0 9
25721: PUSH
25722: LD_INT 10
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25736: LD_VAR 0 6
25740: PPUSH
25741: CALL_OW 257
25745: PUSH
25746: LD_INT 11
25748: EQUAL
25749: IFFALSE 25770
// points := [ 30 , 10 , 5 ] ;
25751: LD_ADDR_VAR 0 9
25755: PUSH
25756: LD_INT 30
25758: PUSH
25759: LD_INT 10
25761: PUSH
25762: LD_INT 5
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: LIST
25769: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25770: LD_VAR 0 1
25774: PPUSH
25775: LD_INT 5
25777: PPUSH
25778: CALL_OW 321
25782: PUSH
25783: LD_INT 2
25785: EQUAL
25786: IFFALSE 25803
// bpoints := bpoints * 1.8 ;
25788: LD_ADDR_VAR 0 10
25792: PUSH
25793: LD_VAR 0 10
25797: PUSH
25798: LD_REAL  1.80000000000000E+0000
25801: MUL
25802: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25803: LD_VAR 0 6
25807: PPUSH
25808: CALL_OW 257
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: LD_INT 3
25821: PUSH
25822: LD_INT 4
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: IN
25831: PUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: LD_INT 51
25839: PPUSH
25840: CALL_OW 321
25844: PUSH
25845: LD_INT 2
25847: EQUAL
25848: AND
25849: IFFALSE 25866
// bpoints := bpoints * 1.2 ;
25851: LD_ADDR_VAR 0 10
25855: PUSH
25856: LD_VAR 0 10
25860: PUSH
25861: LD_REAL  1.20000000000000E+0000
25864: MUL
25865: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25866: LD_VAR 0 6
25870: PPUSH
25871: CALL_OW 257
25875: PUSH
25876: LD_INT 5
25878: PUSH
25879: LD_INT 7
25881: PUSH
25882: LD_INT 9
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: IN
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: LD_INT 52
25898: PPUSH
25899: CALL_OW 321
25903: PUSH
25904: LD_INT 2
25906: EQUAL
25907: AND
25908: IFFALSE 25925
// bpoints := bpoints * 1.5 ;
25910: LD_ADDR_VAR 0 10
25914: PUSH
25915: LD_VAR 0 10
25919: PUSH
25920: LD_REAL  1.50000000000000E+0000
25923: MUL
25924: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25925: LD_VAR 0 1
25929: PPUSH
25930: LD_INT 66
25932: PPUSH
25933: CALL_OW 321
25937: PUSH
25938: LD_INT 2
25940: EQUAL
25941: IFFALSE 25958
// bpoints := bpoints * 1.1 ;
25943: LD_ADDR_VAR 0 10
25947: PUSH
25948: LD_VAR 0 10
25952: PUSH
25953: LD_REAL  1.10000000000000E+0000
25956: MUL
25957: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25958: LD_ADDR_VAR 0 10
25962: PUSH
25963: LD_VAR 0 10
25967: PUSH
25968: LD_VAR 0 6
25972: PPUSH
25973: LD_INT 1
25975: PPUSH
25976: CALL_OW 259
25980: PUSH
25981: LD_REAL  1.15000000000000E+0000
25984: MUL
25985: MUL
25986: ST_TO_ADDR
// end ; unit_vehicle :
25987: GO 26811
25989: LD_INT 2
25991: DOUBLE
25992: EQUAL
25993: IFTRUE 25997
25995: GO 26799
25997: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25998: LD_VAR 0 6
26002: PPUSH
26003: CALL_OW 264
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 42
26013: PUSH
26014: LD_INT 24
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: IN
26022: IFFALSE 26043
// points := [ 25 , 5 , 3 ] ;
26024: LD_ADDR_VAR 0 9
26028: PUSH
26029: LD_INT 25
26031: PUSH
26032: LD_INT 5
26034: PUSH
26035: LD_INT 3
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26043: LD_VAR 0 6
26047: PPUSH
26048: CALL_OW 264
26052: PUSH
26053: LD_INT 4
26055: PUSH
26056: LD_INT 43
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: IN
26067: IFFALSE 26088
// points := [ 40 , 15 , 5 ] ;
26069: LD_ADDR_VAR 0 9
26073: PUSH
26074: LD_INT 40
26076: PUSH
26077: LD_INT 15
26079: PUSH
26080: LD_INT 5
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26088: LD_VAR 0 6
26092: PPUSH
26093: CALL_OW 264
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: LD_INT 23
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: IN
26108: IFFALSE 26129
// points := [ 7 , 25 , 8 ] ;
26110: LD_ADDR_VAR 0 9
26114: PUSH
26115: LD_INT 7
26117: PUSH
26118: LD_INT 25
26120: PUSH
26121: LD_INT 8
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26129: LD_VAR 0 6
26133: PPUSH
26134: CALL_OW 264
26138: PUSH
26139: LD_INT 5
26141: PUSH
26142: LD_INT 27
26144: PUSH
26145: LD_INT 44
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: IN
26153: IFFALSE 26174
// points := [ 14 , 50 , 16 ] ;
26155: LD_ADDR_VAR 0 9
26159: PUSH
26160: LD_INT 14
26162: PUSH
26163: LD_INT 50
26165: PUSH
26166: LD_INT 16
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: LIST
26173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26174: LD_VAR 0 6
26178: PPUSH
26179: CALL_OW 264
26183: PUSH
26184: LD_INT 6
26186: PUSH
26187: LD_INT 46
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: IN
26194: IFFALSE 26215
// points := [ 32 , 120 , 70 ] ;
26196: LD_ADDR_VAR 0 9
26200: PUSH
26201: LD_INT 32
26203: PUSH
26204: LD_INT 120
26206: PUSH
26207: LD_INT 70
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26215: LD_VAR 0 6
26219: PPUSH
26220: CALL_OW 264
26224: PUSH
26225: LD_INT 7
26227: PUSH
26228: LD_INT 28
26230: PUSH
26231: LD_INT 45
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: IN
26239: IFFALSE 26260
// points := [ 35 , 20 , 45 ] ;
26241: LD_ADDR_VAR 0 9
26245: PUSH
26246: LD_INT 35
26248: PUSH
26249: LD_INT 20
26251: PUSH
26252: LD_INT 45
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26260: LD_VAR 0 6
26264: PPUSH
26265: CALL_OW 264
26269: PUSH
26270: LD_INT 47
26272: PUSH
26273: EMPTY
26274: LIST
26275: IN
26276: IFFALSE 26297
// points := [ 67 , 45 , 75 ] ;
26278: LD_ADDR_VAR 0 9
26282: PUSH
26283: LD_INT 67
26285: PUSH
26286: LD_INT 45
26288: PUSH
26289: LD_INT 75
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: LIST
26296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26297: LD_VAR 0 6
26301: PPUSH
26302: CALL_OW 264
26306: PUSH
26307: LD_INT 26
26309: PUSH
26310: EMPTY
26311: LIST
26312: IN
26313: IFFALSE 26334
// points := [ 120 , 30 , 80 ] ;
26315: LD_ADDR_VAR 0 9
26319: PUSH
26320: LD_INT 120
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: LD_INT 80
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26334: LD_VAR 0 6
26338: PPUSH
26339: CALL_OW 264
26343: PUSH
26344: LD_INT 22
26346: PUSH
26347: EMPTY
26348: LIST
26349: IN
26350: IFFALSE 26371
// points := [ 40 , 1 , 1 ] ;
26352: LD_ADDR_VAR 0 9
26356: PUSH
26357: LD_INT 40
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26371: LD_VAR 0 6
26375: PPUSH
26376: CALL_OW 264
26380: PUSH
26381: LD_INT 29
26383: PUSH
26384: EMPTY
26385: LIST
26386: IN
26387: IFFALSE 26408
// points := [ 70 , 200 , 400 ] ;
26389: LD_ADDR_VAR 0 9
26393: PUSH
26394: LD_INT 70
26396: PUSH
26397: LD_INT 200
26399: PUSH
26400: LD_INT 400
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26408: LD_VAR 0 6
26412: PPUSH
26413: CALL_OW 264
26417: PUSH
26418: LD_INT 14
26420: PUSH
26421: LD_INT 53
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: IN
26428: IFFALSE 26449
// points := [ 40 , 10 , 20 ] ;
26430: LD_ADDR_VAR 0 9
26434: PUSH
26435: LD_INT 40
26437: PUSH
26438: LD_INT 10
26440: PUSH
26441: LD_INT 20
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26449: LD_VAR 0 6
26453: PPUSH
26454: CALL_OW 264
26458: PUSH
26459: LD_INT 9
26461: PUSH
26462: EMPTY
26463: LIST
26464: IN
26465: IFFALSE 26486
// points := [ 5 , 70 , 20 ] ;
26467: LD_ADDR_VAR 0 9
26471: PUSH
26472: LD_INT 5
26474: PUSH
26475: LD_INT 70
26477: PUSH
26478: LD_INT 20
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26486: LD_VAR 0 6
26490: PPUSH
26491: CALL_OW 264
26495: PUSH
26496: LD_INT 10
26498: PUSH
26499: EMPTY
26500: LIST
26501: IN
26502: IFFALSE 26523
// points := [ 35 , 110 , 70 ] ;
26504: LD_ADDR_VAR 0 9
26508: PUSH
26509: LD_INT 35
26511: PUSH
26512: LD_INT 110
26514: PUSH
26515: LD_INT 70
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26523: LD_VAR 0 6
26527: PPUSH
26528: CALL_OW 265
26532: PUSH
26533: LD_INT 25
26535: EQUAL
26536: IFFALSE 26557
// points := [ 80 , 65 , 100 ] ;
26538: LD_ADDR_VAR 0 9
26542: PUSH
26543: LD_INT 80
26545: PUSH
26546: LD_INT 65
26548: PUSH
26549: LD_INT 100
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 263
26566: PUSH
26567: LD_INT 1
26569: EQUAL
26570: IFFALSE 26605
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26572: LD_ADDR_VAR 0 10
26576: PUSH
26577: LD_VAR 0 10
26581: PUSH
26582: LD_VAR 0 6
26586: PPUSH
26587: CALL_OW 311
26591: PPUSH
26592: LD_INT 3
26594: PPUSH
26595: CALL_OW 259
26599: PUSH
26600: LD_INT 4
26602: MUL
26603: MUL
26604: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26605: LD_VAR 0 6
26609: PPUSH
26610: CALL_OW 263
26614: PUSH
26615: LD_INT 2
26617: EQUAL
26618: IFFALSE 26669
// begin j := IsControledBy ( i ) ;
26620: LD_ADDR_VAR 0 7
26624: PUSH
26625: LD_VAR 0 6
26629: PPUSH
26630: CALL_OW 312
26634: ST_TO_ADDR
// if j then
26635: LD_VAR 0 7
26639: IFFALSE 26669
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26641: LD_ADDR_VAR 0 10
26645: PUSH
26646: LD_VAR 0 10
26650: PUSH
26651: LD_VAR 0 7
26655: PPUSH
26656: LD_INT 3
26658: PPUSH
26659: CALL_OW 259
26663: PUSH
26664: LD_INT 3
26666: MUL
26667: MUL
26668: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26669: LD_VAR 0 6
26673: PPUSH
26674: CALL_OW 264
26678: PUSH
26679: LD_INT 5
26681: PUSH
26682: LD_INT 6
26684: PUSH
26685: LD_INT 46
26687: PUSH
26688: LD_INT 44
26690: PUSH
26691: LD_INT 47
26693: PUSH
26694: LD_INT 45
26696: PUSH
26697: LD_INT 28
26699: PUSH
26700: LD_INT 7
26702: PUSH
26703: LD_INT 27
26705: PUSH
26706: LD_INT 29
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: IN
26721: PUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: LD_INT 52
26729: PPUSH
26730: CALL_OW 321
26734: PUSH
26735: LD_INT 2
26737: EQUAL
26738: AND
26739: IFFALSE 26756
// bpoints := bpoints * 1.2 ;
26741: LD_ADDR_VAR 0 10
26745: PUSH
26746: LD_VAR 0 10
26750: PUSH
26751: LD_REAL  1.20000000000000E+0000
26754: MUL
26755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26756: LD_VAR 0 6
26760: PPUSH
26761: CALL_OW 264
26765: PUSH
26766: LD_INT 6
26768: PUSH
26769: LD_INT 46
26771: PUSH
26772: LD_INT 47
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: IN
26780: IFFALSE 26797
// bpoints := bpoints * 1.2 ;
26782: LD_ADDR_VAR 0 10
26786: PUSH
26787: LD_VAR 0 10
26791: PUSH
26792: LD_REAL  1.20000000000000E+0000
26795: MUL
26796: ST_TO_ADDR
// end ; unit_building :
26797: GO 26811
26799: LD_INT 3
26801: DOUBLE
26802: EQUAL
26803: IFTRUE 26807
26805: GO 26810
26807: POP
// ; end ;
26808: GO 26811
26810: POP
// for j = 1 to 3 do
26811: LD_ADDR_VAR 0 7
26815: PUSH
26816: DOUBLE
26817: LD_INT 1
26819: DEC
26820: ST_TO_ADDR
26821: LD_INT 3
26823: PUSH
26824: FOR_TO
26825: IFFALSE 26878
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26827: LD_ADDR_VAR 0 5
26831: PUSH
26832: LD_VAR 0 5
26836: PPUSH
26837: LD_VAR 0 7
26841: PPUSH
26842: LD_VAR 0 5
26846: PUSH
26847: LD_VAR 0 7
26851: ARRAY
26852: PUSH
26853: LD_VAR 0 9
26857: PUSH
26858: LD_VAR 0 7
26862: ARRAY
26863: PUSH
26864: LD_VAR 0 10
26868: MUL
26869: PLUS
26870: PPUSH
26871: CALL_OW 1
26875: ST_TO_ADDR
26876: GO 26824
26878: POP
26879: POP
// end ;
26880: GO 25363
26882: POP
26883: POP
// result := Replace ( result , 4 , tmp ) ;
26884: LD_ADDR_VAR 0 5
26888: PUSH
26889: LD_VAR 0 5
26893: PPUSH
26894: LD_INT 4
26896: PPUSH
26897: LD_VAR 0 8
26901: PPUSH
26902: CALL_OW 1
26906: ST_TO_ADDR
// end ;
26907: LD_VAR 0 5
26911: RET
// export function DangerAtRange ( unit , range ) ; begin
26912: LD_INT 0
26914: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 255
26929: PPUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 250
26939: PPUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: CALL_OW 251
26949: PPUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: CALL 25215 0 4
26959: ST_TO_ADDR
// end ;
26960: LD_VAR 0 3
26964: RET
// export function DangerInArea ( side , area ) ; begin
26965: LD_INT 0
26967: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26968: LD_ADDR_VAR 0 3
26972: PUSH
26973: LD_VAR 0 2
26977: PPUSH
26978: LD_INT 81
26980: PUSH
26981: LD_VAR 0 1
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PPUSH
26990: CALL_OW 70
26994: ST_TO_ADDR
// end ;
26995: LD_VAR 0 3
26999: RET
// export function IsExtension ( b ) ; begin
27000: LD_INT 0
27002: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27003: LD_ADDR_VAR 0 2
27007: PUSH
27008: LD_VAR 0 1
27012: PUSH
27013: LD_INT 23
27015: PUSH
27016: LD_INT 20
27018: PUSH
27019: LD_INT 22
27021: PUSH
27022: LD_INT 17
27024: PUSH
27025: LD_INT 24
27027: PUSH
27028: LD_INT 21
27030: PUSH
27031: LD_INT 19
27033: PUSH
27034: LD_INT 16
27036: PUSH
27037: LD_INT 25
27039: PUSH
27040: LD_INT 18
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: IN
27055: ST_TO_ADDR
// end ;
27056: LD_VAR 0 2
27060: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27061: LD_INT 0
27063: PPUSH
27064: PPUSH
27065: PPUSH
// result := [ ] ;
27066: LD_ADDR_VAR 0 4
27070: PUSH
27071: EMPTY
27072: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27073: LD_ADDR_VAR 0 5
27077: PUSH
27078: LD_VAR 0 2
27082: PPUSH
27083: LD_INT 21
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PPUSH
27093: CALL_OW 70
27097: ST_TO_ADDR
// if not tmp then
27098: LD_VAR 0 5
27102: NOT
27103: IFFALSE 27107
// exit ;
27105: GO 27171
// if checkLink then
27107: LD_VAR 0 3
27111: IFFALSE 27161
// begin for i in tmp do
27113: LD_ADDR_VAR 0 6
27117: PUSH
27118: LD_VAR 0 5
27122: PUSH
27123: FOR_IN
27124: IFFALSE 27159
// if GetBase ( i ) <> base then
27126: LD_VAR 0 6
27130: PPUSH
27131: CALL_OW 274
27135: PUSH
27136: LD_VAR 0 1
27140: NONEQUAL
27141: IFFALSE 27157
// ComLinkToBase ( base , i ) ;
27143: LD_VAR 0 1
27147: PPUSH
27148: LD_VAR 0 6
27152: PPUSH
27153: CALL_OW 169
27157: GO 27123
27159: POP
27160: POP
// end ; result := tmp ;
27161: LD_ADDR_VAR 0 4
27165: PUSH
27166: LD_VAR 0 5
27170: ST_TO_ADDR
// end ;
27171: LD_VAR 0 4
27175: RET
// export function ComComplete ( units , b ) ; var i ; begin
27176: LD_INT 0
27178: PPUSH
27179: PPUSH
// if not units then
27180: LD_VAR 0 1
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27279
// for i in units do
27189: LD_ADDR_VAR 0 4
27193: PUSH
27194: LD_VAR 0 1
27198: PUSH
27199: FOR_IN
27200: IFFALSE 27277
// if BuildingStatus ( b ) = bs_build then
27202: LD_VAR 0 2
27206: PPUSH
27207: CALL_OW 461
27211: PUSH
27212: LD_INT 1
27214: EQUAL
27215: IFFALSE 27275
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27217: LD_VAR 0 4
27221: PPUSH
27222: LD_STRING h
27224: PUSH
27225: LD_VAR 0 2
27229: PPUSH
27230: CALL_OW 250
27234: PUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 251
27244: PUSH
27245: LD_VAR 0 2
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: PPUSH
27271: CALL_OW 446
27275: GO 27199
27277: POP
27278: POP
// end ;
27279: LD_VAR 0 3
27283: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27284: LD_INT 0
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27292: LD_VAR 0 1
27296: NOT
27297: PUSH
27298: LD_VAR 0 1
27302: PPUSH
27303: CALL_OW 263
27307: PUSH
27308: LD_INT 2
27310: EQUAL
27311: NOT
27312: OR
27313: IFFALSE 27317
// exit ;
27315: GO 27633
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27317: LD_ADDR_VAR 0 6
27321: PUSH
27322: LD_INT 22
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 255
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 30
27344: PUSH
27345: LD_INT 36
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 34
27354: PUSH
27355: LD_INT 31
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PPUSH
27371: CALL_OW 69
27375: ST_TO_ADDR
// if not tmp then
27376: LD_VAR 0 6
27380: NOT
27381: IFFALSE 27385
// exit ;
27383: GO 27633
// result := [ ] ;
27385: LD_ADDR_VAR 0 2
27389: PUSH
27390: EMPTY
27391: ST_TO_ADDR
// for i in tmp do
27392: LD_ADDR_VAR 0 3
27396: PUSH
27397: LD_VAR 0 6
27401: PUSH
27402: FOR_IN
27403: IFFALSE 27474
// begin t := UnitsInside ( i ) ;
27405: LD_ADDR_VAR 0 4
27409: PUSH
27410: LD_VAR 0 3
27414: PPUSH
27415: CALL_OW 313
27419: ST_TO_ADDR
// if t then
27420: LD_VAR 0 4
27424: IFFALSE 27472
// for j in t do
27426: LD_ADDR_VAR 0 7
27430: PUSH
27431: LD_VAR 0 4
27435: PUSH
27436: FOR_IN
27437: IFFALSE 27470
// result := Insert ( result , result + 1 , j ) ;
27439: LD_ADDR_VAR 0 2
27443: PUSH
27444: LD_VAR 0 2
27448: PPUSH
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: PLUS
27457: PPUSH
27458: LD_VAR 0 7
27462: PPUSH
27463: CALL_OW 2
27467: ST_TO_ADDR
27468: GO 27436
27470: POP
27471: POP
// end ;
27472: GO 27402
27474: POP
27475: POP
// if not result then
27476: LD_VAR 0 2
27480: NOT
27481: IFFALSE 27485
// exit ;
27483: GO 27633
// mech := result [ 1 ] ;
27485: LD_ADDR_VAR 0 5
27489: PUSH
27490: LD_VAR 0 2
27494: PUSH
27495: LD_INT 1
27497: ARRAY
27498: ST_TO_ADDR
// if result > 1 then
27499: LD_VAR 0 2
27503: PUSH
27504: LD_INT 1
27506: GREATER
27507: IFFALSE 27619
// for i = 2 to result do
27509: LD_ADDR_VAR 0 3
27513: PUSH
27514: DOUBLE
27515: LD_INT 2
27517: DEC
27518: ST_TO_ADDR
27519: LD_VAR 0 2
27523: PUSH
27524: FOR_TO
27525: IFFALSE 27617
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27527: LD_ADDR_VAR 0 4
27531: PUSH
27532: LD_VAR 0 2
27536: PUSH
27537: LD_VAR 0 3
27541: ARRAY
27542: PPUSH
27543: LD_INT 3
27545: PPUSH
27546: CALL_OW 259
27550: PUSH
27551: LD_VAR 0 2
27555: PUSH
27556: LD_VAR 0 3
27560: ARRAY
27561: PPUSH
27562: CALL_OW 432
27566: MINUS
27567: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27568: LD_VAR 0 4
27572: PUSH
27573: LD_VAR 0 5
27577: PPUSH
27578: LD_INT 3
27580: PPUSH
27581: CALL_OW 259
27585: PUSH
27586: LD_VAR 0 5
27590: PPUSH
27591: CALL_OW 432
27595: MINUS
27596: GREATEREQUAL
27597: IFFALSE 27615
// mech := result [ i ] ;
27599: LD_ADDR_VAR 0 5
27603: PUSH
27604: LD_VAR 0 2
27608: PUSH
27609: LD_VAR 0 3
27613: ARRAY
27614: ST_TO_ADDR
// end ;
27615: GO 27524
27617: POP
27618: POP
// ComLinkTo ( vehicle , mech ) ;
27619: LD_VAR 0 1
27623: PPUSH
27624: LD_VAR 0 5
27628: PPUSH
27629: CALL_OW 135
// end ;
27633: LD_VAR 0 2
27637: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
// result := [ ] ;
27653: LD_ADDR_VAR 0 7
27657: PUSH
27658: EMPTY
27659: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 266
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: IN
27680: NOT
27681: IFFALSE 27685
// exit ;
27683: GO 29319
// if name then
27685: LD_VAR 0 3
27689: IFFALSE 27705
// SetBName ( base_dep , name ) ;
27691: LD_VAR 0 1
27695: PPUSH
27696: LD_VAR 0 3
27700: PPUSH
27701: CALL_OW 500
// base := GetBase ( base_dep ) ;
27705: LD_ADDR_VAR 0 15
27709: PUSH
27710: LD_VAR 0 1
27714: PPUSH
27715: CALL_OW 274
27719: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27720: LD_ADDR_VAR 0 16
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 255
27734: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27735: LD_ADDR_VAR 0 17
27739: PUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: CALL_OW 248
27749: ST_TO_ADDR
// if sources then
27750: LD_VAR 0 5
27754: IFFALSE 27801
// for i = 1 to 3 do
27756: LD_ADDR_VAR 0 8
27760: PUSH
27761: DOUBLE
27762: LD_INT 1
27764: DEC
27765: ST_TO_ADDR
27766: LD_INT 3
27768: PUSH
27769: FOR_TO
27770: IFFALSE 27799
// AddResourceType ( base , i , sources [ i ] ) ;
27772: LD_VAR 0 15
27776: PPUSH
27777: LD_VAR 0 8
27781: PPUSH
27782: LD_VAR 0 5
27786: PUSH
27787: LD_VAR 0 8
27791: ARRAY
27792: PPUSH
27793: CALL_OW 276
27797: GO 27769
27799: POP
27800: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27801: LD_ADDR_VAR 0 18
27805: PUSH
27806: LD_VAR 0 15
27810: PPUSH
27811: LD_VAR 0 2
27815: PPUSH
27816: LD_INT 1
27818: PPUSH
27819: CALL 27061 0 3
27823: ST_TO_ADDR
// InitHc ;
27824: CALL_OW 19
// InitUc ;
27828: CALL_OW 18
// uc_side := side ;
27832: LD_ADDR_OWVAR 20
27836: PUSH
27837: LD_VAR 0 16
27841: ST_TO_ADDR
// uc_nation := nation ;
27842: LD_ADDR_OWVAR 21
27846: PUSH
27847: LD_VAR 0 17
27851: ST_TO_ADDR
// if buildings then
27852: LD_VAR 0 18
27856: IFFALSE 29178
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27858: LD_ADDR_VAR 0 19
27862: PUSH
27863: LD_VAR 0 18
27867: PPUSH
27868: LD_INT 2
27870: PUSH
27871: LD_INT 30
27873: PUSH
27874: LD_INT 29
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 30
27883: PUSH
27884: LD_INT 30
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: PPUSH
27896: CALL_OW 72
27900: ST_TO_ADDR
// if tmp then
27901: LD_VAR 0 19
27905: IFFALSE 27953
// for i in tmp do
27907: LD_ADDR_VAR 0 8
27911: PUSH
27912: LD_VAR 0 19
27916: PUSH
27917: FOR_IN
27918: IFFALSE 27951
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27920: LD_VAR 0 8
27924: PPUSH
27925: CALL_OW 250
27929: PPUSH
27930: LD_VAR 0 8
27934: PPUSH
27935: CALL_OW 251
27939: PPUSH
27940: LD_VAR 0 16
27944: PPUSH
27945: CALL_OW 441
27949: GO 27917
27951: POP
27952: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27953: LD_VAR 0 18
27957: PPUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 30
27963: PUSH
27964: LD_INT 32
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 30
27973: PUSH
27974: LD_INT 33
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: PPUSH
27986: CALL_OW 72
27990: IFFALSE 28078
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27992: LD_ADDR_VAR 0 8
27996: PUSH
27997: LD_VAR 0 18
28001: PPUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 32
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: LD_INT 33
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: PPUSH
28030: CALL_OW 72
28034: PUSH
28035: FOR_IN
28036: IFFALSE 28076
// begin if not GetBWeapon ( i ) then
28038: LD_VAR 0 8
28042: PPUSH
28043: CALL_OW 269
28047: NOT
28048: IFFALSE 28074
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28050: LD_VAR 0 8
28054: PPUSH
28055: LD_VAR 0 8
28059: PPUSH
28060: LD_VAR 0 2
28064: PPUSH
28065: CALL 29324 0 2
28069: PPUSH
28070: CALL_OW 431
// end ;
28074: GO 28035
28076: POP
28077: POP
// end ; for i = 1 to personel do
28078: LD_ADDR_VAR 0 8
28082: PUSH
28083: DOUBLE
28084: LD_INT 1
28086: DEC
28087: ST_TO_ADDR
28088: LD_VAR 0 6
28092: PUSH
28093: FOR_TO
28094: IFFALSE 29158
// begin if i > 4 then
28096: LD_VAR 0 8
28100: PUSH
28101: LD_INT 4
28103: GREATER
28104: IFFALSE 28108
// break ;
28106: GO 29158
// case i of 1 :
28108: LD_VAR 0 8
28112: PUSH
28113: LD_INT 1
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28121
28119: GO 28201
28121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28122: LD_ADDR_VAR 0 12
28126: PUSH
28127: LD_VAR 0 18
28131: PPUSH
28132: LD_INT 22
28134: PUSH
28135: LD_VAR 0 16
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 58
28146: PUSH
28147: EMPTY
28148: LIST
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: LD_INT 30
28155: PUSH
28156: LD_INT 32
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 30
28165: PUSH
28166: LD_INT 4
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 30
28175: PUSH
28176: LD_INT 5
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: PPUSH
28194: CALL_OW 72
28198: ST_TO_ADDR
28199: GO 28423
28201: LD_INT 2
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28271
28209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28210: LD_ADDR_VAR 0 12
28214: PUSH
28215: LD_VAR 0 18
28219: PPUSH
28220: LD_INT 22
28222: PUSH
28223: LD_VAR 0 16
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 30
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 30
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PPUSH
28264: CALL_OW 72
28268: ST_TO_ADDR
28269: GO 28423
28271: LD_INT 3
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28341
28279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28280: LD_ADDR_VAR 0 12
28284: PUSH
28285: LD_VAR 0 18
28289: PPUSH
28290: LD_INT 22
28292: PUSH
28293: LD_VAR 0 16
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 30
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 30
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 72
28338: ST_TO_ADDR
28339: GO 28423
28341: LD_INT 4
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28422
28349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28350: LD_ADDR_VAR 0 12
28354: PUSH
28355: LD_VAR 0 18
28359: PPUSH
28360: LD_INT 22
28362: PUSH
28363: LD_VAR 0 16
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: LD_INT 30
28377: PUSH
28378: LD_INT 6
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 30
28387: PUSH
28388: LD_INT 7
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 30
28397: PUSH
28398: LD_INT 8
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PPUSH
28415: CALL_OW 72
28419: ST_TO_ADDR
28420: GO 28423
28422: POP
// if i = 1 then
28423: LD_VAR 0 8
28427: PUSH
28428: LD_INT 1
28430: EQUAL
28431: IFFALSE 28542
// begin tmp := [ ] ;
28433: LD_ADDR_VAR 0 19
28437: PUSH
28438: EMPTY
28439: ST_TO_ADDR
// for j in f do
28440: LD_ADDR_VAR 0 9
28444: PUSH
28445: LD_VAR 0 12
28449: PUSH
28450: FOR_IN
28451: IFFALSE 28524
// if GetBType ( j ) = b_bunker then
28453: LD_VAR 0 9
28457: PPUSH
28458: CALL_OW 266
28462: PUSH
28463: LD_INT 32
28465: EQUAL
28466: IFFALSE 28493
// tmp := Insert ( tmp , 1 , j ) else
28468: LD_ADDR_VAR 0 19
28472: PUSH
28473: LD_VAR 0 19
28477: PPUSH
28478: LD_INT 1
28480: PPUSH
28481: LD_VAR 0 9
28485: PPUSH
28486: CALL_OW 2
28490: ST_TO_ADDR
28491: GO 28522
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28493: LD_ADDR_VAR 0 19
28497: PUSH
28498: LD_VAR 0 19
28502: PPUSH
28503: LD_VAR 0 19
28507: PUSH
28508: LD_INT 1
28510: PLUS
28511: PPUSH
28512: LD_VAR 0 9
28516: PPUSH
28517: CALL_OW 2
28521: ST_TO_ADDR
28522: GO 28450
28524: POP
28525: POP
// if tmp then
28526: LD_VAR 0 19
28530: IFFALSE 28542
// f := tmp ;
28532: LD_ADDR_VAR 0 12
28536: PUSH
28537: LD_VAR 0 19
28541: ST_TO_ADDR
// end ; x := personel [ i ] ;
28542: LD_ADDR_VAR 0 13
28546: PUSH
28547: LD_VAR 0 6
28551: PUSH
28552: LD_VAR 0 8
28556: ARRAY
28557: ST_TO_ADDR
// if x = - 1 then
28558: LD_VAR 0 13
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: EQUAL
28567: IFFALSE 28776
// begin for j in f do
28569: LD_ADDR_VAR 0 9
28573: PUSH
28574: LD_VAR 0 12
28578: PUSH
28579: FOR_IN
28580: IFFALSE 28772
// repeat InitHc ;
28582: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28586: LD_VAR 0 9
28590: PPUSH
28591: CALL_OW 266
28595: PUSH
28596: LD_INT 5
28598: EQUAL
28599: IFFALSE 28669
// begin if UnitsInside ( j ) < 3 then
28601: LD_VAR 0 9
28605: PPUSH
28606: CALL_OW 313
28610: PUSH
28611: LD_INT 3
28613: LESS
28614: IFFALSE 28650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28616: LD_INT 0
28618: PPUSH
28619: LD_INT 5
28621: PUSH
28622: LD_INT 8
28624: PUSH
28625: LD_INT 9
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: PUSH
28633: LD_VAR 0 17
28637: ARRAY
28638: PPUSH
28639: LD_VAR 0 4
28643: PPUSH
28644: CALL_OW 380
28648: GO 28667
// PrepareHuman ( false , i , skill ) ;
28650: LD_INT 0
28652: PPUSH
28653: LD_VAR 0 8
28657: PPUSH
28658: LD_VAR 0 4
28662: PPUSH
28663: CALL_OW 380
// end else
28667: GO 28686
// PrepareHuman ( false , i , skill ) ;
28669: LD_INT 0
28671: PPUSH
28672: LD_VAR 0 8
28676: PPUSH
28677: LD_VAR 0 4
28681: PPUSH
28682: CALL_OW 380
// un := CreateHuman ;
28686: LD_ADDR_VAR 0 14
28690: PUSH
28691: CALL_OW 44
28695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28696: LD_ADDR_VAR 0 7
28700: PUSH
28701: LD_VAR 0 7
28705: PPUSH
28706: LD_INT 1
28708: PPUSH
28709: LD_VAR 0 14
28713: PPUSH
28714: CALL_OW 2
28718: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28719: LD_VAR 0 14
28723: PPUSH
28724: LD_VAR 0 9
28728: PPUSH
28729: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28733: LD_VAR 0 9
28737: PPUSH
28738: CALL_OW 313
28742: PUSH
28743: LD_INT 6
28745: EQUAL
28746: PUSH
28747: LD_VAR 0 9
28751: PPUSH
28752: CALL_OW 266
28756: PUSH
28757: LD_INT 32
28759: PUSH
28760: LD_INT 31
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: IN
28767: OR
28768: IFFALSE 28582
28770: GO 28579
28772: POP
28773: POP
// end else
28774: GO 29156
// for j = 1 to x do
28776: LD_ADDR_VAR 0 9
28780: PUSH
28781: DOUBLE
28782: LD_INT 1
28784: DEC
28785: ST_TO_ADDR
28786: LD_VAR 0 13
28790: PUSH
28791: FOR_TO
28792: IFFALSE 29154
// begin InitHc ;
28794: CALL_OW 19
// if not f then
28798: LD_VAR 0 12
28802: NOT
28803: IFFALSE 28892
// begin PrepareHuman ( false , i , skill ) ;
28805: LD_INT 0
28807: PPUSH
28808: LD_VAR 0 8
28812: PPUSH
28813: LD_VAR 0 4
28817: PPUSH
28818: CALL_OW 380
// un := CreateHuman ;
28822: LD_ADDR_VAR 0 14
28826: PUSH
28827: CALL_OW 44
28831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28832: LD_ADDR_VAR 0 7
28836: PUSH
28837: LD_VAR 0 7
28841: PPUSH
28842: LD_INT 1
28844: PPUSH
28845: LD_VAR 0 14
28849: PPUSH
28850: CALL_OW 2
28854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28855: LD_VAR 0 14
28859: PPUSH
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 250
28869: PPUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 251
28879: PPUSH
28880: LD_INT 10
28882: PPUSH
28883: LD_INT 0
28885: PPUSH
28886: CALL_OW 50
// continue ;
28890: GO 28791
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28892: LD_VAR 0 12
28896: PUSH
28897: LD_INT 1
28899: ARRAY
28900: PPUSH
28901: CALL_OW 313
28905: PUSH
28906: LD_VAR 0 12
28910: PUSH
28911: LD_INT 1
28913: ARRAY
28914: PPUSH
28915: CALL_OW 266
28919: PUSH
28920: LD_INT 32
28922: PUSH
28923: LD_INT 31
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: IN
28930: AND
28931: PUSH
28932: LD_VAR 0 12
28936: PUSH
28937: LD_INT 1
28939: ARRAY
28940: PPUSH
28941: CALL_OW 313
28945: PUSH
28946: LD_INT 6
28948: EQUAL
28949: OR
28950: IFFALSE 28970
// f := Delete ( f , 1 ) ;
28952: LD_ADDR_VAR 0 12
28956: PUSH
28957: LD_VAR 0 12
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 3
28969: ST_TO_ADDR
// if not f then
28970: LD_VAR 0 12
28974: NOT
28975: IFFALSE 28993
// begin x := x + 2 ;
28977: LD_ADDR_VAR 0 13
28981: PUSH
28982: LD_VAR 0 13
28986: PUSH
28987: LD_INT 2
28989: PLUS
28990: ST_TO_ADDR
// continue ;
28991: GO 28791
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28993: LD_VAR 0 12
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: PPUSH
29002: CALL_OW 266
29006: PUSH
29007: LD_INT 5
29009: EQUAL
29010: IFFALSE 29084
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29012: LD_VAR 0 12
29016: PUSH
29017: LD_INT 1
29019: ARRAY
29020: PPUSH
29021: CALL_OW 313
29025: PUSH
29026: LD_INT 3
29028: LESS
29029: IFFALSE 29065
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29031: LD_INT 0
29033: PPUSH
29034: LD_INT 5
29036: PUSH
29037: LD_INT 8
29039: PUSH
29040: LD_INT 9
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: PUSH
29048: LD_VAR 0 17
29052: ARRAY
29053: PPUSH
29054: LD_VAR 0 4
29058: PPUSH
29059: CALL_OW 380
29063: GO 29082
// PrepareHuman ( false , i , skill ) ;
29065: LD_INT 0
29067: PPUSH
29068: LD_VAR 0 8
29072: PPUSH
29073: LD_VAR 0 4
29077: PPUSH
29078: CALL_OW 380
// end else
29082: GO 29101
// PrepareHuman ( false , i , skill ) ;
29084: LD_INT 0
29086: PPUSH
29087: LD_VAR 0 8
29091: PPUSH
29092: LD_VAR 0 4
29096: PPUSH
29097: CALL_OW 380
// un := CreateHuman ;
29101: LD_ADDR_VAR 0 14
29105: PUSH
29106: CALL_OW 44
29110: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29111: LD_ADDR_VAR 0 7
29115: PUSH
29116: LD_VAR 0 7
29120: PPUSH
29121: LD_INT 1
29123: PPUSH
29124: LD_VAR 0 14
29128: PPUSH
29129: CALL_OW 2
29133: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29134: LD_VAR 0 14
29138: PPUSH
29139: LD_VAR 0 12
29143: PUSH
29144: LD_INT 1
29146: ARRAY
29147: PPUSH
29148: CALL_OW 52
// end ;
29152: GO 28791
29154: POP
29155: POP
// end ;
29156: GO 28093
29158: POP
29159: POP
// result := result ^ buildings ;
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: LD_VAR 0 7
29169: PUSH
29170: LD_VAR 0 18
29174: ADD
29175: ST_TO_ADDR
// end else
29176: GO 29319
// begin for i = 1 to personel do
29178: LD_ADDR_VAR 0 8
29182: PUSH
29183: DOUBLE
29184: LD_INT 1
29186: DEC
29187: ST_TO_ADDR
29188: LD_VAR 0 6
29192: PUSH
29193: FOR_TO
29194: IFFALSE 29317
// begin if i > 4 then
29196: LD_VAR 0 8
29200: PUSH
29201: LD_INT 4
29203: GREATER
29204: IFFALSE 29208
// break ;
29206: GO 29317
// x := personel [ i ] ;
29208: LD_ADDR_VAR 0 13
29212: PUSH
29213: LD_VAR 0 6
29217: PUSH
29218: LD_VAR 0 8
29222: ARRAY
29223: ST_TO_ADDR
// if x = - 1 then
29224: LD_VAR 0 13
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: EQUAL
29233: IFFALSE 29237
// continue ;
29235: GO 29193
// PrepareHuman ( false , i , skill ) ;
29237: LD_INT 0
29239: PPUSH
29240: LD_VAR 0 8
29244: PPUSH
29245: LD_VAR 0 4
29249: PPUSH
29250: CALL_OW 380
// un := CreateHuman ;
29254: LD_ADDR_VAR 0 14
29258: PUSH
29259: CALL_OW 44
29263: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29264: LD_VAR 0 14
29268: PPUSH
29269: LD_VAR 0 1
29273: PPUSH
29274: CALL_OW 250
29278: PPUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 251
29288: PPUSH
29289: LD_INT 10
29291: PPUSH
29292: LD_INT 0
29294: PPUSH
29295: CALL_OW 50
// result := result ^ un ;
29299: LD_ADDR_VAR 0 7
29303: PUSH
29304: LD_VAR 0 7
29308: PUSH
29309: LD_VAR 0 14
29313: ADD
29314: ST_TO_ADDR
// end ;
29315: GO 29193
29317: POP
29318: POP
// end ; end ;
29319: LD_VAR 0 7
29323: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29324: LD_INT 0
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
// result := false ;
29342: LD_ADDR_VAR 0 3
29346: PUSH
29347: LD_INT 0
29349: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29350: LD_VAR 0 1
29354: NOT
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 266
29365: PUSH
29366: LD_INT 32
29368: PUSH
29369: LD_INT 33
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: IN
29376: NOT
29377: OR
29378: IFFALSE 29382
// exit ;
29380: GO 30521
// nat := GetNation ( tower ) ;
29382: LD_ADDR_VAR 0 12
29386: PUSH
29387: LD_VAR 0 1
29391: PPUSH
29392: CALL_OW 248
29396: ST_TO_ADDR
// side := GetSide ( tower ) ;
29397: LD_ADDR_VAR 0 16
29401: PUSH
29402: LD_VAR 0 1
29406: PPUSH
29407: CALL_OW 255
29411: ST_TO_ADDR
// x := GetX ( tower ) ;
29412: LD_ADDR_VAR 0 10
29416: PUSH
29417: LD_VAR 0 1
29421: PPUSH
29422: CALL_OW 250
29426: ST_TO_ADDR
// y := GetY ( tower ) ;
29427: LD_ADDR_VAR 0 11
29431: PUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: CALL_OW 251
29441: ST_TO_ADDR
// if not x or not y then
29442: LD_VAR 0 10
29446: NOT
29447: PUSH
29448: LD_VAR 0 11
29452: NOT
29453: OR
29454: IFFALSE 29458
// exit ;
29456: GO 30521
// weapon := 0 ;
29458: LD_ADDR_VAR 0 18
29462: PUSH
29463: LD_INT 0
29465: ST_TO_ADDR
// fac_list := [ ] ;
29466: LD_ADDR_VAR 0 17
29470: PUSH
29471: EMPTY
29472: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29473: LD_ADDR_VAR 0 6
29477: PUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL_OW 274
29487: PPUSH
29488: LD_VAR 0 2
29492: PPUSH
29493: LD_INT 0
29495: PPUSH
29496: CALL 27061 0 3
29500: PPUSH
29501: LD_INT 30
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PPUSH
29511: CALL_OW 72
29515: ST_TO_ADDR
// if not factories then
29516: LD_VAR 0 6
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 30521
// for i in factories do
29525: LD_ADDR_VAR 0 8
29529: PUSH
29530: LD_VAR 0 6
29534: PUSH
29535: FOR_IN
29536: IFFALSE 29561
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29538: LD_ADDR_VAR 0 17
29542: PUSH
29543: LD_VAR 0 17
29547: PUSH
29548: LD_VAR 0 8
29552: PPUSH
29553: CALL_OW 478
29557: UNION
29558: ST_TO_ADDR
29559: GO 29535
29561: POP
29562: POP
// if not fac_list then
29563: LD_VAR 0 17
29567: NOT
29568: IFFALSE 29572
// exit ;
29570: GO 30521
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29572: LD_ADDR_VAR 0 5
29576: PUSH
29577: LD_INT 4
29579: PUSH
29580: LD_INT 5
29582: PUSH
29583: LD_INT 9
29585: PUSH
29586: LD_INT 10
29588: PUSH
29589: LD_INT 6
29591: PUSH
29592: LD_INT 7
29594: PUSH
29595: LD_INT 11
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 27
29609: PUSH
29610: LD_INT 28
29612: PUSH
29613: LD_INT 26
29615: PUSH
29616: LD_INT 30
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 43
29627: PUSH
29628: LD_INT 44
29630: PUSH
29631: LD_INT 46
29633: PUSH
29634: LD_INT 45
29636: PUSH
29637: LD_INT 47
29639: PUSH
29640: LD_INT 49
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: PUSH
29656: LD_VAR 0 12
29660: ARRAY
29661: ST_TO_ADDR
// for i in list do
29662: LD_ADDR_VAR 0 8
29666: PUSH
29667: LD_VAR 0 5
29671: PUSH
29672: FOR_IN
29673: IFFALSE 29706
// if not i in fac_list then
29675: LD_VAR 0 8
29679: PUSH
29680: LD_VAR 0 17
29684: IN
29685: NOT
29686: IFFALSE 29704
// list := list diff i ;
29688: LD_ADDR_VAR 0 5
29692: PUSH
29693: LD_VAR 0 5
29697: PUSH
29698: LD_VAR 0 8
29702: DIFF
29703: ST_TO_ADDR
29704: GO 29672
29706: POP
29707: POP
// if not list then
29708: LD_VAR 0 5
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 30521
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29717: LD_VAR 0 12
29721: PUSH
29722: LD_INT 3
29724: EQUAL
29725: PUSH
29726: LD_INT 49
29728: PUSH
29729: LD_VAR 0 5
29733: IN
29734: AND
29735: PUSH
29736: LD_INT 31
29738: PPUSH
29739: LD_VAR 0 16
29743: PPUSH
29744: CALL_OW 321
29748: PUSH
29749: LD_INT 2
29751: EQUAL
29752: AND
29753: IFFALSE 29813
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29755: LD_INT 22
29757: PUSH
29758: LD_VAR 0 16
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 35
29769: PUSH
29770: LD_INT 49
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 91
29779: PUSH
29780: LD_VAR 0 1
29784: PUSH
29785: LD_INT 10
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: PPUSH
29798: CALL_OW 69
29802: NOT
29803: IFFALSE 29813
// weapon := ru_time_lapser ;
29805: LD_ADDR_VAR 0 18
29809: PUSH
29810: LD_INT 49
29812: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29813: LD_VAR 0 12
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: IN
29828: PUSH
29829: LD_INT 11
29831: PUSH
29832: LD_VAR 0 5
29836: IN
29837: PUSH
29838: LD_INT 30
29840: PUSH
29841: LD_VAR 0 5
29845: IN
29846: OR
29847: AND
29848: PUSH
29849: LD_INT 6
29851: PPUSH
29852: LD_VAR 0 16
29856: PPUSH
29857: CALL_OW 321
29861: PUSH
29862: LD_INT 2
29864: EQUAL
29865: AND
29866: IFFALSE 30031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29868: LD_INT 22
29870: PUSH
29871: LD_VAR 0 16
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 35
29885: PUSH
29886: LD_INT 11
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 35
29895: PUSH
29896: LD_INT 30
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 91
29910: PUSH
29911: LD_VAR 0 1
29915: PUSH
29916: LD_INT 18
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: NOT
29934: PUSH
29935: LD_INT 22
29937: PUSH
29938: LD_VAR 0 16
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 30
29952: PUSH
29953: LD_INT 32
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 30
29962: PUSH
29963: LD_INT 33
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 91
29977: PUSH
29978: LD_VAR 0 1
29982: PUSH
29983: LD_INT 12
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: PUSH
29996: EMPTY
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: PUSH
30004: LD_INT 2
30006: GREATER
30007: AND
30008: IFFALSE 30031
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30010: LD_ADDR_VAR 0 18
30014: PUSH
30015: LD_INT 11
30017: PUSH
30018: LD_INT 30
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_VAR 0 12
30029: ARRAY
30030: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30031: LD_VAR 0 18
30035: NOT
30036: PUSH
30037: LD_INT 40
30039: PPUSH
30040: LD_VAR 0 16
30044: PPUSH
30045: CALL_OW 321
30049: PUSH
30050: LD_INT 2
30052: EQUAL
30053: AND
30054: PUSH
30055: LD_INT 7
30057: PUSH
30058: LD_VAR 0 5
30062: IN
30063: PUSH
30064: LD_INT 28
30066: PUSH
30067: LD_VAR 0 5
30071: IN
30072: OR
30073: PUSH
30074: LD_INT 45
30076: PUSH
30077: LD_VAR 0 5
30081: IN
30082: OR
30083: AND
30084: IFFALSE 30338
// begin hex := GetHexInfo ( x , y ) ;
30086: LD_ADDR_VAR 0 4
30090: PUSH
30091: LD_VAR 0 10
30095: PPUSH
30096: LD_VAR 0 11
30100: PPUSH
30101: CALL_OW 546
30105: ST_TO_ADDR
// if hex [ 1 ] then
30106: LD_VAR 0 4
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: IFFALSE 30118
// exit ;
30116: GO 30521
// height := hex [ 2 ] ;
30118: LD_ADDR_VAR 0 15
30122: PUSH
30123: LD_VAR 0 4
30127: PUSH
30128: LD_INT 2
30130: ARRAY
30131: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30132: LD_ADDR_VAR 0 14
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: LD_INT 5
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
// for i in tmp do
30155: LD_ADDR_VAR 0 8
30159: PUSH
30160: LD_VAR 0 14
30164: PUSH
30165: FOR_IN
30166: IFFALSE 30336
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30168: LD_ADDR_VAR 0 9
30172: PUSH
30173: LD_VAR 0 10
30177: PPUSH
30178: LD_VAR 0 8
30182: PPUSH
30183: LD_INT 5
30185: PPUSH
30186: CALL_OW 272
30190: PUSH
30191: LD_VAR 0 11
30195: PPUSH
30196: LD_VAR 0 8
30200: PPUSH
30201: LD_INT 5
30203: PPUSH
30204: CALL_OW 273
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30213: LD_VAR 0 9
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: LD_VAR 0 9
30226: PUSH
30227: LD_INT 2
30229: ARRAY
30230: PPUSH
30231: CALL_OW 488
30235: IFFALSE 30334
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30237: LD_ADDR_VAR 0 4
30241: PUSH
30242: LD_VAR 0 9
30246: PUSH
30247: LD_INT 1
30249: ARRAY
30250: PPUSH
30251: LD_VAR 0 9
30255: PUSH
30256: LD_INT 2
30258: ARRAY
30259: PPUSH
30260: CALL_OW 546
30264: ST_TO_ADDR
// if hex [ 1 ] then
30265: LD_VAR 0 4
30269: PUSH
30270: LD_INT 1
30272: ARRAY
30273: IFFALSE 30277
// continue ;
30275: GO 30165
// h := hex [ 2 ] ;
30277: LD_ADDR_VAR 0 13
30281: PUSH
30282: LD_VAR 0 4
30286: PUSH
30287: LD_INT 2
30289: ARRAY
30290: ST_TO_ADDR
// if h + 7 < height then
30291: LD_VAR 0 13
30295: PUSH
30296: LD_INT 7
30298: PLUS
30299: PUSH
30300: LD_VAR 0 15
30304: LESS
30305: IFFALSE 30334
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30307: LD_ADDR_VAR 0 18
30311: PUSH
30312: LD_INT 7
30314: PUSH
30315: LD_INT 28
30317: PUSH
30318: LD_INT 45
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: PUSH
30326: LD_VAR 0 12
30330: ARRAY
30331: ST_TO_ADDR
// break ;
30332: GO 30336
// end ; end ; end ;
30334: GO 30165
30336: POP
30337: POP
// end ; if not weapon then
30338: LD_VAR 0 18
30342: NOT
30343: IFFALSE 30403
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30345: LD_ADDR_VAR 0 5
30349: PUSH
30350: LD_VAR 0 5
30354: PUSH
30355: LD_INT 11
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 49
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: DIFF
30369: ST_TO_ADDR
// if not list then
30370: LD_VAR 0 5
30374: NOT
30375: IFFALSE 30379
// exit ;
30377: GO 30521
// weapon := list [ rand ( 1 , list ) ] ;
30379: LD_ADDR_VAR 0 18
30383: PUSH
30384: LD_VAR 0 5
30388: PUSH
30389: LD_INT 1
30391: PPUSH
30392: LD_VAR 0 5
30396: PPUSH
30397: CALL_OW 12
30401: ARRAY
30402: ST_TO_ADDR
// end ; if weapon then
30403: LD_VAR 0 18
30407: IFFALSE 30521
// begin tmp := CostOfWeapon ( weapon ) ;
30409: LD_ADDR_VAR 0 14
30413: PUSH
30414: LD_VAR 0 18
30418: PPUSH
30419: CALL_OW 451
30423: ST_TO_ADDR
// j := GetBase ( tower ) ;
30424: LD_ADDR_VAR 0 9
30428: PUSH
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 274
30438: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30439: LD_VAR 0 9
30443: PPUSH
30444: LD_INT 1
30446: PPUSH
30447: CALL_OW 275
30451: PUSH
30452: LD_VAR 0 14
30456: PUSH
30457: LD_INT 1
30459: ARRAY
30460: GREATEREQUAL
30461: PUSH
30462: LD_VAR 0 9
30466: PPUSH
30467: LD_INT 2
30469: PPUSH
30470: CALL_OW 275
30474: PUSH
30475: LD_VAR 0 14
30479: PUSH
30480: LD_INT 2
30482: ARRAY
30483: GREATEREQUAL
30484: AND
30485: PUSH
30486: LD_VAR 0 9
30490: PPUSH
30491: LD_INT 3
30493: PPUSH
30494: CALL_OW 275
30498: PUSH
30499: LD_VAR 0 14
30503: PUSH
30504: LD_INT 3
30506: ARRAY
30507: GREATEREQUAL
30508: AND
30509: IFFALSE 30521
// result := weapon ;
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_VAR 0 18
30520: ST_TO_ADDR
// end ; end ;
30521: LD_VAR 0 3
30525: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
// result := true ;
30530: LD_ADDR_VAR 0 3
30534: PUSH
30535: LD_INT 1
30537: ST_TO_ADDR
// if array1 = array2 then
30538: LD_VAR 0 1
30542: PUSH
30543: LD_VAR 0 2
30547: EQUAL
30548: IFFALSE 30608
// begin for i = 1 to array1 do
30550: LD_ADDR_VAR 0 4
30554: PUSH
30555: DOUBLE
30556: LD_INT 1
30558: DEC
30559: ST_TO_ADDR
30560: LD_VAR 0 1
30564: PUSH
30565: FOR_TO
30566: IFFALSE 30604
// if array1 [ i ] <> array2 [ i ] then
30568: LD_VAR 0 1
30572: PUSH
30573: LD_VAR 0 4
30577: ARRAY
30578: PUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_VAR 0 4
30588: ARRAY
30589: NONEQUAL
30590: IFFALSE 30602
// begin result := false ;
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_INT 0
30599: ST_TO_ADDR
// break ;
30600: GO 30604
// end ;
30602: GO 30565
30604: POP
30605: POP
// end else
30606: GO 30616
// result := false ;
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_INT 0
30615: ST_TO_ADDR
// end ;
30616: LD_VAR 0 3
30620: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30621: LD_INT 0
30623: PPUSH
30624: PPUSH
// if not array1 or not array2 then
30625: LD_VAR 0 1
30629: NOT
30630: PUSH
30631: LD_VAR 0 2
30635: NOT
30636: OR
30637: IFFALSE 30641
// exit ;
30639: GO 30705
// result := true ;
30641: LD_ADDR_VAR 0 3
30645: PUSH
30646: LD_INT 1
30648: ST_TO_ADDR
// for i = 1 to array1 do
30649: LD_ADDR_VAR 0 4
30653: PUSH
30654: DOUBLE
30655: LD_INT 1
30657: DEC
30658: ST_TO_ADDR
30659: LD_VAR 0 1
30663: PUSH
30664: FOR_TO
30665: IFFALSE 30703
// if array1 [ i ] <> array2 [ i ] then
30667: LD_VAR 0 1
30671: PUSH
30672: LD_VAR 0 4
30676: ARRAY
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_VAR 0 4
30687: ARRAY
30688: NONEQUAL
30689: IFFALSE 30701
// begin result := false ;
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_INT 0
30698: ST_TO_ADDR
// break ;
30699: GO 30703
// end ;
30701: GO 30664
30703: POP
30704: POP
// end ;
30705: LD_VAR 0 3
30709: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
// pom := GetBase ( fac ) ;
30715: LD_ADDR_VAR 0 5
30719: PUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 274
30729: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30730: LD_ADDR_VAR 0 4
30734: PUSH
30735: LD_VAR 0 2
30739: PUSH
30740: LD_INT 1
30742: ARRAY
30743: PPUSH
30744: LD_VAR 0 2
30748: PUSH
30749: LD_INT 2
30751: ARRAY
30752: PPUSH
30753: LD_VAR 0 2
30757: PUSH
30758: LD_INT 3
30760: ARRAY
30761: PPUSH
30762: LD_VAR 0 2
30766: PUSH
30767: LD_INT 4
30769: ARRAY
30770: PPUSH
30771: CALL_OW 449
30775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_VAR 0 5
30785: PPUSH
30786: LD_INT 1
30788: PPUSH
30789: CALL_OW 275
30793: PUSH
30794: LD_VAR 0 4
30798: PUSH
30799: LD_INT 1
30801: ARRAY
30802: GREATEREQUAL
30803: PUSH
30804: LD_VAR 0 5
30808: PPUSH
30809: LD_INT 2
30811: PPUSH
30812: CALL_OW 275
30816: PUSH
30817: LD_VAR 0 4
30821: PUSH
30822: LD_INT 2
30824: ARRAY
30825: GREATEREQUAL
30826: AND
30827: PUSH
30828: LD_VAR 0 5
30832: PPUSH
30833: LD_INT 3
30835: PPUSH
30836: CALL_OW 275
30840: PUSH
30841: LD_VAR 0 4
30845: PUSH
30846: LD_INT 3
30848: ARRAY
30849: GREATEREQUAL
30850: AND
30851: ST_TO_ADDR
// end ;
30852: LD_VAR 0 3
30856: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
// pom := GetBase ( building ) ;
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_VAR 0 1
30872: PPUSH
30873: CALL_OW 274
30877: ST_TO_ADDR
// if not pom then
30878: LD_VAR 0 3
30882: NOT
30883: IFFALSE 30887
// exit ;
30885: GO 31057
// btype := GetBType ( building ) ;
30887: LD_ADDR_VAR 0 5
30891: PUSH
30892: LD_VAR 0 1
30896: PPUSH
30897: CALL_OW 266
30901: ST_TO_ADDR
// if btype = b_armoury then
30902: LD_VAR 0 5
30906: PUSH
30907: LD_INT 4
30909: EQUAL
30910: IFFALSE 30920
// btype := b_barracks ;
30912: LD_ADDR_VAR 0 5
30916: PUSH
30917: LD_INT 5
30919: ST_TO_ADDR
// if btype = b_depot then
30920: LD_VAR 0 5
30924: PUSH
30925: LD_INT 0
30927: EQUAL
30928: IFFALSE 30938
// btype := b_warehouse ;
30930: LD_ADDR_VAR 0 5
30934: PUSH
30935: LD_INT 1
30937: ST_TO_ADDR
// if btype = b_workshop then
30938: LD_VAR 0 5
30942: PUSH
30943: LD_INT 2
30945: EQUAL
30946: IFFALSE 30956
// btype := b_factory ;
30948: LD_ADDR_VAR 0 5
30952: PUSH
30953: LD_INT 3
30955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30956: LD_ADDR_VAR 0 4
30960: PUSH
30961: LD_VAR 0 5
30965: PPUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 248
30975: PPUSH
30976: CALL_OW 450
30980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30981: LD_ADDR_VAR 0 2
30985: PUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: LD_INT 1
30993: PPUSH
30994: CALL_OW 275
30998: PUSH
30999: LD_VAR 0 4
31003: PUSH
31004: LD_INT 1
31006: ARRAY
31007: GREATEREQUAL
31008: PUSH
31009: LD_VAR 0 3
31013: PPUSH
31014: LD_INT 2
31016: PPUSH
31017: CALL_OW 275
31021: PUSH
31022: LD_VAR 0 4
31026: PUSH
31027: LD_INT 2
31029: ARRAY
31030: GREATEREQUAL
31031: AND
31032: PUSH
31033: LD_VAR 0 3
31037: PPUSH
31038: LD_INT 3
31040: PPUSH
31041: CALL_OW 275
31045: PUSH
31046: LD_VAR 0 4
31050: PUSH
31051: LD_INT 3
31053: ARRAY
31054: GREATEREQUAL
31055: AND
31056: ST_TO_ADDR
// end ;
31057: LD_VAR 0 2
31061: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31062: LD_INT 0
31064: PPUSH
31065: PPUSH
31066: PPUSH
// pom := GetBase ( building ) ;
31067: LD_ADDR_VAR 0 4
31071: PUSH
31072: LD_VAR 0 1
31076: PPUSH
31077: CALL_OW 274
31081: ST_TO_ADDR
// if not pom then
31082: LD_VAR 0 4
31086: NOT
31087: IFFALSE 31091
// exit ;
31089: GO 31192
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31091: LD_ADDR_VAR 0 5
31095: PUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 248
31110: PPUSH
31111: CALL_OW 450
31115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_VAR 0 4
31125: PPUSH
31126: LD_INT 1
31128: PPUSH
31129: CALL_OW 275
31133: PUSH
31134: LD_VAR 0 5
31138: PUSH
31139: LD_INT 1
31141: ARRAY
31142: GREATEREQUAL
31143: PUSH
31144: LD_VAR 0 4
31148: PPUSH
31149: LD_INT 2
31151: PPUSH
31152: CALL_OW 275
31156: PUSH
31157: LD_VAR 0 5
31161: PUSH
31162: LD_INT 2
31164: ARRAY
31165: GREATEREQUAL
31166: AND
31167: PUSH
31168: LD_VAR 0 4
31172: PPUSH
31173: LD_INT 3
31175: PPUSH
31176: CALL_OW 275
31180: PUSH
31181: LD_VAR 0 5
31185: PUSH
31186: LD_INT 3
31188: ARRAY
31189: GREATEREQUAL
31190: AND
31191: ST_TO_ADDR
// end ;
31192: LD_VAR 0 3
31196: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31197: LD_INT 0
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
31208: PPUSH
31209: PPUSH
// result := false ;
31210: LD_ADDR_VAR 0 8
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31218: LD_VAR 0 5
31222: NOT
31223: PUSH
31224: LD_VAR 0 1
31228: NOT
31229: OR
31230: PUSH
31231: LD_VAR 0 2
31235: NOT
31236: OR
31237: PUSH
31238: LD_VAR 0 3
31242: NOT
31243: OR
31244: IFFALSE 31248
// exit ;
31246: GO 32062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31248: LD_ADDR_VAR 0 14
31252: PUSH
31253: LD_VAR 0 1
31257: PPUSH
31258: LD_VAR 0 2
31262: PPUSH
31263: LD_VAR 0 3
31267: PPUSH
31268: LD_VAR 0 4
31272: PPUSH
31273: LD_VAR 0 5
31277: PUSH
31278: LD_INT 1
31280: ARRAY
31281: PPUSH
31282: CALL_OW 248
31286: PPUSH
31287: LD_INT 0
31289: PPUSH
31290: CALL 32899 0 6
31294: ST_TO_ADDR
// if not hexes then
31295: LD_VAR 0 14
31299: NOT
31300: IFFALSE 31304
// exit ;
31302: GO 32062
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31304: LD_ADDR_VAR 0 17
31308: PUSH
31309: LD_VAR 0 5
31313: PPUSH
31314: LD_INT 22
31316: PUSH
31317: LD_VAR 0 13
31321: PPUSH
31322: CALL_OW 255
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 30
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 30
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PPUSH
31363: CALL_OW 72
31367: ST_TO_ADDR
// for i = 1 to hexes do
31368: LD_ADDR_VAR 0 9
31372: PUSH
31373: DOUBLE
31374: LD_INT 1
31376: DEC
31377: ST_TO_ADDR
31378: LD_VAR 0 14
31382: PUSH
31383: FOR_TO
31384: IFFALSE 32060
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31386: LD_ADDR_VAR 0 13
31390: PUSH
31391: LD_VAR 0 14
31395: PUSH
31396: LD_VAR 0 9
31400: ARRAY
31401: PUSH
31402: LD_INT 1
31404: ARRAY
31405: PPUSH
31406: LD_VAR 0 14
31410: PUSH
31411: LD_VAR 0 9
31415: ARRAY
31416: PUSH
31417: LD_INT 2
31419: ARRAY
31420: PPUSH
31421: CALL_OW 428
31425: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31426: LD_VAR 0 14
31430: PUSH
31431: LD_VAR 0 9
31435: ARRAY
31436: PUSH
31437: LD_INT 1
31439: ARRAY
31440: PPUSH
31441: LD_VAR 0 14
31445: PUSH
31446: LD_VAR 0 9
31450: ARRAY
31451: PUSH
31452: LD_INT 2
31454: ARRAY
31455: PPUSH
31456: CALL_OW 351
31460: PUSH
31461: LD_VAR 0 14
31465: PUSH
31466: LD_VAR 0 9
31470: ARRAY
31471: PUSH
31472: LD_INT 1
31474: ARRAY
31475: PPUSH
31476: LD_VAR 0 14
31480: PUSH
31481: LD_VAR 0 9
31485: ARRAY
31486: PUSH
31487: LD_INT 2
31489: ARRAY
31490: PPUSH
31491: CALL_OW 488
31495: NOT
31496: OR
31497: PUSH
31498: LD_VAR 0 13
31502: PPUSH
31503: CALL_OW 247
31507: PUSH
31508: LD_INT 3
31510: EQUAL
31511: OR
31512: IFFALSE 31518
// exit ;
31514: POP
31515: POP
31516: GO 32062
// if not tmp then
31518: LD_VAR 0 13
31522: NOT
31523: IFFALSE 31527
// continue ;
31525: GO 31383
// result := true ;
31527: LD_ADDR_VAR 0 8
31531: PUSH
31532: LD_INT 1
31534: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31535: LD_VAR 0 6
31539: PUSH
31540: LD_VAR 0 13
31544: PPUSH
31545: CALL_OW 247
31549: PUSH
31550: LD_INT 2
31552: EQUAL
31553: AND
31554: PUSH
31555: LD_VAR 0 13
31559: PPUSH
31560: CALL_OW 263
31564: PUSH
31565: LD_INT 1
31567: EQUAL
31568: AND
31569: IFFALSE 31733
// begin if IsDrivenBy ( tmp ) then
31571: LD_VAR 0 13
31575: PPUSH
31576: CALL_OW 311
31580: IFFALSE 31584
// continue ;
31582: GO 31383
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31584: LD_VAR 0 6
31588: PPUSH
31589: LD_INT 3
31591: PUSH
31592: LD_INT 60
31594: PUSH
31595: EMPTY
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 55
31607: PUSH
31608: EMPTY
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PPUSH
31619: CALL_OW 72
31623: IFFALSE 31731
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31625: LD_ADDR_VAR 0 18
31629: PUSH
31630: LD_VAR 0 6
31634: PPUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 60
31640: PUSH
31641: EMPTY
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 55
31653: PUSH
31654: EMPTY
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 72
31669: PUSH
31670: LD_INT 1
31672: ARRAY
31673: ST_TO_ADDR
// if IsInUnit ( driver ) then
31674: LD_VAR 0 18
31678: PPUSH
31679: CALL_OW 310
31683: IFFALSE 31694
// ComExit ( driver ) ;
31685: LD_VAR 0 18
31689: PPUSH
31690: CALL 56083 0 1
// AddComEnterUnit ( driver , tmp ) ;
31694: LD_VAR 0 18
31698: PPUSH
31699: LD_VAR 0 13
31703: PPUSH
31704: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31708: LD_VAR 0 18
31712: PPUSH
31713: LD_VAR 0 7
31717: PPUSH
31718: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31722: LD_VAR 0 18
31726: PPUSH
31727: CALL_OW 181
// end ; continue ;
31731: GO 31383
// end ; if not cleaners or not tmp in cleaners then
31733: LD_VAR 0 6
31737: NOT
31738: PUSH
31739: LD_VAR 0 13
31743: PUSH
31744: LD_VAR 0 6
31748: IN
31749: NOT
31750: OR
31751: IFFALSE 32058
// begin if dep then
31753: LD_VAR 0 17
31757: IFFALSE 31893
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31759: LD_ADDR_VAR 0 16
31763: PUSH
31764: LD_VAR 0 17
31768: PUSH
31769: LD_INT 1
31771: ARRAY
31772: PPUSH
31773: CALL_OW 250
31777: PPUSH
31778: LD_VAR 0 17
31782: PUSH
31783: LD_INT 1
31785: ARRAY
31786: PPUSH
31787: CALL_OW 254
31791: PPUSH
31792: LD_INT 5
31794: PPUSH
31795: CALL_OW 272
31799: PUSH
31800: LD_VAR 0 17
31804: PUSH
31805: LD_INT 1
31807: ARRAY
31808: PPUSH
31809: CALL_OW 251
31813: PPUSH
31814: LD_VAR 0 17
31818: PUSH
31819: LD_INT 1
31821: ARRAY
31822: PPUSH
31823: CALL_OW 254
31827: PPUSH
31828: LD_INT 5
31830: PPUSH
31831: CALL_OW 273
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31840: LD_VAR 0 16
31844: PUSH
31845: LD_INT 1
31847: ARRAY
31848: PPUSH
31849: LD_VAR 0 16
31853: PUSH
31854: LD_INT 2
31856: ARRAY
31857: PPUSH
31858: CALL_OW 488
31862: IFFALSE 31893
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31864: LD_VAR 0 13
31868: PPUSH
31869: LD_VAR 0 16
31873: PUSH
31874: LD_INT 1
31876: ARRAY
31877: PPUSH
31878: LD_VAR 0 16
31882: PUSH
31883: LD_INT 2
31885: ARRAY
31886: PPUSH
31887: CALL_OW 111
// continue ;
31891: GO 31383
// end ; end ; r := GetDir ( tmp ) ;
31893: LD_ADDR_VAR 0 15
31897: PUSH
31898: LD_VAR 0 13
31902: PPUSH
31903: CALL_OW 254
31907: ST_TO_ADDR
// if r = 5 then
31908: LD_VAR 0 15
31912: PUSH
31913: LD_INT 5
31915: EQUAL
31916: IFFALSE 31926
// r := 0 ;
31918: LD_ADDR_VAR 0 15
31922: PUSH
31923: LD_INT 0
31925: ST_TO_ADDR
// for j = r to 5 do
31926: LD_ADDR_VAR 0 10
31930: PUSH
31931: DOUBLE
31932: LD_VAR 0 15
31936: DEC
31937: ST_TO_ADDR
31938: LD_INT 5
31940: PUSH
31941: FOR_TO
31942: IFFALSE 32056
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31944: LD_ADDR_VAR 0 11
31948: PUSH
31949: LD_VAR 0 13
31953: PPUSH
31954: CALL_OW 250
31958: PPUSH
31959: LD_VAR 0 10
31963: PPUSH
31964: LD_INT 2
31966: PPUSH
31967: CALL_OW 272
31971: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31972: LD_ADDR_VAR 0 12
31976: PUSH
31977: LD_VAR 0 13
31981: PPUSH
31982: CALL_OW 251
31986: PPUSH
31987: LD_VAR 0 10
31991: PPUSH
31992: LD_INT 2
31994: PPUSH
31995: CALL_OW 273
31999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32000: LD_VAR 0 11
32004: PPUSH
32005: LD_VAR 0 12
32009: PPUSH
32010: CALL_OW 488
32014: PUSH
32015: LD_VAR 0 11
32019: PPUSH
32020: LD_VAR 0 12
32024: PPUSH
32025: CALL_OW 428
32029: NOT
32030: AND
32031: IFFALSE 32054
// begin ComMoveXY ( tmp , _x , _y ) ;
32033: LD_VAR 0 13
32037: PPUSH
32038: LD_VAR 0 11
32042: PPUSH
32043: LD_VAR 0 12
32047: PPUSH
32048: CALL_OW 111
// break ;
32052: GO 32056
// end ; end ;
32054: GO 31941
32056: POP
32057: POP
// end ; end ;
32058: GO 31383
32060: POP
32061: POP
// end ;
32062: LD_VAR 0 8
32066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32067: LD_INT 0
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
32073: PPUSH
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
// result := false ;
32079: LD_ADDR_VAR 0 6
32083: PUSH
32084: LD_INT 0
32086: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32087: LD_VAR 0 1
32091: NOT
32092: PUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 266
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: IN
32113: NOT
32114: OR
32115: PUSH
32116: LD_VAR 0 2
32120: NOT
32121: OR
32122: PUSH
32123: LD_VAR 0 5
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 3
32139: PUSH
32140: LD_INT 4
32142: PUSH
32143: LD_INT 5
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: IN
32154: NOT
32155: OR
32156: PUSH
32157: LD_VAR 0 3
32161: PPUSH
32162: LD_VAR 0 4
32166: PPUSH
32167: CALL_OW 488
32171: NOT
32172: OR
32173: IFFALSE 32177
// exit ;
32175: GO 32894
// pom := GetBase ( depot ) ;
32177: LD_ADDR_VAR 0 10
32181: PUSH
32182: LD_VAR 0 1
32186: PPUSH
32187: CALL_OW 274
32191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32192: LD_ADDR_VAR 0 11
32196: PUSH
32197: LD_VAR 0 2
32201: PPUSH
32202: LD_VAR 0 1
32206: PPUSH
32207: CALL_OW 248
32211: PPUSH
32212: CALL_OW 450
32216: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32217: LD_VAR 0 10
32221: PPUSH
32222: LD_INT 1
32224: PPUSH
32225: CALL_OW 275
32229: PUSH
32230: LD_VAR 0 11
32234: PUSH
32235: LD_INT 1
32237: ARRAY
32238: GREATEREQUAL
32239: PUSH
32240: LD_VAR 0 10
32244: PPUSH
32245: LD_INT 2
32247: PPUSH
32248: CALL_OW 275
32252: PUSH
32253: LD_VAR 0 11
32257: PUSH
32258: LD_INT 2
32260: ARRAY
32261: GREATEREQUAL
32262: AND
32263: PUSH
32264: LD_VAR 0 10
32268: PPUSH
32269: LD_INT 3
32271: PPUSH
32272: CALL_OW 275
32276: PUSH
32277: LD_VAR 0 11
32281: PUSH
32282: LD_INT 3
32284: ARRAY
32285: GREATEREQUAL
32286: AND
32287: NOT
32288: IFFALSE 32292
// exit ;
32290: GO 32894
// if GetBType ( depot ) = b_depot then
32292: LD_VAR 0 1
32296: PPUSH
32297: CALL_OW 266
32301: PUSH
32302: LD_INT 0
32304: EQUAL
32305: IFFALSE 32317
// dist := 28 else
32307: LD_ADDR_VAR 0 14
32311: PUSH
32312: LD_INT 28
32314: ST_TO_ADDR
32315: GO 32325
// dist := 36 ;
32317: LD_ADDR_VAR 0 14
32321: PUSH
32322: LD_INT 36
32324: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32325: LD_VAR 0 1
32329: PPUSH
32330: LD_VAR 0 3
32334: PPUSH
32335: LD_VAR 0 4
32339: PPUSH
32340: CALL_OW 297
32344: PUSH
32345: LD_VAR 0 14
32349: GREATER
32350: IFFALSE 32354
// exit ;
32352: GO 32894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32354: LD_ADDR_VAR 0 12
32358: PUSH
32359: LD_VAR 0 2
32363: PPUSH
32364: LD_VAR 0 3
32368: PPUSH
32369: LD_VAR 0 4
32373: PPUSH
32374: LD_VAR 0 5
32378: PPUSH
32379: LD_VAR 0 1
32383: PPUSH
32384: CALL_OW 248
32388: PPUSH
32389: LD_INT 0
32391: PPUSH
32392: CALL 32899 0 6
32396: ST_TO_ADDR
// if not hexes then
32397: LD_VAR 0 12
32401: NOT
32402: IFFALSE 32406
// exit ;
32404: GO 32894
// hex := GetHexInfo ( x , y ) ;
32406: LD_ADDR_VAR 0 15
32410: PUSH
32411: LD_VAR 0 3
32415: PPUSH
32416: LD_VAR 0 4
32420: PPUSH
32421: CALL_OW 546
32425: ST_TO_ADDR
// if hex [ 1 ] then
32426: LD_VAR 0 15
32430: PUSH
32431: LD_INT 1
32433: ARRAY
32434: IFFALSE 32438
// exit ;
32436: GO 32894
// height := hex [ 2 ] ;
32438: LD_ADDR_VAR 0 13
32442: PUSH
32443: LD_VAR 0 15
32447: PUSH
32448: LD_INT 2
32450: ARRAY
32451: ST_TO_ADDR
// for i = 1 to hexes do
32452: LD_ADDR_VAR 0 7
32456: PUSH
32457: DOUBLE
32458: LD_INT 1
32460: DEC
32461: ST_TO_ADDR
32462: LD_VAR 0 12
32466: PUSH
32467: FOR_TO
32468: IFFALSE 32798
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32470: LD_VAR 0 12
32474: PUSH
32475: LD_VAR 0 7
32479: ARRAY
32480: PUSH
32481: LD_INT 1
32483: ARRAY
32484: PPUSH
32485: LD_VAR 0 12
32489: PUSH
32490: LD_VAR 0 7
32494: ARRAY
32495: PUSH
32496: LD_INT 2
32498: ARRAY
32499: PPUSH
32500: CALL_OW 488
32504: NOT
32505: PUSH
32506: LD_VAR 0 12
32510: PUSH
32511: LD_VAR 0 7
32515: ARRAY
32516: PUSH
32517: LD_INT 1
32519: ARRAY
32520: PPUSH
32521: LD_VAR 0 12
32525: PUSH
32526: LD_VAR 0 7
32530: ARRAY
32531: PUSH
32532: LD_INT 2
32534: ARRAY
32535: PPUSH
32536: CALL_OW 428
32540: PUSH
32541: LD_INT 0
32543: GREATER
32544: OR
32545: PUSH
32546: LD_VAR 0 12
32550: PUSH
32551: LD_VAR 0 7
32555: ARRAY
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: PPUSH
32561: LD_VAR 0 12
32565: PUSH
32566: LD_VAR 0 7
32570: ARRAY
32571: PUSH
32572: LD_INT 2
32574: ARRAY
32575: PPUSH
32576: CALL_OW 351
32580: OR
32581: IFFALSE 32587
// exit ;
32583: POP
32584: POP
32585: GO 32894
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32587: LD_ADDR_VAR 0 8
32591: PUSH
32592: LD_VAR 0 12
32596: PUSH
32597: LD_VAR 0 7
32601: ARRAY
32602: PUSH
32603: LD_INT 1
32605: ARRAY
32606: PPUSH
32607: LD_VAR 0 12
32611: PUSH
32612: LD_VAR 0 7
32616: ARRAY
32617: PUSH
32618: LD_INT 2
32620: ARRAY
32621: PPUSH
32622: CALL_OW 546
32626: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32627: LD_VAR 0 8
32631: PUSH
32632: LD_INT 1
32634: ARRAY
32635: PUSH
32636: LD_VAR 0 8
32640: PUSH
32641: LD_INT 2
32643: ARRAY
32644: PUSH
32645: LD_VAR 0 13
32649: PUSH
32650: LD_INT 2
32652: PLUS
32653: GREATER
32654: OR
32655: PUSH
32656: LD_VAR 0 8
32660: PUSH
32661: LD_INT 2
32663: ARRAY
32664: PUSH
32665: LD_VAR 0 13
32669: PUSH
32670: LD_INT 2
32672: MINUS
32673: LESS
32674: OR
32675: PUSH
32676: LD_VAR 0 8
32680: PUSH
32681: LD_INT 3
32683: ARRAY
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 8
32690: PUSH
32691: LD_INT 9
32693: PUSH
32694: LD_INT 10
32696: PUSH
32697: LD_INT 11
32699: PUSH
32700: LD_INT 12
32702: PUSH
32703: LD_INT 13
32705: PUSH
32706: LD_INT 16
32708: PUSH
32709: LD_INT 17
32711: PUSH
32712: LD_INT 18
32714: PUSH
32715: LD_INT 19
32717: PUSH
32718: LD_INT 20
32720: PUSH
32721: LD_INT 21
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: IN
32739: NOT
32740: OR
32741: PUSH
32742: LD_VAR 0 8
32746: PUSH
32747: LD_INT 5
32749: ARRAY
32750: NOT
32751: OR
32752: PUSH
32753: LD_VAR 0 8
32757: PUSH
32758: LD_INT 6
32760: ARRAY
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 7
32770: PUSH
32771: LD_INT 9
32773: PUSH
32774: LD_INT 10
32776: PUSH
32777: LD_INT 11
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: IN
32788: NOT
32789: OR
32790: IFFALSE 32796
// exit ;
32792: POP
32793: POP
32794: GO 32894
// end ;
32796: GO 32467
32798: POP
32799: POP
// side := GetSide ( depot ) ;
32800: LD_ADDR_VAR 0 9
32804: PUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 255
32814: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32815: LD_VAR 0 9
32819: PPUSH
32820: LD_VAR 0 3
32824: PPUSH
32825: LD_VAR 0 4
32829: PPUSH
32830: LD_INT 20
32832: PPUSH
32833: CALL 25215 0 4
32837: PUSH
32838: LD_INT 4
32840: ARRAY
32841: IFFALSE 32845
// exit ;
32843: GO 32894
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32845: LD_VAR 0 2
32849: PUSH
32850: LD_INT 29
32852: PUSH
32853: LD_INT 30
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: IN
32860: PUSH
32861: LD_VAR 0 3
32865: PPUSH
32866: LD_VAR 0 4
32870: PPUSH
32871: LD_VAR 0 9
32875: PPUSH
32876: CALL_OW 440
32880: NOT
32881: AND
32882: IFFALSE 32886
// exit ;
32884: GO 32894
// result := true ;
32886: LD_ADDR_VAR 0 6
32890: PUSH
32891: LD_INT 1
32893: ST_TO_ADDR
// end ;
32894: LD_VAR 0 6
32898: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32899: LD_INT 0
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
32907: PPUSH
32908: PPUSH
32909: PPUSH
32910: PPUSH
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
32958: PPUSH
// result = [ ] ;
32959: LD_ADDR_VAR 0 7
32963: PUSH
32964: EMPTY
32965: ST_TO_ADDR
// temp_list = [ ] ;
32966: LD_ADDR_VAR 0 9
32970: PUSH
32971: EMPTY
32972: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: LD_INT 4
32992: PUSH
32993: LD_INT 5
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: IN
33004: NOT
33005: PUSH
33006: LD_VAR 0 1
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: IN
33021: PUSH
33022: LD_VAR 0 5
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: IN
33041: NOT
33042: AND
33043: OR
33044: IFFALSE 33048
// exit ;
33046: GO 51439
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33048: LD_VAR 0 1
33052: PUSH
33053: LD_INT 6
33055: PUSH
33056: LD_INT 7
33058: PUSH
33059: LD_INT 8
33061: PUSH
33062: LD_INT 13
33064: PUSH
33065: LD_INT 12
33067: PUSH
33068: LD_INT 15
33070: PUSH
33071: LD_INT 11
33073: PUSH
33074: LD_INT 14
33076: PUSH
33077: LD_INT 10
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: IN
33091: IFFALSE 33101
// btype = b_lab ;
33093: LD_ADDR_VAR 0 1
33097: PUSH
33098: LD_INT 6
33100: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33101: LD_VAR 0 6
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: IN
33120: NOT
33121: PUSH
33122: LD_VAR 0 1
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 2
33135: PUSH
33136: LD_INT 3
33138: PUSH
33139: LD_INT 6
33141: PUSH
33142: LD_INT 36
33144: PUSH
33145: LD_INT 4
33147: PUSH
33148: LD_INT 5
33150: PUSH
33151: LD_INT 31
33153: PUSH
33154: LD_INT 32
33156: PUSH
33157: LD_INT 33
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: IN
33173: NOT
33174: PUSH
33175: LD_VAR 0 6
33179: PUSH
33180: LD_INT 1
33182: EQUAL
33183: AND
33184: OR
33185: PUSH
33186: LD_VAR 0 1
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 3
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: IN
33201: NOT
33202: PUSH
33203: LD_VAR 0 6
33207: PUSH
33208: LD_INT 2
33210: EQUAL
33211: AND
33212: OR
33213: IFFALSE 33223
// mode = 0 ;
33215: LD_ADDR_VAR 0 6
33219: PUSH
33220: LD_INT 0
33222: ST_TO_ADDR
// case mode of 0 :
33223: LD_VAR 0 6
33227: PUSH
33228: LD_INT 0
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 44689
33236: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33237: LD_ADDR_VAR 0 11
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33430: LD_ADDR_VAR 0 12
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 2
33564: NEG
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 3
33587: NEG
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 3
33598: NEG
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33626: LD_ADDR_VAR 0 13
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: LD_INT 3
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: LD_INT 3
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33825: LD_ADDR_VAR 0 14
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: NEG
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: LD_INT 3
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 3
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34021: LD_ADDR_VAR 0 15
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34214: LD_ADDR_VAR 0 16
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 3
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34407: LD_ADDR_VAR 0 17
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: NEG
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: NEG
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34637: LD_ADDR_VAR 0 18
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: LD_INT 2
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34867: LD_ADDR_VAR 0 19
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35097: LD_ADDR_VAR 0 20
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: NEG
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: NEG
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35327: LD_ADDR_VAR 0 21
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: LD_INT 2
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35557: LD_ADDR_VAR 0 22
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 2
35744: NEG
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35787: LD_ADDR_VAR 0 23
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: LD_INT 2
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 2
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 2
35963: NEG
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: LD_INT 2
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 3
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: LD_INT 3
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36067: LD_ADDR_VAR 0 24
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: LD_INT 2
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 3
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 3
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36343: LD_ADDR_VAR 0 25
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 2
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 3
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 3
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36617: LD_ADDR_VAR 0 26
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: LD_INT 2
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 3
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: LD_INT 3
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36893: LD_ADDR_VAR 0 27
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 2
37080: NEG
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 3
37138: NEG
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37173: LD_ADDR_VAR 0 28
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 2
37384: NEG
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 3
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 3
37408: NEG
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: NEG
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37455: LD_ADDR_VAR 0 29
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 2
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: NEG
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: LD_INT 3
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 3
37699: NEG
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37734: LD_ADDR_VAR 0 30
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 3
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 3
37977: NEG
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38012: LD_ADDR_VAR 0 31
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 2
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 2
38177: NEG
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 3
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: LD_INT 2
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38290: LD_ADDR_VAR 0 32
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 3
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 3
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38568: LD_ADDR_VAR 0 33
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 3
38812: NEG
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38847: LD_ADDR_VAR 0 34
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 3
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 3
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39127: LD_ADDR_VAR 0 35
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39239: LD_ADDR_VAR 0 36
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39351: LD_ADDR_VAR 0 37
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39463: LD_ADDR_VAR 0 38
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39575: LD_ADDR_VAR 0 39
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39687: LD_ADDR_VAR 0 40
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39799: LD_ADDR_VAR 0 41
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: LD_INT 3
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: LD_INT 3
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 3
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 3
40073: NEG
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: LD_INT 3
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40149: LD_ADDR_VAR 0 42
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 2
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 3
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 3
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 3
40446: NEG
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: LD_INT 3
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40499: LD_ADDR_VAR 0 43
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 3
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 3
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40847: LD_ADDR_VAR 0 44
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: NEG
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: NEG
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 3
41156: NEG
41157: PUSH
41158: LD_INT 3
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41197: LD_ADDR_VAR 0 45
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 3
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 3
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 3
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 3
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41547: LD_ADDR_VAR 0 46
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 3
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 3
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 3
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41895: LD_ADDR_VAR 0 47
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42046: LD_ADDR_VAR 0 48
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42193: LD_ADDR_VAR 0 49
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42337: LD_ADDR_VAR 0 50
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42481: LD_ADDR_VAR 0 51
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42628: LD_ADDR_VAR 0 52
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42779: LD_ADDR_VAR 0 53
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43009: LD_ADDR_VAR 0 54
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43239: LD_ADDR_VAR 0 55
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43469: LD_ADDR_VAR 0 56
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43699: LD_ADDR_VAR 0 57
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43929: LD_ADDR_VAR 0 58
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44159: LD_ADDR_VAR 0 59
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44247: LD_ADDR_VAR 0 60
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44335: LD_ADDR_VAR 0 61
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44423: LD_ADDR_VAR 0 62
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44511: LD_ADDR_VAR 0 63
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44599: LD_ADDR_VAR 0 64
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: ST_TO_ADDR
// end ; 1 :
44687: GO 50584
44689: LD_INT 1
44691: DOUBLE
44692: EQUAL
44693: IFTRUE 44697
44695: GO 47320
44697: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44698: LD_ADDR_VAR 0 11
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 3
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 3
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44742: LD_ADDR_VAR 0 12
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44783: LD_ADDR_VAR 0 13
44787: PUSH
44788: LD_INT 3
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44823: LD_ADDR_VAR 0 14
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44864: LD_ADDR_VAR 0 15
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44908: LD_ADDR_VAR 0 16
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: NEG
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44954: LD_ADDR_VAR 0 17
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 3
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44998: LD_ADDR_VAR 0 18
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 3
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45039: LD_ADDR_VAR 0 19
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: PUSH
45057: LD_INT 3
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45079: LD_ADDR_VAR 0 20
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45120: LD_ADDR_VAR 0 21
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45164: LD_ADDR_VAR 0 22
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 3
45195: NEG
45196: PUSH
45197: LD_INT 3
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45210: LD_ADDR_VAR 0 23
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 3
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 4
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 3
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45254: LD_ADDR_VAR 0 24
45258: PUSH
45259: LD_INT 3
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45295: LD_ADDR_VAR 0 25
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: LD_INT 4
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45335: LD_ADDR_VAR 0 26
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 4
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45376: LD_ADDR_VAR 0 27
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 4
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45420: LD_ADDR_VAR 0 28
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: LD_INT 3
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 3
45439: NEG
45440: PUSH
45441: LD_INT 4
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 4
45451: NEG
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45466: LD_ADDR_VAR 0 29
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 4
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 4
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 5
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 5
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 4
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 6
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 6
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 5
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45621: LD_ADDR_VAR 0 30
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 4
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 4
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 4
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 5
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 5
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 5
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 6
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 6
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45764: LD_ADDR_VAR 0 31
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 4
45801: PUSH
45802: LD_INT 3
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 4
45811: PUSH
45812: LD_INT 4
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 3
45821: PUSH
45822: LD_INT 4
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 5
45831: PUSH
45832: LD_INT 4
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 5
45841: PUSH
45842: LD_INT 5
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: PUSH
45852: LD_INT 5
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 6
45861: PUSH
45862: LD_INT 5
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 6
45871: PUSH
45872: LD_INT 6
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 5
45881: PUSH
45882: LD_INT 6
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45903: LD_ADDR_VAR 0 32
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 4
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 4
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 5
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 5
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 4
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 6
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 6
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 5
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46046: LD_ADDR_VAR 0 33
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 4
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 4
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 4
46121: NEG
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 5
46132: NEG
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 5
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 5
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 6
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 6
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46201: LD_ADDR_VAR 0 34
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 3
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 3
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 3
46244: NEG
46245: PUSH
46246: LD_INT 4
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 4
46256: NEG
46257: PUSH
46258: LD_INT 3
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 4
46268: NEG
46269: PUSH
46270: LD_INT 4
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 4
46280: NEG
46281: PUSH
46282: LD_INT 5
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 5
46292: NEG
46293: PUSH
46294: LD_INT 4
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 5
46304: NEG
46305: PUSH
46306: LD_INT 5
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 5
46316: NEG
46317: PUSH
46318: LD_INT 6
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 6
46328: NEG
46329: PUSH
46330: LD_INT 5
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 6
46340: NEG
46341: PUSH
46342: LD_INT 6
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46364: LD_ADDR_VAR 0 41
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 3
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46408: LD_ADDR_VAR 0 42
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46449: LD_ADDR_VAR 0 43
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46489: LD_ADDR_VAR 0 44
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46530: LD_ADDR_VAR 0 45
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: LIST
46573: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46574: LD_ADDR_VAR 0 46
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: LD_INT 3
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46620: LD_ADDR_VAR 0 47
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46653: LD_ADDR_VAR 0 48
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46684: LD_ADDR_VAR 0 49
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46713: LD_ADDR_VAR 0 50
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46742: LD_ADDR_VAR 0 51
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46773: LD_ADDR_VAR 0 52
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46806: LD_ADDR_VAR 0 53
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46850: LD_ADDR_VAR 0 54
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 3
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46891: LD_ADDR_VAR 0 55
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46931: LD_ADDR_VAR 0 56
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46972: LD_ADDR_VAR 0 57
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47016: LD_ADDR_VAR 0 58
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: LD_INT 3
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47062: LD_ADDR_VAR 0 59
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47106: LD_ADDR_VAR 0 60
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47147: LD_ADDR_VAR 0 61
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47187: LD_ADDR_VAR 0 62
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47228: LD_ADDR_VAR 0 63
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47272: LD_ADDR_VAR 0 64
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: ST_TO_ADDR
// end ; 2 :
47318: GO 50584
47320: LD_INT 2
47322: DOUBLE
47323: EQUAL
47324: IFTRUE 47328
47326: GO 50583
47328: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47329: LD_ADDR_VAR 0 29
47333: PUSH
47334: LD_INT 4
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 4
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 5
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 5
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 4
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 5
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 4
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 4
47459: PUSH
47460: LD_INT 4
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: LD_INT 4
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 4
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 4
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 5
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 5
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 4
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 5
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: NEG
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 3
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 4
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 4
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 4
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 4
47714: NEG
47715: PUSH
47716: LD_INT 4
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 4
47726: NEG
47727: PUSH
47728: LD_INT 5
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 4
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 4
47762: NEG
47763: PUSH
47764: LD_INT 3
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 5
47774: NEG
47775: PUSH
47776: LD_INT 4
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 5
47786: NEG
47787: PUSH
47788: LD_INT 5
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: LD_INT 5
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 5
47810: NEG
47811: PUSH
47812: LD_INT 3
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47867: LD_ADDR_VAR 0 30
47871: PUSH
47872: LD_INT 4
47874: PUSH
47875: LD_INT 4
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 4
47884: PUSH
47885: LD_INT 3
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 5
47894: PUSH
47895: LD_INT 4
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 5
47904: PUSH
47905: LD_INT 5
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 4
47914: PUSH
47915: LD_INT 5
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 5
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: LD_INT 5
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 4
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 4
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 4
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 4
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 5
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 5
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 5
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: LD_INT 4
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: LD_INT 3
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 4
48231: NEG
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: LD_INT 4
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 4
48255: NEG
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 5
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 4
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 3
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 4
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 5
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 5
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48414: LD_ADDR_VAR 0 31
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 4
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 4
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 5
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 5
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 4
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 4
48616: NEG
48617: PUSH
48618: LD_INT 4
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 4
48628: NEG
48629: PUSH
48630: LD_INT 5
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: LD_INT 4
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 4
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 5
48676: NEG
48677: PUSH
48678: LD_INT 4
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: LD_INT 5
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 3
48700: NEG
48701: PUSH
48702: LD_INT 5
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 5
48712: NEG
48713: PUSH
48714: LD_INT 3
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: LD_INT 4
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 4
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 4
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 5
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 5
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 4
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 3
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 5
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48964: LD_ADDR_VAR 0 32
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 5
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 5
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: NEG
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: LD_INT 4
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 4
49169: NEG
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 4
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 5
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 4
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 4
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 5
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 5
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 3
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 4
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 4
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 3
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 4
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 4
49376: PUSH
49377: LD_INT 4
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 4
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 5
49396: PUSH
49397: LD_INT 4
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 5
49406: PUSH
49407: LD_INT 5
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 4
49416: PUSH
49417: LD_INT 5
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: PUSH
49427: LD_INT 4
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 5
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: LD_INT 5
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49511: LD_ADDR_VAR 0 33
49515: PUSH
49516: LD_INT 4
49518: NEG
49519: PUSH
49520: LD_INT 4
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: LD_INT 5
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 4
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 3
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 4
49566: NEG
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 5
49578: NEG
49579: PUSH
49580: LD_INT 4
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: LD_INT 5
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: LD_INT 5
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 5
49614: NEG
49615: PUSH
49616: LD_INT 3
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 4
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 4
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 4
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 4
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 4
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 5
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 5
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 4
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 5
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 4
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 4
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 4
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 4
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 5
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 4
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 5
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50049: LD_ADDR_VAR 0 34
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 4
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 5
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 4
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 4
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 5
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 5
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 4
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 4
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 4
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 4
50251: PUSH
50252: LD_INT 4
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 4
50261: PUSH
50262: LD_INT 3
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 5
50271: PUSH
50272: LD_INT 4
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 5
50281: PUSH
50282: LD_INT 5
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 4
50291: PUSH
50292: LD_INT 5
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 4
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 5
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 5
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 4
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 4
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 4
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 4
50434: NEG
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 4
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 4
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 5
50490: NEG
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 5
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 5
50513: NEG
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// end ; end ;
50581: GO 50584
50583: POP
// case btype of b_depot , b_warehouse :
50584: LD_VAR 0 1
50588: PUSH
50589: LD_INT 0
50591: DOUBLE
50592: EQUAL
50593: IFTRUE 50603
50595: LD_INT 1
50597: DOUBLE
50598: EQUAL
50599: IFTRUE 50603
50601: GO 50804
50603: POP
// case nation of nation_american :
50604: LD_VAR 0 5
50608: PUSH
50609: LD_INT 1
50611: DOUBLE
50612: EQUAL
50613: IFTRUE 50617
50615: GO 50673
50617: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50618: LD_ADDR_VAR 0 9
50622: PUSH
50623: LD_VAR 0 11
50627: PUSH
50628: LD_VAR 0 12
50632: PUSH
50633: LD_VAR 0 13
50637: PUSH
50638: LD_VAR 0 14
50642: PUSH
50643: LD_VAR 0 15
50647: PUSH
50648: LD_VAR 0 16
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: PUSH
50661: LD_VAR 0 4
50665: PUSH
50666: LD_INT 1
50668: PLUS
50669: ARRAY
50670: ST_TO_ADDR
50671: GO 50802
50673: LD_INT 2
50675: DOUBLE
50676: EQUAL
50677: IFTRUE 50681
50679: GO 50737
50681: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50682: LD_ADDR_VAR 0 9
50686: PUSH
50687: LD_VAR 0 17
50691: PUSH
50692: LD_VAR 0 18
50696: PUSH
50697: LD_VAR 0 19
50701: PUSH
50702: LD_VAR 0 20
50706: PUSH
50707: LD_VAR 0 21
50711: PUSH
50712: LD_VAR 0 22
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: PUSH
50725: LD_VAR 0 4
50729: PUSH
50730: LD_INT 1
50732: PLUS
50733: ARRAY
50734: ST_TO_ADDR
50735: GO 50802
50737: LD_INT 3
50739: DOUBLE
50740: EQUAL
50741: IFTRUE 50745
50743: GO 50801
50745: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50746: LD_ADDR_VAR 0 9
50750: PUSH
50751: LD_VAR 0 23
50755: PUSH
50756: LD_VAR 0 24
50760: PUSH
50761: LD_VAR 0 25
50765: PUSH
50766: LD_VAR 0 26
50770: PUSH
50771: LD_VAR 0 27
50775: PUSH
50776: LD_VAR 0 28
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: PUSH
50789: LD_VAR 0 4
50793: PUSH
50794: LD_INT 1
50796: PLUS
50797: ARRAY
50798: ST_TO_ADDR
50799: GO 50802
50801: POP
50802: GO 51357
50804: LD_INT 2
50806: DOUBLE
50807: EQUAL
50808: IFTRUE 50818
50810: LD_INT 3
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50818
50816: GO 50874
50818: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50819: LD_ADDR_VAR 0 9
50823: PUSH
50824: LD_VAR 0 29
50828: PUSH
50829: LD_VAR 0 30
50833: PUSH
50834: LD_VAR 0 31
50838: PUSH
50839: LD_VAR 0 32
50843: PUSH
50844: LD_VAR 0 33
50848: PUSH
50849: LD_VAR 0 34
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: LD_VAR 0 4
50866: PUSH
50867: LD_INT 1
50869: PLUS
50870: ARRAY
50871: ST_TO_ADDR
50872: GO 51357
50874: LD_INT 16
50876: DOUBLE
50877: EQUAL
50878: IFTRUE 50936
50880: LD_INT 17
50882: DOUBLE
50883: EQUAL
50884: IFTRUE 50936
50886: LD_INT 18
50888: DOUBLE
50889: EQUAL
50890: IFTRUE 50936
50892: LD_INT 19
50894: DOUBLE
50895: EQUAL
50896: IFTRUE 50936
50898: LD_INT 22
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50936
50904: LD_INT 20
50906: DOUBLE
50907: EQUAL
50908: IFTRUE 50936
50910: LD_INT 21
50912: DOUBLE
50913: EQUAL
50914: IFTRUE 50936
50916: LD_INT 23
50918: DOUBLE
50919: EQUAL
50920: IFTRUE 50936
50922: LD_INT 24
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50936
50928: LD_INT 25
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50936
50934: GO 50992
50936: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50937: LD_ADDR_VAR 0 9
50941: PUSH
50942: LD_VAR 0 35
50946: PUSH
50947: LD_VAR 0 36
50951: PUSH
50952: LD_VAR 0 37
50956: PUSH
50957: LD_VAR 0 38
50961: PUSH
50962: LD_VAR 0 39
50966: PUSH
50967: LD_VAR 0 40
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: PUSH
50980: LD_VAR 0 4
50984: PUSH
50985: LD_INT 1
50987: PLUS
50988: ARRAY
50989: ST_TO_ADDR
50990: GO 51357
50992: LD_INT 6
50994: DOUBLE
50995: EQUAL
50996: IFTRUE 51048
50998: LD_INT 7
51000: DOUBLE
51001: EQUAL
51002: IFTRUE 51048
51004: LD_INT 8
51006: DOUBLE
51007: EQUAL
51008: IFTRUE 51048
51010: LD_INT 13
51012: DOUBLE
51013: EQUAL
51014: IFTRUE 51048
51016: LD_INT 12
51018: DOUBLE
51019: EQUAL
51020: IFTRUE 51048
51022: LD_INT 15
51024: DOUBLE
51025: EQUAL
51026: IFTRUE 51048
51028: LD_INT 11
51030: DOUBLE
51031: EQUAL
51032: IFTRUE 51048
51034: LD_INT 14
51036: DOUBLE
51037: EQUAL
51038: IFTRUE 51048
51040: LD_INT 10
51042: DOUBLE
51043: EQUAL
51044: IFTRUE 51048
51046: GO 51104
51048: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51049: LD_ADDR_VAR 0 9
51053: PUSH
51054: LD_VAR 0 41
51058: PUSH
51059: LD_VAR 0 42
51063: PUSH
51064: LD_VAR 0 43
51068: PUSH
51069: LD_VAR 0 44
51073: PUSH
51074: LD_VAR 0 45
51078: PUSH
51079: LD_VAR 0 46
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: PUSH
51092: LD_VAR 0 4
51096: PUSH
51097: LD_INT 1
51099: PLUS
51100: ARRAY
51101: ST_TO_ADDR
51102: GO 51357
51104: LD_INT 36
51106: DOUBLE
51107: EQUAL
51108: IFTRUE 51112
51110: GO 51168
51112: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51113: LD_ADDR_VAR 0 9
51117: PUSH
51118: LD_VAR 0 47
51122: PUSH
51123: LD_VAR 0 48
51127: PUSH
51128: LD_VAR 0 49
51132: PUSH
51133: LD_VAR 0 50
51137: PUSH
51138: LD_VAR 0 51
51142: PUSH
51143: LD_VAR 0 52
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: PUSH
51156: LD_VAR 0 4
51160: PUSH
51161: LD_INT 1
51163: PLUS
51164: ARRAY
51165: ST_TO_ADDR
51166: GO 51357
51168: LD_INT 4
51170: DOUBLE
51171: EQUAL
51172: IFTRUE 51194
51174: LD_INT 5
51176: DOUBLE
51177: EQUAL
51178: IFTRUE 51194
51180: LD_INT 34
51182: DOUBLE
51183: EQUAL
51184: IFTRUE 51194
51186: LD_INT 37
51188: DOUBLE
51189: EQUAL
51190: IFTRUE 51194
51192: GO 51250
51194: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51195: LD_ADDR_VAR 0 9
51199: PUSH
51200: LD_VAR 0 53
51204: PUSH
51205: LD_VAR 0 54
51209: PUSH
51210: LD_VAR 0 55
51214: PUSH
51215: LD_VAR 0 56
51219: PUSH
51220: LD_VAR 0 57
51224: PUSH
51225: LD_VAR 0 58
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: PUSH
51238: LD_VAR 0 4
51242: PUSH
51243: LD_INT 1
51245: PLUS
51246: ARRAY
51247: ST_TO_ADDR
51248: GO 51357
51250: LD_INT 31
51252: DOUBLE
51253: EQUAL
51254: IFTRUE 51300
51256: LD_INT 32
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51300
51262: LD_INT 33
51264: DOUBLE
51265: EQUAL
51266: IFTRUE 51300
51268: LD_INT 27
51270: DOUBLE
51271: EQUAL
51272: IFTRUE 51300
51274: LD_INT 26
51276: DOUBLE
51277: EQUAL
51278: IFTRUE 51300
51280: LD_INT 28
51282: DOUBLE
51283: EQUAL
51284: IFTRUE 51300
51286: LD_INT 29
51288: DOUBLE
51289: EQUAL
51290: IFTRUE 51300
51292: LD_INT 30
51294: DOUBLE
51295: EQUAL
51296: IFTRUE 51300
51298: GO 51356
51300: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51301: LD_ADDR_VAR 0 9
51305: PUSH
51306: LD_VAR 0 59
51310: PUSH
51311: LD_VAR 0 60
51315: PUSH
51316: LD_VAR 0 61
51320: PUSH
51321: LD_VAR 0 62
51325: PUSH
51326: LD_VAR 0 63
51330: PUSH
51331: LD_VAR 0 64
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: PUSH
51344: LD_VAR 0 4
51348: PUSH
51349: LD_INT 1
51351: PLUS
51352: ARRAY
51353: ST_TO_ADDR
51354: GO 51357
51356: POP
// temp_list2 = [ ] ;
51357: LD_ADDR_VAR 0 10
51361: PUSH
51362: EMPTY
51363: ST_TO_ADDR
// for i in temp_list do
51364: LD_ADDR_VAR 0 8
51368: PUSH
51369: LD_VAR 0 9
51373: PUSH
51374: FOR_IN
51375: IFFALSE 51427
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51377: LD_ADDR_VAR 0 10
51381: PUSH
51382: LD_VAR 0 10
51386: PUSH
51387: LD_VAR 0 8
51391: PUSH
51392: LD_INT 1
51394: ARRAY
51395: PUSH
51396: LD_VAR 0 2
51400: PLUS
51401: PUSH
51402: LD_VAR 0 8
51406: PUSH
51407: LD_INT 2
51409: ARRAY
51410: PUSH
51411: LD_VAR 0 3
51415: PLUS
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: EMPTY
51422: LIST
51423: ADD
51424: ST_TO_ADDR
51425: GO 51374
51427: POP
51428: POP
// result = temp_list2 ;
51429: LD_ADDR_VAR 0 7
51433: PUSH
51434: LD_VAR 0 10
51438: ST_TO_ADDR
// end ;
51439: LD_VAR 0 7
51443: RET
// export function EnemyInRange ( unit , dist ) ; begin
51444: LD_INT 0
51446: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51447: LD_ADDR_VAR 0 3
51451: PUSH
51452: LD_VAR 0 1
51456: PPUSH
51457: CALL_OW 255
51461: PPUSH
51462: LD_VAR 0 1
51466: PPUSH
51467: CALL_OW 250
51471: PPUSH
51472: LD_VAR 0 1
51476: PPUSH
51477: CALL_OW 251
51481: PPUSH
51482: LD_VAR 0 2
51486: PPUSH
51487: CALL 25215 0 4
51491: PUSH
51492: LD_INT 4
51494: ARRAY
51495: ST_TO_ADDR
// end ;
51496: LD_VAR 0 3
51500: RET
// export function PlayerSeeMe ( unit ) ; begin
51501: LD_INT 0
51503: PPUSH
// result := See ( your_side , unit ) ;
51504: LD_ADDR_VAR 0 2
51508: PUSH
51509: LD_OWVAR 2
51513: PPUSH
51514: LD_VAR 0 1
51518: PPUSH
51519: CALL_OW 292
51523: ST_TO_ADDR
// end ;
51524: LD_VAR 0 2
51528: RET
// export function ReverseDir ( unit ) ; begin
51529: LD_INT 0
51531: PPUSH
// if not unit then
51532: LD_VAR 0 1
51536: NOT
51537: IFFALSE 51541
// exit ;
51539: GO 51564
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51541: LD_ADDR_VAR 0 2
51545: PUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 254
51555: PUSH
51556: LD_INT 3
51558: PLUS
51559: PUSH
51560: LD_INT 6
51562: MOD
51563: ST_TO_ADDR
// end ;
51564: LD_VAR 0 2
51568: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51569: LD_INT 0
51571: PPUSH
51572: PPUSH
51573: PPUSH
51574: PPUSH
51575: PPUSH
// if not hexes then
51576: LD_VAR 0 2
51580: NOT
51581: IFFALSE 51585
// exit ;
51583: GO 51733
// dist := 9999 ;
51585: LD_ADDR_VAR 0 5
51589: PUSH
51590: LD_INT 9999
51592: ST_TO_ADDR
// for i = 1 to hexes do
51593: LD_ADDR_VAR 0 4
51597: PUSH
51598: DOUBLE
51599: LD_INT 1
51601: DEC
51602: ST_TO_ADDR
51603: LD_VAR 0 2
51607: PUSH
51608: FOR_TO
51609: IFFALSE 51721
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51611: LD_VAR 0 1
51615: PPUSH
51616: LD_VAR 0 2
51620: PUSH
51621: LD_VAR 0 4
51625: ARRAY
51626: PUSH
51627: LD_INT 1
51629: ARRAY
51630: PPUSH
51631: LD_VAR 0 2
51635: PUSH
51636: LD_VAR 0 4
51640: ARRAY
51641: PUSH
51642: LD_INT 2
51644: ARRAY
51645: PPUSH
51646: CALL_OW 297
51650: PUSH
51651: LD_VAR 0 5
51655: LESS
51656: IFFALSE 51719
// begin hex := hexes [ i ] ;
51658: LD_ADDR_VAR 0 7
51662: PUSH
51663: LD_VAR 0 2
51667: PUSH
51668: LD_VAR 0 4
51672: ARRAY
51673: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51674: LD_ADDR_VAR 0 5
51678: PUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: LD_VAR 0 2
51688: PUSH
51689: LD_VAR 0 4
51693: ARRAY
51694: PUSH
51695: LD_INT 1
51697: ARRAY
51698: PPUSH
51699: LD_VAR 0 2
51703: PUSH
51704: LD_VAR 0 4
51708: ARRAY
51709: PUSH
51710: LD_INT 2
51712: ARRAY
51713: PPUSH
51714: CALL_OW 297
51718: ST_TO_ADDR
// end ; end ;
51719: GO 51608
51721: POP
51722: POP
// result := hex ;
51723: LD_ADDR_VAR 0 3
51727: PUSH
51728: LD_VAR 0 7
51732: ST_TO_ADDR
// end ;
51733: LD_VAR 0 3
51737: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51738: LD_INT 0
51740: PPUSH
51741: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51742: LD_VAR 0 1
51746: NOT
51747: PUSH
51748: LD_VAR 0 1
51752: PUSH
51753: LD_INT 21
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 23
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PPUSH
51777: CALL_OW 69
51781: IN
51782: NOT
51783: OR
51784: IFFALSE 51788
// exit ;
51786: GO 51835
// for i = 1 to 3 do
51788: LD_ADDR_VAR 0 3
51792: PUSH
51793: DOUBLE
51794: LD_INT 1
51796: DEC
51797: ST_TO_ADDR
51798: LD_INT 3
51800: PUSH
51801: FOR_TO
51802: IFFALSE 51833
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51804: LD_VAR 0 1
51808: PPUSH
51809: CALL_OW 250
51813: PPUSH
51814: LD_VAR 0 1
51818: PPUSH
51819: CALL_OW 251
51823: PPUSH
51824: LD_INT 1
51826: PPUSH
51827: CALL_OW 453
51831: GO 51801
51833: POP
51834: POP
// end ;
51835: LD_VAR 0 2
51839: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51840: LD_INT 0
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51848: LD_VAR 0 1
51852: NOT
51853: PUSH
51854: LD_VAR 0 2
51858: NOT
51859: OR
51860: PUSH
51861: LD_VAR 0 1
51865: PPUSH
51866: CALL_OW 314
51870: OR
51871: IFFALSE 51875
// exit ;
51873: GO 52316
// x := GetX ( enemy_unit ) ;
51875: LD_ADDR_VAR 0 7
51879: PUSH
51880: LD_VAR 0 2
51884: PPUSH
51885: CALL_OW 250
51889: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51890: LD_ADDR_VAR 0 8
51894: PUSH
51895: LD_VAR 0 2
51899: PPUSH
51900: CALL_OW 251
51904: ST_TO_ADDR
// if not x or not y then
51905: LD_VAR 0 7
51909: NOT
51910: PUSH
51911: LD_VAR 0 8
51915: NOT
51916: OR
51917: IFFALSE 51921
// exit ;
51919: GO 52316
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51921: LD_ADDR_VAR 0 6
51925: PUSH
51926: LD_VAR 0 7
51930: PPUSH
51931: LD_INT 0
51933: PPUSH
51934: LD_INT 4
51936: PPUSH
51937: CALL_OW 272
51941: PUSH
51942: LD_VAR 0 8
51946: PPUSH
51947: LD_INT 0
51949: PPUSH
51950: LD_INT 4
51952: PPUSH
51953: CALL_OW 273
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_VAR 0 7
51966: PPUSH
51967: LD_INT 1
51969: PPUSH
51970: LD_INT 4
51972: PPUSH
51973: CALL_OW 272
51977: PUSH
51978: LD_VAR 0 8
51982: PPUSH
51983: LD_INT 1
51985: PPUSH
51986: LD_INT 4
51988: PPUSH
51989: CALL_OW 273
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_VAR 0 7
52002: PPUSH
52003: LD_INT 2
52005: PPUSH
52006: LD_INT 4
52008: PPUSH
52009: CALL_OW 272
52013: PUSH
52014: LD_VAR 0 8
52018: PPUSH
52019: LD_INT 2
52021: PPUSH
52022: LD_INT 4
52024: PPUSH
52025: CALL_OW 273
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_VAR 0 7
52038: PPUSH
52039: LD_INT 3
52041: PPUSH
52042: LD_INT 4
52044: PPUSH
52045: CALL_OW 272
52049: PUSH
52050: LD_VAR 0 8
52054: PPUSH
52055: LD_INT 3
52057: PPUSH
52058: LD_INT 4
52060: PPUSH
52061: CALL_OW 273
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_VAR 0 7
52074: PPUSH
52075: LD_INT 4
52077: PPUSH
52078: LD_INT 4
52080: PPUSH
52081: CALL_OW 272
52085: PUSH
52086: LD_VAR 0 8
52090: PPUSH
52091: LD_INT 4
52093: PPUSH
52094: LD_INT 4
52096: PPUSH
52097: CALL_OW 273
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_VAR 0 7
52110: PPUSH
52111: LD_INT 5
52113: PPUSH
52114: LD_INT 4
52116: PPUSH
52117: CALL_OW 272
52121: PUSH
52122: LD_VAR 0 8
52126: PPUSH
52127: LD_INT 5
52129: PPUSH
52130: LD_INT 4
52132: PPUSH
52133: CALL_OW 273
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: ST_TO_ADDR
// for i = tmp downto 1 do
52150: LD_ADDR_VAR 0 4
52154: PUSH
52155: DOUBLE
52156: LD_VAR 0 6
52160: INC
52161: ST_TO_ADDR
52162: LD_INT 1
52164: PUSH
52165: FOR_DOWNTO
52166: IFFALSE 52267
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52168: LD_VAR 0 6
52172: PUSH
52173: LD_VAR 0 4
52177: ARRAY
52178: PUSH
52179: LD_INT 1
52181: ARRAY
52182: PPUSH
52183: LD_VAR 0 6
52187: PUSH
52188: LD_VAR 0 4
52192: ARRAY
52193: PUSH
52194: LD_INT 2
52196: ARRAY
52197: PPUSH
52198: CALL_OW 488
52202: NOT
52203: PUSH
52204: LD_VAR 0 6
52208: PUSH
52209: LD_VAR 0 4
52213: ARRAY
52214: PUSH
52215: LD_INT 1
52217: ARRAY
52218: PPUSH
52219: LD_VAR 0 6
52223: PUSH
52224: LD_VAR 0 4
52228: ARRAY
52229: PUSH
52230: LD_INT 2
52232: ARRAY
52233: PPUSH
52234: CALL_OW 428
52238: PUSH
52239: LD_INT 0
52241: NONEQUAL
52242: OR
52243: IFFALSE 52265
// tmp := Delete ( tmp , i ) ;
52245: LD_ADDR_VAR 0 6
52249: PUSH
52250: LD_VAR 0 6
52254: PPUSH
52255: LD_VAR 0 4
52259: PPUSH
52260: CALL_OW 3
52264: ST_TO_ADDR
52265: GO 52165
52267: POP
52268: POP
// j := GetClosestHex ( unit , tmp ) ;
52269: LD_ADDR_VAR 0 5
52273: PUSH
52274: LD_VAR 0 1
52278: PPUSH
52279: LD_VAR 0 6
52283: PPUSH
52284: CALL 51569 0 2
52288: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52289: LD_VAR 0 1
52293: PPUSH
52294: LD_VAR 0 5
52298: PUSH
52299: LD_INT 1
52301: ARRAY
52302: PPUSH
52303: LD_VAR 0 5
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PPUSH
52312: CALL_OW 111
// end ;
52316: LD_VAR 0 3
52320: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52321: LD_INT 0
52323: PPUSH
52324: PPUSH
52325: PPUSH
// uc_side = 0 ;
52326: LD_ADDR_OWVAR 20
52330: PUSH
52331: LD_INT 0
52333: ST_TO_ADDR
// uc_nation = 0 ;
52334: LD_ADDR_OWVAR 21
52338: PUSH
52339: LD_INT 0
52341: ST_TO_ADDR
// InitHc_All ( ) ;
52342: CALL_OW 584
// InitVc ;
52346: CALL_OW 20
// if mastodonts then
52350: LD_VAR 0 6
52354: IFFALSE 52421
// for i = 1 to mastodonts do
52356: LD_ADDR_VAR 0 11
52360: PUSH
52361: DOUBLE
52362: LD_INT 1
52364: DEC
52365: ST_TO_ADDR
52366: LD_VAR 0 6
52370: PUSH
52371: FOR_TO
52372: IFFALSE 52419
// begin vc_chassis := 31 ;
52374: LD_ADDR_OWVAR 37
52378: PUSH
52379: LD_INT 31
52381: ST_TO_ADDR
// vc_control := control_rider ;
52382: LD_ADDR_OWVAR 38
52386: PUSH
52387: LD_INT 4
52389: ST_TO_ADDR
// animal := CreateVehicle ;
52390: LD_ADDR_VAR 0 12
52394: PUSH
52395: CALL_OW 45
52399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52400: LD_VAR 0 12
52404: PPUSH
52405: LD_VAR 0 8
52409: PPUSH
52410: LD_INT 0
52412: PPUSH
52413: CALL 54609 0 3
// end ;
52417: GO 52371
52419: POP
52420: POP
// if horses then
52421: LD_VAR 0 5
52425: IFFALSE 52492
// for i = 1 to horses do
52427: LD_ADDR_VAR 0 11
52431: PUSH
52432: DOUBLE
52433: LD_INT 1
52435: DEC
52436: ST_TO_ADDR
52437: LD_VAR 0 5
52441: PUSH
52442: FOR_TO
52443: IFFALSE 52490
// begin hc_class := 21 ;
52445: LD_ADDR_OWVAR 28
52449: PUSH
52450: LD_INT 21
52452: ST_TO_ADDR
// hc_gallery :=  ;
52453: LD_ADDR_OWVAR 33
52457: PUSH
52458: LD_STRING 
52460: ST_TO_ADDR
// animal := CreateHuman ;
52461: LD_ADDR_VAR 0 12
52465: PUSH
52466: CALL_OW 44
52470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52471: LD_VAR 0 12
52475: PPUSH
52476: LD_VAR 0 8
52480: PPUSH
52481: LD_INT 0
52483: PPUSH
52484: CALL 54609 0 3
// end ;
52488: GO 52442
52490: POP
52491: POP
// if birds then
52492: LD_VAR 0 1
52496: IFFALSE 52563
// for i = 1 to birds do
52498: LD_ADDR_VAR 0 11
52502: PUSH
52503: DOUBLE
52504: LD_INT 1
52506: DEC
52507: ST_TO_ADDR
52508: LD_VAR 0 1
52512: PUSH
52513: FOR_TO
52514: IFFALSE 52561
// begin hc_class = 18 ;
52516: LD_ADDR_OWVAR 28
52520: PUSH
52521: LD_INT 18
52523: ST_TO_ADDR
// hc_gallery =  ;
52524: LD_ADDR_OWVAR 33
52528: PUSH
52529: LD_STRING 
52531: ST_TO_ADDR
// animal := CreateHuman ;
52532: LD_ADDR_VAR 0 12
52536: PUSH
52537: CALL_OW 44
52541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52542: LD_VAR 0 12
52546: PPUSH
52547: LD_VAR 0 8
52551: PPUSH
52552: LD_INT 0
52554: PPUSH
52555: CALL 54609 0 3
// end ;
52559: GO 52513
52561: POP
52562: POP
// if tigers then
52563: LD_VAR 0 2
52567: IFFALSE 52651
// for i = 1 to tigers do
52569: LD_ADDR_VAR 0 11
52573: PUSH
52574: DOUBLE
52575: LD_INT 1
52577: DEC
52578: ST_TO_ADDR
52579: LD_VAR 0 2
52583: PUSH
52584: FOR_TO
52585: IFFALSE 52649
// begin hc_class = class_tiger ;
52587: LD_ADDR_OWVAR 28
52591: PUSH
52592: LD_INT 14
52594: ST_TO_ADDR
// hc_gallery =  ;
52595: LD_ADDR_OWVAR 33
52599: PUSH
52600: LD_STRING 
52602: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52603: LD_ADDR_OWVAR 35
52607: PUSH
52608: LD_INT 7
52610: NEG
52611: PPUSH
52612: LD_INT 7
52614: PPUSH
52615: CALL_OW 12
52619: ST_TO_ADDR
// animal := CreateHuman ;
52620: LD_ADDR_VAR 0 12
52624: PUSH
52625: CALL_OW 44
52629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52630: LD_VAR 0 12
52634: PPUSH
52635: LD_VAR 0 8
52639: PPUSH
52640: LD_INT 0
52642: PPUSH
52643: CALL 54609 0 3
// end ;
52647: GO 52584
52649: POP
52650: POP
// if apemans then
52651: LD_VAR 0 3
52655: IFFALSE 52778
// for i = 1 to apemans do
52657: LD_ADDR_VAR 0 11
52661: PUSH
52662: DOUBLE
52663: LD_INT 1
52665: DEC
52666: ST_TO_ADDR
52667: LD_VAR 0 3
52671: PUSH
52672: FOR_TO
52673: IFFALSE 52776
// begin hc_class = class_apeman ;
52675: LD_ADDR_OWVAR 28
52679: PUSH
52680: LD_INT 12
52682: ST_TO_ADDR
// hc_gallery =  ;
52683: LD_ADDR_OWVAR 33
52687: PUSH
52688: LD_STRING 
52690: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52691: LD_ADDR_OWVAR 35
52695: PUSH
52696: LD_INT 5
52698: NEG
52699: PPUSH
52700: LD_INT 5
52702: PPUSH
52703: CALL_OW 12
52707: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52708: LD_ADDR_OWVAR 31
52712: PUSH
52713: LD_INT 1
52715: PPUSH
52716: LD_INT 3
52718: PPUSH
52719: CALL_OW 12
52723: PUSH
52724: LD_INT 1
52726: PPUSH
52727: LD_INT 3
52729: PPUSH
52730: CALL_OW 12
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: ST_TO_ADDR
// animal := CreateHuman ;
52747: LD_ADDR_VAR 0 12
52751: PUSH
52752: CALL_OW 44
52756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52757: LD_VAR 0 12
52761: PPUSH
52762: LD_VAR 0 8
52766: PPUSH
52767: LD_INT 0
52769: PPUSH
52770: CALL 54609 0 3
// end ;
52774: GO 52672
52776: POP
52777: POP
// if enchidnas then
52778: LD_VAR 0 4
52782: IFFALSE 52849
// for i = 1 to enchidnas do
52784: LD_ADDR_VAR 0 11
52788: PUSH
52789: DOUBLE
52790: LD_INT 1
52792: DEC
52793: ST_TO_ADDR
52794: LD_VAR 0 4
52798: PUSH
52799: FOR_TO
52800: IFFALSE 52847
// begin hc_class = 13 ;
52802: LD_ADDR_OWVAR 28
52806: PUSH
52807: LD_INT 13
52809: ST_TO_ADDR
// hc_gallery =  ;
52810: LD_ADDR_OWVAR 33
52814: PUSH
52815: LD_STRING 
52817: ST_TO_ADDR
// animal := CreateHuman ;
52818: LD_ADDR_VAR 0 12
52822: PUSH
52823: CALL_OW 44
52827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52828: LD_VAR 0 12
52832: PPUSH
52833: LD_VAR 0 8
52837: PPUSH
52838: LD_INT 0
52840: PPUSH
52841: CALL 54609 0 3
// end ;
52845: GO 52799
52847: POP
52848: POP
// if fishes then
52849: LD_VAR 0 7
52853: IFFALSE 52920
// for i = 1 to fishes do
52855: LD_ADDR_VAR 0 11
52859: PUSH
52860: DOUBLE
52861: LD_INT 1
52863: DEC
52864: ST_TO_ADDR
52865: LD_VAR 0 7
52869: PUSH
52870: FOR_TO
52871: IFFALSE 52918
// begin hc_class = 20 ;
52873: LD_ADDR_OWVAR 28
52877: PUSH
52878: LD_INT 20
52880: ST_TO_ADDR
// hc_gallery =  ;
52881: LD_ADDR_OWVAR 33
52885: PUSH
52886: LD_STRING 
52888: ST_TO_ADDR
// animal := CreateHuman ;
52889: LD_ADDR_VAR 0 12
52893: PUSH
52894: CALL_OW 44
52898: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52899: LD_VAR 0 12
52903: PPUSH
52904: LD_VAR 0 9
52908: PPUSH
52909: LD_INT 0
52911: PPUSH
52912: CALL 54609 0 3
// end ;
52916: GO 52870
52918: POP
52919: POP
// end ;
52920: LD_VAR 0 10
52924: RET
// export function WantHeal ( sci , unit ) ; begin
52925: LD_INT 0
52927: PPUSH
// if GetTaskList ( sci ) > 0 then
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 437
52937: PUSH
52938: LD_INT 0
52940: GREATER
52941: IFFALSE 53011
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52943: LD_VAR 0 1
52947: PPUSH
52948: CALL_OW 437
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PUSH
52957: LD_INT 1
52959: ARRAY
52960: PUSH
52961: LD_STRING l
52963: EQUAL
52964: PUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 437
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: PUSH
52979: LD_INT 4
52981: ARRAY
52982: PUSH
52983: LD_VAR 0 2
52987: EQUAL
52988: AND
52989: IFFALSE 53001
// result := true else
52991: LD_ADDR_VAR 0 3
52995: PUSH
52996: LD_INT 1
52998: ST_TO_ADDR
52999: GO 53009
// result := false ;
53001: LD_ADDR_VAR 0 3
53005: PUSH
53006: LD_INT 0
53008: ST_TO_ADDR
// end else
53009: GO 53019
// result := false ;
53011: LD_ADDR_VAR 0 3
53015: PUSH
53016: LD_INT 0
53018: ST_TO_ADDR
// end ;
53019: LD_VAR 0 3
53023: RET
// export function HealTarget ( sci ) ; begin
53024: LD_INT 0
53026: PPUSH
// if not sci then
53027: LD_VAR 0 1
53031: NOT
53032: IFFALSE 53036
// exit ;
53034: GO 53101
// result := 0 ;
53036: LD_ADDR_VAR 0 2
53040: PUSH
53041: LD_INT 0
53043: ST_TO_ADDR
// if GetTaskList ( sci ) then
53044: LD_VAR 0 1
53048: PPUSH
53049: CALL_OW 437
53053: IFFALSE 53101
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53055: LD_VAR 0 1
53059: PPUSH
53060: CALL_OW 437
53064: PUSH
53065: LD_INT 1
53067: ARRAY
53068: PUSH
53069: LD_INT 1
53071: ARRAY
53072: PUSH
53073: LD_STRING l
53075: EQUAL
53076: IFFALSE 53101
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53078: LD_ADDR_VAR 0 2
53082: PUSH
53083: LD_VAR 0 1
53087: PPUSH
53088: CALL_OW 437
53092: PUSH
53093: LD_INT 1
53095: ARRAY
53096: PUSH
53097: LD_INT 4
53099: ARRAY
53100: ST_TO_ADDR
// end ;
53101: LD_VAR 0 2
53105: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53106: LD_INT 0
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
// if not base_units then
53112: LD_VAR 0 1
53116: NOT
53117: IFFALSE 53121
// exit ;
53119: GO 53208
// result := false ;
53121: LD_ADDR_VAR 0 2
53125: PUSH
53126: LD_INT 0
53128: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53129: LD_ADDR_VAR 0 5
53133: PUSH
53134: LD_VAR 0 1
53138: PPUSH
53139: LD_INT 21
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PPUSH
53149: CALL_OW 72
53153: ST_TO_ADDR
// if not tmp then
53154: LD_VAR 0 5
53158: NOT
53159: IFFALSE 53163
// exit ;
53161: GO 53208
// for i in tmp do
53163: LD_ADDR_VAR 0 3
53167: PUSH
53168: LD_VAR 0 5
53172: PUSH
53173: FOR_IN
53174: IFFALSE 53206
// begin result := EnemyInRange ( i , 22 ) ;
53176: LD_ADDR_VAR 0 2
53180: PUSH
53181: LD_VAR 0 3
53185: PPUSH
53186: LD_INT 22
53188: PPUSH
53189: CALL 51444 0 2
53193: ST_TO_ADDR
// if result then
53194: LD_VAR 0 2
53198: IFFALSE 53204
// exit ;
53200: POP
53201: POP
53202: GO 53208
// end ;
53204: GO 53173
53206: POP
53207: POP
// end ;
53208: LD_VAR 0 2
53212: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53213: LD_INT 0
53215: PPUSH
53216: PPUSH
// if not units then
53217: LD_VAR 0 1
53221: NOT
53222: IFFALSE 53226
// exit ;
53224: GO 53296
// result := [ ] ;
53226: LD_ADDR_VAR 0 3
53230: PUSH
53231: EMPTY
53232: ST_TO_ADDR
// for i in units do
53233: LD_ADDR_VAR 0 4
53237: PUSH
53238: LD_VAR 0 1
53242: PUSH
53243: FOR_IN
53244: IFFALSE 53294
// if GetTag ( i ) = tag then
53246: LD_VAR 0 4
53250: PPUSH
53251: CALL_OW 110
53255: PUSH
53256: LD_VAR 0 2
53260: EQUAL
53261: IFFALSE 53292
// result := Insert ( result , result + 1 , i ) ;
53263: LD_ADDR_VAR 0 3
53267: PUSH
53268: LD_VAR 0 3
53272: PPUSH
53273: LD_VAR 0 3
53277: PUSH
53278: LD_INT 1
53280: PLUS
53281: PPUSH
53282: LD_VAR 0 4
53286: PPUSH
53287: CALL_OW 2
53291: ST_TO_ADDR
53292: GO 53243
53294: POP
53295: POP
// end ;
53296: LD_VAR 0 3
53300: RET
// export function IsDriver ( un ) ; begin
53301: LD_INT 0
53303: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53304: LD_ADDR_VAR 0 2
53308: PUSH
53309: LD_VAR 0 1
53313: PUSH
53314: LD_INT 55
53316: PUSH
53317: EMPTY
53318: LIST
53319: PPUSH
53320: CALL_OW 69
53324: IN
53325: ST_TO_ADDR
// end ;
53326: LD_VAR 0 2
53330: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53331: LD_INT 0
53333: PPUSH
53334: PPUSH
// list := [ ] ;
53335: LD_ADDR_VAR 0 5
53339: PUSH
53340: EMPTY
53341: ST_TO_ADDR
// case d of 0 :
53342: LD_VAR 0 3
53346: PUSH
53347: LD_INT 0
53349: DOUBLE
53350: EQUAL
53351: IFTRUE 53355
53353: GO 53488
53355: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53356: LD_ADDR_VAR 0 5
53360: PUSH
53361: LD_VAR 0 1
53365: PUSH
53366: LD_INT 4
53368: MINUS
53369: PUSH
53370: LD_VAR 0 2
53374: PUSH
53375: LD_INT 4
53377: MINUS
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: LIST
53386: PUSH
53387: LD_VAR 0 1
53391: PUSH
53392: LD_INT 3
53394: MINUS
53395: PUSH
53396: LD_VAR 0 2
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: PUSH
53409: LD_VAR 0 1
53413: PUSH
53414: LD_INT 4
53416: PLUS
53417: PUSH
53418: LD_VAR 0 2
53422: PUSH
53423: LD_INT 4
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: PUSH
53431: LD_VAR 0 1
53435: PUSH
53436: LD_INT 3
53438: PLUS
53439: PUSH
53440: LD_VAR 0 2
53444: PUSH
53445: LD_INT 3
53447: PLUS
53448: PUSH
53449: LD_INT 5
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: PUSH
53457: LD_VAR 0 1
53461: PUSH
53462: LD_VAR 0 2
53466: PUSH
53467: LD_INT 4
53469: PLUS
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// end ; 1 :
53486: GO 54186
53488: LD_INT 1
53490: DOUBLE
53491: EQUAL
53492: IFTRUE 53496
53494: GO 53629
53496: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53497: LD_ADDR_VAR 0 5
53501: PUSH
53502: LD_VAR 0 1
53506: PUSH
53507: LD_VAR 0 2
53511: PUSH
53512: LD_INT 4
53514: MINUS
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: PUSH
53524: LD_VAR 0 1
53528: PUSH
53529: LD_INT 3
53531: MINUS
53532: PUSH
53533: LD_VAR 0 2
53537: PUSH
53538: LD_INT 3
53540: MINUS
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: PUSH
53550: LD_VAR 0 1
53554: PUSH
53555: LD_INT 4
53557: MINUS
53558: PUSH
53559: LD_VAR 0 2
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: PUSH
53572: LD_VAR 0 1
53576: PUSH
53577: LD_VAR 0 2
53581: PUSH
53582: LD_INT 3
53584: PLUS
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: PUSH
53594: LD_VAR 0 1
53598: PUSH
53599: LD_INT 4
53601: PLUS
53602: PUSH
53603: LD_VAR 0 2
53607: PUSH
53608: LD_INT 4
53610: PLUS
53611: PUSH
53612: LD_INT 5
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// end ; 2 :
53627: GO 54186
53629: LD_INT 2
53631: DOUBLE
53632: EQUAL
53633: IFTRUE 53637
53635: GO 53766
53637: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53638: LD_ADDR_VAR 0 5
53642: PUSH
53643: LD_VAR 0 1
53647: PUSH
53648: LD_VAR 0 2
53652: PUSH
53653: LD_INT 3
53655: MINUS
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: PUSH
53665: LD_VAR 0 1
53669: PUSH
53670: LD_INT 4
53672: PLUS
53673: PUSH
53674: LD_VAR 0 2
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: LD_VAR 0 1
53691: PUSH
53692: LD_VAR 0 2
53696: PUSH
53697: LD_INT 4
53699: PLUS
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: PUSH
53709: LD_VAR 0 1
53713: PUSH
53714: LD_INT 3
53716: MINUS
53717: PUSH
53718: LD_VAR 0 2
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: PUSH
53731: LD_VAR 0 1
53735: PUSH
53736: LD_INT 4
53738: MINUS
53739: PUSH
53740: LD_VAR 0 2
53744: PUSH
53745: LD_INT 4
53747: MINUS
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// end ; 3 :
53764: GO 54186
53766: LD_INT 3
53768: DOUBLE
53769: EQUAL
53770: IFTRUE 53774
53772: GO 53907
53774: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53775: LD_ADDR_VAR 0 5
53779: PUSH
53780: LD_VAR 0 1
53784: PUSH
53785: LD_INT 3
53787: PLUS
53788: PUSH
53789: LD_VAR 0 2
53793: PUSH
53794: LD_INT 4
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: PUSH
53802: LD_VAR 0 1
53806: PUSH
53807: LD_INT 4
53809: PLUS
53810: PUSH
53811: LD_VAR 0 2
53815: PUSH
53816: LD_INT 4
53818: PLUS
53819: PUSH
53820: LD_INT 5
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: PUSH
53828: LD_VAR 0 1
53832: PUSH
53833: LD_INT 4
53835: MINUS
53836: PUSH
53837: LD_VAR 0 2
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: PUSH
53850: LD_VAR 0 1
53854: PUSH
53855: LD_VAR 0 2
53859: PUSH
53860: LD_INT 4
53862: MINUS
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: PUSH
53872: LD_VAR 0 1
53876: PUSH
53877: LD_INT 3
53879: MINUS
53880: PUSH
53881: LD_VAR 0 2
53885: PUSH
53886: LD_INT 3
53888: MINUS
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// end ; 4 :
53905: GO 54186
53907: LD_INT 4
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 54048
53915: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53916: LD_ADDR_VAR 0 5
53920: PUSH
53921: LD_VAR 0 1
53925: PUSH
53926: LD_VAR 0 2
53930: PUSH
53931: LD_INT 4
53933: PLUS
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: PUSH
53943: LD_VAR 0 1
53947: PUSH
53948: LD_INT 3
53950: PLUS
53951: PUSH
53952: LD_VAR 0 2
53956: PUSH
53957: LD_INT 3
53959: PLUS
53960: PUSH
53961: LD_INT 5
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: PUSH
53969: LD_VAR 0 1
53973: PUSH
53974: LD_INT 4
53976: PLUS
53977: PUSH
53978: LD_VAR 0 2
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: PUSH
53991: LD_VAR 0 1
53995: PUSH
53996: LD_VAR 0 2
54000: PUSH
54001: LD_INT 3
54003: MINUS
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: PUSH
54013: LD_VAR 0 1
54017: PUSH
54018: LD_INT 4
54020: MINUS
54021: PUSH
54022: LD_VAR 0 2
54026: PUSH
54027: LD_INT 4
54029: MINUS
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// end ; 5 :
54046: GO 54186
54048: LD_INT 5
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 54185
54056: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54057: LD_ADDR_VAR 0 5
54061: PUSH
54062: LD_VAR 0 1
54066: PUSH
54067: LD_INT 4
54069: MINUS
54070: PUSH
54071: LD_VAR 0 2
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: PUSH
54084: LD_VAR 0 1
54088: PUSH
54089: LD_VAR 0 2
54093: PUSH
54094: LD_INT 4
54096: MINUS
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: PUSH
54106: LD_VAR 0 1
54110: PUSH
54111: LD_INT 4
54113: PLUS
54114: PUSH
54115: LD_VAR 0 2
54119: PUSH
54120: LD_INT 4
54122: PLUS
54123: PUSH
54124: LD_INT 5
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: LIST
54131: PUSH
54132: LD_VAR 0 1
54136: PUSH
54137: LD_INT 3
54139: PLUS
54140: PUSH
54141: LD_VAR 0 2
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: PUSH
54154: LD_VAR 0 1
54158: PUSH
54159: LD_VAR 0 2
54163: PUSH
54164: LD_INT 3
54166: PLUS
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// end ; end ;
54183: GO 54186
54185: POP
// result := list ;
54186: LD_ADDR_VAR 0 4
54190: PUSH
54191: LD_VAR 0 5
54195: ST_TO_ADDR
// end ;
54196: LD_VAR 0 4
54200: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54201: LD_INT 0
54203: PPUSH
54204: PPUSH
54205: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54206: LD_VAR 0 1
54210: NOT
54211: PUSH
54212: LD_VAR 0 2
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: IN
54235: NOT
54236: OR
54237: IFFALSE 54241
// exit ;
54239: GO 54333
// tmp := [ ] ;
54241: LD_ADDR_VAR 0 5
54245: PUSH
54246: EMPTY
54247: ST_TO_ADDR
// for i in units do
54248: LD_ADDR_VAR 0 4
54252: PUSH
54253: LD_VAR 0 1
54257: PUSH
54258: FOR_IN
54259: IFFALSE 54302
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54261: LD_ADDR_VAR 0 5
54265: PUSH
54266: LD_VAR 0 5
54270: PPUSH
54271: LD_VAR 0 5
54275: PUSH
54276: LD_INT 1
54278: PLUS
54279: PPUSH
54280: LD_VAR 0 4
54284: PPUSH
54285: LD_VAR 0 2
54289: PPUSH
54290: CALL_OW 259
54294: PPUSH
54295: CALL_OW 2
54299: ST_TO_ADDR
54300: GO 54258
54302: POP
54303: POP
// if not tmp then
54304: LD_VAR 0 5
54308: NOT
54309: IFFALSE 54313
// exit ;
54311: GO 54333
// result := SortListByListDesc ( units , tmp ) ;
54313: LD_ADDR_VAR 0 3
54317: PUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: LD_VAR 0 5
54327: PPUSH
54328: CALL_OW 77
54332: ST_TO_ADDR
// end ;
54333: LD_VAR 0 3
54337: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54338: LD_INT 0
54340: PPUSH
54341: PPUSH
54342: PPUSH
// result := false ;
54343: LD_ADDR_VAR 0 3
54347: PUSH
54348: LD_INT 0
54350: ST_TO_ADDR
// x := GetX ( building ) ;
54351: LD_ADDR_VAR 0 4
54355: PUSH
54356: LD_VAR 0 2
54360: PPUSH
54361: CALL_OW 250
54365: ST_TO_ADDR
// y := GetY ( building ) ;
54366: LD_ADDR_VAR 0 5
54370: PUSH
54371: LD_VAR 0 2
54375: PPUSH
54376: CALL_OW 251
54380: ST_TO_ADDR
// if not building or not x or not y then
54381: LD_VAR 0 2
54385: NOT
54386: PUSH
54387: LD_VAR 0 4
54391: NOT
54392: OR
54393: PUSH
54394: LD_VAR 0 5
54398: NOT
54399: OR
54400: IFFALSE 54404
// exit ;
54402: GO 54496
// if GetTaskList ( unit ) then
54404: LD_VAR 0 1
54408: PPUSH
54409: CALL_OW 437
54413: IFFALSE 54496
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54415: LD_STRING e
54417: PUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 437
54427: PUSH
54428: LD_INT 1
54430: ARRAY
54431: PUSH
54432: LD_INT 1
54434: ARRAY
54435: EQUAL
54436: PUSH
54437: LD_VAR 0 4
54441: PUSH
54442: LD_VAR 0 1
54446: PPUSH
54447: CALL_OW 437
54451: PUSH
54452: LD_INT 1
54454: ARRAY
54455: PUSH
54456: LD_INT 2
54458: ARRAY
54459: EQUAL
54460: AND
54461: PUSH
54462: LD_VAR 0 5
54466: PUSH
54467: LD_VAR 0 1
54471: PPUSH
54472: CALL_OW 437
54476: PUSH
54477: LD_INT 1
54479: ARRAY
54480: PUSH
54481: LD_INT 3
54483: ARRAY
54484: EQUAL
54485: AND
54486: IFFALSE 54496
// result := true end ;
54488: LD_ADDR_VAR 0 3
54492: PUSH
54493: LD_INT 1
54495: ST_TO_ADDR
// end ;
54496: LD_VAR 0 3
54500: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54501: LD_INT 0
54503: PPUSH
// result := false ;
54504: LD_ADDR_VAR 0 4
54508: PUSH
54509: LD_INT 0
54511: ST_TO_ADDR
// if GetTaskList ( unit ) then
54512: LD_VAR 0 1
54516: PPUSH
54517: CALL_OW 437
54521: IFFALSE 54604
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54523: LD_STRING M
54525: PUSH
54526: LD_VAR 0 1
54530: PPUSH
54531: CALL_OW 437
54535: PUSH
54536: LD_INT 1
54538: ARRAY
54539: PUSH
54540: LD_INT 1
54542: ARRAY
54543: EQUAL
54544: PUSH
54545: LD_VAR 0 2
54549: PUSH
54550: LD_VAR 0 1
54554: PPUSH
54555: CALL_OW 437
54559: PUSH
54560: LD_INT 1
54562: ARRAY
54563: PUSH
54564: LD_INT 2
54566: ARRAY
54567: EQUAL
54568: AND
54569: PUSH
54570: LD_VAR 0 3
54574: PUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: CALL_OW 437
54584: PUSH
54585: LD_INT 1
54587: ARRAY
54588: PUSH
54589: LD_INT 3
54591: ARRAY
54592: EQUAL
54593: AND
54594: IFFALSE 54604
// result := true ;
54596: LD_ADDR_VAR 0 4
54600: PUSH
54601: LD_INT 1
54603: ST_TO_ADDR
// end ; end ;
54604: LD_VAR 0 4
54608: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54609: LD_INT 0
54611: PPUSH
54612: PPUSH
54613: PPUSH
54614: PPUSH
// if not unit or not area then
54615: LD_VAR 0 1
54619: NOT
54620: PUSH
54621: LD_VAR 0 2
54625: NOT
54626: OR
54627: IFFALSE 54631
// exit ;
54629: GO 54795
// tmp := AreaToList ( area , i ) ;
54631: LD_ADDR_VAR 0 6
54635: PUSH
54636: LD_VAR 0 2
54640: PPUSH
54641: LD_VAR 0 5
54645: PPUSH
54646: CALL_OW 517
54650: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54651: LD_ADDR_VAR 0 5
54655: PUSH
54656: DOUBLE
54657: LD_INT 1
54659: DEC
54660: ST_TO_ADDR
54661: LD_VAR 0 6
54665: PUSH
54666: LD_INT 1
54668: ARRAY
54669: PUSH
54670: FOR_TO
54671: IFFALSE 54793
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54673: LD_ADDR_VAR 0 7
54677: PUSH
54678: LD_VAR 0 6
54682: PUSH
54683: LD_INT 1
54685: ARRAY
54686: PUSH
54687: LD_VAR 0 5
54691: ARRAY
54692: PUSH
54693: LD_VAR 0 6
54697: PUSH
54698: LD_INT 2
54700: ARRAY
54701: PUSH
54702: LD_VAR 0 5
54706: ARRAY
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54712: LD_VAR 0 7
54716: PUSH
54717: LD_INT 1
54719: ARRAY
54720: PPUSH
54721: LD_VAR 0 7
54725: PUSH
54726: LD_INT 2
54728: ARRAY
54729: PPUSH
54730: CALL_OW 428
54734: PUSH
54735: LD_INT 0
54737: EQUAL
54738: IFFALSE 54791
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54740: LD_VAR 0 1
54744: PPUSH
54745: LD_VAR 0 7
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PPUSH
54754: LD_VAR 0 7
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: LD_VAR 0 3
54767: PPUSH
54768: CALL_OW 48
// result := IsPlaced ( unit ) ;
54772: LD_ADDR_VAR 0 4
54776: PUSH
54777: LD_VAR 0 1
54781: PPUSH
54782: CALL_OW 305
54786: ST_TO_ADDR
// exit ;
54787: POP
54788: POP
54789: GO 54795
// end ; end ;
54791: GO 54670
54793: POP
54794: POP
// end ;
54795: LD_VAR 0 4
54799: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54800: LD_INT 0
54802: PPUSH
54803: PPUSH
54804: PPUSH
// if not side or side > 8 then
54805: LD_VAR 0 1
54809: NOT
54810: PUSH
54811: LD_VAR 0 1
54815: PUSH
54816: LD_INT 8
54818: GREATER
54819: OR
54820: IFFALSE 54824
// exit ;
54822: GO 55011
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54824: LD_ADDR_VAR 0 4
54828: PUSH
54829: LD_INT 22
54831: PUSH
54832: LD_VAR 0 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 21
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PPUSH
54855: CALL_OW 69
54859: ST_TO_ADDR
// if not tmp then
54860: LD_VAR 0 4
54864: NOT
54865: IFFALSE 54869
// exit ;
54867: GO 55011
// enable_addtolog := true ;
54869: LD_ADDR_OWVAR 81
54873: PUSH
54874: LD_INT 1
54876: ST_TO_ADDR
// AddToLog ( [ ) ;
54877: LD_STRING [
54879: PPUSH
54880: CALL_OW 561
// for i in tmp do
54884: LD_ADDR_VAR 0 3
54888: PUSH
54889: LD_VAR 0 4
54893: PUSH
54894: FOR_IN
54895: IFFALSE 55002
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54897: LD_STRING [
54899: PUSH
54900: LD_VAR 0 3
54904: PPUSH
54905: CALL_OW 266
54909: STR
54910: PUSH
54911: LD_STRING , 
54913: STR
54914: PUSH
54915: LD_VAR 0 3
54919: PPUSH
54920: CALL_OW 250
54924: STR
54925: PUSH
54926: LD_STRING , 
54928: STR
54929: PUSH
54930: LD_VAR 0 3
54934: PPUSH
54935: CALL_OW 251
54939: STR
54940: PUSH
54941: LD_STRING , 
54943: STR
54944: PUSH
54945: LD_VAR 0 3
54949: PPUSH
54950: CALL_OW 254
54954: STR
54955: PUSH
54956: LD_STRING , 
54958: STR
54959: PUSH
54960: LD_VAR 0 3
54964: PPUSH
54965: LD_INT 1
54967: PPUSH
54968: CALL_OW 268
54972: STR
54973: PUSH
54974: LD_STRING , 
54976: STR
54977: PUSH
54978: LD_VAR 0 3
54982: PPUSH
54983: LD_INT 2
54985: PPUSH
54986: CALL_OW 268
54990: STR
54991: PUSH
54992: LD_STRING ],
54994: STR
54995: PPUSH
54996: CALL_OW 561
// end ;
55000: GO 54894
55002: POP
55003: POP
// AddToLog ( ]; ) ;
55004: LD_STRING ];
55006: PPUSH
55007: CALL_OW 561
// end ;
55011: LD_VAR 0 2
55015: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55016: LD_INT 0
55018: PPUSH
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
// if not area or not rate or not max then
55023: LD_VAR 0 1
55027: NOT
55028: PUSH
55029: LD_VAR 0 2
55033: NOT
55034: OR
55035: PUSH
55036: LD_VAR 0 4
55040: NOT
55041: OR
55042: IFFALSE 55046
// exit ;
55044: GO 55238
// while 1 do
55046: LD_INT 1
55048: IFFALSE 55238
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55050: LD_ADDR_VAR 0 9
55054: PUSH
55055: LD_VAR 0 1
55059: PPUSH
55060: LD_INT 1
55062: PPUSH
55063: CALL_OW 287
55067: PUSH
55068: LD_INT 10
55070: MUL
55071: ST_TO_ADDR
// r := rate / 10 ;
55072: LD_ADDR_VAR 0 7
55076: PUSH
55077: LD_VAR 0 2
55081: PUSH
55082: LD_INT 10
55084: DIVREAL
55085: ST_TO_ADDR
// time := 1 1$00 ;
55086: LD_ADDR_VAR 0 8
55090: PUSH
55091: LD_INT 2100
55093: ST_TO_ADDR
// if amount < min then
55094: LD_VAR 0 9
55098: PUSH
55099: LD_VAR 0 3
55103: LESS
55104: IFFALSE 55122
// r := r * 2 else
55106: LD_ADDR_VAR 0 7
55110: PUSH
55111: LD_VAR 0 7
55115: PUSH
55116: LD_INT 2
55118: MUL
55119: ST_TO_ADDR
55120: GO 55148
// if amount > max then
55122: LD_VAR 0 9
55126: PUSH
55127: LD_VAR 0 4
55131: GREATER
55132: IFFALSE 55148
// r := r / 2 ;
55134: LD_ADDR_VAR 0 7
55138: PUSH
55139: LD_VAR 0 7
55143: PUSH
55144: LD_INT 2
55146: DIVREAL
55147: ST_TO_ADDR
// time := time / r ;
55148: LD_ADDR_VAR 0 8
55152: PUSH
55153: LD_VAR 0 8
55157: PUSH
55158: LD_VAR 0 7
55162: DIVREAL
55163: ST_TO_ADDR
// if time < 0 then
55164: LD_VAR 0 8
55168: PUSH
55169: LD_INT 0
55171: LESS
55172: IFFALSE 55189
// time := time * - 1 ;
55174: LD_ADDR_VAR 0 8
55178: PUSH
55179: LD_VAR 0 8
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: MUL
55188: ST_TO_ADDR
// wait ( time ) ;
55189: LD_VAR 0 8
55193: PPUSH
55194: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55198: LD_INT 35
55200: PPUSH
55201: LD_INT 875
55203: PPUSH
55204: CALL_OW 12
55208: PPUSH
55209: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55213: LD_INT 1
55215: PPUSH
55216: LD_INT 5
55218: PPUSH
55219: CALL_OW 12
55223: PPUSH
55224: LD_VAR 0 1
55228: PPUSH
55229: LD_INT 1
55231: PPUSH
55232: CALL_OW 55
// end ;
55236: GO 55046
// end ;
55238: LD_VAR 0 5
55242: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55243: LD_INT 0
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
// if not turrets or not factories then
55253: LD_VAR 0 1
55257: NOT
55258: PUSH
55259: LD_VAR 0 2
55263: NOT
55264: OR
55265: IFFALSE 55269
// exit ;
55267: GO 55576
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55269: LD_ADDR_VAR 0 10
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: LD_INT 6
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 4
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 5
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 24
55311: PUSH
55312: LD_INT 25
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 23
55321: PUSH
55322: LD_INT 27
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 42
55335: PUSH
55336: LD_INT 43
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 44
55345: PUSH
55346: LD_INT 46
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 45
55355: PUSH
55356: LD_INT 47
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// result := [ ] ;
55373: LD_ADDR_VAR 0 3
55377: PUSH
55378: EMPTY
55379: ST_TO_ADDR
// for i in turrets do
55380: LD_ADDR_VAR 0 4
55384: PUSH
55385: LD_VAR 0 1
55389: PUSH
55390: FOR_IN
55391: IFFALSE 55574
// begin nat := GetNation ( i ) ;
55393: LD_ADDR_VAR 0 7
55397: PUSH
55398: LD_VAR 0 4
55402: PPUSH
55403: CALL_OW 248
55407: ST_TO_ADDR
// weapon := 0 ;
55408: LD_ADDR_VAR 0 8
55412: PUSH
55413: LD_INT 0
55415: ST_TO_ADDR
// if not nat then
55416: LD_VAR 0 7
55420: NOT
55421: IFFALSE 55425
// continue ;
55423: GO 55390
// for j in list [ nat ] do
55425: LD_ADDR_VAR 0 5
55429: PUSH
55430: LD_VAR 0 10
55434: PUSH
55435: LD_VAR 0 7
55439: ARRAY
55440: PUSH
55441: FOR_IN
55442: IFFALSE 55483
// if GetBWeapon ( i ) = j [ 1 ] then
55444: LD_VAR 0 4
55448: PPUSH
55449: CALL_OW 269
55453: PUSH
55454: LD_VAR 0 5
55458: PUSH
55459: LD_INT 1
55461: ARRAY
55462: EQUAL
55463: IFFALSE 55481
// begin weapon := j [ 2 ] ;
55465: LD_ADDR_VAR 0 8
55469: PUSH
55470: LD_VAR 0 5
55474: PUSH
55475: LD_INT 2
55477: ARRAY
55478: ST_TO_ADDR
// break ;
55479: GO 55483
// end ;
55481: GO 55441
55483: POP
55484: POP
// if not weapon then
55485: LD_VAR 0 8
55489: NOT
55490: IFFALSE 55494
// continue ;
55492: GO 55390
// for k in factories do
55494: LD_ADDR_VAR 0 6
55498: PUSH
55499: LD_VAR 0 2
55503: PUSH
55504: FOR_IN
55505: IFFALSE 55570
// begin weapons := AvailableWeaponList ( k ) ;
55507: LD_ADDR_VAR 0 9
55511: PUSH
55512: LD_VAR 0 6
55516: PPUSH
55517: CALL_OW 478
55521: ST_TO_ADDR
// if not weapons then
55522: LD_VAR 0 9
55526: NOT
55527: IFFALSE 55531
// continue ;
55529: GO 55504
// if weapon in weapons then
55531: LD_VAR 0 8
55535: PUSH
55536: LD_VAR 0 9
55540: IN
55541: IFFALSE 55568
// begin result := [ i , weapon ] ;
55543: LD_ADDR_VAR 0 3
55547: PUSH
55548: LD_VAR 0 4
55552: PUSH
55553: LD_VAR 0 8
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// exit ;
55562: POP
55563: POP
55564: POP
55565: POP
55566: GO 55576
// end ; end ;
55568: GO 55504
55570: POP
55571: POP
// end ;
55572: GO 55390
55574: POP
55575: POP
// end ;
55576: LD_VAR 0 3
55580: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55581: LD_INT 0
55583: PPUSH
// if not side or side > 8 then
55584: LD_VAR 0 3
55588: NOT
55589: PUSH
55590: LD_VAR 0 3
55594: PUSH
55595: LD_INT 8
55597: GREATER
55598: OR
55599: IFFALSE 55603
// exit ;
55601: GO 55662
// if not range then
55603: LD_VAR 0 4
55607: NOT
55608: IFFALSE 55619
// range := - 12 ;
55610: LD_ADDR_VAR 0 4
55614: PUSH
55615: LD_INT 12
55617: NEG
55618: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55619: LD_VAR 0 1
55623: PPUSH
55624: LD_VAR 0 2
55628: PPUSH
55629: LD_VAR 0 3
55633: PPUSH
55634: LD_VAR 0 4
55638: PPUSH
55639: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55643: LD_VAR 0 1
55647: PPUSH
55648: LD_VAR 0 2
55652: PPUSH
55653: LD_VAR 0 3
55657: PPUSH
55658: CALL_OW 331
// end ;
55662: LD_VAR 0 5
55666: RET
// export function Video ( mode ) ; begin
55667: LD_INT 0
55669: PPUSH
// ingame_video = mode ;
55670: LD_ADDR_OWVAR 52
55674: PUSH
55675: LD_VAR 0 1
55679: ST_TO_ADDR
// interface_hidden = mode ;
55680: LD_ADDR_OWVAR 54
55684: PUSH
55685: LD_VAR 0 1
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 2
55694: RET
// export function Join ( array , element ) ; begin
55695: LD_INT 0
55697: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55698: LD_ADDR_VAR 0 3
55702: PUSH
55703: LD_VAR 0 1
55707: PPUSH
55708: LD_VAR 0 1
55712: PUSH
55713: LD_INT 1
55715: PLUS
55716: PPUSH
55717: LD_VAR 0 2
55721: PPUSH
55722: CALL_OW 1
55726: ST_TO_ADDR
// end ;
55727: LD_VAR 0 3
55731: RET
// export function JoinUnion ( array , element ) ; begin
55732: LD_INT 0
55734: PPUSH
// result := array union element ;
55735: LD_ADDR_VAR 0 3
55739: PUSH
55740: LD_VAR 0 1
55744: PUSH
55745: LD_VAR 0 2
55749: UNION
55750: ST_TO_ADDR
// end ;
55751: LD_VAR 0 3
55755: RET
// export function GetBehemoths ( side ) ; begin
55756: LD_INT 0
55758: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55759: LD_ADDR_VAR 0 2
55763: PUSH
55764: LD_INT 22
55766: PUSH
55767: LD_VAR 0 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 31
55778: PUSH
55779: LD_INT 25
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PPUSH
55790: CALL_OW 69
55794: ST_TO_ADDR
// end ;
55795: LD_VAR 0 2
55799: RET
// export function Shuffle ( array ) ; var i , index ; begin
55800: LD_INT 0
55802: PPUSH
55803: PPUSH
55804: PPUSH
// result := [ ] ;
55805: LD_ADDR_VAR 0 2
55809: PUSH
55810: EMPTY
55811: ST_TO_ADDR
// if not array then
55812: LD_VAR 0 1
55816: NOT
55817: IFFALSE 55821
// exit ;
55819: GO 55920
// Randomize ;
55821: CALL_OW 10
// for i = array downto 1 do
55825: LD_ADDR_VAR 0 3
55829: PUSH
55830: DOUBLE
55831: LD_VAR 0 1
55835: INC
55836: ST_TO_ADDR
55837: LD_INT 1
55839: PUSH
55840: FOR_DOWNTO
55841: IFFALSE 55918
// begin index := rand ( 1 , array ) ;
55843: LD_ADDR_VAR 0 4
55847: PUSH
55848: LD_INT 1
55850: PPUSH
55851: LD_VAR 0 1
55855: PPUSH
55856: CALL_OW 12
55860: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55861: LD_ADDR_VAR 0 2
55865: PUSH
55866: LD_VAR 0 2
55870: PPUSH
55871: LD_VAR 0 2
55875: PUSH
55876: LD_INT 1
55878: PLUS
55879: PPUSH
55880: LD_VAR 0 1
55884: PUSH
55885: LD_VAR 0 4
55889: ARRAY
55890: PPUSH
55891: CALL_OW 2
55895: ST_TO_ADDR
// array := Delete ( array , index ) ;
55896: LD_ADDR_VAR 0 1
55900: PUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_VAR 0 4
55910: PPUSH
55911: CALL_OW 3
55915: ST_TO_ADDR
// end ;
55916: GO 55840
55918: POP
55919: POP
// end ;
55920: LD_VAR 0 2
55924: RET
// export function GetBaseMaterials ( base ) ; begin
55925: LD_INT 0
55927: PPUSH
// result := [ 0 , 0 , 0 ] ;
55928: LD_ADDR_VAR 0 2
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// if not base then
55947: LD_VAR 0 1
55951: NOT
55952: IFFALSE 55956
// exit ;
55954: GO 56005
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55956: LD_ADDR_VAR 0 2
55960: PUSH
55961: LD_VAR 0 1
55965: PPUSH
55966: LD_INT 1
55968: PPUSH
55969: CALL_OW 275
55973: PUSH
55974: LD_VAR 0 1
55978: PPUSH
55979: LD_INT 2
55981: PPUSH
55982: CALL_OW 275
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: LD_INT 3
55994: PPUSH
55995: CALL_OW 275
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// end ;
56005: LD_VAR 0 2
56009: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56010: LD_INT 0
56012: PPUSH
56013: PPUSH
// result := array ;
56014: LD_ADDR_VAR 0 3
56018: PUSH
56019: LD_VAR 0 1
56023: ST_TO_ADDR
// if size > 0 then
56024: LD_VAR 0 2
56028: PUSH
56029: LD_INT 0
56031: GREATER
56032: IFFALSE 56078
// for i := array downto size do
56034: LD_ADDR_VAR 0 4
56038: PUSH
56039: DOUBLE
56040: LD_VAR 0 1
56044: INC
56045: ST_TO_ADDR
56046: LD_VAR 0 2
56050: PUSH
56051: FOR_DOWNTO
56052: IFFALSE 56076
// result := Delete ( result , result ) ;
56054: LD_ADDR_VAR 0 3
56058: PUSH
56059: LD_VAR 0 3
56063: PPUSH
56064: LD_VAR 0 3
56068: PPUSH
56069: CALL_OW 3
56073: ST_TO_ADDR
56074: GO 56051
56076: POP
56077: POP
// end ;
56078: LD_VAR 0 3
56082: RET
// export function ComExit ( unit ) ; var tmp ; begin
56083: LD_INT 0
56085: PPUSH
56086: PPUSH
// if not IsInUnit ( unit ) then
56087: LD_VAR 0 1
56091: PPUSH
56092: CALL_OW 310
56096: NOT
56097: IFFALSE 56101
// exit ;
56099: GO 56161
// tmp := IsInUnit ( unit ) ;
56101: LD_ADDR_VAR 0 3
56105: PUSH
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL_OW 310
56115: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56116: LD_VAR 0 3
56120: PPUSH
56121: CALL_OW 247
56125: PUSH
56126: LD_INT 2
56128: EQUAL
56129: IFFALSE 56142
// ComExitVehicle ( unit ) else
56131: LD_VAR 0 1
56135: PPUSH
56136: CALL_OW 121
56140: GO 56151
// ComExitBuilding ( unit ) ;
56142: LD_VAR 0 1
56146: PPUSH
56147: CALL_OW 122
// result := tmp ;
56151: LD_ADDR_VAR 0 2
56155: PUSH
56156: LD_VAR 0 3
56160: ST_TO_ADDR
// end ;
56161: LD_VAR 0 2
56165: RET
// export function ComExitAll ( units ) ; var i ; begin
56166: LD_INT 0
56168: PPUSH
56169: PPUSH
// if not units then
56170: LD_VAR 0 1
56174: NOT
56175: IFFALSE 56179
// exit ;
56177: GO 56205
// for i in units do
56179: LD_ADDR_VAR 0 3
56183: PUSH
56184: LD_VAR 0 1
56188: PUSH
56189: FOR_IN
56190: IFFALSE 56203
// ComExit ( i ) ;
56192: LD_VAR 0 3
56196: PPUSH
56197: CALL 56083 0 1
56201: GO 56189
56203: POP
56204: POP
// end ;
56205: LD_VAR 0 2
56209: RET
// export function ResetHc ; begin
56210: LD_INT 0
56212: PPUSH
// InitHc ;
56213: CALL_OW 19
// hc_importance := 0 ;
56217: LD_ADDR_OWVAR 32
56221: PUSH
56222: LD_INT 0
56224: ST_TO_ADDR
// end ;
56225: LD_VAR 0 1
56229: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56230: LD_INT 0
56232: PPUSH
56233: PPUSH
56234: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56235: LD_ADDR_VAR 0 6
56239: PUSH
56240: LD_VAR 0 1
56244: PUSH
56245: LD_VAR 0 3
56249: PLUS
56250: PUSH
56251: LD_INT 2
56253: DIV
56254: ST_TO_ADDR
// if _x < 0 then
56255: LD_VAR 0 6
56259: PUSH
56260: LD_INT 0
56262: LESS
56263: IFFALSE 56280
// _x := _x * - 1 ;
56265: LD_ADDR_VAR 0 6
56269: PUSH
56270: LD_VAR 0 6
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: MUL
56279: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56280: LD_ADDR_VAR 0 7
56284: PUSH
56285: LD_VAR 0 2
56289: PUSH
56290: LD_VAR 0 4
56294: PLUS
56295: PUSH
56296: LD_INT 2
56298: DIV
56299: ST_TO_ADDR
// if _y < 0 then
56300: LD_VAR 0 7
56304: PUSH
56305: LD_INT 0
56307: LESS
56308: IFFALSE 56325
// _y := _y * - 1 ;
56310: LD_ADDR_VAR 0 7
56314: PUSH
56315: LD_VAR 0 7
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: MUL
56324: ST_TO_ADDR
// result := [ _x , _y ] ;
56325: LD_ADDR_VAR 0 5
56329: PUSH
56330: LD_VAR 0 6
56334: PUSH
56335: LD_VAR 0 7
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// end ;
56344: LD_VAR 0 5
56348: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56349: LD_INT 0
56351: PPUSH
56352: PPUSH
56353: PPUSH
56354: PPUSH
// task := GetTaskList ( unit ) ;
56355: LD_ADDR_VAR 0 7
56359: PUSH
56360: LD_VAR 0 1
56364: PPUSH
56365: CALL_OW 437
56369: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56370: LD_VAR 0 7
56374: NOT
56375: PUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: LD_VAR 0 2
56385: PPUSH
56386: CALL_OW 308
56390: NOT
56391: AND
56392: IFFALSE 56396
// exit ;
56394: GO 56514
// if IsInArea ( unit , area ) then
56396: LD_VAR 0 1
56400: PPUSH
56401: LD_VAR 0 2
56405: PPUSH
56406: CALL_OW 308
56410: IFFALSE 56428
// begin ComMoveToArea ( unit , goAway ) ;
56412: LD_VAR 0 1
56416: PPUSH
56417: LD_VAR 0 3
56421: PPUSH
56422: CALL_OW 113
// exit ;
56426: GO 56514
// end ; if task [ 1 ] [ 1 ] <> M then
56428: LD_VAR 0 7
56432: PUSH
56433: LD_INT 1
56435: ARRAY
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PUSH
56441: LD_STRING M
56443: NONEQUAL
56444: IFFALSE 56448
// exit ;
56446: GO 56514
// x := task [ 1 ] [ 2 ] ;
56448: LD_ADDR_VAR 0 5
56452: PUSH
56453: LD_VAR 0 7
56457: PUSH
56458: LD_INT 1
56460: ARRAY
56461: PUSH
56462: LD_INT 2
56464: ARRAY
56465: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56466: LD_ADDR_VAR 0 6
56470: PUSH
56471: LD_VAR 0 7
56475: PUSH
56476: LD_INT 1
56478: ARRAY
56479: PUSH
56480: LD_INT 3
56482: ARRAY
56483: ST_TO_ADDR
// if InArea ( x , y , area ) then
56484: LD_VAR 0 5
56488: PPUSH
56489: LD_VAR 0 6
56493: PPUSH
56494: LD_VAR 0 2
56498: PPUSH
56499: CALL_OW 309
56503: IFFALSE 56514
// ComStop ( unit ) ;
56505: LD_VAR 0 1
56509: PPUSH
56510: CALL_OW 141
// end ;
56514: LD_VAR 0 4
56518: RET
// export function Abs ( value ) ; begin
56519: LD_INT 0
56521: PPUSH
// result := value ;
56522: LD_ADDR_VAR 0 2
56526: PUSH
56527: LD_VAR 0 1
56531: ST_TO_ADDR
// if value < 0 then
56532: LD_VAR 0 1
56536: PUSH
56537: LD_INT 0
56539: LESS
56540: IFFALSE 56557
// result := value * - 1 ;
56542: LD_ADDR_VAR 0 2
56546: PUSH
56547: LD_VAR 0 1
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: MUL
56556: ST_TO_ADDR
// end ;
56557: LD_VAR 0 2
56561: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56562: LD_INT 0
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
56568: PPUSH
56569: PPUSH
56570: PPUSH
56571: PPUSH
// if not unit or not building then
56572: LD_VAR 0 1
56576: NOT
56577: PUSH
56578: LD_VAR 0 2
56582: NOT
56583: OR
56584: IFFALSE 56588
// exit ;
56586: GO 56814
// x := GetX ( building ) ;
56588: LD_ADDR_VAR 0 4
56592: PUSH
56593: LD_VAR 0 2
56597: PPUSH
56598: CALL_OW 250
56602: ST_TO_ADDR
// y := GetY ( building ) ;
56603: LD_ADDR_VAR 0 6
56607: PUSH
56608: LD_VAR 0 2
56612: PPUSH
56613: CALL_OW 251
56617: ST_TO_ADDR
// d := GetDir ( building ) ;
56618: LD_ADDR_VAR 0 8
56622: PUSH
56623: LD_VAR 0 2
56627: PPUSH
56628: CALL_OW 254
56632: ST_TO_ADDR
// r := 4 ;
56633: LD_ADDR_VAR 0 9
56637: PUSH
56638: LD_INT 4
56640: ST_TO_ADDR
// for i := 1 to 5 do
56641: LD_ADDR_VAR 0 10
56645: PUSH
56646: DOUBLE
56647: LD_INT 1
56649: DEC
56650: ST_TO_ADDR
56651: LD_INT 5
56653: PUSH
56654: FOR_TO
56655: IFFALSE 56812
// begin _x := ShiftX ( x , d , r + i ) ;
56657: LD_ADDR_VAR 0 5
56661: PUSH
56662: LD_VAR 0 4
56666: PPUSH
56667: LD_VAR 0 8
56671: PPUSH
56672: LD_VAR 0 9
56676: PUSH
56677: LD_VAR 0 10
56681: PLUS
56682: PPUSH
56683: CALL_OW 272
56687: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56688: LD_ADDR_VAR 0 7
56692: PUSH
56693: LD_VAR 0 6
56697: PPUSH
56698: LD_VAR 0 8
56702: PPUSH
56703: LD_VAR 0 9
56707: PUSH
56708: LD_VAR 0 10
56712: PLUS
56713: PPUSH
56714: CALL_OW 273
56718: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56719: LD_VAR 0 5
56723: PPUSH
56724: LD_VAR 0 7
56728: PPUSH
56729: CALL_OW 488
56733: PUSH
56734: LD_VAR 0 5
56738: PPUSH
56739: LD_VAR 0 7
56743: PPUSH
56744: CALL_OW 428
56748: PPUSH
56749: CALL_OW 247
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: IN
56764: NOT
56765: AND
56766: IFFALSE 56810
// begin ComMoveXY ( unit , _x , _y ) ;
56768: LD_VAR 0 1
56772: PPUSH
56773: LD_VAR 0 5
56777: PPUSH
56778: LD_VAR 0 7
56782: PPUSH
56783: CALL_OW 111
// result := [ _x , _y ] ;
56787: LD_ADDR_VAR 0 3
56791: PUSH
56792: LD_VAR 0 5
56796: PUSH
56797: LD_VAR 0 7
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// exit ;
56806: POP
56807: POP
56808: GO 56814
// end ; end ;
56810: GO 56654
56812: POP
56813: POP
// end ;
56814: LD_VAR 0 3
56818: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56819: LD_INT 0
56821: PPUSH
56822: PPUSH
56823: PPUSH
// result := 0 ;
56824: LD_ADDR_VAR 0 3
56828: PUSH
56829: LD_INT 0
56831: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56832: LD_VAR 0 1
56836: PUSH
56837: LD_INT 0
56839: LESS
56840: PUSH
56841: LD_VAR 0 1
56845: PUSH
56846: LD_INT 8
56848: GREATER
56849: OR
56850: PUSH
56851: LD_VAR 0 2
56855: PUSH
56856: LD_INT 0
56858: LESS
56859: OR
56860: PUSH
56861: LD_VAR 0 2
56865: PUSH
56866: LD_INT 8
56868: GREATER
56869: OR
56870: IFFALSE 56874
// exit ;
56872: GO 56949
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56874: LD_ADDR_VAR 0 4
56878: PUSH
56879: LD_INT 22
56881: PUSH
56882: LD_VAR 0 2
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PPUSH
56891: CALL_OW 69
56895: PUSH
56896: FOR_IN
56897: IFFALSE 56947
// begin un := UnitShoot ( i ) ;
56899: LD_ADDR_VAR 0 5
56903: PUSH
56904: LD_VAR 0 4
56908: PPUSH
56909: CALL_OW 504
56913: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56914: LD_VAR 0 5
56918: PPUSH
56919: CALL_OW 255
56923: PUSH
56924: LD_VAR 0 1
56928: EQUAL
56929: IFFALSE 56945
// begin result := un ;
56931: LD_ADDR_VAR 0 3
56935: PUSH
56936: LD_VAR 0 5
56940: ST_TO_ADDR
// exit ;
56941: POP
56942: POP
56943: GO 56949
// end ; end ;
56945: GO 56896
56947: POP
56948: POP
// end ;
56949: LD_VAR 0 3
56953: RET
// export function GetCargoBay ( units ) ; begin
56954: LD_INT 0
56956: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56957: LD_ADDR_VAR 0 2
56961: PUSH
56962: LD_VAR 0 1
56966: PPUSH
56967: LD_INT 2
56969: PUSH
56970: LD_INT 34
56972: PUSH
56973: LD_INT 12
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 34
56982: PUSH
56983: LD_INT 51
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 34
56992: PUSH
56993: LD_INT 32
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 34
57002: PUSH
57003: LD_EXP 75
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: PPUSH
57019: CALL_OW 72
57023: ST_TO_ADDR
// end ; end_of_file
57024: LD_VAR 0 2
57028: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
57029: LD_VAR 0 1
57033: PPUSH
57034: LD_VAR 0 2
57038: PPUSH
57039: LD_VAR 0 3
57043: PPUSH
57044: LD_VAR 0 4
57048: PPUSH
57049: LD_VAR 0 5
57053: PPUSH
57054: LD_VAR 0 6
57058: PPUSH
57059: CALL 1863 0 6
// end ;
57063: PPOPN 6
57065: END
