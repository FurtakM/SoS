// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// PrepareNature ( nat_area , wat_area , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 395 0 3
// PrepareHunters ( ) ;
  70: CALL 241 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export class_horse ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// class_horse := 21 ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_INT 21
  93: ST_TO_ADDR
// if debug then
  94: LD_EXP 1
  98: IFFALSE 133
// begin FogOff ( 1 ) ;
 100: LD_INT 1
 102: PPUSH
 103: CALL_OW 344
// Difficulty := 2 ;
 107: LD_ADDR_OWVAR 67
 111: PUSH
 112: LD_INT 2
 114: ST_TO_ADDR
// hunterClass := 3 ;
 115: LD_ADDR_EXP 2
 119: PUSH
 120: LD_INT 3
 122: ST_TO_ADDR
// animalAmount := 2 ;
 123: LD_ADDR_EXP 4
 127: PUSH
 128: LD_INT 2
 130: ST_TO_ADDR
// end else
 131: GO 172
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 133: LD_ADDR_OWVAR 67
 137: PUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 426
 145: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 146: LD_ADDR_EXP 2
 150: PUSH
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 426
 158: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 159: LD_ADDR_EXP 4
 163: PUSH
 164: LD_INT 1
 166: PPUSH
 167: CALL_OW 426
 171: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 3
 176: PUSH
 177: LD_INT 4
 179: PUSH
 180: LD_INT 6
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 197: LD_ADDR_EXP 6
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// export function PrepareHunters ; var i , un ; begin
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
 245: PPUSH
// for i := 1 to huntersAmount do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 3
 260: PUSH
 261: FOR_TO
 262: IFFALSE 388
// begin uc_side := i ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 3
 286: MOD
 287: PUSH
 288: LD_INT 1
 290: PLUS
 291: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 292: LD_INT 0
 294: PPUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 5
 300: PUSH
 301: LD_INT 11
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_EXP 2
 313: ARRAY
 314: PPUSH
 315: LD_INT 10
 317: PUSH
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: MUL
 326: MINUS
 327: PPUSH
 328: CALL_OW 380
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 3
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 342: LD_ADDR_EXP 7
 346: PUSH
 347: LD_EXP 7
 351: PPUSH
 352: LD_EXP 7
 356: PUSH
 357: LD_INT 1
 359: PLUS
 360: PPUSH
 361: LD_VAR 0 3
 365: PPUSH
 366: CALL_OW 1
 370: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 371: LD_VAR 0 3
 375: PPUSH
 376: LD_INT 4
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: CALL_OW 49
// end ;
 386: GO 261
 388: POP
 389: POP
// end ; end_of_file
 390: LD_VAR 0 1
 394: RET
// export function PrepareNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
// uc_side = 0 ;
 402: LD_ADDR_OWVAR 20
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// uc_nation = 0 ;
 410: LD_ADDR_OWVAR 21
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 418: LD_ADDR_VAR 0 7
 422: PUSH
 423: LD_INT 12
 425: PUSH
 426: LD_INT 15
 428: PUSH
 429: LD_INT 13
 431: PUSH
 432: LD_INT 18
 434: PUSH
 435: LD_INT 14
 437: PUSH
 438: LD_EXP 5
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: LD_INT 20
 458: PUSH
 459: EMPTY
 460: LIST
 461: ST_TO_ADDR
// InitHc_All ( ) ;
 462: CALL_OW 584
// for i := 1 to numbers - 2 do
 466: LD_ADDR_VAR 0 5
 470: PUSH
 471: DOUBLE
 472: LD_INT 1
 474: DEC
 475: ST_TO_ADDR
 476: LD_VAR 0 3
 480: PUSH
 481: LD_INT 2
 483: MINUS
 484: PUSH
 485: FOR_TO
 486: IFFALSE 627
// begin if numbers [ i ] = 0 then
 488: LD_VAR 0 3
 492: PUSH
 493: LD_VAR 0 5
 497: ARRAY
 498: PUSH
 499: LD_INT 0
 501: EQUAL
 502: IFFALSE 506
// continue ;
 504: GO 485
// hc_class := classes [ i ] ;
 506: LD_ADDR_OWVAR 28
 510: PUSH
 511: LD_VAR 0 7
 515: PUSH
 516: LD_VAR 0 5
 520: ARRAY
 521: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 522: LD_ADDR_OWVAR 29
 526: PUSH
 527: LD_INT 8
 529: PPUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 12
 537: PUSH
 538: LD_INT 8
 540: PPUSH
 541: LD_INT 12
 543: PPUSH
 544: CALL_OW 12
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 553: LD_ADDR_OWVAR 35
 557: PUSH
 558: LD_INT 5
 560: NEG
 561: PPUSH
 562: LD_INT 5
 564: PPUSH
 565: CALL_OW 12
 569: PUSH
 570: LD_OWVAR 67
 574: PUSH
 575: LD_INT 5
 577: MUL
 578: PLUS
 579: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 580: LD_ADDR_VAR 0 6
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_VAR 0 3
 594: PUSH
 595: LD_VAR 0 5
 599: ARRAY
 600: PUSH
 601: FOR_TO
 602: IFFALSE 623
// PlaceUnitArea ( CreateHuman , area , false ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_VAR 0 1
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
 621: GO 601
 623: POP
 624: POP
// end ;
 625: GO 485
 627: POP
 628: POP
// if not waterArea then
 629: LD_VAR 0 2
 633: NOT
 634: IFFALSE 638
// exit ;
 636: GO 718
// hc_class := waterClass [ 1 ] ;
 638: LD_ADDR_OWVAR 28
 642: PUSH
 643: LD_VAR 0 8
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 652: LD_ADDR_OWVAR 29
 656: PUSH
 657: LD_INT 10
 659: PUSH
 660: LD_INT 10
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: ST_TO_ADDR
// hc_agressivity := 0 ;
 667: LD_ADDR_OWVAR 35
 671: PUSH
 672: LD_INT 0
 674: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 675: LD_ADDR_VAR 0 6
 679: PUSH
 680: DOUBLE
 681: LD_INT 1
 683: DEC
 684: ST_TO_ADDR
 685: LD_VAR 0 3
 689: PUSH
 690: LD_INT 7
 692: ARRAY
 693: PUSH
 694: FOR_TO
 695: IFFALSE 716
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_VAR 0 2
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
 714: GO 694
 716: POP
 717: POP
// end ; end_of_file
 718: LD_VAR 0 4
 722: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 723: LD_INT 22
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 25
 735: PUSH
 736: LD_INT 15
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PPUSH
 747: CALL_OW 69
 751: IFFALSE 857
 753: GO 755
 755: DISABLE
 756: LD_INT 0
 758: PPUSH
// begin enable ;
 759: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 760: LD_ADDR_VAR 0 1
 764: PUSH
 765: LD_INT 22
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: LD_INT 25
 777: PUSH
 778: LD_INT 15
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PPUSH
 789: CALL_OW 69
 793: PUSH
 794: FOR_IN
 795: IFFALSE 855
// if GetLives ( i ) < 1000 then
 797: LD_VAR 0 1
 801: PPUSH
 802: CALL_OW 256
 806: PUSH
 807: LD_INT 1000
 809: LESS
 810: IFFALSE 853
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_INT 3
 819: PUSH
 820: LD_INT 22
 822: PUSH
 823: LD_INT 0
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: PPUSH
 839: LD_VAR 0 1
 843: PPUSH
 844: CALL_OW 74
 848: PPUSH
 849: CALL_OW 115
 853: GO 794
 855: POP
 856: POP
// end ;
 857: PPOPN 1
 859: END
// every 3 do var i , enemy , x , y , d ;
 860: GO 862
 862: DISABLE
 863: LD_INT 0
 865: PPUSH
 866: PPUSH
 867: PPUSH
 868: PPUSH
 869: PPUSH
// begin enable ;
 870: ENABLE
// for i := 2 to huntersAmount do
 871: LD_ADDR_VAR 0 1
 875: PUSH
 876: DOUBLE
 877: LD_INT 2
 879: DEC
 880: ST_TO_ADDR
 881: LD_EXP 3
 885: PUSH
 886: FOR_TO
 887: IFFALSE 1226
// begin if not HasTask ( hunters [ i ] ) then
 889: LD_EXP 7
 893: PUSH
 894: LD_VAR 0 1
 898: ARRAY
 899: PPUSH
 900: CALL_OW 314
 904: NOT
 905: IFFALSE 1224
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 907: LD_ADDR_VAR 0 2
 911: PUSH
 912: LD_INT 22
 914: PUSH
 915: LD_INT 0
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PPUSH
 922: CALL_OW 69
 926: PPUSH
 927: LD_EXP 7
 931: PUSH
 932: LD_VAR 0 1
 936: ARRAY
 937: PPUSH
 938: CALL_OW 74
 942: ST_TO_ADDR
// if not enemy then
 943: LD_VAR 0 2
 947: NOT
 948: IFFALSE 952
// continue ;
 950: GO 886
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 952: LD_EXP 7
 956: PUSH
 957: LD_VAR 0 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PPUSH
 968: CALL_OW 296
 972: PUSH
 973: LD_INT 17
 975: LESS
 976: IFFALSE 1079
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 978: LD_EXP 7
 982: PUSH
 983: LD_VAR 0 1
 987: ARRAY
 988: PPUSH
 989: CALL_OW 257
 993: PUSH
 994: LD_INT 11
 996: EQUAL
 997: IFFALSE 1057
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 999: LD_VAR 0 2
1003: PPUSH
1004: CALL_OW 257
1008: PUSH
1009: LD_INT 19
1011: PUSH
1012: LD_INT 20
1014: PUSH
1015: LD_INT 13
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: IN
1023: IFFALSE 1042
// ComCarabine ( hunters [ i ] ) else
1025: LD_EXP 7
1029: PUSH
1030: LD_VAR 0 1
1034: ARRAY
1035: PPUSH
1036: CALL_OW 162
1040: GO 1057
// ComSabre ( hunters [ i ] ) ;
1042: LD_EXP 7
1046: PUSH
1047: LD_VAR 0 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1057: LD_EXP 7
1061: PUSH
1062: LD_VAR 0 1
1066: ARRAY
1067: PPUSH
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 115
// end else
1077: GO 1224
// begin d := rand ( 0 , 5 ) ;
1079: LD_ADDR_VAR 0 5
1083: PUSH
1084: LD_INT 0
1086: PPUSH
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 12
1094: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1095: LD_ADDR_VAR 0 3
1099: PUSH
1100: LD_EXP 7
1104: PUSH
1105: LD_VAR 0 1
1109: ARRAY
1110: PPUSH
1111: CALL_OW 250
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 8
1123: PPUSH
1124: CALL_OW 272
1128: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1129: LD_ADDR_VAR 0 4
1133: PUSH
1134: LD_EXP 7
1138: PUSH
1139: LD_VAR 0 1
1143: ARRAY
1144: PPUSH
1145: CALL_OW 251
1149: PPUSH
1150: LD_VAR 0 5
1154: PPUSH
1155: LD_INT 8
1157: PPUSH
1158: CALL_OW 273
1162: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1163: LD_VAR 0 3
1167: PPUSH
1168: LD_VAR 0 4
1172: PPUSH
1173: CALL_OW 488
1177: PUSH
1178: LD_VAR 0 3
1182: PPUSH
1183: LD_VAR 0 4
1187: PPUSH
1188: CALL_OW 428
1192: PUSH
1193: LD_INT 0
1195: EQUAL
1196: AND
1197: IFFALSE 1224
// ComMoveXY ( hunters [ i ] , x , y ) ;
1199: LD_EXP 7
1203: PUSH
1204: LD_VAR 0 1
1208: ARRAY
1209: PPUSH
1210: LD_VAR 0 3
1214: PPUSH
1215: LD_VAR 0 4
1219: PPUSH
1220: CALL_OW 111
// end ; end ; end ;
1224: GO 886
1226: POP
1227: POP
// end ; end_of_file
1228: PPOPN 5
1230: END
// on UnitGoesToRed ( un ) do var i ;
1231: LD_INT 0
1233: PPUSH
// begin if GetSide ( un ) = 1 then
1234: LD_VAR 0 1
1238: PPUSH
1239: CALL_OW 255
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1256
// YouLost ( hunt2 ) ;
1249: LD_STRING hunt2
1251: PPUSH
1252: CALL_OW 104
// if GetSide ( un ) > 1 then
1256: LD_VAR 0 1
1260: PPUSH
1261: CALL_OW 255
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1322
// begin for i := 1 to 6 do
1271: LD_ADDR_VAR 0 2
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 6
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1308
// begin wait ( 0 0$1 ) ;
1287: LD_INT 35
1289: PPUSH
1290: CALL_OW 67
// SetLives ( un , 249 ) ;
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 249
1301: PPUSH
1302: CALL_OW 234
// end ;
1306: GO 1284
1308: POP
1309: POP
// SetLives ( un , 1000 ) ;
1310: LD_VAR 0 1
1314: PPUSH
1315: LD_INT 1000
1317: PPUSH
1318: CALL_OW 234
// end ; end ;
1322: PPOPN 2
1324: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1325: LD_VAR 0 1
1329: PUSH
1330: LD_INT 1
1332: EQUAL
1333: PUSH
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 1
1341: GREATER
1342: AND
1343: IFFALSE 1352
// YouLost ( hunt1 ) ;
1345: LD_STRING hunt1
1347: PPUSH
1348: CALL_OW 104
// end ;
1352: PPOPN 2
1354: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1355: LD_INT 0
1357: PPUSH
// begin point := 0 ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 257
1375: PUSH
1376: LD_INT 20
1378: DOUBLE
1379: EQUAL
1380: IFTRUE 1384
1382: GO 1395
1384: POP
// point := 10 ; class_horse :
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: LD_INT 10
1392: ST_TO_ADDR
1393: GO 1531
1395: LD_EXP 5
1399: DOUBLE
1400: EQUAL
1401: IFTRUE 1405
1403: GO 1416
1405: POP
// point := 10 ; class_baggie :
1406: LD_ADDR_VAR 0 4
1410: PUSH
1411: LD_INT 10
1413: ST_TO_ADDR
1414: GO 1531
1416: LD_INT 13
1418: DOUBLE
1419: EQUAL
1420: IFTRUE 1424
1422: GO 1435
1424: POP
// point := 5 ; class_phororhacos :
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: LD_INT 5
1432: ST_TO_ADDR
1433: GO 1531
1435: LD_INT 18
1437: DOUBLE
1438: EQUAL
1439: IFTRUE 1443
1441: GO 1454
1443: POP
// point := 10 ; class_tiger :
1444: LD_ADDR_VAR 0 4
1448: PUSH
1449: LD_INT 10
1451: ST_TO_ADDR
1452: GO 1531
1454: LD_INT 14
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 20 ; class_apeman :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 20
1470: ST_TO_ADDR
1471: GO 1531
1473: LD_INT 12
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 30 ; class_apeman_soldier :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 30
1489: ST_TO_ADDR
1490: GO 1531
1492: LD_INT 15
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 50 ; class_frog :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 50
1508: ST_TO_ADDR
1509: GO 1531
1511: LD_INT 19
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; end ;
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1531
1530: POP
// if point then
1531: LD_VAR 0 4
1535: IFFALSE 1574
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1537: LD_ADDR_EXP 6
1541: PUSH
1542: LD_EXP 6
1546: PPUSH
1547: LD_VAR 0 2
1551: PPUSH
1552: LD_EXP 6
1556: PUSH
1557: LD_VAR 0 2
1561: ARRAY
1562: PUSH
1563: LD_VAR 0 4
1567: PLUS
1568: PPUSH
1569: CALL_OW 1
1573: ST_TO_ADDR
// end ;
1574: PPOPN 4
1576: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1577: LD_INT 22
1579: PUSH
1580: LD_INT 0
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 69
1591: PUSH
1592: LD_INT 10
1594: LESS
1595: IFFALSE 1697
1597: GO 1599
1599: DISABLE
// begin enable ;
1600: ENABLE
// PrepareNature ( nat_area , wat_area , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1601: LD_INT 2
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: LD_INT 4
1612: PPUSH
1613: CALL_OW 12
1617: PUSH
1618: LD_INT 0
1620: PPUSH
1621: LD_INT 2
1623: PPUSH
1624: CALL_OW 12
1628: PUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_INT 4
1634: PPUSH
1635: CALL_OW 12
1639: PUSH
1640: LD_INT 2
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: CALL_OW 12
1650: PUSH
1651: LD_INT 2
1653: PPUSH
1654: LD_INT 4
1656: PPUSH
1657: CALL_OW 12
1661: PUSH
1662: LD_INT 0
1664: PPUSH
1665: LD_INT 2
1667: PPUSH
1668: CALL_OW 12
1672: PUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 4
1678: PPUSH
1679: CALL_OW 12
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL 395 0 3
// end ;
1697: END
// every 0 0$1 do var i ;
1698: GO 1700
1700: DISABLE
1701: LD_INT 0
1703: PPUSH
// begin enable ;
1704: ENABLE
// display_strings := [ ] ;
1705: LD_ADDR_OWVAR 47
1709: PUSH
1710: EMPTY
1711: ST_TO_ADDR
// for i := 1 to huntersAmount do
1712: LD_ADDR_VAR 0 1
1716: PUSH
1717: DOUBLE
1718: LD_INT 1
1720: DEC
1721: ST_TO_ADDR
1722: LD_EXP 3
1726: PUSH
1727: FOR_TO
1728: IFFALSE 1862
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1730: LD_ADDR_OWVAR 47
1734: PUSH
1735: LD_OWVAR 47
1739: PUSH
1740: LD_STRING #player
1742: PUSH
1743: LD_VAR 0 1
1747: STR
1748: PUSH
1749: LD_VAR 0 1
1753: PUSH
1754: LD_EXP 6
1758: PUSH
1759: LD_VAR 0 1
1763: ARRAY
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: ADD
1770: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1771: LD_EXP 6
1775: PUSH
1776: LD_VAR 0 1
1780: ARRAY
1781: PUSH
1782: LD_INT 750
1784: PUSH
1785: LD_INT 1250
1787: PUSH
1788: LD_INT 2000
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_OWVAR 67
1800: ARRAY
1801: GREATEREQUAL
1802: IFFALSE 1860
// begin if i = 1 then
1804: LD_VAR 0 1
1808: PUSH
1809: LD_INT 1
1811: EQUAL
1812: IFFALSE 1853
// begin DialogueOn ;
1814: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1818: LD_STRING ACH_HUNT
1820: PPUSH
1821: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1825: LD_ADDR_OWVAR 47
1829: PUSH
1830: LD_STRING #hunting-win
1832: PUSH
1833: EMPTY
1834: LIST
1835: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1836: LD_INT 175
1838: PPUSH
1839: CALL_OW 68
// YouWin ;
1843: CALL_OW 103
// DialogueOff ;
1847: CALL_OW 7
// end else
1851: GO 1860
// YouLost ( hunt3 ) ;
1853: LD_STRING hunt3
1855: PPUSH
1856: CALL_OW 104
// end ; end ;
1860: GO 1727
1862: POP
1863: POP
// end ; end_of_file end_of_file
1864: PPOPN 1
1866: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1867: LD_VAR 0 2
1871: PUSH
1872: LD_INT 100
1874: EQUAL
1875: IFFALSE 2824
// begin if not StreamModeActive then
1877: LD_EXP 8
1881: NOT
1882: IFFALSE 1892
// StreamModeActive := true ;
1884: LD_ADDR_EXP 8
1888: PUSH
1889: LD_INT 1
1891: ST_TO_ADDR
// if p3 = 0 then
1892: LD_VAR 0 3
1896: PUSH
1897: LD_INT 0
1899: EQUAL
1900: IFFALSE 1906
// InitStreamMode ;
1902: CALL 3057 0 0
// if p3 = 1 then
1906: LD_VAR 0 3
1910: PUSH
1911: LD_INT 1
1913: EQUAL
1914: IFFALSE 1924
// sRocket := true ;
1916: LD_ADDR_EXP 13
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// if p3 = 2 then
1924: LD_VAR 0 3
1928: PUSH
1929: LD_INT 2
1931: EQUAL
1932: IFFALSE 1942
// sSpeed := true ;
1934: LD_ADDR_EXP 12
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// if p3 = 3 then
1942: LD_VAR 0 3
1946: PUSH
1947: LD_INT 3
1949: EQUAL
1950: IFFALSE 1960
// sEngine := true ;
1952: LD_ADDR_EXP 14
1956: PUSH
1957: LD_INT 1
1959: ST_TO_ADDR
// if p3 = 4 then
1960: LD_VAR 0 3
1964: PUSH
1965: LD_INT 4
1967: EQUAL
1968: IFFALSE 1978
// sSpec := true ;
1970: LD_ADDR_EXP 11
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// if p3 = 5 then
1978: LD_VAR 0 3
1982: PUSH
1983: LD_INT 5
1985: EQUAL
1986: IFFALSE 1996
// sLevel := true ;
1988: LD_ADDR_EXP 15
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// if p3 = 6 then
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 6
2003: EQUAL
2004: IFFALSE 2014
// sArmoury := true ;
2006: LD_ADDR_EXP 16
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// if p3 = 7 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 7
2021: EQUAL
2022: IFFALSE 2032
// sRadar := true ;
2024: LD_ADDR_EXP 17
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// if p3 = 8 then
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 8
2039: EQUAL
2040: IFFALSE 2050
// sBunker := true ;
2042: LD_ADDR_EXP 18
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// if p3 = 9 then
2050: LD_VAR 0 3
2054: PUSH
2055: LD_INT 9
2057: EQUAL
2058: IFFALSE 2068
// sHack := true ;
2060: LD_ADDR_EXP 19
2064: PUSH
2065: LD_INT 1
2067: ST_TO_ADDR
// if p3 = 10 then
2068: LD_VAR 0 3
2072: PUSH
2073: LD_INT 10
2075: EQUAL
2076: IFFALSE 2086
// sFire := true ;
2078: LD_ADDR_EXP 20
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// if p3 = 11 then
2086: LD_VAR 0 3
2090: PUSH
2091: LD_INT 11
2093: EQUAL
2094: IFFALSE 2104
// sRefresh := true ;
2096: LD_ADDR_EXP 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// if p3 = 12 then
2104: LD_VAR 0 3
2108: PUSH
2109: LD_INT 12
2111: EQUAL
2112: IFFALSE 2122
// sExp := true ;
2114: LD_ADDR_EXP 22
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// if p3 = 13 then
2122: LD_VAR 0 3
2126: PUSH
2127: LD_INT 13
2129: EQUAL
2130: IFFALSE 2140
// sDepot := true ;
2132: LD_ADDR_EXP 23
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// if p3 = 14 then
2140: LD_VAR 0 3
2144: PUSH
2145: LD_INT 14
2147: EQUAL
2148: IFFALSE 2158
// sFlag := true ;
2150: LD_ADDR_EXP 24
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// if p3 = 15 then
2158: LD_VAR 0 3
2162: PUSH
2163: LD_INT 15
2165: EQUAL
2166: IFFALSE 2176
// sKamikadze := true ;
2168: LD_ADDR_EXP 32
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// if p3 = 16 then
2176: LD_VAR 0 3
2180: PUSH
2181: LD_INT 16
2183: EQUAL
2184: IFFALSE 2194
// sTroll := true ;
2186: LD_ADDR_EXP 33
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// if p3 = 17 then
2194: LD_VAR 0 3
2198: PUSH
2199: LD_INT 17
2201: EQUAL
2202: IFFALSE 2212
// sSlow := true ;
2204: LD_ADDR_EXP 34
2208: PUSH
2209: LD_INT 1
2211: ST_TO_ADDR
// if p3 = 18 then
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 18
2219: EQUAL
2220: IFFALSE 2230
// sLack := true ;
2222: LD_ADDR_EXP 35
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// if p3 = 19 then
2230: LD_VAR 0 3
2234: PUSH
2235: LD_INT 19
2237: EQUAL
2238: IFFALSE 2248
// sTank := true ;
2240: LD_ADDR_EXP 37
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// if p3 = 20 then
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 20
2255: EQUAL
2256: IFFALSE 2266
// sRemote := true ;
2258: LD_ADDR_EXP 38
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// if p3 = 21 then
2266: LD_VAR 0 3
2270: PUSH
2271: LD_INT 21
2273: EQUAL
2274: IFFALSE 2284
// sPowell := true ;
2276: LD_ADDR_EXP 39
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// if p3 = 22 then
2284: LD_VAR 0 3
2288: PUSH
2289: LD_INT 22
2291: EQUAL
2292: IFFALSE 2302
// sTeleport := true ;
2294: LD_ADDR_EXP 42
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// if p3 = 23 then
2302: LD_VAR 0 3
2306: PUSH
2307: LD_INT 23
2309: EQUAL
2310: IFFALSE 2320
// sOilTower := true ;
2312: LD_ADDR_EXP 44
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// if p3 = 24 then
2320: LD_VAR 0 3
2324: PUSH
2325: LD_INT 24
2327: EQUAL
2328: IFFALSE 2338
// sShovel := true ;
2330: LD_ADDR_EXP 45
2334: PUSH
2335: LD_INT 1
2337: ST_TO_ADDR
// if p3 = 25 then
2338: LD_VAR 0 3
2342: PUSH
2343: LD_INT 25
2345: EQUAL
2346: IFFALSE 2356
// sSheik := true ;
2348: LD_ADDR_EXP 46
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if p3 = 26 then
2356: LD_VAR 0 3
2360: PUSH
2361: LD_INT 26
2363: EQUAL
2364: IFFALSE 2374
// sEarthquake := true ;
2366: LD_ADDR_EXP 48
2370: PUSH
2371: LD_INT 1
2373: ST_TO_ADDR
// if p3 = 27 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 27
2381: EQUAL
2382: IFFALSE 2392
// sAI := true ;
2384: LD_ADDR_EXP 49
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// if p3 = 28 then
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 28
2399: EQUAL
2400: IFFALSE 2410
// sCargo := true ;
2402: LD_ADDR_EXP 52
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// if p3 = 29 then
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 29
2417: EQUAL
2418: IFFALSE 2428
// sDLaser := true ;
2420: LD_ADDR_EXP 53
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// if p3 = 30 then
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 30
2435: EQUAL
2436: IFFALSE 2446
// sExchange := true ;
2438: LD_ADDR_EXP 54
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if p3 = 31 then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 31
2453: EQUAL
2454: IFFALSE 2464
// sFac := true ;
2456: LD_ADDR_EXP 55
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// if p3 = 32 then
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 32
2471: EQUAL
2472: IFFALSE 2482
// sPower := true ;
2474: LD_ADDR_EXP 56
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// if p3 = 33 then
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 33
2489: EQUAL
2490: IFFALSE 2500
// sRandom := true ;
2492: LD_ADDR_EXP 57
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// if p3 = 34 then
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 34
2507: EQUAL
2508: IFFALSE 2518
// sShield := true ;
2510: LD_ADDR_EXP 58
2514: PUSH
2515: LD_INT 1
2517: ST_TO_ADDR
// if p3 = 35 then
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 35
2525: EQUAL
2526: IFFALSE 2536
// sTime := true ;
2528: LD_ADDR_EXP 59
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// if p3 = 36 then
2536: LD_VAR 0 3
2540: PUSH
2541: LD_INT 36
2543: EQUAL
2544: IFFALSE 2554
// sTools := true ;
2546: LD_ADDR_EXP 60
2550: PUSH
2551: LD_INT 1
2553: ST_TO_ADDR
// if p3 = 101 then
2554: LD_VAR 0 3
2558: PUSH
2559: LD_INT 101
2561: EQUAL
2562: IFFALSE 2572
// sSold := true ;
2564: LD_ADDR_EXP 25
2568: PUSH
2569: LD_INT 1
2571: ST_TO_ADDR
// if p3 = 102 then
2572: LD_VAR 0 3
2576: PUSH
2577: LD_INT 102
2579: EQUAL
2580: IFFALSE 2590
// sDiff := true ;
2582: LD_ADDR_EXP 26
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// if p3 = 103 then
2590: LD_VAR 0 3
2594: PUSH
2595: LD_INT 103
2597: EQUAL
2598: IFFALSE 2608
// sFog := true ;
2600: LD_ADDR_EXP 29
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// if p3 = 104 then
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 104
2615: EQUAL
2616: IFFALSE 2626
// sReset := true ;
2618: LD_ADDR_EXP 30
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// if p3 = 105 then
2626: LD_VAR 0 3
2630: PUSH
2631: LD_INT 105
2633: EQUAL
2634: IFFALSE 2644
// sSun := true ;
2636: LD_ADDR_EXP 31
2640: PUSH
2641: LD_INT 1
2643: ST_TO_ADDR
// if p3 = 106 then
2644: LD_VAR 0 3
2648: PUSH
2649: LD_INT 106
2651: EQUAL
2652: IFFALSE 2662
// sTiger := true ;
2654: LD_ADDR_EXP 27
2658: PUSH
2659: LD_INT 1
2661: ST_TO_ADDR
// if p3 = 107 then
2662: LD_VAR 0 3
2666: PUSH
2667: LD_INT 107
2669: EQUAL
2670: IFFALSE 2680
// sBomb := true ;
2672: LD_ADDR_EXP 28
2676: PUSH
2677: LD_INT 1
2679: ST_TO_ADDR
// if p3 = 108 then
2680: LD_VAR 0 3
2684: PUSH
2685: LD_INT 108
2687: EQUAL
2688: IFFALSE 2698
// sWound := true ;
2690: LD_ADDR_EXP 36
2694: PUSH
2695: LD_INT 1
2697: ST_TO_ADDR
// if p3 = 109 then
2698: LD_VAR 0 3
2702: PUSH
2703: LD_INT 109
2705: EQUAL
2706: IFFALSE 2716
// sBetray := true ;
2708: LD_ADDR_EXP 40
2712: PUSH
2713: LD_INT 1
2715: ST_TO_ADDR
// if p3 = 110 then
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 110
2723: EQUAL
2724: IFFALSE 2734
// sContamin := true ;
2726: LD_ADDR_EXP 41
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// if p3 = 111 then
2734: LD_VAR 0 3
2738: PUSH
2739: LD_INT 111
2741: EQUAL
2742: IFFALSE 2752
// sOil := true ;
2744: LD_ADDR_EXP 43
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// if p3 = 112 then
2752: LD_VAR 0 3
2756: PUSH
2757: LD_INT 112
2759: EQUAL
2760: IFFALSE 2770
// sStu := true ;
2762: LD_ADDR_EXP 47
2766: PUSH
2767: LD_INT 1
2769: ST_TO_ADDR
// if p3 = 113 then
2770: LD_VAR 0 3
2774: PUSH
2775: LD_INT 113
2777: EQUAL
2778: IFFALSE 2788
// sBazooka := true ;
2780: LD_ADDR_EXP 50
2784: PUSH
2785: LD_INT 1
2787: ST_TO_ADDR
// if p3 = 114 then
2788: LD_VAR 0 3
2792: PUSH
2793: LD_INT 114
2795: EQUAL
2796: IFFALSE 2806
// sMortar := true ;
2798: LD_ADDR_EXP 51
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// if p3 = 115 then
2806: LD_VAR 0 3
2810: PUSH
2811: LD_INT 115
2813: EQUAL
2814: IFFALSE 2824
// sRanger := true ;
2816: LD_ADDR_EXP 61
2820: PUSH
2821: LD_INT 1
2823: ST_TO_ADDR
// end ; if p2 = 101 then
2824: LD_VAR 0 2
2828: PUSH
2829: LD_INT 101
2831: EQUAL
2832: IFFALSE 3035
// begin case p3 of 1 :
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: DOUBLE
2842: EQUAL
2843: IFTRUE 2847
2845: GO 2854
2847: POP
// hHackUnlimitedResources ; 2 :
2848: CALL 13129 0 0
2852: GO 3035
2854: LD_INT 2
2856: DOUBLE
2857: EQUAL
2858: IFTRUE 2862
2860: GO 2869
2862: POP
// hHackSetLevel10 ; 3 :
2863: CALL 13262 0 0
2867: GO 3035
2869: LD_INT 3
2871: DOUBLE
2872: EQUAL
2873: IFTRUE 2877
2875: GO 2884
2877: POP
// hHackSetLevel10YourUnits ; 4 :
2878: CALL 13347 0 0
2882: GO 3035
2884: LD_INT 4
2886: DOUBLE
2887: EQUAL
2888: IFTRUE 2892
2890: GO 2914
2892: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
2893: LD_VAR 0 4
2897: PPUSH
2898: LD_VAR 0 5
2902: PPUSH
2903: LD_VAR 0 6
2907: PPUSH
2908: CALL 13437 0 3
2912: GO 3035
2914: LD_INT 5
2916: DOUBLE
2917: EQUAL
2918: IFTRUE 2922
2920: GO 2929
2922: POP
// hHackSpawnVehicle ; 6 :
2923: CALL 13498 0 0
2927: GO 3035
2929: LD_INT 6
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2944
2937: POP
// hHackInvincible ; 7 :
2938: CALL 14044 0 0
2942: GO 3035
2944: LD_INT 7
2946: DOUBLE
2947: EQUAL
2948: IFTRUE 2952
2950: GO 2959
2952: POP
// hHackInvisible ; 8 :
2953: CALL 14155 0 0
2957: GO 3035
2959: LD_INT 8
2961: DOUBLE
2962: EQUAL
2963: IFTRUE 2967
2965: GO 2974
2967: POP
// hHackChangeYourSide ; 9 :
2968: CALL 14212 0 0
2972: GO 3035
2974: LD_INT 9
2976: DOUBLE
2977: EQUAL
2978: IFTRUE 2982
2980: GO 2989
2982: POP
// hHackChangeUnitSide ; 10 :
2983: CALL 14254 0 0
2987: GO 3035
2989: LD_INT 10
2991: DOUBLE
2992: EQUAL
2993: IFTRUE 2997
2995: GO 3004
2997: POP
// hHackFog ; 11 :
2998: CALL 14355 0 0
3002: GO 3035
3004: LD_INT 11
3006: DOUBLE
3007: EQUAL
3008: IFTRUE 3012
3010: GO 3019
3012: POP
// hHackApeman ; 12 :
3013: CALL 14370 0 0
3017: GO 3035
3019: LD_INT 12
3021: DOUBLE
3022: EQUAL
3023: IFTRUE 3027
3025: GO 3034
3027: POP
// hHackBoom ; end ;
3028: CALL 14455 0 0
3032: GO 3035
3034: POP
// end ; end ;
3035: PPOPN 6
3037: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3038: GO 3040
3040: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3041: LD_STRING initStreamRollete();
3043: PPUSH
3044: CALL_OW 559
// InitStreamMode ;
3048: CALL 3057 0 0
// DefineStreamItems ( ) ;
3052: CALL 3497 0 0
// end ;
3056: END
// function InitStreamMode ; begin
3057: LD_INT 0
3059: PPUSH
// streamModeActive := false ;
3060: LD_ADDR_EXP 8
3064: PUSH
3065: LD_INT 0
3067: ST_TO_ADDR
// normalCounter := 36 ;
3068: LD_ADDR_EXP 9
3072: PUSH
3073: LD_INT 36
3075: ST_TO_ADDR
// hardcoreCounter := 16 ;
3076: LD_ADDR_EXP 10
3080: PUSH
3081: LD_INT 16
3083: ST_TO_ADDR
// sRocket := false ;
3084: LD_ADDR_EXP 13
3088: PUSH
3089: LD_INT 0
3091: ST_TO_ADDR
// sSpeed := false ;
3092: LD_ADDR_EXP 12
3096: PUSH
3097: LD_INT 0
3099: ST_TO_ADDR
// sEngine := false ;
3100: LD_ADDR_EXP 14
3104: PUSH
3105: LD_INT 0
3107: ST_TO_ADDR
// sSpec := false ;
3108: LD_ADDR_EXP 11
3112: PUSH
3113: LD_INT 0
3115: ST_TO_ADDR
// sLevel := false ;
3116: LD_ADDR_EXP 15
3120: PUSH
3121: LD_INT 0
3123: ST_TO_ADDR
// sArmoury := false ;
3124: LD_ADDR_EXP 16
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// sRadar := false ;
3132: LD_ADDR_EXP 17
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// sBunker := false ;
3140: LD_ADDR_EXP 18
3144: PUSH
3145: LD_INT 0
3147: ST_TO_ADDR
// sHack := false ;
3148: LD_ADDR_EXP 19
3152: PUSH
3153: LD_INT 0
3155: ST_TO_ADDR
// sFire := false ;
3156: LD_ADDR_EXP 20
3160: PUSH
3161: LD_INT 0
3163: ST_TO_ADDR
// sRefresh := false ;
3164: LD_ADDR_EXP 21
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// sExp := false ;
3172: LD_ADDR_EXP 22
3176: PUSH
3177: LD_INT 0
3179: ST_TO_ADDR
// sDepot := false ;
3180: LD_ADDR_EXP 23
3184: PUSH
3185: LD_INT 0
3187: ST_TO_ADDR
// sFlag := false ;
3188: LD_ADDR_EXP 24
3192: PUSH
3193: LD_INT 0
3195: ST_TO_ADDR
// sKamikadze := false ;
3196: LD_ADDR_EXP 32
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// sTroll := false ;
3204: LD_ADDR_EXP 33
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// sSlow := false ;
3212: LD_ADDR_EXP 34
3216: PUSH
3217: LD_INT 0
3219: ST_TO_ADDR
// sLack := false ;
3220: LD_ADDR_EXP 35
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// sTank := false ;
3228: LD_ADDR_EXP 37
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// sRemote := false ;
3236: LD_ADDR_EXP 38
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// sPowell := false ;
3244: LD_ADDR_EXP 39
3248: PUSH
3249: LD_INT 0
3251: ST_TO_ADDR
// sTeleport := false ;
3252: LD_ADDR_EXP 42
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// sOilTower := false ;
3260: LD_ADDR_EXP 44
3264: PUSH
3265: LD_INT 0
3267: ST_TO_ADDR
// sShovel := false ;
3268: LD_ADDR_EXP 45
3272: PUSH
3273: LD_INT 0
3275: ST_TO_ADDR
// sSheik := false ;
3276: LD_ADDR_EXP 46
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// sEarthquake := false ;
3284: LD_ADDR_EXP 48
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// sAI := false ;
3292: LD_ADDR_EXP 49
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// sCargo := false ;
3300: LD_ADDR_EXP 52
3304: PUSH
3305: LD_INT 0
3307: ST_TO_ADDR
// sDLaser := false ;
3308: LD_ADDR_EXP 53
3312: PUSH
3313: LD_INT 0
3315: ST_TO_ADDR
// sExchange := false ;
3316: LD_ADDR_EXP 54
3320: PUSH
3321: LD_INT 0
3323: ST_TO_ADDR
// sFac := false ;
3324: LD_ADDR_EXP 55
3328: PUSH
3329: LD_INT 0
3331: ST_TO_ADDR
// sPower := false ;
3332: LD_ADDR_EXP 56
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// sRandom := false ;
3340: LD_ADDR_EXP 57
3344: PUSH
3345: LD_INT 0
3347: ST_TO_ADDR
// sShield := false ;
3348: LD_ADDR_EXP 58
3352: PUSH
3353: LD_INT 0
3355: ST_TO_ADDR
// sTime := false ;
3356: LD_ADDR_EXP 59
3360: PUSH
3361: LD_INT 0
3363: ST_TO_ADDR
// sTools := false ;
3364: LD_ADDR_EXP 60
3368: PUSH
3369: LD_INT 0
3371: ST_TO_ADDR
// sSold := false ;
3372: LD_ADDR_EXP 25
3376: PUSH
3377: LD_INT 0
3379: ST_TO_ADDR
// sDiff := false ;
3380: LD_ADDR_EXP 26
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// sFog := false ;
3388: LD_ADDR_EXP 29
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// sReset := false ;
3396: LD_ADDR_EXP 30
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// sSun := false ;
3404: LD_ADDR_EXP 31
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// sTiger := false ;
3412: LD_ADDR_EXP 27
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// sBomb := false ;
3420: LD_ADDR_EXP 28
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// sWound := false ;
3428: LD_ADDR_EXP 36
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// sBetray := false ;
3436: LD_ADDR_EXP 40
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// sContamin := false ;
3444: LD_ADDR_EXP 41
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// sOil := false ;
3452: LD_ADDR_EXP 43
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// sStu := false ;
3460: LD_ADDR_EXP 47
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// sBazooka := false ;
3468: LD_ADDR_EXP 50
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// sMortar := false ;
3476: LD_ADDR_EXP 51
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// sRanger := false ;
3484: LD_ADDR_EXP 61
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// end ;
3492: LD_VAR 0 1
3496: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3497: LD_INT 0
3499: PPUSH
3500: PPUSH
3501: PPUSH
3502: PPUSH
3503: PPUSH
// result := [ ] ;
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: EMPTY
3510: ST_TO_ADDR
// if campaign_id = 1 then
3511: LD_OWVAR 69
3515: PUSH
3516: LD_INT 1
3518: EQUAL
3519: IFFALSE 6457
// begin case mission_number of 1 :
3521: LD_OWVAR 70
3525: PUSH
3526: LD_INT 1
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3598
3534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_INT 2
3542: PUSH
3543: LD_INT 4
3545: PUSH
3546: LD_INT 11
3548: PUSH
3549: LD_INT 12
3551: PUSH
3552: LD_INT 15
3554: PUSH
3555: LD_INT 16
3557: PUSH
3558: LD_INT 22
3560: PUSH
3561: LD_INT 23
3563: PUSH
3564: LD_INT 26
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: PUSH
3578: LD_INT 101
3580: PUSH
3581: LD_INT 102
3583: PUSH
3584: LD_INT 106
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: ST_TO_ADDR
3596: GO 6455
3598: LD_INT 2
3600: DOUBLE
3601: EQUAL
3602: IFTRUE 3606
3604: GO 3678
3606: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3607: LD_ADDR_VAR 0 1
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: LD_INT 4
3617: PUSH
3618: LD_INT 11
3620: PUSH
3621: LD_INT 12
3623: PUSH
3624: LD_INT 15
3626: PUSH
3627: LD_INT 16
3629: PUSH
3630: LD_INT 22
3632: PUSH
3633: LD_INT 23
3635: PUSH
3636: LD_INT 26
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 101
3652: PUSH
3653: LD_INT 102
3655: PUSH
3656: LD_INT 105
3658: PUSH
3659: LD_INT 106
3661: PUSH
3662: LD_INT 108
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: ST_TO_ADDR
3676: GO 6455
3678: LD_INT 3
3680: DOUBLE
3681: EQUAL
3682: IFTRUE 3686
3684: GO 3762
3686: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3687: LD_ADDR_VAR 0 1
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: LD_INT 4
3697: PUSH
3698: LD_INT 5
3700: PUSH
3701: LD_INT 11
3703: PUSH
3704: LD_INT 12
3706: PUSH
3707: LD_INT 15
3709: PUSH
3710: LD_INT 16
3712: PUSH
3713: LD_INT 22
3715: PUSH
3716: LD_INT 26
3718: PUSH
3719: LD_INT 36
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_INT 101
3736: PUSH
3737: LD_INT 102
3739: PUSH
3740: LD_INT 105
3742: PUSH
3743: LD_INT 106
3745: PUSH
3746: LD_INT 108
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: ST_TO_ADDR
3760: GO 6455
3762: LD_INT 4
3764: DOUBLE
3765: EQUAL
3766: IFTRUE 3770
3768: GO 3854
3770: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3771: LD_ADDR_VAR 0 1
3775: PUSH
3776: LD_INT 2
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: LD_INT 8
3787: PUSH
3788: LD_INT 11
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: LD_INT 15
3796: PUSH
3797: LD_INT 16
3799: PUSH
3800: LD_INT 22
3802: PUSH
3803: LD_INT 23
3805: PUSH
3806: LD_INT 26
3808: PUSH
3809: LD_INT 36
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 101
3828: PUSH
3829: LD_INT 102
3831: PUSH
3832: LD_INT 105
3834: PUSH
3835: LD_INT 106
3837: PUSH
3838: LD_INT 108
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: ST_TO_ADDR
3852: GO 6455
3854: LD_INT 5
3856: DOUBLE
3857: EQUAL
3858: IFTRUE 3862
3860: GO 3962
3862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3863: LD_ADDR_VAR 0 1
3867: PUSH
3868: LD_INT 2
3870: PUSH
3871: LD_INT 4
3873: PUSH
3874: LD_INT 5
3876: PUSH
3877: LD_INT 6
3879: PUSH
3880: LD_INT 8
3882: PUSH
3883: LD_INT 11
3885: PUSH
3886: LD_INT 12
3888: PUSH
3889: LD_INT 15
3891: PUSH
3892: LD_INT 16
3894: PUSH
3895: LD_INT 22
3897: PUSH
3898: LD_INT 23
3900: PUSH
3901: LD_INT 25
3903: PUSH
3904: LD_INT 26
3906: PUSH
3907: LD_INT 36
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 101
3928: PUSH
3929: LD_INT 102
3931: PUSH
3932: LD_INT 105
3934: PUSH
3935: LD_INT 106
3937: PUSH
3938: LD_INT 108
3940: PUSH
3941: LD_INT 109
3943: PUSH
3944: LD_INT 112
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: ST_TO_ADDR
3960: GO 6455
3962: LD_INT 6
3964: DOUBLE
3965: EQUAL
3966: IFTRUE 3970
3968: GO 4090
3970: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3971: LD_ADDR_VAR 0 1
3975: PUSH
3976: LD_INT 2
3978: PUSH
3979: LD_INT 4
3981: PUSH
3982: LD_INT 5
3984: PUSH
3985: LD_INT 6
3987: PUSH
3988: LD_INT 8
3990: PUSH
3991: LD_INT 11
3993: PUSH
3994: LD_INT 12
3996: PUSH
3997: LD_INT 15
3999: PUSH
4000: LD_INT 16
4002: PUSH
4003: LD_INT 20
4005: PUSH
4006: LD_INT 21
4008: PUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 23
4014: PUSH
4015: LD_INT 25
4017: PUSH
4018: LD_INT 26
4020: PUSH
4021: LD_INT 30
4023: PUSH
4024: LD_INT 31
4026: PUSH
4027: LD_INT 32
4029: PUSH
4030: LD_INT 36
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 101
4056: PUSH
4057: LD_INT 102
4059: PUSH
4060: LD_INT 105
4062: PUSH
4063: LD_INT 106
4065: PUSH
4066: LD_INT 108
4068: PUSH
4069: LD_INT 109
4071: PUSH
4072: LD_INT 112
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: ST_TO_ADDR
4088: GO 6455
4090: LD_INT 7
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4198
4098: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4099: LD_ADDR_VAR 0 1
4103: PUSH
4104: LD_INT 2
4106: PUSH
4107: LD_INT 4
4109: PUSH
4110: LD_INT 5
4112: PUSH
4113: LD_INT 7
4115: PUSH
4116: LD_INT 11
4118: PUSH
4119: LD_INT 12
4121: PUSH
4122: LD_INT 15
4124: PUSH
4125: LD_INT 16
4127: PUSH
4128: LD_INT 20
4130: PUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 23
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 26
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 101
4164: PUSH
4165: LD_INT 102
4167: PUSH
4168: LD_INT 103
4170: PUSH
4171: LD_INT 105
4173: PUSH
4174: LD_INT 106
4176: PUSH
4177: LD_INT 108
4179: PUSH
4180: LD_INT 112
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: ST_TO_ADDR
4196: GO 6455
4198: LD_INT 8
4200: DOUBLE
4201: EQUAL
4202: IFTRUE 4206
4204: GO 4334
4206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4207: LD_ADDR_VAR 0 1
4211: PUSH
4212: LD_INT 2
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: LD_INT 6
4223: PUSH
4224: LD_INT 7
4226: PUSH
4227: LD_INT 8
4229: PUSH
4230: LD_INT 11
4232: PUSH
4233: LD_INT 12
4235: PUSH
4236: LD_INT 15
4238: PUSH
4239: LD_INT 16
4241: PUSH
4242: LD_INT 20
4244: PUSH
4245: LD_INT 21
4247: PUSH
4248: LD_INT 22
4250: PUSH
4251: LD_INT 23
4253: PUSH
4254: LD_INT 25
4256: PUSH
4257: LD_INT 26
4259: PUSH
4260: LD_INT 30
4262: PUSH
4263: LD_INT 31
4265: PUSH
4266: LD_INT 32
4268: PUSH
4269: LD_INT 36
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 102
4299: PUSH
4300: LD_INT 103
4302: PUSH
4303: LD_INT 105
4305: PUSH
4306: LD_INT 106
4308: PUSH
4309: LD_INT 108
4311: PUSH
4312: LD_INT 109
4314: PUSH
4315: LD_INT 112
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: ST_TO_ADDR
4332: GO 6455
4334: LD_INT 9
4336: DOUBLE
4337: EQUAL
4338: IFTRUE 4342
4340: GO 4478
4342: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4343: LD_ADDR_VAR 0 1
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: LD_INT 6
4359: PUSH
4360: LD_INT 7
4362: PUSH
4363: LD_INT 8
4365: PUSH
4366: LD_INT 11
4368: PUSH
4369: LD_INT 12
4371: PUSH
4372: LD_INT 15
4374: PUSH
4375: LD_INT 16
4377: PUSH
4378: LD_INT 20
4380: PUSH
4381: LD_INT 21
4383: PUSH
4384: LD_INT 22
4386: PUSH
4387: LD_INT 23
4389: PUSH
4390: LD_INT 25
4392: PUSH
4393: LD_INT 26
4395: PUSH
4396: LD_INT 28
4398: PUSH
4399: LD_INT 30
4401: PUSH
4402: LD_INT 31
4404: PUSH
4405: LD_INT 32
4407: PUSH
4408: LD_INT 36
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 101
4436: PUSH
4437: LD_INT 102
4439: PUSH
4440: LD_INT 103
4442: PUSH
4443: LD_INT 105
4445: PUSH
4446: LD_INT 106
4448: PUSH
4449: LD_INT 108
4451: PUSH
4452: LD_INT 109
4454: PUSH
4455: LD_INT 112
4457: PUSH
4458: LD_INT 114
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: ST_TO_ADDR
4476: GO 6455
4478: LD_INT 10
4480: DOUBLE
4481: EQUAL
4482: IFTRUE 4486
4484: GO 4670
4486: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4487: LD_ADDR_VAR 0 1
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: LD_INT 4
4497: PUSH
4498: LD_INT 5
4500: PUSH
4501: LD_INT 6
4503: PUSH
4504: LD_INT 7
4506: PUSH
4507: LD_INT 8
4509: PUSH
4510: LD_INT 9
4512: PUSH
4513: LD_INT 10
4515: PUSH
4516: LD_INT 11
4518: PUSH
4519: LD_INT 12
4521: PUSH
4522: LD_INT 13
4524: PUSH
4525: LD_INT 14
4527: PUSH
4528: LD_INT 15
4530: PUSH
4531: LD_INT 16
4533: PUSH
4534: LD_INT 17
4536: PUSH
4537: LD_INT 18
4539: PUSH
4540: LD_INT 19
4542: PUSH
4543: LD_INT 20
4545: PUSH
4546: LD_INT 21
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 23
4554: PUSH
4555: LD_INT 24
4557: PUSH
4558: LD_INT 25
4560: PUSH
4561: LD_INT 26
4563: PUSH
4564: LD_INT 28
4566: PUSH
4567: LD_INT 30
4569: PUSH
4570: LD_INT 31
4572: PUSH
4573: LD_INT 32
4575: PUSH
4576: LD_INT 36
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 101
4612: PUSH
4613: LD_INT 102
4615: PUSH
4616: LD_INT 103
4618: PUSH
4619: LD_INT 104
4621: PUSH
4622: LD_INT 105
4624: PUSH
4625: LD_INT 106
4627: PUSH
4628: LD_INT 107
4630: PUSH
4631: LD_INT 108
4633: PUSH
4634: LD_INT 109
4636: PUSH
4637: LD_INT 110
4639: PUSH
4640: LD_INT 111
4642: PUSH
4643: LD_INT 112
4645: PUSH
4646: LD_INT 114
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: ST_TO_ADDR
4668: GO 6455
4670: LD_INT 11
4672: DOUBLE
4673: EQUAL
4674: IFTRUE 4678
4676: GO 4870
4678: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4679: LD_ADDR_VAR 0 1
4683: PUSH
4684: LD_INT 2
4686: PUSH
4687: LD_INT 3
4689: PUSH
4690: LD_INT 4
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: LD_INT 7
4701: PUSH
4702: LD_INT 8
4704: PUSH
4705: LD_INT 9
4707: PUSH
4708: LD_INT 10
4710: PUSH
4711: LD_INT 11
4713: PUSH
4714: LD_INT 12
4716: PUSH
4717: LD_INT 13
4719: PUSH
4720: LD_INT 14
4722: PUSH
4723: LD_INT 15
4725: PUSH
4726: LD_INT 16
4728: PUSH
4729: LD_INT 17
4731: PUSH
4732: LD_INT 18
4734: PUSH
4735: LD_INT 19
4737: PUSH
4738: LD_INT 20
4740: PUSH
4741: LD_INT 21
4743: PUSH
4744: LD_INT 22
4746: PUSH
4747: LD_INT 23
4749: PUSH
4750: LD_INT 24
4752: PUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 26
4758: PUSH
4759: LD_INT 28
4761: PUSH
4762: LD_INT 30
4764: PUSH
4765: LD_INT 31
4767: PUSH
4768: LD_INT 32
4770: PUSH
4771: LD_INT 34
4773: PUSH
4774: LD_INT 36
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 101
4812: PUSH
4813: LD_INT 102
4815: PUSH
4816: LD_INT 103
4818: PUSH
4819: LD_INT 104
4821: PUSH
4822: LD_INT 105
4824: PUSH
4825: LD_INT 106
4827: PUSH
4828: LD_INT 107
4830: PUSH
4831: LD_INT 108
4833: PUSH
4834: LD_INT 109
4836: PUSH
4837: LD_INT 110
4839: PUSH
4840: LD_INT 111
4842: PUSH
4843: LD_INT 112
4845: PUSH
4846: LD_INT 114
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: ST_TO_ADDR
4868: GO 6455
4870: LD_INT 12
4872: DOUBLE
4873: EQUAL
4874: IFTRUE 4878
4876: GO 5086
4878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4879: LD_ADDR_VAR 0 1
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: LD_INT 2
4889: PUSH
4890: LD_INT 3
4892: PUSH
4893: LD_INT 4
4895: PUSH
4896: LD_INT 5
4898: PUSH
4899: LD_INT 6
4901: PUSH
4902: LD_INT 7
4904: PUSH
4905: LD_INT 8
4907: PUSH
4908: LD_INT 9
4910: PUSH
4911: LD_INT 10
4913: PUSH
4914: LD_INT 11
4916: PUSH
4917: LD_INT 12
4919: PUSH
4920: LD_INT 13
4922: PUSH
4923: LD_INT 14
4925: PUSH
4926: LD_INT 15
4928: PUSH
4929: LD_INT 16
4931: PUSH
4932: LD_INT 17
4934: PUSH
4935: LD_INT 18
4937: PUSH
4938: LD_INT 19
4940: PUSH
4941: LD_INT 20
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 22
4949: PUSH
4950: LD_INT 23
4952: PUSH
4953: LD_INT 24
4955: PUSH
4956: LD_INT 25
4958: PUSH
4959: LD_INT 26
4961: PUSH
4962: LD_INT 27
4964: PUSH
4965: LD_INT 28
4967: PUSH
4968: LD_INT 30
4970: PUSH
4971: LD_INT 31
4973: PUSH
4974: LD_INT 32
4976: PUSH
4977: LD_INT 33
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 36
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 101
5024: PUSH
5025: LD_INT 102
5027: PUSH
5028: LD_INT 103
5030: PUSH
5031: LD_INT 104
5033: PUSH
5034: LD_INT 105
5036: PUSH
5037: LD_INT 106
5039: PUSH
5040: LD_INT 107
5042: PUSH
5043: LD_INT 108
5045: PUSH
5046: LD_INT 109
5048: PUSH
5049: LD_INT 110
5051: PUSH
5052: LD_INT 111
5054: PUSH
5055: LD_INT 112
5057: PUSH
5058: LD_INT 113
5060: PUSH
5061: LD_INT 114
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: ST_TO_ADDR
5084: GO 6455
5086: LD_INT 13
5088: DOUBLE
5089: EQUAL
5090: IFTRUE 5094
5092: GO 5290
5094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5095: LD_ADDR_VAR 0 1
5099: PUSH
5100: LD_INT 1
5102: PUSH
5103: LD_INT 2
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: LD_INT 5
5114: PUSH
5115: LD_INT 8
5117: PUSH
5118: LD_INT 9
5120: PUSH
5121: LD_INT 10
5123: PUSH
5124: LD_INT 11
5126: PUSH
5127: LD_INT 12
5129: PUSH
5130: LD_INT 14
5132: PUSH
5133: LD_INT 15
5135: PUSH
5136: LD_INT 16
5138: PUSH
5139: LD_INT 17
5141: PUSH
5142: LD_INT 18
5144: PUSH
5145: LD_INT 19
5147: PUSH
5148: LD_INT 20
5150: PUSH
5151: LD_INT 21
5153: PUSH
5154: LD_INT 22
5156: PUSH
5157: LD_INT 23
5159: PUSH
5160: LD_INT 24
5162: PUSH
5163: LD_INT 25
5165: PUSH
5166: LD_INT 26
5168: PUSH
5169: LD_INT 27
5171: PUSH
5172: LD_INT 28
5174: PUSH
5175: LD_INT 30
5177: PUSH
5178: LD_INT 31
5180: PUSH
5181: LD_INT 32
5183: PUSH
5184: LD_INT 33
5186: PUSH
5187: LD_INT 34
5189: PUSH
5190: LD_INT 36
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 101
5228: PUSH
5229: LD_INT 102
5231: PUSH
5232: LD_INT 103
5234: PUSH
5235: LD_INT 104
5237: PUSH
5238: LD_INT 105
5240: PUSH
5241: LD_INT 106
5243: PUSH
5244: LD_INT 107
5246: PUSH
5247: LD_INT 108
5249: PUSH
5250: LD_INT 109
5252: PUSH
5253: LD_INT 110
5255: PUSH
5256: LD_INT 111
5258: PUSH
5259: LD_INT 112
5261: PUSH
5262: LD_INT 113
5264: PUSH
5265: LD_INT 114
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: ST_TO_ADDR
5288: GO 6455
5290: LD_INT 14
5292: DOUBLE
5293: EQUAL
5294: IFTRUE 5298
5296: GO 5510
5298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5299: LD_ADDR_VAR 0 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 2
5309: PUSH
5310: LD_INT 3
5312: PUSH
5313: LD_INT 4
5315: PUSH
5316: LD_INT 5
5318: PUSH
5319: LD_INT 6
5321: PUSH
5322: LD_INT 7
5324: PUSH
5325: LD_INT 8
5327: PUSH
5328: LD_INT 9
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 11
5336: PUSH
5337: LD_INT 12
5339: PUSH
5340: LD_INT 13
5342: PUSH
5343: LD_INT 14
5345: PUSH
5346: LD_INT 15
5348: PUSH
5349: LD_INT 16
5351: PUSH
5352: LD_INT 17
5354: PUSH
5355: LD_INT 18
5357: PUSH
5358: LD_INT 19
5360: PUSH
5361: LD_INT 20
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 23
5372: PUSH
5373: LD_INT 24
5375: PUSH
5376: LD_INT 25
5378: PUSH
5379: LD_INT 26
5381: PUSH
5382: LD_INT 27
5384: PUSH
5385: LD_INT 28
5387: PUSH
5388: LD_INT 29
5390: PUSH
5391: LD_INT 30
5393: PUSH
5394: LD_INT 31
5396: PUSH
5397: LD_INT 32
5399: PUSH
5400: LD_INT 33
5402: PUSH
5403: LD_INT 34
5405: PUSH
5406: LD_INT 36
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 102
5451: PUSH
5452: LD_INT 103
5454: PUSH
5455: LD_INT 104
5457: PUSH
5458: LD_INT 105
5460: PUSH
5461: LD_INT 106
5463: PUSH
5464: LD_INT 107
5466: PUSH
5467: LD_INT 108
5469: PUSH
5470: LD_INT 109
5472: PUSH
5473: LD_INT 110
5475: PUSH
5476: LD_INT 111
5478: PUSH
5479: LD_INT 112
5481: PUSH
5482: LD_INT 113
5484: PUSH
5485: LD_INT 114
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: ST_TO_ADDR
5508: GO 6455
5510: LD_INT 15
5512: DOUBLE
5513: EQUAL
5514: IFTRUE 5518
5516: GO 5730
5518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5519: LD_ADDR_VAR 0 1
5523: PUSH
5524: LD_INT 1
5526: PUSH
5527: LD_INT 2
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: LD_INT 5
5538: PUSH
5539: LD_INT 6
5541: PUSH
5542: LD_INT 7
5544: PUSH
5545: LD_INT 8
5547: PUSH
5548: LD_INT 9
5550: PUSH
5551: LD_INT 10
5553: PUSH
5554: LD_INT 11
5556: PUSH
5557: LD_INT 12
5559: PUSH
5560: LD_INT 13
5562: PUSH
5563: LD_INT 14
5565: PUSH
5566: LD_INT 15
5568: PUSH
5569: LD_INT 16
5571: PUSH
5572: LD_INT 17
5574: PUSH
5575: LD_INT 18
5577: PUSH
5578: LD_INT 19
5580: PUSH
5581: LD_INT 20
5583: PUSH
5584: LD_INT 21
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_INT 23
5592: PUSH
5593: LD_INT 24
5595: PUSH
5596: LD_INT 25
5598: PUSH
5599: LD_INT 26
5601: PUSH
5602: LD_INT 27
5604: PUSH
5605: LD_INT 28
5607: PUSH
5608: LD_INT 29
5610: PUSH
5611: LD_INT 30
5613: PUSH
5614: LD_INT 31
5616: PUSH
5617: LD_INT 32
5619: PUSH
5620: LD_INT 33
5622: PUSH
5623: LD_INT 34
5625: PUSH
5626: LD_INT 36
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 101
5668: PUSH
5669: LD_INT 102
5671: PUSH
5672: LD_INT 103
5674: PUSH
5675: LD_INT 104
5677: PUSH
5678: LD_INT 105
5680: PUSH
5681: LD_INT 106
5683: PUSH
5684: LD_INT 107
5686: PUSH
5687: LD_INT 108
5689: PUSH
5690: LD_INT 109
5692: PUSH
5693: LD_INT 110
5695: PUSH
5696: LD_INT 111
5698: PUSH
5699: LD_INT 112
5701: PUSH
5702: LD_INT 113
5704: PUSH
5705: LD_INT 114
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: ST_TO_ADDR
5728: GO 6455
5730: LD_INT 16
5732: DOUBLE
5733: EQUAL
5734: IFTRUE 5738
5736: GO 5862
5738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5739: LD_ADDR_VAR 0 1
5743: PUSH
5744: LD_INT 2
5746: PUSH
5747: LD_INT 4
5749: PUSH
5750: LD_INT 5
5752: PUSH
5753: LD_INT 7
5755: PUSH
5756: LD_INT 11
5758: PUSH
5759: LD_INT 12
5761: PUSH
5762: LD_INT 15
5764: PUSH
5765: LD_INT 16
5767: PUSH
5768: LD_INT 20
5770: PUSH
5771: LD_INT 21
5773: PUSH
5774: LD_INT 22
5776: PUSH
5777: LD_INT 23
5779: PUSH
5780: LD_INT 25
5782: PUSH
5783: LD_INT 26
5785: PUSH
5786: LD_INT 30
5788: PUSH
5789: LD_INT 31
5791: PUSH
5792: LD_INT 32
5794: PUSH
5795: LD_INT 33
5797: PUSH
5798: LD_INT 34
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 101
5824: PUSH
5825: LD_INT 102
5827: PUSH
5828: LD_INT 103
5830: PUSH
5831: LD_INT 106
5833: PUSH
5834: LD_INT 108
5836: PUSH
5837: LD_INT 112
5839: PUSH
5840: LD_INT 113
5842: PUSH
5843: LD_INT 114
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: ST_TO_ADDR
5860: GO 6455
5862: LD_INT 17
5864: DOUBLE
5865: EQUAL
5866: IFTRUE 5870
5868: GO 6082
5870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_INT 1
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: LD_INT 11
5908: PUSH
5909: LD_INT 12
5911: PUSH
5912: LD_INT 13
5914: PUSH
5915: LD_INT 14
5917: PUSH
5918: LD_INT 15
5920: PUSH
5921: LD_INT 16
5923: PUSH
5924: LD_INT 17
5926: PUSH
5927: LD_INT 18
5929: PUSH
5930: LD_INT 19
5932: PUSH
5933: LD_INT 20
5935: PUSH
5936: LD_INT 21
5938: PUSH
5939: LD_INT 22
5941: PUSH
5942: LD_INT 23
5944: PUSH
5945: LD_INT 24
5947: PUSH
5948: LD_INT 25
5950: PUSH
5951: LD_INT 26
5953: PUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 28
5959: PUSH
5960: LD_INT 29
5962: PUSH
5963: LD_INT 30
5965: PUSH
5966: LD_INT 31
5968: PUSH
5969: LD_INT 32
5971: PUSH
5972: LD_INT 33
5974: PUSH
5975: LD_INT 34
5977: PUSH
5978: LD_INT 36
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 101
6020: PUSH
6021: LD_INT 102
6023: PUSH
6024: LD_INT 103
6026: PUSH
6027: LD_INT 104
6029: PUSH
6030: LD_INT 105
6032: PUSH
6033: LD_INT 106
6035: PUSH
6036: LD_INT 107
6038: PUSH
6039: LD_INT 108
6041: PUSH
6042: LD_INT 109
6044: PUSH
6045: LD_INT 110
6047: PUSH
6048: LD_INT 111
6050: PUSH
6051: LD_INT 112
6053: PUSH
6054: LD_INT 113
6056: PUSH
6057: LD_INT 114
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: ST_TO_ADDR
6080: GO 6455
6082: LD_INT 18
6084: DOUBLE
6085: EQUAL
6086: IFTRUE 6090
6088: GO 6226
6090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6091: LD_ADDR_VAR 0 1
6095: PUSH
6096: LD_INT 2
6098: PUSH
6099: LD_INT 4
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 7
6107: PUSH
6108: LD_INT 11
6110: PUSH
6111: LD_INT 12
6113: PUSH
6114: LD_INT 15
6116: PUSH
6117: LD_INT 16
6119: PUSH
6120: LD_INT 20
6122: PUSH
6123: LD_INT 21
6125: PUSH
6126: LD_INT 22
6128: PUSH
6129: LD_INT 23
6131: PUSH
6132: LD_INT 25
6134: PUSH
6135: LD_INT 26
6137: PUSH
6138: LD_INT 30
6140: PUSH
6141: LD_INT 31
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 33
6149: PUSH
6150: LD_INT 34
6152: PUSH
6153: LD_INT 35
6155: PUSH
6156: LD_INT 36
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 101
6184: PUSH
6185: LD_INT 102
6187: PUSH
6188: LD_INT 103
6190: PUSH
6191: LD_INT 106
6193: PUSH
6194: LD_INT 108
6196: PUSH
6197: LD_INT 112
6199: PUSH
6200: LD_INT 113
6202: PUSH
6203: LD_INT 114
6205: PUSH
6206: LD_INT 115
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: ST_TO_ADDR
6224: GO 6455
6226: LD_INT 19
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6234
6232: GO 6454
6234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6235: LD_ADDR_VAR 0 1
6239: PUSH
6240: LD_INT 1
6242: PUSH
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 7
6260: PUSH
6261: LD_INT 8
6263: PUSH
6264: LD_INT 9
6266: PUSH
6267: LD_INT 10
6269: PUSH
6270: LD_INT 11
6272: PUSH
6273: LD_INT 12
6275: PUSH
6276: LD_INT 13
6278: PUSH
6279: LD_INT 14
6281: PUSH
6282: LD_INT 15
6284: PUSH
6285: LD_INT 16
6287: PUSH
6288: LD_INT 17
6290: PUSH
6291: LD_INT 18
6293: PUSH
6294: LD_INT 19
6296: PUSH
6297: LD_INT 20
6299: PUSH
6300: LD_INT 21
6302: PUSH
6303: LD_INT 22
6305: PUSH
6306: LD_INT 23
6308: PUSH
6309: LD_INT 24
6311: PUSH
6312: LD_INT 25
6314: PUSH
6315: LD_INT 26
6317: PUSH
6318: LD_INT 27
6320: PUSH
6321: LD_INT 28
6323: PUSH
6324: LD_INT 29
6326: PUSH
6327: LD_INT 30
6329: PUSH
6330: LD_INT 31
6332: PUSH
6333: LD_INT 32
6335: PUSH
6336: LD_INT 33
6338: PUSH
6339: LD_INT 34
6341: PUSH
6342: LD_INT 35
6344: PUSH
6345: LD_INT 36
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 101
6388: PUSH
6389: LD_INT 102
6391: PUSH
6392: LD_INT 103
6394: PUSH
6395: LD_INT 104
6397: PUSH
6398: LD_INT 105
6400: PUSH
6401: LD_INT 106
6403: PUSH
6404: LD_INT 107
6406: PUSH
6407: LD_INT 108
6409: PUSH
6410: LD_INT 109
6412: PUSH
6413: LD_INT 110
6415: PUSH
6416: LD_INT 111
6418: PUSH
6419: LD_INT 112
6421: PUSH
6422: LD_INT 113
6424: PUSH
6425: LD_INT 114
6427: PUSH
6428: LD_INT 115
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: ST_TO_ADDR
6452: GO 6455
6454: POP
// end else
6455: GO 6674
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6457: LD_ADDR_VAR 0 1
6461: PUSH
6462: LD_INT 1
6464: PUSH
6465: LD_INT 2
6467: PUSH
6468: LD_INT 3
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: LD_INT 6
6479: PUSH
6480: LD_INT 7
6482: PUSH
6483: LD_INT 8
6485: PUSH
6486: LD_INT 9
6488: PUSH
6489: LD_INT 10
6491: PUSH
6492: LD_INT 11
6494: PUSH
6495: LD_INT 12
6497: PUSH
6498: LD_INT 13
6500: PUSH
6501: LD_INT 14
6503: PUSH
6504: LD_INT 15
6506: PUSH
6507: LD_INT 16
6509: PUSH
6510: LD_INT 17
6512: PUSH
6513: LD_INT 18
6515: PUSH
6516: LD_INT 19
6518: PUSH
6519: LD_INT 20
6521: PUSH
6522: LD_INT 21
6524: PUSH
6525: LD_INT 22
6527: PUSH
6528: LD_INT 23
6530: PUSH
6531: LD_INT 24
6533: PUSH
6534: LD_INT 25
6536: PUSH
6537: LD_INT 26
6539: PUSH
6540: LD_INT 27
6542: PUSH
6543: LD_INT 28
6545: PUSH
6546: LD_INT 29
6548: PUSH
6549: LD_INT 30
6551: PUSH
6552: LD_INT 31
6554: PUSH
6555: LD_INT 32
6557: PUSH
6558: LD_INT 33
6560: PUSH
6561: LD_INT 34
6563: PUSH
6564: LD_INT 35
6566: PUSH
6567: LD_INT 36
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 101
6610: PUSH
6611: LD_INT 102
6613: PUSH
6614: LD_INT 103
6616: PUSH
6617: LD_INT 104
6619: PUSH
6620: LD_INT 105
6622: PUSH
6623: LD_INT 106
6625: PUSH
6626: LD_INT 107
6628: PUSH
6629: LD_INT 108
6631: PUSH
6632: LD_INT 109
6634: PUSH
6635: LD_INT 110
6637: PUSH
6638: LD_INT 111
6640: PUSH
6641: LD_INT 112
6643: PUSH
6644: LD_INT 113
6646: PUSH
6647: LD_INT 114
6649: PUSH
6650: LD_INT 115
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: ST_TO_ADDR
// if result then
6674: LD_VAR 0 1
6678: IFFALSE 6967
// begin normal :=  ;
6680: LD_ADDR_VAR 0 3
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// hardcore :=  ;
6688: LD_ADDR_VAR 0 4
6692: PUSH
6693: LD_STRING 
6695: ST_TO_ADDR
// for i = 1 to normalCounter do
6696: LD_ADDR_VAR 0 5
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_EXP 9
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6813
// begin tmp := 0 ;
6714: LD_ADDR_VAR 0 2
6718: PUSH
6719: LD_STRING 0
6721: ST_TO_ADDR
// if result [ 1 ] then
6722: LD_VAR 0 1
6726: PUSH
6727: LD_INT 1
6729: ARRAY
6730: IFFALSE 6795
// if result [ 1 ] [ 1 ] = i then
6732: LD_VAR 0 1
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: PUSH
6741: LD_INT 1
6743: ARRAY
6744: PUSH
6745: LD_VAR 0 5
6749: EQUAL
6750: IFFALSE 6795
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6752: LD_ADDR_VAR 0 1
6756: PUSH
6757: LD_VAR 0 1
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: LD_VAR 0 1
6769: PUSH
6770: LD_INT 1
6772: ARRAY
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 3
6781: PPUSH
6782: CALL_OW 1
6786: ST_TO_ADDR
// tmp := 1 ;
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_STRING 1
6794: ST_TO_ADDR
// end ; normal := normal & tmp ;
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_VAR 0 3
6804: PUSH
6805: LD_VAR 0 2
6809: STR
6810: ST_TO_ADDR
// end ;
6811: GO 6711
6813: POP
6814: POP
// for i = 1 to hardcoreCounter do
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_EXP 10
6829: PUSH
6830: FOR_TO
6831: IFFALSE 6936
// begin tmp := 0 ;
6833: LD_ADDR_VAR 0 2
6837: PUSH
6838: LD_STRING 0
6840: ST_TO_ADDR
// if result [ 2 ] then
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 2
6848: ARRAY
6849: IFFALSE 6918
// if result [ 2 ] [ 1 ] = 100 + i then
6851: LD_VAR 0 1
6855: PUSH
6856: LD_INT 2
6858: ARRAY
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: PUSH
6864: LD_INT 100
6866: PUSH
6867: LD_VAR 0 5
6871: PLUS
6872: EQUAL
6873: IFFALSE 6918
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6875: LD_ADDR_VAR 0 1
6879: PUSH
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_INT 2
6887: PPUSH
6888: LD_VAR 0 1
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_INT 1
6899: PPUSH
6900: CALL_OW 3
6904: PPUSH
6905: CALL_OW 1
6909: ST_TO_ADDR
// tmp := 1 ;
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_STRING 1
6917: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: LD_VAR 0 4
6927: PUSH
6928: LD_VAR 0 2
6932: STR
6933: ST_TO_ADDR
// end ;
6934: GO 6830
6936: POP
6937: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6938: LD_STRING getStreamItemsFromMission("
6940: PUSH
6941: LD_VAR 0 3
6945: STR
6946: PUSH
6947: LD_STRING ","
6949: STR
6950: PUSH
6951: LD_VAR 0 4
6955: STR
6956: PUSH
6957: LD_STRING ")
6959: STR
6960: PPUSH
6961: CALL_OW 559
// end else
6965: GO 6974
// ToLua ( getStreamItemsFromMission("","") ) ;
6967: LD_STRING getStreamItemsFromMission("","")
6969: PPUSH
6970: CALL_OW 559
// end ;
6974: LD_VAR 0 1
6978: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6979: LD_EXP 8
6983: PUSH
6984: LD_EXP 13
6988: AND
6989: IFFALSE 7113
6991: GO 6993
6993: DISABLE
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
// begin enable ;
6998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6999: LD_ADDR_VAR 0 2
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_OWVAR 2
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 2
7018: PUSH
7019: LD_INT 34
7021: PUSH
7022: LD_INT 7
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 34
7031: PUSH
7032: LD_INT 45
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 34
7041: PUSH
7042: LD_INT 28
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 34
7051: PUSH
7052: LD_INT 47
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PPUSH
7070: CALL_OW 69
7074: ST_TO_ADDR
// if not tmp then
7075: LD_VAR 0 2
7079: NOT
7080: IFFALSE 7084
// exit ;
7082: GO 7113
// for i in tmp do
7084: LD_ADDR_VAR 0 1
7088: PUSH
7089: LD_VAR 0 2
7093: PUSH
7094: FOR_IN
7095: IFFALSE 7111
// begin SetLives ( i , 0 ) ;
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL_OW 234
// end ;
7109: GO 7094
7111: POP
7112: POP
// end ;
7113: PPOPN 2
7115: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7116: LD_EXP 8
7120: PUSH
7121: LD_EXP 14
7125: AND
7126: IFFALSE 7210
7128: GO 7130
7130: DISABLE
7131: LD_INT 0
7133: PPUSH
7134: PPUSH
// begin enable ;
7135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7136: LD_ADDR_VAR 0 2
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_OWVAR 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 32
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PPUSH
7167: CALL_OW 69
7171: ST_TO_ADDR
// if not tmp then
7172: LD_VAR 0 2
7176: NOT
7177: IFFALSE 7181
// exit ;
7179: GO 7210
// for i in tmp do
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_VAR 0 2
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7208
// begin SetLives ( i , 0 ) ;
7194: LD_VAR 0 1
7198: PPUSH
7199: LD_INT 0
7201: PPUSH
7202: CALL_OW 234
// end ;
7206: GO 7191
7208: POP
7209: POP
// end ;
7210: PPOPN 2
7212: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7213: LD_EXP 8
7217: PUSH
7218: LD_EXP 11
7222: AND
7223: IFFALSE 7316
7225: GO 7227
7227: DISABLE
7228: LD_INT 0
7230: PPUSH
// begin enable ;
7231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7232: LD_ADDR_VAR 0 1
7236: PUSH
7237: LD_INT 22
7239: PUSH
7240: LD_OWVAR 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 2
7251: PUSH
7252: LD_INT 25
7254: PUSH
7255: LD_INT 5
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 25
7264: PUSH
7265: LD_INT 9
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 25
7274: PUSH
7275: LD_INT 8
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: PUSH
7297: FOR_IN
7298: IFFALSE 7314
// begin SetClass ( i , 1 ) ;
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_INT 1
7307: PPUSH
7308: CALL_OW 336
// end ;
7312: GO 7297
7314: POP
7315: POP
// end ;
7316: PPOPN 1
7318: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7319: LD_EXP 8
7323: PUSH
7324: LD_EXP 12
7328: AND
7329: PUSH
7330: LD_OWVAR 65
7334: PUSH
7335: LD_INT 7
7337: LESS
7338: AND
7339: IFFALSE 7353
7341: GO 7343
7343: DISABLE
// begin enable ;
7344: ENABLE
// game_speed := 7 ;
7345: LD_ADDR_OWVAR 65
7349: PUSH
7350: LD_INT 7
7352: ST_TO_ADDR
// end ;
7353: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7354: LD_EXP 8
7358: PUSH
7359: LD_EXP 15
7363: AND
7364: IFFALSE 7566
7366: GO 7368
7368: DISABLE
7369: LD_INT 0
7371: PPUSH
7372: PPUSH
7373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7374: LD_ADDR_VAR 0 3
7378: PUSH
7379: LD_INT 81
7381: PUSH
7382: LD_OWVAR 2
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 21
7393: PUSH
7394: LD_INT 1
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 69
7409: ST_TO_ADDR
// if not tmp then
7410: LD_VAR 0 3
7414: NOT
7415: IFFALSE 7419
// exit ;
7417: GO 7566
// if tmp > 5 then
7419: LD_VAR 0 3
7423: PUSH
7424: LD_INT 5
7426: GREATER
7427: IFFALSE 7439
// k := 5 else
7429: LD_ADDR_VAR 0 2
7433: PUSH
7434: LD_INT 5
7436: ST_TO_ADDR
7437: GO 7449
// k := tmp ;
7439: LD_ADDR_VAR 0 2
7443: PUSH
7444: LD_VAR 0 3
7448: ST_TO_ADDR
// for i := 1 to k do
7449: LD_ADDR_VAR 0 1
7453: PUSH
7454: DOUBLE
7455: LD_INT 1
7457: DEC
7458: ST_TO_ADDR
7459: LD_VAR 0 2
7463: PUSH
7464: FOR_TO
7465: IFFALSE 7564
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_VAR 0 1
7476: ARRAY
7477: PPUSH
7478: LD_VAR 0 1
7482: PUSH
7483: LD_INT 4
7485: MOD
7486: PUSH
7487: LD_INT 1
7489: PLUS
7490: PPUSH
7491: CALL_OW 259
7495: PUSH
7496: LD_INT 10
7498: LESS
7499: IFFALSE 7562
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7501: LD_VAR 0 3
7505: PUSH
7506: LD_VAR 0 1
7510: ARRAY
7511: PPUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_INT 4
7519: MOD
7520: PUSH
7521: LD_INT 1
7523: PLUS
7524: PPUSH
7525: LD_VAR 0 3
7529: PUSH
7530: LD_VAR 0 1
7534: ARRAY
7535: PPUSH
7536: LD_VAR 0 1
7540: PUSH
7541: LD_INT 4
7543: MOD
7544: PUSH
7545: LD_INT 1
7547: PLUS
7548: PPUSH
7549: CALL_OW 259
7553: PUSH
7554: LD_INT 1
7556: PLUS
7557: PPUSH
7558: CALL_OW 237
7562: GO 7464
7564: POP
7565: POP
// end ;
7566: PPOPN 3
7568: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7569: LD_EXP 8
7573: PUSH
7574: LD_EXP 16
7578: AND
7579: IFFALSE 7599
7581: GO 7583
7583: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7584: LD_INT 4
7586: PPUSH
7587: LD_OWVAR 2
7591: PPUSH
7592: LD_INT 0
7594: PPUSH
7595: CALL_OW 324
7599: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7600: LD_EXP 8
7604: PUSH
7605: LD_EXP 45
7609: AND
7610: IFFALSE 7630
7612: GO 7614
7614: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7615: LD_INT 19
7617: PPUSH
7618: LD_OWVAR 2
7622: PPUSH
7623: LD_INT 0
7625: PPUSH
7626: CALL_OW 324
7630: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7631: LD_EXP 8
7635: PUSH
7636: LD_EXP 17
7640: AND
7641: IFFALSE 7743
7643: GO 7645
7645: DISABLE
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
// begin enable ;
7650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_INT 22
7658: PUSH
7659: LD_OWVAR 2
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 34
7673: PUSH
7674: LD_INT 11
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 34
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 69
7704: ST_TO_ADDR
// if not tmp then
7705: LD_VAR 0 2
7709: NOT
7710: IFFALSE 7714
// exit ;
7712: GO 7743
// for i in tmp do
7714: LD_ADDR_VAR 0 1
7718: PUSH
7719: LD_VAR 0 2
7723: PUSH
7724: FOR_IN
7725: IFFALSE 7741
// begin SetLives ( i , 0 ) ;
7727: LD_VAR 0 1
7731: PPUSH
7732: LD_INT 0
7734: PPUSH
7735: CALL_OW 234
// end ;
7739: GO 7724
7741: POP
7742: POP
// end ;
7743: PPOPN 2
7745: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7746: LD_EXP 8
7750: PUSH
7751: LD_EXP 18
7755: AND
7756: IFFALSE 7776
7758: GO 7760
7760: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7761: LD_INT 32
7763: PPUSH
7764: LD_OWVAR 2
7768: PPUSH
7769: LD_INT 0
7771: PPUSH
7772: CALL_OW 324
7776: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7777: LD_EXP 8
7781: PUSH
7782: LD_EXP 19
7786: AND
7787: IFFALSE 7968
7789: GO 7791
7791: DISABLE
7792: LD_INT 0
7794: PPUSH
7795: PPUSH
7796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7797: LD_ADDR_VAR 0 2
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_OWVAR 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 33
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 69
7832: ST_TO_ADDR
// if not tmp then
7833: LD_VAR 0 2
7837: NOT
7838: IFFALSE 7842
// exit ;
7840: GO 7968
// side := 0 ;
7842: LD_ADDR_VAR 0 3
7846: PUSH
7847: LD_INT 0
7849: ST_TO_ADDR
// for i := 1 to 8 do
7850: LD_ADDR_VAR 0 1
7854: PUSH
7855: DOUBLE
7856: LD_INT 1
7858: DEC
7859: ST_TO_ADDR
7860: LD_INT 8
7862: PUSH
7863: FOR_TO
7864: IFFALSE 7912
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7866: LD_OWVAR 2
7870: PUSH
7871: LD_VAR 0 1
7875: NONEQUAL
7876: PUSH
7877: LD_OWVAR 2
7881: PPUSH
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 81
7891: PUSH
7892: LD_INT 2
7894: EQUAL
7895: AND
7896: IFFALSE 7910
// begin side := i ;
7898: LD_ADDR_VAR 0 3
7902: PUSH
7903: LD_VAR 0 1
7907: ST_TO_ADDR
// break ;
7908: GO 7912
// end ;
7910: GO 7863
7912: POP
7913: POP
// if not side then
7914: LD_VAR 0 3
7918: NOT
7919: IFFALSE 7923
// exit ;
7921: GO 7968
// for i := 1 to tmp do
7923: LD_ADDR_VAR 0 1
7927: PUSH
7928: DOUBLE
7929: LD_INT 1
7931: DEC
7932: ST_TO_ADDR
7933: LD_VAR 0 2
7937: PUSH
7938: FOR_TO
7939: IFFALSE 7966
// if Prob ( 60 ) then
7941: LD_INT 60
7943: PPUSH
7944: CALL_OW 13
7948: IFFALSE 7964
// SetSide ( i , side ) ;
7950: LD_VAR 0 1
7954: PPUSH
7955: LD_VAR 0 3
7959: PPUSH
7960: CALL_OW 235
7964: GO 7938
7966: POP
7967: POP
// end ;
7968: PPOPN 3
7970: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7971: LD_EXP 8
7975: PUSH
7976: LD_EXP 21
7980: AND
7981: IFFALSE 8100
7983: GO 7985
7985: DISABLE
7986: LD_INT 0
7988: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: LD_INT 22
7996: PUSH
7997: LD_OWVAR 2
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 21
8008: PUSH
8009: LD_INT 1
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 3
8018: PUSH
8019: LD_INT 23
8021: PUSH
8022: LD_INT 0
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: PPUSH
8038: CALL_OW 69
8042: PUSH
8043: FOR_IN
8044: IFFALSE 8098
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 257
8055: PUSH
8056: LD_INT 1
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 3
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: IN
8074: IFFALSE 8096
// SetClass ( un , rand ( 1 , 4 ) ) ;
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_INT 1
8083: PPUSH
8084: LD_INT 4
8086: PPUSH
8087: CALL_OW 12
8091: PPUSH
8092: CALL_OW 336
8096: GO 8043
8098: POP
8099: POP
// end ;
8100: PPOPN 1
8102: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8103: LD_EXP 8
8107: PUSH
8108: LD_EXP 20
8112: AND
8113: IFFALSE 8192
8115: GO 8117
8117: DISABLE
8118: LD_INT 0
8120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8121: LD_ADDR_VAR 0 1
8125: PUSH
8126: LD_INT 22
8128: PUSH
8129: LD_OWVAR 2
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 21
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PPUSH
8152: CALL_OW 69
8156: ST_TO_ADDR
// if not tmp then
8157: LD_VAR 0 1
8161: NOT
8162: IFFALSE 8166
// exit ;
8164: GO 8192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8166: LD_VAR 0 1
8170: PUSH
8171: LD_INT 1
8173: PPUSH
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 12
8183: ARRAY
8184: PPUSH
8185: LD_INT 100
8187: PPUSH
8188: CALL_OW 234
// end ;
8192: PPOPN 1
8194: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8195: LD_EXP 8
8199: PUSH
8200: LD_EXP 22
8204: AND
8205: IFFALSE 8303
8207: GO 8209
8209: DISABLE
8210: LD_INT 0
8212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_INT 22
8220: PUSH
8221: LD_OWVAR 2
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 1
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 69
8248: ST_TO_ADDR
// if not tmp then
8249: LD_VAR 0 1
8253: NOT
8254: IFFALSE 8258
// exit ;
8256: GO 8303
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8258: LD_VAR 0 1
8262: PUSH
8263: LD_INT 1
8265: PPUSH
8266: LD_VAR 0 1
8270: PPUSH
8271: CALL_OW 12
8275: ARRAY
8276: PPUSH
8277: LD_INT 1
8279: PPUSH
8280: LD_INT 4
8282: PPUSH
8283: CALL_OW 12
8287: PPUSH
8288: LD_INT 3000
8290: PPUSH
8291: LD_INT 9000
8293: PPUSH
8294: CALL_OW 12
8298: PPUSH
8299: CALL_OW 492
// end ;
8303: PPOPN 1
8305: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8306: LD_EXP 8
8310: PUSH
8311: LD_EXP 23
8315: AND
8316: IFFALSE 8336
8318: GO 8320
8320: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8321: LD_INT 1
8323: PPUSH
8324: LD_OWVAR 2
8328: PPUSH
8329: LD_INT 0
8331: PPUSH
8332: CALL_OW 324
8336: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8337: LD_EXP 8
8341: PUSH
8342: LD_EXP 24
8346: AND
8347: IFFALSE 8430
8349: GO 8351
8351: DISABLE
8352: LD_INT 0
8354: PPUSH
8355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8356: LD_ADDR_VAR 0 2
8360: PUSH
8361: LD_INT 22
8363: PUSH
8364: LD_OWVAR 2
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 21
8375: PUSH
8376: LD_INT 3
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PPUSH
8387: CALL_OW 69
8391: ST_TO_ADDR
// if not tmp then
8392: LD_VAR 0 2
8396: NOT
8397: IFFALSE 8401
// exit ;
8399: GO 8430
// for i in tmp do
8401: LD_ADDR_VAR 0 1
8405: PUSH
8406: LD_VAR 0 2
8410: PUSH
8411: FOR_IN
8412: IFFALSE 8428
// SetBLevel ( i , 10 ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: LD_INT 10
8421: PPUSH
8422: CALL_OW 241
8426: GO 8411
8428: POP
8429: POP
// end ;
8430: PPOPN 2
8432: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8433: LD_EXP 8
8437: PUSH
8438: LD_EXP 25
8442: AND
8443: IFFALSE 8554
8445: GO 8447
8447: DISABLE
8448: LD_INT 0
8450: PPUSH
8451: PPUSH
8452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8453: LD_ADDR_VAR 0 3
8457: PUSH
8458: LD_INT 22
8460: PUSH
8461: LD_OWVAR 2
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: ST_TO_ADDR
// if not tmp then
8489: LD_VAR 0 3
8493: NOT
8494: IFFALSE 8498
// exit ;
8496: GO 8554
// un := tmp [ rand ( 1 , tmp ) ] ;
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 1
8510: PPUSH
8511: LD_VAR 0 3
8515: PPUSH
8516: CALL_OW 12
8520: ARRAY
8521: ST_TO_ADDR
// if Crawls ( un ) then
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 318
8531: IFFALSE 8542
// ComWalk ( un ) ;
8533: LD_VAR 0 2
8537: PPUSH
8538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8542: LD_VAR 0 2
8546: PPUSH
8547: LD_INT 5
8549: PPUSH
8550: CALL_OW 336
// end ;
8554: PPOPN 3
8556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8557: LD_EXP 8
8561: PUSH
8562: LD_EXP 26
8566: AND
8567: PUSH
8568: LD_OWVAR 67
8572: PUSH
8573: LD_INT 3
8575: LESS
8576: AND
8577: IFFALSE 8596
8579: GO 8581
8581: DISABLE
// Difficulty := Difficulty + 1 ;
8582: LD_ADDR_OWVAR 67
8586: PUSH
8587: LD_OWVAR 67
8591: PUSH
8592: LD_INT 1
8594: PLUS
8595: ST_TO_ADDR
8596: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8597: LD_EXP 8
8601: PUSH
8602: LD_EXP 27
8606: AND
8607: IFFALSE 8710
8609: GO 8611
8611: DISABLE
8612: LD_INT 0
8614: PPUSH
// begin for i := 1 to 5 do
8615: LD_ADDR_VAR 0 1
8619: PUSH
8620: DOUBLE
8621: LD_INT 1
8623: DEC
8624: ST_TO_ADDR
8625: LD_INT 5
8627: PUSH
8628: FOR_TO
8629: IFFALSE 8708
// begin uc_nation := nation_nature ;
8631: LD_ADDR_OWVAR 21
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// uc_side := 0 ;
8639: LD_ADDR_OWVAR 20
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8647: LD_ADDR_OWVAR 29
8651: PUSH
8652: LD_INT 12
8654: PUSH
8655: LD_INT 12
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: ST_TO_ADDR
// hc_agressivity := 20 ;
8662: LD_ADDR_OWVAR 35
8666: PUSH
8667: LD_INT 20
8669: ST_TO_ADDR
// hc_class := class_tiger ;
8670: LD_ADDR_OWVAR 28
8674: PUSH
8675: LD_INT 14
8677: ST_TO_ADDR
// hc_gallery :=  ;
8678: LD_ADDR_OWVAR 33
8682: PUSH
8683: LD_STRING 
8685: ST_TO_ADDR
// hc_name :=  ;
8686: LD_ADDR_OWVAR 26
8690: PUSH
8691: LD_STRING 
8693: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8694: CALL_OW 44
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 51
// end ;
8706: GO 8628
8708: POP
8709: POP
// end ;
8710: PPOPN 1
8712: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8713: LD_EXP 8
8717: PUSH
8718: LD_EXP 28
8722: AND
8723: IFFALSE 8732
8725: GO 8727
8727: DISABLE
// StreamSibBomb ;
8728: CALL 8733 0 0
8732: END
// export function StreamSibBomb ; var i , x , y ; begin
8733: LD_INT 0
8735: PPUSH
8736: PPUSH
8737: PPUSH
8738: PPUSH
// result := false ;
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// for i := 1 to 16 do
8747: LD_ADDR_VAR 0 2
8751: PUSH
8752: DOUBLE
8753: LD_INT 1
8755: DEC
8756: ST_TO_ADDR
8757: LD_INT 16
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8960
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8763: LD_ADDR_VAR 0 3
8767: PUSH
8768: LD_INT 10
8770: PUSH
8771: LD_INT 20
8773: PUSH
8774: LD_INT 30
8776: PUSH
8777: LD_INT 40
8779: PUSH
8780: LD_INT 50
8782: PUSH
8783: LD_INT 60
8785: PUSH
8786: LD_INT 70
8788: PUSH
8789: LD_INT 80
8791: PUSH
8792: LD_INT 90
8794: PUSH
8795: LD_INT 100
8797: PUSH
8798: LD_INT 110
8800: PUSH
8801: LD_INT 120
8803: PUSH
8804: LD_INT 130
8806: PUSH
8807: LD_INT 140
8809: PUSH
8810: LD_INT 150
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 1
8832: PPUSH
8833: LD_INT 15
8835: PPUSH
8836: CALL_OW 12
8840: ARRAY
8841: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8842: LD_ADDR_VAR 0 4
8846: PUSH
8847: LD_INT 10
8849: PUSH
8850: LD_INT 20
8852: PUSH
8853: LD_INT 30
8855: PUSH
8856: LD_INT 40
8858: PUSH
8859: LD_INT 50
8861: PUSH
8862: LD_INT 60
8864: PUSH
8865: LD_INT 70
8867: PUSH
8868: LD_INT 80
8870: PUSH
8871: LD_INT 90
8873: PUSH
8874: LD_INT 100
8876: PUSH
8877: LD_INT 110
8879: PUSH
8880: LD_INT 120
8882: PUSH
8883: LD_INT 130
8885: PUSH
8886: LD_INT 140
8888: PUSH
8889: LD_INT 150
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_INT 15
8914: PPUSH
8915: CALL_OW 12
8919: ARRAY
8920: ST_TO_ADDR
// if ValidHex ( x , y ) then
8921: LD_VAR 0 3
8925: PPUSH
8926: LD_VAR 0 4
8930: PPUSH
8931: CALL_OW 488
8935: IFFALSE 8958
// begin result := [ x , y ] ;
8937: LD_ADDR_VAR 0 1
8941: PUSH
8942: LD_VAR 0 3
8946: PUSH
8947: LD_VAR 0 4
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
// break ;
8956: GO 8960
// end ; end ;
8958: GO 8760
8960: POP
8961: POP
// if result then
8962: LD_VAR 0 1
8966: IFFALSE 9026
// begin ToLua ( playSibBomb() ) ;
8968: LD_STRING playSibBomb()
8970: PPUSH
8971: CALL_OW 559
// wait ( 0 0$14 ) ;
8975: LD_INT 490
8977: PPUSH
8978: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8982: LD_VAR 0 1
8986: PUSH
8987: LD_INT 1
8989: ARRAY
8990: PPUSH
8991: LD_VAR 0 1
8995: PUSH
8996: LD_INT 2
8998: ARRAY
8999: PPUSH
9000: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PPUSH
9013: LD_VAR 0 1
9017: PUSH
9018: LD_INT 2
9020: ARRAY
9021: PPUSH
9022: CALL_OW 429
// end ; end ;
9026: LD_VAR 0 1
9030: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9031: LD_EXP 8
9035: PUSH
9036: LD_EXP 30
9040: AND
9041: IFFALSE 9053
9043: GO 9045
9045: DISABLE
// YouLost (  ) ;
9046: LD_STRING 
9048: PPUSH
9049: CALL_OW 104
9053: END
// every 0 0$1 trigger StreamModeActive and sFog do
9054: LD_EXP 8
9058: PUSH
9059: LD_EXP 29
9063: AND
9064: IFFALSE 9078
9066: GO 9068
9068: DISABLE
// FogOff ( your_side ) ;
9069: LD_OWVAR 2
9073: PPUSH
9074: CALL_OW 344
9078: END
// every 0 0$1 trigger StreamModeActive and sSun do
9079: LD_EXP 8
9083: PUSH
9084: LD_EXP 31
9088: AND
9089: IFFALSE 9117
9091: GO 9093
9093: DISABLE
// begin solar_recharge_percent := 0 ;
9094: LD_ADDR_OWVAR 79
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9102: LD_INT 10500
9104: PPUSH
9105: CALL_OW 67
// solar_recharge_percent := 100 ;
9109: LD_ADDR_OWVAR 79
9113: PUSH
9114: LD_INT 100
9116: ST_TO_ADDR
// end ;
9117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9118: LD_EXP 8
9122: PUSH
9123: LD_EXP 32
9127: AND
9128: IFFALSE 9367
9130: GO 9132
9132: DISABLE
9133: LD_INT 0
9135: PPUSH
9136: PPUSH
9137: PPUSH
// begin tmp := [ ] ;
9138: LD_ADDR_VAR 0 3
9142: PUSH
9143: EMPTY
9144: ST_TO_ADDR
// for i := 1 to 6 do
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: DOUBLE
9151: LD_INT 1
9153: DEC
9154: ST_TO_ADDR
9155: LD_INT 6
9157: PUSH
9158: FOR_TO
9159: IFFALSE 9264
// begin uc_nation := nation_nature ;
9161: LD_ADDR_OWVAR 21
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// uc_side := 0 ;
9169: LD_ADDR_OWVAR 20
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9177: LD_ADDR_OWVAR 29
9181: PUSH
9182: LD_INT 12
9184: PUSH
9185: LD_INT 12
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: ST_TO_ADDR
// hc_agressivity := 20 ;
9192: LD_ADDR_OWVAR 35
9196: PUSH
9197: LD_INT 20
9199: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9200: LD_ADDR_OWVAR 28
9204: PUSH
9205: LD_INT 17
9207: ST_TO_ADDR
// hc_gallery :=  ;
9208: LD_ADDR_OWVAR 33
9212: PUSH
9213: LD_STRING 
9215: ST_TO_ADDR
// hc_name :=  ;
9216: LD_ADDR_OWVAR 26
9220: PUSH
9221: LD_STRING 
9223: ST_TO_ADDR
// un := CreateHuman ;
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: CALL_OW 44
9233: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9234: LD_VAR 0 2
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: CALL_OW 51
// tmp := tmp ^ un ;
9246: LD_ADDR_VAR 0 3
9250: PUSH
9251: LD_VAR 0 3
9255: PUSH
9256: LD_VAR 0 2
9260: ADD
9261: ST_TO_ADDR
// end ;
9262: GO 9158
9264: POP
9265: POP
// repeat wait ( 0 0$1 ) ;
9266: LD_INT 35
9268: PPUSH
9269: CALL_OW 67
// for un in tmp do
9273: LD_ADDR_VAR 0 2
9277: PUSH
9278: LD_VAR 0 3
9282: PUSH
9283: FOR_IN
9284: IFFALSE 9358
// begin if IsDead ( un ) then
9286: LD_VAR 0 2
9290: PPUSH
9291: CALL_OW 301
9295: IFFALSE 9315
// begin tmp := tmp diff un ;
9297: LD_ADDR_VAR 0 3
9301: PUSH
9302: LD_VAR 0 3
9306: PUSH
9307: LD_VAR 0 2
9311: DIFF
9312: ST_TO_ADDR
// continue ;
9313: GO 9283
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9315: LD_VAR 0 2
9319: PPUSH
9320: LD_INT 3
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 0
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: PPUSH
9342: LD_VAR 0 2
9346: PPUSH
9347: CALL_OW 74
9351: PPUSH
9352: CALL_OW 115
// end ;
9356: GO 9283
9358: POP
9359: POP
// until not tmp ;
9360: LD_VAR 0 3
9364: NOT
9365: IFFALSE 9266
// end ;
9367: PPOPN 3
9369: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9370: LD_EXP 8
9374: PUSH
9375: LD_EXP 33
9379: AND
9380: IFFALSE 9434
9382: GO 9384
9384: DISABLE
// begin ToLua ( displayTroll(); ) ;
9385: LD_STRING displayTroll();
9387: PPUSH
9388: CALL_OW 559
// wait ( 3 3$00 ) ;
9392: LD_INT 6300
9394: PPUSH
9395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9399: LD_STRING hideTroll();
9401: PPUSH
9402: CALL_OW 559
// wait ( 1 1$00 ) ;
9406: LD_INT 2100
9408: PPUSH
9409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9413: LD_STRING displayTroll();
9415: PPUSH
9416: CALL_OW 559
// wait ( 1 1$00 ) ;
9420: LD_INT 2100
9422: PPUSH
9423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9427: LD_STRING hideTroll();
9429: PPUSH
9430: CALL_OW 559
// end ;
9434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9435: LD_EXP 8
9439: PUSH
9440: LD_EXP 34
9444: AND
9445: IFFALSE 9508
9447: GO 9449
9449: DISABLE
9450: LD_INT 0
9452: PPUSH
// begin p := 0 ;
9453: LD_ADDR_VAR 0 1
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// repeat game_speed := 1 ;
9461: LD_ADDR_OWVAR 65
9465: PUSH
9466: LD_INT 1
9468: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9469: LD_INT 35
9471: PPUSH
9472: CALL_OW 67
// p := p + 1 ;
9476: LD_ADDR_VAR 0 1
9480: PUSH
9481: LD_VAR 0 1
9485: PUSH
9486: LD_INT 1
9488: PLUS
9489: ST_TO_ADDR
// until p >= 60 ;
9490: LD_VAR 0 1
9494: PUSH
9495: LD_INT 60
9497: GREATEREQUAL
9498: IFFALSE 9461
// game_speed := 4 ;
9500: LD_ADDR_OWVAR 65
9504: PUSH
9505: LD_INT 4
9507: ST_TO_ADDR
// end ;
9508: PPOPN 1
9510: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9511: LD_EXP 8
9515: PUSH
9516: LD_EXP 35
9520: AND
9521: IFFALSE 9667
9523: GO 9525
9525: DISABLE
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_OWVAR 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 2
9549: PUSH
9550: LD_INT 30
9552: PUSH
9553: LD_INT 0
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 30
9562: PUSH
9563: LD_INT 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PPUSH
9579: CALL_OW 69
9583: ST_TO_ADDR
// if not depot then
9584: LD_VAR 0 1
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9667
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9593: LD_ADDR_VAR 0 2
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: LD_INT 1
9605: PPUSH
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 12
9615: ARRAY
9616: PPUSH
9617: CALL_OW 274
9621: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9622: LD_VAR 0 2
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: LD_INT 0
9632: PPUSH
9633: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9637: LD_VAR 0 2
9641: PPUSH
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 0
9647: PPUSH
9648: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9652: LD_VAR 0 2
9656: PPUSH
9657: LD_INT 3
9659: PPUSH
9660: LD_INT 0
9662: PPUSH
9663: CALL_OW 277
// end ;
9667: PPOPN 2
9669: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9670: LD_EXP 8
9674: PUSH
9675: LD_EXP 36
9679: AND
9680: IFFALSE 9777
9682: GO 9684
9684: DISABLE
9685: LD_INT 0
9687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9688: LD_ADDR_VAR 0 1
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_OWVAR 2
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 3
9717: PUSH
9718: LD_INT 23
9720: PUSH
9721: LD_INT 0
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 69
9741: ST_TO_ADDR
// if not tmp then
9742: LD_VAR 0 1
9746: NOT
9747: IFFALSE 9751
// exit ;
9749: GO 9777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9751: LD_VAR 0 1
9755: PUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 12
9768: ARRAY
9769: PPUSH
9770: LD_INT 200
9772: PPUSH
9773: CALL_OW 234
// end ;
9777: PPOPN 1
9779: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9780: LD_EXP 8
9784: PUSH
9785: LD_EXP 37
9789: AND
9790: IFFALSE 9869
9792: GO 9794
9794: DISABLE
9795: LD_INT 0
9797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9798: LD_ADDR_VAR 0 1
9802: PUSH
9803: LD_INT 22
9805: PUSH
9806: LD_OWVAR 2
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 21
9817: PUSH
9818: LD_INT 2
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 69
9833: ST_TO_ADDR
// if not tmp then
9834: LD_VAR 0 1
9838: NOT
9839: IFFALSE 9843
// exit ;
9841: GO 9869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_VAR 0 1
9855: PPUSH
9856: CALL_OW 12
9860: ARRAY
9861: PPUSH
9862: LD_INT 60
9864: PPUSH
9865: CALL_OW 234
// end ;
9869: PPOPN 1
9871: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9872: LD_EXP 8
9876: PUSH
9877: LD_EXP 38
9881: AND
9882: IFFALSE 9981
9884: GO 9886
9886: DISABLE
9887: LD_INT 0
9889: PPUSH
9890: PPUSH
// begin enable ;
9891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9892: LD_ADDR_VAR 0 1
9896: PUSH
9897: LD_INT 22
9899: PUSH
9900: LD_OWVAR 2
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 61
9911: PUSH
9912: EMPTY
9913: LIST
9914: PUSH
9915: LD_INT 33
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: PPUSH
9930: CALL_OW 69
9934: ST_TO_ADDR
// if not tmp then
9935: LD_VAR 0 1
9939: NOT
9940: IFFALSE 9944
// exit ;
9942: GO 9981
// for i in tmp do
9944: LD_ADDR_VAR 0 2
9948: PUSH
9949: LD_VAR 0 1
9953: PUSH
9954: FOR_IN
9955: IFFALSE 9979
// if IsControledBy ( i ) then
9957: LD_VAR 0 2
9961: PPUSH
9962: CALL_OW 312
9966: IFFALSE 9977
// ComUnlink ( i ) ;
9968: LD_VAR 0 2
9972: PPUSH
9973: CALL_OW 136
9977: GO 9954
9979: POP
9980: POP
// end ;
9981: PPOPN 2
9983: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9984: LD_EXP 8
9988: PUSH
9989: LD_EXP 39
9993: AND
9994: IFFALSE 10134
9996: GO 9998
9998: DISABLE
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
// begin ToLua ( displayPowell(); ) ;
10003: LD_STRING displayPowell();
10005: PPUSH
10006: CALL_OW 559
// uc_side := 0 ;
10010: LD_ADDR_OWVAR 20
10014: PUSH
10015: LD_INT 0
10017: ST_TO_ADDR
// uc_nation := 2 ;
10018: LD_ADDR_OWVAR 21
10022: PUSH
10023: LD_INT 2
10025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10026: LD_ADDR_OWVAR 37
10030: PUSH
10031: LD_INT 14
10033: ST_TO_ADDR
// vc_engine := engine_siberite ;
10034: LD_ADDR_OWVAR 39
10038: PUSH
10039: LD_INT 3
10041: ST_TO_ADDR
// vc_control := control_apeman ;
10042: LD_ADDR_OWVAR 38
10046: PUSH
10047: LD_INT 5
10049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10050: LD_ADDR_OWVAR 40
10054: PUSH
10055: LD_INT 29
10057: ST_TO_ADDR
// un := CreateVehicle ;
10058: LD_ADDR_VAR 0 2
10062: PUSH
10063: CALL_OW 45
10067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10068: LD_VAR 0 2
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10080: LD_INT 35
10082: PPUSH
10083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10087: LD_VAR 0 2
10091: PPUSH
10092: LD_INT 22
10094: PUSH
10095: LD_OWVAR 2
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 69
10108: PPUSH
10109: LD_VAR 0 2
10113: PPUSH
10114: CALL_OW 74
10118: PPUSH
10119: CALL_OW 115
// until IsDead ( un ) ;
10123: LD_VAR 0 2
10127: PPUSH
10128: CALL_OW 301
10132: IFFALSE 10080
// end ;
10134: PPOPN 2
10136: END
// every 0 0$1 trigger StreamModeActive and sStu do
10137: LD_EXP 8
10141: PUSH
10142: LD_EXP 47
10146: AND
10147: IFFALSE 10163
10149: GO 10151
10151: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10152: LD_STRING displayStucuk();
10154: PPUSH
10155: CALL_OW 559
// ResetFog ;
10159: CALL_OW 335
// end ;
10163: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10164: LD_EXP 8
10168: PUSH
10169: LD_EXP 40
10173: AND
10174: IFFALSE 10315
10176: GO 10178
10178: DISABLE
10179: LD_INT 0
10181: PPUSH
10182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10183: LD_ADDR_VAR 0 2
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: LD_OWVAR 2
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: ST_TO_ADDR
// if not tmp then
10219: LD_VAR 0 2
10223: NOT
10224: IFFALSE 10228
// exit ;
10226: GO 10315
// un := tmp [ rand ( 1 , tmp ) ] ;
10228: LD_ADDR_VAR 0 1
10232: PUSH
10233: LD_VAR 0 2
10237: PUSH
10238: LD_INT 1
10240: PPUSH
10241: LD_VAR 0 2
10245: PPUSH
10246: CALL_OW 12
10250: ARRAY
10251: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10252: LD_VAR 0 1
10256: PPUSH
10257: LD_INT 0
10259: PPUSH
10260: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10264: LD_VAR 0 1
10268: PPUSH
10269: LD_OWVAR 3
10273: PUSH
10274: LD_VAR 0 1
10278: DIFF
10279: PPUSH
10280: LD_VAR 0 1
10284: PPUSH
10285: CALL_OW 74
10289: PPUSH
10290: CALL_OW 115
// wait ( 0 0$20 ) ;
10294: LD_INT 700
10296: PPUSH
10297: CALL_OW 67
// SetSide ( un , your_side ) ;
10301: LD_VAR 0 1
10305: PPUSH
10306: LD_OWVAR 2
10310: PPUSH
10311: CALL_OW 235
// end ;
10315: PPOPN 2
10317: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10318: LD_EXP 8
10322: PUSH
10323: LD_EXP 41
10327: AND
10328: IFFALSE 10434
10330: GO 10332
10332: DISABLE
10333: LD_INT 0
10335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10336: LD_ADDR_VAR 0 1
10340: PUSH
10341: LD_INT 22
10343: PUSH
10344: LD_OWVAR 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 30
10358: PUSH
10359: LD_INT 0
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 30
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: ST_TO_ADDR
// if not depot then
10390: LD_VAR 0 1
10394: NOT
10395: IFFALSE 10399
// exit ;
10397: GO 10434
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10399: LD_VAR 0 1
10403: PUSH
10404: LD_INT 1
10406: ARRAY
10407: PPUSH
10408: CALL_OW 250
10412: PPUSH
10413: LD_VAR 0 1
10417: PUSH
10418: LD_INT 1
10420: ARRAY
10421: PPUSH
10422: CALL_OW 251
10426: PPUSH
10427: LD_INT 70
10429: PPUSH
10430: CALL_OW 495
// end ;
10434: PPOPN 1
10436: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10437: LD_EXP 8
10441: PUSH
10442: LD_EXP 42
10446: AND
10447: IFFALSE 10658
10449: GO 10451
10451: DISABLE
10452: LD_INT 0
10454: PPUSH
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10459: LD_ADDR_VAR 0 5
10463: PUSH
10464: LD_INT 22
10466: PUSH
10467: LD_OWVAR 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: ST_TO_ADDR
// if not tmp then
10495: LD_VAR 0 5
10499: NOT
10500: IFFALSE 10504
// exit ;
10502: GO 10658
// for i in tmp do
10504: LD_ADDR_VAR 0 1
10508: PUSH
10509: LD_VAR 0 5
10513: PUSH
10514: FOR_IN
10515: IFFALSE 10656
// begin d := rand ( 0 , 5 ) ;
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: LD_INT 0
10524: PPUSH
10525: LD_INT 5
10527: PPUSH
10528: CALL_OW 12
10532: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PPUSH
10543: CALL_OW 250
10547: PPUSH
10548: LD_VAR 0 4
10552: PPUSH
10553: LD_INT 3
10555: PPUSH
10556: LD_INT 12
10558: PPUSH
10559: CALL_OW 12
10563: PPUSH
10564: CALL_OW 272
10568: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_VAR 0 1
10578: PPUSH
10579: CALL_OW 251
10583: PPUSH
10584: LD_VAR 0 4
10588: PPUSH
10589: LD_INT 3
10591: PPUSH
10592: LD_INT 12
10594: PPUSH
10595: CALL_OW 12
10599: PPUSH
10600: CALL_OW 273
10604: ST_TO_ADDR
// if ValidHex ( x , y ) then
10605: LD_VAR 0 2
10609: PPUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: CALL_OW 488
10619: IFFALSE 10654
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10621: LD_VAR 0 1
10625: PPUSH
10626: LD_VAR 0 2
10630: PPUSH
10631: LD_VAR 0 3
10635: PPUSH
10636: LD_INT 3
10638: PPUSH
10639: LD_INT 6
10641: PPUSH
10642: CALL_OW 12
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 483
// end ;
10654: GO 10514
10656: POP
10657: POP
// end ;
10658: PPOPN 5
10660: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10661: LD_EXP 8
10665: PUSH
10666: LD_EXP 43
10670: AND
10671: IFFALSE 10765
10673: GO 10675
10675: DISABLE
10676: LD_INT 0
10678: PPUSH
10679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10680: LD_ADDR_VAR 0 2
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 32
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 21
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: ST_TO_ADDR
// if not tmp then
10727: LD_VAR 0 2
10731: NOT
10732: IFFALSE 10736
// exit ;
10734: GO 10765
// for i in tmp do
10736: LD_ADDR_VAR 0 1
10740: PUSH
10741: LD_VAR 0 2
10745: PUSH
10746: FOR_IN
10747: IFFALSE 10763
// SetFuel ( i , 0 ) ;
10749: LD_VAR 0 1
10753: PPUSH
10754: LD_INT 0
10756: PPUSH
10757: CALL_OW 240
10761: GO 10746
10763: POP
10764: POP
// end ;
10765: PPOPN 2
10767: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10768: LD_EXP 8
10772: PUSH
10773: LD_EXP 44
10777: AND
10778: IFFALSE 10844
10780: GO 10782
10782: DISABLE
10783: LD_INT 0
10785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10786: LD_ADDR_VAR 0 1
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_OWVAR 2
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 30
10805: PUSH
10806: LD_INT 29
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 69
10821: ST_TO_ADDR
// if not tmp then
10822: LD_VAR 0 1
10826: NOT
10827: IFFALSE 10831
// exit ;
10829: GO 10844
// DestroyUnit ( tmp [ 1 ] ) ;
10831: LD_VAR 0 1
10835: PUSH
10836: LD_INT 1
10838: ARRAY
10839: PPUSH
10840: CALL_OW 65
// end ;
10844: PPOPN 1
10846: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10847: LD_EXP 8
10851: PUSH
10852: LD_EXP 46
10856: AND
10857: IFFALSE 10986
10859: GO 10861
10861: DISABLE
10862: LD_INT 0
10864: PPUSH
// begin uc_side := 0 ;
10865: LD_ADDR_OWVAR 20
10869: PUSH
10870: LD_INT 0
10872: ST_TO_ADDR
// uc_nation := nation_arabian ;
10873: LD_ADDR_OWVAR 21
10877: PUSH
10878: LD_INT 2
10880: ST_TO_ADDR
// hc_gallery :=  ;
10881: LD_ADDR_OWVAR 33
10885: PUSH
10886: LD_STRING 
10888: ST_TO_ADDR
// hc_name :=  ;
10889: LD_ADDR_OWVAR 26
10893: PUSH
10894: LD_STRING 
10896: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10897: LD_INT 1
10899: PPUSH
10900: LD_INT 11
10902: PPUSH
10903: LD_INT 10
10905: PPUSH
10906: CALL_OW 380
// un := CreateHuman ;
10910: LD_ADDR_VAR 0 1
10914: PUSH
10915: CALL_OW 44
10919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10920: LD_VAR 0 1
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10932: LD_INT 35
10934: PPUSH
10935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10939: LD_VAR 0 1
10943: PPUSH
10944: LD_INT 22
10946: PUSH
10947: LD_OWVAR 2
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PPUSH
10956: CALL_OW 69
10960: PPUSH
10961: LD_VAR 0 1
10965: PPUSH
10966: CALL_OW 74
10970: PPUSH
10971: CALL_OW 115
// until IsDead ( un ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 301
10984: IFFALSE 10932
// end ;
10986: PPOPN 1
10988: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10989: LD_EXP 8
10993: PUSH
10994: LD_EXP 48
10998: AND
10999: IFFALSE 11011
11001: GO 11003
11003: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11004: LD_STRING earthquake(getX(game), 0, 32)
11006: PPUSH
11007: CALL_OW 559
11011: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11012: LD_EXP 8
11016: PUSH
11017: LD_EXP 49
11021: AND
11022: IFFALSE 11113
11024: GO 11026
11026: DISABLE
11027: LD_INT 0
11029: PPUSH
// begin enable ;
11030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11031: LD_ADDR_VAR 0 1
11035: PUSH
11036: LD_INT 22
11038: PUSH
11039: LD_OWVAR 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 21
11050: PUSH
11051: LD_INT 2
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 33
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: PPUSH
11073: CALL_OW 69
11077: ST_TO_ADDR
// if not tmp then
11078: LD_VAR 0 1
11082: NOT
11083: IFFALSE 11087
// exit ;
11085: GO 11113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11087: LD_VAR 0 1
11091: PUSH
11092: LD_INT 1
11094: PPUSH
11095: LD_VAR 0 1
11099: PPUSH
11100: CALL_OW 12
11104: ARRAY
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 234
// end ;
11113: PPOPN 1
11115: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11116: LD_EXP 8
11120: PUSH
11121: LD_EXP 50
11125: AND
11126: IFFALSE 11267
11128: GO 11130
11130: DISABLE
11131: LD_INT 0
11133: PPUSH
11134: PPUSH
11135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11136: LD_ADDR_VAR 0 3
11140: PUSH
11141: LD_INT 22
11143: PUSH
11144: LD_OWVAR 2
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: ST_TO_ADDR
// if not tmp then
11172: LD_VAR 0 3
11176: NOT
11177: IFFALSE 11181
// exit ;
11179: GO 11267
// un := tmp [ rand ( 1 , tmp ) ] ;
11181: LD_ADDR_VAR 0 2
11185: PUSH
11186: LD_VAR 0 3
11190: PUSH
11191: LD_INT 1
11193: PPUSH
11194: LD_VAR 0 3
11198: PPUSH
11199: CALL_OW 12
11203: ARRAY
11204: ST_TO_ADDR
// if Crawls ( un ) then
11205: LD_VAR 0 2
11209: PPUSH
11210: CALL_OW 318
11214: IFFALSE 11225
// ComWalk ( un ) ;
11216: LD_VAR 0 2
11220: PPUSH
11221: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11225: LD_VAR 0 2
11229: PPUSH
11230: LD_INT 9
11232: PPUSH
11233: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11237: LD_INT 28
11239: PPUSH
11240: LD_OWVAR 2
11244: PPUSH
11245: LD_INT 2
11247: PPUSH
11248: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11252: LD_INT 29
11254: PPUSH
11255: LD_OWVAR 2
11259: PPUSH
11260: LD_INT 2
11262: PPUSH
11263: CALL_OW 322
// end ;
11267: PPOPN 3
11269: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11270: LD_EXP 8
11274: PUSH
11275: LD_EXP 51
11279: AND
11280: IFFALSE 11391
11282: GO 11284
11284: DISABLE
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11290: LD_ADDR_VAR 0 3
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_OWVAR 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 25
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PPUSH
11321: CALL_OW 69
11325: ST_TO_ADDR
// if not tmp then
11326: LD_VAR 0 3
11330: NOT
11331: IFFALSE 11335
// exit ;
11333: GO 11391
// un := tmp [ rand ( 1 , tmp ) ] ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 1
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: CALL_OW 12
11357: ARRAY
11358: ST_TO_ADDR
// if Crawls ( un ) then
11359: LD_VAR 0 2
11363: PPUSH
11364: CALL_OW 318
11368: IFFALSE 11379
// ComWalk ( un ) ;
11370: LD_VAR 0 2
11374: PPUSH
11375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11379: LD_VAR 0 2
11383: PPUSH
11384: LD_INT 8
11386: PPUSH
11387: CALL_OW 336
// end ;
11391: PPOPN 3
11393: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11394: LD_EXP 8
11398: PUSH
11399: LD_EXP 52
11403: AND
11404: IFFALSE 11548
11406: GO 11408
11408: DISABLE
11409: LD_INT 0
11411: PPUSH
11412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11413: LD_ADDR_VAR 0 2
11417: PUSH
11418: LD_INT 22
11420: PUSH
11421: LD_OWVAR 2
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 2
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: LD_INT 34
11445: PUSH
11446: LD_INT 12
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 34
11455: PUSH
11456: LD_INT 51
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 34
11465: PUSH
11466: LD_INT 32
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: PPUSH
11484: CALL_OW 69
11488: ST_TO_ADDR
// if not tmp then
11489: LD_VAR 0 2
11493: NOT
11494: IFFALSE 11498
// exit ;
11496: GO 11548
// for i in tmp do
11498: LD_ADDR_VAR 0 1
11502: PUSH
11503: LD_VAR 0 2
11507: PUSH
11508: FOR_IN
11509: IFFALSE 11546
// if GetCargo ( i , mat_artifact ) = 0 then
11511: LD_VAR 0 1
11515: PPUSH
11516: LD_INT 4
11518: PPUSH
11519: CALL_OW 289
11523: PUSH
11524: LD_INT 0
11526: EQUAL
11527: IFFALSE 11544
// SetCargo ( i , mat_siberit , 100 ) ;
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_INT 3
11536: PPUSH
11537: LD_INT 100
11539: PPUSH
11540: CALL_OW 290
11544: GO 11508
11546: POP
11547: POP
// end ;
11548: PPOPN 2
11550: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11551: LD_EXP 8
11555: PUSH
11556: LD_EXP 53
11560: AND
11561: IFFALSE 11744
11563: GO 11565
11565: DISABLE
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11570: LD_ADDR_VAR 0 2
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_OWVAR 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: ST_TO_ADDR
// if not tmp then
11592: LD_VAR 0 2
11596: NOT
11597: IFFALSE 11601
// exit ;
11599: GO 11744
// for i := 1 to 2 do
11601: LD_ADDR_VAR 0 1
11605: PUSH
11606: DOUBLE
11607: LD_INT 1
11609: DEC
11610: ST_TO_ADDR
11611: LD_INT 2
11613: PUSH
11614: FOR_TO
11615: IFFALSE 11742
// begin uc_side := your_side ;
11617: LD_ADDR_OWVAR 20
11621: PUSH
11622: LD_OWVAR 2
11626: ST_TO_ADDR
// uc_nation := nation_american ;
11627: LD_ADDR_OWVAR 21
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// vc_chassis := us_morphling ;
11635: LD_ADDR_OWVAR 37
11639: PUSH
11640: LD_INT 5
11642: ST_TO_ADDR
// vc_engine := engine_siberite ;
11643: LD_ADDR_OWVAR 39
11647: PUSH
11648: LD_INT 3
11650: ST_TO_ADDR
// vc_control := control_computer ;
11651: LD_ADDR_OWVAR 38
11655: PUSH
11656: LD_INT 3
11658: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11659: LD_ADDR_OWVAR 40
11663: PUSH
11664: LD_INT 10
11666: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11667: LD_VAR 0 2
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PPUSH
11676: CALL_OW 310
11680: NOT
11681: IFFALSE 11728
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11683: CALL_OW 45
11687: PPUSH
11688: LD_VAR 0 2
11692: PUSH
11693: LD_INT 1
11695: ARRAY
11696: PPUSH
11697: CALL_OW 250
11701: PPUSH
11702: LD_VAR 0 2
11706: PUSH
11707: LD_INT 1
11709: ARRAY
11710: PPUSH
11711: CALL_OW 251
11715: PPUSH
11716: LD_INT 12
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 50
11726: GO 11740
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11728: CALL_OW 45
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 51
// end ;
11740: GO 11614
11742: POP
11743: POP
// end ;
11744: PPOPN 2
11746: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11747: LD_EXP 8
11751: PUSH
11752: LD_EXP 54
11756: AND
11757: IFFALSE 11979
11759: GO 11761
11761: DISABLE
11762: LD_INT 0
11764: PPUSH
11765: PPUSH
11766: PPUSH
11767: PPUSH
11768: PPUSH
11769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11770: LD_ADDR_VAR 0 6
11774: PUSH
11775: LD_INT 22
11777: PUSH
11778: LD_OWVAR 2
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 21
11789: PUSH
11790: LD_INT 1
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 3
11799: PUSH
11800: LD_INT 23
11802: PUSH
11803: LD_INT 0
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: PPUSH
11819: CALL_OW 69
11823: ST_TO_ADDR
// if not tmp then
11824: LD_VAR 0 6
11828: NOT
11829: IFFALSE 11833
// exit ;
11831: GO 11979
// s1 := rand ( 1 , 4 ) ;
11833: LD_ADDR_VAR 0 2
11837: PUSH
11838: LD_INT 1
11840: PPUSH
11841: LD_INT 4
11843: PPUSH
11844: CALL_OW 12
11848: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11849: LD_ADDR_VAR 0 4
11853: PUSH
11854: LD_VAR 0 6
11858: PUSH
11859: LD_INT 1
11861: ARRAY
11862: PPUSH
11863: LD_VAR 0 2
11867: PPUSH
11868: CALL_OW 259
11872: ST_TO_ADDR
// if s1 = 1 then
11873: LD_VAR 0 2
11877: PUSH
11878: LD_INT 1
11880: EQUAL
11881: IFFALSE 11901
// s2 := rand ( 2 , 4 ) else
11883: LD_ADDR_VAR 0 3
11887: PUSH
11888: LD_INT 2
11890: PPUSH
11891: LD_INT 4
11893: PPUSH
11894: CALL_OW 12
11898: ST_TO_ADDR
11899: GO 11909
// s2 := 1 ;
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11909: LD_ADDR_VAR 0 5
11913: PUSH
11914: LD_VAR 0 6
11918: PUSH
11919: LD_INT 1
11921: ARRAY
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: CALL_OW 259
11932: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11933: LD_VAR 0 6
11937: PUSH
11938: LD_INT 1
11940: ARRAY
11941: PPUSH
11942: LD_VAR 0 2
11946: PPUSH
11947: LD_VAR 0 5
11951: PPUSH
11952: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11956: LD_VAR 0 6
11960: PUSH
11961: LD_INT 1
11963: ARRAY
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_VAR 0 4
11974: PPUSH
11975: CALL_OW 237
// end ;
11979: PPOPN 6
11981: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11982: LD_EXP 8
11986: PUSH
11987: LD_EXP 55
11991: AND
11992: IFFALSE 12071
11994: GO 11996
11996: DISABLE
11997: LD_INT 0
11999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_INT 22
12007: PUSH
12008: LD_OWVAR 2
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 30
12019: PUSH
12020: LD_INT 3
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 69
12035: ST_TO_ADDR
// if not tmp then
12036: LD_VAR 0 1
12040: NOT
12041: IFFALSE 12045
// exit ;
12043: GO 12071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12045: LD_VAR 0 1
12049: PUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL_OW 12
12062: ARRAY
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 234
// end ;
12071: PPOPN 1
12073: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12074: LD_EXP 8
12078: PUSH
12079: LD_EXP 56
12083: AND
12084: IFFALSE 12196
12086: GO 12088
12088: DISABLE
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12093: LD_ADDR_VAR 0 2
12097: PUSH
12098: LD_INT 22
12100: PUSH
12101: LD_OWVAR 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 2
12112: PUSH
12113: LD_INT 30
12115: PUSH
12116: LD_INT 27
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 26
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 30
12135: PUSH
12136: LD_INT 28
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: ST_TO_ADDR
// if not tmp then
12158: LD_VAR 0 2
12162: NOT
12163: IFFALSE 12167
// exit ;
12165: GO 12196
// for i in tmp do
12167: LD_ADDR_VAR 0 1
12171: PUSH
12172: LD_VAR 0 2
12176: PUSH
12177: FOR_IN
12178: IFFALSE 12194
// SetLives ( i , 1 ) ;
12180: LD_VAR 0 1
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: CALL_OW 234
12192: GO 12177
12194: POP
12195: POP
// end ;
12196: PPOPN 2
12198: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12199: LD_EXP 8
12203: PUSH
12204: LD_EXP 57
12208: AND
12209: IFFALSE 12483
12211: GO 12213
12213: DISABLE
12214: LD_INT 0
12216: PPUSH
12217: PPUSH
12218: PPUSH
// begin i := rand ( 1 , 7 ) ;
12219: LD_ADDR_VAR 0 1
12223: PUSH
12224: LD_INT 1
12226: PPUSH
12227: LD_INT 7
12229: PPUSH
12230: CALL_OW 12
12234: ST_TO_ADDR
// case i of 1 :
12235: LD_VAR 0 1
12239: PUSH
12240: LD_INT 1
12242: DOUBLE
12243: EQUAL
12244: IFTRUE 12248
12246: GO 12258
12248: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12249: LD_STRING earthquake(getX(game), 0, 32)
12251: PPUSH
12252: CALL_OW 559
12256: GO 12483
12258: LD_INT 2
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12280
12266: POP
// begin ToLua ( displayStucuk(); ) ;
12267: LD_STRING displayStucuk();
12269: PPUSH
12270: CALL_OW 559
// ResetFog ;
12274: CALL_OW 335
// end ; 3 :
12278: GO 12483
12280: LD_INT 3
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12392
12288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12289: LD_ADDR_VAR 0 2
12293: PUSH
12294: LD_INT 22
12296: PUSH
12297: LD_OWVAR 2
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 1
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 69
12324: ST_TO_ADDR
// if not tmp then
12325: LD_VAR 0 2
12329: NOT
12330: IFFALSE 12334
// exit ;
12332: GO 12483
// un := tmp [ rand ( 1 , tmp ) ] ;
12334: LD_ADDR_VAR 0 3
12338: PUSH
12339: LD_VAR 0 2
12343: PUSH
12344: LD_INT 1
12346: PPUSH
12347: LD_VAR 0 2
12351: PPUSH
12352: CALL_OW 12
12356: ARRAY
12357: ST_TO_ADDR
// if Crawls ( un ) then
12358: LD_VAR 0 3
12362: PPUSH
12363: CALL_OW 318
12367: IFFALSE 12378
// ComWalk ( un ) ;
12369: LD_VAR 0 3
12373: PPUSH
12374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12378: LD_VAR 0 3
12382: PPUSH
12383: LD_INT 8
12385: PPUSH
12386: CALL_OW 336
// end ; 4 :
12390: GO 12483
12392: LD_INT 4
12394: DOUBLE
12395: EQUAL
12396: IFTRUE 12400
12398: GO 12461
12400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12401: LD_ADDR_VAR 0 2
12405: PUSH
12406: LD_INT 22
12408: PUSH
12409: LD_OWVAR 2
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 29
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PPUSH
12432: CALL_OW 69
12436: ST_TO_ADDR
// if not tmp then
12437: LD_VAR 0 2
12441: NOT
12442: IFFALSE 12446
// exit ;
12444: GO 12483
// DestroyUnit ( tmp [ 1 ] ) ;
12446: LD_VAR 0 2
12450: PUSH
12451: LD_INT 1
12453: ARRAY
12454: PPUSH
12455: CALL_OW 65
// end ; 5 .. 7 :
12459: GO 12483
12461: LD_INT 5
12463: DOUBLE
12464: GREATEREQUAL
12465: IFFALSE 12473
12467: LD_INT 7
12469: DOUBLE
12470: LESSEQUAL
12471: IFTRUE 12475
12473: GO 12482
12475: POP
// StreamSibBomb ; end ;
12476: CALL 8733 0 0
12480: GO 12483
12482: POP
// end ;
12483: PPOPN 3
12485: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12486: LD_EXP 8
12490: PUSH
12491: LD_EXP 58
12495: AND
12496: IFFALSE 12652
12498: GO 12500
12500: DISABLE
12501: LD_INT 0
12503: PPUSH
12504: PPUSH
12505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12506: LD_ADDR_VAR 0 2
12510: PUSH
12511: LD_INT 81
12513: PUSH
12514: LD_OWVAR 2
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 21
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: ST_TO_ADDR
// if not tmp then
12560: LD_VAR 0 2
12564: NOT
12565: IFFALSE 12569
// exit ;
12567: GO 12652
// p := 0 ;
12569: LD_ADDR_VAR 0 3
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12577: LD_INT 35
12579: PPUSH
12580: CALL_OW 67
// p := p + 1 ;
12584: LD_ADDR_VAR 0 3
12588: PUSH
12589: LD_VAR 0 3
12593: PUSH
12594: LD_INT 1
12596: PLUS
12597: ST_TO_ADDR
// for i in tmp do
12598: LD_ADDR_VAR 0 1
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: FOR_IN
12609: IFFALSE 12640
// if GetLives ( i ) < 1000 then
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 256
12620: PUSH
12621: LD_INT 1000
12623: LESS
12624: IFFALSE 12638
// SetLives ( i , 1000 ) ;
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 1000
12633: PPUSH
12634: CALL_OW 234
12638: GO 12608
12640: POP
12641: POP
// until p > 20 ;
12642: LD_VAR 0 3
12646: PUSH
12647: LD_INT 20
12649: GREATER
12650: IFFALSE 12577
// end ;
12652: PPOPN 3
12654: END
// every 0 0$1 trigger StreamModeActive and sTime do
12655: LD_EXP 8
12659: PUSH
12660: LD_EXP 59
12664: AND
12665: IFFALSE 12700
12667: GO 12669
12669: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12670: LD_INT 28
12672: PPUSH
12673: LD_OWVAR 2
12677: PPUSH
12678: LD_INT 2
12680: PPUSH
12681: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12685: LD_INT 30
12687: PPUSH
12688: LD_OWVAR 2
12692: PPUSH
12693: LD_INT 2
12695: PPUSH
12696: CALL_OW 322
// end ;
12700: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12701: LD_EXP 8
12705: PUSH
12706: LD_EXP 60
12710: AND
12711: IFFALSE 12832
12713: GO 12715
12715: DISABLE
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_INT 22
12727: PUSH
12728: LD_OWVAR 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 21
12739: PUSH
12740: LD_INT 1
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 3
12749: PUSH
12750: LD_INT 23
12752: PUSH
12753: LD_INT 0
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: LIST
12768: PPUSH
12769: CALL_OW 69
12773: ST_TO_ADDR
// if not tmp then
12774: LD_VAR 0 2
12778: NOT
12779: IFFALSE 12783
// exit ;
12781: GO 12832
// for i in tmp do
12783: LD_ADDR_VAR 0 1
12787: PUSH
12788: LD_VAR 0 2
12792: PUSH
12793: FOR_IN
12794: IFFALSE 12830
// begin if Crawls ( i ) then
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 318
12805: IFFALSE 12816
// ComWalk ( i ) ;
12807: LD_VAR 0 1
12811: PPUSH
12812: CALL_OW 138
// SetClass ( i , 2 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 2
12823: PPUSH
12824: CALL_OW 336
// end ;
12828: GO 12793
12830: POP
12831: POP
// end ;
12832: PPOPN 2
12834: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12835: LD_EXP 8
12839: PUSH
12840: LD_EXP 61
12844: AND
12845: IFFALSE 13126
12847: GO 12849
12849: DISABLE
12850: LD_INT 0
12852: PPUSH
12853: PPUSH
12854: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12855: LD_OWVAR 2
12859: PPUSH
12860: LD_INT 9
12862: PPUSH
12863: LD_INT 1
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12873: LD_INT 9
12875: PPUSH
12876: LD_OWVAR 2
12880: PPUSH
12881: CALL_OW 343
// uc_side := 9 ;
12885: LD_ADDR_OWVAR 20
12889: PUSH
12890: LD_INT 9
12892: ST_TO_ADDR
// uc_nation := 2 ;
12893: LD_ADDR_OWVAR 21
12897: PUSH
12898: LD_INT 2
12900: ST_TO_ADDR
// hc_name := Dark Warrior ;
12901: LD_ADDR_OWVAR 26
12905: PUSH
12906: LD_STRING Dark Warrior
12908: ST_TO_ADDR
// hc_gallery :=  ;
12909: LD_ADDR_OWVAR 33
12913: PUSH
12914: LD_STRING 
12916: ST_TO_ADDR
// hc_noskilllimit := true ;
12917: LD_ADDR_OWVAR 76
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12925: LD_ADDR_OWVAR 31
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 30
12938: PUSH
12939: LD_INT 30
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: ST_TO_ADDR
// un := CreateHuman ;
12948: LD_ADDR_VAR 0 3
12952: PUSH
12953: CALL_OW 44
12957: ST_TO_ADDR
// hc_noskilllimit := false ;
12958: LD_ADDR_OWVAR 76
12962: PUSH
12963: LD_INT 0
12965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 51
// p := 0 ;
12978: LD_ADDR_VAR 0 2
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12986: LD_INT 35
12988: PPUSH
12989: CALL_OW 67
// p := p + 1 ;
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: LD_VAR 0 2
13002: PUSH
13003: LD_INT 1
13005: PLUS
13006: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13007: LD_VAR 0 3
13011: PPUSH
13012: CALL_OW 256
13016: PUSH
13017: LD_INT 1000
13019: LESS
13020: IFFALSE 13034
// SetLives ( un , 1000 ) ;
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1000
13029: PPUSH
13030: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 81
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 91
13053: PUSH
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PPUSH
13076: LD_VAR 0 3
13080: PPUSH
13081: CALL_OW 74
13085: PPUSH
13086: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13090: LD_VAR 0 2
13094: PUSH
13095: LD_INT 60
13097: GREATER
13098: PUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 301
13108: OR
13109: IFFALSE 12986
// if un then
13111: LD_VAR 0 3
13115: IFFALSE 13126
// RemoveUnit ( un ) ;
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 64
// end ;
13126: PPOPN 3
13128: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13129: LD_INT 0
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13135: LD_ADDR_VAR 0 4
13139: PUSH
13140: LD_INT 22
13142: PUSH
13143: LD_OWVAR 2
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 2
13154: PUSH
13155: LD_INT 30
13157: PUSH
13158: LD_INT 0
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 30
13167: PUSH
13168: LD_INT 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: ST_TO_ADDR
// if not tmp then
13189: LD_VAR 0 4
13193: NOT
13194: IFFALSE 13198
// exit ;
13196: GO 13257
// for i in tmp do
13198: LD_ADDR_VAR 0 2
13202: PUSH
13203: LD_VAR 0 4
13207: PUSH
13208: FOR_IN
13209: IFFALSE 13255
// for j = 1 to 3 do
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: DOUBLE
13217: LD_INT 1
13219: DEC
13220: ST_TO_ADDR
13221: LD_INT 3
13223: PUSH
13224: FOR_TO
13225: IFFALSE 13251
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13227: LD_VAR 0 2
13231: PPUSH
13232: CALL_OW 274
13236: PPUSH
13237: LD_VAR 0 3
13241: PPUSH
13242: LD_INT 99999
13244: PPUSH
13245: CALL_OW 277
13249: GO 13224
13251: POP
13252: POP
13253: GO 13208
13255: POP
13256: POP
// end ;
13257: LD_VAR 0 1
13261: RET
// export function hHackSetLevel10 ; var i , j ; begin
13262: LD_INT 0
13264: PPUSH
13265: PPUSH
13266: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13267: LD_ADDR_VAR 0 2
13271: PUSH
13272: LD_INT 21
13274: PUSH
13275: LD_INT 1
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: PUSH
13287: FOR_IN
13288: IFFALSE 13340
// if IsSelected ( i ) then
13290: LD_VAR 0 2
13294: PPUSH
13295: CALL_OW 306
13299: IFFALSE 13338
// begin for j := 1 to 4 do
13301: LD_ADDR_VAR 0 3
13305: PUSH
13306: DOUBLE
13307: LD_INT 1
13309: DEC
13310: ST_TO_ADDR
13311: LD_INT 4
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13336
// SetSkill ( i , j , 10 ) ;
13317: LD_VAR 0 2
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 10
13329: PPUSH
13330: CALL_OW 237
13334: GO 13314
13336: POP
13337: POP
// end ;
13338: GO 13287
13340: POP
13341: POP
// end ;
13342: LD_VAR 0 1
13346: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13347: LD_INT 0
13349: PPUSH
13350: PPUSH
13351: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_OWVAR 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 21
13371: PUSH
13372: LD_INT 1
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: FOR_IN
13389: IFFALSE 13430
// begin for j := 1 to 4 do
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: DOUBLE
13397: LD_INT 1
13399: DEC
13400: ST_TO_ADDR
13401: LD_INT 4
13403: PUSH
13404: FOR_TO
13405: IFFALSE 13426
// SetSkill ( i , j , 10 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 10
13419: PPUSH
13420: CALL_OW 237
13424: GO 13404
13426: POP
13427: POP
// end ;
13428: GO 13388
13430: POP
13431: POP
// end ;
13432: LD_VAR 0 1
13436: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
13437: LD_INT 0
13439: PPUSH
// uc_side := your_side ;
13440: LD_ADDR_OWVAR 20
13444: PUSH
13445: LD_OWVAR 2
13449: ST_TO_ADDR
// uc_nation := nation ;
13450: LD_ADDR_OWVAR 21
13454: PUSH
13455: LD_VAR 0 1
13459: ST_TO_ADDR
// InitHc ;
13460: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13464: LD_INT 0
13466: PPUSH
13467: LD_VAR 0 2
13471: PPUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13481: CALL_OW 44
13485: PPUSH
13486: LD_INT 1
13488: PPUSH
13489: CALL_OW 51
// end ;
13493: LD_VAR 0 4
13497: RET
// export function hHackSpawnVehicle ; begin
13498: LD_INT 0
13500: PPUSH
// uc_side := your_side ;
13501: LD_ADDR_OWVAR 20
13505: PUSH
13506: LD_OWVAR 2
13510: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13511: LD_ADDR_OWVAR 21
13515: PUSH
13516: LD_INT 1
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 12
13526: ST_TO_ADDR
// InitVc ;
13527: CALL_OW 20
// case uc_nation of 1 :
13531: LD_OWVAR 21
13535: PUSH
13536: LD_INT 1
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13688
13544: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
13545: LD_ADDR_OWVAR 37
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: LD_INT 4
13561: PUSH
13562: LD_INT 5
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 1
13574: PPUSH
13575: LD_INT 5
13577: PPUSH
13578: CALL_OW 12
13582: ARRAY
13583: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13584: LD_ADDR_OWVAR 39
13588: PUSH
13589: LD_INT 1
13591: PPUSH
13592: LD_INT 3
13594: PPUSH
13595: CALL_OW 12
13599: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
13600: LD_ADDR_OWVAR 38
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 3
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 1
13621: PPUSH
13622: LD_INT 3
13624: PPUSH
13625: CALL_OW 12
13629: ARRAY
13630: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
13631: LD_ADDR_OWVAR 40
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 4
13641: PUSH
13642: LD_INT 5
13644: PUSH
13645: LD_INT 3
13647: PUSH
13648: LD_INT 7
13650: PUSH
13651: LD_INT 8
13653: PUSH
13654: LD_INT 9
13656: PUSH
13657: LD_INT 10
13659: PUSH
13660: LD_INT 6
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 1
13676: PPUSH
13677: LD_INT 9
13679: PPUSH
13680: CALL_OW 12
13684: ARRAY
13685: ST_TO_ADDR
// end ; 2 :
13686: GO 13953
13688: LD_INT 2
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13820
13696: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
13697: LD_ADDR_OWVAR 37
13701: PUSH
13702: LD_INT 11
13704: PUSH
13705: LD_INT 12
13707: PUSH
13708: LD_INT 13
13710: PUSH
13711: LD_INT 14
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 1
13722: PPUSH
13723: LD_INT 4
13725: PPUSH
13726: CALL_OW 12
13730: ARRAY
13731: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13732: LD_ADDR_OWVAR 39
13736: PUSH
13737: LD_INT 1
13739: PPUSH
13740: LD_INT 3
13742: PPUSH
13743: CALL_OW 12
13747: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
13748: LD_ADDR_OWVAR 38
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: LD_INT 5
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 1
13769: PPUSH
13770: LD_INT 3
13772: PPUSH
13773: CALL_OW 12
13777: ARRAY
13778: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
13779: LD_ADDR_OWVAR 40
13783: PUSH
13784: LD_INT 24
13786: PUSH
13787: LD_INT 26
13789: PUSH
13790: LD_INT 27
13792: PUSH
13793: LD_INT 28
13795: PUSH
13796: LD_INT 29
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 1
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 12
13816: ARRAY
13817: ST_TO_ADDR
// end ; 3 :
13818: GO 13953
13820: LD_INT 3
13822: DOUBLE
13823: EQUAL
13824: IFTRUE 13828
13826: GO 13952
13828: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13829: LD_ADDR_OWVAR 37
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 23
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_INT 24
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 1
13854: PPUSH
13855: LD_INT 4
13857: PPUSH
13858: CALL_OW 12
13862: ARRAY
13863: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13864: LD_ADDR_OWVAR 39
13868: PUSH
13869: LD_INT 1
13871: PPUSH
13872: LD_INT 3
13874: PPUSH
13875: CALL_OW 12
13879: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
13880: LD_ADDR_OWVAR 38
13884: PUSH
13885: LD_INT 1
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 1
13897: PPUSH
13898: LD_INT 2
13900: PPUSH
13901: CALL_OW 12
13905: ARRAY
13906: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
13907: LD_ADDR_OWVAR 40
13911: PUSH
13912: LD_INT 42
13914: PUSH
13915: LD_INT 43
13917: PUSH
13918: LD_INT 44
13920: PUSH
13921: LD_INT 46
13923: PUSH
13924: LD_INT 48
13926: PUSH
13927: LD_INT 47
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 1
13940: PPUSH
13941: LD_INT 6
13943: PPUSH
13944: CALL_OW 12
13948: ARRAY
13949: ST_TO_ADDR
// end ; end ;
13950: GO 13953
13952: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13953: CALL_OW 45
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: CALL_OW 51
// end ;
13965: LD_VAR 0 1
13969: RET
// export hInvincible ; every 1 do
13970: GO 13972
13972: DISABLE
// hInvincible := [ ] ;
13973: LD_ADDR_EXP 62
13977: PUSH
13978: EMPTY
13979: ST_TO_ADDR
13980: END
// every 10 do var i ;
13981: GO 13983
13983: DISABLE
13984: LD_INT 0
13986: PPUSH
// begin enable ;
13987: ENABLE
// if not hInvincible then
13988: LD_EXP 62
13992: NOT
13993: IFFALSE 13997
// exit ;
13995: GO 14041
// for i in hInvincible do
13997: LD_ADDR_VAR 0 1
14001: PUSH
14002: LD_EXP 62
14006: PUSH
14007: FOR_IN
14008: IFFALSE 14039
// if GetLives ( i ) < 1000 then
14010: LD_VAR 0 1
14014: PPUSH
14015: CALL_OW 256
14019: PUSH
14020: LD_INT 1000
14022: LESS
14023: IFFALSE 14037
// SetLives ( i , 1000 ) ;
14025: LD_VAR 0 1
14029: PPUSH
14030: LD_INT 1000
14032: PPUSH
14033: CALL_OW 234
14037: GO 14007
14039: POP
14040: POP
// end ;
14041: PPOPN 1
14043: END
// export function hHackInvincible ; var i ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14048: LD_ADDR_VAR 0 2
14052: PUSH
14053: LD_INT 2
14055: PUSH
14056: LD_INT 21
14058: PUSH
14059: LD_INT 1
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 21
14068: PUSH
14069: LD_INT 2
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: PPUSH
14081: CALL_OW 69
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14148
// if IsSelected ( i ) then
14089: LD_VAR 0 2
14093: PPUSH
14094: CALL_OW 306
14098: IFFALSE 14146
// begin if i in hInvincible then
14100: LD_VAR 0 2
14104: PUSH
14105: LD_EXP 62
14109: IN
14110: IFFALSE 14130
// hInvincible := hInvincible diff i else
14112: LD_ADDR_EXP 62
14116: PUSH
14117: LD_EXP 62
14121: PUSH
14122: LD_VAR 0 2
14126: DIFF
14127: ST_TO_ADDR
14128: GO 14146
// hInvincible := hInvincible union i ;
14130: LD_ADDR_EXP 62
14134: PUSH
14135: LD_EXP 62
14139: PUSH
14140: LD_VAR 0 2
14144: UNION
14145: ST_TO_ADDR
// end ;
14146: GO 14086
14148: POP
14149: POP
// end ;
14150: LD_VAR 0 1
14154: RET
// export function hHackInvisible ; var i , j ; begin
14155: LD_INT 0
14157: PPUSH
14158: PPUSH
14159: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14160: LD_ADDR_VAR 0 2
14164: PUSH
14165: LD_INT 21
14167: PUSH
14168: LD_INT 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PPUSH
14175: CALL_OW 69
14179: PUSH
14180: FOR_IN
14181: IFFALSE 14205
// if IsSelected ( i ) then
14183: LD_VAR 0 2
14187: PPUSH
14188: CALL_OW 306
14192: IFFALSE 14203
// ComForceInvisible ( i ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: CALL_OW 496
14203: GO 14180
14205: POP
14206: POP
// end ;
14207: LD_VAR 0 1
14211: RET
// export function hHackChangeYourSide ; begin
14212: LD_INT 0
14214: PPUSH
// if your_side = 8 then
14215: LD_OWVAR 2
14219: PUSH
14220: LD_INT 8
14222: EQUAL
14223: IFFALSE 14235
// your_side := 0 else
14225: LD_ADDR_OWVAR 2
14229: PUSH
14230: LD_INT 0
14232: ST_TO_ADDR
14233: GO 14249
// your_side := your_side + 1 ;
14235: LD_ADDR_OWVAR 2
14239: PUSH
14240: LD_OWVAR 2
14244: PUSH
14245: LD_INT 1
14247: PLUS
14248: ST_TO_ADDR
// end ;
14249: LD_VAR 0 1
14253: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14254: LD_INT 0
14256: PPUSH
14257: PPUSH
14258: PPUSH
// for i in all_units do
14259: LD_ADDR_VAR 0 2
14263: PUSH
14264: LD_OWVAR 3
14268: PUSH
14269: FOR_IN
14270: IFFALSE 14348
// if IsSelected ( i ) then
14272: LD_VAR 0 2
14276: PPUSH
14277: CALL_OW 306
14281: IFFALSE 14346
// begin j := GetSide ( i ) ;
14283: LD_ADDR_VAR 0 3
14287: PUSH
14288: LD_VAR 0 2
14292: PPUSH
14293: CALL_OW 255
14297: ST_TO_ADDR
// if j = 8 then
14298: LD_VAR 0 3
14302: PUSH
14303: LD_INT 8
14305: EQUAL
14306: IFFALSE 14318
// j := 0 else
14308: LD_ADDR_VAR 0 3
14312: PUSH
14313: LD_INT 0
14315: ST_TO_ADDR
14316: GO 14332
// j := j + 1 ;
14318: LD_ADDR_VAR 0 3
14322: PUSH
14323: LD_VAR 0 3
14327: PUSH
14328: LD_INT 1
14330: PLUS
14331: ST_TO_ADDR
// SetSide ( i , j ) ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_VAR 0 3
14341: PPUSH
14342: CALL_OW 235
// end ;
14346: GO 14269
14348: POP
14349: POP
// end ;
14350: LD_VAR 0 1
14354: RET
// export function hHackFog ; begin
14355: LD_INT 0
14357: PPUSH
// FogOff ( true ) ;
14358: LD_INT 1
14360: PPUSH
14361: CALL_OW 344
// end ;
14365: LD_VAR 0 1
14369: RET
// export function hHackApeman ; begin
14370: LD_INT 0
14372: PPUSH
// uc_side := your_side ;
14373: LD_ADDR_OWVAR 20
14377: PUSH
14378: LD_OWVAR 2
14382: ST_TO_ADDR
// uc_nation := 0 ;
14383: LD_ADDR_OWVAR 21
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// hc_name :=  ;
14391: LD_ADDR_OWVAR 26
14395: PUSH
14396: LD_STRING 
14398: ST_TO_ADDR
// hc_gallery :=  ;
14399: LD_ADDR_OWVAR 33
14403: PUSH
14404: LD_STRING 
14406: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
14407: LD_ADDR_OWVAR 31
14411: PUSH
14412: LD_INT 0
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: LD_INT 0
14420: PUSH
14421: LD_INT 0
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: ST_TO_ADDR
// hc_class := class_apeman ;
14430: LD_ADDR_OWVAR 28
14434: PUSH
14435: LD_INT 12
14437: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14438: CALL_OW 44
14442: PPUSH
14443: LD_INT 1
14445: PPUSH
14446: CALL_OW 51
// end ;
14450: LD_VAR 0 1
14454: RET
// export function hHackBoom ; begin
14455: LD_INT 0
14457: PPUSH
// uc_side := your_side ;
14458: LD_ADDR_OWVAR 20
14462: PUSH
14463: LD_OWVAR 2
14467: ST_TO_ADDR
// uc_nation := 1 ;
14468: LD_ADDR_OWVAR 21
14472: PUSH
14473: LD_INT 1
14475: ST_TO_ADDR
// vc_chassis := us_morphling ;
14476: LD_ADDR_OWVAR 37
14480: PUSH
14481: LD_INT 5
14483: ST_TO_ADDR
// vc_engine := engine_siberite ;
14484: LD_ADDR_OWVAR 39
14488: PUSH
14489: LD_INT 3
14491: ST_TO_ADDR
// vc_control := control_computer ;
14492: LD_ADDR_OWVAR 38
14496: PUSH
14497: LD_INT 3
14499: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
14500: LD_ADDR_OWVAR 40
14504: PUSH
14505: LD_INT 8
14507: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14508: CALL_OW 45
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: CALL_OW 51
// end ;
14520: LD_VAR 0 1
14524: RET
