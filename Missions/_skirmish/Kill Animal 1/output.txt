// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// InitGlobalVariables ;
  18: CALL 19838 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := 0 ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 4
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_EXP 95
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 447: LD_ADDR_VAR 0 8
 451: PUSH
 452: LD_INT 20
 454: PUSH
 455: EMPTY
 456: LIST
 457: ST_TO_ADDR
// InitHc_All ( ) ;
 458: CALL_OW 584
// for i := 1 to numbers - 2 do
 462: LD_ADDR_VAR 0 5
 466: PUSH
 467: DOUBLE
 468: LD_INT 1
 470: DEC
 471: ST_TO_ADDR
 472: LD_VAR 0 3
 476: PUSH
 477: LD_INT 2
 479: MINUS
 480: PUSH
 481: FOR_TO
 482: IFFALSE 623
// begin if numbers [ i ] = 0 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_VAR 0 5
 493: ARRAY
 494: PUSH
 495: LD_INT 0
 497: EQUAL
 498: IFFALSE 502
// continue ;
 500: GO 481
// hc_class := classes [ i ] ;
 502: LD_ADDR_OWVAR 28
 506: PUSH
 507: LD_VAR 0 7
 511: PUSH
 512: LD_VAR 0 5
 516: ARRAY
 517: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 518: LD_ADDR_OWVAR 29
 522: PUSH
 523: LD_INT 8
 525: PPUSH
 526: LD_INT 12
 528: PPUSH
 529: CALL_OW 12
 533: PUSH
 534: LD_INT 8
 536: PPUSH
 537: LD_INT 12
 539: PPUSH
 540: CALL_OW 12
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 549: LD_ADDR_OWVAR 35
 553: PUSH
 554: LD_INT 5
 556: NEG
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_OWVAR 67
 570: PUSH
 571: LD_INT 5
 573: MUL
 574: PLUS
 575: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 576: LD_ADDR_VAR 0 6
 580: PUSH
 581: DOUBLE
 582: LD_INT 1
 584: DEC
 585: ST_TO_ADDR
 586: LD_VAR 0 3
 590: PUSH
 591: LD_VAR 0 5
 595: ARRAY
 596: PUSH
 597: FOR_TO
 598: IFFALSE 619
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
 617: GO 597
 619: POP
 620: POP
// end ;
 621: GO 481
 623: POP
 624: POP
// if not waterArea then
 625: LD_VAR 0 2
 629: NOT
 630: IFFALSE 634
// exit ;
 632: GO 714
// hc_class := waterClass [ 1 ] ;
 634: LD_ADDR_OWVAR 28
 638: PUSH
 639: LD_VAR 0 8
 643: PUSH
 644: LD_INT 1
 646: ARRAY
 647: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 648: LD_ADDR_OWVAR 29
 652: PUSH
 653: LD_INT 10
 655: PUSH
 656: LD_INT 10
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: ST_TO_ADDR
// hc_agressivity := 0 ;
 663: LD_ADDR_OWVAR 35
 667: PUSH
 668: LD_INT 0
 670: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 671: LD_ADDR_VAR 0 6
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 3
 685: PUSH
 686: LD_INT 7
 688: ARRAY
 689: PUSH
 690: FOR_TO
 691: IFFALSE 712
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 693: CALL_OW 44
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 49
 710: GO 690
 712: POP
 713: POP
// end ; end_of_file
 714: LD_VAR 0 4
 718: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 719: LD_INT 22
 721: PUSH
 722: LD_INT 0
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 25
 731: PUSH
 732: LD_INT 15
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: IFFALSE 853
 749: GO 751
 751: DISABLE
 752: LD_INT 0
 754: PPUSH
// begin enable ;
 755: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 756: LD_ADDR_VAR 0 1
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 25
 773: PUSH
 774: LD_INT 15
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: FOR_IN
 791: IFFALSE 851
// if GetLives ( i ) < 1000 then
 793: LD_VAR 0 1
 797: PPUSH
 798: CALL_OW 256
 802: PUSH
 803: LD_INT 1000
 805: LESS
 806: IFFALSE 849
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 808: LD_VAR 0 1
 812: PPUSH
 813: LD_INT 3
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PPUSH
 830: CALL_OW 69
 834: PPUSH
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 74
 844: PPUSH
 845: CALL_OW 115
 849: GO 790
 851: POP
 852: POP
// end ;
 853: PPOPN 1
 855: END
// every 3 do var i , enemy , x , y , d ;
 856: GO 858
 858: DISABLE
 859: LD_INT 0
 861: PPUSH
 862: PPUSH
 863: PPUSH
 864: PPUSH
 865: PPUSH
// begin enable ;
 866: ENABLE
// for i := 2 to huntersAmount do
 867: LD_ADDR_VAR 0 1
 871: PUSH
 872: DOUBLE
 873: LD_INT 2
 875: DEC
 876: ST_TO_ADDR
 877: LD_EXP 3
 881: PUSH
 882: FOR_TO
 883: IFFALSE 1222
// begin if not HasTask ( hunters [ i ] ) then
 885: LD_EXP 6
 889: PUSH
 890: LD_VAR 0 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 314
 900: NOT
 901: IFFALSE 1220
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_EXP 6
 927: PUSH
 928: LD_VAR 0 1
 932: ARRAY
 933: PPUSH
 934: CALL_OW 74
 938: ST_TO_ADDR
// if not enemy then
 939: LD_VAR 0 2
 943: NOT
 944: IFFALSE 948
// continue ;
 946: GO 882
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 948: LD_EXP 6
 952: PUSH
 953: LD_VAR 0 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: CALL_OW 296
 968: PUSH
 969: LD_INT 17
 971: LESS
 972: IFFALSE 1075
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 974: LD_EXP 6
 978: PUSH
 979: LD_VAR 0 1
 983: ARRAY
 984: PPUSH
 985: CALL_OW 257
 989: PUSH
 990: LD_INT 11
 992: EQUAL
 993: IFFALSE 1053
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL_OW 257
1004: PUSH
1005: LD_INT 19
1007: PUSH
1008: LD_INT 20
1010: PUSH
1011: LD_INT 13
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: IN
1019: IFFALSE 1038
// ComCarabine ( hunters [ i ] ) else
1021: LD_EXP 6
1025: PUSH
1026: LD_VAR 0 1
1030: ARRAY
1031: PPUSH
1032: CALL_OW 162
1036: GO 1053
// ComSabre ( hunters [ i ] ) ;
1038: LD_EXP 6
1042: PUSH
1043: LD_VAR 0 1
1047: ARRAY
1048: PPUSH
1049: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1053: LD_EXP 6
1057: PUSH
1058: LD_VAR 0 1
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 115
// end else
1073: GO 1220
// begin d := rand ( 0 , 5 ) ;
1075: LD_ADDR_VAR 0 5
1079: PUSH
1080: LD_INT 0
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 12
1090: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_VAR 0 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 5
1116: PPUSH
1117: LD_INT 8
1119: PPUSH
1120: CALL_OW 272
1124: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1125: LD_ADDR_VAR 0 4
1129: PUSH
1130: LD_EXP 6
1134: PUSH
1135: LD_VAR 0 1
1139: ARRAY
1140: PPUSH
1141: CALL_OW 251
1145: PPUSH
1146: LD_VAR 0 5
1150: PPUSH
1151: LD_INT 8
1153: PPUSH
1154: CALL_OW 273
1158: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 488
1173: PUSH
1174: LD_VAR 0 3
1178: PPUSH
1179: LD_VAR 0 4
1183: PPUSH
1184: CALL_OW 428
1188: PUSH
1189: LD_INT 0
1191: EQUAL
1192: AND
1193: IFFALSE 1220
// ComMoveXY ( hunters [ i ] , x , y ) ;
1195: LD_EXP 6
1199: PUSH
1200: LD_VAR 0 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 3
1210: PPUSH
1211: LD_VAR 0 4
1215: PPUSH
1216: CALL_OW 111
// end ; end ; end ;
1220: GO 882
1222: POP
1223: POP
// end ; end_of_file
1224: PPOPN 5
1226: END
// on UnitGoesToRed ( un ) do var i ;
1227: LD_INT 0
1229: PPUSH
// begin if GetSide ( un ) = 1 then
1230: LD_VAR 0 1
1234: PPUSH
1235: CALL_OW 255
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1252
// YouLost ( hunt2 ) ;
1245: LD_STRING hunt2
1247: PPUSH
1248: CALL_OW 104
// if GetSide ( un ) > 1 then
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 255
1261: PUSH
1262: LD_INT 1
1264: GREATER
1265: IFFALSE 1318
// begin for i := 1 to 6 do
1267: LD_ADDR_VAR 0 2
1271: PUSH
1272: DOUBLE
1273: LD_INT 1
1275: DEC
1276: ST_TO_ADDR
1277: LD_INT 6
1279: PUSH
1280: FOR_TO
1281: IFFALSE 1304
// begin wait ( 0 0$1 ) ;
1283: LD_INT 35
1285: PPUSH
1286: CALL_OW 67
// SetLives ( un , 249 ) ;
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 249
1297: PPUSH
1298: CALL_OW 234
// end ;
1302: GO 1280
1304: POP
1305: POP
// SetLives ( un , 1000 ) ;
1306: LD_VAR 0 1
1310: PPUSH
1311: LD_INT 1000
1313: PPUSH
1314: CALL_OW 234
// end ; end ;
1318: PPOPN 2
1320: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1321: LD_VAR 0 1
1325: PUSH
1326: LD_INT 1
1328: EQUAL
1329: PUSH
1330: LD_VAR 0 2
1334: PUSH
1335: LD_INT 1
1337: GREATER
1338: AND
1339: IFFALSE 1348
// YouLost ( hunt1 ) ;
1341: LD_STRING hunt1
1343: PPUSH
1344: CALL_OW 104
// end ;
1348: PPOPN 2
1350: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1351: LD_INT 0
1353: PPUSH
// begin point := 0 ;
1354: LD_ADDR_VAR 0 4
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL_OW 257
1371: PUSH
1372: LD_INT 20
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1391
1380: POP
// point := 10 ; class_horse :
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 10
1388: ST_TO_ADDR
1389: GO 1527
1391: LD_EXP 95
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1412
1401: POP
// point := 10 ; class_baggie :
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 10
1409: ST_TO_ADDR
1410: GO 1527
1412: LD_INT 13
1414: DOUBLE
1415: EQUAL
1416: IFTRUE 1420
1418: GO 1431
1420: POP
// point := 5 ; class_phororhacos :
1421: LD_ADDR_VAR 0 4
1425: PUSH
1426: LD_INT 5
1428: ST_TO_ADDR
1429: GO 1527
1431: LD_INT 18
1433: DOUBLE
1434: EQUAL
1435: IFTRUE 1439
1437: GO 1450
1439: POP
// point := 10 ; class_tiger :
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 10
1447: ST_TO_ADDR
1448: GO 1527
1450: LD_INT 14
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1469
1458: POP
// point := 20 ; class_apeman :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 20
1466: ST_TO_ADDR
1467: GO 1527
1469: LD_INT 12
1471: DOUBLE
1472: EQUAL
1473: IFTRUE 1477
1475: GO 1488
1477: POP
// point := 30 ; class_apeman_soldier :
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: LD_INT 30
1485: ST_TO_ADDR
1486: GO 1527
1488: LD_INT 15
1490: DOUBLE
1491: EQUAL
1492: IFTRUE 1496
1494: GO 1507
1496: POP
// point := 50 ; class_frog :
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: LD_INT 50
1504: ST_TO_ADDR
1505: GO 1527
1507: LD_INT 19
1509: DOUBLE
1510: EQUAL
1511: IFTRUE 1515
1513: GO 1526
1515: POP
// point := 10 ; end ;
1516: LD_ADDR_VAR 0 4
1520: PUSH
1521: LD_INT 10
1523: ST_TO_ADDR
1524: GO 1527
1526: POP
// if point then
1527: LD_VAR 0 4
1531: IFFALSE 1570
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1533: LD_ADDR_EXP 5
1537: PUSH
1538: LD_EXP 5
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_EXP 5
1552: PUSH
1553: LD_VAR 0 2
1557: ARRAY
1558: PUSH
1559: LD_VAR 0 4
1563: PLUS
1564: PPUSH
1565: CALL_OW 1
1569: ST_TO_ADDR
// end ;
1570: PPOPN 4
1572: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1573: LD_INT 22
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: PUSH
1588: LD_INT 10
1590: LESS
1591: IFFALSE 1693
1593: GO 1595
1595: DISABLE
// begin enable ;
1596: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1597: LD_INT 2
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: LD_INT 4
1608: PPUSH
1609: CALL_OW 12
1613: PUSH
1614: LD_INT 0
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 12
1624: PUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 4
1630: PPUSH
1631: CALL_OW 12
1635: PUSH
1636: LD_INT 2
1638: PPUSH
1639: LD_INT 4
1641: PPUSH
1642: CALL_OW 12
1646: PUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 12
1657: PUSH
1658: LD_INT 0
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 12
1668: PUSH
1669: LD_INT 0
1671: PPUSH
1672: LD_INT 4
1674: PPUSH
1675: CALL_OW 12
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL 391 0 3
// end ;
1693: END
// every 0 0$1 do var i ;
1694: GO 1696
1696: DISABLE
1697: LD_INT 0
1699: PPUSH
// begin enable ;
1700: ENABLE
// display_strings := [ ] ;
1701: LD_ADDR_OWVAR 47
1705: PUSH
1706: EMPTY
1707: ST_TO_ADDR
// for i := 1 to huntersAmount do
1708: LD_ADDR_VAR 0 1
1712: PUSH
1713: DOUBLE
1714: LD_INT 1
1716: DEC
1717: ST_TO_ADDR
1718: LD_EXP 3
1722: PUSH
1723: FOR_TO
1724: IFFALSE 1858
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1726: LD_ADDR_OWVAR 47
1730: PUSH
1731: LD_OWVAR 47
1735: PUSH
1736: LD_STRING #player
1738: PUSH
1739: LD_VAR 0 1
1743: STR
1744: PUSH
1745: LD_VAR 0 1
1749: PUSH
1750: LD_EXP 5
1754: PUSH
1755: LD_VAR 0 1
1759: ARRAY
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: ADD
1766: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1767: LD_EXP 5
1771: PUSH
1772: LD_VAR 0 1
1776: ARRAY
1777: PUSH
1778: LD_INT 750
1780: PUSH
1781: LD_INT 1250
1783: PUSH
1784: LD_INT 2000
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_OWVAR 67
1796: ARRAY
1797: GREATEREQUAL
1798: IFFALSE 1856
// begin if i = 1 then
1800: LD_VAR 0 1
1804: PUSH
1805: LD_INT 1
1807: EQUAL
1808: IFFALSE 1849
// begin DialogueOn ;
1810: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1814: LD_STRING ACH_HUNT
1816: PPUSH
1817: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1821: LD_ADDR_OWVAR 47
1825: PUSH
1826: LD_STRING #hunting-win
1828: PUSH
1829: EMPTY
1830: LIST
1831: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1832: LD_INT 175
1834: PPUSH
1835: CALL_OW 68
// YouWin ;
1839: CALL_OW 103
// DialogueOff ;
1843: CALL_OW 7
// end else
1847: GO 1856
// YouLost ( hunt3 ) ;
1849: LD_STRING hunt3
1851: PPUSH
1852: CALL_OW 104
// end ; end ;
1856: GO 1723
1858: POP
1859: POP
// end ; end_of_file end_of_file
1860: PPOPN 1
1862: END
// every 0 0$1 do
1863: GO 1865
1865: DISABLE
// begin enable ;
1866: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1867: LD_STRING updateTimer(
1869: PUSH
1870: LD_OWVAR 1
1874: STR
1875: PUSH
1876: LD_STRING );
1878: STR
1879: PPUSH
1880: CALL_OW 559
// end ;
1884: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1885: LD_INT 0
1887: PPUSH
// if p2 = 100 then
1888: LD_VAR 0 2
1892: PUSH
1893: LD_INT 100
1895: EQUAL
1896: IFFALSE 2899
// begin if not StreamModeActive then
1898: LD_EXP 7
1902: NOT
1903: IFFALSE 1913
// StreamModeActive := true ;
1905: LD_ADDR_EXP 7
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// if p3 = 0 then
1913: LD_VAR 0 3
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: IFFALSE 1927
// InitStreamMode ;
1923: CALL 3059 0 0
// if p3 = 1 then
1927: LD_VAR 0 3
1931: PUSH
1932: LD_INT 1
1934: EQUAL
1935: IFFALSE 1945
// sRocket := true ;
1937: LD_ADDR_EXP 12
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// if p3 = 2 then
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: EQUAL
1953: IFFALSE 1963
// sSpeed := true ;
1955: LD_ADDR_EXP 11
1959: PUSH
1960: LD_INT 1
1962: ST_TO_ADDR
// if p3 = 3 then
1963: LD_VAR 0 3
1967: PUSH
1968: LD_INT 3
1970: EQUAL
1971: IFFALSE 1981
// sEngine := true ;
1973: LD_ADDR_EXP 13
1977: PUSH
1978: LD_INT 1
1980: ST_TO_ADDR
// if p3 = 4 then
1981: LD_VAR 0 3
1985: PUSH
1986: LD_INT 4
1988: EQUAL
1989: IFFALSE 1999
// sSpec := true ;
1991: LD_ADDR_EXP 10
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// if p3 = 5 then
1999: LD_VAR 0 3
2003: PUSH
2004: LD_INT 5
2006: EQUAL
2007: IFFALSE 2017
// sLevel := true ;
2009: LD_ADDR_EXP 14
2013: PUSH
2014: LD_INT 1
2016: ST_TO_ADDR
// if p3 = 6 then
2017: LD_VAR 0 3
2021: PUSH
2022: LD_INT 6
2024: EQUAL
2025: IFFALSE 2035
// sArmoury := true ;
2027: LD_ADDR_EXP 15
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// if p3 = 7 then
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 7
2042: EQUAL
2043: IFFALSE 2053
// sRadar := true ;
2045: LD_ADDR_EXP 16
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// if p3 = 8 then
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 8
2060: EQUAL
2061: IFFALSE 2071
// sBunker := true ;
2063: LD_ADDR_EXP 17
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// if p3 = 9 then
2071: LD_VAR 0 3
2075: PUSH
2076: LD_INT 9
2078: EQUAL
2079: IFFALSE 2089
// sHack := true ;
2081: LD_ADDR_EXP 18
2085: PUSH
2086: LD_INT 1
2088: ST_TO_ADDR
// if p3 = 10 then
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 10
2096: EQUAL
2097: IFFALSE 2107
// sFire := true ;
2099: LD_ADDR_EXP 19
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// if p3 = 11 then
2107: LD_VAR 0 3
2111: PUSH
2112: LD_INT 11
2114: EQUAL
2115: IFFALSE 2125
// sRefresh := true ;
2117: LD_ADDR_EXP 20
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// if p3 = 12 then
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 12
2132: EQUAL
2133: IFFALSE 2143
// sExp := true ;
2135: LD_ADDR_EXP 21
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// if p3 = 13 then
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 13
2150: EQUAL
2151: IFFALSE 2161
// sDepot := true ;
2153: LD_ADDR_EXP 22
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// if p3 = 14 then
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 14
2168: EQUAL
2169: IFFALSE 2179
// sFlag := true ;
2171: LD_ADDR_EXP 23
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// if p3 = 15 then
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 15
2186: EQUAL
2187: IFFALSE 2197
// sKamikadze := true ;
2189: LD_ADDR_EXP 31
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// if p3 = 16 then
2197: LD_VAR 0 3
2201: PUSH
2202: LD_INT 16
2204: EQUAL
2205: IFFALSE 2215
// sTroll := true ;
2207: LD_ADDR_EXP 32
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// if p3 = 17 then
2215: LD_VAR 0 3
2219: PUSH
2220: LD_INT 17
2222: EQUAL
2223: IFFALSE 2233
// sSlow := true ;
2225: LD_ADDR_EXP 33
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if p3 = 18 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 18
2240: EQUAL
2241: IFFALSE 2251
// sLack := true ;
2243: LD_ADDR_EXP 34
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// if p3 = 19 then
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 19
2258: EQUAL
2259: IFFALSE 2269
// sTank := true ;
2261: LD_ADDR_EXP 36
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if p3 = 20 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 20
2276: EQUAL
2277: IFFALSE 2287
// sRemote := true ;
2279: LD_ADDR_EXP 37
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// if p3 = 21 then
2287: LD_VAR 0 3
2291: PUSH
2292: LD_INT 21
2294: EQUAL
2295: IFFALSE 2305
// sPowell := true ;
2297: LD_ADDR_EXP 38
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// if p3 = 22 then
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 22
2312: EQUAL
2313: IFFALSE 2323
// sTeleport := true ;
2315: LD_ADDR_EXP 41
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// if p3 = 23 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 23
2330: EQUAL
2331: IFFALSE 2341
// sOilTower := true ;
2333: LD_ADDR_EXP 43
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// if p3 = 24 then
2341: LD_VAR 0 3
2345: PUSH
2346: LD_INT 24
2348: EQUAL
2349: IFFALSE 2359
// sShovel := true ;
2351: LD_ADDR_EXP 44
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// if p3 = 25 then
2359: LD_VAR 0 3
2363: PUSH
2364: LD_INT 25
2366: EQUAL
2367: IFFALSE 2377
// sSheik := true ;
2369: LD_ADDR_EXP 45
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// if p3 = 26 then
2377: LD_VAR 0 3
2381: PUSH
2382: LD_INT 26
2384: EQUAL
2385: IFFALSE 2395
// sEarthquake := true ;
2387: LD_ADDR_EXP 47
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// if p3 = 27 then
2395: LD_VAR 0 3
2399: PUSH
2400: LD_INT 27
2402: EQUAL
2403: IFFALSE 2413
// sAI := true ;
2405: LD_ADDR_EXP 48
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// if p3 = 28 then
2413: LD_VAR 0 3
2417: PUSH
2418: LD_INT 28
2420: EQUAL
2421: IFFALSE 2431
// sCargo := true ;
2423: LD_ADDR_EXP 51
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// if p3 = 29 then
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 29
2438: EQUAL
2439: IFFALSE 2449
// sDLaser := true ;
2441: LD_ADDR_EXP 52
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// if p3 = 30 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 30
2456: EQUAL
2457: IFFALSE 2467
// sExchange := true ;
2459: LD_ADDR_EXP 53
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// if p3 = 31 then
2467: LD_VAR 0 3
2471: PUSH
2472: LD_INT 31
2474: EQUAL
2475: IFFALSE 2485
// sFac := true ;
2477: LD_ADDR_EXP 54
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// if p3 = 32 then
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 32
2492: EQUAL
2493: IFFALSE 2503
// sPower := true ;
2495: LD_ADDR_EXP 55
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// if p3 = 33 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 33
2510: EQUAL
2511: IFFALSE 2521
// sRandom := true ;
2513: LD_ADDR_EXP 56
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// if p3 = 34 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 34
2528: EQUAL
2529: IFFALSE 2539
// sShield := true ;
2531: LD_ADDR_EXP 57
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// if p3 = 35 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 35
2546: EQUAL
2547: IFFALSE 2557
// sTime := true ;
2549: LD_ADDR_EXP 58
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// if p3 = 36 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 36
2564: EQUAL
2565: IFFALSE 2575
// sTools := true ;
2567: LD_ADDR_EXP 59
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// if p3 = 101 then
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 101
2582: EQUAL
2583: IFFALSE 2593
// sSold := true ;
2585: LD_ADDR_EXP 24
2589: PUSH
2590: LD_INT 1
2592: ST_TO_ADDR
// if p3 = 102 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 102
2600: EQUAL
2601: IFFALSE 2611
// sDiff := true ;
2603: LD_ADDR_EXP 25
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// if p3 = 103 then
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 103
2618: EQUAL
2619: IFFALSE 2629
// sFog := true ;
2621: LD_ADDR_EXP 28
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// if p3 = 104 then
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 104
2636: EQUAL
2637: IFFALSE 2647
// sReset := true ;
2639: LD_ADDR_EXP 29
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// if p3 = 105 then
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 105
2654: EQUAL
2655: IFFALSE 2665
// sSun := true ;
2657: LD_ADDR_EXP 30
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// if p3 = 106 then
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 106
2672: EQUAL
2673: IFFALSE 2683
// sTiger := true ;
2675: LD_ADDR_EXP 26
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// if p3 = 107 then
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 107
2690: EQUAL
2691: IFFALSE 2701
// sBomb := true ;
2693: LD_ADDR_EXP 27
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if p3 = 108 then
2701: LD_VAR 0 3
2705: PUSH
2706: LD_INT 108
2708: EQUAL
2709: IFFALSE 2719
// sWound := true ;
2711: LD_ADDR_EXP 35
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// if p3 = 109 then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 109
2726: EQUAL
2727: IFFALSE 2737
// sBetray := true ;
2729: LD_ADDR_EXP 39
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// if p3 = 110 then
2737: LD_VAR 0 3
2741: PUSH
2742: LD_INT 110
2744: EQUAL
2745: IFFALSE 2755
// sContamin := true ;
2747: LD_ADDR_EXP 40
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// if p3 = 111 then
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 111
2762: EQUAL
2763: IFFALSE 2773
// sOil := true ;
2765: LD_ADDR_EXP 42
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// if p3 = 112 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 112
2780: EQUAL
2781: IFFALSE 2791
// sStu := true ;
2783: LD_ADDR_EXP 46
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// if p3 = 113 then
2791: LD_VAR 0 3
2795: PUSH
2796: LD_INT 113
2798: EQUAL
2799: IFFALSE 2809
// sBazooka := true ;
2801: LD_ADDR_EXP 49
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// if p3 = 114 then
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 114
2816: EQUAL
2817: IFFALSE 2827
// sMortar := true ;
2819: LD_ADDR_EXP 50
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// if p3 = 115 then
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 115
2834: EQUAL
2835: IFFALSE 2845
// sRanger := true ;
2837: LD_ADDR_EXP 60
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// if p3 = 116 then
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 116
2852: EQUAL
2853: IFFALSE 2863
// sComputer := true ;
2855: LD_ADDR_EXP 61
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// if p3 = 117 then
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 117
2870: EQUAL
2871: IFFALSE 2881
// s30 := true ;
2873: LD_ADDR_EXP 62
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// if p3 = 118 then
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 118
2888: EQUAL
2889: IFFALSE 2899
// s60 := true ;
2891: LD_ADDR_EXP 63
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; if p2 = 101 then
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 101
2906: EQUAL
2907: IFFALSE 3035
// begin case p3 of 1 :
2909: LD_VAR 0 3
2913: PUSH
2914: LD_INT 1
2916: DOUBLE
2917: EQUAL
2918: IFTRUE 2922
2920: GO 2929
2922: POP
// hHackUnlimitedResources ; 2 :
2923: CALL 14631 0 0
2927: GO 3035
2929: LD_INT 2
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2944
2937: POP
// hHackSetLevel10 ; 3 :
2938: CALL 14764 0 0
2942: GO 3035
2944: LD_INT 3
2946: DOUBLE
2947: EQUAL
2948: IFTRUE 2952
2950: GO 2959
2952: POP
// hHackSetLevel10YourUnits ; 4 :
2953: CALL 14849 0 0
2957: GO 3035
2959: LD_INT 4
2961: DOUBLE
2962: EQUAL
2963: IFTRUE 2967
2965: GO 2974
2967: POP
// hHackInvincible ; 5 :
2968: CALL 15297 0 0
2972: GO 3035
2974: LD_INT 5
2976: DOUBLE
2977: EQUAL
2978: IFTRUE 2982
2980: GO 2989
2982: POP
// hHackInvisible ; 6 :
2983: CALL 15408 0 0
2987: GO 3035
2989: LD_INT 6
2991: DOUBLE
2992: EQUAL
2993: IFTRUE 2997
2995: GO 3004
2997: POP
// hHackChangeYourSide ; 7 :
2998: CALL 15465 0 0
3002: GO 3035
3004: LD_INT 7
3006: DOUBLE
3007: EQUAL
3008: IFTRUE 3012
3010: GO 3019
3012: POP
// hHackChangeUnitSide ; 8 :
3013: CALL 15507 0 0
3017: GO 3035
3019: LD_INT 8
3021: DOUBLE
3022: EQUAL
3023: IFTRUE 3027
3025: GO 3034
3027: POP
// hHackFog ; end ;
3028: CALL 15608 0 0
3032: GO 3035
3034: POP
// end ; end ;
3035: LD_VAR 0 7
3039: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3040: GO 3042
3042: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3043: LD_STRING initStreamRollete();
3045: PPUSH
3046: CALL_OW 559
// InitStreamMode ;
3050: CALL 3059 0 0
// DefineStreamItems ( ) ;
3054: CALL 3523 0 0
// end ;
3058: END
// function InitStreamMode ; begin
3059: LD_INT 0
3061: PPUSH
// streamModeActive := false ;
3062: LD_ADDR_EXP 7
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// normalCounter := 36 ;
3070: LD_ADDR_EXP 8
3074: PUSH
3075: LD_INT 36
3077: ST_TO_ADDR
// hardcoreCounter := 16 ;
3078: LD_ADDR_EXP 9
3082: PUSH
3083: LD_INT 16
3085: ST_TO_ADDR
// sRocket := false ;
3086: LD_ADDR_EXP 12
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// sSpeed := false ;
3094: LD_ADDR_EXP 11
3098: PUSH
3099: LD_INT 0
3101: ST_TO_ADDR
// sEngine := false ;
3102: LD_ADDR_EXP 13
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// sSpec := false ;
3110: LD_ADDR_EXP 10
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sLevel := false ;
3118: LD_ADDR_EXP 14
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sArmoury := false ;
3126: LD_ADDR_EXP 15
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sRadar := false ;
3134: LD_ADDR_EXP 16
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sBunker := false ;
3142: LD_ADDR_EXP 17
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sHack := false ;
3150: LD_ADDR_EXP 18
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sFire := false ;
3158: LD_ADDR_EXP 19
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sRefresh := false ;
3166: LD_ADDR_EXP 20
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sExp := false ;
3174: LD_ADDR_EXP 21
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sDepot := false ;
3182: LD_ADDR_EXP 22
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sFlag := false ;
3190: LD_ADDR_EXP 23
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sKamikadze := false ;
3198: LD_ADDR_EXP 31
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sTroll := false ;
3206: LD_ADDR_EXP 32
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sSlow := false ;
3214: LD_ADDR_EXP 33
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sLack := false ;
3222: LD_ADDR_EXP 34
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sTank := false ;
3230: LD_ADDR_EXP 36
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sRemote := false ;
3238: LD_ADDR_EXP 37
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sPowell := false ;
3246: LD_ADDR_EXP 38
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sTeleport := false ;
3254: LD_ADDR_EXP 41
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sOilTower := false ;
3262: LD_ADDR_EXP 43
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sShovel := false ;
3270: LD_ADDR_EXP 44
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sSheik := false ;
3278: LD_ADDR_EXP 45
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sEarthquake := false ;
3286: LD_ADDR_EXP 47
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sAI := false ;
3294: LD_ADDR_EXP 48
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sCargo := false ;
3302: LD_ADDR_EXP 51
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sDLaser := false ;
3310: LD_ADDR_EXP 52
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sExchange := false ;
3318: LD_ADDR_EXP 53
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sFac := false ;
3326: LD_ADDR_EXP 54
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sPower := false ;
3334: LD_ADDR_EXP 55
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sRandom := false ;
3342: LD_ADDR_EXP 56
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sShield := false ;
3350: LD_ADDR_EXP 57
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sTime := false ;
3358: LD_ADDR_EXP 58
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sTools := false ;
3366: LD_ADDR_EXP 59
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sSold := false ;
3374: LD_ADDR_EXP 24
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sDiff := false ;
3382: LD_ADDR_EXP 25
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sFog := false ;
3390: LD_ADDR_EXP 28
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sReset := false ;
3398: LD_ADDR_EXP 29
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sSun := false ;
3406: LD_ADDR_EXP 30
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sTiger := false ;
3414: LD_ADDR_EXP 26
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sBomb := false ;
3422: LD_ADDR_EXP 27
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sWound := false ;
3430: LD_ADDR_EXP 35
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sBetray := false ;
3438: LD_ADDR_EXP 39
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sContamin := false ;
3446: LD_ADDR_EXP 40
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sOil := false ;
3454: LD_ADDR_EXP 42
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sStu := false ;
3462: LD_ADDR_EXP 46
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sBazooka := false ;
3470: LD_ADDR_EXP 49
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sMortar := false ;
3478: LD_ADDR_EXP 50
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sRanger := false ;
3486: LD_ADDR_EXP 60
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sComputer := false ;
3494: LD_ADDR_EXP 61
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// s30 := false ;
3502: LD_ADDR_EXP 62
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// s60 := false ;
3510: LD_ADDR_EXP 63
3514: PUSH
3515: LD_INT 0
3517: ST_TO_ADDR
// end ;
3518: LD_VAR 0 1
3522: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
3529: PPUSH
// result := [ ] ;
3530: LD_ADDR_VAR 0 1
3534: PUSH
3535: EMPTY
3536: ST_TO_ADDR
// if campaign_id = 1 then
3537: LD_OWVAR 69
3541: PUSH
3542: LD_INT 1
3544: EQUAL
3545: IFFALSE 6711
// begin case mission_number of 1 :
3547: LD_OWVAR 70
3551: PUSH
3552: LD_INT 1
3554: DOUBLE
3555: EQUAL
3556: IFTRUE 3560
3558: GO 3636
3560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3561: LD_ADDR_VAR 0 1
3565: PUSH
3566: LD_INT 2
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 11
3574: PUSH
3575: LD_INT 12
3577: PUSH
3578: LD_INT 15
3580: PUSH
3581: LD_INT 16
3583: PUSH
3584: LD_INT 22
3586: PUSH
3587: LD_INT 23
3589: PUSH
3590: LD_INT 26
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 101
3606: PUSH
3607: LD_INT 102
3609: PUSH
3610: LD_INT 106
3612: PUSH
3613: LD_INT 116
3615: PUSH
3616: LD_INT 117
3618: PUSH
3619: LD_INT 118
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: ST_TO_ADDR
3634: GO 6709
3636: LD_INT 2
3638: DOUBLE
3639: EQUAL
3640: IFTRUE 3644
3642: GO 3728
3644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3645: LD_ADDR_VAR 0 1
3649: PUSH
3650: LD_INT 2
3652: PUSH
3653: LD_INT 4
3655: PUSH
3656: LD_INT 11
3658: PUSH
3659: LD_INT 12
3661: PUSH
3662: LD_INT 15
3664: PUSH
3665: LD_INT 16
3667: PUSH
3668: LD_INT 22
3670: PUSH
3671: LD_INT 23
3673: PUSH
3674: LD_INT 26
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: PUSH
3688: LD_INT 101
3690: PUSH
3691: LD_INT 102
3693: PUSH
3694: LD_INT 105
3696: PUSH
3697: LD_INT 106
3699: PUSH
3700: LD_INT 108
3702: PUSH
3703: LD_INT 116
3705: PUSH
3706: LD_INT 117
3708: PUSH
3709: LD_INT 118
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: ST_TO_ADDR
3726: GO 6709
3728: LD_INT 3
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3824
3736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3737: LD_ADDR_VAR 0 1
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: LD_INT 4
3747: PUSH
3748: LD_INT 5
3750: PUSH
3751: LD_INT 11
3753: PUSH
3754: LD_INT 12
3756: PUSH
3757: LD_INT 15
3759: PUSH
3760: LD_INT 16
3762: PUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 26
3768: PUSH
3769: LD_INT 36
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 101
3786: PUSH
3787: LD_INT 102
3789: PUSH
3790: LD_INT 105
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 108
3798: PUSH
3799: LD_INT 116
3801: PUSH
3802: LD_INT 117
3804: PUSH
3805: LD_INT 118
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: ST_TO_ADDR
3822: GO 6709
3824: LD_INT 4
3826: DOUBLE
3827: EQUAL
3828: IFTRUE 3832
3830: GO 3928
3832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3833: LD_ADDR_VAR 0 1
3837: PUSH
3838: LD_INT 2
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: LD_INT 8
3849: PUSH
3850: LD_INT 11
3852: PUSH
3853: LD_INT 12
3855: PUSH
3856: LD_INT 15
3858: PUSH
3859: LD_INT 16
3861: PUSH
3862: LD_INT 22
3864: PUSH
3865: LD_INT 23
3867: PUSH
3868: LD_INT 26
3870: PUSH
3871: LD_INT 36
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: PUSH
3888: LD_INT 101
3890: PUSH
3891: LD_INT 102
3893: PUSH
3894: LD_INT 105
3896: PUSH
3897: LD_INT 106
3899: PUSH
3900: LD_INT 108
3902: PUSH
3903: LD_INT 116
3905: PUSH
3906: LD_INT 117
3908: PUSH
3909: LD_INT 118
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: ST_TO_ADDR
3926: GO 6709
3928: LD_INT 5
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 4048
3936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3937: LD_ADDR_VAR 0 1
3941: PUSH
3942: LD_INT 2
3944: PUSH
3945: LD_INT 4
3947: PUSH
3948: LD_INT 5
3950: PUSH
3951: LD_INT 6
3953: PUSH
3954: LD_INT 8
3956: PUSH
3957: LD_INT 11
3959: PUSH
3960: LD_INT 12
3962: PUSH
3963: LD_INT 15
3965: PUSH
3966: LD_INT 16
3968: PUSH
3969: LD_INT 22
3971: PUSH
3972: LD_INT 23
3974: PUSH
3975: LD_INT 25
3977: PUSH
3978: LD_INT 26
3980: PUSH
3981: LD_INT 36
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: PUSH
4000: LD_INT 101
4002: PUSH
4003: LD_INT 102
4005: PUSH
4006: LD_INT 105
4008: PUSH
4009: LD_INT 106
4011: PUSH
4012: LD_INT 108
4014: PUSH
4015: LD_INT 109
4017: PUSH
4018: LD_INT 112
4020: PUSH
4021: LD_INT 116
4023: PUSH
4024: LD_INT 117
4026: PUSH
4027: LD_INT 118
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: ST_TO_ADDR
4046: GO 6709
4048: LD_INT 6
4050: DOUBLE
4051: EQUAL
4052: IFTRUE 4056
4054: GO 4188
4056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4057: LD_ADDR_VAR 0 1
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: LD_INT 4
4067: PUSH
4068: LD_INT 5
4070: PUSH
4071: LD_INT 6
4073: PUSH
4074: LD_INT 8
4076: PUSH
4077: LD_INT 11
4079: PUSH
4080: LD_INT 12
4082: PUSH
4083: LD_INT 15
4085: PUSH
4086: LD_INT 16
4088: PUSH
4089: LD_INT 20
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 22
4097: PUSH
4098: LD_INT 23
4100: PUSH
4101: LD_INT 25
4103: PUSH
4104: LD_INT 26
4106: PUSH
4107: LD_INT 30
4109: PUSH
4110: LD_INT 31
4112: PUSH
4113: LD_INT 32
4115: PUSH
4116: LD_INT 36
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 101
4142: PUSH
4143: LD_INT 102
4145: PUSH
4146: LD_INT 105
4148: PUSH
4149: LD_INT 106
4151: PUSH
4152: LD_INT 108
4154: PUSH
4155: LD_INT 109
4157: PUSH
4158: LD_INT 112
4160: PUSH
4161: LD_INT 116
4163: PUSH
4164: LD_INT 117
4166: PUSH
4167: LD_INT 118
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
4186: GO 6709
4188: LD_INT 7
4190: DOUBLE
4191: EQUAL
4192: IFTRUE 4196
4194: GO 4308
4196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4197: LD_ADDR_VAR 0 1
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: LD_INT 4
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: LD_INT 7
4213: PUSH
4214: LD_INT 11
4216: PUSH
4217: LD_INT 12
4219: PUSH
4220: LD_INT 15
4222: PUSH
4223: LD_INT 16
4225: PUSH
4226: LD_INT 20
4228: PUSH
4229: LD_INT 21
4231: PUSH
4232: LD_INT 22
4234: PUSH
4235: LD_INT 23
4237: PUSH
4238: LD_INT 25
4240: PUSH
4241: LD_INT 26
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 102
4265: PUSH
4266: LD_INT 103
4268: PUSH
4269: LD_INT 105
4271: PUSH
4272: LD_INT 106
4274: PUSH
4275: LD_INT 108
4277: PUSH
4278: LD_INT 112
4280: PUSH
4281: LD_INT 116
4283: PUSH
4284: LD_INT 117
4286: PUSH
4287: LD_INT 118
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
4306: GO 6709
4308: LD_INT 8
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4316
4314: GO 4456
4316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4317: LD_ADDR_VAR 0 1
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: LD_INT 5
4330: PUSH
4331: LD_INT 6
4333: PUSH
4334: LD_INT 7
4336: PUSH
4337: LD_INT 8
4339: PUSH
4340: LD_INT 11
4342: PUSH
4343: LD_INT 12
4345: PUSH
4346: LD_INT 15
4348: PUSH
4349: LD_INT 16
4351: PUSH
4352: LD_INT 20
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 22
4360: PUSH
4361: LD_INT 23
4363: PUSH
4364: LD_INT 25
4366: PUSH
4367: LD_INT 26
4369: PUSH
4370: LD_INT 30
4372: PUSH
4373: LD_INT 31
4375: PUSH
4376: LD_INT 32
4378: PUSH
4379: LD_INT 36
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: LD_INT 101
4406: PUSH
4407: LD_INT 102
4409: PUSH
4410: LD_INT 103
4412: PUSH
4413: LD_INT 105
4415: PUSH
4416: LD_INT 106
4418: PUSH
4419: LD_INT 108
4421: PUSH
4422: LD_INT 109
4424: PUSH
4425: LD_INT 112
4427: PUSH
4428: LD_INT 116
4430: PUSH
4431: LD_INT 117
4433: PUSH
4434: LD_INT 118
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: ST_TO_ADDR
4454: GO 6709
4456: LD_INT 9
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4612
4464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4465: LD_ADDR_VAR 0 1
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 4
4475: PUSH
4476: LD_INT 5
4478: PUSH
4479: LD_INT 6
4481: PUSH
4482: LD_INT 7
4484: PUSH
4485: LD_INT 8
4487: PUSH
4488: LD_INT 11
4490: PUSH
4491: LD_INT 12
4493: PUSH
4494: LD_INT 15
4496: PUSH
4497: LD_INT 16
4499: PUSH
4500: LD_INT 20
4502: PUSH
4503: LD_INT 21
4505: PUSH
4506: LD_INT 22
4508: PUSH
4509: LD_INT 23
4511: PUSH
4512: LD_INT 25
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 28
4520: PUSH
4521: LD_INT 30
4523: PUSH
4524: LD_INT 31
4526: PUSH
4527: LD_INT 32
4529: PUSH
4530: LD_INT 36
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 101
4558: PUSH
4559: LD_INT 102
4561: PUSH
4562: LD_INT 103
4564: PUSH
4565: LD_INT 105
4567: PUSH
4568: LD_INT 106
4570: PUSH
4571: LD_INT 108
4573: PUSH
4574: LD_INT 109
4576: PUSH
4577: LD_INT 112
4579: PUSH
4580: LD_INT 114
4582: PUSH
4583: LD_INT 116
4585: PUSH
4586: LD_INT 117
4588: PUSH
4589: LD_INT 118
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: ST_TO_ADDR
4610: GO 6709
4612: LD_INT 10
4614: DOUBLE
4615: EQUAL
4616: IFTRUE 4620
4618: GO 4816
4620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4621: LD_ADDR_VAR 0 1
4625: PUSH
4626: LD_INT 2
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 6
4637: PUSH
4638: LD_INT 7
4640: PUSH
4641: LD_INT 8
4643: PUSH
4644: LD_INT 9
4646: PUSH
4647: LD_INT 10
4649: PUSH
4650: LD_INT 11
4652: PUSH
4653: LD_INT 12
4655: PUSH
4656: LD_INT 13
4658: PUSH
4659: LD_INT 14
4661: PUSH
4662: LD_INT 15
4664: PUSH
4665: LD_INT 16
4667: PUSH
4668: LD_INT 17
4670: PUSH
4671: LD_INT 18
4673: PUSH
4674: LD_INT 19
4676: PUSH
4677: LD_INT 20
4679: PUSH
4680: LD_INT 21
4682: PUSH
4683: LD_INT 22
4685: PUSH
4686: LD_INT 23
4688: PUSH
4689: LD_INT 24
4691: PUSH
4692: LD_INT 25
4694: PUSH
4695: LD_INT 26
4697: PUSH
4698: LD_INT 28
4700: PUSH
4701: LD_INT 30
4703: PUSH
4704: LD_INT 31
4706: PUSH
4707: LD_INT 32
4709: PUSH
4710: LD_INT 36
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 101
4746: PUSH
4747: LD_INT 102
4749: PUSH
4750: LD_INT 103
4752: PUSH
4753: LD_INT 104
4755: PUSH
4756: LD_INT 105
4758: PUSH
4759: LD_INT 106
4761: PUSH
4762: LD_INT 107
4764: PUSH
4765: LD_INT 108
4767: PUSH
4768: LD_INT 109
4770: PUSH
4771: LD_INT 110
4773: PUSH
4774: LD_INT 111
4776: PUSH
4777: LD_INT 112
4779: PUSH
4780: LD_INT 114
4782: PUSH
4783: LD_INT 116
4785: PUSH
4786: LD_INT 117
4788: PUSH
4789: LD_INT 118
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: ST_TO_ADDR
4814: GO 6709
4816: LD_INT 11
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4824
4822: GO 5028
4824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4825: LD_ADDR_VAR 0 1
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 3
4835: PUSH
4836: LD_INT 4
4838: PUSH
4839: LD_INT 5
4841: PUSH
4842: LD_INT 6
4844: PUSH
4845: LD_INT 7
4847: PUSH
4848: LD_INT 8
4850: PUSH
4851: LD_INT 9
4853: PUSH
4854: LD_INT 10
4856: PUSH
4857: LD_INT 11
4859: PUSH
4860: LD_INT 12
4862: PUSH
4863: LD_INT 13
4865: PUSH
4866: LD_INT 14
4868: PUSH
4869: LD_INT 15
4871: PUSH
4872: LD_INT 16
4874: PUSH
4875: LD_INT 17
4877: PUSH
4878: LD_INT 18
4880: PUSH
4881: LD_INT 19
4883: PUSH
4884: LD_INT 20
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 22
4892: PUSH
4893: LD_INT 23
4895: PUSH
4896: LD_INT 24
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 26
4904: PUSH
4905: LD_INT 28
4907: PUSH
4908: LD_INT 30
4910: PUSH
4911: LD_INT 31
4913: PUSH
4914: LD_INT 32
4916: PUSH
4917: LD_INT 34
4919: PUSH
4920: LD_INT 36
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 101
4958: PUSH
4959: LD_INT 102
4961: PUSH
4962: LD_INT 103
4964: PUSH
4965: LD_INT 104
4967: PUSH
4968: LD_INT 105
4970: PUSH
4971: LD_INT 106
4973: PUSH
4974: LD_INT 107
4976: PUSH
4977: LD_INT 108
4979: PUSH
4980: LD_INT 109
4982: PUSH
4983: LD_INT 110
4985: PUSH
4986: LD_INT 111
4988: PUSH
4989: LD_INT 112
4991: PUSH
4992: LD_INT 114
4994: PUSH
4995: LD_INT 116
4997: PUSH
4998: LD_INT 117
5000: PUSH
5001: LD_INT 118
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: ST_TO_ADDR
5026: GO 6709
5028: LD_INT 12
5030: DOUBLE
5031: EQUAL
5032: IFTRUE 5036
5034: GO 5256
5036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5037: LD_ADDR_VAR 0 1
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: LD_INT 2
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 4
5053: PUSH
5054: LD_INT 5
5056: PUSH
5057: LD_INT 6
5059: PUSH
5060: LD_INT 7
5062: PUSH
5063: LD_INT 8
5065: PUSH
5066: LD_INT 9
5068: PUSH
5069: LD_INT 10
5071: PUSH
5072: LD_INT 11
5074: PUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 13
5080: PUSH
5081: LD_INT 14
5083: PUSH
5084: LD_INT 15
5086: PUSH
5087: LD_INT 16
5089: PUSH
5090: LD_INT 17
5092: PUSH
5093: LD_INT 18
5095: PUSH
5096: LD_INT 19
5098: PUSH
5099: LD_INT 20
5101: PUSH
5102: LD_INT 21
5104: PUSH
5105: LD_INT 22
5107: PUSH
5108: LD_INT 23
5110: PUSH
5111: LD_INT 24
5113: PUSH
5114: LD_INT 25
5116: PUSH
5117: LD_INT 26
5119: PUSH
5120: LD_INT 27
5122: PUSH
5123: LD_INT 28
5125: PUSH
5126: LD_INT 30
5128: PUSH
5129: LD_INT 31
5131: PUSH
5132: LD_INT 32
5134: PUSH
5135: LD_INT 33
5137: PUSH
5138: LD_INT 34
5140: PUSH
5141: LD_INT 36
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: PUSH
5180: LD_INT 101
5182: PUSH
5183: LD_INT 102
5185: PUSH
5186: LD_INT 103
5188: PUSH
5189: LD_INT 104
5191: PUSH
5192: LD_INT 105
5194: PUSH
5195: LD_INT 106
5197: PUSH
5198: LD_INT 107
5200: PUSH
5201: LD_INT 108
5203: PUSH
5204: LD_INT 109
5206: PUSH
5207: LD_INT 110
5209: PUSH
5210: LD_INT 111
5212: PUSH
5213: LD_INT 112
5215: PUSH
5216: LD_INT 113
5218: PUSH
5219: LD_INT 114
5221: PUSH
5222: LD_INT 116
5224: PUSH
5225: LD_INT 117
5227: PUSH
5228: LD_INT 118
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
5254: GO 6709
5256: LD_INT 13
5258: DOUBLE
5259: EQUAL
5260: IFTRUE 5264
5262: GO 5472
5264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5265: LD_ADDR_VAR 0 1
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: LD_INT 3
5278: PUSH
5279: LD_INT 4
5281: PUSH
5282: LD_INT 5
5284: PUSH
5285: LD_INT 8
5287: PUSH
5288: LD_INT 9
5290: PUSH
5291: LD_INT 10
5293: PUSH
5294: LD_INT 11
5296: PUSH
5297: LD_INT 12
5299: PUSH
5300: LD_INT 14
5302: PUSH
5303: LD_INT 15
5305: PUSH
5306: LD_INT 16
5308: PUSH
5309: LD_INT 17
5311: PUSH
5312: LD_INT 18
5314: PUSH
5315: LD_INT 19
5317: PUSH
5318: LD_INT 20
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 23
5329: PUSH
5330: LD_INT 24
5332: PUSH
5333: LD_INT 25
5335: PUSH
5336: LD_INT 26
5338: PUSH
5339: LD_INT 27
5341: PUSH
5342: LD_INT 28
5344: PUSH
5345: LD_INT 30
5347: PUSH
5348: LD_INT 31
5350: PUSH
5351: LD_INT 32
5353: PUSH
5354: LD_INT 33
5356: PUSH
5357: LD_INT 34
5359: PUSH
5360: LD_INT 36
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 101
5398: PUSH
5399: LD_INT 102
5401: PUSH
5402: LD_INT 103
5404: PUSH
5405: LD_INT 104
5407: PUSH
5408: LD_INT 105
5410: PUSH
5411: LD_INT 106
5413: PUSH
5414: LD_INT 107
5416: PUSH
5417: LD_INT 108
5419: PUSH
5420: LD_INT 109
5422: PUSH
5423: LD_INT 110
5425: PUSH
5426: LD_INT 111
5428: PUSH
5429: LD_INT 112
5431: PUSH
5432: LD_INT 113
5434: PUSH
5435: LD_INT 114
5437: PUSH
5438: LD_INT 116
5440: PUSH
5441: LD_INT 117
5443: PUSH
5444: LD_INT 118
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: ST_TO_ADDR
5470: GO 6709
5472: LD_INT 14
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5480
5478: GO 5704
5480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5481: LD_ADDR_VAR 0 1
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 3
5494: PUSH
5495: LD_INT 4
5497: PUSH
5498: LD_INT 5
5500: PUSH
5501: LD_INT 6
5503: PUSH
5504: LD_INT 7
5506: PUSH
5507: LD_INT 8
5509: PUSH
5510: LD_INT 9
5512: PUSH
5513: LD_INT 10
5515: PUSH
5516: LD_INT 11
5518: PUSH
5519: LD_INT 12
5521: PUSH
5522: LD_INT 13
5524: PUSH
5525: LD_INT 14
5527: PUSH
5528: LD_INT 15
5530: PUSH
5531: LD_INT 16
5533: PUSH
5534: LD_INT 17
5536: PUSH
5537: LD_INT 18
5539: PUSH
5540: LD_INT 19
5542: PUSH
5543: LD_INT 20
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_INT 23
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 25
5560: PUSH
5561: LD_INT 26
5563: PUSH
5564: LD_INT 27
5566: PUSH
5567: LD_INT 28
5569: PUSH
5570: LD_INT 29
5572: PUSH
5573: LD_INT 30
5575: PUSH
5576: LD_INT 31
5578: PUSH
5579: LD_INT 32
5581: PUSH
5582: LD_INT 33
5584: PUSH
5585: LD_INT 34
5587: PUSH
5588: LD_INT 36
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 101
5630: PUSH
5631: LD_INT 102
5633: PUSH
5634: LD_INT 103
5636: PUSH
5637: LD_INT 104
5639: PUSH
5640: LD_INT 105
5642: PUSH
5643: LD_INT 106
5645: PUSH
5646: LD_INT 107
5648: PUSH
5649: LD_INT 108
5651: PUSH
5652: LD_INT 109
5654: PUSH
5655: LD_INT 110
5657: PUSH
5658: LD_INT 111
5660: PUSH
5661: LD_INT 112
5663: PUSH
5664: LD_INT 113
5666: PUSH
5667: LD_INT 114
5669: PUSH
5670: LD_INT 116
5672: PUSH
5673: LD_INT 117
5675: PUSH
5676: LD_INT 118
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: ST_TO_ADDR
5702: GO 6709
5704: LD_INT 15
5706: DOUBLE
5707: EQUAL
5708: IFTRUE 5712
5710: GO 5936
5712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: LD_INT 1
5720: PUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: LD_INT 11
5750: PUSH
5751: LD_INT 12
5753: PUSH
5754: LD_INT 13
5756: PUSH
5757: LD_INT 14
5759: PUSH
5760: LD_INT 15
5762: PUSH
5763: LD_INT 16
5765: PUSH
5766: LD_INT 17
5768: PUSH
5769: LD_INT 18
5771: PUSH
5772: LD_INT 19
5774: PUSH
5775: LD_INT 20
5777: PUSH
5778: LD_INT 21
5780: PUSH
5781: LD_INT 22
5783: PUSH
5784: LD_INT 23
5786: PUSH
5787: LD_INT 24
5789: PUSH
5790: LD_INT 25
5792: PUSH
5793: LD_INT 26
5795: PUSH
5796: LD_INT 27
5798: PUSH
5799: LD_INT 28
5801: PUSH
5802: LD_INT 29
5804: PUSH
5805: LD_INT 30
5807: PUSH
5808: LD_INT 31
5810: PUSH
5811: LD_INT 32
5813: PUSH
5814: LD_INT 33
5816: PUSH
5817: LD_INT 34
5819: PUSH
5820: LD_INT 36
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 101
5862: PUSH
5863: LD_INT 102
5865: PUSH
5866: LD_INT 103
5868: PUSH
5869: LD_INT 104
5871: PUSH
5872: LD_INT 105
5874: PUSH
5875: LD_INT 106
5877: PUSH
5878: LD_INT 107
5880: PUSH
5881: LD_INT 108
5883: PUSH
5884: LD_INT 109
5886: PUSH
5887: LD_INT 110
5889: PUSH
5890: LD_INT 111
5892: PUSH
5893: LD_INT 112
5895: PUSH
5896: LD_INT 113
5898: PUSH
5899: LD_INT 114
5901: PUSH
5902: LD_INT 116
5904: PUSH
5905: LD_INT 117
5907: PUSH
5908: LD_INT 118
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: ST_TO_ADDR
5934: GO 6709
5936: LD_INT 16
5938: DOUBLE
5939: EQUAL
5940: IFTRUE 5944
5942: GO 6080
5944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5945: LD_ADDR_VAR 0 1
5949: PUSH
5950: LD_INT 2
5952: PUSH
5953: LD_INT 4
5955: PUSH
5956: LD_INT 5
5958: PUSH
5959: LD_INT 7
5961: PUSH
5962: LD_INT 11
5964: PUSH
5965: LD_INT 12
5967: PUSH
5968: LD_INT 15
5970: PUSH
5971: LD_INT 16
5973: PUSH
5974: LD_INT 20
5976: PUSH
5977: LD_INT 21
5979: PUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 23
5985: PUSH
5986: LD_INT 25
5988: PUSH
5989: LD_INT 26
5991: PUSH
5992: LD_INT 30
5994: PUSH
5995: LD_INT 31
5997: PUSH
5998: LD_INT 32
6000: PUSH
6001: LD_INT 33
6003: PUSH
6004: LD_INT 34
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 101
6030: PUSH
6031: LD_INT 102
6033: PUSH
6034: LD_INT 103
6036: PUSH
6037: LD_INT 106
6039: PUSH
6040: LD_INT 108
6042: PUSH
6043: LD_INT 112
6045: PUSH
6046: LD_INT 113
6048: PUSH
6049: LD_INT 114
6051: PUSH
6052: LD_INT 116
6054: PUSH
6055: LD_INT 117
6057: PUSH
6058: LD_INT 118
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: ST_TO_ADDR
6078: GO 6709
6080: LD_INT 17
6082: DOUBLE
6083: EQUAL
6084: IFTRUE 6088
6086: GO 6312
6088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: LD_INT 1
6096: PUSH
6097: LD_INT 2
6099: PUSH
6100: LD_INT 3
6102: PUSH
6103: LD_INT 4
6105: PUSH
6106: LD_INT 5
6108: PUSH
6109: LD_INT 6
6111: PUSH
6112: LD_INT 7
6114: PUSH
6115: LD_INT 8
6117: PUSH
6118: LD_INT 9
6120: PUSH
6121: LD_INT 10
6123: PUSH
6124: LD_INT 11
6126: PUSH
6127: LD_INT 12
6129: PUSH
6130: LD_INT 13
6132: PUSH
6133: LD_INT 14
6135: PUSH
6136: LD_INT 15
6138: PUSH
6139: LD_INT 16
6141: PUSH
6142: LD_INT 17
6144: PUSH
6145: LD_INT 18
6147: PUSH
6148: LD_INT 19
6150: PUSH
6151: LD_INT 20
6153: PUSH
6154: LD_INT 21
6156: PUSH
6157: LD_INT 22
6159: PUSH
6160: LD_INT 23
6162: PUSH
6163: LD_INT 24
6165: PUSH
6166: LD_INT 25
6168: PUSH
6169: LD_INT 26
6171: PUSH
6172: LD_INT 27
6174: PUSH
6175: LD_INT 28
6177: PUSH
6178: LD_INT 29
6180: PUSH
6181: LD_INT 30
6183: PUSH
6184: LD_INT 31
6186: PUSH
6187: LD_INT 32
6189: PUSH
6190: LD_INT 33
6192: PUSH
6193: LD_INT 34
6195: PUSH
6196: LD_INT 36
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 101
6238: PUSH
6239: LD_INT 102
6241: PUSH
6242: LD_INT 103
6244: PUSH
6245: LD_INT 104
6247: PUSH
6248: LD_INT 105
6250: PUSH
6251: LD_INT 106
6253: PUSH
6254: LD_INT 107
6256: PUSH
6257: LD_INT 108
6259: PUSH
6260: LD_INT 109
6262: PUSH
6263: LD_INT 110
6265: PUSH
6266: LD_INT 111
6268: PUSH
6269: LD_INT 112
6271: PUSH
6272: LD_INT 113
6274: PUSH
6275: LD_INT 114
6277: PUSH
6278: LD_INT 116
6280: PUSH
6281: LD_INT 117
6283: PUSH
6284: LD_INT 118
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: ST_TO_ADDR
6310: GO 6709
6312: LD_INT 18
6314: DOUBLE
6315: EQUAL
6316: IFTRUE 6320
6318: GO 6468
6320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6321: LD_ADDR_VAR 0 1
6325: PUSH
6326: LD_INT 2
6328: PUSH
6329: LD_INT 4
6331: PUSH
6332: LD_INT 5
6334: PUSH
6335: LD_INT 7
6337: PUSH
6338: LD_INT 11
6340: PUSH
6341: LD_INT 12
6343: PUSH
6344: LD_INT 15
6346: PUSH
6347: LD_INT 16
6349: PUSH
6350: LD_INT 20
6352: PUSH
6353: LD_INT 21
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_INT 23
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 26
6367: PUSH
6368: LD_INT 30
6370: PUSH
6371: LD_INT 31
6373: PUSH
6374: LD_INT 32
6376: PUSH
6377: LD_INT 33
6379: PUSH
6380: LD_INT 34
6382: PUSH
6383: LD_INT 35
6385: PUSH
6386: LD_INT 36
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 101
6414: PUSH
6415: LD_INT 102
6417: PUSH
6418: LD_INT 103
6420: PUSH
6421: LD_INT 106
6423: PUSH
6424: LD_INT 108
6426: PUSH
6427: LD_INT 112
6429: PUSH
6430: LD_INT 113
6432: PUSH
6433: LD_INT 114
6435: PUSH
6436: LD_INT 115
6438: PUSH
6439: LD_INT 116
6441: PUSH
6442: LD_INT 117
6444: PUSH
6445: LD_INT 118
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: ST_TO_ADDR
6466: GO 6709
6468: LD_INT 19
6470: DOUBLE
6471: EQUAL
6472: IFTRUE 6476
6474: GO 6708
6476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6477: LD_ADDR_VAR 0 1
6481: PUSH
6482: LD_INT 1
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: LD_INT 3
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: LD_INT 6
6499: PUSH
6500: LD_INT 7
6502: PUSH
6503: LD_INT 8
6505: PUSH
6506: LD_INT 9
6508: PUSH
6509: LD_INT 10
6511: PUSH
6512: LD_INT 11
6514: PUSH
6515: LD_INT 12
6517: PUSH
6518: LD_INT 13
6520: PUSH
6521: LD_INT 14
6523: PUSH
6524: LD_INT 15
6526: PUSH
6527: LD_INT 16
6529: PUSH
6530: LD_INT 17
6532: PUSH
6533: LD_INT 18
6535: PUSH
6536: LD_INT 19
6538: PUSH
6539: LD_INT 20
6541: PUSH
6542: LD_INT 21
6544: PUSH
6545: LD_INT 22
6547: PUSH
6548: LD_INT 23
6550: PUSH
6551: LD_INT 24
6553: PUSH
6554: LD_INT 25
6556: PUSH
6557: LD_INT 26
6559: PUSH
6560: LD_INT 27
6562: PUSH
6563: LD_INT 28
6565: PUSH
6566: LD_INT 29
6568: PUSH
6569: LD_INT 30
6571: PUSH
6572: LD_INT 31
6574: PUSH
6575: LD_INT 32
6577: PUSH
6578: LD_INT 33
6580: PUSH
6581: LD_INT 34
6583: PUSH
6584: LD_INT 35
6586: PUSH
6587: LD_INT 36
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 101
6630: PUSH
6631: LD_INT 102
6633: PUSH
6634: LD_INT 103
6636: PUSH
6637: LD_INT 104
6639: PUSH
6640: LD_INT 105
6642: PUSH
6643: LD_INT 106
6645: PUSH
6646: LD_INT 107
6648: PUSH
6649: LD_INT 108
6651: PUSH
6652: LD_INT 109
6654: PUSH
6655: LD_INT 110
6657: PUSH
6658: LD_INT 111
6660: PUSH
6661: LD_INT 112
6663: PUSH
6664: LD_INT 113
6666: PUSH
6667: LD_INT 114
6669: PUSH
6670: LD_INT 115
6672: PUSH
6673: LD_INT 116
6675: PUSH
6676: LD_INT 117
6678: PUSH
6679: LD_INT 118
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: ST_TO_ADDR
6706: GO 6709
6708: POP
// end else
6709: GO 6940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6711: LD_ADDR_VAR 0 1
6715: PUSH
6716: LD_INT 1
6718: PUSH
6719: LD_INT 2
6721: PUSH
6722: LD_INT 3
6724: PUSH
6725: LD_INT 4
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: LD_INT 6
6733: PUSH
6734: LD_INT 7
6736: PUSH
6737: LD_INT 8
6739: PUSH
6740: LD_INT 9
6742: PUSH
6743: LD_INT 10
6745: PUSH
6746: LD_INT 11
6748: PUSH
6749: LD_INT 12
6751: PUSH
6752: LD_INT 13
6754: PUSH
6755: LD_INT 14
6757: PUSH
6758: LD_INT 15
6760: PUSH
6761: LD_INT 16
6763: PUSH
6764: LD_INT 17
6766: PUSH
6767: LD_INT 18
6769: PUSH
6770: LD_INT 19
6772: PUSH
6773: LD_INT 20
6775: PUSH
6776: LD_INT 21
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 24
6787: PUSH
6788: LD_INT 25
6790: PUSH
6791: LD_INT 26
6793: PUSH
6794: LD_INT 27
6796: PUSH
6797: LD_INT 28
6799: PUSH
6800: LD_INT 29
6802: PUSH
6803: LD_INT 30
6805: PUSH
6806: LD_INT 31
6808: PUSH
6809: LD_INT 32
6811: PUSH
6812: LD_INT 33
6814: PUSH
6815: LD_INT 34
6817: PUSH
6818: LD_INT 35
6820: PUSH
6821: LD_INT 36
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 101
6864: PUSH
6865: LD_INT 102
6867: PUSH
6868: LD_INT 103
6870: PUSH
6871: LD_INT 104
6873: PUSH
6874: LD_INT 105
6876: PUSH
6877: LD_INT 106
6879: PUSH
6880: LD_INT 107
6882: PUSH
6883: LD_INT 108
6885: PUSH
6886: LD_INT 109
6888: PUSH
6889: LD_INT 110
6891: PUSH
6892: LD_INT 111
6894: PUSH
6895: LD_INT 112
6897: PUSH
6898: LD_INT 113
6900: PUSH
6901: LD_INT 114
6903: PUSH
6904: LD_INT 115
6906: PUSH
6907: LD_INT 116
6909: PUSH
6910: LD_INT 117
6912: PUSH
6913: LD_INT 118
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: ST_TO_ADDR
// if result then
6940: LD_VAR 0 1
6944: IFFALSE 7233
// begin normal :=  ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: LD_STRING 
6953: ST_TO_ADDR
// hardcore :=  ;
6954: LD_ADDR_VAR 0 4
6958: PUSH
6959: LD_STRING 
6961: ST_TO_ADDR
// for i = 1 to normalCounter do
6962: LD_ADDR_VAR 0 5
6966: PUSH
6967: DOUBLE
6968: LD_INT 1
6970: DEC
6971: ST_TO_ADDR
6972: LD_EXP 8
6976: PUSH
6977: FOR_TO
6978: IFFALSE 7079
// begin tmp := 0 ;
6980: LD_ADDR_VAR 0 2
6984: PUSH
6985: LD_STRING 0
6987: ST_TO_ADDR
// if result [ 1 ] then
6988: LD_VAR 0 1
6992: PUSH
6993: LD_INT 1
6995: ARRAY
6996: IFFALSE 7061
// if result [ 1 ] [ 1 ] = i then
6998: LD_VAR 0 1
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PUSH
7007: LD_INT 1
7009: ARRAY
7010: PUSH
7011: LD_VAR 0 5
7015: EQUAL
7016: IFFALSE 7061
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: LD_VAR 0 1
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PPUSH
7040: LD_INT 1
7042: PPUSH
7043: CALL_OW 3
7047: PPUSH
7048: CALL_OW 1
7052: ST_TO_ADDR
// tmp := 1 ;
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_STRING 1
7060: ST_TO_ADDR
// end ; normal := normal & tmp ;
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_VAR 0 3
7070: PUSH
7071: LD_VAR 0 2
7075: STR
7076: ST_TO_ADDR
// end ;
7077: GO 6977
7079: POP
7080: POP
// for i = 1 to hardcoreCounter do
7081: LD_ADDR_VAR 0 5
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_EXP 9
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7202
// begin tmp := 0 ;
7099: LD_ADDR_VAR 0 2
7103: PUSH
7104: LD_STRING 0
7106: ST_TO_ADDR
// if result [ 2 ] then
7107: LD_VAR 0 1
7111: PUSH
7112: LD_INT 2
7114: ARRAY
7115: IFFALSE 7184
// if result [ 2 ] [ 1 ] = 100 + i then
7117: LD_VAR 0 1
7121: PUSH
7122: LD_INT 2
7124: ARRAY
7125: PUSH
7126: LD_INT 1
7128: ARRAY
7129: PUSH
7130: LD_INT 100
7132: PUSH
7133: LD_VAR 0 5
7137: PLUS
7138: EQUAL
7139: IFFALSE 7184
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7141: LD_ADDR_VAR 0 1
7145: PUSH
7146: LD_VAR 0 1
7150: PPUSH
7151: LD_INT 2
7153: PPUSH
7154: LD_VAR 0 1
7158: PUSH
7159: LD_INT 2
7161: ARRAY
7162: PPUSH
7163: LD_INT 1
7165: PPUSH
7166: CALL_OW 3
7170: PPUSH
7171: CALL_OW 1
7175: ST_TO_ADDR
// tmp := 1 ;
7176: LD_ADDR_VAR 0 2
7180: PUSH
7181: LD_STRING 1
7183: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7184: LD_ADDR_VAR 0 4
7188: PUSH
7189: LD_VAR 0 4
7193: PUSH
7194: LD_VAR 0 2
7198: STR
7199: ST_TO_ADDR
// end ;
7200: GO 7096
7202: POP
7203: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7204: LD_STRING getStreamItemsFromMission("
7206: PUSH
7207: LD_VAR 0 3
7211: STR
7212: PUSH
7213: LD_STRING ","
7215: STR
7216: PUSH
7217: LD_VAR 0 4
7221: STR
7222: PUSH
7223: LD_STRING ")
7225: STR
7226: PPUSH
7227: CALL_OW 559
// end else
7231: GO 7240
// ToLua ( getStreamItemsFromMission("","") ) ;
7233: LD_STRING getStreamItemsFromMission("","")
7235: PPUSH
7236: CALL_OW 559
// end ;
7240: LD_VAR 0 1
7244: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7245: LD_EXP 7
7249: PUSH
7250: LD_EXP 12
7254: AND
7255: IFFALSE 7379
7257: GO 7259
7259: DISABLE
7260: LD_INT 0
7262: PPUSH
7263: PPUSH
// begin enable ;
7264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7265: LD_ADDR_VAR 0 2
7269: PUSH
7270: LD_INT 22
7272: PUSH
7273: LD_OWVAR 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 7
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 34
7297: PUSH
7298: LD_INT 45
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 34
7307: PUSH
7308: LD_INT 28
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 34
7317: PUSH
7318: LD_INT 47
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PPUSH
7336: CALL_OW 69
7340: ST_TO_ADDR
// if not tmp then
7341: LD_VAR 0 2
7345: NOT
7346: IFFALSE 7350
// exit ;
7348: GO 7379
// for i in tmp do
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_VAR 0 2
7359: PUSH
7360: FOR_IN
7361: IFFALSE 7377
// begin SetLives ( i , 0 ) ;
7363: LD_VAR 0 1
7367: PPUSH
7368: LD_INT 0
7370: PPUSH
7371: CALL_OW 234
// end ;
7375: GO 7360
7377: POP
7378: POP
// end ;
7379: PPOPN 2
7381: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7382: LD_EXP 7
7386: PUSH
7387: LD_EXP 13
7391: AND
7392: IFFALSE 7476
7394: GO 7396
7396: DISABLE
7397: LD_INT 0
7399: PPUSH
7400: PPUSH
// begin enable ;
7401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7402: LD_ADDR_VAR 0 2
7406: PUSH
7407: LD_INT 22
7409: PUSH
7410: LD_OWVAR 2
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 32
7421: PUSH
7422: LD_INT 3
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PPUSH
7433: CALL_OW 69
7437: ST_TO_ADDR
// if not tmp then
7438: LD_VAR 0 2
7442: NOT
7443: IFFALSE 7447
// exit ;
7445: GO 7476
// for i in tmp do
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_VAR 0 2
7456: PUSH
7457: FOR_IN
7458: IFFALSE 7474
// begin SetLives ( i , 0 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_INT 0
7467: PPUSH
7468: CALL_OW 234
// end ;
7472: GO 7457
7474: POP
7475: POP
// end ;
7476: PPOPN 2
7478: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7479: LD_EXP 7
7483: PUSH
7484: LD_EXP 10
7488: AND
7489: IFFALSE 7582
7491: GO 7493
7493: DISABLE
7494: LD_INT 0
7496: PPUSH
// begin enable ;
7497: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7498: LD_ADDR_VAR 0 1
7502: PUSH
7503: LD_INT 22
7505: PUSH
7506: LD_OWVAR 2
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 2
7517: PUSH
7518: LD_INT 25
7520: PUSH
7521: LD_INT 5
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 25
7530: PUSH
7531: LD_INT 9
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 25
7540: PUSH
7541: LD_INT 8
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PUSH
7563: FOR_IN
7564: IFFALSE 7580
// begin SetClass ( i , 1 ) ;
7566: LD_VAR 0 1
7570: PPUSH
7571: LD_INT 1
7573: PPUSH
7574: CALL_OW 336
// end ;
7578: GO 7563
7580: POP
7581: POP
// end ;
7582: PPOPN 1
7584: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7585: LD_EXP 7
7589: PUSH
7590: LD_EXP 11
7594: AND
7595: PUSH
7596: LD_OWVAR 65
7600: PUSH
7601: LD_INT 7
7603: LESS
7604: AND
7605: IFFALSE 7619
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// game_speed := 7 ;
7611: LD_ADDR_OWVAR 65
7615: PUSH
7616: LD_INT 7
7618: ST_TO_ADDR
// end ;
7619: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7620: LD_EXP 7
7624: PUSH
7625: LD_EXP 14
7629: AND
7630: IFFALSE 7832
7632: GO 7634
7634: DISABLE
7635: LD_INT 0
7637: PPUSH
7638: PPUSH
7639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7640: LD_ADDR_VAR 0 3
7644: PUSH
7645: LD_INT 81
7647: PUSH
7648: LD_OWVAR 2
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 21
7659: PUSH
7660: LD_INT 1
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: ST_TO_ADDR
// if not tmp then
7676: LD_VAR 0 3
7680: NOT
7681: IFFALSE 7685
// exit ;
7683: GO 7832
// if tmp > 5 then
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 5
7692: GREATER
7693: IFFALSE 7705
// k := 5 else
7695: LD_ADDR_VAR 0 2
7699: PUSH
7700: LD_INT 5
7702: ST_TO_ADDR
7703: GO 7715
// k := tmp ;
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_VAR 0 3
7714: ST_TO_ADDR
// for i := 1 to k do
7715: LD_ADDR_VAR 0 1
7719: PUSH
7720: DOUBLE
7721: LD_INT 1
7723: DEC
7724: ST_TO_ADDR
7725: LD_VAR 0 2
7729: PUSH
7730: FOR_TO
7731: IFFALSE 7830
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7733: LD_VAR 0 3
7737: PUSH
7738: LD_VAR 0 1
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 1
7748: PUSH
7749: LD_INT 4
7751: MOD
7752: PUSH
7753: LD_INT 1
7755: PLUS
7756: PPUSH
7757: CALL_OW 259
7761: PUSH
7762: LD_INT 10
7764: LESS
7765: IFFALSE 7828
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7767: LD_VAR 0 3
7771: PUSH
7772: LD_VAR 0 1
7776: ARRAY
7777: PPUSH
7778: LD_VAR 0 1
7782: PUSH
7783: LD_INT 4
7785: MOD
7786: PUSH
7787: LD_INT 1
7789: PLUS
7790: PPUSH
7791: LD_VAR 0 3
7795: PUSH
7796: LD_VAR 0 1
7800: ARRAY
7801: PPUSH
7802: LD_VAR 0 1
7806: PUSH
7807: LD_INT 4
7809: MOD
7810: PUSH
7811: LD_INT 1
7813: PLUS
7814: PPUSH
7815: CALL_OW 259
7819: PUSH
7820: LD_INT 1
7822: PLUS
7823: PPUSH
7824: CALL_OW 237
7828: GO 7730
7830: POP
7831: POP
// end ;
7832: PPOPN 3
7834: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7835: LD_EXP 7
7839: PUSH
7840: LD_EXP 15
7844: AND
7845: IFFALSE 7865
7847: GO 7849
7849: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7850: LD_INT 4
7852: PPUSH
7853: LD_OWVAR 2
7857: PPUSH
7858: LD_INT 0
7860: PPUSH
7861: CALL_OW 324
7865: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7866: LD_EXP 7
7870: PUSH
7871: LD_EXP 44
7875: AND
7876: IFFALSE 7896
7878: GO 7880
7880: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7881: LD_INT 19
7883: PPUSH
7884: LD_OWVAR 2
7888: PPUSH
7889: LD_INT 0
7891: PPUSH
7892: CALL_OW 324
7896: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7897: LD_EXP 7
7901: PUSH
7902: LD_EXP 16
7906: AND
7907: IFFALSE 8009
7909: GO 7911
7911: DISABLE
7912: LD_INT 0
7914: PPUSH
7915: PPUSH
// begin enable ;
7916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7917: LD_ADDR_VAR 0 2
7921: PUSH
7922: LD_INT 22
7924: PUSH
7925: LD_OWVAR 2
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: LD_INT 2
7936: PUSH
7937: LD_INT 34
7939: PUSH
7940: LD_INT 11
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 34
7949: PUSH
7950: LD_INT 30
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PPUSH
7966: CALL_OW 69
7970: ST_TO_ADDR
// if not tmp then
7971: LD_VAR 0 2
7975: NOT
7976: IFFALSE 7980
// exit ;
7978: GO 8009
// for i in tmp do
7980: LD_ADDR_VAR 0 1
7984: PUSH
7985: LD_VAR 0 2
7989: PUSH
7990: FOR_IN
7991: IFFALSE 8007
// begin SetLives ( i , 0 ) ;
7993: LD_VAR 0 1
7997: PPUSH
7998: LD_INT 0
8000: PPUSH
8001: CALL_OW 234
// end ;
8005: GO 7990
8007: POP
8008: POP
// end ;
8009: PPOPN 2
8011: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8012: LD_EXP 7
8016: PUSH
8017: LD_EXP 17
8021: AND
8022: IFFALSE 8042
8024: GO 8026
8026: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8027: LD_INT 32
8029: PPUSH
8030: LD_OWVAR 2
8034: PPUSH
8035: LD_INT 0
8037: PPUSH
8038: CALL_OW 324
8042: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8043: LD_EXP 7
8047: PUSH
8048: LD_EXP 18
8052: AND
8053: IFFALSE 8234
8055: GO 8057
8057: DISABLE
8058: LD_INT 0
8060: PPUSH
8061: PPUSH
8062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_OWVAR 2
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 33
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PPUSH
8094: CALL_OW 69
8098: ST_TO_ADDR
// if not tmp then
8099: LD_VAR 0 2
8103: NOT
8104: IFFALSE 8108
// exit ;
8106: GO 8234
// side := 0 ;
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_INT 0
8115: ST_TO_ADDR
// for i := 1 to 8 do
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: DOUBLE
8122: LD_INT 1
8124: DEC
8125: ST_TO_ADDR
8126: LD_INT 8
8128: PUSH
8129: FOR_TO
8130: IFFALSE 8178
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8132: LD_OWVAR 2
8136: PUSH
8137: LD_VAR 0 1
8141: NONEQUAL
8142: PUSH
8143: LD_OWVAR 2
8147: PPUSH
8148: LD_VAR 0 1
8152: PPUSH
8153: CALL_OW 81
8157: PUSH
8158: LD_INT 2
8160: EQUAL
8161: AND
8162: IFFALSE 8176
// begin side := i ;
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_VAR 0 1
8173: ST_TO_ADDR
// break ;
8174: GO 8178
// end ;
8176: GO 8129
8178: POP
8179: POP
// if not side then
8180: LD_VAR 0 3
8184: NOT
8185: IFFALSE 8189
// exit ;
8187: GO 8234
// for i := 1 to tmp do
8189: LD_ADDR_VAR 0 1
8193: PUSH
8194: DOUBLE
8195: LD_INT 1
8197: DEC
8198: ST_TO_ADDR
8199: LD_VAR 0 2
8203: PUSH
8204: FOR_TO
8205: IFFALSE 8232
// if Prob ( 60 ) then
8207: LD_INT 60
8209: PPUSH
8210: CALL_OW 13
8214: IFFALSE 8230
// SetSide ( i , side ) ;
8216: LD_VAR 0 1
8220: PPUSH
8221: LD_VAR 0 3
8225: PPUSH
8226: CALL_OW 235
8230: GO 8204
8232: POP
8233: POP
// end ;
8234: PPOPN 3
8236: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8237: LD_EXP 7
8241: PUSH
8242: LD_EXP 20
8246: AND
8247: IFFALSE 8366
8249: GO 8251
8251: DISABLE
8252: LD_INT 0
8254: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8255: LD_ADDR_VAR 0 1
8259: PUSH
8260: LD_INT 22
8262: PUSH
8263: LD_OWVAR 2
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 3
8284: PUSH
8285: LD_INT 23
8287: PUSH
8288: LD_INT 0
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: PPUSH
8304: CALL_OW 69
8308: PUSH
8309: FOR_IN
8310: IFFALSE 8364
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 257
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: LD_INT 2
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: LD_INT 4
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: IN
8340: IFFALSE 8362
// SetClass ( un , rand ( 1 , 4 ) ) ;
8342: LD_VAR 0 1
8346: PPUSH
8347: LD_INT 1
8349: PPUSH
8350: LD_INT 4
8352: PPUSH
8353: CALL_OW 12
8357: PPUSH
8358: CALL_OW 336
8362: GO 8309
8364: POP
8365: POP
// end ;
8366: PPOPN 1
8368: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8369: LD_EXP 7
8373: PUSH
8374: LD_EXP 19
8378: AND
8379: IFFALSE 8458
8381: GO 8383
8383: DISABLE
8384: LD_INT 0
8386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: LD_INT 22
8394: PUSH
8395: LD_OWVAR 2
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: LD_INT 21
8406: PUSH
8407: LD_INT 3
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PPUSH
8418: CALL_OW 69
8422: ST_TO_ADDR
// if not tmp then
8423: LD_VAR 0 1
8427: NOT
8428: IFFALSE 8432
// exit ;
8430: GO 8458
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8432: LD_VAR 0 1
8436: PUSH
8437: LD_INT 1
8439: PPUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: CALL_OW 12
8449: ARRAY
8450: PPUSH
8451: LD_INT 100
8453: PPUSH
8454: CALL_OW 234
// end ;
8458: PPOPN 1
8460: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8461: LD_EXP 7
8465: PUSH
8466: LD_EXP 21
8470: AND
8471: IFFALSE 8569
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8479: LD_ADDR_VAR 0 1
8483: PUSH
8484: LD_INT 22
8486: PUSH
8487: LD_OWVAR 2
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 21
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 69
8514: ST_TO_ADDR
// if not tmp then
8515: LD_VAR 0 1
8519: NOT
8520: IFFALSE 8524
// exit ;
8522: GO 8569
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8524: LD_VAR 0 1
8528: PUSH
8529: LD_INT 1
8531: PPUSH
8532: LD_VAR 0 1
8536: PPUSH
8537: CALL_OW 12
8541: ARRAY
8542: PPUSH
8543: LD_INT 1
8545: PPUSH
8546: LD_INT 4
8548: PPUSH
8549: CALL_OW 12
8553: PPUSH
8554: LD_INT 3000
8556: PPUSH
8557: LD_INT 9000
8559: PPUSH
8560: CALL_OW 12
8564: PPUSH
8565: CALL_OW 492
// end ;
8569: PPOPN 1
8571: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8572: LD_EXP 7
8576: PUSH
8577: LD_EXP 22
8581: AND
8582: IFFALSE 8602
8584: GO 8586
8586: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8587: LD_INT 1
8589: PPUSH
8590: LD_OWVAR 2
8594: PPUSH
8595: LD_INT 0
8597: PPUSH
8598: CALL_OW 324
8602: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8603: LD_EXP 7
8607: PUSH
8608: LD_EXP 23
8612: AND
8613: IFFALSE 8696
8615: GO 8617
8617: DISABLE
8618: LD_INT 0
8620: PPUSH
8621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_OWVAR 2
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 21
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PPUSH
8653: CALL_OW 69
8657: ST_TO_ADDR
// if not tmp then
8658: LD_VAR 0 2
8662: NOT
8663: IFFALSE 8667
// exit ;
8665: GO 8696
// for i in tmp do
8667: LD_ADDR_VAR 0 1
8671: PUSH
8672: LD_VAR 0 2
8676: PUSH
8677: FOR_IN
8678: IFFALSE 8694
// SetBLevel ( i , 10 ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 10
8687: PPUSH
8688: CALL_OW 241
8692: GO 8677
8694: POP
8695: POP
// end ;
8696: PPOPN 2
8698: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8699: LD_EXP 7
8703: PUSH
8704: LD_EXP 24
8708: AND
8709: IFFALSE 8820
8711: GO 8713
8713: DISABLE
8714: LD_INT 0
8716: PPUSH
8717: PPUSH
8718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8719: LD_ADDR_VAR 0 3
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_OWVAR 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 1
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: ST_TO_ADDR
// if not tmp then
8755: LD_VAR 0 3
8759: NOT
8760: IFFALSE 8764
// exit ;
8762: GO 8820
// un := tmp [ rand ( 1 , tmp ) ] ;
8764: LD_ADDR_VAR 0 2
8768: PUSH
8769: LD_VAR 0 3
8773: PUSH
8774: LD_INT 1
8776: PPUSH
8777: LD_VAR 0 3
8781: PPUSH
8782: CALL_OW 12
8786: ARRAY
8787: ST_TO_ADDR
// if Crawls ( un ) then
8788: LD_VAR 0 2
8792: PPUSH
8793: CALL_OW 318
8797: IFFALSE 8808
// ComWalk ( un ) ;
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8808: LD_VAR 0 2
8812: PPUSH
8813: LD_INT 5
8815: PPUSH
8816: CALL_OW 336
// end ;
8820: PPOPN 3
8822: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8823: LD_EXP 7
8827: PUSH
8828: LD_EXP 25
8832: AND
8833: PUSH
8834: LD_OWVAR 67
8838: PUSH
8839: LD_INT 4
8841: LESS
8842: AND
8843: IFFALSE 8862
8845: GO 8847
8847: DISABLE
// begin Difficulty := Difficulty + 1 ;
8848: LD_ADDR_OWVAR 67
8852: PUSH
8853: LD_OWVAR 67
8857: PUSH
8858: LD_INT 1
8860: PLUS
8861: ST_TO_ADDR
// end ;
8862: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8863: LD_EXP 7
8867: PUSH
8868: LD_EXP 26
8872: AND
8873: IFFALSE 8976
8875: GO 8877
8877: DISABLE
8878: LD_INT 0
8880: PPUSH
// begin for i := 1 to 5 do
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_INT 5
8893: PUSH
8894: FOR_TO
8895: IFFALSE 8974
// begin uc_nation := nation_nature ;
8897: LD_ADDR_OWVAR 21
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// uc_side := 0 ;
8905: LD_ADDR_OWVAR 20
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8913: LD_ADDR_OWVAR 29
8917: PUSH
8918: LD_INT 12
8920: PUSH
8921: LD_INT 12
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: ST_TO_ADDR
// hc_agressivity := 20 ;
8928: LD_ADDR_OWVAR 35
8932: PUSH
8933: LD_INT 20
8935: ST_TO_ADDR
// hc_class := class_tiger ;
8936: LD_ADDR_OWVAR 28
8940: PUSH
8941: LD_INT 14
8943: ST_TO_ADDR
// hc_gallery :=  ;
8944: LD_ADDR_OWVAR 33
8948: PUSH
8949: LD_STRING 
8951: ST_TO_ADDR
// hc_name :=  ;
8952: LD_ADDR_OWVAR 26
8956: PUSH
8957: LD_STRING 
8959: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8960: CALL_OW 44
8964: PPUSH
8965: LD_INT 0
8967: PPUSH
8968: CALL_OW 51
// end ;
8972: GO 8894
8974: POP
8975: POP
// end ;
8976: PPOPN 1
8978: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8979: LD_EXP 7
8983: PUSH
8984: LD_EXP 27
8988: AND
8989: IFFALSE 8998
8991: GO 8993
8993: DISABLE
// StreamSibBomb ;
8994: CALL 8999 0 0
8998: END
// export function StreamSibBomb ; var i , x , y ; begin
8999: LD_INT 0
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
// result := false ;
9005: LD_ADDR_VAR 0 1
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// for i := 1 to 16 do
9013: LD_ADDR_VAR 0 2
9017: PUSH
9018: DOUBLE
9019: LD_INT 1
9021: DEC
9022: ST_TO_ADDR
9023: LD_INT 16
9025: PUSH
9026: FOR_TO
9027: IFFALSE 9226
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9029: LD_ADDR_VAR 0 3
9033: PUSH
9034: LD_INT 10
9036: PUSH
9037: LD_INT 20
9039: PUSH
9040: LD_INT 30
9042: PUSH
9043: LD_INT 40
9045: PUSH
9046: LD_INT 50
9048: PUSH
9049: LD_INT 60
9051: PUSH
9052: LD_INT 70
9054: PUSH
9055: LD_INT 80
9057: PUSH
9058: LD_INT 90
9060: PUSH
9061: LD_INT 100
9063: PUSH
9064: LD_INT 110
9066: PUSH
9067: LD_INT 120
9069: PUSH
9070: LD_INT 130
9072: PUSH
9073: LD_INT 140
9075: PUSH
9076: LD_INT 150
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 1
9098: PPUSH
9099: LD_INT 15
9101: PPUSH
9102: CALL_OW 12
9106: ARRAY
9107: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9108: LD_ADDR_VAR 0 4
9112: PUSH
9113: LD_INT 10
9115: PUSH
9116: LD_INT 20
9118: PUSH
9119: LD_INT 30
9121: PUSH
9122: LD_INT 40
9124: PUSH
9125: LD_INT 50
9127: PUSH
9128: LD_INT 60
9130: PUSH
9131: LD_INT 70
9133: PUSH
9134: LD_INT 80
9136: PUSH
9137: LD_INT 90
9139: PUSH
9140: LD_INT 100
9142: PUSH
9143: LD_INT 110
9145: PUSH
9146: LD_INT 120
9148: PUSH
9149: LD_INT 130
9151: PUSH
9152: LD_INT 140
9154: PUSH
9155: LD_INT 150
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 1
9177: PPUSH
9178: LD_INT 15
9180: PPUSH
9181: CALL_OW 12
9185: ARRAY
9186: ST_TO_ADDR
// if ValidHex ( x , y ) then
9187: LD_VAR 0 3
9191: PPUSH
9192: LD_VAR 0 4
9196: PPUSH
9197: CALL_OW 488
9201: IFFALSE 9224
// begin result := [ x , y ] ;
9203: LD_ADDR_VAR 0 1
9207: PUSH
9208: LD_VAR 0 3
9212: PUSH
9213: LD_VAR 0 4
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// break ;
9222: GO 9226
// end ; end ;
9224: GO 9026
9226: POP
9227: POP
// if result then
9228: LD_VAR 0 1
9232: IFFALSE 9292
// begin ToLua ( playSibBomb() ) ;
9234: LD_STRING playSibBomb()
9236: PPUSH
9237: CALL_OW 559
// wait ( 0 0$14 ) ;
9241: LD_INT 490
9243: PPUSH
9244: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9248: LD_VAR 0 1
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: LD_VAR 0 1
9261: PUSH
9262: LD_INT 2
9264: ARRAY
9265: PPUSH
9266: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9270: LD_VAR 0 1
9274: PUSH
9275: LD_INT 1
9277: ARRAY
9278: PPUSH
9279: LD_VAR 0 1
9283: PUSH
9284: LD_INT 2
9286: ARRAY
9287: PPUSH
9288: CALL_OW 429
// end ; end ;
9292: LD_VAR 0 1
9296: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9297: LD_EXP 7
9301: PUSH
9302: LD_EXP 29
9306: AND
9307: IFFALSE 9319
9309: GO 9311
9311: DISABLE
// YouLost (  ) ;
9312: LD_STRING 
9314: PPUSH
9315: CALL_OW 104
9319: END
// every 0 0$1 trigger StreamModeActive and sFog do
9320: LD_EXP 7
9324: PUSH
9325: LD_EXP 28
9329: AND
9330: IFFALSE 9344
9332: GO 9334
9334: DISABLE
// FogOff ( your_side ) ;
9335: LD_OWVAR 2
9339: PPUSH
9340: CALL_OW 344
9344: END
// every 0 0$1 trigger StreamModeActive and sSun do
9345: LD_EXP 7
9349: PUSH
9350: LD_EXP 30
9354: AND
9355: IFFALSE 9383
9357: GO 9359
9359: DISABLE
// begin solar_recharge_percent := 0 ;
9360: LD_ADDR_OWVAR 79
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9368: LD_INT 10500
9370: PPUSH
9371: CALL_OW 67
// solar_recharge_percent := 100 ;
9375: LD_ADDR_OWVAR 79
9379: PUSH
9380: LD_INT 100
9382: ST_TO_ADDR
// end ;
9383: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9384: LD_EXP 7
9388: PUSH
9389: LD_EXP 31
9393: AND
9394: IFFALSE 9633
9396: GO 9398
9398: DISABLE
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
// begin tmp := [ ] ;
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: EMPTY
9410: ST_TO_ADDR
// for i := 1 to 6 do
9411: LD_ADDR_VAR 0 1
9415: PUSH
9416: DOUBLE
9417: LD_INT 1
9419: DEC
9420: ST_TO_ADDR
9421: LD_INT 6
9423: PUSH
9424: FOR_TO
9425: IFFALSE 9530
// begin uc_nation := nation_nature ;
9427: LD_ADDR_OWVAR 21
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// uc_side := 0 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9443: LD_ADDR_OWVAR 29
9447: PUSH
9448: LD_INT 12
9450: PUSH
9451: LD_INT 12
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: ST_TO_ADDR
// hc_agressivity := 20 ;
9458: LD_ADDR_OWVAR 35
9462: PUSH
9463: LD_INT 20
9465: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9466: LD_ADDR_OWVAR 28
9470: PUSH
9471: LD_INT 17
9473: ST_TO_ADDR
// hc_gallery :=  ;
9474: LD_ADDR_OWVAR 33
9478: PUSH
9479: LD_STRING 
9481: ST_TO_ADDR
// hc_name :=  ;
9482: LD_ADDR_OWVAR 26
9486: PUSH
9487: LD_STRING 
9489: ST_TO_ADDR
// un := CreateHuman ;
9490: LD_ADDR_VAR 0 2
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9500: LD_VAR 0 2
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 51
// tmp := tmp ^ un ;
9512: LD_ADDR_VAR 0 3
9516: PUSH
9517: LD_VAR 0 3
9521: PUSH
9522: LD_VAR 0 2
9526: ADD
9527: ST_TO_ADDR
// end ;
9528: GO 9424
9530: POP
9531: POP
// repeat wait ( 0 0$1 ) ;
9532: LD_INT 35
9534: PPUSH
9535: CALL_OW 67
// for un in tmp do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: LD_VAR 0 3
9548: PUSH
9549: FOR_IN
9550: IFFALSE 9624
// begin if IsDead ( un ) then
9552: LD_VAR 0 2
9556: PPUSH
9557: CALL_OW 301
9561: IFFALSE 9581
// begin tmp := tmp diff un ;
9563: LD_ADDR_VAR 0 3
9567: PUSH
9568: LD_VAR 0 3
9572: PUSH
9573: LD_VAR 0 2
9577: DIFF
9578: ST_TO_ADDR
// continue ;
9579: GO 9549
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 3
9588: PUSH
9589: LD_INT 22
9591: PUSH
9592: LD_INT 0
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PPUSH
9603: CALL_OW 69
9607: PPUSH
9608: LD_VAR 0 2
9612: PPUSH
9613: CALL_OW 74
9617: PPUSH
9618: CALL_OW 115
// end ;
9622: GO 9549
9624: POP
9625: POP
// until not tmp ;
9626: LD_VAR 0 3
9630: NOT
9631: IFFALSE 9532
// end ;
9633: PPOPN 3
9635: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9636: LD_EXP 7
9640: PUSH
9641: LD_EXP 32
9645: AND
9646: IFFALSE 9700
9648: GO 9650
9650: DISABLE
// begin ToLua ( displayTroll(); ) ;
9651: LD_STRING displayTroll();
9653: PPUSH
9654: CALL_OW 559
// wait ( 3 3$00 ) ;
9658: LD_INT 6300
9660: PPUSH
9661: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9665: LD_STRING hideTroll();
9667: PPUSH
9668: CALL_OW 559
// wait ( 1 1$00 ) ;
9672: LD_INT 2100
9674: PPUSH
9675: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9679: LD_STRING displayTroll();
9681: PPUSH
9682: CALL_OW 559
// wait ( 1 1$00 ) ;
9686: LD_INT 2100
9688: PPUSH
9689: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9693: LD_STRING hideTroll();
9695: PPUSH
9696: CALL_OW 559
// end ;
9700: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9701: LD_EXP 7
9705: PUSH
9706: LD_EXP 33
9710: AND
9711: IFFALSE 9774
9713: GO 9715
9715: DISABLE
9716: LD_INT 0
9718: PPUSH
// begin p := 0 ;
9719: LD_ADDR_VAR 0 1
9723: PUSH
9724: LD_INT 0
9726: ST_TO_ADDR
// repeat game_speed := 1 ;
9727: LD_ADDR_OWVAR 65
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9735: LD_INT 35
9737: PPUSH
9738: CALL_OW 67
// p := p + 1 ;
9742: LD_ADDR_VAR 0 1
9746: PUSH
9747: LD_VAR 0 1
9751: PUSH
9752: LD_INT 1
9754: PLUS
9755: ST_TO_ADDR
// until p >= 60 ;
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 60
9763: GREATEREQUAL
9764: IFFALSE 9727
// game_speed := 4 ;
9766: LD_ADDR_OWVAR 65
9770: PUSH
9771: LD_INT 4
9773: ST_TO_ADDR
// end ;
9774: PPOPN 1
9776: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9777: LD_EXP 7
9781: PUSH
9782: LD_EXP 34
9786: AND
9787: IFFALSE 9933
9789: GO 9791
9791: DISABLE
9792: LD_INT 0
9794: PPUSH
9795: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9796: LD_ADDR_VAR 0 1
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_OWVAR 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 2
9815: PUSH
9816: LD_INT 30
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 30
9828: PUSH
9829: LD_INT 1
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: ST_TO_ADDR
// if not depot then
9850: LD_VAR 0 1
9854: NOT
9855: IFFALSE 9859
// exit ;
9857: GO 9933
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: LD_VAR 0 1
9868: PUSH
9869: LD_INT 1
9871: PPUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 12
9881: ARRAY
9882: PPUSH
9883: CALL_OW 274
9887: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9888: LD_VAR 0 2
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: LD_INT 0
9898: PPUSH
9899: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9903: LD_VAR 0 2
9907: PPUSH
9908: LD_INT 2
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9918: LD_VAR 0 2
9922: PPUSH
9923: LD_INT 3
9925: PPUSH
9926: LD_INT 0
9928: PPUSH
9929: CALL_OW 277
// end ;
9933: PPOPN 2
9935: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9936: LD_EXP 7
9940: PUSH
9941: LD_EXP 35
9945: AND
9946: IFFALSE 10043
9948: GO 9950
9950: DISABLE
9951: LD_INT 0
9953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9954: LD_ADDR_VAR 0 1
9958: PUSH
9959: LD_INT 22
9961: PUSH
9962: LD_OWVAR 2
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 21
9973: PUSH
9974: LD_INT 1
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 3
9983: PUSH
9984: LD_INT 23
9986: PUSH
9987: LD_INT 0
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: ST_TO_ADDR
// if not tmp then
10008: LD_VAR 0 1
10012: NOT
10013: IFFALSE 10017
// exit ;
10015: GO 10043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10017: LD_VAR 0 1
10021: PUSH
10022: LD_INT 1
10024: PPUSH
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 12
10034: ARRAY
10035: PPUSH
10036: LD_INT 200
10038: PPUSH
10039: CALL_OW 234
// end ;
10043: PPOPN 1
10045: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10046: LD_EXP 7
10050: PUSH
10051: LD_EXP 36
10055: AND
10056: IFFALSE 10135
10058: GO 10060
10060: DISABLE
10061: LD_INT 0
10063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10064: LD_ADDR_VAR 0 1
10068: PUSH
10069: LD_INT 22
10071: PUSH
10072: LD_OWVAR 2
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 21
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PPUSH
10095: CALL_OW 69
10099: ST_TO_ADDR
// if not tmp then
10100: LD_VAR 0 1
10104: NOT
10105: IFFALSE 10109
// exit ;
10107: GO 10135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10109: LD_VAR 0 1
10113: PUSH
10114: LD_INT 1
10116: PPUSH
10117: LD_VAR 0 1
10121: PPUSH
10122: CALL_OW 12
10126: ARRAY
10127: PPUSH
10128: LD_INT 60
10130: PPUSH
10131: CALL_OW 234
// end ;
10135: PPOPN 1
10137: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10138: LD_EXP 7
10142: PUSH
10143: LD_EXP 37
10147: AND
10148: IFFALSE 10247
10150: GO 10152
10152: DISABLE
10153: LD_INT 0
10155: PPUSH
10156: PPUSH
// begin enable ;
10157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10158: LD_ADDR_VAR 0 1
10162: PUSH
10163: LD_INT 22
10165: PUSH
10166: LD_OWVAR 2
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 61
10177: PUSH
10178: EMPTY
10179: LIST
10180: PUSH
10181: LD_INT 33
10183: PUSH
10184: LD_INT 2
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 69
10200: ST_TO_ADDR
// if not tmp then
10201: LD_VAR 0 1
10205: NOT
10206: IFFALSE 10210
// exit ;
10208: GO 10247
// for i in tmp do
10210: LD_ADDR_VAR 0 2
10214: PUSH
10215: LD_VAR 0 1
10219: PUSH
10220: FOR_IN
10221: IFFALSE 10245
// if IsControledBy ( i ) then
10223: LD_VAR 0 2
10227: PPUSH
10228: CALL_OW 312
10232: IFFALSE 10243
// ComUnlink ( i ) ;
10234: LD_VAR 0 2
10238: PPUSH
10239: CALL_OW 136
10243: GO 10220
10245: POP
10246: POP
// end ;
10247: PPOPN 2
10249: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10250: LD_EXP 7
10254: PUSH
10255: LD_EXP 38
10259: AND
10260: IFFALSE 10400
10262: GO 10264
10264: DISABLE
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
// begin ToLua ( displayPowell(); ) ;
10269: LD_STRING displayPowell();
10271: PPUSH
10272: CALL_OW 559
// uc_side := 0 ;
10276: LD_ADDR_OWVAR 20
10280: PUSH
10281: LD_INT 0
10283: ST_TO_ADDR
// uc_nation := 2 ;
10284: LD_ADDR_OWVAR 21
10288: PUSH
10289: LD_INT 2
10291: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10292: LD_ADDR_OWVAR 37
10296: PUSH
10297: LD_INT 14
10299: ST_TO_ADDR
// vc_engine := engine_siberite ;
10300: LD_ADDR_OWVAR 39
10304: PUSH
10305: LD_INT 3
10307: ST_TO_ADDR
// vc_control := control_apeman ;
10308: LD_ADDR_OWVAR 38
10312: PUSH
10313: LD_INT 5
10315: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10316: LD_ADDR_OWVAR 40
10320: PUSH
10321: LD_INT 29
10323: ST_TO_ADDR
// un := CreateVehicle ;
10324: LD_ADDR_VAR 0 2
10328: PUSH
10329: CALL_OW 45
10333: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10334: LD_VAR 0 2
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10346: LD_INT 35
10348: PPUSH
10349: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10353: LD_VAR 0 2
10357: PPUSH
10358: LD_INT 22
10360: PUSH
10361: LD_OWVAR 2
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: PPUSH
10375: LD_VAR 0 2
10379: PPUSH
10380: CALL_OW 74
10384: PPUSH
10385: CALL_OW 115
// until IsDead ( un ) ;
10389: LD_VAR 0 2
10393: PPUSH
10394: CALL_OW 301
10398: IFFALSE 10346
// end ;
10400: PPOPN 2
10402: END
// every 0 0$1 trigger StreamModeActive and sStu do
10403: LD_EXP 7
10407: PUSH
10408: LD_EXP 46
10412: AND
10413: IFFALSE 10429
10415: GO 10417
10417: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10418: LD_STRING displayStucuk();
10420: PPUSH
10421: CALL_OW 559
// ResetFog ;
10425: CALL_OW 335
// end ;
10429: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10430: LD_EXP 7
10434: PUSH
10435: LD_EXP 39
10439: AND
10440: IFFALSE 10581
10442: GO 10444
10444: DISABLE
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_OWVAR 2
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 21
10468: PUSH
10469: LD_INT 1
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: ST_TO_ADDR
// if not tmp then
10485: LD_VAR 0 2
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10581
// un := tmp [ rand ( 1 , tmp ) ] ;
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_VAR 0 2
10503: PUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_VAR 0 2
10511: PPUSH
10512: CALL_OW 12
10516: ARRAY
10517: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10518: LD_VAR 0 1
10522: PPUSH
10523: LD_INT 0
10525: PPUSH
10526: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10530: LD_VAR 0 1
10534: PPUSH
10535: LD_OWVAR 3
10539: PUSH
10540: LD_VAR 0 1
10544: DIFF
10545: PPUSH
10546: LD_VAR 0 1
10550: PPUSH
10551: CALL_OW 74
10555: PPUSH
10556: CALL_OW 115
// wait ( 0 0$20 ) ;
10560: LD_INT 700
10562: PPUSH
10563: CALL_OW 67
// SetSide ( un , your_side ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_OWVAR 2
10576: PPUSH
10577: CALL_OW 235
// end ;
10581: PPOPN 2
10583: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10584: LD_EXP 7
10588: PUSH
10589: LD_EXP 40
10593: AND
10594: IFFALSE 10700
10596: GO 10598
10598: DISABLE
10599: LD_INT 0
10601: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10602: LD_ADDR_VAR 0 1
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_OWVAR 2
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 2
10621: PUSH
10622: LD_INT 30
10624: PUSH
10625: LD_INT 0
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 30
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: ST_TO_ADDR
// if not depot then
10656: LD_VAR 0 1
10660: NOT
10661: IFFALSE 10665
// exit ;
10663: GO 10700
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10665: LD_VAR 0 1
10669: PUSH
10670: LD_INT 1
10672: ARRAY
10673: PPUSH
10674: CALL_OW 250
10678: PPUSH
10679: LD_VAR 0 1
10683: PUSH
10684: LD_INT 1
10686: ARRAY
10687: PPUSH
10688: CALL_OW 251
10692: PPUSH
10693: LD_INT 70
10695: PPUSH
10696: CALL_OW 495
// end ;
10700: PPOPN 1
10702: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10703: LD_EXP 7
10707: PUSH
10708: LD_EXP 41
10712: AND
10713: IFFALSE 10924
10715: GO 10717
10717: DISABLE
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10725: LD_ADDR_VAR 0 5
10729: PUSH
10730: LD_INT 22
10732: PUSH
10733: LD_OWVAR 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 21
10744: PUSH
10745: LD_INT 1
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: ST_TO_ADDR
// if not tmp then
10761: LD_VAR 0 5
10765: NOT
10766: IFFALSE 10770
// exit ;
10768: GO 10924
// for i in tmp do
10770: LD_ADDR_VAR 0 1
10774: PUSH
10775: LD_VAR 0 5
10779: PUSH
10780: FOR_IN
10781: IFFALSE 10922
// begin d := rand ( 0 , 5 ) ;
10783: LD_ADDR_VAR 0 4
10787: PUSH
10788: LD_INT 0
10790: PPUSH
10791: LD_INT 5
10793: PPUSH
10794: CALL_OW 12
10798: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10799: LD_ADDR_VAR 0 2
10803: PUSH
10804: LD_VAR 0 1
10808: PPUSH
10809: CALL_OW 250
10813: PPUSH
10814: LD_VAR 0 4
10818: PPUSH
10819: LD_INT 3
10821: PPUSH
10822: LD_INT 12
10824: PPUSH
10825: CALL_OW 12
10829: PPUSH
10830: CALL_OW 272
10834: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10835: LD_ADDR_VAR 0 3
10839: PUSH
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 251
10849: PPUSH
10850: LD_VAR 0 4
10854: PPUSH
10855: LD_INT 3
10857: PPUSH
10858: LD_INT 12
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: CALL_OW 273
10870: ST_TO_ADDR
// if ValidHex ( x , y ) then
10871: LD_VAR 0 2
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: CALL_OW 488
10885: IFFALSE 10920
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10887: LD_VAR 0 1
10891: PPUSH
10892: LD_VAR 0 2
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 3
10904: PPUSH
10905: LD_INT 6
10907: PPUSH
10908: CALL_OW 12
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 483
// end ;
10920: GO 10780
10922: POP
10923: POP
// end ;
10924: PPOPN 5
10926: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10927: LD_EXP 7
10931: PUSH
10932: LD_EXP 42
10936: AND
10937: IFFALSE 11031
10939: GO 10941
10941: DISABLE
10942: LD_INT 0
10944: PPUSH
10945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10946: LD_ADDR_VAR 0 2
10950: PUSH
10951: LD_INT 22
10953: PUSH
10954: LD_OWVAR 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 32
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 21
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: ST_TO_ADDR
// if not tmp then
10993: LD_VAR 0 2
10997: NOT
10998: IFFALSE 11002
// exit ;
11000: GO 11031
// for i in tmp do
11002: LD_ADDR_VAR 0 1
11006: PUSH
11007: LD_VAR 0 2
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11029
// SetFuel ( i , 0 ) ;
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 240
11027: GO 11012
11029: POP
11030: POP
// end ;
11031: PPOPN 2
11033: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11034: LD_EXP 7
11038: PUSH
11039: LD_EXP 43
11043: AND
11044: IFFALSE 11110
11046: GO 11048
11048: DISABLE
11049: LD_INT 0
11051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11052: LD_ADDR_VAR 0 1
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_OWVAR 2
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 30
11071: PUSH
11072: LD_INT 29
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: CALL_OW 69
11087: ST_TO_ADDR
// if not tmp then
11088: LD_VAR 0 1
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11110
// DestroyUnit ( tmp [ 1 ] ) ;
11097: LD_VAR 0 1
11101: PUSH
11102: LD_INT 1
11104: ARRAY
11105: PPUSH
11106: CALL_OW 65
// end ;
11110: PPOPN 1
11112: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11113: LD_EXP 7
11117: PUSH
11118: LD_EXP 45
11122: AND
11123: IFFALSE 11252
11125: GO 11127
11127: DISABLE
11128: LD_INT 0
11130: PPUSH
// begin uc_side := 0 ;
11131: LD_ADDR_OWVAR 20
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// uc_nation := nation_arabian ;
11139: LD_ADDR_OWVAR 21
11143: PUSH
11144: LD_INT 2
11146: ST_TO_ADDR
// hc_gallery :=  ;
11147: LD_ADDR_OWVAR 33
11151: PUSH
11152: LD_STRING 
11154: ST_TO_ADDR
// hc_name :=  ;
11155: LD_ADDR_OWVAR 26
11159: PUSH
11160: LD_STRING 
11162: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11163: LD_INT 1
11165: PPUSH
11166: LD_INT 11
11168: PPUSH
11169: LD_INT 10
11171: PPUSH
11172: CALL_OW 380
// un := CreateHuman ;
11176: LD_ADDR_VAR 0 1
11180: PUSH
11181: CALL_OW 44
11185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11186: LD_VAR 0 1
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11205: LD_VAR 0 1
11209: PPUSH
11210: LD_INT 22
11212: PUSH
11213: LD_OWVAR 2
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PPUSH
11222: CALL_OW 69
11226: PPUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 74
11236: PPUSH
11237: CALL_OW 115
// until IsDead ( un ) ;
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 301
11250: IFFALSE 11198
// end ;
11252: PPOPN 1
11254: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11255: LD_EXP 7
11259: PUSH
11260: LD_EXP 47
11264: AND
11265: IFFALSE 11277
11267: GO 11269
11269: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11270: LD_STRING earthquake(getX(game), 0, 32)
11272: PPUSH
11273: CALL_OW 559
11277: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11278: LD_EXP 7
11282: PUSH
11283: LD_EXP 48
11287: AND
11288: IFFALSE 11379
11290: GO 11292
11292: DISABLE
11293: LD_INT 0
11295: PPUSH
// begin enable ;
11296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11297: LD_ADDR_VAR 0 1
11301: PUSH
11302: LD_INT 22
11304: PUSH
11305: LD_OWVAR 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 21
11316: PUSH
11317: LD_INT 2
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 33
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// if not tmp then
11344: LD_VAR 0 1
11348: NOT
11349: IFFALSE 11353
// exit ;
11351: GO 11379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11353: LD_VAR 0 1
11357: PUSH
11358: LD_INT 1
11360: PPUSH
11361: LD_VAR 0 1
11365: PPUSH
11366: CALL_OW 12
11370: ARRAY
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: CALL_OW 234
// end ;
11379: PPOPN 1
11381: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11382: LD_EXP 7
11386: PUSH
11387: LD_EXP 49
11391: AND
11392: IFFALSE 11533
11394: GO 11396
11396: DISABLE
11397: LD_INT 0
11399: PPUSH
11400: PPUSH
11401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11402: LD_ADDR_VAR 0 3
11406: PUSH
11407: LD_INT 22
11409: PUSH
11410: LD_OWVAR 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PPUSH
11433: CALL_OW 69
11437: ST_TO_ADDR
// if not tmp then
11438: LD_VAR 0 3
11442: NOT
11443: IFFALSE 11447
// exit ;
11445: GO 11533
// un := tmp [ rand ( 1 , tmp ) ] ;
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: LD_VAR 0 3
11456: PUSH
11457: LD_INT 1
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: CALL_OW 12
11469: ARRAY
11470: ST_TO_ADDR
// if Crawls ( un ) then
11471: LD_VAR 0 2
11475: PPUSH
11476: CALL_OW 318
11480: IFFALSE 11491
// ComWalk ( un ) ;
11482: LD_VAR 0 2
11486: PPUSH
11487: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11491: LD_VAR 0 2
11495: PPUSH
11496: LD_INT 9
11498: PPUSH
11499: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11503: LD_INT 28
11505: PPUSH
11506: LD_OWVAR 2
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11518: LD_INT 29
11520: PPUSH
11521: LD_OWVAR 2
11525: PPUSH
11526: LD_INT 2
11528: PPUSH
11529: CALL_OW 322
// end ;
11533: PPOPN 3
11535: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11536: LD_EXP 7
11540: PUSH
11541: LD_EXP 50
11545: AND
11546: IFFALSE 11657
11548: GO 11550
11550: DISABLE
11551: LD_INT 0
11553: PPUSH
11554: PPUSH
11555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11556: LD_ADDR_VAR 0 3
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_OWVAR 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 25
11575: PUSH
11576: LD_INT 1
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: ST_TO_ADDR
// if not tmp then
11592: LD_VAR 0 3
11596: NOT
11597: IFFALSE 11601
// exit ;
11599: GO 11657
// un := tmp [ rand ( 1 , tmp ) ] ;
11601: LD_ADDR_VAR 0 2
11605: PUSH
11606: LD_VAR 0 3
11610: PUSH
11611: LD_INT 1
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: CALL_OW 12
11623: ARRAY
11624: ST_TO_ADDR
// if Crawls ( un ) then
11625: LD_VAR 0 2
11629: PPUSH
11630: CALL_OW 318
11634: IFFALSE 11645
// ComWalk ( un ) ;
11636: LD_VAR 0 2
11640: PPUSH
11641: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11645: LD_VAR 0 2
11649: PPUSH
11650: LD_INT 8
11652: PPUSH
11653: CALL_OW 336
// end ;
11657: PPOPN 3
11659: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11660: LD_EXP 7
11664: PUSH
11665: LD_EXP 51
11669: AND
11670: IFFALSE 11814
11672: GO 11674
11674: DISABLE
11675: LD_INT 0
11677: PPUSH
11678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11679: LD_ADDR_VAR 0 2
11683: PUSH
11684: LD_INT 22
11686: PUSH
11687: LD_OWVAR 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 21
11698: PUSH
11699: LD_INT 2
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 2
11708: PUSH
11709: LD_INT 34
11711: PUSH
11712: LD_INT 12
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 34
11721: PUSH
11722: LD_INT 51
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 34
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: ST_TO_ADDR
// if not tmp then
11755: LD_VAR 0 2
11759: NOT
11760: IFFALSE 11764
// exit ;
11762: GO 11814
// for i in tmp do
11764: LD_ADDR_VAR 0 1
11768: PUSH
11769: LD_VAR 0 2
11773: PUSH
11774: FOR_IN
11775: IFFALSE 11812
// if GetCargo ( i , mat_artifact ) = 0 then
11777: LD_VAR 0 1
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 289
11789: PUSH
11790: LD_INT 0
11792: EQUAL
11793: IFFALSE 11810
// SetCargo ( i , mat_siberit , 100 ) ;
11795: LD_VAR 0 1
11799: PPUSH
11800: LD_INT 3
11802: PPUSH
11803: LD_INT 100
11805: PPUSH
11806: CALL_OW 290
11810: GO 11774
11812: POP
11813: POP
// end ;
11814: PPOPN 2
11816: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11817: LD_EXP 7
11821: PUSH
11822: LD_EXP 52
11826: AND
11827: IFFALSE 12010
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
11835: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11836: LD_ADDR_VAR 0 2
11840: PUSH
11841: LD_INT 22
11843: PUSH
11844: LD_OWVAR 2
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PPUSH
11853: CALL_OW 69
11857: ST_TO_ADDR
// if not tmp then
11858: LD_VAR 0 2
11862: NOT
11863: IFFALSE 11867
// exit ;
11865: GO 12010
// for i := 1 to 2 do
11867: LD_ADDR_VAR 0 1
11871: PUSH
11872: DOUBLE
11873: LD_INT 1
11875: DEC
11876: ST_TO_ADDR
11877: LD_INT 2
11879: PUSH
11880: FOR_TO
11881: IFFALSE 12008
// begin uc_side := your_side ;
11883: LD_ADDR_OWVAR 20
11887: PUSH
11888: LD_OWVAR 2
11892: ST_TO_ADDR
// uc_nation := nation_american ;
11893: LD_ADDR_OWVAR 21
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// vc_chassis := us_morphling ;
11901: LD_ADDR_OWVAR 37
11905: PUSH
11906: LD_INT 5
11908: ST_TO_ADDR
// vc_engine := engine_siberite ;
11909: LD_ADDR_OWVAR 39
11913: PUSH
11914: LD_INT 3
11916: ST_TO_ADDR
// vc_control := control_computer ;
11917: LD_ADDR_OWVAR 38
11921: PUSH
11922: LD_INT 3
11924: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11925: LD_ADDR_OWVAR 40
11929: PUSH
11930: LD_INT 10
11932: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11933: LD_VAR 0 2
11937: PUSH
11938: LD_INT 1
11940: ARRAY
11941: PPUSH
11942: CALL_OW 310
11946: NOT
11947: IFFALSE 11994
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11949: CALL_OW 45
11953: PPUSH
11954: LD_VAR 0 2
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PPUSH
11963: CALL_OW 250
11967: PPUSH
11968: LD_VAR 0 2
11972: PUSH
11973: LD_INT 1
11975: ARRAY
11976: PPUSH
11977: CALL_OW 251
11981: PPUSH
11982: LD_INT 12
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 50
11992: GO 12006
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11994: CALL_OW 45
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 51
// end ;
12006: GO 11880
12008: POP
12009: POP
// end ;
12010: PPOPN 2
12012: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12013: LD_EXP 7
12017: PUSH
12018: LD_EXP 53
12022: AND
12023: IFFALSE 12245
12025: GO 12027
12027: DISABLE
12028: LD_INT 0
12030: PPUSH
12031: PPUSH
12032: PPUSH
12033: PPUSH
12034: PPUSH
12035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12036: LD_ADDR_VAR 0 6
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_OWVAR 2
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 21
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 3
12065: PUSH
12066: LD_INT 23
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: ST_TO_ADDR
// if not tmp then
12090: LD_VAR 0 6
12094: NOT
12095: IFFALSE 12099
// exit ;
12097: GO 12245
// s1 := rand ( 1 , 4 ) ;
12099: LD_ADDR_VAR 0 2
12103: PUSH
12104: LD_INT 1
12106: PPUSH
12107: LD_INT 4
12109: PPUSH
12110: CALL_OW 12
12114: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12115: LD_ADDR_VAR 0 4
12119: PUSH
12120: LD_VAR 0 6
12124: PUSH
12125: LD_INT 1
12127: ARRAY
12128: PPUSH
12129: LD_VAR 0 2
12133: PPUSH
12134: CALL_OW 259
12138: ST_TO_ADDR
// if s1 = 1 then
12139: LD_VAR 0 2
12143: PUSH
12144: LD_INT 1
12146: EQUAL
12147: IFFALSE 12167
// s2 := rand ( 2 , 4 ) else
12149: LD_ADDR_VAR 0 3
12153: PUSH
12154: LD_INT 2
12156: PPUSH
12157: LD_INT 4
12159: PPUSH
12160: CALL_OW 12
12164: ST_TO_ADDR
12165: GO 12175
// s2 := 1 ;
12167: LD_ADDR_VAR 0 3
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12175: LD_ADDR_VAR 0 5
12179: PUSH
12180: LD_VAR 0 6
12184: PUSH
12185: LD_INT 1
12187: ARRAY
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: CALL_OW 259
12198: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12199: LD_VAR 0 6
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: LD_VAR 0 5
12217: PPUSH
12218: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12222: LD_VAR 0 6
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_VAR 0 4
12240: PPUSH
12241: CALL_OW 237
// end ;
12245: PPOPN 6
12247: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12248: LD_EXP 7
12252: PUSH
12253: LD_EXP 54
12257: AND
12258: IFFALSE 12337
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_OWVAR 2
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 30
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 69
12301: ST_TO_ADDR
// if not tmp then
12302: LD_VAR 0 1
12306: NOT
12307: IFFALSE 12311
// exit ;
12309: GO 12337
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12311: LD_VAR 0 1
12315: PUSH
12316: LD_INT 1
12318: PPUSH
12319: LD_VAR 0 1
12323: PPUSH
12324: CALL_OW 12
12328: ARRAY
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 234
// end ;
12337: PPOPN 1
12339: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12340: LD_EXP 7
12344: PUSH
12345: LD_EXP 55
12349: AND
12350: IFFALSE 12462
12352: GO 12354
12354: DISABLE
12355: LD_INT 0
12357: PPUSH
12358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12359: LD_ADDR_VAR 0 2
12363: PUSH
12364: LD_INT 22
12366: PUSH
12367: LD_OWVAR 2
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: LD_INT 30
12381: PUSH
12382: LD_INT 27
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 30
12391: PUSH
12392: LD_INT 26
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 30
12401: PUSH
12402: LD_INT 28
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: ST_TO_ADDR
// if not tmp then
12424: LD_VAR 0 2
12428: NOT
12429: IFFALSE 12433
// exit ;
12431: GO 12462
// for i in tmp do
12433: LD_ADDR_VAR 0 1
12437: PUSH
12438: LD_VAR 0 2
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12460
// SetLives ( i , 1 ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL_OW 234
12458: GO 12443
12460: POP
12461: POP
// end ;
12462: PPOPN 2
12464: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12465: LD_EXP 7
12469: PUSH
12470: LD_EXP 56
12474: AND
12475: IFFALSE 12762
12477: GO 12479
12479: DISABLE
12480: LD_INT 0
12482: PPUSH
12483: PPUSH
12484: PPUSH
// begin i := rand ( 1 , 7 ) ;
12485: LD_ADDR_VAR 0 1
12489: PUSH
12490: LD_INT 1
12492: PPUSH
12493: LD_INT 7
12495: PPUSH
12496: CALL_OW 12
12500: ST_TO_ADDR
// case i of 1 :
12501: LD_VAR 0 1
12505: PUSH
12506: LD_INT 1
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12524
12514: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12515: LD_STRING earthquake(getX(game), 0, 32)
12517: PPUSH
12518: CALL_OW 559
12522: GO 12762
12524: LD_INT 2
12526: DOUBLE
12527: EQUAL
12528: IFTRUE 12532
12530: GO 12546
12532: POP
// begin ToLua ( displayStucuk(); ) ;
12533: LD_STRING displayStucuk();
12535: PPUSH
12536: CALL_OW 559
// ResetFog ;
12540: CALL_OW 335
// end ; 3 :
12544: GO 12762
12546: LD_INT 3
12548: DOUBLE
12549: EQUAL
12550: IFTRUE 12554
12552: GO 12658
12554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12555: LD_ADDR_VAR 0 2
12559: PUSH
12560: LD_INT 22
12562: PUSH
12563: LD_OWVAR 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 25
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: ST_TO_ADDR
// if not tmp then
12591: LD_VAR 0 2
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 12762
// un := tmp [ rand ( 1 , tmp ) ] ;
12600: LD_ADDR_VAR 0 3
12604: PUSH
12605: LD_VAR 0 2
12609: PUSH
12610: LD_INT 1
12612: PPUSH
12613: LD_VAR 0 2
12617: PPUSH
12618: CALL_OW 12
12622: ARRAY
12623: ST_TO_ADDR
// if Crawls ( un ) then
12624: LD_VAR 0 3
12628: PPUSH
12629: CALL_OW 318
12633: IFFALSE 12644
// ComWalk ( un ) ;
12635: LD_VAR 0 3
12639: PPUSH
12640: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 8
12651: PPUSH
12652: CALL_OW 336
// end ; 4 :
12656: GO 12762
12658: LD_INT 4
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12740
12666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12667: LD_ADDR_VAR 0 2
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_OWVAR 2
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 30
12686: PUSH
12687: LD_INT 29
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 69
12702: ST_TO_ADDR
// if not tmp then
12703: LD_VAR 0 2
12707: NOT
12708: IFFALSE 12712
// exit ;
12710: GO 12762
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12712: LD_VAR 0 2
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12725: LD_VAR 0 2
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: PPUSH
12734: CALL_OW 65
// end ; 5 .. 7 :
12738: GO 12762
12740: LD_INT 5
12742: DOUBLE
12743: GREATEREQUAL
12744: IFFALSE 12752
12746: LD_INT 7
12748: DOUBLE
12749: LESSEQUAL
12750: IFTRUE 12754
12752: GO 12761
12754: POP
// StreamSibBomb ; end ;
12755: CALL 8999 0 0
12759: GO 12762
12761: POP
// end ;
12762: PPOPN 3
12764: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12765: LD_EXP 7
12769: PUSH
12770: LD_EXP 57
12774: AND
12775: IFFALSE 12931
12777: GO 12779
12779: DISABLE
12780: LD_INT 0
12782: PPUSH
12783: PPUSH
12784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: LD_INT 81
12792: PUSH
12793: LD_OWVAR 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: LD_INT 21
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 69
12838: ST_TO_ADDR
// if not tmp then
12839: LD_VAR 0 2
12843: NOT
12844: IFFALSE 12848
// exit ;
12846: GO 12931
// p := 0 ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// p := p + 1 ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_VAR 0 3
12872: PUSH
12873: LD_INT 1
12875: PLUS
12876: ST_TO_ADDR
// for i in tmp do
12877: LD_ADDR_VAR 0 1
12881: PUSH
12882: LD_VAR 0 2
12886: PUSH
12887: FOR_IN
12888: IFFALSE 12919
// if GetLives ( i ) < 1000 then
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 256
12899: PUSH
12900: LD_INT 1000
12902: LESS
12903: IFFALSE 12917
// SetLives ( i , 1000 ) ;
12905: LD_VAR 0 1
12909: PPUSH
12910: LD_INT 1000
12912: PPUSH
12913: CALL_OW 234
12917: GO 12887
12919: POP
12920: POP
// until p > 20 ;
12921: LD_VAR 0 3
12925: PUSH
12926: LD_INT 20
12928: GREATER
12929: IFFALSE 12856
// end ;
12931: PPOPN 3
12933: END
// every 0 0$1 trigger StreamModeActive and sTime do
12934: LD_EXP 7
12938: PUSH
12939: LD_EXP 58
12943: AND
12944: IFFALSE 12979
12946: GO 12948
12948: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12949: LD_INT 28
12951: PPUSH
12952: LD_OWVAR 2
12956: PPUSH
12957: LD_INT 2
12959: PPUSH
12960: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12964: LD_INT 30
12966: PPUSH
12967: LD_OWVAR 2
12971: PPUSH
12972: LD_INT 2
12974: PPUSH
12975: CALL_OW 322
// end ;
12979: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12980: LD_EXP 7
12984: PUSH
12985: LD_EXP 59
12989: AND
12990: IFFALSE 13111
12992: GO 12994
12994: DISABLE
12995: LD_INT 0
12997: PPUSH
12998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12999: LD_ADDR_VAR 0 2
13003: PUSH
13004: LD_INT 22
13006: PUSH
13007: LD_OWVAR 2
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 21
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 3
13028: PUSH
13029: LD_INT 23
13031: PUSH
13032: LD_INT 0
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 69
13052: ST_TO_ADDR
// if not tmp then
13053: LD_VAR 0 2
13057: NOT
13058: IFFALSE 13062
// exit ;
13060: GO 13111
// for i in tmp do
13062: LD_ADDR_VAR 0 1
13066: PUSH
13067: LD_VAR 0 2
13071: PUSH
13072: FOR_IN
13073: IFFALSE 13109
// begin if Crawls ( i ) then
13075: LD_VAR 0 1
13079: PPUSH
13080: CALL_OW 318
13084: IFFALSE 13095
// ComWalk ( i ) ;
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 138
// SetClass ( i , 2 ) ;
13095: LD_VAR 0 1
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 336
// end ;
13107: GO 13072
13109: POP
13110: POP
// end ;
13111: PPOPN 2
13113: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13114: LD_EXP 7
13118: PUSH
13119: LD_EXP 60
13123: AND
13124: IFFALSE 13412
13126: GO 13128
13128: DISABLE
13129: LD_INT 0
13131: PPUSH
13132: PPUSH
13133: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13134: LD_OWVAR 2
13138: PPUSH
13139: LD_INT 9
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13152: LD_INT 9
13154: PPUSH
13155: LD_OWVAR 2
13159: PPUSH
13160: CALL_OW 343
// uc_side := 9 ;
13164: LD_ADDR_OWVAR 20
13168: PUSH
13169: LD_INT 9
13171: ST_TO_ADDR
// uc_nation := 2 ;
13172: LD_ADDR_OWVAR 21
13176: PUSH
13177: LD_INT 2
13179: ST_TO_ADDR
// hc_name := Dark Warrior ;
13180: LD_ADDR_OWVAR 26
13184: PUSH
13185: LD_STRING Dark Warrior
13187: ST_TO_ADDR
// hc_gallery :=  ;
13188: LD_ADDR_OWVAR 33
13192: PUSH
13193: LD_STRING 
13195: ST_TO_ADDR
// hc_noskilllimit := true ;
13196: LD_ADDR_OWVAR 76
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13204: LD_ADDR_OWVAR 31
13208: PUSH
13209: LD_INT 30
13211: PUSH
13212: LD_INT 30
13214: PUSH
13215: LD_INT 30
13217: PUSH
13218: LD_INT 30
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: ST_TO_ADDR
// un := CreateHuman ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: CALL_OW 44
13236: ST_TO_ADDR
// hc_noskilllimit := false ;
13237: LD_ADDR_OWVAR 76
13241: PUSH
13242: LD_INT 0
13244: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: CALL_OW 51
// ToLua ( playRanger() ) ;
13257: LD_STRING playRanger()
13259: PPUSH
13260: CALL_OW 559
// p := 0 ;
13264: LD_ADDR_VAR 0 2
13268: PUSH
13269: LD_INT 0
13271: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13272: LD_INT 35
13274: PPUSH
13275: CALL_OW 67
// p := p + 1 ;
13279: LD_ADDR_VAR 0 2
13283: PUSH
13284: LD_VAR 0 2
13288: PUSH
13289: LD_INT 1
13291: PLUS
13292: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13293: LD_VAR 0 3
13297: PPUSH
13298: CALL_OW 256
13302: PUSH
13303: LD_INT 1000
13305: LESS
13306: IFFALSE 13320
// SetLives ( un , 1000 ) ;
13308: LD_VAR 0 3
13312: PPUSH
13313: LD_INT 1000
13315: PPUSH
13316: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_INT 81
13327: PUSH
13328: LD_OWVAR 2
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 91
13339: PUSH
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 30
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: PPUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: CALL_OW 74
13371: PPUSH
13372: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13376: LD_VAR 0 2
13380: PUSH
13381: LD_INT 80
13383: GREATER
13384: PUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: CALL_OW 301
13394: OR
13395: IFFALSE 13272
// if un then
13397: LD_VAR 0 3
13401: IFFALSE 13412
// RemoveUnit ( un ) ;
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 64
// end ;
13412: PPOPN 3
13414: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13415: LD_EXP 61
13419: IFFALSE 13535
13421: GO 13423
13423: DISABLE
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_INT 81
13436: PUSH
13437: LD_OWVAR 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13465: LD_STRING playComputer()
13467: PPUSH
13468: CALL_OW 559
// if not tmp then
13472: LD_VAR 0 2
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 13535
// for i in tmp do
13481: LD_ADDR_VAR 0 1
13485: PUSH
13486: LD_VAR 0 2
13490: PUSH
13491: FOR_IN
13492: IFFALSE 13533
// for j := 1 to 4 do
13494: LD_ADDR_VAR 0 3
13498: PUSH
13499: DOUBLE
13500: LD_INT 1
13502: DEC
13503: ST_TO_ADDR
13504: LD_INT 4
13506: PUSH
13507: FOR_TO
13508: IFFALSE 13529
// SetSkill ( i , j , 10 ) ;
13510: LD_VAR 0 1
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 10
13522: PPUSH
13523: CALL_OW 237
13527: GO 13507
13529: POP
13530: POP
13531: GO 13491
13533: POP
13534: POP
// end ;
13535: PPOPN 3
13537: END
// every 0 0$1 trigger s30 do var i , tmp ;
13538: LD_EXP 62
13542: IFFALSE 13611
13544: GO 13546
13546: DISABLE
13547: LD_INT 0
13549: PPUSH
13550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13551: LD_ADDR_VAR 0 2
13555: PUSH
13556: LD_INT 22
13558: PUSH
13559: LD_OWVAR 2
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: ST_TO_ADDR
// if not tmp then
13573: LD_VAR 0 2
13577: NOT
13578: IFFALSE 13582
// exit ;
13580: GO 13611
// for i in tmp do
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_VAR 0 2
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13609
// SetLives ( i , 300 ) ;
13595: LD_VAR 0 1
13599: PPUSH
13600: LD_INT 300
13602: PPUSH
13603: CALL_OW 234
13607: GO 13592
13609: POP
13610: POP
// end ;
13611: PPOPN 2
13613: END
// every 0 0$1 trigger s60 do var i , tmp ;
13614: LD_EXP 63
13618: IFFALSE 13687
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
13626: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13627: LD_ADDR_VAR 0 2
13631: PUSH
13632: LD_INT 22
13634: PUSH
13635: LD_OWVAR 2
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 69
13648: ST_TO_ADDR
// if not tmp then
13649: LD_VAR 0 2
13653: NOT
13654: IFFALSE 13658
// exit ;
13656: GO 13687
// for i in tmp do
13658: LD_ADDR_VAR 0 1
13662: PUSH
13663: LD_VAR 0 2
13667: PUSH
13668: FOR_IN
13669: IFFALSE 13685
// SetLives ( i , 600 ) ;
13671: LD_VAR 0 1
13675: PPUSH
13676: LD_INT 600
13678: PPUSH
13679: CALL_OW 234
13683: GO 13668
13685: POP
13686: POP
// end ;
13687: PPOPN 2
13689: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13690: LD_INT 0
13692: PPUSH
// case cmd of 301 :
13693: LD_VAR 0 1
13697: PUSH
13698: LD_INT 301
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13738
13706: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13707: LD_VAR 0 6
13711: PPUSH
13712: LD_VAR 0 7
13716: PPUSH
13717: LD_VAR 0 8
13721: PPUSH
13722: LD_VAR 0 4
13726: PPUSH
13727: LD_VAR 0 5
13731: PPUSH
13732: CALL 14939 0 5
13736: GO 13859
13738: LD_INT 302
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13783
13746: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_VAR 0 7
13756: PPUSH
13757: LD_VAR 0 8
13761: PPUSH
13762: LD_VAR 0 9
13766: PPUSH
13767: LD_VAR 0 4
13771: PPUSH
13772: LD_VAR 0 5
13776: PPUSH
13777: CALL 15030 0 6
13781: GO 13859
13783: LD_INT 303
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 13828
13791: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13792: LD_VAR 0 6
13796: PPUSH
13797: LD_VAR 0 7
13801: PPUSH
13802: LD_VAR 0 8
13806: PPUSH
13807: LD_VAR 0 9
13811: PPUSH
13812: LD_VAR 0 4
13816: PPUSH
13817: LD_VAR 0 5
13821: PPUSH
13822: CALL 13864 0 6
13826: GO 13859
13828: LD_INT 304
13830: DOUBLE
13831: EQUAL
13832: IFTRUE 13836
13834: GO 13858
13836: POP
// hHackTeleport ( unit , x , y ) ; end ;
13837: LD_VAR 0 2
13841: PPUSH
13842: LD_VAR 0 4
13846: PPUSH
13847: LD_VAR 0 5
13851: PPUSH
13852: CALL 15623 0 3
13856: GO 13859
13858: POP
// end ;
13859: LD_VAR 0 12
13863: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13864: LD_INT 0
13866: PPUSH
13867: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13868: LD_VAR 0 1
13872: PUSH
13873: LD_INT 1
13875: LESS
13876: PUSH
13877: LD_VAR 0 1
13881: PUSH
13882: LD_INT 3
13884: GREATER
13885: OR
13886: PUSH
13887: LD_VAR 0 5
13891: PPUSH
13892: LD_VAR 0 6
13896: PPUSH
13897: CALL_OW 428
13901: OR
13902: IFFALSE 13906
// exit ;
13904: GO 14626
// uc_side := your_side ;
13906: LD_ADDR_OWVAR 20
13910: PUSH
13911: LD_OWVAR 2
13915: ST_TO_ADDR
// uc_nation := nation ;
13916: LD_ADDR_OWVAR 21
13920: PUSH
13921: LD_VAR 0 1
13925: ST_TO_ADDR
// bc_level = 1 ;
13926: LD_ADDR_OWVAR 43
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
// case btype of 1 :
13934: LD_VAR 0 2
13938: PUSH
13939: LD_INT 1
13941: DOUBLE
13942: EQUAL
13943: IFTRUE 13947
13945: GO 13958
13947: POP
// bc_type := b_depot ; 2 :
13948: LD_ADDR_OWVAR 42
13952: PUSH
13953: LD_INT 0
13955: ST_TO_ADDR
13956: GO 14570
13958: LD_INT 2
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 13977
13966: POP
// bc_type := b_warehouse ; 3 :
13967: LD_ADDR_OWVAR 42
13971: PUSH
13972: LD_INT 1
13974: ST_TO_ADDR
13975: GO 14570
13977: LD_INT 3
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 13996
13985: POP
// bc_type := b_lab ; 4 .. 9 :
13986: LD_ADDR_OWVAR 42
13990: PUSH
13991: LD_INT 6
13993: ST_TO_ADDR
13994: GO 14570
13996: LD_INT 4
13998: DOUBLE
13999: GREATEREQUAL
14000: IFFALSE 14008
14002: LD_INT 9
14004: DOUBLE
14005: LESSEQUAL
14006: IFTRUE 14010
14008: GO 14062
14010: POP
// begin bc_type := b_lab_half ;
14011: LD_ADDR_OWVAR 42
14015: PUSH
14016: LD_INT 7
14018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14019: LD_ADDR_OWVAR 44
14023: PUSH
14024: LD_INT 10
14026: PUSH
14027: LD_INT 11
14029: PUSH
14030: LD_INT 12
14032: PUSH
14033: LD_INT 15
14035: PUSH
14036: LD_INT 14
14038: PUSH
14039: LD_INT 13
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 3
14057: MINUS
14058: ARRAY
14059: ST_TO_ADDR
// end ; 10 .. 13 :
14060: GO 14570
14062: LD_INT 10
14064: DOUBLE
14065: GREATEREQUAL
14066: IFFALSE 14074
14068: LD_INT 13
14070: DOUBLE
14071: LESSEQUAL
14072: IFTRUE 14076
14074: GO 14153
14076: POP
// begin bc_type := b_lab_full ;
14077: LD_ADDR_OWVAR 42
14081: PUSH
14082: LD_INT 8
14084: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14085: LD_ADDR_OWVAR 44
14089: PUSH
14090: LD_INT 10
14092: PUSH
14093: LD_INT 12
14095: PUSH
14096: LD_INT 14
14098: PUSH
14099: LD_INT 13
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: PUSH
14108: LD_VAR 0 2
14112: PUSH
14113: LD_INT 9
14115: MINUS
14116: ARRAY
14117: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14118: LD_ADDR_OWVAR 45
14122: PUSH
14123: LD_INT 11
14125: PUSH
14126: LD_INT 15
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 15
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: LD_VAR 0 2
14145: PUSH
14146: LD_INT 9
14148: MINUS
14149: ARRAY
14150: ST_TO_ADDR
// end ; 14 :
14151: GO 14570
14153: LD_INT 14
14155: DOUBLE
14156: EQUAL
14157: IFTRUE 14161
14159: GO 14172
14161: POP
// bc_type := b_workshop ; 15 :
14162: LD_ADDR_OWVAR 42
14166: PUSH
14167: LD_INT 2
14169: ST_TO_ADDR
14170: GO 14570
14172: LD_INT 15
14174: DOUBLE
14175: EQUAL
14176: IFTRUE 14180
14178: GO 14191
14180: POP
// bc_type := b_factory ; 16 :
14181: LD_ADDR_OWVAR 42
14185: PUSH
14186: LD_INT 3
14188: ST_TO_ADDR
14189: GO 14570
14191: LD_INT 16
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14210
14199: POP
// bc_type := b_ext_gun ; 17 :
14200: LD_ADDR_OWVAR 42
14204: PUSH
14205: LD_INT 17
14207: ST_TO_ADDR
14208: GO 14570
14210: LD_INT 17
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14246
14218: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14219: LD_ADDR_OWVAR 42
14223: PUSH
14224: LD_INT 19
14226: PUSH
14227: LD_INT 23
14229: PUSH
14230: LD_INT 19
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: PUSH
14238: LD_VAR 0 1
14242: ARRAY
14243: ST_TO_ADDR
14244: GO 14570
14246: LD_INT 18
14248: DOUBLE
14249: EQUAL
14250: IFTRUE 14254
14252: GO 14265
14254: POP
// bc_type := b_ext_radar ; 19 :
14255: LD_ADDR_OWVAR 42
14259: PUSH
14260: LD_INT 20
14262: ST_TO_ADDR
14263: GO 14570
14265: LD_INT 19
14267: DOUBLE
14268: EQUAL
14269: IFTRUE 14273
14271: GO 14284
14273: POP
// bc_type := b_ext_radio ; 20 :
14274: LD_ADDR_OWVAR 42
14278: PUSH
14279: LD_INT 22
14281: ST_TO_ADDR
14282: GO 14570
14284: LD_INT 20
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14303
14292: POP
// bc_type := b_ext_siberium ; 21 :
14293: LD_ADDR_OWVAR 42
14297: PUSH
14298: LD_INT 21
14300: ST_TO_ADDR
14301: GO 14570
14303: LD_INT 21
14305: DOUBLE
14306: EQUAL
14307: IFTRUE 14311
14309: GO 14322
14311: POP
// bc_type := b_ext_computer ; 22 :
14312: LD_ADDR_OWVAR 42
14316: PUSH
14317: LD_INT 24
14319: ST_TO_ADDR
14320: GO 14570
14322: LD_INT 22
14324: DOUBLE
14325: EQUAL
14326: IFTRUE 14330
14328: GO 14341
14330: POP
// bc_type := b_ext_track ; 23 :
14331: LD_ADDR_OWVAR 42
14335: PUSH
14336: LD_INT 16
14338: ST_TO_ADDR
14339: GO 14570
14341: LD_INT 23
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14360
14349: POP
// bc_type := b_ext_laser ; 24 :
14350: LD_ADDR_OWVAR 42
14354: PUSH
14355: LD_INT 25
14357: ST_TO_ADDR
14358: GO 14570
14360: LD_INT 24
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14379
14368: POP
// bc_type := b_control_tower ; 25 :
14369: LD_ADDR_OWVAR 42
14373: PUSH
14374: LD_INT 36
14376: ST_TO_ADDR
14377: GO 14570
14379: LD_INT 25
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14398
14387: POP
// bc_type := b_breastwork ; 26 :
14388: LD_ADDR_OWVAR 42
14392: PUSH
14393: LD_INT 31
14395: ST_TO_ADDR
14396: GO 14570
14398: LD_INT 26
14400: DOUBLE
14401: EQUAL
14402: IFTRUE 14406
14404: GO 14417
14406: POP
// bc_type := b_bunker ; 27 :
14407: LD_ADDR_OWVAR 42
14411: PUSH
14412: LD_INT 32
14414: ST_TO_ADDR
14415: GO 14570
14417: LD_INT 27
14419: DOUBLE
14420: EQUAL
14421: IFTRUE 14425
14423: GO 14436
14425: POP
// bc_type := b_turret ; 28 :
14426: LD_ADDR_OWVAR 42
14430: PUSH
14431: LD_INT 33
14433: ST_TO_ADDR
14434: GO 14570
14436: LD_INT 28
14438: DOUBLE
14439: EQUAL
14440: IFTRUE 14444
14442: GO 14455
14444: POP
// bc_type := b_armoury ; 29 :
14445: LD_ADDR_OWVAR 42
14449: PUSH
14450: LD_INT 4
14452: ST_TO_ADDR
14453: GO 14570
14455: LD_INT 29
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14474
14463: POP
// bc_type := b_barracks ; 30 :
14464: LD_ADDR_OWVAR 42
14468: PUSH
14469: LD_INT 5
14471: ST_TO_ADDR
14472: GO 14570
14474: LD_INT 30
14476: DOUBLE
14477: EQUAL
14478: IFTRUE 14482
14480: GO 14493
14482: POP
// bc_type := b_solar_power ; 31 :
14483: LD_ADDR_OWVAR 42
14487: PUSH
14488: LD_INT 27
14490: ST_TO_ADDR
14491: GO 14570
14493: LD_INT 31
14495: DOUBLE
14496: EQUAL
14497: IFTRUE 14501
14499: GO 14512
14501: POP
// bc_type := b_oil_power ; 32 :
14502: LD_ADDR_OWVAR 42
14506: PUSH
14507: LD_INT 26
14509: ST_TO_ADDR
14510: GO 14570
14512: LD_INT 32
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14531
14520: POP
// bc_type := b_siberite_power ; 33 :
14521: LD_ADDR_OWVAR 42
14525: PUSH
14526: LD_INT 28
14528: ST_TO_ADDR
14529: GO 14570
14531: LD_INT 33
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14539
14537: GO 14550
14539: POP
// bc_type := b_oil_mine ; 34 :
14540: LD_ADDR_OWVAR 42
14544: PUSH
14545: LD_INT 29
14547: ST_TO_ADDR
14548: GO 14570
14550: LD_INT 34
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14558
14556: GO 14569
14558: POP
// bc_type := b_siberite_mine ; end ;
14559: LD_ADDR_OWVAR 42
14563: PUSH
14564: LD_INT 30
14566: ST_TO_ADDR
14567: GO 14570
14569: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14570: LD_ADDR_VAR 0 8
14574: PUSH
14575: LD_VAR 0 5
14579: PPUSH
14580: LD_VAR 0 6
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: CALL_OW 47
14594: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14595: LD_OWVAR 42
14599: PUSH
14600: LD_INT 32
14602: PUSH
14603: LD_INT 33
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: IN
14610: IFFALSE 14626
// PlaceWeaponTurret ( b , weapon ) ;
14612: LD_VAR 0 8
14616: PPUSH
14617: LD_VAR 0 4
14621: PPUSH
14622: CALL_OW 431
// end ;
14626: LD_VAR 0 7
14630: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14631: LD_INT 0
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14637: LD_ADDR_VAR 0 4
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_OWVAR 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: LD_INT 30
14659: PUSH
14660: LD_INT 0
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 30
14669: PUSH
14670: LD_INT 1
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL_OW 69
14690: ST_TO_ADDR
// if not tmp then
14691: LD_VAR 0 4
14695: NOT
14696: IFFALSE 14700
// exit ;
14698: GO 14759
// for i in tmp do
14700: LD_ADDR_VAR 0 2
14704: PUSH
14705: LD_VAR 0 4
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14757
// for j = 1 to 3 do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_INT 3
14725: PUSH
14726: FOR_TO
14727: IFFALSE 14753
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14729: LD_VAR 0 2
14733: PPUSH
14734: CALL_OW 274
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 99999
14746: PPUSH
14747: CALL_OW 277
14751: GO 14726
14753: POP
14754: POP
14755: GO 14710
14757: POP
14758: POP
// end ;
14759: LD_VAR 0 1
14763: RET
// export function hHackSetLevel10 ; var i , j ; begin
14764: LD_INT 0
14766: PPUSH
14767: PPUSH
14768: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14769: LD_ADDR_VAR 0 2
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PPUSH
14784: CALL_OW 69
14788: PUSH
14789: FOR_IN
14790: IFFALSE 14842
// if IsSelected ( i ) then
14792: LD_VAR 0 2
14796: PPUSH
14797: CALL_OW 306
14801: IFFALSE 14840
// begin for j := 1 to 4 do
14803: LD_ADDR_VAR 0 3
14807: PUSH
14808: DOUBLE
14809: LD_INT 1
14811: DEC
14812: ST_TO_ADDR
14813: LD_INT 4
14815: PUSH
14816: FOR_TO
14817: IFFALSE 14838
// SetSkill ( i , j , 10 ) ;
14819: LD_VAR 0 2
14823: PPUSH
14824: LD_VAR 0 3
14828: PPUSH
14829: LD_INT 10
14831: PPUSH
14832: CALL_OW 237
14836: GO 14816
14838: POP
14839: POP
// end ;
14840: GO 14789
14842: POP
14843: POP
// end ;
14844: LD_VAR 0 1
14848: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
14853: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_OWVAR 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14932
// begin for j := 1 to 4 do
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: DOUBLE
14899: LD_INT 1
14901: DEC
14902: ST_TO_ADDR
14903: LD_INT 4
14905: PUSH
14906: FOR_TO
14907: IFFALSE 14928
// SetSkill ( i , j , 10 ) ;
14909: LD_VAR 0 2
14913: PPUSH
14914: LD_VAR 0 3
14918: PPUSH
14919: LD_INT 10
14921: PPUSH
14922: CALL_OW 237
14926: GO 14906
14928: POP
14929: POP
// end ;
14930: GO 14890
14932: POP
14933: POP
// end ;
14934: LD_VAR 0 1
14938: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14939: LD_INT 0
14941: PPUSH
// uc_side := your_side ;
14942: LD_ADDR_OWVAR 20
14946: PUSH
14947: LD_OWVAR 2
14951: ST_TO_ADDR
// uc_nation := nation ;
14952: LD_ADDR_OWVAR 21
14956: PUSH
14957: LD_VAR 0 1
14961: ST_TO_ADDR
// InitHc ;
14962: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14966: LD_INT 0
14968: PPUSH
14969: LD_VAR 0 2
14973: PPUSH
14974: LD_VAR 0 3
14978: PPUSH
14979: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14983: LD_VAR 0 4
14987: PPUSH
14988: LD_VAR 0 5
14992: PPUSH
14993: CALL_OW 428
14997: PUSH
14998: LD_INT 0
15000: EQUAL
15001: IFFALSE 15025
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15003: CALL_OW 44
15007: PPUSH
15008: LD_VAR 0 4
15012: PPUSH
15013: LD_VAR 0 5
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 48
// end ;
15025: LD_VAR 0 6
15029: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
// uc_side := your_side ;
15034: LD_ADDR_OWVAR 20
15038: PUSH
15039: LD_OWVAR 2
15043: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15044: LD_VAR 0 1
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: LD_INT 2
15054: PUSH
15055: LD_INT 3
15057: PUSH
15058: LD_INT 4
15060: PUSH
15061: LD_INT 5
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: IN
15071: IFFALSE 15083
// uc_nation := nation_american else
15073: LD_ADDR_OWVAR 21
15077: PUSH
15078: LD_INT 1
15080: ST_TO_ADDR
15081: GO 15126
// if chassis in [ 11 , 12 , 13 , 14 ] then
15083: LD_VAR 0 1
15087: PUSH
15088: LD_INT 11
15090: PUSH
15091: LD_INT 12
15093: PUSH
15094: LD_INT 13
15096: PUSH
15097: LD_INT 14
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: IN
15106: IFFALSE 15118
// uc_nation := nation_arabian else
15108: LD_ADDR_OWVAR 21
15112: PUSH
15113: LD_INT 2
15115: ST_TO_ADDR
15116: GO 15126
// uc_nation := nation_russian ;
15118: LD_ADDR_OWVAR 21
15122: PUSH
15123: LD_INT 3
15125: ST_TO_ADDR
// vc_chassis := chassis ;
15126: LD_ADDR_OWVAR 37
15130: PUSH
15131: LD_VAR 0 1
15135: ST_TO_ADDR
// vc_engine := engine ;
15136: LD_ADDR_OWVAR 39
15140: PUSH
15141: LD_VAR 0 2
15145: ST_TO_ADDR
// vc_control := control ;
15146: LD_ADDR_OWVAR 38
15150: PUSH
15151: LD_VAR 0 3
15155: ST_TO_ADDR
// vc_weapon := weapon ;
15156: LD_ADDR_OWVAR 40
15160: PUSH
15161: LD_VAR 0 4
15165: ST_TO_ADDR
// un := CreateVehicle ;
15166: LD_ADDR_VAR 0 8
15170: PUSH
15171: CALL_OW 45
15175: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15176: LD_VAR 0 8
15180: PPUSH
15181: LD_INT 0
15183: PPUSH
15184: LD_INT 5
15186: PPUSH
15187: CALL_OW 12
15191: PPUSH
15192: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15196: LD_VAR 0 8
15200: PPUSH
15201: LD_VAR 0 5
15205: PPUSH
15206: LD_VAR 0 6
15210: PPUSH
15211: LD_INT 1
15213: PPUSH
15214: CALL_OW 48
// end ;
15218: LD_VAR 0 7
15222: RET
// export hInvincible ; every 1 do
15223: GO 15225
15225: DISABLE
// hInvincible := [ ] ;
15226: LD_ADDR_EXP 64
15230: PUSH
15231: EMPTY
15232: ST_TO_ADDR
15233: END
// every 10 do var i ;
15234: GO 15236
15236: DISABLE
15237: LD_INT 0
15239: PPUSH
// begin enable ;
15240: ENABLE
// if not hInvincible then
15241: LD_EXP 64
15245: NOT
15246: IFFALSE 15250
// exit ;
15248: GO 15294
// for i in hInvincible do
15250: LD_ADDR_VAR 0 1
15254: PUSH
15255: LD_EXP 64
15259: PUSH
15260: FOR_IN
15261: IFFALSE 15292
// if GetLives ( i ) < 1000 then
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 256
15272: PUSH
15273: LD_INT 1000
15275: LESS
15276: IFFALSE 15290
// SetLives ( i , 1000 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 1000
15285: PPUSH
15286: CALL_OW 234
15290: GO 15260
15292: POP
15293: POP
// end ;
15294: PPOPN 1
15296: END
// export function hHackInvincible ; var i ; begin
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 21
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 21
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: PPUSH
15334: CALL_OW 69
15338: PUSH
15339: FOR_IN
15340: IFFALSE 15401
// if IsSelected ( i ) then
15342: LD_VAR 0 2
15346: PPUSH
15347: CALL_OW 306
15351: IFFALSE 15399
// begin if i in hInvincible then
15353: LD_VAR 0 2
15357: PUSH
15358: LD_EXP 64
15362: IN
15363: IFFALSE 15383
// hInvincible := hInvincible diff i else
15365: LD_ADDR_EXP 64
15369: PUSH
15370: LD_EXP 64
15374: PUSH
15375: LD_VAR 0 2
15379: DIFF
15380: ST_TO_ADDR
15381: GO 15399
// hInvincible := hInvincible union i ;
15383: LD_ADDR_EXP 64
15387: PUSH
15388: LD_EXP 64
15392: PUSH
15393: LD_VAR 0 2
15397: UNION
15398: ST_TO_ADDR
// end ;
15399: GO 15339
15401: POP
15402: POP
// end ;
15403: LD_VAR 0 1
15407: RET
// export function hHackInvisible ; var i , j ; begin
15408: LD_INT 0
15410: PPUSH
15411: PPUSH
15412: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15413: LD_ADDR_VAR 0 2
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 69
15432: PUSH
15433: FOR_IN
15434: IFFALSE 15458
// if IsSelected ( i ) then
15436: LD_VAR 0 2
15440: PPUSH
15441: CALL_OW 306
15445: IFFALSE 15456
// ComForceInvisible ( i ) ;
15447: LD_VAR 0 2
15451: PPUSH
15452: CALL_OW 496
15456: GO 15433
15458: POP
15459: POP
// end ;
15460: LD_VAR 0 1
15464: RET
// export function hHackChangeYourSide ; begin
15465: LD_INT 0
15467: PPUSH
// if your_side = 8 then
15468: LD_OWVAR 2
15472: PUSH
15473: LD_INT 8
15475: EQUAL
15476: IFFALSE 15488
// your_side := 0 else
15478: LD_ADDR_OWVAR 2
15482: PUSH
15483: LD_INT 0
15485: ST_TO_ADDR
15486: GO 15502
// your_side := your_side + 1 ;
15488: LD_ADDR_OWVAR 2
15492: PUSH
15493: LD_OWVAR 2
15497: PUSH
15498: LD_INT 1
15500: PLUS
15501: ST_TO_ADDR
// end ;
15502: LD_VAR 0 1
15506: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15507: LD_INT 0
15509: PPUSH
15510: PPUSH
15511: PPUSH
// for i in all_units do
15512: LD_ADDR_VAR 0 2
15516: PUSH
15517: LD_OWVAR 3
15521: PUSH
15522: FOR_IN
15523: IFFALSE 15601
// if IsSelected ( i ) then
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 306
15534: IFFALSE 15599
// begin j := GetSide ( i ) ;
15536: LD_ADDR_VAR 0 3
15540: PUSH
15541: LD_VAR 0 2
15545: PPUSH
15546: CALL_OW 255
15550: ST_TO_ADDR
// if j = 8 then
15551: LD_VAR 0 3
15555: PUSH
15556: LD_INT 8
15558: EQUAL
15559: IFFALSE 15571
// j := 0 else
15561: LD_ADDR_VAR 0 3
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
15569: GO 15585
// j := j + 1 ;
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_VAR 0 3
15580: PUSH
15581: LD_INT 1
15583: PLUS
15584: ST_TO_ADDR
// SetSide ( i , j ) ;
15585: LD_VAR 0 2
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: CALL_OW 235
// end ;
15599: GO 15522
15601: POP
15602: POP
// end ;
15603: LD_VAR 0 1
15607: RET
// export function hHackFog ; begin
15608: LD_INT 0
15610: PPUSH
// FogOff ( true ) ;
15611: LD_INT 1
15613: PPUSH
15614: CALL_OW 344
// end ;
15618: LD_VAR 0 1
15622: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15623: LD_INT 0
15625: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: LD_VAR 0 2
15635: PPUSH
15636: LD_VAR 0 3
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 483
// CenterOnXY ( x , y ) ;
15651: LD_VAR 0 2
15655: PPUSH
15656: LD_VAR 0 3
15660: PPUSH
15661: CALL_OW 84
// end ; end_of_file
15665: LD_VAR 0 4
15669: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15670: LD_VAR 0 1
15674: PUSH
15675: LD_INT 200
15677: DOUBLE
15678: GREATEREQUAL
15679: IFFALSE 15687
15681: LD_INT 299
15683: DOUBLE
15684: LESSEQUAL
15685: IFTRUE 15689
15687: GO 15721
15689: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15690: LD_VAR 0 1
15694: PPUSH
15695: LD_VAR 0 2
15699: PPUSH
15700: LD_VAR 0 3
15704: PPUSH
15705: LD_VAR 0 4
15709: PPUSH
15710: LD_VAR 0 5
15714: PPUSH
15715: CALL 15955 0 5
15719: GO 15798
15721: LD_INT 300
15723: DOUBLE
15724: GREATEREQUAL
15725: IFFALSE 15733
15727: LD_INT 399
15729: DOUBLE
15730: LESSEQUAL
15731: IFTRUE 15735
15733: GO 15797
15735: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15736: LD_VAR 0 1
15740: PPUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_VAR 0 3
15750: PPUSH
15751: LD_VAR 0 4
15755: PPUSH
15756: LD_VAR 0 5
15760: PPUSH
15761: LD_VAR 0 6
15765: PPUSH
15766: LD_VAR 0 7
15770: PPUSH
15771: LD_VAR 0 8
15775: PPUSH
15776: LD_VAR 0 9
15780: PPUSH
15781: LD_VAR 0 10
15785: PPUSH
15786: LD_VAR 0 11
15790: PPUSH
15791: CALL 13690 0 11
15795: GO 15798
15797: POP
// end ;
15798: PPOPN 11
15800: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15801: LD_VAR 0 1
15805: PPUSH
15806: LD_VAR 0 2
15810: PPUSH
15811: LD_VAR 0 3
15815: PPUSH
15816: LD_VAR 0 4
15820: PPUSH
15821: LD_VAR 0 5
15825: PPUSH
15826: CALL 15947 0 5
// end ; end_of_file
15830: PPOPN 5
15832: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15833: LD_INT 0
15835: PPUSH
15836: PPUSH
15837: PPUSH
15838: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 264
15848: PUSH
15849: LD_EXP 81
15853: EQUAL
15854: IFFALSE 15926
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15856: LD_INT 68
15858: PPUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 255
15868: PPUSH
15869: CALL_OW 321
15873: PUSH
15874: LD_INT 2
15876: EQUAL
15877: IFFALSE 15889
// eff := 70 else
15879: LD_ADDR_VAR 0 4
15883: PUSH
15884: LD_INT 70
15886: ST_TO_ADDR
15887: GO 15897
// eff := 30 ;
15889: LD_ADDR_VAR 0 4
15893: PUSH
15894: LD_INT 30
15896: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15897: LD_VAR 0 1
15901: PPUSH
15902: CALL_OW 250
15906: PPUSH
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 251
15916: PPUSH
15917: LD_VAR 0 4
15921: PPUSH
15922: CALL_OW 495
// end ; end ;
15926: LD_VAR 0 2
15930: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15931: LD_INT 0
15933: PPUSH
// end ;
15934: LD_VAR 0 4
15938: RET
// export function SOS_Command ( cmd ) ; begin
15939: LD_INT 0
15941: PPUSH
// end ;
15942: LD_VAR 0 2
15946: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15947: LD_INT 0
15949: PPUSH
// end ;
15950: LD_VAR 0 6
15954: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15955: LD_INT 0
15957: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15958: LD_VAR 0 1
15962: PUSH
15963: LD_INT 250
15965: EQUAL
15966: PUSH
15967: LD_VAR 0 2
15971: PPUSH
15972: CALL_OW 264
15976: PUSH
15977: LD_EXP 84
15981: EQUAL
15982: AND
15983: IFFALSE 16004
// MinerPlaceMine ( unit , x , y ) ;
15985: LD_VAR 0 2
15989: PPUSH
15990: LD_VAR 0 4
15994: PPUSH
15995: LD_VAR 0 5
15999: PPUSH
16000: CALL 18353 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16004: LD_VAR 0 1
16008: PUSH
16009: LD_INT 251
16011: EQUAL
16012: PUSH
16013: LD_VAR 0 2
16017: PPUSH
16018: CALL_OW 264
16022: PUSH
16023: LD_EXP 84
16027: EQUAL
16028: AND
16029: IFFALSE 16050
// MinerDetonateMine ( unit , x , y ) ;
16031: LD_VAR 0 2
16035: PPUSH
16036: LD_VAR 0 4
16040: PPUSH
16041: LD_VAR 0 5
16045: PPUSH
16046: CALL 18630 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16050: LD_VAR 0 1
16054: PUSH
16055: LD_INT 252
16057: EQUAL
16058: PUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 264
16068: PUSH
16069: LD_EXP 84
16073: EQUAL
16074: AND
16075: IFFALSE 16096
// MinerCreateMinefield ( unit , x , y ) ;
16077: LD_VAR 0 2
16081: PPUSH
16082: LD_VAR 0 4
16086: PPUSH
16087: LD_VAR 0 5
16091: PPUSH
16092: CALL 19047 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16096: LD_VAR 0 1
16100: PUSH
16101: LD_INT 253
16103: EQUAL
16104: PUSH
16105: LD_VAR 0 2
16109: PPUSH
16110: CALL_OW 257
16114: PUSH
16115: LD_INT 5
16117: EQUAL
16118: AND
16119: IFFALSE 16140
// ComBinocular ( unit , x , y ) ;
16121: LD_VAR 0 2
16125: PPUSH
16126: LD_VAR 0 4
16130: PPUSH
16131: LD_VAR 0 5
16135: PPUSH
16136: CALL 19418 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16140: LD_VAR 0 1
16144: PUSH
16145: LD_INT 254
16147: EQUAL
16148: PUSH
16149: LD_VAR 0 2
16153: PPUSH
16154: CALL_OW 264
16158: PUSH
16159: LD_EXP 79
16163: EQUAL
16164: AND
16165: PUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: CALL_OW 263
16175: PUSH
16176: LD_INT 3
16178: EQUAL
16179: AND
16180: IFFALSE 16196
// HackDestroyVehicle ( unit , selectedUnit ) ;
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: CALL 17713 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16196: LD_VAR 0 1
16200: PUSH
16201: LD_INT 255
16203: EQUAL
16204: PUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 264
16214: PUSH
16215: LD_INT 14
16217: PUSH
16218: LD_INT 53
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: IN
16225: AND
16226: PUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL_OW 488
16241: AND
16242: IFFALSE 16266
// CutTreeXYR ( unit , x , y , 12 ) ;
16244: LD_VAR 0 2
16248: PPUSH
16249: LD_VAR 0 4
16253: PPUSH
16254: LD_VAR 0 5
16258: PPUSH
16259: LD_INT 12
16261: PPUSH
16262: CALL 16279 0 4
// end ;
16266: LD_VAR 0 6
16270: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
16271: LD_INT 0
16273: PPUSH
// end ;
16274: LD_VAR 0 4
16278: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
16289: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16290: LD_VAR 0 1
16294: NOT
16295: PUSH
16296: LD_VAR 0 2
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: CALL_OW 488
16310: NOT
16311: OR
16312: PUSH
16313: LD_VAR 0 4
16317: NOT
16318: OR
16319: IFFALSE 16323
// exit ;
16321: GO 16663
// list := [ ] ;
16323: LD_ADDR_VAR 0 13
16327: PUSH
16328: EMPTY
16329: ST_TO_ADDR
// if x - r < 0 then
16330: LD_VAR 0 2
16334: PUSH
16335: LD_VAR 0 4
16339: MINUS
16340: PUSH
16341: LD_INT 0
16343: LESS
16344: IFFALSE 16356
// min_x := 0 else
16346: LD_ADDR_VAR 0 7
16350: PUSH
16351: LD_INT 0
16353: ST_TO_ADDR
16354: GO 16372
// min_x := x - r ;
16356: LD_ADDR_VAR 0 7
16360: PUSH
16361: LD_VAR 0 2
16365: PUSH
16366: LD_VAR 0 4
16370: MINUS
16371: ST_TO_ADDR
// if y - r < 0 then
16372: LD_VAR 0 3
16376: PUSH
16377: LD_VAR 0 4
16381: MINUS
16382: PUSH
16383: LD_INT 0
16385: LESS
16386: IFFALSE 16398
// min_y := 0 else
16388: LD_ADDR_VAR 0 8
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
16396: GO 16414
// min_y := y - r ;
16398: LD_ADDR_VAR 0 8
16402: PUSH
16403: LD_VAR 0 3
16407: PUSH
16408: LD_VAR 0 4
16412: MINUS
16413: ST_TO_ADDR
// max_x := x + r ;
16414: LD_ADDR_VAR 0 9
16418: PUSH
16419: LD_VAR 0 2
16423: PUSH
16424: LD_VAR 0 4
16428: PLUS
16429: ST_TO_ADDR
// max_y := y + r ;
16430: LD_ADDR_VAR 0 10
16434: PUSH
16435: LD_VAR 0 3
16439: PUSH
16440: LD_VAR 0 4
16444: PLUS
16445: ST_TO_ADDR
// for _x = min_x to max_x do
16446: LD_ADDR_VAR 0 11
16450: PUSH
16451: DOUBLE
16452: LD_VAR 0 7
16456: DEC
16457: ST_TO_ADDR
16458: LD_VAR 0 9
16462: PUSH
16463: FOR_TO
16464: IFFALSE 16581
// for _y = min_y to max_y do
16466: LD_ADDR_VAR 0 12
16470: PUSH
16471: DOUBLE
16472: LD_VAR 0 8
16476: DEC
16477: ST_TO_ADDR
16478: LD_VAR 0 10
16482: PUSH
16483: FOR_TO
16484: IFFALSE 16577
// begin if not ValidHex ( _x , _y ) then
16486: LD_VAR 0 11
16490: PPUSH
16491: LD_VAR 0 12
16495: PPUSH
16496: CALL_OW 488
16500: NOT
16501: IFFALSE 16505
// continue ;
16503: GO 16483
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16505: LD_VAR 0 11
16509: PPUSH
16510: LD_VAR 0 12
16514: PPUSH
16515: CALL_OW 351
16519: PUSH
16520: LD_VAR 0 11
16524: PPUSH
16525: LD_VAR 0 12
16529: PPUSH
16530: CALL_OW 554
16534: AND
16535: IFFALSE 16575
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16537: LD_ADDR_VAR 0 13
16541: PUSH
16542: LD_VAR 0 13
16546: PPUSH
16547: LD_VAR 0 13
16551: PUSH
16552: LD_INT 1
16554: PLUS
16555: PPUSH
16556: LD_VAR 0 11
16560: PUSH
16561: LD_VAR 0 12
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PPUSH
16570: CALL_OW 2
16574: ST_TO_ADDR
// end ;
16575: GO 16483
16577: POP
16578: POP
16579: GO 16463
16581: POP
16582: POP
// if not list then
16583: LD_VAR 0 13
16587: NOT
16588: IFFALSE 16592
// exit ;
16590: GO 16663
// for i in list do
16592: LD_ADDR_VAR 0 6
16596: PUSH
16597: LD_VAR 0 13
16601: PUSH
16602: FOR_IN
16603: IFFALSE 16661
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16605: LD_VAR 0 1
16609: PPUSH
16610: LD_STRING M
16612: PUSH
16613: LD_VAR 0 6
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PUSH
16622: LD_VAR 0 6
16626: PUSH
16627: LD_INT 2
16629: ARRAY
16630: PUSH
16631: LD_INT 0
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 0
16639: PUSH
16640: LD_INT 0
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: PPUSH
16655: CALL_OW 447
16659: GO 16602
16661: POP
16662: POP
// end ;
16663: LD_VAR 0 5
16667: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16668: LD_EXP 67
16672: NOT
16673: IFFALSE 16723
16675: GO 16677
16677: DISABLE
// begin initHack := true ;
16678: LD_ADDR_EXP 67
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// hackTanks := [ ] ;
16686: LD_ADDR_EXP 68
16690: PUSH
16691: EMPTY
16692: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16693: LD_ADDR_EXP 69
16697: PUSH
16698: EMPTY
16699: ST_TO_ADDR
// hackLimit := 3 ;
16700: LD_ADDR_EXP 70
16704: PUSH
16705: LD_INT 3
16707: ST_TO_ADDR
// hackDist := 12 ;
16708: LD_ADDR_EXP 71
16712: PUSH
16713: LD_INT 12
16715: ST_TO_ADDR
// hackCounter := [ ] ;
16716: LD_ADDR_EXP 72
16720: PUSH
16721: EMPTY
16722: ST_TO_ADDR
// end ;
16723: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16724: LD_EXP 67
16728: PUSH
16729: LD_INT 34
16731: PUSH
16732: LD_EXP 79
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: AND
16746: IFFALSE 17001
16748: GO 16750
16750: DISABLE
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
// begin enable ;
16755: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16756: LD_ADDR_VAR 0 1
16760: PUSH
16761: LD_INT 34
16763: PUSH
16764: LD_EXP 79
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PPUSH
16773: CALL_OW 69
16777: PUSH
16778: FOR_IN
16779: IFFALSE 16999
// begin if not i in hackTanks then
16781: LD_VAR 0 1
16785: PUSH
16786: LD_EXP 68
16790: IN
16791: NOT
16792: IFFALSE 16875
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16794: LD_ADDR_EXP 68
16798: PUSH
16799: LD_EXP 68
16803: PPUSH
16804: LD_EXP 68
16808: PUSH
16809: LD_INT 1
16811: PLUS
16812: PPUSH
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL_OW 1
16822: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16823: LD_ADDR_EXP 69
16827: PUSH
16828: LD_EXP 69
16832: PPUSH
16833: LD_EXP 69
16837: PUSH
16838: LD_INT 1
16840: PLUS
16841: PPUSH
16842: EMPTY
16843: PPUSH
16844: CALL_OW 1
16848: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16849: LD_ADDR_EXP 72
16853: PUSH
16854: LD_EXP 72
16858: PPUSH
16859: LD_EXP 72
16863: PUSH
16864: LD_INT 1
16866: PLUS
16867: PPUSH
16868: EMPTY
16869: PPUSH
16870: CALL_OW 1
16874: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 302
16884: NOT
16885: IFFALSE 16898
// begin HackUnlinkAll ( i ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL 17004 0 1
// continue ;
16896: GO 16778
// end ; HackCheckCapturedStatus ( i ) ;
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL 17447 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16907: LD_ADDR_VAR 0 2
16911: PUSH
16912: LD_INT 81
16914: PUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 255
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 33
16931: PUSH
16932: LD_INT 3
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 91
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: LD_EXP 71
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 50
16959: PUSH
16960: EMPTY
16961: LIST
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PPUSH
16969: CALL_OW 69
16973: ST_TO_ADDR
// if not tmp then
16974: LD_VAR 0 2
16978: NOT
16979: IFFALSE 16983
// continue ;
16981: GO 16778
// HackLink ( i , tmp ) ;
16983: LD_VAR 0 1
16987: PPUSH
16988: LD_VAR 0 2
16992: PPUSH
16993: CALL 17140 0 2
// end ;
16997: GO 16778
16999: POP
17000: POP
// end ;
17001: PPOPN 2
17003: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17004: LD_INT 0
17006: PPUSH
17007: PPUSH
17008: PPUSH
// if not hack in hackTanks then
17009: LD_VAR 0 1
17013: PUSH
17014: LD_EXP 68
17018: IN
17019: NOT
17020: IFFALSE 17024
// exit ;
17022: GO 17135
// index := GetElementIndex ( hackTanks , hack ) ;
17024: LD_ADDR_VAR 0 4
17028: PUSH
17029: LD_EXP 68
17033: PPUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL 24777 0 2
17043: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17044: LD_EXP 69
17048: PUSH
17049: LD_VAR 0 4
17053: ARRAY
17054: IFFALSE 17135
// begin for i in hackTanksCaptured [ index ] do
17056: LD_ADDR_VAR 0 3
17060: PUSH
17061: LD_EXP 69
17065: PUSH
17066: LD_VAR 0 4
17070: ARRAY
17071: PUSH
17072: FOR_IN
17073: IFFALSE 17099
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17075: LD_VAR 0 3
17079: PUSH
17080: LD_INT 1
17082: ARRAY
17083: PPUSH
17084: LD_VAR 0 3
17088: PUSH
17089: LD_INT 2
17091: ARRAY
17092: PPUSH
17093: CALL_OW 235
17097: GO 17072
17099: POP
17100: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17101: LD_ADDR_EXP 69
17105: PUSH
17106: LD_EXP 69
17110: PPUSH
17111: LD_VAR 0 4
17115: PPUSH
17116: EMPTY
17117: PPUSH
17118: CALL_OW 1
17122: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17123: LD_VAR 0 1
17127: PPUSH
17128: LD_INT 0
17130: PPUSH
17131: CALL_OW 505
// end ; end ;
17135: LD_VAR 0 2
17139: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// if not hack in hackTanks or not vehicles then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_EXP 68
17154: IN
17155: NOT
17156: PUSH
17157: LD_VAR 0 2
17161: NOT
17162: OR
17163: IFFALSE 17167
// exit ;
17165: GO 17442
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17167: LD_ADDR_VAR 0 2
17171: PUSH
17172: LD_VAR 0 1
17176: PPUSH
17177: LD_VAR 0 2
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: CALL 25427 0 4
17192: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17193: LD_ADDR_VAR 0 5
17197: PUSH
17198: LD_EXP 68
17202: PPUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL 24777 0 2
17212: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17213: LD_EXP 69
17217: PUSH
17218: LD_VAR 0 5
17222: ARRAY
17223: PUSH
17224: LD_EXP 70
17228: LESS
17229: IFFALSE 17418
// begin for i := 1 to vehicles do
17231: LD_ADDR_VAR 0 4
17235: PUSH
17236: DOUBLE
17237: LD_INT 1
17239: DEC
17240: ST_TO_ADDR
17241: LD_VAR 0 2
17245: PUSH
17246: FOR_TO
17247: IFFALSE 17416
// begin if hackTanksCaptured [ index ] = hackLimit then
17249: LD_EXP 69
17253: PUSH
17254: LD_VAR 0 5
17258: ARRAY
17259: PUSH
17260: LD_EXP 70
17264: EQUAL
17265: IFFALSE 17269
// break ;
17267: GO 17416
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17269: LD_ADDR_EXP 72
17273: PUSH
17274: LD_EXP 72
17278: PPUSH
17279: LD_VAR 0 5
17283: PPUSH
17284: LD_EXP 72
17288: PUSH
17289: LD_VAR 0 5
17293: ARRAY
17294: PUSH
17295: LD_INT 1
17297: PLUS
17298: PPUSH
17299: CALL_OW 1
17303: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17304: LD_ADDR_EXP 69
17308: PUSH
17309: LD_EXP 69
17313: PPUSH
17314: LD_VAR 0 5
17318: PUSH
17319: LD_EXP 69
17323: PUSH
17324: LD_VAR 0 5
17328: ARRAY
17329: PUSH
17330: LD_INT 1
17332: PLUS
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PPUSH
17338: LD_VAR 0 2
17342: PUSH
17343: LD_VAR 0 4
17347: ARRAY
17348: PUSH
17349: LD_VAR 0 2
17353: PUSH
17354: LD_VAR 0 4
17358: ARRAY
17359: PPUSH
17360: CALL_OW 255
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL 24992 0 3
17373: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17374: LD_VAR 0 2
17378: PUSH
17379: LD_VAR 0 4
17383: ARRAY
17384: PPUSH
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 255
17394: PPUSH
17395: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17399: LD_VAR 0 2
17403: PUSH
17404: LD_VAR 0 4
17408: ARRAY
17409: PPUSH
17410: CALL_OW 141
// end ;
17414: GO 17246
17416: POP
17417: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_EXP 69
17427: PUSH
17428: LD_VAR 0 5
17432: ARRAY
17433: PUSH
17434: LD_INT 0
17436: PLUS
17437: PPUSH
17438: CALL_OW 505
// end ;
17442: LD_VAR 0 3
17446: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17447: LD_INT 0
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
// if not hack in hackTanks then
17453: LD_VAR 0 1
17457: PUSH
17458: LD_EXP 68
17462: IN
17463: NOT
17464: IFFALSE 17468
// exit ;
17466: GO 17708
// index := GetElementIndex ( hackTanks , hack ) ;
17468: LD_ADDR_VAR 0 4
17472: PUSH
17473: LD_EXP 68
17477: PPUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL 24777 0 2
17487: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17488: LD_ADDR_VAR 0 3
17492: PUSH
17493: DOUBLE
17494: LD_EXP 69
17498: PUSH
17499: LD_VAR 0 4
17503: ARRAY
17504: INC
17505: ST_TO_ADDR
17506: LD_INT 1
17508: PUSH
17509: FOR_DOWNTO
17510: IFFALSE 17682
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17512: LD_ADDR_VAR 0 5
17516: PUSH
17517: LD_EXP 69
17521: PUSH
17522: LD_VAR 0 4
17526: ARRAY
17527: PUSH
17528: LD_VAR 0 3
17532: ARRAY
17533: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17534: LD_VAR 0 5
17538: PUSH
17539: LD_INT 1
17541: ARRAY
17542: PPUSH
17543: CALL_OW 302
17547: NOT
17548: PUSH
17549: LD_VAR 0 5
17553: PUSH
17554: LD_INT 1
17556: ARRAY
17557: PPUSH
17558: CALL_OW 255
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 255
17572: NONEQUAL
17573: OR
17574: IFFALSE 17680
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17576: LD_VAR 0 5
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 305
17589: PUSH
17590: LD_VAR 0 5
17594: PUSH
17595: LD_INT 1
17597: ARRAY
17598: PPUSH
17599: CALL_OW 255
17603: PUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 255
17613: EQUAL
17614: AND
17615: IFFALSE 17639
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17617: LD_VAR 0 5
17621: PUSH
17622: LD_INT 1
17624: ARRAY
17625: PPUSH
17626: LD_VAR 0 5
17630: PUSH
17631: LD_INT 2
17633: ARRAY
17634: PPUSH
17635: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17639: LD_ADDR_EXP 69
17643: PUSH
17644: LD_EXP 69
17648: PPUSH
17649: LD_VAR 0 4
17653: PPUSH
17654: LD_EXP 69
17658: PUSH
17659: LD_VAR 0 4
17663: ARRAY
17664: PPUSH
17665: LD_VAR 0 3
17669: PPUSH
17670: CALL_OW 3
17674: PPUSH
17675: CALL_OW 1
17679: ST_TO_ADDR
// end ; end ;
17680: GO 17509
17682: POP
17683: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_EXP 69
17693: PUSH
17694: LD_VAR 0 4
17698: ARRAY
17699: PUSH
17700: LD_INT 0
17702: PLUS
17703: PPUSH
17704: CALL_OW 505
// end ;
17708: LD_VAR 0 2
17712: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17713: LD_INT 0
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
// if not hack in hackTanks then
17719: LD_VAR 0 1
17723: PUSH
17724: LD_EXP 68
17728: IN
17729: NOT
17730: IFFALSE 17734
// exit ;
17732: GO 17819
// index := GetElementIndex ( hackTanks , hack ) ;
17734: LD_ADDR_VAR 0 5
17738: PUSH
17739: LD_EXP 68
17743: PPUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL 24777 0 2
17753: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17754: LD_ADDR_VAR 0 4
17758: PUSH
17759: DOUBLE
17760: LD_INT 1
17762: DEC
17763: ST_TO_ADDR
17764: LD_EXP 69
17768: PUSH
17769: LD_VAR 0 5
17773: ARRAY
17774: PUSH
17775: FOR_TO
17776: IFFALSE 17817
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17778: LD_EXP 69
17782: PUSH
17783: LD_VAR 0 5
17787: ARRAY
17788: PUSH
17789: LD_VAR 0 4
17793: ARRAY
17794: PUSH
17795: LD_INT 1
17797: ARRAY
17798: PUSH
17799: LD_VAR 0 2
17803: EQUAL
17804: IFFALSE 17815
// KillUnit ( vehicle ) ;
17806: LD_VAR 0 2
17810: PPUSH
17811: CALL_OW 66
17815: GO 17775
17817: POP
17818: POP
// end ;
17819: LD_VAR 0 3
17823: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17824: LD_EXP 73
17828: NOT
17829: IFFALSE 17864
17831: GO 17833
17833: DISABLE
// begin initMiner := true ;
17834: LD_ADDR_EXP 73
17838: PUSH
17839: LD_INT 1
17841: ST_TO_ADDR
// minersList := [ ] ;
17842: LD_ADDR_EXP 74
17846: PUSH
17847: EMPTY
17848: ST_TO_ADDR
// minerMinesList := [ ] ;
17849: LD_ADDR_EXP 75
17853: PUSH
17854: EMPTY
17855: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17856: LD_ADDR_EXP 76
17860: PUSH
17861: LD_INT 5
17863: ST_TO_ADDR
// end ;
17864: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17865: LD_EXP 73
17869: PUSH
17870: LD_INT 34
17872: PUSH
17873: LD_EXP 84
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: AND
17887: IFFALSE 18350
17889: GO 17891
17891: DISABLE
17892: LD_INT 0
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
// begin enable ;
17898: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: LD_INT 34
17906: PUSH
17907: LD_EXP 84
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: PUSH
17921: FOR_IN
17922: IFFALSE 17994
// begin if not i in minersList then
17924: LD_VAR 0 1
17928: PUSH
17929: LD_EXP 74
17933: IN
17934: NOT
17935: IFFALSE 17992
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17937: LD_ADDR_EXP 74
17941: PUSH
17942: LD_EXP 74
17946: PPUSH
17947: LD_EXP 74
17951: PUSH
17952: LD_INT 1
17954: PLUS
17955: PPUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 1
17965: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17966: LD_ADDR_EXP 75
17970: PUSH
17971: LD_EXP 75
17975: PPUSH
17976: LD_EXP 75
17980: PUSH
17981: LD_INT 1
17983: PLUS
17984: PPUSH
17985: EMPTY
17986: PPUSH
17987: CALL_OW 1
17991: ST_TO_ADDR
// end end ;
17992: GO 17921
17994: POP
17995: POP
// for i := minerMinesList downto 1 do
17996: LD_ADDR_VAR 0 1
18000: PUSH
18001: DOUBLE
18002: LD_EXP 75
18006: INC
18007: ST_TO_ADDR
18008: LD_INT 1
18010: PUSH
18011: FOR_DOWNTO
18012: IFFALSE 18348
// begin if IsLive ( minersList [ i ] ) then
18014: LD_EXP 74
18018: PUSH
18019: LD_VAR 0 1
18023: ARRAY
18024: PPUSH
18025: CALL_OW 300
18029: IFFALSE 18057
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18031: LD_EXP 74
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_EXP 75
18046: PUSH
18047: LD_VAR 0 1
18051: ARRAY
18052: PPUSH
18053: CALL_OW 505
// if not minerMinesList [ i ] then
18057: LD_EXP 75
18061: PUSH
18062: LD_VAR 0 1
18066: ARRAY
18067: NOT
18068: IFFALSE 18072
// continue ;
18070: GO 18011
// for j := minerMinesList [ i ] downto 1 do
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: DOUBLE
18078: LD_EXP 75
18082: PUSH
18083: LD_VAR 0 1
18087: ARRAY
18088: INC
18089: ST_TO_ADDR
18090: LD_INT 1
18092: PUSH
18093: FOR_DOWNTO
18094: IFFALSE 18344
// begin side := GetSide ( minersList [ i ] ) ;
18096: LD_ADDR_VAR 0 3
18100: PUSH
18101: LD_EXP 74
18105: PUSH
18106: LD_VAR 0 1
18110: ARRAY
18111: PPUSH
18112: CALL_OW 255
18116: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18117: LD_ADDR_VAR 0 4
18121: PUSH
18122: LD_EXP 75
18126: PUSH
18127: LD_VAR 0 1
18131: ARRAY
18132: PUSH
18133: LD_VAR 0 2
18137: ARRAY
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PPUSH
18143: LD_EXP 75
18147: PUSH
18148: LD_VAR 0 1
18152: ARRAY
18153: PUSH
18154: LD_VAR 0 2
18158: ARRAY
18159: PUSH
18160: LD_INT 2
18162: ARRAY
18163: PPUSH
18164: CALL_OW 428
18168: ST_TO_ADDR
// if not tmp then
18169: LD_VAR 0 4
18173: NOT
18174: IFFALSE 18178
// continue ;
18176: GO 18093
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18178: LD_VAR 0 4
18182: PUSH
18183: LD_INT 81
18185: PUSH
18186: LD_VAR 0 3
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PPUSH
18195: CALL_OW 69
18199: IN
18200: PUSH
18201: LD_EXP 75
18205: PUSH
18206: LD_VAR 0 1
18210: ARRAY
18211: PUSH
18212: LD_VAR 0 2
18216: ARRAY
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PPUSH
18222: LD_EXP 75
18226: PUSH
18227: LD_VAR 0 1
18231: ARRAY
18232: PUSH
18233: LD_VAR 0 2
18237: ARRAY
18238: PUSH
18239: LD_INT 2
18241: ARRAY
18242: PPUSH
18243: CALL_OW 458
18247: AND
18248: IFFALSE 18342
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18250: LD_EXP 75
18254: PUSH
18255: LD_VAR 0 1
18259: ARRAY
18260: PUSH
18261: LD_VAR 0 2
18265: ARRAY
18266: PUSH
18267: LD_INT 1
18269: ARRAY
18270: PPUSH
18271: LD_EXP 75
18275: PUSH
18276: LD_VAR 0 1
18280: ARRAY
18281: PUSH
18282: LD_VAR 0 2
18286: ARRAY
18287: PUSH
18288: LD_INT 2
18290: ARRAY
18291: PPUSH
18292: LD_VAR 0 3
18296: PPUSH
18297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18301: LD_ADDR_EXP 75
18305: PUSH
18306: LD_EXP 75
18310: PPUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: LD_EXP 75
18320: PUSH
18321: LD_VAR 0 1
18325: ARRAY
18326: PPUSH
18327: LD_VAR 0 2
18331: PPUSH
18332: CALL_OW 3
18336: PPUSH
18337: CALL_OW 1
18341: ST_TO_ADDR
// end ; end ;
18342: GO 18093
18344: POP
18345: POP
// end ;
18346: GO 18011
18348: POP
18349: POP
// end ;
18350: PPOPN 4
18352: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18353: LD_INT 0
18355: PPUSH
18356: PPUSH
// result := false ;
18357: LD_ADDR_VAR 0 4
18361: PUSH
18362: LD_INT 0
18364: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 264
18374: PUSH
18375: LD_EXP 84
18379: EQUAL
18380: NOT
18381: IFFALSE 18385
// exit ;
18383: GO 18625
// index := GetElementIndex ( minersList , unit ) ;
18385: LD_ADDR_VAR 0 5
18389: PUSH
18390: LD_EXP 74
18394: PPUSH
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL 24777 0 2
18404: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18405: LD_EXP 75
18409: PUSH
18410: LD_VAR 0 5
18414: ARRAY
18415: PUSH
18416: LD_EXP 76
18420: GREATEREQUAL
18421: IFFALSE 18425
// exit ;
18423: GO 18625
// ComMoveXY ( unit , x , y ) ;
18425: LD_VAR 0 1
18429: PPUSH
18430: LD_VAR 0 2
18434: PPUSH
18435: LD_VAR 0 3
18439: PPUSH
18440: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18444: LD_INT 35
18446: PPUSH
18447: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18451: LD_VAR 0 1
18455: PPUSH
18456: LD_VAR 0 2
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: CALL 55549 0 3
18470: NOT
18471: PUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 314
18481: AND
18482: IFFALSE 18486
// exit ;
18484: GO 18625
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18486: LD_VAR 0 2
18490: PPUSH
18491: LD_VAR 0 3
18495: PPUSH
18496: CALL_OW 428
18500: PUSH
18501: LD_VAR 0 1
18505: EQUAL
18506: PUSH
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL_OW 314
18516: NOT
18517: AND
18518: IFFALSE 18444
// PlaySoundXY ( x , y , PlantMine ) ;
18520: LD_VAR 0 2
18524: PPUSH
18525: LD_VAR 0 3
18529: PPUSH
18530: LD_STRING PlantMine
18532: PPUSH
18533: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18537: LD_VAR 0 2
18541: PPUSH
18542: LD_VAR 0 3
18546: PPUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 255
18556: PPUSH
18557: LD_INT 0
18559: PPUSH
18560: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18564: LD_ADDR_EXP 75
18568: PUSH
18569: LD_EXP 75
18573: PPUSH
18574: LD_VAR 0 5
18578: PUSH
18579: LD_EXP 75
18583: PUSH
18584: LD_VAR 0 5
18588: ARRAY
18589: PUSH
18590: LD_INT 1
18592: PLUS
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: LD_VAR 0 2
18602: PUSH
18603: LD_VAR 0 3
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PPUSH
18612: CALL 24992 0 3
18616: ST_TO_ADDR
// result := true ;
18617: LD_ADDR_VAR 0 4
18621: PUSH
18622: LD_INT 1
18624: ST_TO_ADDR
// end ;
18625: LD_VAR 0 4
18629: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18630: LD_INT 0
18632: PPUSH
18633: PPUSH
18634: PPUSH
// if not unit in minersList then
18635: LD_VAR 0 1
18639: PUSH
18640: LD_EXP 74
18644: IN
18645: NOT
18646: IFFALSE 18650
// exit ;
18648: GO 19042
// index := GetElementIndex ( minersList , unit ) ;
18650: LD_ADDR_VAR 0 6
18654: PUSH
18655: LD_EXP 74
18659: PPUSH
18660: LD_VAR 0 1
18664: PPUSH
18665: CALL 24777 0 2
18669: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18670: LD_ADDR_VAR 0 5
18674: PUSH
18675: DOUBLE
18676: LD_EXP 75
18680: PUSH
18681: LD_VAR 0 6
18685: ARRAY
18686: INC
18687: ST_TO_ADDR
18688: LD_INT 1
18690: PUSH
18691: FOR_DOWNTO
18692: IFFALSE 18853
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18694: LD_EXP 75
18698: PUSH
18699: LD_VAR 0 6
18703: ARRAY
18704: PUSH
18705: LD_VAR 0 5
18709: ARRAY
18710: PUSH
18711: LD_INT 1
18713: ARRAY
18714: PUSH
18715: LD_VAR 0 2
18719: EQUAL
18720: PUSH
18721: LD_EXP 75
18725: PUSH
18726: LD_VAR 0 6
18730: ARRAY
18731: PUSH
18732: LD_VAR 0 5
18736: ARRAY
18737: PUSH
18738: LD_INT 2
18740: ARRAY
18741: PUSH
18742: LD_VAR 0 3
18746: EQUAL
18747: AND
18748: IFFALSE 18851
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18750: LD_EXP 75
18754: PUSH
18755: LD_VAR 0 6
18759: ARRAY
18760: PUSH
18761: LD_VAR 0 5
18765: ARRAY
18766: PUSH
18767: LD_INT 1
18769: ARRAY
18770: PPUSH
18771: LD_EXP 75
18775: PUSH
18776: LD_VAR 0 6
18780: ARRAY
18781: PUSH
18782: LD_VAR 0 5
18786: ARRAY
18787: PUSH
18788: LD_INT 2
18790: ARRAY
18791: PPUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 255
18801: PPUSH
18802: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18806: LD_ADDR_EXP 75
18810: PUSH
18811: LD_EXP 75
18815: PPUSH
18816: LD_VAR 0 6
18820: PPUSH
18821: LD_EXP 75
18825: PUSH
18826: LD_VAR 0 6
18830: ARRAY
18831: PPUSH
18832: LD_VAR 0 5
18836: PPUSH
18837: CALL_OW 3
18841: PPUSH
18842: CALL_OW 1
18846: ST_TO_ADDR
// exit ;
18847: POP
18848: POP
18849: GO 19042
// end ; end ;
18851: GO 18691
18853: POP
18854: POP
// for i := minerMinesList [ index ] downto 1 do
18855: LD_ADDR_VAR 0 5
18859: PUSH
18860: DOUBLE
18861: LD_EXP 75
18865: PUSH
18866: LD_VAR 0 6
18870: ARRAY
18871: INC
18872: ST_TO_ADDR
18873: LD_INT 1
18875: PUSH
18876: FOR_DOWNTO
18877: IFFALSE 19040
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18879: LD_EXP 75
18883: PUSH
18884: LD_VAR 0 6
18888: ARRAY
18889: PUSH
18890: LD_VAR 0 5
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: ARRAY
18899: PPUSH
18900: LD_EXP 75
18904: PUSH
18905: LD_VAR 0 6
18909: ARRAY
18910: PUSH
18911: LD_VAR 0 5
18915: ARRAY
18916: PUSH
18917: LD_INT 2
18919: ARRAY
18920: PPUSH
18921: LD_VAR 0 2
18925: PPUSH
18926: LD_VAR 0 3
18930: PPUSH
18931: CALL_OW 298
18935: PUSH
18936: LD_INT 6
18938: LESS
18939: IFFALSE 19038
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18941: LD_EXP 75
18945: PUSH
18946: LD_VAR 0 6
18950: ARRAY
18951: PUSH
18952: LD_VAR 0 5
18956: ARRAY
18957: PUSH
18958: LD_INT 1
18960: ARRAY
18961: PPUSH
18962: LD_EXP 75
18966: PUSH
18967: LD_VAR 0 6
18971: ARRAY
18972: PUSH
18973: LD_VAR 0 5
18977: ARRAY
18978: PUSH
18979: LD_INT 2
18981: ARRAY
18982: PPUSH
18983: LD_VAR 0 1
18987: PPUSH
18988: CALL_OW 255
18992: PPUSH
18993: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18997: LD_ADDR_EXP 75
19001: PUSH
19002: LD_EXP 75
19006: PPUSH
19007: LD_VAR 0 6
19011: PPUSH
19012: LD_EXP 75
19016: PUSH
19017: LD_VAR 0 6
19021: ARRAY
19022: PPUSH
19023: LD_VAR 0 5
19027: PPUSH
19028: CALL_OW 3
19032: PPUSH
19033: CALL_OW 1
19037: ST_TO_ADDR
// end ; end ;
19038: GO 18876
19040: POP
19041: POP
// end ;
19042: LD_VAR 0 4
19046: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19047: LD_INT 0
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
19057: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19058: LD_VAR 0 1
19062: PPUSH
19063: CALL_OW 264
19067: PUSH
19068: LD_EXP 84
19072: EQUAL
19073: NOT
19074: PUSH
19075: LD_VAR 0 1
19079: PUSH
19080: LD_EXP 74
19084: IN
19085: NOT
19086: OR
19087: IFFALSE 19091
// exit ;
19089: GO 19413
// index := GetElementIndex ( minersList , unit ) ;
19091: LD_ADDR_VAR 0 6
19095: PUSH
19096: LD_EXP 74
19100: PPUSH
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL 24777 0 2
19110: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19111: LD_ADDR_VAR 0 8
19115: PUSH
19116: LD_EXP 76
19120: PUSH
19121: LD_EXP 75
19125: PUSH
19126: LD_VAR 0 6
19130: ARRAY
19131: MINUS
19132: ST_TO_ADDR
// if not minesFreeAmount then
19133: LD_VAR 0 8
19137: NOT
19138: IFFALSE 19142
// exit ;
19140: GO 19413
// tmp := [ ] ;
19142: LD_ADDR_VAR 0 7
19146: PUSH
19147: EMPTY
19148: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19149: LD_ADDR_VAR 0 5
19153: PUSH
19154: DOUBLE
19155: LD_INT 1
19157: DEC
19158: ST_TO_ADDR
19159: LD_VAR 0 8
19163: PUSH
19164: FOR_TO
19165: IFFALSE 19360
// begin _d := rand ( 0 , 5 ) ;
19167: LD_ADDR_VAR 0 11
19171: PUSH
19172: LD_INT 0
19174: PPUSH
19175: LD_INT 5
19177: PPUSH
19178: CALL_OW 12
19182: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19183: LD_ADDR_VAR 0 12
19187: PUSH
19188: LD_INT 2
19190: PPUSH
19191: LD_INT 6
19193: PPUSH
19194: CALL_OW 12
19198: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19199: LD_ADDR_VAR 0 9
19203: PUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 11
19213: PPUSH
19214: LD_VAR 0 12
19218: PPUSH
19219: CALL_OW 272
19223: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19224: LD_ADDR_VAR 0 10
19228: PUSH
19229: LD_VAR 0 3
19233: PPUSH
19234: LD_VAR 0 11
19238: PPUSH
19239: LD_VAR 0 12
19243: PPUSH
19244: CALL_OW 273
19248: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19249: LD_VAR 0 9
19253: PPUSH
19254: LD_VAR 0 10
19258: PPUSH
19259: CALL_OW 488
19263: PUSH
19264: LD_VAR 0 9
19268: PUSH
19269: LD_VAR 0 10
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_VAR 0 7
19282: IN
19283: NOT
19284: AND
19285: PUSH
19286: LD_VAR 0 9
19290: PPUSH
19291: LD_VAR 0 10
19295: PPUSH
19296: CALL_OW 458
19300: NOT
19301: AND
19302: IFFALSE 19344
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19304: LD_ADDR_VAR 0 7
19308: PUSH
19309: LD_VAR 0 7
19313: PPUSH
19314: LD_VAR 0 7
19318: PUSH
19319: LD_INT 1
19321: PLUS
19322: PPUSH
19323: LD_VAR 0 9
19327: PUSH
19328: LD_VAR 0 10
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PPUSH
19337: CALL_OW 1
19341: ST_TO_ADDR
19342: GO 19358
// i := i - 1 ;
19344: LD_ADDR_VAR 0 5
19348: PUSH
19349: LD_VAR 0 5
19353: PUSH
19354: LD_INT 1
19356: MINUS
19357: ST_TO_ADDR
// end ;
19358: GO 19164
19360: POP
19361: POP
// for i in tmp do
19362: LD_ADDR_VAR 0 5
19366: PUSH
19367: LD_VAR 0 7
19371: PUSH
19372: FOR_IN
19373: IFFALSE 19411
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_VAR 0 5
19384: PUSH
19385: LD_INT 1
19387: ARRAY
19388: PPUSH
19389: LD_VAR 0 5
19393: PUSH
19394: LD_INT 2
19396: ARRAY
19397: PPUSH
19398: CALL 18353 0 3
19402: NOT
19403: IFFALSE 19409
// exit ;
19405: POP
19406: POP
19407: GO 19413
19409: GO 19372
19411: POP
19412: POP
// end ;
19413: LD_VAR 0 4
19417: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
// if not GetClass ( unit ) = class_sniper then
19427: LD_VAR 0 1
19431: PPUSH
19432: CALL_OW 257
19436: PUSH
19437: LD_INT 5
19439: EQUAL
19440: NOT
19441: IFFALSE 19445
// exit ;
19443: GO 19833
// dist := 8 ;
19445: LD_ADDR_VAR 0 5
19449: PUSH
19450: LD_INT 8
19452: ST_TO_ADDR
// viewRange := 12 ;
19453: LD_ADDR_VAR 0 7
19457: PUSH
19458: LD_INT 12
19460: ST_TO_ADDR
// side := GetSide ( unit ) ;
19461: LD_ADDR_VAR 0 6
19465: PUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 255
19475: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19476: LD_INT 61
19478: PPUSH
19479: LD_VAR 0 6
19483: PPUSH
19484: CALL_OW 321
19488: PUSH
19489: LD_INT 2
19491: EQUAL
19492: IFFALSE 19502
// viewRange := 16 ;
19494: LD_ADDR_VAR 0 7
19498: PUSH
19499: LD_INT 16
19501: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_VAR 0 2
19511: PPUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 297
19521: PUSH
19522: LD_VAR 0 5
19526: GREATER
19527: IFFALSE 19606
// begin ComMoveXY ( unit , x , y ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_VAR 0 2
19538: PPUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19548: LD_INT 35
19550: PPUSH
19551: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19555: LD_VAR 0 1
19559: PPUSH
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: CALL 55549 0 3
19574: NOT
19575: IFFALSE 19579
// exit ;
19577: GO 19833
// until GetDistUnitXY ( unit , x , y ) < dist ;
19579: LD_VAR 0 1
19583: PPUSH
19584: LD_VAR 0 2
19588: PPUSH
19589: LD_VAR 0 3
19593: PPUSH
19594: CALL_OW 297
19598: PUSH
19599: LD_VAR 0 5
19603: LESS
19604: IFFALSE 19548
// end ; ComTurnXY ( unit , x , y ) ;
19606: LD_VAR 0 1
19610: PPUSH
19611: LD_VAR 0 2
19615: PPUSH
19616: LD_VAR 0 3
19620: PPUSH
19621: CALL_OW 118
// wait ( 5 ) ;
19625: LD_INT 5
19627: PPUSH
19628: CALL_OW 67
// _d := GetDir ( unit ) ;
19632: LD_ADDR_VAR 0 10
19636: PUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL_OW 254
19646: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19647: LD_ADDR_VAR 0 8
19651: PUSH
19652: LD_VAR 0 1
19656: PPUSH
19657: CALL_OW 250
19661: PPUSH
19662: LD_VAR 0 10
19666: PPUSH
19667: LD_VAR 0 5
19671: PPUSH
19672: CALL_OW 272
19676: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19677: LD_ADDR_VAR 0 9
19681: PUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 251
19691: PPUSH
19692: LD_VAR 0 10
19696: PPUSH
19697: LD_VAR 0 5
19701: PPUSH
19702: CALL_OW 273
19706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19707: LD_VAR 0 8
19711: PPUSH
19712: LD_VAR 0 9
19716: PPUSH
19717: CALL_OW 488
19721: NOT
19722: IFFALSE 19726
// exit ;
19724: GO 19833
// ComAnimCustom ( unit , 1 ) ;
19726: LD_VAR 0 1
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19738: LD_VAR 0 8
19742: PPUSH
19743: LD_VAR 0 9
19747: PPUSH
19748: LD_VAR 0 6
19752: PPUSH
19753: LD_VAR 0 7
19757: PPUSH
19758: CALL_OW 330
// repeat wait ( 1 ) ;
19762: LD_INT 1
19764: PPUSH
19765: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 316
19778: PUSH
19779: LD_VAR 0 1
19783: PPUSH
19784: CALL_OW 314
19788: OR
19789: PUSH
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 302
19799: NOT
19800: OR
19801: PUSH
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 301
19811: OR
19812: IFFALSE 19762
// RemoveSeeing ( _x , _y , side ) ;
19814: LD_VAR 0 8
19818: PPUSH
19819: LD_VAR 0 9
19823: PPUSH
19824: LD_VAR 0 6
19828: PPUSH
19829: CALL_OW 331
// end ; end_of_file
19833: LD_VAR 0 4
19837: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19838: LD_INT 0
19840: PPUSH
// ar_miner := 81 ;
19841: LD_ADDR_EXP 84
19845: PUSH
19846: LD_INT 81
19848: ST_TO_ADDR
// ar_crane := 88 ;
19849: LD_ADDR_EXP 83
19853: PUSH
19854: LD_INT 88
19856: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19857: LD_ADDR_EXP 78
19861: PUSH
19862: LD_INT 89
19864: ST_TO_ADDR
// us_hack := 99 ;
19865: LD_ADDR_EXP 79
19869: PUSH
19870: LD_INT 99
19872: ST_TO_ADDR
// us_artillery := 97 ;
19873: LD_ADDR_EXP 80
19877: PUSH
19878: LD_INT 97
19880: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19881: LD_ADDR_EXP 81
19885: PUSH
19886: LD_INT 91
19888: ST_TO_ADDR
// ar_mortar := 92 ;
19889: LD_ADDR_EXP 82
19893: PUSH
19894: LD_INT 92
19896: ST_TO_ADDR
// ru_radar := 98 ;
19897: LD_ADDR_EXP 77
19901: PUSH
19902: LD_INT 98
19904: ST_TO_ADDR
// tech_Artillery := 80 ;
19905: LD_ADDR_EXP 85
19909: PUSH
19910: LD_INT 80
19912: ST_TO_ADDR
// tech_RadMat := 81 ;
19913: LD_ADDR_EXP 86
19917: PUSH
19918: LD_INT 81
19920: ST_TO_ADDR
// tech_BasicTools := 82 ;
19921: LD_ADDR_EXP 87
19925: PUSH
19926: LD_INT 82
19928: ST_TO_ADDR
// tech_Cargo := 83 ;
19929: LD_ADDR_EXP 88
19933: PUSH
19934: LD_INT 83
19936: ST_TO_ADDR
// tech_Track := 84 ;
19937: LD_ADDR_EXP 89
19941: PUSH
19942: LD_INT 84
19944: ST_TO_ADDR
// tech_Crane := 85 ;
19945: LD_ADDR_EXP 90
19949: PUSH
19950: LD_INT 85
19952: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19953: LD_ADDR_EXP 91
19957: PUSH
19958: LD_INT 86
19960: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19961: LD_ADDR_EXP 92
19965: PUSH
19966: LD_INT 87
19968: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19969: LD_ADDR_EXP 93
19973: PUSH
19974: LD_INT 88
19976: ST_TO_ADDR
// class_mastodont := 31 ;
19977: LD_ADDR_EXP 94
19981: PUSH
19982: LD_INT 31
19984: ST_TO_ADDR
// class_horse := 21 ;
19985: LD_ADDR_EXP 95
19989: PUSH
19990: LD_INT 21
19992: ST_TO_ADDR
// end ;
19993: LD_VAR 0 1
19997: RET
// every 1 do
19998: GO 20000
20000: DISABLE
// InitGlobalVariables ; end_of_file
20001: CALL 19838 0 0
20005: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20006: LD_INT 0
20008: PPUSH
20009: PPUSH
// if exist_mode then
20010: LD_VAR 0 2
20014: IFFALSE 20039
// unit := CreateCharacter ( prefix & ident ) else
20016: LD_ADDR_VAR 0 5
20020: PUSH
20021: LD_VAR 0 3
20025: PUSH
20026: LD_VAR 0 1
20030: STR
20031: PPUSH
20032: CALL_OW 34
20036: ST_TO_ADDR
20037: GO 20054
// unit := NewCharacter ( ident ) ;
20039: LD_ADDR_VAR 0 5
20043: PUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: CALL_OW 25
20053: ST_TO_ADDR
// result := unit ;
20054: LD_ADDR_VAR 0 4
20058: PUSH
20059: LD_VAR 0 5
20063: ST_TO_ADDR
// end ;
20064: LD_VAR 0 4
20068: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20069: LD_INT 0
20071: PPUSH
20072: PPUSH
// if not side or not nation then
20073: LD_VAR 0 1
20077: NOT
20078: PUSH
20079: LD_VAR 0 2
20083: NOT
20084: OR
20085: IFFALSE 20089
// exit ;
20087: GO 20857
// case nation of nation_american :
20089: LD_VAR 0 2
20093: PUSH
20094: LD_INT 1
20096: DOUBLE
20097: EQUAL
20098: IFTRUE 20102
20100: GO 20316
20102: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20103: LD_ADDR_VAR 0 4
20107: PUSH
20108: LD_INT 35
20110: PUSH
20111: LD_INT 45
20113: PUSH
20114: LD_INT 46
20116: PUSH
20117: LD_INT 47
20119: PUSH
20120: LD_INT 82
20122: PUSH
20123: LD_INT 83
20125: PUSH
20126: LD_INT 84
20128: PUSH
20129: LD_INT 85
20131: PUSH
20132: LD_INT 86
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 2
20140: PUSH
20141: LD_INT 6
20143: PUSH
20144: LD_INT 15
20146: PUSH
20147: LD_INT 16
20149: PUSH
20150: LD_INT 7
20152: PUSH
20153: LD_INT 12
20155: PUSH
20156: LD_INT 13
20158: PUSH
20159: LD_INT 10
20161: PUSH
20162: LD_INT 14
20164: PUSH
20165: LD_INT 20
20167: PUSH
20168: LD_INT 21
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_INT 25
20176: PUSH
20177: LD_INT 32
20179: PUSH
20180: LD_INT 27
20182: PUSH
20183: LD_INT 36
20185: PUSH
20186: LD_INT 69
20188: PUSH
20189: LD_INT 39
20191: PUSH
20192: LD_INT 34
20194: PUSH
20195: LD_INT 40
20197: PUSH
20198: LD_INT 48
20200: PUSH
20201: LD_INT 49
20203: PUSH
20204: LD_INT 50
20206: PUSH
20207: LD_INT 51
20209: PUSH
20210: LD_INT 52
20212: PUSH
20213: LD_INT 53
20215: PUSH
20216: LD_INT 54
20218: PUSH
20219: LD_INT 55
20221: PUSH
20222: LD_INT 56
20224: PUSH
20225: LD_INT 57
20227: PUSH
20228: LD_INT 58
20230: PUSH
20231: LD_INT 59
20233: PUSH
20234: LD_INT 60
20236: PUSH
20237: LD_INT 61
20239: PUSH
20240: LD_INT 62
20242: PUSH
20243: LD_INT 80
20245: PUSH
20246: LD_INT 82
20248: PUSH
20249: LD_INT 83
20251: PUSH
20252: LD_INT 84
20254: PUSH
20255: LD_INT 85
20257: PUSH
20258: LD_INT 86
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: ST_TO_ADDR
20314: GO 20781
20316: LD_INT 2
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20550
20324: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20325: LD_ADDR_VAR 0 4
20329: PUSH
20330: LD_INT 35
20332: PUSH
20333: LD_INT 45
20335: PUSH
20336: LD_INT 46
20338: PUSH
20339: LD_INT 47
20341: PUSH
20342: LD_INT 82
20344: PUSH
20345: LD_INT 83
20347: PUSH
20348: LD_INT 84
20350: PUSH
20351: LD_INT 85
20353: PUSH
20354: LD_INT 87
20356: PUSH
20357: LD_INT 70
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 11
20365: PUSH
20366: LD_INT 3
20368: PUSH
20369: LD_INT 4
20371: PUSH
20372: LD_INT 5
20374: PUSH
20375: LD_INT 6
20377: PUSH
20378: LD_INT 15
20380: PUSH
20381: LD_INT 18
20383: PUSH
20384: LD_INT 7
20386: PUSH
20387: LD_INT 17
20389: PUSH
20390: LD_INT 8
20392: PUSH
20393: LD_INT 20
20395: PUSH
20396: LD_INT 21
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 72
20404: PUSH
20405: LD_INT 26
20407: PUSH
20408: LD_INT 69
20410: PUSH
20411: LD_INT 39
20413: PUSH
20414: LD_INT 40
20416: PUSH
20417: LD_INT 41
20419: PUSH
20420: LD_INT 42
20422: PUSH
20423: LD_INT 43
20425: PUSH
20426: LD_INT 48
20428: PUSH
20429: LD_INT 49
20431: PUSH
20432: LD_INT 50
20434: PUSH
20435: LD_INT 51
20437: PUSH
20438: LD_INT 52
20440: PUSH
20441: LD_INT 53
20443: PUSH
20444: LD_INT 54
20446: PUSH
20447: LD_INT 55
20449: PUSH
20450: LD_INT 56
20452: PUSH
20453: LD_INT 60
20455: PUSH
20456: LD_INT 61
20458: PUSH
20459: LD_INT 62
20461: PUSH
20462: LD_INT 66
20464: PUSH
20465: LD_INT 67
20467: PUSH
20468: LD_INT 68
20470: PUSH
20471: LD_INT 81
20473: PUSH
20474: LD_INT 82
20476: PUSH
20477: LD_INT 83
20479: PUSH
20480: LD_INT 84
20482: PUSH
20483: LD_INT 85
20485: PUSH
20486: LD_INT 87
20488: PUSH
20489: LD_INT 88
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: ST_TO_ADDR
20548: GO 20781
20550: LD_INT 3
20552: DOUBLE
20553: EQUAL
20554: IFTRUE 20558
20556: GO 20780
20558: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20559: LD_ADDR_VAR 0 4
20563: PUSH
20564: LD_INT 46
20566: PUSH
20567: LD_INT 47
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: LD_INT 82
20578: PUSH
20579: LD_INT 83
20581: PUSH
20582: LD_INT 84
20584: PUSH
20585: LD_INT 85
20587: PUSH
20588: LD_INT 86
20590: PUSH
20591: LD_INT 11
20593: PUSH
20594: LD_INT 9
20596: PUSH
20597: LD_INT 20
20599: PUSH
20600: LD_INT 19
20602: PUSH
20603: LD_INT 21
20605: PUSH
20606: LD_INT 24
20608: PUSH
20609: LD_INT 22
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 28
20617: PUSH
20618: LD_INT 29
20620: PUSH
20621: LD_INT 30
20623: PUSH
20624: LD_INT 31
20626: PUSH
20627: LD_INT 37
20629: PUSH
20630: LD_INT 38
20632: PUSH
20633: LD_INT 32
20635: PUSH
20636: LD_INT 27
20638: PUSH
20639: LD_INT 33
20641: PUSH
20642: LD_INT 69
20644: PUSH
20645: LD_INT 39
20647: PUSH
20648: LD_INT 34
20650: PUSH
20651: LD_INT 40
20653: PUSH
20654: LD_INT 71
20656: PUSH
20657: LD_INT 23
20659: PUSH
20660: LD_INT 44
20662: PUSH
20663: LD_INT 48
20665: PUSH
20666: LD_INT 49
20668: PUSH
20669: LD_INT 50
20671: PUSH
20672: LD_INT 51
20674: PUSH
20675: LD_INT 52
20677: PUSH
20678: LD_INT 53
20680: PUSH
20681: LD_INT 54
20683: PUSH
20684: LD_INT 55
20686: PUSH
20687: LD_INT 56
20689: PUSH
20690: LD_INT 57
20692: PUSH
20693: LD_INT 58
20695: PUSH
20696: LD_INT 59
20698: PUSH
20699: LD_INT 63
20701: PUSH
20702: LD_INT 64
20704: PUSH
20705: LD_INT 65
20707: PUSH
20708: LD_INT 82
20710: PUSH
20711: LD_INT 83
20713: PUSH
20714: LD_INT 84
20716: PUSH
20717: LD_INT 85
20719: PUSH
20720: LD_INT 86
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: ST_TO_ADDR
20778: GO 20781
20780: POP
// if state > - 1 and state < 3 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: GREATER
20790: PUSH
20791: LD_VAR 0 3
20795: PUSH
20796: LD_INT 3
20798: LESS
20799: AND
20800: IFFALSE 20857
// for i in result do
20802: LD_ADDR_VAR 0 5
20806: PUSH
20807: LD_VAR 0 4
20811: PUSH
20812: FOR_IN
20813: IFFALSE 20855
// if GetTech ( i , side ) <> state then
20815: LD_VAR 0 5
20819: PPUSH
20820: LD_VAR 0 1
20824: PPUSH
20825: CALL_OW 321
20829: PUSH
20830: LD_VAR 0 3
20834: NONEQUAL
20835: IFFALSE 20853
// result := result diff i ;
20837: LD_ADDR_VAR 0 4
20841: PUSH
20842: LD_VAR 0 4
20846: PUSH
20847: LD_VAR 0 5
20851: DIFF
20852: ST_TO_ADDR
20853: GO 20812
20855: POP
20856: POP
// end ;
20857: LD_VAR 0 4
20861: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20862: LD_INT 0
20864: PPUSH
20865: PPUSH
20866: PPUSH
// result := true ;
20867: LD_ADDR_VAR 0 3
20871: PUSH
20872: LD_INT 1
20874: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20875: LD_ADDR_VAR 0 5
20879: PUSH
20880: LD_VAR 0 2
20884: PPUSH
20885: CALL_OW 480
20889: ST_TO_ADDR
// if not tmp then
20890: LD_VAR 0 5
20894: NOT
20895: IFFALSE 20899
// exit ;
20897: GO 20948
// for i in tmp do
20899: LD_ADDR_VAR 0 4
20903: PUSH
20904: LD_VAR 0 5
20908: PUSH
20909: FOR_IN
20910: IFFALSE 20946
// if GetTech ( i , side ) <> state_researched then
20912: LD_VAR 0 4
20916: PPUSH
20917: LD_VAR 0 1
20921: PPUSH
20922: CALL_OW 321
20926: PUSH
20927: LD_INT 2
20929: NONEQUAL
20930: IFFALSE 20944
// begin result := false ;
20932: LD_ADDR_VAR 0 3
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// exit ;
20940: POP
20941: POP
20942: GO 20948
// end ;
20944: GO 20909
20946: POP
20947: POP
// end ;
20948: LD_VAR 0 3
20952: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20953: LD_INT 0
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20968: LD_VAR 0 1
20972: NOT
20973: PUSH
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 257
20983: PUSH
20984: LD_INT 9
20986: NONEQUAL
20987: OR
20988: IFFALSE 20992
// exit ;
20990: GO 21565
// side := GetSide ( unit ) ;
20992: LD_ADDR_VAR 0 9
20996: PUSH
20997: LD_VAR 0 1
21001: PPUSH
21002: CALL_OW 255
21006: ST_TO_ADDR
// tech_space := tech_spacanom ;
21007: LD_ADDR_VAR 0 12
21011: PUSH
21012: LD_INT 29
21014: ST_TO_ADDR
// tech_time := tech_taurad ;
21015: LD_ADDR_VAR 0 13
21019: PUSH
21020: LD_INT 28
21022: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21023: LD_ADDR_VAR 0 11
21027: PUSH
21028: LD_VAR 0 1
21032: PPUSH
21033: CALL_OW 310
21037: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21038: LD_VAR 0 11
21042: PPUSH
21043: CALL_OW 247
21047: PUSH
21048: LD_INT 2
21050: EQUAL
21051: IFFALSE 21055
// exit ;
21053: GO 21565
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21055: LD_ADDR_VAR 0 8
21059: PUSH
21060: LD_INT 81
21062: PUSH
21063: LD_VAR 0 9
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 3
21074: PUSH
21075: LD_INT 21
21077: PUSH
21078: LD_INT 3
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PPUSH
21093: CALL_OW 69
21097: ST_TO_ADDR
// if not tmp then
21098: LD_VAR 0 8
21102: NOT
21103: IFFALSE 21107
// exit ;
21105: GO 21565
// if in_unit then
21107: LD_VAR 0 11
21111: IFFALSE 21135
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21113: LD_ADDR_VAR 0 10
21117: PUSH
21118: LD_VAR 0 8
21122: PPUSH
21123: LD_VAR 0 11
21127: PPUSH
21128: CALL_OW 74
21132: ST_TO_ADDR
21133: GO 21155
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21135: LD_ADDR_VAR 0 10
21139: PUSH
21140: LD_VAR 0 8
21144: PPUSH
21145: LD_VAR 0 1
21149: PPUSH
21150: CALL_OW 74
21154: ST_TO_ADDR
// if not enemy then
21155: LD_VAR 0 10
21159: NOT
21160: IFFALSE 21164
// exit ;
21162: GO 21565
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21164: LD_VAR 0 11
21168: PUSH
21169: LD_VAR 0 11
21173: PPUSH
21174: LD_VAR 0 10
21178: PPUSH
21179: CALL_OW 296
21183: PUSH
21184: LD_INT 13
21186: GREATER
21187: AND
21188: PUSH
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_VAR 0 10
21198: PPUSH
21199: CALL_OW 296
21203: PUSH
21204: LD_INT 12
21206: GREATER
21207: OR
21208: IFFALSE 21212
// exit ;
21210: GO 21565
// missile := [ 1 ] ;
21212: LD_ADDR_VAR 0 14
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21223: LD_VAR 0 9
21227: PPUSH
21228: LD_VAR 0 12
21232: PPUSH
21233: CALL_OW 325
21237: IFFALSE 21266
// missile := Insert ( missile , missile + 1 , 2 ) ;
21239: LD_ADDR_VAR 0 14
21243: PUSH
21244: LD_VAR 0 14
21248: PPUSH
21249: LD_VAR 0 14
21253: PUSH
21254: LD_INT 1
21256: PLUS
21257: PPUSH
21258: LD_INT 2
21260: PPUSH
21261: CALL_OW 2
21265: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21266: LD_VAR 0 9
21270: PPUSH
21271: LD_VAR 0 13
21275: PPUSH
21276: CALL_OW 325
21280: PUSH
21281: LD_VAR 0 10
21285: PPUSH
21286: CALL_OW 255
21290: PPUSH
21291: LD_VAR 0 13
21295: PPUSH
21296: CALL_OW 325
21300: NOT
21301: AND
21302: IFFALSE 21331
// missile := Insert ( missile , missile + 1 , 3 ) ;
21304: LD_ADDR_VAR 0 14
21308: PUSH
21309: LD_VAR 0 14
21313: PPUSH
21314: LD_VAR 0 14
21318: PUSH
21319: LD_INT 1
21321: PLUS
21322: PPUSH
21323: LD_INT 3
21325: PPUSH
21326: CALL_OW 2
21330: ST_TO_ADDR
// if missile < 2 then
21331: LD_VAR 0 14
21335: PUSH
21336: LD_INT 2
21338: LESS
21339: IFFALSE 21343
// exit ;
21341: GO 21565
// x := GetX ( enemy ) ;
21343: LD_ADDR_VAR 0 4
21347: PUSH
21348: LD_VAR 0 10
21352: PPUSH
21353: CALL_OW 250
21357: ST_TO_ADDR
// y := GetY ( enemy ) ;
21358: LD_ADDR_VAR 0 5
21362: PUSH
21363: LD_VAR 0 10
21367: PPUSH
21368: CALL_OW 251
21372: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21373: LD_ADDR_VAR 0 6
21377: PUSH
21378: LD_VAR 0 4
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 12
21394: PLUS
21395: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21396: LD_ADDR_VAR 0 7
21400: PUSH
21401: LD_VAR 0 5
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PPUSH
21410: LD_INT 1
21412: PPUSH
21413: CALL_OW 12
21417: PLUS
21418: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21419: LD_VAR 0 6
21423: PPUSH
21424: LD_VAR 0 7
21428: PPUSH
21429: CALL_OW 488
21433: NOT
21434: IFFALSE 21456
// begin _x := x ;
21436: LD_ADDR_VAR 0 6
21440: PUSH
21441: LD_VAR 0 4
21445: ST_TO_ADDR
// _y := y ;
21446: LD_ADDR_VAR 0 7
21450: PUSH
21451: LD_VAR 0 5
21455: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21456: LD_ADDR_VAR 0 3
21460: PUSH
21461: LD_INT 1
21463: PPUSH
21464: LD_VAR 0 14
21468: PPUSH
21469: CALL_OW 12
21473: ST_TO_ADDR
// case i of 1 :
21474: LD_VAR 0 3
21478: PUSH
21479: LD_INT 1
21481: DOUBLE
21482: EQUAL
21483: IFTRUE 21487
21485: GO 21504
21487: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21488: LD_VAR 0 1
21492: PPUSH
21493: LD_VAR 0 10
21497: PPUSH
21498: CALL_OW 115
21502: GO 21565
21504: LD_INT 2
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21534
21512: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21513: LD_VAR 0 1
21517: PPUSH
21518: LD_VAR 0 6
21522: PPUSH
21523: LD_VAR 0 7
21527: PPUSH
21528: CALL_OW 153
21532: GO 21565
21534: LD_INT 3
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21564
21542: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: CALL_OW 154
21562: GO 21565
21564: POP
// end ;
21565: LD_VAR 0 2
21569: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
// if not unit or not building then
21578: LD_VAR 0 1
21582: NOT
21583: PUSH
21584: LD_VAR 0 2
21588: NOT
21589: OR
21590: IFFALSE 21594
// exit ;
21592: GO 21752
// x := GetX ( building ) ;
21594: LD_ADDR_VAR 0 5
21598: PUSH
21599: LD_VAR 0 2
21603: PPUSH
21604: CALL_OW 250
21608: ST_TO_ADDR
// y := GetY ( building ) ;
21609: LD_ADDR_VAR 0 6
21613: PUSH
21614: LD_VAR 0 2
21618: PPUSH
21619: CALL_OW 251
21623: ST_TO_ADDR
// for i = 0 to 5 do
21624: LD_ADDR_VAR 0 4
21628: PUSH
21629: DOUBLE
21630: LD_INT 0
21632: DEC
21633: ST_TO_ADDR
21634: LD_INT 5
21636: PUSH
21637: FOR_TO
21638: IFFALSE 21750
// begin _x := ShiftX ( x , i , 3 ) ;
21640: LD_ADDR_VAR 0 7
21644: PUSH
21645: LD_VAR 0 5
21649: PPUSH
21650: LD_VAR 0 4
21654: PPUSH
21655: LD_INT 3
21657: PPUSH
21658: CALL_OW 272
21662: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21663: LD_ADDR_VAR 0 8
21667: PUSH
21668: LD_VAR 0 6
21672: PPUSH
21673: LD_VAR 0 4
21677: PPUSH
21678: LD_INT 3
21680: PPUSH
21681: CALL_OW 273
21685: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21686: LD_VAR 0 7
21690: PPUSH
21691: LD_VAR 0 8
21695: PPUSH
21696: CALL_OW 488
21700: NOT
21701: IFFALSE 21705
// continue ;
21703: GO 21637
// if HexInfo ( _x , _y ) = 0 then
21705: LD_VAR 0 7
21709: PPUSH
21710: LD_VAR 0 8
21714: PPUSH
21715: CALL_OW 428
21719: PUSH
21720: LD_INT 0
21722: EQUAL
21723: IFFALSE 21748
// begin ComMoveXY ( unit , _x , _y ) ;
21725: LD_VAR 0 1
21729: PPUSH
21730: LD_VAR 0 7
21734: PPUSH
21735: LD_VAR 0 8
21739: PPUSH
21740: CALL_OW 111
// exit ;
21744: POP
21745: POP
21746: GO 21752
// end ; end ;
21748: GO 21637
21750: POP
21751: POP
// end ;
21752: LD_VAR 0 3
21756: RET
// export function ScanBase ( side , base_area ) ; begin
21757: LD_INT 0
21759: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21760: LD_ADDR_VAR 0 3
21764: PUSH
21765: LD_VAR 0 2
21769: PPUSH
21770: LD_INT 81
21772: PUSH
21773: LD_VAR 0 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 70
21786: ST_TO_ADDR
// end ;
21787: LD_VAR 0 3
21791: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21792: LD_INT 0
21794: PPUSH
21795: PPUSH
21796: PPUSH
21797: PPUSH
// result := false ;
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// side := GetSide ( unit ) ;
21806: LD_ADDR_VAR 0 3
21810: PUSH
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 255
21820: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21821: LD_ADDR_VAR 0 4
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 248
21835: ST_TO_ADDR
// case nat of 1 :
21836: LD_VAR 0 4
21840: PUSH
21841: LD_INT 1
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21860
21849: POP
// tech := tech_lassight ; 2 :
21850: LD_ADDR_VAR 0 5
21854: PUSH
21855: LD_INT 12
21857: ST_TO_ADDR
21858: GO 21899
21860: LD_INT 2
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 21879
21868: POP
// tech := tech_mortar ; 3 :
21869: LD_ADDR_VAR 0 5
21873: PUSH
21874: LD_INT 41
21876: ST_TO_ADDR
21877: GO 21899
21879: LD_INT 3
21881: DOUBLE
21882: EQUAL
21883: IFTRUE 21887
21885: GO 21898
21887: POP
// tech := tech_bazooka ; end ;
21888: LD_ADDR_VAR 0 5
21892: PUSH
21893: LD_INT 44
21895: ST_TO_ADDR
21896: GO 21899
21898: POP
// if Researched ( side , tech ) then
21899: LD_VAR 0 3
21903: PPUSH
21904: LD_VAR 0 5
21908: PPUSH
21909: CALL_OW 325
21913: IFFALSE 21940
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 5
21922: PUSH
21923: LD_INT 8
21925: PUSH
21926: LD_INT 9
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: LD_VAR 0 4
21938: ARRAY
21939: ST_TO_ADDR
// end ;
21940: LD_VAR 0 2
21944: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21945: LD_INT 0
21947: PPUSH
21948: PPUSH
21949: PPUSH
// if not mines then
21950: LD_VAR 0 2
21954: NOT
21955: IFFALSE 21959
// exit ;
21957: GO 22103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_INT 81
21966: PUSH
21967: LD_VAR 0 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 3
21978: PUSH
21979: LD_INT 21
21981: PUSH
21982: LD_INT 3
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 69
22001: ST_TO_ADDR
// for i in mines do
22002: LD_ADDR_VAR 0 4
22006: PUSH
22007: LD_VAR 0 2
22011: PUSH
22012: FOR_IN
22013: IFFALSE 22101
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22015: LD_VAR 0 4
22019: PUSH
22020: LD_INT 1
22022: ARRAY
22023: PPUSH
22024: LD_VAR 0 4
22028: PUSH
22029: LD_INT 2
22031: ARRAY
22032: PPUSH
22033: CALL_OW 458
22037: NOT
22038: IFFALSE 22042
// continue ;
22040: GO 22012
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22042: LD_VAR 0 4
22046: PUSH
22047: LD_INT 1
22049: ARRAY
22050: PPUSH
22051: LD_VAR 0 4
22055: PUSH
22056: LD_INT 2
22058: ARRAY
22059: PPUSH
22060: CALL_OW 428
22064: PUSH
22065: LD_VAR 0 5
22069: IN
22070: IFFALSE 22099
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22072: LD_VAR 0 4
22076: PUSH
22077: LD_INT 1
22079: ARRAY
22080: PPUSH
22081: LD_VAR 0 4
22085: PUSH
22086: LD_INT 2
22088: ARRAY
22089: PPUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 456
// end ;
22099: GO 22012
22101: POP
22102: POP
// end ;
22103: LD_VAR 0 3
22107: RET
// export function Count ( array ) ; var i ; begin
22108: LD_INT 0
22110: PPUSH
22111: PPUSH
// result := 0 ;
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// for i in array do
22120: LD_ADDR_VAR 0 3
22124: PUSH
22125: LD_VAR 0 1
22129: PUSH
22130: FOR_IN
22131: IFFALSE 22155
// if i then
22133: LD_VAR 0 3
22137: IFFALSE 22153
// result := result + 1 ;
22139: LD_ADDR_VAR 0 2
22143: PUSH
22144: LD_VAR 0 2
22148: PUSH
22149: LD_INT 1
22151: PLUS
22152: ST_TO_ADDR
22153: GO 22130
22155: POP
22156: POP
// end ;
22157: LD_VAR 0 2
22161: RET
// export function IsEmpty ( building ) ; begin
22162: LD_INT 0
22164: PPUSH
// if not building then
22165: LD_VAR 0 1
22169: NOT
22170: IFFALSE 22174
// exit ;
22172: GO 22217
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 22
22186: PUSH
22187: LD_VAR 0 1
22191: PPUSH
22192: CALL_OW 255
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 58
22203: PUSH
22204: EMPTY
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PPUSH
22211: CALL_OW 69
22215: IN
22216: ST_TO_ADDR
// end ;
22217: LD_VAR 0 2
22221: RET
// export function IsNotFull ( building ) ; begin
22222: LD_INT 0
22224: PPUSH
// if not building then
22225: LD_VAR 0 1
22229: NOT
22230: IFFALSE 22234
// exit ;
22232: GO 22253
// result := UnitsInside ( building ) < 6 ;
22234: LD_ADDR_VAR 0 2
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 313
22248: PUSH
22249: LD_INT 6
22251: LESS
22252: ST_TO_ADDR
// end ;
22253: LD_VAR 0 2
22257: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22258: LD_INT 0
22260: PPUSH
22261: PPUSH
22262: PPUSH
22263: PPUSH
// tmp := [ ] ;
22264: LD_ADDR_VAR 0 3
22268: PUSH
22269: EMPTY
22270: ST_TO_ADDR
// list := [ ] ;
22271: LD_ADDR_VAR 0 5
22275: PUSH
22276: EMPTY
22277: ST_TO_ADDR
// for i = 16 to 25 do
22278: LD_ADDR_VAR 0 4
22282: PUSH
22283: DOUBLE
22284: LD_INT 16
22286: DEC
22287: ST_TO_ADDR
22288: LD_INT 25
22290: PUSH
22291: FOR_TO
22292: IFFALSE 22365
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22294: LD_ADDR_VAR 0 3
22298: PUSH
22299: LD_VAR 0 3
22303: PUSH
22304: LD_INT 22
22306: PUSH
22307: LD_VAR 0 1
22311: PPUSH
22312: CALL_OW 255
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 91
22323: PUSH
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 6
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 30
22339: PUSH
22340: LD_VAR 0 4
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: PPUSH
22357: CALL_OW 69
22361: ADD
22362: ST_TO_ADDR
22363: GO 22291
22365: POP
22366: POP
// for i = 1 to tmp do
22367: LD_ADDR_VAR 0 4
22371: PUSH
22372: DOUBLE
22373: LD_INT 1
22375: DEC
22376: ST_TO_ADDR
22377: LD_VAR 0 3
22381: PUSH
22382: FOR_TO
22383: IFFALSE 22471
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22385: LD_ADDR_VAR 0 5
22389: PUSH
22390: LD_VAR 0 5
22394: PUSH
22395: LD_VAR 0 3
22399: PUSH
22400: LD_VAR 0 4
22404: ARRAY
22405: PPUSH
22406: CALL_OW 266
22410: PUSH
22411: LD_VAR 0 3
22415: PUSH
22416: LD_VAR 0 4
22420: ARRAY
22421: PPUSH
22422: CALL_OW 250
22426: PUSH
22427: LD_VAR 0 3
22431: PUSH
22432: LD_VAR 0 4
22436: ARRAY
22437: PPUSH
22438: CALL_OW 251
22442: PUSH
22443: LD_VAR 0 3
22447: PUSH
22448: LD_VAR 0 4
22452: ARRAY
22453: PPUSH
22454: CALL_OW 254
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: ADD
22468: ST_TO_ADDR
22469: GO 22382
22471: POP
22472: POP
// result := list ;
22473: LD_ADDR_VAR 0 2
22477: PUSH
22478: LD_VAR 0 5
22482: ST_TO_ADDR
// end ;
22483: LD_VAR 0 2
22487: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
// if not factory then
22497: LD_VAR 0 1
22501: NOT
22502: IFFALSE 22506
// exit ;
22504: GO 23099
// if control = control_apeman then
22506: LD_VAR 0 4
22510: PUSH
22511: LD_INT 5
22513: EQUAL
22514: IFFALSE 22623
// begin tmp := UnitsInside ( factory ) ;
22516: LD_ADDR_VAR 0 8
22520: PUSH
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 313
22530: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22531: LD_VAR 0 8
22535: PPUSH
22536: LD_INT 25
22538: PUSH
22539: LD_INT 12
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL_OW 72
22550: NOT
22551: IFFALSE 22561
// control := control_manual ;
22553: LD_ADDR_VAR 0 4
22557: PUSH
22558: LD_INT 1
22560: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22561: LD_ADDR_VAR 0 8
22565: PUSH
22566: LD_VAR 0 1
22570: PPUSH
22571: CALL 22258 0 1
22575: ST_TO_ADDR
// if tmp then
22576: LD_VAR 0 8
22580: IFFALSE 22623
// begin for i in tmp do
22582: LD_ADDR_VAR 0 7
22586: PUSH
22587: LD_VAR 0 8
22591: PUSH
22592: FOR_IN
22593: IFFALSE 22621
// if i [ 1 ] = b_ext_radio then
22595: LD_VAR 0 7
22599: PUSH
22600: LD_INT 1
22602: ARRAY
22603: PUSH
22604: LD_INT 22
22606: EQUAL
22607: IFFALSE 22619
// begin control := control_remote ;
22609: LD_ADDR_VAR 0 4
22613: PUSH
22614: LD_INT 2
22616: ST_TO_ADDR
// break ;
22617: GO 22621
// end ;
22619: GO 22592
22621: POP
22622: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22623: LD_VAR 0 1
22627: PPUSH
22628: LD_VAR 0 2
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: LD_VAR 0 4
22642: PPUSH
22643: LD_VAR 0 5
22647: PPUSH
22648: CALL_OW 448
22652: IFFALSE 22687
// begin result := [ chassis , engine , control , weapon ] ;
22654: LD_ADDR_VAR 0 6
22658: PUSH
22659: LD_VAR 0 2
22663: PUSH
22664: LD_VAR 0 3
22668: PUSH
22669: LD_VAR 0 4
22673: PUSH
22674: LD_VAR 0 5
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: ST_TO_ADDR
// exit ;
22685: GO 23099
// end ; _chassis := AvailableChassisList ( factory ) ;
22687: LD_ADDR_VAR 0 9
22691: PUSH
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 475
22701: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22702: LD_ADDR_VAR 0 11
22706: PUSH
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 476
22716: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22717: LD_ADDR_VAR 0 12
22721: PUSH
22722: LD_VAR 0 1
22726: PPUSH
22727: CALL_OW 477
22731: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22732: LD_ADDR_VAR 0 10
22736: PUSH
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL_OW 478
22746: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22747: LD_VAR 0 9
22751: NOT
22752: PUSH
22753: LD_VAR 0 11
22757: NOT
22758: OR
22759: PUSH
22760: LD_VAR 0 12
22764: NOT
22765: OR
22766: PUSH
22767: LD_VAR 0 10
22771: NOT
22772: OR
22773: IFFALSE 22808
// begin result := [ chassis , engine , control , weapon ] ;
22775: LD_ADDR_VAR 0 6
22779: PUSH
22780: LD_VAR 0 2
22784: PUSH
22785: LD_VAR 0 3
22789: PUSH
22790: LD_VAR 0 4
22794: PUSH
22795: LD_VAR 0 5
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: ST_TO_ADDR
// exit ;
22806: GO 23099
// end ; if not chassis in _chassis then
22808: LD_VAR 0 2
22812: PUSH
22813: LD_VAR 0 9
22817: IN
22818: NOT
22819: IFFALSE 22845
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_VAR 0 9
22830: PUSH
22831: LD_INT 1
22833: PPUSH
22834: LD_VAR 0 9
22838: PPUSH
22839: CALL_OW 12
22843: ARRAY
22844: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22845: LD_VAR 0 2
22849: PPUSH
22850: LD_VAR 0 3
22854: PPUSH
22855: CALL 23104 0 2
22859: NOT
22860: IFFALSE 22919
// repeat engine := _engine [ 1 ] ;
22862: LD_ADDR_VAR 0 3
22866: PUSH
22867: LD_VAR 0 11
22871: PUSH
22872: LD_INT 1
22874: ARRAY
22875: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22876: LD_ADDR_VAR 0 11
22880: PUSH
22881: LD_VAR 0 11
22885: PPUSH
22886: LD_INT 1
22888: PPUSH
22889: CALL_OW 3
22893: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22894: LD_VAR 0 2
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: CALL 23104 0 2
22908: PUSH
22909: LD_VAR 0 11
22913: PUSH
22914: EMPTY
22915: EQUAL
22916: OR
22917: IFFALSE 22862
// if not control in _control then
22919: LD_VAR 0 4
22923: PUSH
22924: LD_VAR 0 12
22928: IN
22929: NOT
22930: IFFALSE 22956
// control := _control [ rand ( 1 , _control ) ] ;
22932: LD_ADDR_VAR 0 4
22936: PUSH
22937: LD_VAR 0 12
22941: PUSH
22942: LD_INT 1
22944: PPUSH
22945: LD_VAR 0 12
22949: PPUSH
22950: CALL_OW 12
22954: ARRAY
22955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22956: LD_VAR 0 2
22960: PPUSH
22961: LD_VAR 0 5
22965: PPUSH
22966: CALL 23324 0 2
22970: NOT
22971: IFFALSE 23030
// repeat weapon := _weapon [ 1 ] ;
22973: LD_ADDR_VAR 0 5
22977: PUSH
22978: LD_VAR 0 10
22982: PUSH
22983: LD_INT 1
22985: ARRAY
22986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22987: LD_ADDR_VAR 0 10
22991: PUSH
22992: LD_VAR 0 10
22996: PPUSH
22997: LD_INT 1
22999: PPUSH
23000: CALL_OW 3
23004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23005: LD_VAR 0 2
23009: PPUSH
23010: LD_VAR 0 5
23014: PPUSH
23015: CALL 23324 0 2
23019: PUSH
23020: LD_VAR 0 10
23024: PUSH
23025: EMPTY
23026: EQUAL
23027: OR
23028: IFFALSE 22973
// result := [ ] ;
23030: LD_ADDR_VAR 0 6
23034: PUSH
23035: EMPTY
23036: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_VAR 0 2
23046: PPUSH
23047: LD_VAR 0 3
23051: PPUSH
23052: LD_VAR 0 4
23056: PPUSH
23057: LD_VAR 0 5
23061: PPUSH
23062: CALL_OW 448
23066: IFFALSE 23099
// result := [ chassis , engine , control , weapon ] ;
23068: LD_ADDR_VAR 0 6
23072: PUSH
23073: LD_VAR 0 2
23077: PUSH
23078: LD_VAR 0 3
23082: PUSH
23083: LD_VAR 0 4
23087: PUSH
23088: LD_VAR 0 5
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: ST_TO_ADDR
// end ;
23099: LD_VAR 0 6
23103: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23104: LD_INT 0
23106: PPUSH
// if not chassis or not engine then
23107: LD_VAR 0 1
23111: NOT
23112: PUSH
23113: LD_VAR 0 2
23117: NOT
23118: OR
23119: IFFALSE 23123
// exit ;
23121: GO 23319
// case engine of engine_solar :
23123: LD_VAR 0 2
23127: PUSH
23128: LD_INT 2
23130: DOUBLE
23131: EQUAL
23132: IFTRUE 23136
23134: GO 23174
23136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 11
23144: PUSH
23145: LD_INT 12
23147: PUSH
23148: LD_INT 13
23150: PUSH
23151: LD_INT 14
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 3
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: ST_TO_ADDR
23172: GO 23303
23174: LD_INT 1
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23244
23182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: LD_INT 11
23190: PUSH
23191: LD_INT 12
23193: PUSH
23194: LD_INT 13
23196: PUSH
23197: LD_INT 14
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: LD_INT 3
23208: PUSH
23209: LD_INT 4
23211: PUSH
23212: LD_INT 5
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 23
23220: PUSH
23221: LD_INT 22
23223: PUSH
23224: LD_INT 24
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: ST_TO_ADDR
23242: GO 23303
23244: LD_INT 3
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23302
23252: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_INT 13
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: LD_INT 4
23272: PUSH
23273: LD_INT 5
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 22
23281: PUSH
23282: LD_INT 23
23284: PUSH
23285: LD_INT 24
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: ST_TO_ADDR
23300: GO 23303
23302: POP
// result := ( chassis in result ) ;
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_VAR 0 1
23312: PUSH
23313: LD_VAR 0 3
23317: IN
23318: ST_TO_ADDR
// end ;
23319: LD_VAR 0 3
23323: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23324: LD_INT 0
23326: PPUSH
// if not chassis or not weapon then
23327: LD_VAR 0 1
23331: NOT
23332: PUSH
23333: LD_VAR 0 2
23337: NOT
23338: OR
23339: IFFALSE 23343
// exit ;
23341: GO 24405
// case weapon of us_machine_gun :
23343: LD_VAR 0 2
23347: PUSH
23348: LD_INT 2
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23386
23356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 2
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: LD_INT 4
23373: PUSH
23374: LD_INT 5
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: ST_TO_ADDR
23384: GO 24389
23386: LD_INT 3
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23424
23394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23395: LD_ADDR_VAR 0 3
23399: PUSH
23400: LD_INT 1
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: LD_INT 3
23408: PUSH
23409: LD_INT 4
23411: PUSH
23412: LD_INT 5
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: ST_TO_ADDR
23422: GO 24389
23424: LD_INT 11
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23462
23432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23433: LD_ADDR_VAR 0 3
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: LD_INT 4
23449: PUSH
23450: LD_INT 5
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: ST_TO_ADDR
23460: GO 24389
23462: LD_INT 4
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23496
23470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23471: LD_ADDR_VAR 0 3
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 3
23481: PUSH
23482: LD_INT 4
23484: PUSH
23485: LD_INT 5
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
23494: GO 24389
23496: LD_INT 5
23498: DOUBLE
23499: EQUAL
23500: IFTRUE 23504
23502: GO 23530
23504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23505: LD_ADDR_VAR 0 3
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: LD_INT 4
23518: PUSH
23519: LD_INT 5
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: ST_TO_ADDR
23528: GO 24389
23530: LD_INT 9
23532: DOUBLE
23533: EQUAL
23534: IFTRUE 23538
23536: GO 23564
23538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23539: LD_ADDR_VAR 0 3
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 24389
23564: LD_INT 7
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23598
23572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 24389
23598: LD_INT 12
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23632
23606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 4
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: ST_TO_ADDR
23630: GO 24389
23632: LD_INT 13
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23666
23640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23641: LD_ADDR_VAR 0 3
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: LD_INT 4
23654: PUSH
23655: LD_INT 5
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 24389
23666: LD_INT 14
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23692
23674: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23675: LD_ADDR_VAR 0 3
23679: PUSH
23680: LD_INT 4
23682: PUSH
23683: LD_INT 5
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: ST_TO_ADDR
23690: GO 24389
23692: LD_INT 6
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23718
23700: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: LD_INT 4
23708: PUSH
23709: LD_INT 5
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: ST_TO_ADDR
23716: GO 24389
23718: LD_INT 10
23720: DOUBLE
23721: EQUAL
23722: IFTRUE 23726
23724: GO 23744
23726: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23727: LD_ADDR_VAR 0 3
23731: PUSH
23732: LD_INT 4
23734: PUSH
23735: LD_INT 5
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: ST_TO_ADDR
23742: GO 24389
23744: LD_INT 22
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23778
23752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 11
23760: PUSH
23761: LD_INT 12
23763: PUSH
23764: LD_INT 13
23766: PUSH
23767: LD_INT 14
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 24389
23778: LD_INT 23
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23812
23786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_INT 11
23794: PUSH
23795: LD_INT 12
23797: PUSH
23798: LD_INT 13
23800: PUSH
23801: LD_INT 14
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24389
23812: LD_INT 24
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23846
23820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 11
23828: PUSH
23829: LD_INT 12
23831: PUSH
23832: LD_INT 13
23834: PUSH
23835: LD_INT 14
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: ST_TO_ADDR
23844: GO 24389
23846: LD_INT 30
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23880
23854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_INT 11
23862: PUSH
23863: LD_INT 12
23865: PUSH
23866: LD_INT 13
23868: PUSH
23869: LD_INT 14
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: ST_TO_ADDR
23878: GO 24389
23880: LD_INT 25
23882: DOUBLE
23883: EQUAL
23884: IFTRUE 23888
23886: GO 23906
23888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23889: LD_ADDR_VAR 0 3
23893: PUSH
23894: LD_INT 13
23896: PUSH
23897: LD_INT 14
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: ST_TO_ADDR
23904: GO 24389
23906: LD_INT 27
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23932
23914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 13
23922: PUSH
23923: LD_INT 14
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: ST_TO_ADDR
23930: GO 24389
23932: LD_EXP 82
23936: DOUBLE
23937: EQUAL
23938: IFTRUE 23942
23940: GO 23968
23942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23943: LD_ADDR_VAR 0 3
23947: PUSH
23948: LD_INT 11
23950: PUSH
23951: LD_INT 12
23953: PUSH
23954: LD_INT 13
23956: PUSH
23957: LD_INT 14
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: ST_TO_ADDR
23966: GO 24389
23968: LD_INT 28
23970: DOUBLE
23971: EQUAL
23972: IFTRUE 23976
23974: GO 23994
23976: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23977: LD_ADDR_VAR 0 3
23981: PUSH
23982: LD_INT 13
23984: PUSH
23985: LD_INT 14
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: ST_TO_ADDR
23992: GO 24389
23994: LD_INT 29
23996: DOUBLE
23997: EQUAL
23998: IFTRUE 24002
24000: GO 24020
24002: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24003: LD_ADDR_VAR 0 3
24007: PUSH
24008: LD_INT 13
24010: PUSH
24011: LD_INT 14
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 24389
24020: LD_INT 31
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24046
24028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_INT 13
24036: PUSH
24037: LD_INT 14
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: ST_TO_ADDR
24044: GO 24389
24046: LD_INT 26
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24072
24054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24055: LD_ADDR_VAR 0 3
24059: PUSH
24060: LD_INT 13
24062: PUSH
24063: LD_INT 14
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: ST_TO_ADDR
24070: GO 24389
24072: LD_INT 42
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24106
24080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24081: LD_ADDR_VAR 0 3
24085: PUSH
24086: LD_INT 21
24088: PUSH
24089: LD_INT 22
24091: PUSH
24092: LD_INT 23
24094: PUSH
24095: LD_INT 24
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: ST_TO_ADDR
24104: GO 24389
24106: LD_INT 43
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24140
24114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 21
24122: PUSH
24123: LD_INT 22
24125: PUSH
24126: LD_INT 23
24128: PUSH
24129: LD_INT 24
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
24138: GO 24389
24140: LD_INT 44
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24174
24148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_INT 21
24156: PUSH
24157: LD_INT 22
24159: PUSH
24160: LD_INT 23
24162: PUSH
24163: LD_INT 24
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: ST_TO_ADDR
24172: GO 24389
24174: LD_INT 45
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24208
24182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24183: LD_ADDR_VAR 0 3
24187: PUSH
24188: LD_INT 21
24190: PUSH
24191: LD_INT 22
24193: PUSH
24194: LD_INT 23
24196: PUSH
24197: LD_INT 24
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: ST_TO_ADDR
24206: GO 24389
24208: LD_INT 49
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24242
24216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24217: LD_ADDR_VAR 0 3
24221: PUSH
24222: LD_INT 21
24224: PUSH
24225: LD_INT 22
24227: PUSH
24228: LD_INT 23
24230: PUSH
24231: LD_INT 24
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
24240: GO 24389
24242: LD_INT 51
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24276
24250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 21
24258: PUSH
24259: LD_INT 22
24261: PUSH
24262: LD_INT 23
24264: PUSH
24265: LD_INT 24
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: ST_TO_ADDR
24274: GO 24389
24276: LD_INT 52
24278: DOUBLE
24279: EQUAL
24280: IFTRUE 24284
24282: GO 24310
24284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24285: LD_ADDR_VAR 0 3
24289: PUSH
24290: LD_INT 21
24292: PUSH
24293: LD_INT 22
24295: PUSH
24296: LD_INT 23
24298: PUSH
24299: LD_INT 24
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: ST_TO_ADDR
24308: GO 24389
24310: LD_INT 53
24312: DOUBLE
24313: EQUAL
24314: IFTRUE 24318
24316: GO 24336
24318: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24319: LD_ADDR_VAR 0 3
24323: PUSH
24324: LD_INT 23
24326: PUSH
24327: LD_INT 24
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: ST_TO_ADDR
24334: GO 24389
24336: LD_INT 46
24338: DOUBLE
24339: EQUAL
24340: IFTRUE 24344
24342: GO 24362
24344: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: LD_INT 23
24352: PUSH
24353: LD_INT 24
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: ST_TO_ADDR
24360: GO 24389
24362: LD_INT 47
24364: DOUBLE
24365: EQUAL
24366: IFTRUE 24370
24368: GO 24388
24370: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24371: LD_ADDR_VAR 0 3
24375: PUSH
24376: LD_INT 23
24378: PUSH
24379: LD_INT 24
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: ST_TO_ADDR
24386: GO 24389
24388: POP
// result := ( chassis in result ) ;
24389: LD_ADDR_VAR 0 3
24393: PUSH
24394: LD_VAR 0 1
24398: PUSH
24399: LD_VAR 0 3
24403: IN
24404: ST_TO_ADDR
// end ;
24405: LD_VAR 0 3
24409: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24410: LD_INT 0
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
// result := array ;
24419: LD_ADDR_VAR 0 5
24423: PUSH
24424: LD_VAR 0 1
24428: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24429: LD_VAR 0 1
24433: NOT
24434: PUSH
24435: LD_VAR 0 2
24439: NOT
24440: OR
24441: PUSH
24442: LD_VAR 0 3
24446: NOT
24447: OR
24448: PUSH
24449: LD_VAR 0 2
24453: PUSH
24454: LD_VAR 0 1
24458: GREATER
24459: OR
24460: PUSH
24461: LD_VAR 0 3
24465: PUSH
24466: LD_VAR 0 1
24470: GREATER
24471: OR
24472: IFFALSE 24476
// exit ;
24474: GO 24772
// if direction then
24476: LD_VAR 0 4
24480: IFFALSE 24544
// begin d := 1 ;
24482: LD_ADDR_VAR 0 9
24486: PUSH
24487: LD_INT 1
24489: ST_TO_ADDR
// if i_from > i_to then
24490: LD_VAR 0 2
24494: PUSH
24495: LD_VAR 0 3
24499: GREATER
24500: IFFALSE 24526
// length := ( array - i_from ) + i_to else
24502: LD_ADDR_VAR 0 11
24506: PUSH
24507: LD_VAR 0 1
24511: PUSH
24512: LD_VAR 0 2
24516: MINUS
24517: PUSH
24518: LD_VAR 0 3
24522: PLUS
24523: ST_TO_ADDR
24524: GO 24542
// length := i_to - i_from ;
24526: LD_ADDR_VAR 0 11
24530: PUSH
24531: LD_VAR 0 3
24535: PUSH
24536: LD_VAR 0 2
24540: MINUS
24541: ST_TO_ADDR
// end else
24542: GO 24605
// begin d := - 1 ;
24544: LD_ADDR_VAR 0 9
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: ST_TO_ADDR
// if i_from > i_to then
24553: LD_VAR 0 2
24557: PUSH
24558: LD_VAR 0 3
24562: GREATER
24563: IFFALSE 24583
// length := i_from - i_to else
24565: LD_ADDR_VAR 0 11
24569: PUSH
24570: LD_VAR 0 2
24574: PUSH
24575: LD_VAR 0 3
24579: MINUS
24580: ST_TO_ADDR
24581: GO 24605
// length := ( array - i_to ) + i_from ;
24583: LD_ADDR_VAR 0 11
24587: PUSH
24588: LD_VAR 0 1
24592: PUSH
24593: LD_VAR 0 3
24597: MINUS
24598: PUSH
24599: LD_VAR 0 2
24603: PLUS
24604: ST_TO_ADDR
// end ; if not length then
24605: LD_VAR 0 11
24609: NOT
24610: IFFALSE 24614
// exit ;
24612: GO 24772
// tmp := array ;
24614: LD_ADDR_VAR 0 10
24618: PUSH
24619: LD_VAR 0 1
24623: ST_TO_ADDR
// for i = 1 to length do
24624: LD_ADDR_VAR 0 6
24628: PUSH
24629: DOUBLE
24630: LD_INT 1
24632: DEC
24633: ST_TO_ADDR
24634: LD_VAR 0 11
24638: PUSH
24639: FOR_TO
24640: IFFALSE 24760
// begin for j = 1 to array do
24642: LD_ADDR_VAR 0 7
24646: PUSH
24647: DOUBLE
24648: LD_INT 1
24650: DEC
24651: ST_TO_ADDR
24652: LD_VAR 0 1
24656: PUSH
24657: FOR_TO
24658: IFFALSE 24746
// begin k := j + d ;
24660: LD_ADDR_VAR 0 8
24664: PUSH
24665: LD_VAR 0 7
24669: PUSH
24670: LD_VAR 0 9
24674: PLUS
24675: ST_TO_ADDR
// if k > array then
24676: LD_VAR 0 8
24680: PUSH
24681: LD_VAR 0 1
24685: GREATER
24686: IFFALSE 24696
// k := 1 ;
24688: LD_ADDR_VAR 0 8
24692: PUSH
24693: LD_INT 1
24695: ST_TO_ADDR
// if not k then
24696: LD_VAR 0 8
24700: NOT
24701: IFFALSE 24713
// k := array ;
24703: LD_ADDR_VAR 0 8
24707: PUSH
24708: LD_VAR 0 1
24712: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24713: LD_ADDR_VAR 0 10
24717: PUSH
24718: LD_VAR 0 10
24722: PPUSH
24723: LD_VAR 0 8
24727: PPUSH
24728: LD_VAR 0 1
24732: PUSH
24733: LD_VAR 0 7
24737: ARRAY
24738: PPUSH
24739: CALL_OW 1
24743: ST_TO_ADDR
// end ;
24744: GO 24657
24746: POP
24747: POP
// array := tmp ;
24748: LD_ADDR_VAR 0 1
24752: PUSH
24753: LD_VAR 0 10
24757: ST_TO_ADDR
// end ;
24758: GO 24639
24760: POP
24761: POP
// result := array ;
24762: LD_ADDR_VAR 0 5
24766: PUSH
24767: LD_VAR 0 1
24771: ST_TO_ADDR
// end ;
24772: LD_VAR 0 5
24776: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24777: LD_INT 0
24779: PPUSH
24780: PPUSH
// result := 0 ;
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_INT 0
24788: ST_TO_ADDR
// if not array or not value in array then
24789: LD_VAR 0 1
24793: NOT
24794: PUSH
24795: LD_VAR 0 2
24799: PUSH
24800: LD_VAR 0 1
24804: IN
24805: NOT
24806: OR
24807: IFFALSE 24811
// exit ;
24809: GO 24865
// for i = 1 to array do
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: DOUBLE
24817: LD_INT 1
24819: DEC
24820: ST_TO_ADDR
24821: LD_VAR 0 1
24825: PUSH
24826: FOR_TO
24827: IFFALSE 24863
// if value = array [ i ] then
24829: LD_VAR 0 2
24833: PUSH
24834: LD_VAR 0 1
24838: PUSH
24839: LD_VAR 0 4
24843: ARRAY
24844: EQUAL
24845: IFFALSE 24861
// begin result := i ;
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_VAR 0 4
24856: ST_TO_ADDR
// exit ;
24857: POP
24858: POP
24859: GO 24865
// end ;
24861: GO 24826
24863: POP
24864: POP
// end ;
24865: LD_VAR 0 3
24869: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24870: LD_INT 0
24872: PPUSH
// vc_chassis := chassis ;
24873: LD_ADDR_OWVAR 37
24877: PUSH
24878: LD_VAR 0 1
24882: ST_TO_ADDR
// vc_engine := engine ;
24883: LD_ADDR_OWVAR 39
24887: PUSH
24888: LD_VAR 0 2
24892: ST_TO_ADDR
// vc_control := control ;
24893: LD_ADDR_OWVAR 38
24897: PUSH
24898: LD_VAR 0 3
24902: ST_TO_ADDR
// vc_weapon := weapon ;
24903: LD_ADDR_OWVAR 40
24907: PUSH
24908: LD_VAR 0 4
24912: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24913: LD_ADDR_OWVAR 41
24917: PUSH
24918: LD_VAR 0 5
24922: ST_TO_ADDR
// end ;
24923: LD_VAR 0 6
24927: RET
// export function WantPlant ( unit ) ; var task ; begin
24928: LD_INT 0
24930: PPUSH
24931: PPUSH
// result := false ;
24932: LD_ADDR_VAR 0 2
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_VAR 0 1
24949: PPUSH
24950: CALL_OW 437
24954: ST_TO_ADDR
// if task then
24955: LD_VAR 0 3
24959: IFFALSE 24987
// if task [ 1 ] [ 1 ] = p then
24961: LD_VAR 0 3
24965: PUSH
24966: LD_INT 1
24968: ARRAY
24969: PUSH
24970: LD_INT 1
24972: ARRAY
24973: PUSH
24974: LD_STRING p
24976: EQUAL
24977: IFFALSE 24987
// result := true ;
24979: LD_ADDR_VAR 0 2
24983: PUSH
24984: LD_INT 1
24986: ST_TO_ADDR
// end ;
24987: LD_VAR 0 2
24991: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24992: LD_INT 0
24994: PPUSH
24995: PPUSH
24996: PPUSH
24997: PPUSH
// if pos < 1 then
24998: LD_VAR 0 2
25002: PUSH
25003: LD_INT 1
25005: LESS
25006: IFFALSE 25010
// exit ;
25008: GO 25313
// if pos = 1 then
25010: LD_VAR 0 2
25014: PUSH
25015: LD_INT 1
25017: EQUAL
25018: IFFALSE 25051
// result := Replace ( arr , pos [ 1 ] , value ) else
25020: LD_ADDR_VAR 0 4
25024: PUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: LD_VAR 0 2
25034: PUSH
25035: LD_INT 1
25037: ARRAY
25038: PPUSH
25039: LD_VAR 0 3
25043: PPUSH
25044: CALL_OW 1
25048: ST_TO_ADDR
25049: GO 25313
// begin tmp := arr ;
25051: LD_ADDR_VAR 0 6
25055: PUSH
25056: LD_VAR 0 1
25060: ST_TO_ADDR
// s_arr := [ tmp ] ;
25061: LD_ADDR_VAR 0 7
25065: PUSH
25066: LD_VAR 0 6
25070: PUSH
25071: EMPTY
25072: LIST
25073: ST_TO_ADDR
// for i = 1 to pos - 1 do
25074: LD_ADDR_VAR 0 5
25078: PUSH
25079: DOUBLE
25080: LD_INT 1
25082: DEC
25083: ST_TO_ADDR
25084: LD_VAR 0 2
25088: PUSH
25089: LD_INT 1
25091: MINUS
25092: PUSH
25093: FOR_TO
25094: IFFALSE 25139
// begin tmp := tmp [ pos [ i ] ] ;
25096: LD_ADDR_VAR 0 6
25100: PUSH
25101: LD_VAR 0 6
25105: PUSH
25106: LD_VAR 0 2
25110: PUSH
25111: LD_VAR 0 5
25115: ARRAY
25116: ARRAY
25117: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25118: LD_ADDR_VAR 0 7
25122: PUSH
25123: LD_VAR 0 7
25127: PUSH
25128: LD_VAR 0 6
25132: PUSH
25133: EMPTY
25134: LIST
25135: ADD
25136: ST_TO_ADDR
// end ;
25137: GO 25093
25139: POP
25140: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25141: LD_ADDR_VAR 0 6
25145: PUSH
25146: LD_VAR 0 6
25150: PPUSH
25151: LD_VAR 0 2
25155: PUSH
25156: LD_VAR 0 2
25160: ARRAY
25161: PPUSH
25162: LD_VAR 0 3
25166: PPUSH
25167: CALL_OW 1
25171: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25172: LD_ADDR_VAR 0 7
25176: PUSH
25177: LD_VAR 0 7
25181: PPUSH
25182: LD_VAR 0 7
25186: PPUSH
25187: LD_VAR 0 6
25191: PPUSH
25192: CALL_OW 1
25196: ST_TO_ADDR
// for i = s_arr downto 2 do
25197: LD_ADDR_VAR 0 5
25201: PUSH
25202: DOUBLE
25203: LD_VAR 0 7
25207: INC
25208: ST_TO_ADDR
25209: LD_INT 2
25211: PUSH
25212: FOR_DOWNTO
25213: IFFALSE 25297
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25215: LD_ADDR_VAR 0 6
25219: PUSH
25220: LD_VAR 0 7
25224: PUSH
25225: LD_VAR 0 5
25229: PUSH
25230: LD_INT 1
25232: MINUS
25233: ARRAY
25234: PPUSH
25235: LD_VAR 0 2
25239: PUSH
25240: LD_VAR 0 5
25244: PUSH
25245: LD_INT 1
25247: MINUS
25248: ARRAY
25249: PPUSH
25250: LD_VAR 0 7
25254: PUSH
25255: LD_VAR 0 5
25259: ARRAY
25260: PPUSH
25261: CALL_OW 1
25265: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25266: LD_ADDR_VAR 0 7
25270: PUSH
25271: LD_VAR 0 7
25275: PPUSH
25276: LD_VAR 0 5
25280: PUSH
25281: LD_INT 1
25283: MINUS
25284: PPUSH
25285: LD_VAR 0 6
25289: PPUSH
25290: CALL_OW 1
25294: ST_TO_ADDR
// end ;
25295: GO 25212
25297: POP
25298: POP
// result := s_arr [ 1 ] ;
25299: LD_ADDR_VAR 0 4
25303: PUSH
25304: LD_VAR 0 7
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: ST_TO_ADDR
// end ; end ;
25313: LD_VAR 0 4
25317: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25318: LD_INT 0
25320: PPUSH
25321: PPUSH
// if not list then
25322: LD_VAR 0 1
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25422
// i := list [ pos1 ] ;
25331: LD_ADDR_VAR 0 5
25335: PUSH
25336: LD_VAR 0 1
25340: PUSH
25341: LD_VAR 0 2
25345: ARRAY
25346: ST_TO_ADDR
// if not i then
25347: LD_VAR 0 5
25351: NOT
25352: IFFALSE 25356
// exit ;
25354: GO 25422
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25356: LD_ADDR_VAR 0 1
25360: PUSH
25361: LD_VAR 0 1
25365: PPUSH
25366: LD_VAR 0 2
25370: PPUSH
25371: LD_VAR 0 1
25375: PUSH
25376: LD_VAR 0 3
25380: ARRAY
25381: PPUSH
25382: CALL_OW 1
25386: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25387: LD_ADDR_VAR 0 1
25391: PUSH
25392: LD_VAR 0 1
25396: PPUSH
25397: LD_VAR 0 3
25401: PPUSH
25402: LD_VAR 0 5
25406: PPUSH
25407: CALL_OW 1
25411: ST_TO_ADDR
// result := list ;
25412: LD_ADDR_VAR 0 4
25416: PUSH
25417: LD_VAR 0 1
25421: ST_TO_ADDR
// end ;
25422: LD_VAR 0 4
25426: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25427: LD_INT 0
25429: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25430: LD_ADDR_VAR 0 5
25434: PUSH
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 250
25444: PPUSH
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL_OW 251
25454: PPUSH
25455: LD_VAR 0 2
25459: PPUSH
25460: LD_VAR 0 3
25464: PPUSH
25465: LD_VAR 0 4
25469: PPUSH
25470: CALL 25480 0 5
25474: ST_TO_ADDR
// end ;
25475: LD_VAR 0 5
25479: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// if not list then
25486: LD_VAR 0 3
25490: NOT
25491: IFFALSE 25495
// exit ;
25493: GO 25883
// result := [ ] ;
25495: LD_ADDR_VAR 0 6
25499: PUSH
25500: EMPTY
25501: ST_TO_ADDR
// for i in list do
25502: LD_ADDR_VAR 0 7
25506: PUSH
25507: LD_VAR 0 3
25511: PUSH
25512: FOR_IN
25513: IFFALSE 25715
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25515: LD_ADDR_VAR 0 9
25519: PUSH
25520: LD_VAR 0 7
25524: PPUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: CALL_OW 297
25539: ST_TO_ADDR
// if not result then
25540: LD_VAR 0 6
25544: NOT
25545: IFFALSE 25571
// result := [ [ i , tmp ] ] else
25547: LD_ADDR_VAR 0 6
25551: PUSH
25552: LD_VAR 0 7
25556: PUSH
25557: LD_VAR 0 9
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: EMPTY
25567: LIST
25568: ST_TO_ADDR
25569: GO 25713
// begin if result [ result ] [ 2 ] < tmp then
25571: LD_VAR 0 6
25575: PUSH
25576: LD_VAR 0 6
25580: ARRAY
25581: PUSH
25582: LD_INT 2
25584: ARRAY
25585: PUSH
25586: LD_VAR 0 9
25590: LESS
25591: IFFALSE 25633
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25593: LD_ADDR_VAR 0 6
25597: PUSH
25598: LD_VAR 0 6
25602: PPUSH
25603: LD_VAR 0 6
25607: PUSH
25608: LD_INT 1
25610: PLUS
25611: PPUSH
25612: LD_VAR 0 7
25616: PUSH
25617: LD_VAR 0 9
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PPUSH
25626: CALL_OW 2
25630: ST_TO_ADDR
25631: GO 25713
// for j = 1 to result do
25633: LD_ADDR_VAR 0 8
25637: PUSH
25638: DOUBLE
25639: LD_INT 1
25641: DEC
25642: ST_TO_ADDR
25643: LD_VAR 0 6
25647: PUSH
25648: FOR_TO
25649: IFFALSE 25711
// begin if tmp < result [ j ] [ 2 ] then
25651: LD_VAR 0 9
25655: PUSH
25656: LD_VAR 0 6
25660: PUSH
25661: LD_VAR 0 8
25665: ARRAY
25666: PUSH
25667: LD_INT 2
25669: ARRAY
25670: LESS
25671: IFFALSE 25709
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25673: LD_ADDR_VAR 0 6
25677: PUSH
25678: LD_VAR 0 6
25682: PPUSH
25683: LD_VAR 0 8
25687: PPUSH
25688: LD_VAR 0 7
25692: PUSH
25693: LD_VAR 0 9
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PPUSH
25702: CALL_OW 2
25706: ST_TO_ADDR
// break ;
25707: GO 25711
// end ; end ;
25709: GO 25648
25711: POP
25712: POP
// end ; end ;
25713: GO 25512
25715: POP
25716: POP
// if result and not asc then
25717: LD_VAR 0 6
25721: PUSH
25722: LD_VAR 0 4
25726: NOT
25727: AND
25728: IFFALSE 25803
// begin tmp := result ;
25730: LD_ADDR_VAR 0 9
25734: PUSH
25735: LD_VAR 0 6
25739: ST_TO_ADDR
// for i = tmp downto 1 do
25740: LD_ADDR_VAR 0 7
25744: PUSH
25745: DOUBLE
25746: LD_VAR 0 9
25750: INC
25751: ST_TO_ADDR
25752: LD_INT 1
25754: PUSH
25755: FOR_DOWNTO
25756: IFFALSE 25801
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25758: LD_ADDR_VAR 0 6
25762: PUSH
25763: LD_VAR 0 6
25767: PPUSH
25768: LD_VAR 0 9
25772: PUSH
25773: LD_VAR 0 7
25777: MINUS
25778: PUSH
25779: LD_INT 1
25781: PLUS
25782: PPUSH
25783: LD_VAR 0 9
25787: PUSH
25788: LD_VAR 0 7
25792: ARRAY
25793: PPUSH
25794: CALL_OW 1
25798: ST_TO_ADDR
25799: GO 25755
25801: POP
25802: POP
// end ; tmp := [ ] ;
25803: LD_ADDR_VAR 0 9
25807: PUSH
25808: EMPTY
25809: ST_TO_ADDR
// if mode then
25810: LD_VAR 0 5
25814: IFFALSE 25883
// begin for i = 1 to result do
25816: LD_ADDR_VAR 0 7
25820: PUSH
25821: DOUBLE
25822: LD_INT 1
25824: DEC
25825: ST_TO_ADDR
25826: LD_VAR 0 6
25830: PUSH
25831: FOR_TO
25832: IFFALSE 25871
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25834: LD_ADDR_VAR 0 9
25838: PUSH
25839: LD_VAR 0 9
25843: PPUSH
25844: LD_VAR 0 7
25848: PPUSH
25849: LD_VAR 0 6
25853: PUSH
25854: LD_VAR 0 7
25858: ARRAY
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: CALL_OW 1
25868: ST_TO_ADDR
25869: GO 25831
25871: POP
25872: POP
// result := tmp ;
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_VAR 0 9
25882: ST_TO_ADDR
// end ; end ;
25883: LD_VAR 0 6
25887: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25888: LD_INT 0
25890: PPUSH
25891: PPUSH
25892: PPUSH
25893: PPUSH
25894: PPUSH
25895: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25896: LD_ADDR_VAR 0 5
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: ST_TO_ADDR
// if not x or not y then
25918: LD_VAR 0 2
25922: NOT
25923: PUSH
25924: LD_VAR 0 3
25928: NOT
25929: OR
25930: IFFALSE 25934
// exit ;
25932: GO 27586
// if not range then
25934: LD_VAR 0 4
25938: NOT
25939: IFFALSE 25949
// range := 10 ;
25941: LD_ADDR_VAR 0 4
25945: PUSH
25946: LD_INT 10
25948: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25949: LD_ADDR_VAR 0 8
25953: PUSH
25954: LD_INT 81
25956: PUSH
25957: LD_VAR 0 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 92
25968: PUSH
25969: LD_VAR 0 2
25973: PUSH
25974: LD_VAR 0 3
25978: PUSH
25979: LD_VAR 0 4
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 3
25992: PUSH
25993: LD_INT 21
25995: PUSH
25996: LD_INT 3
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: PPUSH
26012: CALL_OW 69
26016: ST_TO_ADDR
// if not tmp then
26017: LD_VAR 0 8
26021: NOT
26022: IFFALSE 26026
// exit ;
26024: GO 27586
// for i in tmp do
26026: LD_ADDR_VAR 0 6
26030: PUSH
26031: LD_VAR 0 8
26035: PUSH
26036: FOR_IN
26037: IFFALSE 27561
// begin points := [ 0 , 0 , 0 ] ;
26039: LD_ADDR_VAR 0 9
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: ST_TO_ADDR
// bpoints := 1 ;
26058: LD_ADDR_VAR 0 10
26062: PUSH
26063: LD_INT 1
26065: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26066: LD_VAR 0 6
26070: PPUSH
26071: CALL_OW 247
26075: PUSH
26076: LD_INT 1
26078: DOUBLE
26079: EQUAL
26080: IFTRUE 26084
26082: GO 26662
26084: POP
// begin if GetClass ( i ) = 1 then
26085: LD_VAR 0 6
26089: PPUSH
26090: CALL_OW 257
26094: PUSH
26095: LD_INT 1
26097: EQUAL
26098: IFFALSE 26119
// points := [ 10 , 5 , 3 ] ;
26100: LD_ADDR_VAR 0 9
26104: PUSH
26105: LD_INT 10
26107: PUSH
26108: LD_INT 5
26110: PUSH
26111: LD_INT 3
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26119: LD_VAR 0 6
26123: PPUSH
26124: CALL_OW 257
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: LD_INT 3
26134: PUSH
26135: LD_INT 4
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: IN
26143: IFFALSE 26164
// points := [ 3 , 2 , 1 ] ;
26145: LD_ADDR_VAR 0 9
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26164: LD_VAR 0 6
26168: PPUSH
26169: CALL_OW 257
26173: PUSH
26174: LD_INT 5
26176: EQUAL
26177: IFFALSE 26198
// points := [ 130 , 5 , 2 ] ;
26179: LD_ADDR_VAR 0 9
26183: PUSH
26184: LD_INT 130
26186: PUSH
26187: LD_INT 5
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26198: LD_VAR 0 6
26202: PPUSH
26203: CALL_OW 257
26207: PUSH
26208: LD_INT 8
26210: EQUAL
26211: IFFALSE 26232
// points := [ 35 , 35 , 30 ] ;
26213: LD_ADDR_VAR 0 9
26217: PUSH
26218: LD_INT 35
26220: PUSH
26221: LD_INT 35
26223: PUSH
26224: LD_INT 30
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26232: LD_VAR 0 6
26236: PPUSH
26237: CALL_OW 257
26241: PUSH
26242: LD_INT 9
26244: EQUAL
26245: IFFALSE 26266
// points := [ 20 , 55 , 40 ] ;
26247: LD_ADDR_VAR 0 9
26251: PUSH
26252: LD_INT 20
26254: PUSH
26255: LD_INT 55
26257: PUSH
26258: LD_INT 40
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: LIST
26265: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26266: LD_VAR 0 6
26270: PPUSH
26271: CALL_OW 257
26275: PUSH
26276: LD_INT 12
26278: PUSH
26279: LD_INT 16
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: IN
26286: IFFALSE 26307
// points := [ 5 , 3 , 2 ] ;
26288: LD_ADDR_VAR 0 9
26292: PUSH
26293: LD_INT 5
26295: PUSH
26296: LD_INT 3
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26307: LD_VAR 0 6
26311: PPUSH
26312: CALL_OW 257
26316: PUSH
26317: LD_INT 17
26319: EQUAL
26320: IFFALSE 26341
// points := [ 100 , 50 , 75 ] ;
26322: LD_ADDR_VAR 0 9
26326: PUSH
26327: LD_INT 100
26329: PUSH
26330: LD_INT 50
26332: PUSH
26333: LD_INT 75
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26341: LD_VAR 0 6
26345: PPUSH
26346: CALL_OW 257
26350: PUSH
26351: LD_INT 15
26353: EQUAL
26354: IFFALSE 26375
// points := [ 10 , 5 , 3 ] ;
26356: LD_ADDR_VAR 0 9
26360: PUSH
26361: LD_INT 10
26363: PUSH
26364: LD_INT 5
26366: PUSH
26367: LD_INT 3
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26375: LD_VAR 0 6
26379: PPUSH
26380: CALL_OW 257
26384: PUSH
26385: LD_INT 14
26387: EQUAL
26388: IFFALSE 26409
// points := [ 10 , 0 , 0 ] ;
26390: LD_ADDR_VAR 0 9
26394: PUSH
26395: LD_INT 10
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26409: LD_VAR 0 6
26413: PPUSH
26414: CALL_OW 257
26418: PUSH
26419: LD_INT 11
26421: EQUAL
26422: IFFALSE 26443
// points := [ 30 , 10 , 5 ] ;
26424: LD_ADDR_VAR 0 9
26428: PUSH
26429: LD_INT 30
26431: PUSH
26432: LD_INT 10
26434: PUSH
26435: LD_INT 5
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26443: LD_VAR 0 1
26447: PPUSH
26448: LD_INT 5
26450: PPUSH
26451: CALL_OW 321
26455: PUSH
26456: LD_INT 2
26458: EQUAL
26459: IFFALSE 26476
// bpoints := bpoints * 1.8 ;
26461: LD_ADDR_VAR 0 10
26465: PUSH
26466: LD_VAR 0 10
26470: PUSH
26471: LD_REAL  1.80000000000000E+0000
26474: MUL
26475: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26476: LD_VAR 0 6
26480: PPUSH
26481: CALL_OW 257
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 3
26494: PUSH
26495: LD_INT 4
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: IN
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: LD_INT 51
26512: PPUSH
26513: CALL_OW 321
26517: PUSH
26518: LD_INT 2
26520: EQUAL
26521: AND
26522: IFFALSE 26539
// bpoints := bpoints * 1.2 ;
26524: LD_ADDR_VAR 0 10
26528: PUSH
26529: LD_VAR 0 10
26533: PUSH
26534: LD_REAL  1.20000000000000E+0000
26537: MUL
26538: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26539: LD_VAR 0 6
26543: PPUSH
26544: CALL_OW 257
26548: PUSH
26549: LD_INT 5
26551: PUSH
26552: LD_INT 7
26554: PUSH
26555: LD_INT 9
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: IN
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 52
26571: PPUSH
26572: CALL_OW 321
26576: PUSH
26577: LD_INT 2
26579: EQUAL
26580: AND
26581: IFFALSE 26598
// bpoints := bpoints * 1.5 ;
26583: LD_ADDR_VAR 0 10
26587: PUSH
26588: LD_VAR 0 10
26592: PUSH
26593: LD_REAL  1.50000000000000E+0000
26596: MUL
26597: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26598: LD_VAR 0 1
26602: PPUSH
26603: LD_INT 66
26605: PPUSH
26606: CALL_OW 321
26610: PUSH
26611: LD_INT 2
26613: EQUAL
26614: IFFALSE 26631
// bpoints := bpoints * 1.1 ;
26616: LD_ADDR_VAR 0 10
26620: PUSH
26621: LD_VAR 0 10
26625: PUSH
26626: LD_REAL  1.10000000000000E+0000
26629: MUL
26630: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26631: LD_ADDR_VAR 0 10
26635: PUSH
26636: LD_VAR 0 10
26640: PUSH
26641: LD_VAR 0 6
26645: PPUSH
26646: LD_INT 1
26648: PPUSH
26649: CALL_OW 259
26653: PUSH
26654: LD_REAL  1.15000000000000E+0000
26657: MUL
26658: MUL
26659: ST_TO_ADDR
// end ; unit_vehicle :
26660: GO 27490
26662: LD_INT 2
26664: DOUBLE
26665: EQUAL
26666: IFTRUE 26670
26668: GO 27478
26670: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26671: LD_VAR 0 6
26675: PPUSH
26676: CALL_OW 264
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: LD_INT 42
26686: PUSH
26687: LD_INT 24
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: IN
26695: IFFALSE 26716
// points := [ 25 , 5 , 3 ] ;
26697: LD_ADDR_VAR 0 9
26701: PUSH
26702: LD_INT 25
26704: PUSH
26705: LD_INT 5
26707: PUSH
26708: LD_INT 3
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: LIST
26715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26716: LD_VAR 0 6
26720: PPUSH
26721: CALL_OW 264
26725: PUSH
26726: LD_INT 4
26728: PUSH
26729: LD_INT 43
26731: PUSH
26732: LD_INT 25
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: IN
26740: IFFALSE 26761
// points := [ 40 , 15 , 5 ] ;
26742: LD_ADDR_VAR 0 9
26746: PUSH
26747: LD_INT 40
26749: PUSH
26750: LD_INT 15
26752: PUSH
26753: LD_INT 5
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26761: LD_VAR 0 6
26765: PPUSH
26766: CALL_OW 264
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: LD_INT 23
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: IN
26781: IFFALSE 26802
// points := [ 7 , 25 , 8 ] ;
26783: LD_ADDR_VAR 0 9
26787: PUSH
26788: LD_INT 7
26790: PUSH
26791: LD_INT 25
26793: PUSH
26794: LD_INT 8
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26802: LD_VAR 0 6
26806: PPUSH
26807: CALL_OW 264
26811: PUSH
26812: LD_INT 5
26814: PUSH
26815: LD_INT 27
26817: PUSH
26818: LD_INT 44
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: IN
26826: IFFALSE 26847
// points := [ 14 , 50 , 16 ] ;
26828: LD_ADDR_VAR 0 9
26832: PUSH
26833: LD_INT 14
26835: PUSH
26836: LD_INT 50
26838: PUSH
26839: LD_INT 16
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26847: LD_VAR 0 6
26851: PPUSH
26852: CALL_OW 264
26856: PUSH
26857: LD_INT 6
26859: PUSH
26860: LD_INT 46
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: IN
26867: IFFALSE 26888
// points := [ 32 , 120 , 70 ] ;
26869: LD_ADDR_VAR 0 9
26873: PUSH
26874: LD_INT 32
26876: PUSH
26877: LD_INT 120
26879: PUSH
26880: LD_INT 70
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: LIST
26887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26888: LD_VAR 0 6
26892: PPUSH
26893: CALL_OW 264
26897: PUSH
26898: LD_INT 7
26900: PUSH
26901: LD_INT 28
26903: PUSH
26904: LD_INT 45
26906: PUSH
26907: LD_EXP 82
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: IN
26918: IFFALSE 26939
// points := [ 35 , 20 , 45 ] ;
26920: LD_ADDR_VAR 0 9
26924: PUSH
26925: LD_INT 35
26927: PUSH
26928: LD_INT 20
26930: PUSH
26931: LD_INT 45
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26939: LD_VAR 0 6
26943: PPUSH
26944: CALL_OW 264
26948: PUSH
26949: LD_INT 47
26951: PUSH
26952: EMPTY
26953: LIST
26954: IN
26955: IFFALSE 26976
// points := [ 67 , 45 , 75 ] ;
26957: LD_ADDR_VAR 0 9
26961: PUSH
26962: LD_INT 67
26964: PUSH
26965: LD_INT 45
26967: PUSH
26968: LD_INT 75
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26976: LD_VAR 0 6
26980: PPUSH
26981: CALL_OW 264
26985: PUSH
26986: LD_INT 26
26988: PUSH
26989: EMPTY
26990: LIST
26991: IN
26992: IFFALSE 27013
// points := [ 120 , 30 , 80 ] ;
26994: LD_ADDR_VAR 0 9
26998: PUSH
26999: LD_INT 120
27001: PUSH
27002: LD_INT 30
27004: PUSH
27005: LD_INT 80
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: LIST
27012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27013: LD_VAR 0 6
27017: PPUSH
27018: CALL_OW 264
27022: PUSH
27023: LD_INT 22
27025: PUSH
27026: EMPTY
27027: LIST
27028: IN
27029: IFFALSE 27050
// points := [ 40 , 1 , 1 ] ;
27031: LD_ADDR_VAR 0 9
27035: PUSH
27036: LD_INT 40
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27050: LD_VAR 0 6
27054: PPUSH
27055: CALL_OW 264
27059: PUSH
27060: LD_INT 29
27062: PUSH
27063: EMPTY
27064: LIST
27065: IN
27066: IFFALSE 27087
// points := [ 70 , 200 , 400 ] ;
27068: LD_ADDR_VAR 0 9
27072: PUSH
27073: LD_INT 70
27075: PUSH
27076: LD_INT 200
27078: PUSH
27079: LD_INT 400
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27087: LD_VAR 0 6
27091: PPUSH
27092: CALL_OW 264
27096: PUSH
27097: LD_INT 14
27099: PUSH
27100: LD_INT 53
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: IN
27107: IFFALSE 27128
// points := [ 40 , 10 , 20 ] ;
27109: LD_ADDR_VAR 0 9
27113: PUSH
27114: LD_INT 40
27116: PUSH
27117: LD_INT 10
27119: PUSH
27120: LD_INT 20
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27128: LD_VAR 0 6
27132: PPUSH
27133: CALL_OW 264
27137: PUSH
27138: LD_INT 9
27140: PUSH
27141: EMPTY
27142: LIST
27143: IN
27144: IFFALSE 27165
// points := [ 5 , 70 , 20 ] ;
27146: LD_ADDR_VAR 0 9
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: LD_INT 70
27156: PUSH
27157: LD_INT 20
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27165: LD_VAR 0 6
27169: PPUSH
27170: CALL_OW 264
27174: PUSH
27175: LD_INT 10
27177: PUSH
27178: EMPTY
27179: LIST
27180: IN
27181: IFFALSE 27202
// points := [ 35 , 110 , 70 ] ;
27183: LD_ADDR_VAR 0 9
27187: PUSH
27188: LD_INT 35
27190: PUSH
27191: LD_INT 110
27193: PUSH
27194: LD_INT 70
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27202: LD_VAR 0 6
27206: PPUSH
27207: CALL_OW 265
27211: PUSH
27212: LD_INT 25
27214: EQUAL
27215: IFFALSE 27236
// points := [ 80 , 65 , 100 ] ;
27217: LD_ADDR_VAR 0 9
27221: PUSH
27222: LD_INT 80
27224: PUSH
27225: LD_INT 65
27227: PUSH
27228: LD_INT 100
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27236: LD_VAR 0 6
27240: PPUSH
27241: CALL_OW 263
27245: PUSH
27246: LD_INT 1
27248: EQUAL
27249: IFFALSE 27284
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27251: LD_ADDR_VAR 0 10
27255: PUSH
27256: LD_VAR 0 10
27260: PUSH
27261: LD_VAR 0 6
27265: PPUSH
27266: CALL_OW 311
27270: PPUSH
27271: LD_INT 3
27273: PPUSH
27274: CALL_OW 259
27278: PUSH
27279: LD_INT 4
27281: MUL
27282: MUL
27283: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27284: LD_VAR 0 6
27288: PPUSH
27289: CALL_OW 263
27293: PUSH
27294: LD_INT 2
27296: EQUAL
27297: IFFALSE 27348
// begin j := IsControledBy ( i ) ;
27299: LD_ADDR_VAR 0 7
27303: PUSH
27304: LD_VAR 0 6
27308: PPUSH
27309: CALL_OW 312
27313: ST_TO_ADDR
// if j then
27314: LD_VAR 0 7
27318: IFFALSE 27348
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27320: LD_ADDR_VAR 0 10
27324: PUSH
27325: LD_VAR 0 10
27329: PUSH
27330: LD_VAR 0 7
27334: PPUSH
27335: LD_INT 3
27337: PPUSH
27338: CALL_OW 259
27342: PUSH
27343: LD_INT 3
27345: MUL
27346: MUL
27347: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27348: LD_VAR 0 6
27352: PPUSH
27353: CALL_OW 264
27357: PUSH
27358: LD_INT 5
27360: PUSH
27361: LD_INT 6
27363: PUSH
27364: LD_INT 46
27366: PUSH
27367: LD_INT 44
27369: PUSH
27370: LD_INT 47
27372: PUSH
27373: LD_INT 45
27375: PUSH
27376: LD_INT 28
27378: PUSH
27379: LD_INT 7
27381: PUSH
27382: LD_INT 27
27384: PUSH
27385: LD_INT 29
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: IN
27400: PUSH
27401: LD_VAR 0 1
27405: PPUSH
27406: LD_INT 52
27408: PPUSH
27409: CALL_OW 321
27413: PUSH
27414: LD_INT 2
27416: EQUAL
27417: AND
27418: IFFALSE 27435
// bpoints := bpoints * 1.2 ;
27420: LD_ADDR_VAR 0 10
27424: PUSH
27425: LD_VAR 0 10
27429: PUSH
27430: LD_REAL  1.20000000000000E+0000
27433: MUL
27434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27435: LD_VAR 0 6
27439: PPUSH
27440: CALL_OW 264
27444: PUSH
27445: LD_INT 6
27447: PUSH
27448: LD_INT 46
27450: PUSH
27451: LD_INT 47
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: LIST
27458: IN
27459: IFFALSE 27476
// bpoints := bpoints * 1.2 ;
27461: LD_ADDR_VAR 0 10
27465: PUSH
27466: LD_VAR 0 10
27470: PUSH
27471: LD_REAL  1.20000000000000E+0000
27474: MUL
27475: ST_TO_ADDR
// end ; unit_building :
27476: GO 27490
27478: LD_INT 3
27480: DOUBLE
27481: EQUAL
27482: IFTRUE 27486
27484: GO 27489
27486: POP
// ; end ;
27487: GO 27490
27489: POP
// for j = 1 to 3 do
27490: LD_ADDR_VAR 0 7
27494: PUSH
27495: DOUBLE
27496: LD_INT 1
27498: DEC
27499: ST_TO_ADDR
27500: LD_INT 3
27502: PUSH
27503: FOR_TO
27504: IFFALSE 27557
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27506: LD_ADDR_VAR 0 5
27510: PUSH
27511: LD_VAR 0 5
27515: PPUSH
27516: LD_VAR 0 7
27520: PPUSH
27521: LD_VAR 0 5
27525: PUSH
27526: LD_VAR 0 7
27530: ARRAY
27531: PUSH
27532: LD_VAR 0 9
27536: PUSH
27537: LD_VAR 0 7
27541: ARRAY
27542: PUSH
27543: LD_VAR 0 10
27547: MUL
27548: PLUS
27549: PPUSH
27550: CALL_OW 1
27554: ST_TO_ADDR
27555: GO 27503
27557: POP
27558: POP
// end ;
27559: GO 26036
27561: POP
27562: POP
// result := Replace ( result , 4 , tmp ) ;
27563: LD_ADDR_VAR 0 5
27567: PUSH
27568: LD_VAR 0 5
27572: PPUSH
27573: LD_INT 4
27575: PPUSH
27576: LD_VAR 0 8
27580: PPUSH
27581: CALL_OW 1
27585: ST_TO_ADDR
// end ;
27586: LD_VAR 0 5
27590: RET
// export function DangerAtRange ( unit , range ) ; begin
27591: LD_INT 0
27593: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27594: LD_ADDR_VAR 0 3
27598: PUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL_OW 255
27608: PPUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 250
27618: PPUSH
27619: LD_VAR 0 1
27623: PPUSH
27624: CALL_OW 251
27628: PPUSH
27629: LD_VAR 0 2
27633: PPUSH
27634: CALL 25888 0 4
27638: ST_TO_ADDR
// end ;
27639: LD_VAR 0 3
27643: RET
// export function DangerInArea ( side , area ) ; begin
27644: LD_INT 0
27646: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27647: LD_ADDR_VAR 0 3
27651: PUSH
27652: LD_VAR 0 2
27656: PPUSH
27657: LD_INT 81
27659: PUSH
27660: LD_VAR 0 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PPUSH
27669: CALL_OW 70
27673: ST_TO_ADDR
// end ;
27674: LD_VAR 0 3
27678: RET
// export function IsExtension ( b ) ; begin
27679: LD_INT 0
27681: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27682: LD_ADDR_VAR 0 2
27686: PUSH
27687: LD_VAR 0 1
27691: PUSH
27692: LD_INT 23
27694: PUSH
27695: LD_INT 20
27697: PUSH
27698: LD_INT 22
27700: PUSH
27701: LD_INT 17
27703: PUSH
27704: LD_INT 24
27706: PUSH
27707: LD_INT 21
27709: PUSH
27710: LD_INT 19
27712: PUSH
27713: LD_INT 16
27715: PUSH
27716: LD_INT 25
27718: PUSH
27719: LD_INT 18
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: IN
27734: ST_TO_ADDR
// end ;
27735: LD_VAR 0 2
27739: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27740: LD_INT 0
27742: PPUSH
27743: PPUSH
27744: PPUSH
// result := [ ] ;
27745: LD_ADDR_VAR 0 4
27749: PUSH
27750: EMPTY
27751: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27752: LD_ADDR_VAR 0 5
27756: PUSH
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_INT 21
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PPUSH
27772: CALL_OW 70
27776: ST_TO_ADDR
// if not tmp then
27777: LD_VAR 0 5
27781: NOT
27782: IFFALSE 27786
// exit ;
27784: GO 27850
// if checkLink then
27786: LD_VAR 0 3
27790: IFFALSE 27840
// begin for i in tmp do
27792: LD_ADDR_VAR 0 6
27796: PUSH
27797: LD_VAR 0 5
27801: PUSH
27802: FOR_IN
27803: IFFALSE 27838
// if GetBase ( i ) <> base then
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 274
27814: PUSH
27815: LD_VAR 0 1
27819: NONEQUAL
27820: IFFALSE 27836
// ComLinkToBase ( base , i ) ;
27822: LD_VAR 0 1
27826: PPUSH
27827: LD_VAR 0 6
27831: PPUSH
27832: CALL_OW 169
27836: GO 27802
27838: POP
27839: POP
// end ; result := tmp ;
27840: LD_ADDR_VAR 0 4
27844: PUSH
27845: LD_VAR 0 5
27849: ST_TO_ADDR
// end ;
27850: LD_VAR 0 4
27854: RET
// export function ComComplete ( units , b ) ; var i ; begin
27855: LD_INT 0
27857: PPUSH
27858: PPUSH
// if not units then
27859: LD_VAR 0 1
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 27958
// for i in units do
27868: LD_ADDR_VAR 0 4
27872: PUSH
27873: LD_VAR 0 1
27877: PUSH
27878: FOR_IN
27879: IFFALSE 27956
// if BuildingStatus ( b ) = bs_build then
27881: LD_VAR 0 2
27885: PPUSH
27886: CALL_OW 461
27890: PUSH
27891: LD_INT 1
27893: EQUAL
27894: IFFALSE 27954
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27896: LD_VAR 0 4
27900: PPUSH
27901: LD_STRING h
27903: PUSH
27904: LD_VAR 0 2
27908: PPUSH
27909: CALL_OW 250
27913: PUSH
27914: LD_VAR 0 2
27918: PPUSH
27919: CALL_OW 251
27923: PUSH
27924: LD_VAR 0 2
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: PUSH
27947: EMPTY
27948: LIST
27949: PPUSH
27950: CALL_OW 446
27954: GO 27878
27956: POP
27957: POP
// end ;
27958: LD_VAR 0 3
27962: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27971: LD_VAR 0 1
27975: NOT
27976: PUSH
27977: LD_VAR 0 1
27981: PPUSH
27982: CALL_OW 263
27986: PUSH
27987: LD_INT 2
27989: NONEQUAL
27990: OR
27991: IFFALSE 27995
// exit ;
27993: GO 28311
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27995: LD_ADDR_VAR 0 6
27999: PUSH
28000: LD_INT 22
28002: PUSH
28003: LD_VAR 0 1
28007: PPUSH
28008: CALL_OW 255
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 2
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 36
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 34
28032: PUSH
28033: LD_INT 31
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: ST_TO_ADDR
// if not tmp then
28054: LD_VAR 0 6
28058: NOT
28059: IFFALSE 28063
// exit ;
28061: GO 28311
// result := [ ] ;
28063: LD_ADDR_VAR 0 2
28067: PUSH
28068: EMPTY
28069: ST_TO_ADDR
// for i in tmp do
28070: LD_ADDR_VAR 0 3
28074: PUSH
28075: LD_VAR 0 6
28079: PUSH
28080: FOR_IN
28081: IFFALSE 28152
// begin t := UnitsInside ( i ) ;
28083: LD_ADDR_VAR 0 4
28087: PUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL_OW 313
28097: ST_TO_ADDR
// if t then
28098: LD_VAR 0 4
28102: IFFALSE 28150
// for j in t do
28104: LD_ADDR_VAR 0 7
28108: PUSH
28109: LD_VAR 0 4
28113: PUSH
28114: FOR_IN
28115: IFFALSE 28148
// result := Replace ( result , result + 1 , j ) ;
28117: LD_ADDR_VAR 0 2
28121: PUSH
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_VAR 0 2
28131: PUSH
28132: LD_INT 1
28134: PLUS
28135: PPUSH
28136: LD_VAR 0 7
28140: PPUSH
28141: CALL_OW 1
28145: ST_TO_ADDR
28146: GO 28114
28148: POP
28149: POP
// end ;
28150: GO 28080
28152: POP
28153: POP
// if not result then
28154: LD_VAR 0 2
28158: NOT
28159: IFFALSE 28163
// exit ;
28161: GO 28311
// mech := result [ 1 ] ;
28163: LD_ADDR_VAR 0 5
28167: PUSH
28168: LD_VAR 0 2
28172: PUSH
28173: LD_INT 1
28175: ARRAY
28176: ST_TO_ADDR
// if result > 1 then
28177: LD_VAR 0 2
28181: PUSH
28182: LD_INT 1
28184: GREATER
28185: IFFALSE 28297
// begin for i = 2 to result do
28187: LD_ADDR_VAR 0 3
28191: PUSH
28192: DOUBLE
28193: LD_INT 2
28195: DEC
28196: ST_TO_ADDR
28197: LD_VAR 0 2
28201: PUSH
28202: FOR_TO
28203: IFFALSE 28295
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28205: LD_ADDR_VAR 0 4
28209: PUSH
28210: LD_VAR 0 2
28214: PUSH
28215: LD_VAR 0 3
28219: ARRAY
28220: PPUSH
28221: LD_INT 3
28223: PPUSH
28224: CALL_OW 259
28228: PUSH
28229: LD_VAR 0 2
28233: PUSH
28234: LD_VAR 0 3
28238: ARRAY
28239: PPUSH
28240: CALL_OW 432
28244: MINUS
28245: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28246: LD_VAR 0 4
28250: PUSH
28251: LD_VAR 0 5
28255: PPUSH
28256: LD_INT 3
28258: PPUSH
28259: CALL_OW 259
28263: PUSH
28264: LD_VAR 0 5
28268: PPUSH
28269: CALL_OW 432
28273: MINUS
28274: GREATEREQUAL
28275: IFFALSE 28293
// mech := result [ i ] ;
28277: LD_ADDR_VAR 0 5
28281: PUSH
28282: LD_VAR 0 2
28286: PUSH
28287: LD_VAR 0 3
28291: ARRAY
28292: ST_TO_ADDR
// end ;
28293: GO 28202
28295: POP
28296: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28297: LD_VAR 0 1
28301: PPUSH
28302: LD_VAR 0 5
28306: PPUSH
28307: CALL_OW 135
// end ;
28311: LD_VAR 0 2
28315: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28316: LD_INT 0
28318: PPUSH
28319: PPUSH
28320: PPUSH
28321: PPUSH
28322: PPUSH
28323: PPUSH
28324: PPUSH
28325: PPUSH
28326: PPUSH
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
// result := [ ] ;
28331: LD_ADDR_VAR 0 7
28335: PUSH
28336: EMPTY
28337: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 266
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: IN
28358: NOT
28359: IFFALSE 28363
// exit ;
28361: GO 29997
// if name then
28363: LD_VAR 0 3
28367: IFFALSE 28383
// SetBName ( base_dep , name ) ;
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_VAR 0 3
28378: PPUSH
28379: CALL_OW 500
// base := GetBase ( base_dep ) ;
28383: LD_ADDR_VAR 0 15
28387: PUSH
28388: LD_VAR 0 1
28392: PPUSH
28393: CALL_OW 274
28397: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28398: LD_ADDR_VAR 0 16
28402: PUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 255
28412: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28413: LD_ADDR_VAR 0 17
28417: PUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 248
28427: ST_TO_ADDR
// if sources then
28428: LD_VAR 0 5
28432: IFFALSE 28479
// for i = 1 to 3 do
28434: LD_ADDR_VAR 0 8
28438: PUSH
28439: DOUBLE
28440: LD_INT 1
28442: DEC
28443: ST_TO_ADDR
28444: LD_INT 3
28446: PUSH
28447: FOR_TO
28448: IFFALSE 28477
// AddResourceType ( base , i , sources [ i ] ) ;
28450: LD_VAR 0 15
28454: PPUSH
28455: LD_VAR 0 8
28459: PPUSH
28460: LD_VAR 0 5
28464: PUSH
28465: LD_VAR 0 8
28469: ARRAY
28470: PPUSH
28471: CALL_OW 276
28475: GO 28447
28477: POP
28478: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28479: LD_ADDR_VAR 0 18
28483: PUSH
28484: LD_VAR 0 15
28488: PPUSH
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: CALL 27740 0 3
28501: ST_TO_ADDR
// InitHc ;
28502: CALL_OW 19
// InitUc ;
28506: CALL_OW 18
// uc_side := side ;
28510: LD_ADDR_OWVAR 20
28514: PUSH
28515: LD_VAR 0 16
28519: ST_TO_ADDR
// uc_nation := nation ;
28520: LD_ADDR_OWVAR 21
28524: PUSH
28525: LD_VAR 0 17
28529: ST_TO_ADDR
// if buildings then
28530: LD_VAR 0 18
28534: IFFALSE 29856
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28536: LD_ADDR_VAR 0 19
28540: PUSH
28541: LD_VAR 0 18
28545: PPUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 30
28551: PUSH
28552: LD_INT 29
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 30
28561: PUSH
28562: LD_INT 30
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 72
28578: ST_TO_ADDR
// if tmp then
28579: LD_VAR 0 19
28583: IFFALSE 28631
// for i in tmp do
28585: LD_ADDR_VAR 0 8
28589: PUSH
28590: LD_VAR 0 19
28594: PUSH
28595: FOR_IN
28596: IFFALSE 28629
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28598: LD_VAR 0 8
28602: PPUSH
28603: CALL_OW 250
28607: PPUSH
28608: LD_VAR 0 8
28612: PPUSH
28613: CALL_OW 251
28617: PPUSH
28618: LD_VAR 0 16
28622: PPUSH
28623: CALL_OW 441
28627: GO 28595
28629: POP
28630: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28631: LD_VAR 0 18
28635: PPUSH
28636: LD_INT 2
28638: PUSH
28639: LD_INT 30
28641: PUSH
28642: LD_INT 32
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 30
28651: PUSH
28652: LD_INT 33
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: PPUSH
28664: CALL_OW 72
28668: IFFALSE 28756
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28670: LD_ADDR_VAR 0 8
28674: PUSH
28675: LD_VAR 0 18
28679: PPUSH
28680: LD_INT 2
28682: PUSH
28683: LD_INT 30
28685: PUSH
28686: LD_INT 32
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 30
28695: PUSH
28696: LD_INT 33
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: PPUSH
28708: CALL_OW 72
28712: PUSH
28713: FOR_IN
28714: IFFALSE 28754
// begin if not GetBWeapon ( i ) then
28716: LD_VAR 0 8
28720: PPUSH
28721: CALL_OW 269
28725: NOT
28726: IFFALSE 28752
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28728: LD_VAR 0 8
28732: PPUSH
28733: LD_VAR 0 8
28737: PPUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL 30002 0 2
28747: PPUSH
28748: CALL_OW 431
// end ;
28752: GO 28713
28754: POP
28755: POP
// end ; for i = 1 to personel do
28756: LD_ADDR_VAR 0 8
28760: PUSH
28761: DOUBLE
28762: LD_INT 1
28764: DEC
28765: ST_TO_ADDR
28766: LD_VAR 0 6
28770: PUSH
28771: FOR_TO
28772: IFFALSE 29836
// begin if i > 4 then
28774: LD_VAR 0 8
28778: PUSH
28779: LD_INT 4
28781: GREATER
28782: IFFALSE 28786
// break ;
28784: GO 29836
// case i of 1 :
28786: LD_VAR 0 8
28790: PUSH
28791: LD_INT 1
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28879
28799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28800: LD_ADDR_VAR 0 12
28804: PUSH
28805: LD_VAR 0 18
28809: PPUSH
28810: LD_INT 22
28812: PUSH
28813: LD_VAR 0 16
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 58
28824: PUSH
28825: EMPTY
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 30
28833: PUSH
28834: LD_INT 32
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 30
28843: PUSH
28844: LD_INT 4
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 30
28853: PUSH
28854: LD_INT 5
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 72
28876: ST_TO_ADDR
28877: GO 29101
28879: LD_INT 2
28881: DOUBLE
28882: EQUAL
28883: IFTRUE 28887
28885: GO 28949
28887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28888: LD_ADDR_VAR 0 12
28892: PUSH
28893: LD_VAR 0 18
28897: PPUSH
28898: LD_INT 22
28900: PUSH
28901: LD_VAR 0 16
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: LD_INT 30
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 30
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PPUSH
28942: CALL_OW 72
28946: ST_TO_ADDR
28947: GO 29101
28949: LD_INT 3
28951: DOUBLE
28952: EQUAL
28953: IFTRUE 28957
28955: GO 29019
28957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28958: LD_ADDR_VAR 0 12
28962: PUSH
28963: LD_VAR 0 18
28967: PPUSH
28968: LD_INT 22
28970: PUSH
28971: LD_VAR 0 16
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 30
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 30
28995: PUSH
28996: LD_INT 3
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 72
29016: ST_TO_ADDR
29017: GO 29101
29019: LD_INT 4
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29100
29027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29028: LD_ADDR_VAR 0 12
29032: PUSH
29033: LD_VAR 0 18
29037: PPUSH
29038: LD_INT 22
29040: PUSH
29041: LD_VAR 0 16
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 30
29055: PUSH
29056: LD_INT 6
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 30
29065: PUSH
29066: LD_INT 7
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 30
29075: PUSH
29076: LD_INT 8
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PPUSH
29093: CALL_OW 72
29097: ST_TO_ADDR
29098: GO 29101
29100: POP
// if i = 1 then
29101: LD_VAR 0 8
29105: PUSH
29106: LD_INT 1
29108: EQUAL
29109: IFFALSE 29220
// begin tmp := [ ] ;
29111: LD_ADDR_VAR 0 19
29115: PUSH
29116: EMPTY
29117: ST_TO_ADDR
// for j in f do
29118: LD_ADDR_VAR 0 9
29122: PUSH
29123: LD_VAR 0 12
29127: PUSH
29128: FOR_IN
29129: IFFALSE 29202
// if GetBType ( j ) = b_bunker then
29131: LD_VAR 0 9
29135: PPUSH
29136: CALL_OW 266
29140: PUSH
29141: LD_INT 32
29143: EQUAL
29144: IFFALSE 29171
// tmp := Insert ( tmp , 1 , j ) else
29146: LD_ADDR_VAR 0 19
29150: PUSH
29151: LD_VAR 0 19
29155: PPUSH
29156: LD_INT 1
29158: PPUSH
29159: LD_VAR 0 9
29163: PPUSH
29164: CALL_OW 2
29168: ST_TO_ADDR
29169: GO 29200
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29171: LD_ADDR_VAR 0 19
29175: PUSH
29176: LD_VAR 0 19
29180: PPUSH
29181: LD_VAR 0 19
29185: PUSH
29186: LD_INT 1
29188: PLUS
29189: PPUSH
29190: LD_VAR 0 9
29194: PPUSH
29195: CALL_OW 2
29199: ST_TO_ADDR
29200: GO 29128
29202: POP
29203: POP
// if tmp then
29204: LD_VAR 0 19
29208: IFFALSE 29220
// f := tmp ;
29210: LD_ADDR_VAR 0 12
29214: PUSH
29215: LD_VAR 0 19
29219: ST_TO_ADDR
// end ; x := personel [ i ] ;
29220: LD_ADDR_VAR 0 13
29224: PUSH
29225: LD_VAR 0 6
29229: PUSH
29230: LD_VAR 0 8
29234: ARRAY
29235: ST_TO_ADDR
// if x = - 1 then
29236: LD_VAR 0 13
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: EQUAL
29245: IFFALSE 29454
// begin for j in f do
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_VAR 0 12
29256: PUSH
29257: FOR_IN
29258: IFFALSE 29450
// repeat InitHc ;
29260: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29264: LD_VAR 0 9
29268: PPUSH
29269: CALL_OW 266
29273: PUSH
29274: LD_INT 5
29276: EQUAL
29277: IFFALSE 29347
// begin if UnitsInside ( j ) < 3 then
29279: LD_VAR 0 9
29283: PPUSH
29284: CALL_OW 313
29288: PUSH
29289: LD_INT 3
29291: LESS
29292: IFFALSE 29328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29294: LD_INT 0
29296: PPUSH
29297: LD_INT 5
29299: PUSH
29300: LD_INT 8
29302: PUSH
29303: LD_INT 9
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PUSH
29311: LD_VAR 0 17
29315: ARRAY
29316: PPUSH
29317: LD_VAR 0 4
29321: PPUSH
29322: CALL_OW 380
29326: GO 29345
// PrepareHuman ( false , i , skill ) ;
29328: LD_INT 0
29330: PPUSH
29331: LD_VAR 0 8
29335: PPUSH
29336: LD_VAR 0 4
29340: PPUSH
29341: CALL_OW 380
// end else
29345: GO 29364
// PrepareHuman ( false , i , skill ) ;
29347: LD_INT 0
29349: PPUSH
29350: LD_VAR 0 8
29354: PPUSH
29355: LD_VAR 0 4
29359: PPUSH
29360: CALL_OW 380
// un := CreateHuman ;
29364: LD_ADDR_VAR 0 14
29368: PUSH
29369: CALL_OW 44
29373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29374: LD_ADDR_VAR 0 7
29378: PUSH
29379: LD_VAR 0 7
29383: PPUSH
29384: LD_INT 1
29386: PPUSH
29387: LD_VAR 0 14
29391: PPUSH
29392: CALL_OW 2
29396: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29397: LD_VAR 0 14
29401: PPUSH
29402: LD_VAR 0 9
29406: PPUSH
29407: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29411: LD_VAR 0 9
29415: PPUSH
29416: CALL_OW 313
29420: PUSH
29421: LD_INT 6
29423: EQUAL
29424: PUSH
29425: LD_VAR 0 9
29429: PPUSH
29430: CALL_OW 266
29434: PUSH
29435: LD_INT 32
29437: PUSH
29438: LD_INT 31
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: IN
29445: OR
29446: IFFALSE 29260
29448: GO 29257
29450: POP
29451: POP
// end else
29452: GO 29834
// for j = 1 to x do
29454: LD_ADDR_VAR 0 9
29458: PUSH
29459: DOUBLE
29460: LD_INT 1
29462: DEC
29463: ST_TO_ADDR
29464: LD_VAR 0 13
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29832
// begin InitHc ;
29472: CALL_OW 19
// if not f then
29476: LD_VAR 0 12
29480: NOT
29481: IFFALSE 29570
// begin PrepareHuman ( false , i , skill ) ;
29483: LD_INT 0
29485: PPUSH
29486: LD_VAR 0 8
29490: PPUSH
29491: LD_VAR 0 4
29495: PPUSH
29496: CALL_OW 380
// un := CreateHuman ;
29500: LD_ADDR_VAR 0 14
29504: PUSH
29505: CALL_OW 44
29509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29510: LD_ADDR_VAR 0 7
29514: PUSH
29515: LD_VAR 0 7
29519: PPUSH
29520: LD_INT 1
29522: PPUSH
29523: LD_VAR 0 14
29527: PPUSH
29528: CALL_OW 2
29532: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29533: LD_VAR 0 14
29537: PPUSH
29538: LD_VAR 0 1
29542: PPUSH
29543: CALL_OW 250
29547: PPUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 251
29557: PPUSH
29558: LD_INT 10
29560: PPUSH
29561: LD_INT 0
29563: PPUSH
29564: CALL_OW 50
// continue ;
29568: GO 29469
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29570: LD_VAR 0 12
29574: PUSH
29575: LD_INT 1
29577: ARRAY
29578: PPUSH
29579: CALL_OW 313
29583: PUSH
29584: LD_VAR 0 12
29588: PUSH
29589: LD_INT 1
29591: ARRAY
29592: PPUSH
29593: CALL_OW 266
29597: PUSH
29598: LD_INT 32
29600: PUSH
29601: LD_INT 31
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: IN
29608: AND
29609: PUSH
29610: LD_VAR 0 12
29614: PUSH
29615: LD_INT 1
29617: ARRAY
29618: PPUSH
29619: CALL_OW 313
29623: PUSH
29624: LD_INT 6
29626: EQUAL
29627: OR
29628: IFFALSE 29648
// f := Delete ( f , 1 ) ;
29630: LD_ADDR_VAR 0 12
29634: PUSH
29635: LD_VAR 0 12
29639: PPUSH
29640: LD_INT 1
29642: PPUSH
29643: CALL_OW 3
29647: ST_TO_ADDR
// if not f then
29648: LD_VAR 0 12
29652: NOT
29653: IFFALSE 29671
// begin x := x + 2 ;
29655: LD_ADDR_VAR 0 13
29659: PUSH
29660: LD_VAR 0 13
29664: PUSH
29665: LD_INT 2
29667: PLUS
29668: ST_TO_ADDR
// continue ;
29669: GO 29469
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29671: LD_VAR 0 12
29675: PUSH
29676: LD_INT 1
29678: ARRAY
29679: PPUSH
29680: CALL_OW 266
29684: PUSH
29685: LD_INT 5
29687: EQUAL
29688: IFFALSE 29762
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29690: LD_VAR 0 12
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: PPUSH
29699: CALL_OW 313
29703: PUSH
29704: LD_INT 3
29706: LESS
29707: IFFALSE 29743
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29709: LD_INT 0
29711: PPUSH
29712: LD_INT 5
29714: PUSH
29715: LD_INT 8
29717: PUSH
29718: LD_INT 9
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: PUSH
29726: LD_VAR 0 17
29730: ARRAY
29731: PPUSH
29732: LD_VAR 0 4
29736: PPUSH
29737: CALL_OW 380
29741: GO 29760
// PrepareHuman ( false , i , skill ) ;
29743: LD_INT 0
29745: PPUSH
29746: LD_VAR 0 8
29750: PPUSH
29751: LD_VAR 0 4
29755: PPUSH
29756: CALL_OW 380
// end else
29760: GO 29779
// PrepareHuman ( false , i , skill ) ;
29762: LD_INT 0
29764: PPUSH
29765: LD_VAR 0 8
29769: PPUSH
29770: LD_VAR 0 4
29774: PPUSH
29775: CALL_OW 380
// un := CreateHuman ;
29779: LD_ADDR_VAR 0 14
29783: PUSH
29784: CALL_OW 44
29788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29789: LD_ADDR_VAR 0 7
29793: PUSH
29794: LD_VAR 0 7
29798: PPUSH
29799: LD_INT 1
29801: PPUSH
29802: LD_VAR 0 14
29806: PPUSH
29807: CALL_OW 2
29811: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29812: LD_VAR 0 14
29816: PPUSH
29817: LD_VAR 0 12
29821: PUSH
29822: LD_INT 1
29824: ARRAY
29825: PPUSH
29826: CALL_OW 52
// end ;
29830: GO 29469
29832: POP
29833: POP
// end ;
29834: GO 28771
29836: POP
29837: POP
// result := result ^ buildings ;
29838: LD_ADDR_VAR 0 7
29842: PUSH
29843: LD_VAR 0 7
29847: PUSH
29848: LD_VAR 0 18
29852: ADD
29853: ST_TO_ADDR
// end else
29854: GO 29997
// begin for i = 1 to personel do
29856: LD_ADDR_VAR 0 8
29860: PUSH
29861: DOUBLE
29862: LD_INT 1
29864: DEC
29865: ST_TO_ADDR
29866: LD_VAR 0 6
29870: PUSH
29871: FOR_TO
29872: IFFALSE 29995
// begin if i > 4 then
29874: LD_VAR 0 8
29878: PUSH
29879: LD_INT 4
29881: GREATER
29882: IFFALSE 29886
// break ;
29884: GO 29995
// x := personel [ i ] ;
29886: LD_ADDR_VAR 0 13
29890: PUSH
29891: LD_VAR 0 6
29895: PUSH
29896: LD_VAR 0 8
29900: ARRAY
29901: ST_TO_ADDR
// if x = - 1 then
29902: LD_VAR 0 13
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: EQUAL
29911: IFFALSE 29915
// continue ;
29913: GO 29871
// PrepareHuman ( false , i , skill ) ;
29915: LD_INT 0
29917: PPUSH
29918: LD_VAR 0 8
29922: PPUSH
29923: LD_VAR 0 4
29927: PPUSH
29928: CALL_OW 380
// un := CreateHuman ;
29932: LD_ADDR_VAR 0 14
29936: PUSH
29937: CALL_OW 44
29941: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29942: LD_VAR 0 14
29946: PPUSH
29947: LD_VAR 0 1
29951: PPUSH
29952: CALL_OW 250
29956: PPUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 251
29966: PPUSH
29967: LD_INT 10
29969: PPUSH
29970: LD_INT 0
29972: PPUSH
29973: CALL_OW 50
// result := result ^ un ;
29977: LD_ADDR_VAR 0 7
29981: PUSH
29982: LD_VAR 0 7
29986: PUSH
29987: LD_VAR 0 14
29991: ADD
29992: ST_TO_ADDR
// end ;
29993: GO 29871
29995: POP
29996: POP
// end ; end ;
29997: LD_VAR 0 7
30001: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30002: LD_INT 0
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
// result := false ;
30020: LD_ADDR_VAR 0 3
30024: PUSH
30025: LD_INT 0
30027: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30028: LD_VAR 0 1
30032: NOT
30033: PUSH
30034: LD_VAR 0 1
30038: PPUSH
30039: CALL_OW 266
30043: PUSH
30044: LD_INT 32
30046: PUSH
30047: LD_INT 33
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: IN
30054: NOT
30055: OR
30056: IFFALSE 30060
// exit ;
30058: GO 31169
// nat := GetNation ( tower ) ;
30060: LD_ADDR_VAR 0 12
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 248
30074: ST_TO_ADDR
// side := GetSide ( tower ) ;
30075: LD_ADDR_VAR 0 16
30079: PUSH
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL_OW 255
30089: ST_TO_ADDR
// x := GetX ( tower ) ;
30090: LD_ADDR_VAR 0 10
30094: PUSH
30095: LD_VAR 0 1
30099: PPUSH
30100: CALL_OW 250
30104: ST_TO_ADDR
// y := GetY ( tower ) ;
30105: LD_ADDR_VAR 0 11
30109: PUSH
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 251
30119: ST_TO_ADDR
// if not x or not y then
30120: LD_VAR 0 10
30124: NOT
30125: PUSH
30126: LD_VAR 0 11
30130: NOT
30131: OR
30132: IFFALSE 30136
// exit ;
30134: GO 31169
// weapon := 0 ;
30136: LD_ADDR_VAR 0 18
30140: PUSH
30141: LD_INT 0
30143: ST_TO_ADDR
// fac_list := [ ] ;
30144: LD_ADDR_VAR 0 17
30148: PUSH
30149: EMPTY
30150: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30151: LD_ADDR_VAR 0 6
30155: PUSH
30156: LD_VAR 0 1
30160: PPUSH
30161: CALL_OW 274
30165: PPUSH
30166: LD_VAR 0 2
30170: PPUSH
30171: LD_INT 0
30173: PPUSH
30174: CALL 27740 0 3
30178: PPUSH
30179: LD_INT 30
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 72
30193: ST_TO_ADDR
// if not factories then
30194: LD_VAR 0 6
30198: NOT
30199: IFFALSE 30203
// exit ;
30201: GO 31169
// for i in factories do
30203: LD_ADDR_VAR 0 8
30207: PUSH
30208: LD_VAR 0 6
30212: PUSH
30213: FOR_IN
30214: IFFALSE 30239
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30216: LD_ADDR_VAR 0 17
30220: PUSH
30221: LD_VAR 0 17
30225: PUSH
30226: LD_VAR 0 8
30230: PPUSH
30231: CALL_OW 478
30235: UNION
30236: ST_TO_ADDR
30237: GO 30213
30239: POP
30240: POP
// if not fac_list then
30241: LD_VAR 0 17
30245: NOT
30246: IFFALSE 30250
// exit ;
30248: GO 31169
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30250: LD_ADDR_VAR 0 5
30254: PUSH
30255: LD_INT 4
30257: PUSH
30258: LD_INT 5
30260: PUSH
30261: LD_INT 9
30263: PUSH
30264: LD_INT 10
30266: PUSH
30267: LD_INT 6
30269: PUSH
30270: LD_INT 7
30272: PUSH
30273: LD_INT 11
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 27
30287: PUSH
30288: LD_INT 28
30290: PUSH
30291: LD_INT 26
30293: PUSH
30294: LD_INT 30
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 43
30305: PUSH
30306: LD_INT 44
30308: PUSH
30309: LD_INT 46
30311: PUSH
30312: LD_INT 45
30314: PUSH
30315: LD_INT 47
30317: PUSH
30318: LD_INT 49
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PUSH
30334: LD_VAR 0 12
30338: ARRAY
30339: ST_TO_ADDR
// list := list isect fac_list ;
30340: LD_ADDR_VAR 0 5
30344: PUSH
30345: LD_VAR 0 5
30349: PUSH
30350: LD_VAR 0 17
30354: ISECT
30355: ST_TO_ADDR
// if not list then
30356: LD_VAR 0 5
30360: NOT
30361: IFFALSE 30365
// exit ;
30363: GO 31169
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30365: LD_VAR 0 12
30369: PUSH
30370: LD_INT 3
30372: EQUAL
30373: PUSH
30374: LD_INT 49
30376: PUSH
30377: LD_VAR 0 5
30381: IN
30382: AND
30383: PUSH
30384: LD_INT 31
30386: PPUSH
30387: LD_VAR 0 16
30391: PPUSH
30392: CALL_OW 321
30396: PUSH
30397: LD_INT 2
30399: EQUAL
30400: AND
30401: IFFALSE 30461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30403: LD_INT 22
30405: PUSH
30406: LD_VAR 0 16
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 35
30417: PUSH
30418: LD_INT 49
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 91
30427: PUSH
30428: LD_VAR 0 1
30432: PUSH
30433: LD_INT 10
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: PPUSH
30446: CALL_OW 69
30450: NOT
30451: IFFALSE 30461
// weapon := ru_time_lapser ;
30453: LD_ADDR_VAR 0 18
30457: PUSH
30458: LD_INT 49
30460: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30461: LD_VAR 0 12
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: IN
30476: PUSH
30477: LD_INT 11
30479: PUSH
30480: LD_VAR 0 5
30484: IN
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_VAR 0 5
30493: IN
30494: OR
30495: AND
30496: PUSH
30497: LD_INT 6
30499: PPUSH
30500: LD_VAR 0 16
30504: PPUSH
30505: CALL_OW 321
30509: PUSH
30510: LD_INT 2
30512: EQUAL
30513: AND
30514: IFFALSE 30679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30516: LD_INT 22
30518: PUSH
30519: LD_VAR 0 16
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 35
30533: PUSH
30534: LD_INT 11
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 35
30543: PUSH
30544: LD_INT 30
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 91
30558: PUSH
30559: LD_VAR 0 1
30563: PUSH
30564: LD_INT 18
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: PPUSH
30577: CALL_OW 69
30581: NOT
30582: PUSH
30583: LD_INT 22
30585: PUSH
30586: LD_VAR 0 16
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: LD_INT 30
30600: PUSH
30601: LD_INT 32
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 30
30610: PUSH
30611: LD_INT 33
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 91
30625: PUSH
30626: LD_VAR 0 1
30630: PUSH
30631: LD_INT 12
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: PPUSH
30647: CALL_OW 69
30651: PUSH
30652: LD_INT 2
30654: GREATER
30655: AND
30656: IFFALSE 30679
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30658: LD_ADDR_VAR 0 18
30662: PUSH
30663: LD_INT 11
30665: PUSH
30666: LD_INT 30
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_VAR 0 12
30677: ARRAY
30678: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30679: LD_VAR 0 18
30683: NOT
30684: PUSH
30685: LD_INT 40
30687: PPUSH
30688: LD_VAR 0 16
30692: PPUSH
30693: CALL_OW 321
30697: PUSH
30698: LD_INT 2
30700: EQUAL
30701: AND
30702: PUSH
30703: LD_INT 7
30705: PUSH
30706: LD_VAR 0 5
30710: IN
30711: PUSH
30712: LD_INT 28
30714: PUSH
30715: LD_VAR 0 5
30719: IN
30720: OR
30721: PUSH
30722: LD_INT 45
30724: PUSH
30725: LD_VAR 0 5
30729: IN
30730: OR
30731: AND
30732: IFFALSE 30986
// begin hex := GetHexInfo ( x , y ) ;
30734: LD_ADDR_VAR 0 4
30738: PUSH
30739: LD_VAR 0 10
30743: PPUSH
30744: LD_VAR 0 11
30748: PPUSH
30749: CALL_OW 546
30753: ST_TO_ADDR
// if hex [ 1 ] then
30754: LD_VAR 0 4
30758: PUSH
30759: LD_INT 1
30761: ARRAY
30762: IFFALSE 30766
// exit ;
30764: GO 31169
// height := hex [ 2 ] ;
30766: LD_ADDR_VAR 0 15
30770: PUSH
30771: LD_VAR 0 4
30775: PUSH
30776: LD_INT 2
30778: ARRAY
30779: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30780: LD_ADDR_VAR 0 14
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: LD_INT 5
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
// for i in tmp do
30803: LD_ADDR_VAR 0 8
30807: PUSH
30808: LD_VAR 0 14
30812: PUSH
30813: FOR_IN
30814: IFFALSE 30984
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30816: LD_ADDR_VAR 0 9
30820: PUSH
30821: LD_VAR 0 10
30825: PPUSH
30826: LD_VAR 0 8
30830: PPUSH
30831: LD_INT 5
30833: PPUSH
30834: CALL_OW 272
30838: PUSH
30839: LD_VAR 0 11
30843: PPUSH
30844: LD_VAR 0 8
30848: PPUSH
30849: LD_INT 5
30851: PPUSH
30852: CALL_OW 273
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30861: LD_VAR 0 9
30865: PUSH
30866: LD_INT 1
30868: ARRAY
30869: PPUSH
30870: LD_VAR 0 9
30874: PUSH
30875: LD_INT 2
30877: ARRAY
30878: PPUSH
30879: CALL_OW 488
30883: IFFALSE 30982
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30885: LD_ADDR_VAR 0 4
30889: PUSH
30890: LD_VAR 0 9
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PPUSH
30899: LD_VAR 0 9
30903: PUSH
30904: LD_INT 2
30906: ARRAY
30907: PPUSH
30908: CALL_OW 546
30912: ST_TO_ADDR
// if hex [ 1 ] then
30913: LD_VAR 0 4
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: IFFALSE 30925
// continue ;
30923: GO 30813
// h := hex [ 2 ] ;
30925: LD_ADDR_VAR 0 13
30929: PUSH
30930: LD_VAR 0 4
30934: PUSH
30935: LD_INT 2
30937: ARRAY
30938: ST_TO_ADDR
// if h + 7 < height then
30939: LD_VAR 0 13
30943: PUSH
30944: LD_INT 7
30946: PLUS
30947: PUSH
30948: LD_VAR 0 15
30952: LESS
30953: IFFALSE 30982
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30955: LD_ADDR_VAR 0 18
30959: PUSH
30960: LD_INT 7
30962: PUSH
30963: LD_INT 28
30965: PUSH
30966: LD_INT 45
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: LD_VAR 0 12
30978: ARRAY
30979: ST_TO_ADDR
// break ;
30980: GO 30984
// end ; end ; end ;
30982: GO 30813
30984: POP
30985: POP
// end ; if not weapon then
30986: LD_VAR 0 18
30990: NOT
30991: IFFALSE 31051
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30993: LD_ADDR_VAR 0 5
30997: PUSH
30998: LD_VAR 0 5
31002: PUSH
31003: LD_INT 11
31005: PUSH
31006: LD_INT 30
31008: PUSH
31009: LD_INT 49
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: DIFF
31017: ST_TO_ADDR
// if not list then
31018: LD_VAR 0 5
31022: NOT
31023: IFFALSE 31027
// exit ;
31025: GO 31169
// weapon := list [ rand ( 1 , list ) ] ;
31027: LD_ADDR_VAR 0 18
31031: PUSH
31032: LD_VAR 0 5
31036: PUSH
31037: LD_INT 1
31039: PPUSH
31040: LD_VAR 0 5
31044: PPUSH
31045: CALL_OW 12
31049: ARRAY
31050: ST_TO_ADDR
// end ; if weapon then
31051: LD_VAR 0 18
31055: IFFALSE 31169
// begin tmp := CostOfWeapon ( weapon ) ;
31057: LD_ADDR_VAR 0 14
31061: PUSH
31062: LD_VAR 0 18
31066: PPUSH
31067: CALL_OW 451
31071: ST_TO_ADDR
// j := GetBase ( tower ) ;
31072: LD_ADDR_VAR 0 9
31076: PUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 274
31086: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31087: LD_VAR 0 9
31091: PPUSH
31092: LD_INT 1
31094: PPUSH
31095: CALL_OW 275
31099: PUSH
31100: LD_VAR 0 14
31104: PUSH
31105: LD_INT 1
31107: ARRAY
31108: GREATEREQUAL
31109: PUSH
31110: LD_VAR 0 9
31114: PPUSH
31115: LD_INT 2
31117: PPUSH
31118: CALL_OW 275
31122: PUSH
31123: LD_VAR 0 14
31127: PUSH
31128: LD_INT 2
31130: ARRAY
31131: GREATEREQUAL
31132: AND
31133: PUSH
31134: LD_VAR 0 9
31138: PPUSH
31139: LD_INT 3
31141: PPUSH
31142: CALL_OW 275
31146: PUSH
31147: LD_VAR 0 14
31151: PUSH
31152: LD_INT 3
31154: ARRAY
31155: GREATEREQUAL
31156: AND
31157: IFFALSE 31169
// result := weapon ;
31159: LD_ADDR_VAR 0 3
31163: PUSH
31164: LD_VAR 0 18
31168: ST_TO_ADDR
// end ; end ;
31169: LD_VAR 0 3
31173: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31174: LD_INT 0
31176: PPUSH
31177: PPUSH
// result := true ;
31178: LD_ADDR_VAR 0 3
31182: PUSH
31183: LD_INT 1
31185: ST_TO_ADDR
// if array1 = array2 then
31186: LD_VAR 0 1
31190: PUSH
31191: LD_VAR 0 2
31195: EQUAL
31196: IFFALSE 31256
// begin for i = 1 to array1 do
31198: LD_ADDR_VAR 0 4
31202: PUSH
31203: DOUBLE
31204: LD_INT 1
31206: DEC
31207: ST_TO_ADDR
31208: LD_VAR 0 1
31212: PUSH
31213: FOR_TO
31214: IFFALSE 31252
// if array1 [ i ] <> array2 [ i ] then
31216: LD_VAR 0 1
31220: PUSH
31221: LD_VAR 0 4
31225: ARRAY
31226: PUSH
31227: LD_VAR 0 2
31231: PUSH
31232: LD_VAR 0 4
31236: ARRAY
31237: NONEQUAL
31238: IFFALSE 31250
// begin result := false ;
31240: LD_ADDR_VAR 0 3
31244: PUSH
31245: LD_INT 0
31247: ST_TO_ADDR
// break ;
31248: GO 31252
// end ;
31250: GO 31213
31252: POP
31253: POP
// end else
31254: GO 31264
// result := false ;
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_INT 0
31263: ST_TO_ADDR
// end ;
31264: LD_VAR 0 3
31268: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31269: LD_INT 0
31271: PPUSH
31272: PPUSH
// if not array1 or not array2 then
31273: LD_VAR 0 1
31277: NOT
31278: PUSH
31279: LD_VAR 0 2
31283: NOT
31284: OR
31285: IFFALSE 31289
// exit ;
31287: GO 31353
// result := true ;
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_INT 1
31296: ST_TO_ADDR
// for i = 1 to array1 do
31297: LD_ADDR_VAR 0 4
31301: PUSH
31302: DOUBLE
31303: LD_INT 1
31305: DEC
31306: ST_TO_ADDR
31307: LD_VAR 0 1
31311: PUSH
31312: FOR_TO
31313: IFFALSE 31351
// if array1 [ i ] <> array2 [ i ] then
31315: LD_VAR 0 1
31319: PUSH
31320: LD_VAR 0 4
31324: ARRAY
31325: PUSH
31326: LD_VAR 0 2
31330: PUSH
31331: LD_VAR 0 4
31335: ARRAY
31336: NONEQUAL
31337: IFFALSE 31349
// begin result := false ;
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_INT 0
31346: ST_TO_ADDR
// break ;
31347: GO 31351
// end ;
31349: GO 31312
31351: POP
31352: POP
// end ;
31353: LD_VAR 0 3
31357: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31358: LD_INT 0
31360: PPUSH
31361: PPUSH
31362: PPUSH
// pom := GetBase ( fac ) ;
31363: LD_ADDR_VAR 0 5
31367: PUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 274
31377: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31378: LD_ADDR_VAR 0 4
31382: PUSH
31383: LD_VAR 0 2
31387: PUSH
31388: LD_INT 1
31390: ARRAY
31391: PPUSH
31392: LD_VAR 0 2
31396: PUSH
31397: LD_INT 2
31399: ARRAY
31400: PPUSH
31401: LD_VAR 0 2
31405: PUSH
31406: LD_INT 3
31408: ARRAY
31409: PPUSH
31410: LD_VAR 0 2
31414: PUSH
31415: LD_INT 4
31417: ARRAY
31418: PPUSH
31419: CALL_OW 449
31423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: LD_VAR 0 5
31433: PPUSH
31434: LD_INT 1
31436: PPUSH
31437: CALL_OW 275
31441: PUSH
31442: LD_VAR 0 4
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: GREATEREQUAL
31451: PUSH
31452: LD_VAR 0 5
31456: PPUSH
31457: LD_INT 2
31459: PPUSH
31460: CALL_OW 275
31464: PUSH
31465: LD_VAR 0 4
31469: PUSH
31470: LD_INT 2
31472: ARRAY
31473: GREATEREQUAL
31474: AND
31475: PUSH
31476: LD_VAR 0 5
31480: PPUSH
31481: LD_INT 3
31483: PPUSH
31484: CALL_OW 275
31488: PUSH
31489: LD_VAR 0 4
31493: PUSH
31494: LD_INT 3
31496: ARRAY
31497: GREATEREQUAL
31498: AND
31499: ST_TO_ADDR
// end ;
31500: LD_VAR 0 3
31504: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31505: LD_INT 0
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
// pom := GetBase ( building ) ;
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_VAR 0 1
31520: PPUSH
31521: CALL_OW 274
31525: ST_TO_ADDR
// if not pom then
31526: LD_VAR 0 3
31530: NOT
31531: IFFALSE 31535
// exit ;
31533: GO 31705
// btype := GetBType ( building ) ;
31535: LD_ADDR_VAR 0 5
31539: PUSH
31540: LD_VAR 0 1
31544: PPUSH
31545: CALL_OW 266
31549: ST_TO_ADDR
// if btype = b_armoury then
31550: LD_VAR 0 5
31554: PUSH
31555: LD_INT 4
31557: EQUAL
31558: IFFALSE 31568
// btype := b_barracks ;
31560: LD_ADDR_VAR 0 5
31564: PUSH
31565: LD_INT 5
31567: ST_TO_ADDR
// if btype = b_depot then
31568: LD_VAR 0 5
31572: PUSH
31573: LD_INT 0
31575: EQUAL
31576: IFFALSE 31586
// btype := b_warehouse ;
31578: LD_ADDR_VAR 0 5
31582: PUSH
31583: LD_INT 1
31585: ST_TO_ADDR
// if btype = b_workshop then
31586: LD_VAR 0 5
31590: PUSH
31591: LD_INT 2
31593: EQUAL
31594: IFFALSE 31604
// btype := b_factory ;
31596: LD_ADDR_VAR 0 5
31600: PUSH
31601: LD_INT 3
31603: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31604: LD_ADDR_VAR 0 4
31608: PUSH
31609: LD_VAR 0 5
31613: PPUSH
31614: LD_VAR 0 1
31618: PPUSH
31619: CALL_OW 248
31623: PPUSH
31624: CALL_OW 450
31628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31629: LD_ADDR_VAR 0 2
31633: PUSH
31634: LD_VAR 0 3
31638: PPUSH
31639: LD_INT 1
31641: PPUSH
31642: CALL_OW 275
31646: PUSH
31647: LD_VAR 0 4
31651: PUSH
31652: LD_INT 1
31654: ARRAY
31655: GREATEREQUAL
31656: PUSH
31657: LD_VAR 0 3
31661: PPUSH
31662: LD_INT 2
31664: PPUSH
31665: CALL_OW 275
31669: PUSH
31670: LD_VAR 0 4
31674: PUSH
31675: LD_INT 2
31677: ARRAY
31678: GREATEREQUAL
31679: AND
31680: PUSH
31681: LD_VAR 0 3
31685: PPUSH
31686: LD_INT 3
31688: PPUSH
31689: CALL_OW 275
31693: PUSH
31694: LD_VAR 0 4
31698: PUSH
31699: LD_INT 3
31701: ARRAY
31702: GREATEREQUAL
31703: AND
31704: ST_TO_ADDR
// end ;
31705: LD_VAR 0 2
31709: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31710: LD_INT 0
31712: PPUSH
31713: PPUSH
31714: PPUSH
// pom := GetBase ( building ) ;
31715: LD_ADDR_VAR 0 4
31719: PUSH
31720: LD_VAR 0 1
31724: PPUSH
31725: CALL_OW 274
31729: ST_TO_ADDR
// if not pom then
31730: LD_VAR 0 4
31734: NOT
31735: IFFALSE 31739
// exit ;
31737: GO 31840
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31739: LD_ADDR_VAR 0 5
31743: PUSH
31744: LD_VAR 0 2
31748: PPUSH
31749: LD_VAR 0 1
31753: PPUSH
31754: CALL_OW 248
31758: PPUSH
31759: CALL_OW 450
31763: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_VAR 0 4
31773: PPUSH
31774: LD_INT 1
31776: PPUSH
31777: CALL_OW 275
31781: PUSH
31782: LD_VAR 0 5
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: GREATEREQUAL
31791: PUSH
31792: LD_VAR 0 4
31796: PPUSH
31797: LD_INT 2
31799: PPUSH
31800: CALL_OW 275
31804: PUSH
31805: LD_VAR 0 5
31809: PUSH
31810: LD_INT 2
31812: ARRAY
31813: GREATEREQUAL
31814: AND
31815: PUSH
31816: LD_VAR 0 4
31820: PPUSH
31821: LD_INT 3
31823: PPUSH
31824: CALL_OW 275
31828: PUSH
31829: LD_VAR 0 5
31833: PUSH
31834: LD_INT 3
31836: ARRAY
31837: GREATEREQUAL
31838: AND
31839: ST_TO_ADDR
// end ;
31840: LD_VAR 0 3
31844: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31845: LD_INT 0
31847: PPUSH
31848: PPUSH
31849: PPUSH
31850: PPUSH
31851: PPUSH
31852: PPUSH
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
31857: PPUSH
// result := false ;
31858: LD_ADDR_VAR 0 8
31862: PUSH
31863: LD_INT 0
31865: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31866: LD_VAR 0 5
31870: NOT
31871: PUSH
31872: LD_VAR 0 1
31876: NOT
31877: OR
31878: PUSH
31879: LD_VAR 0 2
31883: NOT
31884: OR
31885: PUSH
31886: LD_VAR 0 3
31890: NOT
31891: OR
31892: IFFALSE 31896
// exit ;
31894: GO 32710
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31896: LD_ADDR_VAR 0 14
31900: PUSH
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_VAR 0 2
31910: PPUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: LD_VAR 0 4
31920: PPUSH
31921: LD_VAR 0 5
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: PPUSH
31930: CALL_OW 248
31934: PPUSH
31935: LD_INT 0
31937: PPUSH
31938: CALL 33947 0 6
31942: ST_TO_ADDR
// if not hexes then
31943: LD_VAR 0 14
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 32710
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31952: LD_ADDR_VAR 0 17
31956: PUSH
31957: LD_VAR 0 5
31961: PPUSH
31962: LD_INT 22
31964: PUSH
31965: LD_VAR 0 13
31969: PPUSH
31970: CALL_OW 255
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 30
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 30
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL_OW 72
32015: ST_TO_ADDR
// for i = 1 to hexes do
32016: LD_ADDR_VAR 0 9
32020: PUSH
32021: DOUBLE
32022: LD_INT 1
32024: DEC
32025: ST_TO_ADDR
32026: LD_VAR 0 14
32030: PUSH
32031: FOR_TO
32032: IFFALSE 32708
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32034: LD_ADDR_VAR 0 13
32038: PUSH
32039: LD_VAR 0 14
32043: PUSH
32044: LD_VAR 0 9
32048: ARRAY
32049: PUSH
32050: LD_INT 1
32052: ARRAY
32053: PPUSH
32054: LD_VAR 0 14
32058: PUSH
32059: LD_VAR 0 9
32063: ARRAY
32064: PUSH
32065: LD_INT 2
32067: ARRAY
32068: PPUSH
32069: CALL_OW 428
32073: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32074: LD_VAR 0 14
32078: PUSH
32079: LD_VAR 0 9
32083: ARRAY
32084: PUSH
32085: LD_INT 1
32087: ARRAY
32088: PPUSH
32089: LD_VAR 0 14
32093: PUSH
32094: LD_VAR 0 9
32098: ARRAY
32099: PUSH
32100: LD_INT 2
32102: ARRAY
32103: PPUSH
32104: CALL_OW 351
32108: PUSH
32109: LD_VAR 0 14
32113: PUSH
32114: LD_VAR 0 9
32118: ARRAY
32119: PUSH
32120: LD_INT 1
32122: ARRAY
32123: PPUSH
32124: LD_VAR 0 14
32128: PUSH
32129: LD_VAR 0 9
32133: ARRAY
32134: PUSH
32135: LD_INT 2
32137: ARRAY
32138: PPUSH
32139: CALL_OW 488
32143: NOT
32144: OR
32145: PUSH
32146: LD_VAR 0 13
32150: PPUSH
32151: CALL_OW 247
32155: PUSH
32156: LD_INT 3
32158: EQUAL
32159: OR
32160: IFFALSE 32166
// exit ;
32162: POP
32163: POP
32164: GO 32710
// if not tmp then
32166: LD_VAR 0 13
32170: NOT
32171: IFFALSE 32175
// continue ;
32173: GO 32031
// result := true ;
32175: LD_ADDR_VAR 0 8
32179: PUSH
32180: LD_INT 1
32182: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32183: LD_VAR 0 6
32187: PUSH
32188: LD_VAR 0 13
32192: PPUSH
32193: CALL_OW 247
32197: PUSH
32198: LD_INT 2
32200: EQUAL
32201: AND
32202: PUSH
32203: LD_VAR 0 13
32207: PPUSH
32208: CALL_OW 263
32212: PUSH
32213: LD_INT 1
32215: EQUAL
32216: AND
32217: IFFALSE 32381
// begin if IsDrivenBy ( tmp ) then
32219: LD_VAR 0 13
32223: PPUSH
32224: CALL_OW 311
32228: IFFALSE 32232
// continue ;
32230: GO 32031
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32232: LD_VAR 0 6
32236: PPUSH
32237: LD_INT 3
32239: PUSH
32240: LD_INT 60
32242: PUSH
32243: EMPTY
32244: LIST
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: LD_INT 55
32255: PUSH
32256: EMPTY
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PPUSH
32267: CALL_OW 72
32271: IFFALSE 32379
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32273: LD_ADDR_VAR 0 18
32277: PUSH
32278: LD_VAR 0 6
32282: PPUSH
32283: LD_INT 3
32285: PUSH
32286: LD_INT 60
32288: PUSH
32289: EMPTY
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: LD_INT 55
32301: PUSH
32302: EMPTY
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PPUSH
32313: CALL_OW 72
32317: PUSH
32318: LD_INT 1
32320: ARRAY
32321: ST_TO_ADDR
// if IsInUnit ( driver ) then
32322: LD_VAR 0 18
32326: PPUSH
32327: CALL_OW 310
32331: IFFALSE 32342
// ComExit ( driver ) ;
32333: LD_VAR 0 18
32337: PPUSH
32338: CALL 57131 0 1
// AddComEnterUnit ( driver , tmp ) ;
32342: LD_VAR 0 18
32346: PPUSH
32347: LD_VAR 0 13
32351: PPUSH
32352: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32356: LD_VAR 0 18
32360: PPUSH
32361: LD_VAR 0 7
32365: PPUSH
32366: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32370: LD_VAR 0 18
32374: PPUSH
32375: CALL_OW 181
// end ; continue ;
32379: GO 32031
// end ; if not cleaners or not tmp in cleaners then
32381: LD_VAR 0 6
32385: NOT
32386: PUSH
32387: LD_VAR 0 13
32391: PUSH
32392: LD_VAR 0 6
32396: IN
32397: NOT
32398: OR
32399: IFFALSE 32706
// begin if dep then
32401: LD_VAR 0 17
32405: IFFALSE 32541
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32407: LD_ADDR_VAR 0 16
32411: PUSH
32412: LD_VAR 0 17
32416: PUSH
32417: LD_INT 1
32419: ARRAY
32420: PPUSH
32421: CALL_OW 250
32425: PPUSH
32426: LD_VAR 0 17
32430: PUSH
32431: LD_INT 1
32433: ARRAY
32434: PPUSH
32435: CALL_OW 254
32439: PPUSH
32440: LD_INT 5
32442: PPUSH
32443: CALL_OW 272
32447: PUSH
32448: LD_VAR 0 17
32452: PUSH
32453: LD_INT 1
32455: ARRAY
32456: PPUSH
32457: CALL_OW 251
32461: PPUSH
32462: LD_VAR 0 17
32466: PUSH
32467: LD_INT 1
32469: ARRAY
32470: PPUSH
32471: CALL_OW 254
32475: PPUSH
32476: LD_INT 5
32478: PPUSH
32479: CALL_OW 273
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32488: LD_VAR 0 16
32492: PUSH
32493: LD_INT 1
32495: ARRAY
32496: PPUSH
32497: LD_VAR 0 16
32501: PUSH
32502: LD_INT 2
32504: ARRAY
32505: PPUSH
32506: CALL_OW 488
32510: IFFALSE 32541
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32512: LD_VAR 0 13
32516: PPUSH
32517: LD_VAR 0 16
32521: PUSH
32522: LD_INT 1
32524: ARRAY
32525: PPUSH
32526: LD_VAR 0 16
32530: PUSH
32531: LD_INT 2
32533: ARRAY
32534: PPUSH
32535: CALL_OW 111
// continue ;
32539: GO 32031
// end ; end ; r := GetDir ( tmp ) ;
32541: LD_ADDR_VAR 0 15
32545: PUSH
32546: LD_VAR 0 13
32550: PPUSH
32551: CALL_OW 254
32555: ST_TO_ADDR
// if r = 5 then
32556: LD_VAR 0 15
32560: PUSH
32561: LD_INT 5
32563: EQUAL
32564: IFFALSE 32574
// r := 0 ;
32566: LD_ADDR_VAR 0 15
32570: PUSH
32571: LD_INT 0
32573: ST_TO_ADDR
// for j = r to 5 do
32574: LD_ADDR_VAR 0 10
32578: PUSH
32579: DOUBLE
32580: LD_VAR 0 15
32584: DEC
32585: ST_TO_ADDR
32586: LD_INT 5
32588: PUSH
32589: FOR_TO
32590: IFFALSE 32704
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32592: LD_ADDR_VAR 0 11
32596: PUSH
32597: LD_VAR 0 13
32601: PPUSH
32602: CALL_OW 250
32606: PPUSH
32607: LD_VAR 0 10
32611: PPUSH
32612: LD_INT 2
32614: PPUSH
32615: CALL_OW 272
32619: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32620: LD_ADDR_VAR 0 12
32624: PUSH
32625: LD_VAR 0 13
32629: PPUSH
32630: CALL_OW 251
32634: PPUSH
32635: LD_VAR 0 10
32639: PPUSH
32640: LD_INT 2
32642: PPUSH
32643: CALL_OW 273
32647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32648: LD_VAR 0 11
32652: PPUSH
32653: LD_VAR 0 12
32657: PPUSH
32658: CALL_OW 488
32662: PUSH
32663: LD_VAR 0 11
32667: PPUSH
32668: LD_VAR 0 12
32672: PPUSH
32673: CALL_OW 428
32677: NOT
32678: AND
32679: IFFALSE 32702
// begin ComMoveXY ( tmp , _x , _y ) ;
32681: LD_VAR 0 13
32685: PPUSH
32686: LD_VAR 0 11
32690: PPUSH
32691: LD_VAR 0 12
32695: PPUSH
32696: CALL_OW 111
// break ;
32700: GO 32704
// end ; end ;
32702: GO 32589
32704: POP
32705: POP
// end ; end ;
32706: GO 32031
32708: POP
32709: POP
// end ;
32710: LD_VAR 0 8
32714: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32715: LD_INT 0
32717: PPUSH
// result := true ;
32718: LD_ADDR_VAR 0 3
32722: PUSH
32723: LD_INT 1
32725: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32726: LD_VAR 0 2
32730: PUSH
32731: LD_INT 24
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32745
32737: LD_INT 33
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32770
32745: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32746: LD_ADDR_VAR 0 3
32750: PUSH
32751: LD_INT 32
32753: PPUSH
32754: LD_VAR 0 1
32758: PPUSH
32759: CALL_OW 321
32763: PUSH
32764: LD_INT 2
32766: EQUAL
32767: ST_TO_ADDR
32768: GO 33090
32770: LD_INT 20
32772: DOUBLE
32773: EQUAL
32774: IFTRUE 32778
32776: GO 32803
32778: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32779: LD_ADDR_VAR 0 3
32783: PUSH
32784: LD_INT 6
32786: PPUSH
32787: LD_VAR 0 1
32791: PPUSH
32792: CALL_OW 321
32796: PUSH
32797: LD_INT 2
32799: EQUAL
32800: ST_TO_ADDR
32801: GO 33090
32803: LD_INT 22
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32817
32809: LD_INT 36
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32842
32817: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_INT 15
32825: PPUSH
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 321
32835: PUSH
32836: LD_INT 2
32838: EQUAL
32839: ST_TO_ADDR
32840: GO 33090
32842: LD_INT 30
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32875
32850: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_INT 20
32858: PPUSH
32859: LD_VAR 0 1
32863: PPUSH
32864: CALL_OW 321
32868: PUSH
32869: LD_INT 2
32871: EQUAL
32872: ST_TO_ADDR
32873: GO 33090
32875: LD_INT 28
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32889
32881: LD_INT 21
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32914
32889: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: LD_INT 21
32897: PPUSH
32898: LD_VAR 0 1
32902: PPUSH
32903: CALL_OW 321
32907: PUSH
32908: LD_INT 2
32910: EQUAL
32911: ST_TO_ADDR
32912: GO 33090
32914: LD_INT 16
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32949
32922: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32923: LD_ADDR_VAR 0 3
32927: PUSH
32928: LD_EXP 89
32932: PPUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 321
32942: PUSH
32943: LD_INT 2
32945: EQUAL
32946: ST_TO_ADDR
32947: GO 33090
32949: LD_INT 19
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32963
32955: LD_INT 23
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32990
32963: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32964: LD_ADDR_VAR 0 3
32968: PUSH
32969: LD_EXP 88
32973: PPUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 321
32983: PUSH
32984: LD_INT 2
32986: EQUAL
32987: ST_TO_ADDR
32988: GO 33090
32990: LD_INT 17
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33023
32998: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32999: LD_ADDR_VAR 0 3
33003: PUSH
33004: LD_INT 39
33006: PPUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL_OW 321
33016: PUSH
33017: LD_INT 2
33019: EQUAL
33020: ST_TO_ADDR
33021: GO 33090
33023: LD_INT 18
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33056
33031: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33032: LD_ADDR_VAR 0 3
33036: PUSH
33037: LD_INT 40
33039: PPUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: CALL_OW 321
33049: PUSH
33050: LD_INT 2
33052: EQUAL
33053: ST_TO_ADDR
33054: GO 33090
33056: LD_INT 27
33058: DOUBLE
33059: EQUAL
33060: IFTRUE 33064
33062: GO 33089
33064: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33065: LD_ADDR_VAR 0 3
33069: PUSH
33070: LD_INT 35
33072: PPUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 321
33082: PUSH
33083: LD_INT 2
33085: EQUAL
33086: ST_TO_ADDR
33087: GO 33090
33089: POP
// end ;
33090: LD_VAR 0 3
33094: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33095: LD_INT 0
33097: PPUSH
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
33103: PPUSH
33104: PPUSH
33105: PPUSH
33106: PPUSH
33107: PPUSH
// result := false ;
33108: LD_ADDR_VAR 0 6
33112: PUSH
33113: LD_INT 0
33115: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33116: LD_VAR 0 1
33120: NOT
33121: PUSH
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 266
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 1
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: IN
33142: NOT
33143: OR
33144: PUSH
33145: LD_VAR 0 2
33149: NOT
33150: OR
33151: PUSH
33152: LD_VAR 0 5
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: LD_INT 4
33171: PUSH
33172: LD_INT 5
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: IN
33183: NOT
33184: OR
33185: PUSH
33186: LD_VAR 0 3
33190: PPUSH
33191: LD_VAR 0 4
33195: PPUSH
33196: CALL_OW 488
33200: NOT
33201: OR
33202: IFFALSE 33206
// exit ;
33204: GO 33942
// side := GetSide ( depot ) ;
33206: LD_ADDR_VAR 0 9
33210: PUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: CALL_OW 255
33220: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33221: LD_VAR 0 9
33225: PPUSH
33226: LD_VAR 0 2
33230: PPUSH
33231: CALL 32715 0 2
33235: NOT
33236: IFFALSE 33240
// exit ;
33238: GO 33942
// pom := GetBase ( depot ) ;
33240: LD_ADDR_VAR 0 10
33244: PUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: CALL_OW 274
33254: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33255: LD_ADDR_VAR 0 11
33259: PUSH
33260: LD_VAR 0 2
33264: PPUSH
33265: LD_VAR 0 1
33269: PPUSH
33270: CALL_OW 248
33274: PPUSH
33275: CALL_OW 450
33279: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33280: LD_VAR 0 10
33284: PPUSH
33285: LD_INT 1
33287: PPUSH
33288: CALL_OW 275
33292: PUSH
33293: LD_VAR 0 11
33297: PUSH
33298: LD_INT 1
33300: ARRAY
33301: GREATEREQUAL
33302: PUSH
33303: LD_VAR 0 10
33307: PPUSH
33308: LD_INT 2
33310: PPUSH
33311: CALL_OW 275
33315: PUSH
33316: LD_VAR 0 11
33320: PUSH
33321: LD_INT 2
33323: ARRAY
33324: GREATEREQUAL
33325: AND
33326: PUSH
33327: LD_VAR 0 10
33331: PPUSH
33332: LD_INT 3
33334: PPUSH
33335: CALL_OW 275
33339: PUSH
33340: LD_VAR 0 11
33344: PUSH
33345: LD_INT 3
33347: ARRAY
33348: GREATEREQUAL
33349: AND
33350: NOT
33351: IFFALSE 33355
// exit ;
33353: GO 33942
// if GetBType ( depot ) = b_depot then
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 266
33364: PUSH
33365: LD_INT 0
33367: EQUAL
33368: IFFALSE 33380
// dist := 28 else
33370: LD_ADDR_VAR 0 14
33374: PUSH
33375: LD_INT 28
33377: ST_TO_ADDR
33378: GO 33388
// dist := 36 ;
33380: LD_ADDR_VAR 0 14
33384: PUSH
33385: LD_INT 36
33387: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33388: LD_VAR 0 1
33392: PPUSH
33393: LD_VAR 0 3
33397: PPUSH
33398: LD_VAR 0 4
33402: PPUSH
33403: CALL_OW 297
33407: PUSH
33408: LD_VAR 0 14
33412: GREATER
33413: IFFALSE 33417
// exit ;
33415: GO 33942
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33417: LD_ADDR_VAR 0 12
33421: PUSH
33422: LD_VAR 0 2
33426: PPUSH
33427: LD_VAR 0 3
33431: PPUSH
33432: LD_VAR 0 4
33436: PPUSH
33437: LD_VAR 0 5
33441: PPUSH
33442: LD_VAR 0 1
33446: PPUSH
33447: CALL_OW 248
33451: PPUSH
33452: LD_INT 0
33454: PPUSH
33455: CALL 33947 0 6
33459: ST_TO_ADDR
// if not hexes then
33460: LD_VAR 0 12
33464: NOT
33465: IFFALSE 33469
// exit ;
33467: GO 33942
// hex := GetHexInfo ( x , y ) ;
33469: LD_ADDR_VAR 0 15
33473: PUSH
33474: LD_VAR 0 3
33478: PPUSH
33479: LD_VAR 0 4
33483: PPUSH
33484: CALL_OW 546
33488: ST_TO_ADDR
// if hex [ 1 ] then
33489: LD_VAR 0 15
33493: PUSH
33494: LD_INT 1
33496: ARRAY
33497: IFFALSE 33501
// exit ;
33499: GO 33942
// height := hex [ 2 ] ;
33501: LD_ADDR_VAR 0 13
33505: PUSH
33506: LD_VAR 0 15
33510: PUSH
33511: LD_INT 2
33513: ARRAY
33514: ST_TO_ADDR
// for i = 1 to hexes do
33515: LD_ADDR_VAR 0 7
33519: PUSH
33520: DOUBLE
33521: LD_INT 1
33523: DEC
33524: ST_TO_ADDR
33525: LD_VAR 0 12
33529: PUSH
33530: FOR_TO
33531: IFFALSE 33861
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33533: LD_VAR 0 12
33537: PUSH
33538: LD_VAR 0 7
33542: ARRAY
33543: PUSH
33544: LD_INT 1
33546: ARRAY
33547: PPUSH
33548: LD_VAR 0 12
33552: PUSH
33553: LD_VAR 0 7
33557: ARRAY
33558: PUSH
33559: LD_INT 2
33561: ARRAY
33562: PPUSH
33563: CALL_OW 488
33567: NOT
33568: PUSH
33569: LD_VAR 0 12
33573: PUSH
33574: LD_VAR 0 7
33578: ARRAY
33579: PUSH
33580: LD_INT 1
33582: ARRAY
33583: PPUSH
33584: LD_VAR 0 12
33588: PUSH
33589: LD_VAR 0 7
33593: ARRAY
33594: PUSH
33595: LD_INT 2
33597: ARRAY
33598: PPUSH
33599: CALL_OW 428
33603: PUSH
33604: LD_INT 0
33606: GREATER
33607: OR
33608: PUSH
33609: LD_VAR 0 12
33613: PUSH
33614: LD_VAR 0 7
33618: ARRAY
33619: PUSH
33620: LD_INT 1
33622: ARRAY
33623: PPUSH
33624: LD_VAR 0 12
33628: PUSH
33629: LD_VAR 0 7
33633: ARRAY
33634: PUSH
33635: LD_INT 2
33637: ARRAY
33638: PPUSH
33639: CALL_OW 351
33643: OR
33644: IFFALSE 33650
// exit ;
33646: POP
33647: POP
33648: GO 33942
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33650: LD_ADDR_VAR 0 8
33654: PUSH
33655: LD_VAR 0 12
33659: PUSH
33660: LD_VAR 0 7
33664: ARRAY
33665: PUSH
33666: LD_INT 1
33668: ARRAY
33669: PPUSH
33670: LD_VAR 0 12
33674: PUSH
33675: LD_VAR 0 7
33679: ARRAY
33680: PUSH
33681: LD_INT 2
33683: ARRAY
33684: PPUSH
33685: CALL_OW 546
33689: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33690: LD_VAR 0 8
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: PUSH
33699: LD_VAR 0 8
33703: PUSH
33704: LD_INT 2
33706: ARRAY
33707: PUSH
33708: LD_VAR 0 13
33712: PUSH
33713: LD_INT 2
33715: PLUS
33716: GREATER
33717: OR
33718: PUSH
33719: LD_VAR 0 8
33723: PUSH
33724: LD_INT 2
33726: ARRAY
33727: PUSH
33728: LD_VAR 0 13
33732: PUSH
33733: LD_INT 2
33735: MINUS
33736: LESS
33737: OR
33738: PUSH
33739: LD_VAR 0 8
33743: PUSH
33744: LD_INT 3
33746: ARRAY
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 8
33753: PUSH
33754: LD_INT 9
33756: PUSH
33757: LD_INT 10
33759: PUSH
33760: LD_INT 11
33762: PUSH
33763: LD_INT 12
33765: PUSH
33766: LD_INT 13
33768: PUSH
33769: LD_INT 16
33771: PUSH
33772: LD_INT 17
33774: PUSH
33775: LD_INT 18
33777: PUSH
33778: LD_INT 19
33780: PUSH
33781: LD_INT 20
33783: PUSH
33784: LD_INT 21
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: IN
33802: NOT
33803: OR
33804: PUSH
33805: LD_VAR 0 8
33809: PUSH
33810: LD_INT 5
33812: ARRAY
33813: NOT
33814: OR
33815: PUSH
33816: LD_VAR 0 8
33820: PUSH
33821: LD_INT 6
33823: ARRAY
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: LD_INT 7
33833: PUSH
33834: LD_INT 9
33836: PUSH
33837: LD_INT 10
33839: PUSH
33840: LD_INT 11
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: IN
33851: NOT
33852: OR
33853: IFFALSE 33859
// exit ;
33855: POP
33856: POP
33857: GO 33942
// end ;
33859: GO 33530
33861: POP
33862: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33863: LD_VAR 0 9
33867: PPUSH
33868: LD_VAR 0 3
33872: PPUSH
33873: LD_VAR 0 4
33877: PPUSH
33878: LD_INT 20
33880: PPUSH
33881: CALL 25888 0 4
33885: PUSH
33886: LD_INT 4
33888: ARRAY
33889: IFFALSE 33893
// exit ;
33891: GO 33942
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33893: LD_VAR 0 2
33897: PUSH
33898: LD_INT 29
33900: PUSH
33901: LD_INT 30
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: IN
33908: PUSH
33909: LD_VAR 0 3
33913: PPUSH
33914: LD_VAR 0 4
33918: PPUSH
33919: LD_VAR 0 9
33923: PPUSH
33924: CALL_OW 440
33928: NOT
33929: AND
33930: IFFALSE 33934
// exit ;
33932: GO 33942
// result := true ;
33934: LD_ADDR_VAR 0 6
33938: PUSH
33939: LD_INT 1
33941: ST_TO_ADDR
// end ;
33942: LD_VAR 0 6
33946: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33947: LD_INT 0
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
33986: PPUSH
33987: PPUSH
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
33993: PPUSH
33994: PPUSH
33995: PPUSH
33996: PPUSH
33997: PPUSH
33998: PPUSH
33999: PPUSH
34000: PPUSH
34001: PPUSH
34002: PPUSH
34003: PPUSH
34004: PPUSH
34005: PPUSH
34006: PPUSH
// result = [ ] ;
34007: LD_ADDR_VAR 0 7
34011: PUSH
34012: EMPTY
34013: ST_TO_ADDR
// temp_list = [ ] ;
34014: LD_ADDR_VAR 0 9
34018: PUSH
34019: EMPTY
34020: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34021: LD_VAR 0 4
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 4
34040: PUSH
34041: LD_INT 5
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: IN
34052: NOT
34053: PUSH
34054: LD_VAR 0 1
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: IN
34069: PUSH
34070: LD_VAR 0 5
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: IN
34089: NOT
34090: AND
34091: OR
34092: IFFALSE 34096
// exit ;
34094: GO 52487
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34096: LD_VAR 0 1
34100: PUSH
34101: LD_INT 6
34103: PUSH
34104: LD_INT 7
34106: PUSH
34107: LD_INT 8
34109: PUSH
34110: LD_INT 13
34112: PUSH
34113: LD_INT 12
34115: PUSH
34116: LD_INT 15
34118: PUSH
34119: LD_INT 11
34121: PUSH
34122: LD_INT 14
34124: PUSH
34125: LD_INT 10
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: IN
34139: IFFALSE 34149
// btype = b_lab ;
34141: LD_ADDR_VAR 0 1
34145: PUSH
34146: LD_INT 6
34148: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34149: LD_VAR 0 6
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: IN
34168: NOT
34169: PUSH
34170: LD_VAR 0 1
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: LD_INT 6
34189: PUSH
34190: LD_INT 36
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: LD_INT 5
34198: PUSH
34199: LD_INT 31
34201: PUSH
34202: LD_INT 32
34204: PUSH
34205: LD_INT 33
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: IN
34221: NOT
34222: PUSH
34223: LD_VAR 0 6
34227: PUSH
34228: LD_INT 1
34230: EQUAL
34231: AND
34232: OR
34233: PUSH
34234: LD_VAR 0 1
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: IN
34249: NOT
34250: PUSH
34251: LD_VAR 0 6
34255: PUSH
34256: LD_INT 2
34258: EQUAL
34259: AND
34260: OR
34261: IFFALSE 34271
// mode = 0 ;
34263: LD_ADDR_VAR 0 6
34267: PUSH
34268: LD_INT 0
34270: ST_TO_ADDR
// case mode of 0 :
34271: LD_VAR 0 6
34275: PUSH
34276: LD_INT 0
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 45737
34284: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34285: LD_ADDR_VAR 0 11
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 3
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34478: LD_ADDR_VAR 0 12
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: LD_INT 1
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 3
34635: NEG
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: NEG
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34674: LD_ADDR_VAR 0 13
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: NEG
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: LD_INT 3
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 3
34845: NEG
34846: PUSH
34847: LD_INT 3
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34873: LD_ADDR_VAR 0 14
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: LD_INT 2
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: LD_INT 3
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 3
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35069: LD_ADDR_VAR 0 15
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: NEG
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 3
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35262: LD_ADDR_VAR 0 16
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 2
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: NEG
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: LD_INT 2
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 3
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: LD_INT 3
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35455: LD_ADDR_VAR 0 17
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: NEG
35655: PUSH
35656: LD_INT 2
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35685: LD_ADDR_VAR 0 18
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 2
35872: NEG
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35915: LD_ADDR_VAR 0 19
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: NEG
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: LD_INT 2
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36145: LD_ADDR_VAR 0 20
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: LD_INT 2
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36375: LD_ADDR_VAR 0 21
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: NEG
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: NEG
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36605: LD_ADDR_VAR 0 22
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 2
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36835: LD_ADDR_VAR 0 23
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: LD_INT 2
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37115: LD_ADDR_VAR 0 24
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 2
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: NEG
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: NEG
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 3
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37391: LD_ADDR_VAR 0 25
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 2
37567: NEG
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37665: LD_ADDR_VAR 0 26
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37941: LD_ADDR_VAR 0 27
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: LD_INT 2
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: NEG
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 3
38186: NEG
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38221: LD_ADDR_VAR 0 28
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: LD_INT 2
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: LD_INT 3
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 3
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38503: LD_ADDR_VAR 0 29
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: LD_INT 3
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 3
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38782: LD_ADDR_VAR 0 30
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 3
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 3
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39060: LD_ADDR_VAR 0 31
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: LD_INT 3
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 3
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39338: LD_ADDR_VAR 0 32
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 3
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 3
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39616: LD_ADDR_VAR 0 33
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 3
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39895: LD_ADDR_VAR 0 34
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 2
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 3
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 3
40140: NEG
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40175: LD_ADDR_VAR 0 35
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40287: LD_ADDR_VAR 0 36
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 2
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40399: LD_ADDR_VAR 0 37
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40511: LD_ADDR_VAR 0 38
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40623: LD_ADDR_VAR 0 39
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40735: LD_ADDR_VAR 0 40
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40847: LD_ADDR_VAR 0 41
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: NEG
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: NEG
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 3
41156: NEG
41157: PUSH
41158: LD_INT 3
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41197: LD_ADDR_VAR 0 42
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 3
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 3
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 3
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 3
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41547: LD_ADDR_VAR 0 43
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 3
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 3
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 3
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41895: LD_ADDR_VAR 0 44
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 3
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: LD_INT 3
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 3
42204: NEG
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42245: LD_ADDR_VAR 0 45
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: LD_INT 3
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 3
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 3
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 3
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 3
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 3
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 3
42554: NEG
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42595: LD_ADDR_VAR 0 46
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 3
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 3
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42943: LD_ADDR_VAR 0 47
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43094: LD_ADDR_VAR 0 48
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43241: LD_ADDR_VAR 0 49
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43385: LD_ADDR_VAR 0 50
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43529: LD_ADDR_VAR 0 51
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43676: LD_ADDR_VAR 0 52
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43827: LD_ADDR_VAR 0 53
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44057: LD_ADDR_VAR 0 54
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44287: LD_ADDR_VAR 0 55
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44517: LD_ADDR_VAR 0 56
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44747: LD_ADDR_VAR 0 57
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44977: LD_ADDR_VAR 0 58
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45207: LD_ADDR_VAR 0 59
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45295: LD_ADDR_VAR 0 60
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45383: LD_ADDR_VAR 0 61
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45471: LD_ADDR_VAR 0 62
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45559: LD_ADDR_VAR 0 63
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45647: LD_ADDR_VAR 0 64
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// end ; 1 :
45735: GO 51632
45737: LD_INT 1
45739: DOUBLE
45740: EQUAL
45741: IFTRUE 45745
45743: GO 48368
45745: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45746: LD_ADDR_VAR 0 11
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45790: LD_ADDR_VAR 0 12
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 3
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45831: LD_ADDR_VAR 0 13
45835: PUSH
45836: LD_INT 3
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45871: LD_ADDR_VAR 0 14
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45912: LD_ADDR_VAR 0 15
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45956: LD_ADDR_VAR 0 16
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 3
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: NEG
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46002: LD_ADDR_VAR 0 17
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46046: LD_ADDR_VAR 0 18
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 3
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46087: LD_ADDR_VAR 0 19
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 3
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46127: LD_ADDR_VAR 0 20
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46168: LD_ADDR_VAR 0 21
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46212: LD_ADDR_VAR 0 22
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 3
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46258: LD_ADDR_VAR 0 23
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 4
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46302: LD_ADDR_VAR 0 24
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 4
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46343: LD_ADDR_VAR 0 25
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 4
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46383: LD_ADDR_VAR 0 26
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 4
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46424: LD_ADDR_VAR 0 27
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 4
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46468: LD_ADDR_VAR 0 28
46472: PUSH
46473: LD_INT 3
46475: NEG
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: LD_INT 4
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 4
46499: NEG
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46514: LD_ADDR_VAR 0 29
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 3
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 4
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 5
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 5
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 6
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 6
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 5
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46669: LD_ADDR_VAR 0 30
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 5
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 5
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 5
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 6
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 6
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46812: LD_ADDR_VAR 0 31
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 4
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 4
46859: PUSH
46860: LD_INT 4
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: PUSH
46870: LD_INT 4
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 5
46879: PUSH
46880: LD_INT 4
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 5
46889: PUSH
46890: LD_INT 5
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 4
46899: PUSH
46900: LD_INT 5
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 6
46909: PUSH
46910: LD_INT 5
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 6
46919: PUSH
46920: LD_INT 6
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 5
46929: PUSH
46930: LD_INT 6
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46951: LD_ADDR_VAR 0 32
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 4
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 4
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 5
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 5
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 4
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 6
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 6
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 5
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47094: LD_ADDR_VAR 0 33
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 3
47112: NEG
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 4
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 4
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 4
47169: NEG
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 5
47180: NEG
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 5
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 5
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 6
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 6
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47249: LD_ADDR_VAR 0 34
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: LD_INT 4
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 4
47304: NEG
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 4
47316: NEG
47317: PUSH
47318: LD_INT 4
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: LD_INT 5
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: LD_INT 4
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 5
47352: NEG
47353: PUSH
47354: LD_INT 5
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 5
47364: NEG
47365: PUSH
47366: LD_INT 6
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 6
47376: NEG
47377: PUSH
47378: LD_INT 5
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 6
47388: NEG
47389: PUSH
47390: LD_INT 6
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47412: LD_ADDR_VAR 0 41
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47456: LD_ADDR_VAR 0 42
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47497: LD_ADDR_VAR 0 43
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47537: LD_ADDR_VAR 0 44
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47578: LD_ADDR_VAR 0 45
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47622: LD_ADDR_VAR 0 46
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 3
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47668: LD_ADDR_VAR 0 47
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47701: LD_ADDR_VAR 0 48
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47732: LD_ADDR_VAR 0 49
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47761: LD_ADDR_VAR 0 50
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47790: LD_ADDR_VAR 0 51
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47821: LD_ADDR_VAR 0 52
47825: PUSH
47826: LD_INT 3
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47854: LD_ADDR_VAR 0 53
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47898: LD_ADDR_VAR 0 54
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47939: LD_ADDR_VAR 0 55
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47979: LD_ADDR_VAR 0 56
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 3
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48020: LD_ADDR_VAR 0 57
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: NEG
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48064: LD_ADDR_VAR 0 58
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 3
48083: NEG
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: LD_INT 3
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48110: LD_ADDR_VAR 0 59
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48154: LD_ADDR_VAR 0 60
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48195: LD_ADDR_VAR 0 61
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48235: LD_ADDR_VAR 0 62
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48276: LD_ADDR_VAR 0 63
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48320: LD_ADDR_VAR 0 64
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: ST_TO_ADDR
// end ; 2 :
48366: GO 51632
48368: LD_INT 2
48370: DOUBLE
48371: EQUAL
48372: IFTRUE 48376
48374: GO 51631
48376: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48377: LD_ADDR_VAR 0 29
48381: PUSH
48382: LD_INT 4
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 4
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 5
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 5
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 4
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 5
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 4
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 4
48507: PUSH
48508: LD_INT 4
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: LD_INT 4
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 3
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 4
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 4
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 4
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 4
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 5
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 5
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 3
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 4
48716: NEG
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 4
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 4
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 4
48762: NEG
48763: PUSH
48764: LD_INT 4
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 4
48774: NEG
48775: PUSH
48776: LD_INT 5
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: LD_INT 4
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: LD_INT 3
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 5
48822: NEG
48823: PUSH
48824: LD_INT 4
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 5
48834: NEG
48835: PUSH
48836: LD_INT 5
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: LD_INT 5
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 5
48858: NEG
48859: PUSH
48860: LD_INT 3
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48915: LD_ADDR_VAR 0 30
48919: PUSH
48920: LD_INT 4
48922: PUSH
48923: LD_INT 4
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 4
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 5
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 5
48952: PUSH
48953: LD_INT 5
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 4
48962: PUSH
48963: LD_INT 5
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: LD_INT 4
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 5
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 5
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 4
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 4
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 4
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 4
49105: NEG
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 4
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 4
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 5
49161: NEG
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 5
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 5
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: LD_INT 4
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 4
49267: NEG
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 4
49279: NEG
49280: PUSH
49281: LD_INT 4
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 4
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 4
49303: NEG
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 4
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 5
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 4
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 3
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 4
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 5
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 5
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49462: LD_ADDR_VAR 0 31
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 4
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 4
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 5
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 5
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 4
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 5
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 4
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 4
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 4
49664: NEG
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 4
49676: NEG
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: LD_INT 4
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 4
49712: NEG
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 5
49724: NEG
49725: PUSH
49726: LD_INT 4
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 5
49736: NEG
49737: PUSH
49738: LD_INT 5
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: LD_INT 5
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 5
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 4
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 4
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 4
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 4
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 5
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 5
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 4
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 5
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50012: LD_ADDR_VAR 0 32
50016: PUSH
50017: LD_INT 4
50019: NEG
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 4
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 4
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 5
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 5
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 5
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: LD_INT 3
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 3
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 4
50181: NEG
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 4
50193: NEG
50194: PUSH
50195: LD_INT 4
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: LD_INT 4
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 4
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 4
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 5
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 4
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 4
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 5
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 5
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 4
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 4
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 4
50424: PUSH
50425: LD_INT 4
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 4
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 5
50444: PUSH
50445: LD_INT 4
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 5
50454: PUSH
50455: LD_INT 5
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 4
50464: PUSH
50465: LD_INT 5
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 5
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50559: LD_ADDR_VAR 0 33
50563: PUSH
50564: LD_INT 4
50566: NEG
50567: PUSH
50568: LD_INT 4
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 4
50578: NEG
50579: PUSH
50580: LD_INT 5
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: LD_INT 4
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 4
50614: NEG
50615: PUSH
50616: LD_INT 3
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 5
50626: NEG
50627: PUSH
50628: LD_INT 4
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 5
50638: NEG
50639: PUSH
50640: LD_INT 5
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: LD_INT 5
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 5
50662: NEG
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 4
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: LD_INT 4
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 4
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 4
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 5
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 5
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 4
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 5
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 4
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 4
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 4
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 4
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 4
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 5
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 5
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 4
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 5
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51097: LD_ADDR_VAR 0 34
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 5
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 4
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 3
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 4
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 5
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 3
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 5
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 4
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 4
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 4
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 4
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: LD_INT 4
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 5
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 4
51339: PUSH
51340: LD_INT 5
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 4
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 5
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: PUSH
51380: LD_INT 5
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 4
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 4
51482: NEG
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 4
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 4
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 5
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: ST_TO_ADDR
// end ; end ;
51629: GO 51632
51631: POP
// case btype of b_depot , b_warehouse :
51632: LD_VAR 0 1
51636: PUSH
51637: LD_INT 0
51639: DOUBLE
51640: EQUAL
51641: IFTRUE 51651
51643: LD_INT 1
51645: DOUBLE
51646: EQUAL
51647: IFTRUE 51651
51649: GO 51852
51651: POP
// case nation of nation_american :
51652: LD_VAR 0 5
51656: PUSH
51657: LD_INT 1
51659: DOUBLE
51660: EQUAL
51661: IFTRUE 51665
51663: GO 51721
51665: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51666: LD_ADDR_VAR 0 9
51670: PUSH
51671: LD_VAR 0 11
51675: PUSH
51676: LD_VAR 0 12
51680: PUSH
51681: LD_VAR 0 13
51685: PUSH
51686: LD_VAR 0 14
51690: PUSH
51691: LD_VAR 0 15
51695: PUSH
51696: LD_VAR 0 16
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: LD_VAR 0 4
51713: PUSH
51714: LD_INT 1
51716: PLUS
51717: ARRAY
51718: ST_TO_ADDR
51719: GO 51850
51721: LD_INT 2
51723: DOUBLE
51724: EQUAL
51725: IFTRUE 51729
51727: GO 51785
51729: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51730: LD_ADDR_VAR 0 9
51734: PUSH
51735: LD_VAR 0 17
51739: PUSH
51740: LD_VAR 0 18
51744: PUSH
51745: LD_VAR 0 19
51749: PUSH
51750: LD_VAR 0 20
51754: PUSH
51755: LD_VAR 0 21
51759: PUSH
51760: LD_VAR 0 22
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: PUSH
51773: LD_VAR 0 4
51777: PUSH
51778: LD_INT 1
51780: PLUS
51781: ARRAY
51782: ST_TO_ADDR
51783: GO 51850
51785: LD_INT 3
51787: DOUBLE
51788: EQUAL
51789: IFTRUE 51793
51791: GO 51849
51793: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51794: LD_ADDR_VAR 0 9
51798: PUSH
51799: LD_VAR 0 23
51803: PUSH
51804: LD_VAR 0 24
51808: PUSH
51809: LD_VAR 0 25
51813: PUSH
51814: LD_VAR 0 26
51818: PUSH
51819: LD_VAR 0 27
51823: PUSH
51824: LD_VAR 0 28
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: PUSH
51837: LD_VAR 0 4
51841: PUSH
51842: LD_INT 1
51844: PLUS
51845: ARRAY
51846: ST_TO_ADDR
51847: GO 51850
51849: POP
51850: GO 52405
51852: LD_INT 2
51854: DOUBLE
51855: EQUAL
51856: IFTRUE 51866
51858: LD_INT 3
51860: DOUBLE
51861: EQUAL
51862: IFTRUE 51866
51864: GO 51922
51866: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51867: LD_ADDR_VAR 0 9
51871: PUSH
51872: LD_VAR 0 29
51876: PUSH
51877: LD_VAR 0 30
51881: PUSH
51882: LD_VAR 0 31
51886: PUSH
51887: LD_VAR 0 32
51891: PUSH
51892: LD_VAR 0 33
51896: PUSH
51897: LD_VAR 0 34
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: PUSH
51910: LD_VAR 0 4
51914: PUSH
51915: LD_INT 1
51917: PLUS
51918: ARRAY
51919: ST_TO_ADDR
51920: GO 52405
51922: LD_INT 16
51924: DOUBLE
51925: EQUAL
51926: IFTRUE 51984
51928: LD_INT 17
51930: DOUBLE
51931: EQUAL
51932: IFTRUE 51984
51934: LD_INT 18
51936: DOUBLE
51937: EQUAL
51938: IFTRUE 51984
51940: LD_INT 19
51942: DOUBLE
51943: EQUAL
51944: IFTRUE 51984
51946: LD_INT 22
51948: DOUBLE
51949: EQUAL
51950: IFTRUE 51984
51952: LD_INT 20
51954: DOUBLE
51955: EQUAL
51956: IFTRUE 51984
51958: LD_INT 21
51960: DOUBLE
51961: EQUAL
51962: IFTRUE 51984
51964: LD_INT 23
51966: DOUBLE
51967: EQUAL
51968: IFTRUE 51984
51970: LD_INT 24
51972: DOUBLE
51973: EQUAL
51974: IFTRUE 51984
51976: LD_INT 25
51978: DOUBLE
51979: EQUAL
51980: IFTRUE 51984
51982: GO 52040
51984: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51985: LD_ADDR_VAR 0 9
51989: PUSH
51990: LD_VAR 0 35
51994: PUSH
51995: LD_VAR 0 36
51999: PUSH
52000: LD_VAR 0 37
52004: PUSH
52005: LD_VAR 0 38
52009: PUSH
52010: LD_VAR 0 39
52014: PUSH
52015: LD_VAR 0 40
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: PUSH
52028: LD_VAR 0 4
52032: PUSH
52033: LD_INT 1
52035: PLUS
52036: ARRAY
52037: ST_TO_ADDR
52038: GO 52405
52040: LD_INT 6
52042: DOUBLE
52043: EQUAL
52044: IFTRUE 52096
52046: LD_INT 7
52048: DOUBLE
52049: EQUAL
52050: IFTRUE 52096
52052: LD_INT 8
52054: DOUBLE
52055: EQUAL
52056: IFTRUE 52096
52058: LD_INT 13
52060: DOUBLE
52061: EQUAL
52062: IFTRUE 52096
52064: LD_INT 12
52066: DOUBLE
52067: EQUAL
52068: IFTRUE 52096
52070: LD_INT 15
52072: DOUBLE
52073: EQUAL
52074: IFTRUE 52096
52076: LD_INT 11
52078: DOUBLE
52079: EQUAL
52080: IFTRUE 52096
52082: LD_INT 14
52084: DOUBLE
52085: EQUAL
52086: IFTRUE 52096
52088: LD_INT 10
52090: DOUBLE
52091: EQUAL
52092: IFTRUE 52096
52094: GO 52152
52096: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52097: LD_ADDR_VAR 0 9
52101: PUSH
52102: LD_VAR 0 41
52106: PUSH
52107: LD_VAR 0 42
52111: PUSH
52112: LD_VAR 0 43
52116: PUSH
52117: LD_VAR 0 44
52121: PUSH
52122: LD_VAR 0 45
52126: PUSH
52127: LD_VAR 0 46
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: PUSH
52140: LD_VAR 0 4
52144: PUSH
52145: LD_INT 1
52147: PLUS
52148: ARRAY
52149: ST_TO_ADDR
52150: GO 52405
52152: LD_INT 36
52154: DOUBLE
52155: EQUAL
52156: IFTRUE 52160
52158: GO 52216
52160: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52161: LD_ADDR_VAR 0 9
52165: PUSH
52166: LD_VAR 0 47
52170: PUSH
52171: LD_VAR 0 48
52175: PUSH
52176: LD_VAR 0 49
52180: PUSH
52181: LD_VAR 0 50
52185: PUSH
52186: LD_VAR 0 51
52190: PUSH
52191: LD_VAR 0 52
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: LD_VAR 0 4
52208: PUSH
52209: LD_INT 1
52211: PLUS
52212: ARRAY
52213: ST_TO_ADDR
52214: GO 52405
52216: LD_INT 4
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52242
52222: LD_INT 5
52224: DOUBLE
52225: EQUAL
52226: IFTRUE 52242
52228: LD_INT 34
52230: DOUBLE
52231: EQUAL
52232: IFTRUE 52242
52234: LD_INT 37
52236: DOUBLE
52237: EQUAL
52238: IFTRUE 52242
52240: GO 52298
52242: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52243: LD_ADDR_VAR 0 9
52247: PUSH
52248: LD_VAR 0 53
52252: PUSH
52253: LD_VAR 0 54
52257: PUSH
52258: LD_VAR 0 55
52262: PUSH
52263: LD_VAR 0 56
52267: PUSH
52268: LD_VAR 0 57
52272: PUSH
52273: LD_VAR 0 58
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: LD_VAR 0 4
52290: PUSH
52291: LD_INT 1
52293: PLUS
52294: ARRAY
52295: ST_TO_ADDR
52296: GO 52405
52298: LD_INT 31
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52348
52304: LD_INT 32
52306: DOUBLE
52307: EQUAL
52308: IFTRUE 52348
52310: LD_INT 33
52312: DOUBLE
52313: EQUAL
52314: IFTRUE 52348
52316: LD_INT 27
52318: DOUBLE
52319: EQUAL
52320: IFTRUE 52348
52322: LD_INT 26
52324: DOUBLE
52325: EQUAL
52326: IFTRUE 52348
52328: LD_INT 28
52330: DOUBLE
52331: EQUAL
52332: IFTRUE 52348
52334: LD_INT 29
52336: DOUBLE
52337: EQUAL
52338: IFTRUE 52348
52340: LD_INT 30
52342: DOUBLE
52343: EQUAL
52344: IFTRUE 52348
52346: GO 52404
52348: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52349: LD_ADDR_VAR 0 9
52353: PUSH
52354: LD_VAR 0 59
52358: PUSH
52359: LD_VAR 0 60
52363: PUSH
52364: LD_VAR 0 61
52368: PUSH
52369: LD_VAR 0 62
52373: PUSH
52374: LD_VAR 0 63
52378: PUSH
52379: LD_VAR 0 64
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: PUSH
52392: LD_VAR 0 4
52396: PUSH
52397: LD_INT 1
52399: PLUS
52400: ARRAY
52401: ST_TO_ADDR
52402: GO 52405
52404: POP
// temp_list2 = [ ] ;
52405: LD_ADDR_VAR 0 10
52409: PUSH
52410: EMPTY
52411: ST_TO_ADDR
// for i in temp_list do
52412: LD_ADDR_VAR 0 8
52416: PUSH
52417: LD_VAR 0 9
52421: PUSH
52422: FOR_IN
52423: IFFALSE 52475
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52425: LD_ADDR_VAR 0 10
52429: PUSH
52430: LD_VAR 0 10
52434: PUSH
52435: LD_VAR 0 8
52439: PUSH
52440: LD_INT 1
52442: ARRAY
52443: PUSH
52444: LD_VAR 0 2
52448: PLUS
52449: PUSH
52450: LD_VAR 0 8
52454: PUSH
52455: LD_INT 2
52457: ARRAY
52458: PUSH
52459: LD_VAR 0 3
52463: PLUS
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: ADD
52472: ST_TO_ADDR
52473: GO 52422
52475: POP
52476: POP
// result = temp_list2 ;
52477: LD_ADDR_VAR 0 7
52481: PUSH
52482: LD_VAR 0 10
52486: ST_TO_ADDR
// end ;
52487: LD_VAR 0 7
52491: RET
// export function EnemyInRange ( unit , dist ) ; begin
52492: LD_INT 0
52494: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52495: LD_ADDR_VAR 0 3
52499: PUSH
52500: LD_VAR 0 1
52504: PPUSH
52505: CALL_OW 255
52509: PPUSH
52510: LD_VAR 0 1
52514: PPUSH
52515: CALL_OW 250
52519: PPUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: CALL_OW 251
52529: PPUSH
52530: LD_VAR 0 2
52534: PPUSH
52535: CALL 25888 0 4
52539: PUSH
52540: LD_INT 4
52542: ARRAY
52543: ST_TO_ADDR
// end ;
52544: LD_VAR 0 3
52548: RET
// export function PlayerSeeMe ( unit ) ; begin
52549: LD_INT 0
52551: PPUSH
// result := See ( your_side , unit ) ;
52552: LD_ADDR_VAR 0 2
52556: PUSH
52557: LD_OWVAR 2
52561: PPUSH
52562: LD_VAR 0 1
52566: PPUSH
52567: CALL_OW 292
52571: ST_TO_ADDR
// end ;
52572: LD_VAR 0 2
52576: RET
// export function ReverseDir ( unit ) ; begin
52577: LD_INT 0
52579: PPUSH
// if not unit then
52580: LD_VAR 0 1
52584: NOT
52585: IFFALSE 52589
// exit ;
52587: GO 52612
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52589: LD_ADDR_VAR 0 2
52593: PUSH
52594: LD_VAR 0 1
52598: PPUSH
52599: CALL_OW 254
52603: PUSH
52604: LD_INT 3
52606: PLUS
52607: PUSH
52608: LD_INT 6
52610: MOD
52611: ST_TO_ADDR
// end ;
52612: LD_VAR 0 2
52616: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52617: LD_INT 0
52619: PPUSH
52620: PPUSH
52621: PPUSH
52622: PPUSH
52623: PPUSH
// if not hexes then
52624: LD_VAR 0 2
52628: NOT
52629: IFFALSE 52633
// exit ;
52631: GO 52781
// dist := 9999 ;
52633: LD_ADDR_VAR 0 5
52637: PUSH
52638: LD_INT 9999
52640: ST_TO_ADDR
// for i = 1 to hexes do
52641: LD_ADDR_VAR 0 4
52645: PUSH
52646: DOUBLE
52647: LD_INT 1
52649: DEC
52650: ST_TO_ADDR
52651: LD_VAR 0 2
52655: PUSH
52656: FOR_TO
52657: IFFALSE 52769
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52659: LD_VAR 0 1
52663: PPUSH
52664: LD_VAR 0 2
52668: PUSH
52669: LD_VAR 0 4
52673: ARRAY
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PPUSH
52679: LD_VAR 0 2
52683: PUSH
52684: LD_VAR 0 4
52688: ARRAY
52689: PUSH
52690: LD_INT 2
52692: ARRAY
52693: PPUSH
52694: CALL_OW 297
52698: PUSH
52699: LD_VAR 0 5
52703: LESS
52704: IFFALSE 52767
// begin hex := hexes [ i ] ;
52706: LD_ADDR_VAR 0 7
52710: PUSH
52711: LD_VAR 0 2
52715: PUSH
52716: LD_VAR 0 4
52720: ARRAY
52721: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52722: LD_ADDR_VAR 0 5
52726: PUSH
52727: LD_VAR 0 1
52731: PPUSH
52732: LD_VAR 0 2
52736: PUSH
52737: LD_VAR 0 4
52741: ARRAY
52742: PUSH
52743: LD_INT 1
52745: ARRAY
52746: PPUSH
52747: LD_VAR 0 2
52751: PUSH
52752: LD_VAR 0 4
52756: ARRAY
52757: PUSH
52758: LD_INT 2
52760: ARRAY
52761: PPUSH
52762: CALL_OW 297
52766: ST_TO_ADDR
// end ; end ;
52767: GO 52656
52769: POP
52770: POP
// result := hex ;
52771: LD_ADDR_VAR 0 3
52775: PUSH
52776: LD_VAR 0 7
52780: ST_TO_ADDR
// end ;
52781: LD_VAR 0 3
52785: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52786: LD_INT 0
52788: PPUSH
52789: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52790: LD_VAR 0 1
52794: NOT
52795: PUSH
52796: LD_VAR 0 1
52800: PUSH
52801: LD_INT 21
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 23
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PPUSH
52825: CALL_OW 69
52829: IN
52830: NOT
52831: OR
52832: IFFALSE 52836
// exit ;
52834: GO 52883
// for i = 1 to 3 do
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: DOUBLE
52842: LD_INT 1
52844: DEC
52845: ST_TO_ADDR
52846: LD_INT 3
52848: PUSH
52849: FOR_TO
52850: IFFALSE 52881
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52852: LD_VAR 0 1
52856: PPUSH
52857: CALL_OW 250
52861: PPUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: CALL_OW 251
52871: PPUSH
52872: LD_INT 1
52874: PPUSH
52875: CALL_OW 453
52879: GO 52849
52881: POP
52882: POP
// end ;
52883: LD_VAR 0 2
52887: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52888: LD_INT 0
52890: PPUSH
52891: PPUSH
52892: PPUSH
52893: PPUSH
52894: PPUSH
52895: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52896: LD_VAR 0 1
52900: NOT
52901: PUSH
52902: LD_VAR 0 2
52906: NOT
52907: OR
52908: PUSH
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL_OW 314
52918: OR
52919: IFFALSE 52923
// exit ;
52921: GO 53364
// x := GetX ( enemy_unit ) ;
52923: LD_ADDR_VAR 0 7
52927: PUSH
52928: LD_VAR 0 2
52932: PPUSH
52933: CALL_OW 250
52937: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52938: LD_ADDR_VAR 0 8
52942: PUSH
52943: LD_VAR 0 2
52947: PPUSH
52948: CALL_OW 251
52952: ST_TO_ADDR
// if not x or not y then
52953: LD_VAR 0 7
52957: NOT
52958: PUSH
52959: LD_VAR 0 8
52963: NOT
52964: OR
52965: IFFALSE 52969
// exit ;
52967: GO 53364
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52969: LD_ADDR_VAR 0 6
52973: PUSH
52974: LD_VAR 0 7
52978: PPUSH
52979: LD_INT 0
52981: PPUSH
52982: LD_INT 4
52984: PPUSH
52985: CALL_OW 272
52989: PUSH
52990: LD_VAR 0 8
52994: PPUSH
52995: LD_INT 0
52997: PPUSH
52998: LD_INT 4
53000: PPUSH
53001: CALL_OW 273
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_VAR 0 7
53014: PPUSH
53015: LD_INT 1
53017: PPUSH
53018: LD_INT 4
53020: PPUSH
53021: CALL_OW 272
53025: PUSH
53026: LD_VAR 0 8
53030: PPUSH
53031: LD_INT 1
53033: PPUSH
53034: LD_INT 4
53036: PPUSH
53037: CALL_OW 273
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_VAR 0 7
53050: PPUSH
53051: LD_INT 2
53053: PPUSH
53054: LD_INT 4
53056: PPUSH
53057: CALL_OW 272
53061: PUSH
53062: LD_VAR 0 8
53066: PPUSH
53067: LD_INT 2
53069: PPUSH
53070: LD_INT 4
53072: PPUSH
53073: CALL_OW 273
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_VAR 0 7
53086: PPUSH
53087: LD_INT 3
53089: PPUSH
53090: LD_INT 4
53092: PPUSH
53093: CALL_OW 272
53097: PUSH
53098: LD_VAR 0 8
53102: PPUSH
53103: LD_INT 3
53105: PPUSH
53106: LD_INT 4
53108: PPUSH
53109: CALL_OW 273
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_VAR 0 7
53122: PPUSH
53123: LD_INT 4
53125: PPUSH
53126: LD_INT 4
53128: PPUSH
53129: CALL_OW 272
53133: PUSH
53134: LD_VAR 0 8
53138: PPUSH
53139: LD_INT 4
53141: PPUSH
53142: LD_INT 4
53144: PPUSH
53145: CALL_OW 273
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_VAR 0 7
53158: PPUSH
53159: LD_INT 5
53161: PPUSH
53162: LD_INT 4
53164: PPUSH
53165: CALL_OW 272
53169: PUSH
53170: LD_VAR 0 8
53174: PPUSH
53175: LD_INT 5
53177: PPUSH
53178: LD_INT 4
53180: PPUSH
53181: CALL_OW 273
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// for i = tmp downto 1 do
53198: LD_ADDR_VAR 0 4
53202: PUSH
53203: DOUBLE
53204: LD_VAR 0 6
53208: INC
53209: ST_TO_ADDR
53210: LD_INT 1
53212: PUSH
53213: FOR_DOWNTO
53214: IFFALSE 53315
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53216: LD_VAR 0 6
53220: PUSH
53221: LD_VAR 0 4
53225: ARRAY
53226: PUSH
53227: LD_INT 1
53229: ARRAY
53230: PPUSH
53231: LD_VAR 0 6
53235: PUSH
53236: LD_VAR 0 4
53240: ARRAY
53241: PUSH
53242: LD_INT 2
53244: ARRAY
53245: PPUSH
53246: CALL_OW 488
53250: NOT
53251: PUSH
53252: LD_VAR 0 6
53256: PUSH
53257: LD_VAR 0 4
53261: ARRAY
53262: PUSH
53263: LD_INT 1
53265: ARRAY
53266: PPUSH
53267: LD_VAR 0 6
53271: PUSH
53272: LD_VAR 0 4
53276: ARRAY
53277: PUSH
53278: LD_INT 2
53280: ARRAY
53281: PPUSH
53282: CALL_OW 428
53286: PUSH
53287: LD_INT 0
53289: NONEQUAL
53290: OR
53291: IFFALSE 53313
// tmp := Delete ( tmp , i ) ;
53293: LD_ADDR_VAR 0 6
53297: PUSH
53298: LD_VAR 0 6
53302: PPUSH
53303: LD_VAR 0 4
53307: PPUSH
53308: CALL_OW 3
53312: ST_TO_ADDR
53313: GO 53213
53315: POP
53316: POP
// j := GetClosestHex ( unit , tmp ) ;
53317: LD_ADDR_VAR 0 5
53321: PUSH
53322: LD_VAR 0 1
53326: PPUSH
53327: LD_VAR 0 6
53331: PPUSH
53332: CALL 52617 0 2
53336: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53337: LD_VAR 0 1
53341: PPUSH
53342: LD_VAR 0 5
53346: PUSH
53347: LD_INT 1
53349: ARRAY
53350: PPUSH
53351: LD_VAR 0 5
53355: PUSH
53356: LD_INT 2
53358: ARRAY
53359: PPUSH
53360: CALL_OW 111
// end ;
53364: LD_VAR 0 3
53368: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53369: LD_INT 0
53371: PPUSH
53372: PPUSH
53373: PPUSH
// uc_side = 0 ;
53374: LD_ADDR_OWVAR 20
53378: PUSH
53379: LD_INT 0
53381: ST_TO_ADDR
// uc_nation = 0 ;
53382: LD_ADDR_OWVAR 21
53386: PUSH
53387: LD_INT 0
53389: ST_TO_ADDR
// InitHc_All ( ) ;
53390: CALL_OW 584
// InitVc ;
53394: CALL_OW 20
// if mastodonts then
53398: LD_VAR 0 6
53402: IFFALSE 53469
// for i = 1 to mastodonts do
53404: LD_ADDR_VAR 0 11
53408: PUSH
53409: DOUBLE
53410: LD_INT 1
53412: DEC
53413: ST_TO_ADDR
53414: LD_VAR 0 6
53418: PUSH
53419: FOR_TO
53420: IFFALSE 53467
// begin vc_chassis := 31 ;
53422: LD_ADDR_OWVAR 37
53426: PUSH
53427: LD_INT 31
53429: ST_TO_ADDR
// vc_control := control_rider ;
53430: LD_ADDR_OWVAR 38
53434: PUSH
53435: LD_INT 4
53437: ST_TO_ADDR
// animal := CreateVehicle ;
53438: LD_ADDR_VAR 0 12
53442: PUSH
53443: CALL_OW 45
53447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53448: LD_VAR 0 12
53452: PPUSH
53453: LD_VAR 0 8
53457: PPUSH
53458: LD_INT 0
53460: PPUSH
53461: CALL 55657 0 3
// end ;
53465: GO 53419
53467: POP
53468: POP
// if horses then
53469: LD_VAR 0 5
53473: IFFALSE 53540
// for i = 1 to horses do
53475: LD_ADDR_VAR 0 11
53479: PUSH
53480: DOUBLE
53481: LD_INT 1
53483: DEC
53484: ST_TO_ADDR
53485: LD_VAR 0 5
53489: PUSH
53490: FOR_TO
53491: IFFALSE 53538
// begin hc_class := 21 ;
53493: LD_ADDR_OWVAR 28
53497: PUSH
53498: LD_INT 21
53500: ST_TO_ADDR
// hc_gallery :=  ;
53501: LD_ADDR_OWVAR 33
53505: PUSH
53506: LD_STRING 
53508: ST_TO_ADDR
// animal := CreateHuman ;
53509: LD_ADDR_VAR 0 12
53513: PUSH
53514: CALL_OW 44
53518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53519: LD_VAR 0 12
53523: PPUSH
53524: LD_VAR 0 8
53528: PPUSH
53529: LD_INT 0
53531: PPUSH
53532: CALL 55657 0 3
// end ;
53536: GO 53490
53538: POP
53539: POP
// if birds then
53540: LD_VAR 0 1
53544: IFFALSE 53611
// for i = 1 to birds do
53546: LD_ADDR_VAR 0 11
53550: PUSH
53551: DOUBLE
53552: LD_INT 1
53554: DEC
53555: ST_TO_ADDR
53556: LD_VAR 0 1
53560: PUSH
53561: FOR_TO
53562: IFFALSE 53609
// begin hc_class = 18 ;
53564: LD_ADDR_OWVAR 28
53568: PUSH
53569: LD_INT 18
53571: ST_TO_ADDR
// hc_gallery =  ;
53572: LD_ADDR_OWVAR 33
53576: PUSH
53577: LD_STRING 
53579: ST_TO_ADDR
// animal := CreateHuman ;
53580: LD_ADDR_VAR 0 12
53584: PUSH
53585: CALL_OW 44
53589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53590: LD_VAR 0 12
53594: PPUSH
53595: LD_VAR 0 8
53599: PPUSH
53600: LD_INT 0
53602: PPUSH
53603: CALL 55657 0 3
// end ;
53607: GO 53561
53609: POP
53610: POP
// if tigers then
53611: LD_VAR 0 2
53615: IFFALSE 53699
// for i = 1 to tigers do
53617: LD_ADDR_VAR 0 11
53621: PUSH
53622: DOUBLE
53623: LD_INT 1
53625: DEC
53626: ST_TO_ADDR
53627: LD_VAR 0 2
53631: PUSH
53632: FOR_TO
53633: IFFALSE 53697
// begin hc_class = class_tiger ;
53635: LD_ADDR_OWVAR 28
53639: PUSH
53640: LD_INT 14
53642: ST_TO_ADDR
// hc_gallery =  ;
53643: LD_ADDR_OWVAR 33
53647: PUSH
53648: LD_STRING 
53650: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53651: LD_ADDR_OWVAR 35
53655: PUSH
53656: LD_INT 7
53658: NEG
53659: PPUSH
53660: LD_INT 7
53662: PPUSH
53663: CALL_OW 12
53667: ST_TO_ADDR
// animal := CreateHuman ;
53668: LD_ADDR_VAR 0 12
53672: PUSH
53673: CALL_OW 44
53677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53678: LD_VAR 0 12
53682: PPUSH
53683: LD_VAR 0 8
53687: PPUSH
53688: LD_INT 0
53690: PPUSH
53691: CALL 55657 0 3
// end ;
53695: GO 53632
53697: POP
53698: POP
// if apemans then
53699: LD_VAR 0 3
53703: IFFALSE 53826
// for i = 1 to apemans do
53705: LD_ADDR_VAR 0 11
53709: PUSH
53710: DOUBLE
53711: LD_INT 1
53713: DEC
53714: ST_TO_ADDR
53715: LD_VAR 0 3
53719: PUSH
53720: FOR_TO
53721: IFFALSE 53824
// begin hc_class = class_apeman ;
53723: LD_ADDR_OWVAR 28
53727: PUSH
53728: LD_INT 12
53730: ST_TO_ADDR
// hc_gallery =  ;
53731: LD_ADDR_OWVAR 33
53735: PUSH
53736: LD_STRING 
53738: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53739: LD_ADDR_OWVAR 35
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PPUSH
53748: LD_INT 2
53750: PPUSH
53751: CALL_OW 12
53755: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53756: LD_ADDR_OWVAR 31
53760: PUSH
53761: LD_INT 1
53763: PPUSH
53764: LD_INT 3
53766: PPUSH
53767: CALL_OW 12
53771: PUSH
53772: LD_INT 1
53774: PPUSH
53775: LD_INT 3
53777: PPUSH
53778: CALL_OW 12
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: ST_TO_ADDR
// animal := CreateHuman ;
53795: LD_ADDR_VAR 0 12
53799: PUSH
53800: CALL_OW 44
53804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53805: LD_VAR 0 12
53809: PPUSH
53810: LD_VAR 0 8
53814: PPUSH
53815: LD_INT 0
53817: PPUSH
53818: CALL 55657 0 3
// end ;
53822: GO 53720
53824: POP
53825: POP
// if enchidnas then
53826: LD_VAR 0 4
53830: IFFALSE 53897
// for i = 1 to enchidnas do
53832: LD_ADDR_VAR 0 11
53836: PUSH
53837: DOUBLE
53838: LD_INT 1
53840: DEC
53841: ST_TO_ADDR
53842: LD_VAR 0 4
53846: PUSH
53847: FOR_TO
53848: IFFALSE 53895
// begin hc_class = 13 ;
53850: LD_ADDR_OWVAR 28
53854: PUSH
53855: LD_INT 13
53857: ST_TO_ADDR
// hc_gallery =  ;
53858: LD_ADDR_OWVAR 33
53862: PUSH
53863: LD_STRING 
53865: ST_TO_ADDR
// animal := CreateHuman ;
53866: LD_ADDR_VAR 0 12
53870: PUSH
53871: CALL_OW 44
53875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53876: LD_VAR 0 12
53880: PPUSH
53881: LD_VAR 0 8
53885: PPUSH
53886: LD_INT 0
53888: PPUSH
53889: CALL 55657 0 3
// end ;
53893: GO 53847
53895: POP
53896: POP
// if fishes then
53897: LD_VAR 0 7
53901: IFFALSE 53968
// for i = 1 to fishes do
53903: LD_ADDR_VAR 0 11
53907: PUSH
53908: DOUBLE
53909: LD_INT 1
53911: DEC
53912: ST_TO_ADDR
53913: LD_VAR 0 7
53917: PUSH
53918: FOR_TO
53919: IFFALSE 53966
// begin hc_class = 20 ;
53921: LD_ADDR_OWVAR 28
53925: PUSH
53926: LD_INT 20
53928: ST_TO_ADDR
// hc_gallery =  ;
53929: LD_ADDR_OWVAR 33
53933: PUSH
53934: LD_STRING 
53936: ST_TO_ADDR
// animal := CreateHuman ;
53937: LD_ADDR_VAR 0 12
53941: PUSH
53942: CALL_OW 44
53946: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53947: LD_VAR 0 12
53951: PPUSH
53952: LD_VAR 0 9
53956: PPUSH
53957: LD_INT 0
53959: PPUSH
53960: CALL 55657 0 3
// end ;
53964: GO 53918
53966: POP
53967: POP
// end ;
53968: LD_VAR 0 10
53972: RET
// export function WantHeal ( sci , unit ) ; begin
53973: LD_INT 0
53975: PPUSH
// if GetTaskList ( sci ) > 0 then
53976: LD_VAR 0 1
53980: PPUSH
53981: CALL_OW 437
53985: PUSH
53986: LD_INT 0
53988: GREATER
53989: IFFALSE 54059
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53991: LD_VAR 0 1
53995: PPUSH
53996: CALL_OW 437
54000: PUSH
54001: LD_INT 1
54003: ARRAY
54004: PUSH
54005: LD_INT 1
54007: ARRAY
54008: PUSH
54009: LD_STRING l
54011: EQUAL
54012: PUSH
54013: LD_VAR 0 1
54017: PPUSH
54018: CALL_OW 437
54022: PUSH
54023: LD_INT 1
54025: ARRAY
54026: PUSH
54027: LD_INT 4
54029: ARRAY
54030: PUSH
54031: LD_VAR 0 2
54035: EQUAL
54036: AND
54037: IFFALSE 54049
// result := true else
54039: LD_ADDR_VAR 0 3
54043: PUSH
54044: LD_INT 1
54046: ST_TO_ADDR
54047: GO 54057
// result := false ;
54049: LD_ADDR_VAR 0 3
54053: PUSH
54054: LD_INT 0
54056: ST_TO_ADDR
// end else
54057: GO 54067
// result := false ;
54059: LD_ADDR_VAR 0 3
54063: PUSH
54064: LD_INT 0
54066: ST_TO_ADDR
// end ;
54067: LD_VAR 0 3
54071: RET
// export function HealTarget ( sci ) ; begin
54072: LD_INT 0
54074: PPUSH
// if not sci then
54075: LD_VAR 0 1
54079: NOT
54080: IFFALSE 54084
// exit ;
54082: GO 54149
// result := 0 ;
54084: LD_ADDR_VAR 0 2
54088: PUSH
54089: LD_INT 0
54091: ST_TO_ADDR
// if GetTaskList ( sci ) then
54092: LD_VAR 0 1
54096: PPUSH
54097: CALL_OW 437
54101: IFFALSE 54149
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54103: LD_VAR 0 1
54107: PPUSH
54108: CALL_OW 437
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PUSH
54117: LD_INT 1
54119: ARRAY
54120: PUSH
54121: LD_STRING l
54123: EQUAL
54124: IFFALSE 54149
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54126: LD_ADDR_VAR 0 2
54130: PUSH
54131: LD_VAR 0 1
54135: PPUSH
54136: CALL_OW 437
54140: PUSH
54141: LD_INT 1
54143: ARRAY
54144: PUSH
54145: LD_INT 4
54147: ARRAY
54148: ST_TO_ADDR
// end ;
54149: LD_VAR 0 2
54153: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54154: LD_INT 0
54156: PPUSH
54157: PPUSH
54158: PPUSH
54159: PPUSH
// if not base_units then
54160: LD_VAR 0 1
54164: NOT
54165: IFFALSE 54169
// exit ;
54167: GO 54256
// result := false ;
54169: LD_ADDR_VAR 0 2
54173: PUSH
54174: LD_INT 0
54176: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54177: LD_ADDR_VAR 0 5
54181: PUSH
54182: LD_VAR 0 1
54186: PPUSH
54187: LD_INT 21
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PPUSH
54197: CALL_OW 72
54201: ST_TO_ADDR
// if not tmp then
54202: LD_VAR 0 5
54206: NOT
54207: IFFALSE 54211
// exit ;
54209: GO 54256
// for i in tmp do
54211: LD_ADDR_VAR 0 3
54215: PUSH
54216: LD_VAR 0 5
54220: PUSH
54221: FOR_IN
54222: IFFALSE 54254
// begin result := EnemyInRange ( i , 22 ) ;
54224: LD_ADDR_VAR 0 2
54228: PUSH
54229: LD_VAR 0 3
54233: PPUSH
54234: LD_INT 22
54236: PPUSH
54237: CALL 52492 0 2
54241: ST_TO_ADDR
// if result then
54242: LD_VAR 0 2
54246: IFFALSE 54252
// exit ;
54248: POP
54249: POP
54250: GO 54256
// end ;
54252: GO 54221
54254: POP
54255: POP
// end ;
54256: LD_VAR 0 2
54260: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54261: LD_INT 0
54263: PPUSH
54264: PPUSH
// if not units then
54265: LD_VAR 0 1
54269: NOT
54270: IFFALSE 54274
// exit ;
54272: GO 54344
// result := [ ] ;
54274: LD_ADDR_VAR 0 3
54278: PUSH
54279: EMPTY
54280: ST_TO_ADDR
// for i in units do
54281: LD_ADDR_VAR 0 4
54285: PUSH
54286: LD_VAR 0 1
54290: PUSH
54291: FOR_IN
54292: IFFALSE 54342
// if GetTag ( i ) = tag then
54294: LD_VAR 0 4
54298: PPUSH
54299: CALL_OW 110
54303: PUSH
54304: LD_VAR 0 2
54308: EQUAL
54309: IFFALSE 54340
// result := Replace ( result , result + 1 , i ) ;
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_VAR 0 3
54320: PPUSH
54321: LD_VAR 0 3
54325: PUSH
54326: LD_INT 1
54328: PLUS
54329: PPUSH
54330: LD_VAR 0 4
54334: PPUSH
54335: CALL_OW 1
54339: ST_TO_ADDR
54340: GO 54291
54342: POP
54343: POP
// end ;
54344: LD_VAR 0 3
54348: RET
// export function IsDriver ( un ) ; begin
54349: LD_INT 0
54351: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54352: LD_ADDR_VAR 0 2
54356: PUSH
54357: LD_VAR 0 1
54361: PUSH
54362: LD_INT 55
54364: PUSH
54365: EMPTY
54366: LIST
54367: PPUSH
54368: CALL_OW 69
54372: IN
54373: ST_TO_ADDR
// end ;
54374: LD_VAR 0 2
54378: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54379: LD_INT 0
54381: PPUSH
54382: PPUSH
// list := [ ] ;
54383: LD_ADDR_VAR 0 5
54387: PUSH
54388: EMPTY
54389: ST_TO_ADDR
// case d of 0 :
54390: LD_VAR 0 3
54394: PUSH
54395: LD_INT 0
54397: DOUBLE
54398: EQUAL
54399: IFTRUE 54403
54401: GO 54536
54403: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54404: LD_ADDR_VAR 0 5
54408: PUSH
54409: LD_VAR 0 1
54413: PUSH
54414: LD_INT 4
54416: MINUS
54417: PUSH
54418: LD_VAR 0 2
54422: PUSH
54423: LD_INT 4
54425: MINUS
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: PUSH
54435: LD_VAR 0 1
54439: PUSH
54440: LD_INT 3
54442: MINUS
54443: PUSH
54444: LD_VAR 0 2
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: PUSH
54457: LD_VAR 0 1
54461: PUSH
54462: LD_INT 4
54464: PLUS
54465: PUSH
54466: LD_VAR 0 2
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: PUSH
54479: LD_VAR 0 1
54483: PUSH
54484: LD_INT 3
54486: PLUS
54487: PUSH
54488: LD_VAR 0 2
54492: PUSH
54493: LD_INT 3
54495: PLUS
54496: PUSH
54497: LD_INT 5
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: PUSH
54505: LD_VAR 0 1
54509: PUSH
54510: LD_VAR 0 2
54514: PUSH
54515: LD_INT 4
54517: PLUS
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// end ; 1 :
54534: GO 55234
54536: LD_INT 1
54538: DOUBLE
54539: EQUAL
54540: IFTRUE 54544
54542: GO 54677
54544: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54545: LD_ADDR_VAR 0 5
54549: PUSH
54550: LD_VAR 0 1
54554: PUSH
54555: LD_VAR 0 2
54559: PUSH
54560: LD_INT 4
54562: MINUS
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: PUSH
54572: LD_VAR 0 1
54576: PUSH
54577: LD_INT 3
54579: MINUS
54580: PUSH
54581: LD_VAR 0 2
54585: PUSH
54586: LD_INT 3
54588: MINUS
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: PUSH
54598: LD_VAR 0 1
54602: PUSH
54603: LD_INT 4
54605: MINUS
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: PUSH
54620: LD_VAR 0 1
54624: PUSH
54625: LD_VAR 0 2
54629: PUSH
54630: LD_INT 3
54632: PLUS
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: PUSH
54642: LD_VAR 0 1
54646: PUSH
54647: LD_INT 4
54649: PLUS
54650: PUSH
54651: LD_VAR 0 2
54655: PUSH
54656: LD_INT 4
54658: PLUS
54659: PUSH
54660: LD_INT 5
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// end ; 2 :
54675: GO 55234
54677: LD_INT 2
54679: DOUBLE
54680: EQUAL
54681: IFTRUE 54685
54683: GO 54814
54685: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54686: LD_ADDR_VAR 0 5
54690: PUSH
54691: LD_VAR 0 1
54695: PUSH
54696: LD_VAR 0 2
54700: PUSH
54701: LD_INT 3
54703: MINUS
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: PUSH
54713: LD_VAR 0 1
54717: PUSH
54718: LD_INT 4
54720: PLUS
54721: PUSH
54722: LD_VAR 0 2
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_VAR 0 2
54744: PUSH
54745: LD_INT 4
54747: PLUS
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: PUSH
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 3
54764: MINUS
54765: PUSH
54766: LD_VAR 0 2
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: PUSH
54779: LD_VAR 0 1
54783: PUSH
54784: LD_INT 4
54786: MINUS
54787: PUSH
54788: LD_VAR 0 2
54792: PUSH
54793: LD_INT 4
54795: MINUS
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: ST_TO_ADDR
// end ; 3 :
54812: GO 55234
54814: LD_INT 3
54816: DOUBLE
54817: EQUAL
54818: IFTRUE 54822
54820: GO 54955
54822: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54823: LD_ADDR_VAR 0 5
54827: PUSH
54828: LD_VAR 0 1
54832: PUSH
54833: LD_INT 3
54835: PLUS
54836: PUSH
54837: LD_VAR 0 2
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: PUSH
54850: LD_VAR 0 1
54854: PUSH
54855: LD_INT 4
54857: PLUS
54858: PUSH
54859: LD_VAR 0 2
54863: PUSH
54864: LD_INT 4
54866: PLUS
54867: PUSH
54868: LD_INT 5
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: PUSH
54876: LD_VAR 0 1
54880: PUSH
54881: LD_INT 4
54883: MINUS
54884: PUSH
54885: LD_VAR 0 2
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: LD_VAR 0 1
54902: PUSH
54903: LD_VAR 0 2
54907: PUSH
54908: LD_INT 4
54910: MINUS
54911: PUSH
54912: LD_INT 3
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: PUSH
54920: LD_VAR 0 1
54924: PUSH
54925: LD_INT 3
54927: MINUS
54928: PUSH
54929: LD_VAR 0 2
54933: PUSH
54934: LD_INT 3
54936: MINUS
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// end ; 4 :
54953: GO 55234
54955: LD_INT 4
54957: DOUBLE
54958: EQUAL
54959: IFTRUE 54963
54961: GO 55096
54963: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54964: LD_ADDR_VAR 0 5
54968: PUSH
54969: LD_VAR 0 1
54973: PUSH
54974: LD_VAR 0 2
54978: PUSH
54979: LD_INT 4
54981: PLUS
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: PUSH
54991: LD_VAR 0 1
54995: PUSH
54996: LD_INT 3
54998: PLUS
54999: PUSH
55000: LD_VAR 0 2
55004: PUSH
55005: LD_INT 3
55007: PLUS
55008: PUSH
55009: LD_INT 5
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: PUSH
55017: LD_VAR 0 1
55021: PUSH
55022: LD_INT 4
55024: PLUS
55025: PUSH
55026: LD_VAR 0 2
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: PUSH
55039: LD_VAR 0 1
55043: PUSH
55044: LD_VAR 0 2
55048: PUSH
55049: LD_INT 3
55051: MINUS
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: PUSH
55061: LD_VAR 0 1
55065: PUSH
55066: LD_INT 4
55068: MINUS
55069: PUSH
55070: LD_VAR 0 2
55074: PUSH
55075: LD_INT 4
55077: MINUS
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: ST_TO_ADDR
// end ; 5 :
55094: GO 55234
55096: LD_INT 5
55098: DOUBLE
55099: EQUAL
55100: IFTRUE 55104
55102: GO 55233
55104: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55105: LD_ADDR_VAR 0 5
55109: PUSH
55110: LD_VAR 0 1
55114: PUSH
55115: LD_INT 4
55117: MINUS
55118: PUSH
55119: LD_VAR 0 2
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: PUSH
55132: LD_VAR 0 1
55136: PUSH
55137: LD_VAR 0 2
55141: PUSH
55142: LD_INT 4
55144: MINUS
55145: PUSH
55146: LD_INT 3
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: LIST
55153: PUSH
55154: LD_VAR 0 1
55158: PUSH
55159: LD_INT 4
55161: PLUS
55162: PUSH
55163: LD_VAR 0 2
55167: PUSH
55168: LD_INT 4
55170: PLUS
55171: PUSH
55172: LD_INT 5
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: PUSH
55180: LD_VAR 0 1
55184: PUSH
55185: LD_INT 3
55187: PLUS
55188: PUSH
55189: LD_VAR 0 2
55193: PUSH
55194: LD_INT 4
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: PUSH
55202: LD_VAR 0 1
55206: PUSH
55207: LD_VAR 0 2
55211: PUSH
55212: LD_INT 3
55214: PLUS
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: ST_TO_ADDR
// end ; end ;
55231: GO 55234
55233: POP
// result := list ;
55234: LD_ADDR_VAR 0 4
55238: PUSH
55239: LD_VAR 0 5
55243: ST_TO_ADDR
// end ;
55244: LD_VAR 0 4
55248: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55249: LD_INT 0
55251: PPUSH
55252: PPUSH
55253: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55254: LD_VAR 0 1
55258: NOT
55259: PUSH
55260: LD_VAR 0 2
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: IN
55283: NOT
55284: OR
55285: IFFALSE 55289
// exit ;
55287: GO 55381
// tmp := [ ] ;
55289: LD_ADDR_VAR 0 5
55293: PUSH
55294: EMPTY
55295: ST_TO_ADDR
// for i in units do
55296: LD_ADDR_VAR 0 4
55300: PUSH
55301: LD_VAR 0 1
55305: PUSH
55306: FOR_IN
55307: IFFALSE 55350
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55309: LD_ADDR_VAR 0 5
55313: PUSH
55314: LD_VAR 0 5
55318: PPUSH
55319: LD_VAR 0 5
55323: PUSH
55324: LD_INT 1
55326: PLUS
55327: PPUSH
55328: LD_VAR 0 4
55332: PPUSH
55333: LD_VAR 0 2
55337: PPUSH
55338: CALL_OW 259
55342: PPUSH
55343: CALL_OW 2
55347: ST_TO_ADDR
55348: GO 55306
55350: POP
55351: POP
// if not tmp then
55352: LD_VAR 0 5
55356: NOT
55357: IFFALSE 55361
// exit ;
55359: GO 55381
// result := SortListByListDesc ( units , tmp ) ;
55361: LD_ADDR_VAR 0 3
55365: PUSH
55366: LD_VAR 0 1
55370: PPUSH
55371: LD_VAR 0 5
55375: PPUSH
55376: CALL_OW 77
55380: ST_TO_ADDR
// end ;
55381: LD_VAR 0 3
55385: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55386: LD_INT 0
55388: PPUSH
55389: PPUSH
55390: PPUSH
// result := false ;
55391: LD_ADDR_VAR 0 3
55395: PUSH
55396: LD_INT 0
55398: ST_TO_ADDR
// x := GetX ( building ) ;
55399: LD_ADDR_VAR 0 4
55403: PUSH
55404: LD_VAR 0 2
55408: PPUSH
55409: CALL_OW 250
55413: ST_TO_ADDR
// y := GetY ( building ) ;
55414: LD_ADDR_VAR 0 5
55418: PUSH
55419: LD_VAR 0 2
55423: PPUSH
55424: CALL_OW 251
55428: ST_TO_ADDR
// if not building or not x or not y then
55429: LD_VAR 0 2
55433: NOT
55434: PUSH
55435: LD_VAR 0 4
55439: NOT
55440: OR
55441: PUSH
55442: LD_VAR 0 5
55446: NOT
55447: OR
55448: IFFALSE 55452
// exit ;
55450: GO 55544
// if GetTaskList ( unit ) then
55452: LD_VAR 0 1
55456: PPUSH
55457: CALL_OW 437
55461: IFFALSE 55544
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55463: LD_STRING e
55465: PUSH
55466: LD_VAR 0 1
55470: PPUSH
55471: CALL_OW 437
55475: PUSH
55476: LD_INT 1
55478: ARRAY
55479: PUSH
55480: LD_INT 1
55482: ARRAY
55483: EQUAL
55484: PUSH
55485: LD_VAR 0 4
55489: PUSH
55490: LD_VAR 0 1
55494: PPUSH
55495: CALL_OW 437
55499: PUSH
55500: LD_INT 1
55502: ARRAY
55503: PUSH
55504: LD_INT 2
55506: ARRAY
55507: EQUAL
55508: AND
55509: PUSH
55510: LD_VAR 0 5
55514: PUSH
55515: LD_VAR 0 1
55519: PPUSH
55520: CALL_OW 437
55524: PUSH
55525: LD_INT 1
55527: ARRAY
55528: PUSH
55529: LD_INT 3
55531: ARRAY
55532: EQUAL
55533: AND
55534: IFFALSE 55544
// result := true end ;
55536: LD_ADDR_VAR 0 3
55540: PUSH
55541: LD_INT 1
55543: ST_TO_ADDR
// end ;
55544: LD_VAR 0 3
55548: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55549: LD_INT 0
55551: PPUSH
// result := false ;
55552: LD_ADDR_VAR 0 4
55556: PUSH
55557: LD_INT 0
55559: ST_TO_ADDR
// if GetTaskList ( unit ) then
55560: LD_VAR 0 1
55564: PPUSH
55565: CALL_OW 437
55569: IFFALSE 55652
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55571: LD_STRING M
55573: PUSH
55574: LD_VAR 0 1
55578: PPUSH
55579: CALL_OW 437
55583: PUSH
55584: LD_INT 1
55586: ARRAY
55587: PUSH
55588: LD_INT 1
55590: ARRAY
55591: EQUAL
55592: PUSH
55593: LD_VAR 0 2
55597: PUSH
55598: LD_VAR 0 1
55602: PPUSH
55603: CALL_OW 437
55607: PUSH
55608: LD_INT 1
55610: ARRAY
55611: PUSH
55612: LD_INT 2
55614: ARRAY
55615: EQUAL
55616: AND
55617: PUSH
55618: LD_VAR 0 3
55622: PUSH
55623: LD_VAR 0 1
55627: PPUSH
55628: CALL_OW 437
55632: PUSH
55633: LD_INT 1
55635: ARRAY
55636: PUSH
55637: LD_INT 3
55639: ARRAY
55640: EQUAL
55641: AND
55642: IFFALSE 55652
// result := true ;
55644: LD_ADDR_VAR 0 4
55648: PUSH
55649: LD_INT 1
55651: ST_TO_ADDR
// end ; end ;
55652: LD_VAR 0 4
55656: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55657: LD_INT 0
55659: PPUSH
55660: PPUSH
55661: PPUSH
55662: PPUSH
// if not unit or not area then
55663: LD_VAR 0 1
55667: NOT
55668: PUSH
55669: LD_VAR 0 2
55673: NOT
55674: OR
55675: IFFALSE 55679
// exit ;
55677: GO 55843
// tmp := AreaToList ( area , i ) ;
55679: LD_ADDR_VAR 0 6
55683: PUSH
55684: LD_VAR 0 2
55688: PPUSH
55689: LD_VAR 0 5
55693: PPUSH
55694: CALL_OW 517
55698: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55699: LD_ADDR_VAR 0 5
55703: PUSH
55704: DOUBLE
55705: LD_INT 1
55707: DEC
55708: ST_TO_ADDR
55709: LD_VAR 0 6
55713: PUSH
55714: LD_INT 1
55716: ARRAY
55717: PUSH
55718: FOR_TO
55719: IFFALSE 55841
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55721: LD_ADDR_VAR 0 7
55725: PUSH
55726: LD_VAR 0 6
55730: PUSH
55731: LD_INT 1
55733: ARRAY
55734: PUSH
55735: LD_VAR 0 5
55739: ARRAY
55740: PUSH
55741: LD_VAR 0 6
55745: PUSH
55746: LD_INT 2
55748: ARRAY
55749: PUSH
55750: LD_VAR 0 5
55754: ARRAY
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55760: LD_VAR 0 7
55764: PUSH
55765: LD_INT 1
55767: ARRAY
55768: PPUSH
55769: LD_VAR 0 7
55773: PUSH
55774: LD_INT 2
55776: ARRAY
55777: PPUSH
55778: CALL_OW 428
55782: PUSH
55783: LD_INT 0
55785: EQUAL
55786: IFFALSE 55839
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55788: LD_VAR 0 1
55792: PPUSH
55793: LD_VAR 0 7
55797: PUSH
55798: LD_INT 1
55800: ARRAY
55801: PPUSH
55802: LD_VAR 0 7
55806: PUSH
55807: LD_INT 2
55809: ARRAY
55810: PPUSH
55811: LD_VAR 0 3
55815: PPUSH
55816: CALL_OW 48
// result := IsPlaced ( unit ) ;
55820: LD_ADDR_VAR 0 4
55824: PUSH
55825: LD_VAR 0 1
55829: PPUSH
55830: CALL_OW 305
55834: ST_TO_ADDR
// exit ;
55835: POP
55836: POP
55837: GO 55843
// end ; end ;
55839: GO 55718
55841: POP
55842: POP
// end ;
55843: LD_VAR 0 4
55847: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55848: LD_INT 0
55850: PPUSH
55851: PPUSH
55852: PPUSH
// if not side or side > 8 then
55853: LD_VAR 0 1
55857: NOT
55858: PUSH
55859: LD_VAR 0 1
55863: PUSH
55864: LD_INT 8
55866: GREATER
55867: OR
55868: IFFALSE 55872
// exit ;
55870: GO 56059
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55872: LD_ADDR_VAR 0 4
55876: PUSH
55877: LD_INT 22
55879: PUSH
55880: LD_VAR 0 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 21
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PPUSH
55903: CALL_OW 69
55907: ST_TO_ADDR
// if not tmp then
55908: LD_VAR 0 4
55912: NOT
55913: IFFALSE 55917
// exit ;
55915: GO 56059
// enable_addtolog := true ;
55917: LD_ADDR_OWVAR 81
55921: PUSH
55922: LD_INT 1
55924: ST_TO_ADDR
// AddToLog ( [ ) ;
55925: LD_STRING [
55927: PPUSH
55928: CALL_OW 561
// for i in tmp do
55932: LD_ADDR_VAR 0 3
55936: PUSH
55937: LD_VAR 0 4
55941: PUSH
55942: FOR_IN
55943: IFFALSE 56050
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55945: LD_STRING [
55947: PUSH
55948: LD_VAR 0 3
55952: PPUSH
55953: CALL_OW 266
55957: STR
55958: PUSH
55959: LD_STRING , 
55961: STR
55962: PUSH
55963: LD_VAR 0 3
55967: PPUSH
55968: CALL_OW 250
55972: STR
55973: PUSH
55974: LD_STRING , 
55976: STR
55977: PUSH
55978: LD_VAR 0 3
55982: PPUSH
55983: CALL_OW 251
55987: STR
55988: PUSH
55989: LD_STRING , 
55991: STR
55992: PUSH
55993: LD_VAR 0 3
55997: PPUSH
55998: CALL_OW 254
56002: STR
56003: PUSH
56004: LD_STRING , 
56006: STR
56007: PUSH
56008: LD_VAR 0 3
56012: PPUSH
56013: LD_INT 1
56015: PPUSH
56016: CALL_OW 268
56020: STR
56021: PUSH
56022: LD_STRING , 
56024: STR
56025: PUSH
56026: LD_VAR 0 3
56030: PPUSH
56031: LD_INT 2
56033: PPUSH
56034: CALL_OW 268
56038: STR
56039: PUSH
56040: LD_STRING ],
56042: STR
56043: PPUSH
56044: CALL_OW 561
// end ;
56048: GO 55942
56050: POP
56051: POP
// AddToLog ( ]; ) ;
56052: LD_STRING ];
56054: PPUSH
56055: CALL_OW 561
// end ;
56059: LD_VAR 0 2
56063: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56064: LD_INT 0
56066: PPUSH
56067: PPUSH
56068: PPUSH
56069: PPUSH
56070: PPUSH
// if not area or not rate or not max then
56071: LD_VAR 0 1
56075: NOT
56076: PUSH
56077: LD_VAR 0 2
56081: NOT
56082: OR
56083: PUSH
56084: LD_VAR 0 4
56088: NOT
56089: OR
56090: IFFALSE 56094
// exit ;
56092: GO 56286
// while 1 do
56094: LD_INT 1
56096: IFFALSE 56286
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56098: LD_ADDR_VAR 0 9
56102: PUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: LD_INT 1
56110: PPUSH
56111: CALL_OW 287
56115: PUSH
56116: LD_INT 10
56118: MUL
56119: ST_TO_ADDR
// r := rate / 10 ;
56120: LD_ADDR_VAR 0 7
56124: PUSH
56125: LD_VAR 0 2
56129: PUSH
56130: LD_INT 10
56132: DIVREAL
56133: ST_TO_ADDR
// time := 1 1$00 ;
56134: LD_ADDR_VAR 0 8
56138: PUSH
56139: LD_INT 2100
56141: ST_TO_ADDR
// if amount < min then
56142: LD_VAR 0 9
56146: PUSH
56147: LD_VAR 0 3
56151: LESS
56152: IFFALSE 56170
// r := r * 2 else
56154: LD_ADDR_VAR 0 7
56158: PUSH
56159: LD_VAR 0 7
56163: PUSH
56164: LD_INT 2
56166: MUL
56167: ST_TO_ADDR
56168: GO 56196
// if amount > max then
56170: LD_VAR 0 9
56174: PUSH
56175: LD_VAR 0 4
56179: GREATER
56180: IFFALSE 56196
// r := r / 2 ;
56182: LD_ADDR_VAR 0 7
56186: PUSH
56187: LD_VAR 0 7
56191: PUSH
56192: LD_INT 2
56194: DIVREAL
56195: ST_TO_ADDR
// time := time / r ;
56196: LD_ADDR_VAR 0 8
56200: PUSH
56201: LD_VAR 0 8
56205: PUSH
56206: LD_VAR 0 7
56210: DIVREAL
56211: ST_TO_ADDR
// if time < 0 then
56212: LD_VAR 0 8
56216: PUSH
56217: LD_INT 0
56219: LESS
56220: IFFALSE 56237
// time := time * - 1 ;
56222: LD_ADDR_VAR 0 8
56226: PUSH
56227: LD_VAR 0 8
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: MUL
56236: ST_TO_ADDR
// wait ( time ) ;
56237: LD_VAR 0 8
56241: PPUSH
56242: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56246: LD_INT 35
56248: PPUSH
56249: LD_INT 875
56251: PPUSH
56252: CALL_OW 12
56256: PPUSH
56257: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56261: LD_INT 1
56263: PPUSH
56264: LD_INT 5
56266: PPUSH
56267: CALL_OW 12
56271: PPUSH
56272: LD_VAR 0 1
56276: PPUSH
56277: LD_INT 1
56279: PPUSH
56280: CALL_OW 55
// end ;
56284: GO 56094
// end ;
56286: LD_VAR 0 5
56290: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56291: LD_INT 0
56293: PPUSH
56294: PPUSH
56295: PPUSH
56296: PPUSH
56297: PPUSH
56298: PPUSH
56299: PPUSH
56300: PPUSH
// if not turrets or not factories then
56301: LD_VAR 0 1
56305: NOT
56306: PUSH
56307: LD_VAR 0 2
56311: NOT
56312: OR
56313: IFFALSE 56317
// exit ;
56315: GO 56624
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56317: LD_ADDR_VAR 0 10
56321: PUSH
56322: LD_INT 5
56324: PUSH
56325: LD_INT 6
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 24
56359: PUSH
56360: LD_INT 25
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 23
56369: PUSH
56370: LD_INT 27
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 42
56383: PUSH
56384: LD_INT 43
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 44
56393: PUSH
56394: LD_INT 46
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 45
56403: PUSH
56404: LD_INT 47
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// result := [ ] ;
56421: LD_ADDR_VAR 0 3
56425: PUSH
56426: EMPTY
56427: ST_TO_ADDR
// for i in turrets do
56428: LD_ADDR_VAR 0 4
56432: PUSH
56433: LD_VAR 0 1
56437: PUSH
56438: FOR_IN
56439: IFFALSE 56622
// begin nat := GetNation ( i ) ;
56441: LD_ADDR_VAR 0 7
56445: PUSH
56446: LD_VAR 0 4
56450: PPUSH
56451: CALL_OW 248
56455: ST_TO_ADDR
// weapon := 0 ;
56456: LD_ADDR_VAR 0 8
56460: PUSH
56461: LD_INT 0
56463: ST_TO_ADDR
// if not nat then
56464: LD_VAR 0 7
56468: NOT
56469: IFFALSE 56473
// continue ;
56471: GO 56438
// for j in list [ nat ] do
56473: LD_ADDR_VAR 0 5
56477: PUSH
56478: LD_VAR 0 10
56482: PUSH
56483: LD_VAR 0 7
56487: ARRAY
56488: PUSH
56489: FOR_IN
56490: IFFALSE 56531
// if GetBWeapon ( i ) = j [ 1 ] then
56492: LD_VAR 0 4
56496: PPUSH
56497: CALL_OW 269
56501: PUSH
56502: LD_VAR 0 5
56506: PUSH
56507: LD_INT 1
56509: ARRAY
56510: EQUAL
56511: IFFALSE 56529
// begin weapon := j [ 2 ] ;
56513: LD_ADDR_VAR 0 8
56517: PUSH
56518: LD_VAR 0 5
56522: PUSH
56523: LD_INT 2
56525: ARRAY
56526: ST_TO_ADDR
// break ;
56527: GO 56531
// end ;
56529: GO 56489
56531: POP
56532: POP
// if not weapon then
56533: LD_VAR 0 8
56537: NOT
56538: IFFALSE 56542
// continue ;
56540: GO 56438
// for k in factories do
56542: LD_ADDR_VAR 0 6
56546: PUSH
56547: LD_VAR 0 2
56551: PUSH
56552: FOR_IN
56553: IFFALSE 56618
// begin weapons := AvailableWeaponList ( k ) ;
56555: LD_ADDR_VAR 0 9
56559: PUSH
56560: LD_VAR 0 6
56564: PPUSH
56565: CALL_OW 478
56569: ST_TO_ADDR
// if not weapons then
56570: LD_VAR 0 9
56574: NOT
56575: IFFALSE 56579
// continue ;
56577: GO 56552
// if weapon in weapons then
56579: LD_VAR 0 8
56583: PUSH
56584: LD_VAR 0 9
56588: IN
56589: IFFALSE 56616
// begin result := [ i , weapon ] ;
56591: LD_ADDR_VAR 0 3
56595: PUSH
56596: LD_VAR 0 4
56600: PUSH
56601: LD_VAR 0 8
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// exit ;
56610: POP
56611: POP
56612: POP
56613: POP
56614: GO 56624
// end ; end ;
56616: GO 56552
56618: POP
56619: POP
// end ;
56620: GO 56438
56622: POP
56623: POP
// end ;
56624: LD_VAR 0 3
56628: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56629: LD_INT 0
56631: PPUSH
// if not side or side > 8 then
56632: LD_VAR 0 3
56636: NOT
56637: PUSH
56638: LD_VAR 0 3
56642: PUSH
56643: LD_INT 8
56645: GREATER
56646: OR
56647: IFFALSE 56651
// exit ;
56649: GO 56710
// if not range then
56651: LD_VAR 0 4
56655: NOT
56656: IFFALSE 56667
// range := - 12 ;
56658: LD_ADDR_VAR 0 4
56662: PUSH
56663: LD_INT 12
56665: NEG
56666: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56667: LD_VAR 0 1
56671: PPUSH
56672: LD_VAR 0 2
56676: PPUSH
56677: LD_VAR 0 3
56681: PPUSH
56682: LD_VAR 0 4
56686: PPUSH
56687: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56691: LD_VAR 0 1
56695: PPUSH
56696: LD_VAR 0 2
56700: PPUSH
56701: LD_VAR 0 3
56705: PPUSH
56706: CALL_OW 331
// end ;
56710: LD_VAR 0 5
56714: RET
// export function Video ( mode ) ; begin
56715: LD_INT 0
56717: PPUSH
// ingame_video = mode ;
56718: LD_ADDR_OWVAR 52
56722: PUSH
56723: LD_VAR 0 1
56727: ST_TO_ADDR
// interface_hidden = mode ;
56728: LD_ADDR_OWVAR 54
56732: PUSH
56733: LD_VAR 0 1
56737: ST_TO_ADDR
// end ;
56738: LD_VAR 0 2
56742: RET
// export function Join ( array , element ) ; begin
56743: LD_INT 0
56745: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56746: LD_ADDR_VAR 0 3
56750: PUSH
56751: LD_VAR 0 1
56755: PPUSH
56756: LD_VAR 0 1
56760: PUSH
56761: LD_INT 1
56763: PLUS
56764: PPUSH
56765: LD_VAR 0 2
56769: PPUSH
56770: CALL_OW 1
56774: ST_TO_ADDR
// end ;
56775: LD_VAR 0 3
56779: RET
// export function JoinUnion ( array , element ) ; begin
56780: LD_INT 0
56782: PPUSH
// result := array union element ;
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_VAR 0 1
56792: PUSH
56793: LD_VAR 0 2
56797: UNION
56798: ST_TO_ADDR
// end ;
56799: LD_VAR 0 3
56803: RET
// export function GetBehemoths ( side ) ; begin
56804: LD_INT 0
56806: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56807: LD_ADDR_VAR 0 2
56811: PUSH
56812: LD_INT 22
56814: PUSH
56815: LD_VAR 0 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 31
56826: PUSH
56827: LD_INT 25
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PPUSH
56838: CALL_OW 69
56842: ST_TO_ADDR
// end ;
56843: LD_VAR 0 2
56847: RET
// export function Shuffle ( array ) ; var i , index ; begin
56848: LD_INT 0
56850: PPUSH
56851: PPUSH
56852: PPUSH
// result := [ ] ;
56853: LD_ADDR_VAR 0 2
56857: PUSH
56858: EMPTY
56859: ST_TO_ADDR
// if not array then
56860: LD_VAR 0 1
56864: NOT
56865: IFFALSE 56869
// exit ;
56867: GO 56968
// Randomize ;
56869: CALL_OW 10
// for i = array downto 1 do
56873: LD_ADDR_VAR 0 3
56877: PUSH
56878: DOUBLE
56879: LD_VAR 0 1
56883: INC
56884: ST_TO_ADDR
56885: LD_INT 1
56887: PUSH
56888: FOR_DOWNTO
56889: IFFALSE 56966
// begin index := rand ( 1 , array ) ;
56891: LD_ADDR_VAR 0 4
56895: PUSH
56896: LD_INT 1
56898: PPUSH
56899: LD_VAR 0 1
56903: PPUSH
56904: CALL_OW 12
56908: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56909: LD_ADDR_VAR 0 2
56913: PUSH
56914: LD_VAR 0 2
56918: PPUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_INT 1
56926: PLUS
56927: PPUSH
56928: LD_VAR 0 1
56932: PUSH
56933: LD_VAR 0 4
56937: ARRAY
56938: PPUSH
56939: CALL_OW 2
56943: ST_TO_ADDR
// array := Delete ( array , index ) ;
56944: LD_ADDR_VAR 0 1
56948: PUSH
56949: LD_VAR 0 1
56953: PPUSH
56954: LD_VAR 0 4
56958: PPUSH
56959: CALL_OW 3
56963: ST_TO_ADDR
// end ;
56964: GO 56888
56966: POP
56967: POP
// end ;
56968: LD_VAR 0 2
56972: RET
// export function GetBaseMaterials ( base ) ; begin
56973: LD_INT 0
56975: PPUSH
// result := [ 0 , 0 , 0 ] ;
56976: LD_ADDR_VAR 0 2
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// if not base then
56995: LD_VAR 0 1
56999: NOT
57000: IFFALSE 57004
// exit ;
57002: GO 57053
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57004: LD_ADDR_VAR 0 2
57008: PUSH
57009: LD_VAR 0 1
57013: PPUSH
57014: LD_INT 1
57016: PPUSH
57017: CALL_OW 275
57021: PUSH
57022: LD_VAR 0 1
57026: PPUSH
57027: LD_INT 2
57029: PPUSH
57030: CALL_OW 275
57034: PUSH
57035: LD_VAR 0 1
57039: PPUSH
57040: LD_INT 3
57042: PPUSH
57043: CALL_OW 275
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// end ;
57053: LD_VAR 0 2
57057: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57058: LD_INT 0
57060: PPUSH
57061: PPUSH
// result := array ;
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 1
57071: ST_TO_ADDR
// if size > 0 then
57072: LD_VAR 0 2
57076: PUSH
57077: LD_INT 0
57079: GREATER
57080: IFFALSE 57126
// for i := array downto size do
57082: LD_ADDR_VAR 0 4
57086: PUSH
57087: DOUBLE
57088: LD_VAR 0 1
57092: INC
57093: ST_TO_ADDR
57094: LD_VAR 0 2
57098: PUSH
57099: FOR_DOWNTO
57100: IFFALSE 57124
// result := Delete ( result , result ) ;
57102: LD_ADDR_VAR 0 3
57106: PUSH
57107: LD_VAR 0 3
57111: PPUSH
57112: LD_VAR 0 3
57116: PPUSH
57117: CALL_OW 3
57121: ST_TO_ADDR
57122: GO 57099
57124: POP
57125: POP
// end ;
57126: LD_VAR 0 3
57130: RET
// export function ComExit ( unit ) ; var tmp ; begin
57131: LD_INT 0
57133: PPUSH
57134: PPUSH
// if not IsInUnit ( unit ) then
57135: LD_VAR 0 1
57139: PPUSH
57140: CALL_OW 310
57144: NOT
57145: IFFALSE 57149
// exit ;
57147: GO 57209
// tmp := IsInUnit ( unit ) ;
57149: LD_ADDR_VAR 0 3
57153: PUSH
57154: LD_VAR 0 1
57158: PPUSH
57159: CALL_OW 310
57163: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57164: LD_VAR 0 3
57168: PPUSH
57169: CALL_OW 247
57173: PUSH
57174: LD_INT 2
57176: EQUAL
57177: IFFALSE 57190
// ComExitVehicle ( unit ) else
57179: LD_VAR 0 1
57183: PPUSH
57184: CALL_OW 121
57188: GO 57199
// ComExitBuilding ( unit ) ;
57190: LD_VAR 0 1
57194: PPUSH
57195: CALL_OW 122
// result := tmp ;
57199: LD_ADDR_VAR 0 2
57203: PUSH
57204: LD_VAR 0 3
57208: ST_TO_ADDR
// end ;
57209: LD_VAR 0 2
57213: RET
// export function ComExitAll ( units ) ; var i ; begin
57214: LD_INT 0
57216: PPUSH
57217: PPUSH
// if not units then
57218: LD_VAR 0 1
57222: NOT
57223: IFFALSE 57227
// exit ;
57225: GO 57253
// for i in units do
57227: LD_ADDR_VAR 0 3
57231: PUSH
57232: LD_VAR 0 1
57236: PUSH
57237: FOR_IN
57238: IFFALSE 57251
// ComExit ( i ) ;
57240: LD_VAR 0 3
57244: PPUSH
57245: CALL 57131 0 1
57249: GO 57237
57251: POP
57252: POP
// end ;
57253: LD_VAR 0 2
57257: RET
// export function ResetHc ; begin
57258: LD_INT 0
57260: PPUSH
// InitHc ;
57261: CALL_OW 19
// hc_importance := 0 ;
57265: LD_ADDR_OWVAR 32
57269: PUSH
57270: LD_INT 0
57272: ST_TO_ADDR
// end ;
57273: LD_VAR 0 1
57277: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57278: LD_INT 0
57280: PPUSH
57281: PPUSH
57282: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57283: LD_ADDR_VAR 0 6
57287: PUSH
57288: LD_VAR 0 1
57292: PUSH
57293: LD_VAR 0 3
57297: PLUS
57298: PUSH
57299: LD_INT 2
57301: DIV
57302: ST_TO_ADDR
// if _x < 0 then
57303: LD_VAR 0 6
57307: PUSH
57308: LD_INT 0
57310: LESS
57311: IFFALSE 57328
// _x := _x * - 1 ;
57313: LD_ADDR_VAR 0 6
57317: PUSH
57318: LD_VAR 0 6
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: MUL
57327: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57328: LD_ADDR_VAR 0 7
57332: PUSH
57333: LD_VAR 0 2
57337: PUSH
57338: LD_VAR 0 4
57342: PLUS
57343: PUSH
57344: LD_INT 2
57346: DIV
57347: ST_TO_ADDR
// if _y < 0 then
57348: LD_VAR 0 7
57352: PUSH
57353: LD_INT 0
57355: LESS
57356: IFFALSE 57373
// _y := _y * - 1 ;
57358: LD_ADDR_VAR 0 7
57362: PUSH
57363: LD_VAR 0 7
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: MUL
57372: ST_TO_ADDR
// result := [ _x , _y ] ;
57373: LD_ADDR_VAR 0 5
57377: PUSH
57378: LD_VAR 0 6
57382: PUSH
57383: LD_VAR 0 7
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// end ;
57392: LD_VAR 0 5
57396: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57397: LD_INT 0
57399: PPUSH
57400: PPUSH
57401: PPUSH
57402: PPUSH
// task := GetTaskList ( unit ) ;
57403: LD_ADDR_VAR 0 7
57407: PUSH
57408: LD_VAR 0 1
57412: PPUSH
57413: CALL_OW 437
57417: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57418: LD_VAR 0 7
57422: NOT
57423: PUSH
57424: LD_VAR 0 1
57428: PPUSH
57429: LD_VAR 0 2
57433: PPUSH
57434: CALL_OW 308
57438: NOT
57439: AND
57440: IFFALSE 57444
// exit ;
57442: GO 57562
// if IsInArea ( unit , area ) then
57444: LD_VAR 0 1
57448: PPUSH
57449: LD_VAR 0 2
57453: PPUSH
57454: CALL_OW 308
57458: IFFALSE 57476
// begin ComMoveToArea ( unit , goAway ) ;
57460: LD_VAR 0 1
57464: PPUSH
57465: LD_VAR 0 3
57469: PPUSH
57470: CALL_OW 113
// exit ;
57474: GO 57562
// end ; if task [ 1 ] [ 1 ] <> M then
57476: LD_VAR 0 7
57480: PUSH
57481: LD_INT 1
57483: ARRAY
57484: PUSH
57485: LD_INT 1
57487: ARRAY
57488: PUSH
57489: LD_STRING M
57491: NONEQUAL
57492: IFFALSE 57496
// exit ;
57494: GO 57562
// x := task [ 1 ] [ 2 ] ;
57496: LD_ADDR_VAR 0 5
57500: PUSH
57501: LD_VAR 0 7
57505: PUSH
57506: LD_INT 1
57508: ARRAY
57509: PUSH
57510: LD_INT 2
57512: ARRAY
57513: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57514: LD_ADDR_VAR 0 6
57518: PUSH
57519: LD_VAR 0 7
57523: PUSH
57524: LD_INT 1
57526: ARRAY
57527: PUSH
57528: LD_INT 3
57530: ARRAY
57531: ST_TO_ADDR
// if InArea ( x , y , area ) then
57532: LD_VAR 0 5
57536: PPUSH
57537: LD_VAR 0 6
57541: PPUSH
57542: LD_VAR 0 2
57546: PPUSH
57547: CALL_OW 309
57551: IFFALSE 57562
// ComStop ( unit ) ;
57553: LD_VAR 0 1
57557: PPUSH
57558: CALL_OW 141
// end ;
57562: LD_VAR 0 4
57566: RET
// export function Abs ( value ) ; begin
57567: LD_INT 0
57569: PPUSH
// result := value ;
57570: LD_ADDR_VAR 0 2
57574: PUSH
57575: LD_VAR 0 1
57579: ST_TO_ADDR
// if value < 0 then
57580: LD_VAR 0 1
57584: PUSH
57585: LD_INT 0
57587: LESS
57588: IFFALSE 57605
// result := value * - 1 ;
57590: LD_ADDR_VAR 0 2
57594: PUSH
57595: LD_VAR 0 1
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: MUL
57604: ST_TO_ADDR
// end ;
57605: LD_VAR 0 2
57609: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57610: LD_INT 0
57612: PPUSH
57613: PPUSH
57614: PPUSH
57615: PPUSH
57616: PPUSH
57617: PPUSH
57618: PPUSH
57619: PPUSH
// if not unit or not building then
57620: LD_VAR 0 1
57624: NOT
57625: PUSH
57626: LD_VAR 0 2
57630: NOT
57631: OR
57632: IFFALSE 57636
// exit ;
57634: GO 57862
// x := GetX ( building ) ;
57636: LD_ADDR_VAR 0 4
57640: PUSH
57641: LD_VAR 0 2
57645: PPUSH
57646: CALL_OW 250
57650: ST_TO_ADDR
// y := GetY ( building ) ;
57651: LD_ADDR_VAR 0 6
57655: PUSH
57656: LD_VAR 0 2
57660: PPUSH
57661: CALL_OW 251
57665: ST_TO_ADDR
// d := GetDir ( building ) ;
57666: LD_ADDR_VAR 0 8
57670: PUSH
57671: LD_VAR 0 2
57675: PPUSH
57676: CALL_OW 254
57680: ST_TO_ADDR
// r := 4 ;
57681: LD_ADDR_VAR 0 9
57685: PUSH
57686: LD_INT 4
57688: ST_TO_ADDR
// for i := 1 to 5 do
57689: LD_ADDR_VAR 0 10
57693: PUSH
57694: DOUBLE
57695: LD_INT 1
57697: DEC
57698: ST_TO_ADDR
57699: LD_INT 5
57701: PUSH
57702: FOR_TO
57703: IFFALSE 57860
// begin _x := ShiftX ( x , d , r + i ) ;
57705: LD_ADDR_VAR 0 5
57709: PUSH
57710: LD_VAR 0 4
57714: PPUSH
57715: LD_VAR 0 8
57719: PPUSH
57720: LD_VAR 0 9
57724: PUSH
57725: LD_VAR 0 10
57729: PLUS
57730: PPUSH
57731: CALL_OW 272
57735: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57736: LD_ADDR_VAR 0 7
57740: PUSH
57741: LD_VAR 0 6
57745: PPUSH
57746: LD_VAR 0 8
57750: PPUSH
57751: LD_VAR 0 9
57755: PUSH
57756: LD_VAR 0 10
57760: PLUS
57761: PPUSH
57762: CALL_OW 273
57766: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57767: LD_VAR 0 5
57771: PPUSH
57772: LD_VAR 0 7
57776: PPUSH
57777: CALL_OW 488
57781: PUSH
57782: LD_VAR 0 5
57786: PPUSH
57787: LD_VAR 0 7
57791: PPUSH
57792: CALL_OW 428
57796: PPUSH
57797: CALL_OW 247
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: IN
57812: NOT
57813: AND
57814: IFFALSE 57858
// begin ComMoveXY ( unit , _x , _y ) ;
57816: LD_VAR 0 1
57820: PPUSH
57821: LD_VAR 0 5
57825: PPUSH
57826: LD_VAR 0 7
57830: PPUSH
57831: CALL_OW 111
// result := [ _x , _y ] ;
57835: LD_ADDR_VAR 0 3
57839: PUSH
57840: LD_VAR 0 5
57844: PUSH
57845: LD_VAR 0 7
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// exit ;
57854: POP
57855: POP
57856: GO 57862
// end ; end ;
57858: GO 57702
57860: POP
57861: POP
// end ;
57862: LD_VAR 0 3
57866: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57867: LD_INT 0
57869: PPUSH
57870: PPUSH
57871: PPUSH
// result := 0 ;
57872: LD_ADDR_VAR 0 3
57876: PUSH
57877: LD_INT 0
57879: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57880: LD_VAR 0 1
57884: PUSH
57885: LD_INT 0
57887: LESS
57888: PUSH
57889: LD_VAR 0 1
57893: PUSH
57894: LD_INT 8
57896: GREATER
57897: OR
57898: PUSH
57899: LD_VAR 0 2
57903: PUSH
57904: LD_INT 0
57906: LESS
57907: OR
57908: PUSH
57909: LD_VAR 0 2
57913: PUSH
57914: LD_INT 8
57916: GREATER
57917: OR
57918: IFFALSE 57922
// exit ;
57920: GO 57997
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57922: LD_ADDR_VAR 0 4
57926: PUSH
57927: LD_INT 22
57929: PUSH
57930: LD_VAR 0 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PPUSH
57939: CALL_OW 69
57943: PUSH
57944: FOR_IN
57945: IFFALSE 57995
// begin un := UnitShoot ( i ) ;
57947: LD_ADDR_VAR 0 5
57951: PUSH
57952: LD_VAR 0 4
57956: PPUSH
57957: CALL_OW 504
57961: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57962: LD_VAR 0 5
57966: PPUSH
57967: CALL_OW 255
57971: PUSH
57972: LD_VAR 0 1
57976: EQUAL
57977: IFFALSE 57993
// begin result := un ;
57979: LD_ADDR_VAR 0 3
57983: PUSH
57984: LD_VAR 0 5
57988: ST_TO_ADDR
// exit ;
57989: POP
57990: POP
57991: GO 57997
// end ; end ;
57993: GO 57944
57995: POP
57996: POP
// end ;
57997: LD_VAR 0 3
58001: RET
// export function GetCargoBay ( units ) ; begin
58002: LD_INT 0
58004: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58005: LD_ADDR_VAR 0 2
58009: PUSH
58010: LD_VAR 0 1
58014: PPUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 34
58020: PUSH
58021: LD_INT 12
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 34
58030: PUSH
58031: LD_INT 51
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 34
58040: PUSH
58041: LD_INT 32
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 34
58050: PUSH
58051: LD_EXP 78
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: PPUSH
58067: CALL_OW 72
58071: ST_TO_ADDR
// end ;
58072: LD_VAR 0 2
58076: RET
// export function Negate ( value ) ; begin
58077: LD_INT 0
58079: PPUSH
// result := not value ;
58080: LD_ADDR_VAR 0 2
58084: PUSH
58085: LD_VAR 0 1
58089: NOT
58090: ST_TO_ADDR
// end ;
58091: LD_VAR 0 2
58095: RET
// export function Inc ( value ) ; begin
58096: LD_INT 0
58098: PPUSH
// result := value + 1 ;
58099: LD_ADDR_VAR 0 2
58103: PUSH
58104: LD_VAR 0 1
58108: PUSH
58109: LD_INT 1
58111: PLUS
58112: ST_TO_ADDR
// end ;
58113: LD_VAR 0 2
58117: RET
// export function Dec ( value ) ; begin
58118: LD_INT 0
58120: PPUSH
// result := value - 1 ;
58121: LD_ADDR_VAR 0 2
58125: PUSH
58126: LD_VAR 0 1
58130: PUSH
58131: LD_INT 1
58133: MINUS
58134: ST_TO_ADDR
// end ;
58135: LD_VAR 0 2
58139: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58140: LD_INT 0
58142: PPUSH
58143: PPUSH
58144: PPUSH
58145: PPUSH
58146: PPUSH
58147: PPUSH
58148: PPUSH
58149: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58150: LD_VAR 0 1
58154: PPUSH
58155: LD_VAR 0 2
58159: PPUSH
58160: CALL_OW 488
58164: NOT
58165: PUSH
58166: LD_VAR 0 3
58170: PPUSH
58171: LD_VAR 0 4
58175: PPUSH
58176: CALL_OW 488
58180: NOT
58181: OR
58182: IFFALSE 58195
// begin result := - 1 ;
58184: LD_ADDR_VAR 0 5
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: ST_TO_ADDR
// exit ;
58193: GO 58430
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58195: LD_ADDR_VAR 0 12
58199: PUSH
58200: LD_VAR 0 1
58204: PPUSH
58205: LD_VAR 0 2
58209: PPUSH
58210: LD_VAR 0 3
58214: PPUSH
58215: LD_VAR 0 4
58219: PPUSH
58220: CALL 57278 0 4
58224: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58225: LD_ADDR_VAR 0 11
58229: PUSH
58230: LD_VAR 0 1
58234: PPUSH
58235: LD_VAR 0 2
58239: PPUSH
58240: LD_VAR 0 12
58244: PUSH
58245: LD_INT 1
58247: ARRAY
58248: PPUSH
58249: LD_VAR 0 12
58253: PUSH
58254: LD_INT 2
58256: ARRAY
58257: PPUSH
58258: CALL_OW 298
58262: ST_TO_ADDR
// distance := 9999 ;
58263: LD_ADDR_VAR 0 10
58267: PUSH
58268: LD_INT 9999
58270: ST_TO_ADDR
// for i := 0 to 5 do
58271: LD_ADDR_VAR 0 6
58275: PUSH
58276: DOUBLE
58277: LD_INT 0
58279: DEC
58280: ST_TO_ADDR
58281: LD_INT 5
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58428
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58287: LD_ADDR_VAR 0 7
58291: PUSH
58292: LD_VAR 0 1
58296: PPUSH
58297: LD_VAR 0 6
58301: PPUSH
58302: LD_VAR 0 11
58306: PPUSH
58307: CALL_OW 272
58311: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58312: LD_ADDR_VAR 0 8
58316: PUSH
58317: LD_VAR 0 2
58321: PPUSH
58322: LD_VAR 0 6
58326: PPUSH
58327: LD_VAR 0 11
58331: PPUSH
58332: CALL_OW 273
58336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58337: LD_VAR 0 7
58341: PPUSH
58342: LD_VAR 0 8
58346: PPUSH
58347: CALL_OW 488
58351: NOT
58352: IFFALSE 58356
// continue ;
58354: GO 58284
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58356: LD_ADDR_VAR 0 9
58360: PUSH
58361: LD_VAR 0 12
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PPUSH
58370: LD_VAR 0 12
58374: PUSH
58375: LD_INT 2
58377: ARRAY
58378: PPUSH
58379: LD_VAR 0 7
58383: PPUSH
58384: LD_VAR 0 8
58388: PPUSH
58389: CALL_OW 298
58393: ST_TO_ADDR
// if tmp < distance then
58394: LD_VAR 0 9
58398: PUSH
58399: LD_VAR 0 10
58403: LESS
58404: IFFALSE 58426
// begin result := i ;
58406: LD_ADDR_VAR 0 5
58410: PUSH
58411: LD_VAR 0 6
58415: ST_TO_ADDR
// distance := tmp ;
58416: LD_ADDR_VAR 0 10
58420: PUSH
58421: LD_VAR 0 9
58425: ST_TO_ADDR
// end ; end ;
58426: GO 58284
58428: POP
58429: POP
// end ;
58430: LD_VAR 0 5
58434: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58435: LD_INT 0
58437: PPUSH
58438: PPUSH
// if not driver or not IsInUnit ( driver ) then
58439: LD_VAR 0 1
58443: NOT
58444: PUSH
58445: LD_VAR 0 1
58449: PPUSH
58450: CALL_OW 310
58454: NOT
58455: OR
58456: IFFALSE 58460
// exit ;
58458: GO 58550
// vehicle := IsInUnit ( driver ) ;
58460: LD_ADDR_VAR 0 3
58464: PUSH
58465: LD_VAR 0 1
58469: PPUSH
58470: CALL_OW 310
58474: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58475: LD_VAR 0 1
58479: PPUSH
58480: LD_STRING \
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: PUSH
58510: LD_STRING E
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_VAR 0 3
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PPUSH
58546: CALL_OW 446
// end ;
58550: LD_VAR 0 2
58554: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58555: LD_INT 0
58557: PPUSH
58558: PPUSH
// if not driver or not IsInUnit ( driver ) then
58559: LD_VAR 0 1
58563: NOT
58564: PUSH
58565: LD_VAR 0 1
58569: PPUSH
58570: CALL_OW 310
58574: NOT
58575: OR
58576: IFFALSE 58580
// exit ;
58578: GO 58670
// vehicle := IsInUnit ( driver ) ;
58580: LD_ADDR_VAR 0 3
58584: PUSH
58585: LD_VAR 0 1
58589: PPUSH
58590: CALL_OW 310
58594: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58595: LD_VAR 0 1
58599: PPUSH
58600: LD_STRING \
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: PUSH
58630: LD_STRING E
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_VAR 0 3
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PPUSH
58666: CALL_OW 447
// end ;
58670: LD_VAR 0 2
58674: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58675: LD_INT 0
58677: PPUSH
58678: PPUSH
58679: PPUSH
// tmp := [ ] ;
58680: LD_ADDR_VAR 0 5
58684: PUSH
58685: EMPTY
58686: ST_TO_ADDR
// for i in units do
58687: LD_ADDR_VAR 0 4
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: FOR_IN
58698: IFFALSE 58736
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58700: LD_ADDR_VAR 0 5
58704: PUSH
58705: LD_VAR 0 5
58709: PPUSH
58710: LD_VAR 0 5
58714: PUSH
58715: LD_INT 1
58717: PLUS
58718: PPUSH
58719: LD_VAR 0 4
58723: PPUSH
58724: CALL_OW 256
58728: PPUSH
58729: CALL_OW 2
58733: ST_TO_ADDR
58734: GO 58697
58736: POP
58737: POP
// if not tmp then
58738: LD_VAR 0 5
58742: NOT
58743: IFFALSE 58747
// exit ;
58745: GO 58795
// if asc then
58747: LD_VAR 0 2
58751: IFFALSE 58775
// result := SortListByListAsc ( units , tmp ) else
58753: LD_ADDR_VAR 0 3
58757: PUSH
58758: LD_VAR 0 1
58762: PPUSH
58763: LD_VAR 0 5
58767: PPUSH
58768: CALL_OW 76
58772: ST_TO_ADDR
58773: GO 58795
// result := SortListByListDesc ( units , tmp ) ;
58775: LD_ADDR_VAR 0 3
58779: PUSH
58780: LD_VAR 0 1
58784: PPUSH
58785: LD_VAR 0 5
58789: PPUSH
58790: CALL_OW 77
58794: ST_TO_ADDR
// end ;
58795: LD_VAR 0 3
58799: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58800: LD_INT 0
58802: PPUSH
58803: PPUSH
// task := GetTaskList ( mech ) ;
58804: LD_ADDR_VAR 0 4
58808: PUSH
58809: LD_VAR 0 1
58813: PPUSH
58814: CALL_OW 437
58818: ST_TO_ADDR
// if not task then
58819: LD_VAR 0 4
58823: NOT
58824: IFFALSE 58828
// exit ;
58826: GO 58870
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58828: LD_ADDR_VAR 0 3
58832: PUSH
58833: LD_VAR 0 4
58837: PUSH
58838: LD_INT 1
58840: ARRAY
58841: PUSH
58842: LD_INT 1
58844: ARRAY
58845: PUSH
58846: LD_STRING r
58848: EQUAL
58849: PUSH
58850: LD_VAR 0 4
58854: PUSH
58855: LD_INT 1
58857: ARRAY
58858: PUSH
58859: LD_INT 4
58861: ARRAY
58862: PUSH
58863: LD_VAR 0 2
58867: EQUAL
58868: AND
58869: ST_TO_ADDR
// end ;
58870: LD_VAR 0 3
58874: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58875: LD_INT 0
58877: PPUSH
// SetDir ( unit , d ) ;
58878: LD_VAR 0 1
58882: PPUSH
58883: LD_VAR 0 4
58887: PPUSH
58888: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58892: LD_VAR 0 1
58896: PPUSH
58897: LD_VAR 0 2
58901: PPUSH
58902: LD_VAR 0 3
58906: PPUSH
58907: LD_VAR 0 5
58911: PPUSH
58912: CALL_OW 48
// end ;
58916: LD_VAR 0 6
58920: RET
// export function ToNaturalNumber ( number ) ; begin
58921: LD_INT 0
58923: PPUSH
// result := number div 1 ;
58924: LD_ADDR_VAR 0 2
58928: PUSH
58929: LD_VAR 0 1
58933: PUSH
58934: LD_INT 1
58936: DIV
58937: ST_TO_ADDR
// if number < 0 then
58938: LD_VAR 0 1
58942: PUSH
58943: LD_INT 0
58945: LESS
58946: IFFALSE 58956
// result := 0 ;
58948: LD_ADDR_VAR 0 2
58952: PUSH
58953: LD_INT 0
58955: ST_TO_ADDR
// end ;
58956: LD_VAR 0 2
58960: RET
// export function SortByClass ( units , class ) ; var un ; begin
58961: LD_INT 0
58963: PPUSH
58964: PPUSH
// if not units or not class then
58965: LD_VAR 0 1
58969: NOT
58970: PUSH
58971: LD_VAR 0 2
58975: NOT
58976: OR
58977: IFFALSE 58981
// exit ;
58979: GO 59076
// result := [ ] ;
58981: LD_ADDR_VAR 0 3
58985: PUSH
58986: EMPTY
58987: ST_TO_ADDR
// for un in units do
58988: LD_ADDR_VAR 0 4
58992: PUSH
58993: LD_VAR 0 1
58997: PUSH
58998: FOR_IN
58999: IFFALSE 59074
// if GetClass ( un ) = class then
59001: LD_VAR 0 4
59005: PPUSH
59006: CALL_OW 257
59010: PUSH
59011: LD_VAR 0 2
59015: EQUAL
59016: IFFALSE 59043
// result := Insert ( result , 1 , un ) else
59018: LD_ADDR_VAR 0 3
59022: PUSH
59023: LD_VAR 0 3
59027: PPUSH
59028: LD_INT 1
59030: PPUSH
59031: LD_VAR 0 4
59035: PPUSH
59036: CALL_OW 2
59040: ST_TO_ADDR
59041: GO 59072
// result := Replace ( result , result + 1 , un ) ;
59043: LD_ADDR_VAR 0 3
59047: PUSH
59048: LD_VAR 0 3
59052: PPUSH
59053: LD_VAR 0 3
59057: PUSH
59058: LD_INT 1
59060: PLUS
59061: PPUSH
59062: LD_VAR 0 4
59066: PPUSH
59067: CALL_OW 1
59071: ST_TO_ADDR
59072: GO 58998
59074: POP
59075: POP
// end ;
59076: LD_VAR 0 3
59080: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59081: LD_INT 0
59083: PPUSH
59084: PPUSH
59085: PPUSH
59086: PPUSH
59087: PPUSH
59088: PPUSH
59089: PPUSH
// result := [ ] ;
59090: LD_ADDR_VAR 0 4
59094: PUSH
59095: EMPTY
59096: ST_TO_ADDR
// if x - r < 0 then
59097: LD_VAR 0 1
59101: PUSH
59102: LD_VAR 0 3
59106: MINUS
59107: PUSH
59108: LD_INT 0
59110: LESS
59111: IFFALSE 59123
// min_x := 0 else
59113: LD_ADDR_VAR 0 8
59117: PUSH
59118: LD_INT 0
59120: ST_TO_ADDR
59121: GO 59139
// min_x := x - r ;
59123: LD_ADDR_VAR 0 8
59127: PUSH
59128: LD_VAR 0 1
59132: PUSH
59133: LD_VAR 0 3
59137: MINUS
59138: ST_TO_ADDR
// if y - r < 0 then
59139: LD_VAR 0 2
59143: PUSH
59144: LD_VAR 0 3
59148: MINUS
59149: PUSH
59150: LD_INT 0
59152: LESS
59153: IFFALSE 59165
// min_y := 0 else
59155: LD_ADDR_VAR 0 7
59159: PUSH
59160: LD_INT 0
59162: ST_TO_ADDR
59163: GO 59181
// min_y := y - r ;
59165: LD_ADDR_VAR 0 7
59169: PUSH
59170: LD_VAR 0 2
59174: PUSH
59175: LD_VAR 0 3
59179: MINUS
59180: ST_TO_ADDR
// max_x := x + r ;
59181: LD_ADDR_VAR 0 9
59185: PUSH
59186: LD_VAR 0 1
59190: PUSH
59191: LD_VAR 0 3
59195: PLUS
59196: ST_TO_ADDR
// max_y := y + r ;
59197: LD_ADDR_VAR 0 10
59201: PUSH
59202: LD_VAR 0 2
59206: PUSH
59207: LD_VAR 0 3
59211: PLUS
59212: ST_TO_ADDR
// for _x = min_x to max_x do
59213: LD_ADDR_VAR 0 5
59217: PUSH
59218: DOUBLE
59219: LD_VAR 0 8
59223: DEC
59224: ST_TO_ADDR
59225: LD_VAR 0 9
59229: PUSH
59230: FOR_TO
59231: IFFALSE 59332
// for _y = min_y to max_y do
59233: LD_ADDR_VAR 0 6
59237: PUSH
59238: DOUBLE
59239: LD_VAR 0 7
59243: DEC
59244: ST_TO_ADDR
59245: LD_VAR 0 10
59249: PUSH
59250: FOR_TO
59251: IFFALSE 59328
// begin if not ValidHex ( _x , _y ) then
59253: LD_VAR 0 5
59257: PPUSH
59258: LD_VAR 0 6
59262: PPUSH
59263: CALL_OW 488
59267: NOT
59268: IFFALSE 59272
// continue ;
59270: GO 59250
// if GetResourceTypeXY ( _x , _y ) then
59272: LD_VAR 0 5
59276: PPUSH
59277: LD_VAR 0 6
59281: PPUSH
59282: CALL_OW 283
59286: IFFALSE 59326
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59288: LD_ADDR_VAR 0 4
59292: PUSH
59293: LD_VAR 0 4
59297: PPUSH
59298: LD_VAR 0 4
59302: PUSH
59303: LD_INT 1
59305: PLUS
59306: PPUSH
59307: LD_VAR 0 5
59311: PUSH
59312: LD_VAR 0 6
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PPUSH
59321: CALL_OW 1
59325: ST_TO_ADDR
// end ;
59326: GO 59250
59328: POP
59329: POP
59330: GO 59230
59332: POP
59333: POP
// end ;
59334: LD_VAR 0 4
59338: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59339: LD_INT 0
59341: PPUSH
59342: PPUSH
59343: PPUSH
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
59348: PPUSH
// if not units then
59349: LD_VAR 0 1
59353: NOT
59354: IFFALSE 59358
// exit ;
59356: GO 59783
// result := UnitFilter ( units , [ f_ok ] ) ;
59358: LD_ADDR_VAR 0 3
59362: PUSH
59363: LD_VAR 0 1
59367: PPUSH
59368: LD_INT 50
59370: PUSH
59371: EMPTY
59372: LIST
59373: PPUSH
59374: CALL_OW 72
59378: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59379: LD_ADDR_VAR 0 8
59383: PUSH
59384: LD_VAR 0 1
59388: PUSH
59389: LD_INT 1
59391: ARRAY
59392: PPUSH
59393: CALL_OW 255
59397: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
59398: LD_ADDR_VAR 0 10
59402: PUSH
59403: LD_INT 29
59405: PUSH
59406: LD_EXP 81
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// if not result then
59415: LD_VAR 0 3
59419: NOT
59420: IFFALSE 59424
// exit ;
59422: GO 59783
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59424: LD_ADDR_VAR 0 5
59428: PUSH
59429: LD_INT 81
59431: PUSH
59432: LD_VAR 0 8
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PPUSH
59441: CALL_OW 69
59445: ST_TO_ADDR
// for i in result do
59446: LD_ADDR_VAR 0 4
59450: PUSH
59451: LD_VAR 0 3
59455: PUSH
59456: FOR_IN
59457: IFFALSE 59781
// begin tag := GetTag ( i ) + 1 ;
59459: LD_ADDR_VAR 0 9
59463: PUSH
59464: LD_VAR 0 4
59468: PPUSH
59469: CALL_OW 110
59473: PUSH
59474: LD_INT 1
59476: PLUS
59477: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59478: LD_ADDR_VAR 0 7
59482: PUSH
59483: LD_VAR 0 4
59487: PPUSH
59488: CALL_OW 250
59492: PPUSH
59493: LD_VAR 0 4
59497: PPUSH
59498: CALL_OW 251
59502: PPUSH
59503: LD_INT 6
59505: PPUSH
59506: CALL 59081 0 3
59510: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
59511: LD_VAR 0 7
59515: PUSH
59516: LD_VAR 0 4
59520: PPUSH
59521: CALL_OW 264
59525: PUSH
59526: LD_VAR 0 10
59530: IN
59531: NOT
59532: AND
59533: IFFALSE 59572
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59535: LD_VAR 0 4
59539: PPUSH
59540: LD_VAR 0 7
59544: PUSH
59545: LD_INT 1
59547: ARRAY
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PPUSH
59553: LD_VAR 0 7
59557: PUSH
59558: LD_INT 1
59560: ARRAY
59561: PUSH
59562: LD_INT 2
59564: ARRAY
59565: PPUSH
59566: CALL_OW 116
59570: GO 59779
// if path > tag then
59572: LD_VAR 0 2
59576: PUSH
59577: LD_VAR 0 9
59581: GREATER
59582: IFFALSE 59749
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
59584: LD_ADDR_VAR 0 6
59588: PUSH
59589: LD_VAR 0 5
59593: PPUSH
59594: LD_INT 91
59596: PUSH
59597: LD_VAR 0 4
59601: PUSH
59602: LD_INT 12
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: PPUSH
59610: CALL_OW 72
59614: ST_TO_ADDR
// if nearEnemy then
59615: LD_VAR 0 6
59619: IFFALSE 59647
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59621: LD_VAR 0 4
59625: PPUSH
59626: LD_VAR 0 6
59630: PPUSH
59631: LD_VAR 0 4
59635: PPUSH
59636: CALL_OW 74
59640: PPUSH
59641: CALL_OW 115
59645: GO 59747
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59647: LD_VAR 0 4
59651: PPUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_VAR 0 9
59661: ARRAY
59662: PUSH
59663: LD_INT 1
59665: ARRAY
59666: PPUSH
59667: LD_VAR 0 2
59671: PUSH
59672: LD_VAR 0 9
59676: ARRAY
59677: PUSH
59678: LD_INT 2
59680: ARRAY
59681: PPUSH
59682: CALL_OW 297
59686: PUSH
59687: LD_INT 6
59689: GREATER
59690: IFFALSE 59733
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59692: LD_VAR 0 4
59696: PPUSH
59697: LD_VAR 0 2
59701: PUSH
59702: LD_VAR 0 9
59706: ARRAY
59707: PUSH
59708: LD_INT 1
59710: ARRAY
59711: PPUSH
59712: LD_VAR 0 2
59716: PUSH
59717: LD_VAR 0 9
59721: ARRAY
59722: PUSH
59723: LD_INT 2
59725: ARRAY
59726: PPUSH
59727: CALL_OW 114
59731: GO 59747
// SetTag ( i , tag ) ;
59733: LD_VAR 0 4
59737: PPUSH
59738: LD_VAR 0 9
59742: PPUSH
59743: CALL_OW 109
// end else
59747: GO 59779
// if enemy then
59749: LD_VAR 0 5
59753: IFFALSE 59779
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59755: LD_VAR 0 4
59759: PPUSH
59760: LD_VAR 0 5
59764: PPUSH
59765: LD_VAR 0 4
59769: PPUSH
59770: CALL_OW 74
59774: PPUSH
59775: CALL_OW 115
// end ;
59779: GO 59456
59781: POP
59782: POP
// end ;
59783: LD_VAR 0 3
59787: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59788: LD_INT 0
59790: PPUSH
59791: PPUSH
59792: PPUSH
// if not unit or IsInUnit ( unit ) then
59793: LD_VAR 0 1
59797: NOT
59798: PUSH
59799: LD_VAR 0 1
59803: PPUSH
59804: CALL_OW 310
59808: OR
59809: IFFALSE 59813
// exit ;
59811: GO 59904
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59813: LD_ADDR_VAR 0 4
59817: PUSH
59818: LD_VAR 0 1
59822: PPUSH
59823: CALL_OW 250
59827: PPUSH
59828: LD_VAR 0 2
59832: PPUSH
59833: LD_INT 1
59835: PPUSH
59836: CALL_OW 272
59840: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59841: LD_ADDR_VAR 0 5
59845: PUSH
59846: LD_VAR 0 1
59850: PPUSH
59851: CALL_OW 251
59855: PPUSH
59856: LD_VAR 0 2
59860: PPUSH
59861: LD_INT 1
59863: PPUSH
59864: CALL_OW 273
59868: ST_TO_ADDR
// if ValidHex ( x , y ) then
59869: LD_VAR 0 4
59873: PPUSH
59874: LD_VAR 0 5
59878: PPUSH
59879: CALL_OW 488
59883: IFFALSE 59904
// ComTurnXY ( unit , x , y ) ;
59885: LD_VAR 0 1
59889: PPUSH
59890: LD_VAR 0 4
59894: PPUSH
59895: LD_VAR 0 5
59899: PPUSH
59900: CALL_OW 118
// end ;
59904: LD_VAR 0 3
59908: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59909: LD_INT 0
59911: PPUSH
59912: PPUSH
// result := false ;
59913: LD_ADDR_VAR 0 3
59917: PUSH
59918: LD_INT 0
59920: ST_TO_ADDR
// if not units then
59921: LD_VAR 0 2
59925: NOT
59926: IFFALSE 59930
// exit ;
59928: GO 59975
// for i in units do
59930: LD_ADDR_VAR 0 4
59934: PUSH
59935: LD_VAR 0 2
59939: PUSH
59940: FOR_IN
59941: IFFALSE 59973
// if See ( side , i ) then
59943: LD_VAR 0 1
59947: PPUSH
59948: LD_VAR 0 4
59952: PPUSH
59953: CALL_OW 292
59957: IFFALSE 59971
// begin result := true ;
59959: LD_ADDR_VAR 0 3
59963: PUSH
59964: LD_INT 1
59966: ST_TO_ADDR
// exit ;
59967: POP
59968: POP
59969: GO 59975
// end ;
59971: GO 59940
59973: POP
59974: POP
// end ;
59975: LD_VAR 0 3
59979: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59980: LD_INT 0
59982: PPUSH
59983: PPUSH
59984: PPUSH
59985: PPUSH
// if not unit or not points then
59986: LD_VAR 0 1
59990: NOT
59991: PUSH
59992: LD_VAR 0 2
59996: NOT
59997: OR
59998: IFFALSE 60002
// exit ;
60000: GO 60092
// dist := 99999 ;
60002: LD_ADDR_VAR 0 5
60006: PUSH
60007: LD_INT 99999
60009: ST_TO_ADDR
// for i in points do
60010: LD_ADDR_VAR 0 4
60014: PUSH
60015: LD_VAR 0 2
60019: PUSH
60020: FOR_IN
60021: IFFALSE 60090
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60023: LD_ADDR_VAR 0 6
60027: PUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: LD_VAR 0 4
60037: PUSH
60038: LD_INT 1
60040: ARRAY
60041: PPUSH
60042: LD_VAR 0 4
60046: PUSH
60047: LD_INT 2
60049: ARRAY
60050: PPUSH
60051: CALL_OW 297
60055: ST_TO_ADDR
// if tmpDist < dist then
60056: LD_VAR 0 6
60060: PUSH
60061: LD_VAR 0 5
60065: LESS
60066: IFFALSE 60088
// begin result := i ;
60068: LD_ADDR_VAR 0 3
60072: PUSH
60073: LD_VAR 0 4
60077: ST_TO_ADDR
// dist := tmpDist ;
60078: LD_ADDR_VAR 0 5
60082: PUSH
60083: LD_VAR 0 6
60087: ST_TO_ADDR
// end ; end ;
60088: GO 60020
60090: POP
60091: POP
// end ; end_of_file
60092: LD_VAR 0 3
60096: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60097: LD_VAR 0 1
60101: PPUSH
60102: LD_VAR 0 2
60106: PPUSH
60107: LD_VAR 0 3
60111: PPUSH
60112: LD_VAR 0 4
60116: PPUSH
60117: LD_VAR 0 5
60121: PPUSH
60122: LD_VAR 0 6
60126: PPUSH
60127: CALL 1885 0 6
// end ;
60131: PPOPN 6
60133: END
