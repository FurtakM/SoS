// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1216
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1214
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1214
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: PUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 428
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1214
// ComMoveXY ( hunters [ i ] , x , y ) ;
1189: LD_EXP 6
1193: PUSH
1194: LD_VAR 0 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 111
// end ; end ; end ;
1214: GO 876
1216: POP
1217: POP
// end ; end_of_file
1218: PPOPN 5
1220: END
// on UnitGoesToRed ( un ) do var i ;
1221: LD_INT 0
1223: PPUSH
// begin if GetSide ( un ) = 1 then
1224: LD_VAR 0 1
1228: PPUSH
1229: CALL_OW 255
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1246
// YouLost ( hunt2 ) ;
1239: LD_STRING hunt2
1241: PPUSH
1242: CALL_OW 104
// if GetSide ( un ) > 1 then
1246: LD_VAR 0 1
1250: PPUSH
1251: CALL_OW 255
1255: PUSH
1256: LD_INT 1
1258: GREATER
1259: IFFALSE 1312
// begin for i := 1 to 6 do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_INT 6
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1298
// begin wait ( 0 0$1 ) ;
1277: LD_INT 35
1279: PPUSH
1280: CALL_OW 67
// SetLives ( un , 249 ) ;
1284: LD_VAR 0 1
1288: PPUSH
1289: LD_INT 249
1291: PPUSH
1292: CALL_OW 234
// end ;
1296: GO 1274
1298: POP
1299: POP
// SetLives ( un , 1000 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 1000
1307: PPUSH
1308: CALL_OW 234
// end ; end ;
1312: PPOPN 2
1314: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1315: LD_VAR 0 1
1319: PUSH
1320: LD_INT 1
1322: EQUAL
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: GREATER
1332: AND
1333: IFFALSE 1342
// YouLost ( hunt1 ) ;
1335: LD_STRING hunt1
1337: PPUSH
1338: CALL_OW 104
// end ;
1342: PPOPN 2
1344: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1345: LD_INT 0
1347: PPUSH
// begin point := 0 ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1356: LD_VAR 0 1
1360: PPUSH
1361: CALL_OW 257
1365: PUSH
1366: LD_INT 20
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1385
1374: POP
// point := 10 ; class_horse :
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_INT 10
1382: ST_TO_ADDR
1383: GO 1519
1385: LD_INT 21
1387: DOUBLE
1388: EQUAL
1389: IFTRUE 1393
1391: GO 1404
1393: POP
// point := 10 ; class_baggie :
1394: LD_ADDR_VAR 0 4
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
1402: GO 1519
1404: LD_INT 13
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1423
1412: POP
// point := 5 ; class_phororhacos :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 5
1420: ST_TO_ADDR
1421: GO 1519
1423: LD_INT 18
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1442
1431: POP
// point := 10 ; class_tiger :
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: LD_INT 10
1439: ST_TO_ADDR
1440: GO 1519
1442: LD_INT 14
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1461
1450: POP
// point := 20 ; class_apeman :
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_INT 20
1458: ST_TO_ADDR
1459: GO 1519
1461: LD_INT 12
1463: DOUBLE
1464: EQUAL
1465: IFTRUE 1469
1467: GO 1480
1469: POP
// point := 30 ; class_apeman_soldier :
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 30
1477: ST_TO_ADDR
1478: GO 1519
1480: LD_INT 15
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// point := 50 ; class_frog :
1489: LD_ADDR_VAR 0 4
1493: PUSH
1494: LD_INT 50
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 19
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// point := 10 ; end ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_INT 10
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// if point then
1519: LD_VAR 0 4
1523: IFFALSE 1562
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1525: LD_ADDR_EXP 5
1529: PUSH
1530: LD_EXP 5
1534: PPUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_EXP 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_VAR 0 4
1555: PLUS
1556: PPUSH
1557: CALL_OW 1
1561: ST_TO_ADDR
// end ;
1562: PPOPN 4
1564: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1565: LD_INT 22
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: PUSH
1580: LD_INT 10
1582: LESS
1583: IFFALSE 1685
1585: GO 1587
1587: DISABLE
// begin enable ;
1588: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1589: LD_INT 2
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 12
1605: PUSH
1606: LD_INT 0
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: PUSH
1617: LD_INT 0
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: CALL_OW 12
1627: PUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: PUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 12
1649: PUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 12
1660: PUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL 387 0 3
// end ;
1685: END
// every 0 0$1 do var i ;
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
// begin enable ;
1692: ENABLE
// display_strings := [ ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// for i := 1 to huntersAmount do
1700: LD_ADDR_VAR 0 1
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_EXP 3
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1850
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_OWVAR 47
1727: PUSH
1728: LD_STRING #player
1730: PUSH
1731: LD_VAR 0 1
1735: STR
1736: PUSH
1737: LD_VAR 0 1
1741: PUSH
1742: LD_EXP 5
1746: PUSH
1747: LD_VAR 0 1
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: ADD
1758: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1759: LD_EXP 5
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PUSH
1770: LD_INT 750
1772: PUSH
1773: LD_INT 1250
1775: PUSH
1776: LD_INT 2000
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_OWVAR 67
1788: ARRAY
1789: GREATEREQUAL
1790: IFFALSE 1848
// begin if i = 1 then
1792: LD_VAR 0 1
1796: PUSH
1797: LD_INT 1
1799: EQUAL
1800: IFFALSE 1841
// begin DialogueOn ;
1802: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1806: LD_STRING ACH_HUNT
1808: PPUSH
1809: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1813: LD_ADDR_OWVAR 47
1817: PUSH
1818: LD_STRING #hunting-win
1820: PUSH
1821: EMPTY
1822: LIST
1823: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1824: LD_INT 175
1826: PPUSH
1827: CALL_OW 68
// YouWin ;
1831: CALL_OW 103
// DialogueOff ;
1835: CALL_OW 7
// end else
1839: GO 1848
// YouLost ( hunt3 ) ;
1841: LD_STRING hunt3
1843: PPUSH
1844: CALL_OW 104
// end ; end ;
1848: GO 1715
1850: POP
1851: POP
// end ; end_of_file end_of_file
1852: PPOPN 1
1854: END
// every 0 0$1 do
1855: GO 1857
1857: DISABLE
// begin enable ;
1858: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1859: LD_STRING updateTimer(
1861: PUSH
1862: LD_OWVAR 1
1866: STR
1867: PUSH
1868: LD_STRING );
1870: STR
1871: PPUSH
1872: CALL_OW 559
// end ;
1876: END
// export function SOS_MapStart ( ) ; begin
1877: LD_INT 0
1879: PPUSH
// if streamModeActive then
1880: LD_EXP 8
1884: IFFALSE 1893
// DefineStreamItems ( true ) ;
1886: LD_INT 1
1888: PPUSH
1889: CALL 3697 0 1
// UpdateLuaVariables ( ) ;
1893: CALL 1910 0 0
// UpdateFactoryWaypoints ( ) ;
1897: CALL 16558 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1901: CALL 16815 0 0
// end ;
1905: LD_VAR 0 1
1909: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
1910: LD_INT 0
1912: PPUSH
// if not globalGameSaveCounter then
1913: LD_EXP 7
1917: NOT
1918: IFFALSE 1929
// ToLua ( setGameSaveCounter(0) ) else
1920: LD_STRING setGameSaveCounter(0)
1922: PPUSH
1923: CALL_OW 559
1927: GO 1961
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1929: LD_ADDR_EXP 7
1933: PUSH
1934: LD_EXP 7
1938: PPUSH
1939: CALL 60935 0 1
1943: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1944: LD_STRING setGameSaveCounter(
1946: PUSH
1947: LD_EXP 7
1951: STR
1952: PUSH
1953: LD_STRING )
1955: STR
1956: PPUSH
1957: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1961: LD_STRING setGameDifficulty(
1963: PUSH
1964: LD_OWVAR 67
1968: STR
1969: PUSH
1970: LD_STRING )
1972: STR
1973: PPUSH
1974: CALL_OW 559
// end ;
1978: LD_VAR 0 1
1982: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1983: LD_INT 0
1985: PPUSH
// if p2 = stream_mode then
1986: LD_VAR 0 2
1990: PUSH
1991: LD_INT 100
1993: EQUAL
1994: IFFALSE 2997
// begin if not StreamModeActive then
1996: LD_EXP 8
2000: NOT
2001: IFFALSE 2011
// StreamModeActive := true ;
2003: LD_ADDR_EXP 8
2007: PUSH
2008: LD_INT 1
2010: ST_TO_ADDR
// if p3 = 0 then
2011: LD_VAR 0 3
2015: PUSH
2016: LD_INT 0
2018: EQUAL
2019: IFFALSE 2025
// InitStreamMode ;
2021: CALL 3233 0 0
// if p3 = 1 then
2025: LD_VAR 0 3
2029: PUSH
2030: LD_INT 1
2032: EQUAL
2033: IFFALSE 2043
// sRocket := true ;
2035: LD_ADDR_EXP 13
2039: PUSH
2040: LD_INT 1
2042: ST_TO_ADDR
// if p3 = 2 then
2043: LD_VAR 0 3
2047: PUSH
2048: LD_INT 2
2050: EQUAL
2051: IFFALSE 2061
// sSpeed := true ;
2053: LD_ADDR_EXP 12
2057: PUSH
2058: LD_INT 1
2060: ST_TO_ADDR
// if p3 = 3 then
2061: LD_VAR 0 3
2065: PUSH
2066: LD_INT 3
2068: EQUAL
2069: IFFALSE 2079
// sEngine := true ;
2071: LD_ADDR_EXP 14
2075: PUSH
2076: LD_INT 1
2078: ST_TO_ADDR
// if p3 = 4 then
2079: LD_VAR 0 3
2083: PUSH
2084: LD_INT 4
2086: EQUAL
2087: IFFALSE 2097
// sSpec := true ;
2089: LD_ADDR_EXP 11
2093: PUSH
2094: LD_INT 1
2096: ST_TO_ADDR
// if p3 = 5 then
2097: LD_VAR 0 3
2101: PUSH
2102: LD_INT 5
2104: EQUAL
2105: IFFALSE 2115
// sLevel := true ;
2107: LD_ADDR_EXP 15
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// if p3 = 6 then
2115: LD_VAR 0 3
2119: PUSH
2120: LD_INT 6
2122: EQUAL
2123: IFFALSE 2133
// sArmoury := true ;
2125: LD_ADDR_EXP 16
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// if p3 = 7 then
2133: LD_VAR 0 3
2137: PUSH
2138: LD_INT 7
2140: EQUAL
2141: IFFALSE 2151
// sRadar := true ;
2143: LD_ADDR_EXP 17
2147: PUSH
2148: LD_INT 1
2150: ST_TO_ADDR
// if p3 = 8 then
2151: LD_VAR 0 3
2155: PUSH
2156: LD_INT 8
2158: EQUAL
2159: IFFALSE 2169
// sBunker := true ;
2161: LD_ADDR_EXP 18
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// if p3 = 9 then
2169: LD_VAR 0 3
2173: PUSH
2174: LD_INT 9
2176: EQUAL
2177: IFFALSE 2187
// sHack := true ;
2179: LD_ADDR_EXP 19
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// if p3 = 10 then
2187: LD_VAR 0 3
2191: PUSH
2192: LD_INT 10
2194: EQUAL
2195: IFFALSE 2205
// sFire := true ;
2197: LD_ADDR_EXP 20
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// if p3 = 11 then
2205: LD_VAR 0 3
2209: PUSH
2210: LD_INT 11
2212: EQUAL
2213: IFFALSE 2223
// sRefresh := true ;
2215: LD_ADDR_EXP 21
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// if p3 = 12 then
2223: LD_VAR 0 3
2227: PUSH
2228: LD_INT 12
2230: EQUAL
2231: IFFALSE 2241
// sExp := true ;
2233: LD_ADDR_EXP 22
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// if p3 = 13 then
2241: LD_VAR 0 3
2245: PUSH
2246: LD_INT 13
2248: EQUAL
2249: IFFALSE 2259
// sDepot := true ;
2251: LD_ADDR_EXP 23
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// if p3 = 14 then
2259: LD_VAR 0 3
2263: PUSH
2264: LD_INT 14
2266: EQUAL
2267: IFFALSE 2277
// sFlag := true ;
2269: LD_ADDR_EXP 24
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// if p3 = 15 then
2277: LD_VAR 0 3
2281: PUSH
2282: LD_INT 15
2284: EQUAL
2285: IFFALSE 2295
// sKamikadze := true ;
2287: LD_ADDR_EXP 32
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// if p3 = 16 then
2295: LD_VAR 0 3
2299: PUSH
2300: LD_INT 16
2302: EQUAL
2303: IFFALSE 2313
// sTroll := true ;
2305: LD_ADDR_EXP 33
2309: PUSH
2310: LD_INT 1
2312: ST_TO_ADDR
// if p3 = 17 then
2313: LD_VAR 0 3
2317: PUSH
2318: LD_INT 17
2320: EQUAL
2321: IFFALSE 2331
// sSlow := true ;
2323: LD_ADDR_EXP 34
2327: PUSH
2328: LD_INT 1
2330: ST_TO_ADDR
// if p3 = 18 then
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 18
2338: EQUAL
2339: IFFALSE 2349
// sLack := true ;
2341: LD_ADDR_EXP 35
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// if p3 = 19 then
2349: LD_VAR 0 3
2353: PUSH
2354: LD_INT 19
2356: EQUAL
2357: IFFALSE 2367
// sTank := true ;
2359: LD_ADDR_EXP 37
2363: PUSH
2364: LD_INT 1
2366: ST_TO_ADDR
// if p3 = 20 then
2367: LD_VAR 0 3
2371: PUSH
2372: LD_INT 20
2374: EQUAL
2375: IFFALSE 2385
// sRemote := true ;
2377: LD_ADDR_EXP 38
2381: PUSH
2382: LD_INT 1
2384: ST_TO_ADDR
// if p3 = 21 then
2385: LD_VAR 0 3
2389: PUSH
2390: LD_INT 21
2392: EQUAL
2393: IFFALSE 2403
// sPowell := true ;
2395: LD_ADDR_EXP 39
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// if p3 = 22 then
2403: LD_VAR 0 3
2407: PUSH
2408: LD_INT 22
2410: EQUAL
2411: IFFALSE 2421
// sTeleport := true ;
2413: LD_ADDR_EXP 42
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// if p3 = 23 then
2421: LD_VAR 0 3
2425: PUSH
2426: LD_INT 23
2428: EQUAL
2429: IFFALSE 2439
// sOilTower := true ;
2431: LD_ADDR_EXP 44
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// if p3 = 24 then
2439: LD_VAR 0 3
2443: PUSH
2444: LD_INT 24
2446: EQUAL
2447: IFFALSE 2457
// sShovel := true ;
2449: LD_ADDR_EXP 45
2453: PUSH
2454: LD_INT 1
2456: ST_TO_ADDR
// if p3 = 25 then
2457: LD_VAR 0 3
2461: PUSH
2462: LD_INT 25
2464: EQUAL
2465: IFFALSE 2475
// sSheik := true ;
2467: LD_ADDR_EXP 46
2471: PUSH
2472: LD_INT 1
2474: ST_TO_ADDR
// if p3 = 26 then
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 26
2482: EQUAL
2483: IFFALSE 2493
// sEarthquake := true ;
2485: LD_ADDR_EXP 48
2489: PUSH
2490: LD_INT 1
2492: ST_TO_ADDR
// if p3 = 27 then
2493: LD_VAR 0 3
2497: PUSH
2498: LD_INT 27
2500: EQUAL
2501: IFFALSE 2511
// sAI := true ;
2503: LD_ADDR_EXP 49
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// if p3 = 28 then
2511: LD_VAR 0 3
2515: PUSH
2516: LD_INT 28
2518: EQUAL
2519: IFFALSE 2529
// sCargo := true ;
2521: LD_ADDR_EXP 52
2525: PUSH
2526: LD_INT 1
2528: ST_TO_ADDR
// if p3 = 29 then
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 29
2536: EQUAL
2537: IFFALSE 2547
// sDLaser := true ;
2539: LD_ADDR_EXP 53
2543: PUSH
2544: LD_INT 1
2546: ST_TO_ADDR
// if p3 = 30 then
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 30
2554: EQUAL
2555: IFFALSE 2565
// sExchange := true ;
2557: LD_ADDR_EXP 54
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// if p3 = 31 then
2565: LD_VAR 0 3
2569: PUSH
2570: LD_INT 31
2572: EQUAL
2573: IFFALSE 2583
// sFac := true ;
2575: LD_ADDR_EXP 55
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// if p3 = 32 then
2583: LD_VAR 0 3
2587: PUSH
2588: LD_INT 32
2590: EQUAL
2591: IFFALSE 2601
// sPower := true ;
2593: LD_ADDR_EXP 56
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// if p3 = 33 then
2601: LD_VAR 0 3
2605: PUSH
2606: LD_INT 33
2608: EQUAL
2609: IFFALSE 2619
// sRandom := true ;
2611: LD_ADDR_EXP 57
2615: PUSH
2616: LD_INT 1
2618: ST_TO_ADDR
// if p3 = 34 then
2619: LD_VAR 0 3
2623: PUSH
2624: LD_INT 34
2626: EQUAL
2627: IFFALSE 2637
// sShield := true ;
2629: LD_ADDR_EXP 58
2633: PUSH
2634: LD_INT 1
2636: ST_TO_ADDR
// if p3 = 35 then
2637: LD_VAR 0 3
2641: PUSH
2642: LD_INT 35
2644: EQUAL
2645: IFFALSE 2655
// sTime := true ;
2647: LD_ADDR_EXP 59
2651: PUSH
2652: LD_INT 1
2654: ST_TO_ADDR
// if p3 = 36 then
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 36
2662: EQUAL
2663: IFFALSE 2673
// sTools := true ;
2665: LD_ADDR_EXP 60
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// if p3 = 101 then
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 101
2680: EQUAL
2681: IFFALSE 2691
// sSold := true ;
2683: LD_ADDR_EXP 25
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// if p3 = 102 then
2691: LD_VAR 0 3
2695: PUSH
2696: LD_INT 102
2698: EQUAL
2699: IFFALSE 2709
// sDiff := true ;
2701: LD_ADDR_EXP 26
2705: PUSH
2706: LD_INT 1
2708: ST_TO_ADDR
// if p3 = 103 then
2709: LD_VAR 0 3
2713: PUSH
2714: LD_INT 103
2716: EQUAL
2717: IFFALSE 2727
// sFog := true ;
2719: LD_ADDR_EXP 29
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// if p3 = 104 then
2727: LD_VAR 0 3
2731: PUSH
2732: LD_INT 104
2734: EQUAL
2735: IFFALSE 2745
// sReset := true ;
2737: LD_ADDR_EXP 30
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if p3 = 105 then
2745: LD_VAR 0 3
2749: PUSH
2750: LD_INT 105
2752: EQUAL
2753: IFFALSE 2763
// sSun := true ;
2755: LD_ADDR_EXP 31
2759: PUSH
2760: LD_INT 1
2762: ST_TO_ADDR
// if p3 = 106 then
2763: LD_VAR 0 3
2767: PUSH
2768: LD_INT 106
2770: EQUAL
2771: IFFALSE 2781
// sTiger := true ;
2773: LD_ADDR_EXP 27
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// if p3 = 107 then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 107
2788: EQUAL
2789: IFFALSE 2799
// sBomb := true ;
2791: LD_ADDR_EXP 28
2795: PUSH
2796: LD_INT 1
2798: ST_TO_ADDR
// if p3 = 108 then
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 108
2806: EQUAL
2807: IFFALSE 2817
// sWound := true ;
2809: LD_ADDR_EXP 36
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// if p3 = 109 then
2817: LD_VAR 0 3
2821: PUSH
2822: LD_INT 109
2824: EQUAL
2825: IFFALSE 2835
// sBetray := true ;
2827: LD_ADDR_EXP 40
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// if p3 = 110 then
2835: LD_VAR 0 3
2839: PUSH
2840: LD_INT 110
2842: EQUAL
2843: IFFALSE 2853
// sContamin := true ;
2845: LD_ADDR_EXP 41
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// if p3 = 111 then
2853: LD_VAR 0 3
2857: PUSH
2858: LD_INT 111
2860: EQUAL
2861: IFFALSE 2871
// sOil := true ;
2863: LD_ADDR_EXP 43
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// if p3 = 112 then
2871: LD_VAR 0 3
2875: PUSH
2876: LD_INT 112
2878: EQUAL
2879: IFFALSE 2889
// sStu := true ;
2881: LD_ADDR_EXP 47
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// if p3 = 113 then
2889: LD_VAR 0 3
2893: PUSH
2894: LD_INT 113
2896: EQUAL
2897: IFFALSE 2907
// sBazooka := true ;
2899: LD_ADDR_EXP 50
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// if p3 = 114 then
2907: LD_VAR 0 3
2911: PUSH
2912: LD_INT 114
2914: EQUAL
2915: IFFALSE 2925
// sMortar := true ;
2917: LD_ADDR_EXP 51
2921: PUSH
2922: LD_INT 1
2924: ST_TO_ADDR
// if p3 = 115 then
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 115
2932: EQUAL
2933: IFFALSE 2943
// sRanger := true ;
2935: LD_ADDR_EXP 61
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// if p3 = 116 then
2943: LD_VAR 0 3
2947: PUSH
2948: LD_INT 116
2950: EQUAL
2951: IFFALSE 2961
// sComputer := true ;
2953: LD_ADDR_EXP 62
2957: PUSH
2958: LD_INT 1
2960: ST_TO_ADDR
// if p3 = 117 then
2961: LD_VAR 0 3
2965: PUSH
2966: LD_INT 117
2968: EQUAL
2969: IFFALSE 2979
// s30 := true ;
2971: LD_ADDR_EXP 63
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// if p3 = 118 then
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 118
2986: EQUAL
2987: IFFALSE 2997
// s60 := true ;
2989: LD_ADDR_EXP 64
2993: PUSH
2994: LD_INT 1
2996: ST_TO_ADDR
// end ; if p2 = hack_mode then
2997: LD_VAR 0 2
3001: PUSH
3002: LD_INT 101
3004: EQUAL
3005: IFFALSE 3133
// begin case p3 of 1 :
3007: LD_VAR 0 3
3011: PUSH
3012: LD_INT 1
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3027
3020: POP
// hHackUnlimitedResources ; 2 :
3021: CALL 15304 0 0
3025: GO 3133
3027: LD_INT 2
3029: DOUBLE
3030: EQUAL
3031: IFTRUE 3035
3033: GO 3042
3035: POP
// hHackSetLevel10 ; 3 :
3036: CALL 15437 0 0
3040: GO 3133
3042: LD_INT 3
3044: DOUBLE
3045: EQUAL
3046: IFTRUE 3050
3048: GO 3057
3050: POP
// hHackSetLevel10YourUnits ; 4 :
3051: CALL 15522 0 0
3055: GO 3133
3057: LD_INT 4
3059: DOUBLE
3060: EQUAL
3061: IFTRUE 3065
3063: GO 3072
3065: POP
// hHackInvincible ; 5 :
3066: CALL 15970 0 0
3070: GO 3133
3072: LD_INT 5
3074: DOUBLE
3075: EQUAL
3076: IFTRUE 3080
3078: GO 3087
3080: POP
// hHackInvisible ; 6 :
3081: CALL 16081 0 0
3085: GO 3133
3087: LD_INT 6
3089: DOUBLE
3090: EQUAL
3091: IFTRUE 3095
3093: GO 3102
3095: POP
// hHackChangeYourSide ; 7 :
3096: CALL 16138 0 0
3100: GO 3133
3102: LD_INT 7
3104: DOUBLE
3105: EQUAL
3106: IFTRUE 3110
3108: GO 3117
3110: POP
// hHackChangeUnitSide ; 8 :
3111: CALL 16180 0 0
3115: GO 3133
3117: LD_INT 8
3119: DOUBLE
3120: EQUAL
3121: IFTRUE 3125
3123: GO 3132
3125: POP
// hHackFog ; end ;
3126: CALL 16281 0 0
3130: GO 3133
3132: POP
// end ; if p2 = game_save_mode then
3133: LD_VAR 0 2
3137: PUSH
3138: LD_INT 102
3140: EQUAL
3141: IFFALSE 3206
// begin if p3 = 1 then
3143: LD_VAR 0 3
3147: PUSH
3148: LD_INT 1
3150: EQUAL
3151: IFFALSE 3163
// globalGameSaveCounter := p4 ;
3153: LD_ADDR_EXP 7
3157: PUSH
3158: LD_VAR 0 4
3162: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3163: LD_VAR 0 3
3167: PUSH
3168: LD_INT 2
3170: EQUAL
3171: PUSH
3172: LD_EXP 7
3176: AND
3177: IFFALSE 3196
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3179: LD_STRING setGameSaveCounter(
3181: PUSH
3182: LD_EXP 7
3186: STR
3187: PUSH
3188: LD_STRING )
3190: STR
3191: PPUSH
3192: CALL_OW 559
// display_strings := globalGameSaveCounter ;
3196: LD_ADDR_OWVAR 47
3200: PUSH
3201: LD_EXP 7
3205: ST_TO_ADDR
// end ; end ;
3206: LD_VAR 0 7
3210: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3211: GO 3213
3213: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3214: LD_STRING initStreamRollete();
3216: PPUSH
3217: CALL_OW 559
// InitStreamMode ;
3221: CALL 3233 0 0
// DefineStreamItems ( false ) ;
3225: LD_INT 0
3227: PPUSH
3228: CALL 3697 0 1
// end ;
3232: END
// function InitStreamMode ; begin
3233: LD_INT 0
3235: PPUSH
// streamModeActive := false ;
3236: LD_ADDR_EXP 8
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// normalCounter := 36 ;
3244: LD_ADDR_EXP 9
3248: PUSH
3249: LD_INT 36
3251: ST_TO_ADDR
// hardcoreCounter := 18 ;
3252: LD_ADDR_EXP 10
3256: PUSH
3257: LD_INT 18
3259: ST_TO_ADDR
// sRocket := false ;
3260: LD_ADDR_EXP 13
3264: PUSH
3265: LD_INT 0
3267: ST_TO_ADDR
// sSpeed := false ;
3268: LD_ADDR_EXP 12
3272: PUSH
3273: LD_INT 0
3275: ST_TO_ADDR
// sEngine := false ;
3276: LD_ADDR_EXP 14
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// sSpec := false ;
3284: LD_ADDR_EXP 11
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// sLevel := false ;
3292: LD_ADDR_EXP 15
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// sArmoury := false ;
3300: LD_ADDR_EXP 16
3304: PUSH
3305: LD_INT 0
3307: ST_TO_ADDR
// sRadar := false ;
3308: LD_ADDR_EXP 17
3312: PUSH
3313: LD_INT 0
3315: ST_TO_ADDR
// sBunker := false ;
3316: LD_ADDR_EXP 18
3320: PUSH
3321: LD_INT 0
3323: ST_TO_ADDR
// sHack := false ;
3324: LD_ADDR_EXP 19
3328: PUSH
3329: LD_INT 0
3331: ST_TO_ADDR
// sFire := false ;
3332: LD_ADDR_EXP 20
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// sRefresh := false ;
3340: LD_ADDR_EXP 21
3344: PUSH
3345: LD_INT 0
3347: ST_TO_ADDR
// sExp := false ;
3348: LD_ADDR_EXP 22
3352: PUSH
3353: LD_INT 0
3355: ST_TO_ADDR
// sDepot := false ;
3356: LD_ADDR_EXP 23
3360: PUSH
3361: LD_INT 0
3363: ST_TO_ADDR
// sFlag := false ;
3364: LD_ADDR_EXP 24
3368: PUSH
3369: LD_INT 0
3371: ST_TO_ADDR
// sKamikadze := false ;
3372: LD_ADDR_EXP 32
3376: PUSH
3377: LD_INT 0
3379: ST_TO_ADDR
// sTroll := false ;
3380: LD_ADDR_EXP 33
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// sSlow := false ;
3388: LD_ADDR_EXP 34
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// sLack := false ;
3396: LD_ADDR_EXP 35
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// sTank := false ;
3404: LD_ADDR_EXP 37
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// sRemote := false ;
3412: LD_ADDR_EXP 38
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// sPowell := false ;
3420: LD_ADDR_EXP 39
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// sTeleport := false ;
3428: LD_ADDR_EXP 42
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// sOilTower := false ;
3436: LD_ADDR_EXP 44
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// sShovel := false ;
3444: LD_ADDR_EXP 45
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// sSheik := false ;
3452: LD_ADDR_EXP 46
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// sEarthquake := false ;
3460: LD_ADDR_EXP 48
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// sAI := false ;
3468: LD_ADDR_EXP 49
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// sCargo := false ;
3476: LD_ADDR_EXP 52
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// sDLaser := false ;
3484: LD_ADDR_EXP 53
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// sExchange := false ;
3492: LD_ADDR_EXP 54
3496: PUSH
3497: LD_INT 0
3499: ST_TO_ADDR
// sFac := false ;
3500: LD_ADDR_EXP 55
3504: PUSH
3505: LD_INT 0
3507: ST_TO_ADDR
// sPower := false ;
3508: LD_ADDR_EXP 56
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
// sRandom := false ;
3516: LD_ADDR_EXP 57
3520: PUSH
3521: LD_INT 0
3523: ST_TO_ADDR
// sShield := false ;
3524: LD_ADDR_EXP 58
3528: PUSH
3529: LD_INT 0
3531: ST_TO_ADDR
// sTime := false ;
3532: LD_ADDR_EXP 59
3536: PUSH
3537: LD_INT 0
3539: ST_TO_ADDR
// sTools := false ;
3540: LD_ADDR_EXP 60
3544: PUSH
3545: LD_INT 0
3547: ST_TO_ADDR
// sSold := false ;
3548: LD_ADDR_EXP 25
3552: PUSH
3553: LD_INT 0
3555: ST_TO_ADDR
// sDiff := false ;
3556: LD_ADDR_EXP 26
3560: PUSH
3561: LD_INT 0
3563: ST_TO_ADDR
// sFog := false ;
3564: LD_ADDR_EXP 29
3568: PUSH
3569: LD_INT 0
3571: ST_TO_ADDR
// sReset := false ;
3572: LD_ADDR_EXP 30
3576: PUSH
3577: LD_INT 0
3579: ST_TO_ADDR
// sSun := false ;
3580: LD_ADDR_EXP 31
3584: PUSH
3585: LD_INT 0
3587: ST_TO_ADDR
// sTiger := false ;
3588: LD_ADDR_EXP 27
3592: PUSH
3593: LD_INT 0
3595: ST_TO_ADDR
// sBomb := false ;
3596: LD_ADDR_EXP 28
3600: PUSH
3601: LD_INT 0
3603: ST_TO_ADDR
// sWound := false ;
3604: LD_ADDR_EXP 36
3608: PUSH
3609: LD_INT 0
3611: ST_TO_ADDR
// sBetray := false ;
3612: LD_ADDR_EXP 40
3616: PUSH
3617: LD_INT 0
3619: ST_TO_ADDR
// sContamin := false ;
3620: LD_ADDR_EXP 41
3624: PUSH
3625: LD_INT 0
3627: ST_TO_ADDR
// sOil := false ;
3628: LD_ADDR_EXP 43
3632: PUSH
3633: LD_INT 0
3635: ST_TO_ADDR
// sStu := false ;
3636: LD_ADDR_EXP 47
3640: PUSH
3641: LD_INT 0
3643: ST_TO_ADDR
// sBazooka := false ;
3644: LD_ADDR_EXP 50
3648: PUSH
3649: LD_INT 0
3651: ST_TO_ADDR
// sMortar := false ;
3652: LD_ADDR_EXP 51
3656: PUSH
3657: LD_INT 0
3659: ST_TO_ADDR
// sRanger := false ;
3660: LD_ADDR_EXP 61
3664: PUSH
3665: LD_INT 0
3667: ST_TO_ADDR
// sComputer := false ;
3668: LD_ADDR_EXP 62
3672: PUSH
3673: LD_INT 0
3675: ST_TO_ADDR
// s30 := false ;
3676: LD_ADDR_EXP 63
3680: PUSH
3681: LD_INT 0
3683: ST_TO_ADDR
// s60 := false ;
3684: LD_ADDR_EXP 64
3688: PUSH
3689: LD_INT 0
3691: ST_TO_ADDR
// end ;
3692: LD_VAR 0 1
3696: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
// result := [ ] ;
3706: LD_ADDR_VAR 0 2
3710: PUSH
3711: EMPTY
3712: ST_TO_ADDR
// if campaign_id = 1 then
3713: LD_OWVAR 69
3717: PUSH
3718: LD_INT 1
3720: EQUAL
3721: IFFALSE 6887
// begin case mission_number of 1 :
3723: LD_OWVAR 70
3727: PUSH
3728: LD_INT 1
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3812
3736: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3737: LD_ADDR_VAR 0 2
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: LD_INT 4
3747: PUSH
3748: LD_INT 11
3750: PUSH
3751: LD_INT 12
3753: PUSH
3754: LD_INT 15
3756: PUSH
3757: LD_INT 16
3759: PUSH
3760: LD_INT 22
3762: PUSH
3763: LD_INT 23
3765: PUSH
3766: LD_INT 26
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: PUSH
3780: LD_INT 101
3782: PUSH
3783: LD_INT 102
3785: PUSH
3786: LD_INT 106
3788: PUSH
3789: LD_INT 116
3791: PUSH
3792: LD_INT 117
3794: PUSH
3795: LD_INT 118
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: ST_TO_ADDR
3810: GO 6885
3812: LD_INT 2
3814: DOUBLE
3815: EQUAL
3816: IFTRUE 3820
3818: GO 3904
3820: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 4
3831: PUSH
3832: LD_INT 11
3834: PUSH
3835: LD_INT 12
3837: PUSH
3838: LD_INT 15
3840: PUSH
3841: LD_INT 16
3843: PUSH
3844: LD_INT 22
3846: PUSH
3847: LD_INT 23
3849: PUSH
3850: LD_INT 26
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 101
3866: PUSH
3867: LD_INT 102
3869: PUSH
3870: LD_INT 105
3872: PUSH
3873: LD_INT 106
3875: PUSH
3876: LD_INT 108
3878: PUSH
3879: LD_INT 116
3881: PUSH
3882: LD_INT 117
3884: PUSH
3885: LD_INT 118
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: ST_TO_ADDR
3902: GO 6885
3904: LD_INT 3
3906: DOUBLE
3907: EQUAL
3908: IFTRUE 3912
3910: GO 4000
3912: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3913: LD_ADDR_VAR 0 2
3917: PUSH
3918: LD_INT 2
3920: PUSH
3921: LD_INT 4
3923: PUSH
3924: LD_INT 5
3926: PUSH
3927: LD_INT 11
3929: PUSH
3930: LD_INT 12
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: LD_INT 16
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 26
3944: PUSH
3945: LD_INT 36
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 101
3962: PUSH
3963: LD_INT 102
3965: PUSH
3966: LD_INT 105
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 108
3974: PUSH
3975: LD_INT 116
3977: PUSH
3978: LD_INT 117
3980: PUSH
3981: LD_INT 118
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: ST_TO_ADDR
3998: GO 6885
4000: LD_INT 4
4002: DOUBLE
4003: EQUAL
4004: IFTRUE 4008
4006: GO 4104
4008: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: LD_INT 2
4016: PUSH
4017: LD_INT 4
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 8
4025: PUSH
4026: LD_INT 11
4028: PUSH
4029: LD_INT 12
4031: PUSH
4032: LD_INT 15
4034: PUSH
4035: LD_INT 16
4037: PUSH
4038: LD_INT 22
4040: PUSH
4041: LD_INT 23
4043: PUSH
4044: LD_INT 26
4046: PUSH
4047: LD_INT 36
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 101
4066: PUSH
4067: LD_INT 102
4069: PUSH
4070: LD_INT 105
4072: PUSH
4073: LD_INT 106
4075: PUSH
4076: LD_INT 108
4078: PUSH
4079: LD_INT 116
4081: PUSH
4082: LD_INT 117
4084: PUSH
4085: LD_INT 118
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: ST_TO_ADDR
4102: GO 6885
4104: LD_INT 5
4106: DOUBLE
4107: EQUAL
4108: IFTRUE 4112
4110: GO 4224
4112: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4113: LD_ADDR_VAR 0 2
4117: PUSH
4118: LD_INT 2
4120: PUSH
4121: LD_INT 4
4123: PUSH
4124: LD_INT 5
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 8
4132: PUSH
4133: LD_INT 11
4135: PUSH
4136: LD_INT 12
4138: PUSH
4139: LD_INT 15
4141: PUSH
4142: LD_INT 16
4144: PUSH
4145: LD_INT 22
4147: PUSH
4148: LD_INT 23
4150: PUSH
4151: LD_INT 25
4153: PUSH
4154: LD_INT 26
4156: PUSH
4157: LD_INT 36
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 101
4178: PUSH
4179: LD_INT 102
4181: PUSH
4182: LD_INT 105
4184: PUSH
4185: LD_INT 106
4187: PUSH
4188: LD_INT 108
4190: PUSH
4191: LD_INT 109
4193: PUSH
4194: LD_INT 112
4196: PUSH
4197: LD_INT 116
4199: PUSH
4200: LD_INT 117
4202: PUSH
4203: LD_INT 118
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
4222: GO 6885
4224: LD_INT 6
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4364
4232: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 6
4249: PUSH
4250: LD_INT 8
4252: PUSH
4253: LD_INT 11
4255: PUSH
4256: LD_INT 12
4258: PUSH
4259: LD_INT 15
4261: PUSH
4262: LD_INT 16
4264: PUSH
4265: LD_INT 20
4267: PUSH
4268: LD_INT 21
4270: PUSH
4271: LD_INT 22
4273: PUSH
4274: LD_INT 23
4276: PUSH
4277: LD_INT 25
4279: PUSH
4280: LD_INT 26
4282: PUSH
4283: LD_INT 30
4285: PUSH
4286: LD_INT 31
4288: PUSH
4289: LD_INT 32
4291: PUSH
4292: LD_INT 36
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 101
4318: PUSH
4319: LD_INT 102
4321: PUSH
4322: LD_INT 105
4324: PUSH
4325: LD_INT 106
4327: PUSH
4328: LD_INT 108
4330: PUSH
4331: LD_INT 109
4333: PUSH
4334: LD_INT 112
4336: PUSH
4337: LD_INT 116
4339: PUSH
4340: LD_INT 117
4342: PUSH
4343: LD_INT 118
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: ST_TO_ADDR
4362: GO 6885
4364: LD_INT 7
4366: DOUBLE
4367: EQUAL
4368: IFTRUE 4372
4370: GO 4484
4372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4373: LD_ADDR_VAR 0 2
4377: PUSH
4378: LD_INT 2
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: LD_INT 5
4386: PUSH
4387: LD_INT 7
4389: PUSH
4390: LD_INT 11
4392: PUSH
4393: LD_INT 12
4395: PUSH
4396: LD_INT 15
4398: PUSH
4399: LD_INT 16
4401: PUSH
4402: LD_INT 20
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 22
4410: PUSH
4411: LD_INT 23
4413: PUSH
4414: LD_INT 25
4416: PUSH
4417: LD_INT 26
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 101
4438: PUSH
4439: LD_INT 102
4441: PUSH
4442: LD_INT 103
4444: PUSH
4445: LD_INT 105
4447: PUSH
4448: LD_INT 106
4450: PUSH
4451: LD_INT 108
4453: PUSH
4454: LD_INT 112
4456: PUSH
4457: LD_INT 116
4459: PUSH
4460: LD_INT 117
4462: PUSH
4463: LD_INT 118
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
4482: GO 6885
4484: LD_INT 8
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4632
4492: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4493: LD_ADDR_VAR 0 2
4497: PUSH
4498: LD_INT 2
4500: PUSH
4501: LD_INT 4
4503: PUSH
4504: LD_INT 5
4506: PUSH
4507: LD_INT 6
4509: PUSH
4510: LD_INT 7
4512: PUSH
4513: LD_INT 8
4515: PUSH
4516: LD_INT 11
4518: PUSH
4519: LD_INT 12
4521: PUSH
4522: LD_INT 15
4524: PUSH
4525: LD_INT 16
4527: PUSH
4528: LD_INT 20
4530: PUSH
4531: LD_INT 21
4533: PUSH
4534: LD_INT 22
4536: PUSH
4537: LD_INT 23
4539: PUSH
4540: LD_INT 25
4542: PUSH
4543: LD_INT 26
4545: PUSH
4546: LD_INT 30
4548: PUSH
4549: LD_INT 31
4551: PUSH
4552: LD_INT 32
4554: PUSH
4555: LD_INT 36
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 101
4582: PUSH
4583: LD_INT 102
4585: PUSH
4586: LD_INT 103
4588: PUSH
4589: LD_INT 105
4591: PUSH
4592: LD_INT 106
4594: PUSH
4595: LD_INT 108
4597: PUSH
4598: LD_INT 109
4600: PUSH
4601: LD_INT 112
4603: PUSH
4604: LD_INT 116
4606: PUSH
4607: LD_INT 117
4609: PUSH
4610: LD_INT 118
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: ST_TO_ADDR
4630: GO 6885
4632: LD_INT 9
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4788
4640: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: LD_INT 4
4651: PUSH
4652: LD_INT 5
4654: PUSH
4655: LD_INT 6
4657: PUSH
4658: LD_INT 7
4660: PUSH
4661: LD_INT 8
4663: PUSH
4664: LD_INT 11
4666: PUSH
4667: LD_INT 12
4669: PUSH
4670: LD_INT 15
4672: PUSH
4673: LD_INT 16
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 21
4681: PUSH
4682: LD_INT 22
4684: PUSH
4685: LD_INT 23
4687: PUSH
4688: LD_INT 25
4690: PUSH
4691: LD_INT 26
4693: PUSH
4694: LD_INT 28
4696: PUSH
4697: LD_INT 30
4699: PUSH
4700: LD_INT 31
4702: PUSH
4703: LD_INT 32
4705: PUSH
4706: LD_INT 36
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 101
4734: PUSH
4735: LD_INT 102
4737: PUSH
4738: LD_INT 103
4740: PUSH
4741: LD_INT 105
4743: PUSH
4744: LD_INT 106
4746: PUSH
4747: LD_INT 108
4749: PUSH
4750: LD_INT 109
4752: PUSH
4753: LD_INT 112
4755: PUSH
4756: LD_INT 114
4758: PUSH
4759: LD_INT 116
4761: PUSH
4762: LD_INT 117
4764: PUSH
4765: LD_INT 118
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: ST_TO_ADDR
4786: GO 6885
4788: LD_INT 10
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4992
4796: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 4
4807: PUSH
4808: LD_INT 5
4810: PUSH
4811: LD_INT 6
4813: PUSH
4814: LD_INT 7
4816: PUSH
4817: LD_INT 8
4819: PUSH
4820: LD_INT 9
4822: PUSH
4823: LD_INT 10
4825: PUSH
4826: LD_INT 11
4828: PUSH
4829: LD_INT 12
4831: PUSH
4832: LD_INT 13
4834: PUSH
4835: LD_INT 14
4837: PUSH
4838: LD_INT 15
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 17
4846: PUSH
4847: LD_INT 18
4849: PUSH
4850: LD_INT 19
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 22
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 24
4867: PUSH
4868: LD_INT 25
4870: PUSH
4871: LD_INT 26
4873: PUSH
4874: LD_INT 28
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 31
4882: PUSH
4883: LD_INT 32
4885: PUSH
4886: LD_INT 36
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 101
4922: PUSH
4923: LD_INT 102
4925: PUSH
4926: LD_INT 103
4928: PUSH
4929: LD_INT 104
4931: PUSH
4932: LD_INT 105
4934: PUSH
4935: LD_INT 106
4937: PUSH
4938: LD_INT 107
4940: PUSH
4941: LD_INT 108
4943: PUSH
4944: LD_INT 109
4946: PUSH
4947: LD_INT 110
4949: PUSH
4950: LD_INT 111
4952: PUSH
4953: LD_INT 112
4955: PUSH
4956: LD_INT 114
4958: PUSH
4959: LD_INT 116
4961: PUSH
4962: LD_INT 117
4964: PUSH
4965: LD_INT 118
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: ST_TO_ADDR
4990: GO 6885
4992: LD_INT 11
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5204
5000: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: LD_INT 4
5014: PUSH
5015: LD_INT 5
5017: PUSH
5018: LD_INT 6
5020: PUSH
5021: LD_INT 7
5023: PUSH
5024: LD_INT 8
5026: PUSH
5027: LD_INT 9
5029: PUSH
5030: LD_INT 10
5032: PUSH
5033: LD_INT 11
5035: PUSH
5036: LD_INT 12
5038: PUSH
5039: LD_INT 13
5041: PUSH
5042: LD_INT 14
5044: PUSH
5045: LD_INT 15
5047: PUSH
5048: LD_INT 16
5050: PUSH
5051: LD_INT 17
5053: PUSH
5054: LD_INT 18
5056: PUSH
5057: LD_INT 19
5059: PUSH
5060: LD_INT 20
5062: PUSH
5063: LD_INT 21
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 23
5071: PUSH
5072: LD_INT 24
5074: PUSH
5075: LD_INT 25
5077: PUSH
5078: LD_INT 26
5080: PUSH
5081: LD_INT 28
5083: PUSH
5084: LD_INT 30
5086: PUSH
5087: LD_INT 31
5089: PUSH
5090: LD_INT 32
5092: PUSH
5093: LD_INT 34
5095: PUSH
5096: LD_INT 36
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 101
5134: PUSH
5135: LD_INT 102
5137: PUSH
5138: LD_INT 103
5140: PUSH
5141: LD_INT 104
5143: PUSH
5144: LD_INT 105
5146: PUSH
5147: LD_INT 106
5149: PUSH
5150: LD_INT 107
5152: PUSH
5153: LD_INT 108
5155: PUSH
5156: LD_INT 109
5158: PUSH
5159: LD_INT 110
5161: PUSH
5162: LD_INT 111
5164: PUSH
5165: LD_INT 112
5167: PUSH
5168: LD_INT 114
5170: PUSH
5171: LD_INT 116
5173: PUSH
5174: LD_INT 117
5176: PUSH
5177: LD_INT 118
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: ST_TO_ADDR
5202: GO 6885
5204: LD_INT 12
5206: DOUBLE
5207: EQUAL
5208: IFTRUE 5212
5210: GO 5432
5212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: LD_INT 2
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 6
5235: PUSH
5236: LD_INT 7
5238: PUSH
5239: LD_INT 8
5241: PUSH
5242: LD_INT 9
5244: PUSH
5245: LD_INT 10
5247: PUSH
5248: LD_INT 11
5250: PUSH
5251: LD_INT 12
5253: PUSH
5254: LD_INT 13
5256: PUSH
5257: LD_INT 14
5259: PUSH
5260: LD_INT 15
5262: PUSH
5263: LD_INT 16
5265: PUSH
5266: LD_INT 17
5268: PUSH
5269: LD_INT 18
5271: PUSH
5272: LD_INT 19
5274: PUSH
5275: LD_INT 20
5277: PUSH
5278: LD_INT 21
5280: PUSH
5281: LD_INT 22
5283: PUSH
5284: LD_INT 23
5286: PUSH
5287: LD_INT 24
5289: PUSH
5290: LD_INT 25
5292: PUSH
5293: LD_INT 26
5295: PUSH
5296: LD_INT 27
5298: PUSH
5299: LD_INT 28
5301: PUSH
5302: LD_INT 30
5304: PUSH
5305: LD_INT 31
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: LD_INT 33
5313: PUSH
5314: LD_INT 34
5316: PUSH
5317: LD_INT 36
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 101
5358: PUSH
5359: LD_INT 102
5361: PUSH
5362: LD_INT 103
5364: PUSH
5365: LD_INT 104
5367: PUSH
5368: LD_INT 105
5370: PUSH
5371: LD_INT 106
5373: PUSH
5374: LD_INT 107
5376: PUSH
5377: LD_INT 108
5379: PUSH
5380: LD_INT 109
5382: PUSH
5383: LD_INT 110
5385: PUSH
5386: LD_INT 111
5388: PUSH
5389: LD_INT 112
5391: PUSH
5392: LD_INT 113
5394: PUSH
5395: LD_INT 114
5397: PUSH
5398: LD_INT 116
5400: PUSH
5401: LD_INT 117
5403: PUSH
5404: LD_INT 118
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: ST_TO_ADDR
5430: GO 6885
5432: LD_INT 13
5434: DOUBLE
5435: EQUAL
5436: IFTRUE 5440
5438: GO 5648
5440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5441: LD_ADDR_VAR 0 2
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 4
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: LD_INT 8
5463: PUSH
5464: LD_INT 9
5466: PUSH
5467: LD_INT 10
5469: PUSH
5470: LD_INT 11
5472: PUSH
5473: LD_INT 12
5475: PUSH
5476: LD_INT 14
5478: PUSH
5479: LD_INT 15
5481: PUSH
5482: LD_INT 16
5484: PUSH
5485: LD_INT 17
5487: PUSH
5488: LD_INT 18
5490: PUSH
5491: LD_INT 19
5493: PUSH
5494: LD_INT 20
5496: PUSH
5497: LD_INT 21
5499: PUSH
5500: LD_INT 22
5502: PUSH
5503: LD_INT 23
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: LD_INT 25
5511: PUSH
5512: LD_INT 26
5514: PUSH
5515: LD_INT 27
5517: PUSH
5518: LD_INT 28
5520: PUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 31
5526: PUSH
5527: LD_INT 32
5529: PUSH
5530: LD_INT 33
5532: PUSH
5533: LD_INT 34
5535: PUSH
5536: LD_INT 36
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 101
5574: PUSH
5575: LD_INT 102
5577: PUSH
5578: LD_INT 103
5580: PUSH
5581: LD_INT 104
5583: PUSH
5584: LD_INT 105
5586: PUSH
5587: LD_INT 106
5589: PUSH
5590: LD_INT 107
5592: PUSH
5593: LD_INT 108
5595: PUSH
5596: LD_INT 109
5598: PUSH
5599: LD_INT 110
5601: PUSH
5602: LD_INT 111
5604: PUSH
5605: LD_INT 112
5607: PUSH
5608: LD_INT 113
5610: PUSH
5611: LD_INT 114
5613: PUSH
5614: LD_INT 116
5616: PUSH
5617: LD_INT 117
5619: PUSH
5620: LD_INT 118
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: ST_TO_ADDR
5646: GO 6885
5648: LD_INT 14
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5880
5656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: LD_INT 2
5667: PUSH
5668: LD_INT 3
5670: PUSH
5671: LD_INT 4
5673: PUSH
5674: LD_INT 5
5676: PUSH
5677: LD_INT 6
5679: PUSH
5680: LD_INT 7
5682: PUSH
5683: LD_INT 8
5685: PUSH
5686: LD_INT 9
5688: PUSH
5689: LD_INT 10
5691: PUSH
5692: LD_INT 11
5694: PUSH
5695: LD_INT 12
5697: PUSH
5698: LD_INT 13
5700: PUSH
5701: LD_INT 14
5703: PUSH
5704: LD_INT 15
5706: PUSH
5707: LD_INT 16
5709: PUSH
5710: LD_INT 17
5712: PUSH
5713: LD_INT 18
5715: PUSH
5716: LD_INT 19
5718: PUSH
5719: LD_INT 20
5721: PUSH
5722: LD_INT 21
5724: PUSH
5725: LD_INT 22
5727: PUSH
5728: LD_INT 23
5730: PUSH
5731: LD_INT 24
5733: PUSH
5734: LD_INT 25
5736: PUSH
5737: LD_INT 26
5739: PUSH
5740: LD_INT 27
5742: PUSH
5743: LD_INT 28
5745: PUSH
5746: LD_INT 29
5748: PUSH
5749: LD_INT 30
5751: PUSH
5752: LD_INT 31
5754: PUSH
5755: LD_INT 32
5757: PUSH
5758: LD_INT 33
5760: PUSH
5761: LD_INT 34
5763: PUSH
5764: LD_INT 36
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 101
5806: PUSH
5807: LD_INT 102
5809: PUSH
5810: LD_INT 103
5812: PUSH
5813: LD_INT 104
5815: PUSH
5816: LD_INT 105
5818: PUSH
5819: LD_INT 106
5821: PUSH
5822: LD_INT 107
5824: PUSH
5825: LD_INT 108
5827: PUSH
5828: LD_INT 109
5830: PUSH
5831: LD_INT 110
5833: PUSH
5834: LD_INT 111
5836: PUSH
5837: LD_INT 112
5839: PUSH
5840: LD_INT 113
5842: PUSH
5843: LD_INT 114
5845: PUSH
5846: LD_INT 116
5848: PUSH
5849: LD_INT 117
5851: PUSH
5852: LD_INT 118
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: ST_TO_ADDR
5878: GO 6885
5880: LD_INT 15
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 6112
5888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5889: LD_ADDR_VAR 0 2
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: LD_INT 4
5905: PUSH
5906: LD_INT 5
5908: PUSH
5909: LD_INT 6
5911: PUSH
5912: LD_INT 7
5914: PUSH
5915: LD_INT 8
5917: PUSH
5918: LD_INT 9
5920: PUSH
5921: LD_INT 10
5923: PUSH
5924: LD_INT 11
5926: PUSH
5927: LD_INT 12
5929: PUSH
5930: LD_INT 13
5932: PUSH
5933: LD_INT 14
5935: PUSH
5936: LD_INT 15
5938: PUSH
5939: LD_INT 16
5941: PUSH
5942: LD_INT 17
5944: PUSH
5945: LD_INT 18
5947: PUSH
5948: LD_INT 19
5950: PUSH
5951: LD_INT 20
5953: PUSH
5954: LD_INT 21
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 24
5965: PUSH
5966: LD_INT 25
5968: PUSH
5969: LD_INT 26
5971: PUSH
5972: LD_INT 27
5974: PUSH
5975: LD_INT 28
5977: PUSH
5978: LD_INT 29
5980: PUSH
5981: LD_INT 30
5983: PUSH
5984: LD_INT 31
5986: PUSH
5987: LD_INT 32
5989: PUSH
5990: LD_INT 33
5992: PUSH
5993: LD_INT 34
5995: PUSH
5996: LD_INT 36
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 103
6044: PUSH
6045: LD_INT 104
6047: PUSH
6048: LD_INT 105
6050: PUSH
6051: LD_INT 106
6053: PUSH
6054: LD_INT 107
6056: PUSH
6057: LD_INT 108
6059: PUSH
6060: LD_INT 109
6062: PUSH
6063: LD_INT 110
6065: PUSH
6066: LD_INT 111
6068: PUSH
6069: LD_INT 112
6071: PUSH
6072: LD_INT 113
6074: PUSH
6075: LD_INT 114
6077: PUSH
6078: LD_INT 116
6080: PUSH
6081: LD_INT 117
6083: PUSH
6084: LD_INT 118
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: ST_TO_ADDR
6110: GO 6885
6112: LD_INT 16
6114: DOUBLE
6115: EQUAL
6116: IFTRUE 6120
6118: GO 6256
6120: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6121: LD_ADDR_VAR 0 2
6125: PUSH
6126: LD_INT 2
6128: PUSH
6129: LD_INT 4
6131: PUSH
6132: LD_INT 5
6134: PUSH
6135: LD_INT 7
6137: PUSH
6138: LD_INT 11
6140: PUSH
6141: LD_INT 12
6143: PUSH
6144: LD_INT 15
6146: PUSH
6147: LD_INT 16
6149: PUSH
6150: LD_INT 20
6152: PUSH
6153: LD_INT 21
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_INT 23
6161: PUSH
6162: LD_INT 25
6164: PUSH
6165: LD_INT 26
6167: PUSH
6168: LD_INT 30
6170: PUSH
6171: LD_INT 31
6173: PUSH
6174: LD_INT 32
6176: PUSH
6177: LD_INT 33
6179: PUSH
6180: LD_INT 34
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 101
6206: PUSH
6207: LD_INT 102
6209: PUSH
6210: LD_INT 103
6212: PUSH
6213: LD_INT 106
6215: PUSH
6216: LD_INT 108
6218: PUSH
6219: LD_INT 112
6221: PUSH
6222: LD_INT 113
6224: PUSH
6225: LD_INT 114
6227: PUSH
6228: LD_INT 116
6230: PUSH
6231: LD_INT 117
6233: PUSH
6234: LD_INT 118
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
6254: GO 6885
6256: LD_INT 17
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6488
6264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 2
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 4
6281: PUSH
6282: LD_INT 5
6284: PUSH
6285: LD_INT 6
6287: PUSH
6288: LD_INT 7
6290: PUSH
6291: LD_INT 8
6293: PUSH
6294: LD_INT 9
6296: PUSH
6297: LD_INT 10
6299: PUSH
6300: LD_INT 11
6302: PUSH
6303: LD_INT 12
6305: PUSH
6306: LD_INT 13
6308: PUSH
6309: LD_INT 14
6311: PUSH
6312: LD_INT 15
6314: PUSH
6315: LD_INT 16
6317: PUSH
6318: LD_INT 17
6320: PUSH
6321: LD_INT 18
6323: PUSH
6324: LD_INT 19
6326: PUSH
6327: LD_INT 20
6329: PUSH
6330: LD_INT 21
6332: PUSH
6333: LD_INT 22
6335: PUSH
6336: LD_INT 23
6338: PUSH
6339: LD_INT 24
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 27
6350: PUSH
6351: LD_INT 28
6353: PUSH
6354: LD_INT 29
6356: PUSH
6357: LD_INT 30
6359: PUSH
6360: LD_INT 31
6362: PUSH
6363: LD_INT 32
6365: PUSH
6366: LD_INT 33
6368: PUSH
6369: LD_INT 34
6371: PUSH
6372: LD_INT 36
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 101
6414: PUSH
6415: LD_INT 102
6417: PUSH
6418: LD_INT 103
6420: PUSH
6421: LD_INT 104
6423: PUSH
6424: LD_INT 105
6426: PUSH
6427: LD_INT 106
6429: PUSH
6430: LD_INT 107
6432: PUSH
6433: LD_INT 108
6435: PUSH
6436: LD_INT 109
6438: PUSH
6439: LD_INT 110
6441: PUSH
6442: LD_INT 111
6444: PUSH
6445: LD_INT 112
6447: PUSH
6448: LD_INT 113
6450: PUSH
6451: LD_INT 114
6453: PUSH
6454: LD_INT 116
6456: PUSH
6457: LD_INT 117
6459: PUSH
6460: LD_INT 118
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: ST_TO_ADDR
6486: GO 6885
6488: LD_INT 18
6490: DOUBLE
6491: EQUAL
6492: IFTRUE 6496
6494: GO 6644
6496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6497: LD_ADDR_VAR 0 2
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 4
6507: PUSH
6508: LD_INT 5
6510: PUSH
6511: LD_INT 7
6513: PUSH
6514: LD_INT 11
6516: PUSH
6517: LD_INT 12
6519: PUSH
6520: LD_INT 15
6522: PUSH
6523: LD_INT 16
6525: PUSH
6526: LD_INT 20
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 22
6534: PUSH
6535: LD_INT 23
6537: PUSH
6538: LD_INT 25
6540: PUSH
6541: LD_INT 26
6543: PUSH
6544: LD_INT 30
6546: PUSH
6547: LD_INT 31
6549: PUSH
6550: LD_INT 32
6552: PUSH
6553: LD_INT 33
6555: PUSH
6556: LD_INT 34
6558: PUSH
6559: LD_INT 35
6561: PUSH
6562: LD_INT 36
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 101
6590: PUSH
6591: LD_INT 102
6593: PUSH
6594: LD_INT 103
6596: PUSH
6597: LD_INT 106
6599: PUSH
6600: LD_INT 108
6602: PUSH
6603: LD_INT 112
6605: PUSH
6606: LD_INT 113
6608: PUSH
6609: LD_INT 114
6611: PUSH
6612: LD_INT 115
6614: PUSH
6615: LD_INT 116
6617: PUSH
6618: LD_INT 117
6620: PUSH
6621: LD_INT 118
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: ST_TO_ADDR
6642: GO 6885
6644: LD_INT 19
6646: DOUBLE
6647: EQUAL
6648: IFTRUE 6652
6650: GO 6884
6652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: LD_INT 1
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: LD_INT 6
6675: PUSH
6676: LD_INT 7
6678: PUSH
6679: LD_INT 8
6681: PUSH
6682: LD_INT 9
6684: PUSH
6685: LD_INT 10
6687: PUSH
6688: LD_INT 11
6690: PUSH
6691: LD_INT 12
6693: PUSH
6694: LD_INT 13
6696: PUSH
6697: LD_INT 14
6699: PUSH
6700: LD_INT 15
6702: PUSH
6703: LD_INT 16
6705: PUSH
6706: LD_INT 17
6708: PUSH
6709: LD_INT 18
6711: PUSH
6712: LD_INT 19
6714: PUSH
6715: LD_INT 20
6717: PUSH
6718: LD_INT 21
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_INT 23
6726: PUSH
6727: LD_INT 24
6729: PUSH
6730: LD_INT 25
6732: PUSH
6733: LD_INT 26
6735: PUSH
6736: LD_INT 27
6738: PUSH
6739: LD_INT 28
6741: PUSH
6742: LD_INT 29
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: LD_INT 32
6753: PUSH
6754: LD_INT 33
6756: PUSH
6757: LD_INT 34
6759: PUSH
6760: LD_INT 35
6762: PUSH
6763: LD_INT 36
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 101
6806: PUSH
6807: LD_INT 102
6809: PUSH
6810: LD_INT 103
6812: PUSH
6813: LD_INT 104
6815: PUSH
6816: LD_INT 105
6818: PUSH
6819: LD_INT 106
6821: PUSH
6822: LD_INT 107
6824: PUSH
6825: LD_INT 108
6827: PUSH
6828: LD_INT 109
6830: PUSH
6831: LD_INT 110
6833: PUSH
6834: LD_INT 111
6836: PUSH
6837: LD_INT 112
6839: PUSH
6840: LD_INT 113
6842: PUSH
6843: LD_INT 114
6845: PUSH
6846: LD_INT 115
6848: PUSH
6849: LD_INT 116
6851: PUSH
6852: LD_INT 117
6854: PUSH
6855: LD_INT 118
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: ST_TO_ADDR
6882: GO 6885
6884: POP
// end else
6885: GO 7116
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6887: LD_ADDR_VAR 0 2
6891: PUSH
6892: LD_INT 1
6894: PUSH
6895: LD_INT 2
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 4
6903: PUSH
6904: LD_INT 5
6906: PUSH
6907: LD_INT 6
6909: PUSH
6910: LD_INT 7
6912: PUSH
6913: LD_INT 8
6915: PUSH
6916: LD_INT 9
6918: PUSH
6919: LD_INT 10
6921: PUSH
6922: LD_INT 11
6924: PUSH
6925: LD_INT 12
6927: PUSH
6928: LD_INT 13
6930: PUSH
6931: LD_INT 14
6933: PUSH
6934: LD_INT 15
6936: PUSH
6937: LD_INT 16
6939: PUSH
6940: LD_INT 17
6942: PUSH
6943: LD_INT 18
6945: PUSH
6946: LD_INT 19
6948: PUSH
6949: LD_INT 20
6951: PUSH
6952: LD_INT 21
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 23
6960: PUSH
6961: LD_INT 24
6963: PUSH
6964: LD_INT 25
6966: PUSH
6967: LD_INT 26
6969: PUSH
6970: LD_INT 27
6972: PUSH
6973: LD_INT 28
6975: PUSH
6976: LD_INT 29
6978: PUSH
6979: LD_INT 30
6981: PUSH
6982: LD_INT 31
6984: PUSH
6985: LD_INT 32
6987: PUSH
6988: LD_INT 33
6990: PUSH
6991: LD_INT 34
6993: PUSH
6994: LD_INT 35
6996: PUSH
6997: LD_INT 36
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 101
7040: PUSH
7041: LD_INT 102
7043: PUSH
7044: LD_INT 103
7046: PUSH
7047: LD_INT 104
7049: PUSH
7050: LD_INT 105
7052: PUSH
7053: LD_INT 106
7055: PUSH
7056: LD_INT 107
7058: PUSH
7059: LD_INT 108
7061: PUSH
7062: LD_INT 109
7064: PUSH
7065: LD_INT 110
7067: PUSH
7068: LD_INT 111
7070: PUSH
7071: LD_INT 112
7073: PUSH
7074: LD_INT 113
7076: PUSH
7077: LD_INT 114
7079: PUSH
7080: LD_INT 115
7082: PUSH
7083: LD_INT 116
7085: PUSH
7086: LD_INT 117
7088: PUSH
7089: LD_INT 118
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: ST_TO_ADDR
// if result then
7116: LD_VAR 0 2
7120: IFFALSE 7906
// begin normal :=  ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: LD_STRING 
7129: ST_TO_ADDR
// hardcore :=  ;
7130: LD_ADDR_VAR 0 6
7134: PUSH
7135: LD_STRING 
7137: ST_TO_ADDR
// active :=  ;
7138: LD_ADDR_VAR 0 7
7142: PUSH
7143: LD_STRING 
7145: ST_TO_ADDR
// for i = 1 to normalCounter do
7146: LD_ADDR_VAR 0 8
7150: PUSH
7151: DOUBLE
7152: LD_INT 1
7154: DEC
7155: ST_TO_ADDR
7156: LD_EXP 9
7160: PUSH
7161: FOR_TO
7162: IFFALSE 7263
// begin tmp := 0 ;
7164: LD_ADDR_VAR 0 3
7168: PUSH
7169: LD_STRING 0
7171: ST_TO_ADDR
// if result [ 1 ] then
7172: LD_VAR 0 2
7176: PUSH
7177: LD_INT 1
7179: ARRAY
7180: IFFALSE 7245
// if result [ 1 ] [ 1 ] = i then
7182: LD_VAR 0 2
7186: PUSH
7187: LD_INT 1
7189: ARRAY
7190: PUSH
7191: LD_INT 1
7193: ARRAY
7194: PUSH
7195: LD_VAR 0 8
7199: EQUAL
7200: IFFALSE 7245
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7202: LD_ADDR_VAR 0 2
7206: PUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_VAR 0 2
7219: PUSH
7220: LD_INT 1
7222: ARRAY
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 3
7231: PPUSH
7232: CALL_OW 1
7236: ST_TO_ADDR
// tmp := 1 ;
7237: LD_ADDR_VAR 0 3
7241: PUSH
7242: LD_STRING 1
7244: ST_TO_ADDR
// end ; normal := normal & tmp ;
7245: LD_ADDR_VAR 0 5
7249: PUSH
7250: LD_VAR 0 5
7254: PUSH
7255: LD_VAR 0 3
7259: STR
7260: ST_TO_ADDR
// end ;
7261: GO 7161
7263: POP
7264: POP
// for i = 1 to hardcoreCounter do
7265: LD_ADDR_VAR 0 8
7269: PUSH
7270: DOUBLE
7271: LD_INT 1
7273: DEC
7274: ST_TO_ADDR
7275: LD_EXP 10
7279: PUSH
7280: FOR_TO
7281: IFFALSE 7386
// begin tmp := 0 ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_STRING 0
7290: ST_TO_ADDR
// if result [ 2 ] then
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 2
7298: ARRAY
7299: IFFALSE 7368
// if result [ 2 ] [ 1 ] = 100 + i then
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 2
7308: ARRAY
7309: PUSH
7310: LD_INT 1
7312: ARRAY
7313: PUSH
7314: LD_INT 100
7316: PUSH
7317: LD_VAR 0 8
7321: PLUS
7322: EQUAL
7323: IFFALSE 7368
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: LD_VAR 0 2
7334: PPUSH
7335: LD_INT 2
7337: PPUSH
7338: LD_VAR 0 2
7342: PUSH
7343: LD_INT 2
7345: ARRAY
7346: PPUSH
7347: LD_INT 1
7349: PPUSH
7350: CALL_OW 3
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// tmp := 1 ;
7360: LD_ADDR_VAR 0 3
7364: PUSH
7365: LD_STRING 1
7367: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7368: LD_ADDR_VAR 0 6
7372: PUSH
7373: LD_VAR 0 6
7377: PUSH
7378: LD_VAR 0 3
7382: STR
7383: ST_TO_ADDR
// end ;
7384: GO 7280
7386: POP
7387: POP
// if isGameLoad then
7388: LD_VAR 0 1
7392: IFFALSE 7867
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7394: LD_ADDR_VAR 0 4
7398: PUSH
7399: LD_EXP 13
7403: PUSH
7404: LD_EXP 12
7408: PUSH
7409: LD_EXP 14
7413: PUSH
7414: LD_EXP 11
7418: PUSH
7419: LD_EXP 15
7423: PUSH
7424: LD_EXP 16
7428: PUSH
7429: LD_EXP 17
7433: PUSH
7434: LD_EXP 18
7438: PUSH
7439: LD_EXP 19
7443: PUSH
7444: LD_EXP 20
7448: PUSH
7449: LD_EXP 21
7453: PUSH
7454: LD_EXP 22
7458: PUSH
7459: LD_EXP 23
7463: PUSH
7464: LD_EXP 24
7468: PUSH
7469: LD_EXP 32
7473: PUSH
7474: LD_EXP 33
7478: PUSH
7479: LD_EXP 34
7483: PUSH
7484: LD_EXP 35
7488: PUSH
7489: LD_EXP 37
7493: PUSH
7494: LD_EXP 38
7498: PUSH
7499: LD_EXP 39
7503: PUSH
7504: LD_EXP 42
7508: PUSH
7509: LD_EXP 44
7513: PUSH
7514: LD_EXP 45
7518: PUSH
7519: LD_EXP 46
7523: PUSH
7524: LD_EXP 48
7528: PUSH
7529: LD_EXP 49
7533: PUSH
7534: LD_EXP 52
7538: PUSH
7539: LD_EXP 53
7543: PUSH
7544: LD_EXP 54
7548: PUSH
7549: LD_EXP 55
7553: PUSH
7554: LD_EXP 56
7558: PUSH
7559: LD_EXP 57
7563: PUSH
7564: LD_EXP 58
7568: PUSH
7569: LD_EXP 59
7573: PUSH
7574: LD_EXP 60
7578: PUSH
7579: LD_EXP 25
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_EXP 29
7593: PUSH
7594: LD_EXP 30
7598: PUSH
7599: LD_EXP 31
7603: PUSH
7604: LD_EXP 27
7608: PUSH
7609: LD_EXP 28
7613: PUSH
7614: LD_EXP 36
7618: PUSH
7619: LD_EXP 40
7623: PUSH
7624: LD_EXP 41
7628: PUSH
7629: LD_EXP 43
7633: PUSH
7634: LD_EXP 47
7638: PUSH
7639: LD_EXP 50
7643: PUSH
7644: LD_EXP 51
7648: PUSH
7649: LD_EXP 61
7653: PUSH
7654: LD_EXP 62
7658: PUSH
7659: LD_EXP 63
7663: PUSH
7664: LD_EXP 64
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: ST_TO_ADDR
// tmp :=  ;
7725: LD_ADDR_VAR 0 3
7729: PUSH
7730: LD_STRING 
7732: ST_TO_ADDR
// for i = 1 to normalCounter do
7733: LD_ADDR_VAR 0 8
7737: PUSH
7738: DOUBLE
7739: LD_INT 1
7741: DEC
7742: ST_TO_ADDR
7743: LD_EXP 9
7747: PUSH
7748: FOR_TO
7749: IFFALSE 7785
// begin if flags [ i ] then
7751: LD_VAR 0 4
7755: PUSH
7756: LD_VAR 0 8
7760: ARRAY
7761: IFFALSE 7783
// tmp := tmp & i & ; ;
7763: LD_ADDR_VAR 0 3
7767: PUSH
7768: LD_VAR 0 3
7772: PUSH
7773: LD_VAR 0 8
7777: STR
7778: PUSH
7779: LD_STRING ;
7781: STR
7782: ST_TO_ADDR
// end ;
7783: GO 7748
7785: POP
7786: POP
// for i = 1 to hardcoreCounter do
7787: LD_ADDR_VAR 0 8
7791: PUSH
7792: DOUBLE
7793: LD_INT 1
7795: DEC
7796: ST_TO_ADDR
7797: LD_EXP 10
7801: PUSH
7802: FOR_TO
7803: IFFALSE 7849
// begin if flags [ normalCounter + i ] then
7805: LD_VAR 0 4
7809: PUSH
7810: LD_EXP 9
7814: PUSH
7815: LD_VAR 0 8
7819: PLUS
7820: ARRAY
7821: IFFALSE 7847
// tmp := tmp & ( 100 + i ) & ; ;
7823: LD_ADDR_VAR 0 3
7827: PUSH
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 100
7835: PUSH
7836: LD_VAR 0 8
7840: PLUS
7841: STR
7842: PUSH
7843: LD_STRING ;
7845: STR
7846: ST_TO_ADDR
// end ;
7847: GO 7802
7849: POP
7850: POP
// if tmp then
7851: LD_VAR 0 3
7855: IFFALSE 7867
// active := tmp ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_VAR 0 3
7866: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7867: LD_STRING getStreamItemsFromMission("
7869: PUSH
7870: LD_VAR 0 5
7874: STR
7875: PUSH
7876: LD_STRING ","
7878: STR
7879: PUSH
7880: LD_VAR 0 6
7884: STR
7885: PUSH
7886: LD_STRING ","
7888: STR
7889: PUSH
7890: LD_VAR 0 7
7894: STR
7895: PUSH
7896: LD_STRING ")
7898: STR
7899: PPUSH
7900: CALL_OW 559
// end else
7904: GO 7913
// ToLua ( getStreamItemsFromMission("","","") ) ;
7906: LD_STRING getStreamItemsFromMission("","","")
7908: PPUSH
7909: CALL_OW 559
// end ;
7913: LD_VAR 0 2
7917: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7918: LD_EXP 8
7922: PUSH
7923: LD_EXP 13
7927: AND
7928: IFFALSE 8052
7930: GO 7932
7932: DISABLE
7933: LD_INT 0
7935: PPUSH
7936: PPUSH
// begin enable ;
7937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_OWVAR 2
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 34
7960: PUSH
7961: LD_INT 7
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 34
7970: PUSH
7971: LD_INT 45
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 34
7980: PUSH
7981: LD_INT 28
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 34
7990: PUSH
7991: LD_INT 47
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PPUSH
8009: CALL_OW 69
8013: ST_TO_ADDR
// if not tmp then
8014: LD_VAR 0 2
8018: NOT
8019: IFFALSE 8023
// exit ;
8021: GO 8052
// for i in tmp do
8023: LD_ADDR_VAR 0 1
8027: PUSH
8028: LD_VAR 0 2
8032: PUSH
8033: FOR_IN
8034: IFFALSE 8050
// begin SetLives ( i , 0 ) ;
8036: LD_VAR 0 1
8040: PPUSH
8041: LD_INT 0
8043: PPUSH
8044: CALL_OW 234
// end ;
8048: GO 8033
8050: POP
8051: POP
// end ;
8052: PPOPN 2
8054: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8055: LD_EXP 8
8059: PUSH
8060: LD_EXP 14
8064: AND
8065: IFFALSE 8149
8067: GO 8069
8069: DISABLE
8070: LD_INT 0
8072: PPUSH
8073: PPUSH
// begin enable ;
8074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8075: LD_ADDR_VAR 0 2
8079: PUSH
8080: LD_INT 22
8082: PUSH
8083: LD_OWVAR 2
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 32
8094: PUSH
8095: LD_INT 3
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: ST_TO_ADDR
// if not tmp then
8111: LD_VAR 0 2
8115: NOT
8116: IFFALSE 8120
// exit ;
8118: GO 8149
// for i in tmp do
8120: LD_ADDR_VAR 0 1
8124: PUSH
8125: LD_VAR 0 2
8129: PUSH
8130: FOR_IN
8131: IFFALSE 8147
// begin SetLives ( i , 0 ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_INT 0
8140: PPUSH
8141: CALL_OW 234
// end ;
8145: GO 8130
8147: POP
8148: POP
// end ;
8149: PPOPN 2
8151: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8152: LD_EXP 8
8156: PUSH
8157: LD_EXP 11
8161: AND
8162: IFFALSE 8255
8164: GO 8166
8166: DISABLE
8167: LD_INT 0
8169: PPUSH
// begin enable ;
8170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_OWVAR 2
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 2
8190: PUSH
8191: LD_INT 25
8193: PUSH
8194: LD_INT 5
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 25
8203: PUSH
8204: LD_INT 9
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 25
8213: PUSH
8214: LD_INT 8
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PPUSH
8231: CALL_OW 69
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8253
// begin SetClass ( i , 1 ) ;
8239: LD_VAR 0 1
8243: PPUSH
8244: LD_INT 1
8246: PPUSH
8247: CALL_OW 336
// end ;
8251: GO 8236
8253: POP
8254: POP
// end ;
8255: PPOPN 1
8257: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8258: LD_EXP 8
8262: PUSH
8263: LD_EXP 12
8267: AND
8268: PUSH
8269: LD_OWVAR 65
8273: PUSH
8274: LD_INT 7
8276: LESS
8277: AND
8278: IFFALSE 8292
8280: GO 8282
8282: DISABLE
// begin enable ;
8283: ENABLE
// game_speed := 7 ;
8284: LD_ADDR_OWVAR 65
8288: PUSH
8289: LD_INT 7
8291: ST_TO_ADDR
// end ;
8292: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8293: LD_EXP 8
8297: PUSH
8298: LD_EXP 15
8302: AND
8303: IFFALSE 8505
8305: GO 8307
8307: DISABLE
8308: LD_INT 0
8310: PPUSH
8311: PPUSH
8312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8313: LD_ADDR_VAR 0 3
8317: PUSH
8318: LD_INT 81
8320: PUSH
8321: LD_OWVAR 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PPUSH
8344: CALL_OW 69
8348: ST_TO_ADDR
// if not tmp then
8349: LD_VAR 0 3
8353: NOT
8354: IFFALSE 8358
// exit ;
8356: GO 8505
// if tmp > 5 then
8358: LD_VAR 0 3
8362: PUSH
8363: LD_INT 5
8365: GREATER
8366: IFFALSE 8378
// k := 5 else
8368: LD_ADDR_VAR 0 2
8372: PUSH
8373: LD_INT 5
8375: ST_TO_ADDR
8376: GO 8388
// k := tmp ;
8378: LD_ADDR_VAR 0 2
8382: PUSH
8383: LD_VAR 0 3
8387: ST_TO_ADDR
// for i := 1 to k do
8388: LD_ADDR_VAR 0 1
8392: PUSH
8393: DOUBLE
8394: LD_INT 1
8396: DEC
8397: ST_TO_ADDR
8398: LD_VAR 0 2
8402: PUSH
8403: FOR_TO
8404: IFFALSE 8503
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8406: LD_VAR 0 3
8410: PUSH
8411: LD_VAR 0 1
8415: ARRAY
8416: PPUSH
8417: LD_VAR 0 1
8421: PUSH
8422: LD_INT 4
8424: MOD
8425: PUSH
8426: LD_INT 1
8428: PLUS
8429: PPUSH
8430: CALL_OW 259
8434: PUSH
8435: LD_INT 10
8437: LESS
8438: IFFALSE 8501
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8440: LD_VAR 0 3
8444: PUSH
8445: LD_VAR 0 1
8449: ARRAY
8450: PPUSH
8451: LD_VAR 0 1
8455: PUSH
8456: LD_INT 4
8458: MOD
8459: PUSH
8460: LD_INT 1
8462: PLUS
8463: PPUSH
8464: LD_VAR 0 3
8468: PUSH
8469: LD_VAR 0 1
8473: ARRAY
8474: PPUSH
8475: LD_VAR 0 1
8479: PUSH
8480: LD_INT 4
8482: MOD
8483: PUSH
8484: LD_INT 1
8486: PLUS
8487: PPUSH
8488: CALL_OW 259
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: PPUSH
8497: CALL_OW 237
8501: GO 8403
8503: POP
8504: POP
// end ;
8505: PPOPN 3
8507: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8508: LD_EXP 8
8512: PUSH
8513: LD_EXP 16
8517: AND
8518: IFFALSE 8538
8520: GO 8522
8522: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8523: LD_INT 4
8525: PPUSH
8526: LD_OWVAR 2
8530: PPUSH
8531: LD_INT 0
8533: PPUSH
8534: CALL_OW 324
8538: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8539: LD_EXP 8
8543: PUSH
8544: LD_EXP 45
8548: AND
8549: IFFALSE 8569
8551: GO 8553
8553: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8554: LD_INT 19
8556: PPUSH
8557: LD_OWVAR 2
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 324
8569: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8570: LD_EXP 8
8574: PUSH
8575: LD_EXP 17
8579: AND
8580: IFFALSE 8682
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin enable ;
8589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_OWVAR 2
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: LD_INT 34
8612: PUSH
8613: LD_INT 11
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 34
8622: PUSH
8623: LD_INT 30
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 69
8643: ST_TO_ADDR
// if not tmp then
8644: LD_VAR 0 2
8648: NOT
8649: IFFALSE 8653
// exit ;
8651: GO 8682
// for i in tmp do
8653: LD_ADDR_VAR 0 1
8657: PUSH
8658: LD_VAR 0 2
8662: PUSH
8663: FOR_IN
8664: IFFALSE 8680
// begin SetLives ( i , 0 ) ;
8666: LD_VAR 0 1
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 234
// end ;
8678: GO 8663
8680: POP
8681: POP
// end ;
8682: PPOPN 2
8684: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8685: LD_EXP 8
8689: PUSH
8690: LD_EXP 18
8694: AND
8695: IFFALSE 8715
8697: GO 8699
8699: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8700: LD_INT 32
8702: PPUSH
8703: LD_OWVAR 2
8707: PPUSH
8708: LD_INT 0
8710: PPUSH
8711: CALL_OW 324
8715: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8716: LD_EXP 8
8720: PUSH
8721: LD_EXP 19
8725: AND
8726: IFFALSE 8907
8728: GO 8730
8730: DISABLE
8731: LD_INT 0
8733: PPUSH
8734: PPUSH
8735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8736: LD_ADDR_VAR 0 2
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 33
8755: PUSH
8756: LD_INT 3
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PPUSH
8767: CALL_OW 69
8771: ST_TO_ADDR
// if not tmp then
8772: LD_VAR 0 2
8776: NOT
8777: IFFALSE 8781
// exit ;
8779: GO 8907
// side := 0 ;
8781: LD_ADDR_VAR 0 3
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// for i := 1 to 8 do
8789: LD_ADDR_VAR 0 1
8793: PUSH
8794: DOUBLE
8795: LD_INT 1
8797: DEC
8798: ST_TO_ADDR
8799: LD_INT 8
8801: PUSH
8802: FOR_TO
8803: IFFALSE 8851
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8805: LD_OWVAR 2
8809: PUSH
8810: LD_VAR 0 1
8814: NONEQUAL
8815: PUSH
8816: LD_OWVAR 2
8820: PPUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 81
8830: PUSH
8831: LD_INT 2
8833: EQUAL
8834: AND
8835: IFFALSE 8849
// begin side := i ;
8837: LD_ADDR_VAR 0 3
8841: PUSH
8842: LD_VAR 0 1
8846: ST_TO_ADDR
// break ;
8847: GO 8851
// end ;
8849: GO 8802
8851: POP
8852: POP
// if not side then
8853: LD_VAR 0 3
8857: NOT
8858: IFFALSE 8862
// exit ;
8860: GO 8907
// for i := 1 to tmp do
8862: LD_ADDR_VAR 0 1
8866: PUSH
8867: DOUBLE
8868: LD_INT 1
8870: DEC
8871: ST_TO_ADDR
8872: LD_VAR 0 2
8876: PUSH
8877: FOR_TO
8878: IFFALSE 8905
// if Prob ( 60 ) then
8880: LD_INT 60
8882: PPUSH
8883: CALL_OW 13
8887: IFFALSE 8903
// SetSide ( i , side ) ;
8889: LD_VAR 0 1
8893: PPUSH
8894: LD_VAR 0 3
8898: PPUSH
8899: CALL_OW 235
8903: GO 8877
8905: POP
8906: POP
// end ;
8907: PPOPN 3
8909: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8910: LD_EXP 8
8914: PUSH
8915: LD_EXP 21
8919: AND
8920: IFFALSE 9039
8922: GO 8924
8924: DISABLE
8925: LD_INT 0
8927: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8928: LD_ADDR_VAR 0 1
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_OWVAR 2
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 21
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: LD_INT 3
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 0
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: PPUSH
8977: CALL_OW 69
8981: PUSH
8982: FOR_IN
8983: IFFALSE 9037
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 257
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: LD_INT 2
9000: PUSH
9001: LD_INT 3
9003: PUSH
9004: LD_INT 4
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: IN
9013: IFFALSE 9035
// SetClass ( un , rand ( 1 , 4 ) ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: LD_INT 4
9025: PPUSH
9026: CALL_OW 12
9030: PPUSH
9031: CALL_OW 336
9035: GO 8982
9037: POP
9038: POP
// end ;
9039: PPOPN 1
9041: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9042: LD_EXP 8
9046: PUSH
9047: LD_EXP 20
9051: AND
9052: IFFALSE 9131
9054: GO 9056
9056: DISABLE
9057: LD_INT 0
9059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9060: LD_ADDR_VAR 0 1
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_OWVAR 2
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 21
9079: PUSH
9080: LD_INT 3
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: ST_TO_ADDR
// if not tmp then
9096: LD_VAR 0 1
9100: NOT
9101: IFFALSE 9105
// exit ;
9103: GO 9131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9105: LD_VAR 0 1
9109: PUSH
9110: LD_INT 1
9112: PPUSH
9113: LD_VAR 0 1
9117: PPUSH
9118: CALL_OW 12
9122: ARRAY
9123: PPUSH
9124: LD_INT 100
9126: PPUSH
9127: CALL_OW 234
// end ;
9131: PPOPN 1
9133: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9134: LD_EXP 8
9138: PUSH
9139: LD_EXP 22
9143: AND
9144: IFFALSE 9242
9146: GO 9148
9148: DISABLE
9149: LD_INT 0
9151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9152: LD_ADDR_VAR 0 1
9156: PUSH
9157: LD_INT 22
9159: PUSH
9160: LD_OWVAR 2
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 21
9171: PUSH
9172: LD_INT 1
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PPUSH
9183: CALL_OW 69
9187: ST_TO_ADDR
// if not tmp then
9188: LD_VAR 0 1
9192: NOT
9193: IFFALSE 9197
// exit ;
9195: GO 9242
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9197: LD_VAR 0 1
9201: PUSH
9202: LD_INT 1
9204: PPUSH
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 12
9214: ARRAY
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 4
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 3000
9229: PPUSH
9230: LD_INT 9000
9232: PPUSH
9233: CALL_OW 12
9237: PPUSH
9238: CALL_OW 492
// end ;
9242: PPOPN 1
9244: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9245: LD_EXP 8
9249: PUSH
9250: LD_EXP 23
9254: AND
9255: IFFALSE 9275
9257: GO 9259
9259: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9260: LD_INT 1
9262: PPUSH
9263: LD_OWVAR 2
9267: PPUSH
9268: LD_INT 0
9270: PPUSH
9271: CALL_OW 324
9275: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9276: LD_EXP 8
9280: PUSH
9281: LD_EXP 24
9285: AND
9286: IFFALSE 9369
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_INT 22
9302: PUSH
9303: LD_OWVAR 2
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 21
9314: PUSH
9315: LD_INT 3
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PPUSH
9326: CALL_OW 69
9330: ST_TO_ADDR
// if not tmp then
9331: LD_VAR 0 2
9335: NOT
9336: IFFALSE 9340
// exit ;
9338: GO 9369
// for i in tmp do
9340: LD_ADDR_VAR 0 1
9344: PUSH
9345: LD_VAR 0 2
9349: PUSH
9350: FOR_IN
9351: IFFALSE 9367
// SetBLevel ( i , 10 ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: LD_INT 10
9360: PPUSH
9361: CALL_OW 241
9365: GO 9350
9367: POP
9368: POP
// end ;
9369: PPOPN 2
9371: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9372: LD_EXP 8
9376: PUSH
9377: LD_EXP 25
9381: AND
9382: IFFALSE 9493
9384: GO 9386
9386: DISABLE
9387: LD_INT 0
9389: PPUSH
9390: PPUSH
9391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9392: LD_ADDR_VAR 0 3
9396: PUSH
9397: LD_INT 22
9399: PUSH
9400: LD_OWVAR 2
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 25
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PPUSH
9423: CALL_OW 69
9427: ST_TO_ADDR
// if not tmp then
9428: LD_VAR 0 3
9432: NOT
9433: IFFALSE 9437
// exit ;
9435: GO 9493
// un := tmp [ rand ( 1 , tmp ) ] ;
9437: LD_ADDR_VAR 0 2
9441: PUSH
9442: LD_VAR 0 3
9446: PUSH
9447: LD_INT 1
9449: PPUSH
9450: LD_VAR 0 3
9454: PPUSH
9455: CALL_OW 12
9459: ARRAY
9460: ST_TO_ADDR
// if Crawls ( un ) then
9461: LD_VAR 0 2
9465: PPUSH
9466: CALL_OW 318
9470: IFFALSE 9481
// ComWalk ( un ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9481: LD_VAR 0 2
9485: PPUSH
9486: LD_INT 5
9488: PPUSH
9489: CALL_OW 336
// end ;
9493: PPOPN 3
9495: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9496: LD_EXP 8
9500: PUSH
9501: LD_EXP 26
9505: AND
9506: PUSH
9507: LD_OWVAR 67
9511: PUSH
9512: LD_INT 4
9514: LESS
9515: AND
9516: IFFALSE 9535
9518: GO 9520
9520: DISABLE
// begin Difficulty := Difficulty + 1 ;
9521: LD_ADDR_OWVAR 67
9525: PUSH
9526: LD_OWVAR 67
9530: PUSH
9531: LD_INT 1
9533: PLUS
9534: ST_TO_ADDR
// end ;
9535: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9536: LD_EXP 8
9540: PUSH
9541: LD_EXP 27
9545: AND
9546: IFFALSE 9649
9548: GO 9550
9550: DISABLE
9551: LD_INT 0
9553: PPUSH
// begin for i := 1 to 5 do
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: DOUBLE
9560: LD_INT 1
9562: DEC
9563: ST_TO_ADDR
9564: LD_INT 5
9566: PUSH
9567: FOR_TO
9568: IFFALSE 9647
// begin uc_nation := nation_nature ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 0
9577: ST_TO_ADDR
// uc_side := 0 ;
9578: LD_ADDR_OWVAR 20
9582: PUSH
9583: LD_INT 0
9585: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9586: LD_ADDR_OWVAR 29
9590: PUSH
9591: LD_INT 12
9593: PUSH
9594: LD_INT 12
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: ST_TO_ADDR
// hc_agressivity := 20 ;
9601: LD_ADDR_OWVAR 35
9605: PUSH
9606: LD_INT 20
9608: ST_TO_ADDR
// hc_class := class_tiger ;
9609: LD_ADDR_OWVAR 28
9613: PUSH
9614: LD_INT 14
9616: ST_TO_ADDR
// hc_gallery :=  ;
9617: LD_ADDR_OWVAR 33
9621: PUSH
9622: LD_STRING 
9624: ST_TO_ADDR
// hc_name :=  ;
9625: LD_ADDR_OWVAR 26
9629: PUSH
9630: LD_STRING 
9632: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9633: CALL_OW 44
9637: PPUSH
9638: LD_INT 0
9640: PPUSH
9641: CALL_OW 51
// end ;
9645: GO 9567
9647: POP
9648: POP
// end ;
9649: PPOPN 1
9651: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9652: LD_EXP 8
9656: PUSH
9657: LD_EXP 28
9661: AND
9662: IFFALSE 9671
9664: GO 9666
9666: DISABLE
// StreamSibBomb ;
9667: CALL 9672 0 0
9671: END
// export function StreamSibBomb ; var i , x , y ; begin
9672: LD_INT 0
9674: PPUSH
9675: PPUSH
9676: PPUSH
9677: PPUSH
// result := false ;
9678: LD_ADDR_VAR 0 1
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// for i := 1 to 16 do
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: DOUBLE
9692: LD_INT 1
9694: DEC
9695: ST_TO_ADDR
9696: LD_INT 16
9698: PUSH
9699: FOR_TO
9700: IFFALSE 9899
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9702: LD_ADDR_VAR 0 3
9706: PUSH
9707: LD_INT 10
9709: PUSH
9710: LD_INT 20
9712: PUSH
9713: LD_INT 30
9715: PUSH
9716: LD_INT 40
9718: PUSH
9719: LD_INT 50
9721: PUSH
9722: LD_INT 60
9724: PUSH
9725: LD_INT 70
9727: PUSH
9728: LD_INT 80
9730: PUSH
9731: LD_INT 90
9733: PUSH
9734: LD_INT 100
9736: PUSH
9737: LD_INT 110
9739: PUSH
9740: LD_INT 120
9742: PUSH
9743: LD_INT 130
9745: PUSH
9746: LD_INT 140
9748: PUSH
9749: LD_INT 150
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 1
9771: PPUSH
9772: LD_INT 15
9774: PPUSH
9775: CALL_OW 12
9779: ARRAY
9780: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9781: LD_ADDR_VAR 0 4
9785: PUSH
9786: LD_INT 10
9788: PUSH
9789: LD_INT 20
9791: PUSH
9792: LD_INT 30
9794: PUSH
9795: LD_INT 40
9797: PUSH
9798: LD_INT 50
9800: PUSH
9801: LD_INT 60
9803: PUSH
9804: LD_INT 70
9806: PUSH
9807: LD_INT 80
9809: PUSH
9810: LD_INT 90
9812: PUSH
9813: LD_INT 100
9815: PUSH
9816: LD_INT 110
9818: PUSH
9819: LD_INT 120
9821: PUSH
9822: LD_INT 130
9824: PUSH
9825: LD_INT 140
9827: PUSH
9828: LD_INT 150
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_INT 15
9853: PPUSH
9854: CALL_OW 12
9858: ARRAY
9859: ST_TO_ADDR
// if ValidHex ( x , y ) then
9860: LD_VAR 0 3
9864: PPUSH
9865: LD_VAR 0 4
9869: PPUSH
9870: CALL_OW 488
9874: IFFALSE 9897
// begin result := [ x , y ] ;
9876: LD_ADDR_VAR 0 1
9880: PUSH
9881: LD_VAR 0 3
9885: PUSH
9886: LD_VAR 0 4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: ST_TO_ADDR
// break ;
9895: GO 9899
// end ; end ;
9897: GO 9699
9899: POP
9900: POP
// if result then
9901: LD_VAR 0 1
9905: IFFALSE 9965
// begin ToLua ( playSibBomb() ) ;
9907: LD_STRING playSibBomb()
9909: PPUSH
9910: CALL_OW 559
// wait ( 0 0$14 ) ;
9914: LD_INT 490
9916: PPUSH
9917: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9921: LD_VAR 0 1
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PPUSH
9930: LD_VAR 0 1
9934: PUSH
9935: LD_INT 2
9937: ARRAY
9938: PPUSH
9939: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9943: LD_VAR 0 1
9947: PUSH
9948: LD_INT 1
9950: ARRAY
9951: PPUSH
9952: LD_VAR 0 1
9956: PUSH
9957: LD_INT 2
9959: ARRAY
9960: PPUSH
9961: CALL_OW 429
// end ; end ;
9965: LD_VAR 0 1
9969: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9970: LD_EXP 8
9974: PUSH
9975: LD_EXP 30
9979: AND
9980: IFFALSE 9992
9982: GO 9984
9984: DISABLE
// YouLost (  ) ;
9985: LD_STRING 
9987: PPUSH
9988: CALL_OW 104
9992: END
// every 0 0$1 trigger StreamModeActive and sFog do
9993: LD_EXP 8
9997: PUSH
9998: LD_EXP 29
10002: AND
10003: IFFALSE 10017
10005: GO 10007
10007: DISABLE
// FogOff ( your_side ) ;
10008: LD_OWVAR 2
10012: PPUSH
10013: CALL_OW 344
10017: END
// every 0 0$1 trigger StreamModeActive and sSun do
10018: LD_EXP 8
10022: PUSH
10023: LD_EXP 31
10027: AND
10028: IFFALSE 10056
10030: GO 10032
10032: DISABLE
// begin solar_recharge_percent := 0 ;
10033: LD_ADDR_OWVAR 79
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10041: LD_INT 10500
10043: PPUSH
10044: CALL_OW 67
// solar_recharge_percent := 100 ;
10048: LD_ADDR_OWVAR 79
10052: PUSH
10053: LD_INT 100
10055: ST_TO_ADDR
// end ;
10056: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10057: LD_EXP 8
10061: PUSH
10062: LD_EXP 32
10066: AND
10067: IFFALSE 10306
10069: GO 10071
10071: DISABLE
10072: LD_INT 0
10074: PPUSH
10075: PPUSH
10076: PPUSH
// begin tmp := [ ] ;
10077: LD_ADDR_VAR 0 3
10081: PUSH
10082: EMPTY
10083: ST_TO_ADDR
// for i := 1 to 6 do
10084: LD_ADDR_VAR 0 1
10088: PUSH
10089: DOUBLE
10090: LD_INT 1
10092: DEC
10093: ST_TO_ADDR
10094: LD_INT 6
10096: PUSH
10097: FOR_TO
10098: IFFALSE 10203
// begin uc_nation := nation_nature ;
10100: LD_ADDR_OWVAR 21
10104: PUSH
10105: LD_INT 0
10107: ST_TO_ADDR
// uc_side := 0 ;
10108: LD_ADDR_OWVAR 20
10112: PUSH
10113: LD_INT 0
10115: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10116: LD_ADDR_OWVAR 29
10120: PUSH
10121: LD_INT 12
10123: PUSH
10124: LD_INT 12
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: ST_TO_ADDR
// hc_agressivity := 20 ;
10131: LD_ADDR_OWVAR 35
10135: PUSH
10136: LD_INT 20
10138: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10139: LD_ADDR_OWVAR 28
10143: PUSH
10144: LD_INT 17
10146: ST_TO_ADDR
// hc_gallery :=  ;
10147: LD_ADDR_OWVAR 33
10151: PUSH
10152: LD_STRING 
10154: ST_TO_ADDR
// hc_name :=  ;
10155: LD_ADDR_OWVAR 26
10159: PUSH
10160: LD_STRING 
10162: ST_TO_ADDR
// un := CreateHuman ;
10163: LD_ADDR_VAR 0 2
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10173: LD_VAR 0 2
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 51
// tmp := tmp ^ un ;
10185: LD_ADDR_VAR 0 3
10189: PUSH
10190: LD_VAR 0 3
10194: PUSH
10195: LD_VAR 0 2
10199: ADD
10200: ST_TO_ADDR
// end ;
10201: GO 10097
10203: POP
10204: POP
// repeat wait ( 0 0$1 ) ;
10205: LD_INT 35
10207: PPUSH
10208: CALL_OW 67
// for un in tmp do
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_VAR 0 3
10221: PUSH
10222: FOR_IN
10223: IFFALSE 10297
// begin if IsDead ( un ) then
10225: LD_VAR 0 2
10229: PPUSH
10230: CALL_OW 301
10234: IFFALSE 10254
// begin tmp := tmp diff un ;
10236: LD_ADDR_VAR 0 3
10240: PUSH
10241: LD_VAR 0 3
10245: PUSH
10246: LD_VAR 0 2
10250: DIFF
10251: ST_TO_ADDR
// continue ;
10252: GO 10222
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10254: LD_VAR 0 2
10258: PPUSH
10259: LD_INT 3
10261: PUSH
10262: LD_INT 22
10264: PUSH
10265: LD_INT 0
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PPUSH
10276: CALL_OW 69
10280: PPUSH
10281: LD_VAR 0 2
10285: PPUSH
10286: CALL_OW 74
10290: PPUSH
10291: CALL_OW 115
// end ;
10295: GO 10222
10297: POP
10298: POP
// until not tmp ;
10299: LD_VAR 0 3
10303: NOT
10304: IFFALSE 10205
// end ;
10306: PPOPN 3
10308: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10309: LD_EXP 8
10313: PUSH
10314: LD_EXP 33
10318: AND
10319: IFFALSE 10373
10321: GO 10323
10323: DISABLE
// begin ToLua ( displayTroll(); ) ;
10324: LD_STRING displayTroll();
10326: PPUSH
10327: CALL_OW 559
// wait ( 3 3$00 ) ;
10331: LD_INT 6300
10333: PPUSH
10334: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10338: LD_STRING hideTroll();
10340: PPUSH
10341: CALL_OW 559
// wait ( 1 1$00 ) ;
10345: LD_INT 2100
10347: PPUSH
10348: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10352: LD_STRING displayTroll();
10354: PPUSH
10355: CALL_OW 559
// wait ( 1 1$00 ) ;
10359: LD_INT 2100
10361: PPUSH
10362: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10366: LD_STRING hideTroll();
10368: PPUSH
10369: CALL_OW 559
// end ;
10373: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10374: LD_EXP 8
10378: PUSH
10379: LD_EXP 34
10383: AND
10384: IFFALSE 10447
10386: GO 10388
10388: DISABLE
10389: LD_INT 0
10391: PPUSH
// begin p := 0 ;
10392: LD_ADDR_VAR 0 1
10396: PUSH
10397: LD_INT 0
10399: ST_TO_ADDR
// repeat game_speed := 1 ;
10400: LD_ADDR_OWVAR 65
10404: PUSH
10405: LD_INT 1
10407: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10408: LD_INT 35
10410: PPUSH
10411: CALL_OW 67
// p := p + 1 ;
10415: LD_ADDR_VAR 0 1
10419: PUSH
10420: LD_VAR 0 1
10424: PUSH
10425: LD_INT 1
10427: PLUS
10428: ST_TO_ADDR
// until p >= 60 ;
10429: LD_VAR 0 1
10433: PUSH
10434: LD_INT 60
10436: GREATEREQUAL
10437: IFFALSE 10400
// game_speed := 4 ;
10439: LD_ADDR_OWVAR 65
10443: PUSH
10444: LD_INT 4
10446: ST_TO_ADDR
// end ;
10447: PPOPN 1
10449: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10450: LD_EXP 8
10454: PUSH
10455: LD_EXP 35
10459: AND
10460: IFFALSE 10606
10462: GO 10464
10464: DISABLE
10465: LD_INT 0
10467: PPUSH
10468: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10469: LD_ADDR_VAR 0 1
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_OWVAR 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: LD_INT 30
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 30
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PPUSH
10518: CALL_OW 69
10522: ST_TO_ADDR
// if not depot then
10523: LD_VAR 0 1
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 10606
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_VAR 0 1
10541: PUSH
10542: LD_INT 1
10544: PPUSH
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL_OW 12
10554: ARRAY
10555: PPUSH
10556: CALL_OW 274
10560: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10561: LD_VAR 0 2
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: LD_INT 0
10571: PPUSH
10572: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10576: LD_VAR 0 2
10580: PPUSH
10581: LD_INT 2
10583: PPUSH
10584: LD_INT 0
10586: PPUSH
10587: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10591: LD_VAR 0 2
10595: PPUSH
10596: LD_INT 3
10598: PPUSH
10599: LD_INT 0
10601: PPUSH
10602: CALL_OW 277
// end ;
10606: PPOPN 2
10608: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10609: LD_EXP 8
10613: PUSH
10614: LD_EXP 36
10618: AND
10619: IFFALSE 10716
10621: GO 10623
10623: DISABLE
10624: LD_INT 0
10626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: LD_INT 22
10634: PUSH
10635: LD_OWVAR 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 3
10656: PUSH
10657: LD_INT 23
10659: PUSH
10660: LD_INT 0
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: PPUSH
10676: CALL_OW 69
10680: ST_TO_ADDR
// if not tmp then
10681: LD_VAR 0 1
10685: NOT
10686: IFFALSE 10690
// exit ;
10688: GO 10716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10690: LD_VAR 0 1
10694: PUSH
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 12
10707: ARRAY
10708: PPUSH
10709: LD_INT 200
10711: PPUSH
10712: CALL_OW 234
// end ;
10716: PPOPN 1
10718: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10719: LD_EXP 8
10723: PUSH
10724: LD_EXP 37
10728: AND
10729: IFFALSE 10808
10731: GO 10733
10733: DISABLE
10734: LD_INT 0
10736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10737: LD_ADDR_VAR 0 1
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_OWVAR 2
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 21
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PPUSH
10768: CALL_OW 69
10772: ST_TO_ADDR
// if not tmp then
10773: LD_VAR 0 1
10777: NOT
10778: IFFALSE 10782
// exit ;
10780: GO 10808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10782: LD_VAR 0 1
10786: PUSH
10787: LD_INT 1
10789: PPUSH
10790: LD_VAR 0 1
10794: PPUSH
10795: CALL_OW 12
10799: ARRAY
10800: PPUSH
10801: LD_INT 60
10803: PPUSH
10804: CALL_OW 234
// end ;
10808: PPOPN 1
10810: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10811: LD_EXP 8
10815: PUSH
10816: LD_EXP 38
10820: AND
10821: IFFALSE 10920
10823: GO 10825
10825: DISABLE
10826: LD_INT 0
10828: PPUSH
10829: PPUSH
// begin enable ;
10830: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10831: LD_ADDR_VAR 0 1
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_OWVAR 2
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 61
10850: PUSH
10851: EMPTY
10852: LIST
10853: PUSH
10854: LD_INT 33
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: PPUSH
10869: CALL_OW 69
10873: ST_TO_ADDR
// if not tmp then
10874: LD_VAR 0 1
10878: NOT
10879: IFFALSE 10883
// exit ;
10881: GO 10920
// for i in tmp do
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_VAR 0 1
10892: PUSH
10893: FOR_IN
10894: IFFALSE 10918
// if IsControledBy ( i ) then
10896: LD_VAR 0 2
10900: PPUSH
10901: CALL_OW 312
10905: IFFALSE 10916
// ComUnlink ( i ) ;
10907: LD_VAR 0 2
10911: PPUSH
10912: CALL_OW 136
10916: GO 10893
10918: POP
10919: POP
// end ;
10920: PPOPN 2
10922: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10923: LD_EXP 8
10927: PUSH
10928: LD_EXP 39
10932: AND
10933: IFFALSE 11073
10935: GO 10937
10937: DISABLE
10938: LD_INT 0
10940: PPUSH
10941: PPUSH
// begin ToLua ( displayPowell(); ) ;
10942: LD_STRING displayPowell();
10944: PPUSH
10945: CALL_OW 559
// uc_side := 0 ;
10949: LD_ADDR_OWVAR 20
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// uc_nation := 2 ;
10957: LD_ADDR_OWVAR 21
10961: PUSH
10962: LD_INT 2
10964: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10965: LD_ADDR_OWVAR 37
10969: PUSH
10970: LD_INT 14
10972: ST_TO_ADDR
// vc_engine := engine_siberite ;
10973: LD_ADDR_OWVAR 39
10977: PUSH
10978: LD_INT 3
10980: ST_TO_ADDR
// vc_control := control_apeman ;
10981: LD_ADDR_OWVAR 38
10985: PUSH
10986: LD_INT 5
10988: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10989: LD_ADDR_OWVAR 40
10993: PUSH
10994: LD_INT 29
10996: ST_TO_ADDR
// un := CreateVehicle ;
10997: LD_ADDR_VAR 0 2
11001: PUSH
11002: CALL_OW 45
11006: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_INT 1
11014: PPUSH
11015: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11019: LD_INT 35
11021: PPUSH
11022: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11026: LD_VAR 0 2
11030: PPUSH
11031: LD_INT 22
11033: PUSH
11034: LD_OWVAR 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 69
11047: PPUSH
11048: LD_VAR 0 2
11052: PPUSH
11053: CALL_OW 74
11057: PPUSH
11058: CALL_OW 115
// until IsDead ( un ) ;
11062: LD_VAR 0 2
11066: PPUSH
11067: CALL_OW 301
11071: IFFALSE 11019
// end ;
11073: PPOPN 2
11075: END
// every 0 0$1 trigger StreamModeActive and sStu do
11076: LD_EXP 8
11080: PUSH
11081: LD_EXP 47
11085: AND
11086: IFFALSE 11102
11088: GO 11090
11090: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11091: LD_STRING displayStucuk();
11093: PPUSH
11094: CALL_OW 559
// ResetFog ;
11098: CALL_OW 335
// end ;
11102: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11103: LD_EXP 8
11107: PUSH
11108: LD_EXP 40
11112: AND
11113: IFFALSE 11254
11115: GO 11117
11117: DISABLE
11118: LD_INT 0
11120: PPUSH
11121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: LD_INT 22
11129: PUSH
11130: LD_OWVAR 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PPUSH
11153: CALL_OW 69
11157: ST_TO_ADDR
// if not tmp then
11158: LD_VAR 0 2
11162: NOT
11163: IFFALSE 11167
// exit ;
11165: GO 11254
// un := tmp [ rand ( 1 , tmp ) ] ;
11167: LD_ADDR_VAR 0 1
11171: PUSH
11172: LD_VAR 0 2
11176: PUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 12
11189: ARRAY
11190: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11191: LD_VAR 0 1
11195: PPUSH
11196: LD_INT 0
11198: PPUSH
11199: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11203: LD_VAR 0 1
11207: PPUSH
11208: LD_OWVAR 3
11212: PUSH
11213: LD_VAR 0 1
11217: DIFF
11218: PPUSH
11219: LD_VAR 0 1
11223: PPUSH
11224: CALL_OW 74
11228: PPUSH
11229: CALL_OW 115
// wait ( 0 0$20 ) ;
11233: LD_INT 700
11235: PPUSH
11236: CALL_OW 67
// SetSide ( un , your_side ) ;
11240: LD_VAR 0 1
11244: PPUSH
11245: LD_OWVAR 2
11249: PPUSH
11250: CALL_OW 235
// end ;
11254: PPOPN 2
11256: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11257: LD_EXP 8
11261: PUSH
11262: LD_EXP 41
11266: AND
11267: IFFALSE 11373
11269: GO 11271
11271: DISABLE
11272: LD_INT 0
11274: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11275: LD_ADDR_VAR 0 1
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_OWVAR 2
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 2
11294: PUSH
11295: LD_INT 30
11297: PUSH
11298: LD_INT 0
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: ST_TO_ADDR
// if not depot then
11329: LD_VAR 0 1
11333: NOT
11334: IFFALSE 11338
// exit ;
11336: GO 11373
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11338: LD_VAR 0 1
11342: PUSH
11343: LD_INT 1
11345: ARRAY
11346: PPUSH
11347: CALL_OW 250
11351: PPUSH
11352: LD_VAR 0 1
11356: PUSH
11357: LD_INT 1
11359: ARRAY
11360: PPUSH
11361: CALL_OW 251
11365: PPUSH
11366: LD_INT 70
11368: PPUSH
11369: CALL_OW 495
// end ;
11373: PPOPN 1
11375: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11376: LD_EXP 8
11380: PUSH
11381: LD_EXP 42
11385: AND
11386: IFFALSE 11597
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11398: LD_ADDR_VAR 0 5
11402: PUSH
11403: LD_INT 22
11405: PUSH
11406: LD_OWVAR 2
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 21
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PPUSH
11429: CALL_OW 69
11433: ST_TO_ADDR
// if not tmp then
11434: LD_VAR 0 5
11438: NOT
11439: IFFALSE 11443
// exit ;
11441: GO 11597
// for i in tmp do
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: LD_VAR 0 5
11452: PUSH
11453: FOR_IN
11454: IFFALSE 11595
// begin d := rand ( 0 , 5 ) ;
11456: LD_ADDR_VAR 0 4
11460: PUSH
11461: LD_INT 0
11463: PPUSH
11464: LD_INT 5
11466: PPUSH
11467: CALL_OW 12
11471: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: LD_VAR 0 1
11481: PPUSH
11482: CALL_OW 250
11486: PPUSH
11487: LD_VAR 0 4
11491: PPUSH
11492: LD_INT 3
11494: PPUSH
11495: LD_INT 12
11497: PPUSH
11498: CALL_OW 12
11502: PPUSH
11503: CALL_OW 272
11507: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11508: LD_ADDR_VAR 0 3
11512: PUSH
11513: LD_VAR 0 1
11517: PPUSH
11518: CALL_OW 251
11522: PPUSH
11523: LD_VAR 0 4
11527: PPUSH
11528: LD_INT 3
11530: PPUSH
11531: LD_INT 12
11533: PPUSH
11534: CALL_OW 12
11538: PPUSH
11539: CALL_OW 273
11543: ST_TO_ADDR
// if ValidHex ( x , y ) then
11544: LD_VAR 0 2
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: CALL_OW 488
11558: IFFALSE 11593
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11560: LD_VAR 0 1
11564: PPUSH
11565: LD_VAR 0 2
11569: PPUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 3
11577: PPUSH
11578: LD_INT 6
11580: PPUSH
11581: CALL_OW 12
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 483
// end ;
11593: GO 11453
11595: POP
11596: POP
// end ;
11597: PPOPN 5
11599: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11600: LD_EXP 8
11604: PUSH
11605: LD_EXP 43
11609: AND
11610: IFFALSE 11704
11612: GO 11614
11614: DISABLE
11615: LD_INT 0
11617: PPUSH
11618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11619: LD_ADDR_VAR 0 2
11623: PUSH
11624: LD_INT 22
11626: PUSH
11627: LD_OWVAR 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 32
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 69
11665: ST_TO_ADDR
// if not tmp then
11666: LD_VAR 0 2
11670: NOT
11671: IFFALSE 11675
// exit ;
11673: GO 11704
// for i in tmp do
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_VAR 0 2
11684: PUSH
11685: FOR_IN
11686: IFFALSE 11702
// SetFuel ( i , 0 ) ;
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_INT 0
11695: PPUSH
11696: CALL_OW 240
11700: GO 11685
11702: POP
11703: POP
// end ;
11704: PPOPN 2
11706: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11707: LD_EXP 8
11711: PUSH
11712: LD_EXP 44
11716: AND
11717: IFFALSE 11783
11719: GO 11721
11721: DISABLE
11722: LD_INT 0
11724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_OWVAR 2
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 30
11744: PUSH
11745: LD_INT 29
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: ST_TO_ADDR
// if not tmp then
11761: LD_VAR 0 1
11765: NOT
11766: IFFALSE 11770
// exit ;
11768: GO 11783
// DestroyUnit ( tmp [ 1 ] ) ;
11770: LD_VAR 0 1
11774: PUSH
11775: LD_INT 1
11777: ARRAY
11778: PPUSH
11779: CALL_OW 65
// end ;
11783: PPOPN 1
11785: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11786: LD_EXP 8
11790: PUSH
11791: LD_EXP 46
11795: AND
11796: IFFALSE 11925
11798: GO 11800
11800: DISABLE
11801: LD_INT 0
11803: PPUSH
// begin uc_side := 0 ;
11804: LD_ADDR_OWVAR 20
11808: PUSH
11809: LD_INT 0
11811: ST_TO_ADDR
// uc_nation := nation_arabian ;
11812: LD_ADDR_OWVAR 21
11816: PUSH
11817: LD_INT 2
11819: ST_TO_ADDR
// hc_gallery :=  ;
11820: LD_ADDR_OWVAR 33
11824: PUSH
11825: LD_STRING 
11827: ST_TO_ADDR
// hc_name :=  ;
11828: LD_ADDR_OWVAR 26
11832: PUSH
11833: LD_STRING 
11835: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11836: LD_INT 1
11838: PPUSH
11839: LD_INT 11
11841: PPUSH
11842: LD_INT 10
11844: PPUSH
11845: CALL_OW 380
// un := CreateHuman ;
11849: LD_ADDR_VAR 0 1
11853: PUSH
11854: CALL_OW 44
11858: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11859: LD_VAR 0 1
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11871: LD_INT 35
11873: PPUSH
11874: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_INT 22
11885: PUSH
11886: LD_OWVAR 2
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: PPUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 74
11909: PPUSH
11910: CALL_OW 115
// until IsDead ( un ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: CALL_OW 301
11923: IFFALSE 11871
// end ;
11925: PPOPN 1
11927: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11928: LD_EXP 8
11932: PUSH
11933: LD_EXP 48
11937: AND
11938: IFFALSE 11950
11940: GO 11942
11942: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11943: LD_STRING earthquake(getX(game), 0, 32)
11945: PPUSH
11946: CALL_OW 559
11950: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11951: LD_EXP 8
11955: PUSH
11956: LD_EXP 49
11960: AND
11961: IFFALSE 12052
11963: GO 11965
11965: DISABLE
11966: LD_INT 0
11968: PPUSH
// begin enable ;
11969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11970: LD_ADDR_VAR 0 1
11974: PUSH
11975: LD_INT 22
11977: PUSH
11978: LD_OWVAR 2
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 21
11989: PUSH
11990: LD_INT 2
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 33
11999: PUSH
12000: LD_INT 3
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: PPUSH
12012: CALL_OW 69
12016: ST_TO_ADDR
// if not tmp then
12017: LD_VAR 0 1
12021: NOT
12022: IFFALSE 12026
// exit ;
12024: GO 12052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12026: LD_VAR 0 1
12030: PUSH
12031: LD_INT 1
12033: PPUSH
12034: LD_VAR 0 1
12038: PPUSH
12039: CALL_OW 12
12043: ARRAY
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 234
// end ;
12052: PPOPN 1
12054: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12055: LD_EXP 8
12059: PUSH
12060: LD_EXP 50
12064: AND
12065: IFFALSE 12206
12067: GO 12069
12069: DISABLE
12070: LD_INT 0
12072: PPUSH
12073: PPUSH
12074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12075: LD_ADDR_VAR 0 3
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_OWVAR 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 25
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 69
12110: ST_TO_ADDR
// if not tmp then
12111: LD_VAR 0 3
12115: NOT
12116: IFFALSE 12120
// exit ;
12118: GO 12206
// un := tmp [ rand ( 1 , tmp ) ] ;
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: LD_VAR 0 3
12129: PUSH
12130: LD_INT 1
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: CALL_OW 12
12142: ARRAY
12143: ST_TO_ADDR
// if Crawls ( un ) then
12144: LD_VAR 0 2
12148: PPUSH
12149: CALL_OW 318
12153: IFFALSE 12164
// ComWalk ( un ) ;
12155: LD_VAR 0 2
12159: PPUSH
12160: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12164: LD_VAR 0 2
12168: PPUSH
12169: LD_INT 9
12171: PPUSH
12172: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12176: LD_INT 28
12178: PPUSH
12179: LD_OWVAR 2
12183: PPUSH
12184: LD_INT 2
12186: PPUSH
12187: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12191: LD_INT 29
12193: PPUSH
12194: LD_OWVAR 2
12198: PPUSH
12199: LD_INT 2
12201: PPUSH
12202: CALL_OW 322
// end ;
12206: PPOPN 3
12208: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12209: LD_EXP 8
12213: PUSH
12214: LD_EXP 51
12218: AND
12219: IFFALSE 12330
12221: GO 12223
12223: DISABLE
12224: LD_INT 0
12226: PPUSH
12227: PPUSH
12228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12229: LD_ADDR_VAR 0 3
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_OWVAR 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 25
12248: PUSH
12249: LD_INT 1
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if not tmp then
12265: LD_VAR 0 3
12269: NOT
12270: IFFALSE 12274
// exit ;
12272: GO 12330
// un := tmp [ rand ( 1 , tmp ) ] ;
12274: LD_ADDR_VAR 0 2
12278: PUSH
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: CALL_OW 12
12296: ARRAY
12297: ST_TO_ADDR
// if Crawls ( un ) then
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 318
12307: IFFALSE 12318
// ComWalk ( un ) ;
12309: LD_VAR 0 2
12313: PPUSH
12314: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12318: LD_VAR 0 2
12322: PPUSH
12323: LD_INT 8
12325: PPUSH
12326: CALL_OW 336
// end ;
12330: PPOPN 3
12332: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12333: LD_EXP 8
12337: PUSH
12338: LD_EXP 52
12342: AND
12343: IFFALSE 12487
12345: GO 12347
12347: DISABLE
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12352: LD_ADDR_VAR 0 2
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_OWVAR 2
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 21
12371: PUSH
12372: LD_INT 2
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: LD_INT 34
12384: PUSH
12385: LD_INT 12
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 34
12394: PUSH
12395: LD_INT 51
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 34
12404: PUSH
12405: LD_INT 32
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: ST_TO_ADDR
// if not tmp then
12428: LD_VAR 0 2
12432: NOT
12433: IFFALSE 12437
// exit ;
12435: GO 12487
// for i in tmp do
12437: LD_ADDR_VAR 0 1
12441: PUSH
12442: LD_VAR 0 2
12446: PUSH
12447: FOR_IN
12448: IFFALSE 12485
// if GetCargo ( i , mat_artifact ) = 0 then
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 4
12457: PPUSH
12458: CALL_OW 289
12462: PUSH
12463: LD_INT 0
12465: EQUAL
12466: IFFALSE 12483
// SetCargo ( i , mat_siberit , 100 ) ;
12468: LD_VAR 0 1
12472: PPUSH
12473: LD_INT 3
12475: PPUSH
12476: LD_INT 100
12478: PPUSH
12479: CALL_OW 290
12483: GO 12447
12485: POP
12486: POP
// end ;
12487: PPOPN 2
12489: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12490: LD_EXP 8
12494: PUSH
12495: LD_EXP 53
12499: AND
12500: IFFALSE 12683
12502: GO 12504
12504: DISABLE
12505: LD_INT 0
12507: PPUSH
12508: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12509: LD_ADDR_VAR 0 2
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_OWVAR 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: ST_TO_ADDR
// if not tmp then
12531: LD_VAR 0 2
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12683
// for i := 1 to 2 do
12540: LD_ADDR_VAR 0 1
12544: PUSH
12545: DOUBLE
12546: LD_INT 1
12548: DEC
12549: ST_TO_ADDR
12550: LD_INT 2
12552: PUSH
12553: FOR_TO
12554: IFFALSE 12681
// begin uc_side := your_side ;
12556: LD_ADDR_OWVAR 20
12560: PUSH
12561: LD_OWVAR 2
12565: ST_TO_ADDR
// uc_nation := nation_american ;
12566: LD_ADDR_OWVAR 21
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// vc_chassis := us_morphling ;
12574: LD_ADDR_OWVAR 37
12578: PUSH
12579: LD_INT 5
12581: ST_TO_ADDR
// vc_engine := engine_siberite ;
12582: LD_ADDR_OWVAR 39
12586: PUSH
12587: LD_INT 3
12589: ST_TO_ADDR
// vc_control := control_computer ;
12590: LD_ADDR_OWVAR 38
12594: PUSH
12595: LD_INT 3
12597: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12598: LD_ADDR_OWVAR 40
12602: PUSH
12603: LD_INT 10
12605: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12606: LD_VAR 0 2
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: CALL_OW 310
12619: NOT
12620: IFFALSE 12667
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12622: CALL_OW 45
12626: PPUSH
12627: LD_VAR 0 2
12631: PUSH
12632: LD_INT 1
12634: ARRAY
12635: PPUSH
12636: CALL_OW 250
12640: PPUSH
12641: LD_VAR 0 2
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: CALL_OW 251
12654: PPUSH
12655: LD_INT 12
12657: PPUSH
12658: LD_INT 1
12660: PPUSH
12661: CALL_OW 50
12665: GO 12679
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12667: CALL_OW 45
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 51
// end ;
12679: GO 12553
12681: POP
12682: POP
// end ;
12683: PPOPN 2
12685: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12686: LD_EXP 8
12690: PUSH
12691: LD_EXP 54
12695: AND
12696: IFFALSE 12918
12698: GO 12700
12700: DISABLE
12701: LD_INT 0
12703: PPUSH
12704: PPUSH
12705: PPUSH
12706: PPUSH
12707: PPUSH
12708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12709: LD_ADDR_VAR 0 6
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_OWVAR 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 6
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12918
// s1 := rand ( 1 , 4 ) ;
12772: LD_ADDR_VAR 0 2
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_INT 4
12782: PPUSH
12783: CALL_OW 12
12787: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12788: LD_ADDR_VAR 0 4
12792: PUSH
12793: LD_VAR 0 6
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: PPUSH
12802: LD_VAR 0 2
12806: PPUSH
12807: CALL_OW 259
12811: ST_TO_ADDR
// if s1 = 1 then
12812: LD_VAR 0 2
12816: PUSH
12817: LD_INT 1
12819: EQUAL
12820: IFFALSE 12840
// s2 := rand ( 2 , 4 ) else
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: LD_INT 2
12829: PPUSH
12830: LD_INT 4
12832: PPUSH
12833: CALL_OW 12
12837: ST_TO_ADDR
12838: GO 12848
// s2 := 1 ;
12840: LD_ADDR_VAR 0 3
12844: PUSH
12845: LD_INT 1
12847: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12848: LD_ADDR_VAR 0 5
12852: PUSH
12853: LD_VAR 0 6
12857: PUSH
12858: LD_INT 1
12860: ARRAY
12861: PPUSH
12862: LD_VAR 0 3
12866: PPUSH
12867: CALL_OW 259
12871: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12872: LD_VAR 0 6
12876: PUSH
12877: LD_INT 1
12879: ARRAY
12880: PPUSH
12881: LD_VAR 0 2
12885: PPUSH
12886: LD_VAR 0 5
12890: PPUSH
12891: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12895: LD_VAR 0 6
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: LD_VAR 0 4
12913: PPUSH
12914: CALL_OW 237
// end ;
12918: PPOPN 6
12920: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12921: LD_EXP 8
12925: PUSH
12926: LD_EXP 55
12930: AND
12931: IFFALSE 13010
12933: GO 12935
12935: DISABLE
12936: LD_INT 0
12938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12939: LD_ADDR_VAR 0 1
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_OWVAR 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 30
12958: PUSH
12959: LD_INT 3
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: ST_TO_ADDR
// if not tmp then
12975: LD_VAR 0 1
12979: NOT
12980: IFFALSE 12984
// exit ;
12982: GO 13010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12984: LD_VAR 0 1
12988: PUSH
12989: LD_INT 1
12991: PPUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: CALL_OW 12
13001: ARRAY
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 234
// end ;
13010: PPOPN 1
13012: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13013: LD_EXP 8
13017: PUSH
13018: LD_EXP 56
13022: AND
13023: IFFALSE 13135
13025: GO 13027
13027: DISABLE
13028: LD_INT 0
13030: PPUSH
13031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13032: LD_ADDR_VAR 0 2
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_OWVAR 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 2
13051: PUSH
13052: LD_INT 30
13054: PUSH
13055: LD_INT 27
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 30
13064: PUSH
13065: LD_INT 26
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 28
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 69
13096: ST_TO_ADDR
// if not tmp then
13097: LD_VAR 0 2
13101: NOT
13102: IFFALSE 13106
// exit ;
13104: GO 13135
// for i in tmp do
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_VAR 0 2
13115: PUSH
13116: FOR_IN
13117: IFFALSE 13133
// SetLives ( i , 1 ) ;
13119: LD_VAR 0 1
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 234
13131: GO 13116
13133: POP
13134: POP
// end ;
13135: PPOPN 2
13137: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13138: LD_EXP 8
13142: PUSH
13143: LD_EXP 57
13147: AND
13148: IFFALSE 13435
13150: GO 13152
13152: DISABLE
13153: LD_INT 0
13155: PPUSH
13156: PPUSH
13157: PPUSH
// begin i := rand ( 1 , 7 ) ;
13158: LD_ADDR_VAR 0 1
13162: PUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 7
13168: PPUSH
13169: CALL_OW 12
13173: ST_TO_ADDR
// case i of 1 :
13174: LD_VAR 0 1
13178: PUSH
13179: LD_INT 1
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13197
13187: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13188: LD_STRING earthquake(getX(game), 0, 32)
13190: PPUSH
13191: CALL_OW 559
13195: GO 13435
13197: LD_INT 2
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13219
13205: POP
// begin ToLua ( displayStucuk(); ) ;
13206: LD_STRING displayStucuk();
13208: PPUSH
13209: CALL_OW 559
// ResetFog ;
13213: CALL_OW 335
// end ; 3 :
13217: GO 13435
13219: LD_INT 3
13221: DOUBLE
13222: EQUAL
13223: IFTRUE 13227
13225: GO 13331
13227: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13228: LD_ADDR_VAR 0 2
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_OWVAR 2
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 69
13263: ST_TO_ADDR
// if not tmp then
13264: LD_VAR 0 2
13268: NOT
13269: IFFALSE 13273
// exit ;
13271: GO 13435
// un := tmp [ rand ( 1 , tmp ) ] ;
13273: LD_ADDR_VAR 0 3
13277: PUSH
13278: LD_VAR 0 2
13282: PUSH
13283: LD_INT 1
13285: PPUSH
13286: LD_VAR 0 2
13290: PPUSH
13291: CALL_OW 12
13295: ARRAY
13296: ST_TO_ADDR
// if Crawls ( un ) then
13297: LD_VAR 0 3
13301: PPUSH
13302: CALL_OW 318
13306: IFFALSE 13317
// ComWalk ( un ) ;
13308: LD_VAR 0 3
13312: PPUSH
13313: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 8
13324: PPUSH
13325: CALL_OW 336
// end ; 4 :
13329: GO 13435
13331: LD_INT 4
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13413
13339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_OWVAR 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 29
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: ST_TO_ADDR
// if not tmp then
13376: LD_VAR 0 2
13380: NOT
13381: IFFALSE 13385
// exit ;
13383: GO 13435
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13385: LD_VAR 0 2
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13398: LD_VAR 0 2
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: CALL_OW 65
// end ; 5 .. 7 :
13411: GO 13435
13413: LD_INT 5
13415: DOUBLE
13416: GREATEREQUAL
13417: IFFALSE 13425
13419: LD_INT 7
13421: DOUBLE
13422: LESSEQUAL
13423: IFTRUE 13427
13425: GO 13434
13427: POP
// StreamSibBomb ; end ;
13428: CALL 9672 0 0
13432: GO 13435
13434: POP
// end ;
13435: PPOPN 3
13437: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13438: LD_EXP 8
13442: PUSH
13443: LD_EXP 58
13447: AND
13448: IFFALSE 13604
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
13456: PPUSH
13457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13458: LD_ADDR_VAR 0 2
13462: PUSH
13463: LD_INT 81
13465: PUSH
13466: LD_OWVAR 2
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: ST_TO_ADDR
// if not tmp then
13512: LD_VAR 0 2
13516: NOT
13517: IFFALSE 13521
// exit ;
13519: GO 13604
// p := 0 ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: LD_INT 0
13528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13529: LD_INT 35
13531: PPUSH
13532: CALL_OW 67
// p := p + 1 ;
13536: LD_ADDR_VAR 0 3
13540: PUSH
13541: LD_VAR 0 3
13545: PUSH
13546: LD_INT 1
13548: PLUS
13549: ST_TO_ADDR
// for i in tmp do
13550: LD_ADDR_VAR 0 1
13554: PUSH
13555: LD_VAR 0 2
13559: PUSH
13560: FOR_IN
13561: IFFALSE 13592
// if GetLives ( i ) < 1000 then
13563: LD_VAR 0 1
13567: PPUSH
13568: CALL_OW 256
13572: PUSH
13573: LD_INT 1000
13575: LESS
13576: IFFALSE 13590
// SetLives ( i , 1000 ) ;
13578: LD_VAR 0 1
13582: PPUSH
13583: LD_INT 1000
13585: PPUSH
13586: CALL_OW 234
13590: GO 13560
13592: POP
13593: POP
// until p > 20 ;
13594: LD_VAR 0 3
13598: PUSH
13599: LD_INT 20
13601: GREATER
13602: IFFALSE 13529
// end ;
13604: PPOPN 3
13606: END
// every 0 0$1 trigger StreamModeActive and sTime do
13607: LD_EXP 8
13611: PUSH
13612: LD_EXP 59
13616: AND
13617: IFFALSE 13652
13619: GO 13621
13621: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13622: LD_INT 28
13624: PPUSH
13625: LD_OWVAR 2
13629: PPUSH
13630: LD_INT 2
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13637: LD_INT 30
13639: PPUSH
13640: LD_OWVAR 2
13644: PPUSH
13645: LD_INT 2
13647: PPUSH
13648: CALL_OW 322
// end ;
13652: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13653: LD_EXP 8
13657: PUSH
13658: LD_EXP 60
13662: AND
13663: IFFALSE 13784
13665: GO 13667
13667: DISABLE
13668: LD_INT 0
13670: PPUSH
13671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 22
13679: PUSH
13680: LD_OWVAR 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 3
13701: PUSH
13702: LD_INT 23
13704: PUSH
13705: LD_INT 0
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: ST_TO_ADDR
// if not tmp then
13726: LD_VAR 0 2
13730: NOT
13731: IFFALSE 13735
// exit ;
13733: GO 13784
// for i in tmp do
13735: LD_ADDR_VAR 0 1
13739: PUSH
13740: LD_VAR 0 2
13744: PUSH
13745: FOR_IN
13746: IFFALSE 13782
// begin if Crawls ( i ) then
13748: LD_VAR 0 1
13752: PPUSH
13753: CALL_OW 318
13757: IFFALSE 13768
// ComWalk ( i ) ;
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 138
// SetClass ( i , 2 ) ;
13768: LD_VAR 0 1
13772: PPUSH
13773: LD_INT 2
13775: PPUSH
13776: CALL_OW 336
// end ;
13780: GO 13745
13782: POP
13783: POP
// end ;
13784: PPOPN 2
13786: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13787: LD_EXP 8
13791: PUSH
13792: LD_EXP 61
13796: AND
13797: IFFALSE 14085
13799: GO 13801
13801: DISABLE
13802: LD_INT 0
13804: PPUSH
13805: PPUSH
13806: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13807: LD_OWVAR 2
13811: PPUSH
13812: LD_INT 9
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13825: LD_INT 9
13827: PPUSH
13828: LD_OWVAR 2
13832: PPUSH
13833: CALL_OW 343
// uc_side := 9 ;
13837: LD_ADDR_OWVAR 20
13841: PUSH
13842: LD_INT 9
13844: ST_TO_ADDR
// uc_nation := 2 ;
13845: LD_ADDR_OWVAR 21
13849: PUSH
13850: LD_INT 2
13852: ST_TO_ADDR
// hc_name := Dark Warrior ;
13853: LD_ADDR_OWVAR 26
13857: PUSH
13858: LD_STRING Dark Warrior
13860: ST_TO_ADDR
// hc_gallery :=  ;
13861: LD_ADDR_OWVAR 33
13865: PUSH
13866: LD_STRING 
13868: ST_TO_ADDR
// hc_noskilllimit := true ;
13869: LD_ADDR_OWVAR 76
13873: PUSH
13874: LD_INT 1
13876: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13877: LD_ADDR_OWVAR 31
13881: PUSH
13882: LD_INT 30
13884: PUSH
13885: LD_INT 30
13887: PUSH
13888: LD_INT 30
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: ST_TO_ADDR
// un := CreateHuman ;
13900: LD_ADDR_VAR 0 3
13904: PUSH
13905: CALL_OW 44
13909: ST_TO_ADDR
// hc_noskilllimit := false ;
13910: LD_ADDR_OWVAR 76
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 51
// ToLua ( playRanger() ) ;
13930: LD_STRING playRanger()
13932: PPUSH
13933: CALL_OW 559
// p := 0 ;
13937: LD_ADDR_VAR 0 2
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13945: LD_INT 35
13947: PPUSH
13948: CALL_OW 67
// p := p + 1 ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_VAR 0 2
13961: PUSH
13962: LD_INT 1
13964: PLUS
13965: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13966: LD_VAR 0 3
13970: PPUSH
13971: CALL_OW 256
13975: PUSH
13976: LD_INT 1000
13978: LESS
13979: IFFALSE 13993
// SetLives ( un , 1000 ) ;
13981: LD_VAR 0 3
13985: PPUSH
13986: LD_INT 1000
13988: PPUSH
13989: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13993: LD_VAR 0 3
13997: PPUSH
13998: LD_INT 81
14000: PUSH
14001: LD_OWVAR 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 91
14012: PUSH
14013: LD_VAR 0 3
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 69
14034: PPUSH
14035: LD_VAR 0 3
14039: PPUSH
14040: CALL_OW 74
14044: PPUSH
14045: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14049: LD_VAR 0 2
14053: PUSH
14054: LD_INT 80
14056: GREATER
14057: PUSH
14058: LD_VAR 0 3
14062: PPUSH
14063: CALL_OW 301
14067: OR
14068: IFFALSE 13945
// if un then
14070: LD_VAR 0 3
14074: IFFALSE 14085
// RemoveUnit ( un ) ;
14076: LD_VAR 0 3
14080: PPUSH
14081: CALL_OW 64
// end ;
14085: PPOPN 3
14087: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14088: LD_EXP 62
14092: IFFALSE 14208
14094: GO 14096
14096: DISABLE
14097: LD_INT 0
14099: PPUSH
14100: PPUSH
14101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14102: LD_ADDR_VAR 0 2
14106: PUSH
14107: LD_INT 81
14109: PUSH
14110: LD_OWVAR 2
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 21
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PPUSH
14133: CALL_OW 69
14137: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14138: LD_STRING playComputer()
14140: PPUSH
14141: CALL_OW 559
// if not tmp then
14145: LD_VAR 0 2
14149: NOT
14150: IFFALSE 14154
// exit ;
14152: GO 14208
// for i in tmp do
14154: LD_ADDR_VAR 0 1
14158: PUSH
14159: LD_VAR 0 2
14163: PUSH
14164: FOR_IN
14165: IFFALSE 14206
// for j := 1 to 4 do
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_INT 4
14179: PUSH
14180: FOR_TO
14181: IFFALSE 14202
// SetSkill ( i , j , 10 ) ;
14183: LD_VAR 0 1
14187: PPUSH
14188: LD_VAR 0 3
14192: PPUSH
14193: LD_INT 10
14195: PPUSH
14196: CALL_OW 237
14200: GO 14180
14202: POP
14203: POP
14204: GO 14164
14206: POP
14207: POP
// end ;
14208: PPOPN 3
14210: END
// every 0 0$1 trigger s30 do var i , tmp ;
14211: LD_EXP 63
14215: IFFALSE 14284
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14224: LD_ADDR_VAR 0 2
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PPUSH
14241: CALL_OW 69
14245: ST_TO_ADDR
// if not tmp then
14246: LD_VAR 0 2
14250: NOT
14251: IFFALSE 14255
// exit ;
14253: GO 14284
// for i in tmp do
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: LD_VAR 0 2
14264: PUSH
14265: FOR_IN
14266: IFFALSE 14282
// SetLives ( i , 300 ) ;
14268: LD_VAR 0 1
14272: PPUSH
14273: LD_INT 300
14275: PPUSH
14276: CALL_OW 234
14280: GO 14265
14282: POP
14283: POP
// end ;
14284: PPOPN 2
14286: END
// every 0 0$1 trigger s60 do var i , tmp ;
14287: LD_EXP 64
14291: IFFALSE 14360
14293: GO 14295
14295: DISABLE
14296: LD_INT 0
14298: PPUSH
14299: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14300: LD_ADDR_VAR 0 2
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_OWVAR 2
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: ST_TO_ADDR
// if not tmp then
14322: LD_VAR 0 2
14326: NOT
14327: IFFALSE 14331
// exit ;
14329: GO 14360
// for i in tmp do
14331: LD_ADDR_VAR 0 1
14335: PUSH
14336: LD_VAR 0 2
14340: PUSH
14341: FOR_IN
14342: IFFALSE 14358
// SetLives ( i , 600 ) ;
14344: LD_VAR 0 1
14348: PPUSH
14349: LD_INT 600
14351: PPUSH
14352: CALL_OW 234
14356: GO 14341
14358: POP
14359: POP
// end ;
14360: PPOPN 2
14362: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14363: LD_INT 0
14365: PPUSH
// case cmd of 301 :
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 301
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14379
14377: GO 14411
14379: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14380: LD_VAR 0 6
14384: PPUSH
14385: LD_VAR 0 7
14389: PPUSH
14390: LD_VAR 0 8
14394: PPUSH
14395: LD_VAR 0 4
14399: PPUSH
14400: LD_VAR 0 5
14404: PPUSH
14405: CALL 15612 0 5
14409: GO 14532
14411: LD_INT 302
14413: DOUBLE
14414: EQUAL
14415: IFTRUE 14419
14417: GO 14456
14419: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14420: LD_VAR 0 6
14424: PPUSH
14425: LD_VAR 0 7
14429: PPUSH
14430: LD_VAR 0 8
14434: PPUSH
14435: LD_VAR 0 9
14439: PPUSH
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_VAR 0 5
14449: PPUSH
14450: CALL 15703 0 6
14454: GO 14532
14456: LD_INT 303
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14501
14464: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14465: LD_VAR 0 6
14469: PPUSH
14470: LD_VAR 0 7
14474: PPUSH
14475: LD_VAR 0 8
14479: PPUSH
14480: LD_VAR 0 9
14484: PPUSH
14485: LD_VAR 0 4
14489: PPUSH
14490: LD_VAR 0 5
14494: PPUSH
14495: CALL 14537 0 6
14499: GO 14532
14501: LD_INT 304
14503: DOUBLE
14504: EQUAL
14505: IFTRUE 14509
14507: GO 14531
14509: POP
// hHackTeleport ( unit , x , y ) ; end ;
14510: LD_VAR 0 2
14514: PPUSH
14515: LD_VAR 0 4
14519: PPUSH
14520: LD_VAR 0 5
14524: PPUSH
14525: CALL 16296 0 3
14529: GO 14532
14531: POP
// end ;
14532: LD_VAR 0 12
14536: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14537: LD_INT 0
14539: PPUSH
14540: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14541: LD_VAR 0 1
14545: PUSH
14546: LD_INT 1
14548: LESS
14549: PUSH
14550: LD_VAR 0 1
14554: PUSH
14555: LD_INT 3
14557: GREATER
14558: OR
14559: PUSH
14560: LD_VAR 0 5
14564: PPUSH
14565: LD_VAR 0 6
14569: PPUSH
14570: CALL_OW 428
14574: OR
14575: IFFALSE 14579
// exit ;
14577: GO 15299
// uc_side := your_side ;
14579: LD_ADDR_OWVAR 20
14583: PUSH
14584: LD_OWVAR 2
14588: ST_TO_ADDR
// uc_nation := nation ;
14589: LD_ADDR_OWVAR 21
14593: PUSH
14594: LD_VAR 0 1
14598: ST_TO_ADDR
// bc_level = 1 ;
14599: LD_ADDR_OWVAR 43
14603: PUSH
14604: LD_INT 1
14606: ST_TO_ADDR
// case btype of 1 :
14607: LD_VAR 0 2
14611: PUSH
14612: LD_INT 1
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14631
14620: POP
// bc_type := b_depot ; 2 :
14621: LD_ADDR_OWVAR 42
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
14629: GO 15243
14631: LD_INT 2
14633: DOUBLE
14634: EQUAL
14635: IFTRUE 14639
14637: GO 14650
14639: POP
// bc_type := b_warehouse ; 3 :
14640: LD_ADDR_OWVAR 42
14644: PUSH
14645: LD_INT 1
14647: ST_TO_ADDR
14648: GO 15243
14650: LD_INT 3
14652: DOUBLE
14653: EQUAL
14654: IFTRUE 14658
14656: GO 14669
14658: POP
// bc_type := b_lab ; 4 .. 9 :
14659: LD_ADDR_OWVAR 42
14663: PUSH
14664: LD_INT 6
14666: ST_TO_ADDR
14667: GO 15243
14669: LD_INT 4
14671: DOUBLE
14672: GREATEREQUAL
14673: IFFALSE 14681
14675: LD_INT 9
14677: DOUBLE
14678: LESSEQUAL
14679: IFTRUE 14683
14681: GO 14735
14683: POP
// begin bc_type := b_lab_half ;
14684: LD_ADDR_OWVAR 42
14688: PUSH
14689: LD_INT 7
14691: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14692: LD_ADDR_OWVAR 44
14696: PUSH
14697: LD_INT 10
14699: PUSH
14700: LD_INT 11
14702: PUSH
14703: LD_INT 12
14705: PUSH
14706: LD_INT 15
14708: PUSH
14709: LD_INT 14
14711: PUSH
14712: LD_INT 13
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_VAR 0 2
14727: PUSH
14728: LD_INT 3
14730: MINUS
14731: ARRAY
14732: ST_TO_ADDR
// end ; 10 .. 13 :
14733: GO 15243
14735: LD_INT 10
14737: DOUBLE
14738: GREATEREQUAL
14739: IFFALSE 14747
14741: LD_INT 13
14743: DOUBLE
14744: LESSEQUAL
14745: IFTRUE 14749
14747: GO 14826
14749: POP
// begin bc_type := b_lab_full ;
14750: LD_ADDR_OWVAR 42
14754: PUSH
14755: LD_INT 8
14757: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14758: LD_ADDR_OWVAR 44
14762: PUSH
14763: LD_INT 10
14765: PUSH
14766: LD_INT 12
14768: PUSH
14769: LD_INT 14
14771: PUSH
14772: LD_INT 13
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 9
14788: MINUS
14789: ARRAY
14790: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14791: LD_ADDR_OWVAR 45
14795: PUSH
14796: LD_INT 11
14798: PUSH
14799: LD_INT 15
14801: PUSH
14802: LD_INT 12
14804: PUSH
14805: LD_INT 15
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_VAR 0 2
14818: PUSH
14819: LD_INT 9
14821: MINUS
14822: ARRAY
14823: ST_TO_ADDR
// end ; 14 :
14824: GO 15243
14826: LD_INT 14
14828: DOUBLE
14829: EQUAL
14830: IFTRUE 14834
14832: GO 14845
14834: POP
// bc_type := b_workshop ; 15 :
14835: LD_ADDR_OWVAR 42
14839: PUSH
14840: LD_INT 2
14842: ST_TO_ADDR
14843: GO 15243
14845: LD_INT 15
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14853
14851: GO 14864
14853: POP
// bc_type := b_factory ; 16 :
14854: LD_ADDR_OWVAR 42
14858: PUSH
14859: LD_INT 3
14861: ST_TO_ADDR
14862: GO 15243
14864: LD_INT 16
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14872
14870: GO 14883
14872: POP
// bc_type := b_ext_gun ; 17 :
14873: LD_ADDR_OWVAR 42
14877: PUSH
14878: LD_INT 17
14880: ST_TO_ADDR
14881: GO 15243
14883: LD_INT 17
14885: DOUBLE
14886: EQUAL
14887: IFTRUE 14891
14889: GO 14919
14891: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14892: LD_ADDR_OWVAR 42
14896: PUSH
14897: LD_INT 19
14899: PUSH
14900: LD_INT 23
14902: PUSH
14903: LD_INT 19
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: LD_VAR 0 1
14915: ARRAY
14916: ST_TO_ADDR
14917: GO 15243
14919: LD_INT 18
14921: DOUBLE
14922: EQUAL
14923: IFTRUE 14927
14925: GO 14938
14927: POP
// bc_type := b_ext_radar ; 19 :
14928: LD_ADDR_OWVAR 42
14932: PUSH
14933: LD_INT 20
14935: ST_TO_ADDR
14936: GO 15243
14938: LD_INT 19
14940: DOUBLE
14941: EQUAL
14942: IFTRUE 14946
14944: GO 14957
14946: POP
// bc_type := b_ext_radio ; 20 :
14947: LD_ADDR_OWVAR 42
14951: PUSH
14952: LD_INT 22
14954: ST_TO_ADDR
14955: GO 15243
14957: LD_INT 20
14959: DOUBLE
14960: EQUAL
14961: IFTRUE 14965
14963: GO 14976
14965: POP
// bc_type := b_ext_siberium ; 21 :
14966: LD_ADDR_OWVAR 42
14970: PUSH
14971: LD_INT 21
14973: ST_TO_ADDR
14974: GO 15243
14976: LD_INT 21
14978: DOUBLE
14979: EQUAL
14980: IFTRUE 14984
14982: GO 14995
14984: POP
// bc_type := b_ext_computer ; 22 :
14985: LD_ADDR_OWVAR 42
14989: PUSH
14990: LD_INT 24
14992: ST_TO_ADDR
14993: GO 15243
14995: LD_INT 22
14997: DOUBLE
14998: EQUAL
14999: IFTRUE 15003
15001: GO 15014
15003: POP
// bc_type := b_ext_track ; 23 :
15004: LD_ADDR_OWVAR 42
15008: PUSH
15009: LD_INT 16
15011: ST_TO_ADDR
15012: GO 15243
15014: LD_INT 23
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15033
15022: POP
// bc_type := b_ext_laser ; 24 :
15023: LD_ADDR_OWVAR 42
15027: PUSH
15028: LD_INT 25
15030: ST_TO_ADDR
15031: GO 15243
15033: LD_INT 24
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15052
15041: POP
// bc_type := b_control_tower ; 25 :
15042: LD_ADDR_OWVAR 42
15046: PUSH
15047: LD_INT 36
15049: ST_TO_ADDR
15050: GO 15243
15052: LD_INT 25
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15071
15060: POP
// bc_type := b_breastwork ; 26 :
15061: LD_ADDR_OWVAR 42
15065: PUSH
15066: LD_INT 31
15068: ST_TO_ADDR
15069: GO 15243
15071: LD_INT 26
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15090
15079: POP
// bc_type := b_bunker ; 27 :
15080: LD_ADDR_OWVAR 42
15084: PUSH
15085: LD_INT 32
15087: ST_TO_ADDR
15088: GO 15243
15090: LD_INT 27
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15109
15098: POP
// bc_type := b_turret ; 28 :
15099: LD_ADDR_OWVAR 42
15103: PUSH
15104: LD_INT 33
15106: ST_TO_ADDR
15107: GO 15243
15109: LD_INT 28
15111: DOUBLE
15112: EQUAL
15113: IFTRUE 15117
15115: GO 15128
15117: POP
// bc_type := b_armoury ; 29 :
15118: LD_ADDR_OWVAR 42
15122: PUSH
15123: LD_INT 4
15125: ST_TO_ADDR
15126: GO 15243
15128: LD_INT 29
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15147
15136: POP
// bc_type := b_barracks ; 30 :
15137: LD_ADDR_OWVAR 42
15141: PUSH
15142: LD_INT 5
15144: ST_TO_ADDR
15145: GO 15243
15147: LD_INT 30
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15166
15155: POP
// bc_type := b_solar_power ; 31 :
15156: LD_ADDR_OWVAR 42
15160: PUSH
15161: LD_INT 27
15163: ST_TO_ADDR
15164: GO 15243
15166: LD_INT 31
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15185
15174: POP
// bc_type := b_oil_power ; 32 :
15175: LD_ADDR_OWVAR 42
15179: PUSH
15180: LD_INT 26
15182: ST_TO_ADDR
15183: GO 15243
15185: LD_INT 32
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15204
15193: POP
// bc_type := b_siberite_power ; 33 :
15194: LD_ADDR_OWVAR 42
15198: PUSH
15199: LD_INT 28
15201: ST_TO_ADDR
15202: GO 15243
15204: LD_INT 33
15206: DOUBLE
15207: EQUAL
15208: IFTRUE 15212
15210: GO 15223
15212: POP
// bc_type := b_oil_mine ; 34 :
15213: LD_ADDR_OWVAR 42
15217: PUSH
15218: LD_INT 29
15220: ST_TO_ADDR
15221: GO 15243
15223: LD_INT 34
15225: DOUBLE
15226: EQUAL
15227: IFTRUE 15231
15229: GO 15242
15231: POP
// bc_type := b_siberite_mine ; end ;
15232: LD_ADDR_OWVAR 42
15236: PUSH
15237: LD_INT 30
15239: ST_TO_ADDR
15240: GO 15243
15242: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15243: LD_ADDR_VAR 0 8
15247: PUSH
15248: LD_VAR 0 5
15252: PPUSH
15253: LD_VAR 0 6
15257: PPUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: CALL_OW 47
15267: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15268: LD_OWVAR 42
15272: PUSH
15273: LD_INT 32
15275: PUSH
15276: LD_INT 33
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: IN
15283: IFFALSE 15299
// PlaceWeaponTurret ( b , weapon ) ;
15285: LD_VAR 0 8
15289: PPUSH
15290: LD_VAR 0 4
15294: PPUSH
15295: CALL_OW 431
// end ;
15299: LD_VAR 0 7
15303: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15310: LD_ADDR_VAR 0 4
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 2
15329: PUSH
15330: LD_INT 30
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 30
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 69
15363: ST_TO_ADDR
// if not tmp then
15364: LD_VAR 0 4
15368: NOT
15369: IFFALSE 15373
// exit ;
15371: GO 15432
// for i in tmp do
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_VAR 0 4
15382: PUSH
15383: FOR_IN
15384: IFFALSE 15430
// for j = 1 to 3 do
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: DOUBLE
15392: LD_INT 1
15394: DEC
15395: ST_TO_ADDR
15396: LD_INT 3
15398: PUSH
15399: FOR_TO
15400: IFFALSE 15426
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15402: LD_VAR 0 2
15406: PPUSH
15407: CALL_OW 274
15411: PPUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: LD_INT 99999
15419: PPUSH
15420: CALL_OW 277
15424: GO 15399
15426: POP
15427: POP
15428: GO 15383
15430: POP
15431: POP
// end ;
15432: LD_VAR 0 1
15436: RET
// export function hHackSetLevel10 ; var i , j ; begin
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15442: LD_ADDR_VAR 0 2
15446: PUSH
15447: LD_INT 21
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: FOR_IN
15463: IFFALSE 15515
// if IsSelected ( i ) then
15465: LD_VAR 0 2
15469: PPUSH
15470: CALL_OW 306
15474: IFFALSE 15513
// begin for j := 1 to 4 do
15476: LD_ADDR_VAR 0 3
15480: PUSH
15481: DOUBLE
15482: LD_INT 1
15484: DEC
15485: ST_TO_ADDR
15486: LD_INT 4
15488: PUSH
15489: FOR_TO
15490: IFFALSE 15511
// SetSkill ( i , j , 10 ) ;
15492: LD_VAR 0 2
15496: PPUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_INT 10
15504: PPUSH
15505: CALL_OW 237
15509: GO 15489
15511: POP
15512: POP
// end ;
15513: GO 15462
15515: POP
15516: POP
// end ;
15517: LD_VAR 0 1
15521: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 22
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 21
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: PUSH
15563: FOR_IN
15564: IFFALSE 15605
// begin for j := 1 to 4 do
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: DOUBLE
15572: LD_INT 1
15574: DEC
15575: ST_TO_ADDR
15576: LD_INT 4
15578: PUSH
15579: FOR_TO
15580: IFFALSE 15601
// SetSkill ( i , j , 10 ) ;
15582: LD_VAR 0 2
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_INT 10
15594: PPUSH
15595: CALL_OW 237
15599: GO 15579
15601: POP
15602: POP
// end ;
15603: GO 15563
15605: POP
15606: POP
// end ;
15607: LD_VAR 0 1
15611: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15612: LD_INT 0
15614: PPUSH
// uc_side := your_side ;
15615: LD_ADDR_OWVAR 20
15619: PUSH
15620: LD_OWVAR 2
15624: ST_TO_ADDR
// uc_nation := nation ;
15625: LD_ADDR_OWVAR 21
15629: PUSH
15630: LD_VAR 0 1
15634: ST_TO_ADDR
// InitHc ;
15635: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15639: LD_INT 0
15641: PPUSH
15642: LD_VAR 0 2
15646: PPUSH
15647: LD_VAR 0 3
15651: PPUSH
15652: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15656: LD_VAR 0 4
15660: PPUSH
15661: LD_VAR 0 5
15665: PPUSH
15666: CALL_OW 428
15670: PUSH
15671: LD_INT 0
15673: EQUAL
15674: IFFALSE 15698
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15676: CALL_OW 44
15680: PPUSH
15681: LD_VAR 0 4
15685: PPUSH
15686: LD_VAR 0 5
15690: PPUSH
15691: LD_INT 1
15693: PPUSH
15694: CALL_OW 48
// end ;
15698: LD_VAR 0 6
15702: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15703: LD_INT 0
15705: PPUSH
15706: PPUSH
// uc_side := your_side ;
15707: LD_ADDR_OWVAR 20
15711: PUSH
15712: LD_OWVAR 2
15716: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15717: LD_VAR 0 1
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: LD_INT 5
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: IN
15744: IFFALSE 15756
// uc_nation := nation_american else
15746: LD_ADDR_OWVAR 21
15750: PUSH
15751: LD_INT 1
15753: ST_TO_ADDR
15754: GO 15799
// if chassis in [ 11 , 12 , 13 , 14 ] then
15756: LD_VAR 0 1
15760: PUSH
15761: LD_INT 11
15763: PUSH
15764: LD_INT 12
15766: PUSH
15767: LD_INT 13
15769: PUSH
15770: LD_INT 14
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: IN
15779: IFFALSE 15791
// uc_nation := nation_arabian else
15781: LD_ADDR_OWVAR 21
15785: PUSH
15786: LD_INT 2
15788: ST_TO_ADDR
15789: GO 15799
// uc_nation := nation_russian ;
15791: LD_ADDR_OWVAR 21
15795: PUSH
15796: LD_INT 3
15798: ST_TO_ADDR
// vc_chassis := chassis ;
15799: LD_ADDR_OWVAR 37
15803: PUSH
15804: LD_VAR 0 1
15808: ST_TO_ADDR
// vc_engine := engine ;
15809: LD_ADDR_OWVAR 39
15813: PUSH
15814: LD_VAR 0 2
15818: ST_TO_ADDR
// vc_control := control ;
15819: LD_ADDR_OWVAR 38
15823: PUSH
15824: LD_VAR 0 3
15828: ST_TO_ADDR
// vc_weapon := weapon ;
15829: LD_ADDR_OWVAR 40
15833: PUSH
15834: LD_VAR 0 4
15838: ST_TO_ADDR
// un := CreateVehicle ;
15839: LD_ADDR_VAR 0 8
15843: PUSH
15844: CALL_OW 45
15848: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15849: LD_VAR 0 8
15853: PPUSH
15854: LD_INT 0
15856: PPUSH
15857: LD_INT 5
15859: PPUSH
15860: CALL_OW 12
15864: PPUSH
15865: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15869: LD_VAR 0 8
15873: PPUSH
15874: LD_VAR 0 5
15878: PPUSH
15879: LD_VAR 0 6
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 48
// end ;
15891: LD_VAR 0 7
15895: RET
// export hInvincible ; every 1 do
15896: GO 15898
15898: DISABLE
// hInvincible := [ ] ;
15899: LD_ADDR_EXP 65
15903: PUSH
15904: EMPTY
15905: ST_TO_ADDR
15906: END
// every 10 do var i ;
15907: GO 15909
15909: DISABLE
15910: LD_INT 0
15912: PPUSH
// begin enable ;
15913: ENABLE
// if not hInvincible then
15914: LD_EXP 65
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 15967
// for i in hInvincible do
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: LD_EXP 65
15932: PUSH
15933: FOR_IN
15934: IFFALSE 15965
// if GetLives ( i ) < 1000 then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 256
15945: PUSH
15946: LD_INT 1000
15948: LESS
15949: IFFALSE 15963
// SetLives ( i , 1000 ) ;
15951: LD_VAR 0 1
15955: PPUSH
15956: LD_INT 1000
15958: PPUSH
15959: CALL_OW 234
15963: GO 15933
15965: POP
15966: POP
// end ;
15967: PPOPN 1
15969: END
// export function hHackInvincible ; var i ; begin
15970: LD_INT 0
15972: PPUSH
15973: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15974: LD_ADDR_VAR 0 2
15978: PUSH
15979: LD_INT 2
15981: PUSH
15982: LD_INT 21
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 21
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: PUSH
16012: FOR_IN
16013: IFFALSE 16074
// if IsSelected ( i ) then
16015: LD_VAR 0 2
16019: PPUSH
16020: CALL_OW 306
16024: IFFALSE 16072
// begin if i in hInvincible then
16026: LD_VAR 0 2
16030: PUSH
16031: LD_EXP 65
16035: IN
16036: IFFALSE 16056
// hInvincible := hInvincible diff i else
16038: LD_ADDR_EXP 65
16042: PUSH
16043: LD_EXP 65
16047: PUSH
16048: LD_VAR 0 2
16052: DIFF
16053: ST_TO_ADDR
16054: GO 16072
// hInvincible := hInvincible union i ;
16056: LD_ADDR_EXP 65
16060: PUSH
16061: LD_EXP 65
16065: PUSH
16066: LD_VAR 0 2
16070: UNION
16071: ST_TO_ADDR
// end ;
16072: GO 16012
16074: POP
16075: POP
// end ;
16076: LD_VAR 0 1
16080: RET
// export function hHackInvisible ; var i , j ; begin
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
16085: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16086: LD_ADDR_VAR 0 2
16090: PUSH
16091: LD_INT 21
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16131
// if IsSelected ( i ) then
16109: LD_VAR 0 2
16113: PPUSH
16114: CALL_OW 306
16118: IFFALSE 16129
// ComForceInvisible ( i ) ;
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL_OW 496
16129: GO 16106
16131: POP
16132: POP
// end ;
16133: LD_VAR 0 1
16137: RET
// export function hHackChangeYourSide ; begin
16138: LD_INT 0
16140: PPUSH
// if your_side = 8 then
16141: LD_OWVAR 2
16145: PUSH
16146: LD_INT 8
16148: EQUAL
16149: IFFALSE 16161
// your_side := 0 else
16151: LD_ADDR_OWVAR 2
16155: PUSH
16156: LD_INT 0
16158: ST_TO_ADDR
16159: GO 16175
// your_side := your_side + 1 ;
16161: LD_ADDR_OWVAR 2
16165: PUSH
16166: LD_OWVAR 2
16170: PUSH
16171: LD_INT 1
16173: PLUS
16174: ST_TO_ADDR
// end ;
16175: LD_VAR 0 1
16179: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16180: LD_INT 0
16182: PPUSH
16183: PPUSH
16184: PPUSH
// for i in all_units do
16185: LD_ADDR_VAR 0 2
16189: PUSH
16190: LD_OWVAR 3
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16274
// if IsSelected ( i ) then
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 306
16207: IFFALSE 16272
// begin j := GetSide ( i ) ;
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_VAR 0 2
16218: PPUSH
16219: CALL_OW 255
16223: ST_TO_ADDR
// if j = 8 then
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 8
16231: EQUAL
16232: IFFALSE 16244
// j := 0 else
16234: LD_ADDR_VAR 0 3
16238: PUSH
16239: LD_INT 0
16241: ST_TO_ADDR
16242: GO 16258
// j := j + 1 ;
16244: LD_ADDR_VAR 0 3
16248: PUSH
16249: LD_VAR 0 3
16253: PUSH
16254: LD_INT 1
16256: PLUS
16257: ST_TO_ADDR
// SetSide ( i , j ) ;
16258: LD_VAR 0 2
16262: PPUSH
16263: LD_VAR 0 3
16267: PPUSH
16268: CALL_OW 235
// end ;
16272: GO 16195
16274: POP
16275: POP
// end ;
16276: LD_VAR 0 1
16280: RET
// export function hHackFog ; begin
16281: LD_INT 0
16283: PPUSH
// FogOff ( true ) ;
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 344
// end ;
16291: LD_VAR 0 1
16295: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16296: LD_INT 0
16298: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16299: LD_VAR 0 1
16303: PPUSH
16304: LD_VAR 0 2
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 483
// CenterOnXY ( x , y ) ;
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 84
// end ;
16338: LD_VAR 0 4
16342: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16347: LD_VAR 0 1
16351: NOT
16352: PUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_VAR 0 3
16362: PPUSH
16363: CALL_OW 488
16367: NOT
16368: OR
16369: PUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 266
16379: PUSH
16380: LD_INT 3
16382: NONEQUAL
16383: PUSH
16384: LD_VAR 0 1
16388: PPUSH
16389: CALL_OW 247
16393: PUSH
16394: LD_INT 1
16396: EQUAL
16397: NOT
16398: AND
16399: OR
16400: IFFALSE 16404
// exit ;
16402: GO 16553
// if GetType ( factory ) = unit_human then
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 247
16413: PUSH
16414: LD_INT 1
16416: EQUAL
16417: IFFALSE 16434
// factory := IsInUnit ( factory ) ;
16419: LD_ADDR_VAR 0 1
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 310
16433: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 266
16443: PUSH
16444: LD_INT 3
16446: NONEQUAL
16447: IFFALSE 16451
// exit ;
16449: GO 16553
// if HexInfo ( x , y ) = factory then
16451: LD_VAR 0 2
16455: PPUSH
16456: LD_VAR 0 3
16460: PPUSH
16461: CALL_OW 428
16465: PUSH
16466: LD_VAR 0 1
16470: EQUAL
16471: IFFALSE 16498
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16473: LD_ADDR_EXP 66
16477: PUSH
16478: LD_EXP 66
16482: PPUSH
16483: LD_VAR 0 1
16487: PPUSH
16488: LD_INT 0
16490: PPUSH
16491: CALL_OW 1
16495: ST_TO_ADDR
16496: GO 16549
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16498: LD_ADDR_EXP 66
16502: PUSH
16503: LD_EXP 66
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: LD_VAR 0 1
16517: PPUSH
16518: CALL_OW 255
16522: PUSH
16523: LD_VAR 0 1
16527: PUSH
16528: LD_VAR 0 2
16532: PUSH
16533: LD_VAR 0 3
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 1
16548: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16549: CALL 16558 0 0
// end ;
16553: LD_VAR 0 4
16557: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16558: LD_INT 0
16560: PPUSH
16561: PPUSH
16562: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16563: LD_STRING resetFactoryWaypoint();
16565: PPUSH
16566: CALL_OW 559
// if factoryWaypoints then
16570: LD_EXP 66
16574: IFFALSE 16700
// begin list := PrepareArray ( factoryWaypoints ) ;
16576: LD_ADDR_VAR 0 3
16580: PUSH
16581: LD_EXP 66
16585: PPUSH
16586: CALL 63332 0 1
16590: ST_TO_ADDR
// for i := 1 to list do
16591: LD_ADDR_VAR 0 2
16595: PUSH
16596: DOUBLE
16597: LD_INT 1
16599: DEC
16600: ST_TO_ADDR
16601: LD_VAR 0 3
16605: PUSH
16606: FOR_TO
16607: IFFALSE 16698
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16609: LD_STRING setFactoryWaypointXY(
16611: PUSH
16612: LD_VAR 0 3
16616: PUSH
16617: LD_VAR 0 2
16621: ARRAY
16622: PUSH
16623: LD_INT 1
16625: ARRAY
16626: STR
16627: PUSH
16628: LD_STRING ,
16630: STR
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_VAR 0 2
16641: ARRAY
16642: PUSH
16643: LD_INT 2
16645: ARRAY
16646: STR
16647: PUSH
16648: LD_STRING ,
16650: STR
16651: PUSH
16652: LD_VAR 0 3
16656: PUSH
16657: LD_VAR 0 2
16661: ARRAY
16662: PUSH
16663: LD_INT 3
16665: ARRAY
16666: STR
16667: PUSH
16668: LD_STRING ,
16670: STR
16671: PUSH
16672: LD_VAR 0 3
16676: PUSH
16677: LD_VAR 0 2
16681: ARRAY
16682: PUSH
16683: LD_INT 4
16685: ARRAY
16686: STR
16687: PUSH
16688: LD_STRING )
16690: STR
16691: PPUSH
16692: CALL_OW 559
16696: GO 16606
16698: POP
16699: POP
// end ; end ;
16700: LD_VAR 0 1
16704: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16705: LD_INT 0
16707: PPUSH
// if HexInfo ( x , y ) = warehouse then
16708: LD_VAR 0 2
16712: PPUSH
16713: LD_VAR 0 3
16717: PPUSH
16718: CALL_OW 428
16722: PUSH
16723: LD_VAR 0 1
16727: EQUAL
16728: IFFALSE 16755
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16730: LD_ADDR_EXP 67
16734: PUSH
16735: LD_EXP 67
16739: PPUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: LD_INT 0
16747: PPUSH
16748: CALL_OW 1
16752: ST_TO_ADDR
16753: GO 16806
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16755: LD_ADDR_EXP 67
16759: PUSH
16760: LD_EXP 67
16764: PPUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 255
16779: PUSH
16780: LD_VAR 0 1
16784: PUSH
16785: LD_VAR 0 2
16789: PUSH
16790: LD_VAR 0 3
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PPUSH
16801: CALL_OW 1
16805: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16806: CALL 16815 0 0
// end ;
16810: LD_VAR 0 4
16814: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16815: LD_INT 0
16817: PPUSH
16818: PPUSH
16819: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16820: LD_STRING resetWarehouseGatheringPoints();
16822: PPUSH
16823: CALL_OW 559
// if warehouseGatheringPoints then
16827: LD_EXP 67
16831: IFFALSE 16957
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_EXP 67
16842: PPUSH
16843: CALL 63332 0 1
16847: ST_TO_ADDR
// for i := 1 to list do
16848: LD_ADDR_VAR 0 2
16852: PUSH
16853: DOUBLE
16854: LD_INT 1
16856: DEC
16857: ST_TO_ADDR
16858: LD_VAR 0 3
16862: PUSH
16863: FOR_TO
16864: IFFALSE 16955
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16866: LD_STRING setWarehouseGatheringPointXY(
16868: PUSH
16869: LD_VAR 0 3
16873: PUSH
16874: LD_VAR 0 2
16878: ARRAY
16879: PUSH
16880: LD_INT 1
16882: ARRAY
16883: STR
16884: PUSH
16885: LD_STRING ,
16887: STR
16888: PUSH
16889: LD_VAR 0 3
16893: PUSH
16894: LD_VAR 0 2
16898: ARRAY
16899: PUSH
16900: LD_INT 2
16902: ARRAY
16903: STR
16904: PUSH
16905: LD_STRING ,
16907: STR
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 2
16918: ARRAY
16919: PUSH
16920: LD_INT 3
16922: ARRAY
16923: STR
16924: PUSH
16925: LD_STRING ,
16927: STR
16928: PUSH
16929: LD_VAR 0 3
16933: PUSH
16934: LD_VAR 0 2
16938: ARRAY
16939: PUSH
16940: LD_INT 4
16942: ARRAY
16943: STR
16944: PUSH
16945: LD_STRING )
16947: STR
16948: PPUSH
16949: CALL_OW 559
16953: GO 16863
16955: POP
16956: POP
// end ; end ;
16957: LD_VAR 0 1
16961: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16962: LD_EXP 67
16966: IFFALSE 17651
16968: GO 16970
16970: DISABLE
16971: LD_INT 0
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
// begin enable ;
16982: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16983: LD_ADDR_VAR 0 3
16987: PUSH
16988: LD_EXP 67
16992: PPUSH
16993: CALL 63332 0 1
16997: ST_TO_ADDR
// if not list then
16998: LD_VAR 0 3
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17651
// for i := 1 to list do
17007: LD_ADDR_VAR 0 1
17011: PUSH
17012: DOUBLE
17013: LD_INT 1
17015: DEC
17016: ST_TO_ADDR
17017: LD_VAR 0 3
17021: PUSH
17022: FOR_TO
17023: IFFALSE 17649
// begin depot := list [ i ] [ 2 ] ;
17025: LD_ADDR_VAR 0 8
17029: PUSH
17030: LD_VAR 0 3
17034: PUSH
17035: LD_VAR 0 1
17039: ARRAY
17040: PUSH
17041: LD_INT 2
17043: ARRAY
17044: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17045: LD_ADDR_VAR 0 5
17049: PUSH
17050: LD_VAR 0 3
17054: PUSH
17055: LD_VAR 0 1
17059: ARRAY
17060: PUSH
17061: LD_INT 1
17063: ARRAY
17064: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17065: LD_VAR 0 8
17069: PPUSH
17070: CALL_OW 301
17074: PUSH
17075: LD_VAR 0 5
17079: PUSH
17080: LD_VAR 0 8
17084: PPUSH
17085: CALL_OW 255
17089: NONEQUAL
17090: OR
17091: IFFALSE 17120
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17093: LD_ADDR_EXP 67
17097: PUSH
17098: LD_EXP 67
17102: PPUSH
17103: LD_VAR 0 8
17107: PPUSH
17108: LD_INT 0
17110: PPUSH
17111: CALL_OW 1
17115: ST_TO_ADDR
// exit ;
17116: POP
17117: POP
17118: GO 17651
// end ; x := list [ i ] [ 3 ] ;
17120: LD_ADDR_VAR 0 6
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_VAR 0 1
17134: ARRAY
17135: PUSH
17136: LD_INT 3
17138: ARRAY
17139: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17140: LD_ADDR_VAR 0 7
17144: PUSH
17145: LD_VAR 0 3
17149: PUSH
17150: LD_VAR 0 1
17154: ARRAY
17155: PUSH
17156: LD_INT 4
17158: ARRAY
17159: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17160: LD_ADDR_VAR 0 9
17164: PUSH
17165: LD_VAR 0 6
17169: PPUSH
17170: LD_VAR 0 7
17174: PPUSH
17175: LD_INT 16
17177: PPUSH
17178: CALL 61920 0 3
17182: ST_TO_ADDR
// if not cratesNearbyPoint then
17183: LD_VAR 0 9
17187: NOT
17188: IFFALSE 17194
// exit ;
17190: POP
17191: POP
17192: GO 17651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17194: LD_ADDR_VAR 0 4
17198: PUSH
17199: LD_INT 22
17201: PUSH
17202: LD_VAR 0 5
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 3
17213: PUSH
17214: LD_INT 60
17216: PUSH
17217: EMPTY
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 91
17226: PUSH
17227: LD_VAR 0 8
17231: PUSH
17232: LD_INT 6
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: LD_INT 25
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 25
17255: PUSH
17256: LD_INT 16
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: PUSH
17279: LD_VAR 0 8
17283: PPUSH
17284: CALL_OW 313
17288: PPUSH
17289: LD_INT 3
17291: PUSH
17292: LD_INT 60
17294: PUSH
17295: EMPTY
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 25
17307: PUSH
17308: LD_INT 2
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 25
17317: PUSH
17318: LD_INT 16
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 72
17338: UNION
17339: ST_TO_ADDR
// if tmp then
17340: LD_VAR 0 4
17344: IFFALSE 17424
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17346: LD_ADDR_VAR 0 4
17350: PUSH
17351: LD_VAR 0 4
17355: PPUSH
17356: LD_INT 3
17358: PPUSH
17359: CALL 59889 0 2
17363: ST_TO_ADDR
// for j in tmp do
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_VAR 0 4
17373: PUSH
17374: FOR_IN
17375: IFFALSE 17418
// begin if IsInUnit ( j ) then
17377: LD_VAR 0 2
17381: PPUSH
17382: CALL_OW 310
17386: IFFALSE 17397
// ComExit ( j ) ;
17388: LD_VAR 0 2
17392: PPUSH
17393: CALL 59972 0 1
// AddComCollect ( j , x , y ) ;
17397: LD_VAR 0 2
17401: PPUSH
17402: LD_VAR 0 6
17406: PPUSH
17407: LD_VAR 0 7
17411: PPUSH
17412: CALL_OW 177
// end ;
17416: GO 17374
17418: POP
17419: POP
// exit ;
17420: POP
17421: POP
17422: GO 17651
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17424: LD_ADDR_VAR 0 4
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_VAR 0 5
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 91
17443: PUSH
17444: LD_VAR 0 8
17448: PUSH
17449: LD_INT 8
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 34
17462: PUSH
17463: LD_INT 12
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 34
17472: PUSH
17473: LD_INT 51
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 34
17482: PUSH
17483: LD_INT 32
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 34
17492: PUSH
17493: LD_INT 89
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: ST_TO_ADDR
// if tmp then
17517: LD_VAR 0 4
17521: IFFALSE 17647
// begin for j in tmp do
17523: LD_ADDR_VAR 0 2
17527: PUSH
17528: LD_VAR 0 4
17532: PUSH
17533: FOR_IN
17534: IFFALSE 17645
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17536: LD_VAR 0 2
17540: PPUSH
17541: CALL_OW 262
17545: PUSH
17546: LD_INT 3
17548: EQUAL
17549: PUSH
17550: LD_VAR 0 2
17554: PPUSH
17555: CALL_OW 261
17559: PUSH
17560: LD_INT 20
17562: GREATER
17563: OR
17564: PUSH
17565: LD_VAR 0 2
17569: PPUSH
17570: CALL_OW 314
17574: NOT
17575: AND
17576: PUSH
17577: LD_VAR 0 2
17581: PPUSH
17582: CALL_OW 263
17586: PUSH
17587: LD_INT 1
17589: NONEQUAL
17590: PUSH
17591: LD_VAR 0 2
17595: PPUSH
17596: CALL_OW 311
17600: OR
17601: AND
17602: IFFALSE 17643
// begin ComCollect ( j , x , y ) ;
17604: LD_VAR 0 2
17608: PPUSH
17609: LD_VAR 0 6
17613: PPUSH
17614: LD_VAR 0 7
17618: PPUSH
17619: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17623: LD_VAR 0 2
17627: PPUSH
17628: LD_VAR 0 8
17632: PPUSH
17633: CALL_OW 172
// exit ;
17637: POP
17638: POP
17639: POP
17640: POP
17641: GO 17651
// end ;
17643: GO 17533
17645: POP
17646: POP
// end ; end ;
17647: GO 17022
17649: POP
17650: POP
// end ; end_of_file
17651: PPOPN 9
17653: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17654: LD_VAR 0 1
17658: PUSH
17659: LD_INT 200
17661: DOUBLE
17662: GREATEREQUAL
17663: IFFALSE 17671
17665: LD_INT 299
17667: DOUBLE
17668: LESSEQUAL
17669: IFTRUE 17673
17671: GO 17705
17673: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17674: LD_VAR 0 1
17678: PPUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: LD_VAR 0 4
17693: PPUSH
17694: LD_VAR 0 5
17698: PPUSH
17699: CALL 18193 0 5
17703: GO 17782
17705: LD_INT 300
17707: DOUBLE
17708: GREATEREQUAL
17709: IFFALSE 17717
17711: LD_INT 399
17713: DOUBLE
17714: LESSEQUAL
17715: IFTRUE 17719
17717: GO 17781
17719: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17720: LD_VAR 0 1
17724: PPUSH
17725: LD_VAR 0 2
17729: PPUSH
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_VAR 0 4
17739: PPUSH
17740: LD_VAR 0 5
17744: PPUSH
17745: LD_VAR 0 6
17749: PPUSH
17750: LD_VAR 0 7
17754: PPUSH
17755: LD_VAR 0 8
17759: PPUSH
17760: LD_VAR 0 9
17764: PPUSH
17765: LD_VAR 0 10
17769: PPUSH
17770: LD_VAR 0 11
17774: PPUSH
17775: CALL 14363 0 11
17779: GO 17782
17781: POP
// end ;
17782: PPOPN 11
17784: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17785: LD_VAR 0 1
17789: PPUSH
17790: LD_VAR 0 2
17794: PPUSH
17795: LD_VAR 0 3
17799: PPUSH
17800: LD_VAR 0 4
17804: PPUSH
17805: LD_VAR 0 5
17809: PPUSH
17810: CALL 17929 0 5
// end ; end_of_file
17814: PPOPN 5
17816: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17817: LD_INT 0
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 264
17832: PUSH
17833: LD_INT 91
17835: EQUAL
17836: IFFALSE 17908
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17838: LD_INT 68
17840: PPUSH
17841: LD_VAR 0 1
17845: PPUSH
17846: CALL_OW 255
17850: PPUSH
17851: CALL_OW 321
17855: PUSH
17856: LD_INT 2
17858: EQUAL
17859: IFFALSE 17871
// eff := 70 else
17861: LD_ADDR_VAR 0 4
17865: PUSH
17866: LD_INT 70
17868: ST_TO_ADDR
17869: GO 17879
// eff := 30 ;
17871: LD_ADDR_VAR 0 4
17875: PUSH
17876: LD_INT 30
17878: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17879: LD_VAR 0 1
17883: PPUSH
17884: CALL_OW 250
17888: PPUSH
17889: LD_VAR 0 1
17893: PPUSH
17894: CALL_OW 251
17898: PPUSH
17899: LD_VAR 0 4
17903: PPUSH
17904: CALL_OW 495
// end ; end ;
17908: LD_VAR 0 2
17912: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17913: LD_INT 0
17915: PPUSH
// end ;
17916: LD_VAR 0 4
17920: RET
// export function SOS_Command ( cmd ) ; begin
17921: LD_INT 0
17923: PPUSH
// end ;
17924: LD_VAR 0 2
17928: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17929: LD_INT 0
17931: PPUSH
// end ;
17932: LD_VAR 0 6
17936: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17937: LD_INT 0
17939: PPUSH
17940: PPUSH
// if not vehicle or not factory then
17941: LD_VAR 0 1
17945: NOT
17946: PUSH
17947: LD_VAR 0 2
17951: NOT
17952: OR
17953: IFFALSE 17957
// exit ;
17955: GO 18188
// if factoryWaypoints >= factory then
17957: LD_EXP 66
17961: PUSH
17962: LD_VAR 0 2
17966: GREATEREQUAL
17967: IFFALSE 18188
// if factoryWaypoints [ factory ] then
17969: LD_EXP 66
17973: PUSH
17974: LD_VAR 0 2
17978: ARRAY
17979: IFFALSE 18188
// begin if GetControl ( vehicle ) = control_manual then
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL_OW 263
17990: PUSH
17991: LD_INT 1
17993: EQUAL
17994: IFFALSE 18075
// begin driver := IsDrivenBy ( vehicle ) ;
17996: LD_ADDR_VAR 0 4
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 311
18010: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18011: LD_VAR 0 4
18015: PPUSH
18016: LD_EXP 66
18020: PUSH
18021: LD_VAR 0 2
18025: ARRAY
18026: PUSH
18027: LD_INT 3
18029: ARRAY
18030: PPUSH
18031: LD_EXP 66
18035: PUSH
18036: LD_VAR 0 2
18040: ARRAY
18041: PUSH
18042: LD_INT 4
18044: ARRAY
18045: PPUSH
18046: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18050: LD_VAR 0 4
18054: PPUSH
18055: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18059: LD_VAR 0 4
18063: PPUSH
18064: LD_VAR 0 2
18068: PPUSH
18069: CALL_OW 180
// end else
18073: GO 18188
// if GetControl ( vehicle ) = control_remote then
18075: LD_VAR 0 1
18079: PPUSH
18080: CALL_OW 263
18084: PUSH
18085: LD_INT 2
18087: EQUAL
18088: IFFALSE 18149
// begin wait ( 0 0$2 ) ;
18090: LD_INT 70
18092: PPUSH
18093: CALL_OW 67
// if Connect ( vehicle ) then
18097: LD_VAR 0 1
18101: PPUSH
18102: CALL 30212 0 1
18106: IFFALSE 18147
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_EXP 66
18117: PUSH
18118: LD_VAR 0 2
18122: ARRAY
18123: PUSH
18124: LD_INT 3
18126: ARRAY
18127: PPUSH
18128: LD_EXP 66
18132: PUSH
18133: LD_VAR 0 2
18137: ARRAY
18138: PUSH
18139: LD_INT 4
18141: ARRAY
18142: PPUSH
18143: CALL_OW 171
// end else
18147: GO 18188
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18149: LD_VAR 0 1
18153: PPUSH
18154: LD_EXP 66
18158: PUSH
18159: LD_VAR 0 2
18163: ARRAY
18164: PUSH
18165: LD_INT 3
18167: ARRAY
18168: PPUSH
18169: LD_EXP 66
18173: PUSH
18174: LD_VAR 0 2
18178: ARRAY
18179: PUSH
18180: LD_INT 4
18182: ARRAY
18183: PPUSH
18184: CALL_OW 171
// end ; end ;
18188: LD_VAR 0 3
18192: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18193: LD_INT 0
18195: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18196: LD_VAR 0 1
18200: PUSH
18201: LD_INT 250
18203: EQUAL
18204: PUSH
18205: LD_VAR 0 2
18209: PPUSH
18210: CALL_OW 264
18214: PUSH
18215: LD_INT 81
18217: EQUAL
18218: AND
18219: IFFALSE 18240
// MinerPlaceMine ( unit , x , y ) ;
18221: LD_VAR 0 2
18225: PPUSH
18226: LD_VAR 0 4
18230: PPUSH
18231: LD_VAR 0 5
18235: PPUSH
18236: CALL 20625 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18240: LD_VAR 0 1
18244: PUSH
18245: LD_INT 251
18247: EQUAL
18248: PUSH
18249: LD_VAR 0 2
18253: PPUSH
18254: CALL_OW 264
18258: PUSH
18259: LD_INT 81
18261: EQUAL
18262: AND
18263: IFFALSE 18284
// MinerDetonateMine ( unit , x , y ) ;
18265: LD_VAR 0 2
18269: PPUSH
18270: LD_VAR 0 4
18274: PPUSH
18275: LD_VAR 0 5
18279: PPUSH
18280: CALL 20900 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18284: LD_VAR 0 1
18288: PUSH
18289: LD_INT 252
18291: EQUAL
18292: PUSH
18293: LD_VAR 0 2
18297: PPUSH
18298: CALL_OW 264
18302: PUSH
18303: LD_INT 81
18305: EQUAL
18306: AND
18307: IFFALSE 18328
// MinerCreateMinefield ( unit , x , y ) ;
18309: LD_VAR 0 2
18313: PPUSH
18314: LD_VAR 0 4
18318: PPUSH
18319: LD_VAR 0 5
18323: PPUSH
18324: CALL 21317 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18328: LD_VAR 0 1
18332: PUSH
18333: LD_INT 253
18335: EQUAL
18336: PUSH
18337: LD_VAR 0 2
18341: PPUSH
18342: CALL_OW 257
18346: PUSH
18347: LD_INT 5
18349: EQUAL
18350: AND
18351: IFFALSE 18372
// ComBinocular ( unit , x , y ) ;
18353: LD_VAR 0 2
18357: PPUSH
18358: LD_VAR 0 4
18362: PPUSH
18363: LD_VAR 0 5
18367: PPUSH
18368: CALL 21686 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18372: LD_VAR 0 1
18376: PUSH
18377: LD_INT 254
18379: EQUAL
18380: PUSH
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 264
18390: PUSH
18391: LD_INT 99
18393: EQUAL
18394: AND
18395: PUSH
18396: LD_VAR 0 3
18400: PPUSH
18401: CALL_OW 263
18405: PUSH
18406: LD_INT 3
18408: EQUAL
18409: AND
18410: IFFALSE 18426
// HackDestroyVehicle ( unit , selectedUnit ) ;
18412: LD_VAR 0 2
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: CALL 19989 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18426: LD_VAR 0 1
18430: PUSH
18431: LD_INT 255
18433: EQUAL
18434: PUSH
18435: LD_VAR 0 2
18439: PPUSH
18440: CALL_OW 264
18444: PUSH
18445: LD_INT 14
18447: PUSH
18448: LD_INT 53
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: IN
18455: AND
18456: PUSH
18457: LD_VAR 0 4
18461: PPUSH
18462: LD_VAR 0 5
18466: PPUSH
18467: CALL_OW 488
18471: AND
18472: IFFALSE 18496
// CutTreeXYR ( unit , x , y , 12 ) ;
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_VAR 0 4
18483: PPUSH
18484: LD_VAR 0 5
18488: PPUSH
18489: LD_INT 12
18491: PPUSH
18492: CALL 18559 0 4
// if cmd = 256 then
18496: LD_VAR 0 1
18500: PUSH
18501: LD_INT 256
18503: EQUAL
18504: IFFALSE 18525
// SetFactoryWaypoint ( unit , x , y ) ;
18506: LD_VAR 0 2
18510: PPUSH
18511: LD_VAR 0 4
18515: PPUSH
18516: LD_VAR 0 5
18520: PPUSH
18521: CALL 16343 0 3
// if cmd = 257 then
18525: LD_VAR 0 1
18529: PUSH
18530: LD_INT 257
18532: EQUAL
18533: IFFALSE 18554
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18535: LD_VAR 0 2
18539: PPUSH
18540: LD_VAR 0 4
18544: PPUSH
18545: LD_VAR 0 5
18549: PPUSH
18550: CALL 16705 0 3
// end ;
18554: LD_VAR 0 6
18558: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18559: LD_INT 0
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18570: LD_VAR 0 1
18574: NOT
18575: PUSH
18576: LD_VAR 0 2
18580: PPUSH
18581: LD_VAR 0 3
18585: PPUSH
18586: CALL_OW 488
18590: NOT
18591: OR
18592: PUSH
18593: LD_VAR 0 4
18597: NOT
18598: OR
18599: IFFALSE 18603
// exit ;
18601: GO 18943
// list := [ ] ;
18603: LD_ADDR_VAR 0 13
18607: PUSH
18608: EMPTY
18609: ST_TO_ADDR
// if x - r < 0 then
18610: LD_VAR 0 2
18614: PUSH
18615: LD_VAR 0 4
18619: MINUS
18620: PUSH
18621: LD_INT 0
18623: LESS
18624: IFFALSE 18636
// min_x := 0 else
18626: LD_ADDR_VAR 0 7
18630: PUSH
18631: LD_INT 0
18633: ST_TO_ADDR
18634: GO 18652
// min_x := x - r ;
18636: LD_ADDR_VAR 0 7
18640: PUSH
18641: LD_VAR 0 2
18645: PUSH
18646: LD_VAR 0 4
18650: MINUS
18651: ST_TO_ADDR
// if y - r < 0 then
18652: LD_VAR 0 3
18656: PUSH
18657: LD_VAR 0 4
18661: MINUS
18662: PUSH
18663: LD_INT 0
18665: LESS
18666: IFFALSE 18678
// min_y := 0 else
18668: LD_ADDR_VAR 0 8
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
18676: GO 18694
// min_y := y - r ;
18678: LD_ADDR_VAR 0 8
18682: PUSH
18683: LD_VAR 0 3
18687: PUSH
18688: LD_VAR 0 4
18692: MINUS
18693: ST_TO_ADDR
// max_x := x + r ;
18694: LD_ADDR_VAR 0 9
18698: PUSH
18699: LD_VAR 0 2
18703: PUSH
18704: LD_VAR 0 4
18708: PLUS
18709: ST_TO_ADDR
// max_y := y + r ;
18710: LD_ADDR_VAR 0 10
18714: PUSH
18715: LD_VAR 0 3
18719: PUSH
18720: LD_VAR 0 4
18724: PLUS
18725: ST_TO_ADDR
// for _x = min_x to max_x do
18726: LD_ADDR_VAR 0 11
18730: PUSH
18731: DOUBLE
18732: LD_VAR 0 7
18736: DEC
18737: ST_TO_ADDR
18738: LD_VAR 0 9
18742: PUSH
18743: FOR_TO
18744: IFFALSE 18861
// for _y = min_y to max_y do
18746: LD_ADDR_VAR 0 12
18750: PUSH
18751: DOUBLE
18752: LD_VAR 0 8
18756: DEC
18757: ST_TO_ADDR
18758: LD_VAR 0 10
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18857
// begin if not ValidHex ( _x , _y ) then
18766: LD_VAR 0 11
18770: PPUSH
18771: LD_VAR 0 12
18775: PPUSH
18776: CALL_OW 488
18780: NOT
18781: IFFALSE 18785
// continue ;
18783: GO 18763
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18785: LD_VAR 0 11
18789: PPUSH
18790: LD_VAR 0 12
18794: PPUSH
18795: CALL_OW 351
18799: PUSH
18800: LD_VAR 0 11
18804: PPUSH
18805: LD_VAR 0 12
18809: PPUSH
18810: CALL_OW 554
18814: AND
18815: IFFALSE 18855
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18817: LD_ADDR_VAR 0 13
18821: PUSH
18822: LD_VAR 0 13
18826: PPUSH
18827: LD_VAR 0 13
18831: PUSH
18832: LD_INT 1
18834: PLUS
18835: PPUSH
18836: LD_VAR 0 11
18840: PUSH
18841: LD_VAR 0 12
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 2
18854: ST_TO_ADDR
// end ;
18855: GO 18763
18857: POP
18858: POP
18859: GO 18743
18861: POP
18862: POP
// if not list then
18863: LD_VAR 0 13
18867: NOT
18868: IFFALSE 18872
// exit ;
18870: GO 18943
// for i in list do
18872: LD_ADDR_VAR 0 6
18876: PUSH
18877: LD_VAR 0 13
18881: PUSH
18882: FOR_IN
18883: IFFALSE 18941
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_STRING M
18892: PUSH
18893: LD_VAR 0 6
18897: PUSH
18898: LD_INT 1
18900: ARRAY
18901: PUSH
18902: LD_VAR 0 6
18906: PUSH
18907: LD_INT 2
18909: ARRAY
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: PPUSH
18935: CALL_OW 447
18939: GO 18882
18941: POP
18942: POP
// end ;
18943: LD_VAR 0 5
18947: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18948: LD_EXP 69
18952: NOT
18953: IFFALSE 19003
18955: GO 18957
18957: DISABLE
// begin initHack := true ;
18958: LD_ADDR_EXP 69
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// hackTanks := [ ] ;
18966: LD_ADDR_EXP 70
18970: PUSH
18971: EMPTY
18972: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18973: LD_ADDR_EXP 71
18977: PUSH
18978: EMPTY
18979: ST_TO_ADDR
// hackLimit := 3 ;
18980: LD_ADDR_EXP 72
18984: PUSH
18985: LD_INT 3
18987: ST_TO_ADDR
// hackDist := 12 ;
18988: LD_ADDR_EXP 73
18992: PUSH
18993: LD_INT 12
18995: ST_TO_ADDR
// hackCounter := [ ] ;
18996: LD_ADDR_EXP 74
19000: PUSH
19001: EMPTY
19002: ST_TO_ADDR
// end ;
19003: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19004: LD_EXP 69
19008: PUSH
19009: LD_INT 34
19011: PUSH
19012: LD_INT 99
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PPUSH
19019: CALL_OW 69
19023: AND
19024: IFFALSE 19277
19026: GO 19028
19028: DISABLE
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
// begin enable ;
19033: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19034: LD_ADDR_VAR 0 1
19038: PUSH
19039: LD_INT 34
19041: PUSH
19042: LD_INT 99
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 69
19053: PUSH
19054: FOR_IN
19055: IFFALSE 19275
// begin if not i in hackTanks then
19057: LD_VAR 0 1
19061: PUSH
19062: LD_EXP 70
19066: IN
19067: NOT
19068: IFFALSE 19151
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19070: LD_ADDR_EXP 70
19074: PUSH
19075: LD_EXP 70
19079: PPUSH
19080: LD_EXP 70
19084: PUSH
19085: LD_INT 1
19087: PLUS
19088: PPUSH
19089: LD_VAR 0 1
19093: PPUSH
19094: CALL_OW 1
19098: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19099: LD_ADDR_EXP 71
19103: PUSH
19104: LD_EXP 71
19108: PPUSH
19109: LD_EXP 71
19113: PUSH
19114: LD_INT 1
19116: PLUS
19117: PPUSH
19118: EMPTY
19119: PPUSH
19120: CALL_OW 1
19124: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19125: LD_ADDR_EXP 74
19129: PUSH
19130: LD_EXP 74
19134: PPUSH
19135: LD_EXP 74
19139: PUSH
19140: LD_INT 1
19142: PLUS
19143: PPUSH
19144: EMPTY
19145: PPUSH
19146: CALL_OW 1
19150: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 302
19160: NOT
19161: IFFALSE 19174
// begin HackUnlinkAll ( i ) ;
19163: LD_VAR 0 1
19167: PPUSH
19168: CALL 19280 0 1
// continue ;
19172: GO 19054
// end ; HackCheckCapturedStatus ( i ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: CALL 19723 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19183: LD_ADDR_VAR 0 2
19187: PUSH
19188: LD_INT 81
19190: PUSH
19191: LD_VAR 0 1
19195: PPUSH
19196: CALL_OW 255
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 33
19207: PUSH
19208: LD_INT 3
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 91
19217: PUSH
19218: LD_VAR 0 1
19222: PUSH
19223: LD_EXP 73
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 50
19235: PUSH
19236: EMPTY
19237: LIST
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: PPUSH
19245: CALL_OW 69
19249: ST_TO_ADDR
// if not tmp then
19250: LD_VAR 0 2
19254: NOT
19255: IFFALSE 19259
// continue ;
19257: GO 19054
// HackLink ( i , tmp ) ;
19259: LD_VAR 0 1
19263: PPUSH
19264: LD_VAR 0 2
19268: PPUSH
19269: CALL 19416 0 2
// end ;
19273: GO 19054
19275: POP
19276: POP
// end ;
19277: PPOPN 2
19279: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19280: LD_INT 0
19282: PPUSH
19283: PPUSH
19284: PPUSH
// if not hack in hackTanks then
19285: LD_VAR 0 1
19289: PUSH
19290: LD_EXP 70
19294: IN
19295: NOT
19296: IFFALSE 19300
// exit ;
19298: GO 19411
// index := GetElementIndex ( hackTanks , hack ) ;
19300: LD_ADDR_VAR 0 4
19304: PUSH
19305: LD_EXP 70
19309: PPUSH
19310: LD_VAR 0 1
19314: PPUSH
19315: CALL 27028 0 2
19319: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19320: LD_EXP 71
19324: PUSH
19325: LD_VAR 0 4
19329: ARRAY
19330: IFFALSE 19411
// begin for i in hackTanksCaptured [ index ] do
19332: LD_ADDR_VAR 0 3
19336: PUSH
19337: LD_EXP 71
19341: PUSH
19342: LD_VAR 0 4
19346: ARRAY
19347: PUSH
19348: FOR_IN
19349: IFFALSE 19375
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 1
19358: ARRAY
19359: PPUSH
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 2
19367: ARRAY
19368: PPUSH
19369: CALL_OW 235
19373: GO 19348
19375: POP
19376: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19377: LD_ADDR_EXP 71
19381: PUSH
19382: LD_EXP 71
19386: PPUSH
19387: LD_VAR 0 4
19391: PPUSH
19392: EMPTY
19393: PPUSH
19394: CALL_OW 1
19398: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_INT 0
19406: PPUSH
19407: CALL_OW 505
// end ; end ;
19411: LD_VAR 0 2
19415: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19416: LD_INT 0
19418: PPUSH
19419: PPUSH
19420: PPUSH
// if not hack in hackTanks or not vehicles then
19421: LD_VAR 0 1
19425: PUSH
19426: LD_EXP 70
19430: IN
19431: NOT
19432: PUSH
19433: LD_VAR 0 2
19437: NOT
19438: OR
19439: IFFALSE 19443
// exit ;
19441: GO 19718
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19443: LD_ADDR_VAR 0 2
19447: PUSH
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_VAR 0 2
19457: PPUSH
19458: LD_INT 1
19460: PPUSH
19461: LD_INT 1
19463: PPUSH
19464: CALL 27678 0 4
19468: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19469: LD_ADDR_VAR 0 5
19473: PUSH
19474: LD_EXP 70
19478: PPUSH
19479: LD_VAR 0 1
19483: PPUSH
19484: CALL 27028 0 2
19488: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19489: LD_EXP 71
19493: PUSH
19494: LD_VAR 0 5
19498: ARRAY
19499: PUSH
19500: LD_EXP 72
19504: LESS
19505: IFFALSE 19694
// begin for i := 1 to vehicles do
19507: LD_ADDR_VAR 0 4
19511: PUSH
19512: DOUBLE
19513: LD_INT 1
19515: DEC
19516: ST_TO_ADDR
19517: LD_VAR 0 2
19521: PUSH
19522: FOR_TO
19523: IFFALSE 19692
// begin if hackTanksCaptured [ index ] = hackLimit then
19525: LD_EXP 71
19529: PUSH
19530: LD_VAR 0 5
19534: ARRAY
19535: PUSH
19536: LD_EXP 72
19540: EQUAL
19541: IFFALSE 19545
// break ;
19543: GO 19692
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19545: LD_ADDR_EXP 74
19549: PUSH
19550: LD_EXP 74
19554: PPUSH
19555: LD_VAR 0 5
19559: PPUSH
19560: LD_EXP 74
19564: PUSH
19565: LD_VAR 0 5
19569: ARRAY
19570: PUSH
19571: LD_INT 1
19573: PLUS
19574: PPUSH
19575: CALL_OW 1
19579: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19580: LD_ADDR_EXP 71
19584: PUSH
19585: LD_EXP 71
19589: PPUSH
19590: LD_VAR 0 5
19594: PUSH
19595: LD_EXP 71
19599: PUSH
19600: LD_VAR 0 5
19604: ARRAY
19605: PUSH
19606: LD_INT 1
19608: PLUS
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: LD_VAR 0 2
19618: PUSH
19619: LD_VAR 0 4
19623: ARRAY
19624: PUSH
19625: LD_VAR 0 2
19629: PUSH
19630: LD_VAR 0 4
19634: ARRAY
19635: PPUSH
19636: CALL_OW 255
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL 27243 0 3
19649: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19650: LD_VAR 0 2
19654: PUSH
19655: LD_VAR 0 4
19659: ARRAY
19660: PPUSH
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 255
19670: PPUSH
19671: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19675: LD_VAR 0 2
19679: PUSH
19680: LD_VAR 0 4
19684: ARRAY
19685: PPUSH
19686: CALL_OW 141
// end ;
19690: GO 19522
19692: POP
19693: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19694: LD_VAR 0 1
19698: PPUSH
19699: LD_EXP 71
19703: PUSH
19704: LD_VAR 0 5
19708: ARRAY
19709: PUSH
19710: LD_INT 0
19712: PLUS
19713: PPUSH
19714: CALL_OW 505
// end ;
19718: LD_VAR 0 3
19722: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19723: LD_INT 0
19725: PPUSH
19726: PPUSH
19727: PPUSH
19728: PPUSH
// if not hack in hackTanks then
19729: LD_VAR 0 1
19733: PUSH
19734: LD_EXP 70
19738: IN
19739: NOT
19740: IFFALSE 19744
// exit ;
19742: GO 19984
// index := GetElementIndex ( hackTanks , hack ) ;
19744: LD_ADDR_VAR 0 4
19748: PUSH
19749: LD_EXP 70
19753: PPUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL 27028 0 2
19763: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: DOUBLE
19770: LD_EXP 71
19774: PUSH
19775: LD_VAR 0 4
19779: ARRAY
19780: INC
19781: ST_TO_ADDR
19782: LD_INT 1
19784: PUSH
19785: FOR_DOWNTO
19786: IFFALSE 19958
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19788: LD_ADDR_VAR 0 5
19792: PUSH
19793: LD_EXP 71
19797: PUSH
19798: LD_VAR 0 4
19802: ARRAY
19803: PUSH
19804: LD_VAR 0 3
19808: ARRAY
19809: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19810: LD_VAR 0 5
19814: PUSH
19815: LD_INT 1
19817: ARRAY
19818: PPUSH
19819: CALL_OW 302
19823: NOT
19824: PUSH
19825: LD_VAR 0 5
19829: PUSH
19830: LD_INT 1
19832: ARRAY
19833: PPUSH
19834: CALL_OW 255
19838: PUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 255
19848: NONEQUAL
19849: OR
19850: IFFALSE 19956
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19852: LD_VAR 0 5
19856: PUSH
19857: LD_INT 1
19859: ARRAY
19860: PPUSH
19861: CALL_OW 305
19865: PUSH
19866: LD_VAR 0 5
19870: PUSH
19871: LD_INT 1
19873: ARRAY
19874: PPUSH
19875: CALL_OW 255
19879: PUSH
19880: LD_VAR 0 1
19884: PPUSH
19885: CALL_OW 255
19889: EQUAL
19890: AND
19891: IFFALSE 19915
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19893: LD_VAR 0 5
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: PPUSH
19902: LD_VAR 0 5
19906: PUSH
19907: LD_INT 2
19909: ARRAY
19910: PPUSH
19911: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19915: LD_ADDR_EXP 71
19919: PUSH
19920: LD_EXP 71
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_EXP 71
19934: PUSH
19935: LD_VAR 0 4
19939: ARRAY
19940: PPUSH
19941: LD_VAR 0 3
19945: PPUSH
19946: CALL_OW 3
19950: PPUSH
19951: CALL_OW 1
19955: ST_TO_ADDR
// end ; end ;
19956: GO 19785
19958: POP
19959: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_EXP 71
19969: PUSH
19970: LD_VAR 0 4
19974: ARRAY
19975: PUSH
19976: LD_INT 0
19978: PLUS
19979: PPUSH
19980: CALL_OW 505
// end ;
19984: LD_VAR 0 2
19988: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19989: LD_INT 0
19991: PPUSH
19992: PPUSH
19993: PPUSH
19994: PPUSH
// if not hack in hackTanks then
19995: LD_VAR 0 1
19999: PUSH
20000: LD_EXP 70
20004: IN
20005: NOT
20006: IFFALSE 20010
// exit ;
20008: GO 20095
// index := GetElementIndex ( hackTanks , hack ) ;
20010: LD_ADDR_VAR 0 5
20014: PUSH
20015: LD_EXP 70
20019: PPUSH
20020: LD_VAR 0 1
20024: PPUSH
20025: CALL 27028 0 2
20029: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20030: LD_ADDR_VAR 0 4
20034: PUSH
20035: DOUBLE
20036: LD_INT 1
20038: DEC
20039: ST_TO_ADDR
20040: LD_EXP 71
20044: PUSH
20045: LD_VAR 0 5
20049: ARRAY
20050: PUSH
20051: FOR_TO
20052: IFFALSE 20093
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20054: LD_EXP 71
20058: PUSH
20059: LD_VAR 0 5
20063: ARRAY
20064: PUSH
20065: LD_VAR 0 4
20069: ARRAY
20070: PUSH
20071: LD_INT 1
20073: ARRAY
20074: PUSH
20075: LD_VAR 0 2
20079: EQUAL
20080: IFFALSE 20091
// KillUnit ( vehicle ) ;
20082: LD_VAR 0 2
20086: PPUSH
20087: CALL_OW 66
20091: GO 20051
20093: POP
20094: POP
// end ;
20095: LD_VAR 0 3
20099: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20100: LD_EXP 75
20104: NOT
20105: IFFALSE 20140
20107: GO 20109
20109: DISABLE
// begin initMiner := true ;
20110: LD_ADDR_EXP 75
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// minersList := [ ] ;
20118: LD_ADDR_EXP 76
20122: PUSH
20123: EMPTY
20124: ST_TO_ADDR
// minerMinesList := [ ] ;
20125: LD_ADDR_EXP 77
20129: PUSH
20130: EMPTY
20131: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20132: LD_ADDR_EXP 78
20136: PUSH
20137: LD_INT 5
20139: ST_TO_ADDR
// end ;
20140: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20141: LD_EXP 75
20145: PUSH
20146: LD_INT 34
20148: PUSH
20149: LD_INT 81
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PPUSH
20156: CALL_OW 69
20160: AND
20161: IFFALSE 20622
20163: GO 20165
20165: DISABLE
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
// begin enable ;
20172: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20173: LD_ADDR_VAR 0 1
20177: PUSH
20178: LD_INT 34
20180: PUSH
20181: LD_INT 81
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PPUSH
20188: CALL_OW 69
20192: PUSH
20193: FOR_IN
20194: IFFALSE 20266
// begin if not i in minersList then
20196: LD_VAR 0 1
20200: PUSH
20201: LD_EXP 76
20205: IN
20206: NOT
20207: IFFALSE 20264
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20209: LD_ADDR_EXP 76
20213: PUSH
20214: LD_EXP 76
20218: PPUSH
20219: LD_EXP 76
20223: PUSH
20224: LD_INT 1
20226: PLUS
20227: PPUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 1
20237: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20238: LD_ADDR_EXP 77
20242: PUSH
20243: LD_EXP 77
20247: PPUSH
20248: LD_EXP 77
20252: PUSH
20253: LD_INT 1
20255: PLUS
20256: PPUSH
20257: EMPTY
20258: PPUSH
20259: CALL_OW 1
20263: ST_TO_ADDR
// end end ;
20264: GO 20193
20266: POP
20267: POP
// for i := minerMinesList downto 1 do
20268: LD_ADDR_VAR 0 1
20272: PUSH
20273: DOUBLE
20274: LD_EXP 77
20278: INC
20279: ST_TO_ADDR
20280: LD_INT 1
20282: PUSH
20283: FOR_DOWNTO
20284: IFFALSE 20620
// begin if IsLive ( minersList [ i ] ) then
20286: LD_EXP 76
20290: PUSH
20291: LD_VAR 0 1
20295: ARRAY
20296: PPUSH
20297: CALL_OW 300
20301: IFFALSE 20329
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20303: LD_EXP 76
20307: PUSH
20308: LD_VAR 0 1
20312: ARRAY
20313: PPUSH
20314: LD_EXP 77
20318: PUSH
20319: LD_VAR 0 1
20323: ARRAY
20324: PPUSH
20325: CALL_OW 505
// if not minerMinesList [ i ] then
20329: LD_EXP 77
20333: PUSH
20334: LD_VAR 0 1
20338: ARRAY
20339: NOT
20340: IFFALSE 20344
// continue ;
20342: GO 20283
// for j := minerMinesList [ i ] downto 1 do
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: DOUBLE
20350: LD_EXP 77
20354: PUSH
20355: LD_VAR 0 1
20359: ARRAY
20360: INC
20361: ST_TO_ADDR
20362: LD_INT 1
20364: PUSH
20365: FOR_DOWNTO
20366: IFFALSE 20616
// begin side := GetSide ( minersList [ i ] ) ;
20368: LD_ADDR_VAR 0 3
20372: PUSH
20373: LD_EXP 76
20377: PUSH
20378: LD_VAR 0 1
20382: ARRAY
20383: PPUSH
20384: CALL_OW 255
20388: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20389: LD_ADDR_VAR 0 4
20393: PUSH
20394: LD_EXP 77
20398: PUSH
20399: LD_VAR 0 1
20403: ARRAY
20404: PUSH
20405: LD_VAR 0 2
20409: ARRAY
20410: PUSH
20411: LD_INT 1
20413: ARRAY
20414: PPUSH
20415: LD_EXP 77
20419: PUSH
20420: LD_VAR 0 1
20424: ARRAY
20425: PUSH
20426: LD_VAR 0 2
20430: ARRAY
20431: PUSH
20432: LD_INT 2
20434: ARRAY
20435: PPUSH
20436: CALL_OW 428
20440: ST_TO_ADDR
// if not tmp then
20441: LD_VAR 0 4
20445: NOT
20446: IFFALSE 20450
// continue ;
20448: GO 20365
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20450: LD_VAR 0 4
20454: PUSH
20455: LD_INT 81
20457: PUSH
20458: LD_VAR 0 3
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PPUSH
20467: CALL_OW 69
20471: IN
20472: PUSH
20473: LD_EXP 77
20477: PUSH
20478: LD_VAR 0 1
20482: ARRAY
20483: PUSH
20484: LD_VAR 0 2
20488: ARRAY
20489: PUSH
20490: LD_INT 1
20492: ARRAY
20493: PPUSH
20494: LD_EXP 77
20498: PUSH
20499: LD_VAR 0 1
20503: ARRAY
20504: PUSH
20505: LD_VAR 0 2
20509: ARRAY
20510: PUSH
20511: LD_INT 2
20513: ARRAY
20514: PPUSH
20515: CALL_OW 458
20519: AND
20520: IFFALSE 20614
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20522: LD_EXP 77
20526: PUSH
20527: LD_VAR 0 1
20531: ARRAY
20532: PUSH
20533: LD_VAR 0 2
20537: ARRAY
20538: PUSH
20539: LD_INT 1
20541: ARRAY
20542: PPUSH
20543: LD_EXP 77
20547: PUSH
20548: LD_VAR 0 1
20552: ARRAY
20553: PUSH
20554: LD_VAR 0 2
20558: ARRAY
20559: PUSH
20560: LD_INT 2
20562: ARRAY
20563: PPUSH
20564: LD_VAR 0 3
20568: PPUSH
20569: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20573: LD_ADDR_EXP 77
20577: PUSH
20578: LD_EXP 77
20582: PPUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: LD_EXP 77
20592: PUSH
20593: LD_VAR 0 1
20597: ARRAY
20598: PPUSH
20599: LD_VAR 0 2
20603: PPUSH
20604: CALL_OW 3
20608: PPUSH
20609: CALL_OW 1
20613: ST_TO_ADDR
// end ; end ;
20614: GO 20365
20616: POP
20617: POP
// end ;
20618: GO 20283
20620: POP
20621: POP
// end ;
20622: PPOPN 4
20624: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20625: LD_INT 0
20627: PPUSH
20628: PPUSH
// result := false ;
20629: LD_ADDR_VAR 0 4
20633: PUSH
20634: LD_INT 0
20636: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20637: LD_VAR 0 1
20641: PPUSH
20642: CALL_OW 264
20646: PUSH
20647: LD_INT 81
20649: EQUAL
20650: NOT
20651: IFFALSE 20655
// exit ;
20653: GO 20895
// index := GetElementIndex ( minersList , unit ) ;
20655: LD_ADDR_VAR 0 5
20659: PUSH
20660: LD_EXP 76
20664: PPUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL 27028 0 2
20674: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20675: LD_EXP 77
20679: PUSH
20680: LD_VAR 0 5
20684: ARRAY
20685: PUSH
20686: LD_EXP 78
20690: GREATEREQUAL
20691: IFFALSE 20695
// exit ;
20693: GO 20895
// ComMoveXY ( unit , x , y ) ;
20695: LD_VAR 0 1
20699: PPUSH
20700: LD_VAR 0 2
20704: PPUSH
20705: LD_VAR 0 3
20709: PPUSH
20710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20714: LD_INT 35
20716: PPUSH
20717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_VAR 0 2
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL 58383 0 3
20740: NOT
20741: PUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 314
20751: AND
20752: IFFALSE 20756
// exit ;
20754: GO 20895
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20756: LD_VAR 0 2
20760: PPUSH
20761: LD_VAR 0 3
20765: PPUSH
20766: CALL_OW 428
20770: PUSH
20771: LD_VAR 0 1
20775: EQUAL
20776: PUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 314
20786: NOT
20787: AND
20788: IFFALSE 20714
// PlaySoundXY ( x , y , PlantMine ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_VAR 0 3
20799: PPUSH
20800: LD_STRING PlantMine
20802: PPUSH
20803: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20807: LD_VAR 0 2
20811: PPUSH
20812: LD_VAR 0 3
20816: PPUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 255
20826: PPUSH
20827: LD_INT 0
20829: PPUSH
20830: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20834: LD_ADDR_EXP 77
20838: PUSH
20839: LD_EXP 77
20843: PPUSH
20844: LD_VAR 0 5
20848: PUSH
20849: LD_EXP 77
20853: PUSH
20854: LD_VAR 0 5
20858: ARRAY
20859: PUSH
20860: LD_INT 1
20862: PLUS
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PPUSH
20868: LD_VAR 0 2
20872: PUSH
20873: LD_VAR 0 3
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL 27243 0 3
20886: ST_TO_ADDR
// result := true ;
20887: LD_ADDR_VAR 0 4
20891: PUSH
20892: LD_INT 1
20894: ST_TO_ADDR
// end ;
20895: LD_VAR 0 4
20899: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20900: LD_INT 0
20902: PPUSH
20903: PPUSH
20904: PPUSH
// if not unit in minersList then
20905: LD_VAR 0 1
20909: PUSH
20910: LD_EXP 76
20914: IN
20915: NOT
20916: IFFALSE 20920
// exit ;
20918: GO 21312
// index := GetElementIndex ( minersList , unit ) ;
20920: LD_ADDR_VAR 0 6
20924: PUSH
20925: LD_EXP 76
20929: PPUSH
20930: LD_VAR 0 1
20934: PPUSH
20935: CALL 27028 0 2
20939: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20940: LD_ADDR_VAR 0 5
20944: PUSH
20945: DOUBLE
20946: LD_EXP 77
20950: PUSH
20951: LD_VAR 0 6
20955: ARRAY
20956: INC
20957: ST_TO_ADDR
20958: LD_INT 1
20960: PUSH
20961: FOR_DOWNTO
20962: IFFALSE 21123
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20964: LD_EXP 77
20968: PUSH
20969: LD_VAR 0 6
20973: ARRAY
20974: PUSH
20975: LD_VAR 0 5
20979: ARRAY
20980: PUSH
20981: LD_INT 1
20983: ARRAY
20984: PUSH
20985: LD_VAR 0 2
20989: EQUAL
20990: PUSH
20991: LD_EXP 77
20995: PUSH
20996: LD_VAR 0 6
21000: ARRAY
21001: PUSH
21002: LD_VAR 0 5
21006: ARRAY
21007: PUSH
21008: LD_INT 2
21010: ARRAY
21011: PUSH
21012: LD_VAR 0 3
21016: EQUAL
21017: AND
21018: IFFALSE 21121
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21020: LD_EXP 77
21024: PUSH
21025: LD_VAR 0 6
21029: ARRAY
21030: PUSH
21031: LD_VAR 0 5
21035: ARRAY
21036: PUSH
21037: LD_INT 1
21039: ARRAY
21040: PPUSH
21041: LD_EXP 77
21045: PUSH
21046: LD_VAR 0 6
21050: ARRAY
21051: PUSH
21052: LD_VAR 0 5
21056: ARRAY
21057: PUSH
21058: LD_INT 2
21060: ARRAY
21061: PPUSH
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 255
21071: PPUSH
21072: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21076: LD_ADDR_EXP 77
21080: PUSH
21081: LD_EXP 77
21085: PPUSH
21086: LD_VAR 0 6
21090: PPUSH
21091: LD_EXP 77
21095: PUSH
21096: LD_VAR 0 6
21100: ARRAY
21101: PPUSH
21102: LD_VAR 0 5
21106: PPUSH
21107: CALL_OW 3
21111: PPUSH
21112: CALL_OW 1
21116: ST_TO_ADDR
// exit ;
21117: POP
21118: POP
21119: GO 21312
// end ; end ;
21121: GO 20961
21123: POP
21124: POP
// for i := minerMinesList [ index ] downto 1 do
21125: LD_ADDR_VAR 0 5
21129: PUSH
21130: DOUBLE
21131: LD_EXP 77
21135: PUSH
21136: LD_VAR 0 6
21140: ARRAY
21141: INC
21142: ST_TO_ADDR
21143: LD_INT 1
21145: PUSH
21146: FOR_DOWNTO
21147: IFFALSE 21310
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21149: LD_EXP 77
21153: PUSH
21154: LD_VAR 0 6
21158: ARRAY
21159: PUSH
21160: LD_VAR 0 5
21164: ARRAY
21165: PUSH
21166: LD_INT 1
21168: ARRAY
21169: PPUSH
21170: LD_EXP 77
21174: PUSH
21175: LD_VAR 0 6
21179: ARRAY
21180: PUSH
21181: LD_VAR 0 5
21185: ARRAY
21186: PUSH
21187: LD_INT 2
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 2
21195: PPUSH
21196: LD_VAR 0 3
21200: PPUSH
21201: CALL_OW 298
21205: PUSH
21206: LD_INT 6
21208: LESS
21209: IFFALSE 21308
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21211: LD_EXP 77
21215: PUSH
21216: LD_VAR 0 6
21220: ARRAY
21221: PUSH
21222: LD_VAR 0 5
21226: ARRAY
21227: PUSH
21228: LD_INT 1
21230: ARRAY
21231: PPUSH
21232: LD_EXP 77
21236: PUSH
21237: LD_VAR 0 6
21241: ARRAY
21242: PUSH
21243: LD_VAR 0 5
21247: ARRAY
21248: PUSH
21249: LD_INT 2
21251: ARRAY
21252: PPUSH
21253: LD_VAR 0 1
21257: PPUSH
21258: CALL_OW 255
21262: PPUSH
21263: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21267: LD_ADDR_EXP 77
21271: PUSH
21272: LD_EXP 77
21276: PPUSH
21277: LD_VAR 0 6
21281: PPUSH
21282: LD_EXP 77
21286: PUSH
21287: LD_VAR 0 6
21291: ARRAY
21292: PPUSH
21293: LD_VAR 0 5
21297: PPUSH
21298: CALL_OW 3
21302: PPUSH
21303: CALL_OW 1
21307: ST_TO_ADDR
// end ; end ;
21308: GO 21146
21310: POP
21311: POP
// end ;
21312: LD_VAR 0 4
21316: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
21321: PPUSH
21322: PPUSH
21323: PPUSH
21324: PPUSH
21325: PPUSH
21326: PPUSH
21327: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21328: LD_VAR 0 1
21332: PPUSH
21333: CALL_OW 264
21337: PUSH
21338: LD_INT 81
21340: EQUAL
21341: NOT
21342: PUSH
21343: LD_VAR 0 1
21347: PUSH
21348: LD_EXP 76
21352: IN
21353: NOT
21354: OR
21355: IFFALSE 21359
// exit ;
21357: GO 21681
// index := GetElementIndex ( minersList , unit ) ;
21359: LD_ADDR_VAR 0 6
21363: PUSH
21364: LD_EXP 76
21368: PPUSH
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL 27028 0 2
21378: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21379: LD_ADDR_VAR 0 8
21383: PUSH
21384: LD_EXP 78
21388: PUSH
21389: LD_EXP 77
21393: PUSH
21394: LD_VAR 0 6
21398: ARRAY
21399: MINUS
21400: ST_TO_ADDR
// if not minesFreeAmount then
21401: LD_VAR 0 8
21405: NOT
21406: IFFALSE 21410
// exit ;
21408: GO 21681
// tmp := [ ] ;
21410: LD_ADDR_VAR 0 7
21414: PUSH
21415: EMPTY
21416: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21417: LD_ADDR_VAR 0 5
21421: PUSH
21422: DOUBLE
21423: LD_INT 1
21425: DEC
21426: ST_TO_ADDR
21427: LD_VAR 0 8
21431: PUSH
21432: FOR_TO
21433: IFFALSE 21628
// begin _d := rand ( 0 , 5 ) ;
21435: LD_ADDR_VAR 0 11
21439: PUSH
21440: LD_INT 0
21442: PPUSH
21443: LD_INT 5
21445: PPUSH
21446: CALL_OW 12
21450: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21451: LD_ADDR_VAR 0 12
21455: PUSH
21456: LD_INT 2
21458: PPUSH
21459: LD_INT 6
21461: PPUSH
21462: CALL_OW 12
21466: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21467: LD_ADDR_VAR 0 9
21471: PUSH
21472: LD_VAR 0 2
21476: PPUSH
21477: LD_VAR 0 11
21481: PPUSH
21482: LD_VAR 0 12
21486: PPUSH
21487: CALL_OW 272
21491: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21492: LD_ADDR_VAR 0 10
21496: PUSH
21497: LD_VAR 0 3
21501: PPUSH
21502: LD_VAR 0 11
21506: PPUSH
21507: LD_VAR 0 12
21511: PPUSH
21512: CALL_OW 273
21516: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21517: LD_VAR 0 9
21521: PPUSH
21522: LD_VAR 0 10
21526: PPUSH
21527: CALL_OW 488
21531: PUSH
21532: LD_VAR 0 9
21536: PUSH
21537: LD_VAR 0 10
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_VAR 0 7
21550: IN
21551: NOT
21552: AND
21553: PUSH
21554: LD_VAR 0 9
21558: PPUSH
21559: LD_VAR 0 10
21563: PPUSH
21564: CALL_OW 458
21568: NOT
21569: AND
21570: IFFALSE 21612
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21572: LD_ADDR_VAR 0 7
21576: PUSH
21577: LD_VAR 0 7
21581: PPUSH
21582: LD_VAR 0 7
21586: PUSH
21587: LD_INT 1
21589: PLUS
21590: PPUSH
21591: LD_VAR 0 9
21595: PUSH
21596: LD_VAR 0 10
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: CALL_OW 1
21609: ST_TO_ADDR
21610: GO 21626
// i := i - 1 ;
21612: LD_ADDR_VAR 0 5
21616: PUSH
21617: LD_VAR 0 5
21621: PUSH
21622: LD_INT 1
21624: MINUS
21625: ST_TO_ADDR
// end ;
21626: GO 21432
21628: POP
21629: POP
// for i in tmp do
21630: LD_ADDR_VAR 0 5
21634: PUSH
21635: LD_VAR 0 7
21639: PUSH
21640: FOR_IN
21641: IFFALSE 21679
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21643: LD_VAR 0 1
21647: PPUSH
21648: LD_VAR 0 5
21652: PUSH
21653: LD_INT 1
21655: ARRAY
21656: PPUSH
21657: LD_VAR 0 5
21661: PUSH
21662: LD_INT 2
21664: ARRAY
21665: PPUSH
21666: CALL 20625 0 3
21670: NOT
21671: IFFALSE 21677
// exit ;
21673: POP
21674: POP
21675: GO 21681
21677: GO 21640
21679: POP
21680: POP
// end ;
21681: LD_VAR 0 4
21685: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21686: LD_INT 0
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
// if not GetClass ( unit ) = class_sniper then
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 257
21704: PUSH
21705: LD_INT 5
21707: EQUAL
21708: NOT
21709: IFFALSE 21713
// exit ;
21711: GO 22101
// dist := 8 ;
21713: LD_ADDR_VAR 0 5
21717: PUSH
21718: LD_INT 8
21720: ST_TO_ADDR
// viewRange := 12 ;
21721: LD_ADDR_VAR 0 7
21725: PUSH
21726: LD_INT 12
21728: ST_TO_ADDR
// side := GetSide ( unit ) ;
21729: LD_ADDR_VAR 0 6
21733: PUSH
21734: LD_VAR 0 1
21738: PPUSH
21739: CALL_OW 255
21743: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21744: LD_INT 61
21746: PPUSH
21747: LD_VAR 0 6
21751: PPUSH
21752: CALL_OW 321
21756: PUSH
21757: LD_INT 2
21759: EQUAL
21760: IFFALSE 21770
// viewRange := 16 ;
21762: LD_ADDR_VAR 0 7
21766: PUSH
21767: LD_INT 16
21769: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21770: LD_VAR 0 1
21774: PPUSH
21775: LD_VAR 0 2
21779: PPUSH
21780: LD_VAR 0 3
21784: PPUSH
21785: CALL_OW 297
21789: PUSH
21790: LD_VAR 0 5
21794: GREATER
21795: IFFALSE 21874
// begin ComMoveXY ( unit , x , y ) ;
21797: LD_VAR 0 1
21801: PPUSH
21802: LD_VAR 0 2
21806: PPUSH
21807: LD_VAR 0 3
21811: PPUSH
21812: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21816: LD_INT 35
21818: PPUSH
21819: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21823: LD_VAR 0 1
21827: PPUSH
21828: LD_VAR 0 2
21832: PPUSH
21833: LD_VAR 0 3
21837: PPUSH
21838: CALL 58383 0 3
21842: NOT
21843: IFFALSE 21847
// exit ;
21845: GO 22101
// until GetDistUnitXY ( unit , x , y ) < dist ;
21847: LD_VAR 0 1
21851: PPUSH
21852: LD_VAR 0 2
21856: PPUSH
21857: LD_VAR 0 3
21861: PPUSH
21862: CALL_OW 297
21866: PUSH
21867: LD_VAR 0 5
21871: LESS
21872: IFFALSE 21816
// end ; ComTurnXY ( unit , x , y ) ;
21874: LD_VAR 0 1
21878: PPUSH
21879: LD_VAR 0 2
21883: PPUSH
21884: LD_VAR 0 3
21888: PPUSH
21889: CALL_OW 118
// wait ( 5 ) ;
21893: LD_INT 5
21895: PPUSH
21896: CALL_OW 67
// _d := GetDir ( unit ) ;
21900: LD_ADDR_VAR 0 10
21904: PUSH
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 254
21914: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21915: LD_ADDR_VAR 0 8
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: CALL_OW 250
21929: PPUSH
21930: LD_VAR 0 10
21934: PPUSH
21935: LD_VAR 0 5
21939: PPUSH
21940: CALL_OW 272
21944: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21945: LD_ADDR_VAR 0 9
21949: PUSH
21950: LD_VAR 0 1
21954: PPUSH
21955: CALL_OW 251
21959: PPUSH
21960: LD_VAR 0 10
21964: PPUSH
21965: LD_VAR 0 5
21969: PPUSH
21970: CALL_OW 273
21974: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21975: LD_VAR 0 8
21979: PPUSH
21980: LD_VAR 0 9
21984: PPUSH
21985: CALL_OW 488
21989: NOT
21990: IFFALSE 21994
// exit ;
21992: GO 22101
// ComAnimCustom ( unit , 1 ) ;
21994: LD_VAR 0 1
21998: PPUSH
21999: LD_INT 1
22001: PPUSH
22002: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22006: LD_VAR 0 8
22010: PPUSH
22011: LD_VAR 0 9
22015: PPUSH
22016: LD_VAR 0 6
22020: PPUSH
22021: LD_VAR 0 7
22025: PPUSH
22026: CALL_OW 330
// repeat wait ( 1 ) ;
22030: LD_INT 1
22032: PPUSH
22033: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 316
22046: PUSH
22047: LD_VAR 0 1
22051: PPUSH
22052: CALL_OW 314
22056: OR
22057: PUSH
22058: LD_VAR 0 1
22062: PPUSH
22063: CALL_OW 302
22067: NOT
22068: OR
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 301
22079: OR
22080: IFFALSE 22030
// RemoveSeeing ( _x , _y , side ) ;
22082: LD_VAR 0 8
22086: PPUSH
22087: LD_VAR 0 9
22091: PPUSH
22092: LD_VAR 0 6
22096: PPUSH
22097: CALL_OW 331
// end ; end_of_file
22101: LD_VAR 0 4
22105: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22106: LD_INT 0
22108: PPUSH
22109: PPUSH
// if exist_mode then
22110: LD_VAR 0 2
22114: IFFALSE 22139
// unit := CreateCharacter ( prefix & ident ) else
22116: LD_ADDR_VAR 0 5
22120: PUSH
22121: LD_VAR 0 3
22125: PUSH
22126: LD_VAR 0 1
22130: STR
22131: PPUSH
22132: CALL_OW 34
22136: ST_TO_ADDR
22137: GO 22154
// unit := NewCharacter ( ident ) ;
22139: LD_ADDR_VAR 0 5
22143: PUSH
22144: LD_VAR 0 1
22148: PPUSH
22149: CALL_OW 25
22153: ST_TO_ADDR
// result := unit ;
22154: LD_ADDR_VAR 0 4
22158: PUSH
22159: LD_VAR 0 5
22163: ST_TO_ADDR
// end ;
22164: LD_VAR 0 4
22168: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
// if not side or not nation then
22173: LD_VAR 0 1
22177: NOT
22178: PUSH
22179: LD_VAR 0 2
22183: NOT
22184: OR
22185: IFFALSE 22189
// exit ;
22187: GO 22957
// case nation of nation_american :
22189: LD_VAR 0 2
22193: PUSH
22194: LD_INT 1
22196: DOUBLE
22197: EQUAL
22198: IFTRUE 22202
22200: GO 22416
22202: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22203: LD_ADDR_VAR 0 4
22207: PUSH
22208: LD_INT 35
22210: PUSH
22211: LD_INT 45
22213: PUSH
22214: LD_INT 46
22216: PUSH
22217: LD_INT 47
22219: PUSH
22220: LD_INT 82
22222: PUSH
22223: LD_INT 83
22225: PUSH
22226: LD_INT 84
22228: PUSH
22229: LD_INT 85
22231: PUSH
22232: LD_INT 86
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: LD_INT 6
22243: PUSH
22244: LD_INT 15
22246: PUSH
22247: LD_INT 16
22249: PUSH
22250: LD_INT 7
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 13
22258: PUSH
22259: LD_INT 10
22261: PUSH
22262: LD_INT 14
22264: PUSH
22265: LD_INT 20
22267: PUSH
22268: LD_INT 21
22270: PUSH
22271: LD_INT 22
22273: PUSH
22274: LD_INT 25
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 27
22282: PUSH
22283: LD_INT 36
22285: PUSH
22286: LD_INT 69
22288: PUSH
22289: LD_INT 39
22291: PUSH
22292: LD_INT 34
22294: PUSH
22295: LD_INT 40
22297: PUSH
22298: LD_INT 48
22300: PUSH
22301: LD_INT 49
22303: PUSH
22304: LD_INT 50
22306: PUSH
22307: LD_INT 51
22309: PUSH
22310: LD_INT 52
22312: PUSH
22313: LD_INT 53
22315: PUSH
22316: LD_INT 54
22318: PUSH
22319: LD_INT 55
22321: PUSH
22322: LD_INT 56
22324: PUSH
22325: LD_INT 57
22327: PUSH
22328: LD_INT 58
22330: PUSH
22331: LD_INT 59
22333: PUSH
22334: LD_INT 60
22336: PUSH
22337: LD_INT 61
22339: PUSH
22340: LD_INT 62
22342: PUSH
22343: LD_INT 80
22345: PUSH
22346: LD_INT 82
22348: PUSH
22349: LD_INT 83
22351: PUSH
22352: LD_INT 84
22354: PUSH
22355: LD_INT 85
22357: PUSH
22358: LD_INT 86
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 22881
22416: LD_INT 2
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22650
22424: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22425: LD_ADDR_VAR 0 4
22429: PUSH
22430: LD_INT 35
22432: PUSH
22433: LD_INT 45
22435: PUSH
22436: LD_INT 46
22438: PUSH
22439: LD_INT 47
22441: PUSH
22442: LD_INT 82
22444: PUSH
22445: LD_INT 83
22447: PUSH
22448: LD_INT 84
22450: PUSH
22451: LD_INT 85
22453: PUSH
22454: LD_INT 87
22456: PUSH
22457: LD_INT 70
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 11
22465: PUSH
22466: LD_INT 3
22468: PUSH
22469: LD_INT 4
22471: PUSH
22472: LD_INT 5
22474: PUSH
22475: LD_INT 6
22477: PUSH
22478: LD_INT 15
22480: PUSH
22481: LD_INT 18
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 17
22489: PUSH
22490: LD_INT 8
22492: PUSH
22493: LD_INT 20
22495: PUSH
22496: LD_INT 21
22498: PUSH
22499: LD_INT 22
22501: PUSH
22502: LD_INT 72
22504: PUSH
22505: LD_INT 26
22507: PUSH
22508: LD_INT 69
22510: PUSH
22511: LD_INT 39
22513: PUSH
22514: LD_INT 40
22516: PUSH
22517: LD_INT 41
22519: PUSH
22520: LD_INT 42
22522: PUSH
22523: LD_INT 43
22525: PUSH
22526: LD_INT 48
22528: PUSH
22529: LD_INT 49
22531: PUSH
22532: LD_INT 50
22534: PUSH
22535: LD_INT 51
22537: PUSH
22538: LD_INT 52
22540: PUSH
22541: LD_INT 53
22543: PUSH
22544: LD_INT 54
22546: PUSH
22547: LD_INT 55
22549: PUSH
22550: LD_INT 56
22552: PUSH
22553: LD_INT 60
22555: PUSH
22556: LD_INT 61
22558: PUSH
22559: LD_INT 62
22561: PUSH
22562: LD_INT 66
22564: PUSH
22565: LD_INT 67
22567: PUSH
22568: LD_INT 68
22570: PUSH
22571: LD_INT 81
22573: PUSH
22574: LD_INT 82
22576: PUSH
22577: LD_INT 83
22579: PUSH
22580: LD_INT 84
22582: PUSH
22583: LD_INT 85
22585: PUSH
22586: LD_INT 87
22588: PUSH
22589: LD_INT 88
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
22648: GO 22881
22650: LD_INT 3
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22880
22658: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22659: LD_ADDR_VAR 0 4
22663: PUSH
22664: LD_INT 46
22666: PUSH
22667: LD_INT 47
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: LD_INT 82
22678: PUSH
22679: LD_INT 83
22681: PUSH
22682: LD_INT 84
22684: PUSH
22685: LD_INT 85
22687: PUSH
22688: LD_INT 86
22690: PUSH
22691: LD_INT 11
22693: PUSH
22694: LD_INT 9
22696: PUSH
22697: LD_INT 20
22699: PUSH
22700: LD_INT 19
22702: PUSH
22703: LD_INT 21
22705: PUSH
22706: LD_INT 24
22708: PUSH
22709: LD_INT 22
22711: PUSH
22712: LD_INT 25
22714: PUSH
22715: LD_INT 28
22717: PUSH
22718: LD_INT 29
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 31
22726: PUSH
22727: LD_INT 37
22729: PUSH
22730: LD_INT 38
22732: PUSH
22733: LD_INT 32
22735: PUSH
22736: LD_INT 27
22738: PUSH
22739: LD_INT 33
22741: PUSH
22742: LD_INT 69
22744: PUSH
22745: LD_INT 39
22747: PUSH
22748: LD_INT 34
22750: PUSH
22751: LD_INT 40
22753: PUSH
22754: LD_INT 71
22756: PUSH
22757: LD_INT 23
22759: PUSH
22760: LD_INT 44
22762: PUSH
22763: LD_INT 48
22765: PUSH
22766: LD_INT 49
22768: PUSH
22769: LD_INT 50
22771: PUSH
22772: LD_INT 51
22774: PUSH
22775: LD_INT 52
22777: PUSH
22778: LD_INT 53
22780: PUSH
22781: LD_INT 54
22783: PUSH
22784: LD_INT 55
22786: PUSH
22787: LD_INT 56
22789: PUSH
22790: LD_INT 57
22792: PUSH
22793: LD_INT 58
22795: PUSH
22796: LD_INT 59
22798: PUSH
22799: LD_INT 63
22801: PUSH
22802: LD_INT 64
22804: PUSH
22805: LD_INT 65
22807: PUSH
22808: LD_INT 82
22810: PUSH
22811: LD_INT 83
22813: PUSH
22814: LD_INT 84
22816: PUSH
22817: LD_INT 85
22819: PUSH
22820: LD_INT 86
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: ST_TO_ADDR
22878: GO 22881
22880: POP
// if state > - 1 and state < 3 then
22881: LD_VAR 0 3
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: GREATER
22890: PUSH
22891: LD_VAR 0 3
22895: PUSH
22896: LD_INT 3
22898: LESS
22899: AND
22900: IFFALSE 22957
// for i in result do
22902: LD_ADDR_VAR 0 5
22906: PUSH
22907: LD_VAR 0 4
22911: PUSH
22912: FOR_IN
22913: IFFALSE 22955
// if GetTech ( i , side ) <> state then
22915: LD_VAR 0 5
22919: PPUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 321
22929: PUSH
22930: LD_VAR 0 3
22934: NONEQUAL
22935: IFFALSE 22953
// result := result diff i ;
22937: LD_ADDR_VAR 0 4
22941: PUSH
22942: LD_VAR 0 4
22946: PUSH
22947: LD_VAR 0 5
22951: DIFF
22952: ST_TO_ADDR
22953: GO 22912
22955: POP
22956: POP
// end ;
22957: LD_VAR 0 4
22961: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22962: LD_INT 0
22964: PPUSH
22965: PPUSH
22966: PPUSH
// result := true ;
22967: LD_ADDR_VAR 0 3
22971: PUSH
22972: LD_INT 1
22974: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22975: LD_ADDR_VAR 0 5
22979: PUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 480
22989: ST_TO_ADDR
// if not tmp then
22990: LD_VAR 0 5
22994: NOT
22995: IFFALSE 22999
// exit ;
22997: GO 23048
// for i in tmp do
22999: LD_ADDR_VAR 0 4
23003: PUSH
23004: LD_VAR 0 5
23008: PUSH
23009: FOR_IN
23010: IFFALSE 23046
// if GetTech ( i , side ) <> state_researched then
23012: LD_VAR 0 4
23016: PPUSH
23017: LD_VAR 0 1
23021: PPUSH
23022: CALL_OW 321
23026: PUSH
23027: LD_INT 2
23029: NONEQUAL
23030: IFFALSE 23044
// begin result := false ;
23032: LD_ADDR_VAR 0 3
23036: PUSH
23037: LD_INT 0
23039: ST_TO_ADDR
// exit ;
23040: POP
23041: POP
23042: GO 23048
// end ;
23044: GO 23009
23046: POP
23047: POP
// end ;
23048: LD_VAR 0 3
23052: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23053: LD_INT 0
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
23061: PPUSH
23062: PPUSH
23063: PPUSH
23064: PPUSH
23065: PPUSH
23066: PPUSH
23067: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23068: LD_VAR 0 1
23072: NOT
23073: PUSH
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 257
23083: PUSH
23084: LD_INT 9
23086: NONEQUAL
23087: OR
23088: IFFALSE 23092
// exit ;
23090: GO 23665
// side := GetSide ( unit ) ;
23092: LD_ADDR_VAR 0 9
23096: PUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 255
23106: ST_TO_ADDR
// tech_space := tech_spacanom ;
23107: LD_ADDR_VAR 0 12
23111: PUSH
23112: LD_INT 29
23114: ST_TO_ADDR
// tech_time := tech_taurad ;
23115: LD_ADDR_VAR 0 13
23119: PUSH
23120: LD_INT 28
23122: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23123: LD_ADDR_VAR 0 11
23127: PUSH
23128: LD_VAR 0 1
23132: PPUSH
23133: CALL_OW 310
23137: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23138: LD_VAR 0 11
23142: PPUSH
23143: CALL_OW 247
23147: PUSH
23148: LD_INT 2
23150: EQUAL
23151: IFFALSE 23155
// exit ;
23153: GO 23665
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23155: LD_ADDR_VAR 0 8
23159: PUSH
23160: LD_INT 81
23162: PUSH
23163: LD_VAR 0 9
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: LD_INT 21
23177: PUSH
23178: LD_INT 3
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: CALL_OW 69
23197: ST_TO_ADDR
// if not tmp then
23198: LD_VAR 0 8
23202: NOT
23203: IFFALSE 23207
// exit ;
23205: GO 23665
// if in_unit then
23207: LD_VAR 0 11
23211: IFFALSE 23235
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23213: LD_ADDR_VAR 0 10
23217: PUSH
23218: LD_VAR 0 8
23222: PPUSH
23223: LD_VAR 0 11
23227: PPUSH
23228: CALL_OW 74
23232: ST_TO_ADDR
23233: GO 23255
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23235: LD_ADDR_VAR 0 10
23239: PUSH
23240: LD_VAR 0 8
23244: PPUSH
23245: LD_VAR 0 1
23249: PPUSH
23250: CALL_OW 74
23254: ST_TO_ADDR
// if not enemy then
23255: LD_VAR 0 10
23259: NOT
23260: IFFALSE 23264
// exit ;
23262: GO 23665
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23264: LD_VAR 0 11
23268: PUSH
23269: LD_VAR 0 11
23273: PPUSH
23274: LD_VAR 0 10
23278: PPUSH
23279: CALL_OW 296
23283: PUSH
23284: LD_INT 13
23286: GREATER
23287: AND
23288: PUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: LD_VAR 0 10
23298: PPUSH
23299: CALL_OW 296
23303: PUSH
23304: LD_INT 12
23306: GREATER
23307: OR
23308: IFFALSE 23312
// exit ;
23310: GO 23665
// missile := [ 1 ] ;
23312: LD_ADDR_VAR 0 14
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23323: LD_VAR 0 9
23327: PPUSH
23328: LD_VAR 0 12
23332: PPUSH
23333: CALL_OW 325
23337: IFFALSE 23366
// missile := Replace ( missile , missile + 1 , 2 ) ;
23339: LD_ADDR_VAR 0 14
23343: PUSH
23344: LD_VAR 0 14
23348: PPUSH
23349: LD_VAR 0 14
23353: PUSH
23354: LD_INT 1
23356: PLUS
23357: PPUSH
23358: LD_INT 2
23360: PPUSH
23361: CALL_OW 1
23365: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23366: LD_VAR 0 9
23370: PPUSH
23371: LD_VAR 0 13
23375: PPUSH
23376: CALL_OW 325
23380: PUSH
23381: LD_VAR 0 10
23385: PPUSH
23386: CALL_OW 255
23390: PPUSH
23391: LD_VAR 0 13
23395: PPUSH
23396: CALL_OW 325
23400: NOT
23401: AND
23402: IFFALSE 23431
// missile := Replace ( missile , missile + 1 , 3 ) ;
23404: LD_ADDR_VAR 0 14
23408: PUSH
23409: LD_VAR 0 14
23413: PPUSH
23414: LD_VAR 0 14
23418: PUSH
23419: LD_INT 1
23421: PLUS
23422: PPUSH
23423: LD_INT 3
23425: PPUSH
23426: CALL_OW 1
23430: ST_TO_ADDR
// if missile < 2 then
23431: LD_VAR 0 14
23435: PUSH
23436: LD_INT 2
23438: LESS
23439: IFFALSE 23443
// exit ;
23441: GO 23665
// x := GetX ( enemy ) ;
23443: LD_ADDR_VAR 0 4
23447: PUSH
23448: LD_VAR 0 10
23452: PPUSH
23453: CALL_OW 250
23457: ST_TO_ADDR
// y := GetY ( enemy ) ;
23458: LD_ADDR_VAR 0 5
23462: PUSH
23463: LD_VAR 0 10
23467: PPUSH
23468: CALL_OW 251
23472: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23473: LD_ADDR_VAR 0 6
23477: PUSH
23478: LD_VAR 0 4
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PPUSH
23487: LD_INT 1
23489: PPUSH
23490: CALL_OW 12
23494: PLUS
23495: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23496: LD_ADDR_VAR 0 7
23500: PUSH
23501: LD_VAR 0 5
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PPUSH
23510: LD_INT 1
23512: PPUSH
23513: CALL_OW 12
23517: PLUS
23518: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23519: LD_VAR 0 6
23523: PPUSH
23524: LD_VAR 0 7
23528: PPUSH
23529: CALL_OW 488
23533: NOT
23534: IFFALSE 23556
// begin _x := x ;
23536: LD_ADDR_VAR 0 6
23540: PUSH
23541: LD_VAR 0 4
23545: ST_TO_ADDR
// _y := y ;
23546: LD_ADDR_VAR 0 7
23550: PUSH
23551: LD_VAR 0 5
23555: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23556: LD_ADDR_VAR 0 3
23560: PUSH
23561: LD_INT 1
23563: PPUSH
23564: LD_VAR 0 14
23568: PPUSH
23569: CALL_OW 12
23573: ST_TO_ADDR
// case i of 1 :
23574: LD_VAR 0 3
23578: PUSH
23579: LD_INT 1
23581: DOUBLE
23582: EQUAL
23583: IFTRUE 23587
23585: GO 23604
23587: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23588: LD_VAR 0 1
23592: PPUSH
23593: LD_VAR 0 10
23597: PPUSH
23598: CALL_OW 115
23602: GO 23665
23604: LD_INT 2
23606: DOUBLE
23607: EQUAL
23608: IFTRUE 23612
23610: GO 23634
23612: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23613: LD_VAR 0 1
23617: PPUSH
23618: LD_VAR 0 6
23622: PPUSH
23623: LD_VAR 0 7
23627: PPUSH
23628: CALL_OW 153
23632: GO 23665
23634: LD_INT 3
23636: DOUBLE
23637: EQUAL
23638: IFTRUE 23642
23640: GO 23664
23642: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23643: LD_VAR 0 1
23647: PPUSH
23648: LD_VAR 0 6
23652: PPUSH
23653: LD_VAR 0 7
23657: PPUSH
23658: CALL_OW 154
23662: GO 23665
23664: POP
// end ;
23665: LD_VAR 0 2
23669: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23670: LD_INT 0
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
// if not unit or not building then
23678: LD_VAR 0 1
23682: NOT
23683: PUSH
23684: LD_VAR 0 2
23688: NOT
23689: OR
23690: IFFALSE 23694
// exit ;
23692: GO 23852
// x := GetX ( building ) ;
23694: LD_ADDR_VAR 0 5
23698: PUSH
23699: LD_VAR 0 2
23703: PPUSH
23704: CALL_OW 250
23708: ST_TO_ADDR
// y := GetY ( building ) ;
23709: LD_ADDR_VAR 0 6
23713: PUSH
23714: LD_VAR 0 2
23718: PPUSH
23719: CALL_OW 251
23723: ST_TO_ADDR
// for i = 0 to 5 do
23724: LD_ADDR_VAR 0 4
23728: PUSH
23729: DOUBLE
23730: LD_INT 0
23732: DEC
23733: ST_TO_ADDR
23734: LD_INT 5
23736: PUSH
23737: FOR_TO
23738: IFFALSE 23850
// begin _x := ShiftX ( x , i , 3 ) ;
23740: LD_ADDR_VAR 0 7
23744: PUSH
23745: LD_VAR 0 5
23749: PPUSH
23750: LD_VAR 0 4
23754: PPUSH
23755: LD_INT 3
23757: PPUSH
23758: CALL_OW 272
23762: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23763: LD_ADDR_VAR 0 8
23767: PUSH
23768: LD_VAR 0 6
23772: PPUSH
23773: LD_VAR 0 4
23777: PPUSH
23778: LD_INT 3
23780: PPUSH
23781: CALL_OW 273
23785: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23786: LD_VAR 0 7
23790: PPUSH
23791: LD_VAR 0 8
23795: PPUSH
23796: CALL_OW 488
23800: NOT
23801: IFFALSE 23805
// continue ;
23803: GO 23737
// if HexInfo ( _x , _y ) = 0 then
23805: LD_VAR 0 7
23809: PPUSH
23810: LD_VAR 0 8
23814: PPUSH
23815: CALL_OW 428
23819: PUSH
23820: LD_INT 0
23822: EQUAL
23823: IFFALSE 23848
// begin ComMoveXY ( unit , _x , _y ) ;
23825: LD_VAR 0 1
23829: PPUSH
23830: LD_VAR 0 7
23834: PPUSH
23835: LD_VAR 0 8
23839: PPUSH
23840: CALL_OW 111
// exit ;
23844: POP
23845: POP
23846: GO 23852
// end ; end ;
23848: GO 23737
23850: POP
23851: POP
// end ;
23852: LD_VAR 0 3
23856: RET
// export function ScanBase ( side , base_area ) ; begin
23857: LD_INT 0
23859: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_VAR 0 2
23869: PPUSH
23870: LD_INT 81
23872: PUSH
23873: LD_VAR 0 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 70
23886: ST_TO_ADDR
// end ;
23887: LD_VAR 0 3
23891: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23892: LD_INT 0
23894: PPUSH
23895: PPUSH
23896: PPUSH
23897: PPUSH
// result := false ;
23898: LD_ADDR_VAR 0 2
23902: PUSH
23903: LD_INT 0
23905: ST_TO_ADDR
// side := GetSide ( unit ) ;
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_VAR 0 1
23915: PPUSH
23916: CALL_OW 255
23920: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23921: LD_ADDR_VAR 0 4
23925: PUSH
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 248
23935: ST_TO_ADDR
// case nat of 1 :
23936: LD_VAR 0 4
23940: PUSH
23941: LD_INT 1
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23960
23949: POP
// tech := tech_lassight ; 2 :
23950: LD_ADDR_VAR 0 5
23954: PUSH
23955: LD_INT 12
23957: ST_TO_ADDR
23958: GO 23999
23960: LD_INT 2
23962: DOUBLE
23963: EQUAL
23964: IFTRUE 23968
23966: GO 23979
23968: POP
// tech := tech_mortar ; 3 :
23969: LD_ADDR_VAR 0 5
23973: PUSH
23974: LD_INT 41
23976: ST_TO_ADDR
23977: GO 23999
23979: LD_INT 3
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 23998
23987: POP
// tech := tech_bazooka ; end ;
23988: LD_ADDR_VAR 0 5
23992: PUSH
23993: LD_INT 44
23995: ST_TO_ADDR
23996: GO 23999
23998: POP
// if Researched ( side , tech ) then
23999: LD_VAR 0 3
24003: PPUSH
24004: LD_VAR 0 5
24008: PPUSH
24009: CALL_OW 325
24013: IFFALSE 24040
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24015: LD_ADDR_VAR 0 2
24019: PUSH
24020: LD_INT 5
24022: PUSH
24023: LD_INT 8
24025: PUSH
24026: LD_INT 9
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: PUSH
24034: LD_VAR 0 4
24038: ARRAY
24039: ST_TO_ADDR
// end ;
24040: LD_VAR 0 2
24044: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24045: LD_INT 0
24047: PPUSH
24048: PPUSH
24049: PPUSH
// if not mines then
24050: LD_VAR 0 2
24054: NOT
24055: IFFALSE 24059
// exit ;
24057: GO 24203
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24059: LD_ADDR_VAR 0 5
24063: PUSH
24064: LD_INT 81
24066: PUSH
24067: LD_VAR 0 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: LD_INT 21
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 69
24101: ST_TO_ADDR
// for i in mines do
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_VAR 0 2
24111: PUSH
24112: FOR_IN
24113: IFFALSE 24201
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24115: LD_VAR 0 4
24119: PUSH
24120: LD_INT 1
24122: ARRAY
24123: PPUSH
24124: LD_VAR 0 4
24128: PUSH
24129: LD_INT 2
24131: ARRAY
24132: PPUSH
24133: CALL_OW 458
24137: NOT
24138: IFFALSE 24142
// continue ;
24140: GO 24112
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24142: LD_VAR 0 4
24146: PUSH
24147: LD_INT 1
24149: ARRAY
24150: PPUSH
24151: LD_VAR 0 4
24155: PUSH
24156: LD_INT 2
24158: ARRAY
24159: PPUSH
24160: CALL_OW 428
24164: PUSH
24165: LD_VAR 0 5
24169: IN
24170: IFFALSE 24199
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24172: LD_VAR 0 4
24176: PUSH
24177: LD_INT 1
24179: ARRAY
24180: PPUSH
24181: LD_VAR 0 4
24185: PUSH
24186: LD_INT 2
24188: ARRAY
24189: PPUSH
24190: LD_VAR 0 1
24194: PPUSH
24195: CALL_OW 456
// end ;
24199: GO 24112
24201: POP
24202: POP
// end ;
24203: LD_VAR 0 3
24207: RET
// export function Count ( array ) ; var i ; begin
24208: LD_INT 0
24210: PPUSH
24211: PPUSH
// result := 0 ;
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: LD_INT 0
24219: ST_TO_ADDR
// for i in array do
24220: LD_ADDR_VAR 0 3
24224: PUSH
24225: LD_VAR 0 1
24229: PUSH
24230: FOR_IN
24231: IFFALSE 24255
// if i then
24233: LD_VAR 0 3
24237: IFFALSE 24253
// result := result + 1 ;
24239: LD_ADDR_VAR 0 2
24243: PUSH
24244: LD_VAR 0 2
24248: PUSH
24249: LD_INT 1
24251: PLUS
24252: ST_TO_ADDR
24253: GO 24230
24255: POP
24256: POP
// end ;
24257: LD_VAR 0 2
24261: RET
// export function IsEmpty ( building ) ; begin
24262: LD_INT 0
24264: PPUSH
// if not building then
24265: LD_VAR 0 1
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 24317
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 255
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 58
24303: PUSH
24304: EMPTY
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 69
24315: IN
24316: ST_TO_ADDR
// end ;
24317: LD_VAR 0 2
24321: RET
// export function IsNotFull ( building ) ; var places ; begin
24322: LD_INT 0
24324: PPUSH
24325: PPUSH
// if not building then
24326: LD_VAR 0 1
24330: NOT
24331: IFFALSE 24335
// exit ;
24333: GO 24506
// result := false ;
24335: LD_ADDR_VAR 0 2
24339: PUSH
24340: LD_INT 0
24342: ST_TO_ADDR
// places := 0 ;
24343: LD_ADDR_VAR 0 3
24347: PUSH
24348: LD_INT 0
24350: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL_OW 266
24360: PUSH
24361: LD_INT 0
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24423
24367: LD_INT 1
24369: DOUBLE
24370: EQUAL
24371: IFTRUE 24423
24373: LD_INT 6
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24423
24379: LD_INT 7
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24423
24385: LD_INT 8
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24423
24391: LD_INT 4
24393: DOUBLE
24394: EQUAL
24395: IFTRUE 24423
24397: LD_INT 5
24399: DOUBLE
24400: EQUAL
24401: IFTRUE 24423
24403: LD_INT 2
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24423
24409: LD_INT 3
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24423
24415: LD_INT 35
24417: DOUBLE
24418: EQUAL
24419: IFTRUE 24423
24421: GO 24434
24423: POP
// places := 6 ; b_bunker , b_breastwork :
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_INT 6
24431: ST_TO_ADDR
24432: GO 24479
24434: LD_INT 32
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24448
24440: LD_INT 31
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24459
24448: POP
// places := 1 ; b_control_tower :
24449: LD_ADDR_VAR 0 3
24453: PUSH
24454: LD_INT 1
24456: ST_TO_ADDR
24457: GO 24479
24459: LD_INT 36
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24467
24465: GO 24478
24467: POP
// places := 3 ; end ;
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_INT 3
24475: ST_TO_ADDR
24476: GO 24479
24478: POP
// if places then
24479: LD_VAR 0 3
24483: IFFALSE 24506
// result := UnitsInside ( building ) < places ;
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 313
24499: PUSH
24500: LD_VAR 0 3
24504: LESS
24505: ST_TO_ADDR
// end ;
24506: LD_VAR 0 2
24510: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24511: LD_INT 0
24513: PPUSH
24514: PPUSH
24515: PPUSH
24516: PPUSH
// tmp := [ ] ;
24517: LD_ADDR_VAR 0 3
24521: PUSH
24522: EMPTY
24523: ST_TO_ADDR
// list := [ ] ;
24524: LD_ADDR_VAR 0 5
24528: PUSH
24529: EMPTY
24530: ST_TO_ADDR
// for i = 16 to 25 do
24531: LD_ADDR_VAR 0 4
24535: PUSH
24536: DOUBLE
24537: LD_INT 16
24539: DEC
24540: ST_TO_ADDR
24541: LD_INT 25
24543: PUSH
24544: FOR_TO
24545: IFFALSE 24618
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24547: LD_ADDR_VAR 0 3
24551: PUSH
24552: LD_VAR 0 3
24556: PUSH
24557: LD_INT 22
24559: PUSH
24560: LD_VAR 0 1
24564: PPUSH
24565: CALL_OW 255
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 91
24576: PUSH
24577: LD_VAR 0 1
24581: PUSH
24582: LD_INT 6
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 30
24592: PUSH
24593: LD_VAR 0 4
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: PPUSH
24610: CALL_OW 69
24614: ADD
24615: ST_TO_ADDR
24616: GO 24544
24618: POP
24619: POP
// for i = 1 to tmp do
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: DOUBLE
24626: LD_INT 1
24628: DEC
24629: ST_TO_ADDR
24630: LD_VAR 0 3
24634: PUSH
24635: FOR_TO
24636: IFFALSE 24724
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24638: LD_ADDR_VAR 0 5
24642: PUSH
24643: LD_VAR 0 5
24647: PUSH
24648: LD_VAR 0 3
24652: PUSH
24653: LD_VAR 0 4
24657: ARRAY
24658: PPUSH
24659: CALL_OW 266
24663: PUSH
24664: LD_VAR 0 3
24668: PUSH
24669: LD_VAR 0 4
24673: ARRAY
24674: PPUSH
24675: CALL_OW 250
24679: PUSH
24680: LD_VAR 0 3
24684: PUSH
24685: LD_VAR 0 4
24689: ARRAY
24690: PPUSH
24691: CALL_OW 251
24695: PUSH
24696: LD_VAR 0 3
24700: PUSH
24701: LD_VAR 0 4
24705: ARRAY
24706: PPUSH
24707: CALL_OW 254
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: ADD
24721: ST_TO_ADDR
24722: GO 24635
24724: POP
24725: POP
// result := list ;
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_VAR 0 5
24735: ST_TO_ADDR
// end ;
24736: LD_VAR 0 2
24740: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24741: LD_INT 0
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
// if not factory then
24750: LD_VAR 0 1
24754: NOT
24755: IFFALSE 24759
// exit ;
24757: GO 25352
// if control = control_apeman then
24759: LD_VAR 0 4
24763: PUSH
24764: LD_INT 5
24766: EQUAL
24767: IFFALSE 24876
// begin tmp := UnitsInside ( factory ) ;
24769: LD_ADDR_VAR 0 8
24773: PUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 313
24783: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_INT 25
24791: PUSH
24792: LD_INT 12
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 72
24803: NOT
24804: IFFALSE 24814
// control := control_manual ;
24806: LD_ADDR_VAR 0 4
24810: PUSH
24811: LD_INT 1
24813: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24814: LD_ADDR_VAR 0 8
24818: PUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL 24511 0 1
24828: ST_TO_ADDR
// if tmp then
24829: LD_VAR 0 8
24833: IFFALSE 24876
// begin for i in tmp do
24835: LD_ADDR_VAR 0 7
24839: PUSH
24840: LD_VAR 0 8
24844: PUSH
24845: FOR_IN
24846: IFFALSE 24874
// if i [ 1 ] = b_ext_radio then
24848: LD_VAR 0 7
24852: PUSH
24853: LD_INT 1
24855: ARRAY
24856: PUSH
24857: LD_INT 22
24859: EQUAL
24860: IFFALSE 24872
// begin control := control_remote ;
24862: LD_ADDR_VAR 0 4
24866: PUSH
24867: LD_INT 2
24869: ST_TO_ADDR
// break ;
24870: GO 24874
// end ;
24872: GO 24845
24874: POP
24875: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24876: LD_VAR 0 1
24880: PPUSH
24881: LD_VAR 0 2
24885: PPUSH
24886: LD_VAR 0 3
24890: PPUSH
24891: LD_VAR 0 4
24895: PPUSH
24896: LD_VAR 0 5
24900: PPUSH
24901: CALL_OW 448
24905: IFFALSE 24940
// begin result := [ chassis , engine , control , weapon ] ;
24907: LD_ADDR_VAR 0 6
24911: PUSH
24912: LD_VAR 0 2
24916: PUSH
24917: LD_VAR 0 3
24921: PUSH
24922: LD_VAR 0 4
24926: PUSH
24927: LD_VAR 0 5
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: ST_TO_ADDR
// exit ;
24938: GO 25352
// end ; _chassis := AvailableChassisList ( factory ) ;
24940: LD_ADDR_VAR 0 9
24944: PUSH
24945: LD_VAR 0 1
24949: PPUSH
24950: CALL_OW 475
24954: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24955: LD_ADDR_VAR 0 11
24959: PUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 476
24969: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24970: LD_ADDR_VAR 0 12
24974: PUSH
24975: LD_VAR 0 1
24979: PPUSH
24980: CALL_OW 477
24984: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24985: LD_ADDR_VAR 0 10
24989: PUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 478
24999: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25000: LD_VAR 0 9
25004: NOT
25005: PUSH
25006: LD_VAR 0 11
25010: NOT
25011: OR
25012: PUSH
25013: LD_VAR 0 12
25017: NOT
25018: OR
25019: PUSH
25020: LD_VAR 0 10
25024: NOT
25025: OR
25026: IFFALSE 25061
// begin result := [ chassis , engine , control , weapon ] ;
25028: LD_ADDR_VAR 0 6
25032: PUSH
25033: LD_VAR 0 2
25037: PUSH
25038: LD_VAR 0 3
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: LD_VAR 0 5
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: ST_TO_ADDR
// exit ;
25059: GO 25352
// end ; if not chassis in _chassis then
25061: LD_VAR 0 2
25065: PUSH
25066: LD_VAR 0 9
25070: IN
25071: NOT
25072: IFFALSE 25098
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25074: LD_ADDR_VAR 0 2
25078: PUSH
25079: LD_VAR 0 9
25083: PUSH
25084: LD_INT 1
25086: PPUSH
25087: LD_VAR 0 9
25091: PPUSH
25092: CALL_OW 12
25096: ARRAY
25097: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25098: LD_VAR 0 2
25102: PPUSH
25103: LD_VAR 0 3
25107: PPUSH
25108: CALL 25357 0 2
25112: NOT
25113: IFFALSE 25172
// repeat engine := _engine [ 1 ] ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_VAR 0 11
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25129: LD_ADDR_VAR 0 11
25133: PUSH
25134: LD_VAR 0 11
25138: PPUSH
25139: LD_INT 1
25141: PPUSH
25142: CALL_OW 3
25146: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25147: LD_VAR 0 2
25151: PPUSH
25152: LD_VAR 0 3
25156: PPUSH
25157: CALL 25357 0 2
25161: PUSH
25162: LD_VAR 0 11
25166: PUSH
25167: EMPTY
25168: EQUAL
25169: OR
25170: IFFALSE 25115
// if not control in _control then
25172: LD_VAR 0 4
25176: PUSH
25177: LD_VAR 0 12
25181: IN
25182: NOT
25183: IFFALSE 25209
// control := _control [ rand ( 1 , _control ) ] ;
25185: LD_ADDR_VAR 0 4
25189: PUSH
25190: LD_VAR 0 12
25194: PUSH
25195: LD_INT 1
25197: PPUSH
25198: LD_VAR 0 12
25202: PPUSH
25203: CALL_OW 12
25207: ARRAY
25208: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25209: LD_VAR 0 2
25213: PPUSH
25214: LD_VAR 0 5
25218: PPUSH
25219: CALL 25577 0 2
25223: NOT
25224: IFFALSE 25283
// repeat weapon := _weapon [ 1 ] ;
25226: LD_ADDR_VAR 0 5
25230: PUSH
25231: LD_VAR 0 10
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25240: LD_ADDR_VAR 0 10
25244: PUSH
25245: LD_VAR 0 10
25249: PPUSH
25250: LD_INT 1
25252: PPUSH
25253: CALL_OW 3
25257: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25258: LD_VAR 0 2
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: CALL 25577 0 2
25272: PUSH
25273: LD_VAR 0 10
25277: PUSH
25278: EMPTY
25279: EQUAL
25280: OR
25281: IFFALSE 25226
// result := [ ] ;
25283: LD_ADDR_VAR 0 6
25287: PUSH
25288: EMPTY
25289: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25290: LD_VAR 0 1
25294: PPUSH
25295: LD_VAR 0 2
25299: PPUSH
25300: LD_VAR 0 3
25304: PPUSH
25305: LD_VAR 0 4
25309: PPUSH
25310: LD_VAR 0 5
25314: PPUSH
25315: CALL_OW 448
25319: IFFALSE 25352
// result := [ chassis , engine , control , weapon ] ;
25321: LD_ADDR_VAR 0 6
25325: PUSH
25326: LD_VAR 0 2
25330: PUSH
25331: LD_VAR 0 3
25335: PUSH
25336: LD_VAR 0 4
25340: PUSH
25341: LD_VAR 0 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
// end ;
25352: LD_VAR 0 6
25356: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25357: LD_INT 0
25359: PPUSH
// if not chassis or not engine then
25360: LD_VAR 0 1
25364: NOT
25365: PUSH
25366: LD_VAR 0 2
25370: NOT
25371: OR
25372: IFFALSE 25376
// exit ;
25374: GO 25572
// case engine of engine_solar :
25376: LD_VAR 0 2
25380: PUSH
25381: LD_INT 2
25383: DOUBLE
25384: EQUAL
25385: IFTRUE 25389
25387: GO 25427
25389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_INT 11
25397: PUSH
25398: LD_INT 12
25400: PUSH
25401: LD_INT 13
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: ST_TO_ADDR
25425: GO 25556
25427: LD_INT 1
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25497
25435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25436: LD_ADDR_VAR 0 3
25440: PUSH
25441: LD_INT 11
25443: PUSH
25444: LD_INT 12
25446: PUSH
25447: LD_INT 13
25449: PUSH
25450: LD_INT 14
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 4
25464: PUSH
25465: LD_INT 5
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 23
25473: PUSH
25474: LD_INT 22
25476: PUSH
25477: LD_INT 24
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: ST_TO_ADDR
25495: GO 25556
25497: LD_INT 3
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25555
25505: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_INT 13
25513: PUSH
25514: LD_INT 14
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 3
25522: PUSH
25523: LD_INT 4
25525: PUSH
25526: LD_INT 5
25528: PUSH
25529: LD_INT 21
25531: PUSH
25532: LD_INT 22
25534: PUSH
25535: LD_INT 23
25537: PUSH
25538: LD_INT 24
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: ST_TO_ADDR
25553: GO 25556
25555: POP
// result := ( chassis in result ) ;
25556: LD_ADDR_VAR 0 3
25560: PUSH
25561: LD_VAR 0 1
25565: PUSH
25566: LD_VAR 0 3
25570: IN
25571: ST_TO_ADDR
// end ;
25572: LD_VAR 0 3
25576: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25577: LD_INT 0
25579: PPUSH
// if not chassis or not weapon then
25580: LD_VAR 0 1
25584: NOT
25585: PUSH
25586: LD_VAR 0 2
25590: NOT
25591: OR
25592: IFFALSE 25596
// exit ;
25594: GO 26656
// case weapon of us_machine_gun :
25596: LD_VAR 0 2
25600: PUSH
25601: LD_INT 2
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25639
25609: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 4
25626: PUSH
25627: LD_INT 5
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: ST_TO_ADDR
25637: GO 26640
25639: LD_INT 3
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25677
25647: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25648: LD_ADDR_VAR 0 3
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: LD_INT 4
25664: PUSH
25665: LD_INT 5
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: ST_TO_ADDR
25675: GO 26640
25677: LD_INT 11
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25715
25685: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25686: LD_ADDR_VAR 0 3
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: LD_INT 4
25702: PUSH
25703: LD_INT 5
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
25713: GO 26640
25715: LD_INT 4
25717: DOUBLE
25718: EQUAL
25719: IFTRUE 25723
25721: GO 25749
25723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25724: LD_ADDR_VAR 0 3
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 4
25737: PUSH
25738: LD_INT 5
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: ST_TO_ADDR
25747: GO 26640
25749: LD_INT 5
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 25783
25757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25758: LD_ADDR_VAR 0 3
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: LD_INT 4
25771: PUSH
25772: LD_INT 5
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: ST_TO_ADDR
25781: GO 26640
25783: LD_INT 9
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25791
25789: GO 25817
25791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: LD_INT 4
25805: PUSH
25806: LD_INT 5
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: ST_TO_ADDR
25815: GO 26640
25817: LD_INT 7
25819: DOUBLE
25820: EQUAL
25821: IFTRUE 25825
25823: GO 25851
25825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25826: LD_ADDR_VAR 0 3
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: LD_INT 3
25836: PUSH
25837: LD_INT 4
25839: PUSH
25840: LD_INT 5
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: ST_TO_ADDR
25849: GO 26640
25851: LD_INT 12
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25885
25859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: LD_INT 4
25873: PUSH
25874: LD_INT 5
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: ST_TO_ADDR
25883: GO 26640
25885: LD_INT 13
25887: DOUBLE
25888: EQUAL
25889: IFTRUE 25893
25891: GO 25919
25893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 4
25907: PUSH
25908: LD_INT 5
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
25917: GO 26640
25919: LD_INT 14
25921: DOUBLE
25922: EQUAL
25923: IFTRUE 25927
25925: GO 25945
25927: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: LD_INT 4
25935: PUSH
25936: LD_INT 5
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: ST_TO_ADDR
25943: GO 26640
25945: LD_INT 6
25947: DOUBLE
25948: EQUAL
25949: IFTRUE 25953
25951: GO 25971
25953: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25954: LD_ADDR_VAR 0 3
25958: PUSH
25959: LD_INT 4
25961: PUSH
25962: LD_INT 5
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: ST_TO_ADDR
25969: GO 26640
25971: LD_INT 10
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 25997
25979: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 4
25987: PUSH
25988: LD_INT 5
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: ST_TO_ADDR
25995: GO 26640
25997: LD_INT 22
25999: DOUBLE
26000: EQUAL
26001: IFTRUE 26005
26003: GO 26031
26005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_INT 11
26013: PUSH
26014: LD_INT 12
26016: PUSH
26017: LD_INT 13
26019: PUSH
26020: LD_INT 14
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: ST_TO_ADDR
26029: GO 26640
26031: LD_INT 23
26033: DOUBLE
26034: EQUAL
26035: IFTRUE 26039
26037: GO 26065
26039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26040: LD_ADDR_VAR 0 3
26044: PUSH
26045: LD_INT 11
26047: PUSH
26048: LD_INT 12
26050: PUSH
26051: LD_INT 13
26053: PUSH
26054: LD_INT 14
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
26063: GO 26640
26065: LD_INT 24
26067: DOUBLE
26068: EQUAL
26069: IFTRUE 26073
26071: GO 26099
26073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26074: LD_ADDR_VAR 0 3
26078: PUSH
26079: LD_INT 11
26081: PUSH
26082: LD_INT 12
26084: PUSH
26085: LD_INT 13
26087: PUSH
26088: LD_INT 14
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: ST_TO_ADDR
26097: GO 26640
26099: LD_INT 30
26101: DOUBLE
26102: EQUAL
26103: IFTRUE 26107
26105: GO 26133
26107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26108: LD_ADDR_VAR 0 3
26112: PUSH
26113: LD_INT 11
26115: PUSH
26116: LD_INT 12
26118: PUSH
26119: LD_INT 13
26121: PUSH
26122: LD_INT 14
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: ST_TO_ADDR
26131: GO 26640
26133: LD_INT 25
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26159
26141: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26142: LD_ADDR_VAR 0 3
26146: PUSH
26147: LD_INT 13
26149: PUSH
26150: LD_INT 14
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: ST_TO_ADDR
26157: GO 26640
26159: LD_INT 27
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26185
26167: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 13
26175: PUSH
26176: LD_INT 14
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: ST_TO_ADDR
26183: GO 26640
26185: LD_INT 92
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26219
26193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 11
26201: PUSH
26202: LD_INT 12
26204: PUSH
26205: LD_INT 13
26207: PUSH
26208: LD_INT 14
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 26640
26219: LD_INT 28
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26245
26227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 13
26235: PUSH
26236: LD_INT 14
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: ST_TO_ADDR
26243: GO 26640
26245: LD_INT 29
26247: DOUBLE
26248: EQUAL
26249: IFTRUE 26253
26251: GO 26271
26253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26254: LD_ADDR_VAR 0 3
26258: PUSH
26259: LD_INT 13
26261: PUSH
26262: LD_INT 14
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: ST_TO_ADDR
26269: GO 26640
26271: LD_INT 31
26273: DOUBLE
26274: EQUAL
26275: IFTRUE 26279
26277: GO 26297
26279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26280: LD_ADDR_VAR 0 3
26284: PUSH
26285: LD_INT 13
26287: PUSH
26288: LD_INT 14
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: ST_TO_ADDR
26295: GO 26640
26297: LD_INT 26
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 26323
26305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: LD_INT 13
26313: PUSH
26314: LD_INT 14
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: ST_TO_ADDR
26321: GO 26640
26323: LD_INT 42
26325: DOUBLE
26326: EQUAL
26327: IFTRUE 26331
26329: GO 26357
26331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_INT 21
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_INT 23
26345: PUSH
26346: LD_INT 24
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: ST_TO_ADDR
26355: GO 26640
26357: LD_INT 43
26359: DOUBLE
26360: EQUAL
26361: IFTRUE 26365
26363: GO 26391
26365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26366: LD_ADDR_VAR 0 3
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 22
26376: PUSH
26377: LD_INT 23
26379: PUSH
26380: LD_INT 24
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: ST_TO_ADDR
26389: GO 26640
26391: LD_INT 44
26393: DOUBLE
26394: EQUAL
26395: IFTRUE 26399
26397: GO 26425
26399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26400: LD_ADDR_VAR 0 3
26404: PUSH
26405: LD_INT 21
26407: PUSH
26408: LD_INT 22
26410: PUSH
26411: LD_INT 23
26413: PUSH
26414: LD_INT 24
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: ST_TO_ADDR
26423: GO 26640
26425: LD_INT 45
26427: DOUBLE
26428: EQUAL
26429: IFTRUE 26433
26431: GO 26459
26433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26434: LD_ADDR_VAR 0 3
26438: PUSH
26439: LD_INT 21
26441: PUSH
26442: LD_INT 22
26444: PUSH
26445: LD_INT 23
26447: PUSH
26448: LD_INT 24
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: ST_TO_ADDR
26457: GO 26640
26459: LD_INT 49
26461: DOUBLE
26462: EQUAL
26463: IFTRUE 26467
26465: GO 26493
26467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26468: LD_ADDR_VAR 0 3
26472: PUSH
26473: LD_INT 21
26475: PUSH
26476: LD_INT 22
26478: PUSH
26479: LD_INT 23
26481: PUSH
26482: LD_INT 24
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: ST_TO_ADDR
26491: GO 26640
26493: LD_INT 51
26495: DOUBLE
26496: EQUAL
26497: IFTRUE 26501
26499: GO 26527
26501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26502: LD_ADDR_VAR 0 3
26506: PUSH
26507: LD_INT 21
26509: PUSH
26510: LD_INT 22
26512: PUSH
26513: LD_INT 23
26515: PUSH
26516: LD_INT 24
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: ST_TO_ADDR
26525: GO 26640
26527: LD_INT 52
26529: DOUBLE
26530: EQUAL
26531: IFTRUE 26535
26533: GO 26561
26535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_INT 21
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_INT 23
26549: PUSH
26550: LD_INT 24
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: ST_TO_ADDR
26559: GO 26640
26561: LD_INT 53
26563: DOUBLE
26564: EQUAL
26565: IFTRUE 26569
26567: GO 26587
26569: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26570: LD_ADDR_VAR 0 3
26574: PUSH
26575: LD_INT 23
26577: PUSH
26578: LD_INT 24
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: ST_TO_ADDR
26585: GO 26640
26587: LD_INT 46
26589: DOUBLE
26590: EQUAL
26591: IFTRUE 26595
26593: GO 26613
26595: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26596: LD_ADDR_VAR 0 3
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 24
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: ST_TO_ADDR
26611: GO 26640
26613: LD_INT 47
26615: DOUBLE
26616: EQUAL
26617: IFTRUE 26621
26619: GO 26639
26621: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 23
26629: PUSH
26630: LD_INT 24
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: ST_TO_ADDR
26637: GO 26640
26639: POP
// result := ( chassis in result ) ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_VAR 0 1
26649: PUSH
26650: LD_VAR 0 3
26654: IN
26655: ST_TO_ADDR
// end ;
26656: LD_VAR 0 3
26660: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26661: LD_INT 0
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
// result := array ;
26670: LD_ADDR_VAR 0 5
26674: PUSH
26675: LD_VAR 0 1
26679: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26680: LD_VAR 0 1
26684: NOT
26685: PUSH
26686: LD_VAR 0 2
26690: NOT
26691: OR
26692: PUSH
26693: LD_VAR 0 3
26697: NOT
26698: OR
26699: PUSH
26700: LD_VAR 0 2
26704: PUSH
26705: LD_VAR 0 1
26709: GREATER
26710: OR
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_VAR 0 1
26721: GREATER
26722: OR
26723: IFFALSE 26727
// exit ;
26725: GO 27023
// if direction then
26727: LD_VAR 0 4
26731: IFFALSE 26795
// begin d := 1 ;
26733: LD_ADDR_VAR 0 9
26737: PUSH
26738: LD_INT 1
26740: ST_TO_ADDR
// if i_from > i_to then
26741: LD_VAR 0 2
26745: PUSH
26746: LD_VAR 0 3
26750: GREATER
26751: IFFALSE 26777
// length := ( array - i_from ) + i_to else
26753: LD_ADDR_VAR 0 11
26757: PUSH
26758: LD_VAR 0 1
26762: PUSH
26763: LD_VAR 0 2
26767: MINUS
26768: PUSH
26769: LD_VAR 0 3
26773: PLUS
26774: ST_TO_ADDR
26775: GO 26793
// length := i_to - i_from ;
26777: LD_ADDR_VAR 0 11
26781: PUSH
26782: LD_VAR 0 3
26786: PUSH
26787: LD_VAR 0 2
26791: MINUS
26792: ST_TO_ADDR
// end else
26793: GO 26856
// begin d := - 1 ;
26795: LD_ADDR_VAR 0 9
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: ST_TO_ADDR
// if i_from > i_to then
26804: LD_VAR 0 2
26808: PUSH
26809: LD_VAR 0 3
26813: GREATER
26814: IFFALSE 26834
// length := i_from - i_to else
26816: LD_ADDR_VAR 0 11
26820: PUSH
26821: LD_VAR 0 2
26825: PUSH
26826: LD_VAR 0 3
26830: MINUS
26831: ST_TO_ADDR
26832: GO 26856
// length := ( array - i_to ) + i_from ;
26834: LD_ADDR_VAR 0 11
26838: PUSH
26839: LD_VAR 0 1
26843: PUSH
26844: LD_VAR 0 3
26848: MINUS
26849: PUSH
26850: LD_VAR 0 2
26854: PLUS
26855: ST_TO_ADDR
// end ; if not length then
26856: LD_VAR 0 11
26860: NOT
26861: IFFALSE 26865
// exit ;
26863: GO 27023
// tmp := array ;
26865: LD_ADDR_VAR 0 10
26869: PUSH
26870: LD_VAR 0 1
26874: ST_TO_ADDR
// for i = 1 to length do
26875: LD_ADDR_VAR 0 6
26879: PUSH
26880: DOUBLE
26881: LD_INT 1
26883: DEC
26884: ST_TO_ADDR
26885: LD_VAR 0 11
26889: PUSH
26890: FOR_TO
26891: IFFALSE 27011
// begin for j = 1 to array do
26893: LD_ADDR_VAR 0 7
26897: PUSH
26898: DOUBLE
26899: LD_INT 1
26901: DEC
26902: ST_TO_ADDR
26903: LD_VAR 0 1
26907: PUSH
26908: FOR_TO
26909: IFFALSE 26997
// begin k := j + d ;
26911: LD_ADDR_VAR 0 8
26915: PUSH
26916: LD_VAR 0 7
26920: PUSH
26921: LD_VAR 0 9
26925: PLUS
26926: ST_TO_ADDR
// if k > array then
26927: LD_VAR 0 8
26931: PUSH
26932: LD_VAR 0 1
26936: GREATER
26937: IFFALSE 26947
// k := 1 ;
26939: LD_ADDR_VAR 0 8
26943: PUSH
26944: LD_INT 1
26946: ST_TO_ADDR
// if not k then
26947: LD_VAR 0 8
26951: NOT
26952: IFFALSE 26964
// k := array ;
26954: LD_ADDR_VAR 0 8
26958: PUSH
26959: LD_VAR 0 1
26963: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26964: LD_ADDR_VAR 0 10
26968: PUSH
26969: LD_VAR 0 10
26973: PPUSH
26974: LD_VAR 0 8
26978: PPUSH
26979: LD_VAR 0 1
26983: PUSH
26984: LD_VAR 0 7
26988: ARRAY
26989: PPUSH
26990: CALL_OW 1
26994: ST_TO_ADDR
// end ;
26995: GO 26908
26997: POP
26998: POP
// array := tmp ;
26999: LD_ADDR_VAR 0 1
27003: PUSH
27004: LD_VAR 0 10
27008: ST_TO_ADDR
// end ;
27009: GO 26890
27011: POP
27012: POP
// result := array ;
27013: LD_ADDR_VAR 0 5
27017: PUSH
27018: LD_VAR 0 1
27022: ST_TO_ADDR
// end ;
27023: LD_VAR 0 5
27027: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
// result := 0 ;
27032: LD_ADDR_VAR 0 3
27036: PUSH
27037: LD_INT 0
27039: ST_TO_ADDR
// if not array or not value in array then
27040: LD_VAR 0 1
27044: NOT
27045: PUSH
27046: LD_VAR 0 2
27050: PUSH
27051: LD_VAR 0 1
27055: IN
27056: NOT
27057: OR
27058: IFFALSE 27062
// exit ;
27060: GO 27116
// for i = 1 to array do
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: DOUBLE
27068: LD_INT 1
27070: DEC
27071: ST_TO_ADDR
27072: LD_VAR 0 1
27076: PUSH
27077: FOR_TO
27078: IFFALSE 27114
// if value = array [ i ] then
27080: LD_VAR 0 2
27084: PUSH
27085: LD_VAR 0 1
27089: PUSH
27090: LD_VAR 0 4
27094: ARRAY
27095: EQUAL
27096: IFFALSE 27112
// begin result := i ;
27098: LD_ADDR_VAR 0 3
27102: PUSH
27103: LD_VAR 0 4
27107: ST_TO_ADDR
// exit ;
27108: POP
27109: POP
27110: GO 27116
// end ;
27112: GO 27077
27114: POP
27115: POP
// end ;
27116: LD_VAR 0 3
27120: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27121: LD_INT 0
27123: PPUSH
// vc_chassis := chassis ;
27124: LD_ADDR_OWVAR 37
27128: PUSH
27129: LD_VAR 0 1
27133: ST_TO_ADDR
// vc_engine := engine ;
27134: LD_ADDR_OWVAR 39
27138: PUSH
27139: LD_VAR 0 2
27143: ST_TO_ADDR
// vc_control := control ;
27144: LD_ADDR_OWVAR 38
27148: PUSH
27149: LD_VAR 0 3
27153: ST_TO_ADDR
// vc_weapon := weapon ;
27154: LD_ADDR_OWVAR 40
27158: PUSH
27159: LD_VAR 0 4
27163: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27164: LD_ADDR_OWVAR 41
27168: PUSH
27169: LD_VAR 0 5
27173: ST_TO_ADDR
// end ;
27174: LD_VAR 0 6
27178: RET
// export function WantPlant ( unit ) ; var task ; begin
27179: LD_INT 0
27181: PPUSH
27182: PPUSH
// result := false ;
27183: LD_ADDR_VAR 0 2
27187: PUSH
27188: LD_INT 0
27190: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27191: LD_ADDR_VAR 0 3
27195: PUSH
27196: LD_VAR 0 1
27200: PPUSH
27201: CALL_OW 437
27205: ST_TO_ADDR
// if task then
27206: LD_VAR 0 3
27210: IFFALSE 27238
// if task [ 1 ] [ 1 ] = p then
27212: LD_VAR 0 3
27216: PUSH
27217: LD_INT 1
27219: ARRAY
27220: PUSH
27221: LD_INT 1
27223: ARRAY
27224: PUSH
27225: LD_STRING p
27227: EQUAL
27228: IFFALSE 27238
// result := true ;
27230: LD_ADDR_VAR 0 2
27234: PUSH
27235: LD_INT 1
27237: ST_TO_ADDR
// end ;
27238: LD_VAR 0 2
27242: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27243: LD_INT 0
27245: PPUSH
27246: PPUSH
27247: PPUSH
27248: PPUSH
// if pos < 1 then
27249: LD_VAR 0 2
27253: PUSH
27254: LD_INT 1
27256: LESS
27257: IFFALSE 27261
// exit ;
27259: GO 27564
// if pos = 1 then
27261: LD_VAR 0 2
27265: PUSH
27266: LD_INT 1
27268: EQUAL
27269: IFFALSE 27302
// result := Replace ( arr , pos [ 1 ] , value ) else
27271: LD_ADDR_VAR 0 4
27275: PUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: LD_VAR 0 2
27285: PUSH
27286: LD_INT 1
27288: ARRAY
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL_OW 1
27299: ST_TO_ADDR
27300: GO 27564
// begin tmp := arr ;
27302: LD_ADDR_VAR 0 6
27306: PUSH
27307: LD_VAR 0 1
27311: ST_TO_ADDR
// s_arr := [ tmp ] ;
27312: LD_ADDR_VAR 0 7
27316: PUSH
27317: LD_VAR 0 6
27321: PUSH
27322: EMPTY
27323: LIST
27324: ST_TO_ADDR
// for i = 1 to pos - 1 do
27325: LD_ADDR_VAR 0 5
27329: PUSH
27330: DOUBLE
27331: LD_INT 1
27333: DEC
27334: ST_TO_ADDR
27335: LD_VAR 0 2
27339: PUSH
27340: LD_INT 1
27342: MINUS
27343: PUSH
27344: FOR_TO
27345: IFFALSE 27390
// begin tmp := tmp [ pos [ i ] ] ;
27347: LD_ADDR_VAR 0 6
27351: PUSH
27352: LD_VAR 0 6
27356: PUSH
27357: LD_VAR 0 2
27361: PUSH
27362: LD_VAR 0 5
27366: ARRAY
27367: ARRAY
27368: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27369: LD_ADDR_VAR 0 7
27373: PUSH
27374: LD_VAR 0 7
27378: PUSH
27379: LD_VAR 0 6
27383: PUSH
27384: EMPTY
27385: LIST
27386: ADD
27387: ST_TO_ADDR
// end ;
27388: GO 27344
27390: POP
27391: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27392: LD_ADDR_VAR 0 6
27396: PUSH
27397: LD_VAR 0 6
27401: PPUSH
27402: LD_VAR 0 2
27406: PUSH
27407: LD_VAR 0 2
27411: ARRAY
27412: PPUSH
27413: LD_VAR 0 3
27417: PPUSH
27418: CALL_OW 1
27422: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27423: LD_ADDR_VAR 0 7
27427: PUSH
27428: LD_VAR 0 7
27432: PPUSH
27433: LD_VAR 0 7
27437: PPUSH
27438: LD_VAR 0 6
27442: PPUSH
27443: CALL_OW 1
27447: ST_TO_ADDR
// for i = s_arr downto 2 do
27448: LD_ADDR_VAR 0 5
27452: PUSH
27453: DOUBLE
27454: LD_VAR 0 7
27458: INC
27459: ST_TO_ADDR
27460: LD_INT 2
27462: PUSH
27463: FOR_DOWNTO
27464: IFFALSE 27548
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27466: LD_ADDR_VAR 0 6
27470: PUSH
27471: LD_VAR 0 7
27475: PUSH
27476: LD_VAR 0 5
27480: PUSH
27481: LD_INT 1
27483: MINUS
27484: ARRAY
27485: PPUSH
27486: LD_VAR 0 2
27490: PUSH
27491: LD_VAR 0 5
27495: PUSH
27496: LD_INT 1
27498: MINUS
27499: ARRAY
27500: PPUSH
27501: LD_VAR 0 7
27505: PUSH
27506: LD_VAR 0 5
27510: ARRAY
27511: PPUSH
27512: CALL_OW 1
27516: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27517: LD_ADDR_VAR 0 7
27521: PUSH
27522: LD_VAR 0 7
27526: PPUSH
27527: LD_VAR 0 5
27531: PUSH
27532: LD_INT 1
27534: MINUS
27535: PPUSH
27536: LD_VAR 0 6
27540: PPUSH
27541: CALL_OW 1
27545: ST_TO_ADDR
// end ;
27546: GO 27463
27548: POP
27549: POP
// result := s_arr [ 1 ] ;
27550: LD_ADDR_VAR 0 4
27554: PUSH
27555: LD_VAR 0 7
27559: PUSH
27560: LD_INT 1
27562: ARRAY
27563: ST_TO_ADDR
// end ; end ;
27564: LD_VAR 0 4
27568: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
// if not list then
27573: LD_VAR 0 1
27577: NOT
27578: IFFALSE 27582
// exit ;
27580: GO 27673
// i := list [ pos1 ] ;
27582: LD_ADDR_VAR 0 5
27586: PUSH
27587: LD_VAR 0 1
27591: PUSH
27592: LD_VAR 0 2
27596: ARRAY
27597: ST_TO_ADDR
// if not i then
27598: LD_VAR 0 5
27602: NOT
27603: IFFALSE 27607
// exit ;
27605: GO 27673
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27607: LD_ADDR_VAR 0 1
27611: PUSH
27612: LD_VAR 0 1
27616: PPUSH
27617: LD_VAR 0 2
27621: PPUSH
27622: LD_VAR 0 1
27626: PUSH
27627: LD_VAR 0 3
27631: ARRAY
27632: PPUSH
27633: CALL_OW 1
27637: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27638: LD_ADDR_VAR 0 1
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_VAR 0 3
27652: PPUSH
27653: LD_VAR 0 5
27657: PPUSH
27658: CALL_OW 1
27662: ST_TO_ADDR
// result := list ;
27663: LD_ADDR_VAR 0 4
27667: PUSH
27668: LD_VAR 0 1
27672: ST_TO_ADDR
// end ;
27673: LD_VAR 0 4
27677: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27678: LD_INT 0
27680: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27681: LD_ADDR_VAR 0 5
27685: PUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 250
27695: PPUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL_OW 251
27705: PPUSH
27706: LD_VAR 0 2
27710: PPUSH
27711: LD_VAR 0 3
27715: PPUSH
27716: LD_VAR 0 4
27720: PPUSH
27721: CALL 27731 0 5
27725: ST_TO_ADDR
// end ;
27726: LD_VAR 0 5
27730: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27731: LD_INT 0
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
// if not list then
27737: LD_VAR 0 3
27741: NOT
27742: IFFALSE 27746
// exit ;
27744: GO 28134
// result := [ ] ;
27746: LD_ADDR_VAR 0 6
27750: PUSH
27751: EMPTY
27752: ST_TO_ADDR
// for i in list do
27753: LD_ADDR_VAR 0 7
27757: PUSH
27758: LD_VAR 0 3
27762: PUSH
27763: FOR_IN
27764: IFFALSE 27966
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27766: LD_ADDR_VAR 0 9
27770: PUSH
27771: LD_VAR 0 7
27775: PPUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 297
27790: ST_TO_ADDR
// if not result then
27791: LD_VAR 0 6
27795: NOT
27796: IFFALSE 27822
// result := [ [ i , tmp ] ] else
27798: LD_ADDR_VAR 0 6
27802: PUSH
27803: LD_VAR 0 7
27807: PUSH
27808: LD_VAR 0 9
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: ST_TO_ADDR
27820: GO 27964
// begin if result [ result ] [ 2 ] < tmp then
27822: LD_VAR 0 6
27826: PUSH
27827: LD_VAR 0 6
27831: ARRAY
27832: PUSH
27833: LD_INT 2
27835: ARRAY
27836: PUSH
27837: LD_VAR 0 9
27841: LESS
27842: IFFALSE 27884
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27844: LD_ADDR_VAR 0 6
27848: PUSH
27849: LD_VAR 0 6
27853: PPUSH
27854: LD_VAR 0 6
27858: PUSH
27859: LD_INT 1
27861: PLUS
27862: PPUSH
27863: LD_VAR 0 7
27867: PUSH
27868: LD_VAR 0 9
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 2
27881: ST_TO_ADDR
27882: GO 27964
// for j = 1 to result do
27884: LD_ADDR_VAR 0 8
27888: PUSH
27889: DOUBLE
27890: LD_INT 1
27892: DEC
27893: ST_TO_ADDR
27894: LD_VAR 0 6
27898: PUSH
27899: FOR_TO
27900: IFFALSE 27962
// begin if tmp < result [ j ] [ 2 ] then
27902: LD_VAR 0 9
27906: PUSH
27907: LD_VAR 0 6
27911: PUSH
27912: LD_VAR 0 8
27916: ARRAY
27917: PUSH
27918: LD_INT 2
27920: ARRAY
27921: LESS
27922: IFFALSE 27960
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27924: LD_ADDR_VAR 0 6
27928: PUSH
27929: LD_VAR 0 6
27933: PPUSH
27934: LD_VAR 0 8
27938: PPUSH
27939: LD_VAR 0 7
27943: PUSH
27944: LD_VAR 0 9
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PPUSH
27953: CALL_OW 2
27957: ST_TO_ADDR
// break ;
27958: GO 27962
// end ; end ;
27960: GO 27899
27962: POP
27963: POP
// end ; end ;
27964: GO 27763
27966: POP
27967: POP
// if result and not asc then
27968: LD_VAR 0 6
27972: PUSH
27973: LD_VAR 0 4
27977: NOT
27978: AND
27979: IFFALSE 28054
// begin tmp := result ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_VAR 0 6
27990: ST_TO_ADDR
// for i = tmp downto 1 do
27991: LD_ADDR_VAR 0 7
27995: PUSH
27996: DOUBLE
27997: LD_VAR 0 9
28001: INC
28002: ST_TO_ADDR
28003: LD_INT 1
28005: PUSH
28006: FOR_DOWNTO
28007: IFFALSE 28052
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28009: LD_ADDR_VAR 0 6
28013: PUSH
28014: LD_VAR 0 6
28018: PPUSH
28019: LD_VAR 0 9
28023: PUSH
28024: LD_VAR 0 7
28028: MINUS
28029: PUSH
28030: LD_INT 1
28032: PLUS
28033: PPUSH
28034: LD_VAR 0 9
28038: PUSH
28039: LD_VAR 0 7
28043: ARRAY
28044: PPUSH
28045: CALL_OW 1
28049: ST_TO_ADDR
28050: GO 28006
28052: POP
28053: POP
// end ; tmp := [ ] ;
28054: LD_ADDR_VAR 0 9
28058: PUSH
28059: EMPTY
28060: ST_TO_ADDR
// if mode then
28061: LD_VAR 0 5
28065: IFFALSE 28134
// begin for i = 1 to result do
28067: LD_ADDR_VAR 0 7
28071: PUSH
28072: DOUBLE
28073: LD_INT 1
28075: DEC
28076: ST_TO_ADDR
28077: LD_VAR 0 6
28081: PUSH
28082: FOR_TO
28083: IFFALSE 28122
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28085: LD_ADDR_VAR 0 9
28089: PUSH
28090: LD_VAR 0 9
28094: PPUSH
28095: LD_VAR 0 7
28099: PPUSH
28100: LD_VAR 0 6
28104: PUSH
28105: LD_VAR 0 7
28109: ARRAY
28110: PUSH
28111: LD_INT 1
28113: ARRAY
28114: PPUSH
28115: CALL_OW 1
28119: ST_TO_ADDR
28120: GO 28082
28122: POP
28123: POP
// result := tmp ;
28124: LD_ADDR_VAR 0 6
28128: PUSH
28129: LD_VAR 0 9
28133: ST_TO_ADDR
// end ; end ;
28134: LD_VAR 0 6
28138: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28139: LD_INT 0
28141: PPUSH
28142: PPUSH
28143: PPUSH
28144: PPUSH
28145: PPUSH
28146: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28147: LD_ADDR_VAR 0 5
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: EMPTY
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: ST_TO_ADDR
// if not x or not y then
28169: LD_VAR 0 2
28173: NOT
28174: PUSH
28175: LD_VAR 0 3
28179: NOT
28180: OR
28181: IFFALSE 28185
// exit ;
28183: GO 29835
// if not range then
28185: LD_VAR 0 4
28189: NOT
28190: IFFALSE 28200
// range := 10 ;
28192: LD_ADDR_VAR 0 4
28196: PUSH
28197: LD_INT 10
28199: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28200: LD_ADDR_VAR 0 8
28204: PUSH
28205: LD_INT 81
28207: PUSH
28208: LD_VAR 0 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 92
28219: PUSH
28220: LD_VAR 0 2
28224: PUSH
28225: LD_VAR 0 3
28229: PUSH
28230: LD_VAR 0 4
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 3
28243: PUSH
28244: LD_INT 21
28246: PUSH
28247: LD_INT 3
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: PPUSH
28263: CALL_OW 69
28267: ST_TO_ADDR
// if not tmp then
28268: LD_VAR 0 8
28272: NOT
28273: IFFALSE 28277
// exit ;
28275: GO 29835
// for i in tmp do
28277: LD_ADDR_VAR 0 6
28281: PUSH
28282: LD_VAR 0 8
28286: PUSH
28287: FOR_IN
28288: IFFALSE 29810
// begin points := [ 0 , 0 , 0 ] ;
28290: LD_ADDR_VAR 0 9
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// bpoints := 1 ;
28309: LD_ADDR_VAR 0 10
28313: PUSH
28314: LD_INT 1
28316: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28317: LD_VAR 0 6
28321: PPUSH
28322: CALL_OW 247
28326: PUSH
28327: LD_INT 1
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28913
28335: POP
// begin if GetClass ( i ) = 1 then
28336: LD_VAR 0 6
28340: PPUSH
28341: CALL_OW 257
28345: PUSH
28346: LD_INT 1
28348: EQUAL
28349: IFFALSE 28370
// points := [ 10 , 5 , 3 ] ;
28351: LD_ADDR_VAR 0 9
28355: PUSH
28356: LD_INT 10
28358: PUSH
28359: LD_INT 5
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28370: LD_VAR 0 6
28374: PPUSH
28375: CALL_OW 257
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: IN
28394: IFFALSE 28415
// points := [ 3 , 2 , 1 ] ;
28396: LD_ADDR_VAR 0 9
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28415: LD_VAR 0 6
28419: PPUSH
28420: CALL_OW 257
28424: PUSH
28425: LD_INT 5
28427: EQUAL
28428: IFFALSE 28449
// points := [ 130 , 5 , 2 ] ;
28430: LD_ADDR_VAR 0 9
28434: PUSH
28435: LD_INT 130
28437: PUSH
28438: LD_INT 5
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28449: LD_VAR 0 6
28453: PPUSH
28454: CALL_OW 257
28458: PUSH
28459: LD_INT 8
28461: EQUAL
28462: IFFALSE 28483
// points := [ 35 , 35 , 30 ] ;
28464: LD_ADDR_VAR 0 9
28468: PUSH
28469: LD_INT 35
28471: PUSH
28472: LD_INT 35
28474: PUSH
28475: LD_INT 30
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28483: LD_VAR 0 6
28487: PPUSH
28488: CALL_OW 257
28492: PUSH
28493: LD_INT 9
28495: EQUAL
28496: IFFALSE 28517
// points := [ 20 , 55 , 40 ] ;
28498: LD_ADDR_VAR 0 9
28502: PUSH
28503: LD_INT 20
28505: PUSH
28506: LD_INT 55
28508: PUSH
28509: LD_INT 40
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28517: LD_VAR 0 6
28521: PPUSH
28522: CALL_OW 257
28526: PUSH
28527: LD_INT 12
28529: PUSH
28530: LD_INT 16
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: IN
28537: IFFALSE 28558
// points := [ 5 , 3 , 2 ] ;
28539: LD_ADDR_VAR 0 9
28543: PUSH
28544: LD_INT 5
28546: PUSH
28547: LD_INT 3
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28558: LD_VAR 0 6
28562: PPUSH
28563: CALL_OW 257
28567: PUSH
28568: LD_INT 17
28570: EQUAL
28571: IFFALSE 28592
// points := [ 100 , 50 , 75 ] ;
28573: LD_ADDR_VAR 0 9
28577: PUSH
28578: LD_INT 100
28580: PUSH
28581: LD_INT 50
28583: PUSH
28584: LD_INT 75
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28592: LD_VAR 0 6
28596: PPUSH
28597: CALL_OW 257
28601: PUSH
28602: LD_INT 15
28604: EQUAL
28605: IFFALSE 28626
// points := [ 10 , 5 , 3 ] ;
28607: LD_ADDR_VAR 0 9
28611: PUSH
28612: LD_INT 10
28614: PUSH
28615: LD_INT 5
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28626: LD_VAR 0 6
28630: PPUSH
28631: CALL_OW 257
28635: PUSH
28636: LD_INT 14
28638: EQUAL
28639: IFFALSE 28660
// points := [ 10 , 0 , 0 ] ;
28641: LD_ADDR_VAR 0 9
28645: PUSH
28646: LD_INT 10
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28660: LD_VAR 0 6
28664: PPUSH
28665: CALL_OW 257
28669: PUSH
28670: LD_INT 11
28672: EQUAL
28673: IFFALSE 28694
// points := [ 30 , 10 , 5 ] ;
28675: LD_ADDR_VAR 0 9
28679: PUSH
28680: LD_INT 30
28682: PUSH
28683: LD_INT 10
28685: PUSH
28686: LD_INT 5
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28694: LD_VAR 0 1
28698: PPUSH
28699: LD_INT 5
28701: PPUSH
28702: CALL_OW 321
28706: PUSH
28707: LD_INT 2
28709: EQUAL
28710: IFFALSE 28727
// bpoints := bpoints * 1.8 ;
28712: LD_ADDR_VAR 0 10
28716: PUSH
28717: LD_VAR 0 10
28721: PUSH
28722: LD_REAL  1.80000000000000E+0000
28725: MUL
28726: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28727: LD_VAR 0 6
28731: PPUSH
28732: CALL_OW 257
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 3
28745: PUSH
28746: LD_INT 4
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: IN
28755: PUSH
28756: LD_VAR 0 1
28760: PPUSH
28761: LD_INT 51
28763: PPUSH
28764: CALL_OW 321
28768: PUSH
28769: LD_INT 2
28771: EQUAL
28772: AND
28773: IFFALSE 28790
// bpoints := bpoints * 1.2 ;
28775: LD_ADDR_VAR 0 10
28779: PUSH
28780: LD_VAR 0 10
28784: PUSH
28785: LD_REAL  1.20000000000000E+0000
28788: MUL
28789: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28790: LD_VAR 0 6
28794: PPUSH
28795: CALL_OW 257
28799: PUSH
28800: LD_INT 5
28802: PUSH
28803: LD_INT 7
28805: PUSH
28806: LD_INT 9
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: IN
28814: PUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: LD_INT 52
28822: PPUSH
28823: CALL_OW 321
28827: PUSH
28828: LD_INT 2
28830: EQUAL
28831: AND
28832: IFFALSE 28849
// bpoints := bpoints * 1.5 ;
28834: LD_ADDR_VAR 0 10
28838: PUSH
28839: LD_VAR 0 10
28843: PUSH
28844: LD_REAL  1.50000000000000E+0000
28847: MUL
28848: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28849: LD_VAR 0 1
28853: PPUSH
28854: LD_INT 66
28856: PPUSH
28857: CALL_OW 321
28861: PUSH
28862: LD_INT 2
28864: EQUAL
28865: IFFALSE 28882
// bpoints := bpoints * 1.1 ;
28867: LD_ADDR_VAR 0 10
28871: PUSH
28872: LD_VAR 0 10
28876: PUSH
28877: LD_REAL  1.10000000000000E+0000
28880: MUL
28881: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28882: LD_ADDR_VAR 0 10
28886: PUSH
28887: LD_VAR 0 10
28891: PUSH
28892: LD_VAR 0 6
28896: PPUSH
28897: LD_INT 1
28899: PPUSH
28900: CALL_OW 259
28904: PUSH
28905: LD_REAL  1.15000000000000E+0000
28908: MUL
28909: MUL
28910: ST_TO_ADDR
// end ; unit_vehicle :
28911: GO 29739
28913: LD_INT 2
28915: DOUBLE
28916: EQUAL
28917: IFTRUE 28921
28919: GO 29727
28921: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28922: LD_VAR 0 6
28926: PPUSH
28927: CALL_OW 264
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 42
28937: PUSH
28938: LD_INT 24
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: IN
28946: IFFALSE 28967
// points := [ 25 , 5 , 3 ] ;
28948: LD_ADDR_VAR 0 9
28952: PUSH
28953: LD_INT 25
28955: PUSH
28956: LD_INT 5
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28967: LD_VAR 0 6
28971: PPUSH
28972: CALL_OW 264
28976: PUSH
28977: LD_INT 4
28979: PUSH
28980: LD_INT 43
28982: PUSH
28983: LD_INT 25
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: IN
28991: IFFALSE 29012
// points := [ 40 , 15 , 5 ] ;
28993: LD_ADDR_VAR 0 9
28997: PUSH
28998: LD_INT 40
29000: PUSH
29001: LD_INT 15
29003: PUSH
29004: LD_INT 5
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29012: LD_VAR 0 6
29016: PPUSH
29017: CALL_OW 264
29021: PUSH
29022: LD_INT 3
29024: PUSH
29025: LD_INT 23
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: IN
29032: IFFALSE 29053
// points := [ 7 , 25 , 8 ] ;
29034: LD_ADDR_VAR 0 9
29038: PUSH
29039: LD_INT 7
29041: PUSH
29042: LD_INT 25
29044: PUSH
29045: LD_INT 8
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29053: LD_VAR 0 6
29057: PPUSH
29058: CALL_OW 264
29062: PUSH
29063: LD_INT 5
29065: PUSH
29066: LD_INT 27
29068: PUSH
29069: LD_INT 44
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: IN
29077: IFFALSE 29098
// points := [ 14 , 50 , 16 ] ;
29079: LD_ADDR_VAR 0 9
29083: PUSH
29084: LD_INT 14
29086: PUSH
29087: LD_INT 50
29089: PUSH
29090: LD_INT 16
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29098: LD_VAR 0 6
29102: PPUSH
29103: CALL_OW 264
29107: PUSH
29108: LD_INT 6
29110: PUSH
29111: LD_INT 46
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: IN
29118: IFFALSE 29139
// points := [ 32 , 120 , 70 ] ;
29120: LD_ADDR_VAR 0 9
29124: PUSH
29125: LD_INT 32
29127: PUSH
29128: LD_INT 120
29130: PUSH
29131: LD_INT 70
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29139: LD_VAR 0 6
29143: PPUSH
29144: CALL_OW 264
29148: PUSH
29149: LD_INT 7
29151: PUSH
29152: LD_INT 28
29154: PUSH
29155: LD_INT 45
29157: PUSH
29158: LD_INT 92
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: IN
29167: IFFALSE 29188
// points := [ 35 , 20 , 45 ] ;
29169: LD_ADDR_VAR 0 9
29173: PUSH
29174: LD_INT 35
29176: PUSH
29177: LD_INT 20
29179: PUSH
29180: LD_INT 45
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29188: LD_VAR 0 6
29192: PPUSH
29193: CALL_OW 264
29197: PUSH
29198: LD_INT 47
29200: PUSH
29201: EMPTY
29202: LIST
29203: IN
29204: IFFALSE 29225
// points := [ 67 , 45 , 75 ] ;
29206: LD_ADDR_VAR 0 9
29210: PUSH
29211: LD_INT 67
29213: PUSH
29214: LD_INT 45
29216: PUSH
29217: LD_INT 75
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29225: LD_VAR 0 6
29229: PPUSH
29230: CALL_OW 264
29234: PUSH
29235: LD_INT 26
29237: PUSH
29238: EMPTY
29239: LIST
29240: IN
29241: IFFALSE 29262
// points := [ 120 , 30 , 80 ] ;
29243: LD_ADDR_VAR 0 9
29247: PUSH
29248: LD_INT 120
29250: PUSH
29251: LD_INT 30
29253: PUSH
29254: LD_INT 80
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29262: LD_VAR 0 6
29266: PPUSH
29267: CALL_OW 264
29271: PUSH
29272: LD_INT 22
29274: PUSH
29275: EMPTY
29276: LIST
29277: IN
29278: IFFALSE 29299
// points := [ 40 , 1 , 1 ] ;
29280: LD_ADDR_VAR 0 9
29284: PUSH
29285: LD_INT 40
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29299: LD_VAR 0 6
29303: PPUSH
29304: CALL_OW 264
29308: PUSH
29309: LD_INT 29
29311: PUSH
29312: EMPTY
29313: LIST
29314: IN
29315: IFFALSE 29336
// points := [ 70 , 200 , 400 ] ;
29317: LD_ADDR_VAR 0 9
29321: PUSH
29322: LD_INT 70
29324: PUSH
29325: LD_INT 200
29327: PUSH
29328: LD_INT 400
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29336: LD_VAR 0 6
29340: PPUSH
29341: CALL_OW 264
29345: PUSH
29346: LD_INT 14
29348: PUSH
29349: LD_INT 53
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: IN
29356: IFFALSE 29377
// points := [ 40 , 10 , 20 ] ;
29358: LD_ADDR_VAR 0 9
29362: PUSH
29363: LD_INT 40
29365: PUSH
29366: LD_INT 10
29368: PUSH
29369: LD_INT 20
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29377: LD_VAR 0 6
29381: PPUSH
29382: CALL_OW 264
29386: PUSH
29387: LD_INT 9
29389: PUSH
29390: EMPTY
29391: LIST
29392: IN
29393: IFFALSE 29414
// points := [ 5 , 70 , 20 ] ;
29395: LD_ADDR_VAR 0 9
29399: PUSH
29400: LD_INT 5
29402: PUSH
29403: LD_INT 70
29405: PUSH
29406: LD_INT 20
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29414: LD_VAR 0 6
29418: PPUSH
29419: CALL_OW 264
29423: PUSH
29424: LD_INT 10
29426: PUSH
29427: EMPTY
29428: LIST
29429: IN
29430: IFFALSE 29451
// points := [ 35 , 110 , 70 ] ;
29432: LD_ADDR_VAR 0 9
29436: PUSH
29437: LD_INT 35
29439: PUSH
29440: LD_INT 110
29442: PUSH
29443: LD_INT 70
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29451: LD_VAR 0 6
29455: PPUSH
29456: CALL_OW 265
29460: PUSH
29461: LD_INT 25
29463: EQUAL
29464: IFFALSE 29485
// points := [ 80 , 65 , 100 ] ;
29466: LD_ADDR_VAR 0 9
29470: PUSH
29471: LD_INT 80
29473: PUSH
29474: LD_INT 65
29476: PUSH
29477: LD_INT 100
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29485: LD_VAR 0 6
29489: PPUSH
29490: CALL_OW 263
29494: PUSH
29495: LD_INT 1
29497: EQUAL
29498: IFFALSE 29533
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29500: LD_ADDR_VAR 0 10
29504: PUSH
29505: LD_VAR 0 10
29509: PUSH
29510: LD_VAR 0 6
29514: PPUSH
29515: CALL_OW 311
29519: PPUSH
29520: LD_INT 3
29522: PPUSH
29523: CALL_OW 259
29527: PUSH
29528: LD_INT 4
29530: MUL
29531: MUL
29532: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29533: LD_VAR 0 6
29537: PPUSH
29538: CALL_OW 263
29542: PUSH
29543: LD_INT 2
29545: EQUAL
29546: IFFALSE 29597
// begin j := IsControledBy ( i ) ;
29548: LD_ADDR_VAR 0 7
29552: PUSH
29553: LD_VAR 0 6
29557: PPUSH
29558: CALL_OW 312
29562: ST_TO_ADDR
// if j then
29563: LD_VAR 0 7
29567: IFFALSE 29597
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29569: LD_ADDR_VAR 0 10
29573: PUSH
29574: LD_VAR 0 10
29578: PUSH
29579: LD_VAR 0 7
29583: PPUSH
29584: LD_INT 3
29586: PPUSH
29587: CALL_OW 259
29591: PUSH
29592: LD_INT 3
29594: MUL
29595: MUL
29596: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29597: LD_VAR 0 6
29601: PPUSH
29602: CALL_OW 264
29606: PUSH
29607: LD_INT 5
29609: PUSH
29610: LD_INT 6
29612: PUSH
29613: LD_INT 46
29615: PUSH
29616: LD_INT 44
29618: PUSH
29619: LD_INT 47
29621: PUSH
29622: LD_INT 45
29624: PUSH
29625: LD_INT 28
29627: PUSH
29628: LD_INT 7
29630: PUSH
29631: LD_INT 27
29633: PUSH
29634: LD_INT 29
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: IN
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_INT 52
29657: PPUSH
29658: CALL_OW 321
29662: PUSH
29663: LD_INT 2
29665: EQUAL
29666: AND
29667: IFFALSE 29684
// bpoints := bpoints * 1.2 ;
29669: LD_ADDR_VAR 0 10
29673: PUSH
29674: LD_VAR 0 10
29678: PUSH
29679: LD_REAL  1.20000000000000E+0000
29682: MUL
29683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29684: LD_VAR 0 6
29688: PPUSH
29689: CALL_OW 264
29693: PUSH
29694: LD_INT 6
29696: PUSH
29697: LD_INT 46
29699: PUSH
29700: LD_INT 47
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: IN
29708: IFFALSE 29725
// bpoints := bpoints * 1.2 ;
29710: LD_ADDR_VAR 0 10
29714: PUSH
29715: LD_VAR 0 10
29719: PUSH
29720: LD_REAL  1.20000000000000E+0000
29723: MUL
29724: ST_TO_ADDR
// end ; unit_building :
29725: GO 29739
29727: LD_INT 3
29729: DOUBLE
29730: EQUAL
29731: IFTRUE 29735
29733: GO 29738
29735: POP
// ; end ;
29736: GO 29739
29738: POP
// for j = 1 to 3 do
29739: LD_ADDR_VAR 0 7
29743: PUSH
29744: DOUBLE
29745: LD_INT 1
29747: DEC
29748: ST_TO_ADDR
29749: LD_INT 3
29751: PUSH
29752: FOR_TO
29753: IFFALSE 29806
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29755: LD_ADDR_VAR 0 5
29759: PUSH
29760: LD_VAR 0 5
29764: PPUSH
29765: LD_VAR 0 7
29769: PPUSH
29770: LD_VAR 0 5
29774: PUSH
29775: LD_VAR 0 7
29779: ARRAY
29780: PUSH
29781: LD_VAR 0 9
29785: PUSH
29786: LD_VAR 0 7
29790: ARRAY
29791: PUSH
29792: LD_VAR 0 10
29796: MUL
29797: PLUS
29798: PPUSH
29799: CALL_OW 1
29803: ST_TO_ADDR
29804: GO 29752
29806: POP
29807: POP
// end ;
29808: GO 28287
29810: POP
29811: POP
// result := Replace ( result , 4 , tmp ) ;
29812: LD_ADDR_VAR 0 5
29816: PUSH
29817: LD_VAR 0 5
29821: PPUSH
29822: LD_INT 4
29824: PPUSH
29825: LD_VAR 0 8
29829: PPUSH
29830: CALL_OW 1
29834: ST_TO_ADDR
// end ;
29835: LD_VAR 0 5
29839: RET
// export function DangerAtRange ( unit , range ) ; begin
29840: LD_INT 0
29842: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 255
29857: PPUSH
29858: LD_VAR 0 1
29862: PPUSH
29863: CALL_OW 250
29867: PPUSH
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 251
29877: PPUSH
29878: LD_VAR 0 2
29882: PPUSH
29883: CALL 28139 0 4
29887: ST_TO_ADDR
// end ;
29888: LD_VAR 0 3
29892: RET
// export function DangerInArea ( side , area ) ; begin
29893: LD_INT 0
29895: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29896: LD_ADDR_VAR 0 3
29900: PUSH
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_INT 81
29908: PUSH
29909: LD_VAR 0 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PPUSH
29918: CALL_OW 70
29922: ST_TO_ADDR
// end ;
29923: LD_VAR 0 3
29927: RET
// export function IsExtension ( b ) ; begin
29928: LD_INT 0
29930: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29931: LD_ADDR_VAR 0 2
29935: PUSH
29936: LD_VAR 0 1
29940: PUSH
29941: LD_INT 23
29943: PUSH
29944: LD_INT 20
29946: PUSH
29947: LD_INT 22
29949: PUSH
29950: LD_INT 17
29952: PUSH
29953: LD_INT 24
29955: PUSH
29956: LD_INT 21
29958: PUSH
29959: LD_INT 19
29961: PUSH
29962: LD_INT 16
29964: PUSH
29965: LD_INT 25
29967: PUSH
29968: LD_INT 18
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: IN
29983: ST_TO_ADDR
// end ;
29984: LD_VAR 0 2
29988: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29989: LD_INT 0
29991: PPUSH
29992: PPUSH
29993: PPUSH
// result := [ ] ;
29994: LD_ADDR_VAR 0 4
29998: PUSH
29999: EMPTY
30000: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30001: LD_ADDR_VAR 0 5
30005: PUSH
30006: LD_VAR 0 2
30010: PPUSH
30011: LD_INT 21
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PPUSH
30021: CALL_OW 70
30025: ST_TO_ADDR
// if not tmp then
30026: LD_VAR 0 5
30030: NOT
30031: IFFALSE 30035
// exit ;
30033: GO 30099
// if checkLink then
30035: LD_VAR 0 3
30039: IFFALSE 30089
// begin for i in tmp do
30041: LD_ADDR_VAR 0 6
30045: PUSH
30046: LD_VAR 0 5
30050: PUSH
30051: FOR_IN
30052: IFFALSE 30087
// if GetBase ( i ) <> base then
30054: LD_VAR 0 6
30058: PPUSH
30059: CALL_OW 274
30063: PUSH
30064: LD_VAR 0 1
30068: NONEQUAL
30069: IFFALSE 30085
// ComLinkToBase ( base , i ) ;
30071: LD_VAR 0 1
30075: PPUSH
30076: LD_VAR 0 6
30080: PPUSH
30081: CALL_OW 169
30085: GO 30051
30087: POP
30088: POP
// end ; result := tmp ;
30089: LD_ADDR_VAR 0 4
30093: PUSH
30094: LD_VAR 0 5
30098: ST_TO_ADDR
// end ;
30099: LD_VAR 0 4
30103: RET
// export function ComComplete ( units , b ) ; var i ; begin
30104: LD_INT 0
30106: PPUSH
30107: PPUSH
// if not units then
30108: LD_VAR 0 1
30112: NOT
30113: IFFALSE 30117
// exit ;
30115: GO 30207
// for i in units do
30117: LD_ADDR_VAR 0 4
30121: PUSH
30122: LD_VAR 0 1
30126: PUSH
30127: FOR_IN
30128: IFFALSE 30205
// if BuildingStatus ( b ) = bs_build then
30130: LD_VAR 0 2
30134: PPUSH
30135: CALL_OW 461
30139: PUSH
30140: LD_INT 1
30142: EQUAL
30143: IFFALSE 30203
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30145: LD_VAR 0 4
30149: PPUSH
30150: LD_STRING h
30152: PUSH
30153: LD_VAR 0 2
30157: PPUSH
30158: CALL_OW 250
30162: PUSH
30163: LD_VAR 0 2
30167: PPUSH
30168: CALL_OW 251
30172: PUSH
30173: LD_VAR 0 2
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: PPUSH
30199: CALL_OW 446
30203: GO 30127
30205: POP
30206: POP
// end ;
30207: LD_VAR 0 3
30211: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30212: LD_INT 0
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30220: LD_VAR 0 1
30224: NOT
30225: PUSH
30226: LD_VAR 0 1
30230: PPUSH
30231: CALL_OW 263
30235: PUSH
30236: LD_INT 2
30238: NONEQUAL
30239: OR
30240: IFFALSE 30244
// exit ;
30242: GO 30560
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30244: LD_ADDR_VAR 0 6
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 255
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 30
30271: PUSH
30272: LD_INT 36
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 34
30281: PUSH
30282: LD_INT 31
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PPUSH
30298: CALL_OW 69
30302: ST_TO_ADDR
// if not tmp then
30303: LD_VAR 0 6
30307: NOT
30308: IFFALSE 30312
// exit ;
30310: GO 30560
// result := [ ] ;
30312: LD_ADDR_VAR 0 2
30316: PUSH
30317: EMPTY
30318: ST_TO_ADDR
// for i in tmp do
30319: LD_ADDR_VAR 0 3
30323: PUSH
30324: LD_VAR 0 6
30328: PUSH
30329: FOR_IN
30330: IFFALSE 30401
// begin t := UnitsInside ( i ) ;
30332: LD_ADDR_VAR 0 4
30336: PUSH
30337: LD_VAR 0 3
30341: PPUSH
30342: CALL_OW 313
30346: ST_TO_ADDR
// if t then
30347: LD_VAR 0 4
30351: IFFALSE 30399
// for j in t do
30353: LD_ADDR_VAR 0 7
30357: PUSH
30358: LD_VAR 0 4
30362: PUSH
30363: FOR_IN
30364: IFFALSE 30397
// result := Replace ( result , result + 1 , j ) ;
30366: LD_ADDR_VAR 0 2
30370: PUSH
30371: LD_VAR 0 2
30375: PPUSH
30376: LD_VAR 0 2
30380: PUSH
30381: LD_INT 1
30383: PLUS
30384: PPUSH
30385: LD_VAR 0 7
30389: PPUSH
30390: CALL_OW 1
30394: ST_TO_ADDR
30395: GO 30363
30397: POP
30398: POP
// end ;
30399: GO 30329
30401: POP
30402: POP
// if not result then
30403: LD_VAR 0 2
30407: NOT
30408: IFFALSE 30412
// exit ;
30410: GO 30560
// mech := result [ 1 ] ;
30412: LD_ADDR_VAR 0 5
30416: PUSH
30417: LD_VAR 0 2
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: ST_TO_ADDR
// if result > 1 then
30426: LD_VAR 0 2
30430: PUSH
30431: LD_INT 1
30433: GREATER
30434: IFFALSE 30546
// begin for i = 2 to result do
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: DOUBLE
30442: LD_INT 2
30444: DEC
30445: ST_TO_ADDR
30446: LD_VAR 0 2
30450: PUSH
30451: FOR_TO
30452: IFFALSE 30544
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30454: LD_ADDR_VAR 0 4
30458: PUSH
30459: LD_VAR 0 2
30463: PUSH
30464: LD_VAR 0 3
30468: ARRAY
30469: PPUSH
30470: LD_INT 3
30472: PPUSH
30473: CALL_OW 259
30477: PUSH
30478: LD_VAR 0 2
30482: PUSH
30483: LD_VAR 0 3
30487: ARRAY
30488: PPUSH
30489: CALL_OW 432
30493: MINUS
30494: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30495: LD_VAR 0 4
30499: PUSH
30500: LD_VAR 0 5
30504: PPUSH
30505: LD_INT 3
30507: PPUSH
30508: CALL_OW 259
30512: PUSH
30513: LD_VAR 0 5
30517: PPUSH
30518: CALL_OW 432
30522: MINUS
30523: GREATEREQUAL
30524: IFFALSE 30542
// mech := result [ i ] ;
30526: LD_ADDR_VAR 0 5
30530: PUSH
30531: LD_VAR 0 2
30535: PUSH
30536: LD_VAR 0 3
30540: ARRAY
30541: ST_TO_ADDR
// end ;
30542: GO 30451
30544: POP
30545: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30546: LD_VAR 0 1
30550: PPUSH
30551: LD_VAR 0 5
30555: PPUSH
30556: CALL_OW 135
// end ;
30560: LD_VAR 0 2
30564: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
30573: PPUSH
30574: PPUSH
30575: PPUSH
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
// result := [ ] ;
30580: LD_ADDR_VAR 0 7
30584: PUSH
30585: EMPTY
30586: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 266
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: IN
30607: NOT
30608: IFFALSE 30612
// exit ;
30610: GO 32246
// if name then
30612: LD_VAR 0 3
30616: IFFALSE 30632
// SetBName ( base_dep , name ) ;
30618: LD_VAR 0 1
30622: PPUSH
30623: LD_VAR 0 3
30627: PPUSH
30628: CALL_OW 500
// base := GetBase ( base_dep ) ;
30632: LD_ADDR_VAR 0 15
30636: PUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 274
30646: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30647: LD_ADDR_VAR 0 16
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: CALL_OW 255
30661: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30662: LD_ADDR_VAR 0 17
30666: PUSH
30667: LD_VAR 0 1
30671: PPUSH
30672: CALL_OW 248
30676: ST_TO_ADDR
// if sources then
30677: LD_VAR 0 5
30681: IFFALSE 30728
// for i = 1 to 3 do
30683: LD_ADDR_VAR 0 8
30687: PUSH
30688: DOUBLE
30689: LD_INT 1
30691: DEC
30692: ST_TO_ADDR
30693: LD_INT 3
30695: PUSH
30696: FOR_TO
30697: IFFALSE 30726
// AddResourceType ( base , i , sources [ i ] ) ;
30699: LD_VAR 0 15
30703: PPUSH
30704: LD_VAR 0 8
30708: PPUSH
30709: LD_VAR 0 5
30713: PUSH
30714: LD_VAR 0 8
30718: ARRAY
30719: PPUSH
30720: CALL_OW 276
30724: GO 30696
30726: POP
30727: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30728: LD_ADDR_VAR 0 18
30732: PUSH
30733: LD_VAR 0 15
30737: PPUSH
30738: LD_VAR 0 2
30742: PPUSH
30743: LD_INT 1
30745: PPUSH
30746: CALL 29989 0 3
30750: ST_TO_ADDR
// InitHc ;
30751: CALL_OW 19
// InitUc ;
30755: CALL_OW 18
// uc_side := side ;
30759: LD_ADDR_OWVAR 20
30763: PUSH
30764: LD_VAR 0 16
30768: ST_TO_ADDR
// uc_nation := nation ;
30769: LD_ADDR_OWVAR 21
30773: PUSH
30774: LD_VAR 0 17
30778: ST_TO_ADDR
// if buildings then
30779: LD_VAR 0 18
30783: IFFALSE 32105
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30785: LD_ADDR_VAR 0 19
30789: PUSH
30790: LD_VAR 0 18
30794: PPUSH
30795: LD_INT 2
30797: PUSH
30798: LD_INT 30
30800: PUSH
30801: LD_INT 29
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 30
30810: PUSH
30811: LD_INT 30
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: PPUSH
30823: CALL_OW 72
30827: ST_TO_ADDR
// if tmp then
30828: LD_VAR 0 19
30832: IFFALSE 30880
// for i in tmp do
30834: LD_ADDR_VAR 0 8
30838: PUSH
30839: LD_VAR 0 19
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30878
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30847: LD_VAR 0 8
30851: PPUSH
30852: CALL_OW 250
30856: PPUSH
30857: LD_VAR 0 8
30861: PPUSH
30862: CALL_OW 251
30866: PPUSH
30867: LD_VAR 0 16
30871: PPUSH
30872: CALL_OW 441
30876: GO 30844
30878: POP
30879: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30880: LD_VAR 0 18
30884: PPUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 30
30890: PUSH
30891: LD_INT 32
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 30
30900: PUSH
30901: LD_INT 33
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 72
30917: IFFALSE 31005
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30919: LD_ADDR_VAR 0 8
30923: PUSH
30924: LD_VAR 0 18
30928: PPUSH
30929: LD_INT 2
30931: PUSH
30932: LD_INT 30
30934: PUSH
30935: LD_INT 32
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 30
30944: PUSH
30945: LD_INT 33
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: PPUSH
30957: CALL_OW 72
30961: PUSH
30962: FOR_IN
30963: IFFALSE 31003
// begin if not GetBWeapon ( i ) then
30965: LD_VAR 0 8
30969: PPUSH
30970: CALL_OW 269
30974: NOT
30975: IFFALSE 31001
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30977: LD_VAR 0 8
30981: PPUSH
30982: LD_VAR 0 8
30986: PPUSH
30987: LD_VAR 0 2
30991: PPUSH
30992: CALL 32251 0 2
30996: PPUSH
30997: CALL_OW 431
// end ;
31001: GO 30962
31003: POP
31004: POP
// end ; for i = 1 to personel do
31005: LD_ADDR_VAR 0 8
31009: PUSH
31010: DOUBLE
31011: LD_INT 1
31013: DEC
31014: ST_TO_ADDR
31015: LD_VAR 0 6
31019: PUSH
31020: FOR_TO
31021: IFFALSE 32085
// begin if i > 4 then
31023: LD_VAR 0 8
31027: PUSH
31028: LD_INT 4
31030: GREATER
31031: IFFALSE 31035
// break ;
31033: GO 32085
// case i of 1 :
31035: LD_VAR 0 8
31039: PUSH
31040: LD_INT 1
31042: DOUBLE
31043: EQUAL
31044: IFTRUE 31048
31046: GO 31128
31048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31049: LD_ADDR_VAR 0 12
31053: PUSH
31054: LD_VAR 0 18
31058: PPUSH
31059: LD_INT 22
31061: PUSH
31062: LD_VAR 0 16
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 58
31073: PUSH
31074: EMPTY
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: LD_INT 30
31082: PUSH
31083: LD_INT 32
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 30
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 30
31102: PUSH
31103: LD_INT 5
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: PPUSH
31121: CALL_OW 72
31125: ST_TO_ADDR
31126: GO 31350
31128: LD_INT 2
31130: DOUBLE
31131: EQUAL
31132: IFTRUE 31136
31134: GO 31198
31136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31137: LD_ADDR_VAR 0 12
31141: PUSH
31142: LD_VAR 0 18
31146: PPUSH
31147: LD_INT 22
31149: PUSH
31150: LD_VAR 0 16
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: LD_INT 30
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 30
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PPUSH
31191: CALL_OW 72
31195: ST_TO_ADDR
31196: GO 31350
31198: LD_INT 3
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31268
31206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31207: LD_ADDR_VAR 0 12
31211: PUSH
31212: LD_VAR 0 18
31216: PPUSH
31217: LD_INT 22
31219: PUSH
31220: LD_VAR 0 16
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: LD_INT 30
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 30
31244: PUSH
31245: LD_INT 3
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PPUSH
31261: CALL_OW 72
31265: ST_TO_ADDR
31266: GO 31350
31268: LD_INT 4
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31349
31276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31277: LD_ADDR_VAR 0 12
31281: PUSH
31282: LD_VAR 0 18
31286: PPUSH
31287: LD_INT 22
31289: PUSH
31290: LD_VAR 0 16
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 30
31304: PUSH
31305: LD_INT 6
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 7
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 30
31324: PUSH
31325: LD_INT 8
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PPUSH
31342: CALL_OW 72
31346: ST_TO_ADDR
31347: GO 31350
31349: POP
// if i = 1 then
31350: LD_VAR 0 8
31354: PUSH
31355: LD_INT 1
31357: EQUAL
31358: IFFALSE 31469
// begin tmp := [ ] ;
31360: LD_ADDR_VAR 0 19
31364: PUSH
31365: EMPTY
31366: ST_TO_ADDR
// for j in f do
31367: LD_ADDR_VAR 0 9
31371: PUSH
31372: LD_VAR 0 12
31376: PUSH
31377: FOR_IN
31378: IFFALSE 31451
// if GetBType ( j ) = b_bunker then
31380: LD_VAR 0 9
31384: PPUSH
31385: CALL_OW 266
31389: PUSH
31390: LD_INT 32
31392: EQUAL
31393: IFFALSE 31420
// tmp := Insert ( tmp , 1 , j ) else
31395: LD_ADDR_VAR 0 19
31399: PUSH
31400: LD_VAR 0 19
31404: PPUSH
31405: LD_INT 1
31407: PPUSH
31408: LD_VAR 0 9
31412: PPUSH
31413: CALL_OW 2
31417: ST_TO_ADDR
31418: GO 31449
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31420: LD_ADDR_VAR 0 19
31424: PUSH
31425: LD_VAR 0 19
31429: PPUSH
31430: LD_VAR 0 19
31434: PUSH
31435: LD_INT 1
31437: PLUS
31438: PPUSH
31439: LD_VAR 0 9
31443: PPUSH
31444: CALL_OW 2
31448: ST_TO_ADDR
31449: GO 31377
31451: POP
31452: POP
// if tmp then
31453: LD_VAR 0 19
31457: IFFALSE 31469
// f := tmp ;
31459: LD_ADDR_VAR 0 12
31463: PUSH
31464: LD_VAR 0 19
31468: ST_TO_ADDR
// end ; x := personel [ i ] ;
31469: LD_ADDR_VAR 0 13
31473: PUSH
31474: LD_VAR 0 6
31478: PUSH
31479: LD_VAR 0 8
31483: ARRAY
31484: ST_TO_ADDR
// if x = - 1 then
31485: LD_VAR 0 13
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: EQUAL
31494: IFFALSE 31703
// begin for j in f do
31496: LD_ADDR_VAR 0 9
31500: PUSH
31501: LD_VAR 0 12
31505: PUSH
31506: FOR_IN
31507: IFFALSE 31699
// repeat InitHc ;
31509: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31513: LD_VAR 0 9
31517: PPUSH
31518: CALL_OW 266
31522: PUSH
31523: LD_INT 5
31525: EQUAL
31526: IFFALSE 31596
// begin if UnitsInside ( j ) < 3 then
31528: LD_VAR 0 9
31532: PPUSH
31533: CALL_OW 313
31537: PUSH
31538: LD_INT 3
31540: LESS
31541: IFFALSE 31577
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31543: LD_INT 0
31545: PPUSH
31546: LD_INT 5
31548: PUSH
31549: LD_INT 8
31551: PUSH
31552: LD_INT 9
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: PUSH
31560: LD_VAR 0 17
31564: ARRAY
31565: PPUSH
31566: LD_VAR 0 4
31570: PPUSH
31571: CALL_OW 380
31575: GO 31594
// PrepareHuman ( false , i , skill ) ;
31577: LD_INT 0
31579: PPUSH
31580: LD_VAR 0 8
31584: PPUSH
31585: LD_VAR 0 4
31589: PPUSH
31590: CALL_OW 380
// end else
31594: GO 31613
// PrepareHuman ( false , i , skill ) ;
31596: LD_INT 0
31598: PPUSH
31599: LD_VAR 0 8
31603: PPUSH
31604: LD_VAR 0 4
31608: PPUSH
31609: CALL_OW 380
// un := CreateHuman ;
31613: LD_ADDR_VAR 0 14
31617: PUSH
31618: CALL_OW 44
31622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31623: LD_ADDR_VAR 0 7
31627: PUSH
31628: LD_VAR 0 7
31632: PPUSH
31633: LD_INT 1
31635: PPUSH
31636: LD_VAR 0 14
31640: PPUSH
31641: CALL_OW 2
31645: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31646: LD_VAR 0 14
31650: PPUSH
31651: LD_VAR 0 9
31655: PPUSH
31656: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31660: LD_VAR 0 9
31664: PPUSH
31665: CALL_OW 313
31669: PUSH
31670: LD_INT 6
31672: EQUAL
31673: PUSH
31674: LD_VAR 0 9
31678: PPUSH
31679: CALL_OW 266
31683: PUSH
31684: LD_INT 32
31686: PUSH
31687: LD_INT 31
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: IN
31694: OR
31695: IFFALSE 31509
31697: GO 31506
31699: POP
31700: POP
// end else
31701: GO 32083
// for j = 1 to x do
31703: LD_ADDR_VAR 0 9
31707: PUSH
31708: DOUBLE
31709: LD_INT 1
31711: DEC
31712: ST_TO_ADDR
31713: LD_VAR 0 13
31717: PUSH
31718: FOR_TO
31719: IFFALSE 32081
// begin InitHc ;
31721: CALL_OW 19
// if not f then
31725: LD_VAR 0 12
31729: NOT
31730: IFFALSE 31819
// begin PrepareHuman ( false , i , skill ) ;
31732: LD_INT 0
31734: PPUSH
31735: LD_VAR 0 8
31739: PPUSH
31740: LD_VAR 0 4
31744: PPUSH
31745: CALL_OW 380
// un := CreateHuman ;
31749: LD_ADDR_VAR 0 14
31753: PUSH
31754: CALL_OW 44
31758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31759: LD_ADDR_VAR 0 7
31763: PUSH
31764: LD_VAR 0 7
31768: PPUSH
31769: LD_INT 1
31771: PPUSH
31772: LD_VAR 0 14
31776: PPUSH
31777: CALL_OW 2
31781: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31782: LD_VAR 0 14
31786: PPUSH
31787: LD_VAR 0 1
31791: PPUSH
31792: CALL_OW 250
31796: PPUSH
31797: LD_VAR 0 1
31801: PPUSH
31802: CALL_OW 251
31806: PPUSH
31807: LD_INT 10
31809: PPUSH
31810: LD_INT 0
31812: PPUSH
31813: CALL_OW 50
// continue ;
31817: GO 31718
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31819: LD_VAR 0 12
31823: PUSH
31824: LD_INT 1
31826: ARRAY
31827: PPUSH
31828: CALL_OW 313
31832: PUSH
31833: LD_VAR 0 12
31837: PUSH
31838: LD_INT 1
31840: ARRAY
31841: PPUSH
31842: CALL_OW 266
31846: PUSH
31847: LD_INT 32
31849: PUSH
31850: LD_INT 31
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: IN
31857: AND
31858: PUSH
31859: LD_VAR 0 12
31863: PUSH
31864: LD_INT 1
31866: ARRAY
31867: PPUSH
31868: CALL_OW 313
31872: PUSH
31873: LD_INT 6
31875: EQUAL
31876: OR
31877: IFFALSE 31897
// f := Delete ( f , 1 ) ;
31879: LD_ADDR_VAR 0 12
31883: PUSH
31884: LD_VAR 0 12
31888: PPUSH
31889: LD_INT 1
31891: PPUSH
31892: CALL_OW 3
31896: ST_TO_ADDR
// if not f then
31897: LD_VAR 0 12
31901: NOT
31902: IFFALSE 31920
// begin x := x + 2 ;
31904: LD_ADDR_VAR 0 13
31908: PUSH
31909: LD_VAR 0 13
31913: PUSH
31914: LD_INT 2
31916: PLUS
31917: ST_TO_ADDR
// continue ;
31918: GO 31718
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31920: LD_VAR 0 12
31924: PUSH
31925: LD_INT 1
31927: ARRAY
31928: PPUSH
31929: CALL_OW 266
31933: PUSH
31934: LD_INT 5
31936: EQUAL
31937: IFFALSE 32011
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31939: LD_VAR 0 12
31943: PUSH
31944: LD_INT 1
31946: ARRAY
31947: PPUSH
31948: CALL_OW 313
31952: PUSH
31953: LD_INT 3
31955: LESS
31956: IFFALSE 31992
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31958: LD_INT 0
31960: PPUSH
31961: LD_INT 5
31963: PUSH
31964: LD_INT 8
31966: PUSH
31967: LD_INT 9
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: PUSH
31975: LD_VAR 0 17
31979: ARRAY
31980: PPUSH
31981: LD_VAR 0 4
31985: PPUSH
31986: CALL_OW 380
31990: GO 32009
// PrepareHuman ( false , i , skill ) ;
31992: LD_INT 0
31994: PPUSH
31995: LD_VAR 0 8
31999: PPUSH
32000: LD_VAR 0 4
32004: PPUSH
32005: CALL_OW 380
// end else
32009: GO 32028
// PrepareHuman ( false , i , skill ) ;
32011: LD_INT 0
32013: PPUSH
32014: LD_VAR 0 8
32018: PPUSH
32019: LD_VAR 0 4
32023: PPUSH
32024: CALL_OW 380
// un := CreateHuman ;
32028: LD_ADDR_VAR 0 14
32032: PUSH
32033: CALL_OW 44
32037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32038: LD_ADDR_VAR 0 7
32042: PUSH
32043: LD_VAR 0 7
32047: PPUSH
32048: LD_INT 1
32050: PPUSH
32051: LD_VAR 0 14
32055: PPUSH
32056: CALL_OW 2
32060: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32061: LD_VAR 0 14
32065: PPUSH
32066: LD_VAR 0 12
32070: PUSH
32071: LD_INT 1
32073: ARRAY
32074: PPUSH
32075: CALL_OW 52
// end ;
32079: GO 31718
32081: POP
32082: POP
// end ;
32083: GO 31020
32085: POP
32086: POP
// result := result ^ buildings ;
32087: LD_ADDR_VAR 0 7
32091: PUSH
32092: LD_VAR 0 7
32096: PUSH
32097: LD_VAR 0 18
32101: ADD
32102: ST_TO_ADDR
// end else
32103: GO 32246
// begin for i = 1 to personel do
32105: LD_ADDR_VAR 0 8
32109: PUSH
32110: DOUBLE
32111: LD_INT 1
32113: DEC
32114: ST_TO_ADDR
32115: LD_VAR 0 6
32119: PUSH
32120: FOR_TO
32121: IFFALSE 32244
// begin if i > 4 then
32123: LD_VAR 0 8
32127: PUSH
32128: LD_INT 4
32130: GREATER
32131: IFFALSE 32135
// break ;
32133: GO 32244
// x := personel [ i ] ;
32135: LD_ADDR_VAR 0 13
32139: PUSH
32140: LD_VAR 0 6
32144: PUSH
32145: LD_VAR 0 8
32149: ARRAY
32150: ST_TO_ADDR
// if x = - 1 then
32151: LD_VAR 0 13
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: EQUAL
32160: IFFALSE 32164
// continue ;
32162: GO 32120
// PrepareHuman ( false , i , skill ) ;
32164: LD_INT 0
32166: PPUSH
32167: LD_VAR 0 8
32171: PPUSH
32172: LD_VAR 0 4
32176: PPUSH
32177: CALL_OW 380
// un := CreateHuman ;
32181: LD_ADDR_VAR 0 14
32185: PUSH
32186: CALL_OW 44
32190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32191: LD_VAR 0 14
32195: PPUSH
32196: LD_VAR 0 1
32200: PPUSH
32201: CALL_OW 250
32205: PPUSH
32206: LD_VAR 0 1
32210: PPUSH
32211: CALL_OW 251
32215: PPUSH
32216: LD_INT 10
32218: PPUSH
32219: LD_INT 0
32221: PPUSH
32222: CALL_OW 50
// result := result ^ un ;
32226: LD_ADDR_VAR 0 7
32230: PUSH
32231: LD_VAR 0 7
32235: PUSH
32236: LD_VAR 0 14
32240: ADD
32241: ST_TO_ADDR
// end ;
32242: GO 32120
32244: POP
32245: POP
// end ; end ;
32246: LD_VAR 0 7
32250: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32251: LD_INT 0
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
32268: PPUSH
// result := false ;
32269: LD_ADDR_VAR 0 3
32273: PUSH
32274: LD_INT 0
32276: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32277: LD_VAR 0 1
32281: NOT
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 266
32292: PUSH
32293: LD_INT 32
32295: PUSH
32296: LD_INT 33
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: IN
32303: NOT
32304: OR
32305: IFFALSE 32309
// exit ;
32307: GO 33418
// nat := GetNation ( tower ) ;
32309: LD_ADDR_VAR 0 12
32313: PUSH
32314: LD_VAR 0 1
32318: PPUSH
32319: CALL_OW 248
32323: ST_TO_ADDR
// side := GetSide ( tower ) ;
32324: LD_ADDR_VAR 0 16
32328: PUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 255
32338: ST_TO_ADDR
// x := GetX ( tower ) ;
32339: LD_ADDR_VAR 0 10
32343: PUSH
32344: LD_VAR 0 1
32348: PPUSH
32349: CALL_OW 250
32353: ST_TO_ADDR
// y := GetY ( tower ) ;
32354: LD_ADDR_VAR 0 11
32358: PUSH
32359: LD_VAR 0 1
32363: PPUSH
32364: CALL_OW 251
32368: ST_TO_ADDR
// if not x or not y then
32369: LD_VAR 0 10
32373: NOT
32374: PUSH
32375: LD_VAR 0 11
32379: NOT
32380: OR
32381: IFFALSE 32385
// exit ;
32383: GO 33418
// weapon := 0 ;
32385: LD_ADDR_VAR 0 18
32389: PUSH
32390: LD_INT 0
32392: ST_TO_ADDR
// fac_list := [ ] ;
32393: LD_ADDR_VAR 0 17
32397: PUSH
32398: EMPTY
32399: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32400: LD_ADDR_VAR 0 6
32404: PUSH
32405: LD_VAR 0 1
32409: PPUSH
32410: CALL_OW 274
32414: PPUSH
32415: LD_VAR 0 2
32419: PPUSH
32420: LD_INT 0
32422: PPUSH
32423: CALL 29989 0 3
32427: PPUSH
32428: LD_INT 30
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 72
32442: ST_TO_ADDR
// if not factories then
32443: LD_VAR 0 6
32447: NOT
32448: IFFALSE 32452
// exit ;
32450: GO 33418
// for i in factories do
32452: LD_ADDR_VAR 0 8
32456: PUSH
32457: LD_VAR 0 6
32461: PUSH
32462: FOR_IN
32463: IFFALSE 32488
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32465: LD_ADDR_VAR 0 17
32469: PUSH
32470: LD_VAR 0 17
32474: PUSH
32475: LD_VAR 0 8
32479: PPUSH
32480: CALL_OW 478
32484: UNION
32485: ST_TO_ADDR
32486: GO 32462
32488: POP
32489: POP
// if not fac_list then
32490: LD_VAR 0 17
32494: NOT
32495: IFFALSE 32499
// exit ;
32497: GO 33418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32499: LD_ADDR_VAR 0 5
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: LD_INT 5
32509: PUSH
32510: LD_INT 9
32512: PUSH
32513: LD_INT 10
32515: PUSH
32516: LD_INT 6
32518: PUSH
32519: LD_INT 7
32521: PUSH
32522: LD_INT 11
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 27
32536: PUSH
32537: LD_INT 28
32539: PUSH
32540: LD_INT 26
32542: PUSH
32543: LD_INT 30
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 43
32554: PUSH
32555: LD_INT 44
32557: PUSH
32558: LD_INT 46
32560: PUSH
32561: LD_INT 45
32563: PUSH
32564: LD_INT 47
32566: PUSH
32567: LD_INT 49
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: PUSH
32583: LD_VAR 0 12
32587: ARRAY
32588: ST_TO_ADDR
// list := list isect fac_list ;
32589: LD_ADDR_VAR 0 5
32593: PUSH
32594: LD_VAR 0 5
32598: PUSH
32599: LD_VAR 0 17
32603: ISECT
32604: ST_TO_ADDR
// if not list then
32605: LD_VAR 0 5
32609: NOT
32610: IFFALSE 32614
// exit ;
32612: GO 33418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32614: LD_VAR 0 12
32618: PUSH
32619: LD_INT 3
32621: EQUAL
32622: PUSH
32623: LD_INT 49
32625: PUSH
32626: LD_VAR 0 5
32630: IN
32631: AND
32632: PUSH
32633: LD_INT 31
32635: PPUSH
32636: LD_VAR 0 16
32640: PPUSH
32641: CALL_OW 321
32645: PUSH
32646: LD_INT 2
32648: EQUAL
32649: AND
32650: IFFALSE 32710
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32652: LD_INT 22
32654: PUSH
32655: LD_VAR 0 16
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 35
32666: PUSH
32667: LD_INT 49
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 91
32676: PUSH
32677: LD_VAR 0 1
32681: PUSH
32682: LD_INT 10
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: PPUSH
32695: CALL_OW 69
32699: NOT
32700: IFFALSE 32710
// weapon := ru_time_lapser ;
32702: LD_ADDR_VAR 0 18
32706: PUSH
32707: LD_INT 49
32709: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32710: LD_VAR 0 12
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: IN
32725: PUSH
32726: LD_INT 11
32728: PUSH
32729: LD_VAR 0 5
32733: IN
32734: PUSH
32735: LD_INT 30
32737: PUSH
32738: LD_VAR 0 5
32742: IN
32743: OR
32744: AND
32745: PUSH
32746: LD_INT 6
32748: PPUSH
32749: LD_VAR 0 16
32753: PPUSH
32754: CALL_OW 321
32758: PUSH
32759: LD_INT 2
32761: EQUAL
32762: AND
32763: IFFALSE 32928
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32765: LD_INT 22
32767: PUSH
32768: LD_VAR 0 16
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 35
32782: PUSH
32783: LD_INT 11
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 35
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 91
32807: PUSH
32808: LD_VAR 0 1
32812: PUSH
32813: LD_INT 18
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: PPUSH
32826: CALL_OW 69
32830: NOT
32831: PUSH
32832: LD_INT 22
32834: PUSH
32835: LD_VAR 0 16
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 30
32849: PUSH
32850: LD_INT 32
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 30
32859: PUSH
32860: LD_INT 33
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 91
32874: PUSH
32875: LD_VAR 0 1
32879: PUSH
32880: LD_INT 12
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: PUSH
32893: EMPTY
32894: LIST
32895: PPUSH
32896: CALL_OW 69
32900: PUSH
32901: LD_INT 2
32903: GREATER
32904: AND
32905: IFFALSE 32928
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32907: LD_ADDR_VAR 0 18
32911: PUSH
32912: LD_INT 11
32914: PUSH
32915: LD_INT 30
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_VAR 0 12
32926: ARRAY
32927: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32928: LD_VAR 0 18
32932: NOT
32933: PUSH
32934: LD_INT 40
32936: PPUSH
32937: LD_VAR 0 16
32941: PPUSH
32942: CALL_OW 321
32946: PUSH
32947: LD_INT 2
32949: EQUAL
32950: AND
32951: PUSH
32952: LD_INT 7
32954: PUSH
32955: LD_VAR 0 5
32959: IN
32960: PUSH
32961: LD_INT 28
32963: PUSH
32964: LD_VAR 0 5
32968: IN
32969: OR
32970: PUSH
32971: LD_INT 45
32973: PUSH
32974: LD_VAR 0 5
32978: IN
32979: OR
32980: AND
32981: IFFALSE 33235
// begin hex := GetHexInfo ( x , y ) ;
32983: LD_ADDR_VAR 0 4
32987: PUSH
32988: LD_VAR 0 10
32992: PPUSH
32993: LD_VAR 0 11
32997: PPUSH
32998: CALL_OW 546
33002: ST_TO_ADDR
// if hex [ 1 ] then
33003: LD_VAR 0 4
33007: PUSH
33008: LD_INT 1
33010: ARRAY
33011: IFFALSE 33015
// exit ;
33013: GO 33418
// height := hex [ 2 ] ;
33015: LD_ADDR_VAR 0 15
33019: PUSH
33020: LD_VAR 0 4
33024: PUSH
33025: LD_INT 2
33027: ARRAY
33028: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33029: LD_ADDR_VAR 0 14
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: LD_INT 5
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// for i in tmp do
33052: LD_ADDR_VAR 0 8
33056: PUSH
33057: LD_VAR 0 14
33061: PUSH
33062: FOR_IN
33063: IFFALSE 33233
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33065: LD_ADDR_VAR 0 9
33069: PUSH
33070: LD_VAR 0 10
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_INT 5
33082: PPUSH
33083: CALL_OW 272
33087: PUSH
33088: LD_VAR 0 11
33092: PPUSH
33093: LD_VAR 0 8
33097: PPUSH
33098: LD_INT 5
33100: PPUSH
33101: CALL_OW 273
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33110: LD_VAR 0 9
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: PPUSH
33119: LD_VAR 0 9
33123: PUSH
33124: LD_INT 2
33126: ARRAY
33127: PPUSH
33128: CALL_OW 488
33132: IFFALSE 33231
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33134: LD_ADDR_VAR 0 4
33138: PUSH
33139: LD_VAR 0 9
33143: PUSH
33144: LD_INT 1
33146: ARRAY
33147: PPUSH
33148: LD_VAR 0 9
33152: PUSH
33153: LD_INT 2
33155: ARRAY
33156: PPUSH
33157: CALL_OW 546
33161: ST_TO_ADDR
// if hex [ 1 ] then
33162: LD_VAR 0 4
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: IFFALSE 33174
// continue ;
33172: GO 33062
// h := hex [ 2 ] ;
33174: LD_ADDR_VAR 0 13
33178: PUSH
33179: LD_VAR 0 4
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: ST_TO_ADDR
// if h + 7 < height then
33188: LD_VAR 0 13
33192: PUSH
33193: LD_INT 7
33195: PLUS
33196: PUSH
33197: LD_VAR 0 15
33201: LESS
33202: IFFALSE 33231
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33204: LD_ADDR_VAR 0 18
33208: PUSH
33209: LD_INT 7
33211: PUSH
33212: LD_INT 28
33214: PUSH
33215: LD_INT 45
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: PUSH
33223: LD_VAR 0 12
33227: ARRAY
33228: ST_TO_ADDR
// break ;
33229: GO 33233
// end ; end ; end ;
33231: GO 33062
33233: POP
33234: POP
// end ; if not weapon then
33235: LD_VAR 0 18
33239: NOT
33240: IFFALSE 33300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33242: LD_ADDR_VAR 0 5
33246: PUSH
33247: LD_VAR 0 5
33251: PUSH
33252: LD_INT 11
33254: PUSH
33255: LD_INT 30
33257: PUSH
33258: LD_INT 49
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: DIFF
33266: ST_TO_ADDR
// if not list then
33267: LD_VAR 0 5
33271: NOT
33272: IFFALSE 33276
// exit ;
33274: GO 33418
// weapon := list [ rand ( 1 , list ) ] ;
33276: LD_ADDR_VAR 0 18
33280: PUSH
33281: LD_VAR 0 5
33285: PUSH
33286: LD_INT 1
33288: PPUSH
33289: LD_VAR 0 5
33293: PPUSH
33294: CALL_OW 12
33298: ARRAY
33299: ST_TO_ADDR
// end ; if weapon then
33300: LD_VAR 0 18
33304: IFFALSE 33418
// begin tmp := CostOfWeapon ( weapon ) ;
33306: LD_ADDR_VAR 0 14
33310: PUSH
33311: LD_VAR 0 18
33315: PPUSH
33316: CALL_OW 451
33320: ST_TO_ADDR
// j := GetBase ( tower ) ;
33321: LD_ADDR_VAR 0 9
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 274
33335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33336: LD_VAR 0 9
33340: PPUSH
33341: LD_INT 1
33343: PPUSH
33344: CALL_OW 275
33348: PUSH
33349: LD_VAR 0 14
33353: PUSH
33354: LD_INT 1
33356: ARRAY
33357: GREATEREQUAL
33358: PUSH
33359: LD_VAR 0 9
33363: PPUSH
33364: LD_INT 2
33366: PPUSH
33367: CALL_OW 275
33371: PUSH
33372: LD_VAR 0 14
33376: PUSH
33377: LD_INT 2
33379: ARRAY
33380: GREATEREQUAL
33381: AND
33382: PUSH
33383: LD_VAR 0 9
33387: PPUSH
33388: LD_INT 3
33390: PPUSH
33391: CALL_OW 275
33395: PUSH
33396: LD_VAR 0 14
33400: PUSH
33401: LD_INT 3
33403: ARRAY
33404: GREATEREQUAL
33405: AND
33406: IFFALSE 33418
// result := weapon ;
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_VAR 0 18
33417: ST_TO_ADDR
// end ; end ;
33418: LD_VAR 0 3
33422: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33423: LD_INT 0
33425: PPUSH
33426: PPUSH
// result := true ;
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 1
33434: ST_TO_ADDR
// if array1 = array2 then
33435: LD_VAR 0 1
33439: PUSH
33440: LD_VAR 0 2
33444: EQUAL
33445: IFFALSE 33505
// begin for i = 1 to array1 do
33447: LD_ADDR_VAR 0 4
33451: PUSH
33452: DOUBLE
33453: LD_INT 1
33455: DEC
33456: ST_TO_ADDR
33457: LD_VAR 0 1
33461: PUSH
33462: FOR_TO
33463: IFFALSE 33501
// if array1 [ i ] <> array2 [ i ] then
33465: LD_VAR 0 1
33469: PUSH
33470: LD_VAR 0 4
33474: ARRAY
33475: PUSH
33476: LD_VAR 0 2
33480: PUSH
33481: LD_VAR 0 4
33485: ARRAY
33486: NONEQUAL
33487: IFFALSE 33499
// begin result := false ;
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_INT 0
33496: ST_TO_ADDR
// break ;
33497: GO 33501
// end ;
33499: GO 33462
33501: POP
33502: POP
// end else
33503: GO 33513
// result := false ;
33505: LD_ADDR_VAR 0 3
33509: PUSH
33510: LD_INT 0
33512: ST_TO_ADDR
// end ;
33513: LD_VAR 0 3
33517: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33518: LD_INT 0
33520: PPUSH
33521: PPUSH
// if not array1 or not array2 then
33522: LD_VAR 0 1
33526: NOT
33527: PUSH
33528: LD_VAR 0 2
33532: NOT
33533: OR
33534: IFFALSE 33538
// exit ;
33536: GO 33602
// result := true ;
33538: LD_ADDR_VAR 0 3
33542: PUSH
33543: LD_INT 1
33545: ST_TO_ADDR
// for i = 1 to array1 do
33546: LD_ADDR_VAR 0 4
33550: PUSH
33551: DOUBLE
33552: LD_INT 1
33554: DEC
33555: ST_TO_ADDR
33556: LD_VAR 0 1
33560: PUSH
33561: FOR_TO
33562: IFFALSE 33600
// if array1 [ i ] <> array2 [ i ] then
33564: LD_VAR 0 1
33568: PUSH
33569: LD_VAR 0 4
33573: ARRAY
33574: PUSH
33575: LD_VAR 0 2
33579: PUSH
33580: LD_VAR 0 4
33584: ARRAY
33585: NONEQUAL
33586: IFFALSE 33598
// begin result := false ;
33588: LD_ADDR_VAR 0 3
33592: PUSH
33593: LD_INT 0
33595: ST_TO_ADDR
// break ;
33596: GO 33600
// end ;
33598: GO 33561
33600: POP
33601: POP
// end ;
33602: LD_VAR 0 3
33606: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33607: LD_INT 0
33609: PPUSH
33610: PPUSH
33611: PPUSH
// pom := GetBase ( fac ) ;
33612: LD_ADDR_VAR 0 5
33616: PUSH
33617: LD_VAR 0 1
33621: PPUSH
33622: CALL_OW 274
33626: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33627: LD_ADDR_VAR 0 4
33631: PUSH
33632: LD_VAR 0 2
33636: PUSH
33637: LD_INT 1
33639: ARRAY
33640: PPUSH
33641: LD_VAR 0 2
33645: PUSH
33646: LD_INT 2
33648: ARRAY
33649: PPUSH
33650: LD_VAR 0 2
33654: PUSH
33655: LD_INT 3
33657: ARRAY
33658: PPUSH
33659: LD_VAR 0 2
33663: PUSH
33664: LD_INT 4
33666: ARRAY
33667: PPUSH
33668: CALL_OW 449
33672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33673: LD_ADDR_VAR 0 3
33677: PUSH
33678: LD_VAR 0 5
33682: PPUSH
33683: LD_INT 1
33685: PPUSH
33686: CALL_OW 275
33690: PUSH
33691: LD_VAR 0 4
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: GREATEREQUAL
33700: PUSH
33701: LD_VAR 0 5
33705: PPUSH
33706: LD_INT 2
33708: PPUSH
33709: CALL_OW 275
33713: PUSH
33714: LD_VAR 0 4
33718: PUSH
33719: LD_INT 2
33721: ARRAY
33722: GREATEREQUAL
33723: AND
33724: PUSH
33725: LD_VAR 0 5
33729: PPUSH
33730: LD_INT 3
33732: PPUSH
33733: CALL_OW 275
33737: PUSH
33738: LD_VAR 0 4
33742: PUSH
33743: LD_INT 3
33745: ARRAY
33746: GREATEREQUAL
33747: AND
33748: ST_TO_ADDR
// end ;
33749: LD_VAR 0 3
33753: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33754: LD_INT 0
33756: PPUSH
33757: PPUSH
33758: PPUSH
33759: PPUSH
// pom := GetBase ( building ) ;
33760: LD_ADDR_VAR 0 3
33764: PUSH
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 274
33774: ST_TO_ADDR
// if not pom then
33775: LD_VAR 0 3
33779: NOT
33780: IFFALSE 33784
// exit ;
33782: GO 33954
// btype := GetBType ( building ) ;
33784: LD_ADDR_VAR 0 5
33788: PUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 266
33798: ST_TO_ADDR
// if btype = b_armoury then
33799: LD_VAR 0 5
33803: PUSH
33804: LD_INT 4
33806: EQUAL
33807: IFFALSE 33817
// btype := b_barracks ;
33809: LD_ADDR_VAR 0 5
33813: PUSH
33814: LD_INT 5
33816: ST_TO_ADDR
// if btype = b_depot then
33817: LD_VAR 0 5
33821: PUSH
33822: LD_INT 0
33824: EQUAL
33825: IFFALSE 33835
// btype := b_warehouse ;
33827: LD_ADDR_VAR 0 5
33831: PUSH
33832: LD_INT 1
33834: ST_TO_ADDR
// if btype = b_workshop then
33835: LD_VAR 0 5
33839: PUSH
33840: LD_INT 2
33842: EQUAL
33843: IFFALSE 33853
// btype := b_factory ;
33845: LD_ADDR_VAR 0 5
33849: PUSH
33850: LD_INT 3
33852: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33853: LD_ADDR_VAR 0 4
33857: PUSH
33858: LD_VAR 0 5
33862: PPUSH
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 248
33872: PPUSH
33873: CALL_OW 450
33877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33878: LD_ADDR_VAR 0 2
33882: PUSH
33883: LD_VAR 0 3
33887: PPUSH
33888: LD_INT 1
33890: PPUSH
33891: CALL_OW 275
33895: PUSH
33896: LD_VAR 0 4
33900: PUSH
33901: LD_INT 1
33903: ARRAY
33904: GREATEREQUAL
33905: PUSH
33906: LD_VAR 0 3
33910: PPUSH
33911: LD_INT 2
33913: PPUSH
33914: CALL_OW 275
33918: PUSH
33919: LD_VAR 0 4
33923: PUSH
33924: LD_INT 2
33926: ARRAY
33927: GREATEREQUAL
33928: AND
33929: PUSH
33930: LD_VAR 0 3
33934: PPUSH
33935: LD_INT 3
33937: PPUSH
33938: CALL_OW 275
33942: PUSH
33943: LD_VAR 0 4
33947: PUSH
33948: LD_INT 3
33950: ARRAY
33951: GREATEREQUAL
33952: AND
33953: ST_TO_ADDR
// end ;
33954: LD_VAR 0 2
33958: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
33963: PPUSH
// pom := GetBase ( building ) ;
33964: LD_ADDR_VAR 0 4
33968: PUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL_OW 274
33978: ST_TO_ADDR
// if not pom then
33979: LD_VAR 0 4
33983: NOT
33984: IFFALSE 33988
// exit ;
33986: GO 34089
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33988: LD_ADDR_VAR 0 5
33992: PUSH
33993: LD_VAR 0 2
33997: PPUSH
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 248
34007: PPUSH
34008: CALL_OW 450
34012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_VAR 0 4
34022: PPUSH
34023: LD_INT 1
34025: PPUSH
34026: CALL_OW 275
34030: PUSH
34031: LD_VAR 0 5
34035: PUSH
34036: LD_INT 1
34038: ARRAY
34039: GREATEREQUAL
34040: PUSH
34041: LD_VAR 0 4
34045: PPUSH
34046: LD_INT 2
34048: PPUSH
34049: CALL_OW 275
34053: PUSH
34054: LD_VAR 0 5
34058: PUSH
34059: LD_INT 2
34061: ARRAY
34062: GREATEREQUAL
34063: AND
34064: PUSH
34065: LD_VAR 0 4
34069: PPUSH
34070: LD_INT 3
34072: PPUSH
34073: CALL_OW 275
34077: PUSH
34078: LD_VAR 0 5
34082: PUSH
34083: LD_INT 3
34085: ARRAY
34086: GREATEREQUAL
34087: AND
34088: ST_TO_ADDR
// end ;
34089: LD_VAR 0 3
34093: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34094: LD_INT 0
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
// result := false ;
34107: LD_ADDR_VAR 0 8
34111: PUSH
34112: LD_INT 0
34114: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34115: LD_VAR 0 5
34119: NOT
34120: PUSH
34121: LD_VAR 0 1
34125: NOT
34126: OR
34127: PUSH
34128: LD_VAR 0 2
34132: NOT
34133: OR
34134: PUSH
34135: LD_VAR 0 3
34139: NOT
34140: OR
34141: IFFALSE 34145
// exit ;
34143: GO 34959
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34145: LD_ADDR_VAR 0 14
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: LD_VAR 0 2
34159: PPUSH
34160: LD_VAR 0 3
34164: PPUSH
34165: LD_VAR 0 4
34169: PPUSH
34170: LD_VAR 0 5
34174: PUSH
34175: LD_INT 1
34177: ARRAY
34178: PPUSH
34179: CALL_OW 248
34183: PPUSH
34184: LD_INT 0
34186: PPUSH
34187: CALL 36192 0 6
34191: ST_TO_ADDR
// if not hexes then
34192: LD_VAR 0 14
34196: NOT
34197: IFFALSE 34201
// exit ;
34199: GO 34959
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34201: LD_ADDR_VAR 0 17
34205: PUSH
34206: LD_VAR 0 5
34210: PPUSH
34211: LD_INT 22
34213: PUSH
34214: LD_VAR 0 13
34218: PPUSH
34219: CALL_OW 255
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 30
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 30
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PPUSH
34260: CALL_OW 72
34264: ST_TO_ADDR
// for i = 1 to hexes do
34265: LD_ADDR_VAR 0 9
34269: PUSH
34270: DOUBLE
34271: LD_INT 1
34273: DEC
34274: ST_TO_ADDR
34275: LD_VAR 0 14
34279: PUSH
34280: FOR_TO
34281: IFFALSE 34957
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34283: LD_ADDR_VAR 0 13
34287: PUSH
34288: LD_VAR 0 14
34292: PUSH
34293: LD_VAR 0 9
34297: ARRAY
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: PPUSH
34303: LD_VAR 0 14
34307: PUSH
34308: LD_VAR 0 9
34312: ARRAY
34313: PUSH
34314: LD_INT 2
34316: ARRAY
34317: PPUSH
34318: CALL_OW 428
34322: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34323: LD_VAR 0 14
34327: PUSH
34328: LD_VAR 0 9
34332: ARRAY
34333: PUSH
34334: LD_INT 1
34336: ARRAY
34337: PPUSH
34338: LD_VAR 0 14
34342: PUSH
34343: LD_VAR 0 9
34347: ARRAY
34348: PUSH
34349: LD_INT 2
34351: ARRAY
34352: PPUSH
34353: CALL_OW 351
34357: PUSH
34358: LD_VAR 0 14
34362: PUSH
34363: LD_VAR 0 9
34367: ARRAY
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PPUSH
34373: LD_VAR 0 14
34377: PUSH
34378: LD_VAR 0 9
34382: ARRAY
34383: PUSH
34384: LD_INT 2
34386: ARRAY
34387: PPUSH
34388: CALL_OW 488
34392: NOT
34393: OR
34394: PUSH
34395: LD_VAR 0 13
34399: PPUSH
34400: CALL_OW 247
34404: PUSH
34405: LD_INT 3
34407: EQUAL
34408: OR
34409: IFFALSE 34415
// exit ;
34411: POP
34412: POP
34413: GO 34959
// if not tmp then
34415: LD_VAR 0 13
34419: NOT
34420: IFFALSE 34424
// continue ;
34422: GO 34280
// result := true ;
34424: LD_ADDR_VAR 0 8
34428: PUSH
34429: LD_INT 1
34431: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34432: LD_VAR 0 6
34436: PUSH
34437: LD_VAR 0 13
34441: PPUSH
34442: CALL_OW 247
34446: PUSH
34447: LD_INT 2
34449: EQUAL
34450: AND
34451: PUSH
34452: LD_VAR 0 13
34456: PPUSH
34457: CALL_OW 263
34461: PUSH
34462: LD_INT 1
34464: EQUAL
34465: AND
34466: IFFALSE 34630
// begin if IsDrivenBy ( tmp ) then
34468: LD_VAR 0 13
34472: PPUSH
34473: CALL_OW 311
34477: IFFALSE 34481
// continue ;
34479: GO 34280
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34481: LD_VAR 0 6
34485: PPUSH
34486: LD_INT 3
34488: PUSH
34489: LD_INT 60
34491: PUSH
34492: EMPTY
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 55
34504: PUSH
34505: EMPTY
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PPUSH
34516: CALL_OW 72
34520: IFFALSE 34628
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34522: LD_ADDR_VAR 0 18
34526: PUSH
34527: LD_VAR 0 6
34531: PPUSH
34532: LD_INT 3
34534: PUSH
34535: LD_INT 60
34537: PUSH
34538: EMPTY
34539: LIST
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: LD_INT 55
34550: PUSH
34551: EMPTY
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PPUSH
34562: CALL_OW 72
34566: PUSH
34567: LD_INT 1
34569: ARRAY
34570: ST_TO_ADDR
// if IsInUnit ( driver ) then
34571: LD_VAR 0 18
34575: PPUSH
34576: CALL_OW 310
34580: IFFALSE 34591
// ComExit ( driver ) ;
34582: LD_VAR 0 18
34586: PPUSH
34587: CALL 59972 0 1
// AddComEnterUnit ( driver , tmp ) ;
34591: LD_VAR 0 18
34595: PPUSH
34596: LD_VAR 0 13
34600: PPUSH
34601: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34605: LD_VAR 0 18
34609: PPUSH
34610: LD_VAR 0 7
34614: PPUSH
34615: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34619: LD_VAR 0 18
34623: PPUSH
34624: CALL_OW 181
// end ; continue ;
34628: GO 34280
// end ; if not cleaners or not tmp in cleaners then
34630: LD_VAR 0 6
34634: NOT
34635: PUSH
34636: LD_VAR 0 13
34640: PUSH
34641: LD_VAR 0 6
34645: IN
34646: NOT
34647: OR
34648: IFFALSE 34955
// begin if dep then
34650: LD_VAR 0 17
34654: IFFALSE 34790
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34656: LD_ADDR_VAR 0 16
34660: PUSH
34661: LD_VAR 0 17
34665: PUSH
34666: LD_INT 1
34668: ARRAY
34669: PPUSH
34670: CALL_OW 250
34674: PPUSH
34675: LD_VAR 0 17
34679: PUSH
34680: LD_INT 1
34682: ARRAY
34683: PPUSH
34684: CALL_OW 254
34688: PPUSH
34689: LD_INT 5
34691: PPUSH
34692: CALL_OW 272
34696: PUSH
34697: LD_VAR 0 17
34701: PUSH
34702: LD_INT 1
34704: ARRAY
34705: PPUSH
34706: CALL_OW 251
34710: PPUSH
34711: LD_VAR 0 17
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: PPUSH
34720: CALL_OW 254
34724: PPUSH
34725: LD_INT 5
34727: PPUSH
34728: CALL_OW 273
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34737: LD_VAR 0 16
34741: PUSH
34742: LD_INT 1
34744: ARRAY
34745: PPUSH
34746: LD_VAR 0 16
34750: PUSH
34751: LD_INT 2
34753: ARRAY
34754: PPUSH
34755: CALL_OW 488
34759: IFFALSE 34790
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34761: LD_VAR 0 13
34765: PPUSH
34766: LD_VAR 0 16
34770: PUSH
34771: LD_INT 1
34773: ARRAY
34774: PPUSH
34775: LD_VAR 0 16
34779: PUSH
34780: LD_INT 2
34782: ARRAY
34783: PPUSH
34784: CALL_OW 111
// continue ;
34788: GO 34280
// end ; end ; r := GetDir ( tmp ) ;
34790: LD_ADDR_VAR 0 15
34794: PUSH
34795: LD_VAR 0 13
34799: PPUSH
34800: CALL_OW 254
34804: ST_TO_ADDR
// if r = 5 then
34805: LD_VAR 0 15
34809: PUSH
34810: LD_INT 5
34812: EQUAL
34813: IFFALSE 34823
// r := 0 ;
34815: LD_ADDR_VAR 0 15
34819: PUSH
34820: LD_INT 0
34822: ST_TO_ADDR
// for j = r to 5 do
34823: LD_ADDR_VAR 0 10
34827: PUSH
34828: DOUBLE
34829: LD_VAR 0 15
34833: DEC
34834: ST_TO_ADDR
34835: LD_INT 5
34837: PUSH
34838: FOR_TO
34839: IFFALSE 34953
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34841: LD_ADDR_VAR 0 11
34845: PUSH
34846: LD_VAR 0 13
34850: PPUSH
34851: CALL_OW 250
34855: PPUSH
34856: LD_VAR 0 10
34860: PPUSH
34861: LD_INT 2
34863: PPUSH
34864: CALL_OW 272
34868: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34869: LD_ADDR_VAR 0 12
34873: PUSH
34874: LD_VAR 0 13
34878: PPUSH
34879: CALL_OW 251
34883: PPUSH
34884: LD_VAR 0 10
34888: PPUSH
34889: LD_INT 2
34891: PPUSH
34892: CALL_OW 273
34896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34897: LD_VAR 0 11
34901: PPUSH
34902: LD_VAR 0 12
34906: PPUSH
34907: CALL_OW 488
34911: PUSH
34912: LD_VAR 0 11
34916: PPUSH
34917: LD_VAR 0 12
34921: PPUSH
34922: CALL_OW 428
34926: NOT
34927: AND
34928: IFFALSE 34951
// begin ComMoveXY ( tmp , _x , _y ) ;
34930: LD_VAR 0 13
34934: PPUSH
34935: LD_VAR 0 11
34939: PPUSH
34940: LD_VAR 0 12
34944: PPUSH
34945: CALL_OW 111
// break ;
34949: GO 34953
// end ; end ;
34951: GO 34838
34953: POP
34954: POP
// end ; end ;
34955: GO 34280
34957: POP
34958: POP
// end ;
34959: LD_VAR 0 8
34963: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34964: LD_INT 0
34966: PPUSH
// result := true ;
34967: LD_ADDR_VAR 0 3
34971: PUSH
34972: LD_INT 1
34974: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34975: LD_VAR 0 2
34979: PUSH
34980: LD_INT 24
34982: DOUBLE
34983: EQUAL
34984: IFTRUE 34994
34986: LD_INT 33
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 34994
34992: GO 35019
34994: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_INT 32
35002: PPUSH
35003: LD_VAR 0 1
35007: PPUSH
35008: CALL_OW 321
35012: PUSH
35013: LD_INT 2
35015: EQUAL
35016: ST_TO_ADDR
35017: GO 35335
35019: LD_INT 20
35021: DOUBLE
35022: EQUAL
35023: IFTRUE 35027
35025: GO 35052
35027: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_INT 6
35035: PPUSH
35036: LD_VAR 0 1
35040: PPUSH
35041: CALL_OW 321
35045: PUSH
35046: LD_INT 2
35048: EQUAL
35049: ST_TO_ADDR
35050: GO 35335
35052: LD_INT 22
35054: DOUBLE
35055: EQUAL
35056: IFTRUE 35066
35058: LD_INT 36
35060: DOUBLE
35061: EQUAL
35062: IFTRUE 35066
35064: GO 35091
35066: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_INT 15
35074: PPUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: CALL_OW 321
35084: PUSH
35085: LD_INT 2
35087: EQUAL
35088: ST_TO_ADDR
35089: GO 35335
35091: LD_INT 30
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35124
35099: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35100: LD_ADDR_VAR 0 3
35104: PUSH
35105: LD_INT 20
35107: PPUSH
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL_OW 321
35117: PUSH
35118: LD_INT 2
35120: EQUAL
35121: ST_TO_ADDR
35122: GO 35335
35124: LD_INT 28
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35138
35130: LD_INT 21
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35163
35138: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_INT 21
35146: PPUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 321
35156: PUSH
35157: LD_INT 2
35159: EQUAL
35160: ST_TO_ADDR
35161: GO 35335
35163: LD_INT 16
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35196
35171: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_INT 84
35179: PPUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 321
35189: PUSH
35190: LD_INT 2
35192: EQUAL
35193: ST_TO_ADDR
35194: GO 35335
35196: LD_INT 19
35198: DOUBLE
35199: EQUAL
35200: IFTRUE 35210
35202: LD_INT 23
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35210
35208: GO 35235
35210: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35211: LD_ADDR_VAR 0 3
35215: PUSH
35216: LD_INT 83
35218: PPUSH
35219: LD_VAR 0 1
35223: PPUSH
35224: CALL_OW 321
35228: PUSH
35229: LD_INT 2
35231: EQUAL
35232: ST_TO_ADDR
35233: GO 35335
35235: LD_INT 17
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 35268
35243: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_INT 39
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL_OW 321
35261: PUSH
35262: LD_INT 2
35264: EQUAL
35265: ST_TO_ADDR
35266: GO 35335
35268: LD_INT 18
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35301
35276: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 40
35284: PPUSH
35285: LD_VAR 0 1
35289: PPUSH
35290: CALL_OW 321
35294: PUSH
35295: LD_INT 2
35297: EQUAL
35298: ST_TO_ADDR
35299: GO 35335
35301: LD_INT 27
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35334
35309: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_INT 35
35317: PPUSH
35318: LD_VAR 0 1
35322: PPUSH
35323: CALL_OW 321
35327: PUSH
35328: LD_INT 2
35330: EQUAL
35331: ST_TO_ADDR
35332: GO 35335
35334: POP
// end ;
35335: LD_VAR 0 3
35339: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35340: LD_INT 0
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
// result := false ;
35353: LD_ADDR_VAR 0 6
35357: PUSH
35358: LD_INT 0
35360: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35361: LD_VAR 0 1
35365: NOT
35366: PUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 266
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: IN
35387: NOT
35388: OR
35389: PUSH
35390: LD_VAR 0 2
35394: NOT
35395: OR
35396: PUSH
35397: LD_VAR 0 5
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 3
35413: PUSH
35414: LD_INT 4
35416: PUSH
35417: LD_INT 5
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: IN
35428: NOT
35429: OR
35430: PUSH
35431: LD_VAR 0 3
35435: PPUSH
35436: LD_VAR 0 4
35440: PPUSH
35441: CALL_OW 488
35445: NOT
35446: OR
35447: IFFALSE 35451
// exit ;
35449: GO 36187
// side := GetSide ( depot ) ;
35451: LD_ADDR_VAR 0 9
35455: PUSH
35456: LD_VAR 0 1
35460: PPUSH
35461: CALL_OW 255
35465: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35466: LD_VAR 0 9
35470: PPUSH
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL 34964 0 2
35480: NOT
35481: IFFALSE 35485
// exit ;
35483: GO 36187
// pom := GetBase ( depot ) ;
35485: LD_ADDR_VAR 0 10
35489: PUSH
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL_OW 274
35499: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35500: LD_ADDR_VAR 0 11
35504: PUSH
35505: LD_VAR 0 2
35509: PPUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: CALL_OW 248
35519: PPUSH
35520: CALL_OW 450
35524: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35525: LD_VAR 0 10
35529: PPUSH
35530: LD_INT 1
35532: PPUSH
35533: CALL_OW 275
35537: PUSH
35538: LD_VAR 0 11
35542: PUSH
35543: LD_INT 1
35545: ARRAY
35546: GREATEREQUAL
35547: PUSH
35548: LD_VAR 0 10
35552: PPUSH
35553: LD_INT 2
35555: PPUSH
35556: CALL_OW 275
35560: PUSH
35561: LD_VAR 0 11
35565: PUSH
35566: LD_INT 2
35568: ARRAY
35569: GREATEREQUAL
35570: AND
35571: PUSH
35572: LD_VAR 0 10
35576: PPUSH
35577: LD_INT 3
35579: PPUSH
35580: CALL_OW 275
35584: PUSH
35585: LD_VAR 0 11
35589: PUSH
35590: LD_INT 3
35592: ARRAY
35593: GREATEREQUAL
35594: AND
35595: NOT
35596: IFFALSE 35600
// exit ;
35598: GO 36187
// if GetBType ( depot ) = b_depot then
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 266
35609: PUSH
35610: LD_INT 0
35612: EQUAL
35613: IFFALSE 35625
// dist := 28 else
35615: LD_ADDR_VAR 0 14
35619: PUSH
35620: LD_INT 28
35622: ST_TO_ADDR
35623: GO 35633
// dist := 36 ;
35625: LD_ADDR_VAR 0 14
35629: PUSH
35630: LD_INT 36
35632: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35633: LD_VAR 0 1
35637: PPUSH
35638: LD_VAR 0 3
35642: PPUSH
35643: LD_VAR 0 4
35647: PPUSH
35648: CALL_OW 297
35652: PUSH
35653: LD_VAR 0 14
35657: GREATER
35658: IFFALSE 35662
// exit ;
35660: GO 36187
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35662: LD_ADDR_VAR 0 12
35666: PUSH
35667: LD_VAR 0 2
35671: PPUSH
35672: LD_VAR 0 3
35676: PPUSH
35677: LD_VAR 0 4
35681: PPUSH
35682: LD_VAR 0 5
35686: PPUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 248
35696: PPUSH
35697: LD_INT 0
35699: PPUSH
35700: CALL 36192 0 6
35704: ST_TO_ADDR
// if not hexes then
35705: LD_VAR 0 12
35709: NOT
35710: IFFALSE 35714
// exit ;
35712: GO 36187
// hex := GetHexInfo ( x , y ) ;
35714: LD_ADDR_VAR 0 15
35718: PUSH
35719: LD_VAR 0 3
35723: PPUSH
35724: LD_VAR 0 4
35728: PPUSH
35729: CALL_OW 546
35733: ST_TO_ADDR
// if hex [ 1 ] then
35734: LD_VAR 0 15
35738: PUSH
35739: LD_INT 1
35741: ARRAY
35742: IFFALSE 35746
// exit ;
35744: GO 36187
// height := hex [ 2 ] ;
35746: LD_ADDR_VAR 0 13
35750: PUSH
35751: LD_VAR 0 15
35755: PUSH
35756: LD_INT 2
35758: ARRAY
35759: ST_TO_ADDR
// for i = 1 to hexes do
35760: LD_ADDR_VAR 0 7
35764: PUSH
35765: DOUBLE
35766: LD_INT 1
35768: DEC
35769: ST_TO_ADDR
35770: LD_VAR 0 12
35774: PUSH
35775: FOR_TO
35776: IFFALSE 36106
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35778: LD_VAR 0 12
35782: PUSH
35783: LD_VAR 0 7
35787: ARRAY
35788: PUSH
35789: LD_INT 1
35791: ARRAY
35792: PPUSH
35793: LD_VAR 0 12
35797: PUSH
35798: LD_VAR 0 7
35802: ARRAY
35803: PUSH
35804: LD_INT 2
35806: ARRAY
35807: PPUSH
35808: CALL_OW 488
35812: NOT
35813: PUSH
35814: LD_VAR 0 12
35818: PUSH
35819: LD_VAR 0 7
35823: ARRAY
35824: PUSH
35825: LD_INT 1
35827: ARRAY
35828: PPUSH
35829: LD_VAR 0 12
35833: PUSH
35834: LD_VAR 0 7
35838: ARRAY
35839: PUSH
35840: LD_INT 2
35842: ARRAY
35843: PPUSH
35844: CALL_OW 428
35848: PUSH
35849: LD_INT 0
35851: GREATER
35852: OR
35853: PUSH
35854: LD_VAR 0 12
35858: PUSH
35859: LD_VAR 0 7
35863: ARRAY
35864: PUSH
35865: LD_INT 1
35867: ARRAY
35868: PPUSH
35869: LD_VAR 0 12
35873: PUSH
35874: LD_VAR 0 7
35878: ARRAY
35879: PUSH
35880: LD_INT 2
35882: ARRAY
35883: PPUSH
35884: CALL_OW 351
35888: OR
35889: IFFALSE 35895
// exit ;
35891: POP
35892: POP
35893: GO 36187
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35895: LD_ADDR_VAR 0 8
35899: PUSH
35900: LD_VAR 0 12
35904: PUSH
35905: LD_VAR 0 7
35909: ARRAY
35910: PUSH
35911: LD_INT 1
35913: ARRAY
35914: PPUSH
35915: LD_VAR 0 12
35919: PUSH
35920: LD_VAR 0 7
35924: ARRAY
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: PPUSH
35930: CALL_OW 546
35934: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35935: LD_VAR 0 8
35939: PUSH
35940: LD_INT 1
35942: ARRAY
35943: PUSH
35944: LD_VAR 0 8
35948: PUSH
35949: LD_INT 2
35951: ARRAY
35952: PUSH
35953: LD_VAR 0 13
35957: PUSH
35958: LD_INT 2
35960: PLUS
35961: GREATER
35962: OR
35963: PUSH
35964: LD_VAR 0 8
35968: PUSH
35969: LD_INT 2
35971: ARRAY
35972: PUSH
35973: LD_VAR 0 13
35977: PUSH
35978: LD_INT 2
35980: MINUS
35981: LESS
35982: OR
35983: PUSH
35984: LD_VAR 0 8
35988: PUSH
35989: LD_INT 3
35991: ARRAY
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 8
35998: PUSH
35999: LD_INT 9
36001: PUSH
36002: LD_INT 10
36004: PUSH
36005: LD_INT 11
36007: PUSH
36008: LD_INT 12
36010: PUSH
36011: LD_INT 13
36013: PUSH
36014: LD_INT 16
36016: PUSH
36017: LD_INT 17
36019: PUSH
36020: LD_INT 18
36022: PUSH
36023: LD_INT 19
36025: PUSH
36026: LD_INT 20
36028: PUSH
36029: LD_INT 21
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: IN
36047: NOT
36048: OR
36049: PUSH
36050: LD_VAR 0 8
36054: PUSH
36055: LD_INT 5
36057: ARRAY
36058: NOT
36059: OR
36060: PUSH
36061: LD_VAR 0 8
36065: PUSH
36066: LD_INT 6
36068: ARRAY
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 7
36078: PUSH
36079: LD_INT 9
36081: PUSH
36082: LD_INT 10
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: IN
36096: NOT
36097: OR
36098: IFFALSE 36104
// exit ;
36100: POP
36101: POP
36102: GO 36187
// end ;
36104: GO 35775
36106: POP
36107: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36108: LD_VAR 0 9
36112: PPUSH
36113: LD_VAR 0 3
36117: PPUSH
36118: LD_VAR 0 4
36122: PPUSH
36123: LD_INT 20
36125: PPUSH
36126: CALL 28139 0 4
36130: PUSH
36131: LD_INT 4
36133: ARRAY
36134: IFFALSE 36138
// exit ;
36136: GO 36187
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36138: LD_VAR 0 2
36142: PUSH
36143: LD_INT 29
36145: PUSH
36146: LD_INT 30
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: IN
36153: PUSH
36154: LD_VAR 0 3
36158: PPUSH
36159: LD_VAR 0 4
36163: PPUSH
36164: LD_VAR 0 9
36168: PPUSH
36169: CALL_OW 440
36173: NOT
36174: AND
36175: IFFALSE 36179
// exit ;
36177: GO 36187
// result := true ;
36179: LD_ADDR_VAR 0 6
36183: PUSH
36184: LD_INT 1
36186: ST_TO_ADDR
// end ;
36187: LD_VAR 0 6
36191: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36192: LD_INT 0
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
36221: PPUSH
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
36228: PPUSH
36229: PPUSH
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
// result = [ ] ;
36252: LD_ADDR_VAR 0 7
36256: PUSH
36257: EMPTY
36258: ST_TO_ADDR
// temp_list = [ ] ;
36259: LD_ADDR_VAR 0 9
36263: PUSH
36264: EMPTY
36265: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36266: LD_VAR 0 4
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: LD_INT 3
36282: PUSH
36283: LD_INT 4
36285: PUSH
36286: LD_INT 5
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: IN
36297: NOT
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: IN
36314: PUSH
36315: LD_VAR 0 5
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: IN
36334: NOT
36335: AND
36336: OR
36337: IFFALSE 36341
// exit ;
36339: GO 54732
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36341: LD_VAR 0 1
36345: PUSH
36346: LD_INT 6
36348: PUSH
36349: LD_INT 7
36351: PUSH
36352: LD_INT 8
36354: PUSH
36355: LD_INT 13
36357: PUSH
36358: LD_INT 12
36360: PUSH
36361: LD_INT 15
36363: PUSH
36364: LD_INT 11
36366: PUSH
36367: LD_INT 14
36369: PUSH
36370: LD_INT 10
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: IN
36384: IFFALSE 36394
// btype = b_lab ;
36386: LD_ADDR_VAR 0 1
36390: PUSH
36391: LD_INT 6
36393: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36394: LD_VAR 0 6
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: IN
36413: NOT
36414: PUSH
36415: LD_VAR 0 1
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: LD_INT 3
36431: PUSH
36432: LD_INT 6
36434: PUSH
36435: LD_INT 36
36437: PUSH
36438: LD_INT 4
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: LD_INT 31
36446: PUSH
36447: LD_INT 32
36449: PUSH
36450: LD_INT 33
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: IN
36466: NOT
36467: PUSH
36468: LD_VAR 0 6
36472: PUSH
36473: LD_INT 1
36475: EQUAL
36476: AND
36477: OR
36478: PUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 3
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: IN
36494: NOT
36495: PUSH
36496: LD_VAR 0 6
36500: PUSH
36501: LD_INT 2
36503: EQUAL
36504: AND
36505: OR
36506: IFFALSE 36516
// mode = 0 ;
36508: LD_ADDR_VAR 0 6
36512: PUSH
36513: LD_INT 0
36515: ST_TO_ADDR
// case mode of 0 :
36516: LD_VAR 0 6
36520: PUSH
36521: LD_INT 0
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 47982
36529: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36530: LD_ADDR_VAR 0 11
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36723: LD_ADDR_VAR 0 12
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 1
36781: NEG
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: NEG
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: NEG
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36919: LD_ADDR_VAR 0 13
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: LD_INT 3
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 3
37090: NEG
37091: PUSH
37092: LD_INT 3
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37118: LD_ADDR_VAR 0 14
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 3
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 3
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37314: LD_ADDR_VAR 0 15
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: NEG
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37507: LD_ADDR_VAR 0 16
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 2
37630: NEG
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: LD_INT 3
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37700: LD_ADDR_VAR 0 17
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37930: LD_ADDR_VAR 0 18
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 2
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38160: LD_ADDR_VAR 0 19
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38390: LD_ADDR_VAR 0 20
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38620: LD_ADDR_VAR 0 21
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38850: LD_ADDR_VAR 0 22
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39080: LD_ADDR_VAR 0 23
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: NEG
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: LD_INT 3
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 3
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39360: LD_ADDR_VAR 0 24
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 2
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 2
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 3
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39636: LD_ADDR_VAR 0 25
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 2
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 3
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39910: LD_ADDR_VAR 0 26
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 3
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40186: LD_ADDR_VAR 0 27
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 3
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40466: LD_ADDR_VAR 0 28
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 3
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40748: LD_ADDR_VAR 0 29
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 3
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 3
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: NEG
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41027: LD_ADDR_VAR 0 30
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 3
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 3
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41305: LD_ADDR_VAR 0 31
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41583: LD_ADDR_VAR 0 32
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 3
41826: NEG
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41861: LD_ADDR_VAR 0 33
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 3
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 3
42105: NEG
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42140: LD_ADDR_VAR 0 34
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 3
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 3
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42420: LD_ADDR_VAR 0 35
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42532: LD_ADDR_VAR 0 36
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42644: LD_ADDR_VAR 0 37
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42756: LD_ADDR_VAR 0 38
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42868: LD_ADDR_VAR 0 39
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42980: LD_ADDR_VAR 0 40
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43092: LD_ADDR_VAR 0 41
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: LD_INT 3
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: NEG
43402: PUSH
43403: LD_INT 3
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43442: LD_ADDR_VAR 0 42
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: LD_INT 3
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: LD_INT 3
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 3
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: NEG
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 3
43751: NEG
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43792: LD_ADDR_VAR 0 43
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 3
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 3
44088: NEG
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 3
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44140: LD_ADDR_VAR 0 44
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 3
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 3
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 3
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 3
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 3
44449: NEG
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44490: LD_ADDR_VAR 0 45
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 3
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 3
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 3
44799: NEG
44800: PUSH
44801: LD_INT 3
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44840: LD_ADDR_VAR 0 46
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 3
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45188: LD_ADDR_VAR 0 47
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45339: LD_ADDR_VAR 0 48
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45486: LD_ADDR_VAR 0 49
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45630: LD_ADDR_VAR 0 50
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45774: LD_ADDR_VAR 0 51
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45921: LD_ADDR_VAR 0 52
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46072: LD_ADDR_VAR 0 53
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46302: LD_ADDR_VAR 0 54
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 55
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46762: LD_ADDR_VAR 0 56
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46992: LD_ADDR_VAR 0 57
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47222: LD_ADDR_VAR 0 58
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47452: LD_ADDR_VAR 0 59
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47540: LD_ADDR_VAR 0 60
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47628: LD_ADDR_VAR 0 61
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47716: LD_ADDR_VAR 0 62
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47804: LD_ADDR_VAR 0 63
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47892: LD_ADDR_VAR 0 64
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// end ; 1 :
47980: GO 53877
47982: LD_INT 1
47984: DOUBLE
47985: EQUAL
47986: IFTRUE 47990
47988: GO 50613
47990: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47991: LD_ADDR_VAR 0 11
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48035: LD_ADDR_VAR 0 12
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48076: LD_ADDR_VAR 0 13
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48116: LD_ADDR_VAR 0 14
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48157: LD_ADDR_VAR 0 15
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48201: LD_ADDR_VAR 0 16
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48247: LD_ADDR_VAR 0 17
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48291: LD_ADDR_VAR 0 18
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 3
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48332: LD_ADDR_VAR 0 19
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48372: LD_ADDR_VAR 0 20
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 3
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48413: LD_ADDR_VAR 0 21
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48457: LD_ADDR_VAR 0 22
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: NEG
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48503: LD_ADDR_VAR 0 23
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 4
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48547: LD_ADDR_VAR 0 24
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 4
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48588: LD_ADDR_VAR 0 25
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 4
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48628: LD_ADDR_VAR 0 26
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 4
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48669: LD_ADDR_VAR 0 27
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 4
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48713: LD_ADDR_VAR 0 28
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: LD_INT 4
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 4
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48759: LD_ADDR_VAR 0 29
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 4
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 4
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 3
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 5
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 5
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 4
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 6
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 6
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 5
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48914: LD_ADDR_VAR 0 30
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 4
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 4
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 5
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 5
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 5
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 6
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 6
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49057: LD_ADDR_VAR 0 31
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 3
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 4
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 4
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: LD_INT 4
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 5
49124: PUSH
49125: LD_INT 4
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 5
49134: PUSH
49135: LD_INT 5
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 4
49144: PUSH
49145: LD_INT 5
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 6
49154: PUSH
49155: LD_INT 5
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 6
49164: PUSH
49165: LD_INT 6
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 5
49174: PUSH
49175: LD_INT 6
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49196: LD_ADDR_VAR 0 32
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 4
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 4
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 5
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 5
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 4
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 6
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 6
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 5
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49339: LD_ADDR_VAR 0 33
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 4
49391: NEG
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 4
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 4
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 5
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 5
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 5
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 6
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 6
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49494: LD_ADDR_VAR 0 34
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: LD_INT 4
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 4
49549: NEG
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 4
49561: NEG
49562: PUSH
49563: LD_INT 4
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: LD_INT 5
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 5
49585: NEG
49586: PUSH
49587: LD_INT 4
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 5
49597: NEG
49598: PUSH
49599: LD_INT 5
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 5
49609: NEG
49610: PUSH
49611: LD_INT 6
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 6
49621: NEG
49622: PUSH
49623: LD_INT 5
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 6
49633: NEG
49634: PUSH
49635: LD_INT 6
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49657: LD_ADDR_VAR 0 41
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49701: LD_ADDR_VAR 0 42
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49742: LD_ADDR_VAR 0 43
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 3
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49782: LD_ADDR_VAR 0 44
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49823: LD_ADDR_VAR 0 45
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49867: LD_ADDR_VAR 0 46
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49913: LD_ADDR_VAR 0 47
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49946: LD_ADDR_VAR 0 48
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49977: LD_ADDR_VAR 0 49
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50006: LD_ADDR_VAR 0 50
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50035: LD_ADDR_VAR 0 51
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50066: LD_ADDR_VAR 0 52
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50099: LD_ADDR_VAR 0 53
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50143: LD_ADDR_VAR 0 54
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50184: LD_ADDR_VAR 0 55
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50224: LD_ADDR_VAR 0 56
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50265: LD_ADDR_VAR 0 57
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50309: LD_ADDR_VAR 0 58
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: LD_INT 3
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 3
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50355: LD_ADDR_VAR 0 59
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50399: LD_ADDR_VAR 0 60
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50440: LD_ADDR_VAR 0 61
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50480: LD_ADDR_VAR 0 62
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50521: LD_ADDR_VAR 0 63
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50565: LD_ADDR_VAR 0 64
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// end ; 2 :
50611: GO 53877
50613: LD_INT 2
50615: DOUBLE
50616: EQUAL
50617: IFTRUE 50621
50619: GO 53876
50621: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50622: LD_ADDR_VAR 0 29
50626: PUSH
50627: LD_INT 4
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 4
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 5
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 5
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 4
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 5
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 4
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 4
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 5
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 5
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 5
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 4
50961: NEG
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 4
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 4
50984: NEG
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 4
51007: NEG
51008: PUSH
51009: LD_INT 4
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 4
51019: NEG
51020: PUSH
51021: LD_INT 5
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: LD_INT 4
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 5
51067: NEG
51068: PUSH
51069: LD_INT 4
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 5
51079: NEG
51080: PUSH
51081: LD_INT 5
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: LD_INT 5
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 5
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51160: LD_ADDR_VAR 0 30
51164: PUSH
51165: LD_INT 4
51167: PUSH
51168: LD_INT 4
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 4
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 5
51187: PUSH
51188: LD_INT 4
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 5
51197: PUSH
51198: LD_INT 5
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: PUSH
51208: LD_INT 5
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: LD_INT 4
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 5
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 5
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 4
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 4
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 4
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 5
51406: NEG
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 5
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 5
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 3
51452: NEG
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: LD_INT 4
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 4
51512: NEG
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 4
51524: NEG
51525: PUSH
51526: LD_INT 4
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 4
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 4
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 4
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 5
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 4
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 3
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 4
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 5
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 5
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51707: LD_ADDR_VAR 0 31
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 4
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 4
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 5
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 5
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: LD_INT 5
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 4
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 4
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 4
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 4
51921: NEG
51922: PUSH
51923: LD_INT 5
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: LD_INT 4
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 5
51969: NEG
51970: PUSH
51971: LD_INT 4
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 5
51981: NEG
51982: PUSH
51983: LD_INT 5
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: LD_INT 5
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: LD_INT 3
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 4
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 4
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 4
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 4
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 5
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 5
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 4
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52257: LD_ADDR_VAR 0 32
52261: PUSH
52262: LD_INT 4
52264: NEG
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 4
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 4
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 5
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 5
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 5
52343: NEG
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 4
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 4
52426: NEG
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 4
52438: NEG
52439: PUSH
52440: LD_INT 4
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 4
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 4
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 4
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 5
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 3
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 5
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 5
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 4
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 4
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 4
52669: PUSH
52670: LD_INT 4
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 4
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 5
52689: PUSH
52690: LD_INT 4
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 5
52699: PUSH
52700: LD_INT 5
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 4
52709: PUSH
52710: LD_INT 5
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 5
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 5
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52804: LD_ADDR_VAR 0 33
52808: PUSH
52809: LD_INT 4
52811: NEG
52812: PUSH
52813: LD_INT 4
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 4
52823: NEG
52824: PUSH
52825: LD_INT 5
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 4
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 5
52871: NEG
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 5
52883: NEG
52884: PUSH
52885: LD_INT 5
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 5
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 5
52907: NEG
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 4
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 4
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 4
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 4
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 4
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 5
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 5
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 5
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 4
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 4
53144: PUSH
53145: LD_INT 4
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: LD_INT 4
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 4
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 4
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 4
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 5
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 5
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 4
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 5
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53342: LD_ADDR_VAR 0 34
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 4
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 5
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 4
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 5
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: LD_INT 5
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 4
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 4
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 4
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: PUSH
53545: LD_INT 4
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 5
53564: PUSH
53565: LD_INT 4
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 5
53574: PUSH
53575: LD_INT 5
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 4
53584: PUSH
53585: LD_INT 5
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: LD_INT 4
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 5
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: LD_INT 5
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 4
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 4
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 4
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 4
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 4
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: NEG
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 5
53783: NEG
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 5
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 5
53806: NEG
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// end ; end ;
53874: GO 53877
53876: POP
// case btype of b_depot , b_warehouse :
53877: LD_VAR 0 1
53881: PUSH
53882: LD_INT 0
53884: DOUBLE
53885: EQUAL
53886: IFTRUE 53896
53888: LD_INT 1
53890: DOUBLE
53891: EQUAL
53892: IFTRUE 53896
53894: GO 54097
53896: POP
// case nation of nation_american :
53897: LD_VAR 0 5
53901: PUSH
53902: LD_INT 1
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53910
53908: GO 53966
53910: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53911: LD_ADDR_VAR 0 9
53915: PUSH
53916: LD_VAR 0 11
53920: PUSH
53921: LD_VAR 0 12
53925: PUSH
53926: LD_VAR 0 13
53930: PUSH
53931: LD_VAR 0 14
53935: PUSH
53936: LD_VAR 0 15
53940: PUSH
53941: LD_VAR 0 16
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: PUSH
53954: LD_VAR 0 4
53958: PUSH
53959: LD_INT 1
53961: PLUS
53962: ARRAY
53963: ST_TO_ADDR
53964: GO 54095
53966: LD_INT 2
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53974
53972: GO 54030
53974: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53975: LD_ADDR_VAR 0 9
53979: PUSH
53980: LD_VAR 0 17
53984: PUSH
53985: LD_VAR 0 18
53989: PUSH
53990: LD_VAR 0 19
53994: PUSH
53995: LD_VAR 0 20
53999: PUSH
54000: LD_VAR 0 21
54004: PUSH
54005: LD_VAR 0 22
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: PUSH
54018: LD_VAR 0 4
54022: PUSH
54023: LD_INT 1
54025: PLUS
54026: ARRAY
54027: ST_TO_ADDR
54028: GO 54095
54030: LD_INT 3
54032: DOUBLE
54033: EQUAL
54034: IFTRUE 54038
54036: GO 54094
54038: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54039: LD_ADDR_VAR 0 9
54043: PUSH
54044: LD_VAR 0 23
54048: PUSH
54049: LD_VAR 0 24
54053: PUSH
54054: LD_VAR 0 25
54058: PUSH
54059: LD_VAR 0 26
54063: PUSH
54064: LD_VAR 0 27
54068: PUSH
54069: LD_VAR 0 28
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: PUSH
54082: LD_VAR 0 4
54086: PUSH
54087: LD_INT 1
54089: PLUS
54090: ARRAY
54091: ST_TO_ADDR
54092: GO 54095
54094: POP
54095: GO 54650
54097: LD_INT 2
54099: DOUBLE
54100: EQUAL
54101: IFTRUE 54111
54103: LD_INT 3
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54111
54109: GO 54167
54111: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54112: LD_ADDR_VAR 0 9
54116: PUSH
54117: LD_VAR 0 29
54121: PUSH
54122: LD_VAR 0 30
54126: PUSH
54127: LD_VAR 0 31
54131: PUSH
54132: LD_VAR 0 32
54136: PUSH
54137: LD_VAR 0 33
54141: PUSH
54142: LD_VAR 0 34
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: PUSH
54155: LD_VAR 0 4
54159: PUSH
54160: LD_INT 1
54162: PLUS
54163: ARRAY
54164: ST_TO_ADDR
54165: GO 54650
54167: LD_INT 16
54169: DOUBLE
54170: EQUAL
54171: IFTRUE 54229
54173: LD_INT 17
54175: DOUBLE
54176: EQUAL
54177: IFTRUE 54229
54179: LD_INT 18
54181: DOUBLE
54182: EQUAL
54183: IFTRUE 54229
54185: LD_INT 19
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54229
54191: LD_INT 22
54193: DOUBLE
54194: EQUAL
54195: IFTRUE 54229
54197: LD_INT 20
54199: DOUBLE
54200: EQUAL
54201: IFTRUE 54229
54203: LD_INT 21
54205: DOUBLE
54206: EQUAL
54207: IFTRUE 54229
54209: LD_INT 23
54211: DOUBLE
54212: EQUAL
54213: IFTRUE 54229
54215: LD_INT 24
54217: DOUBLE
54218: EQUAL
54219: IFTRUE 54229
54221: LD_INT 25
54223: DOUBLE
54224: EQUAL
54225: IFTRUE 54229
54227: GO 54285
54229: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54230: LD_ADDR_VAR 0 9
54234: PUSH
54235: LD_VAR 0 35
54239: PUSH
54240: LD_VAR 0 36
54244: PUSH
54245: LD_VAR 0 37
54249: PUSH
54250: LD_VAR 0 38
54254: PUSH
54255: LD_VAR 0 39
54259: PUSH
54260: LD_VAR 0 40
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: PUSH
54273: LD_VAR 0 4
54277: PUSH
54278: LD_INT 1
54280: PLUS
54281: ARRAY
54282: ST_TO_ADDR
54283: GO 54650
54285: LD_INT 6
54287: DOUBLE
54288: EQUAL
54289: IFTRUE 54341
54291: LD_INT 7
54293: DOUBLE
54294: EQUAL
54295: IFTRUE 54341
54297: LD_INT 8
54299: DOUBLE
54300: EQUAL
54301: IFTRUE 54341
54303: LD_INT 13
54305: DOUBLE
54306: EQUAL
54307: IFTRUE 54341
54309: LD_INT 12
54311: DOUBLE
54312: EQUAL
54313: IFTRUE 54341
54315: LD_INT 15
54317: DOUBLE
54318: EQUAL
54319: IFTRUE 54341
54321: LD_INT 11
54323: DOUBLE
54324: EQUAL
54325: IFTRUE 54341
54327: LD_INT 14
54329: DOUBLE
54330: EQUAL
54331: IFTRUE 54341
54333: LD_INT 10
54335: DOUBLE
54336: EQUAL
54337: IFTRUE 54341
54339: GO 54397
54341: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54342: LD_ADDR_VAR 0 9
54346: PUSH
54347: LD_VAR 0 41
54351: PUSH
54352: LD_VAR 0 42
54356: PUSH
54357: LD_VAR 0 43
54361: PUSH
54362: LD_VAR 0 44
54366: PUSH
54367: LD_VAR 0 45
54371: PUSH
54372: LD_VAR 0 46
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: PUSH
54385: LD_VAR 0 4
54389: PUSH
54390: LD_INT 1
54392: PLUS
54393: ARRAY
54394: ST_TO_ADDR
54395: GO 54650
54397: LD_INT 36
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54405
54403: GO 54461
54405: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54406: LD_ADDR_VAR 0 9
54410: PUSH
54411: LD_VAR 0 47
54415: PUSH
54416: LD_VAR 0 48
54420: PUSH
54421: LD_VAR 0 49
54425: PUSH
54426: LD_VAR 0 50
54430: PUSH
54431: LD_VAR 0 51
54435: PUSH
54436: LD_VAR 0 52
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: PUSH
54449: LD_VAR 0 4
54453: PUSH
54454: LD_INT 1
54456: PLUS
54457: ARRAY
54458: ST_TO_ADDR
54459: GO 54650
54461: LD_INT 4
54463: DOUBLE
54464: EQUAL
54465: IFTRUE 54487
54467: LD_INT 5
54469: DOUBLE
54470: EQUAL
54471: IFTRUE 54487
54473: LD_INT 34
54475: DOUBLE
54476: EQUAL
54477: IFTRUE 54487
54479: LD_INT 37
54481: DOUBLE
54482: EQUAL
54483: IFTRUE 54487
54485: GO 54543
54487: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54488: LD_ADDR_VAR 0 9
54492: PUSH
54493: LD_VAR 0 53
54497: PUSH
54498: LD_VAR 0 54
54502: PUSH
54503: LD_VAR 0 55
54507: PUSH
54508: LD_VAR 0 56
54512: PUSH
54513: LD_VAR 0 57
54517: PUSH
54518: LD_VAR 0 58
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: PUSH
54531: LD_VAR 0 4
54535: PUSH
54536: LD_INT 1
54538: PLUS
54539: ARRAY
54540: ST_TO_ADDR
54541: GO 54650
54543: LD_INT 31
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54593
54549: LD_INT 32
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54593
54555: LD_INT 33
54557: DOUBLE
54558: EQUAL
54559: IFTRUE 54593
54561: LD_INT 27
54563: DOUBLE
54564: EQUAL
54565: IFTRUE 54593
54567: LD_INT 26
54569: DOUBLE
54570: EQUAL
54571: IFTRUE 54593
54573: LD_INT 28
54575: DOUBLE
54576: EQUAL
54577: IFTRUE 54593
54579: LD_INT 29
54581: DOUBLE
54582: EQUAL
54583: IFTRUE 54593
54585: LD_INT 30
54587: DOUBLE
54588: EQUAL
54589: IFTRUE 54593
54591: GO 54649
54593: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54594: LD_ADDR_VAR 0 9
54598: PUSH
54599: LD_VAR 0 59
54603: PUSH
54604: LD_VAR 0 60
54608: PUSH
54609: LD_VAR 0 61
54613: PUSH
54614: LD_VAR 0 62
54618: PUSH
54619: LD_VAR 0 63
54623: PUSH
54624: LD_VAR 0 64
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: PUSH
54637: LD_VAR 0 4
54641: PUSH
54642: LD_INT 1
54644: PLUS
54645: ARRAY
54646: ST_TO_ADDR
54647: GO 54650
54649: POP
// temp_list2 = [ ] ;
54650: LD_ADDR_VAR 0 10
54654: PUSH
54655: EMPTY
54656: ST_TO_ADDR
// for i in temp_list do
54657: LD_ADDR_VAR 0 8
54661: PUSH
54662: LD_VAR 0 9
54666: PUSH
54667: FOR_IN
54668: IFFALSE 54720
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54670: LD_ADDR_VAR 0 10
54674: PUSH
54675: LD_VAR 0 10
54679: PUSH
54680: LD_VAR 0 8
54684: PUSH
54685: LD_INT 1
54687: ARRAY
54688: PUSH
54689: LD_VAR 0 2
54693: PLUS
54694: PUSH
54695: LD_VAR 0 8
54699: PUSH
54700: LD_INT 2
54702: ARRAY
54703: PUSH
54704: LD_VAR 0 3
54708: PLUS
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: ADD
54717: ST_TO_ADDR
54718: GO 54667
54720: POP
54721: POP
// result = temp_list2 ;
54722: LD_ADDR_VAR 0 7
54726: PUSH
54727: LD_VAR 0 10
54731: ST_TO_ADDR
// end ;
54732: LD_VAR 0 7
54736: RET
// export function EnemyInRange ( unit , dist ) ; begin
54737: LD_INT 0
54739: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54740: LD_ADDR_VAR 0 3
54744: PUSH
54745: LD_VAR 0 1
54749: PPUSH
54750: CALL_OW 255
54754: PPUSH
54755: LD_VAR 0 1
54759: PPUSH
54760: CALL_OW 250
54764: PPUSH
54765: LD_VAR 0 1
54769: PPUSH
54770: CALL_OW 251
54774: PPUSH
54775: LD_VAR 0 2
54779: PPUSH
54780: CALL 28139 0 4
54784: PUSH
54785: LD_INT 4
54787: ARRAY
54788: ST_TO_ADDR
// end ;
54789: LD_VAR 0 3
54793: RET
// export function PlayerSeeMe ( unit ) ; begin
54794: LD_INT 0
54796: PPUSH
// result := See ( your_side , unit ) ;
54797: LD_ADDR_VAR 0 2
54801: PUSH
54802: LD_OWVAR 2
54806: PPUSH
54807: LD_VAR 0 1
54811: PPUSH
54812: CALL_OW 292
54816: ST_TO_ADDR
// end ;
54817: LD_VAR 0 2
54821: RET
// export function ReverseDir ( unit ) ; begin
54822: LD_INT 0
54824: PPUSH
// if not unit then
54825: LD_VAR 0 1
54829: NOT
54830: IFFALSE 54834
// exit ;
54832: GO 54857
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54834: LD_ADDR_VAR 0 2
54838: PUSH
54839: LD_VAR 0 1
54843: PPUSH
54844: CALL_OW 254
54848: PUSH
54849: LD_INT 3
54851: PLUS
54852: PUSH
54853: LD_INT 6
54855: MOD
54856: ST_TO_ADDR
// end ;
54857: LD_VAR 0 2
54861: RET
// export function ReverseArray ( array ) ; var i ; begin
54862: LD_INT 0
54864: PPUSH
54865: PPUSH
// if not array then
54866: LD_VAR 0 1
54870: NOT
54871: IFFALSE 54875
// exit ;
54873: GO 54930
// result := [ ] ;
54875: LD_ADDR_VAR 0 2
54879: PUSH
54880: EMPTY
54881: ST_TO_ADDR
// for i := array downto 1 do
54882: LD_ADDR_VAR 0 3
54886: PUSH
54887: DOUBLE
54888: LD_VAR 0 1
54892: INC
54893: ST_TO_ADDR
54894: LD_INT 1
54896: PUSH
54897: FOR_DOWNTO
54898: IFFALSE 54928
// result := Join ( result , array [ i ] ) ;
54900: LD_ADDR_VAR 0 2
54904: PUSH
54905: LD_VAR 0 2
54909: PPUSH
54910: LD_VAR 0 1
54914: PUSH
54915: LD_VAR 0 3
54919: ARRAY
54920: PPUSH
54921: CALL 59574 0 2
54925: ST_TO_ADDR
54926: GO 54897
54928: POP
54929: POP
// end ;
54930: LD_VAR 0 2
54934: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54935: LD_INT 0
54937: PPUSH
54938: PPUSH
54939: PPUSH
54940: PPUSH
54941: PPUSH
54942: PPUSH
// if not unit or not hexes then
54943: LD_VAR 0 1
54947: NOT
54948: PUSH
54949: LD_VAR 0 2
54953: NOT
54954: OR
54955: IFFALSE 54959
// exit ;
54957: GO 55082
// dist := 9999 ;
54959: LD_ADDR_VAR 0 5
54963: PUSH
54964: LD_INT 9999
54966: ST_TO_ADDR
// for i = 1 to hexes do
54967: LD_ADDR_VAR 0 4
54971: PUSH
54972: DOUBLE
54973: LD_INT 1
54975: DEC
54976: ST_TO_ADDR
54977: LD_VAR 0 2
54981: PUSH
54982: FOR_TO
54983: IFFALSE 55070
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54985: LD_ADDR_VAR 0 6
54989: PUSH
54990: LD_VAR 0 1
54994: PPUSH
54995: LD_VAR 0 2
54999: PUSH
55000: LD_VAR 0 4
55004: ARRAY
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PPUSH
55010: LD_VAR 0 2
55014: PUSH
55015: LD_VAR 0 4
55019: ARRAY
55020: PUSH
55021: LD_INT 2
55023: ARRAY
55024: PPUSH
55025: CALL_OW 297
55029: ST_TO_ADDR
// if tdist < dist then
55030: LD_VAR 0 6
55034: PUSH
55035: LD_VAR 0 5
55039: LESS
55040: IFFALSE 55068
// begin hex := hexes [ i ] ;
55042: LD_ADDR_VAR 0 8
55046: PUSH
55047: LD_VAR 0 2
55051: PUSH
55052: LD_VAR 0 4
55056: ARRAY
55057: ST_TO_ADDR
// dist := tdist ;
55058: LD_ADDR_VAR 0 5
55062: PUSH
55063: LD_VAR 0 6
55067: ST_TO_ADDR
// end ; end ;
55068: GO 54982
55070: POP
55071: POP
// result := hex ;
55072: LD_ADDR_VAR 0 3
55076: PUSH
55077: LD_VAR 0 8
55081: ST_TO_ADDR
// end ;
55082: LD_VAR 0 3
55086: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55087: LD_INT 0
55089: PPUSH
55090: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55091: LD_VAR 0 1
55095: NOT
55096: PUSH
55097: LD_VAR 0 1
55101: PUSH
55102: LD_INT 21
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 23
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PPUSH
55126: CALL_OW 69
55130: IN
55131: NOT
55132: OR
55133: IFFALSE 55137
// exit ;
55135: GO 55184
// for i = 1 to 3 do
55137: LD_ADDR_VAR 0 3
55141: PUSH
55142: DOUBLE
55143: LD_INT 1
55145: DEC
55146: ST_TO_ADDR
55147: LD_INT 3
55149: PUSH
55150: FOR_TO
55151: IFFALSE 55182
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55153: LD_VAR 0 1
55157: PPUSH
55158: CALL_OW 250
55162: PPUSH
55163: LD_VAR 0 1
55167: PPUSH
55168: CALL_OW 251
55172: PPUSH
55173: LD_INT 1
55175: PPUSH
55176: CALL_OW 453
55180: GO 55150
55182: POP
55183: POP
// end ;
55184: LD_VAR 0 2
55188: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55189: LD_INT 0
55191: PPUSH
55192: PPUSH
55193: PPUSH
55194: PPUSH
55195: PPUSH
55196: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55197: LD_VAR 0 1
55201: NOT
55202: PUSH
55203: LD_VAR 0 2
55207: NOT
55208: OR
55209: PUSH
55210: LD_VAR 0 1
55214: PPUSH
55215: CALL_OW 314
55219: OR
55220: IFFALSE 55224
// exit ;
55222: GO 55691
// if GetLives ( i ) < 250 then
55224: LD_VAR 0 4
55228: PPUSH
55229: CALL_OW 256
55233: PUSH
55234: LD_INT 250
55236: LESS
55237: IFFALSE 55250
// begin ComAutodestruct ( i ) ;
55239: LD_VAR 0 4
55243: PPUSH
55244: CALL 55087 0 1
// exit ;
55248: GO 55691
// end ; x := GetX ( enemy_unit ) ;
55250: LD_ADDR_VAR 0 7
55254: PUSH
55255: LD_VAR 0 2
55259: PPUSH
55260: CALL_OW 250
55264: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55265: LD_ADDR_VAR 0 8
55269: PUSH
55270: LD_VAR 0 2
55274: PPUSH
55275: CALL_OW 251
55279: ST_TO_ADDR
// if not x or not y then
55280: LD_VAR 0 7
55284: NOT
55285: PUSH
55286: LD_VAR 0 8
55290: NOT
55291: OR
55292: IFFALSE 55296
// exit ;
55294: GO 55691
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55296: LD_ADDR_VAR 0 6
55300: PUSH
55301: LD_VAR 0 7
55305: PPUSH
55306: LD_INT 0
55308: PPUSH
55309: LD_INT 4
55311: PPUSH
55312: CALL_OW 272
55316: PUSH
55317: LD_VAR 0 8
55321: PPUSH
55322: LD_INT 0
55324: PPUSH
55325: LD_INT 4
55327: PPUSH
55328: CALL_OW 273
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_VAR 0 7
55341: PPUSH
55342: LD_INT 1
55344: PPUSH
55345: LD_INT 4
55347: PPUSH
55348: CALL_OW 272
55352: PUSH
55353: LD_VAR 0 8
55357: PPUSH
55358: LD_INT 1
55360: PPUSH
55361: LD_INT 4
55363: PPUSH
55364: CALL_OW 273
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_VAR 0 7
55377: PPUSH
55378: LD_INT 2
55380: PPUSH
55381: LD_INT 4
55383: PPUSH
55384: CALL_OW 272
55388: PUSH
55389: LD_VAR 0 8
55393: PPUSH
55394: LD_INT 2
55396: PPUSH
55397: LD_INT 4
55399: PPUSH
55400: CALL_OW 273
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_VAR 0 7
55413: PPUSH
55414: LD_INT 3
55416: PPUSH
55417: LD_INT 4
55419: PPUSH
55420: CALL_OW 272
55424: PUSH
55425: LD_VAR 0 8
55429: PPUSH
55430: LD_INT 3
55432: PPUSH
55433: LD_INT 4
55435: PPUSH
55436: CALL_OW 273
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_VAR 0 7
55449: PPUSH
55450: LD_INT 4
55452: PPUSH
55453: LD_INT 4
55455: PPUSH
55456: CALL_OW 272
55460: PUSH
55461: LD_VAR 0 8
55465: PPUSH
55466: LD_INT 4
55468: PPUSH
55469: LD_INT 4
55471: PPUSH
55472: CALL_OW 273
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_VAR 0 7
55485: PPUSH
55486: LD_INT 5
55488: PPUSH
55489: LD_INT 4
55491: PPUSH
55492: CALL_OW 272
55496: PUSH
55497: LD_VAR 0 8
55501: PPUSH
55502: LD_INT 5
55504: PPUSH
55505: LD_INT 4
55507: PPUSH
55508: CALL_OW 273
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: ST_TO_ADDR
// for i = tmp downto 1 do
55525: LD_ADDR_VAR 0 4
55529: PUSH
55530: DOUBLE
55531: LD_VAR 0 6
55535: INC
55536: ST_TO_ADDR
55537: LD_INT 1
55539: PUSH
55540: FOR_DOWNTO
55541: IFFALSE 55642
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55543: LD_VAR 0 6
55547: PUSH
55548: LD_VAR 0 4
55552: ARRAY
55553: PUSH
55554: LD_INT 1
55556: ARRAY
55557: PPUSH
55558: LD_VAR 0 6
55562: PUSH
55563: LD_VAR 0 4
55567: ARRAY
55568: PUSH
55569: LD_INT 2
55571: ARRAY
55572: PPUSH
55573: CALL_OW 488
55577: NOT
55578: PUSH
55579: LD_VAR 0 6
55583: PUSH
55584: LD_VAR 0 4
55588: ARRAY
55589: PUSH
55590: LD_INT 1
55592: ARRAY
55593: PPUSH
55594: LD_VAR 0 6
55598: PUSH
55599: LD_VAR 0 4
55603: ARRAY
55604: PUSH
55605: LD_INT 2
55607: ARRAY
55608: PPUSH
55609: CALL_OW 428
55613: PUSH
55614: LD_INT 0
55616: NONEQUAL
55617: OR
55618: IFFALSE 55640
// tmp := Delete ( tmp , i ) ;
55620: LD_ADDR_VAR 0 6
55624: PUSH
55625: LD_VAR 0 6
55629: PPUSH
55630: LD_VAR 0 4
55634: PPUSH
55635: CALL_OW 3
55639: ST_TO_ADDR
55640: GO 55540
55642: POP
55643: POP
// j := GetClosestHex ( unit , tmp ) ;
55644: LD_ADDR_VAR 0 5
55648: PUSH
55649: LD_VAR 0 1
55653: PPUSH
55654: LD_VAR 0 6
55658: PPUSH
55659: CALL 54935 0 2
55663: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55664: LD_VAR 0 1
55668: PPUSH
55669: LD_VAR 0 5
55673: PUSH
55674: LD_INT 1
55676: ARRAY
55677: PPUSH
55678: LD_VAR 0 5
55682: PUSH
55683: LD_INT 2
55685: ARRAY
55686: PPUSH
55687: CALL_OW 111
// end ;
55691: LD_VAR 0 3
55695: RET
// export function PrepareApemanSoldier ( ) ; begin
55696: LD_INT 0
55698: PPUSH
// uc_nation := 0 ;
55699: LD_ADDR_OWVAR 21
55703: PUSH
55704: LD_INT 0
55706: ST_TO_ADDR
// hc_sex := sex_male ;
55707: LD_ADDR_OWVAR 27
55711: PUSH
55712: LD_INT 1
55714: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55715: LD_ADDR_OWVAR 28
55719: PUSH
55720: LD_INT 15
55722: ST_TO_ADDR
// hc_gallery :=  ;
55723: LD_ADDR_OWVAR 33
55727: PUSH
55728: LD_STRING 
55730: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55731: LD_ADDR_OWVAR 31
55735: PUSH
55736: LD_INT 0
55738: PPUSH
55739: LD_INT 3
55741: PPUSH
55742: CALL_OW 12
55746: PUSH
55747: LD_INT 0
55749: PPUSH
55750: LD_INT 3
55752: PPUSH
55753: CALL_OW 12
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// end ;
55770: LD_VAR 0 1
55774: RET
// export function PrepareApemanEngineer ( ) ; begin
55775: LD_INT 0
55777: PPUSH
// uc_nation := 0 ;
55778: LD_ADDR_OWVAR 21
55782: PUSH
55783: LD_INT 0
55785: ST_TO_ADDR
// hc_sex := sex_male ;
55786: LD_ADDR_OWVAR 27
55790: PUSH
55791: LD_INT 1
55793: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55794: LD_ADDR_OWVAR 28
55798: PUSH
55799: LD_INT 16
55801: ST_TO_ADDR
// hc_gallery :=  ;
55802: LD_ADDR_OWVAR 33
55806: PUSH
55807: LD_STRING 
55809: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55810: LD_ADDR_OWVAR 31
55814: PUSH
55815: LD_INT 0
55817: PPUSH
55818: LD_INT 3
55820: PPUSH
55821: CALL_OW 12
55825: PUSH
55826: LD_INT 0
55828: PPUSH
55829: LD_INT 3
55831: PPUSH
55832: CALL_OW 12
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// end ;
55849: LD_VAR 0 1
55853: RET
// export function PrepareApeman ( agressivity ) ; begin
55854: LD_INT 0
55856: PPUSH
// uc_side := 0 ;
55857: LD_ADDR_OWVAR 20
55861: PUSH
55862: LD_INT 0
55864: ST_TO_ADDR
// uc_nation := 0 ;
55865: LD_ADDR_OWVAR 21
55869: PUSH
55870: LD_INT 0
55872: ST_TO_ADDR
// hc_sex := sex_male ;
55873: LD_ADDR_OWVAR 27
55877: PUSH
55878: LD_INT 1
55880: ST_TO_ADDR
// hc_class := class_apeman ;
55881: LD_ADDR_OWVAR 28
55885: PUSH
55886: LD_INT 12
55888: ST_TO_ADDR
// hc_gallery :=  ;
55889: LD_ADDR_OWVAR 33
55893: PUSH
55894: LD_STRING 
55896: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55897: LD_ADDR_OWVAR 35
55901: PUSH
55902: LD_VAR 0 1
55906: NEG
55907: PPUSH
55908: LD_VAR 0 1
55912: PPUSH
55913: CALL_OW 12
55917: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55918: LD_ADDR_OWVAR 31
55922: PUSH
55923: LD_INT 0
55925: PPUSH
55926: LD_INT 3
55928: PPUSH
55929: CALL_OW 12
55933: PUSH
55934: LD_INT 0
55936: PPUSH
55937: LD_INT 3
55939: PPUSH
55940: CALL_OW 12
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 2
55961: RET
// export function PrepareTiger ( agressivity ) ; begin
55962: LD_INT 0
55964: PPUSH
// uc_side := 0 ;
55965: LD_ADDR_OWVAR 20
55969: PUSH
55970: LD_INT 0
55972: ST_TO_ADDR
// uc_nation := 0 ;
55973: LD_ADDR_OWVAR 21
55977: PUSH
55978: LD_INT 0
55980: ST_TO_ADDR
// hc_class := class_tiger ;
55981: LD_ADDR_OWVAR 28
55985: PUSH
55986: LD_INT 14
55988: ST_TO_ADDR
// hc_gallery :=  ;
55989: LD_ADDR_OWVAR 33
55993: PUSH
55994: LD_STRING 
55996: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55997: LD_ADDR_OWVAR 35
56001: PUSH
56002: LD_VAR 0 1
56006: NEG
56007: PPUSH
56008: LD_VAR 0 1
56012: PPUSH
56013: CALL_OW 12
56017: ST_TO_ADDR
// end ;
56018: LD_VAR 0 2
56022: RET
// export function PrepareEnchidna ( ) ; begin
56023: LD_INT 0
56025: PPUSH
// uc_side := 0 ;
56026: LD_ADDR_OWVAR 20
56030: PUSH
56031: LD_INT 0
56033: ST_TO_ADDR
// uc_nation := 0 ;
56034: LD_ADDR_OWVAR 21
56038: PUSH
56039: LD_INT 0
56041: ST_TO_ADDR
// hc_class := class_baggie ;
56042: LD_ADDR_OWVAR 28
56046: PUSH
56047: LD_INT 13
56049: ST_TO_ADDR
// hc_gallery :=  ;
56050: LD_ADDR_OWVAR 33
56054: PUSH
56055: LD_STRING 
56057: ST_TO_ADDR
// end ;
56058: LD_VAR 0 1
56062: RET
// export function PrepareFrog ( ) ; begin
56063: LD_INT 0
56065: PPUSH
// uc_side := 0 ;
56066: LD_ADDR_OWVAR 20
56070: PUSH
56071: LD_INT 0
56073: ST_TO_ADDR
// uc_nation := 0 ;
56074: LD_ADDR_OWVAR 21
56078: PUSH
56079: LD_INT 0
56081: ST_TO_ADDR
// hc_class := class_frog ;
56082: LD_ADDR_OWVAR 28
56086: PUSH
56087: LD_INT 19
56089: ST_TO_ADDR
// hc_gallery :=  ;
56090: LD_ADDR_OWVAR 33
56094: PUSH
56095: LD_STRING 
56097: ST_TO_ADDR
// end ;
56098: LD_VAR 0 1
56102: RET
// export function PrepareFish ( ) ; begin
56103: LD_INT 0
56105: PPUSH
// uc_side := 0 ;
56106: LD_ADDR_OWVAR 20
56110: PUSH
56111: LD_INT 0
56113: ST_TO_ADDR
// uc_nation := 0 ;
56114: LD_ADDR_OWVAR 21
56118: PUSH
56119: LD_INT 0
56121: ST_TO_ADDR
// hc_class := class_fish ;
56122: LD_ADDR_OWVAR 28
56126: PUSH
56127: LD_INT 20
56129: ST_TO_ADDR
// hc_gallery :=  ;
56130: LD_ADDR_OWVAR 33
56134: PUSH
56135: LD_STRING 
56137: ST_TO_ADDR
// end ;
56138: LD_VAR 0 1
56142: RET
// export function PrepareBird ( ) ; begin
56143: LD_INT 0
56145: PPUSH
// uc_side := 0 ;
56146: LD_ADDR_OWVAR 20
56150: PUSH
56151: LD_INT 0
56153: ST_TO_ADDR
// uc_nation := 0 ;
56154: LD_ADDR_OWVAR 21
56158: PUSH
56159: LD_INT 0
56161: ST_TO_ADDR
// hc_class := class_phororhacos ;
56162: LD_ADDR_OWVAR 28
56166: PUSH
56167: LD_INT 18
56169: ST_TO_ADDR
// hc_gallery :=  ;
56170: LD_ADDR_OWVAR 33
56174: PUSH
56175: LD_STRING 
56177: ST_TO_ADDR
// end ;
56178: LD_VAR 0 1
56182: RET
// export function PrepareHorse ( ) ; begin
56183: LD_INT 0
56185: PPUSH
// uc_side := 0 ;
56186: LD_ADDR_OWVAR 20
56190: PUSH
56191: LD_INT 0
56193: ST_TO_ADDR
// uc_nation := 0 ;
56194: LD_ADDR_OWVAR 21
56198: PUSH
56199: LD_INT 0
56201: ST_TO_ADDR
// hc_class := class_horse ;
56202: LD_ADDR_OWVAR 28
56206: PUSH
56207: LD_INT 21
56209: ST_TO_ADDR
// hc_gallery :=  ;
56210: LD_ADDR_OWVAR 33
56214: PUSH
56215: LD_STRING 
56217: ST_TO_ADDR
// end ;
56218: LD_VAR 0 1
56222: RET
// export function PrepareMastodont ( ) ; begin
56223: LD_INT 0
56225: PPUSH
// uc_side := 0 ;
56226: LD_ADDR_OWVAR 20
56230: PUSH
56231: LD_INT 0
56233: ST_TO_ADDR
// uc_nation := 0 ;
56234: LD_ADDR_OWVAR 21
56238: PUSH
56239: LD_INT 0
56241: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56242: LD_ADDR_OWVAR 37
56246: PUSH
56247: LD_INT 31
56249: ST_TO_ADDR
// vc_control := control_rider ;
56250: LD_ADDR_OWVAR 38
56254: PUSH
56255: LD_INT 4
56257: ST_TO_ADDR
// end ;
56258: LD_VAR 0 1
56262: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
56267: PPUSH
// uc_side = 0 ;
56268: LD_ADDR_OWVAR 20
56272: PUSH
56273: LD_INT 0
56275: ST_TO_ADDR
// uc_nation = 0 ;
56276: LD_ADDR_OWVAR 21
56280: PUSH
56281: LD_INT 0
56283: ST_TO_ADDR
// InitHc_All ( ) ;
56284: CALL_OW 584
// InitVc ;
56288: CALL_OW 20
// if mastodonts then
56292: LD_VAR 0 6
56296: IFFALSE 56363
// for i = 1 to mastodonts do
56298: LD_ADDR_VAR 0 11
56302: PUSH
56303: DOUBLE
56304: LD_INT 1
56306: DEC
56307: ST_TO_ADDR
56308: LD_VAR 0 6
56312: PUSH
56313: FOR_TO
56314: IFFALSE 56361
// begin vc_chassis := 31 ;
56316: LD_ADDR_OWVAR 37
56320: PUSH
56321: LD_INT 31
56323: ST_TO_ADDR
// vc_control := control_rider ;
56324: LD_ADDR_OWVAR 38
56328: PUSH
56329: LD_INT 4
56331: ST_TO_ADDR
// animal := CreateVehicle ;
56332: LD_ADDR_VAR 0 12
56336: PUSH
56337: CALL_OW 45
56341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56342: LD_VAR 0 12
56346: PPUSH
56347: LD_VAR 0 8
56351: PPUSH
56352: LD_INT 0
56354: PPUSH
56355: CALL 58491 0 3
// end ;
56359: GO 56313
56361: POP
56362: POP
// if horses then
56363: LD_VAR 0 5
56367: IFFALSE 56434
// for i = 1 to horses do
56369: LD_ADDR_VAR 0 11
56373: PUSH
56374: DOUBLE
56375: LD_INT 1
56377: DEC
56378: ST_TO_ADDR
56379: LD_VAR 0 5
56383: PUSH
56384: FOR_TO
56385: IFFALSE 56432
// begin hc_class := 21 ;
56387: LD_ADDR_OWVAR 28
56391: PUSH
56392: LD_INT 21
56394: ST_TO_ADDR
// hc_gallery :=  ;
56395: LD_ADDR_OWVAR 33
56399: PUSH
56400: LD_STRING 
56402: ST_TO_ADDR
// animal := CreateHuman ;
56403: LD_ADDR_VAR 0 12
56407: PUSH
56408: CALL_OW 44
56412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56413: LD_VAR 0 12
56417: PPUSH
56418: LD_VAR 0 8
56422: PPUSH
56423: LD_INT 0
56425: PPUSH
56426: CALL 58491 0 3
// end ;
56430: GO 56384
56432: POP
56433: POP
// if birds then
56434: LD_VAR 0 1
56438: IFFALSE 56505
// for i = 1 to birds do
56440: LD_ADDR_VAR 0 11
56444: PUSH
56445: DOUBLE
56446: LD_INT 1
56448: DEC
56449: ST_TO_ADDR
56450: LD_VAR 0 1
56454: PUSH
56455: FOR_TO
56456: IFFALSE 56503
// begin hc_class = 18 ;
56458: LD_ADDR_OWVAR 28
56462: PUSH
56463: LD_INT 18
56465: ST_TO_ADDR
// hc_gallery =  ;
56466: LD_ADDR_OWVAR 33
56470: PUSH
56471: LD_STRING 
56473: ST_TO_ADDR
// animal := CreateHuman ;
56474: LD_ADDR_VAR 0 12
56478: PUSH
56479: CALL_OW 44
56483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56484: LD_VAR 0 12
56488: PPUSH
56489: LD_VAR 0 8
56493: PPUSH
56494: LD_INT 0
56496: PPUSH
56497: CALL 58491 0 3
// end ;
56501: GO 56455
56503: POP
56504: POP
// if tigers then
56505: LD_VAR 0 2
56509: IFFALSE 56593
// for i = 1 to tigers do
56511: LD_ADDR_VAR 0 11
56515: PUSH
56516: DOUBLE
56517: LD_INT 1
56519: DEC
56520: ST_TO_ADDR
56521: LD_VAR 0 2
56525: PUSH
56526: FOR_TO
56527: IFFALSE 56591
// begin hc_class = class_tiger ;
56529: LD_ADDR_OWVAR 28
56533: PUSH
56534: LD_INT 14
56536: ST_TO_ADDR
// hc_gallery =  ;
56537: LD_ADDR_OWVAR 33
56541: PUSH
56542: LD_STRING 
56544: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56545: LD_ADDR_OWVAR 35
56549: PUSH
56550: LD_INT 7
56552: NEG
56553: PPUSH
56554: LD_INT 7
56556: PPUSH
56557: CALL_OW 12
56561: ST_TO_ADDR
// animal := CreateHuman ;
56562: LD_ADDR_VAR 0 12
56566: PUSH
56567: CALL_OW 44
56571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56572: LD_VAR 0 12
56576: PPUSH
56577: LD_VAR 0 8
56581: PPUSH
56582: LD_INT 0
56584: PPUSH
56585: CALL 58491 0 3
// end ;
56589: GO 56526
56591: POP
56592: POP
// if apemans then
56593: LD_VAR 0 3
56597: IFFALSE 56720
// for i = 1 to apemans do
56599: LD_ADDR_VAR 0 11
56603: PUSH
56604: DOUBLE
56605: LD_INT 1
56607: DEC
56608: ST_TO_ADDR
56609: LD_VAR 0 3
56613: PUSH
56614: FOR_TO
56615: IFFALSE 56718
// begin hc_class = class_apeman ;
56617: LD_ADDR_OWVAR 28
56621: PUSH
56622: LD_INT 12
56624: ST_TO_ADDR
// hc_gallery =  ;
56625: LD_ADDR_OWVAR 33
56629: PUSH
56630: LD_STRING 
56632: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56633: LD_ADDR_OWVAR 35
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PPUSH
56642: LD_INT 2
56644: PPUSH
56645: CALL_OW 12
56649: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56650: LD_ADDR_OWVAR 31
56654: PUSH
56655: LD_INT 1
56657: PPUSH
56658: LD_INT 3
56660: PPUSH
56661: CALL_OW 12
56665: PUSH
56666: LD_INT 1
56668: PPUSH
56669: LD_INT 3
56671: PPUSH
56672: CALL_OW 12
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// animal := CreateHuman ;
56689: LD_ADDR_VAR 0 12
56693: PUSH
56694: CALL_OW 44
56698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56699: LD_VAR 0 12
56703: PPUSH
56704: LD_VAR 0 8
56708: PPUSH
56709: LD_INT 0
56711: PPUSH
56712: CALL 58491 0 3
// end ;
56716: GO 56614
56718: POP
56719: POP
// if enchidnas then
56720: LD_VAR 0 4
56724: IFFALSE 56791
// for i = 1 to enchidnas do
56726: LD_ADDR_VAR 0 11
56730: PUSH
56731: DOUBLE
56732: LD_INT 1
56734: DEC
56735: ST_TO_ADDR
56736: LD_VAR 0 4
56740: PUSH
56741: FOR_TO
56742: IFFALSE 56789
// begin hc_class = 13 ;
56744: LD_ADDR_OWVAR 28
56748: PUSH
56749: LD_INT 13
56751: ST_TO_ADDR
// hc_gallery =  ;
56752: LD_ADDR_OWVAR 33
56756: PUSH
56757: LD_STRING 
56759: ST_TO_ADDR
// animal := CreateHuman ;
56760: LD_ADDR_VAR 0 12
56764: PUSH
56765: CALL_OW 44
56769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56770: LD_VAR 0 12
56774: PPUSH
56775: LD_VAR 0 8
56779: PPUSH
56780: LD_INT 0
56782: PPUSH
56783: CALL 58491 0 3
// end ;
56787: GO 56741
56789: POP
56790: POP
// if fishes then
56791: LD_VAR 0 7
56795: IFFALSE 56862
// for i = 1 to fishes do
56797: LD_ADDR_VAR 0 11
56801: PUSH
56802: DOUBLE
56803: LD_INT 1
56805: DEC
56806: ST_TO_ADDR
56807: LD_VAR 0 7
56811: PUSH
56812: FOR_TO
56813: IFFALSE 56860
// begin hc_class = 20 ;
56815: LD_ADDR_OWVAR 28
56819: PUSH
56820: LD_INT 20
56822: ST_TO_ADDR
// hc_gallery =  ;
56823: LD_ADDR_OWVAR 33
56827: PUSH
56828: LD_STRING 
56830: ST_TO_ADDR
// animal := CreateHuman ;
56831: LD_ADDR_VAR 0 12
56835: PUSH
56836: CALL_OW 44
56840: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56841: LD_VAR 0 12
56845: PPUSH
56846: LD_VAR 0 9
56850: PPUSH
56851: LD_INT 0
56853: PPUSH
56854: CALL 58491 0 3
// end ;
56858: GO 56812
56860: POP
56861: POP
// end ;
56862: LD_VAR 0 10
56866: RET
// export function WantHeal ( sci , unit ) ; begin
56867: LD_INT 0
56869: PPUSH
// if GetTaskList ( sci ) > 0 then
56870: LD_VAR 0 1
56874: PPUSH
56875: CALL_OW 437
56879: PUSH
56880: LD_INT 0
56882: GREATER
56883: IFFALSE 56953
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56885: LD_VAR 0 1
56889: PPUSH
56890: CALL_OW 437
56894: PUSH
56895: LD_INT 1
56897: ARRAY
56898: PUSH
56899: LD_INT 1
56901: ARRAY
56902: PUSH
56903: LD_STRING l
56905: EQUAL
56906: PUSH
56907: LD_VAR 0 1
56911: PPUSH
56912: CALL_OW 437
56916: PUSH
56917: LD_INT 1
56919: ARRAY
56920: PUSH
56921: LD_INT 4
56923: ARRAY
56924: PUSH
56925: LD_VAR 0 2
56929: EQUAL
56930: AND
56931: IFFALSE 56943
// result := true else
56933: LD_ADDR_VAR 0 3
56937: PUSH
56938: LD_INT 1
56940: ST_TO_ADDR
56941: GO 56951
// result := false ;
56943: LD_ADDR_VAR 0 3
56947: PUSH
56948: LD_INT 0
56950: ST_TO_ADDR
// end else
56951: GO 56961
// result := false ;
56953: LD_ADDR_VAR 0 3
56957: PUSH
56958: LD_INT 0
56960: ST_TO_ADDR
// end ;
56961: LD_VAR 0 3
56965: RET
// export function HealTarget ( sci ) ; begin
56966: LD_INT 0
56968: PPUSH
// if not sci then
56969: LD_VAR 0 1
56973: NOT
56974: IFFALSE 56978
// exit ;
56976: GO 57043
// result := 0 ;
56978: LD_ADDR_VAR 0 2
56982: PUSH
56983: LD_INT 0
56985: ST_TO_ADDR
// if GetTaskList ( sci ) then
56986: LD_VAR 0 1
56990: PPUSH
56991: CALL_OW 437
56995: IFFALSE 57043
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56997: LD_VAR 0 1
57001: PPUSH
57002: CALL_OW 437
57006: PUSH
57007: LD_INT 1
57009: ARRAY
57010: PUSH
57011: LD_INT 1
57013: ARRAY
57014: PUSH
57015: LD_STRING l
57017: EQUAL
57018: IFFALSE 57043
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57020: LD_ADDR_VAR 0 2
57024: PUSH
57025: LD_VAR 0 1
57029: PPUSH
57030: CALL_OW 437
57034: PUSH
57035: LD_INT 1
57037: ARRAY
57038: PUSH
57039: LD_INT 4
57041: ARRAY
57042: ST_TO_ADDR
// end ;
57043: LD_VAR 0 2
57047: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57048: LD_INT 0
57050: PPUSH
57051: PPUSH
57052: PPUSH
57053: PPUSH
// if not base_units then
57054: LD_VAR 0 1
57058: NOT
57059: IFFALSE 57063
// exit ;
57061: GO 57150
// result := false ;
57063: LD_ADDR_VAR 0 2
57067: PUSH
57068: LD_INT 0
57070: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57071: LD_ADDR_VAR 0 5
57075: PUSH
57076: LD_VAR 0 1
57080: PPUSH
57081: LD_INT 21
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PPUSH
57091: CALL_OW 72
57095: ST_TO_ADDR
// if not tmp then
57096: LD_VAR 0 5
57100: NOT
57101: IFFALSE 57105
// exit ;
57103: GO 57150
// for i in tmp do
57105: LD_ADDR_VAR 0 3
57109: PUSH
57110: LD_VAR 0 5
57114: PUSH
57115: FOR_IN
57116: IFFALSE 57148
// begin result := EnemyInRange ( i , 22 ) ;
57118: LD_ADDR_VAR 0 2
57122: PUSH
57123: LD_VAR 0 3
57127: PPUSH
57128: LD_INT 22
57130: PPUSH
57131: CALL 54737 0 2
57135: ST_TO_ADDR
// if result then
57136: LD_VAR 0 2
57140: IFFALSE 57146
// exit ;
57142: POP
57143: POP
57144: GO 57150
// end ;
57146: GO 57115
57148: POP
57149: POP
// end ;
57150: LD_VAR 0 2
57154: RET
// export function FilterByTag ( units , tag ) ; begin
57155: LD_INT 0
57157: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57158: LD_ADDR_VAR 0 3
57162: PUSH
57163: LD_VAR 0 1
57167: PPUSH
57168: LD_INT 120
57170: PUSH
57171: LD_VAR 0 2
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PPUSH
57180: CALL_OW 72
57184: ST_TO_ADDR
// end ;
57185: LD_VAR 0 3
57189: RET
// export function IsDriver ( un ) ; begin
57190: LD_INT 0
57192: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57193: LD_ADDR_VAR 0 2
57197: PUSH
57198: LD_VAR 0 1
57202: PUSH
57203: LD_INT 55
57205: PUSH
57206: EMPTY
57207: LIST
57208: PPUSH
57209: CALL_OW 69
57213: IN
57214: ST_TO_ADDR
// end ;
57215: LD_VAR 0 2
57219: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57220: LD_INT 0
57222: PPUSH
57223: PPUSH
// list := [ ] ;
57224: LD_ADDR_VAR 0 5
57228: PUSH
57229: EMPTY
57230: ST_TO_ADDR
// case d of 0 :
57231: LD_VAR 0 3
57235: PUSH
57236: LD_INT 0
57238: DOUBLE
57239: EQUAL
57240: IFTRUE 57244
57242: GO 57377
57244: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57245: LD_ADDR_VAR 0 5
57249: PUSH
57250: LD_VAR 0 1
57254: PUSH
57255: LD_INT 4
57257: MINUS
57258: PUSH
57259: LD_VAR 0 2
57263: PUSH
57264: LD_INT 4
57266: MINUS
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: PUSH
57276: LD_VAR 0 1
57280: PUSH
57281: LD_INT 3
57283: MINUS
57284: PUSH
57285: LD_VAR 0 2
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_VAR 0 1
57302: PUSH
57303: LD_INT 4
57305: PLUS
57306: PUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: PUSH
57320: LD_VAR 0 1
57324: PUSH
57325: LD_INT 3
57327: PLUS
57328: PUSH
57329: LD_VAR 0 2
57333: PUSH
57334: LD_INT 3
57336: PLUS
57337: PUSH
57338: LD_INT 5
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: PUSH
57346: LD_VAR 0 1
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: LD_INT 4
57358: PLUS
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: ST_TO_ADDR
// end ; 1 :
57375: GO 58075
57377: LD_INT 1
57379: DOUBLE
57380: EQUAL
57381: IFTRUE 57385
57383: GO 57518
57385: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57386: LD_ADDR_VAR 0 5
57390: PUSH
57391: LD_VAR 0 1
57395: PUSH
57396: LD_VAR 0 2
57400: PUSH
57401: LD_INT 4
57403: MINUS
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: PUSH
57413: LD_VAR 0 1
57417: PUSH
57418: LD_INT 3
57420: MINUS
57421: PUSH
57422: LD_VAR 0 2
57426: PUSH
57427: LD_INT 3
57429: MINUS
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: PUSH
57439: LD_VAR 0 1
57443: PUSH
57444: LD_INT 4
57446: MINUS
57447: PUSH
57448: LD_VAR 0 2
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: PUSH
57461: LD_VAR 0 1
57465: PUSH
57466: LD_VAR 0 2
57470: PUSH
57471: LD_INT 3
57473: PLUS
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: PUSH
57483: LD_VAR 0 1
57487: PUSH
57488: LD_INT 4
57490: PLUS
57491: PUSH
57492: LD_VAR 0 2
57496: PUSH
57497: LD_INT 4
57499: PLUS
57500: PUSH
57501: LD_INT 5
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// end ; 2 :
57516: GO 58075
57518: LD_INT 2
57520: DOUBLE
57521: EQUAL
57522: IFTRUE 57526
57524: GO 57655
57526: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57527: LD_ADDR_VAR 0 5
57531: PUSH
57532: LD_VAR 0 1
57536: PUSH
57537: LD_VAR 0 2
57541: PUSH
57542: LD_INT 3
57544: MINUS
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: PUSH
57554: LD_VAR 0 1
57558: PUSH
57559: LD_INT 4
57561: PLUS
57562: PUSH
57563: LD_VAR 0 2
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: PUSH
57576: LD_VAR 0 1
57580: PUSH
57581: LD_VAR 0 2
57585: PUSH
57586: LD_INT 4
57588: PLUS
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: PUSH
57598: LD_VAR 0 1
57602: PUSH
57603: LD_INT 3
57605: MINUS
57606: PUSH
57607: LD_VAR 0 2
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: PUSH
57620: LD_VAR 0 1
57624: PUSH
57625: LD_INT 4
57627: MINUS
57628: PUSH
57629: LD_VAR 0 2
57633: PUSH
57634: LD_INT 4
57636: MINUS
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: ST_TO_ADDR
// end ; 3 :
57653: GO 58075
57655: LD_INT 3
57657: DOUBLE
57658: EQUAL
57659: IFTRUE 57663
57661: GO 57796
57663: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57664: LD_ADDR_VAR 0 5
57668: PUSH
57669: LD_VAR 0 1
57673: PUSH
57674: LD_INT 3
57676: PLUS
57677: PUSH
57678: LD_VAR 0 2
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: PUSH
57691: LD_VAR 0 1
57695: PUSH
57696: LD_INT 4
57698: PLUS
57699: PUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_INT 4
57707: PLUS
57708: PUSH
57709: LD_INT 5
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: PUSH
57717: LD_VAR 0 1
57721: PUSH
57722: LD_INT 4
57724: MINUS
57725: PUSH
57726: LD_VAR 0 2
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: PUSH
57739: LD_VAR 0 1
57743: PUSH
57744: LD_VAR 0 2
57748: PUSH
57749: LD_INT 4
57751: MINUS
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: PUSH
57761: LD_VAR 0 1
57765: PUSH
57766: LD_INT 3
57768: MINUS
57769: PUSH
57770: LD_VAR 0 2
57774: PUSH
57775: LD_INT 3
57777: MINUS
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// end ; 4 :
57794: GO 58075
57796: LD_INT 4
57798: DOUBLE
57799: EQUAL
57800: IFTRUE 57804
57802: GO 57937
57804: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57805: LD_ADDR_VAR 0 5
57809: PUSH
57810: LD_VAR 0 1
57814: PUSH
57815: LD_VAR 0 2
57819: PUSH
57820: LD_INT 4
57822: PLUS
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: PUSH
57832: LD_VAR 0 1
57836: PUSH
57837: LD_INT 3
57839: PLUS
57840: PUSH
57841: LD_VAR 0 2
57845: PUSH
57846: LD_INT 3
57848: PLUS
57849: PUSH
57850: LD_INT 5
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: PUSH
57858: LD_VAR 0 1
57862: PUSH
57863: LD_INT 4
57865: PLUS
57866: PUSH
57867: LD_VAR 0 2
57871: PUSH
57872: LD_INT 4
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: PUSH
57880: LD_VAR 0 1
57884: PUSH
57885: LD_VAR 0 2
57889: PUSH
57890: LD_INT 3
57892: MINUS
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: PUSH
57902: LD_VAR 0 1
57906: PUSH
57907: LD_INT 4
57909: MINUS
57910: PUSH
57911: LD_VAR 0 2
57915: PUSH
57916: LD_INT 4
57918: MINUS
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: ST_TO_ADDR
// end ; 5 :
57935: GO 58075
57937: LD_INT 5
57939: DOUBLE
57940: EQUAL
57941: IFTRUE 57945
57943: GO 58074
57945: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57946: LD_ADDR_VAR 0 5
57950: PUSH
57951: LD_VAR 0 1
57955: PUSH
57956: LD_INT 4
57958: MINUS
57959: PUSH
57960: LD_VAR 0 2
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: PUSH
57973: LD_VAR 0 1
57977: PUSH
57978: LD_VAR 0 2
57982: PUSH
57983: LD_INT 4
57985: MINUS
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: PUSH
57995: LD_VAR 0 1
57999: PUSH
58000: LD_INT 4
58002: PLUS
58003: PUSH
58004: LD_VAR 0 2
58008: PUSH
58009: LD_INT 4
58011: PLUS
58012: PUSH
58013: LD_INT 5
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: PUSH
58021: LD_VAR 0 1
58025: PUSH
58026: LD_INT 3
58028: PLUS
58029: PUSH
58030: LD_VAR 0 2
58034: PUSH
58035: LD_INT 4
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: PUSH
58043: LD_VAR 0 1
58047: PUSH
58048: LD_VAR 0 2
58052: PUSH
58053: LD_INT 3
58055: PLUS
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// end ; end ;
58072: GO 58075
58074: POP
// result := list ;
58075: LD_ADDR_VAR 0 4
58079: PUSH
58080: LD_VAR 0 5
58084: ST_TO_ADDR
// end ;
58085: LD_VAR 0 4
58089: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58090: LD_INT 0
58092: PPUSH
58093: PPUSH
58094: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58095: LD_VAR 0 1
58099: NOT
58100: PUSH
58101: LD_VAR 0 2
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 4
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: IN
58124: NOT
58125: OR
58126: IFFALSE 58130
// exit ;
58128: GO 58213
// tmp := [ ] ;
58130: LD_ADDR_VAR 0 5
58134: PUSH
58135: EMPTY
58136: ST_TO_ADDR
// for i in units do
58137: LD_ADDR_VAR 0 4
58141: PUSH
58142: LD_VAR 0 1
58146: PUSH
58147: FOR_IN
58148: IFFALSE 58182
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58150: LD_ADDR_VAR 0 5
58154: PUSH
58155: LD_VAR 0 5
58159: PPUSH
58160: LD_VAR 0 4
58164: PPUSH
58165: LD_VAR 0 2
58169: PPUSH
58170: CALL_OW 259
58174: PPUSH
58175: CALL 59574 0 2
58179: ST_TO_ADDR
58180: GO 58147
58182: POP
58183: POP
// if not tmp then
58184: LD_VAR 0 5
58188: NOT
58189: IFFALSE 58193
// exit ;
58191: GO 58213
// result := SortListByListDesc ( units , tmp ) ;
58193: LD_ADDR_VAR 0 3
58197: PUSH
58198: LD_VAR 0 1
58202: PPUSH
58203: LD_VAR 0 5
58207: PPUSH
58208: CALL_OW 77
58212: ST_TO_ADDR
// end ;
58213: LD_VAR 0 3
58217: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58218: LD_INT 0
58220: PPUSH
58221: PPUSH
58222: PPUSH
// result := false ;
58223: LD_ADDR_VAR 0 3
58227: PUSH
58228: LD_INT 0
58230: ST_TO_ADDR
// if not building then
58231: LD_VAR 0 2
58235: NOT
58236: IFFALSE 58240
// exit ;
58238: GO 58378
// x := GetX ( building ) ;
58240: LD_ADDR_VAR 0 4
58244: PUSH
58245: LD_VAR 0 2
58249: PPUSH
58250: CALL_OW 250
58254: ST_TO_ADDR
// y := GetY ( building ) ;
58255: LD_ADDR_VAR 0 5
58259: PUSH
58260: LD_VAR 0 2
58264: PPUSH
58265: CALL_OW 251
58269: ST_TO_ADDR
// if not x or not y then
58270: LD_VAR 0 4
58274: NOT
58275: PUSH
58276: LD_VAR 0 5
58280: NOT
58281: OR
58282: IFFALSE 58286
// exit ;
58284: GO 58378
// if GetTaskList ( unit ) then
58286: LD_VAR 0 1
58290: PPUSH
58291: CALL_OW 437
58295: IFFALSE 58378
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58297: LD_STRING e
58299: PUSH
58300: LD_VAR 0 1
58304: PPUSH
58305: CALL_OW 437
58309: PUSH
58310: LD_INT 1
58312: ARRAY
58313: PUSH
58314: LD_INT 1
58316: ARRAY
58317: EQUAL
58318: PUSH
58319: LD_VAR 0 4
58323: PUSH
58324: LD_VAR 0 1
58328: PPUSH
58329: CALL_OW 437
58333: PUSH
58334: LD_INT 1
58336: ARRAY
58337: PUSH
58338: LD_INT 2
58340: ARRAY
58341: EQUAL
58342: AND
58343: PUSH
58344: LD_VAR 0 5
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 437
58358: PUSH
58359: LD_INT 1
58361: ARRAY
58362: PUSH
58363: LD_INT 3
58365: ARRAY
58366: EQUAL
58367: AND
58368: IFFALSE 58378
// result := true end ;
58370: LD_ADDR_VAR 0 3
58374: PUSH
58375: LD_INT 1
58377: ST_TO_ADDR
// end ;
58378: LD_VAR 0 3
58382: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58383: LD_INT 0
58385: PPUSH
// result := false ;
58386: LD_ADDR_VAR 0 4
58390: PUSH
58391: LD_INT 0
58393: ST_TO_ADDR
// if GetTaskList ( unit ) then
58394: LD_VAR 0 1
58398: PPUSH
58399: CALL_OW 437
58403: IFFALSE 58486
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58405: LD_STRING M
58407: PUSH
58408: LD_VAR 0 1
58412: PPUSH
58413: CALL_OW 437
58417: PUSH
58418: LD_INT 1
58420: ARRAY
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: EQUAL
58426: PUSH
58427: LD_VAR 0 2
58431: PUSH
58432: LD_VAR 0 1
58436: PPUSH
58437: CALL_OW 437
58441: PUSH
58442: LD_INT 1
58444: ARRAY
58445: PUSH
58446: LD_INT 2
58448: ARRAY
58449: EQUAL
58450: AND
58451: PUSH
58452: LD_VAR 0 3
58456: PUSH
58457: LD_VAR 0 1
58461: PPUSH
58462: CALL_OW 437
58466: PUSH
58467: LD_INT 1
58469: ARRAY
58470: PUSH
58471: LD_INT 3
58473: ARRAY
58474: EQUAL
58475: AND
58476: IFFALSE 58486
// result := true ;
58478: LD_ADDR_VAR 0 4
58482: PUSH
58483: LD_INT 1
58485: ST_TO_ADDR
// end ; end ;
58486: LD_VAR 0 4
58490: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58491: LD_INT 0
58493: PPUSH
58494: PPUSH
58495: PPUSH
58496: PPUSH
// if not unit or not area then
58497: LD_VAR 0 1
58501: NOT
58502: PUSH
58503: LD_VAR 0 2
58507: NOT
58508: OR
58509: IFFALSE 58513
// exit ;
58511: GO 58677
// tmp := AreaToList ( area , i ) ;
58513: LD_ADDR_VAR 0 6
58517: PUSH
58518: LD_VAR 0 2
58522: PPUSH
58523: LD_VAR 0 5
58527: PPUSH
58528: CALL_OW 517
58532: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58533: LD_ADDR_VAR 0 5
58537: PUSH
58538: DOUBLE
58539: LD_INT 1
58541: DEC
58542: ST_TO_ADDR
58543: LD_VAR 0 6
58547: PUSH
58548: LD_INT 1
58550: ARRAY
58551: PUSH
58552: FOR_TO
58553: IFFALSE 58675
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58555: LD_ADDR_VAR 0 7
58559: PUSH
58560: LD_VAR 0 6
58564: PUSH
58565: LD_INT 1
58567: ARRAY
58568: PUSH
58569: LD_VAR 0 5
58573: ARRAY
58574: PUSH
58575: LD_VAR 0 6
58579: PUSH
58580: LD_INT 2
58582: ARRAY
58583: PUSH
58584: LD_VAR 0 5
58588: ARRAY
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58594: LD_VAR 0 7
58598: PUSH
58599: LD_INT 1
58601: ARRAY
58602: PPUSH
58603: LD_VAR 0 7
58607: PUSH
58608: LD_INT 2
58610: ARRAY
58611: PPUSH
58612: CALL_OW 428
58616: PUSH
58617: LD_INT 0
58619: EQUAL
58620: IFFALSE 58673
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58622: LD_VAR 0 1
58626: PPUSH
58627: LD_VAR 0 7
58631: PUSH
58632: LD_INT 1
58634: ARRAY
58635: PPUSH
58636: LD_VAR 0 7
58640: PUSH
58641: LD_INT 2
58643: ARRAY
58644: PPUSH
58645: LD_VAR 0 3
58649: PPUSH
58650: CALL_OW 48
// result := IsPlaced ( unit ) ;
58654: LD_ADDR_VAR 0 4
58658: PUSH
58659: LD_VAR 0 1
58663: PPUSH
58664: CALL_OW 305
58668: ST_TO_ADDR
// exit ;
58669: POP
58670: POP
58671: GO 58677
// end ; end ;
58673: GO 58552
58675: POP
58676: POP
// end ;
58677: LD_VAR 0 4
58681: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58682: LD_INT 0
58684: PPUSH
58685: PPUSH
58686: PPUSH
// if not side or side > 8 then
58687: LD_VAR 0 1
58691: NOT
58692: PUSH
58693: LD_VAR 0 1
58697: PUSH
58698: LD_INT 8
58700: GREATER
58701: OR
58702: IFFALSE 58706
// exit ;
58704: GO 58893
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58706: LD_ADDR_VAR 0 4
58710: PUSH
58711: LD_INT 22
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 21
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PPUSH
58737: CALL_OW 69
58741: ST_TO_ADDR
// if not tmp then
58742: LD_VAR 0 4
58746: NOT
58747: IFFALSE 58751
// exit ;
58749: GO 58893
// enable_addtolog := true ;
58751: LD_ADDR_OWVAR 81
58755: PUSH
58756: LD_INT 1
58758: ST_TO_ADDR
// AddToLog ( [ ) ;
58759: LD_STRING [
58761: PPUSH
58762: CALL_OW 561
// for i in tmp do
58766: LD_ADDR_VAR 0 3
58770: PUSH
58771: LD_VAR 0 4
58775: PUSH
58776: FOR_IN
58777: IFFALSE 58884
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58779: LD_STRING [
58781: PUSH
58782: LD_VAR 0 3
58786: PPUSH
58787: CALL_OW 266
58791: STR
58792: PUSH
58793: LD_STRING , 
58795: STR
58796: PUSH
58797: LD_VAR 0 3
58801: PPUSH
58802: CALL_OW 250
58806: STR
58807: PUSH
58808: LD_STRING , 
58810: STR
58811: PUSH
58812: LD_VAR 0 3
58816: PPUSH
58817: CALL_OW 251
58821: STR
58822: PUSH
58823: LD_STRING , 
58825: STR
58826: PUSH
58827: LD_VAR 0 3
58831: PPUSH
58832: CALL_OW 254
58836: STR
58837: PUSH
58838: LD_STRING , 
58840: STR
58841: PUSH
58842: LD_VAR 0 3
58846: PPUSH
58847: LD_INT 1
58849: PPUSH
58850: CALL_OW 268
58854: STR
58855: PUSH
58856: LD_STRING , 
58858: STR
58859: PUSH
58860: LD_VAR 0 3
58864: PPUSH
58865: LD_INT 2
58867: PPUSH
58868: CALL_OW 268
58872: STR
58873: PUSH
58874: LD_STRING ],
58876: STR
58877: PPUSH
58878: CALL_OW 561
// end ;
58882: GO 58776
58884: POP
58885: POP
// AddToLog ( ]; ) ;
58886: LD_STRING ];
58888: PPUSH
58889: CALL_OW 561
// end ;
58893: LD_VAR 0 2
58897: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58898: LD_INT 0
58900: PPUSH
58901: PPUSH
58902: PPUSH
58903: PPUSH
58904: PPUSH
// if not area or not rate or not max then
58905: LD_VAR 0 1
58909: NOT
58910: PUSH
58911: LD_VAR 0 2
58915: NOT
58916: OR
58917: PUSH
58918: LD_VAR 0 4
58922: NOT
58923: OR
58924: IFFALSE 58928
// exit ;
58926: GO 59117
// while 1 do
58928: LD_INT 1
58930: IFFALSE 59117
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58932: LD_ADDR_VAR 0 9
58936: PUSH
58937: LD_VAR 0 1
58941: PPUSH
58942: LD_INT 1
58944: PPUSH
58945: CALL_OW 287
58949: PUSH
58950: LD_INT 10
58952: MUL
58953: ST_TO_ADDR
// r := rate / 10 ;
58954: LD_ADDR_VAR 0 7
58958: PUSH
58959: LD_VAR 0 2
58963: PUSH
58964: LD_INT 10
58966: DIVREAL
58967: ST_TO_ADDR
// time := 1 1$00 ;
58968: LD_ADDR_VAR 0 8
58972: PUSH
58973: LD_INT 2100
58975: ST_TO_ADDR
// if amount < min then
58976: LD_VAR 0 9
58980: PUSH
58981: LD_VAR 0 3
58985: LESS
58986: IFFALSE 59004
// r := r * 2 else
58988: LD_ADDR_VAR 0 7
58992: PUSH
58993: LD_VAR 0 7
58997: PUSH
58998: LD_INT 2
59000: MUL
59001: ST_TO_ADDR
59002: GO 59030
// if amount > max then
59004: LD_VAR 0 9
59008: PUSH
59009: LD_VAR 0 4
59013: GREATER
59014: IFFALSE 59030
// r := r / 2 ;
59016: LD_ADDR_VAR 0 7
59020: PUSH
59021: LD_VAR 0 7
59025: PUSH
59026: LD_INT 2
59028: DIVREAL
59029: ST_TO_ADDR
// time := time / r ;
59030: LD_ADDR_VAR 0 8
59034: PUSH
59035: LD_VAR 0 8
59039: PUSH
59040: LD_VAR 0 7
59044: DIVREAL
59045: ST_TO_ADDR
// if time < 0 then
59046: LD_VAR 0 8
59050: PUSH
59051: LD_INT 0
59053: LESS
59054: IFFALSE 59071
// time := time * - 1 ;
59056: LD_ADDR_VAR 0 8
59060: PUSH
59061: LD_VAR 0 8
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: MUL
59070: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59071: LD_VAR 0 8
59075: PUSH
59076: LD_INT 35
59078: PPUSH
59079: LD_INT 875
59081: PPUSH
59082: CALL_OW 12
59086: PLUS
59087: PPUSH
59088: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59092: LD_INT 1
59094: PPUSH
59095: LD_INT 5
59097: PPUSH
59098: CALL_OW 12
59102: PPUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: LD_INT 1
59110: PPUSH
59111: CALL_OW 55
// end ;
59115: GO 58928
// end ;
59117: LD_VAR 0 5
59121: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59122: LD_INT 0
59124: PPUSH
59125: PPUSH
59126: PPUSH
59127: PPUSH
59128: PPUSH
59129: PPUSH
59130: PPUSH
59131: PPUSH
// if not turrets or not factories then
59132: LD_VAR 0 1
59136: NOT
59137: PUSH
59138: LD_VAR 0 2
59142: NOT
59143: OR
59144: IFFALSE 59148
// exit ;
59146: GO 59455
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59148: LD_ADDR_VAR 0 10
59152: PUSH
59153: LD_INT 5
59155: PUSH
59156: LD_INT 6
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: LD_INT 5
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 24
59190: PUSH
59191: LD_INT 25
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 23
59200: PUSH
59201: LD_INT 27
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 42
59214: PUSH
59215: LD_INT 43
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 44
59224: PUSH
59225: LD_INT 46
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 45
59234: PUSH
59235: LD_INT 47
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// result := [ ] ;
59252: LD_ADDR_VAR 0 3
59256: PUSH
59257: EMPTY
59258: ST_TO_ADDR
// for i in turrets do
59259: LD_ADDR_VAR 0 4
59263: PUSH
59264: LD_VAR 0 1
59268: PUSH
59269: FOR_IN
59270: IFFALSE 59453
// begin nat := GetNation ( i ) ;
59272: LD_ADDR_VAR 0 7
59276: PUSH
59277: LD_VAR 0 4
59281: PPUSH
59282: CALL_OW 248
59286: ST_TO_ADDR
// weapon := 0 ;
59287: LD_ADDR_VAR 0 8
59291: PUSH
59292: LD_INT 0
59294: ST_TO_ADDR
// if not nat then
59295: LD_VAR 0 7
59299: NOT
59300: IFFALSE 59304
// continue ;
59302: GO 59269
// for j in list [ nat ] do
59304: LD_ADDR_VAR 0 5
59308: PUSH
59309: LD_VAR 0 10
59313: PUSH
59314: LD_VAR 0 7
59318: ARRAY
59319: PUSH
59320: FOR_IN
59321: IFFALSE 59362
// if GetBWeapon ( i ) = j [ 1 ] then
59323: LD_VAR 0 4
59327: PPUSH
59328: CALL_OW 269
59332: PUSH
59333: LD_VAR 0 5
59337: PUSH
59338: LD_INT 1
59340: ARRAY
59341: EQUAL
59342: IFFALSE 59360
// begin weapon := j [ 2 ] ;
59344: LD_ADDR_VAR 0 8
59348: PUSH
59349: LD_VAR 0 5
59353: PUSH
59354: LD_INT 2
59356: ARRAY
59357: ST_TO_ADDR
// break ;
59358: GO 59362
// end ;
59360: GO 59320
59362: POP
59363: POP
// if not weapon then
59364: LD_VAR 0 8
59368: NOT
59369: IFFALSE 59373
// continue ;
59371: GO 59269
// for k in factories do
59373: LD_ADDR_VAR 0 6
59377: PUSH
59378: LD_VAR 0 2
59382: PUSH
59383: FOR_IN
59384: IFFALSE 59449
// begin weapons := AvailableWeaponList ( k ) ;
59386: LD_ADDR_VAR 0 9
59390: PUSH
59391: LD_VAR 0 6
59395: PPUSH
59396: CALL_OW 478
59400: ST_TO_ADDR
// if not weapons then
59401: LD_VAR 0 9
59405: NOT
59406: IFFALSE 59410
// continue ;
59408: GO 59383
// if weapon in weapons then
59410: LD_VAR 0 8
59414: PUSH
59415: LD_VAR 0 9
59419: IN
59420: IFFALSE 59447
// begin result := [ i , weapon ] ;
59422: LD_ADDR_VAR 0 3
59426: PUSH
59427: LD_VAR 0 4
59431: PUSH
59432: LD_VAR 0 8
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: ST_TO_ADDR
// exit ;
59441: POP
59442: POP
59443: POP
59444: POP
59445: GO 59455
// end ; end ;
59447: GO 59383
59449: POP
59450: POP
// end ;
59451: GO 59269
59453: POP
59454: POP
// end ;
59455: LD_VAR 0 3
59459: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59460: LD_INT 0
59462: PPUSH
// if not side or side > 8 then
59463: LD_VAR 0 3
59467: NOT
59468: PUSH
59469: LD_VAR 0 3
59473: PUSH
59474: LD_INT 8
59476: GREATER
59477: OR
59478: IFFALSE 59482
// exit ;
59480: GO 59541
// if not range then
59482: LD_VAR 0 4
59486: NOT
59487: IFFALSE 59498
// range := - 12 ;
59489: LD_ADDR_VAR 0 4
59493: PUSH
59494: LD_INT 12
59496: NEG
59497: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59498: LD_VAR 0 1
59502: PPUSH
59503: LD_VAR 0 2
59507: PPUSH
59508: LD_VAR 0 3
59512: PPUSH
59513: LD_VAR 0 4
59517: PPUSH
59518: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59522: LD_VAR 0 1
59526: PPUSH
59527: LD_VAR 0 2
59531: PPUSH
59532: LD_VAR 0 3
59536: PPUSH
59537: CALL_OW 331
// end ;
59541: LD_VAR 0 5
59545: RET
// export function Video ( mode ) ; begin
59546: LD_INT 0
59548: PPUSH
// ingame_video = mode ;
59549: LD_ADDR_OWVAR 52
59553: PUSH
59554: LD_VAR 0 1
59558: ST_TO_ADDR
// interface_hidden = mode ;
59559: LD_ADDR_OWVAR 54
59563: PUSH
59564: LD_VAR 0 1
59568: ST_TO_ADDR
// end ;
59569: LD_VAR 0 2
59573: RET
// export function Join ( array , element ) ; begin
59574: LD_INT 0
59576: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59577: LD_ADDR_VAR 0 3
59581: PUSH
59582: LD_VAR 0 1
59586: PPUSH
59587: LD_VAR 0 1
59591: PUSH
59592: LD_INT 1
59594: PLUS
59595: PPUSH
59596: LD_VAR 0 2
59600: PPUSH
59601: CALL_OW 1
59605: ST_TO_ADDR
// end ;
59606: LD_VAR 0 3
59610: RET
// export function JoinUnion ( array , element ) ; begin
59611: LD_INT 0
59613: PPUSH
// result := array union element ;
59614: LD_ADDR_VAR 0 3
59618: PUSH
59619: LD_VAR 0 1
59623: PUSH
59624: LD_VAR 0 2
59628: UNION
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 3
59634: RET
// export function GetBehemoths ( side ) ; begin
59635: LD_INT 0
59637: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59638: LD_ADDR_VAR 0 2
59642: PUSH
59643: LD_INT 22
59645: PUSH
59646: LD_VAR 0 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 31
59657: PUSH
59658: LD_INT 25
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PPUSH
59669: CALL_OW 69
59673: ST_TO_ADDR
// end ;
59674: LD_VAR 0 2
59678: RET
// export function Shuffle ( array ) ; var i , index ; begin
59679: LD_INT 0
59681: PPUSH
59682: PPUSH
59683: PPUSH
// result := [ ] ;
59684: LD_ADDR_VAR 0 2
59688: PUSH
59689: EMPTY
59690: ST_TO_ADDR
// if not array then
59691: LD_VAR 0 1
59695: NOT
59696: IFFALSE 59700
// exit ;
59698: GO 59799
// Randomize ;
59700: CALL_OW 10
// for i = array downto 1 do
59704: LD_ADDR_VAR 0 3
59708: PUSH
59709: DOUBLE
59710: LD_VAR 0 1
59714: INC
59715: ST_TO_ADDR
59716: LD_INT 1
59718: PUSH
59719: FOR_DOWNTO
59720: IFFALSE 59797
// begin index := rand ( 1 , array ) ;
59722: LD_ADDR_VAR 0 4
59726: PUSH
59727: LD_INT 1
59729: PPUSH
59730: LD_VAR 0 1
59734: PPUSH
59735: CALL_OW 12
59739: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59740: LD_ADDR_VAR 0 2
59744: PUSH
59745: LD_VAR 0 2
59749: PPUSH
59750: LD_VAR 0 2
59754: PUSH
59755: LD_INT 1
59757: PLUS
59758: PPUSH
59759: LD_VAR 0 1
59763: PUSH
59764: LD_VAR 0 4
59768: ARRAY
59769: PPUSH
59770: CALL_OW 2
59774: ST_TO_ADDR
// array := Delete ( array , index ) ;
59775: LD_ADDR_VAR 0 1
59779: PUSH
59780: LD_VAR 0 1
59784: PPUSH
59785: LD_VAR 0 4
59789: PPUSH
59790: CALL_OW 3
59794: ST_TO_ADDR
// end ;
59795: GO 59719
59797: POP
59798: POP
// end ;
59799: LD_VAR 0 2
59803: RET
// export function GetBaseMaterials ( base ) ; begin
59804: LD_INT 0
59806: PPUSH
// result := [ 0 , 0 , 0 ] ;
59807: LD_ADDR_VAR 0 2
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: LIST
59825: ST_TO_ADDR
// if not base then
59826: LD_VAR 0 1
59830: NOT
59831: IFFALSE 59835
// exit ;
59833: GO 59884
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59835: LD_ADDR_VAR 0 2
59839: PUSH
59840: LD_VAR 0 1
59844: PPUSH
59845: LD_INT 1
59847: PPUSH
59848: CALL_OW 275
59852: PUSH
59853: LD_VAR 0 1
59857: PPUSH
59858: LD_INT 2
59860: PPUSH
59861: CALL_OW 275
59865: PUSH
59866: LD_VAR 0 1
59870: PPUSH
59871: LD_INT 3
59873: PPUSH
59874: CALL_OW 275
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: LIST
59883: ST_TO_ADDR
// end ;
59884: LD_VAR 0 2
59888: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59889: LD_INT 0
59891: PPUSH
59892: PPUSH
// result := array ;
59893: LD_ADDR_VAR 0 3
59897: PUSH
59898: LD_VAR 0 1
59902: ST_TO_ADDR
// if size >= result then
59903: LD_VAR 0 2
59907: PUSH
59908: LD_VAR 0 3
59912: GREATEREQUAL
59913: IFFALSE 59917
// exit ;
59915: GO 59967
// if size then
59917: LD_VAR 0 2
59921: IFFALSE 59967
// for i := array downto size do
59923: LD_ADDR_VAR 0 4
59927: PUSH
59928: DOUBLE
59929: LD_VAR 0 1
59933: INC
59934: ST_TO_ADDR
59935: LD_VAR 0 2
59939: PUSH
59940: FOR_DOWNTO
59941: IFFALSE 59965
// result := Delete ( result , result ) ;
59943: LD_ADDR_VAR 0 3
59947: PUSH
59948: LD_VAR 0 3
59952: PPUSH
59953: LD_VAR 0 3
59957: PPUSH
59958: CALL_OW 3
59962: ST_TO_ADDR
59963: GO 59940
59965: POP
59966: POP
// end ;
59967: LD_VAR 0 3
59971: RET
// export function ComExit ( unit ) ; var tmp ; begin
59972: LD_INT 0
59974: PPUSH
59975: PPUSH
// if not IsInUnit ( unit ) then
59976: LD_VAR 0 1
59980: PPUSH
59981: CALL_OW 310
59985: NOT
59986: IFFALSE 59990
// exit ;
59988: GO 60050
// tmp := IsInUnit ( unit ) ;
59990: LD_ADDR_VAR 0 3
59994: PUSH
59995: LD_VAR 0 1
59999: PPUSH
60000: CALL_OW 310
60004: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60005: LD_VAR 0 3
60009: PPUSH
60010: CALL_OW 247
60014: PUSH
60015: LD_INT 2
60017: EQUAL
60018: IFFALSE 60031
// ComExitVehicle ( unit ) else
60020: LD_VAR 0 1
60024: PPUSH
60025: CALL_OW 121
60029: GO 60040
// ComExitBuilding ( unit ) ;
60031: LD_VAR 0 1
60035: PPUSH
60036: CALL_OW 122
// result := tmp ;
60040: LD_ADDR_VAR 0 2
60044: PUSH
60045: LD_VAR 0 3
60049: ST_TO_ADDR
// end ;
60050: LD_VAR 0 2
60054: RET
// export function ComExitAll ( units ) ; var i ; begin
60055: LD_INT 0
60057: PPUSH
60058: PPUSH
// if not units then
60059: LD_VAR 0 1
60063: NOT
60064: IFFALSE 60068
// exit ;
60066: GO 60094
// for i in units do
60068: LD_ADDR_VAR 0 3
60072: PUSH
60073: LD_VAR 0 1
60077: PUSH
60078: FOR_IN
60079: IFFALSE 60092
// ComExit ( i ) ;
60081: LD_VAR 0 3
60085: PPUSH
60086: CALL 59972 0 1
60090: GO 60078
60092: POP
60093: POP
// end ;
60094: LD_VAR 0 2
60098: RET
// export function ResetHc ; begin
60099: LD_INT 0
60101: PPUSH
// InitHc ;
60102: CALL_OW 19
// hc_importance := 0 ;
60106: LD_ADDR_OWVAR 32
60110: PUSH
60111: LD_INT 0
60113: ST_TO_ADDR
// end ;
60114: LD_VAR 0 1
60118: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60119: LD_INT 0
60121: PPUSH
60122: PPUSH
60123: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60124: LD_ADDR_VAR 0 6
60128: PUSH
60129: LD_VAR 0 1
60133: PUSH
60134: LD_VAR 0 3
60138: PLUS
60139: PUSH
60140: LD_INT 2
60142: DIV
60143: ST_TO_ADDR
// if _x < 0 then
60144: LD_VAR 0 6
60148: PUSH
60149: LD_INT 0
60151: LESS
60152: IFFALSE 60169
// _x := _x * - 1 ;
60154: LD_ADDR_VAR 0 6
60158: PUSH
60159: LD_VAR 0 6
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: MUL
60168: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60169: LD_ADDR_VAR 0 7
60173: PUSH
60174: LD_VAR 0 2
60178: PUSH
60179: LD_VAR 0 4
60183: PLUS
60184: PUSH
60185: LD_INT 2
60187: DIV
60188: ST_TO_ADDR
// if _y < 0 then
60189: LD_VAR 0 7
60193: PUSH
60194: LD_INT 0
60196: LESS
60197: IFFALSE 60214
// _y := _y * - 1 ;
60199: LD_ADDR_VAR 0 7
60203: PUSH
60204: LD_VAR 0 7
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: MUL
60213: ST_TO_ADDR
// result := [ _x , _y ] ;
60214: LD_ADDR_VAR 0 5
60218: PUSH
60219: LD_VAR 0 6
60223: PUSH
60224: LD_VAR 0 7
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: ST_TO_ADDR
// end ;
60233: LD_VAR 0 5
60237: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60238: LD_INT 0
60240: PPUSH
60241: PPUSH
60242: PPUSH
60243: PPUSH
// task := GetTaskList ( unit ) ;
60244: LD_ADDR_VAR 0 7
60248: PUSH
60249: LD_VAR 0 1
60253: PPUSH
60254: CALL_OW 437
60258: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60259: LD_VAR 0 7
60263: NOT
60264: PUSH
60265: LD_VAR 0 1
60269: PPUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: CALL_OW 308
60279: NOT
60280: AND
60281: IFFALSE 60285
// exit ;
60283: GO 60403
// if IsInArea ( unit , area ) then
60285: LD_VAR 0 1
60289: PPUSH
60290: LD_VAR 0 2
60294: PPUSH
60295: CALL_OW 308
60299: IFFALSE 60317
// begin ComMoveToArea ( unit , goAway ) ;
60301: LD_VAR 0 1
60305: PPUSH
60306: LD_VAR 0 3
60310: PPUSH
60311: CALL_OW 113
// exit ;
60315: GO 60403
// end ; if task [ 1 ] [ 1 ] <> M then
60317: LD_VAR 0 7
60321: PUSH
60322: LD_INT 1
60324: ARRAY
60325: PUSH
60326: LD_INT 1
60328: ARRAY
60329: PUSH
60330: LD_STRING M
60332: NONEQUAL
60333: IFFALSE 60337
// exit ;
60335: GO 60403
// x := task [ 1 ] [ 2 ] ;
60337: LD_ADDR_VAR 0 5
60341: PUSH
60342: LD_VAR 0 7
60346: PUSH
60347: LD_INT 1
60349: ARRAY
60350: PUSH
60351: LD_INT 2
60353: ARRAY
60354: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60355: LD_ADDR_VAR 0 6
60359: PUSH
60360: LD_VAR 0 7
60364: PUSH
60365: LD_INT 1
60367: ARRAY
60368: PUSH
60369: LD_INT 3
60371: ARRAY
60372: ST_TO_ADDR
// if InArea ( x , y , area ) then
60373: LD_VAR 0 5
60377: PPUSH
60378: LD_VAR 0 6
60382: PPUSH
60383: LD_VAR 0 2
60387: PPUSH
60388: CALL_OW 309
60392: IFFALSE 60403
// ComStop ( unit ) ;
60394: LD_VAR 0 1
60398: PPUSH
60399: CALL_OW 141
// end ;
60403: LD_VAR 0 4
60407: RET
// export function Abs ( value ) ; begin
60408: LD_INT 0
60410: PPUSH
// result := value ;
60411: LD_ADDR_VAR 0 2
60415: PUSH
60416: LD_VAR 0 1
60420: ST_TO_ADDR
// if value < 0 then
60421: LD_VAR 0 1
60425: PUSH
60426: LD_INT 0
60428: LESS
60429: IFFALSE 60446
// result := value * - 1 ;
60431: LD_ADDR_VAR 0 2
60435: PUSH
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: MUL
60445: ST_TO_ADDR
// end ;
60446: LD_VAR 0 2
60450: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60451: LD_INT 0
60453: PPUSH
60454: PPUSH
60455: PPUSH
60456: PPUSH
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
// if not unit or not building then
60461: LD_VAR 0 1
60465: NOT
60466: PUSH
60467: LD_VAR 0 2
60471: NOT
60472: OR
60473: IFFALSE 60477
// exit ;
60475: GO 60703
// x := GetX ( building ) ;
60477: LD_ADDR_VAR 0 4
60481: PUSH
60482: LD_VAR 0 2
60486: PPUSH
60487: CALL_OW 250
60491: ST_TO_ADDR
// y := GetY ( building ) ;
60492: LD_ADDR_VAR 0 6
60496: PUSH
60497: LD_VAR 0 2
60501: PPUSH
60502: CALL_OW 251
60506: ST_TO_ADDR
// d := GetDir ( building ) ;
60507: LD_ADDR_VAR 0 8
60511: PUSH
60512: LD_VAR 0 2
60516: PPUSH
60517: CALL_OW 254
60521: ST_TO_ADDR
// r := 4 ;
60522: LD_ADDR_VAR 0 9
60526: PUSH
60527: LD_INT 4
60529: ST_TO_ADDR
// for i := 1 to 5 do
60530: LD_ADDR_VAR 0 10
60534: PUSH
60535: DOUBLE
60536: LD_INT 1
60538: DEC
60539: ST_TO_ADDR
60540: LD_INT 5
60542: PUSH
60543: FOR_TO
60544: IFFALSE 60701
// begin _x := ShiftX ( x , d , r + i ) ;
60546: LD_ADDR_VAR 0 5
60550: PUSH
60551: LD_VAR 0 4
60555: PPUSH
60556: LD_VAR 0 8
60560: PPUSH
60561: LD_VAR 0 9
60565: PUSH
60566: LD_VAR 0 10
60570: PLUS
60571: PPUSH
60572: CALL_OW 272
60576: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60577: LD_ADDR_VAR 0 7
60581: PUSH
60582: LD_VAR 0 6
60586: PPUSH
60587: LD_VAR 0 8
60591: PPUSH
60592: LD_VAR 0 9
60596: PUSH
60597: LD_VAR 0 10
60601: PLUS
60602: PPUSH
60603: CALL_OW 273
60607: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60608: LD_VAR 0 5
60612: PPUSH
60613: LD_VAR 0 7
60617: PPUSH
60618: CALL_OW 488
60622: PUSH
60623: LD_VAR 0 5
60627: PPUSH
60628: LD_VAR 0 7
60632: PPUSH
60633: CALL_OW 428
60637: PPUSH
60638: CALL_OW 247
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: IN
60653: NOT
60654: AND
60655: IFFALSE 60699
// begin ComMoveXY ( unit , _x , _y ) ;
60657: LD_VAR 0 1
60661: PPUSH
60662: LD_VAR 0 5
60666: PPUSH
60667: LD_VAR 0 7
60671: PPUSH
60672: CALL_OW 111
// result := [ _x , _y ] ;
60676: LD_ADDR_VAR 0 3
60680: PUSH
60681: LD_VAR 0 5
60685: PUSH
60686: LD_VAR 0 7
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// exit ;
60695: POP
60696: POP
60697: GO 60703
// end ; end ;
60699: GO 60543
60701: POP
60702: POP
// end ;
60703: LD_VAR 0 3
60707: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60708: LD_INT 0
60710: PPUSH
60711: PPUSH
60712: PPUSH
// result := 0 ;
60713: LD_ADDR_VAR 0 3
60717: PUSH
60718: LD_INT 0
60720: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60721: LD_VAR 0 1
60725: PUSH
60726: LD_INT 0
60728: LESS
60729: PUSH
60730: LD_VAR 0 1
60734: PUSH
60735: LD_INT 8
60737: GREATER
60738: OR
60739: PUSH
60740: LD_VAR 0 2
60744: PUSH
60745: LD_INT 0
60747: LESS
60748: OR
60749: PUSH
60750: LD_VAR 0 2
60754: PUSH
60755: LD_INT 8
60757: GREATER
60758: OR
60759: IFFALSE 60763
// exit ;
60761: GO 60838
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60763: LD_ADDR_VAR 0 4
60767: PUSH
60768: LD_INT 22
60770: PUSH
60771: LD_VAR 0 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PPUSH
60780: CALL_OW 69
60784: PUSH
60785: FOR_IN
60786: IFFALSE 60836
// begin un := UnitShoot ( i ) ;
60788: LD_ADDR_VAR 0 5
60792: PUSH
60793: LD_VAR 0 4
60797: PPUSH
60798: CALL_OW 504
60802: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60803: LD_VAR 0 5
60807: PPUSH
60808: CALL_OW 255
60812: PUSH
60813: LD_VAR 0 1
60817: EQUAL
60818: IFFALSE 60834
// begin result := un ;
60820: LD_ADDR_VAR 0 3
60824: PUSH
60825: LD_VAR 0 5
60829: ST_TO_ADDR
// exit ;
60830: POP
60831: POP
60832: GO 60838
// end ; end ;
60834: GO 60785
60836: POP
60837: POP
// end ;
60838: LD_VAR 0 3
60842: RET
// export function GetCargoBay ( units ) ; begin
60843: LD_INT 0
60845: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60846: LD_ADDR_VAR 0 2
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 34
60861: PUSH
60862: LD_INT 12
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 34
60871: PUSH
60872: LD_INT 51
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 34
60881: PUSH
60882: LD_INT 32
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 34
60891: PUSH
60892: LD_INT 89
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: PPUSH
60906: CALL_OW 72
60910: ST_TO_ADDR
// end ;
60911: LD_VAR 0 2
60915: RET
// export function Negate ( value ) ; begin
60916: LD_INT 0
60918: PPUSH
// result := not value ;
60919: LD_ADDR_VAR 0 2
60923: PUSH
60924: LD_VAR 0 1
60928: NOT
60929: ST_TO_ADDR
// end ;
60930: LD_VAR 0 2
60934: RET
// export function Inc ( value ) ; begin
60935: LD_INT 0
60937: PPUSH
// result := value + 1 ;
60938: LD_ADDR_VAR 0 2
60942: PUSH
60943: LD_VAR 0 1
60947: PUSH
60948: LD_INT 1
60950: PLUS
60951: ST_TO_ADDR
// end ;
60952: LD_VAR 0 2
60956: RET
// export function Dec ( value ) ; begin
60957: LD_INT 0
60959: PPUSH
// result := value - 1 ;
60960: LD_ADDR_VAR 0 2
60964: PUSH
60965: LD_VAR 0 1
60969: PUSH
60970: LD_INT 1
60972: MINUS
60973: ST_TO_ADDR
// end ;
60974: LD_VAR 0 2
60978: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60979: LD_INT 0
60981: PPUSH
60982: PPUSH
60983: PPUSH
60984: PPUSH
60985: PPUSH
60986: PPUSH
60987: PPUSH
60988: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60989: LD_VAR 0 1
60993: PPUSH
60994: LD_VAR 0 2
60998: PPUSH
60999: CALL_OW 488
61003: NOT
61004: PUSH
61005: LD_VAR 0 3
61009: PPUSH
61010: LD_VAR 0 4
61014: PPUSH
61015: CALL_OW 488
61019: NOT
61020: OR
61021: IFFALSE 61034
// begin result := - 1 ;
61023: LD_ADDR_VAR 0 5
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: ST_TO_ADDR
// exit ;
61032: GO 61269
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61034: LD_ADDR_VAR 0 12
61038: PUSH
61039: LD_VAR 0 1
61043: PPUSH
61044: LD_VAR 0 2
61048: PPUSH
61049: LD_VAR 0 3
61053: PPUSH
61054: LD_VAR 0 4
61058: PPUSH
61059: CALL 60119 0 4
61063: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61064: LD_ADDR_VAR 0 11
61068: PUSH
61069: LD_VAR 0 1
61073: PPUSH
61074: LD_VAR 0 2
61078: PPUSH
61079: LD_VAR 0 12
61083: PUSH
61084: LD_INT 1
61086: ARRAY
61087: PPUSH
61088: LD_VAR 0 12
61092: PUSH
61093: LD_INT 2
61095: ARRAY
61096: PPUSH
61097: CALL_OW 298
61101: ST_TO_ADDR
// distance := 9999 ;
61102: LD_ADDR_VAR 0 10
61106: PUSH
61107: LD_INT 9999
61109: ST_TO_ADDR
// for i := 0 to 5 do
61110: LD_ADDR_VAR 0 6
61114: PUSH
61115: DOUBLE
61116: LD_INT 0
61118: DEC
61119: ST_TO_ADDR
61120: LD_INT 5
61122: PUSH
61123: FOR_TO
61124: IFFALSE 61267
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61126: LD_ADDR_VAR 0 7
61130: PUSH
61131: LD_VAR 0 1
61135: PPUSH
61136: LD_VAR 0 6
61140: PPUSH
61141: LD_VAR 0 11
61145: PPUSH
61146: CALL_OW 272
61150: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61151: LD_ADDR_VAR 0 8
61155: PUSH
61156: LD_VAR 0 2
61160: PPUSH
61161: LD_VAR 0 6
61165: PPUSH
61166: LD_VAR 0 11
61170: PPUSH
61171: CALL_OW 273
61175: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61176: LD_VAR 0 7
61180: PPUSH
61181: LD_VAR 0 8
61185: PPUSH
61186: CALL_OW 488
61190: NOT
61191: IFFALSE 61195
// continue ;
61193: GO 61123
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61195: LD_ADDR_VAR 0 9
61199: PUSH
61200: LD_VAR 0 12
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PPUSH
61209: LD_VAR 0 12
61213: PUSH
61214: LD_INT 2
61216: ARRAY
61217: PPUSH
61218: LD_VAR 0 7
61222: PPUSH
61223: LD_VAR 0 8
61227: PPUSH
61228: CALL_OW 298
61232: ST_TO_ADDR
// if tmp < distance then
61233: LD_VAR 0 9
61237: PUSH
61238: LD_VAR 0 10
61242: LESS
61243: IFFALSE 61265
// begin result := i ;
61245: LD_ADDR_VAR 0 5
61249: PUSH
61250: LD_VAR 0 6
61254: ST_TO_ADDR
// distance := tmp ;
61255: LD_ADDR_VAR 0 10
61259: PUSH
61260: LD_VAR 0 9
61264: ST_TO_ADDR
// end ; end ;
61265: GO 61123
61267: POP
61268: POP
// end ;
61269: LD_VAR 0 5
61273: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61274: LD_INT 0
61276: PPUSH
61277: PPUSH
// if not driver or not IsInUnit ( driver ) then
61278: LD_VAR 0 1
61282: NOT
61283: PUSH
61284: LD_VAR 0 1
61288: PPUSH
61289: CALL_OW 310
61293: NOT
61294: OR
61295: IFFALSE 61299
// exit ;
61297: GO 61389
// vehicle := IsInUnit ( driver ) ;
61299: LD_ADDR_VAR 0 3
61303: PUSH
61304: LD_VAR 0 1
61308: PPUSH
61309: CALL_OW 310
61313: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61314: LD_VAR 0 1
61318: PPUSH
61319: LD_STRING \
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: PUSH
61349: LD_STRING E
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_VAR 0 3
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PPUSH
61385: CALL_OW 446
// end ;
61389: LD_VAR 0 2
61393: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61394: LD_INT 0
61396: PPUSH
61397: PPUSH
// if not driver or not IsInUnit ( driver ) then
61398: LD_VAR 0 1
61402: NOT
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 310
61413: NOT
61414: OR
61415: IFFALSE 61419
// exit ;
61417: GO 61509
// vehicle := IsInUnit ( driver ) ;
61419: LD_ADDR_VAR 0 3
61423: PUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: CALL_OW 310
61433: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61434: LD_VAR 0 1
61438: PPUSH
61439: LD_STRING \
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_STRING E
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_VAR 0 3
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PPUSH
61505: CALL_OW 447
// end ;
61509: LD_VAR 0 2
61513: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61514: LD_INT 0
61516: PPUSH
61517: PPUSH
61518: PPUSH
// tmp := [ ] ;
61519: LD_ADDR_VAR 0 5
61523: PUSH
61524: EMPTY
61525: ST_TO_ADDR
// for i in units do
61526: LD_ADDR_VAR 0 4
61530: PUSH
61531: LD_VAR 0 1
61535: PUSH
61536: FOR_IN
61537: IFFALSE 61575
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61539: LD_ADDR_VAR 0 5
61543: PUSH
61544: LD_VAR 0 5
61548: PPUSH
61549: LD_VAR 0 5
61553: PUSH
61554: LD_INT 1
61556: PLUS
61557: PPUSH
61558: LD_VAR 0 4
61562: PPUSH
61563: CALL_OW 256
61567: PPUSH
61568: CALL_OW 2
61572: ST_TO_ADDR
61573: GO 61536
61575: POP
61576: POP
// if not tmp then
61577: LD_VAR 0 5
61581: NOT
61582: IFFALSE 61586
// exit ;
61584: GO 61634
// if asc then
61586: LD_VAR 0 2
61590: IFFALSE 61614
// result := SortListByListAsc ( units , tmp ) else
61592: LD_ADDR_VAR 0 3
61596: PUSH
61597: LD_VAR 0 1
61601: PPUSH
61602: LD_VAR 0 5
61606: PPUSH
61607: CALL_OW 76
61611: ST_TO_ADDR
61612: GO 61634
// result := SortListByListDesc ( units , tmp ) ;
61614: LD_ADDR_VAR 0 3
61618: PUSH
61619: LD_VAR 0 1
61623: PPUSH
61624: LD_VAR 0 5
61628: PPUSH
61629: CALL_OW 77
61633: ST_TO_ADDR
// end ;
61634: LD_VAR 0 3
61638: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61639: LD_INT 0
61641: PPUSH
61642: PPUSH
// task := GetTaskList ( mech ) ;
61643: LD_ADDR_VAR 0 4
61647: PUSH
61648: LD_VAR 0 1
61652: PPUSH
61653: CALL_OW 437
61657: ST_TO_ADDR
// if not task then
61658: LD_VAR 0 4
61662: NOT
61663: IFFALSE 61667
// exit ;
61665: GO 61709
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61667: LD_ADDR_VAR 0 3
61671: PUSH
61672: LD_VAR 0 4
61676: PUSH
61677: LD_INT 1
61679: ARRAY
61680: PUSH
61681: LD_INT 1
61683: ARRAY
61684: PUSH
61685: LD_STRING r
61687: EQUAL
61688: PUSH
61689: LD_VAR 0 4
61693: PUSH
61694: LD_INT 1
61696: ARRAY
61697: PUSH
61698: LD_INT 4
61700: ARRAY
61701: PUSH
61702: LD_VAR 0 2
61706: EQUAL
61707: AND
61708: ST_TO_ADDR
// end ;
61709: LD_VAR 0 3
61713: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61714: LD_INT 0
61716: PPUSH
// SetDir ( unit , d ) ;
61717: LD_VAR 0 1
61721: PPUSH
61722: LD_VAR 0 4
61726: PPUSH
61727: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61731: LD_VAR 0 1
61735: PPUSH
61736: LD_VAR 0 2
61740: PPUSH
61741: LD_VAR 0 3
61745: PPUSH
61746: LD_VAR 0 5
61750: PPUSH
61751: CALL_OW 48
// end ;
61755: LD_VAR 0 6
61759: RET
// export function ToNaturalNumber ( number ) ; begin
61760: LD_INT 0
61762: PPUSH
// result := number div 1 ;
61763: LD_ADDR_VAR 0 2
61767: PUSH
61768: LD_VAR 0 1
61772: PUSH
61773: LD_INT 1
61775: DIV
61776: ST_TO_ADDR
// if number < 0 then
61777: LD_VAR 0 1
61781: PUSH
61782: LD_INT 0
61784: LESS
61785: IFFALSE 61795
// result := 0 ;
61787: LD_ADDR_VAR 0 2
61791: PUSH
61792: LD_INT 0
61794: ST_TO_ADDR
// end ;
61795: LD_VAR 0 2
61799: RET
// export function SortByClass ( units , class ) ; var un ; begin
61800: LD_INT 0
61802: PPUSH
61803: PPUSH
// if not units or not class then
61804: LD_VAR 0 1
61808: NOT
61809: PUSH
61810: LD_VAR 0 2
61814: NOT
61815: OR
61816: IFFALSE 61820
// exit ;
61818: GO 61915
// result := [ ] ;
61820: LD_ADDR_VAR 0 3
61824: PUSH
61825: EMPTY
61826: ST_TO_ADDR
// for un in units do
61827: LD_ADDR_VAR 0 4
61831: PUSH
61832: LD_VAR 0 1
61836: PUSH
61837: FOR_IN
61838: IFFALSE 61913
// if GetClass ( un ) = class then
61840: LD_VAR 0 4
61844: PPUSH
61845: CALL_OW 257
61849: PUSH
61850: LD_VAR 0 2
61854: EQUAL
61855: IFFALSE 61882
// result := Insert ( result , 1 , un ) else
61857: LD_ADDR_VAR 0 3
61861: PUSH
61862: LD_VAR 0 3
61866: PPUSH
61867: LD_INT 1
61869: PPUSH
61870: LD_VAR 0 4
61874: PPUSH
61875: CALL_OW 2
61879: ST_TO_ADDR
61880: GO 61911
// result := Replace ( result , result + 1 , un ) ;
61882: LD_ADDR_VAR 0 3
61886: PUSH
61887: LD_VAR 0 3
61891: PPUSH
61892: LD_VAR 0 3
61896: PUSH
61897: LD_INT 1
61899: PLUS
61900: PPUSH
61901: LD_VAR 0 4
61905: PPUSH
61906: CALL_OW 1
61910: ST_TO_ADDR
61911: GO 61837
61913: POP
61914: POP
// end ;
61915: LD_VAR 0 3
61919: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61920: LD_INT 0
61922: PPUSH
61923: PPUSH
61924: PPUSH
61925: PPUSH
61926: PPUSH
61927: PPUSH
61928: PPUSH
// result := [ ] ;
61929: LD_ADDR_VAR 0 4
61933: PUSH
61934: EMPTY
61935: ST_TO_ADDR
// if x - r < 0 then
61936: LD_VAR 0 1
61940: PUSH
61941: LD_VAR 0 3
61945: MINUS
61946: PUSH
61947: LD_INT 0
61949: LESS
61950: IFFALSE 61962
// min_x := 0 else
61952: LD_ADDR_VAR 0 8
61956: PUSH
61957: LD_INT 0
61959: ST_TO_ADDR
61960: GO 61978
// min_x := x - r ;
61962: LD_ADDR_VAR 0 8
61966: PUSH
61967: LD_VAR 0 1
61971: PUSH
61972: LD_VAR 0 3
61976: MINUS
61977: ST_TO_ADDR
// if y - r < 0 then
61978: LD_VAR 0 2
61982: PUSH
61983: LD_VAR 0 3
61987: MINUS
61988: PUSH
61989: LD_INT 0
61991: LESS
61992: IFFALSE 62004
// min_y := 0 else
61994: LD_ADDR_VAR 0 7
61998: PUSH
61999: LD_INT 0
62001: ST_TO_ADDR
62002: GO 62020
// min_y := y - r ;
62004: LD_ADDR_VAR 0 7
62008: PUSH
62009: LD_VAR 0 2
62013: PUSH
62014: LD_VAR 0 3
62018: MINUS
62019: ST_TO_ADDR
// max_x := x + r ;
62020: LD_ADDR_VAR 0 9
62024: PUSH
62025: LD_VAR 0 1
62029: PUSH
62030: LD_VAR 0 3
62034: PLUS
62035: ST_TO_ADDR
// max_y := y + r ;
62036: LD_ADDR_VAR 0 10
62040: PUSH
62041: LD_VAR 0 2
62045: PUSH
62046: LD_VAR 0 3
62050: PLUS
62051: ST_TO_ADDR
// for _x = min_x to max_x do
62052: LD_ADDR_VAR 0 5
62056: PUSH
62057: DOUBLE
62058: LD_VAR 0 8
62062: DEC
62063: ST_TO_ADDR
62064: LD_VAR 0 9
62068: PUSH
62069: FOR_TO
62070: IFFALSE 62171
// for _y = min_y to max_y do
62072: LD_ADDR_VAR 0 6
62076: PUSH
62077: DOUBLE
62078: LD_VAR 0 7
62082: DEC
62083: ST_TO_ADDR
62084: LD_VAR 0 10
62088: PUSH
62089: FOR_TO
62090: IFFALSE 62167
// begin if not ValidHex ( _x , _y ) then
62092: LD_VAR 0 5
62096: PPUSH
62097: LD_VAR 0 6
62101: PPUSH
62102: CALL_OW 488
62106: NOT
62107: IFFALSE 62111
// continue ;
62109: GO 62089
// if GetResourceTypeXY ( _x , _y ) then
62111: LD_VAR 0 5
62115: PPUSH
62116: LD_VAR 0 6
62120: PPUSH
62121: CALL_OW 283
62125: IFFALSE 62165
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62127: LD_ADDR_VAR 0 4
62131: PUSH
62132: LD_VAR 0 4
62136: PPUSH
62137: LD_VAR 0 4
62141: PUSH
62142: LD_INT 1
62144: PLUS
62145: PPUSH
62146: LD_VAR 0 5
62150: PUSH
62151: LD_VAR 0 6
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PPUSH
62160: CALL_OW 1
62164: ST_TO_ADDR
// end ;
62165: GO 62089
62167: POP
62168: POP
62169: GO 62069
62171: POP
62172: POP
// end ;
62173: LD_VAR 0 4
62177: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62178: LD_INT 0
62180: PPUSH
62181: PPUSH
62182: PPUSH
62183: PPUSH
62184: PPUSH
62185: PPUSH
62186: PPUSH
62187: PPUSH
// if not units then
62188: LD_VAR 0 1
62192: NOT
62193: IFFALSE 62197
// exit ;
62195: GO 62721
// result := UnitFilter ( units , [ f_ok ] ) ;
62197: LD_ADDR_VAR 0 3
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: LD_INT 50
62209: PUSH
62210: EMPTY
62211: LIST
62212: PPUSH
62213: CALL_OW 72
62217: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62218: LD_ADDR_VAR 0 8
62222: PUSH
62223: LD_VAR 0 1
62227: PUSH
62228: LD_INT 1
62230: ARRAY
62231: PPUSH
62232: CALL_OW 255
62236: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62237: LD_ADDR_VAR 0 10
62241: PUSH
62242: LD_INT 29
62244: PUSH
62245: LD_INT 91
62247: PUSH
62248: LD_INT 49
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: ST_TO_ADDR
// if not result then
62256: LD_VAR 0 3
62260: NOT
62261: IFFALSE 62265
// exit ;
62263: GO 62721
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62265: LD_ADDR_VAR 0 5
62269: PUSH
62270: LD_INT 81
62272: PUSH
62273: LD_VAR 0 8
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PPUSH
62282: CALL_OW 69
62286: ST_TO_ADDR
// for i in result do
62287: LD_ADDR_VAR 0 4
62291: PUSH
62292: LD_VAR 0 3
62296: PUSH
62297: FOR_IN
62298: IFFALSE 62719
// begin tag := GetTag ( i ) + 1 ;
62300: LD_ADDR_VAR 0 9
62304: PUSH
62305: LD_VAR 0 4
62309: PPUSH
62310: CALL_OW 110
62314: PUSH
62315: LD_INT 1
62317: PLUS
62318: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62319: LD_ADDR_VAR 0 7
62323: PUSH
62324: LD_VAR 0 4
62328: PPUSH
62329: CALL_OW 250
62333: PPUSH
62334: LD_VAR 0 4
62338: PPUSH
62339: CALL_OW 251
62343: PPUSH
62344: LD_INT 6
62346: PPUSH
62347: CALL 61920 0 3
62351: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62352: LD_VAR 0 4
62356: PPUSH
62357: CALL_OW 247
62361: PUSH
62362: LD_INT 2
62364: EQUAL
62365: PUSH
62366: LD_VAR 0 7
62370: AND
62371: PUSH
62372: LD_VAR 0 4
62376: PPUSH
62377: CALL_OW 264
62381: PUSH
62382: LD_VAR 0 10
62386: IN
62387: NOT
62388: AND
62389: IFFALSE 62428
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62391: LD_VAR 0 4
62395: PPUSH
62396: LD_VAR 0 7
62400: PUSH
62401: LD_INT 1
62403: ARRAY
62404: PUSH
62405: LD_INT 1
62407: ARRAY
62408: PPUSH
62409: LD_VAR 0 7
62413: PUSH
62414: LD_INT 1
62416: ARRAY
62417: PUSH
62418: LD_INT 2
62420: ARRAY
62421: PPUSH
62422: CALL_OW 116
62426: GO 62717
// if path > tag then
62428: LD_VAR 0 2
62432: PUSH
62433: LD_VAR 0 9
62437: GREATER
62438: IFFALSE 62646
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62440: LD_ADDR_VAR 0 6
62444: PUSH
62445: LD_VAR 0 5
62449: PPUSH
62450: LD_INT 91
62452: PUSH
62453: LD_VAR 0 4
62457: PUSH
62458: LD_INT 8
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: PPUSH
62466: CALL_OW 72
62470: ST_TO_ADDR
// if nearEnemy then
62471: LD_VAR 0 6
62475: IFFALSE 62544
// begin if GetWeapon ( i ) = ru_time_lapser then
62477: LD_VAR 0 4
62481: PPUSH
62482: CALL_OW 264
62486: PUSH
62487: LD_INT 49
62489: EQUAL
62490: IFFALSE 62518
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62492: LD_VAR 0 4
62496: PPUSH
62497: LD_VAR 0 6
62501: PPUSH
62502: LD_VAR 0 4
62506: PPUSH
62507: CALL_OW 74
62511: PPUSH
62512: CALL_OW 112
62516: GO 62542
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62518: LD_VAR 0 4
62522: PPUSH
62523: LD_VAR 0 6
62527: PPUSH
62528: LD_VAR 0 4
62532: PPUSH
62533: CALL_OW 74
62537: PPUSH
62538: CALL_OW 115
// end else
62542: GO 62644
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62544: LD_VAR 0 4
62548: PPUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_VAR 0 9
62558: ARRAY
62559: PUSH
62560: LD_INT 1
62562: ARRAY
62563: PPUSH
62564: LD_VAR 0 2
62568: PUSH
62569: LD_VAR 0 9
62573: ARRAY
62574: PUSH
62575: LD_INT 2
62577: ARRAY
62578: PPUSH
62579: CALL_OW 297
62583: PUSH
62584: LD_INT 6
62586: GREATER
62587: IFFALSE 62630
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62589: LD_VAR 0 4
62593: PPUSH
62594: LD_VAR 0 2
62598: PUSH
62599: LD_VAR 0 9
62603: ARRAY
62604: PUSH
62605: LD_INT 1
62607: ARRAY
62608: PPUSH
62609: LD_VAR 0 2
62613: PUSH
62614: LD_VAR 0 9
62618: ARRAY
62619: PUSH
62620: LD_INT 2
62622: ARRAY
62623: PPUSH
62624: CALL_OW 114
62628: GO 62644
// SetTag ( i , tag ) ;
62630: LD_VAR 0 4
62634: PPUSH
62635: LD_VAR 0 9
62639: PPUSH
62640: CALL_OW 109
// end else
62644: GO 62717
// if enemy then
62646: LD_VAR 0 5
62650: IFFALSE 62717
// begin if GetWeapon ( i ) = ru_time_lapser then
62652: LD_VAR 0 4
62656: PPUSH
62657: CALL_OW 264
62661: PUSH
62662: LD_INT 49
62664: EQUAL
62665: IFFALSE 62693
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62667: LD_VAR 0 4
62671: PPUSH
62672: LD_VAR 0 5
62676: PPUSH
62677: LD_VAR 0 4
62681: PPUSH
62682: CALL_OW 74
62686: PPUSH
62687: CALL_OW 112
62691: GO 62717
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62693: LD_VAR 0 4
62697: PPUSH
62698: LD_VAR 0 5
62702: PPUSH
62703: LD_VAR 0 4
62707: PPUSH
62708: CALL_OW 74
62712: PPUSH
62713: CALL_OW 115
// end ; end ;
62717: GO 62297
62719: POP
62720: POP
// end ;
62721: LD_VAR 0 3
62725: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62726: LD_INT 0
62728: PPUSH
62729: PPUSH
62730: PPUSH
// if not unit or IsInUnit ( unit ) then
62731: LD_VAR 0 1
62735: NOT
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 310
62746: OR
62747: IFFALSE 62751
// exit ;
62749: GO 62842
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62751: LD_ADDR_VAR 0 4
62755: PUSH
62756: LD_VAR 0 1
62760: PPUSH
62761: CALL_OW 250
62765: PPUSH
62766: LD_VAR 0 2
62770: PPUSH
62771: LD_INT 1
62773: PPUSH
62774: CALL_OW 272
62778: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62779: LD_ADDR_VAR 0 5
62783: PUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: CALL_OW 251
62793: PPUSH
62794: LD_VAR 0 2
62798: PPUSH
62799: LD_INT 1
62801: PPUSH
62802: CALL_OW 273
62806: ST_TO_ADDR
// if ValidHex ( x , y ) then
62807: LD_VAR 0 4
62811: PPUSH
62812: LD_VAR 0 5
62816: PPUSH
62817: CALL_OW 488
62821: IFFALSE 62842
// ComTurnXY ( unit , x , y ) ;
62823: LD_VAR 0 1
62827: PPUSH
62828: LD_VAR 0 4
62832: PPUSH
62833: LD_VAR 0 5
62837: PPUSH
62838: CALL_OW 118
// end ;
62842: LD_VAR 0 3
62846: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62847: LD_INT 0
62849: PPUSH
62850: PPUSH
// result := false ;
62851: LD_ADDR_VAR 0 3
62855: PUSH
62856: LD_INT 0
62858: ST_TO_ADDR
// if not units then
62859: LD_VAR 0 2
62863: NOT
62864: IFFALSE 62868
// exit ;
62866: GO 62913
// for i in units do
62868: LD_ADDR_VAR 0 4
62872: PUSH
62873: LD_VAR 0 2
62877: PUSH
62878: FOR_IN
62879: IFFALSE 62911
// if See ( side , i ) then
62881: LD_VAR 0 1
62885: PPUSH
62886: LD_VAR 0 4
62890: PPUSH
62891: CALL_OW 292
62895: IFFALSE 62909
// begin result := true ;
62897: LD_ADDR_VAR 0 3
62901: PUSH
62902: LD_INT 1
62904: ST_TO_ADDR
// exit ;
62905: POP
62906: POP
62907: GO 62913
// end ;
62909: GO 62878
62911: POP
62912: POP
// end ;
62913: LD_VAR 0 3
62917: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62918: LD_INT 0
62920: PPUSH
62921: PPUSH
62922: PPUSH
62923: PPUSH
// if not unit or not points then
62924: LD_VAR 0 1
62928: NOT
62929: PUSH
62930: LD_VAR 0 2
62934: NOT
62935: OR
62936: IFFALSE 62940
// exit ;
62938: GO 63030
// dist := 99999 ;
62940: LD_ADDR_VAR 0 5
62944: PUSH
62945: LD_INT 99999
62947: ST_TO_ADDR
// for i in points do
62948: LD_ADDR_VAR 0 4
62952: PUSH
62953: LD_VAR 0 2
62957: PUSH
62958: FOR_IN
62959: IFFALSE 63028
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62961: LD_ADDR_VAR 0 6
62965: PUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: LD_VAR 0 4
62975: PUSH
62976: LD_INT 1
62978: ARRAY
62979: PPUSH
62980: LD_VAR 0 4
62984: PUSH
62985: LD_INT 2
62987: ARRAY
62988: PPUSH
62989: CALL_OW 297
62993: ST_TO_ADDR
// if tmpDist < dist then
62994: LD_VAR 0 6
62998: PUSH
62999: LD_VAR 0 5
63003: LESS
63004: IFFALSE 63026
// begin result := i ;
63006: LD_ADDR_VAR 0 3
63010: PUSH
63011: LD_VAR 0 4
63015: ST_TO_ADDR
// dist := tmpDist ;
63016: LD_ADDR_VAR 0 5
63020: PUSH
63021: LD_VAR 0 6
63025: ST_TO_ADDR
// end ; end ;
63026: GO 62958
63028: POP
63029: POP
// end ;
63030: LD_VAR 0 3
63034: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63035: LD_INT 0
63037: PPUSH
// uc_side := side ;
63038: LD_ADDR_OWVAR 20
63042: PUSH
63043: LD_VAR 0 1
63047: ST_TO_ADDR
// uc_nation := 3 ;
63048: LD_ADDR_OWVAR 21
63052: PUSH
63053: LD_INT 3
63055: ST_TO_ADDR
// vc_chassis := 25 ;
63056: LD_ADDR_OWVAR 37
63060: PUSH
63061: LD_INT 25
63063: ST_TO_ADDR
// vc_engine := engine_siberite ;
63064: LD_ADDR_OWVAR 39
63068: PUSH
63069: LD_INT 3
63071: ST_TO_ADDR
// vc_control := control_computer ;
63072: LD_ADDR_OWVAR 38
63076: PUSH
63077: LD_INT 3
63079: ST_TO_ADDR
// vc_weapon := 59 ;
63080: LD_ADDR_OWVAR 40
63084: PUSH
63085: LD_INT 59
63087: ST_TO_ADDR
// result := CreateVehicle ;
63088: LD_ADDR_VAR 0 5
63092: PUSH
63093: CALL_OW 45
63097: ST_TO_ADDR
// SetDir ( result , d ) ;
63098: LD_VAR 0 5
63102: PPUSH
63103: LD_VAR 0 4
63107: PPUSH
63108: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63112: LD_VAR 0 5
63116: PPUSH
63117: LD_VAR 0 2
63121: PPUSH
63122: LD_VAR 0 3
63126: PPUSH
63127: LD_INT 0
63129: PPUSH
63130: CALL_OW 48
// end ;
63134: LD_VAR 0 5
63138: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63139: LD_INT 0
63141: PPUSH
63142: PPUSH
63143: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63144: LD_ADDR_VAR 0 2
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63167: LD_VAR 0 1
63171: NOT
63172: PUSH
63173: LD_VAR 0 1
63177: PPUSH
63178: CALL_OW 264
63182: PUSH
63183: LD_INT 12
63185: PUSH
63186: LD_INT 51
63188: PUSH
63189: LD_INT 32
63191: PUSH
63192: LD_INT 89
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: IN
63201: NOT
63202: OR
63203: IFFALSE 63207
// exit ;
63205: GO 63305
// for i := 1 to 3 do
63207: LD_ADDR_VAR 0 3
63211: PUSH
63212: DOUBLE
63213: LD_INT 1
63215: DEC
63216: ST_TO_ADDR
63217: LD_INT 3
63219: PUSH
63220: FOR_TO
63221: IFFALSE 63303
// begin tmp := GetCargo ( cargo , i ) ;
63223: LD_ADDR_VAR 0 4
63227: PUSH
63228: LD_VAR 0 1
63232: PPUSH
63233: LD_VAR 0 3
63237: PPUSH
63238: CALL_OW 289
63242: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63243: LD_ADDR_VAR 0 2
63247: PUSH
63248: LD_VAR 0 2
63252: PPUSH
63253: LD_VAR 0 3
63257: PPUSH
63258: LD_VAR 0 4
63262: PPUSH
63263: CALL_OW 1
63267: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63268: LD_ADDR_VAR 0 2
63272: PUSH
63273: LD_VAR 0 2
63277: PPUSH
63278: LD_INT 4
63280: PPUSH
63281: LD_VAR 0 2
63285: PUSH
63286: LD_INT 4
63288: ARRAY
63289: PUSH
63290: LD_VAR 0 4
63294: PLUS
63295: PPUSH
63296: CALL_OW 1
63300: ST_TO_ADDR
// end ;
63301: GO 63220
63303: POP
63304: POP
// end ;
63305: LD_VAR 0 2
63309: RET
// export function Length ( array ) ; begin
63310: LD_INT 0
63312: PPUSH
// result := array + 0 ;
63313: LD_ADDR_VAR 0 2
63317: PUSH
63318: LD_VAR 0 1
63322: PUSH
63323: LD_INT 0
63325: PLUS
63326: ST_TO_ADDR
// end ;
63327: LD_VAR 0 2
63331: RET
// export function PrepareArray ( array ) ; begin
63332: LD_INT 0
63334: PPUSH
// result := array diff 0 ;
63335: LD_ADDR_VAR 0 2
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_INT 0
63347: DIFF
63348: ST_TO_ADDR
// if not result [ 1 ] then
63349: LD_VAR 0 2
63353: PUSH
63354: LD_INT 1
63356: ARRAY
63357: NOT
63358: IFFALSE 63378
// result := Delete ( result , 1 ) ;
63360: LD_ADDR_VAR 0 2
63364: PUSH
63365: LD_VAR 0 2
63369: PPUSH
63370: LD_INT 1
63372: PPUSH
63373: CALL_OW 3
63377: ST_TO_ADDR
// end ;
63378: LD_VAR 0 2
63382: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
// sibRocketRange := 25 ;
63389: LD_ADDR_VAR 0 6
63393: PUSH
63394: LD_INT 25
63396: ST_TO_ADDR
// result := false ;
63397: LD_ADDR_VAR 0 4
63401: PUSH
63402: LD_INT 0
63404: ST_TO_ADDR
// for i := 0 to 5 do
63405: LD_ADDR_VAR 0 5
63409: PUSH
63410: DOUBLE
63411: LD_INT 0
63413: DEC
63414: ST_TO_ADDR
63415: LD_INT 5
63417: PUSH
63418: FOR_TO
63419: IFFALSE 63486
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63421: LD_VAR 0 1
63425: PPUSH
63426: LD_VAR 0 5
63430: PPUSH
63431: LD_VAR 0 6
63435: PPUSH
63436: CALL_OW 272
63440: PPUSH
63441: LD_VAR 0 2
63445: PPUSH
63446: LD_VAR 0 5
63450: PPUSH
63451: LD_VAR 0 6
63455: PPUSH
63456: CALL_OW 273
63460: PPUSH
63461: LD_VAR 0 3
63465: PPUSH
63466: CALL_OW 309
63470: IFFALSE 63484
// begin result := true ;
63472: LD_ADDR_VAR 0 4
63476: PUSH
63477: LD_INT 1
63479: ST_TO_ADDR
// exit ;
63480: POP
63481: POP
63482: GO 63488
// end ;
63484: GO 63418
63486: POP
63487: POP
// end ;
63488: LD_VAR 0 4
63492: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63493: LD_INT 0
63495: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63496: LD_VAR 0 1
63500: PPUSH
63501: LD_VAR 0 2
63505: PPUSH
63506: LD_INT 0
63508: PPUSH
63509: LD_INT 0
63511: PPUSH
63512: LD_INT 1
63514: PPUSH
63515: LD_INT 0
63517: PPUSH
63518: CALL_OW 587
// end ; end_of_file
63522: LD_VAR 0 3
63526: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63527: LD_VAR 0 1
63531: PPUSH
63532: LD_VAR 0 2
63536: PPUSH
63537: LD_VAR 0 3
63541: PPUSH
63542: LD_VAR 0 4
63546: PPUSH
63547: LD_VAR 0 5
63551: PPUSH
63552: LD_VAR 0 6
63556: PPUSH
63557: CALL 1983 0 6
// end ;
63561: PPOPN 6
63563: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63564: LD_INT 0
63566: PPUSH
// begin if not units then
63567: LD_VAR 0 1
63571: NOT
63572: IFFALSE 63576
// exit ;
63574: GO 63576
// end ;
63576: PPOPN 7
63578: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63579: CALL 1877 0 0
// end ;
63583: PPOPN 1
63585: END
