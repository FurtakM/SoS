// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1216
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1214
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1214
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: PUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 428
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1214
// ComMoveXY ( hunters [ i ] , x , y ) ;
1189: LD_EXP 6
1193: PUSH
1194: LD_VAR 0 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 111
// end ; end ; end ;
1214: GO 876
1216: POP
1217: POP
// end ; end_of_file
1218: PPOPN 5
1220: END
// on UnitGoesToRed ( un ) do var i ;
1221: LD_INT 0
1223: PPUSH
// begin if GetSide ( un ) = 1 then
1224: LD_VAR 0 1
1228: PPUSH
1229: CALL_OW 255
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1246
// YouLost ( hunt2 ) ;
1239: LD_STRING hunt2
1241: PPUSH
1242: CALL_OW 104
// if GetSide ( un ) > 1 then
1246: LD_VAR 0 1
1250: PPUSH
1251: CALL_OW 255
1255: PUSH
1256: LD_INT 1
1258: GREATER
1259: IFFALSE 1312
// begin for i := 1 to 6 do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_INT 6
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1298
// begin wait ( 0 0$1 ) ;
1277: LD_INT 35
1279: PPUSH
1280: CALL_OW 67
// SetLives ( un , 249 ) ;
1284: LD_VAR 0 1
1288: PPUSH
1289: LD_INT 249
1291: PPUSH
1292: CALL_OW 234
// end ;
1296: GO 1274
1298: POP
1299: POP
// SetLives ( un , 1000 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 1000
1307: PPUSH
1308: CALL_OW 234
// end ; end ;
1312: PPOPN 2
1314: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1315: LD_VAR 0 1
1319: PUSH
1320: LD_INT 1
1322: EQUAL
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: GREATER
1332: AND
1333: IFFALSE 1342
// YouLost ( hunt1 ) ;
1335: LD_STRING hunt1
1337: PPUSH
1338: CALL_OW 104
// end ;
1342: PPOPN 2
1344: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1345: LD_INT 0
1347: PPUSH
// begin point := 0 ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1356: LD_VAR 0 1
1360: PPUSH
1361: CALL_OW 257
1365: PUSH
1366: LD_INT 20
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1385
1374: POP
// point := 10 ; class_horse :
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_INT 10
1382: ST_TO_ADDR
1383: GO 1519
1385: LD_INT 21
1387: DOUBLE
1388: EQUAL
1389: IFTRUE 1393
1391: GO 1404
1393: POP
// point := 10 ; class_baggie :
1394: LD_ADDR_VAR 0 4
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
1402: GO 1519
1404: LD_INT 13
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1423
1412: POP
// point := 5 ; class_phororhacos :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 5
1420: ST_TO_ADDR
1421: GO 1519
1423: LD_INT 18
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1442
1431: POP
// point := 10 ; class_tiger :
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: LD_INT 10
1439: ST_TO_ADDR
1440: GO 1519
1442: LD_INT 14
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1461
1450: POP
// point := 20 ; class_apeman :
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_INT 20
1458: ST_TO_ADDR
1459: GO 1519
1461: LD_INT 12
1463: DOUBLE
1464: EQUAL
1465: IFTRUE 1469
1467: GO 1480
1469: POP
// point := 30 ; class_apeman_soldier :
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 30
1477: ST_TO_ADDR
1478: GO 1519
1480: LD_INT 15
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// point := 50 ; class_frog :
1489: LD_ADDR_VAR 0 4
1493: PUSH
1494: LD_INT 50
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 19
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// point := 10 ; end ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_INT 10
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// if point then
1519: LD_VAR 0 4
1523: IFFALSE 1562
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1525: LD_ADDR_EXP 5
1529: PUSH
1530: LD_EXP 5
1534: PPUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_EXP 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_VAR 0 4
1555: PLUS
1556: PPUSH
1557: CALL_OW 1
1561: ST_TO_ADDR
// end ;
1562: PPOPN 4
1564: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1565: LD_INT 22
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: PUSH
1580: LD_INT 10
1582: LESS
1583: IFFALSE 1685
1585: GO 1587
1587: DISABLE
// begin enable ;
1588: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1589: LD_INT 2
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 12
1605: PUSH
1606: LD_INT 0
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: PUSH
1617: LD_INT 0
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: CALL_OW 12
1627: PUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: PUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 12
1649: PUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 12
1660: PUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL 387 0 3
// end ;
1685: END
// every 0 0$1 do var i ;
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
// begin enable ;
1692: ENABLE
// display_strings := [ ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// for i := 1 to huntersAmount do
1700: LD_ADDR_VAR 0 1
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_EXP 3
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1850
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_OWVAR 47
1727: PUSH
1728: LD_STRING #player
1730: PUSH
1731: LD_VAR 0 1
1735: STR
1736: PUSH
1737: LD_VAR 0 1
1741: PUSH
1742: LD_EXP 5
1746: PUSH
1747: LD_VAR 0 1
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: ADD
1758: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1759: LD_EXP 5
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PUSH
1770: LD_INT 750
1772: PUSH
1773: LD_INT 1250
1775: PUSH
1776: LD_INT 2000
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_OWVAR 67
1788: ARRAY
1789: GREATEREQUAL
1790: IFFALSE 1848
// begin if i = 1 then
1792: LD_VAR 0 1
1796: PUSH
1797: LD_INT 1
1799: EQUAL
1800: IFFALSE 1841
// begin DialogueOn ;
1802: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1806: LD_STRING ACH_HUNT
1808: PPUSH
1809: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1813: LD_ADDR_OWVAR 47
1817: PUSH
1818: LD_STRING #hunting-win
1820: PUSH
1821: EMPTY
1822: LIST
1823: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1824: LD_INT 175
1826: PPUSH
1827: CALL_OW 68
// YouWin ;
1831: CALL_OW 103
// DialogueOff ;
1835: CALL_OW 7
// end else
1839: GO 1848
// YouLost ( hunt3 ) ;
1841: LD_STRING hunt3
1843: PPUSH
1844: CALL_OW 104
// end ; end ;
1848: GO 1715
1850: POP
1851: POP
// end ; end_of_file end_of_file
1852: PPOPN 1
1854: END
// export globalGameSaveCounter ; every 0 0$1 do
1855: GO 1857
1857: DISABLE
// begin enable ;
1858: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1859: LD_STRING updateTimer(
1861: PUSH
1862: LD_OWVAR 1
1866: STR
1867: PUSH
1868: LD_STRING );
1870: STR
1871: PPUSH
1872: CALL_OW 559
// end ;
1876: END
// every 0 0$1 do
1877: GO 1879
1879: DISABLE
// begin globalGameSaveCounter := 0 ;
1880: LD_ADDR_EXP 7
1884: PUSH
1885: LD_INT 0
1887: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1888: LD_STRING setGameSaveCounter(0)
1890: PPUSH
1891: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1895: LD_STRING initStreamRollete();
1897: PPUSH
1898: CALL_OW 559
// InitStreamMode ;
1902: CALL 3245 0 0
// DefineStreamItems ( false ) ;
1906: LD_INT 0
1908: PPUSH
1909: CALL 3709 0 1
// end ;
1913: END
// export function SOS_MapStart ( ) ; begin
1914: LD_INT 0
1916: PPUSH
// if streamModeActive then
1917: LD_EXP 8
1921: IFFALSE 1930
// DefineStreamItems ( true ) ;
1923: LD_INT 1
1925: PPUSH
1926: CALL 3709 0 1
// UpdateLuaVariables ( ) ;
1930: CALL 1947 0 0
// UpdateFactoryWaypoints ( ) ;
1934: CALL 16578 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1938: CALL 16835 0 0
// end ;
1942: LD_VAR 0 1
1946: RET
// function UpdateLuaVariables ( ) ; begin
1947: LD_INT 0
1949: PPUSH
// if globalGameSaveCounter then
1950: LD_EXP 7
1954: IFFALSE 1988
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1956: LD_ADDR_EXP 7
1960: PUSH
1961: LD_EXP 7
1965: PPUSH
1966: CALL 61783 0 1
1970: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1971: LD_STRING setGameSaveCounter(
1973: PUSH
1974: LD_EXP 7
1978: STR
1979: PUSH
1980: LD_STRING )
1982: STR
1983: PPUSH
1984: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1988: LD_STRING setGameDifficulty(
1990: PUSH
1991: LD_OWVAR 67
1995: STR
1996: PUSH
1997: LD_STRING )
1999: STR
2000: PPUSH
2001: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
2005: LD_STRING displayDifficulty(
2007: PUSH
2008: LD_OWVAR 67
2012: STR
2013: PUSH
2014: LD_STRING )
2016: STR
2017: PPUSH
2018: CALL_OW 559
// end ;
2022: LD_VAR 0 1
2026: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2027: LD_INT 0
2029: PPUSH
// if p2 = stream_mode then
2030: LD_VAR 0 2
2034: PUSH
2035: LD_INT 100
2037: EQUAL
2038: IFFALSE 3041
// begin if not StreamModeActive then
2040: LD_EXP 8
2044: NOT
2045: IFFALSE 2055
// StreamModeActive := true ;
2047: LD_ADDR_EXP 8
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// if p3 = 0 then
2055: LD_VAR 0 3
2059: PUSH
2060: LD_INT 0
2062: EQUAL
2063: IFFALSE 2069
// InitStreamMode ;
2065: CALL 3245 0 0
// if p3 = 1 then
2069: LD_VAR 0 3
2073: PUSH
2074: LD_INT 1
2076: EQUAL
2077: IFFALSE 2087
// sRocket := true ;
2079: LD_ADDR_EXP 13
2083: PUSH
2084: LD_INT 1
2086: ST_TO_ADDR
// if p3 = 2 then
2087: LD_VAR 0 3
2091: PUSH
2092: LD_INT 2
2094: EQUAL
2095: IFFALSE 2105
// sSpeed := true ;
2097: LD_ADDR_EXP 12
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// if p3 = 3 then
2105: LD_VAR 0 3
2109: PUSH
2110: LD_INT 3
2112: EQUAL
2113: IFFALSE 2123
// sEngine := true ;
2115: LD_ADDR_EXP 14
2119: PUSH
2120: LD_INT 1
2122: ST_TO_ADDR
// if p3 = 4 then
2123: LD_VAR 0 3
2127: PUSH
2128: LD_INT 4
2130: EQUAL
2131: IFFALSE 2141
// sSpec := true ;
2133: LD_ADDR_EXP 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// if p3 = 5 then
2141: LD_VAR 0 3
2145: PUSH
2146: LD_INT 5
2148: EQUAL
2149: IFFALSE 2159
// sLevel := true ;
2151: LD_ADDR_EXP 15
2155: PUSH
2156: LD_INT 1
2158: ST_TO_ADDR
// if p3 = 6 then
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 6
2166: EQUAL
2167: IFFALSE 2177
// sArmoury := true ;
2169: LD_ADDR_EXP 16
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// if p3 = 7 then
2177: LD_VAR 0 3
2181: PUSH
2182: LD_INT 7
2184: EQUAL
2185: IFFALSE 2195
// sRadar := true ;
2187: LD_ADDR_EXP 17
2191: PUSH
2192: LD_INT 1
2194: ST_TO_ADDR
// if p3 = 8 then
2195: LD_VAR 0 3
2199: PUSH
2200: LD_INT 8
2202: EQUAL
2203: IFFALSE 2213
// sBunker := true ;
2205: LD_ADDR_EXP 18
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// if p3 = 9 then
2213: LD_VAR 0 3
2217: PUSH
2218: LD_INT 9
2220: EQUAL
2221: IFFALSE 2231
// sHack := true ;
2223: LD_ADDR_EXP 19
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// if p3 = 10 then
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 10
2238: EQUAL
2239: IFFALSE 2249
// sFire := true ;
2241: LD_ADDR_EXP 20
2245: PUSH
2246: LD_INT 1
2248: ST_TO_ADDR
// if p3 = 11 then
2249: LD_VAR 0 3
2253: PUSH
2254: LD_INT 11
2256: EQUAL
2257: IFFALSE 2267
// sRefresh := true ;
2259: LD_ADDR_EXP 21
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// if p3 = 12 then
2267: LD_VAR 0 3
2271: PUSH
2272: LD_INT 12
2274: EQUAL
2275: IFFALSE 2285
// sExp := true ;
2277: LD_ADDR_EXP 22
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// if p3 = 13 then
2285: LD_VAR 0 3
2289: PUSH
2290: LD_INT 13
2292: EQUAL
2293: IFFALSE 2303
// sDepot := true ;
2295: LD_ADDR_EXP 23
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// if p3 = 14 then
2303: LD_VAR 0 3
2307: PUSH
2308: LD_INT 14
2310: EQUAL
2311: IFFALSE 2321
// sFlag := true ;
2313: LD_ADDR_EXP 24
2317: PUSH
2318: LD_INT 1
2320: ST_TO_ADDR
// if p3 = 15 then
2321: LD_VAR 0 3
2325: PUSH
2326: LD_INT 15
2328: EQUAL
2329: IFFALSE 2339
// sKamikadze := true ;
2331: LD_ADDR_EXP 32
2335: PUSH
2336: LD_INT 1
2338: ST_TO_ADDR
// if p3 = 16 then
2339: LD_VAR 0 3
2343: PUSH
2344: LD_INT 16
2346: EQUAL
2347: IFFALSE 2357
// sTroll := true ;
2349: LD_ADDR_EXP 33
2353: PUSH
2354: LD_INT 1
2356: ST_TO_ADDR
// if p3 = 17 then
2357: LD_VAR 0 3
2361: PUSH
2362: LD_INT 17
2364: EQUAL
2365: IFFALSE 2375
// sSlow := true ;
2367: LD_ADDR_EXP 34
2371: PUSH
2372: LD_INT 1
2374: ST_TO_ADDR
// if p3 = 18 then
2375: LD_VAR 0 3
2379: PUSH
2380: LD_INT 18
2382: EQUAL
2383: IFFALSE 2393
// sLack := true ;
2385: LD_ADDR_EXP 35
2389: PUSH
2390: LD_INT 1
2392: ST_TO_ADDR
// if p3 = 19 then
2393: LD_VAR 0 3
2397: PUSH
2398: LD_INT 19
2400: EQUAL
2401: IFFALSE 2411
// sTank := true ;
2403: LD_ADDR_EXP 37
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// if p3 = 20 then
2411: LD_VAR 0 3
2415: PUSH
2416: LD_INT 20
2418: EQUAL
2419: IFFALSE 2429
// sRemote := true ;
2421: LD_ADDR_EXP 38
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// if p3 = 21 then
2429: LD_VAR 0 3
2433: PUSH
2434: LD_INT 21
2436: EQUAL
2437: IFFALSE 2447
// sPowell := true ;
2439: LD_ADDR_EXP 39
2443: PUSH
2444: LD_INT 1
2446: ST_TO_ADDR
// if p3 = 22 then
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 22
2454: EQUAL
2455: IFFALSE 2465
// sTeleport := true ;
2457: LD_ADDR_EXP 42
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// if p3 = 23 then
2465: LD_VAR 0 3
2469: PUSH
2470: LD_INT 23
2472: EQUAL
2473: IFFALSE 2483
// sOilTower := true ;
2475: LD_ADDR_EXP 44
2479: PUSH
2480: LD_INT 1
2482: ST_TO_ADDR
// if p3 = 24 then
2483: LD_VAR 0 3
2487: PUSH
2488: LD_INT 24
2490: EQUAL
2491: IFFALSE 2501
// sShovel := true ;
2493: LD_ADDR_EXP 45
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// if p3 = 25 then
2501: LD_VAR 0 3
2505: PUSH
2506: LD_INT 25
2508: EQUAL
2509: IFFALSE 2519
// sSheik := true ;
2511: LD_ADDR_EXP 46
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// if p3 = 26 then
2519: LD_VAR 0 3
2523: PUSH
2524: LD_INT 26
2526: EQUAL
2527: IFFALSE 2537
// sEarthquake := true ;
2529: LD_ADDR_EXP 48
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// if p3 = 27 then
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 27
2544: EQUAL
2545: IFFALSE 2555
// sAI := true ;
2547: LD_ADDR_EXP 49
2551: PUSH
2552: LD_INT 1
2554: ST_TO_ADDR
// if p3 = 28 then
2555: LD_VAR 0 3
2559: PUSH
2560: LD_INT 28
2562: EQUAL
2563: IFFALSE 2573
// sCargo := true ;
2565: LD_ADDR_EXP 52
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// if p3 = 29 then
2573: LD_VAR 0 3
2577: PUSH
2578: LD_INT 29
2580: EQUAL
2581: IFFALSE 2591
// sDLaser := true ;
2583: LD_ADDR_EXP 53
2587: PUSH
2588: LD_INT 1
2590: ST_TO_ADDR
// if p3 = 30 then
2591: LD_VAR 0 3
2595: PUSH
2596: LD_INT 30
2598: EQUAL
2599: IFFALSE 2609
// sExchange := true ;
2601: LD_ADDR_EXP 54
2605: PUSH
2606: LD_INT 1
2608: ST_TO_ADDR
// if p3 = 31 then
2609: LD_VAR 0 3
2613: PUSH
2614: LD_INT 31
2616: EQUAL
2617: IFFALSE 2627
// sFac := true ;
2619: LD_ADDR_EXP 55
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// if p3 = 32 then
2627: LD_VAR 0 3
2631: PUSH
2632: LD_INT 32
2634: EQUAL
2635: IFFALSE 2645
// sPower := true ;
2637: LD_ADDR_EXP 56
2641: PUSH
2642: LD_INT 1
2644: ST_TO_ADDR
// if p3 = 33 then
2645: LD_VAR 0 3
2649: PUSH
2650: LD_INT 33
2652: EQUAL
2653: IFFALSE 2663
// sRandom := true ;
2655: LD_ADDR_EXP 57
2659: PUSH
2660: LD_INT 1
2662: ST_TO_ADDR
// if p3 = 34 then
2663: LD_VAR 0 3
2667: PUSH
2668: LD_INT 34
2670: EQUAL
2671: IFFALSE 2681
// sShield := true ;
2673: LD_ADDR_EXP 58
2677: PUSH
2678: LD_INT 1
2680: ST_TO_ADDR
// if p3 = 35 then
2681: LD_VAR 0 3
2685: PUSH
2686: LD_INT 35
2688: EQUAL
2689: IFFALSE 2699
// sTime := true ;
2691: LD_ADDR_EXP 59
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// if p3 = 36 then
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 36
2706: EQUAL
2707: IFFALSE 2717
// sTools := true ;
2709: LD_ADDR_EXP 60
2713: PUSH
2714: LD_INT 1
2716: ST_TO_ADDR
// if p3 = 101 then
2717: LD_VAR 0 3
2721: PUSH
2722: LD_INT 101
2724: EQUAL
2725: IFFALSE 2735
// sSold := true ;
2727: LD_ADDR_EXP 25
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
// if p3 = 102 then
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 102
2742: EQUAL
2743: IFFALSE 2753
// sDiff := true ;
2745: LD_ADDR_EXP 26
2749: PUSH
2750: LD_INT 1
2752: ST_TO_ADDR
// if p3 = 103 then
2753: LD_VAR 0 3
2757: PUSH
2758: LD_INT 103
2760: EQUAL
2761: IFFALSE 2771
// sFog := true ;
2763: LD_ADDR_EXP 29
2767: PUSH
2768: LD_INT 1
2770: ST_TO_ADDR
// if p3 = 104 then
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 104
2778: EQUAL
2779: IFFALSE 2789
// sReset := true ;
2781: LD_ADDR_EXP 30
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// if p3 = 105 then
2789: LD_VAR 0 3
2793: PUSH
2794: LD_INT 105
2796: EQUAL
2797: IFFALSE 2807
// sSun := true ;
2799: LD_ADDR_EXP 31
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// if p3 = 106 then
2807: LD_VAR 0 3
2811: PUSH
2812: LD_INT 106
2814: EQUAL
2815: IFFALSE 2825
// sTiger := true ;
2817: LD_ADDR_EXP 27
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// if p3 = 107 then
2825: LD_VAR 0 3
2829: PUSH
2830: LD_INT 107
2832: EQUAL
2833: IFFALSE 2843
// sBomb := true ;
2835: LD_ADDR_EXP 28
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// if p3 = 108 then
2843: LD_VAR 0 3
2847: PUSH
2848: LD_INT 108
2850: EQUAL
2851: IFFALSE 2861
// sWound := true ;
2853: LD_ADDR_EXP 36
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// if p3 = 109 then
2861: LD_VAR 0 3
2865: PUSH
2866: LD_INT 109
2868: EQUAL
2869: IFFALSE 2879
// sBetray := true ;
2871: LD_ADDR_EXP 40
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
// if p3 = 110 then
2879: LD_VAR 0 3
2883: PUSH
2884: LD_INT 110
2886: EQUAL
2887: IFFALSE 2897
// sContamin := true ;
2889: LD_ADDR_EXP 41
2893: PUSH
2894: LD_INT 1
2896: ST_TO_ADDR
// if p3 = 111 then
2897: LD_VAR 0 3
2901: PUSH
2902: LD_INT 111
2904: EQUAL
2905: IFFALSE 2915
// sOil := true ;
2907: LD_ADDR_EXP 43
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// if p3 = 112 then
2915: LD_VAR 0 3
2919: PUSH
2920: LD_INT 112
2922: EQUAL
2923: IFFALSE 2933
// sStu := true ;
2925: LD_ADDR_EXP 47
2929: PUSH
2930: LD_INT 1
2932: ST_TO_ADDR
// if p3 = 113 then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 113
2940: EQUAL
2941: IFFALSE 2951
// sBazooka := true ;
2943: LD_ADDR_EXP 50
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// if p3 = 114 then
2951: LD_VAR 0 3
2955: PUSH
2956: LD_INT 114
2958: EQUAL
2959: IFFALSE 2969
// sMortar := true ;
2961: LD_ADDR_EXP 51
2965: PUSH
2966: LD_INT 1
2968: ST_TO_ADDR
// if p3 = 115 then
2969: LD_VAR 0 3
2973: PUSH
2974: LD_INT 115
2976: EQUAL
2977: IFFALSE 2987
// sRanger := true ;
2979: LD_ADDR_EXP 61
2983: PUSH
2984: LD_INT 1
2986: ST_TO_ADDR
// if p3 = 116 then
2987: LD_VAR 0 3
2991: PUSH
2992: LD_INT 116
2994: EQUAL
2995: IFFALSE 3005
// sComputer := true ;
2997: LD_ADDR_EXP 62
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// if p3 = 117 then
3005: LD_VAR 0 3
3009: PUSH
3010: LD_INT 117
3012: EQUAL
3013: IFFALSE 3023
// s30 := true ;
3015: LD_ADDR_EXP 63
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// if p3 = 118 then
3023: LD_VAR 0 3
3027: PUSH
3028: LD_INT 118
3030: EQUAL
3031: IFFALSE 3041
// s60 := true ;
3033: LD_ADDR_EXP 64
3037: PUSH
3038: LD_INT 1
3040: ST_TO_ADDR
// end ; if p2 = hack_mode then
3041: LD_VAR 0 2
3045: PUSH
3046: LD_INT 101
3048: EQUAL
3049: IFFALSE 3177
// begin case p3 of 1 :
3051: LD_VAR 0 3
3055: PUSH
3056: LD_INT 1
3058: DOUBLE
3059: EQUAL
3060: IFTRUE 3064
3062: GO 3071
3064: POP
// hHackUnlimitedResources ; 2 :
3065: CALL 15324 0 0
3069: GO 3177
3071: LD_INT 2
3073: DOUBLE
3074: EQUAL
3075: IFTRUE 3079
3077: GO 3086
3079: POP
// hHackSetLevel10 ; 3 :
3080: CALL 15457 0 0
3084: GO 3177
3086: LD_INT 3
3088: DOUBLE
3089: EQUAL
3090: IFTRUE 3094
3092: GO 3101
3094: POP
// hHackSetLevel10YourUnits ; 4 :
3095: CALL 15542 0 0
3099: GO 3177
3101: LD_INT 4
3103: DOUBLE
3104: EQUAL
3105: IFTRUE 3109
3107: GO 3116
3109: POP
// hHackInvincible ; 5 :
3110: CALL 15990 0 0
3114: GO 3177
3116: LD_INT 5
3118: DOUBLE
3119: EQUAL
3120: IFTRUE 3124
3122: GO 3131
3124: POP
// hHackInvisible ; 6 :
3125: CALL 16101 0 0
3129: GO 3177
3131: LD_INT 6
3133: DOUBLE
3134: EQUAL
3135: IFTRUE 3139
3137: GO 3146
3139: POP
// hHackChangeYourSide ; 7 :
3140: CALL 16158 0 0
3144: GO 3177
3146: LD_INT 7
3148: DOUBLE
3149: EQUAL
3150: IFTRUE 3154
3152: GO 3161
3154: POP
// hHackChangeUnitSide ; 8 :
3155: CALL 16200 0 0
3159: GO 3177
3161: LD_INT 8
3163: DOUBLE
3164: EQUAL
3165: IFTRUE 3169
3167: GO 3176
3169: POP
// hHackFog ; end ;
3170: CALL 16301 0 0
3174: GO 3177
3176: POP
// end ; if p2 = game_save_mode then
3177: LD_VAR 0 2
3181: PUSH
3182: LD_INT 102
3184: EQUAL
3185: IFFALSE 3240
// begin if p3 = 1 then
3187: LD_VAR 0 3
3191: PUSH
3192: LD_INT 1
3194: EQUAL
3195: IFFALSE 3207
// globalGameSaveCounter := p4 ;
3197: LD_ADDR_EXP 7
3201: PUSH
3202: LD_VAR 0 4
3206: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3207: LD_VAR 0 3
3211: PUSH
3212: LD_INT 2
3214: EQUAL
3215: PUSH
3216: LD_EXP 7
3220: AND
3221: IFFALSE 3240
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3223: LD_STRING setGameSaveCounter(
3225: PUSH
3226: LD_EXP 7
3230: STR
3231: PUSH
3232: LD_STRING )
3234: STR
3235: PPUSH
3236: CALL_OW 559
// end ; end ;
3240: LD_VAR 0 7
3244: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3245: LD_INT 0
3247: PPUSH
// streamModeActive := false ;
3248: LD_ADDR_EXP 8
3252: PUSH
3253: LD_INT 0
3255: ST_TO_ADDR
// normalCounter := 36 ;
3256: LD_ADDR_EXP 9
3260: PUSH
3261: LD_INT 36
3263: ST_TO_ADDR
// hardcoreCounter := 18 ;
3264: LD_ADDR_EXP 10
3268: PUSH
3269: LD_INT 18
3271: ST_TO_ADDR
// sRocket := false ;
3272: LD_ADDR_EXP 13
3276: PUSH
3277: LD_INT 0
3279: ST_TO_ADDR
// sSpeed := false ;
3280: LD_ADDR_EXP 12
3284: PUSH
3285: LD_INT 0
3287: ST_TO_ADDR
// sEngine := false ;
3288: LD_ADDR_EXP 14
3292: PUSH
3293: LD_INT 0
3295: ST_TO_ADDR
// sSpec := false ;
3296: LD_ADDR_EXP 11
3300: PUSH
3301: LD_INT 0
3303: ST_TO_ADDR
// sLevel := false ;
3304: LD_ADDR_EXP 15
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// sArmoury := false ;
3312: LD_ADDR_EXP 16
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// sRadar := false ;
3320: LD_ADDR_EXP 17
3324: PUSH
3325: LD_INT 0
3327: ST_TO_ADDR
// sBunker := false ;
3328: LD_ADDR_EXP 18
3332: PUSH
3333: LD_INT 0
3335: ST_TO_ADDR
// sHack := false ;
3336: LD_ADDR_EXP 19
3340: PUSH
3341: LD_INT 0
3343: ST_TO_ADDR
// sFire := false ;
3344: LD_ADDR_EXP 20
3348: PUSH
3349: LD_INT 0
3351: ST_TO_ADDR
// sRefresh := false ;
3352: LD_ADDR_EXP 21
3356: PUSH
3357: LD_INT 0
3359: ST_TO_ADDR
// sExp := false ;
3360: LD_ADDR_EXP 22
3364: PUSH
3365: LD_INT 0
3367: ST_TO_ADDR
// sDepot := false ;
3368: LD_ADDR_EXP 23
3372: PUSH
3373: LD_INT 0
3375: ST_TO_ADDR
// sFlag := false ;
3376: LD_ADDR_EXP 24
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// sKamikadze := false ;
3384: LD_ADDR_EXP 32
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// sTroll := false ;
3392: LD_ADDR_EXP 33
3396: PUSH
3397: LD_INT 0
3399: ST_TO_ADDR
// sSlow := false ;
3400: LD_ADDR_EXP 34
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// sLack := false ;
3408: LD_ADDR_EXP 35
3412: PUSH
3413: LD_INT 0
3415: ST_TO_ADDR
// sTank := false ;
3416: LD_ADDR_EXP 37
3420: PUSH
3421: LD_INT 0
3423: ST_TO_ADDR
// sRemote := false ;
3424: LD_ADDR_EXP 38
3428: PUSH
3429: LD_INT 0
3431: ST_TO_ADDR
// sPowell := false ;
3432: LD_ADDR_EXP 39
3436: PUSH
3437: LD_INT 0
3439: ST_TO_ADDR
// sTeleport := false ;
3440: LD_ADDR_EXP 42
3444: PUSH
3445: LD_INT 0
3447: ST_TO_ADDR
// sOilTower := false ;
3448: LD_ADDR_EXP 44
3452: PUSH
3453: LD_INT 0
3455: ST_TO_ADDR
// sShovel := false ;
3456: LD_ADDR_EXP 45
3460: PUSH
3461: LD_INT 0
3463: ST_TO_ADDR
// sSheik := false ;
3464: LD_ADDR_EXP 46
3468: PUSH
3469: LD_INT 0
3471: ST_TO_ADDR
// sEarthquake := false ;
3472: LD_ADDR_EXP 48
3476: PUSH
3477: LD_INT 0
3479: ST_TO_ADDR
// sAI := false ;
3480: LD_ADDR_EXP 49
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// sCargo := false ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// sDLaser := false ;
3496: LD_ADDR_EXP 53
3500: PUSH
3501: LD_INT 0
3503: ST_TO_ADDR
// sExchange := false ;
3504: LD_ADDR_EXP 54
3508: PUSH
3509: LD_INT 0
3511: ST_TO_ADDR
// sFac := false ;
3512: LD_ADDR_EXP 55
3516: PUSH
3517: LD_INT 0
3519: ST_TO_ADDR
// sPower := false ;
3520: LD_ADDR_EXP 56
3524: PUSH
3525: LD_INT 0
3527: ST_TO_ADDR
// sRandom := false ;
3528: LD_ADDR_EXP 57
3532: PUSH
3533: LD_INT 0
3535: ST_TO_ADDR
// sShield := false ;
3536: LD_ADDR_EXP 58
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
// sTime := false ;
3544: LD_ADDR_EXP 59
3548: PUSH
3549: LD_INT 0
3551: ST_TO_ADDR
// sTools := false ;
3552: LD_ADDR_EXP 60
3556: PUSH
3557: LD_INT 0
3559: ST_TO_ADDR
// sSold := false ;
3560: LD_ADDR_EXP 25
3564: PUSH
3565: LD_INT 0
3567: ST_TO_ADDR
// sDiff := false ;
3568: LD_ADDR_EXP 26
3572: PUSH
3573: LD_INT 0
3575: ST_TO_ADDR
// sFog := false ;
3576: LD_ADDR_EXP 29
3580: PUSH
3581: LD_INT 0
3583: ST_TO_ADDR
// sReset := false ;
3584: LD_ADDR_EXP 30
3588: PUSH
3589: LD_INT 0
3591: ST_TO_ADDR
// sSun := false ;
3592: LD_ADDR_EXP 31
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// sTiger := false ;
3600: LD_ADDR_EXP 27
3604: PUSH
3605: LD_INT 0
3607: ST_TO_ADDR
// sBomb := false ;
3608: LD_ADDR_EXP 28
3612: PUSH
3613: LD_INT 0
3615: ST_TO_ADDR
// sWound := false ;
3616: LD_ADDR_EXP 36
3620: PUSH
3621: LD_INT 0
3623: ST_TO_ADDR
// sBetray := false ;
3624: LD_ADDR_EXP 40
3628: PUSH
3629: LD_INT 0
3631: ST_TO_ADDR
// sContamin := false ;
3632: LD_ADDR_EXP 41
3636: PUSH
3637: LD_INT 0
3639: ST_TO_ADDR
// sOil := false ;
3640: LD_ADDR_EXP 43
3644: PUSH
3645: LD_INT 0
3647: ST_TO_ADDR
// sStu := false ;
3648: LD_ADDR_EXP 47
3652: PUSH
3653: LD_INT 0
3655: ST_TO_ADDR
// sBazooka := false ;
3656: LD_ADDR_EXP 50
3660: PUSH
3661: LD_INT 0
3663: ST_TO_ADDR
// sMortar := false ;
3664: LD_ADDR_EXP 51
3668: PUSH
3669: LD_INT 0
3671: ST_TO_ADDR
// sRanger := false ;
3672: LD_ADDR_EXP 61
3676: PUSH
3677: LD_INT 0
3679: ST_TO_ADDR
// sComputer := false ;
3680: LD_ADDR_EXP 62
3684: PUSH
3685: LD_INT 0
3687: ST_TO_ADDR
// s30 := false ;
3688: LD_ADDR_EXP 63
3692: PUSH
3693: LD_INT 0
3695: ST_TO_ADDR
// s60 := false ;
3696: LD_ADDR_EXP 64
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// end ;
3704: LD_VAR 0 1
3708: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3709: LD_INT 0
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
// result := [ ] ;
3718: LD_ADDR_VAR 0 2
3722: PUSH
3723: EMPTY
3724: ST_TO_ADDR
// if campaign_id = 1 then
3725: LD_OWVAR 69
3729: PUSH
3730: LD_INT 1
3732: EQUAL
3733: IFFALSE 6899
// begin case mission_number of 1 :
3735: LD_OWVAR 70
3739: PUSH
3740: LD_INT 1
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3748
3746: GO 3824
3748: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3749: LD_ADDR_VAR 0 2
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: LD_INT 4
3759: PUSH
3760: LD_INT 11
3762: PUSH
3763: LD_INT 12
3765: PUSH
3766: LD_INT 15
3768: PUSH
3769: LD_INT 16
3771: PUSH
3772: LD_INT 22
3774: PUSH
3775: LD_INT 23
3777: PUSH
3778: LD_INT 26
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: PUSH
3792: LD_INT 101
3794: PUSH
3795: LD_INT 102
3797: PUSH
3798: LD_INT 106
3800: PUSH
3801: LD_INT 116
3803: PUSH
3804: LD_INT 117
3806: PUSH
3807: LD_INT 118
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: ST_TO_ADDR
3822: GO 6897
3824: LD_INT 2
3826: DOUBLE
3827: EQUAL
3828: IFTRUE 3832
3830: GO 3916
3832: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 2
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 11
3846: PUSH
3847: LD_INT 12
3849: PUSH
3850: LD_INT 15
3852: PUSH
3853: LD_INT 16
3855: PUSH
3856: LD_INT 22
3858: PUSH
3859: LD_INT 23
3861: PUSH
3862: LD_INT 26
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: PUSH
3876: LD_INT 101
3878: PUSH
3879: LD_INT 102
3881: PUSH
3882: LD_INT 105
3884: PUSH
3885: LD_INT 106
3887: PUSH
3888: LD_INT 108
3890: PUSH
3891: LD_INT 116
3893: PUSH
3894: LD_INT 117
3896: PUSH
3897: LD_INT 118
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: ST_TO_ADDR
3914: GO 6897
3916: LD_INT 3
3918: DOUBLE
3919: EQUAL
3920: IFTRUE 3924
3922: GO 4012
3924: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3925: LD_ADDR_VAR 0 2
3929: PUSH
3930: LD_INT 2
3932: PUSH
3933: LD_INT 4
3935: PUSH
3936: LD_INT 5
3938: PUSH
3939: LD_INT 11
3941: PUSH
3942: LD_INT 12
3944: PUSH
3945: LD_INT 15
3947: PUSH
3948: LD_INT 16
3950: PUSH
3951: LD_INT 22
3953: PUSH
3954: LD_INT 26
3956: PUSH
3957: LD_INT 36
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_INT 101
3974: PUSH
3975: LD_INT 102
3977: PUSH
3978: LD_INT 105
3980: PUSH
3981: LD_INT 106
3983: PUSH
3984: LD_INT 108
3986: PUSH
3987: LD_INT 116
3989: PUSH
3990: LD_INT 117
3992: PUSH
3993: LD_INT 118
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: ST_TO_ADDR
4010: GO 6897
4012: LD_INT 4
4014: DOUBLE
4015: EQUAL
4016: IFTRUE 4020
4018: GO 4116
4020: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: LD_INT 2
4028: PUSH
4029: LD_INT 4
4031: PUSH
4032: LD_INT 5
4034: PUSH
4035: LD_INT 8
4037: PUSH
4038: LD_INT 11
4040: PUSH
4041: LD_INT 12
4043: PUSH
4044: LD_INT 15
4046: PUSH
4047: LD_INT 16
4049: PUSH
4050: LD_INT 22
4052: PUSH
4053: LD_INT 23
4055: PUSH
4056: LD_INT 26
4058: PUSH
4059: LD_INT 36
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 101
4078: PUSH
4079: LD_INT 102
4081: PUSH
4082: LD_INT 105
4084: PUSH
4085: LD_INT 106
4087: PUSH
4088: LD_INT 108
4090: PUSH
4091: LD_INT 116
4093: PUSH
4094: LD_INT 117
4096: PUSH
4097: LD_INT 118
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: ST_TO_ADDR
4114: GO 6897
4116: LD_INT 5
4118: DOUBLE
4119: EQUAL
4120: IFTRUE 4124
4122: GO 4236
4124: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_INT 2
4132: PUSH
4133: LD_INT 4
4135: PUSH
4136: LD_INT 5
4138: PUSH
4139: LD_INT 6
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 11
4147: PUSH
4148: LD_INT 12
4150: PUSH
4151: LD_INT 15
4153: PUSH
4154: LD_INT 16
4156: PUSH
4157: LD_INT 22
4159: PUSH
4160: LD_INT 23
4162: PUSH
4163: LD_INT 25
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 36
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 101
4190: PUSH
4191: LD_INT 102
4193: PUSH
4194: LD_INT 105
4196: PUSH
4197: LD_INT 106
4199: PUSH
4200: LD_INT 108
4202: PUSH
4203: LD_INT 109
4205: PUSH
4206: LD_INT 112
4208: PUSH
4209: LD_INT 116
4211: PUSH
4212: LD_INT 117
4214: PUSH
4215: LD_INT 118
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: ST_TO_ADDR
4234: GO 6897
4236: LD_INT 6
4238: DOUBLE
4239: EQUAL
4240: IFTRUE 4244
4242: GO 4376
4244: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4245: LD_ADDR_VAR 0 2
4249: PUSH
4250: LD_INT 2
4252: PUSH
4253: LD_INT 4
4255: PUSH
4256: LD_INT 5
4258: PUSH
4259: LD_INT 6
4261: PUSH
4262: LD_INT 8
4264: PUSH
4265: LD_INT 11
4267: PUSH
4268: LD_INT 12
4270: PUSH
4271: LD_INT 15
4273: PUSH
4274: LD_INT 16
4276: PUSH
4277: LD_INT 20
4279: PUSH
4280: LD_INT 21
4282: PUSH
4283: LD_INT 22
4285: PUSH
4286: LD_INT 23
4288: PUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 26
4294: PUSH
4295: LD_INT 30
4297: PUSH
4298: LD_INT 31
4300: PUSH
4301: LD_INT 32
4303: PUSH
4304: LD_INT 36
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 101
4330: PUSH
4331: LD_INT 102
4333: PUSH
4334: LD_INT 105
4336: PUSH
4337: LD_INT 106
4339: PUSH
4340: LD_INT 108
4342: PUSH
4343: LD_INT 109
4345: PUSH
4346: LD_INT 112
4348: PUSH
4349: LD_INT 116
4351: PUSH
4352: LD_INT 117
4354: PUSH
4355: LD_INT 118
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: ST_TO_ADDR
4374: GO 6897
4376: LD_INT 7
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4496
4384: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4385: LD_ADDR_VAR 0 2
4389: PUSH
4390: LD_INT 2
4392: PUSH
4393: LD_INT 4
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: LD_INT 7
4401: PUSH
4402: LD_INT 11
4404: PUSH
4405: LD_INT 12
4407: PUSH
4408: LD_INT 15
4410: PUSH
4411: LD_INT 16
4413: PUSH
4414: LD_INT 20
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 22
4422: PUSH
4423: LD_INT 23
4425: PUSH
4426: LD_INT 25
4428: PUSH
4429: LD_INT 26
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 101
4450: PUSH
4451: LD_INT 102
4453: PUSH
4454: LD_INT 103
4456: PUSH
4457: LD_INT 105
4459: PUSH
4460: LD_INT 106
4462: PUSH
4463: LD_INT 108
4465: PUSH
4466: LD_INT 112
4468: PUSH
4469: LD_INT 116
4471: PUSH
4472: LD_INT 117
4474: PUSH
4475: LD_INT 118
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 6897
4496: LD_INT 8
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4644
4504: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 6
4521: PUSH
4522: LD_INT 7
4524: PUSH
4525: LD_INT 8
4527: PUSH
4528: LD_INT 11
4530: PUSH
4531: LD_INT 12
4533: PUSH
4534: LD_INT 15
4536: PUSH
4537: LD_INT 16
4539: PUSH
4540: LD_INT 20
4542: PUSH
4543: LD_INT 21
4545: PUSH
4546: LD_INT 22
4548: PUSH
4549: LD_INT 23
4551: PUSH
4552: LD_INT 25
4554: PUSH
4555: LD_INT 26
4557: PUSH
4558: LD_INT 30
4560: PUSH
4561: LD_INT 31
4563: PUSH
4564: LD_INT 32
4566: PUSH
4567: LD_INT 36
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: LD_INT 101
4594: PUSH
4595: LD_INT 102
4597: PUSH
4598: LD_INT 103
4600: PUSH
4601: LD_INT 105
4603: PUSH
4604: LD_INT 106
4606: PUSH
4607: LD_INT 108
4609: PUSH
4610: LD_INT 109
4612: PUSH
4613: LD_INT 112
4615: PUSH
4616: LD_INT 116
4618: PUSH
4619: LD_INT 117
4621: PUSH
4622: LD_INT 118
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: ST_TO_ADDR
4642: GO 6897
4644: LD_INT 9
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4652
4650: GO 4800
4652: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: LD_INT 2
4660: PUSH
4661: LD_INT 4
4663: PUSH
4664: LD_INT 5
4666: PUSH
4667: LD_INT 6
4669: PUSH
4670: LD_INT 7
4672: PUSH
4673: LD_INT 8
4675: PUSH
4676: LD_INT 11
4678: PUSH
4679: LD_INT 12
4681: PUSH
4682: LD_INT 15
4684: PUSH
4685: LD_INT 16
4687: PUSH
4688: LD_INT 20
4690: PUSH
4691: LD_INT 21
4693: PUSH
4694: LD_INT 22
4696: PUSH
4697: LD_INT 23
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: LD_INT 26
4705: PUSH
4706: LD_INT 28
4708: PUSH
4709: LD_INT 30
4711: PUSH
4712: LD_INT 31
4714: PUSH
4715: LD_INT 32
4717: PUSH
4718: LD_INT 36
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 101
4746: PUSH
4747: LD_INT 102
4749: PUSH
4750: LD_INT 103
4752: PUSH
4753: LD_INT 105
4755: PUSH
4756: LD_INT 106
4758: PUSH
4759: LD_INT 108
4761: PUSH
4762: LD_INT 109
4764: PUSH
4765: LD_INT 112
4767: PUSH
4768: LD_INT 114
4770: PUSH
4771: LD_INT 116
4773: PUSH
4774: LD_INT 117
4776: PUSH
4777: LD_INT 118
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: ST_TO_ADDR
4798: GO 6897
4800: LD_INT 10
4802: DOUBLE
4803: EQUAL
4804: IFTRUE 4808
4806: GO 5004
4808: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: LD_INT 2
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: LD_INT 5
4822: PUSH
4823: LD_INT 6
4825: PUSH
4826: LD_INT 7
4828: PUSH
4829: LD_INT 8
4831: PUSH
4832: LD_INT 9
4834: PUSH
4835: LD_INT 10
4837: PUSH
4838: LD_INT 11
4840: PUSH
4841: LD_INT 12
4843: PUSH
4844: LD_INT 13
4846: PUSH
4847: LD_INT 14
4849: PUSH
4850: LD_INT 15
4852: PUSH
4853: LD_INT 16
4855: PUSH
4856: LD_INT 17
4858: PUSH
4859: LD_INT 18
4861: PUSH
4862: LD_INT 19
4864: PUSH
4865: LD_INT 20
4867: PUSH
4868: LD_INT 21
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 23
4876: PUSH
4877: LD_INT 24
4879: PUSH
4880: LD_INT 25
4882: PUSH
4883: LD_INT 26
4885: PUSH
4886: LD_INT 28
4888: PUSH
4889: LD_INT 30
4891: PUSH
4892: LD_INT 31
4894: PUSH
4895: LD_INT 32
4897: PUSH
4898: LD_INT 36
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 101
4934: PUSH
4935: LD_INT 102
4937: PUSH
4938: LD_INT 103
4940: PUSH
4941: LD_INT 104
4943: PUSH
4944: LD_INT 105
4946: PUSH
4947: LD_INT 106
4949: PUSH
4950: LD_INT 107
4952: PUSH
4953: LD_INT 108
4955: PUSH
4956: LD_INT 109
4958: PUSH
4959: LD_INT 110
4961: PUSH
4962: LD_INT 111
4964: PUSH
4965: LD_INT 112
4967: PUSH
4968: LD_INT 114
4970: PUSH
4971: LD_INT 116
4973: PUSH
4974: LD_INT 117
4976: PUSH
4977: LD_INT 118
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: ST_TO_ADDR
5002: GO 6897
5004: LD_INT 11
5006: DOUBLE
5007: EQUAL
5008: IFTRUE 5012
5010: GO 5216
5012: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: LD_INT 2
5020: PUSH
5021: LD_INT 3
5023: PUSH
5024: LD_INT 4
5026: PUSH
5027: LD_INT 5
5029: PUSH
5030: LD_INT 6
5032: PUSH
5033: LD_INT 7
5035: PUSH
5036: LD_INT 8
5038: PUSH
5039: LD_INT 9
5041: PUSH
5042: LD_INT 10
5044: PUSH
5045: LD_INT 11
5047: PUSH
5048: LD_INT 12
5050: PUSH
5051: LD_INT 13
5053: PUSH
5054: LD_INT 14
5056: PUSH
5057: LD_INT 15
5059: PUSH
5060: LD_INT 16
5062: PUSH
5063: LD_INT 17
5065: PUSH
5066: LD_INT 18
5068: PUSH
5069: LD_INT 19
5071: PUSH
5072: LD_INT 20
5074: PUSH
5075: LD_INT 21
5077: PUSH
5078: LD_INT 22
5080: PUSH
5081: LD_INT 23
5083: PUSH
5084: LD_INT 24
5086: PUSH
5087: LD_INT 25
5089: PUSH
5090: LD_INT 26
5092: PUSH
5093: LD_INT 28
5095: PUSH
5096: LD_INT 30
5098: PUSH
5099: LD_INT 31
5101: PUSH
5102: LD_INT 32
5104: PUSH
5105: LD_INT 34
5107: PUSH
5108: LD_INT 36
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 101
5146: PUSH
5147: LD_INT 102
5149: PUSH
5150: LD_INT 103
5152: PUSH
5153: LD_INT 104
5155: PUSH
5156: LD_INT 105
5158: PUSH
5159: LD_INT 106
5161: PUSH
5162: LD_INT 107
5164: PUSH
5165: LD_INT 108
5167: PUSH
5168: LD_INT 109
5170: PUSH
5171: LD_INT 110
5173: PUSH
5174: LD_INT 111
5176: PUSH
5177: LD_INT 112
5179: PUSH
5180: LD_INT 114
5182: PUSH
5183: LD_INT 116
5185: PUSH
5186: LD_INT 117
5188: PUSH
5189: LD_INT 118
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 6897
5216: LD_INT 12
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5444
5224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5225: LD_ADDR_VAR 0 2
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: LD_INT 2
5235: PUSH
5236: LD_INT 3
5238: PUSH
5239: LD_INT 4
5241: PUSH
5242: LD_INT 5
5244: PUSH
5245: LD_INT 6
5247: PUSH
5248: LD_INT 7
5250: PUSH
5251: LD_INT 8
5253: PUSH
5254: LD_INT 9
5256: PUSH
5257: LD_INT 10
5259: PUSH
5260: LD_INT 11
5262: PUSH
5263: LD_INT 12
5265: PUSH
5266: LD_INT 13
5268: PUSH
5269: LD_INT 14
5271: PUSH
5272: LD_INT 15
5274: PUSH
5275: LD_INT 16
5277: PUSH
5278: LD_INT 17
5280: PUSH
5281: LD_INT 18
5283: PUSH
5284: LD_INT 19
5286: PUSH
5287: LD_INT 20
5289: PUSH
5290: LD_INT 21
5292: PUSH
5293: LD_INT 22
5295: PUSH
5296: LD_INT 23
5298: PUSH
5299: LD_INT 24
5301: PUSH
5302: LD_INT 25
5304: PUSH
5305: LD_INT 26
5307: PUSH
5308: LD_INT 27
5310: PUSH
5311: LD_INT 28
5313: PUSH
5314: LD_INT 30
5316: PUSH
5317: LD_INT 31
5319: PUSH
5320: LD_INT 32
5322: PUSH
5323: LD_INT 33
5325: PUSH
5326: LD_INT 34
5328: PUSH
5329: LD_INT 36
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 101
5370: PUSH
5371: LD_INT 102
5373: PUSH
5374: LD_INT 103
5376: PUSH
5377: LD_INT 104
5379: PUSH
5380: LD_INT 105
5382: PUSH
5383: LD_INT 106
5385: PUSH
5386: LD_INT 107
5388: PUSH
5389: LD_INT 108
5391: PUSH
5392: LD_INT 109
5394: PUSH
5395: LD_INT 110
5397: PUSH
5398: LD_INT 111
5400: PUSH
5401: LD_INT 112
5403: PUSH
5404: LD_INT 113
5406: PUSH
5407: LD_INT 114
5409: PUSH
5410: LD_INT 116
5412: PUSH
5413: LD_INT 117
5415: PUSH
5416: LD_INT 118
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: ST_TO_ADDR
5442: GO 6897
5444: LD_INT 13
5446: DOUBLE
5447: EQUAL
5448: IFTRUE 5452
5450: GO 5660
5452: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5453: LD_ADDR_VAR 0 2
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: LD_INT 2
5463: PUSH
5464: LD_INT 3
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: LD_INT 5
5472: PUSH
5473: LD_INT 8
5475: PUSH
5476: LD_INT 9
5478: PUSH
5479: LD_INT 10
5481: PUSH
5482: LD_INT 11
5484: PUSH
5485: LD_INT 12
5487: PUSH
5488: LD_INT 14
5490: PUSH
5491: LD_INT 15
5493: PUSH
5494: LD_INT 16
5496: PUSH
5497: LD_INT 17
5499: PUSH
5500: LD_INT 18
5502: PUSH
5503: LD_INT 19
5505: PUSH
5506: LD_INT 20
5508: PUSH
5509: LD_INT 21
5511: PUSH
5512: LD_INT 22
5514: PUSH
5515: LD_INT 23
5517: PUSH
5518: LD_INT 24
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 26
5526: PUSH
5527: LD_INT 27
5529: PUSH
5530: LD_INT 28
5532: PUSH
5533: LD_INT 30
5535: PUSH
5536: LD_INT 31
5538: PUSH
5539: LD_INT 32
5541: PUSH
5542: LD_INT 33
5544: PUSH
5545: LD_INT 34
5547: PUSH
5548: LD_INT 36
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 101
5586: PUSH
5587: LD_INT 102
5589: PUSH
5590: LD_INT 103
5592: PUSH
5593: LD_INT 104
5595: PUSH
5596: LD_INT 105
5598: PUSH
5599: LD_INT 106
5601: PUSH
5602: LD_INT 107
5604: PUSH
5605: LD_INT 108
5607: PUSH
5608: LD_INT 109
5610: PUSH
5611: LD_INT 110
5613: PUSH
5614: LD_INT 111
5616: PUSH
5617: LD_INT 112
5619: PUSH
5620: LD_INT 113
5622: PUSH
5623: LD_INT 114
5625: PUSH
5626: LD_INT 116
5628: PUSH
5629: LD_INT 117
5631: PUSH
5632: LD_INT 118
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: ST_TO_ADDR
5658: GO 6897
5660: LD_INT 14
5662: DOUBLE
5663: EQUAL
5664: IFTRUE 5668
5666: GO 5892
5668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5669: LD_ADDR_VAR 0 2
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: LD_INT 2
5679: PUSH
5680: LD_INT 3
5682: PUSH
5683: LD_INT 4
5685: PUSH
5686: LD_INT 5
5688: PUSH
5689: LD_INT 6
5691: PUSH
5692: LD_INT 7
5694: PUSH
5695: LD_INT 8
5697: PUSH
5698: LD_INT 9
5700: PUSH
5701: LD_INT 10
5703: PUSH
5704: LD_INT 11
5706: PUSH
5707: LD_INT 12
5709: PUSH
5710: LD_INT 13
5712: PUSH
5713: LD_INT 14
5715: PUSH
5716: LD_INT 15
5718: PUSH
5719: LD_INT 16
5721: PUSH
5722: LD_INT 17
5724: PUSH
5725: LD_INT 18
5727: PUSH
5728: LD_INT 19
5730: PUSH
5731: LD_INT 20
5733: PUSH
5734: LD_INT 21
5736: PUSH
5737: LD_INT 22
5739: PUSH
5740: LD_INT 23
5742: PUSH
5743: LD_INT 24
5745: PUSH
5746: LD_INT 25
5748: PUSH
5749: LD_INT 26
5751: PUSH
5752: LD_INT 27
5754: PUSH
5755: LD_INT 28
5757: PUSH
5758: LD_INT 29
5760: PUSH
5761: LD_INT 30
5763: PUSH
5764: LD_INT 31
5766: PUSH
5767: LD_INT 32
5769: PUSH
5770: LD_INT 33
5772: PUSH
5773: LD_INT 34
5775: PUSH
5776: LD_INT 36
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 101
5818: PUSH
5819: LD_INT 102
5821: PUSH
5822: LD_INT 103
5824: PUSH
5825: LD_INT 104
5827: PUSH
5828: LD_INT 105
5830: PUSH
5831: LD_INT 106
5833: PUSH
5834: LD_INT 107
5836: PUSH
5837: LD_INT 108
5839: PUSH
5840: LD_INT 109
5842: PUSH
5843: LD_INT 110
5845: PUSH
5846: LD_INT 111
5848: PUSH
5849: LD_INT 112
5851: PUSH
5852: LD_INT 113
5854: PUSH
5855: LD_INT 114
5857: PUSH
5858: LD_INT 116
5860: PUSH
5861: LD_INT 117
5863: PUSH
5864: LD_INT 118
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: ST_TO_ADDR
5890: GO 6897
5892: LD_INT 15
5894: DOUBLE
5895: EQUAL
5896: IFTRUE 5900
5898: GO 6124
5900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 1
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: LD_INT 3
5914: PUSH
5915: LD_INT 4
5917: PUSH
5918: LD_INT 5
5920: PUSH
5921: LD_INT 6
5923: PUSH
5924: LD_INT 7
5926: PUSH
5927: LD_INT 8
5929: PUSH
5930: LD_INT 9
5932: PUSH
5933: LD_INT 10
5935: PUSH
5936: LD_INT 11
5938: PUSH
5939: LD_INT 12
5941: PUSH
5942: LD_INT 13
5944: PUSH
5945: LD_INT 14
5947: PUSH
5948: LD_INT 15
5950: PUSH
5951: LD_INT 16
5953: PUSH
5954: LD_INT 17
5956: PUSH
5957: LD_INT 18
5959: PUSH
5960: LD_INT 19
5962: PUSH
5963: LD_INT 20
5965: PUSH
5966: LD_INT 21
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 23
5974: PUSH
5975: LD_INT 24
5977: PUSH
5978: LD_INT 25
5980: PUSH
5981: LD_INT 26
5983: PUSH
5984: LD_INT 27
5986: PUSH
5987: LD_INT 28
5989: PUSH
5990: LD_INT 29
5992: PUSH
5993: LD_INT 30
5995: PUSH
5996: LD_INT 31
5998: PUSH
5999: LD_INT 32
6001: PUSH
6002: LD_INT 33
6004: PUSH
6005: LD_INT 34
6007: PUSH
6008: LD_INT 36
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 101
6050: PUSH
6051: LD_INT 102
6053: PUSH
6054: LD_INT 103
6056: PUSH
6057: LD_INT 104
6059: PUSH
6060: LD_INT 105
6062: PUSH
6063: LD_INT 106
6065: PUSH
6066: LD_INT 107
6068: PUSH
6069: LD_INT 108
6071: PUSH
6072: LD_INT 109
6074: PUSH
6075: LD_INT 110
6077: PUSH
6078: LD_INT 111
6080: PUSH
6081: LD_INT 112
6083: PUSH
6084: LD_INT 113
6086: PUSH
6087: LD_INT 114
6089: PUSH
6090: LD_INT 116
6092: PUSH
6093: LD_INT 117
6095: PUSH
6096: LD_INT 118
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: ST_TO_ADDR
6122: GO 6897
6124: LD_INT 16
6126: DOUBLE
6127: EQUAL
6128: IFTRUE 6132
6130: GO 6268
6132: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 2
6140: PUSH
6141: LD_INT 4
6143: PUSH
6144: LD_INT 5
6146: PUSH
6147: LD_INT 7
6149: PUSH
6150: LD_INT 11
6152: PUSH
6153: LD_INT 12
6155: PUSH
6156: LD_INT 15
6158: PUSH
6159: LD_INT 16
6161: PUSH
6162: LD_INT 20
6164: PUSH
6165: LD_INT 21
6167: PUSH
6168: LD_INT 22
6170: PUSH
6171: LD_INT 23
6173: PUSH
6174: LD_INT 25
6176: PUSH
6177: LD_INT 26
6179: PUSH
6180: LD_INT 30
6182: PUSH
6183: LD_INT 31
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 33
6191: PUSH
6192: LD_INT 34
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 101
6218: PUSH
6219: LD_INT 102
6221: PUSH
6222: LD_INT 103
6224: PUSH
6225: LD_INT 106
6227: PUSH
6228: LD_INT 108
6230: PUSH
6231: LD_INT 112
6233: PUSH
6234: LD_INT 113
6236: PUSH
6237: LD_INT 114
6239: PUSH
6240: LD_INT 116
6242: PUSH
6243: LD_INT 117
6245: PUSH
6246: LD_INT 118
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: ST_TO_ADDR
6266: GO 6897
6268: LD_INT 17
6270: DOUBLE
6271: EQUAL
6272: IFTRUE 6276
6274: GO 6500
6276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: LD_INT 1
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: LD_INT 6
6299: PUSH
6300: LD_INT 7
6302: PUSH
6303: LD_INT 8
6305: PUSH
6306: LD_INT 9
6308: PUSH
6309: LD_INT 10
6311: PUSH
6312: LD_INT 11
6314: PUSH
6315: LD_INT 12
6317: PUSH
6318: LD_INT 13
6320: PUSH
6321: LD_INT 14
6323: PUSH
6324: LD_INT 15
6326: PUSH
6327: LD_INT 16
6329: PUSH
6330: LD_INT 17
6332: PUSH
6333: LD_INT 18
6335: PUSH
6336: LD_INT 19
6338: PUSH
6339: LD_INT 20
6341: PUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 22
6347: PUSH
6348: LD_INT 23
6350: PUSH
6351: LD_INT 24
6353: PUSH
6354: LD_INT 25
6356: PUSH
6357: LD_INT 26
6359: PUSH
6360: LD_INT 27
6362: PUSH
6363: LD_INT 28
6365: PUSH
6366: LD_INT 29
6368: PUSH
6369: LD_INT 30
6371: PUSH
6372: LD_INT 31
6374: PUSH
6375: LD_INT 32
6377: PUSH
6378: LD_INT 33
6380: PUSH
6381: LD_INT 34
6383: PUSH
6384: LD_INT 36
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 101
6426: PUSH
6427: LD_INT 102
6429: PUSH
6430: LD_INT 103
6432: PUSH
6433: LD_INT 104
6435: PUSH
6436: LD_INT 105
6438: PUSH
6439: LD_INT 106
6441: PUSH
6442: LD_INT 107
6444: PUSH
6445: LD_INT 108
6447: PUSH
6448: LD_INT 109
6450: PUSH
6451: LD_INT 110
6453: PUSH
6454: LD_INT 111
6456: PUSH
6457: LD_INT 112
6459: PUSH
6460: LD_INT 113
6462: PUSH
6463: LD_INT 114
6465: PUSH
6466: LD_INT 116
6468: PUSH
6469: LD_INT 117
6471: PUSH
6472: LD_INT 118
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: ST_TO_ADDR
6498: GO 6897
6500: LD_INT 18
6502: DOUBLE
6503: EQUAL
6504: IFTRUE 6508
6506: GO 6656
6508: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6509: LD_ADDR_VAR 0 2
6513: PUSH
6514: LD_INT 2
6516: PUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 5
6522: PUSH
6523: LD_INT 7
6525: PUSH
6526: LD_INT 11
6528: PUSH
6529: LD_INT 12
6531: PUSH
6532: LD_INT 15
6534: PUSH
6535: LD_INT 16
6537: PUSH
6538: LD_INT 20
6540: PUSH
6541: LD_INT 21
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 23
6549: PUSH
6550: LD_INT 25
6552: PUSH
6553: LD_INT 26
6555: PUSH
6556: LD_INT 30
6558: PUSH
6559: LD_INT 31
6561: PUSH
6562: LD_INT 32
6564: PUSH
6565: LD_INT 33
6567: PUSH
6568: LD_INT 34
6570: PUSH
6571: LD_INT 35
6573: PUSH
6574: LD_INT 36
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 101
6602: PUSH
6603: LD_INT 102
6605: PUSH
6606: LD_INT 103
6608: PUSH
6609: LD_INT 106
6611: PUSH
6612: LD_INT 108
6614: PUSH
6615: LD_INT 112
6617: PUSH
6618: LD_INT 113
6620: PUSH
6621: LD_INT 114
6623: PUSH
6624: LD_INT 115
6626: PUSH
6627: LD_INT 116
6629: PUSH
6630: LD_INT 117
6632: PUSH
6633: LD_INT 118
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: ST_TO_ADDR
6654: GO 6897
6656: LD_INT 19
6658: DOUBLE
6659: EQUAL
6660: IFTRUE 6664
6662: GO 6896
6664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6665: LD_ADDR_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 3
6678: PUSH
6679: LD_INT 4
6681: PUSH
6682: LD_INT 5
6684: PUSH
6685: LD_INT 6
6687: PUSH
6688: LD_INT 7
6690: PUSH
6691: LD_INT 8
6693: PUSH
6694: LD_INT 9
6696: PUSH
6697: LD_INT 10
6699: PUSH
6700: LD_INT 11
6702: PUSH
6703: LD_INT 12
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: LD_INT 15
6714: PUSH
6715: LD_INT 16
6717: PUSH
6718: LD_INT 17
6720: PUSH
6721: LD_INT 18
6723: PUSH
6724: LD_INT 19
6726: PUSH
6727: LD_INT 20
6729: PUSH
6730: LD_INT 21
6732: PUSH
6733: LD_INT 22
6735: PUSH
6736: LD_INT 23
6738: PUSH
6739: LD_INT 24
6741: PUSH
6742: LD_INT 25
6744: PUSH
6745: LD_INT 26
6747: PUSH
6748: LD_INT 27
6750: PUSH
6751: LD_INT 28
6753: PUSH
6754: LD_INT 29
6756: PUSH
6757: LD_INT 30
6759: PUSH
6760: LD_INT 31
6762: PUSH
6763: LD_INT 32
6765: PUSH
6766: LD_INT 33
6768: PUSH
6769: LD_INT 34
6771: PUSH
6772: LD_INT 35
6774: PUSH
6775: LD_INT 36
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 101
6818: PUSH
6819: LD_INT 102
6821: PUSH
6822: LD_INT 103
6824: PUSH
6825: LD_INT 104
6827: PUSH
6828: LD_INT 105
6830: PUSH
6831: LD_INT 106
6833: PUSH
6834: LD_INT 107
6836: PUSH
6837: LD_INT 108
6839: PUSH
6840: LD_INT 109
6842: PUSH
6843: LD_INT 110
6845: PUSH
6846: LD_INT 111
6848: PUSH
6849: LD_INT 112
6851: PUSH
6852: LD_INT 113
6854: PUSH
6855: LD_INT 114
6857: PUSH
6858: LD_INT 115
6860: PUSH
6861: LD_INT 116
6863: PUSH
6864: LD_INT 117
6866: PUSH
6867: LD_INT 118
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: ST_TO_ADDR
6894: GO 6897
6896: POP
// end else
6897: GO 7128
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6899: LD_ADDR_VAR 0 2
6903: PUSH
6904: LD_INT 1
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: LD_INT 4
6915: PUSH
6916: LD_INT 5
6918: PUSH
6919: LD_INT 6
6921: PUSH
6922: LD_INT 7
6924: PUSH
6925: LD_INT 8
6927: PUSH
6928: LD_INT 9
6930: PUSH
6931: LD_INT 10
6933: PUSH
6934: LD_INT 11
6936: PUSH
6937: LD_INT 12
6939: PUSH
6940: LD_INT 13
6942: PUSH
6943: LD_INT 14
6945: PUSH
6946: LD_INT 15
6948: PUSH
6949: LD_INT 16
6951: PUSH
6952: LD_INT 17
6954: PUSH
6955: LD_INT 18
6957: PUSH
6958: LD_INT 19
6960: PUSH
6961: LD_INT 20
6963: PUSH
6964: LD_INT 21
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_INT 23
6972: PUSH
6973: LD_INT 24
6975: PUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 26
6981: PUSH
6982: LD_INT 27
6984: PUSH
6985: LD_INT 28
6987: PUSH
6988: LD_INT 29
6990: PUSH
6991: LD_INT 30
6993: PUSH
6994: LD_INT 31
6996: PUSH
6997: LD_INT 32
6999: PUSH
7000: LD_INT 33
7002: PUSH
7003: LD_INT 34
7005: PUSH
7006: LD_INT 35
7008: PUSH
7009: LD_INT 36
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 101
7052: PUSH
7053: LD_INT 102
7055: PUSH
7056: LD_INT 103
7058: PUSH
7059: LD_INT 104
7061: PUSH
7062: LD_INT 105
7064: PUSH
7065: LD_INT 106
7067: PUSH
7068: LD_INT 107
7070: PUSH
7071: LD_INT 108
7073: PUSH
7074: LD_INT 109
7076: PUSH
7077: LD_INT 110
7079: PUSH
7080: LD_INT 111
7082: PUSH
7083: LD_INT 112
7085: PUSH
7086: LD_INT 113
7088: PUSH
7089: LD_INT 114
7091: PUSH
7092: LD_INT 115
7094: PUSH
7095: LD_INT 116
7097: PUSH
7098: LD_INT 117
7100: PUSH
7101: LD_INT 118
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: ST_TO_ADDR
// if result then
7128: LD_VAR 0 2
7132: IFFALSE 7918
// begin normal :=  ;
7134: LD_ADDR_VAR 0 5
7138: PUSH
7139: LD_STRING 
7141: ST_TO_ADDR
// hardcore :=  ;
7142: LD_ADDR_VAR 0 6
7146: PUSH
7147: LD_STRING 
7149: ST_TO_ADDR
// active :=  ;
7150: LD_ADDR_VAR 0 7
7154: PUSH
7155: LD_STRING 
7157: ST_TO_ADDR
// for i = 1 to normalCounter do
7158: LD_ADDR_VAR 0 8
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_EXP 9
7172: PUSH
7173: FOR_TO
7174: IFFALSE 7275
// begin tmp := 0 ;
7176: LD_ADDR_VAR 0 3
7180: PUSH
7181: LD_STRING 0
7183: ST_TO_ADDR
// if result [ 1 ] then
7184: LD_VAR 0 2
7188: PUSH
7189: LD_INT 1
7191: ARRAY
7192: IFFALSE 7257
// if result [ 1 ] [ 1 ] = i then
7194: LD_VAR 0 2
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: PUSH
7207: LD_VAR 0 8
7211: EQUAL
7212: IFFALSE 7257
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7214: LD_ADDR_VAR 0 2
7218: PUSH
7219: LD_VAR 0 2
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_VAR 0 2
7231: PUSH
7232: LD_INT 1
7234: ARRAY
7235: PPUSH
7236: LD_INT 1
7238: PPUSH
7239: CALL_OW 3
7243: PPUSH
7244: CALL_OW 1
7248: ST_TO_ADDR
// tmp := 1 ;
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_STRING 1
7256: ST_TO_ADDR
// end ; normal := normal & tmp ;
7257: LD_ADDR_VAR 0 5
7261: PUSH
7262: LD_VAR 0 5
7266: PUSH
7267: LD_VAR 0 3
7271: STR
7272: ST_TO_ADDR
// end ;
7273: GO 7173
7275: POP
7276: POP
// for i = 1 to hardcoreCounter do
7277: LD_ADDR_VAR 0 8
7281: PUSH
7282: DOUBLE
7283: LD_INT 1
7285: DEC
7286: ST_TO_ADDR
7287: LD_EXP 10
7291: PUSH
7292: FOR_TO
7293: IFFALSE 7398
// begin tmp := 0 ;
7295: LD_ADDR_VAR 0 3
7299: PUSH
7300: LD_STRING 0
7302: ST_TO_ADDR
// if result [ 2 ] then
7303: LD_VAR 0 2
7307: PUSH
7308: LD_INT 2
7310: ARRAY
7311: IFFALSE 7380
// if result [ 2 ] [ 1 ] = 100 + i then
7313: LD_VAR 0 2
7317: PUSH
7318: LD_INT 2
7320: ARRAY
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: PUSH
7326: LD_INT 100
7328: PUSH
7329: LD_VAR 0 8
7333: PLUS
7334: EQUAL
7335: IFFALSE 7380
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7337: LD_ADDR_VAR 0 2
7341: PUSH
7342: LD_VAR 0 2
7346: PPUSH
7347: LD_INT 2
7349: PPUSH
7350: LD_VAR 0 2
7354: PUSH
7355: LD_INT 2
7357: ARRAY
7358: PPUSH
7359: LD_INT 1
7361: PPUSH
7362: CALL_OW 3
7366: PPUSH
7367: CALL_OW 1
7371: ST_TO_ADDR
// tmp := 1 ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: LD_STRING 1
7379: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7380: LD_ADDR_VAR 0 6
7384: PUSH
7385: LD_VAR 0 6
7389: PUSH
7390: LD_VAR 0 3
7394: STR
7395: ST_TO_ADDR
// end ;
7396: GO 7292
7398: POP
7399: POP
// if isGameLoad then
7400: LD_VAR 0 1
7404: IFFALSE 7879
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7406: LD_ADDR_VAR 0 4
7410: PUSH
7411: LD_EXP 13
7415: PUSH
7416: LD_EXP 12
7420: PUSH
7421: LD_EXP 14
7425: PUSH
7426: LD_EXP 11
7430: PUSH
7431: LD_EXP 15
7435: PUSH
7436: LD_EXP 16
7440: PUSH
7441: LD_EXP 17
7445: PUSH
7446: LD_EXP 18
7450: PUSH
7451: LD_EXP 19
7455: PUSH
7456: LD_EXP 20
7460: PUSH
7461: LD_EXP 21
7465: PUSH
7466: LD_EXP 22
7470: PUSH
7471: LD_EXP 23
7475: PUSH
7476: LD_EXP 24
7480: PUSH
7481: LD_EXP 32
7485: PUSH
7486: LD_EXP 33
7490: PUSH
7491: LD_EXP 34
7495: PUSH
7496: LD_EXP 35
7500: PUSH
7501: LD_EXP 37
7505: PUSH
7506: LD_EXP 38
7510: PUSH
7511: LD_EXP 39
7515: PUSH
7516: LD_EXP 42
7520: PUSH
7521: LD_EXP 44
7525: PUSH
7526: LD_EXP 45
7530: PUSH
7531: LD_EXP 46
7535: PUSH
7536: LD_EXP 48
7540: PUSH
7541: LD_EXP 49
7545: PUSH
7546: LD_EXP 52
7550: PUSH
7551: LD_EXP 53
7555: PUSH
7556: LD_EXP 54
7560: PUSH
7561: LD_EXP 55
7565: PUSH
7566: LD_EXP 56
7570: PUSH
7571: LD_EXP 57
7575: PUSH
7576: LD_EXP 58
7580: PUSH
7581: LD_EXP 59
7585: PUSH
7586: LD_EXP 60
7590: PUSH
7591: LD_EXP 25
7595: PUSH
7596: LD_EXP 26
7600: PUSH
7601: LD_EXP 29
7605: PUSH
7606: LD_EXP 30
7610: PUSH
7611: LD_EXP 31
7615: PUSH
7616: LD_EXP 27
7620: PUSH
7621: LD_EXP 28
7625: PUSH
7626: LD_EXP 36
7630: PUSH
7631: LD_EXP 40
7635: PUSH
7636: LD_EXP 41
7640: PUSH
7641: LD_EXP 43
7645: PUSH
7646: LD_EXP 47
7650: PUSH
7651: LD_EXP 50
7655: PUSH
7656: LD_EXP 51
7660: PUSH
7661: LD_EXP 61
7665: PUSH
7666: LD_EXP 62
7670: PUSH
7671: LD_EXP 63
7675: PUSH
7676: LD_EXP 64
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// tmp :=  ;
7737: LD_ADDR_VAR 0 3
7741: PUSH
7742: LD_STRING 
7744: ST_TO_ADDR
// for i = 1 to normalCounter do
7745: LD_ADDR_VAR 0 8
7749: PUSH
7750: DOUBLE
7751: LD_INT 1
7753: DEC
7754: ST_TO_ADDR
7755: LD_EXP 9
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7797
// begin if flags [ i ] then
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 8
7772: ARRAY
7773: IFFALSE 7795
// tmp := tmp & i & ; ;
7775: LD_ADDR_VAR 0 3
7779: PUSH
7780: LD_VAR 0 3
7784: PUSH
7785: LD_VAR 0 8
7789: STR
7790: PUSH
7791: LD_STRING ;
7793: STR
7794: ST_TO_ADDR
// end ;
7795: GO 7760
7797: POP
7798: POP
// for i = 1 to hardcoreCounter do
7799: LD_ADDR_VAR 0 8
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_EXP 10
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7861
// begin if flags [ normalCounter + i ] then
7817: LD_VAR 0 4
7821: PUSH
7822: LD_EXP 9
7826: PUSH
7827: LD_VAR 0 8
7831: PLUS
7832: ARRAY
7833: IFFALSE 7859
// tmp := tmp & ( 100 + i ) & ; ;
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_VAR 0 3
7844: PUSH
7845: LD_INT 100
7847: PUSH
7848: LD_VAR 0 8
7852: PLUS
7853: STR
7854: PUSH
7855: LD_STRING ;
7857: STR
7858: ST_TO_ADDR
// end ;
7859: GO 7814
7861: POP
7862: POP
// if tmp then
7863: LD_VAR 0 3
7867: IFFALSE 7879
// active := tmp ;
7869: LD_ADDR_VAR 0 7
7873: PUSH
7874: LD_VAR 0 3
7878: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7879: LD_STRING getStreamItemsFromMission("
7881: PUSH
7882: LD_VAR 0 5
7886: STR
7887: PUSH
7888: LD_STRING ","
7890: STR
7891: PUSH
7892: LD_VAR 0 6
7896: STR
7897: PUSH
7898: LD_STRING ","
7900: STR
7901: PUSH
7902: LD_VAR 0 7
7906: STR
7907: PUSH
7908: LD_STRING ")
7910: STR
7911: PPUSH
7912: CALL_OW 559
// end else
7916: GO 7925
// ToLua ( getStreamItemsFromMission("","","") ) ;
7918: LD_STRING getStreamItemsFromMission("","","")
7920: PPUSH
7921: CALL_OW 559
// end ;
7925: LD_VAR 0 2
7929: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7930: LD_EXP 8
7934: PUSH
7935: LD_EXP 13
7939: AND
7940: IFFALSE 8064
7942: GO 7944
7944: DISABLE
7945: LD_INT 0
7947: PPUSH
7948: PPUSH
// begin enable ;
7949: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_OWVAR 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 34
7972: PUSH
7973: LD_INT 7
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 34
7982: PUSH
7983: LD_INT 45
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 34
7992: PUSH
7993: LD_INT 28
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: LD_INT 34
8002: PUSH
8003: LD_INT 47
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PPUSH
8021: CALL_OW 69
8025: ST_TO_ADDR
// if not tmp then
8026: LD_VAR 0 2
8030: NOT
8031: IFFALSE 8035
// exit ;
8033: GO 8064
// for i in tmp do
8035: LD_ADDR_VAR 0 1
8039: PUSH
8040: LD_VAR 0 2
8044: PUSH
8045: FOR_IN
8046: IFFALSE 8062
// begin SetLives ( i , 0 ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: LD_INT 0
8055: PPUSH
8056: CALL_OW 234
// end ;
8060: GO 8045
8062: POP
8063: POP
// end ;
8064: PPOPN 2
8066: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8067: LD_EXP 8
8071: PUSH
8072: LD_EXP 14
8076: AND
8077: IFFALSE 8161
8079: GO 8081
8081: DISABLE
8082: LD_INT 0
8084: PPUSH
8085: PPUSH
// begin enable ;
8086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_OWVAR 2
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 32
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8161
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8159
// begin SetLives ( i , 0 ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: LD_INT 0
8152: PPUSH
8153: CALL_OW 234
// end ;
8157: GO 8142
8159: POP
8160: POP
// end ;
8161: PPOPN 2
8163: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8164: LD_EXP 8
8168: PUSH
8169: LD_EXP 11
8173: AND
8174: IFFALSE 8267
8176: GO 8178
8178: DISABLE
8179: LD_INT 0
8181: PPUSH
// begin enable ;
8182: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8183: LD_ADDR_VAR 0 1
8187: PUSH
8188: LD_INT 22
8190: PUSH
8191: LD_OWVAR 2
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: LD_INT 25
8205: PUSH
8206: LD_INT 5
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 25
8215: PUSH
8216: LD_INT 9
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 25
8225: PUSH
8226: LD_INT 8
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 69
8247: PUSH
8248: FOR_IN
8249: IFFALSE 8265
// begin SetClass ( i , 1 ) ;
8251: LD_VAR 0 1
8255: PPUSH
8256: LD_INT 1
8258: PPUSH
8259: CALL_OW 336
// end ;
8263: GO 8248
8265: POP
8266: POP
// end ;
8267: PPOPN 1
8269: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8270: LD_EXP 8
8274: PUSH
8275: LD_EXP 12
8279: AND
8280: PUSH
8281: LD_OWVAR 65
8285: PUSH
8286: LD_INT 7
8288: LESS
8289: AND
8290: IFFALSE 8304
8292: GO 8294
8294: DISABLE
// begin enable ;
8295: ENABLE
// game_speed := 7 ;
8296: LD_ADDR_OWVAR 65
8300: PUSH
8301: LD_INT 7
8303: ST_TO_ADDR
// end ;
8304: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8305: LD_EXP 8
8309: PUSH
8310: LD_EXP 15
8314: AND
8315: IFFALSE 8517
8317: GO 8319
8319: DISABLE
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8325: LD_ADDR_VAR 0 3
8329: PUSH
8330: LD_INT 81
8332: PUSH
8333: LD_OWVAR 2
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 21
8344: PUSH
8345: LD_INT 1
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 69
8360: ST_TO_ADDR
// if not tmp then
8361: LD_VAR 0 3
8365: NOT
8366: IFFALSE 8370
// exit ;
8368: GO 8517
// if tmp > 5 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 5
8377: GREATER
8378: IFFALSE 8390
// k := 5 else
8380: LD_ADDR_VAR 0 2
8384: PUSH
8385: LD_INT 5
8387: ST_TO_ADDR
8388: GO 8400
// k := tmp ;
8390: LD_ADDR_VAR 0 2
8394: PUSH
8395: LD_VAR 0 3
8399: ST_TO_ADDR
// for i := 1 to k do
8400: LD_ADDR_VAR 0 1
8404: PUSH
8405: DOUBLE
8406: LD_INT 1
8408: DEC
8409: ST_TO_ADDR
8410: LD_VAR 0 2
8414: PUSH
8415: FOR_TO
8416: IFFALSE 8515
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8418: LD_VAR 0 3
8422: PUSH
8423: LD_VAR 0 1
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 1
8433: PUSH
8434: LD_INT 4
8436: MOD
8437: PUSH
8438: LD_INT 1
8440: PLUS
8441: PPUSH
8442: CALL_OW 259
8446: PUSH
8447: LD_INT 10
8449: LESS
8450: IFFALSE 8513
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8452: LD_VAR 0 3
8456: PUSH
8457: LD_VAR 0 1
8461: ARRAY
8462: PPUSH
8463: LD_VAR 0 1
8467: PUSH
8468: LD_INT 4
8470: MOD
8471: PUSH
8472: LD_INT 1
8474: PLUS
8475: PPUSH
8476: LD_VAR 0 3
8480: PUSH
8481: LD_VAR 0 1
8485: ARRAY
8486: PPUSH
8487: LD_VAR 0 1
8491: PUSH
8492: LD_INT 4
8494: MOD
8495: PUSH
8496: LD_INT 1
8498: PLUS
8499: PPUSH
8500: CALL_OW 259
8504: PUSH
8505: LD_INT 1
8507: PLUS
8508: PPUSH
8509: CALL_OW 237
8513: GO 8415
8515: POP
8516: POP
// end ;
8517: PPOPN 3
8519: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8520: LD_EXP 8
8524: PUSH
8525: LD_EXP 16
8529: AND
8530: IFFALSE 8550
8532: GO 8534
8534: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8535: LD_INT 4
8537: PPUSH
8538: LD_OWVAR 2
8542: PPUSH
8543: LD_INT 0
8545: PPUSH
8546: CALL_OW 324
8550: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8551: LD_EXP 8
8555: PUSH
8556: LD_EXP 45
8560: AND
8561: IFFALSE 8581
8563: GO 8565
8565: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8566: LD_INT 19
8568: PPUSH
8569: LD_OWVAR 2
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 324
8581: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8582: LD_EXP 8
8586: PUSH
8587: LD_EXP 17
8591: AND
8592: IFFALSE 8694
8594: GO 8596
8596: DISABLE
8597: LD_INT 0
8599: PPUSH
8600: PPUSH
// begin enable ;
8601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_INT 22
8609: PUSH
8610: LD_OWVAR 2
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 2
8621: PUSH
8622: LD_INT 34
8624: PUSH
8625: LD_INT 11
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 34
8634: PUSH
8635: LD_INT 30
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: ST_TO_ADDR
// if not tmp then
8656: LD_VAR 0 2
8660: NOT
8661: IFFALSE 8665
// exit ;
8663: GO 8694
// for i in tmp do
8665: LD_ADDR_VAR 0 1
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8692
// begin SetLives ( i , 0 ) ;
8678: LD_VAR 0 1
8682: PPUSH
8683: LD_INT 0
8685: PPUSH
8686: CALL_OW 234
// end ;
8690: GO 8675
8692: POP
8693: POP
// end ;
8694: PPOPN 2
8696: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8697: LD_EXP 8
8701: PUSH
8702: LD_EXP 18
8706: AND
8707: IFFALSE 8727
8709: GO 8711
8711: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8712: LD_INT 32
8714: PPUSH
8715: LD_OWVAR 2
8719: PPUSH
8720: LD_INT 0
8722: PPUSH
8723: CALL_OW 324
8727: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8728: LD_EXP 8
8732: PUSH
8733: LD_EXP 19
8737: AND
8738: IFFALSE 8919
8740: GO 8742
8742: DISABLE
8743: LD_INT 0
8745: PPUSH
8746: PPUSH
8747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8748: LD_ADDR_VAR 0 2
8752: PUSH
8753: LD_INT 22
8755: PUSH
8756: LD_OWVAR 2
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 33
8767: PUSH
8768: LD_INT 3
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 69
8783: ST_TO_ADDR
// if not tmp then
8784: LD_VAR 0 2
8788: NOT
8789: IFFALSE 8793
// exit ;
8791: GO 8919
// side := 0 ;
8793: LD_ADDR_VAR 0 3
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// for i := 1 to 8 do
8801: LD_ADDR_VAR 0 1
8805: PUSH
8806: DOUBLE
8807: LD_INT 1
8809: DEC
8810: ST_TO_ADDR
8811: LD_INT 8
8813: PUSH
8814: FOR_TO
8815: IFFALSE 8863
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8817: LD_OWVAR 2
8821: PUSH
8822: LD_VAR 0 1
8826: NONEQUAL
8827: PUSH
8828: LD_OWVAR 2
8832: PPUSH
8833: LD_VAR 0 1
8837: PPUSH
8838: CALL_OW 81
8842: PUSH
8843: LD_INT 2
8845: EQUAL
8846: AND
8847: IFFALSE 8861
// begin side := i ;
8849: LD_ADDR_VAR 0 3
8853: PUSH
8854: LD_VAR 0 1
8858: ST_TO_ADDR
// break ;
8859: GO 8863
// end ;
8861: GO 8814
8863: POP
8864: POP
// if not side then
8865: LD_VAR 0 3
8869: NOT
8870: IFFALSE 8874
// exit ;
8872: GO 8919
// for i := 1 to tmp do
8874: LD_ADDR_VAR 0 1
8878: PUSH
8879: DOUBLE
8880: LD_INT 1
8882: DEC
8883: ST_TO_ADDR
8884: LD_VAR 0 2
8888: PUSH
8889: FOR_TO
8890: IFFALSE 8917
// if Prob ( 60 ) then
8892: LD_INT 60
8894: PPUSH
8895: CALL_OW 13
8899: IFFALSE 8915
// SetSide ( i , side ) ;
8901: LD_VAR 0 1
8905: PPUSH
8906: LD_VAR 0 3
8910: PPUSH
8911: CALL_OW 235
8915: GO 8889
8917: POP
8918: POP
// end ;
8919: PPOPN 3
8921: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8922: LD_EXP 8
8926: PUSH
8927: LD_EXP 21
8931: AND
8932: IFFALSE 9051
8934: GO 8936
8936: DISABLE
8937: LD_INT 0
8939: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8940: LD_ADDR_VAR 0 1
8944: PUSH
8945: LD_INT 22
8947: PUSH
8948: LD_OWVAR 2
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 1
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 3
8969: PUSH
8970: LD_INT 23
8972: PUSH
8973: LD_INT 0
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 69
8993: PUSH
8994: FOR_IN
8995: IFFALSE 9049
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8997: LD_VAR 0 1
9001: PPUSH
9002: CALL_OW 257
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: LD_INT 3
9015: PUSH
9016: LD_INT 4
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: IN
9025: IFFALSE 9047
// SetClass ( un , rand ( 1 , 4 ) ) ;
9027: LD_VAR 0 1
9031: PPUSH
9032: LD_INT 1
9034: PPUSH
9035: LD_INT 4
9037: PPUSH
9038: CALL_OW 12
9042: PPUSH
9043: CALL_OW 336
9047: GO 8994
9049: POP
9050: POP
// end ;
9051: PPOPN 1
9053: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9054: LD_EXP 8
9058: PUSH
9059: LD_EXP 20
9063: AND
9064: IFFALSE 9143
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9072: LD_ADDR_VAR 0 1
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_OWVAR 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 3
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PPUSH
9103: CALL_OW 69
9107: ST_TO_ADDR
// if not tmp then
9108: LD_VAR 0 1
9112: NOT
9113: IFFALSE 9117
// exit ;
9115: GO 9143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9117: LD_VAR 0 1
9121: PUSH
9122: LD_INT 1
9124: PPUSH
9125: LD_VAR 0 1
9129: PPUSH
9130: CALL_OW 12
9134: ARRAY
9135: PPUSH
9136: LD_INT 100
9138: PPUSH
9139: CALL_OW 234
// end ;
9143: PPOPN 1
9145: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9146: LD_EXP 8
9150: PUSH
9151: LD_EXP 22
9155: AND
9156: IFFALSE 9254
9158: GO 9160
9160: DISABLE
9161: LD_INT 0
9163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9164: LD_ADDR_VAR 0 1
9168: PUSH
9169: LD_INT 22
9171: PUSH
9172: LD_OWVAR 2
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 21
9183: PUSH
9184: LD_INT 1
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PPUSH
9195: CALL_OW 69
9199: ST_TO_ADDR
// if not tmp then
9200: LD_VAR 0 1
9204: NOT
9205: IFFALSE 9209
// exit ;
9207: GO 9254
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9209: LD_VAR 0 1
9213: PUSH
9214: LD_INT 1
9216: PPUSH
9217: LD_VAR 0 1
9221: PPUSH
9222: CALL_OW 12
9226: ARRAY
9227: PPUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_INT 4
9233: PPUSH
9234: CALL_OW 12
9238: PPUSH
9239: LD_INT 3000
9241: PPUSH
9242: LD_INT 9000
9244: PPUSH
9245: CALL_OW 12
9249: PPUSH
9250: CALL_OW 492
// end ;
9254: PPOPN 1
9256: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9257: LD_EXP 8
9261: PUSH
9262: LD_EXP 23
9266: AND
9267: IFFALSE 9287
9269: GO 9271
9271: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9272: LD_INT 1
9274: PPUSH
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_INT 0
9282: PPUSH
9283: CALL_OW 324
9287: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9288: LD_EXP 8
9292: PUSH
9293: LD_EXP 24
9297: AND
9298: IFFALSE 9381
9300: GO 9302
9302: DISABLE
9303: LD_INT 0
9305: PPUSH
9306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9307: LD_ADDR_VAR 0 2
9311: PUSH
9312: LD_INT 22
9314: PUSH
9315: LD_OWVAR 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 3
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: ST_TO_ADDR
// if not tmp then
9343: LD_VAR 0 2
9347: NOT
9348: IFFALSE 9352
// exit ;
9350: GO 9381
// for i in tmp do
9352: LD_ADDR_VAR 0 1
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: FOR_IN
9363: IFFALSE 9379
// SetBLevel ( i , 10 ) ;
9365: LD_VAR 0 1
9369: PPUSH
9370: LD_INT 10
9372: PPUSH
9373: CALL_OW 241
9377: GO 9362
9379: POP
9380: POP
// end ;
9381: PPOPN 2
9383: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9384: LD_EXP 8
9388: PUSH
9389: LD_EXP 25
9393: AND
9394: IFFALSE 9505
9396: GO 9398
9398: DISABLE
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: LD_INT 22
9411: PUSH
9412: LD_OWVAR 2
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 25
9423: PUSH
9424: LD_INT 1
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: ST_TO_ADDR
// if not tmp then
9440: LD_VAR 0 3
9444: NOT
9445: IFFALSE 9449
// exit ;
9447: GO 9505
// un := tmp [ rand ( 1 , tmp ) ] ;
9449: LD_ADDR_VAR 0 2
9453: PUSH
9454: LD_VAR 0 3
9458: PUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL_OW 12
9471: ARRAY
9472: ST_TO_ADDR
// if Crawls ( un ) then
9473: LD_VAR 0 2
9477: PPUSH
9478: CALL_OW 318
9482: IFFALSE 9493
// ComWalk ( un ) ;
9484: LD_VAR 0 2
9488: PPUSH
9489: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9493: LD_VAR 0 2
9497: PPUSH
9498: LD_INT 5
9500: PPUSH
9501: CALL_OW 336
// end ;
9505: PPOPN 3
9507: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9508: LD_EXP 8
9512: PUSH
9513: LD_EXP 26
9517: AND
9518: PUSH
9519: LD_OWVAR 67
9523: PUSH
9524: LD_INT 4
9526: LESS
9527: AND
9528: IFFALSE 9547
9530: GO 9532
9532: DISABLE
// begin Difficulty := Difficulty + 1 ;
9533: LD_ADDR_OWVAR 67
9537: PUSH
9538: LD_OWVAR 67
9542: PUSH
9543: LD_INT 1
9545: PLUS
9546: ST_TO_ADDR
// end ;
9547: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9548: LD_EXP 8
9552: PUSH
9553: LD_EXP 27
9557: AND
9558: IFFALSE 9661
9560: GO 9562
9562: DISABLE
9563: LD_INT 0
9565: PPUSH
// begin for i := 1 to 5 do
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: DOUBLE
9572: LD_INT 1
9574: DEC
9575: ST_TO_ADDR
9576: LD_INT 5
9578: PUSH
9579: FOR_TO
9580: IFFALSE 9659
// begin uc_nation := nation_nature ;
9582: LD_ADDR_OWVAR 21
9586: PUSH
9587: LD_INT 0
9589: ST_TO_ADDR
// uc_side := 0 ;
9590: LD_ADDR_OWVAR 20
9594: PUSH
9595: LD_INT 0
9597: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9598: LD_ADDR_OWVAR 29
9602: PUSH
9603: LD_INT 12
9605: PUSH
9606: LD_INT 12
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: ST_TO_ADDR
// hc_agressivity := 20 ;
9613: LD_ADDR_OWVAR 35
9617: PUSH
9618: LD_INT 20
9620: ST_TO_ADDR
// hc_class := class_tiger ;
9621: LD_ADDR_OWVAR 28
9625: PUSH
9626: LD_INT 14
9628: ST_TO_ADDR
// hc_gallery :=  ;
9629: LD_ADDR_OWVAR 33
9633: PUSH
9634: LD_STRING 
9636: ST_TO_ADDR
// hc_name :=  ;
9637: LD_ADDR_OWVAR 26
9641: PUSH
9642: LD_STRING 
9644: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9645: CALL_OW 44
9649: PPUSH
9650: LD_INT 0
9652: PPUSH
9653: CALL_OW 51
// end ;
9657: GO 9579
9659: POP
9660: POP
// end ;
9661: PPOPN 1
9663: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9664: LD_EXP 8
9668: PUSH
9669: LD_EXP 28
9673: AND
9674: IFFALSE 9683
9676: GO 9678
9678: DISABLE
// StreamSibBomb ;
9679: CALL 9684 0 0
9683: END
// export function StreamSibBomb ; var i , x , y ; begin
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
9688: PPUSH
9689: PPUSH
// result := false ;
9690: LD_ADDR_VAR 0 1
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// for i := 1 to 16 do
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: DOUBLE
9704: LD_INT 1
9706: DEC
9707: ST_TO_ADDR
9708: LD_INT 16
9710: PUSH
9711: FOR_TO
9712: IFFALSE 9911
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_INT 10
9721: PUSH
9722: LD_INT 20
9724: PUSH
9725: LD_INT 30
9727: PUSH
9728: LD_INT 40
9730: PUSH
9731: LD_INT 50
9733: PUSH
9734: LD_INT 60
9736: PUSH
9737: LD_INT 70
9739: PUSH
9740: LD_INT 80
9742: PUSH
9743: LD_INT 90
9745: PUSH
9746: LD_INT 100
9748: PUSH
9749: LD_INT 110
9751: PUSH
9752: LD_INT 120
9754: PUSH
9755: LD_INT 130
9757: PUSH
9758: LD_INT 140
9760: PUSH
9761: LD_INT 150
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 1
9783: PPUSH
9784: LD_INT 15
9786: PPUSH
9787: CALL_OW 12
9791: ARRAY
9792: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9793: LD_ADDR_VAR 0 4
9797: PUSH
9798: LD_INT 10
9800: PUSH
9801: LD_INT 20
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 40
9809: PUSH
9810: LD_INT 50
9812: PUSH
9813: LD_INT 60
9815: PUSH
9816: LD_INT 70
9818: PUSH
9819: LD_INT 80
9821: PUSH
9822: LD_INT 90
9824: PUSH
9825: LD_INT 100
9827: PUSH
9828: LD_INT 110
9830: PUSH
9831: LD_INT 120
9833: PUSH
9834: LD_INT 130
9836: PUSH
9837: LD_INT 140
9839: PUSH
9840: LD_INT 150
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 1
9862: PPUSH
9863: LD_INT 15
9865: PPUSH
9866: CALL_OW 12
9870: ARRAY
9871: ST_TO_ADDR
// if ValidHex ( x , y ) then
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 488
9886: IFFALSE 9909
// begin result := [ x , y ] ;
9888: LD_ADDR_VAR 0 1
9892: PUSH
9893: LD_VAR 0 3
9897: PUSH
9898: LD_VAR 0 4
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: ST_TO_ADDR
// break ;
9907: GO 9911
// end ; end ;
9909: GO 9711
9911: POP
9912: POP
// if result then
9913: LD_VAR 0 1
9917: IFFALSE 9977
// begin ToLua ( playSibBomb() ) ;
9919: LD_STRING playSibBomb()
9921: PPUSH
9922: CALL_OW 559
// wait ( 0 0$14 ) ;
9926: LD_INT 490
9928: PPUSH
9929: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9933: LD_VAR 0 1
9937: PUSH
9938: LD_INT 1
9940: ARRAY
9941: PPUSH
9942: LD_VAR 0 1
9946: PUSH
9947: LD_INT 2
9949: ARRAY
9950: PPUSH
9951: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9955: LD_VAR 0 1
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_VAR 0 1
9968: PUSH
9969: LD_INT 2
9971: ARRAY
9972: PPUSH
9973: CALL_OW 429
// end ; end ;
9977: LD_VAR 0 1
9981: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9982: LD_EXP 8
9986: PUSH
9987: LD_EXP 30
9991: AND
9992: IFFALSE 10004
9994: GO 9996
9996: DISABLE
// YouLost (  ) ;
9997: LD_STRING 
9999: PPUSH
10000: CALL_OW 104
10004: END
// every 0 0$1 trigger StreamModeActive and sFog do
10005: LD_EXP 8
10009: PUSH
10010: LD_EXP 29
10014: AND
10015: IFFALSE 10029
10017: GO 10019
10019: DISABLE
// FogOff ( your_side ) ;
10020: LD_OWVAR 2
10024: PPUSH
10025: CALL_OW 344
10029: END
// every 0 0$1 trigger StreamModeActive and sSun do
10030: LD_EXP 8
10034: PUSH
10035: LD_EXP 31
10039: AND
10040: IFFALSE 10068
10042: GO 10044
10044: DISABLE
// begin solar_recharge_percent := 0 ;
10045: LD_ADDR_OWVAR 79
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10053: LD_INT 10500
10055: PPUSH
10056: CALL_OW 67
// solar_recharge_percent := 100 ;
10060: LD_ADDR_OWVAR 79
10064: PUSH
10065: LD_INT 100
10067: ST_TO_ADDR
// end ;
10068: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10069: LD_EXP 8
10073: PUSH
10074: LD_EXP 32
10078: AND
10079: IFFALSE 10318
10081: GO 10083
10083: DISABLE
10084: LD_INT 0
10086: PPUSH
10087: PPUSH
10088: PPUSH
// begin tmp := [ ] ;
10089: LD_ADDR_VAR 0 3
10093: PUSH
10094: EMPTY
10095: ST_TO_ADDR
// for i := 1 to 6 do
10096: LD_ADDR_VAR 0 1
10100: PUSH
10101: DOUBLE
10102: LD_INT 1
10104: DEC
10105: ST_TO_ADDR
10106: LD_INT 6
10108: PUSH
10109: FOR_TO
10110: IFFALSE 10215
// begin uc_nation := nation_nature ;
10112: LD_ADDR_OWVAR 21
10116: PUSH
10117: LD_INT 0
10119: ST_TO_ADDR
// uc_side := 0 ;
10120: LD_ADDR_OWVAR 20
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10128: LD_ADDR_OWVAR 29
10132: PUSH
10133: LD_INT 12
10135: PUSH
10136: LD_INT 12
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: ST_TO_ADDR
// hc_agressivity := 20 ;
10143: LD_ADDR_OWVAR 35
10147: PUSH
10148: LD_INT 20
10150: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10151: LD_ADDR_OWVAR 28
10155: PUSH
10156: LD_INT 17
10158: ST_TO_ADDR
// hc_gallery :=  ;
10159: LD_ADDR_OWVAR 33
10163: PUSH
10164: LD_STRING 
10166: ST_TO_ADDR
// hc_name :=  ;
10167: LD_ADDR_OWVAR 26
10171: PUSH
10172: LD_STRING 
10174: ST_TO_ADDR
// un := CreateHuman ;
10175: LD_ADDR_VAR 0 2
10179: PUSH
10180: CALL_OW 44
10184: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 51
// tmp := tmp ^ un ;
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: LD_VAR 0 3
10206: PUSH
10207: LD_VAR 0 2
10211: ADD
10212: ST_TO_ADDR
// end ;
10213: GO 10109
10215: POP
10216: POP
// repeat wait ( 0 0$1 ) ;
10217: LD_INT 35
10219: PPUSH
10220: CALL_OW 67
// for un in tmp do
10224: LD_ADDR_VAR 0 2
10228: PUSH
10229: LD_VAR 0 3
10233: PUSH
10234: FOR_IN
10235: IFFALSE 10309
// begin if IsDead ( un ) then
10237: LD_VAR 0 2
10241: PPUSH
10242: CALL_OW 301
10246: IFFALSE 10266
// begin tmp := tmp diff un ;
10248: LD_ADDR_VAR 0 3
10252: PUSH
10253: LD_VAR 0 3
10257: PUSH
10258: LD_VAR 0 2
10262: DIFF
10263: ST_TO_ADDR
// continue ;
10264: GO 10234
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10266: LD_VAR 0 2
10270: PPUSH
10271: LD_INT 3
10273: PUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PPUSH
10288: CALL_OW 69
10292: PPUSH
10293: LD_VAR 0 2
10297: PPUSH
10298: CALL_OW 74
10302: PPUSH
10303: CALL_OW 115
// end ;
10307: GO 10234
10309: POP
10310: POP
// until not tmp ;
10311: LD_VAR 0 3
10315: NOT
10316: IFFALSE 10217
// end ;
10318: PPOPN 3
10320: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10321: LD_EXP 8
10325: PUSH
10326: LD_EXP 33
10330: AND
10331: IFFALSE 10385
10333: GO 10335
10335: DISABLE
// begin ToLua ( displayTroll(); ) ;
10336: LD_STRING displayTroll();
10338: PPUSH
10339: CALL_OW 559
// wait ( 3 3$00 ) ;
10343: LD_INT 6300
10345: PPUSH
10346: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10350: LD_STRING hideTroll();
10352: PPUSH
10353: CALL_OW 559
// wait ( 1 1$00 ) ;
10357: LD_INT 2100
10359: PPUSH
10360: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10364: LD_STRING displayTroll();
10366: PPUSH
10367: CALL_OW 559
// wait ( 1 1$00 ) ;
10371: LD_INT 2100
10373: PPUSH
10374: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10378: LD_STRING hideTroll();
10380: PPUSH
10381: CALL_OW 559
// end ;
10385: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10386: LD_EXP 8
10390: PUSH
10391: LD_EXP 34
10395: AND
10396: IFFALSE 10459
10398: GO 10400
10400: DISABLE
10401: LD_INT 0
10403: PPUSH
// begin p := 0 ;
10404: LD_ADDR_VAR 0 1
10408: PUSH
10409: LD_INT 0
10411: ST_TO_ADDR
// repeat game_speed := 1 ;
10412: LD_ADDR_OWVAR 65
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10420: LD_INT 35
10422: PPUSH
10423: CALL_OW 67
// p := p + 1 ;
10427: LD_ADDR_VAR 0 1
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_INT 1
10439: PLUS
10440: ST_TO_ADDR
// until p >= 60 ;
10441: LD_VAR 0 1
10445: PUSH
10446: LD_INT 60
10448: GREATEREQUAL
10449: IFFALSE 10412
// game_speed := 4 ;
10451: LD_ADDR_OWVAR 65
10455: PUSH
10456: LD_INT 4
10458: ST_TO_ADDR
// end ;
10459: PPOPN 1
10461: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10462: LD_EXP 8
10466: PUSH
10467: LD_EXP 35
10471: AND
10472: IFFALSE 10618
10474: GO 10476
10476: DISABLE
10477: LD_INT 0
10479: PPUSH
10480: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_OWVAR 2
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 30
10503: PUSH
10504: LD_INT 0
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 30
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: ST_TO_ADDR
// if not depot then
10535: LD_VAR 0 1
10539: NOT
10540: IFFALSE 10544
// exit ;
10542: GO 10618
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: LD_VAR 0 1
10553: PUSH
10554: LD_INT 1
10556: PPUSH
10557: LD_VAR 0 1
10561: PPUSH
10562: CALL_OW 12
10566: ARRAY
10567: PPUSH
10568: CALL_OW 274
10572: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10573: LD_VAR 0 2
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: LD_INT 0
10583: PPUSH
10584: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10588: LD_VAR 0 2
10592: PPUSH
10593: LD_INT 2
10595: PPUSH
10596: LD_INT 0
10598: PPUSH
10599: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10603: LD_VAR 0 2
10607: PPUSH
10608: LD_INT 3
10610: PPUSH
10611: LD_INT 0
10613: PPUSH
10614: CALL_OW 277
// end ;
10618: PPOPN 2
10620: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10621: LD_EXP 8
10625: PUSH
10626: LD_EXP 36
10630: AND
10631: IFFALSE 10728
10633: GO 10635
10635: DISABLE
10636: LD_INT 0
10638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10639: LD_ADDR_VAR 0 1
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_OWVAR 2
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 3
10668: PUSH
10669: LD_INT 23
10671: PUSH
10672: LD_INT 0
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 69
10692: ST_TO_ADDR
// if not tmp then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10728
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10702: LD_VAR 0 1
10706: PUSH
10707: LD_INT 1
10709: PPUSH
10710: LD_VAR 0 1
10714: PPUSH
10715: CALL_OW 12
10719: ARRAY
10720: PPUSH
10721: LD_INT 200
10723: PPUSH
10724: CALL_OW 234
// end ;
10728: PPOPN 1
10730: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10731: LD_EXP 8
10735: PUSH
10736: LD_EXP 37
10740: AND
10741: IFFALSE 10820
10743: GO 10745
10745: DISABLE
10746: LD_INT 0
10748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10749: LD_ADDR_VAR 0 1
10753: PUSH
10754: LD_INT 22
10756: PUSH
10757: LD_OWVAR 2
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 21
10768: PUSH
10769: LD_INT 2
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: CALL_OW 69
10784: ST_TO_ADDR
// if not tmp then
10785: LD_VAR 0 1
10789: NOT
10790: IFFALSE 10794
// exit ;
10792: GO 10820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10794: LD_VAR 0 1
10798: PUSH
10799: LD_INT 1
10801: PPUSH
10802: LD_VAR 0 1
10806: PPUSH
10807: CALL_OW 12
10811: ARRAY
10812: PPUSH
10813: LD_INT 60
10815: PPUSH
10816: CALL_OW 234
// end ;
10820: PPOPN 1
10822: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10823: LD_EXP 8
10827: PUSH
10828: LD_EXP 38
10832: AND
10833: IFFALSE 10932
10835: GO 10837
10837: DISABLE
10838: LD_INT 0
10840: PPUSH
10841: PPUSH
// begin enable ;
10842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10843: LD_ADDR_VAR 0 1
10847: PUSH
10848: LD_INT 22
10850: PUSH
10851: LD_OWVAR 2
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 61
10862: PUSH
10863: EMPTY
10864: LIST
10865: PUSH
10866: LD_INT 33
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: PPUSH
10881: CALL_OW 69
10885: ST_TO_ADDR
// if not tmp then
10886: LD_VAR 0 1
10890: NOT
10891: IFFALSE 10895
// exit ;
10893: GO 10932
// for i in tmp do
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_VAR 0 1
10904: PUSH
10905: FOR_IN
10906: IFFALSE 10930
// if IsControledBy ( i ) then
10908: LD_VAR 0 2
10912: PPUSH
10913: CALL_OW 312
10917: IFFALSE 10928
// ComUnlink ( i ) ;
10919: LD_VAR 0 2
10923: PPUSH
10924: CALL_OW 136
10928: GO 10905
10930: POP
10931: POP
// end ;
10932: PPOPN 2
10934: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10935: LD_EXP 8
10939: PUSH
10940: LD_EXP 39
10944: AND
10945: IFFALSE 11085
10947: GO 10949
10949: DISABLE
10950: LD_INT 0
10952: PPUSH
10953: PPUSH
// begin ToLua ( displayPowell(); ) ;
10954: LD_STRING displayPowell();
10956: PPUSH
10957: CALL_OW 559
// uc_side := 0 ;
10961: LD_ADDR_OWVAR 20
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// uc_nation := 2 ;
10969: LD_ADDR_OWVAR 21
10973: PUSH
10974: LD_INT 2
10976: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10977: LD_ADDR_OWVAR 37
10981: PUSH
10982: LD_INT 14
10984: ST_TO_ADDR
// vc_engine := engine_siberite ;
10985: LD_ADDR_OWVAR 39
10989: PUSH
10990: LD_INT 3
10992: ST_TO_ADDR
// vc_control := control_apeman ;
10993: LD_ADDR_OWVAR 38
10997: PUSH
10998: LD_INT 5
11000: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11001: LD_ADDR_OWVAR 40
11005: PUSH
11006: LD_INT 29
11008: ST_TO_ADDR
// un := CreateVehicle ;
11009: LD_ADDR_VAR 0 2
11013: PUSH
11014: CALL_OW 45
11018: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11019: LD_VAR 0 2
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11031: LD_INT 35
11033: PPUSH
11034: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11038: LD_VAR 0 2
11042: PPUSH
11043: LD_INT 22
11045: PUSH
11046: LD_OWVAR 2
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: PPUSH
11060: LD_VAR 0 2
11064: PPUSH
11065: CALL_OW 74
11069: PPUSH
11070: CALL_OW 115
// until IsDead ( un ) ;
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 301
11083: IFFALSE 11031
// end ;
11085: PPOPN 2
11087: END
// every 0 0$1 trigger StreamModeActive and sStu do
11088: LD_EXP 8
11092: PUSH
11093: LD_EXP 47
11097: AND
11098: IFFALSE 11114
11100: GO 11102
11102: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11103: LD_STRING displayStucuk();
11105: PPUSH
11106: CALL_OW 559
// ResetFog ;
11110: CALL_OW 335
// end ;
11114: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11115: LD_EXP 8
11119: PUSH
11120: LD_EXP 40
11124: AND
11125: IFFALSE 11266
11127: GO 11129
11129: DISABLE
11130: LD_INT 0
11132: PPUSH
11133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11134: LD_ADDR_VAR 0 2
11138: PUSH
11139: LD_INT 22
11141: PUSH
11142: LD_OWVAR 2
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PPUSH
11165: CALL_OW 69
11169: ST_TO_ADDR
// if not tmp then
11170: LD_VAR 0 2
11174: NOT
11175: IFFALSE 11179
// exit ;
11177: GO 11266
// un := tmp [ rand ( 1 , tmp ) ] ;
11179: LD_ADDR_VAR 0 1
11183: PUSH
11184: LD_VAR 0 2
11188: PUSH
11189: LD_INT 1
11191: PPUSH
11192: LD_VAR 0 2
11196: PPUSH
11197: CALL_OW 12
11201: ARRAY
11202: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11203: LD_VAR 0 1
11207: PPUSH
11208: LD_INT 0
11210: PPUSH
11211: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11215: LD_VAR 0 1
11219: PPUSH
11220: LD_OWVAR 3
11224: PUSH
11225: LD_VAR 0 1
11229: DIFF
11230: PPUSH
11231: LD_VAR 0 1
11235: PPUSH
11236: CALL_OW 74
11240: PPUSH
11241: CALL_OW 115
// wait ( 0 0$20 ) ;
11245: LD_INT 700
11247: PPUSH
11248: CALL_OW 67
// SetSide ( un , your_side ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_OWVAR 2
11261: PPUSH
11262: CALL_OW 235
// end ;
11266: PPOPN 2
11268: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11269: LD_EXP 8
11273: PUSH
11274: LD_EXP 41
11278: AND
11279: IFFALSE 11385
11281: GO 11283
11283: DISABLE
11284: LD_INT 0
11286: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11287: LD_ADDR_VAR 0 1
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_OWVAR 2
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 30
11309: PUSH
11310: LD_INT 0
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 30
11319: PUSH
11320: LD_INT 1
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 69
11340: ST_TO_ADDR
// if not depot then
11341: LD_VAR 0 1
11345: NOT
11346: IFFALSE 11350
// exit ;
11348: GO 11385
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11350: LD_VAR 0 1
11354: PUSH
11355: LD_INT 1
11357: ARRAY
11358: PPUSH
11359: CALL_OW 250
11363: PPUSH
11364: LD_VAR 0 1
11368: PUSH
11369: LD_INT 1
11371: ARRAY
11372: PPUSH
11373: CALL_OW 251
11377: PPUSH
11378: LD_INT 70
11380: PPUSH
11381: CALL_OW 495
// end ;
11385: PPOPN 1
11387: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11388: LD_EXP 8
11392: PUSH
11393: LD_EXP 42
11397: AND
11398: IFFALSE 11609
11400: GO 11402
11402: DISABLE
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
11407: PPUSH
11408: PPUSH
11409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11410: LD_ADDR_VAR 0 5
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_OWVAR 2
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 21
11429: PUSH
11430: LD_INT 1
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 69
11445: ST_TO_ADDR
// if not tmp then
11446: LD_VAR 0 5
11450: NOT
11451: IFFALSE 11455
// exit ;
11453: GO 11609
// for i in tmp do
11455: LD_ADDR_VAR 0 1
11459: PUSH
11460: LD_VAR 0 5
11464: PUSH
11465: FOR_IN
11466: IFFALSE 11607
// begin d := rand ( 0 , 5 ) ;
11468: LD_ADDR_VAR 0 4
11472: PUSH
11473: LD_INT 0
11475: PPUSH
11476: LD_INT 5
11478: PPUSH
11479: CALL_OW 12
11483: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11484: LD_ADDR_VAR 0 2
11488: PUSH
11489: LD_VAR 0 1
11493: PPUSH
11494: CALL_OW 250
11498: PPUSH
11499: LD_VAR 0 4
11503: PPUSH
11504: LD_INT 3
11506: PPUSH
11507: LD_INT 12
11509: PPUSH
11510: CALL_OW 12
11514: PPUSH
11515: CALL_OW 272
11519: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11520: LD_ADDR_VAR 0 3
11524: PUSH
11525: LD_VAR 0 1
11529: PPUSH
11530: CALL_OW 251
11534: PPUSH
11535: LD_VAR 0 4
11539: PPUSH
11540: LD_INT 3
11542: PPUSH
11543: LD_INT 12
11545: PPUSH
11546: CALL_OW 12
11550: PPUSH
11551: CALL_OW 273
11555: ST_TO_ADDR
// if ValidHex ( x , y ) then
11556: LD_VAR 0 2
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: CALL_OW 488
11570: IFFALSE 11605
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11572: LD_VAR 0 1
11576: PPUSH
11577: LD_VAR 0 2
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_INT 3
11589: PPUSH
11590: LD_INT 6
11592: PPUSH
11593: CALL_OW 12
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 483
// end ;
11605: GO 11465
11607: POP
11608: POP
// end ;
11609: PPOPN 5
11611: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11612: LD_EXP 8
11616: PUSH
11617: LD_EXP 43
11621: AND
11622: IFFALSE 11716
11624: GO 11626
11626: DISABLE
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_OWVAR 2
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 32
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 21
11660: PUSH
11661: LD_INT 2
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: ST_TO_ADDR
// if not tmp then
11678: LD_VAR 0 2
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 11716
// for i in tmp do
11687: LD_ADDR_VAR 0 1
11691: PUSH
11692: LD_VAR 0 2
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11714
// SetFuel ( i , 0 ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_INT 0
11707: PPUSH
11708: CALL_OW 240
11712: GO 11697
11714: POP
11715: POP
// end ;
11716: PPOPN 2
11718: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11719: LD_EXP 8
11723: PUSH
11724: LD_EXP 44
11728: AND
11729: IFFALSE 11795
11731: GO 11733
11733: DISABLE
11734: LD_INT 0
11736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11737: LD_ADDR_VAR 0 1
11741: PUSH
11742: LD_INT 22
11744: PUSH
11745: LD_OWVAR 2
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 30
11756: PUSH
11757: LD_INT 29
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PPUSH
11768: CALL_OW 69
11772: ST_TO_ADDR
// if not tmp then
11773: LD_VAR 0 1
11777: NOT
11778: IFFALSE 11782
// exit ;
11780: GO 11795
// DestroyUnit ( tmp [ 1 ] ) ;
11782: LD_VAR 0 1
11786: PUSH
11787: LD_INT 1
11789: ARRAY
11790: PPUSH
11791: CALL_OW 65
// end ;
11795: PPOPN 1
11797: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11798: LD_EXP 8
11802: PUSH
11803: LD_EXP 46
11807: AND
11808: IFFALSE 11937
11810: GO 11812
11812: DISABLE
11813: LD_INT 0
11815: PPUSH
// begin uc_side := 0 ;
11816: LD_ADDR_OWVAR 20
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// uc_nation := nation_arabian ;
11824: LD_ADDR_OWVAR 21
11828: PUSH
11829: LD_INT 2
11831: ST_TO_ADDR
// hc_gallery :=  ;
11832: LD_ADDR_OWVAR 33
11836: PUSH
11837: LD_STRING 
11839: ST_TO_ADDR
// hc_name :=  ;
11840: LD_ADDR_OWVAR 26
11844: PUSH
11845: LD_STRING 
11847: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11848: LD_INT 1
11850: PPUSH
11851: LD_INT 11
11853: PPUSH
11854: LD_INT 10
11856: PPUSH
11857: CALL_OW 380
// un := CreateHuman ;
11861: LD_ADDR_VAR 0 1
11865: PUSH
11866: CALL_OW 44
11870: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11883: LD_INT 35
11885: PPUSH
11886: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_INT 22
11897: PUSH
11898: LD_OWVAR 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: CALL_OW 74
11921: PPUSH
11922: CALL_OW 115
// until IsDead ( un ) ;
11926: LD_VAR 0 1
11930: PPUSH
11931: CALL_OW 301
11935: IFFALSE 11883
// end ;
11937: PPOPN 1
11939: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11940: LD_EXP 8
11944: PUSH
11945: LD_EXP 48
11949: AND
11950: IFFALSE 11962
11952: GO 11954
11954: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11955: LD_STRING earthquake(getX(game), 0, 32)
11957: PPUSH
11958: CALL_OW 559
11962: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11963: LD_EXP 8
11967: PUSH
11968: LD_EXP 49
11972: AND
11973: IFFALSE 12064
11975: GO 11977
11977: DISABLE
11978: LD_INT 0
11980: PPUSH
// begin enable ;
11981: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_OWVAR 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 33
12011: PUSH
12012: LD_INT 3
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: ST_TO_ADDR
// if not tmp then
12029: LD_VAR 0 1
12033: NOT
12034: IFFALSE 12038
// exit ;
12036: GO 12064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12038: LD_VAR 0 1
12042: PUSH
12043: LD_INT 1
12045: PPUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 12
12055: ARRAY
12056: PPUSH
12057: LD_INT 1
12059: PPUSH
12060: CALL_OW 234
// end ;
12064: PPOPN 1
12066: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12067: LD_EXP 8
12071: PUSH
12072: LD_EXP 50
12076: AND
12077: IFFALSE 12218
12079: GO 12081
12081: DISABLE
12082: LD_INT 0
12084: PPUSH
12085: PPUSH
12086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12087: LD_ADDR_VAR 0 3
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_OWVAR 2
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 25
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: ST_TO_ADDR
// if not tmp then
12123: LD_VAR 0 3
12127: NOT
12128: IFFALSE 12132
// exit ;
12130: GO 12218
// un := tmp [ rand ( 1 , tmp ) ] ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 1
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: CALL_OW 12
12154: ARRAY
12155: ST_TO_ADDR
// if Crawls ( un ) then
12156: LD_VAR 0 2
12160: PPUSH
12161: CALL_OW 318
12165: IFFALSE 12176
// ComWalk ( un ) ;
12167: LD_VAR 0 2
12171: PPUSH
12172: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12176: LD_VAR 0 2
12180: PPUSH
12181: LD_INT 9
12183: PPUSH
12184: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12188: LD_INT 28
12190: PPUSH
12191: LD_OWVAR 2
12195: PPUSH
12196: LD_INT 2
12198: PPUSH
12199: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12203: LD_INT 29
12205: PPUSH
12206: LD_OWVAR 2
12210: PPUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 322
// end ;
12218: PPOPN 3
12220: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12221: LD_EXP 8
12225: PUSH
12226: LD_EXP 51
12230: AND
12231: IFFALSE 12342
12233: GO 12235
12235: DISABLE
12236: LD_INT 0
12238: PPUSH
12239: PPUSH
12240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12241: LD_ADDR_VAR 0 3
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_OWVAR 2
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 25
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: ST_TO_ADDR
// if not tmp then
12277: LD_VAR 0 3
12281: NOT
12282: IFFALSE 12286
// exit ;
12284: GO 12342
// un := tmp [ rand ( 1 , tmp ) ] ;
12286: LD_ADDR_VAR 0 2
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: LD_INT 1
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: CALL_OW 12
12308: ARRAY
12309: ST_TO_ADDR
// if Crawls ( un ) then
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 318
12319: IFFALSE 12330
// ComWalk ( un ) ;
12321: LD_VAR 0 2
12325: PPUSH
12326: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12330: LD_VAR 0 2
12334: PPUSH
12335: LD_INT 8
12337: PPUSH
12338: CALL_OW 336
// end ;
12342: PPOPN 3
12344: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12345: LD_EXP 8
12349: PUSH
12350: LD_EXP 52
12354: AND
12355: IFFALSE 12499
12357: GO 12359
12359: DISABLE
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12364: LD_ADDR_VAR 0 2
12368: PUSH
12369: LD_INT 22
12371: PUSH
12372: LD_OWVAR 2
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 21
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 2
12393: PUSH
12394: LD_INT 34
12396: PUSH
12397: LD_INT 12
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 34
12406: PUSH
12407: LD_INT 51
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 32
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 69
12439: ST_TO_ADDR
// if not tmp then
12440: LD_VAR 0 2
12444: NOT
12445: IFFALSE 12449
// exit ;
12447: GO 12499
// for i in tmp do
12449: LD_ADDR_VAR 0 1
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: FOR_IN
12460: IFFALSE 12497
// if GetCargo ( i , mat_artifact ) = 0 then
12462: LD_VAR 0 1
12466: PPUSH
12467: LD_INT 4
12469: PPUSH
12470: CALL_OW 289
12474: PUSH
12475: LD_INT 0
12477: EQUAL
12478: IFFALSE 12495
// SetCargo ( i , mat_siberit , 100 ) ;
12480: LD_VAR 0 1
12484: PPUSH
12485: LD_INT 3
12487: PPUSH
12488: LD_INT 100
12490: PPUSH
12491: CALL_OW 290
12495: GO 12459
12497: POP
12498: POP
// end ;
12499: PPOPN 2
12501: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12502: LD_EXP 8
12506: PUSH
12507: LD_EXP 53
12511: AND
12512: IFFALSE 12695
12514: GO 12516
12516: DISABLE
12517: LD_INT 0
12519: PPUSH
12520: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_OWVAR 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 69
12542: ST_TO_ADDR
// if not tmp then
12543: LD_VAR 0 2
12547: NOT
12548: IFFALSE 12552
// exit ;
12550: GO 12695
// for i := 1 to 2 do
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_INT 2
12564: PUSH
12565: FOR_TO
12566: IFFALSE 12693
// begin uc_side := your_side ;
12568: LD_ADDR_OWVAR 20
12572: PUSH
12573: LD_OWVAR 2
12577: ST_TO_ADDR
// uc_nation := nation_american ;
12578: LD_ADDR_OWVAR 21
12582: PUSH
12583: LD_INT 1
12585: ST_TO_ADDR
// vc_chassis := us_morphling ;
12586: LD_ADDR_OWVAR 37
12590: PUSH
12591: LD_INT 5
12593: ST_TO_ADDR
// vc_engine := engine_siberite ;
12594: LD_ADDR_OWVAR 39
12598: PUSH
12599: LD_INT 3
12601: ST_TO_ADDR
// vc_control := control_computer ;
12602: LD_ADDR_OWVAR 38
12606: PUSH
12607: LD_INT 3
12609: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12610: LD_ADDR_OWVAR 40
12614: PUSH
12615: LD_INT 10
12617: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12618: LD_VAR 0 2
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PPUSH
12627: CALL_OW 310
12631: NOT
12632: IFFALSE 12679
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12634: CALL_OW 45
12638: PPUSH
12639: LD_VAR 0 2
12643: PUSH
12644: LD_INT 1
12646: ARRAY
12647: PPUSH
12648: CALL_OW 250
12652: PPUSH
12653: LD_VAR 0 2
12657: PUSH
12658: LD_INT 1
12660: ARRAY
12661: PPUSH
12662: CALL_OW 251
12666: PPUSH
12667: LD_INT 12
12669: PPUSH
12670: LD_INT 1
12672: PPUSH
12673: CALL_OW 50
12677: GO 12691
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12679: CALL_OW 45
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 51
// end ;
12691: GO 12565
12693: POP
12694: POP
// end ;
12695: PPOPN 2
12697: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12698: LD_EXP 8
12702: PUSH
12703: LD_EXP 54
12707: AND
12708: IFFALSE 12930
12710: GO 12712
12712: DISABLE
12713: LD_INT 0
12715: PPUSH
12716: PPUSH
12717: PPUSH
12718: PPUSH
12719: PPUSH
12720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12721: LD_ADDR_VAR 0 6
12725: PUSH
12726: LD_INT 22
12728: PUSH
12729: LD_OWVAR 2
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 21
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 3
12750: PUSH
12751: LD_INT 23
12753: PUSH
12754: LD_INT 0
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PPUSH
12770: CALL_OW 69
12774: ST_TO_ADDR
// if not tmp then
12775: LD_VAR 0 6
12779: NOT
12780: IFFALSE 12784
// exit ;
12782: GO 12930
// s1 := rand ( 1 , 4 ) ;
12784: LD_ADDR_VAR 0 2
12788: PUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 4
12794: PPUSH
12795: CALL_OW 12
12799: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12800: LD_ADDR_VAR 0 4
12804: PUSH
12805: LD_VAR 0 6
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: LD_VAR 0 2
12818: PPUSH
12819: CALL_OW 259
12823: ST_TO_ADDR
// if s1 = 1 then
12824: LD_VAR 0 2
12828: PUSH
12829: LD_INT 1
12831: EQUAL
12832: IFFALSE 12852
// s2 := rand ( 2 , 4 ) else
12834: LD_ADDR_VAR 0 3
12838: PUSH
12839: LD_INT 2
12841: PPUSH
12842: LD_INT 4
12844: PPUSH
12845: CALL_OW 12
12849: ST_TO_ADDR
12850: GO 12860
// s2 := 1 ;
12852: LD_ADDR_VAR 0 3
12856: PUSH
12857: LD_INT 1
12859: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12860: LD_ADDR_VAR 0 5
12864: PUSH
12865: LD_VAR 0 6
12869: PUSH
12870: LD_INT 1
12872: ARRAY
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: CALL_OW 259
12883: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12884: LD_VAR 0 6
12888: PUSH
12889: LD_INT 1
12891: ARRAY
12892: PPUSH
12893: LD_VAR 0 2
12897: PPUSH
12898: LD_VAR 0 5
12902: PPUSH
12903: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12907: LD_VAR 0 6
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_VAR 0 4
12925: PPUSH
12926: CALL_OW 237
// end ;
12930: PPOPN 6
12932: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12933: LD_EXP 8
12937: PUSH
12938: LD_EXP 55
12942: AND
12943: IFFALSE 13022
12945: GO 12947
12947: DISABLE
12948: LD_INT 0
12950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12951: LD_ADDR_VAR 0 1
12955: PUSH
12956: LD_INT 22
12958: PUSH
12959: LD_OWVAR 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 30
12970: PUSH
12971: LD_INT 3
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PPUSH
12982: CALL_OW 69
12986: ST_TO_ADDR
// if not tmp then
12987: LD_VAR 0 1
12991: NOT
12992: IFFALSE 12996
// exit ;
12994: GO 13022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12996: LD_VAR 0 1
13000: PUSH
13001: LD_INT 1
13003: PPUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 12
13013: ARRAY
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 234
// end ;
13022: PPOPN 1
13024: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13025: LD_EXP 8
13029: PUSH
13030: LD_EXP 56
13034: AND
13035: IFFALSE 13147
13037: GO 13039
13039: DISABLE
13040: LD_INT 0
13042: PPUSH
13043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_OWVAR 2
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: LD_INT 30
13066: PUSH
13067: LD_INT 27
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 30
13076: PUSH
13077: LD_INT 26
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 30
13086: PUSH
13087: LD_INT 28
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: ST_TO_ADDR
// if not tmp then
13109: LD_VAR 0 2
13113: NOT
13114: IFFALSE 13118
// exit ;
13116: GO 13147
// for i in tmp do
13118: LD_ADDR_VAR 0 1
13122: PUSH
13123: LD_VAR 0 2
13127: PUSH
13128: FOR_IN
13129: IFFALSE 13145
// SetLives ( i , 1 ) ;
13131: LD_VAR 0 1
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 234
13143: GO 13128
13145: POP
13146: POP
// end ;
13147: PPOPN 2
13149: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13150: LD_EXP 8
13154: PUSH
13155: LD_EXP 57
13159: AND
13160: IFFALSE 13447
13162: GO 13164
13164: DISABLE
13165: LD_INT 0
13167: PPUSH
13168: PPUSH
13169: PPUSH
// begin i := rand ( 1 , 7 ) ;
13170: LD_ADDR_VAR 0 1
13174: PUSH
13175: LD_INT 1
13177: PPUSH
13178: LD_INT 7
13180: PPUSH
13181: CALL_OW 12
13185: ST_TO_ADDR
// case i of 1 :
13186: LD_VAR 0 1
13190: PUSH
13191: LD_INT 1
13193: DOUBLE
13194: EQUAL
13195: IFTRUE 13199
13197: GO 13209
13199: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13200: LD_STRING earthquake(getX(game), 0, 32)
13202: PPUSH
13203: CALL_OW 559
13207: GO 13447
13209: LD_INT 2
13211: DOUBLE
13212: EQUAL
13213: IFTRUE 13217
13215: GO 13231
13217: POP
// begin ToLua ( displayStucuk(); ) ;
13218: LD_STRING displayStucuk();
13220: PPUSH
13221: CALL_OW 559
// ResetFog ;
13225: CALL_OW 335
// end ; 3 :
13229: GO 13447
13231: LD_INT 3
13233: DOUBLE
13234: EQUAL
13235: IFTRUE 13239
13237: GO 13343
13239: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13240: LD_ADDR_VAR 0 2
13244: PUSH
13245: LD_INT 22
13247: PUSH
13248: LD_OWVAR 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 25
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: ST_TO_ADDR
// if not tmp then
13276: LD_VAR 0 2
13280: NOT
13281: IFFALSE 13285
// exit ;
13283: GO 13447
// un := tmp [ rand ( 1 , tmp ) ] ;
13285: LD_ADDR_VAR 0 3
13289: PUSH
13290: LD_VAR 0 2
13294: PUSH
13295: LD_INT 1
13297: PPUSH
13298: LD_VAR 0 2
13302: PPUSH
13303: CALL_OW 12
13307: ARRAY
13308: ST_TO_ADDR
// if Crawls ( un ) then
13309: LD_VAR 0 3
13313: PPUSH
13314: CALL_OW 318
13318: IFFALSE 13329
// ComWalk ( un ) ;
13320: LD_VAR 0 3
13324: PPUSH
13325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_INT 8
13336: PPUSH
13337: CALL_OW 336
// end ; 4 :
13341: GO 13447
13343: LD_INT 4
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13425
13351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_OWVAR 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 29
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: ST_TO_ADDR
// if not tmp then
13388: LD_VAR 0 2
13392: NOT
13393: IFFALSE 13397
// exit ;
13395: GO 13447
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13397: LD_VAR 0 2
13401: PUSH
13402: LD_INT 1
13404: ARRAY
13405: PPUSH
13406: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13410: LD_VAR 0 2
13414: PUSH
13415: LD_INT 1
13417: ARRAY
13418: PPUSH
13419: CALL_OW 65
// end ; 5 .. 7 :
13423: GO 13447
13425: LD_INT 5
13427: DOUBLE
13428: GREATEREQUAL
13429: IFFALSE 13437
13431: LD_INT 7
13433: DOUBLE
13434: LESSEQUAL
13435: IFTRUE 13439
13437: GO 13446
13439: POP
// StreamSibBomb ; end ;
13440: CALL 9684 0 0
13444: GO 13447
13446: POP
// end ;
13447: PPOPN 3
13449: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13450: LD_EXP 8
13454: PUSH
13455: LD_EXP 58
13459: AND
13460: IFFALSE 13616
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_INT 81
13477: PUSH
13478: LD_OWVAR 2
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 2
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PPUSH
13519: CALL_OW 69
13523: ST_TO_ADDR
// if not tmp then
13524: LD_VAR 0 2
13528: NOT
13529: IFFALSE 13533
// exit ;
13531: GO 13616
// p := 0 ;
13533: LD_ADDR_VAR 0 3
13537: PUSH
13538: LD_INT 0
13540: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13541: LD_INT 35
13543: PPUSH
13544: CALL_OW 67
// p := p + 1 ;
13548: LD_ADDR_VAR 0 3
13552: PUSH
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 1
13560: PLUS
13561: ST_TO_ADDR
// for i in tmp do
13562: LD_ADDR_VAR 0 1
13566: PUSH
13567: LD_VAR 0 2
13571: PUSH
13572: FOR_IN
13573: IFFALSE 13604
// if GetLives ( i ) < 1000 then
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 256
13584: PUSH
13585: LD_INT 1000
13587: LESS
13588: IFFALSE 13602
// SetLives ( i , 1000 ) ;
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_INT 1000
13597: PPUSH
13598: CALL_OW 234
13602: GO 13572
13604: POP
13605: POP
// until p > 20 ;
13606: LD_VAR 0 3
13610: PUSH
13611: LD_INT 20
13613: GREATER
13614: IFFALSE 13541
// end ;
13616: PPOPN 3
13618: END
// every 0 0$1 trigger StreamModeActive and sTime do
13619: LD_EXP 8
13623: PUSH
13624: LD_EXP 59
13628: AND
13629: IFFALSE 13664
13631: GO 13633
13633: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13634: LD_INT 28
13636: PPUSH
13637: LD_OWVAR 2
13641: PPUSH
13642: LD_INT 2
13644: PPUSH
13645: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13649: LD_INT 30
13651: PPUSH
13652: LD_OWVAR 2
13656: PPUSH
13657: LD_INT 2
13659: PPUSH
13660: CALL_OW 322
// end ;
13664: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13665: LD_EXP 8
13669: PUSH
13670: LD_EXP 60
13674: AND
13675: IFFALSE 13796
13677: GO 13679
13679: DISABLE
13680: LD_INT 0
13682: PPUSH
13683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_OWVAR 2
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 21
13703: PUSH
13704: LD_INT 1
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 3
13713: PUSH
13714: LD_INT 23
13716: PUSH
13717: LD_INT 0
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: ST_TO_ADDR
// if not tmp then
13738: LD_VAR 0 2
13742: NOT
13743: IFFALSE 13747
// exit ;
13745: GO 13796
// for i in tmp do
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_VAR 0 2
13756: PUSH
13757: FOR_IN
13758: IFFALSE 13794
// begin if Crawls ( i ) then
13760: LD_VAR 0 1
13764: PPUSH
13765: CALL_OW 318
13769: IFFALSE 13780
// ComWalk ( i ) ;
13771: LD_VAR 0 1
13775: PPUSH
13776: CALL_OW 138
// SetClass ( i , 2 ) ;
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 2
13787: PPUSH
13788: CALL_OW 336
// end ;
13792: GO 13757
13794: POP
13795: POP
// end ;
13796: PPOPN 2
13798: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13799: LD_EXP 8
13803: PUSH
13804: LD_EXP 61
13808: AND
13809: IFFALSE 14097
13811: GO 13813
13813: DISABLE
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13819: LD_OWVAR 2
13823: PPUSH
13824: LD_INT 9
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13837: LD_INT 9
13839: PPUSH
13840: LD_OWVAR 2
13844: PPUSH
13845: CALL_OW 343
// uc_side := 9 ;
13849: LD_ADDR_OWVAR 20
13853: PUSH
13854: LD_INT 9
13856: ST_TO_ADDR
// uc_nation := 2 ;
13857: LD_ADDR_OWVAR 21
13861: PUSH
13862: LD_INT 2
13864: ST_TO_ADDR
// hc_name := Dark Warrior ;
13865: LD_ADDR_OWVAR 26
13869: PUSH
13870: LD_STRING Dark Warrior
13872: ST_TO_ADDR
// hc_gallery :=  ;
13873: LD_ADDR_OWVAR 33
13877: PUSH
13878: LD_STRING 
13880: ST_TO_ADDR
// hc_noskilllimit := true ;
13881: LD_ADDR_OWVAR 76
13885: PUSH
13886: LD_INT 1
13888: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13889: LD_ADDR_OWVAR 31
13893: PUSH
13894: LD_INT 30
13896: PUSH
13897: LD_INT 30
13899: PUSH
13900: LD_INT 30
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: ST_TO_ADDR
// un := CreateHuman ;
13912: LD_ADDR_VAR 0 3
13916: PUSH
13917: CALL_OW 44
13921: ST_TO_ADDR
// hc_noskilllimit := false ;
13922: LD_ADDR_OWVAR 76
13926: PUSH
13927: LD_INT 0
13929: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13930: LD_VAR 0 3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 51
// ToLua ( playRanger() ) ;
13942: LD_STRING playRanger()
13944: PPUSH
13945: CALL_OW 559
// p := 0 ;
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13957: LD_INT 35
13959: PPUSH
13960: CALL_OW 67
// p := p + 1 ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_VAR 0 2
13973: PUSH
13974: LD_INT 1
13976: PLUS
13977: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13978: LD_VAR 0 3
13982: PPUSH
13983: CALL_OW 256
13987: PUSH
13988: LD_INT 1000
13990: LESS
13991: IFFALSE 14005
// SetLives ( un , 1000 ) ;
13993: LD_VAR 0 3
13997: PPUSH
13998: LD_INT 1000
14000: PPUSH
14001: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 81
14012: PUSH
14013: LD_OWVAR 2
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 91
14024: PUSH
14025: LD_VAR 0 3
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PPUSH
14042: CALL_OW 69
14046: PPUSH
14047: LD_VAR 0 3
14051: PPUSH
14052: CALL_OW 74
14056: PPUSH
14057: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14061: LD_VAR 0 2
14065: PUSH
14066: LD_INT 80
14068: GREATER
14069: PUSH
14070: LD_VAR 0 3
14074: PPUSH
14075: CALL_OW 301
14079: OR
14080: IFFALSE 13957
// if un then
14082: LD_VAR 0 3
14086: IFFALSE 14097
// RemoveUnit ( un ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: CALL_OW 64
// end ;
14097: PPOPN 3
14099: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14100: LD_EXP 62
14104: IFFALSE 14220
14106: GO 14108
14108: DISABLE
14109: LD_INT 0
14111: PPUSH
14112: PPUSH
14113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14114: LD_ADDR_VAR 0 2
14118: PUSH
14119: LD_INT 81
14121: PUSH
14122: LD_OWVAR 2
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 21
14133: PUSH
14134: LD_INT 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PPUSH
14145: CALL_OW 69
14149: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14150: LD_STRING playComputer()
14152: PPUSH
14153: CALL_OW 559
// if not tmp then
14157: LD_VAR 0 2
14161: NOT
14162: IFFALSE 14166
// exit ;
14164: GO 14220
// for i in tmp do
14166: LD_ADDR_VAR 0 1
14170: PUSH
14171: LD_VAR 0 2
14175: PUSH
14176: FOR_IN
14177: IFFALSE 14218
// for j := 1 to 4 do
14179: LD_ADDR_VAR 0 3
14183: PUSH
14184: DOUBLE
14185: LD_INT 1
14187: DEC
14188: ST_TO_ADDR
14189: LD_INT 4
14191: PUSH
14192: FOR_TO
14193: IFFALSE 14214
// SetSkill ( i , j , 10 ) ;
14195: LD_VAR 0 1
14199: PPUSH
14200: LD_VAR 0 3
14204: PPUSH
14205: LD_INT 10
14207: PPUSH
14208: CALL_OW 237
14212: GO 14192
14214: POP
14215: POP
14216: GO 14176
14218: POP
14219: POP
// end ;
14220: PPOPN 3
14222: END
// every 0 0$1 trigger s30 do var i , tmp ;
14223: LD_EXP 63
14227: IFFALSE 14296
14229: GO 14231
14231: DISABLE
14232: LD_INT 0
14234: PPUSH
14235: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_OWVAR 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: ST_TO_ADDR
// if not tmp then
14258: LD_VAR 0 2
14262: NOT
14263: IFFALSE 14267
// exit ;
14265: GO 14296
// for i in tmp do
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_VAR 0 2
14276: PUSH
14277: FOR_IN
14278: IFFALSE 14294
// SetLives ( i , 300 ) ;
14280: LD_VAR 0 1
14284: PPUSH
14285: LD_INT 300
14287: PPUSH
14288: CALL_OW 234
14292: GO 14277
14294: POP
14295: POP
// end ;
14296: PPOPN 2
14298: END
// every 0 0$1 trigger s60 do var i , tmp ;
14299: LD_EXP 64
14303: IFFALSE 14372
14305: GO 14307
14307: DISABLE
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14312: LD_ADDR_VAR 0 2
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_OWVAR 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: ST_TO_ADDR
// if not tmp then
14334: LD_VAR 0 2
14338: NOT
14339: IFFALSE 14343
// exit ;
14341: GO 14372
// for i in tmp do
14343: LD_ADDR_VAR 0 1
14347: PUSH
14348: LD_VAR 0 2
14352: PUSH
14353: FOR_IN
14354: IFFALSE 14370
// SetLives ( i , 600 ) ;
14356: LD_VAR 0 1
14360: PPUSH
14361: LD_INT 600
14363: PPUSH
14364: CALL_OW 234
14368: GO 14353
14370: POP
14371: POP
// end ;
14372: PPOPN 2
14374: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14375: LD_INT 0
14377: PPUSH
// case cmd of 301 :
14378: LD_VAR 0 1
14382: PUSH
14383: LD_INT 301
14385: DOUBLE
14386: EQUAL
14387: IFTRUE 14391
14389: GO 14423
14391: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14392: LD_VAR 0 6
14396: PPUSH
14397: LD_VAR 0 7
14401: PPUSH
14402: LD_VAR 0 8
14406: PPUSH
14407: LD_VAR 0 4
14411: PPUSH
14412: LD_VAR 0 5
14416: PPUSH
14417: CALL 15632 0 5
14421: GO 14544
14423: LD_INT 302
14425: DOUBLE
14426: EQUAL
14427: IFTRUE 14431
14429: GO 14468
14431: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14432: LD_VAR 0 6
14436: PPUSH
14437: LD_VAR 0 7
14441: PPUSH
14442: LD_VAR 0 8
14446: PPUSH
14447: LD_VAR 0 9
14451: PPUSH
14452: LD_VAR 0 4
14456: PPUSH
14457: LD_VAR 0 5
14461: PPUSH
14462: CALL 15723 0 6
14466: GO 14544
14468: LD_INT 303
14470: DOUBLE
14471: EQUAL
14472: IFTRUE 14476
14474: GO 14513
14476: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14477: LD_VAR 0 6
14481: PPUSH
14482: LD_VAR 0 7
14486: PPUSH
14487: LD_VAR 0 8
14491: PPUSH
14492: LD_VAR 0 9
14496: PPUSH
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL 14549 0 6
14511: GO 14544
14513: LD_INT 304
14515: DOUBLE
14516: EQUAL
14517: IFTRUE 14521
14519: GO 14543
14521: POP
// hHackTeleport ( unit , x , y ) ; end ;
14522: LD_VAR 0 2
14526: PPUSH
14527: LD_VAR 0 4
14531: PPUSH
14532: LD_VAR 0 5
14536: PPUSH
14537: CALL 16316 0 3
14541: GO 14544
14543: POP
// end ;
14544: LD_VAR 0 12
14548: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14549: LD_INT 0
14551: PPUSH
14552: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14553: LD_VAR 0 1
14557: PUSH
14558: LD_INT 1
14560: LESS
14561: PUSH
14562: LD_VAR 0 1
14566: PUSH
14567: LD_INT 3
14569: GREATER
14570: OR
14571: PUSH
14572: LD_VAR 0 5
14576: PPUSH
14577: LD_VAR 0 6
14581: PPUSH
14582: CALL_OW 428
14586: OR
14587: IFFALSE 14591
// exit ;
14589: GO 15319
// uc_side := your_side ;
14591: LD_ADDR_OWVAR 20
14595: PUSH
14596: LD_OWVAR 2
14600: ST_TO_ADDR
// uc_nation := nation ;
14601: LD_ADDR_OWVAR 21
14605: PUSH
14606: LD_VAR 0 1
14610: ST_TO_ADDR
// bc_level = 1 ;
14611: LD_ADDR_OWVAR 43
14615: PUSH
14616: LD_INT 1
14618: ST_TO_ADDR
// case btype of 1 :
14619: LD_VAR 0 2
14623: PUSH
14624: LD_INT 1
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14643
14632: POP
// bc_type := b_depot ; 2 :
14633: LD_ADDR_OWVAR 42
14637: PUSH
14638: LD_INT 0
14640: ST_TO_ADDR
14641: GO 15263
14643: LD_INT 2
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14662
14651: POP
// bc_type := b_warehouse ; 3 :
14652: LD_ADDR_OWVAR 42
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
14660: GO 15263
14662: LD_INT 3
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14681
14670: POP
// bc_type := b_lab ; 4 .. 9 :
14671: LD_ADDR_OWVAR 42
14675: PUSH
14676: LD_INT 6
14678: ST_TO_ADDR
14679: GO 15263
14681: LD_INT 4
14683: DOUBLE
14684: GREATEREQUAL
14685: IFFALSE 14693
14687: LD_INT 9
14689: DOUBLE
14690: LESSEQUAL
14691: IFTRUE 14695
14693: GO 14755
14695: POP
// begin bc_type := b_lab_half ;
14696: LD_ADDR_OWVAR 42
14700: PUSH
14701: LD_INT 7
14703: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14704: LD_ADDR_OWVAR 44
14708: PUSH
14709: LD_INT 10
14711: PUSH
14712: LD_INT 11
14714: PUSH
14715: LD_INT 12
14717: PUSH
14718: LD_INT 15
14720: PUSH
14721: LD_INT 14
14723: PUSH
14724: LD_INT 13
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: LD_VAR 0 2
14739: PUSH
14740: LD_INT 3
14742: MINUS
14743: ARRAY
14744: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14745: LD_ADDR_OWVAR 45
14749: PUSH
14750: LD_INT 9
14752: ST_TO_ADDR
// end ; 10 .. 13 :
14753: GO 15263
14755: LD_INT 10
14757: DOUBLE
14758: GREATEREQUAL
14759: IFFALSE 14767
14761: LD_INT 13
14763: DOUBLE
14764: LESSEQUAL
14765: IFTRUE 14769
14767: GO 14846
14769: POP
// begin bc_type := b_lab_full ;
14770: LD_ADDR_OWVAR 42
14774: PUSH
14775: LD_INT 8
14777: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14778: LD_ADDR_OWVAR 44
14782: PUSH
14783: LD_INT 10
14785: PUSH
14786: LD_INT 12
14788: PUSH
14789: LD_INT 14
14791: PUSH
14792: LD_INT 13
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: LD_INT 9
14808: MINUS
14809: ARRAY
14810: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14811: LD_ADDR_OWVAR 45
14815: PUSH
14816: LD_INT 11
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 12
14824: PUSH
14825: LD_INT 15
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: LD_VAR 0 2
14838: PUSH
14839: LD_INT 9
14841: MINUS
14842: ARRAY
14843: ST_TO_ADDR
// end ; 14 :
14844: GO 15263
14846: LD_INT 14
14848: DOUBLE
14849: EQUAL
14850: IFTRUE 14854
14852: GO 14865
14854: POP
// bc_type := b_workshop ; 15 :
14855: LD_ADDR_OWVAR 42
14859: PUSH
14860: LD_INT 2
14862: ST_TO_ADDR
14863: GO 15263
14865: LD_INT 15
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14884
14873: POP
// bc_type := b_factory ; 16 :
14874: LD_ADDR_OWVAR 42
14878: PUSH
14879: LD_INT 3
14881: ST_TO_ADDR
14882: GO 15263
14884: LD_INT 16
14886: DOUBLE
14887: EQUAL
14888: IFTRUE 14892
14890: GO 14903
14892: POP
// bc_type := b_ext_gun ; 17 :
14893: LD_ADDR_OWVAR 42
14897: PUSH
14898: LD_INT 17
14900: ST_TO_ADDR
14901: GO 15263
14903: LD_INT 17
14905: DOUBLE
14906: EQUAL
14907: IFTRUE 14911
14909: GO 14939
14911: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14912: LD_ADDR_OWVAR 42
14916: PUSH
14917: LD_INT 19
14919: PUSH
14920: LD_INT 23
14922: PUSH
14923: LD_INT 19
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: PUSH
14931: LD_VAR 0 1
14935: ARRAY
14936: ST_TO_ADDR
14937: GO 15263
14939: LD_INT 18
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 14958
14947: POP
// bc_type := b_ext_radar ; 19 :
14948: LD_ADDR_OWVAR 42
14952: PUSH
14953: LD_INT 20
14955: ST_TO_ADDR
14956: GO 15263
14958: LD_INT 19
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14977
14966: POP
// bc_type := b_ext_radio ; 20 :
14967: LD_ADDR_OWVAR 42
14971: PUSH
14972: LD_INT 22
14974: ST_TO_ADDR
14975: GO 15263
14977: LD_INT 20
14979: DOUBLE
14980: EQUAL
14981: IFTRUE 14985
14983: GO 14996
14985: POP
// bc_type := b_ext_siberium ; 21 :
14986: LD_ADDR_OWVAR 42
14990: PUSH
14991: LD_INT 21
14993: ST_TO_ADDR
14994: GO 15263
14996: LD_INT 21
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15015
15004: POP
// bc_type := b_ext_computer ; 22 :
15005: LD_ADDR_OWVAR 42
15009: PUSH
15010: LD_INT 24
15012: ST_TO_ADDR
15013: GO 15263
15015: LD_INT 22
15017: DOUBLE
15018: EQUAL
15019: IFTRUE 15023
15021: GO 15034
15023: POP
// bc_type := b_ext_track ; 23 :
15024: LD_ADDR_OWVAR 42
15028: PUSH
15029: LD_INT 16
15031: ST_TO_ADDR
15032: GO 15263
15034: LD_INT 23
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15053
15042: POP
// bc_type := b_ext_laser ; 24 :
15043: LD_ADDR_OWVAR 42
15047: PUSH
15048: LD_INT 25
15050: ST_TO_ADDR
15051: GO 15263
15053: LD_INT 24
15055: DOUBLE
15056: EQUAL
15057: IFTRUE 15061
15059: GO 15072
15061: POP
// bc_type := b_control_tower ; 25 :
15062: LD_ADDR_OWVAR 42
15066: PUSH
15067: LD_INT 36
15069: ST_TO_ADDR
15070: GO 15263
15072: LD_INT 25
15074: DOUBLE
15075: EQUAL
15076: IFTRUE 15080
15078: GO 15091
15080: POP
// bc_type := b_breastwork ; 26 :
15081: LD_ADDR_OWVAR 42
15085: PUSH
15086: LD_INT 31
15088: ST_TO_ADDR
15089: GO 15263
15091: LD_INT 26
15093: DOUBLE
15094: EQUAL
15095: IFTRUE 15099
15097: GO 15110
15099: POP
// bc_type := b_bunker ; 27 :
15100: LD_ADDR_OWVAR 42
15104: PUSH
15105: LD_INT 32
15107: ST_TO_ADDR
15108: GO 15263
15110: LD_INT 27
15112: DOUBLE
15113: EQUAL
15114: IFTRUE 15118
15116: GO 15129
15118: POP
// bc_type := b_turret ; 28 :
15119: LD_ADDR_OWVAR 42
15123: PUSH
15124: LD_INT 33
15126: ST_TO_ADDR
15127: GO 15263
15129: LD_INT 28
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15148
15137: POP
// bc_type := b_armoury ; 29 :
15138: LD_ADDR_OWVAR 42
15142: PUSH
15143: LD_INT 4
15145: ST_TO_ADDR
15146: GO 15263
15148: LD_INT 29
15150: DOUBLE
15151: EQUAL
15152: IFTRUE 15156
15154: GO 15167
15156: POP
// bc_type := b_barracks ; 30 :
15157: LD_ADDR_OWVAR 42
15161: PUSH
15162: LD_INT 5
15164: ST_TO_ADDR
15165: GO 15263
15167: LD_INT 30
15169: DOUBLE
15170: EQUAL
15171: IFTRUE 15175
15173: GO 15186
15175: POP
// bc_type := b_solar_power ; 31 :
15176: LD_ADDR_OWVAR 42
15180: PUSH
15181: LD_INT 27
15183: ST_TO_ADDR
15184: GO 15263
15186: LD_INT 31
15188: DOUBLE
15189: EQUAL
15190: IFTRUE 15194
15192: GO 15205
15194: POP
// bc_type := b_oil_power ; 32 :
15195: LD_ADDR_OWVAR 42
15199: PUSH
15200: LD_INT 26
15202: ST_TO_ADDR
15203: GO 15263
15205: LD_INT 32
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15224
15213: POP
// bc_type := b_siberite_power ; 33 :
15214: LD_ADDR_OWVAR 42
15218: PUSH
15219: LD_INT 28
15221: ST_TO_ADDR
15222: GO 15263
15224: LD_INT 33
15226: DOUBLE
15227: EQUAL
15228: IFTRUE 15232
15230: GO 15243
15232: POP
// bc_type := b_oil_mine ; 34 :
15233: LD_ADDR_OWVAR 42
15237: PUSH
15238: LD_INT 29
15240: ST_TO_ADDR
15241: GO 15263
15243: LD_INT 34
15245: DOUBLE
15246: EQUAL
15247: IFTRUE 15251
15249: GO 15262
15251: POP
// bc_type := b_siberite_mine ; end ;
15252: LD_ADDR_OWVAR 42
15256: PUSH
15257: LD_INT 30
15259: ST_TO_ADDR
15260: GO 15263
15262: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15263: LD_ADDR_VAR 0 8
15267: PUSH
15268: LD_VAR 0 5
15272: PPUSH
15273: LD_VAR 0 6
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: CALL_OW 47
15287: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15288: LD_OWVAR 42
15292: PUSH
15293: LD_INT 32
15295: PUSH
15296: LD_INT 33
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: IN
15303: IFFALSE 15319
// PlaceWeaponTurret ( b , weapon ) ;
15305: LD_VAR 0 8
15309: PPUSH
15310: LD_VAR 0 4
15314: PPUSH
15315: CALL_OW 431
// end ;
15319: LD_VAR 0 7
15323: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
15328: PPUSH
15329: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15330: LD_ADDR_VAR 0 4
15334: PUSH
15335: LD_INT 22
15337: PUSH
15338: LD_OWVAR 2
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 2
15349: PUSH
15350: LD_INT 30
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 30
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 69
15383: ST_TO_ADDR
// if not tmp then
15384: LD_VAR 0 4
15388: NOT
15389: IFFALSE 15393
// exit ;
15391: GO 15452
// for i in tmp do
15393: LD_ADDR_VAR 0 2
15397: PUSH
15398: LD_VAR 0 4
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15450
// for j = 1 to 3 do
15406: LD_ADDR_VAR 0 3
15410: PUSH
15411: DOUBLE
15412: LD_INT 1
15414: DEC
15415: ST_TO_ADDR
15416: LD_INT 3
15418: PUSH
15419: FOR_TO
15420: IFFALSE 15446
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15422: LD_VAR 0 2
15426: PPUSH
15427: CALL_OW 274
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 99999
15439: PPUSH
15440: CALL_OW 277
15444: GO 15419
15446: POP
15447: POP
15448: GO 15403
15450: POP
15451: POP
// end ;
15452: LD_VAR 0 1
15456: RET
// export function hHackSetLevel10 ; var i , j ; begin
15457: LD_INT 0
15459: PPUSH
15460: PPUSH
15461: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_INT 21
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: PUSH
15482: FOR_IN
15483: IFFALSE 15535
// if IsSelected ( i ) then
15485: LD_VAR 0 2
15489: PPUSH
15490: CALL_OW 306
15494: IFFALSE 15533
// begin for j := 1 to 4 do
15496: LD_ADDR_VAR 0 3
15500: PUSH
15501: DOUBLE
15502: LD_INT 1
15504: DEC
15505: ST_TO_ADDR
15506: LD_INT 4
15508: PUSH
15509: FOR_TO
15510: IFFALSE 15531
// SetSkill ( i , j , 10 ) ;
15512: LD_VAR 0 2
15516: PPUSH
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 10
15524: PPUSH
15525: CALL_OW 237
15529: GO 15509
15531: POP
15532: POP
// end ;
15533: GO 15482
15535: POP
15536: POP
// end ;
15537: LD_VAR 0 1
15541: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
15546: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_OWVAR 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 1
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: FOR_IN
15584: IFFALSE 15625
// begin for j := 1 to 4 do
15586: LD_ADDR_VAR 0 3
15590: PUSH
15591: DOUBLE
15592: LD_INT 1
15594: DEC
15595: ST_TO_ADDR
15596: LD_INT 4
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15621
// SetSkill ( i , j , 10 ) ;
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 10
15614: PPUSH
15615: CALL_OW 237
15619: GO 15599
15621: POP
15622: POP
// end ;
15623: GO 15583
15625: POP
15626: POP
// end ;
15627: LD_VAR 0 1
15631: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15632: LD_INT 0
15634: PPUSH
// uc_side := your_side ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_OWVAR 2
15644: ST_TO_ADDR
// uc_nation := nation ;
15645: LD_ADDR_OWVAR 21
15649: PUSH
15650: LD_VAR 0 1
15654: ST_TO_ADDR
// InitHc ;
15655: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15659: LD_INT 0
15661: PPUSH
15662: LD_VAR 0 2
15666: PPUSH
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15676: LD_VAR 0 4
15680: PPUSH
15681: LD_VAR 0 5
15685: PPUSH
15686: CALL_OW 428
15690: PUSH
15691: LD_INT 0
15693: EQUAL
15694: IFFALSE 15718
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15696: CALL_OW 44
15700: PPUSH
15701: LD_VAR 0 4
15705: PPUSH
15706: LD_VAR 0 5
15710: PPUSH
15711: LD_INT 1
15713: PPUSH
15714: CALL_OW 48
// end ;
15718: LD_VAR 0 6
15722: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
// uc_side := your_side ;
15727: LD_ADDR_OWVAR 20
15731: PUSH
15732: LD_OWVAR 2
15736: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: LD_INT 2
15747: PUSH
15748: LD_INT 3
15750: PUSH
15751: LD_INT 4
15753: PUSH
15754: LD_INT 5
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: IN
15764: IFFALSE 15776
// uc_nation := nation_american else
15766: LD_ADDR_OWVAR 21
15770: PUSH
15771: LD_INT 1
15773: ST_TO_ADDR
15774: GO 15819
// if chassis in [ 11 , 12 , 13 , 14 ] then
15776: LD_VAR 0 1
15780: PUSH
15781: LD_INT 11
15783: PUSH
15784: LD_INT 12
15786: PUSH
15787: LD_INT 13
15789: PUSH
15790: LD_INT 14
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: IN
15799: IFFALSE 15811
// uc_nation := nation_arabian else
15801: LD_ADDR_OWVAR 21
15805: PUSH
15806: LD_INT 2
15808: ST_TO_ADDR
15809: GO 15819
// uc_nation := nation_russian ;
15811: LD_ADDR_OWVAR 21
15815: PUSH
15816: LD_INT 3
15818: ST_TO_ADDR
// vc_chassis := chassis ;
15819: LD_ADDR_OWVAR 37
15823: PUSH
15824: LD_VAR 0 1
15828: ST_TO_ADDR
// vc_engine := engine ;
15829: LD_ADDR_OWVAR 39
15833: PUSH
15834: LD_VAR 0 2
15838: ST_TO_ADDR
// vc_control := control ;
15839: LD_ADDR_OWVAR 38
15843: PUSH
15844: LD_VAR 0 3
15848: ST_TO_ADDR
// vc_weapon := weapon ;
15849: LD_ADDR_OWVAR 40
15853: PUSH
15854: LD_VAR 0 4
15858: ST_TO_ADDR
// un := CreateVehicle ;
15859: LD_ADDR_VAR 0 8
15863: PUSH
15864: CALL_OW 45
15868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15869: LD_VAR 0 8
15873: PPUSH
15874: LD_INT 0
15876: PPUSH
15877: LD_INT 5
15879: PPUSH
15880: CALL_OW 12
15884: PPUSH
15885: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15889: LD_VAR 0 8
15893: PPUSH
15894: LD_VAR 0 5
15898: PPUSH
15899: LD_VAR 0 6
15903: PPUSH
15904: LD_INT 1
15906: PPUSH
15907: CALL_OW 48
// end ;
15911: LD_VAR 0 7
15915: RET
// export hInvincible ; every 1 do
15916: GO 15918
15918: DISABLE
// hInvincible := [ ] ;
15919: LD_ADDR_EXP 65
15923: PUSH
15924: EMPTY
15925: ST_TO_ADDR
15926: END
// every 10 do var i ;
15927: GO 15929
15929: DISABLE
15930: LD_INT 0
15932: PPUSH
// begin enable ;
15933: ENABLE
// if not hInvincible then
15934: LD_EXP 65
15938: NOT
15939: IFFALSE 15943
// exit ;
15941: GO 15987
// for i in hInvincible do
15943: LD_ADDR_VAR 0 1
15947: PUSH
15948: LD_EXP 65
15952: PUSH
15953: FOR_IN
15954: IFFALSE 15985
// if GetLives ( i ) < 1000 then
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 256
15965: PUSH
15966: LD_INT 1000
15968: LESS
15969: IFFALSE 15983
// SetLives ( i , 1000 ) ;
15971: LD_VAR 0 1
15975: PPUSH
15976: LD_INT 1000
15978: PPUSH
15979: CALL_OW 234
15983: GO 15953
15985: POP
15986: POP
// end ;
15987: PPOPN 1
15989: END
// export function hHackInvincible ; var i ; begin
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 2
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 21
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16094
// if IsSelected ( i ) then
16035: LD_VAR 0 2
16039: PPUSH
16040: CALL_OW 306
16044: IFFALSE 16092
// begin if i in hInvincible then
16046: LD_VAR 0 2
16050: PUSH
16051: LD_EXP 65
16055: IN
16056: IFFALSE 16076
// hInvincible := hInvincible diff i else
16058: LD_ADDR_EXP 65
16062: PUSH
16063: LD_EXP 65
16067: PUSH
16068: LD_VAR 0 2
16072: DIFF
16073: ST_TO_ADDR
16074: GO 16092
// hInvincible := hInvincible union i ;
16076: LD_ADDR_EXP 65
16080: PUSH
16081: LD_EXP 65
16085: PUSH
16086: LD_VAR 0 2
16090: UNION
16091: ST_TO_ADDR
// end ;
16092: GO 16032
16094: POP
16095: POP
// end ;
16096: LD_VAR 0 1
16100: RET
// export function hHackInvisible ; var i , j ; begin
16101: LD_INT 0
16103: PPUSH
16104: PPUSH
16105: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: LD_INT 21
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: PUSH
16126: FOR_IN
16127: IFFALSE 16151
// if IsSelected ( i ) then
16129: LD_VAR 0 2
16133: PPUSH
16134: CALL_OW 306
16138: IFFALSE 16149
// ComForceInvisible ( i ) ;
16140: LD_VAR 0 2
16144: PPUSH
16145: CALL_OW 496
16149: GO 16126
16151: POP
16152: POP
// end ;
16153: LD_VAR 0 1
16157: RET
// export function hHackChangeYourSide ; begin
16158: LD_INT 0
16160: PPUSH
// if your_side = 8 then
16161: LD_OWVAR 2
16165: PUSH
16166: LD_INT 8
16168: EQUAL
16169: IFFALSE 16181
// your_side := 0 else
16171: LD_ADDR_OWVAR 2
16175: PUSH
16176: LD_INT 0
16178: ST_TO_ADDR
16179: GO 16195
// your_side := your_side + 1 ;
16181: LD_ADDR_OWVAR 2
16185: PUSH
16186: LD_OWVAR 2
16190: PUSH
16191: LD_INT 1
16193: PLUS
16194: ST_TO_ADDR
// end ;
16195: LD_VAR 0 1
16199: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16200: LD_INT 0
16202: PPUSH
16203: PPUSH
16204: PPUSH
// for i in all_units do
16205: LD_ADDR_VAR 0 2
16209: PUSH
16210: LD_OWVAR 3
16214: PUSH
16215: FOR_IN
16216: IFFALSE 16294
// if IsSelected ( i ) then
16218: LD_VAR 0 2
16222: PPUSH
16223: CALL_OW 306
16227: IFFALSE 16292
// begin j := GetSide ( i ) ;
16229: LD_ADDR_VAR 0 3
16233: PUSH
16234: LD_VAR 0 2
16238: PPUSH
16239: CALL_OW 255
16243: ST_TO_ADDR
// if j = 8 then
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 8
16251: EQUAL
16252: IFFALSE 16264
// j := 0 else
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: LD_INT 0
16261: ST_TO_ADDR
16262: GO 16278
// j := j + 1 ;
16264: LD_ADDR_VAR 0 3
16268: PUSH
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 1
16276: PLUS
16277: ST_TO_ADDR
// SetSide ( i , j ) ;
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_VAR 0 3
16287: PPUSH
16288: CALL_OW 235
// end ;
16292: GO 16215
16294: POP
16295: POP
// end ;
16296: LD_VAR 0 1
16300: RET
// export function hHackFog ; begin
16301: LD_INT 0
16303: PPUSH
// FogOff ( true ) ;
16304: LD_INT 1
16306: PPUSH
16307: CALL_OW 344
// end ;
16311: LD_VAR 0 1
16315: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16316: LD_INT 0
16318: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16319: LD_VAR 0 1
16323: PPUSH
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: LD_INT 1
16339: PPUSH
16340: CALL_OW 483
// CenterOnXY ( x , y ) ;
16344: LD_VAR 0 2
16348: PPUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: CALL_OW 84
// end ;
16358: LD_VAR 0 4
16362: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16363: LD_INT 0
16365: PPUSH
16366: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16367: LD_VAR 0 1
16371: NOT
16372: PUSH
16373: LD_VAR 0 2
16377: PPUSH
16378: LD_VAR 0 3
16382: PPUSH
16383: CALL_OW 488
16387: NOT
16388: OR
16389: PUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 266
16399: PUSH
16400: LD_INT 3
16402: NONEQUAL
16403: PUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 247
16413: PUSH
16414: LD_INT 1
16416: EQUAL
16417: NOT
16418: AND
16419: OR
16420: IFFALSE 16424
// exit ;
16422: GO 16573
// if GetType ( factory ) = unit_human then
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 247
16433: PUSH
16434: LD_INT 1
16436: EQUAL
16437: IFFALSE 16454
// factory := IsInUnit ( factory ) ;
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 310
16453: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 266
16463: PUSH
16464: LD_INT 3
16466: NONEQUAL
16467: IFFALSE 16471
// exit ;
16469: GO 16573
// if HexInfo ( x , y ) = factory then
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: CALL_OW 428
16485: PUSH
16486: LD_VAR 0 1
16490: EQUAL
16491: IFFALSE 16518
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16493: LD_ADDR_EXP 66
16497: PUSH
16498: LD_EXP 66
16502: PPUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_INT 0
16510: PPUSH
16511: CALL_OW 1
16515: ST_TO_ADDR
16516: GO 16569
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16518: LD_ADDR_EXP 66
16522: PUSH
16523: LD_EXP 66
16527: PPUSH
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_VAR 0 1
16537: PPUSH
16538: CALL_OW 255
16542: PUSH
16543: LD_VAR 0 1
16547: PUSH
16548: LD_VAR 0 2
16552: PUSH
16553: LD_VAR 0 3
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: PPUSH
16564: CALL_OW 1
16568: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16569: CALL 16578 0 0
// end ;
16573: LD_VAR 0 4
16577: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16578: LD_INT 0
16580: PPUSH
16581: PPUSH
16582: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16583: LD_STRING resetFactoryWaypoint();
16585: PPUSH
16586: CALL_OW 559
// if factoryWaypoints then
16590: LD_EXP 66
16594: IFFALSE 16720
// begin list := PrepareArray ( factoryWaypoints ) ;
16596: LD_ADDR_VAR 0 3
16600: PUSH
16601: LD_EXP 66
16605: PPUSH
16606: CALL 64180 0 1
16610: ST_TO_ADDR
// for i := 1 to list do
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_VAR 0 3
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16718
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16629: LD_STRING setFactoryWaypointXY(
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_VAR 0 2
16641: ARRAY
16642: PUSH
16643: LD_INT 1
16645: ARRAY
16646: STR
16647: PUSH
16648: LD_STRING ,
16650: STR
16651: PUSH
16652: LD_VAR 0 3
16656: PUSH
16657: LD_VAR 0 2
16661: ARRAY
16662: PUSH
16663: LD_INT 2
16665: ARRAY
16666: STR
16667: PUSH
16668: LD_STRING ,
16670: STR
16671: PUSH
16672: LD_VAR 0 3
16676: PUSH
16677: LD_VAR 0 2
16681: ARRAY
16682: PUSH
16683: LD_INT 3
16685: ARRAY
16686: STR
16687: PUSH
16688: LD_STRING ,
16690: STR
16691: PUSH
16692: LD_VAR 0 3
16696: PUSH
16697: LD_VAR 0 2
16701: ARRAY
16702: PUSH
16703: LD_INT 4
16705: ARRAY
16706: STR
16707: PUSH
16708: LD_STRING )
16710: STR
16711: PPUSH
16712: CALL_OW 559
16716: GO 16626
16718: POP
16719: POP
// end ; end ;
16720: LD_VAR 0 1
16724: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16725: LD_INT 0
16727: PPUSH
// if HexInfo ( x , y ) = warehouse then
16728: LD_VAR 0 2
16732: PPUSH
16733: LD_VAR 0 3
16737: PPUSH
16738: CALL_OW 428
16742: PUSH
16743: LD_VAR 0 1
16747: EQUAL
16748: IFFALSE 16775
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16750: LD_ADDR_EXP 67
16754: PUSH
16755: LD_EXP 67
16759: PPUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: LD_INT 0
16767: PPUSH
16768: CALL_OW 1
16772: ST_TO_ADDR
16773: GO 16826
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16775: LD_ADDR_EXP 67
16779: PUSH
16780: LD_EXP 67
16784: PPUSH
16785: LD_VAR 0 1
16789: PPUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 255
16799: PUSH
16800: LD_VAR 0 1
16804: PUSH
16805: LD_VAR 0 2
16809: PUSH
16810: LD_VAR 0 3
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: PPUSH
16821: CALL_OW 1
16825: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16826: CALL 16835 0 0
// end ;
16830: LD_VAR 0 4
16834: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16835: LD_INT 0
16837: PPUSH
16838: PPUSH
16839: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16840: LD_STRING resetWarehouseGatheringPoints();
16842: PPUSH
16843: CALL_OW 559
// if warehouseGatheringPoints then
16847: LD_EXP 67
16851: IFFALSE 16977
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16853: LD_ADDR_VAR 0 3
16857: PUSH
16858: LD_EXP 67
16862: PPUSH
16863: CALL 64180 0 1
16867: ST_TO_ADDR
// for i := 1 to list do
16868: LD_ADDR_VAR 0 2
16872: PUSH
16873: DOUBLE
16874: LD_INT 1
16876: DEC
16877: ST_TO_ADDR
16878: LD_VAR 0 3
16882: PUSH
16883: FOR_TO
16884: IFFALSE 16975
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16886: LD_STRING setWarehouseGatheringPointXY(
16888: PUSH
16889: LD_VAR 0 3
16893: PUSH
16894: LD_VAR 0 2
16898: ARRAY
16899: PUSH
16900: LD_INT 1
16902: ARRAY
16903: STR
16904: PUSH
16905: LD_STRING ,
16907: STR
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 2
16918: ARRAY
16919: PUSH
16920: LD_INT 2
16922: ARRAY
16923: STR
16924: PUSH
16925: LD_STRING ,
16927: STR
16928: PUSH
16929: LD_VAR 0 3
16933: PUSH
16934: LD_VAR 0 2
16938: ARRAY
16939: PUSH
16940: LD_INT 3
16942: ARRAY
16943: STR
16944: PUSH
16945: LD_STRING ,
16947: STR
16948: PUSH
16949: LD_VAR 0 3
16953: PUSH
16954: LD_VAR 0 2
16958: ARRAY
16959: PUSH
16960: LD_INT 4
16962: ARRAY
16963: STR
16964: PUSH
16965: LD_STRING )
16967: STR
16968: PPUSH
16969: CALL_OW 559
16973: GO 16883
16975: POP
16976: POP
// end ; end ;
16977: LD_VAR 0 1
16981: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16982: LD_EXP 67
16986: IFFALSE 17671
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
16995: PPUSH
16996: PPUSH
16997: PPUSH
16998: PPUSH
16999: PPUSH
17000: PPUSH
17001: PPUSH
// begin enable ;
17002: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_EXP 67
17012: PPUSH
17013: CALL 64180 0 1
17017: ST_TO_ADDR
// if not list then
17018: LD_VAR 0 3
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17671
// for i := 1 to list do
17027: LD_ADDR_VAR 0 1
17031: PUSH
17032: DOUBLE
17033: LD_INT 1
17035: DEC
17036: ST_TO_ADDR
17037: LD_VAR 0 3
17041: PUSH
17042: FOR_TO
17043: IFFALSE 17669
// begin depot := list [ i ] [ 2 ] ;
17045: LD_ADDR_VAR 0 8
17049: PUSH
17050: LD_VAR 0 3
17054: PUSH
17055: LD_VAR 0 1
17059: ARRAY
17060: PUSH
17061: LD_INT 2
17063: ARRAY
17064: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_VAR 0 3
17074: PUSH
17075: LD_VAR 0 1
17079: ARRAY
17080: PUSH
17081: LD_INT 1
17083: ARRAY
17084: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17085: LD_VAR 0 8
17089: PPUSH
17090: CALL_OW 301
17094: PUSH
17095: LD_VAR 0 5
17099: PUSH
17100: LD_VAR 0 8
17104: PPUSH
17105: CALL_OW 255
17109: NONEQUAL
17110: OR
17111: IFFALSE 17140
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17113: LD_ADDR_EXP 67
17117: PUSH
17118: LD_EXP 67
17122: PPUSH
17123: LD_VAR 0 8
17127: PPUSH
17128: LD_INT 0
17130: PPUSH
17131: CALL_OW 1
17135: ST_TO_ADDR
// exit ;
17136: POP
17137: POP
17138: GO 17671
// end ; x := list [ i ] [ 3 ] ;
17140: LD_ADDR_VAR 0 6
17144: PUSH
17145: LD_VAR 0 3
17149: PUSH
17150: LD_VAR 0 1
17154: ARRAY
17155: PUSH
17156: LD_INT 3
17158: ARRAY
17159: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17160: LD_ADDR_VAR 0 7
17164: PUSH
17165: LD_VAR 0 3
17169: PUSH
17170: LD_VAR 0 1
17174: ARRAY
17175: PUSH
17176: LD_INT 4
17178: ARRAY
17179: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17180: LD_ADDR_VAR 0 9
17184: PUSH
17185: LD_VAR 0 6
17189: PPUSH
17190: LD_VAR 0 7
17194: PPUSH
17195: LD_INT 16
17197: PPUSH
17198: CALL 62768 0 3
17202: ST_TO_ADDR
// if not cratesNearbyPoint then
17203: LD_VAR 0 9
17207: NOT
17208: IFFALSE 17214
// exit ;
17210: POP
17211: POP
17212: GO 17671
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17214: LD_ADDR_VAR 0 4
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: LD_VAR 0 5
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 60
17236: PUSH
17237: EMPTY
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 91
17246: PUSH
17247: LD_VAR 0 8
17251: PUSH
17252: LD_INT 6
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: LD_INT 25
17265: PUSH
17266: LD_INT 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 25
17275: PUSH
17276: LD_INT 16
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: PUSH
17299: LD_VAR 0 8
17303: PPUSH
17304: CALL_OW 313
17308: PPUSH
17309: LD_INT 3
17311: PUSH
17312: LD_INT 60
17314: PUSH
17315: EMPTY
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 25
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 25
17337: PUSH
17338: LD_INT 16
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 72
17358: UNION
17359: ST_TO_ADDR
// if tmp then
17360: LD_VAR 0 4
17364: IFFALSE 17444
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17366: LD_ADDR_VAR 0 4
17370: PUSH
17371: LD_VAR 0 4
17375: PPUSH
17376: LD_INT 3
17378: PPUSH
17379: CALL 60737 0 2
17383: ST_TO_ADDR
// for j in tmp do
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17438
// begin if IsInUnit ( j ) then
17397: LD_VAR 0 2
17401: PPUSH
17402: CALL_OW 310
17406: IFFALSE 17417
// ComExit ( j ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: CALL 60820 0 1
// AddComCollect ( j , x , y ) ;
17417: LD_VAR 0 2
17421: PPUSH
17422: LD_VAR 0 6
17426: PPUSH
17427: LD_VAR 0 7
17431: PPUSH
17432: CALL_OW 177
// end ;
17436: GO 17394
17438: POP
17439: POP
// exit ;
17440: POP
17441: POP
17442: GO 17671
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17444: LD_ADDR_VAR 0 4
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_VAR 0 5
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 91
17463: PUSH
17464: LD_VAR 0 8
17468: PUSH
17469: LD_INT 8
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 34
17482: PUSH
17483: LD_INT 12
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 34
17492: PUSH
17493: LD_INT 51
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 34
17502: PUSH
17503: LD_INT 32
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 34
17512: PUSH
17513: LD_INT 89
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// if tmp then
17537: LD_VAR 0 4
17541: IFFALSE 17667
// begin for j in tmp do
17543: LD_ADDR_VAR 0 2
17547: PUSH
17548: LD_VAR 0 4
17552: PUSH
17553: FOR_IN
17554: IFFALSE 17665
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17556: LD_VAR 0 2
17560: PPUSH
17561: CALL_OW 262
17565: PUSH
17566: LD_INT 3
17568: EQUAL
17569: PUSH
17570: LD_VAR 0 2
17574: PPUSH
17575: CALL_OW 261
17579: PUSH
17580: LD_INT 20
17582: GREATER
17583: OR
17584: PUSH
17585: LD_VAR 0 2
17589: PPUSH
17590: CALL_OW 314
17594: NOT
17595: AND
17596: PUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: CALL_OW 263
17606: PUSH
17607: LD_INT 1
17609: NONEQUAL
17610: PUSH
17611: LD_VAR 0 2
17615: PPUSH
17616: CALL_OW 311
17620: OR
17621: AND
17622: IFFALSE 17663
// begin ComCollect ( j , x , y ) ;
17624: LD_VAR 0 2
17628: PPUSH
17629: LD_VAR 0 6
17633: PPUSH
17634: LD_VAR 0 7
17638: PPUSH
17639: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17643: LD_VAR 0 2
17647: PPUSH
17648: LD_VAR 0 8
17652: PPUSH
17653: CALL_OW 172
// exit ;
17657: POP
17658: POP
17659: POP
17660: POP
17661: GO 17671
// end ;
17663: GO 17553
17665: POP
17666: POP
// end ; end ;
17667: GO 17042
17669: POP
17670: POP
// end ; end_of_file
17671: PPOPN 9
17673: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17674: LD_VAR 0 1
17678: PUSH
17679: LD_INT 200
17681: DOUBLE
17682: GREATEREQUAL
17683: IFFALSE 17691
17685: LD_INT 299
17687: DOUBLE
17688: LESSEQUAL
17689: IFTRUE 17693
17691: GO 17725
17693: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17694: LD_VAR 0 1
17698: PPUSH
17699: LD_VAR 0 2
17703: PPUSH
17704: LD_VAR 0 3
17708: PPUSH
17709: LD_VAR 0 4
17713: PPUSH
17714: LD_VAR 0 5
17718: PPUSH
17719: CALL 18213 0 5
17723: GO 17802
17725: LD_INT 300
17727: DOUBLE
17728: GREATEREQUAL
17729: IFFALSE 17737
17731: LD_INT 399
17733: DOUBLE
17734: LESSEQUAL
17735: IFTRUE 17739
17737: GO 17801
17739: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17740: LD_VAR 0 1
17744: PPUSH
17745: LD_VAR 0 2
17749: PPUSH
17750: LD_VAR 0 3
17754: PPUSH
17755: LD_VAR 0 4
17759: PPUSH
17760: LD_VAR 0 5
17764: PPUSH
17765: LD_VAR 0 6
17769: PPUSH
17770: LD_VAR 0 7
17774: PPUSH
17775: LD_VAR 0 8
17779: PPUSH
17780: LD_VAR 0 9
17784: PPUSH
17785: LD_VAR 0 10
17789: PPUSH
17790: LD_VAR 0 11
17794: PPUSH
17795: CALL 14375 0 11
17799: GO 17802
17801: POP
// end ;
17802: PPOPN 11
17804: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17805: LD_VAR 0 1
17809: PPUSH
17810: LD_VAR 0 2
17814: PPUSH
17815: LD_VAR 0 3
17819: PPUSH
17820: LD_VAR 0 4
17824: PPUSH
17825: LD_VAR 0 5
17829: PPUSH
17830: CALL 17949 0 5
// end ; end_of_file
17834: PPOPN 5
17836: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17837: LD_INT 0
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 264
17852: PUSH
17853: LD_INT 91
17855: EQUAL
17856: IFFALSE 17928
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17858: LD_INT 68
17860: PPUSH
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 255
17870: PPUSH
17871: CALL_OW 321
17875: PUSH
17876: LD_INT 2
17878: EQUAL
17879: IFFALSE 17891
// eff := 70 else
17881: LD_ADDR_VAR 0 4
17885: PUSH
17886: LD_INT 70
17888: ST_TO_ADDR
17889: GO 17899
// eff := 30 ;
17891: LD_ADDR_VAR 0 4
17895: PUSH
17896: LD_INT 30
17898: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 250
17908: PPUSH
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 251
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: CALL_OW 495
// end ; end ;
17928: LD_VAR 0 2
17932: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17933: LD_INT 0
17935: PPUSH
// end ;
17936: LD_VAR 0 4
17940: RET
// export function SOS_Command ( cmd ) ; begin
17941: LD_INT 0
17943: PPUSH
// end ;
17944: LD_VAR 0 2
17948: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17949: LD_INT 0
17951: PPUSH
// end ;
17952: LD_VAR 0 6
17956: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17957: LD_INT 0
17959: PPUSH
17960: PPUSH
// if not vehicle or not factory then
17961: LD_VAR 0 1
17965: NOT
17966: PUSH
17967: LD_VAR 0 2
17971: NOT
17972: OR
17973: IFFALSE 17977
// exit ;
17975: GO 18208
// if factoryWaypoints >= factory then
17977: LD_EXP 66
17981: PUSH
17982: LD_VAR 0 2
17986: GREATEREQUAL
17987: IFFALSE 18208
// if factoryWaypoints [ factory ] then
17989: LD_EXP 66
17993: PUSH
17994: LD_VAR 0 2
17998: ARRAY
17999: IFFALSE 18208
// begin if GetControl ( vehicle ) = control_manual then
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 263
18010: PUSH
18011: LD_INT 1
18013: EQUAL
18014: IFFALSE 18095
// begin driver := IsDrivenBy ( vehicle ) ;
18016: LD_ADDR_VAR 0 4
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 311
18030: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18031: LD_VAR 0 4
18035: PPUSH
18036: LD_EXP 66
18040: PUSH
18041: LD_VAR 0 2
18045: ARRAY
18046: PUSH
18047: LD_INT 3
18049: ARRAY
18050: PPUSH
18051: LD_EXP 66
18055: PUSH
18056: LD_VAR 0 2
18060: ARRAY
18061: PUSH
18062: LD_INT 4
18064: ARRAY
18065: PPUSH
18066: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18070: LD_VAR 0 4
18074: PPUSH
18075: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18079: LD_VAR 0 4
18083: PPUSH
18084: LD_VAR 0 2
18088: PPUSH
18089: CALL_OW 180
// end else
18093: GO 18208
// if GetControl ( vehicle ) = control_remote then
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 263
18104: PUSH
18105: LD_INT 2
18107: EQUAL
18108: IFFALSE 18169
// begin wait ( 0 0$2 ) ;
18110: LD_INT 70
18112: PPUSH
18113: CALL_OW 67
// if Connect ( vehicle ) then
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL 31039 0 1
18126: IFFALSE 18167
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_EXP 66
18137: PUSH
18138: LD_VAR 0 2
18142: ARRAY
18143: PUSH
18144: LD_INT 3
18146: ARRAY
18147: PPUSH
18148: LD_EXP 66
18152: PUSH
18153: LD_VAR 0 2
18157: ARRAY
18158: PUSH
18159: LD_INT 4
18161: ARRAY
18162: PPUSH
18163: CALL_OW 171
// end else
18167: GO 18208
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_EXP 66
18178: PUSH
18179: LD_VAR 0 2
18183: ARRAY
18184: PUSH
18185: LD_INT 3
18187: ARRAY
18188: PPUSH
18189: LD_EXP 66
18193: PUSH
18194: LD_VAR 0 2
18198: ARRAY
18199: PUSH
18200: LD_INT 4
18202: ARRAY
18203: PPUSH
18204: CALL_OW 171
// end ; end ;
18208: LD_VAR 0 3
18212: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18213: LD_INT 0
18215: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18216: LD_VAR 0 1
18220: PUSH
18221: LD_INT 250
18223: EQUAL
18224: PUSH
18225: LD_VAR 0 2
18229: PPUSH
18230: CALL_OW 264
18234: PUSH
18235: LD_INT 81
18237: EQUAL
18238: AND
18239: IFFALSE 18260
// MinerPlaceMine ( unit , x , y ) ;
18241: LD_VAR 0 2
18245: PPUSH
18246: LD_VAR 0 4
18250: PPUSH
18251: LD_VAR 0 5
18255: PPUSH
18256: CALL 21250 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18260: LD_VAR 0 1
18264: PUSH
18265: LD_INT 251
18267: EQUAL
18268: PUSH
18269: LD_VAR 0 2
18273: PPUSH
18274: CALL_OW 264
18278: PUSH
18279: LD_INT 81
18281: EQUAL
18282: AND
18283: IFFALSE 18304
// MinerDetonateMine ( unit , x , y ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_VAR 0 5
18299: PPUSH
18300: CALL 21525 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18304: LD_VAR 0 1
18308: PUSH
18309: LD_INT 252
18311: EQUAL
18312: PUSH
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 264
18322: PUSH
18323: LD_INT 81
18325: EQUAL
18326: AND
18327: IFFALSE 18348
// MinerCreateMinefield ( unit , x , y ) ;
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_VAR 0 4
18338: PPUSH
18339: LD_VAR 0 5
18343: PPUSH
18344: CALL 21942 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18348: LD_VAR 0 1
18352: PUSH
18353: LD_INT 253
18355: EQUAL
18356: PUSH
18357: LD_VAR 0 2
18361: PPUSH
18362: CALL_OW 257
18366: PUSH
18367: LD_INT 5
18369: EQUAL
18370: AND
18371: IFFALSE 18392
// ComBinocular ( unit , x , y ) ;
18373: LD_VAR 0 2
18377: PPUSH
18378: LD_VAR 0 4
18382: PPUSH
18383: LD_VAR 0 5
18387: PPUSH
18388: CALL 22311 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18392: LD_VAR 0 1
18396: PUSH
18397: LD_INT 254
18399: EQUAL
18400: PUSH
18401: LD_VAR 0 2
18405: PPUSH
18406: CALL_OW 264
18410: PUSH
18411: LD_INT 99
18413: EQUAL
18414: AND
18415: PUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: CALL_OW 263
18425: PUSH
18426: LD_INT 3
18428: EQUAL
18429: AND
18430: IFFALSE 18446
// HackDestroyVehicle ( unit , selectedUnit ) ;
18432: LD_VAR 0 2
18436: PPUSH
18437: LD_VAR 0 3
18441: PPUSH
18442: CALL 20614 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18446: LD_VAR 0 1
18450: PUSH
18451: LD_INT 255
18453: EQUAL
18454: PUSH
18455: LD_VAR 0 2
18459: PPUSH
18460: CALL_OW 264
18464: PUSH
18465: LD_INT 14
18467: PUSH
18468: LD_INT 53
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: IN
18475: AND
18476: PUSH
18477: LD_VAR 0 4
18481: PPUSH
18482: LD_VAR 0 5
18486: PPUSH
18487: CALL_OW 488
18491: AND
18492: IFFALSE 18516
// CutTreeXYR ( unit , x , y , 12 ) ;
18494: LD_VAR 0 2
18498: PPUSH
18499: LD_VAR 0 4
18503: PPUSH
18504: LD_VAR 0 5
18508: PPUSH
18509: LD_INT 12
18511: PPUSH
18512: CALL 18611 0 4
// if cmd = 256 then
18516: LD_VAR 0 1
18520: PUSH
18521: LD_INT 256
18523: EQUAL
18524: IFFALSE 18545
// SetFactoryWaypoint ( unit , x , y ) ;
18526: LD_VAR 0 2
18530: PPUSH
18531: LD_VAR 0 4
18535: PPUSH
18536: LD_VAR 0 5
18540: PPUSH
18541: CALL 16363 0 3
// if cmd = 257 then
18545: LD_VAR 0 1
18549: PUSH
18550: LD_INT 257
18552: EQUAL
18553: IFFALSE 18574
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18555: LD_VAR 0 2
18559: PPUSH
18560: LD_VAR 0 4
18564: PPUSH
18565: LD_VAR 0 5
18569: PPUSH
18570: CALL 16725 0 3
// if cmd = 258 then
18574: LD_VAR 0 1
18578: PUSH
18579: LD_INT 258
18581: EQUAL
18582: IFFALSE 18606
// BurnTreeXYR ( unit , x , y , 8 ) ;
18584: LD_VAR 0 2
18588: PPUSH
18589: LD_VAR 0 4
18593: PPUSH
18594: LD_VAR 0 5
18598: PPUSH
18599: LD_INT 8
18601: PPUSH
18602: CALL 19005 0 4
// end ;
18606: LD_VAR 0 6
18610: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18611: LD_INT 0
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18622: LD_VAR 0 1
18626: PPUSH
18627: CALL_OW 302
18631: NOT
18632: PUSH
18633: LD_VAR 0 2
18637: PPUSH
18638: LD_VAR 0 3
18642: PPUSH
18643: CALL_OW 488
18647: NOT
18648: OR
18649: PUSH
18650: LD_VAR 0 4
18654: NOT
18655: OR
18656: IFFALSE 18660
// exit ;
18658: GO 19000
// list := [ ] ;
18660: LD_ADDR_VAR 0 13
18664: PUSH
18665: EMPTY
18666: ST_TO_ADDR
// if x - r < 0 then
18667: LD_VAR 0 2
18671: PUSH
18672: LD_VAR 0 4
18676: MINUS
18677: PUSH
18678: LD_INT 0
18680: LESS
18681: IFFALSE 18693
// min_x := 0 else
18683: LD_ADDR_VAR 0 7
18687: PUSH
18688: LD_INT 0
18690: ST_TO_ADDR
18691: GO 18709
// min_x := x - r ;
18693: LD_ADDR_VAR 0 7
18697: PUSH
18698: LD_VAR 0 2
18702: PUSH
18703: LD_VAR 0 4
18707: MINUS
18708: ST_TO_ADDR
// if y - r < 0 then
18709: LD_VAR 0 3
18713: PUSH
18714: LD_VAR 0 4
18718: MINUS
18719: PUSH
18720: LD_INT 0
18722: LESS
18723: IFFALSE 18735
// min_y := 0 else
18725: LD_ADDR_VAR 0 8
18729: PUSH
18730: LD_INT 0
18732: ST_TO_ADDR
18733: GO 18751
// min_y := y - r ;
18735: LD_ADDR_VAR 0 8
18739: PUSH
18740: LD_VAR 0 3
18744: PUSH
18745: LD_VAR 0 4
18749: MINUS
18750: ST_TO_ADDR
// max_x := x + r ;
18751: LD_ADDR_VAR 0 9
18755: PUSH
18756: LD_VAR 0 2
18760: PUSH
18761: LD_VAR 0 4
18765: PLUS
18766: ST_TO_ADDR
// max_y := y + r ;
18767: LD_ADDR_VAR 0 10
18771: PUSH
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 4
18781: PLUS
18782: ST_TO_ADDR
// for _x = min_x to max_x do
18783: LD_ADDR_VAR 0 11
18787: PUSH
18788: DOUBLE
18789: LD_VAR 0 7
18793: DEC
18794: ST_TO_ADDR
18795: LD_VAR 0 9
18799: PUSH
18800: FOR_TO
18801: IFFALSE 18918
// for _y = min_y to max_y do
18803: LD_ADDR_VAR 0 12
18807: PUSH
18808: DOUBLE
18809: LD_VAR 0 8
18813: DEC
18814: ST_TO_ADDR
18815: LD_VAR 0 10
18819: PUSH
18820: FOR_TO
18821: IFFALSE 18914
// begin if not ValidHex ( _x , _y ) then
18823: LD_VAR 0 11
18827: PPUSH
18828: LD_VAR 0 12
18832: PPUSH
18833: CALL_OW 488
18837: NOT
18838: IFFALSE 18842
// continue ;
18840: GO 18820
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18842: LD_VAR 0 11
18846: PPUSH
18847: LD_VAR 0 12
18851: PPUSH
18852: CALL_OW 351
18856: PUSH
18857: LD_VAR 0 11
18861: PPUSH
18862: LD_VAR 0 12
18866: PPUSH
18867: CALL_OW 554
18871: AND
18872: IFFALSE 18912
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18874: LD_ADDR_VAR 0 13
18878: PUSH
18879: LD_VAR 0 13
18883: PPUSH
18884: LD_VAR 0 13
18888: PUSH
18889: LD_INT 1
18891: PLUS
18892: PPUSH
18893: LD_VAR 0 11
18897: PUSH
18898: LD_VAR 0 12
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 2
18911: ST_TO_ADDR
// end ;
18912: GO 18820
18914: POP
18915: POP
18916: GO 18800
18918: POP
18919: POP
// if not list then
18920: LD_VAR 0 13
18924: NOT
18925: IFFALSE 18929
// exit ;
18927: GO 19000
// for i in list do
18929: LD_ADDR_VAR 0 6
18933: PUSH
18934: LD_VAR 0 13
18938: PUSH
18939: FOR_IN
18940: IFFALSE 18998
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18942: LD_VAR 0 1
18946: PPUSH
18947: LD_STRING M
18949: PUSH
18950: LD_VAR 0 6
18954: PUSH
18955: LD_INT 1
18957: ARRAY
18958: PUSH
18959: LD_VAR 0 6
18963: PUSH
18964: LD_INT 2
18966: ARRAY
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: EMPTY
18990: LIST
18991: PPUSH
18992: CALL_OW 447
18996: GO 18939
18998: POP
18999: POP
// end ;
19000: LD_VAR 0 5
19004: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19005: LD_INT 0
19007: PPUSH
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
19016: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 302
19026: NOT
19027: PUSH
19028: LD_VAR 0 2
19032: PPUSH
19033: LD_VAR 0 3
19037: PPUSH
19038: CALL_OW 488
19042: NOT
19043: OR
19044: PUSH
19045: LD_VAR 0 4
19049: NOT
19050: OR
19051: IFFALSE 19055
// exit ;
19053: GO 19568
// list := [ ] ;
19055: LD_ADDR_VAR 0 13
19059: PUSH
19060: EMPTY
19061: ST_TO_ADDR
// if x - r < 0 then
19062: LD_VAR 0 2
19066: PUSH
19067: LD_VAR 0 4
19071: MINUS
19072: PUSH
19073: LD_INT 0
19075: LESS
19076: IFFALSE 19088
// min_x := 0 else
19078: LD_ADDR_VAR 0 7
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
19086: GO 19104
// min_x := x - r ;
19088: LD_ADDR_VAR 0 7
19092: PUSH
19093: LD_VAR 0 2
19097: PUSH
19098: LD_VAR 0 4
19102: MINUS
19103: ST_TO_ADDR
// if y - r < 0 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_VAR 0 4
19113: MINUS
19114: PUSH
19115: LD_INT 0
19117: LESS
19118: IFFALSE 19130
// min_y := 0 else
19120: LD_ADDR_VAR 0 8
19124: PUSH
19125: LD_INT 0
19127: ST_TO_ADDR
19128: GO 19146
// min_y := y - r ;
19130: LD_ADDR_VAR 0 8
19134: PUSH
19135: LD_VAR 0 3
19139: PUSH
19140: LD_VAR 0 4
19144: MINUS
19145: ST_TO_ADDR
// max_x := x + r ;
19146: LD_ADDR_VAR 0 9
19150: PUSH
19151: LD_VAR 0 2
19155: PUSH
19156: LD_VAR 0 4
19160: PLUS
19161: ST_TO_ADDR
// max_y := y + r ;
19162: LD_ADDR_VAR 0 10
19166: PUSH
19167: LD_VAR 0 3
19171: PUSH
19172: LD_VAR 0 4
19176: PLUS
19177: ST_TO_ADDR
// for _x = min_x to max_x do
19178: LD_ADDR_VAR 0 11
19182: PUSH
19183: DOUBLE
19184: LD_VAR 0 7
19188: DEC
19189: ST_TO_ADDR
19190: LD_VAR 0 9
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19313
// for _y = min_y to max_y do
19198: LD_ADDR_VAR 0 12
19202: PUSH
19203: DOUBLE
19204: LD_VAR 0 8
19208: DEC
19209: ST_TO_ADDR
19210: LD_VAR 0 10
19214: PUSH
19215: FOR_TO
19216: IFFALSE 19309
// begin if not ValidHex ( _x , _y ) then
19218: LD_VAR 0 11
19222: PPUSH
19223: LD_VAR 0 12
19227: PPUSH
19228: CALL_OW 488
19232: NOT
19233: IFFALSE 19237
// continue ;
19235: GO 19215
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19237: LD_VAR 0 11
19241: PPUSH
19242: LD_VAR 0 12
19246: PPUSH
19247: CALL_OW 351
19251: PUSH
19252: LD_VAR 0 11
19256: PPUSH
19257: LD_VAR 0 12
19261: PPUSH
19262: CALL_OW 554
19266: AND
19267: IFFALSE 19307
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19269: LD_ADDR_VAR 0 13
19273: PUSH
19274: LD_VAR 0 13
19278: PPUSH
19279: LD_VAR 0 13
19283: PUSH
19284: LD_INT 1
19286: PLUS
19287: PPUSH
19288: LD_VAR 0 11
19292: PUSH
19293: LD_VAR 0 12
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PPUSH
19302: CALL_OW 2
19306: ST_TO_ADDR
// end ;
19307: GO 19215
19309: POP
19310: POP
19311: GO 19195
19313: POP
19314: POP
// if not list then
19315: LD_VAR 0 13
19319: NOT
19320: IFFALSE 19324
// exit ;
19322: GO 19568
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19324: LD_ADDR_VAR 0 13
19328: PUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: LD_VAR 0 13
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: CALL 28181 0 4
19349: ST_TO_ADDR
// ComStop ( flame ) ;
19350: LD_VAR 0 1
19354: PPUSH
19355: CALL_OW 141
// for i in list do
19359: LD_ADDR_VAR 0 6
19363: PUSH
19364: LD_VAR 0 13
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19401
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19372: LD_VAR 0 1
19376: PPUSH
19377: LD_VAR 0 6
19381: PUSH
19382: LD_INT 1
19384: ARRAY
19385: PPUSH
19386: LD_VAR 0 6
19390: PUSH
19391: LD_INT 2
19393: ARRAY
19394: PPUSH
19395: CALL_OW 176
19399: GO 19369
19401: POP
19402: POP
// repeat wait ( 0 0$1 ) ;
19403: LD_INT 35
19405: PPUSH
19406: CALL_OW 67
// task := GetTaskList ( flame ) ;
19410: LD_ADDR_VAR 0 14
19414: PUSH
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 437
19424: ST_TO_ADDR
// if not task then
19425: LD_VAR 0 14
19429: NOT
19430: IFFALSE 19434
// exit ;
19432: GO 19568
// if task [ 1 ] [ 1 ] <> | then
19434: LD_VAR 0 14
19438: PUSH
19439: LD_INT 1
19441: ARRAY
19442: PUSH
19443: LD_INT 1
19445: ARRAY
19446: PUSH
19447: LD_STRING |
19449: NONEQUAL
19450: IFFALSE 19454
// exit ;
19452: GO 19568
// _x := task [ 1 ] [ 2 ] ;
19454: LD_ADDR_VAR 0 11
19458: PUSH
19459: LD_VAR 0 14
19463: PUSH
19464: LD_INT 1
19466: ARRAY
19467: PUSH
19468: LD_INT 2
19470: ARRAY
19471: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19472: LD_ADDR_VAR 0 12
19476: PUSH
19477: LD_VAR 0 14
19481: PUSH
19482: LD_INT 1
19484: ARRAY
19485: PUSH
19486: LD_INT 3
19488: ARRAY
19489: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19490: LD_VAR 0 11
19494: PPUSH
19495: LD_VAR 0 12
19499: PPUSH
19500: CALL_OW 351
19504: NOT
19505: PUSH
19506: LD_VAR 0 11
19510: PPUSH
19511: LD_VAR 0 12
19515: PPUSH
19516: CALL_OW 554
19520: NOT
19521: OR
19522: IFFALSE 19556
// begin task := Delete ( task , 1 ) ;
19524: LD_ADDR_VAR 0 14
19528: PUSH
19529: LD_VAR 0 14
19533: PPUSH
19534: LD_INT 1
19536: PPUSH
19537: CALL_OW 3
19541: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19542: LD_VAR 0 1
19546: PPUSH
19547: LD_VAR 0 14
19551: PPUSH
19552: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19556: LD_VAR 0 1
19560: PPUSH
19561: CALL_OW 314
19565: NOT
19566: IFFALSE 19403
// end ;
19568: LD_VAR 0 5
19572: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19573: LD_EXP 69
19577: NOT
19578: IFFALSE 19628
19580: GO 19582
19582: DISABLE
// begin initHack := true ;
19583: LD_ADDR_EXP 69
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// hackTanks := [ ] ;
19591: LD_ADDR_EXP 70
19595: PUSH
19596: EMPTY
19597: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19598: LD_ADDR_EXP 71
19602: PUSH
19603: EMPTY
19604: ST_TO_ADDR
// hackLimit := 3 ;
19605: LD_ADDR_EXP 72
19609: PUSH
19610: LD_INT 3
19612: ST_TO_ADDR
// hackDist := 12 ;
19613: LD_ADDR_EXP 73
19617: PUSH
19618: LD_INT 12
19620: ST_TO_ADDR
// hackCounter := [ ] ;
19621: LD_ADDR_EXP 74
19625: PUSH
19626: EMPTY
19627: ST_TO_ADDR
// end ;
19628: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19629: LD_EXP 69
19633: PUSH
19634: LD_INT 34
19636: PUSH
19637: LD_INT 99
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PPUSH
19644: CALL_OW 69
19648: AND
19649: IFFALSE 19902
19651: GO 19653
19653: DISABLE
19654: LD_INT 0
19656: PPUSH
19657: PPUSH
// begin enable ;
19658: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19659: LD_ADDR_VAR 0 1
19663: PUSH
19664: LD_INT 34
19666: PUSH
19667: LD_INT 99
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 69
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19900
// begin if not i in hackTanks then
19682: LD_VAR 0 1
19686: PUSH
19687: LD_EXP 70
19691: IN
19692: NOT
19693: IFFALSE 19776
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19695: LD_ADDR_EXP 70
19699: PUSH
19700: LD_EXP 70
19704: PPUSH
19705: LD_EXP 70
19709: PUSH
19710: LD_INT 1
19712: PLUS
19713: PPUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 1
19723: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19724: LD_ADDR_EXP 71
19728: PUSH
19729: LD_EXP 71
19733: PPUSH
19734: LD_EXP 71
19738: PUSH
19739: LD_INT 1
19741: PLUS
19742: PPUSH
19743: EMPTY
19744: PPUSH
19745: CALL_OW 1
19749: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19750: LD_ADDR_EXP 74
19754: PUSH
19755: LD_EXP 74
19759: PPUSH
19760: LD_EXP 74
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: PPUSH
19769: EMPTY
19770: PPUSH
19771: CALL_OW 1
19775: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 302
19785: NOT
19786: IFFALSE 19799
// begin HackUnlinkAll ( i ) ;
19788: LD_VAR 0 1
19792: PPUSH
19793: CALL 19905 0 1
// continue ;
19797: GO 19679
// end ; HackCheckCapturedStatus ( i ) ;
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL 20348 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19808: LD_ADDR_VAR 0 2
19812: PUSH
19813: LD_INT 81
19815: PUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 255
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 33
19832: PUSH
19833: LD_INT 3
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 91
19842: PUSH
19843: LD_VAR 0 1
19847: PUSH
19848: LD_EXP 73
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 50
19860: PUSH
19861: EMPTY
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: ST_TO_ADDR
// if not tmp then
19875: LD_VAR 0 2
19879: NOT
19880: IFFALSE 19884
// continue ;
19882: GO 19679
// HackLink ( i , tmp ) ;
19884: LD_VAR 0 1
19888: PPUSH
19889: LD_VAR 0 2
19893: PPUSH
19894: CALL 20041 0 2
// end ;
19898: GO 19679
19900: POP
19901: POP
// end ;
19902: PPOPN 2
19904: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19905: LD_INT 0
19907: PPUSH
19908: PPUSH
19909: PPUSH
// if not hack in hackTanks then
19910: LD_VAR 0 1
19914: PUSH
19915: LD_EXP 70
19919: IN
19920: NOT
19921: IFFALSE 19925
// exit ;
19923: GO 20036
// index := GetElementIndex ( hackTanks , hack ) ;
19925: LD_ADDR_VAR 0 4
19929: PUSH
19930: LD_EXP 70
19934: PPUSH
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL 27478 0 2
19944: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19945: LD_EXP 71
19949: PUSH
19950: LD_VAR 0 4
19954: ARRAY
19955: IFFALSE 20036
// begin for i in hackTanksCaptured [ index ] do
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_EXP 71
19966: PUSH
19967: LD_VAR 0 4
19971: ARRAY
19972: PUSH
19973: FOR_IN
19974: IFFALSE 20000
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19976: LD_VAR 0 3
19980: PUSH
19981: LD_INT 1
19983: ARRAY
19984: PPUSH
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 2
19992: ARRAY
19993: PPUSH
19994: CALL_OW 235
19998: GO 19973
20000: POP
20001: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20002: LD_ADDR_EXP 71
20006: PUSH
20007: LD_EXP 71
20011: PPUSH
20012: LD_VAR 0 4
20016: PPUSH
20017: EMPTY
20018: PPUSH
20019: CALL_OW 1
20023: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20024: LD_VAR 0 1
20028: PPUSH
20029: LD_INT 0
20031: PPUSH
20032: CALL_OW 505
// end ; end ;
20036: LD_VAR 0 2
20040: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20041: LD_INT 0
20043: PPUSH
20044: PPUSH
20045: PPUSH
// if not hack in hackTanks or not vehicles then
20046: LD_VAR 0 1
20050: PUSH
20051: LD_EXP 70
20055: IN
20056: NOT
20057: PUSH
20058: LD_VAR 0 2
20062: NOT
20063: OR
20064: IFFALSE 20068
// exit ;
20066: GO 20343
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20068: LD_ADDR_VAR 0 2
20072: PUSH
20073: LD_VAR 0 1
20077: PPUSH
20078: LD_VAR 0 2
20082: PPUSH
20083: LD_INT 1
20085: PPUSH
20086: LD_INT 1
20088: PPUSH
20089: CALL 28128 0 4
20093: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20094: LD_ADDR_VAR 0 5
20098: PUSH
20099: LD_EXP 70
20103: PPUSH
20104: LD_VAR 0 1
20108: PPUSH
20109: CALL 27478 0 2
20113: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20114: LD_EXP 71
20118: PUSH
20119: LD_VAR 0 5
20123: ARRAY
20124: PUSH
20125: LD_EXP 72
20129: LESS
20130: IFFALSE 20319
// begin for i := 1 to vehicles do
20132: LD_ADDR_VAR 0 4
20136: PUSH
20137: DOUBLE
20138: LD_INT 1
20140: DEC
20141: ST_TO_ADDR
20142: LD_VAR 0 2
20146: PUSH
20147: FOR_TO
20148: IFFALSE 20317
// begin if hackTanksCaptured [ index ] = hackLimit then
20150: LD_EXP 71
20154: PUSH
20155: LD_VAR 0 5
20159: ARRAY
20160: PUSH
20161: LD_EXP 72
20165: EQUAL
20166: IFFALSE 20170
// break ;
20168: GO 20317
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20170: LD_ADDR_EXP 74
20174: PUSH
20175: LD_EXP 74
20179: PPUSH
20180: LD_VAR 0 5
20184: PPUSH
20185: LD_EXP 74
20189: PUSH
20190: LD_VAR 0 5
20194: ARRAY
20195: PUSH
20196: LD_INT 1
20198: PLUS
20199: PPUSH
20200: CALL_OW 1
20204: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20205: LD_ADDR_EXP 71
20209: PUSH
20210: LD_EXP 71
20214: PPUSH
20215: LD_VAR 0 5
20219: PUSH
20220: LD_EXP 71
20224: PUSH
20225: LD_VAR 0 5
20229: ARRAY
20230: PUSH
20231: LD_INT 1
20233: PLUS
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: LD_VAR 0 2
20243: PUSH
20244: LD_VAR 0 4
20248: ARRAY
20249: PUSH
20250: LD_VAR 0 2
20254: PUSH
20255: LD_VAR 0 4
20259: ARRAY
20260: PPUSH
20261: CALL_OW 255
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PPUSH
20270: CALL 27693 0 3
20274: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20275: LD_VAR 0 2
20279: PUSH
20280: LD_VAR 0 4
20284: ARRAY
20285: PPUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 255
20295: PPUSH
20296: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20300: LD_VAR 0 2
20304: PUSH
20305: LD_VAR 0 4
20309: ARRAY
20310: PPUSH
20311: CALL_OW 141
// end ;
20315: GO 20147
20317: POP
20318: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20319: LD_VAR 0 1
20323: PPUSH
20324: LD_EXP 71
20328: PUSH
20329: LD_VAR 0 5
20333: ARRAY
20334: PUSH
20335: LD_INT 0
20337: PLUS
20338: PPUSH
20339: CALL_OW 505
// end ;
20343: LD_VAR 0 3
20347: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
// if not hack in hackTanks then
20354: LD_VAR 0 1
20358: PUSH
20359: LD_EXP 70
20363: IN
20364: NOT
20365: IFFALSE 20369
// exit ;
20367: GO 20609
// index := GetElementIndex ( hackTanks , hack ) ;
20369: LD_ADDR_VAR 0 4
20373: PUSH
20374: LD_EXP 70
20378: PPUSH
20379: LD_VAR 0 1
20383: PPUSH
20384: CALL 27478 0 2
20388: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20389: LD_ADDR_VAR 0 3
20393: PUSH
20394: DOUBLE
20395: LD_EXP 71
20399: PUSH
20400: LD_VAR 0 4
20404: ARRAY
20405: INC
20406: ST_TO_ADDR
20407: LD_INT 1
20409: PUSH
20410: FOR_DOWNTO
20411: IFFALSE 20583
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20413: LD_ADDR_VAR 0 5
20417: PUSH
20418: LD_EXP 71
20422: PUSH
20423: LD_VAR 0 4
20427: ARRAY
20428: PUSH
20429: LD_VAR 0 3
20433: ARRAY
20434: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20435: LD_VAR 0 5
20439: PUSH
20440: LD_INT 1
20442: ARRAY
20443: PPUSH
20444: CALL_OW 302
20448: NOT
20449: PUSH
20450: LD_VAR 0 5
20454: PUSH
20455: LD_INT 1
20457: ARRAY
20458: PPUSH
20459: CALL_OW 255
20463: PUSH
20464: LD_VAR 0 1
20468: PPUSH
20469: CALL_OW 255
20473: NONEQUAL
20474: OR
20475: IFFALSE 20581
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20477: LD_VAR 0 5
20481: PUSH
20482: LD_INT 1
20484: ARRAY
20485: PPUSH
20486: CALL_OW 305
20490: PUSH
20491: LD_VAR 0 5
20495: PUSH
20496: LD_INT 1
20498: ARRAY
20499: PPUSH
20500: CALL_OW 255
20504: PUSH
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 255
20514: EQUAL
20515: AND
20516: IFFALSE 20540
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20518: LD_VAR 0 5
20522: PUSH
20523: LD_INT 1
20525: ARRAY
20526: PPUSH
20527: LD_VAR 0 5
20531: PUSH
20532: LD_INT 2
20534: ARRAY
20535: PPUSH
20536: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20540: LD_ADDR_EXP 71
20544: PUSH
20545: LD_EXP 71
20549: PPUSH
20550: LD_VAR 0 4
20554: PPUSH
20555: LD_EXP 71
20559: PUSH
20560: LD_VAR 0 4
20564: ARRAY
20565: PPUSH
20566: LD_VAR 0 3
20570: PPUSH
20571: CALL_OW 3
20575: PPUSH
20576: CALL_OW 1
20580: ST_TO_ADDR
// end ; end ;
20581: GO 20410
20583: POP
20584: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20585: LD_VAR 0 1
20589: PPUSH
20590: LD_EXP 71
20594: PUSH
20595: LD_VAR 0 4
20599: ARRAY
20600: PUSH
20601: LD_INT 0
20603: PLUS
20604: PPUSH
20605: CALL_OW 505
// end ;
20609: LD_VAR 0 2
20613: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
// if not hack in hackTanks then
20620: LD_VAR 0 1
20624: PUSH
20625: LD_EXP 70
20629: IN
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20720
// index := GetElementIndex ( hackTanks , hack ) ;
20635: LD_ADDR_VAR 0 5
20639: PUSH
20640: LD_EXP 70
20644: PPUSH
20645: LD_VAR 0 1
20649: PPUSH
20650: CALL 27478 0 2
20654: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20655: LD_ADDR_VAR 0 4
20659: PUSH
20660: DOUBLE
20661: LD_INT 1
20663: DEC
20664: ST_TO_ADDR
20665: LD_EXP 71
20669: PUSH
20670: LD_VAR 0 5
20674: ARRAY
20675: PUSH
20676: FOR_TO
20677: IFFALSE 20718
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20679: LD_EXP 71
20683: PUSH
20684: LD_VAR 0 5
20688: ARRAY
20689: PUSH
20690: LD_VAR 0 4
20694: ARRAY
20695: PUSH
20696: LD_INT 1
20698: ARRAY
20699: PUSH
20700: LD_VAR 0 2
20704: EQUAL
20705: IFFALSE 20716
// KillUnit ( vehicle ) ;
20707: LD_VAR 0 2
20711: PPUSH
20712: CALL_OW 66
20716: GO 20676
20718: POP
20719: POP
// end ;
20720: LD_VAR 0 3
20724: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20725: LD_EXP 75
20729: NOT
20730: IFFALSE 20765
20732: GO 20734
20734: DISABLE
// begin initMiner := true ;
20735: LD_ADDR_EXP 75
20739: PUSH
20740: LD_INT 1
20742: ST_TO_ADDR
// minersList := [ ] ;
20743: LD_ADDR_EXP 76
20747: PUSH
20748: EMPTY
20749: ST_TO_ADDR
// minerMinesList := [ ] ;
20750: LD_ADDR_EXP 77
20754: PUSH
20755: EMPTY
20756: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20757: LD_ADDR_EXP 78
20761: PUSH
20762: LD_INT 5
20764: ST_TO_ADDR
// end ;
20765: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20766: LD_EXP 75
20770: PUSH
20771: LD_INT 34
20773: PUSH
20774: LD_INT 81
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: AND
20786: IFFALSE 21247
20788: GO 20790
20790: DISABLE
20791: LD_INT 0
20793: PPUSH
20794: PPUSH
20795: PPUSH
20796: PPUSH
// begin enable ;
20797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_INT 34
20805: PUSH
20806: LD_INT 81
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PPUSH
20813: CALL_OW 69
20817: PUSH
20818: FOR_IN
20819: IFFALSE 20891
// begin if not i in minersList then
20821: LD_VAR 0 1
20825: PUSH
20826: LD_EXP 76
20830: IN
20831: NOT
20832: IFFALSE 20889
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20834: LD_ADDR_EXP 76
20838: PUSH
20839: LD_EXP 76
20843: PPUSH
20844: LD_EXP 76
20848: PUSH
20849: LD_INT 1
20851: PLUS
20852: PPUSH
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 1
20862: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20863: LD_ADDR_EXP 77
20867: PUSH
20868: LD_EXP 77
20872: PPUSH
20873: LD_EXP 77
20877: PUSH
20878: LD_INT 1
20880: PLUS
20881: PPUSH
20882: EMPTY
20883: PPUSH
20884: CALL_OW 1
20888: ST_TO_ADDR
// end end ;
20889: GO 20818
20891: POP
20892: POP
// for i := minerMinesList downto 1 do
20893: LD_ADDR_VAR 0 1
20897: PUSH
20898: DOUBLE
20899: LD_EXP 77
20903: INC
20904: ST_TO_ADDR
20905: LD_INT 1
20907: PUSH
20908: FOR_DOWNTO
20909: IFFALSE 21245
// begin if IsLive ( minersList [ i ] ) then
20911: LD_EXP 76
20915: PUSH
20916: LD_VAR 0 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 300
20926: IFFALSE 20954
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20928: LD_EXP 76
20932: PUSH
20933: LD_VAR 0 1
20937: ARRAY
20938: PPUSH
20939: LD_EXP 77
20943: PUSH
20944: LD_VAR 0 1
20948: ARRAY
20949: PPUSH
20950: CALL_OW 505
// if not minerMinesList [ i ] then
20954: LD_EXP 77
20958: PUSH
20959: LD_VAR 0 1
20963: ARRAY
20964: NOT
20965: IFFALSE 20969
// continue ;
20967: GO 20908
// for j := minerMinesList [ i ] downto 1 do
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: DOUBLE
20975: LD_EXP 77
20979: PUSH
20980: LD_VAR 0 1
20984: ARRAY
20985: INC
20986: ST_TO_ADDR
20987: LD_INT 1
20989: PUSH
20990: FOR_DOWNTO
20991: IFFALSE 21241
// begin side := GetSide ( minersList [ i ] ) ;
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_EXP 76
21002: PUSH
21003: LD_VAR 0 1
21007: ARRAY
21008: PPUSH
21009: CALL_OW 255
21013: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21014: LD_ADDR_VAR 0 4
21018: PUSH
21019: LD_EXP 77
21023: PUSH
21024: LD_VAR 0 1
21028: ARRAY
21029: PUSH
21030: LD_VAR 0 2
21034: ARRAY
21035: PUSH
21036: LD_INT 1
21038: ARRAY
21039: PPUSH
21040: LD_EXP 77
21044: PUSH
21045: LD_VAR 0 1
21049: ARRAY
21050: PUSH
21051: LD_VAR 0 2
21055: ARRAY
21056: PUSH
21057: LD_INT 2
21059: ARRAY
21060: PPUSH
21061: CALL_OW 428
21065: ST_TO_ADDR
// if not tmp then
21066: LD_VAR 0 4
21070: NOT
21071: IFFALSE 21075
// continue ;
21073: GO 20990
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21075: LD_VAR 0 4
21079: PUSH
21080: LD_INT 81
21082: PUSH
21083: LD_VAR 0 3
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: IN
21097: PUSH
21098: LD_EXP 77
21102: PUSH
21103: LD_VAR 0 1
21107: ARRAY
21108: PUSH
21109: LD_VAR 0 2
21113: ARRAY
21114: PUSH
21115: LD_INT 1
21117: ARRAY
21118: PPUSH
21119: LD_EXP 77
21123: PUSH
21124: LD_VAR 0 1
21128: ARRAY
21129: PUSH
21130: LD_VAR 0 2
21134: ARRAY
21135: PUSH
21136: LD_INT 2
21138: ARRAY
21139: PPUSH
21140: CALL_OW 458
21144: AND
21145: IFFALSE 21239
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21147: LD_EXP 77
21151: PUSH
21152: LD_VAR 0 1
21156: ARRAY
21157: PUSH
21158: LD_VAR 0 2
21162: ARRAY
21163: PUSH
21164: LD_INT 1
21166: ARRAY
21167: PPUSH
21168: LD_EXP 77
21172: PUSH
21173: LD_VAR 0 1
21177: ARRAY
21178: PUSH
21179: LD_VAR 0 2
21183: ARRAY
21184: PUSH
21185: LD_INT 2
21187: ARRAY
21188: PPUSH
21189: LD_VAR 0 3
21193: PPUSH
21194: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21198: LD_ADDR_EXP 77
21202: PUSH
21203: LD_EXP 77
21207: PPUSH
21208: LD_VAR 0 1
21212: PPUSH
21213: LD_EXP 77
21217: PUSH
21218: LD_VAR 0 1
21222: ARRAY
21223: PPUSH
21224: LD_VAR 0 2
21228: PPUSH
21229: CALL_OW 3
21233: PPUSH
21234: CALL_OW 1
21238: ST_TO_ADDR
// end ; end ;
21239: GO 20990
21241: POP
21242: POP
// end ;
21243: GO 20908
21245: POP
21246: POP
// end ;
21247: PPOPN 4
21249: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21250: LD_INT 0
21252: PPUSH
21253: PPUSH
// result := false ;
21254: LD_ADDR_VAR 0 4
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21262: LD_VAR 0 1
21266: PPUSH
21267: CALL_OW 264
21271: PUSH
21272: LD_INT 81
21274: EQUAL
21275: NOT
21276: IFFALSE 21280
// exit ;
21278: GO 21520
// index := GetElementIndex ( minersList , unit ) ;
21280: LD_ADDR_VAR 0 5
21284: PUSH
21285: LD_EXP 76
21289: PPUSH
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL 27478 0 2
21299: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21300: LD_EXP 77
21304: PUSH
21305: LD_VAR 0 5
21309: ARRAY
21310: PUSH
21311: LD_EXP 78
21315: GREATEREQUAL
21316: IFFALSE 21320
// exit ;
21318: GO 21520
// ComMoveXY ( unit , x , y ) ;
21320: LD_VAR 0 1
21324: PPUSH
21325: LD_VAR 0 2
21329: PPUSH
21330: LD_VAR 0 3
21334: PPUSH
21335: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21339: LD_INT 35
21341: PPUSH
21342: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21346: LD_VAR 0 1
21350: PPUSH
21351: LD_VAR 0 2
21355: PPUSH
21356: LD_VAR 0 3
21360: PPUSH
21361: CALL 59219 0 3
21365: NOT
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL_OW 314
21376: AND
21377: IFFALSE 21381
// exit ;
21379: GO 21520
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21381: LD_VAR 0 2
21385: PPUSH
21386: LD_VAR 0 3
21390: PPUSH
21391: CALL_OW 428
21395: PUSH
21396: LD_VAR 0 1
21400: EQUAL
21401: PUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 314
21411: NOT
21412: AND
21413: IFFALSE 21339
// PlaySoundXY ( x , y , PlantMine ) ;
21415: LD_VAR 0 2
21419: PPUSH
21420: LD_VAR 0 3
21424: PPUSH
21425: LD_STRING PlantMine
21427: PPUSH
21428: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21432: LD_VAR 0 2
21436: PPUSH
21437: LD_VAR 0 3
21441: PPUSH
21442: LD_VAR 0 1
21446: PPUSH
21447: CALL_OW 255
21451: PPUSH
21452: LD_INT 0
21454: PPUSH
21455: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21459: LD_ADDR_EXP 77
21463: PUSH
21464: LD_EXP 77
21468: PPUSH
21469: LD_VAR 0 5
21473: PUSH
21474: LD_EXP 77
21478: PUSH
21479: LD_VAR 0 5
21483: ARRAY
21484: PUSH
21485: LD_INT 1
21487: PLUS
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: LD_VAR 0 2
21497: PUSH
21498: LD_VAR 0 3
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PPUSH
21507: CALL 27693 0 3
21511: ST_TO_ADDR
// result := true ;
21512: LD_ADDR_VAR 0 4
21516: PUSH
21517: LD_INT 1
21519: ST_TO_ADDR
// end ;
21520: LD_VAR 0 4
21524: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21525: LD_INT 0
21527: PPUSH
21528: PPUSH
21529: PPUSH
// if not unit in minersList then
21530: LD_VAR 0 1
21534: PUSH
21535: LD_EXP 76
21539: IN
21540: NOT
21541: IFFALSE 21545
// exit ;
21543: GO 21937
// index := GetElementIndex ( minersList , unit ) ;
21545: LD_ADDR_VAR 0 6
21549: PUSH
21550: LD_EXP 76
21554: PPUSH
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL 27478 0 2
21564: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21565: LD_ADDR_VAR 0 5
21569: PUSH
21570: DOUBLE
21571: LD_EXP 77
21575: PUSH
21576: LD_VAR 0 6
21580: ARRAY
21581: INC
21582: ST_TO_ADDR
21583: LD_INT 1
21585: PUSH
21586: FOR_DOWNTO
21587: IFFALSE 21748
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21589: LD_EXP 77
21593: PUSH
21594: LD_VAR 0 6
21598: ARRAY
21599: PUSH
21600: LD_VAR 0 5
21604: ARRAY
21605: PUSH
21606: LD_INT 1
21608: ARRAY
21609: PUSH
21610: LD_VAR 0 2
21614: EQUAL
21615: PUSH
21616: LD_EXP 77
21620: PUSH
21621: LD_VAR 0 6
21625: ARRAY
21626: PUSH
21627: LD_VAR 0 5
21631: ARRAY
21632: PUSH
21633: LD_INT 2
21635: ARRAY
21636: PUSH
21637: LD_VAR 0 3
21641: EQUAL
21642: AND
21643: IFFALSE 21746
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21645: LD_EXP 77
21649: PUSH
21650: LD_VAR 0 6
21654: ARRAY
21655: PUSH
21656: LD_VAR 0 5
21660: ARRAY
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PPUSH
21666: LD_EXP 77
21670: PUSH
21671: LD_VAR 0 6
21675: ARRAY
21676: PUSH
21677: LD_VAR 0 5
21681: ARRAY
21682: PUSH
21683: LD_INT 2
21685: ARRAY
21686: PPUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 255
21696: PPUSH
21697: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21701: LD_ADDR_EXP 77
21705: PUSH
21706: LD_EXP 77
21710: PPUSH
21711: LD_VAR 0 6
21715: PPUSH
21716: LD_EXP 77
21720: PUSH
21721: LD_VAR 0 6
21725: ARRAY
21726: PPUSH
21727: LD_VAR 0 5
21731: PPUSH
21732: CALL_OW 3
21736: PPUSH
21737: CALL_OW 1
21741: ST_TO_ADDR
// exit ;
21742: POP
21743: POP
21744: GO 21937
// end ; end ;
21746: GO 21586
21748: POP
21749: POP
// for i := minerMinesList [ index ] downto 1 do
21750: LD_ADDR_VAR 0 5
21754: PUSH
21755: DOUBLE
21756: LD_EXP 77
21760: PUSH
21761: LD_VAR 0 6
21765: ARRAY
21766: INC
21767: ST_TO_ADDR
21768: LD_INT 1
21770: PUSH
21771: FOR_DOWNTO
21772: IFFALSE 21935
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21774: LD_EXP 77
21778: PUSH
21779: LD_VAR 0 6
21783: ARRAY
21784: PUSH
21785: LD_VAR 0 5
21789: ARRAY
21790: PUSH
21791: LD_INT 1
21793: ARRAY
21794: PPUSH
21795: LD_EXP 77
21799: PUSH
21800: LD_VAR 0 6
21804: ARRAY
21805: PUSH
21806: LD_VAR 0 5
21810: ARRAY
21811: PUSH
21812: LD_INT 2
21814: ARRAY
21815: PPUSH
21816: LD_VAR 0 2
21820: PPUSH
21821: LD_VAR 0 3
21825: PPUSH
21826: CALL_OW 298
21830: PUSH
21831: LD_INT 6
21833: LESS
21834: IFFALSE 21933
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21836: LD_EXP 77
21840: PUSH
21841: LD_VAR 0 6
21845: ARRAY
21846: PUSH
21847: LD_VAR 0 5
21851: ARRAY
21852: PUSH
21853: LD_INT 1
21855: ARRAY
21856: PPUSH
21857: LD_EXP 77
21861: PUSH
21862: LD_VAR 0 6
21866: ARRAY
21867: PUSH
21868: LD_VAR 0 5
21872: ARRAY
21873: PUSH
21874: LD_INT 2
21876: ARRAY
21877: PPUSH
21878: LD_VAR 0 1
21882: PPUSH
21883: CALL_OW 255
21887: PPUSH
21888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21892: LD_ADDR_EXP 77
21896: PUSH
21897: LD_EXP 77
21901: PPUSH
21902: LD_VAR 0 6
21906: PPUSH
21907: LD_EXP 77
21911: PUSH
21912: LD_VAR 0 6
21916: ARRAY
21917: PPUSH
21918: LD_VAR 0 5
21922: PPUSH
21923: CALL_OW 3
21927: PPUSH
21928: CALL_OW 1
21932: ST_TO_ADDR
// end ; end ;
21933: GO 21771
21935: POP
21936: POP
// end ;
21937: LD_VAR 0 4
21941: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL_OW 264
21962: PUSH
21963: LD_INT 81
21965: EQUAL
21966: NOT
21967: PUSH
21968: LD_VAR 0 1
21972: PUSH
21973: LD_EXP 76
21977: IN
21978: NOT
21979: OR
21980: IFFALSE 21984
// exit ;
21982: GO 22306
// index := GetElementIndex ( minersList , unit ) ;
21984: LD_ADDR_VAR 0 6
21988: PUSH
21989: LD_EXP 76
21993: PPUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL 27478 0 2
22003: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22004: LD_ADDR_VAR 0 8
22008: PUSH
22009: LD_EXP 78
22013: PUSH
22014: LD_EXP 77
22018: PUSH
22019: LD_VAR 0 6
22023: ARRAY
22024: MINUS
22025: ST_TO_ADDR
// if not minesFreeAmount then
22026: LD_VAR 0 8
22030: NOT
22031: IFFALSE 22035
// exit ;
22033: GO 22306
// tmp := [ ] ;
22035: LD_ADDR_VAR 0 7
22039: PUSH
22040: EMPTY
22041: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22042: LD_ADDR_VAR 0 5
22046: PUSH
22047: DOUBLE
22048: LD_INT 1
22050: DEC
22051: ST_TO_ADDR
22052: LD_VAR 0 8
22056: PUSH
22057: FOR_TO
22058: IFFALSE 22253
// begin _d := rand ( 0 , 5 ) ;
22060: LD_ADDR_VAR 0 11
22064: PUSH
22065: LD_INT 0
22067: PPUSH
22068: LD_INT 5
22070: PPUSH
22071: CALL_OW 12
22075: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22076: LD_ADDR_VAR 0 12
22080: PUSH
22081: LD_INT 2
22083: PPUSH
22084: LD_INT 6
22086: PPUSH
22087: CALL_OW 12
22091: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22092: LD_ADDR_VAR 0 9
22096: PUSH
22097: LD_VAR 0 2
22101: PPUSH
22102: LD_VAR 0 11
22106: PPUSH
22107: LD_VAR 0 12
22111: PPUSH
22112: CALL_OW 272
22116: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22117: LD_ADDR_VAR 0 10
22121: PUSH
22122: LD_VAR 0 3
22126: PPUSH
22127: LD_VAR 0 11
22131: PPUSH
22132: LD_VAR 0 12
22136: PPUSH
22137: CALL_OW 273
22141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22142: LD_VAR 0 9
22146: PPUSH
22147: LD_VAR 0 10
22151: PPUSH
22152: CALL_OW 488
22156: PUSH
22157: LD_VAR 0 9
22161: PUSH
22162: LD_VAR 0 10
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_VAR 0 7
22175: IN
22176: NOT
22177: AND
22178: PUSH
22179: LD_VAR 0 9
22183: PPUSH
22184: LD_VAR 0 10
22188: PPUSH
22189: CALL_OW 458
22193: NOT
22194: AND
22195: IFFALSE 22237
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22197: LD_ADDR_VAR 0 7
22201: PUSH
22202: LD_VAR 0 7
22206: PPUSH
22207: LD_VAR 0 7
22211: PUSH
22212: LD_INT 1
22214: PLUS
22215: PPUSH
22216: LD_VAR 0 9
22220: PUSH
22221: LD_VAR 0 10
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PPUSH
22230: CALL_OW 1
22234: ST_TO_ADDR
22235: GO 22251
// i := i - 1 ;
22237: LD_ADDR_VAR 0 5
22241: PUSH
22242: LD_VAR 0 5
22246: PUSH
22247: LD_INT 1
22249: MINUS
22250: ST_TO_ADDR
// end ;
22251: GO 22057
22253: POP
22254: POP
// for i in tmp do
22255: LD_ADDR_VAR 0 5
22259: PUSH
22260: LD_VAR 0 7
22264: PUSH
22265: FOR_IN
22266: IFFALSE 22304
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22268: LD_VAR 0 1
22272: PPUSH
22273: LD_VAR 0 5
22277: PUSH
22278: LD_INT 1
22280: ARRAY
22281: PPUSH
22282: LD_VAR 0 5
22286: PUSH
22287: LD_INT 2
22289: ARRAY
22290: PPUSH
22291: CALL 21250 0 3
22295: NOT
22296: IFFALSE 22302
// exit ;
22298: POP
22299: POP
22300: GO 22306
22302: GO 22265
22304: POP
22305: POP
// end ;
22306: LD_VAR 0 4
22310: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22311: LD_INT 0
22313: PPUSH
22314: PPUSH
22315: PPUSH
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
// if not GetClass ( unit ) = class_sniper then
22320: LD_VAR 0 1
22324: PPUSH
22325: CALL_OW 257
22329: PUSH
22330: LD_INT 5
22332: EQUAL
22333: NOT
22334: IFFALSE 22338
// exit ;
22336: GO 22726
// dist := 8 ;
22338: LD_ADDR_VAR 0 5
22342: PUSH
22343: LD_INT 8
22345: ST_TO_ADDR
// viewRange := 12 ;
22346: LD_ADDR_VAR 0 7
22350: PUSH
22351: LD_INT 12
22353: ST_TO_ADDR
// side := GetSide ( unit ) ;
22354: LD_ADDR_VAR 0 6
22358: PUSH
22359: LD_VAR 0 1
22363: PPUSH
22364: CALL_OW 255
22368: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22369: LD_INT 61
22371: PPUSH
22372: LD_VAR 0 6
22376: PPUSH
22377: CALL_OW 321
22381: PUSH
22382: LD_INT 2
22384: EQUAL
22385: IFFALSE 22395
// viewRange := 16 ;
22387: LD_ADDR_VAR 0 7
22391: PUSH
22392: LD_INT 16
22394: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_VAR 0 2
22404: PPUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 297
22414: PUSH
22415: LD_VAR 0 5
22419: GREATER
22420: IFFALSE 22499
// begin ComMoveXY ( unit , x , y ) ;
22422: LD_VAR 0 1
22426: PPUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: LD_VAR 0 3
22436: PPUSH
22437: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22441: LD_INT 35
22443: PPUSH
22444: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22448: LD_VAR 0 1
22452: PPUSH
22453: LD_VAR 0 2
22457: PPUSH
22458: LD_VAR 0 3
22462: PPUSH
22463: CALL 59219 0 3
22467: NOT
22468: IFFALSE 22472
// exit ;
22470: GO 22726
// until GetDistUnitXY ( unit , x , y ) < dist ;
22472: LD_VAR 0 1
22476: PPUSH
22477: LD_VAR 0 2
22481: PPUSH
22482: LD_VAR 0 3
22486: PPUSH
22487: CALL_OW 297
22491: PUSH
22492: LD_VAR 0 5
22496: LESS
22497: IFFALSE 22441
// end ; ComTurnXY ( unit , x , y ) ;
22499: LD_VAR 0 1
22503: PPUSH
22504: LD_VAR 0 2
22508: PPUSH
22509: LD_VAR 0 3
22513: PPUSH
22514: CALL_OW 118
// wait ( 5 ) ;
22518: LD_INT 5
22520: PPUSH
22521: CALL_OW 67
// _d := GetDir ( unit ) ;
22525: LD_ADDR_VAR 0 10
22529: PUSH
22530: LD_VAR 0 1
22534: PPUSH
22535: CALL_OW 254
22539: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22540: LD_ADDR_VAR 0 8
22544: PUSH
22545: LD_VAR 0 1
22549: PPUSH
22550: CALL_OW 250
22554: PPUSH
22555: LD_VAR 0 10
22559: PPUSH
22560: LD_VAR 0 5
22564: PPUSH
22565: CALL_OW 272
22569: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22570: LD_ADDR_VAR 0 9
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 251
22584: PPUSH
22585: LD_VAR 0 10
22589: PPUSH
22590: LD_VAR 0 5
22594: PPUSH
22595: CALL_OW 273
22599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22600: LD_VAR 0 8
22604: PPUSH
22605: LD_VAR 0 9
22609: PPUSH
22610: CALL_OW 488
22614: NOT
22615: IFFALSE 22619
// exit ;
22617: GO 22726
// ComAnimCustom ( unit , 1 ) ;
22619: LD_VAR 0 1
22623: PPUSH
22624: LD_INT 1
22626: PPUSH
22627: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22631: LD_VAR 0 8
22635: PPUSH
22636: LD_VAR 0 9
22640: PPUSH
22641: LD_VAR 0 6
22645: PPUSH
22646: LD_VAR 0 7
22650: PPUSH
22651: CALL_OW 330
// repeat wait ( 1 ) ;
22655: LD_INT 1
22657: PPUSH
22658: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22662: LD_VAR 0 1
22666: PPUSH
22667: CALL_OW 316
22671: PUSH
22672: LD_VAR 0 1
22676: PPUSH
22677: CALL_OW 314
22681: OR
22682: PUSH
22683: LD_VAR 0 1
22687: PPUSH
22688: CALL_OW 302
22692: NOT
22693: OR
22694: PUSH
22695: LD_VAR 0 1
22699: PPUSH
22700: CALL_OW 301
22704: OR
22705: IFFALSE 22655
// RemoveSeeing ( _x , _y , side ) ;
22707: LD_VAR 0 8
22711: PPUSH
22712: LD_VAR 0 9
22716: PPUSH
22717: LD_VAR 0 6
22721: PPUSH
22722: CALL_OW 331
// end ; end_of_file
22726: LD_VAR 0 4
22730: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22731: LD_INT 0
22733: PPUSH
22734: PPUSH
// if exist_mode then
22735: LD_VAR 0 2
22739: IFFALSE 22764
// unit := CreateCharacter ( prefix & ident ) else
22741: LD_ADDR_VAR 0 5
22745: PUSH
22746: LD_VAR 0 3
22750: PUSH
22751: LD_VAR 0 1
22755: STR
22756: PPUSH
22757: CALL_OW 34
22761: ST_TO_ADDR
22762: GO 22779
// unit := NewCharacter ( ident ) ;
22764: LD_ADDR_VAR 0 5
22768: PUSH
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 25
22778: ST_TO_ADDR
// result := unit ;
22779: LD_ADDR_VAR 0 4
22783: PUSH
22784: LD_VAR 0 5
22788: ST_TO_ADDR
// end ;
22789: LD_VAR 0 4
22793: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22794: LD_INT 0
22796: PPUSH
22797: PPUSH
// if not side or not nation then
22798: LD_VAR 0 1
22802: NOT
22803: PUSH
22804: LD_VAR 0 2
22808: NOT
22809: OR
22810: IFFALSE 22814
// exit ;
22812: GO 23582
// case nation of nation_american :
22814: LD_VAR 0 2
22818: PUSH
22819: LD_INT 1
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 23041
22827: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_INT 35
22835: PUSH
22836: LD_INT 45
22838: PUSH
22839: LD_INT 46
22841: PUSH
22842: LD_INT 47
22844: PUSH
22845: LD_INT 82
22847: PUSH
22848: LD_INT 83
22850: PUSH
22851: LD_INT 84
22853: PUSH
22854: LD_INT 85
22856: PUSH
22857: LD_INT 86
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 6
22868: PUSH
22869: LD_INT 15
22871: PUSH
22872: LD_INT 16
22874: PUSH
22875: LD_INT 7
22877: PUSH
22878: LD_INT 12
22880: PUSH
22881: LD_INT 13
22883: PUSH
22884: LD_INT 10
22886: PUSH
22887: LD_INT 14
22889: PUSH
22890: LD_INT 20
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 22
22898: PUSH
22899: LD_INT 25
22901: PUSH
22902: LD_INT 32
22904: PUSH
22905: LD_INT 27
22907: PUSH
22908: LD_INT 36
22910: PUSH
22911: LD_INT 69
22913: PUSH
22914: LD_INT 39
22916: PUSH
22917: LD_INT 34
22919: PUSH
22920: LD_INT 40
22922: PUSH
22923: LD_INT 48
22925: PUSH
22926: LD_INT 49
22928: PUSH
22929: LD_INT 50
22931: PUSH
22932: LD_INT 51
22934: PUSH
22935: LD_INT 52
22937: PUSH
22938: LD_INT 53
22940: PUSH
22941: LD_INT 54
22943: PUSH
22944: LD_INT 55
22946: PUSH
22947: LD_INT 56
22949: PUSH
22950: LD_INT 57
22952: PUSH
22953: LD_INT 58
22955: PUSH
22956: LD_INT 59
22958: PUSH
22959: LD_INT 60
22961: PUSH
22962: LD_INT 61
22964: PUSH
22965: LD_INT 62
22967: PUSH
22968: LD_INT 80
22970: PUSH
22971: LD_INT 82
22973: PUSH
22974: LD_INT 83
22976: PUSH
22977: LD_INT 84
22979: PUSH
22980: LD_INT 85
22982: PUSH
22983: LD_INT 86
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: ST_TO_ADDR
23039: GO 23506
23041: LD_INT 2
23043: DOUBLE
23044: EQUAL
23045: IFTRUE 23049
23047: GO 23275
23049: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23050: LD_ADDR_VAR 0 4
23054: PUSH
23055: LD_INT 35
23057: PUSH
23058: LD_INT 45
23060: PUSH
23061: LD_INT 46
23063: PUSH
23064: LD_INT 47
23066: PUSH
23067: LD_INT 82
23069: PUSH
23070: LD_INT 83
23072: PUSH
23073: LD_INT 84
23075: PUSH
23076: LD_INT 85
23078: PUSH
23079: LD_INT 87
23081: PUSH
23082: LD_INT 70
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 11
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 4
23096: PUSH
23097: LD_INT 5
23099: PUSH
23100: LD_INT 6
23102: PUSH
23103: LD_INT 15
23105: PUSH
23106: LD_INT 18
23108: PUSH
23109: LD_INT 7
23111: PUSH
23112: LD_INT 17
23114: PUSH
23115: LD_INT 8
23117: PUSH
23118: LD_INT 20
23120: PUSH
23121: LD_INT 21
23123: PUSH
23124: LD_INT 22
23126: PUSH
23127: LD_INT 72
23129: PUSH
23130: LD_INT 26
23132: PUSH
23133: LD_INT 69
23135: PUSH
23136: LD_INT 39
23138: PUSH
23139: LD_INT 40
23141: PUSH
23142: LD_INT 41
23144: PUSH
23145: LD_INT 42
23147: PUSH
23148: LD_INT 43
23150: PUSH
23151: LD_INT 48
23153: PUSH
23154: LD_INT 49
23156: PUSH
23157: LD_INT 50
23159: PUSH
23160: LD_INT 51
23162: PUSH
23163: LD_INT 52
23165: PUSH
23166: LD_INT 53
23168: PUSH
23169: LD_INT 54
23171: PUSH
23172: LD_INT 55
23174: PUSH
23175: LD_INT 56
23177: PUSH
23178: LD_INT 60
23180: PUSH
23181: LD_INT 61
23183: PUSH
23184: LD_INT 62
23186: PUSH
23187: LD_INT 66
23189: PUSH
23190: LD_INT 67
23192: PUSH
23193: LD_INT 68
23195: PUSH
23196: LD_INT 81
23198: PUSH
23199: LD_INT 82
23201: PUSH
23202: LD_INT 83
23204: PUSH
23205: LD_INT 84
23207: PUSH
23208: LD_INT 85
23210: PUSH
23211: LD_INT 87
23213: PUSH
23214: LD_INT 88
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: ST_TO_ADDR
23273: GO 23506
23275: LD_INT 3
23277: DOUBLE
23278: EQUAL
23279: IFTRUE 23283
23281: GO 23505
23283: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23284: LD_ADDR_VAR 0 4
23288: PUSH
23289: LD_INT 46
23291: PUSH
23292: LD_INT 47
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 82
23303: PUSH
23304: LD_INT 83
23306: PUSH
23307: LD_INT 84
23309: PUSH
23310: LD_INT 85
23312: PUSH
23313: LD_INT 86
23315: PUSH
23316: LD_INT 11
23318: PUSH
23319: LD_INT 9
23321: PUSH
23322: LD_INT 20
23324: PUSH
23325: LD_INT 19
23327: PUSH
23328: LD_INT 21
23330: PUSH
23331: LD_INT 24
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: LD_INT 25
23339: PUSH
23340: LD_INT 28
23342: PUSH
23343: LD_INT 29
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 37
23354: PUSH
23355: LD_INT 38
23357: PUSH
23358: LD_INT 32
23360: PUSH
23361: LD_INT 27
23363: PUSH
23364: LD_INT 33
23366: PUSH
23367: LD_INT 69
23369: PUSH
23370: LD_INT 39
23372: PUSH
23373: LD_INT 34
23375: PUSH
23376: LD_INT 40
23378: PUSH
23379: LD_INT 71
23381: PUSH
23382: LD_INT 23
23384: PUSH
23385: LD_INT 44
23387: PUSH
23388: LD_INT 48
23390: PUSH
23391: LD_INT 49
23393: PUSH
23394: LD_INT 50
23396: PUSH
23397: LD_INT 51
23399: PUSH
23400: LD_INT 52
23402: PUSH
23403: LD_INT 53
23405: PUSH
23406: LD_INT 54
23408: PUSH
23409: LD_INT 55
23411: PUSH
23412: LD_INT 56
23414: PUSH
23415: LD_INT 57
23417: PUSH
23418: LD_INT 58
23420: PUSH
23421: LD_INT 59
23423: PUSH
23424: LD_INT 63
23426: PUSH
23427: LD_INT 64
23429: PUSH
23430: LD_INT 65
23432: PUSH
23433: LD_INT 82
23435: PUSH
23436: LD_INT 83
23438: PUSH
23439: LD_INT 84
23441: PUSH
23442: LD_INT 85
23444: PUSH
23445: LD_INT 86
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: ST_TO_ADDR
23503: GO 23506
23505: POP
// if state > - 1 and state < 3 then
23506: LD_VAR 0 3
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: GREATER
23515: PUSH
23516: LD_VAR 0 3
23520: PUSH
23521: LD_INT 3
23523: LESS
23524: AND
23525: IFFALSE 23582
// for i in result do
23527: LD_ADDR_VAR 0 5
23531: PUSH
23532: LD_VAR 0 4
23536: PUSH
23537: FOR_IN
23538: IFFALSE 23580
// if GetTech ( i , side ) <> state then
23540: LD_VAR 0 5
23544: PPUSH
23545: LD_VAR 0 1
23549: PPUSH
23550: CALL_OW 321
23554: PUSH
23555: LD_VAR 0 3
23559: NONEQUAL
23560: IFFALSE 23578
// result := result diff i ;
23562: LD_ADDR_VAR 0 4
23566: PUSH
23567: LD_VAR 0 4
23571: PUSH
23572: LD_VAR 0 5
23576: DIFF
23577: ST_TO_ADDR
23578: GO 23537
23580: POP
23581: POP
// end ;
23582: LD_VAR 0 4
23586: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23587: LD_INT 0
23589: PPUSH
23590: PPUSH
23591: PPUSH
// result := true ;
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_INT 1
23599: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23600: LD_ADDR_VAR 0 5
23604: PUSH
23605: LD_VAR 0 2
23609: PPUSH
23610: CALL_OW 480
23614: ST_TO_ADDR
// if not tmp then
23615: LD_VAR 0 5
23619: NOT
23620: IFFALSE 23624
// exit ;
23622: GO 23673
// for i in tmp do
23624: LD_ADDR_VAR 0 4
23628: PUSH
23629: LD_VAR 0 5
23633: PUSH
23634: FOR_IN
23635: IFFALSE 23671
// if GetTech ( i , side ) <> state_researched then
23637: LD_VAR 0 4
23641: PPUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 321
23651: PUSH
23652: LD_INT 2
23654: NONEQUAL
23655: IFFALSE 23669
// begin result := false ;
23657: LD_ADDR_VAR 0 3
23661: PUSH
23662: LD_INT 0
23664: ST_TO_ADDR
// exit ;
23665: POP
23666: POP
23667: GO 23673
// end ;
23669: GO 23634
23671: POP
23672: POP
// end ;
23673: LD_VAR 0 3
23677: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23693: LD_VAR 0 1
23697: NOT
23698: PUSH
23699: LD_VAR 0 1
23703: PPUSH
23704: CALL_OW 257
23708: PUSH
23709: LD_INT 9
23711: NONEQUAL
23712: OR
23713: IFFALSE 23717
// exit ;
23715: GO 24290
// side := GetSide ( unit ) ;
23717: LD_ADDR_VAR 0 9
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 255
23731: ST_TO_ADDR
// tech_space := tech_spacanom ;
23732: LD_ADDR_VAR 0 12
23736: PUSH
23737: LD_INT 29
23739: ST_TO_ADDR
// tech_time := tech_taurad ;
23740: LD_ADDR_VAR 0 13
23744: PUSH
23745: LD_INT 28
23747: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23748: LD_ADDR_VAR 0 11
23752: PUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 310
23762: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23763: LD_VAR 0 11
23767: PPUSH
23768: CALL_OW 247
23772: PUSH
23773: LD_INT 2
23775: EQUAL
23776: IFFALSE 23780
// exit ;
23778: GO 24290
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23780: LD_ADDR_VAR 0 8
23784: PUSH
23785: LD_INT 81
23787: PUSH
23788: LD_VAR 0 9
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 3
23799: PUSH
23800: LD_INT 21
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PPUSH
23818: CALL_OW 69
23822: ST_TO_ADDR
// if not tmp then
23823: LD_VAR 0 8
23827: NOT
23828: IFFALSE 23832
// exit ;
23830: GO 24290
// if in_unit then
23832: LD_VAR 0 11
23836: IFFALSE 23860
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23838: LD_ADDR_VAR 0 10
23842: PUSH
23843: LD_VAR 0 8
23847: PPUSH
23848: LD_VAR 0 11
23852: PPUSH
23853: CALL_OW 74
23857: ST_TO_ADDR
23858: GO 23880
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23860: LD_ADDR_VAR 0 10
23864: PUSH
23865: LD_VAR 0 8
23869: PPUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 74
23879: ST_TO_ADDR
// if not enemy then
23880: LD_VAR 0 10
23884: NOT
23885: IFFALSE 23889
// exit ;
23887: GO 24290
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23889: LD_VAR 0 11
23893: PUSH
23894: LD_VAR 0 11
23898: PPUSH
23899: LD_VAR 0 10
23903: PPUSH
23904: CALL_OW 296
23908: PUSH
23909: LD_INT 13
23911: GREATER
23912: AND
23913: PUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: LD_VAR 0 10
23923: PPUSH
23924: CALL_OW 296
23928: PUSH
23929: LD_INT 12
23931: GREATER
23932: OR
23933: IFFALSE 23937
// exit ;
23935: GO 24290
// missile := [ 1 ] ;
23937: LD_ADDR_VAR 0 14
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23948: LD_VAR 0 9
23952: PPUSH
23953: LD_VAR 0 12
23957: PPUSH
23958: CALL_OW 325
23962: IFFALSE 23991
// missile := Replace ( missile , missile + 1 , 2 ) ;
23964: LD_ADDR_VAR 0 14
23968: PUSH
23969: LD_VAR 0 14
23973: PPUSH
23974: LD_VAR 0 14
23978: PUSH
23979: LD_INT 1
23981: PLUS
23982: PPUSH
23983: LD_INT 2
23985: PPUSH
23986: CALL_OW 1
23990: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23991: LD_VAR 0 9
23995: PPUSH
23996: LD_VAR 0 13
24000: PPUSH
24001: CALL_OW 325
24005: PUSH
24006: LD_VAR 0 10
24010: PPUSH
24011: CALL_OW 255
24015: PPUSH
24016: LD_VAR 0 13
24020: PPUSH
24021: CALL_OW 325
24025: NOT
24026: AND
24027: IFFALSE 24056
// missile := Replace ( missile , missile + 1 , 3 ) ;
24029: LD_ADDR_VAR 0 14
24033: PUSH
24034: LD_VAR 0 14
24038: PPUSH
24039: LD_VAR 0 14
24043: PUSH
24044: LD_INT 1
24046: PLUS
24047: PPUSH
24048: LD_INT 3
24050: PPUSH
24051: CALL_OW 1
24055: ST_TO_ADDR
// if missile < 2 then
24056: LD_VAR 0 14
24060: PUSH
24061: LD_INT 2
24063: LESS
24064: IFFALSE 24068
// exit ;
24066: GO 24290
// x := GetX ( enemy ) ;
24068: LD_ADDR_VAR 0 4
24072: PUSH
24073: LD_VAR 0 10
24077: PPUSH
24078: CALL_OW 250
24082: ST_TO_ADDR
// y := GetY ( enemy ) ;
24083: LD_ADDR_VAR 0 5
24087: PUSH
24088: LD_VAR 0 10
24092: PPUSH
24093: CALL_OW 251
24097: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24098: LD_ADDR_VAR 0 6
24102: PUSH
24103: LD_VAR 0 4
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: CALL_OW 12
24119: PLUS
24120: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24121: LD_ADDR_VAR 0 7
24125: PUSH
24126: LD_VAR 0 5
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: CALL_OW 12
24142: PLUS
24143: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24144: LD_VAR 0 6
24148: PPUSH
24149: LD_VAR 0 7
24153: PPUSH
24154: CALL_OW 488
24158: NOT
24159: IFFALSE 24181
// begin _x := x ;
24161: LD_ADDR_VAR 0 6
24165: PUSH
24166: LD_VAR 0 4
24170: ST_TO_ADDR
// _y := y ;
24171: LD_ADDR_VAR 0 7
24175: PUSH
24176: LD_VAR 0 5
24180: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_INT 1
24188: PPUSH
24189: LD_VAR 0 14
24193: PPUSH
24194: CALL_OW 12
24198: ST_TO_ADDR
// case i of 1 :
24199: LD_VAR 0 3
24203: PUSH
24204: LD_INT 1
24206: DOUBLE
24207: EQUAL
24208: IFTRUE 24212
24210: GO 24229
24212: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24213: LD_VAR 0 1
24217: PPUSH
24218: LD_VAR 0 10
24222: PPUSH
24223: CALL_OW 115
24227: GO 24290
24229: LD_INT 2
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24237
24235: GO 24259
24237: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24238: LD_VAR 0 1
24242: PPUSH
24243: LD_VAR 0 6
24247: PPUSH
24248: LD_VAR 0 7
24252: PPUSH
24253: CALL_OW 153
24257: GO 24290
24259: LD_INT 3
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24289
24267: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24268: LD_VAR 0 1
24272: PPUSH
24273: LD_VAR 0 6
24277: PPUSH
24278: LD_VAR 0 7
24282: PPUSH
24283: CALL_OW 154
24287: GO 24290
24289: POP
// end ;
24290: LD_VAR 0 2
24294: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24295: LD_INT 0
24297: PPUSH
24298: PPUSH
24299: PPUSH
24300: PPUSH
24301: PPUSH
24302: PPUSH
// if not unit or not building then
24303: LD_VAR 0 1
24307: NOT
24308: PUSH
24309: LD_VAR 0 2
24313: NOT
24314: OR
24315: IFFALSE 24319
// exit ;
24317: GO 24477
// x := GetX ( building ) ;
24319: LD_ADDR_VAR 0 5
24323: PUSH
24324: LD_VAR 0 2
24328: PPUSH
24329: CALL_OW 250
24333: ST_TO_ADDR
// y := GetY ( building ) ;
24334: LD_ADDR_VAR 0 6
24338: PUSH
24339: LD_VAR 0 2
24343: PPUSH
24344: CALL_OW 251
24348: ST_TO_ADDR
// for i = 0 to 5 do
24349: LD_ADDR_VAR 0 4
24353: PUSH
24354: DOUBLE
24355: LD_INT 0
24357: DEC
24358: ST_TO_ADDR
24359: LD_INT 5
24361: PUSH
24362: FOR_TO
24363: IFFALSE 24475
// begin _x := ShiftX ( x , i , 3 ) ;
24365: LD_ADDR_VAR 0 7
24369: PUSH
24370: LD_VAR 0 5
24374: PPUSH
24375: LD_VAR 0 4
24379: PPUSH
24380: LD_INT 3
24382: PPUSH
24383: CALL_OW 272
24387: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24388: LD_ADDR_VAR 0 8
24392: PUSH
24393: LD_VAR 0 6
24397: PPUSH
24398: LD_VAR 0 4
24402: PPUSH
24403: LD_INT 3
24405: PPUSH
24406: CALL_OW 273
24410: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24411: LD_VAR 0 7
24415: PPUSH
24416: LD_VAR 0 8
24420: PPUSH
24421: CALL_OW 488
24425: NOT
24426: IFFALSE 24430
// continue ;
24428: GO 24362
// if HexInfo ( _x , _y ) = 0 then
24430: LD_VAR 0 7
24434: PPUSH
24435: LD_VAR 0 8
24439: PPUSH
24440: CALL_OW 428
24444: PUSH
24445: LD_INT 0
24447: EQUAL
24448: IFFALSE 24473
// begin ComMoveXY ( unit , _x , _y ) ;
24450: LD_VAR 0 1
24454: PPUSH
24455: LD_VAR 0 7
24459: PPUSH
24460: LD_VAR 0 8
24464: PPUSH
24465: CALL_OW 111
// exit ;
24469: POP
24470: POP
24471: GO 24477
// end ; end ;
24473: GO 24362
24475: POP
24476: POP
// end ;
24477: LD_VAR 0 3
24481: RET
// export function ScanBase ( side , base_area ) ; begin
24482: LD_INT 0
24484: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_VAR 0 2
24494: PPUSH
24495: LD_INT 81
24497: PUSH
24498: LD_VAR 0 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PPUSH
24507: CALL_OW 70
24511: ST_TO_ADDR
// end ;
24512: LD_VAR 0 3
24516: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24517: LD_INT 0
24519: PPUSH
24520: PPUSH
24521: PPUSH
24522: PPUSH
// result := false ;
24523: LD_ADDR_VAR 0 2
24527: PUSH
24528: LD_INT 0
24530: ST_TO_ADDR
// side := GetSide ( unit ) ;
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_VAR 0 1
24540: PPUSH
24541: CALL_OW 255
24545: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24546: LD_ADDR_VAR 0 4
24550: PUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 248
24560: ST_TO_ADDR
// case nat of 1 :
24561: LD_VAR 0 4
24565: PUSH
24566: LD_INT 1
24568: DOUBLE
24569: EQUAL
24570: IFTRUE 24574
24572: GO 24585
24574: POP
// tech := tech_lassight ; 2 :
24575: LD_ADDR_VAR 0 5
24579: PUSH
24580: LD_INT 12
24582: ST_TO_ADDR
24583: GO 24624
24585: LD_INT 2
24587: DOUBLE
24588: EQUAL
24589: IFTRUE 24593
24591: GO 24604
24593: POP
// tech := tech_mortar ; 3 :
24594: LD_ADDR_VAR 0 5
24598: PUSH
24599: LD_INT 41
24601: ST_TO_ADDR
24602: GO 24624
24604: LD_INT 3
24606: DOUBLE
24607: EQUAL
24608: IFTRUE 24612
24610: GO 24623
24612: POP
// tech := tech_bazooka ; end ;
24613: LD_ADDR_VAR 0 5
24617: PUSH
24618: LD_INT 44
24620: ST_TO_ADDR
24621: GO 24624
24623: POP
// if Researched ( side , tech ) then
24624: LD_VAR 0 3
24628: PPUSH
24629: LD_VAR 0 5
24633: PPUSH
24634: CALL_OW 325
24638: IFFALSE 24665
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24640: LD_ADDR_VAR 0 2
24644: PUSH
24645: LD_INT 5
24647: PUSH
24648: LD_INT 8
24650: PUSH
24651: LD_INT 9
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: LD_VAR 0 4
24663: ARRAY
24664: ST_TO_ADDR
// end ;
24665: LD_VAR 0 2
24669: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24670: LD_INT 0
24672: PPUSH
24673: PPUSH
24674: PPUSH
// if not mines then
24675: LD_VAR 0 2
24679: NOT
24680: IFFALSE 24684
// exit ;
24682: GO 24828
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24684: LD_ADDR_VAR 0 5
24688: PUSH
24689: LD_INT 81
24691: PUSH
24692: LD_VAR 0 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: LD_INT 21
24706: PUSH
24707: LD_INT 3
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PPUSH
24722: CALL_OW 69
24726: ST_TO_ADDR
// for i in mines do
24727: LD_ADDR_VAR 0 4
24731: PUSH
24732: LD_VAR 0 2
24736: PUSH
24737: FOR_IN
24738: IFFALSE 24826
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24740: LD_VAR 0 4
24744: PUSH
24745: LD_INT 1
24747: ARRAY
24748: PPUSH
24749: LD_VAR 0 4
24753: PUSH
24754: LD_INT 2
24756: ARRAY
24757: PPUSH
24758: CALL_OW 458
24762: NOT
24763: IFFALSE 24767
// continue ;
24765: GO 24737
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24767: LD_VAR 0 4
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: LD_VAR 0 4
24780: PUSH
24781: LD_INT 2
24783: ARRAY
24784: PPUSH
24785: CALL_OW 428
24789: PUSH
24790: LD_VAR 0 5
24794: IN
24795: IFFALSE 24824
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24797: LD_VAR 0 4
24801: PUSH
24802: LD_INT 1
24804: ARRAY
24805: PPUSH
24806: LD_VAR 0 4
24810: PUSH
24811: LD_INT 2
24813: ARRAY
24814: PPUSH
24815: LD_VAR 0 1
24819: PPUSH
24820: CALL_OW 456
// end ;
24824: GO 24737
24826: POP
24827: POP
// end ;
24828: LD_VAR 0 3
24832: RET
// export function Count ( array ) ; begin
24833: LD_INT 0
24835: PPUSH
// result := array + 0 ;
24836: LD_ADDR_VAR 0 2
24840: PUSH
24841: LD_VAR 0 1
24845: PUSH
24846: LD_INT 0
24848: PLUS
24849: ST_TO_ADDR
// end ;
24850: LD_VAR 0 2
24854: RET
// export function IsEmpty ( building ) ; begin
24855: LD_INT 0
24857: PPUSH
// if not building then
24858: LD_VAR 0 1
24862: NOT
24863: IFFALSE 24867
// exit ;
24865: GO 24910
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24867: LD_ADDR_VAR 0 2
24871: PUSH
24872: LD_VAR 0 1
24876: PUSH
24877: LD_INT 22
24879: PUSH
24880: LD_VAR 0 1
24884: PPUSH
24885: CALL_OW 255
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 58
24896: PUSH
24897: EMPTY
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PPUSH
24904: CALL_OW 69
24908: IN
24909: ST_TO_ADDR
// end ;
24910: LD_VAR 0 2
24914: RET
// export function IsNotFull ( building ) ; var places ; begin
24915: LD_INT 0
24917: PPUSH
24918: PPUSH
// if not building then
24919: LD_VAR 0 1
24923: NOT
24924: IFFALSE 24928
// exit ;
24926: GO 24956
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24928: LD_ADDR_VAR 0 2
24932: PUSH
24933: LD_VAR 0 1
24937: PPUSH
24938: LD_INT 3
24940: PUSH
24941: LD_INT 62
24943: PUSH
24944: EMPTY
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 72
24955: ST_TO_ADDR
// end ;
24956: LD_VAR 0 2
24960: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24961: LD_INT 0
24963: PPUSH
24964: PPUSH
24965: PPUSH
24966: PPUSH
// tmp := [ ] ;
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: EMPTY
24973: ST_TO_ADDR
// list := [ ] ;
24974: LD_ADDR_VAR 0 5
24978: PUSH
24979: EMPTY
24980: ST_TO_ADDR
// for i = 16 to 25 do
24981: LD_ADDR_VAR 0 4
24985: PUSH
24986: DOUBLE
24987: LD_INT 16
24989: DEC
24990: ST_TO_ADDR
24991: LD_INT 25
24993: PUSH
24994: FOR_TO
24995: IFFALSE 25068
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24997: LD_ADDR_VAR 0 3
25001: PUSH
25002: LD_VAR 0 3
25006: PUSH
25007: LD_INT 22
25009: PUSH
25010: LD_VAR 0 1
25014: PPUSH
25015: CALL_OW 255
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 91
25026: PUSH
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 6
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 30
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: PPUSH
25060: CALL_OW 69
25064: ADD
25065: ST_TO_ADDR
25066: GO 24994
25068: POP
25069: POP
// for i = 1 to tmp do
25070: LD_ADDR_VAR 0 4
25074: PUSH
25075: DOUBLE
25076: LD_INT 1
25078: DEC
25079: ST_TO_ADDR
25080: LD_VAR 0 3
25084: PUSH
25085: FOR_TO
25086: IFFALSE 25174
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25088: LD_ADDR_VAR 0 5
25092: PUSH
25093: LD_VAR 0 5
25097: PUSH
25098: LD_VAR 0 3
25102: PUSH
25103: LD_VAR 0 4
25107: ARRAY
25108: PPUSH
25109: CALL_OW 266
25113: PUSH
25114: LD_VAR 0 3
25118: PUSH
25119: LD_VAR 0 4
25123: ARRAY
25124: PPUSH
25125: CALL_OW 250
25129: PUSH
25130: LD_VAR 0 3
25134: PUSH
25135: LD_VAR 0 4
25139: ARRAY
25140: PPUSH
25141: CALL_OW 251
25145: PUSH
25146: LD_VAR 0 3
25150: PUSH
25151: LD_VAR 0 4
25155: ARRAY
25156: PPUSH
25157: CALL_OW 254
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: PUSH
25168: EMPTY
25169: LIST
25170: ADD
25171: ST_TO_ADDR
25172: GO 25085
25174: POP
25175: POP
// result := list ;
25176: LD_ADDR_VAR 0 2
25180: PUSH
25181: LD_VAR 0 5
25185: ST_TO_ADDR
// end ;
25186: LD_VAR 0 2
25190: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
// if not factory then
25200: LD_VAR 0 1
25204: NOT
25205: IFFALSE 25209
// exit ;
25207: GO 25802
// if control = control_apeman then
25209: LD_VAR 0 4
25213: PUSH
25214: LD_INT 5
25216: EQUAL
25217: IFFALSE 25326
// begin tmp := UnitsInside ( factory ) ;
25219: LD_ADDR_VAR 0 8
25223: PUSH
25224: LD_VAR 0 1
25228: PPUSH
25229: CALL_OW 313
25233: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25234: LD_VAR 0 8
25238: PPUSH
25239: LD_INT 25
25241: PUSH
25242: LD_INT 12
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PPUSH
25249: CALL_OW 72
25253: NOT
25254: IFFALSE 25264
// control := control_manual ;
25256: LD_ADDR_VAR 0 4
25260: PUSH
25261: LD_INT 1
25263: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25264: LD_ADDR_VAR 0 8
25268: PUSH
25269: LD_VAR 0 1
25273: PPUSH
25274: CALL 24961 0 1
25278: ST_TO_ADDR
// if tmp then
25279: LD_VAR 0 8
25283: IFFALSE 25326
// begin for i in tmp do
25285: LD_ADDR_VAR 0 7
25289: PUSH
25290: LD_VAR 0 8
25294: PUSH
25295: FOR_IN
25296: IFFALSE 25324
// if i [ 1 ] = b_ext_radio then
25298: LD_VAR 0 7
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: PUSH
25307: LD_INT 22
25309: EQUAL
25310: IFFALSE 25322
// begin control := control_remote ;
25312: LD_ADDR_VAR 0 4
25316: PUSH
25317: LD_INT 2
25319: ST_TO_ADDR
// break ;
25320: GO 25324
// end ;
25322: GO 25295
25324: POP
25325: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25326: LD_VAR 0 1
25330: PPUSH
25331: LD_VAR 0 2
25335: PPUSH
25336: LD_VAR 0 3
25340: PPUSH
25341: LD_VAR 0 4
25345: PPUSH
25346: LD_VAR 0 5
25350: PPUSH
25351: CALL_OW 448
25355: IFFALSE 25390
// begin result := [ chassis , engine , control , weapon ] ;
25357: LD_ADDR_VAR 0 6
25361: PUSH
25362: LD_VAR 0 2
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_VAR 0 4
25376: PUSH
25377: LD_VAR 0 5
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// exit ;
25388: GO 25802
// end ; _chassis := AvailableChassisList ( factory ) ;
25390: LD_ADDR_VAR 0 9
25394: PUSH
25395: LD_VAR 0 1
25399: PPUSH
25400: CALL_OW 475
25404: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25405: LD_ADDR_VAR 0 11
25409: PUSH
25410: LD_VAR 0 1
25414: PPUSH
25415: CALL_OW 476
25419: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25420: LD_ADDR_VAR 0 12
25424: PUSH
25425: LD_VAR 0 1
25429: PPUSH
25430: CALL_OW 477
25434: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25435: LD_ADDR_VAR 0 10
25439: PUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 478
25449: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25450: LD_VAR 0 9
25454: NOT
25455: PUSH
25456: LD_VAR 0 11
25460: NOT
25461: OR
25462: PUSH
25463: LD_VAR 0 12
25467: NOT
25468: OR
25469: PUSH
25470: LD_VAR 0 10
25474: NOT
25475: OR
25476: IFFALSE 25511
// begin result := [ chassis , engine , control , weapon ] ;
25478: LD_ADDR_VAR 0 6
25482: PUSH
25483: LD_VAR 0 2
25487: PUSH
25488: LD_VAR 0 3
25492: PUSH
25493: LD_VAR 0 4
25497: PUSH
25498: LD_VAR 0 5
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// exit ;
25509: GO 25802
// end ; if not chassis in _chassis then
25511: LD_VAR 0 2
25515: PUSH
25516: LD_VAR 0 9
25520: IN
25521: NOT
25522: IFFALSE 25548
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25524: LD_ADDR_VAR 0 2
25528: PUSH
25529: LD_VAR 0 9
25533: PUSH
25534: LD_INT 1
25536: PPUSH
25537: LD_VAR 0 9
25541: PPUSH
25542: CALL_OW 12
25546: ARRAY
25547: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25548: LD_VAR 0 2
25552: PPUSH
25553: LD_VAR 0 3
25557: PPUSH
25558: CALL 25807 0 2
25562: NOT
25563: IFFALSE 25622
// repeat engine := _engine [ 1 ] ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 11
25574: PUSH
25575: LD_INT 1
25577: ARRAY
25578: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25579: LD_ADDR_VAR 0 11
25583: PUSH
25584: LD_VAR 0 11
25588: PPUSH
25589: LD_INT 1
25591: PPUSH
25592: CALL_OW 3
25596: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25597: LD_VAR 0 2
25601: PPUSH
25602: LD_VAR 0 3
25606: PPUSH
25607: CALL 25807 0 2
25611: PUSH
25612: LD_VAR 0 11
25616: PUSH
25617: EMPTY
25618: EQUAL
25619: OR
25620: IFFALSE 25565
// if not control in _control then
25622: LD_VAR 0 4
25626: PUSH
25627: LD_VAR 0 12
25631: IN
25632: NOT
25633: IFFALSE 25659
// control := _control [ rand ( 1 , _control ) ] ;
25635: LD_ADDR_VAR 0 4
25639: PUSH
25640: LD_VAR 0 12
25644: PUSH
25645: LD_INT 1
25647: PPUSH
25648: LD_VAR 0 12
25652: PPUSH
25653: CALL_OW 12
25657: ARRAY
25658: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25659: LD_VAR 0 2
25663: PPUSH
25664: LD_VAR 0 5
25668: PPUSH
25669: CALL 26027 0 2
25673: NOT
25674: IFFALSE 25733
// repeat weapon := _weapon [ 1 ] ;
25676: LD_ADDR_VAR 0 5
25680: PUSH
25681: LD_VAR 0 10
25685: PUSH
25686: LD_INT 1
25688: ARRAY
25689: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25690: LD_ADDR_VAR 0 10
25694: PUSH
25695: LD_VAR 0 10
25699: PPUSH
25700: LD_INT 1
25702: PPUSH
25703: CALL_OW 3
25707: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25708: LD_VAR 0 2
25712: PPUSH
25713: LD_VAR 0 5
25717: PPUSH
25718: CALL 26027 0 2
25722: PUSH
25723: LD_VAR 0 10
25727: PUSH
25728: EMPTY
25729: EQUAL
25730: OR
25731: IFFALSE 25676
// result := [ ] ;
25733: LD_ADDR_VAR 0 6
25737: PUSH
25738: EMPTY
25739: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25740: LD_VAR 0 1
25744: PPUSH
25745: LD_VAR 0 2
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: LD_VAR 0 4
25759: PPUSH
25760: LD_VAR 0 5
25764: PPUSH
25765: CALL_OW 448
25769: IFFALSE 25802
// result := [ chassis , engine , control , weapon ] ;
25771: LD_ADDR_VAR 0 6
25775: PUSH
25776: LD_VAR 0 2
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: LD_VAR 0 4
25790: PUSH
25791: LD_VAR 0 5
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: ST_TO_ADDR
// end ;
25802: LD_VAR 0 6
25806: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25807: LD_INT 0
25809: PPUSH
// if not chassis or not engine then
25810: LD_VAR 0 1
25814: NOT
25815: PUSH
25816: LD_VAR 0 2
25820: NOT
25821: OR
25822: IFFALSE 25826
// exit ;
25824: GO 26022
// case engine of engine_solar :
25826: LD_VAR 0 2
25830: PUSH
25831: LD_INT 2
25833: DOUBLE
25834: EQUAL
25835: IFTRUE 25839
25837: GO 25877
25839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25840: LD_ADDR_VAR 0 3
25844: PUSH
25845: LD_INT 11
25847: PUSH
25848: LD_INT 12
25850: PUSH
25851: LD_INT 13
25853: PUSH
25854: LD_INT 14
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: ST_TO_ADDR
25875: GO 26006
25877: LD_INT 1
25879: DOUBLE
25880: EQUAL
25881: IFTRUE 25885
25883: GO 25947
25885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 11
25893: PUSH
25894: LD_INT 12
25896: PUSH
25897: LD_INT 13
25899: PUSH
25900: LD_INT 14
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: LD_INT 4
25914: PUSH
25915: LD_INT 5
25917: PUSH
25918: LD_INT 21
25920: PUSH
25921: LD_INT 23
25923: PUSH
25924: LD_INT 22
25926: PUSH
25927: LD_INT 24
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: ST_TO_ADDR
25945: GO 26006
25947: LD_INT 3
25949: DOUBLE
25950: EQUAL
25951: IFTRUE 25955
25953: GO 26005
25955: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25956: LD_ADDR_VAR 0 3
25960: PUSH
25961: LD_INT 13
25963: PUSH
25964: LD_INT 14
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 3
25972: PUSH
25973: LD_INT 4
25975: PUSH
25976: LD_INT 5
25978: PUSH
25979: LD_INT 21
25981: PUSH
25982: LD_INT 22
25984: PUSH
25985: LD_INT 23
25987: PUSH
25988: LD_INT 24
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
26003: GO 26006
26005: POP
// result := ( chassis in result ) ;
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_VAR 0 1
26015: PUSH
26016: LD_VAR 0 3
26020: IN
26021: ST_TO_ADDR
// end ;
26022: LD_VAR 0 3
26026: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26027: LD_INT 0
26029: PPUSH
// if not chassis or not weapon then
26030: LD_VAR 0 1
26034: NOT
26035: PUSH
26036: LD_VAR 0 2
26040: NOT
26041: OR
26042: IFFALSE 26046
// exit ;
26044: GO 27106
// case weapon of us_machine_gun :
26046: LD_VAR 0 2
26050: PUSH
26051: LD_INT 2
26053: DOUBLE
26054: EQUAL
26055: IFTRUE 26059
26057: GO 26089
26059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26060: LD_ADDR_VAR 0 3
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: LD_INT 3
26073: PUSH
26074: LD_INT 4
26076: PUSH
26077: LD_INT 5
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: ST_TO_ADDR
26087: GO 27090
26089: LD_INT 3
26091: DOUBLE
26092: EQUAL
26093: IFTRUE 26097
26095: GO 26127
26097: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26098: LD_ADDR_VAR 0 3
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 3
26111: PUSH
26112: LD_INT 4
26114: PUSH
26115: LD_INT 5
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
26125: GO 27090
26127: LD_INT 11
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26135
26133: GO 26165
26135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26136: LD_ADDR_VAR 0 3
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: LD_INT 4
26152: PUSH
26153: LD_INT 5
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: ST_TO_ADDR
26163: GO 27090
26165: LD_INT 4
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26199
26173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: LD_INT 4
26187: PUSH
26188: LD_INT 5
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
26197: GO 27090
26199: LD_INT 5
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26233
26207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 3
26218: PUSH
26219: LD_INT 4
26221: PUSH
26222: LD_INT 5
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: ST_TO_ADDR
26231: GO 27090
26233: LD_INT 9
26235: DOUBLE
26236: EQUAL
26237: IFTRUE 26241
26239: GO 26267
26241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26242: LD_ADDR_VAR 0 3
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 3
26252: PUSH
26253: LD_INT 4
26255: PUSH
26256: LD_INT 5
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: ST_TO_ADDR
26265: GO 27090
26267: LD_INT 7
26269: DOUBLE
26270: EQUAL
26271: IFTRUE 26275
26273: GO 26301
26275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26276: LD_ADDR_VAR 0 3
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: LD_INT 4
26289: PUSH
26290: LD_INT 5
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: ST_TO_ADDR
26299: GO 27090
26301: LD_INT 12
26303: DOUBLE
26304: EQUAL
26305: IFTRUE 26309
26307: GO 26335
26309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26310: LD_ADDR_VAR 0 3
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: LD_INT 3
26320: PUSH
26321: LD_INT 4
26323: PUSH
26324: LD_INT 5
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: ST_TO_ADDR
26333: GO 27090
26335: LD_INT 13
26337: DOUBLE
26338: EQUAL
26339: IFTRUE 26343
26341: GO 26369
26343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26344: LD_ADDR_VAR 0 3
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 4
26357: PUSH
26358: LD_INT 5
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: ST_TO_ADDR
26367: GO 27090
26369: LD_INT 14
26371: DOUBLE
26372: EQUAL
26373: IFTRUE 26377
26375: GO 26395
26377: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26378: LD_ADDR_VAR 0 3
26382: PUSH
26383: LD_INT 4
26385: PUSH
26386: LD_INT 5
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: ST_TO_ADDR
26393: GO 27090
26395: LD_INT 6
26397: DOUBLE
26398: EQUAL
26399: IFTRUE 26403
26401: GO 26421
26403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26404: LD_ADDR_VAR 0 3
26408: PUSH
26409: LD_INT 4
26411: PUSH
26412: LD_INT 5
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: ST_TO_ADDR
26419: GO 27090
26421: LD_INT 10
26423: DOUBLE
26424: EQUAL
26425: IFTRUE 26429
26427: GO 26447
26429: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26430: LD_ADDR_VAR 0 3
26434: PUSH
26435: LD_INT 4
26437: PUSH
26438: LD_INT 5
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: ST_TO_ADDR
26445: GO 27090
26447: LD_INT 22
26449: DOUBLE
26450: EQUAL
26451: IFTRUE 26455
26453: GO 26481
26455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26456: LD_ADDR_VAR 0 3
26460: PUSH
26461: LD_INT 11
26463: PUSH
26464: LD_INT 12
26466: PUSH
26467: LD_INT 13
26469: PUSH
26470: LD_INT 14
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: ST_TO_ADDR
26479: GO 27090
26481: LD_INT 23
26483: DOUBLE
26484: EQUAL
26485: IFTRUE 26489
26487: GO 26515
26489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: LD_INT 11
26497: PUSH
26498: LD_INT 12
26500: PUSH
26501: LD_INT 13
26503: PUSH
26504: LD_INT 14
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: ST_TO_ADDR
26513: GO 27090
26515: LD_INT 24
26517: DOUBLE
26518: EQUAL
26519: IFTRUE 26523
26521: GO 26549
26523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26524: LD_ADDR_VAR 0 3
26528: PUSH
26529: LD_INT 11
26531: PUSH
26532: LD_INT 12
26534: PUSH
26535: LD_INT 13
26537: PUSH
26538: LD_INT 14
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: ST_TO_ADDR
26547: GO 27090
26549: LD_INT 30
26551: DOUBLE
26552: EQUAL
26553: IFTRUE 26557
26555: GO 26583
26557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26558: LD_ADDR_VAR 0 3
26562: PUSH
26563: LD_INT 11
26565: PUSH
26566: LD_INT 12
26568: PUSH
26569: LD_INT 13
26571: PUSH
26572: LD_INT 14
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: ST_TO_ADDR
26581: GO 27090
26583: LD_INT 25
26585: DOUBLE
26586: EQUAL
26587: IFTRUE 26591
26589: GO 26609
26591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26592: LD_ADDR_VAR 0 3
26596: PUSH
26597: LD_INT 13
26599: PUSH
26600: LD_INT 14
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: ST_TO_ADDR
26607: GO 27090
26609: LD_INT 27
26611: DOUBLE
26612: EQUAL
26613: IFTRUE 26617
26615: GO 26635
26617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 13
26625: PUSH
26626: LD_INT 14
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: ST_TO_ADDR
26633: GO 27090
26635: LD_INT 92
26637: DOUBLE
26638: EQUAL
26639: IFTRUE 26643
26641: GO 26669
26643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26644: LD_ADDR_VAR 0 3
26648: PUSH
26649: LD_INT 11
26651: PUSH
26652: LD_INT 12
26654: PUSH
26655: LD_INT 13
26657: PUSH
26658: LD_INT 14
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
26667: GO 27090
26669: LD_INT 28
26671: DOUBLE
26672: EQUAL
26673: IFTRUE 26677
26675: GO 26695
26677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26678: LD_ADDR_VAR 0 3
26682: PUSH
26683: LD_INT 13
26685: PUSH
26686: LD_INT 14
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: ST_TO_ADDR
26693: GO 27090
26695: LD_INT 29
26697: DOUBLE
26698: EQUAL
26699: IFTRUE 26703
26701: GO 26721
26703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26704: LD_ADDR_VAR 0 3
26708: PUSH
26709: LD_INT 13
26711: PUSH
26712: LD_INT 14
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: ST_TO_ADDR
26719: GO 27090
26721: LD_INT 31
26723: DOUBLE
26724: EQUAL
26725: IFTRUE 26729
26727: GO 26747
26729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26730: LD_ADDR_VAR 0 3
26734: PUSH
26735: LD_INT 13
26737: PUSH
26738: LD_INT 14
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: ST_TO_ADDR
26745: GO 27090
26747: LD_INT 26
26749: DOUBLE
26750: EQUAL
26751: IFTRUE 26755
26753: GO 26773
26755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_INT 13
26763: PUSH
26764: LD_INT 14
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: ST_TO_ADDR
26771: GO 27090
26773: LD_INT 42
26775: DOUBLE
26776: EQUAL
26777: IFTRUE 26781
26779: GO 26807
26781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26782: LD_ADDR_VAR 0 3
26786: PUSH
26787: LD_INT 21
26789: PUSH
26790: LD_INT 22
26792: PUSH
26793: LD_INT 23
26795: PUSH
26796: LD_INT 24
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: ST_TO_ADDR
26805: GO 27090
26807: LD_INT 43
26809: DOUBLE
26810: EQUAL
26811: IFTRUE 26815
26813: GO 26841
26815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 21
26823: PUSH
26824: LD_INT 22
26826: PUSH
26827: LD_INT 23
26829: PUSH
26830: LD_INT 24
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: ST_TO_ADDR
26839: GO 27090
26841: LD_INT 44
26843: DOUBLE
26844: EQUAL
26845: IFTRUE 26849
26847: GO 26875
26849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26850: LD_ADDR_VAR 0 3
26854: PUSH
26855: LD_INT 21
26857: PUSH
26858: LD_INT 22
26860: PUSH
26861: LD_INT 23
26863: PUSH
26864: LD_INT 24
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: ST_TO_ADDR
26873: GO 27090
26875: LD_INT 45
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26909
26883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26884: LD_ADDR_VAR 0 3
26888: PUSH
26889: LD_INT 21
26891: PUSH
26892: LD_INT 22
26894: PUSH
26895: LD_INT 23
26897: PUSH
26898: LD_INT 24
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
26907: GO 27090
26909: LD_INT 49
26911: DOUBLE
26912: EQUAL
26913: IFTRUE 26917
26915: GO 26943
26917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26918: LD_ADDR_VAR 0 3
26922: PUSH
26923: LD_INT 21
26925: PUSH
26926: LD_INT 22
26928: PUSH
26929: LD_INT 23
26931: PUSH
26932: LD_INT 24
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: ST_TO_ADDR
26941: GO 27090
26943: LD_INT 51
26945: DOUBLE
26946: EQUAL
26947: IFTRUE 26951
26949: GO 26977
26951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26952: LD_ADDR_VAR 0 3
26956: PUSH
26957: LD_INT 21
26959: PUSH
26960: LD_INT 22
26962: PUSH
26963: LD_INT 23
26965: PUSH
26966: LD_INT 24
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
26975: GO 27090
26977: LD_INT 52
26979: DOUBLE
26980: EQUAL
26981: IFTRUE 26985
26983: GO 27011
26985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26986: LD_ADDR_VAR 0 3
26990: PUSH
26991: LD_INT 21
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_INT 23
26999: PUSH
27000: LD_INT 24
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: ST_TO_ADDR
27009: GO 27090
27011: LD_INT 53
27013: DOUBLE
27014: EQUAL
27015: IFTRUE 27019
27017: GO 27037
27019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27020: LD_ADDR_VAR 0 3
27024: PUSH
27025: LD_INT 23
27027: PUSH
27028: LD_INT 24
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: ST_TO_ADDR
27035: GO 27090
27037: LD_INT 46
27039: DOUBLE
27040: EQUAL
27041: IFTRUE 27045
27043: GO 27063
27045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27046: LD_ADDR_VAR 0 3
27050: PUSH
27051: LD_INT 23
27053: PUSH
27054: LD_INT 24
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: ST_TO_ADDR
27061: GO 27090
27063: LD_INT 47
27065: DOUBLE
27066: EQUAL
27067: IFTRUE 27071
27069: GO 27089
27071: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27072: LD_ADDR_VAR 0 3
27076: PUSH
27077: LD_INT 23
27079: PUSH
27080: LD_INT 24
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: ST_TO_ADDR
27087: GO 27090
27089: POP
// result := ( chassis in result ) ;
27090: LD_ADDR_VAR 0 3
27094: PUSH
27095: LD_VAR 0 1
27099: PUSH
27100: LD_VAR 0 3
27104: IN
27105: ST_TO_ADDR
// end ;
27106: LD_VAR 0 3
27110: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27111: LD_INT 0
27113: PPUSH
27114: PPUSH
27115: PPUSH
27116: PPUSH
27117: PPUSH
27118: PPUSH
27119: PPUSH
// result := array ;
27120: LD_ADDR_VAR 0 5
27124: PUSH
27125: LD_VAR 0 1
27129: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27130: LD_VAR 0 1
27134: NOT
27135: PUSH
27136: LD_VAR 0 2
27140: NOT
27141: OR
27142: PUSH
27143: LD_VAR 0 3
27147: NOT
27148: OR
27149: PUSH
27150: LD_VAR 0 2
27154: PUSH
27155: LD_VAR 0 1
27159: GREATER
27160: OR
27161: PUSH
27162: LD_VAR 0 3
27166: PUSH
27167: LD_VAR 0 1
27171: GREATER
27172: OR
27173: IFFALSE 27177
// exit ;
27175: GO 27473
// if direction then
27177: LD_VAR 0 4
27181: IFFALSE 27245
// begin d := 1 ;
27183: LD_ADDR_VAR 0 9
27187: PUSH
27188: LD_INT 1
27190: ST_TO_ADDR
// if i_from > i_to then
27191: LD_VAR 0 2
27195: PUSH
27196: LD_VAR 0 3
27200: GREATER
27201: IFFALSE 27227
// length := ( array - i_from ) + i_to else
27203: LD_ADDR_VAR 0 11
27207: PUSH
27208: LD_VAR 0 1
27212: PUSH
27213: LD_VAR 0 2
27217: MINUS
27218: PUSH
27219: LD_VAR 0 3
27223: PLUS
27224: ST_TO_ADDR
27225: GO 27243
// length := i_to - i_from ;
27227: LD_ADDR_VAR 0 11
27231: PUSH
27232: LD_VAR 0 3
27236: PUSH
27237: LD_VAR 0 2
27241: MINUS
27242: ST_TO_ADDR
// end else
27243: GO 27306
// begin d := - 1 ;
27245: LD_ADDR_VAR 0 9
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: ST_TO_ADDR
// if i_from > i_to then
27254: LD_VAR 0 2
27258: PUSH
27259: LD_VAR 0 3
27263: GREATER
27264: IFFALSE 27284
// length := i_from - i_to else
27266: LD_ADDR_VAR 0 11
27270: PUSH
27271: LD_VAR 0 2
27275: PUSH
27276: LD_VAR 0 3
27280: MINUS
27281: ST_TO_ADDR
27282: GO 27306
// length := ( array - i_to ) + i_from ;
27284: LD_ADDR_VAR 0 11
27288: PUSH
27289: LD_VAR 0 1
27293: PUSH
27294: LD_VAR 0 3
27298: MINUS
27299: PUSH
27300: LD_VAR 0 2
27304: PLUS
27305: ST_TO_ADDR
// end ; if not length then
27306: LD_VAR 0 11
27310: NOT
27311: IFFALSE 27315
// exit ;
27313: GO 27473
// tmp := array ;
27315: LD_ADDR_VAR 0 10
27319: PUSH
27320: LD_VAR 0 1
27324: ST_TO_ADDR
// for i = 1 to length do
27325: LD_ADDR_VAR 0 6
27329: PUSH
27330: DOUBLE
27331: LD_INT 1
27333: DEC
27334: ST_TO_ADDR
27335: LD_VAR 0 11
27339: PUSH
27340: FOR_TO
27341: IFFALSE 27461
// begin for j = 1 to array do
27343: LD_ADDR_VAR 0 7
27347: PUSH
27348: DOUBLE
27349: LD_INT 1
27351: DEC
27352: ST_TO_ADDR
27353: LD_VAR 0 1
27357: PUSH
27358: FOR_TO
27359: IFFALSE 27447
// begin k := j + d ;
27361: LD_ADDR_VAR 0 8
27365: PUSH
27366: LD_VAR 0 7
27370: PUSH
27371: LD_VAR 0 9
27375: PLUS
27376: ST_TO_ADDR
// if k > array then
27377: LD_VAR 0 8
27381: PUSH
27382: LD_VAR 0 1
27386: GREATER
27387: IFFALSE 27397
// k := 1 ;
27389: LD_ADDR_VAR 0 8
27393: PUSH
27394: LD_INT 1
27396: ST_TO_ADDR
// if not k then
27397: LD_VAR 0 8
27401: NOT
27402: IFFALSE 27414
// k := array ;
27404: LD_ADDR_VAR 0 8
27408: PUSH
27409: LD_VAR 0 1
27413: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27414: LD_ADDR_VAR 0 10
27418: PUSH
27419: LD_VAR 0 10
27423: PPUSH
27424: LD_VAR 0 8
27428: PPUSH
27429: LD_VAR 0 1
27433: PUSH
27434: LD_VAR 0 7
27438: ARRAY
27439: PPUSH
27440: CALL_OW 1
27444: ST_TO_ADDR
// end ;
27445: GO 27358
27447: POP
27448: POP
// array := tmp ;
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: LD_VAR 0 10
27458: ST_TO_ADDR
// end ;
27459: GO 27340
27461: POP
27462: POP
// result := array ;
27463: LD_ADDR_VAR 0 5
27467: PUSH
27468: LD_VAR 0 1
27472: ST_TO_ADDR
// end ;
27473: LD_VAR 0 5
27477: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27478: LD_INT 0
27480: PPUSH
27481: PPUSH
// result := 0 ;
27482: LD_ADDR_VAR 0 3
27486: PUSH
27487: LD_INT 0
27489: ST_TO_ADDR
// if not array or not value in array then
27490: LD_VAR 0 1
27494: NOT
27495: PUSH
27496: LD_VAR 0 2
27500: PUSH
27501: LD_VAR 0 1
27505: IN
27506: NOT
27507: OR
27508: IFFALSE 27512
// exit ;
27510: GO 27566
// for i = 1 to array do
27512: LD_ADDR_VAR 0 4
27516: PUSH
27517: DOUBLE
27518: LD_INT 1
27520: DEC
27521: ST_TO_ADDR
27522: LD_VAR 0 1
27526: PUSH
27527: FOR_TO
27528: IFFALSE 27564
// if value = array [ i ] then
27530: LD_VAR 0 2
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_VAR 0 4
27544: ARRAY
27545: EQUAL
27546: IFFALSE 27562
// begin result := i ;
27548: LD_ADDR_VAR 0 3
27552: PUSH
27553: LD_VAR 0 4
27557: ST_TO_ADDR
// exit ;
27558: POP
27559: POP
27560: GO 27566
// end ;
27562: GO 27527
27564: POP
27565: POP
// end ;
27566: LD_VAR 0 3
27570: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27571: LD_INT 0
27573: PPUSH
// vc_chassis := chassis ;
27574: LD_ADDR_OWVAR 37
27578: PUSH
27579: LD_VAR 0 1
27583: ST_TO_ADDR
// vc_engine := engine ;
27584: LD_ADDR_OWVAR 39
27588: PUSH
27589: LD_VAR 0 2
27593: ST_TO_ADDR
// vc_control := control ;
27594: LD_ADDR_OWVAR 38
27598: PUSH
27599: LD_VAR 0 3
27603: ST_TO_ADDR
// vc_weapon := weapon ;
27604: LD_ADDR_OWVAR 40
27608: PUSH
27609: LD_VAR 0 4
27613: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27614: LD_ADDR_OWVAR 41
27618: PUSH
27619: LD_VAR 0 5
27623: ST_TO_ADDR
// end ;
27624: LD_VAR 0 6
27628: RET
// export function WantPlant ( unit ) ; var task ; begin
27629: LD_INT 0
27631: PPUSH
27632: PPUSH
// result := false ;
27633: LD_ADDR_VAR 0 2
27637: PUSH
27638: LD_INT 0
27640: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27641: LD_ADDR_VAR 0 3
27645: PUSH
27646: LD_VAR 0 1
27650: PPUSH
27651: CALL_OW 437
27655: ST_TO_ADDR
// if task then
27656: LD_VAR 0 3
27660: IFFALSE 27688
// if task [ 1 ] [ 1 ] = p then
27662: LD_VAR 0 3
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: PUSH
27671: LD_INT 1
27673: ARRAY
27674: PUSH
27675: LD_STRING p
27677: EQUAL
27678: IFFALSE 27688
// result := true ;
27680: LD_ADDR_VAR 0 2
27684: PUSH
27685: LD_INT 1
27687: ST_TO_ADDR
// end ;
27688: LD_VAR 0 2
27692: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27693: LD_INT 0
27695: PPUSH
27696: PPUSH
27697: PPUSH
27698: PPUSH
// if pos < 1 then
27699: LD_VAR 0 2
27703: PUSH
27704: LD_INT 1
27706: LESS
27707: IFFALSE 27711
// exit ;
27709: GO 28014
// if pos = 1 then
27711: LD_VAR 0 2
27715: PUSH
27716: LD_INT 1
27718: EQUAL
27719: IFFALSE 27752
// result := Replace ( arr , pos [ 1 ] , value ) else
27721: LD_ADDR_VAR 0 4
27725: PUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: LD_VAR 0 2
27735: PUSH
27736: LD_INT 1
27738: ARRAY
27739: PPUSH
27740: LD_VAR 0 3
27744: PPUSH
27745: CALL_OW 1
27749: ST_TO_ADDR
27750: GO 28014
// begin tmp := arr ;
27752: LD_ADDR_VAR 0 6
27756: PUSH
27757: LD_VAR 0 1
27761: ST_TO_ADDR
// s_arr := [ tmp ] ;
27762: LD_ADDR_VAR 0 7
27766: PUSH
27767: LD_VAR 0 6
27771: PUSH
27772: EMPTY
27773: LIST
27774: ST_TO_ADDR
// for i = 1 to pos - 1 do
27775: LD_ADDR_VAR 0 5
27779: PUSH
27780: DOUBLE
27781: LD_INT 1
27783: DEC
27784: ST_TO_ADDR
27785: LD_VAR 0 2
27789: PUSH
27790: LD_INT 1
27792: MINUS
27793: PUSH
27794: FOR_TO
27795: IFFALSE 27840
// begin tmp := tmp [ pos [ i ] ] ;
27797: LD_ADDR_VAR 0 6
27801: PUSH
27802: LD_VAR 0 6
27806: PUSH
27807: LD_VAR 0 2
27811: PUSH
27812: LD_VAR 0 5
27816: ARRAY
27817: ARRAY
27818: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27819: LD_ADDR_VAR 0 7
27823: PUSH
27824: LD_VAR 0 7
27828: PUSH
27829: LD_VAR 0 6
27833: PUSH
27834: EMPTY
27835: LIST
27836: ADD
27837: ST_TO_ADDR
// end ;
27838: GO 27794
27840: POP
27841: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27842: LD_ADDR_VAR 0 6
27846: PUSH
27847: LD_VAR 0 6
27851: PPUSH
27852: LD_VAR 0 2
27856: PUSH
27857: LD_VAR 0 2
27861: ARRAY
27862: PPUSH
27863: LD_VAR 0 3
27867: PPUSH
27868: CALL_OW 1
27872: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27873: LD_ADDR_VAR 0 7
27877: PUSH
27878: LD_VAR 0 7
27882: PPUSH
27883: LD_VAR 0 7
27887: PPUSH
27888: LD_VAR 0 6
27892: PPUSH
27893: CALL_OW 1
27897: ST_TO_ADDR
// for i = s_arr downto 2 do
27898: LD_ADDR_VAR 0 5
27902: PUSH
27903: DOUBLE
27904: LD_VAR 0 7
27908: INC
27909: ST_TO_ADDR
27910: LD_INT 2
27912: PUSH
27913: FOR_DOWNTO
27914: IFFALSE 27998
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27916: LD_ADDR_VAR 0 6
27920: PUSH
27921: LD_VAR 0 7
27925: PUSH
27926: LD_VAR 0 5
27930: PUSH
27931: LD_INT 1
27933: MINUS
27934: ARRAY
27935: PPUSH
27936: LD_VAR 0 2
27940: PUSH
27941: LD_VAR 0 5
27945: PUSH
27946: LD_INT 1
27948: MINUS
27949: ARRAY
27950: PPUSH
27951: LD_VAR 0 7
27955: PUSH
27956: LD_VAR 0 5
27960: ARRAY
27961: PPUSH
27962: CALL_OW 1
27966: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27967: LD_ADDR_VAR 0 7
27971: PUSH
27972: LD_VAR 0 7
27976: PPUSH
27977: LD_VAR 0 5
27981: PUSH
27982: LD_INT 1
27984: MINUS
27985: PPUSH
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 1
27995: ST_TO_ADDR
// end ;
27996: GO 27913
27998: POP
27999: POP
// result := s_arr [ 1 ] ;
28000: LD_ADDR_VAR 0 4
28004: PUSH
28005: LD_VAR 0 7
28009: PUSH
28010: LD_INT 1
28012: ARRAY
28013: ST_TO_ADDR
// end ; end ;
28014: LD_VAR 0 4
28018: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28019: LD_INT 0
28021: PPUSH
28022: PPUSH
// if not list then
28023: LD_VAR 0 1
28027: NOT
28028: IFFALSE 28032
// exit ;
28030: GO 28123
// i := list [ pos1 ] ;
28032: LD_ADDR_VAR 0 5
28036: PUSH
28037: LD_VAR 0 1
28041: PUSH
28042: LD_VAR 0 2
28046: ARRAY
28047: ST_TO_ADDR
// if not i then
28048: LD_VAR 0 5
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28123
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28057: LD_ADDR_VAR 0 1
28061: PUSH
28062: LD_VAR 0 1
28066: PPUSH
28067: LD_VAR 0 2
28071: PPUSH
28072: LD_VAR 0 1
28076: PUSH
28077: LD_VAR 0 3
28081: ARRAY
28082: PPUSH
28083: CALL_OW 1
28087: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28088: LD_ADDR_VAR 0 1
28092: PUSH
28093: LD_VAR 0 1
28097: PPUSH
28098: LD_VAR 0 3
28102: PPUSH
28103: LD_VAR 0 5
28107: PPUSH
28108: CALL_OW 1
28112: ST_TO_ADDR
// result := list ;
28113: LD_ADDR_VAR 0 4
28117: PUSH
28118: LD_VAR 0 1
28122: ST_TO_ADDR
// end ;
28123: LD_VAR 0 4
28127: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28128: LD_INT 0
28130: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28131: LD_ADDR_VAR 0 5
28135: PUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 250
28145: PPUSH
28146: LD_VAR 0 1
28150: PPUSH
28151: CALL_OW 251
28155: PPUSH
28156: LD_VAR 0 2
28160: PPUSH
28161: LD_VAR 0 3
28165: PPUSH
28166: LD_VAR 0 4
28170: PPUSH
28171: CALL 28549 0 5
28175: ST_TO_ADDR
// end ;
28176: LD_VAR 0 5
28180: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28181: LD_INT 0
28183: PPUSH
28184: PPUSH
28185: PPUSH
28186: PPUSH
// if not list or not unit then
28187: LD_VAR 0 2
28191: NOT
28192: PUSH
28193: LD_VAR 0 1
28197: NOT
28198: OR
28199: IFFALSE 28203
// exit ;
28201: GO 28544
// result := [ ] ;
28203: LD_ADDR_VAR 0 5
28207: PUSH
28208: EMPTY
28209: ST_TO_ADDR
// for i in list do
28210: LD_ADDR_VAR 0 6
28214: PUSH
28215: LD_VAR 0 2
28219: PUSH
28220: FOR_IN
28221: IFFALSE 28439
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28223: LD_ADDR_VAR 0 8
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: LD_VAR 0 6
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: LD_VAR 0 6
28246: PUSH
28247: LD_INT 2
28249: ARRAY
28250: PPUSH
28251: CALL_OW 297
28255: ST_TO_ADDR
// if not Count ( result ) then
28256: LD_VAR 0 5
28260: PPUSH
28261: CALL 24833 0 1
28265: NOT
28266: IFFALSE 28299
// begin result := Join ( result , [ i , tmp ] ) ;
28268: LD_ADDR_VAR 0 5
28272: PUSH
28273: LD_VAR 0 5
28277: PPUSH
28278: LD_VAR 0 6
28282: PUSH
28283: LD_VAR 0 8
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL 60422 0 2
28296: ST_TO_ADDR
// continue ;
28297: GO 28220
// end ; if result [ result ] [ 2 ] <= tmp then
28299: LD_VAR 0 5
28303: PUSH
28304: LD_VAR 0 5
28308: ARRAY
28309: PUSH
28310: LD_INT 2
28312: ARRAY
28313: PUSH
28314: LD_VAR 0 8
28318: LESSEQUAL
28319: IFFALSE 28352
// result := Join ( result , [ i , tmp ] ) else
28321: LD_ADDR_VAR 0 5
28325: PUSH
28326: LD_VAR 0 5
28330: PPUSH
28331: LD_VAR 0 6
28335: PUSH
28336: LD_VAR 0 8
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PPUSH
28345: CALL 60422 0 2
28349: ST_TO_ADDR
28350: GO 28437
// begin for j := 1 to Count ( result ) do
28352: LD_ADDR_VAR 0 7
28356: PUSH
28357: DOUBLE
28358: LD_INT 1
28360: DEC
28361: ST_TO_ADDR
28362: LD_VAR 0 5
28366: PPUSH
28367: CALL 24833 0 1
28371: PUSH
28372: FOR_TO
28373: IFFALSE 28435
// begin if tmp < result [ j ] [ 2 ] then
28375: LD_VAR 0 8
28379: PUSH
28380: LD_VAR 0 5
28384: PUSH
28385: LD_VAR 0 7
28389: ARRAY
28390: PUSH
28391: LD_INT 2
28393: ARRAY
28394: LESS
28395: IFFALSE 28433
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28397: LD_ADDR_VAR 0 5
28401: PUSH
28402: LD_VAR 0 5
28406: PPUSH
28407: LD_VAR 0 7
28411: PPUSH
28412: LD_VAR 0 6
28416: PUSH
28417: LD_VAR 0 8
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PPUSH
28426: CALL_OW 2
28430: ST_TO_ADDR
// break ;
28431: GO 28435
// end ; end ;
28433: GO 28372
28435: POP
28436: POP
// end ; end ;
28437: GO 28220
28439: POP
28440: POP
// if result and not asc then
28441: LD_VAR 0 5
28445: PUSH
28446: LD_VAR 0 3
28450: NOT
28451: AND
28452: IFFALSE 28469
// result := ReverseArray ( result ) ;
28454: LD_ADDR_VAR 0 5
28458: PUSH
28459: LD_VAR 0 5
28463: PPUSH
28464: CALL 55709 0 1
28468: ST_TO_ADDR
// tmp := [ ] ;
28469: LD_ADDR_VAR 0 8
28473: PUSH
28474: EMPTY
28475: ST_TO_ADDR
// if mode then
28476: LD_VAR 0 4
28480: IFFALSE 28544
// begin for i := 1 to result do
28482: LD_ADDR_VAR 0 6
28486: PUSH
28487: DOUBLE
28488: LD_INT 1
28490: DEC
28491: ST_TO_ADDR
28492: LD_VAR 0 5
28496: PUSH
28497: FOR_TO
28498: IFFALSE 28532
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28500: LD_ADDR_VAR 0 8
28504: PUSH
28505: LD_VAR 0 8
28509: PPUSH
28510: LD_VAR 0 5
28514: PUSH
28515: LD_VAR 0 6
28519: ARRAY
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PPUSH
28525: CALL 60422 0 2
28529: ST_TO_ADDR
28530: GO 28497
28532: POP
28533: POP
// result := tmp ;
28534: LD_ADDR_VAR 0 5
28538: PUSH
28539: LD_VAR 0 8
28543: ST_TO_ADDR
// end ; end ;
28544: LD_VAR 0 5
28548: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28549: LD_INT 0
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
// if not list then
28555: LD_VAR 0 3
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28952
// result := [ ] ;
28564: LD_ADDR_VAR 0 6
28568: PUSH
28569: EMPTY
28570: ST_TO_ADDR
// for i in list do
28571: LD_ADDR_VAR 0 7
28575: PUSH
28576: LD_VAR 0 3
28580: PUSH
28581: FOR_IN
28582: IFFALSE 28784
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28584: LD_ADDR_VAR 0 9
28588: PUSH
28589: LD_VAR 0 7
28593: PPUSH
28594: LD_VAR 0 1
28598: PPUSH
28599: LD_VAR 0 2
28603: PPUSH
28604: CALL_OW 297
28608: ST_TO_ADDR
// if not result then
28609: LD_VAR 0 6
28613: NOT
28614: IFFALSE 28640
// result := [ [ i , tmp ] ] else
28616: LD_ADDR_VAR 0 6
28620: PUSH
28621: LD_VAR 0 7
28625: PUSH
28626: LD_VAR 0 9
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: ST_TO_ADDR
28638: GO 28782
// begin if result [ result ] [ 2 ] < tmp then
28640: LD_VAR 0 6
28644: PUSH
28645: LD_VAR 0 6
28649: ARRAY
28650: PUSH
28651: LD_INT 2
28653: ARRAY
28654: PUSH
28655: LD_VAR 0 9
28659: LESS
28660: IFFALSE 28702
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28662: LD_ADDR_VAR 0 6
28666: PUSH
28667: LD_VAR 0 6
28671: PPUSH
28672: LD_VAR 0 6
28676: PUSH
28677: LD_INT 1
28679: PLUS
28680: PPUSH
28681: LD_VAR 0 7
28685: PUSH
28686: LD_VAR 0 9
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PPUSH
28695: CALL_OW 2
28699: ST_TO_ADDR
28700: GO 28782
// for j = 1 to result do
28702: LD_ADDR_VAR 0 8
28706: PUSH
28707: DOUBLE
28708: LD_INT 1
28710: DEC
28711: ST_TO_ADDR
28712: LD_VAR 0 6
28716: PUSH
28717: FOR_TO
28718: IFFALSE 28780
// begin if tmp < result [ j ] [ 2 ] then
28720: LD_VAR 0 9
28724: PUSH
28725: LD_VAR 0 6
28729: PUSH
28730: LD_VAR 0 8
28734: ARRAY
28735: PUSH
28736: LD_INT 2
28738: ARRAY
28739: LESS
28740: IFFALSE 28778
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28742: LD_ADDR_VAR 0 6
28746: PUSH
28747: LD_VAR 0 6
28751: PPUSH
28752: LD_VAR 0 8
28756: PPUSH
28757: LD_VAR 0 7
28761: PUSH
28762: LD_VAR 0 9
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PPUSH
28771: CALL_OW 2
28775: ST_TO_ADDR
// break ;
28776: GO 28780
// end ; end ;
28778: GO 28717
28780: POP
28781: POP
// end ; end ;
28782: GO 28581
28784: POP
28785: POP
// if result and not asc then
28786: LD_VAR 0 6
28790: PUSH
28791: LD_VAR 0 4
28795: NOT
28796: AND
28797: IFFALSE 28872
// begin tmp := result ;
28799: LD_ADDR_VAR 0 9
28803: PUSH
28804: LD_VAR 0 6
28808: ST_TO_ADDR
// for i = tmp downto 1 do
28809: LD_ADDR_VAR 0 7
28813: PUSH
28814: DOUBLE
28815: LD_VAR 0 9
28819: INC
28820: ST_TO_ADDR
28821: LD_INT 1
28823: PUSH
28824: FOR_DOWNTO
28825: IFFALSE 28870
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28827: LD_ADDR_VAR 0 6
28831: PUSH
28832: LD_VAR 0 6
28836: PPUSH
28837: LD_VAR 0 9
28841: PUSH
28842: LD_VAR 0 7
28846: MINUS
28847: PUSH
28848: LD_INT 1
28850: PLUS
28851: PPUSH
28852: LD_VAR 0 9
28856: PUSH
28857: LD_VAR 0 7
28861: ARRAY
28862: PPUSH
28863: CALL_OW 1
28867: ST_TO_ADDR
28868: GO 28824
28870: POP
28871: POP
// end ; tmp := [ ] ;
28872: LD_ADDR_VAR 0 9
28876: PUSH
28877: EMPTY
28878: ST_TO_ADDR
// if mode then
28879: LD_VAR 0 5
28883: IFFALSE 28952
// begin for i = 1 to result do
28885: LD_ADDR_VAR 0 7
28889: PUSH
28890: DOUBLE
28891: LD_INT 1
28893: DEC
28894: ST_TO_ADDR
28895: LD_VAR 0 6
28899: PUSH
28900: FOR_TO
28901: IFFALSE 28940
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28903: LD_ADDR_VAR 0 9
28907: PUSH
28908: LD_VAR 0 9
28912: PPUSH
28913: LD_VAR 0 7
28917: PPUSH
28918: LD_VAR 0 6
28922: PUSH
28923: LD_VAR 0 7
28927: ARRAY
28928: PUSH
28929: LD_INT 1
28931: ARRAY
28932: PPUSH
28933: CALL_OW 1
28937: ST_TO_ADDR
28938: GO 28900
28940: POP
28941: POP
// result := tmp ;
28942: LD_ADDR_VAR 0 6
28946: PUSH
28947: LD_VAR 0 9
28951: ST_TO_ADDR
// end ; end ;
28952: LD_VAR 0 6
28956: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28957: LD_INT 0
28959: PPUSH
28960: PPUSH
28961: PPUSH
28962: PPUSH
28963: PPUSH
28964: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28965: LD_ADDR_VAR 0 5
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// if not x or not y then
28987: LD_VAR 0 2
28991: NOT
28992: PUSH
28993: LD_VAR 0 3
28997: NOT
28998: OR
28999: IFFALSE 29003
// exit ;
29001: GO 30653
// if not range then
29003: LD_VAR 0 4
29007: NOT
29008: IFFALSE 29018
// range := 10 ;
29010: LD_ADDR_VAR 0 4
29014: PUSH
29015: LD_INT 10
29017: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29018: LD_ADDR_VAR 0 8
29022: PUSH
29023: LD_INT 81
29025: PUSH
29026: LD_VAR 0 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 92
29037: PUSH
29038: LD_VAR 0 2
29042: PUSH
29043: LD_VAR 0 3
29047: PUSH
29048: LD_VAR 0 4
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 21
29064: PUSH
29065: LD_INT 3
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: ST_TO_ADDR
// if not tmp then
29086: LD_VAR 0 8
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 30653
// for i in tmp do
29095: LD_ADDR_VAR 0 6
29099: PUSH
29100: LD_VAR 0 8
29104: PUSH
29105: FOR_IN
29106: IFFALSE 30628
// begin points := [ 0 , 0 , 0 ] ;
29108: LD_ADDR_VAR 0 9
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// bpoints := 1 ;
29127: LD_ADDR_VAR 0 10
29131: PUSH
29132: LD_INT 1
29134: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29135: LD_VAR 0 6
29139: PPUSH
29140: CALL_OW 247
29144: PUSH
29145: LD_INT 1
29147: DOUBLE
29148: EQUAL
29149: IFTRUE 29153
29151: GO 29731
29153: POP
// begin if GetClass ( i ) = 1 then
29154: LD_VAR 0 6
29158: PPUSH
29159: CALL_OW 257
29163: PUSH
29164: LD_INT 1
29166: EQUAL
29167: IFFALSE 29188
// points := [ 10 , 5 , 3 ] ;
29169: LD_ADDR_VAR 0 9
29173: PUSH
29174: LD_INT 10
29176: PUSH
29177: LD_INT 5
29179: PUSH
29180: LD_INT 3
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29188: LD_VAR 0 6
29192: PPUSH
29193: CALL_OW 257
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: LD_INT 3
29203: PUSH
29204: LD_INT 4
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: IN
29212: IFFALSE 29233
// points := [ 3 , 2 , 1 ] ;
29214: LD_ADDR_VAR 0 9
29218: PUSH
29219: LD_INT 3
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29233: LD_VAR 0 6
29237: PPUSH
29238: CALL_OW 257
29242: PUSH
29243: LD_INT 5
29245: EQUAL
29246: IFFALSE 29267
// points := [ 130 , 5 , 2 ] ;
29248: LD_ADDR_VAR 0 9
29252: PUSH
29253: LD_INT 130
29255: PUSH
29256: LD_INT 5
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29267: LD_VAR 0 6
29271: PPUSH
29272: CALL_OW 257
29276: PUSH
29277: LD_INT 8
29279: EQUAL
29280: IFFALSE 29301
// points := [ 35 , 35 , 30 ] ;
29282: LD_ADDR_VAR 0 9
29286: PUSH
29287: LD_INT 35
29289: PUSH
29290: LD_INT 35
29292: PUSH
29293: LD_INT 30
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29301: LD_VAR 0 6
29305: PPUSH
29306: CALL_OW 257
29310: PUSH
29311: LD_INT 9
29313: EQUAL
29314: IFFALSE 29335
// points := [ 20 , 55 , 40 ] ;
29316: LD_ADDR_VAR 0 9
29320: PUSH
29321: LD_INT 20
29323: PUSH
29324: LD_INT 55
29326: PUSH
29327: LD_INT 40
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29335: LD_VAR 0 6
29339: PPUSH
29340: CALL_OW 257
29344: PUSH
29345: LD_INT 12
29347: PUSH
29348: LD_INT 16
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: IN
29355: IFFALSE 29376
// points := [ 5 , 3 , 2 ] ;
29357: LD_ADDR_VAR 0 9
29361: PUSH
29362: LD_INT 5
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29376: LD_VAR 0 6
29380: PPUSH
29381: CALL_OW 257
29385: PUSH
29386: LD_INT 17
29388: EQUAL
29389: IFFALSE 29410
// points := [ 100 , 50 , 75 ] ;
29391: LD_ADDR_VAR 0 9
29395: PUSH
29396: LD_INT 100
29398: PUSH
29399: LD_INT 50
29401: PUSH
29402: LD_INT 75
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29410: LD_VAR 0 6
29414: PPUSH
29415: CALL_OW 257
29419: PUSH
29420: LD_INT 15
29422: EQUAL
29423: IFFALSE 29444
// points := [ 10 , 5 , 3 ] ;
29425: LD_ADDR_VAR 0 9
29429: PUSH
29430: LD_INT 10
29432: PUSH
29433: LD_INT 5
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29444: LD_VAR 0 6
29448: PPUSH
29449: CALL_OW 257
29453: PUSH
29454: LD_INT 14
29456: EQUAL
29457: IFFALSE 29478
// points := [ 10 , 0 , 0 ] ;
29459: LD_ADDR_VAR 0 9
29463: PUSH
29464: LD_INT 10
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29478: LD_VAR 0 6
29482: PPUSH
29483: CALL_OW 257
29487: PUSH
29488: LD_INT 11
29490: EQUAL
29491: IFFALSE 29512
// points := [ 30 , 10 , 5 ] ;
29493: LD_ADDR_VAR 0 9
29497: PUSH
29498: LD_INT 30
29500: PUSH
29501: LD_INT 10
29503: PUSH
29504: LD_INT 5
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29512: LD_VAR 0 1
29516: PPUSH
29517: LD_INT 5
29519: PPUSH
29520: CALL_OW 321
29524: PUSH
29525: LD_INT 2
29527: EQUAL
29528: IFFALSE 29545
// bpoints := bpoints * 1.8 ;
29530: LD_ADDR_VAR 0 10
29534: PUSH
29535: LD_VAR 0 10
29539: PUSH
29540: LD_REAL  1.80000000000000E+0000
29543: MUL
29544: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29545: LD_VAR 0 6
29549: PPUSH
29550: CALL_OW 257
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: LD_INT 4
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: IN
29573: PUSH
29574: LD_VAR 0 1
29578: PPUSH
29579: LD_INT 51
29581: PPUSH
29582: CALL_OW 321
29586: PUSH
29587: LD_INT 2
29589: EQUAL
29590: AND
29591: IFFALSE 29608
// bpoints := bpoints * 1.2 ;
29593: LD_ADDR_VAR 0 10
29597: PUSH
29598: LD_VAR 0 10
29602: PUSH
29603: LD_REAL  1.20000000000000E+0000
29606: MUL
29607: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29608: LD_VAR 0 6
29612: PPUSH
29613: CALL_OW 257
29617: PUSH
29618: LD_INT 5
29620: PUSH
29621: LD_INT 7
29623: PUSH
29624: LD_INT 9
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: IN
29632: PUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: LD_INT 52
29640: PPUSH
29641: CALL_OW 321
29645: PUSH
29646: LD_INT 2
29648: EQUAL
29649: AND
29650: IFFALSE 29667
// bpoints := bpoints * 1.5 ;
29652: LD_ADDR_VAR 0 10
29656: PUSH
29657: LD_VAR 0 10
29661: PUSH
29662: LD_REAL  1.50000000000000E+0000
29665: MUL
29666: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29667: LD_VAR 0 1
29671: PPUSH
29672: LD_INT 66
29674: PPUSH
29675: CALL_OW 321
29679: PUSH
29680: LD_INT 2
29682: EQUAL
29683: IFFALSE 29700
// bpoints := bpoints * 1.1 ;
29685: LD_ADDR_VAR 0 10
29689: PUSH
29690: LD_VAR 0 10
29694: PUSH
29695: LD_REAL  1.10000000000000E+0000
29698: MUL
29699: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29700: LD_ADDR_VAR 0 10
29704: PUSH
29705: LD_VAR 0 10
29709: PUSH
29710: LD_VAR 0 6
29714: PPUSH
29715: LD_INT 1
29717: PPUSH
29718: CALL_OW 259
29722: PUSH
29723: LD_REAL  1.15000000000000E+0000
29726: MUL
29727: MUL
29728: ST_TO_ADDR
// end ; unit_vehicle :
29729: GO 30557
29731: LD_INT 2
29733: DOUBLE
29734: EQUAL
29735: IFTRUE 29739
29737: GO 30545
29739: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29740: LD_VAR 0 6
29744: PPUSH
29745: CALL_OW 264
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: LD_INT 42
29755: PUSH
29756: LD_INT 24
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: IN
29764: IFFALSE 29785
// points := [ 25 , 5 , 3 ] ;
29766: LD_ADDR_VAR 0 9
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29785: LD_VAR 0 6
29789: PPUSH
29790: CALL_OW 264
29794: PUSH
29795: LD_INT 4
29797: PUSH
29798: LD_INT 43
29800: PUSH
29801: LD_INT 25
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: LIST
29808: IN
29809: IFFALSE 29830
// points := [ 40 , 15 , 5 ] ;
29811: LD_ADDR_VAR 0 9
29815: PUSH
29816: LD_INT 40
29818: PUSH
29819: LD_INT 15
29821: PUSH
29822: LD_INT 5
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29830: LD_VAR 0 6
29834: PPUSH
29835: CALL_OW 264
29839: PUSH
29840: LD_INT 3
29842: PUSH
29843: LD_INT 23
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: IN
29850: IFFALSE 29871
// points := [ 7 , 25 , 8 ] ;
29852: LD_ADDR_VAR 0 9
29856: PUSH
29857: LD_INT 7
29859: PUSH
29860: LD_INT 25
29862: PUSH
29863: LD_INT 8
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29871: LD_VAR 0 6
29875: PPUSH
29876: CALL_OW 264
29880: PUSH
29881: LD_INT 5
29883: PUSH
29884: LD_INT 27
29886: PUSH
29887: LD_INT 44
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: IN
29895: IFFALSE 29916
// points := [ 14 , 50 , 16 ] ;
29897: LD_ADDR_VAR 0 9
29901: PUSH
29902: LD_INT 14
29904: PUSH
29905: LD_INT 50
29907: PUSH
29908: LD_INT 16
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29916: LD_VAR 0 6
29920: PPUSH
29921: CALL_OW 264
29925: PUSH
29926: LD_INT 6
29928: PUSH
29929: LD_INT 46
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: IN
29936: IFFALSE 29957
// points := [ 32 , 120 , 70 ] ;
29938: LD_ADDR_VAR 0 9
29942: PUSH
29943: LD_INT 32
29945: PUSH
29946: LD_INT 120
29948: PUSH
29949: LD_INT 70
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29957: LD_VAR 0 6
29961: PPUSH
29962: CALL_OW 264
29966: PUSH
29967: LD_INT 7
29969: PUSH
29970: LD_INT 28
29972: PUSH
29973: LD_INT 45
29975: PUSH
29976: LD_INT 92
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: IN
29985: IFFALSE 30006
// points := [ 35 , 20 , 45 ] ;
29987: LD_ADDR_VAR 0 9
29991: PUSH
29992: LD_INT 35
29994: PUSH
29995: LD_INT 20
29997: PUSH
29998: LD_INT 45
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30006: LD_VAR 0 6
30010: PPUSH
30011: CALL_OW 264
30015: PUSH
30016: LD_INT 47
30018: PUSH
30019: EMPTY
30020: LIST
30021: IN
30022: IFFALSE 30043
// points := [ 67 , 45 , 75 ] ;
30024: LD_ADDR_VAR 0 9
30028: PUSH
30029: LD_INT 67
30031: PUSH
30032: LD_INT 45
30034: PUSH
30035: LD_INT 75
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30043: LD_VAR 0 6
30047: PPUSH
30048: CALL_OW 264
30052: PUSH
30053: LD_INT 26
30055: PUSH
30056: EMPTY
30057: LIST
30058: IN
30059: IFFALSE 30080
// points := [ 120 , 30 , 80 ] ;
30061: LD_ADDR_VAR 0 9
30065: PUSH
30066: LD_INT 120
30068: PUSH
30069: LD_INT 30
30071: PUSH
30072: LD_INT 80
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30080: LD_VAR 0 6
30084: PPUSH
30085: CALL_OW 264
30089: PUSH
30090: LD_INT 22
30092: PUSH
30093: EMPTY
30094: LIST
30095: IN
30096: IFFALSE 30117
// points := [ 40 , 1 , 1 ] ;
30098: LD_ADDR_VAR 0 9
30102: PUSH
30103: LD_INT 40
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30117: LD_VAR 0 6
30121: PPUSH
30122: CALL_OW 264
30126: PUSH
30127: LD_INT 29
30129: PUSH
30130: EMPTY
30131: LIST
30132: IN
30133: IFFALSE 30154
// points := [ 70 , 200 , 400 ] ;
30135: LD_ADDR_VAR 0 9
30139: PUSH
30140: LD_INT 70
30142: PUSH
30143: LD_INT 200
30145: PUSH
30146: LD_INT 400
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: LIST
30153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30154: LD_VAR 0 6
30158: PPUSH
30159: CALL_OW 264
30163: PUSH
30164: LD_INT 14
30166: PUSH
30167: LD_INT 53
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: IN
30174: IFFALSE 30195
// points := [ 40 , 10 , 20 ] ;
30176: LD_ADDR_VAR 0 9
30180: PUSH
30181: LD_INT 40
30183: PUSH
30184: LD_INT 10
30186: PUSH
30187: LD_INT 20
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30195: LD_VAR 0 6
30199: PPUSH
30200: CALL_OW 264
30204: PUSH
30205: LD_INT 9
30207: PUSH
30208: EMPTY
30209: LIST
30210: IN
30211: IFFALSE 30232
// points := [ 5 , 70 , 20 ] ;
30213: LD_ADDR_VAR 0 9
30217: PUSH
30218: LD_INT 5
30220: PUSH
30221: LD_INT 70
30223: PUSH
30224: LD_INT 20
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30232: LD_VAR 0 6
30236: PPUSH
30237: CALL_OW 264
30241: PUSH
30242: LD_INT 10
30244: PUSH
30245: EMPTY
30246: LIST
30247: IN
30248: IFFALSE 30269
// points := [ 35 , 110 , 70 ] ;
30250: LD_ADDR_VAR 0 9
30254: PUSH
30255: LD_INT 35
30257: PUSH
30258: LD_INT 110
30260: PUSH
30261: LD_INT 70
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30269: LD_VAR 0 6
30273: PPUSH
30274: CALL_OW 265
30278: PUSH
30279: LD_INT 25
30281: EQUAL
30282: IFFALSE 30303
// points := [ 80 , 65 , 100 ] ;
30284: LD_ADDR_VAR 0 9
30288: PUSH
30289: LD_INT 80
30291: PUSH
30292: LD_INT 65
30294: PUSH
30295: LD_INT 100
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30303: LD_VAR 0 6
30307: PPUSH
30308: CALL_OW 263
30312: PUSH
30313: LD_INT 1
30315: EQUAL
30316: IFFALSE 30351
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30318: LD_ADDR_VAR 0 10
30322: PUSH
30323: LD_VAR 0 10
30327: PUSH
30328: LD_VAR 0 6
30332: PPUSH
30333: CALL_OW 311
30337: PPUSH
30338: LD_INT 3
30340: PPUSH
30341: CALL_OW 259
30345: PUSH
30346: LD_INT 4
30348: MUL
30349: MUL
30350: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30351: LD_VAR 0 6
30355: PPUSH
30356: CALL_OW 263
30360: PUSH
30361: LD_INT 2
30363: EQUAL
30364: IFFALSE 30415
// begin j := IsControledBy ( i ) ;
30366: LD_ADDR_VAR 0 7
30370: PUSH
30371: LD_VAR 0 6
30375: PPUSH
30376: CALL_OW 312
30380: ST_TO_ADDR
// if j then
30381: LD_VAR 0 7
30385: IFFALSE 30415
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30387: LD_ADDR_VAR 0 10
30391: PUSH
30392: LD_VAR 0 10
30396: PUSH
30397: LD_VAR 0 7
30401: PPUSH
30402: LD_INT 3
30404: PPUSH
30405: CALL_OW 259
30409: PUSH
30410: LD_INT 3
30412: MUL
30413: MUL
30414: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30415: LD_VAR 0 6
30419: PPUSH
30420: CALL_OW 264
30424: PUSH
30425: LD_INT 5
30427: PUSH
30428: LD_INT 6
30430: PUSH
30431: LD_INT 46
30433: PUSH
30434: LD_INT 44
30436: PUSH
30437: LD_INT 47
30439: PUSH
30440: LD_INT 45
30442: PUSH
30443: LD_INT 28
30445: PUSH
30446: LD_INT 7
30448: PUSH
30449: LD_INT 27
30451: PUSH
30452: LD_INT 29
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: IN
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: LD_INT 52
30475: PPUSH
30476: CALL_OW 321
30480: PUSH
30481: LD_INT 2
30483: EQUAL
30484: AND
30485: IFFALSE 30502
// bpoints := bpoints * 1.2 ;
30487: LD_ADDR_VAR 0 10
30491: PUSH
30492: LD_VAR 0 10
30496: PUSH
30497: LD_REAL  1.20000000000000E+0000
30500: MUL
30501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30502: LD_VAR 0 6
30506: PPUSH
30507: CALL_OW 264
30511: PUSH
30512: LD_INT 6
30514: PUSH
30515: LD_INT 46
30517: PUSH
30518: LD_INT 47
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: IN
30526: IFFALSE 30543
// bpoints := bpoints * 1.2 ;
30528: LD_ADDR_VAR 0 10
30532: PUSH
30533: LD_VAR 0 10
30537: PUSH
30538: LD_REAL  1.20000000000000E+0000
30541: MUL
30542: ST_TO_ADDR
// end ; unit_building :
30543: GO 30557
30545: LD_INT 3
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30556
30553: POP
// ; end ;
30554: GO 30557
30556: POP
// for j = 1 to 3 do
30557: LD_ADDR_VAR 0 7
30561: PUSH
30562: DOUBLE
30563: LD_INT 1
30565: DEC
30566: ST_TO_ADDR
30567: LD_INT 3
30569: PUSH
30570: FOR_TO
30571: IFFALSE 30624
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30573: LD_ADDR_VAR 0 5
30577: PUSH
30578: LD_VAR 0 5
30582: PPUSH
30583: LD_VAR 0 7
30587: PPUSH
30588: LD_VAR 0 5
30592: PUSH
30593: LD_VAR 0 7
30597: ARRAY
30598: PUSH
30599: LD_VAR 0 9
30603: PUSH
30604: LD_VAR 0 7
30608: ARRAY
30609: PUSH
30610: LD_VAR 0 10
30614: MUL
30615: PLUS
30616: PPUSH
30617: CALL_OW 1
30621: ST_TO_ADDR
30622: GO 30570
30624: POP
30625: POP
// end ;
30626: GO 29105
30628: POP
30629: POP
// result := Replace ( result , 4 , tmp ) ;
30630: LD_ADDR_VAR 0 5
30634: PUSH
30635: LD_VAR 0 5
30639: PPUSH
30640: LD_INT 4
30642: PPUSH
30643: LD_VAR 0 8
30647: PPUSH
30648: CALL_OW 1
30652: ST_TO_ADDR
// end ;
30653: LD_VAR 0 5
30657: RET
// export function DangerAtRange ( unit , range ) ; begin
30658: LD_INT 0
30660: PPUSH
// if not unit then
30661: LD_VAR 0 1
30665: NOT
30666: IFFALSE 30670
// exit ;
30668: GO 30715
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30670: LD_ADDR_VAR 0 3
30674: PUSH
30675: LD_VAR 0 1
30679: PPUSH
30680: CALL_OW 255
30684: PPUSH
30685: LD_VAR 0 1
30689: PPUSH
30690: CALL_OW 250
30694: PPUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 251
30704: PPUSH
30705: LD_VAR 0 2
30709: PPUSH
30710: CALL 28957 0 4
30714: ST_TO_ADDR
// end ;
30715: LD_VAR 0 3
30719: RET
// export function DangerInArea ( side , area ) ; begin
30720: LD_INT 0
30722: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30723: LD_ADDR_VAR 0 3
30727: PUSH
30728: LD_VAR 0 2
30732: PPUSH
30733: LD_INT 81
30735: PUSH
30736: LD_VAR 0 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 70
30749: ST_TO_ADDR
// end ;
30750: LD_VAR 0 3
30754: RET
// export function IsExtension ( b ) ; begin
30755: LD_INT 0
30757: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30758: LD_ADDR_VAR 0 2
30762: PUSH
30763: LD_VAR 0 1
30767: PUSH
30768: LD_INT 23
30770: PUSH
30771: LD_INT 20
30773: PUSH
30774: LD_INT 22
30776: PUSH
30777: LD_INT 17
30779: PUSH
30780: LD_INT 24
30782: PUSH
30783: LD_INT 21
30785: PUSH
30786: LD_INT 19
30788: PUSH
30789: LD_INT 16
30791: PUSH
30792: LD_INT 25
30794: PUSH
30795: LD_INT 18
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: IN
30810: ST_TO_ADDR
// end ;
30811: LD_VAR 0 2
30815: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30816: LD_INT 0
30818: PPUSH
30819: PPUSH
30820: PPUSH
// result := [ ] ;
30821: LD_ADDR_VAR 0 4
30825: PUSH
30826: EMPTY
30827: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30828: LD_ADDR_VAR 0 5
30832: PUSH
30833: LD_VAR 0 2
30837: PPUSH
30838: LD_INT 21
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PPUSH
30848: CALL_OW 70
30852: ST_TO_ADDR
// if not tmp then
30853: LD_VAR 0 5
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30926
// if checkLink then
30862: LD_VAR 0 3
30866: IFFALSE 30916
// begin for i in tmp do
30868: LD_ADDR_VAR 0 6
30872: PUSH
30873: LD_VAR 0 5
30877: PUSH
30878: FOR_IN
30879: IFFALSE 30914
// if GetBase ( i ) <> base then
30881: LD_VAR 0 6
30885: PPUSH
30886: CALL_OW 274
30890: PUSH
30891: LD_VAR 0 1
30895: NONEQUAL
30896: IFFALSE 30912
// ComLinkToBase ( base , i ) ;
30898: LD_VAR 0 1
30902: PPUSH
30903: LD_VAR 0 6
30907: PPUSH
30908: CALL_OW 169
30912: GO 30878
30914: POP
30915: POP
// end ; result := tmp ;
30916: LD_ADDR_VAR 0 4
30920: PUSH
30921: LD_VAR 0 5
30925: ST_TO_ADDR
// end ;
30926: LD_VAR 0 4
30930: RET
// export function ComComplete ( units , b ) ; var i ; begin
30931: LD_INT 0
30933: PPUSH
30934: PPUSH
// if not units then
30935: LD_VAR 0 1
30939: NOT
30940: IFFALSE 30944
// exit ;
30942: GO 31034
// for i in units do
30944: LD_ADDR_VAR 0 4
30948: PUSH
30949: LD_VAR 0 1
30953: PUSH
30954: FOR_IN
30955: IFFALSE 31032
// if BuildingStatus ( b ) = bs_build then
30957: LD_VAR 0 2
30961: PPUSH
30962: CALL_OW 461
30966: PUSH
30967: LD_INT 1
30969: EQUAL
30970: IFFALSE 31030
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30972: LD_VAR 0 4
30976: PPUSH
30977: LD_STRING h
30979: PUSH
30980: LD_VAR 0 2
30984: PPUSH
30985: CALL_OW 250
30989: PUSH
30990: LD_VAR 0 2
30994: PPUSH
30995: CALL_OW 251
30999: PUSH
31000: LD_VAR 0 2
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: PPUSH
31026: CALL_OW 446
31030: GO 30954
31032: POP
31033: POP
// end ;
31034: LD_VAR 0 3
31038: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31039: LD_INT 0
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31047: LD_VAR 0 1
31051: NOT
31052: PUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 263
31062: PUSH
31063: LD_INT 2
31065: NONEQUAL
31066: OR
31067: IFFALSE 31071
// exit ;
31069: GO 31387
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31071: LD_ADDR_VAR 0 6
31075: PUSH
31076: LD_INT 22
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 255
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 30
31098: PUSH
31099: LD_INT 36
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 34
31108: PUSH
31109: LD_INT 31
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: ST_TO_ADDR
// if not tmp then
31130: LD_VAR 0 6
31134: NOT
31135: IFFALSE 31139
// exit ;
31137: GO 31387
// result := [ ] ;
31139: LD_ADDR_VAR 0 2
31143: PUSH
31144: EMPTY
31145: ST_TO_ADDR
// for i in tmp do
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_VAR 0 6
31155: PUSH
31156: FOR_IN
31157: IFFALSE 31228
// begin t := UnitsInside ( i ) ;
31159: LD_ADDR_VAR 0 4
31163: PUSH
31164: LD_VAR 0 3
31168: PPUSH
31169: CALL_OW 313
31173: ST_TO_ADDR
// if t then
31174: LD_VAR 0 4
31178: IFFALSE 31226
// for j in t do
31180: LD_ADDR_VAR 0 7
31184: PUSH
31185: LD_VAR 0 4
31189: PUSH
31190: FOR_IN
31191: IFFALSE 31224
// result := Replace ( result , result + 1 , j ) ;
31193: LD_ADDR_VAR 0 2
31197: PUSH
31198: LD_VAR 0 2
31202: PPUSH
31203: LD_VAR 0 2
31207: PUSH
31208: LD_INT 1
31210: PLUS
31211: PPUSH
31212: LD_VAR 0 7
31216: PPUSH
31217: CALL_OW 1
31221: ST_TO_ADDR
31222: GO 31190
31224: POP
31225: POP
// end ;
31226: GO 31156
31228: POP
31229: POP
// if not result then
31230: LD_VAR 0 2
31234: NOT
31235: IFFALSE 31239
// exit ;
31237: GO 31387
// mech := result [ 1 ] ;
31239: LD_ADDR_VAR 0 5
31243: PUSH
31244: LD_VAR 0 2
31248: PUSH
31249: LD_INT 1
31251: ARRAY
31252: ST_TO_ADDR
// if result > 1 then
31253: LD_VAR 0 2
31257: PUSH
31258: LD_INT 1
31260: GREATER
31261: IFFALSE 31373
// begin for i = 2 to result do
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: DOUBLE
31269: LD_INT 2
31271: DEC
31272: ST_TO_ADDR
31273: LD_VAR 0 2
31277: PUSH
31278: FOR_TO
31279: IFFALSE 31371
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31281: LD_ADDR_VAR 0 4
31285: PUSH
31286: LD_VAR 0 2
31290: PUSH
31291: LD_VAR 0 3
31295: ARRAY
31296: PPUSH
31297: LD_INT 3
31299: PPUSH
31300: CALL_OW 259
31304: PUSH
31305: LD_VAR 0 2
31309: PUSH
31310: LD_VAR 0 3
31314: ARRAY
31315: PPUSH
31316: CALL_OW 432
31320: MINUS
31321: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31322: LD_VAR 0 4
31326: PUSH
31327: LD_VAR 0 5
31331: PPUSH
31332: LD_INT 3
31334: PPUSH
31335: CALL_OW 259
31339: PUSH
31340: LD_VAR 0 5
31344: PPUSH
31345: CALL_OW 432
31349: MINUS
31350: GREATEREQUAL
31351: IFFALSE 31369
// mech := result [ i ] ;
31353: LD_ADDR_VAR 0 5
31357: PUSH
31358: LD_VAR 0 2
31362: PUSH
31363: LD_VAR 0 3
31367: ARRAY
31368: ST_TO_ADDR
// end ;
31369: GO 31278
31371: POP
31372: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_VAR 0 5
31382: PPUSH
31383: CALL_OW 135
// end ;
31387: LD_VAR 0 2
31391: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31392: LD_INT 0
31394: PPUSH
31395: PPUSH
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
// result := [ ] ;
31407: LD_ADDR_VAR 0 7
31411: PUSH
31412: EMPTY
31413: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 266
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: IN
31434: NOT
31435: IFFALSE 31439
// exit ;
31437: GO 33073
// if name then
31439: LD_VAR 0 3
31443: IFFALSE 31459
// SetBName ( base_dep , name ) ;
31445: LD_VAR 0 1
31449: PPUSH
31450: LD_VAR 0 3
31454: PPUSH
31455: CALL_OW 500
// base := GetBase ( base_dep ) ;
31459: LD_ADDR_VAR 0 15
31463: PUSH
31464: LD_VAR 0 1
31468: PPUSH
31469: CALL_OW 274
31473: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31474: LD_ADDR_VAR 0 16
31478: PUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL_OW 255
31488: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31489: LD_ADDR_VAR 0 17
31493: PUSH
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 248
31503: ST_TO_ADDR
// if sources then
31504: LD_VAR 0 5
31508: IFFALSE 31555
// for i = 1 to 3 do
31510: LD_ADDR_VAR 0 8
31514: PUSH
31515: DOUBLE
31516: LD_INT 1
31518: DEC
31519: ST_TO_ADDR
31520: LD_INT 3
31522: PUSH
31523: FOR_TO
31524: IFFALSE 31553
// AddResourceType ( base , i , sources [ i ] ) ;
31526: LD_VAR 0 15
31530: PPUSH
31531: LD_VAR 0 8
31535: PPUSH
31536: LD_VAR 0 5
31540: PUSH
31541: LD_VAR 0 8
31545: ARRAY
31546: PPUSH
31547: CALL_OW 276
31551: GO 31523
31553: POP
31554: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31555: LD_ADDR_VAR 0 18
31559: PUSH
31560: LD_VAR 0 15
31564: PPUSH
31565: LD_VAR 0 2
31569: PPUSH
31570: LD_INT 1
31572: PPUSH
31573: CALL 30816 0 3
31577: ST_TO_ADDR
// InitHc ;
31578: CALL_OW 19
// InitUc ;
31582: CALL_OW 18
// uc_side := side ;
31586: LD_ADDR_OWVAR 20
31590: PUSH
31591: LD_VAR 0 16
31595: ST_TO_ADDR
// uc_nation := nation ;
31596: LD_ADDR_OWVAR 21
31600: PUSH
31601: LD_VAR 0 17
31605: ST_TO_ADDR
// if buildings then
31606: LD_VAR 0 18
31610: IFFALSE 32932
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31612: LD_ADDR_VAR 0 19
31616: PUSH
31617: LD_VAR 0 18
31621: PPUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 30
31627: PUSH
31628: LD_INT 29
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 30
31637: PUSH
31638: LD_INT 30
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: PPUSH
31650: CALL_OW 72
31654: ST_TO_ADDR
// if tmp then
31655: LD_VAR 0 19
31659: IFFALSE 31707
// for i in tmp do
31661: LD_ADDR_VAR 0 8
31665: PUSH
31666: LD_VAR 0 19
31670: PUSH
31671: FOR_IN
31672: IFFALSE 31705
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31674: LD_VAR 0 8
31678: PPUSH
31679: CALL_OW 250
31683: PPUSH
31684: LD_VAR 0 8
31688: PPUSH
31689: CALL_OW 251
31693: PPUSH
31694: LD_VAR 0 16
31698: PPUSH
31699: CALL_OW 441
31703: GO 31671
31705: POP
31706: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31707: LD_VAR 0 18
31711: PPUSH
31712: LD_INT 2
31714: PUSH
31715: LD_INT 30
31717: PUSH
31718: LD_INT 32
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 30
31727: PUSH
31728: LD_INT 33
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PPUSH
31740: CALL_OW 72
31744: IFFALSE 31832
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31746: LD_ADDR_VAR 0 8
31750: PUSH
31751: LD_VAR 0 18
31755: PPUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 30
31761: PUSH
31762: LD_INT 32
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 30
31771: PUSH
31772: LD_INT 33
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: PPUSH
31784: CALL_OW 72
31788: PUSH
31789: FOR_IN
31790: IFFALSE 31830
// begin if not GetBWeapon ( i ) then
31792: LD_VAR 0 8
31796: PPUSH
31797: CALL_OW 269
31801: NOT
31802: IFFALSE 31828
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31804: LD_VAR 0 8
31808: PPUSH
31809: LD_VAR 0 8
31813: PPUSH
31814: LD_VAR 0 2
31818: PPUSH
31819: CALL 33078 0 2
31823: PPUSH
31824: CALL_OW 431
// end ;
31828: GO 31789
31830: POP
31831: POP
// end ; for i = 1 to personel do
31832: LD_ADDR_VAR 0 8
31836: PUSH
31837: DOUBLE
31838: LD_INT 1
31840: DEC
31841: ST_TO_ADDR
31842: LD_VAR 0 6
31846: PUSH
31847: FOR_TO
31848: IFFALSE 32912
// begin if i > 4 then
31850: LD_VAR 0 8
31854: PUSH
31855: LD_INT 4
31857: GREATER
31858: IFFALSE 31862
// break ;
31860: GO 32912
// case i of 1 :
31862: LD_VAR 0 8
31866: PUSH
31867: LD_INT 1
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31875
31873: GO 31955
31875: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31876: LD_ADDR_VAR 0 12
31880: PUSH
31881: LD_VAR 0 18
31885: PPUSH
31886: LD_INT 22
31888: PUSH
31889: LD_VAR 0 16
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 58
31900: PUSH
31901: EMPTY
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_INT 32
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 30
31919: PUSH
31920: LD_INT 4
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 30
31929: PUSH
31930: LD_INT 5
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 72
31952: ST_TO_ADDR
31953: GO 32177
31955: LD_INT 2
31957: DOUBLE
31958: EQUAL
31959: IFTRUE 31963
31961: GO 32025
31963: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31964: LD_ADDR_VAR 0 12
31968: PUSH
31969: LD_VAR 0 18
31973: PPUSH
31974: LD_INT 22
31976: PUSH
31977: LD_VAR 0 16
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 30
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 30
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PPUSH
32018: CALL_OW 72
32022: ST_TO_ADDR
32023: GO 32177
32025: LD_INT 3
32027: DOUBLE
32028: EQUAL
32029: IFTRUE 32033
32031: GO 32095
32033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32034: LD_ADDR_VAR 0 12
32038: PUSH
32039: LD_VAR 0 18
32043: PPUSH
32044: LD_INT 22
32046: PUSH
32047: LD_VAR 0 16
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: LD_INT 30
32061: PUSH
32062: LD_INT 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 30
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PPUSH
32088: CALL_OW 72
32092: ST_TO_ADDR
32093: GO 32177
32095: LD_INT 4
32097: DOUBLE
32098: EQUAL
32099: IFTRUE 32103
32101: GO 32176
32103: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32104: LD_ADDR_VAR 0 12
32108: PUSH
32109: LD_VAR 0 18
32113: PPUSH
32114: LD_INT 22
32116: PUSH
32117: LD_VAR 0 16
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 30
32131: PUSH
32132: LD_INT 6
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 30
32141: PUSH
32142: LD_INT 7
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 30
32151: PUSH
32152: LD_INT 8
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PPUSH
32169: CALL_OW 72
32173: ST_TO_ADDR
32174: GO 32177
32176: POP
// if i = 1 then
32177: LD_VAR 0 8
32181: PUSH
32182: LD_INT 1
32184: EQUAL
32185: IFFALSE 32296
// begin tmp := [ ] ;
32187: LD_ADDR_VAR 0 19
32191: PUSH
32192: EMPTY
32193: ST_TO_ADDR
// for j in f do
32194: LD_ADDR_VAR 0 9
32198: PUSH
32199: LD_VAR 0 12
32203: PUSH
32204: FOR_IN
32205: IFFALSE 32278
// if GetBType ( j ) = b_bunker then
32207: LD_VAR 0 9
32211: PPUSH
32212: CALL_OW 266
32216: PUSH
32217: LD_INT 32
32219: EQUAL
32220: IFFALSE 32247
// tmp := Insert ( tmp , 1 , j ) else
32222: LD_ADDR_VAR 0 19
32226: PUSH
32227: LD_VAR 0 19
32231: PPUSH
32232: LD_INT 1
32234: PPUSH
32235: LD_VAR 0 9
32239: PPUSH
32240: CALL_OW 2
32244: ST_TO_ADDR
32245: GO 32276
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32247: LD_ADDR_VAR 0 19
32251: PUSH
32252: LD_VAR 0 19
32256: PPUSH
32257: LD_VAR 0 19
32261: PUSH
32262: LD_INT 1
32264: PLUS
32265: PPUSH
32266: LD_VAR 0 9
32270: PPUSH
32271: CALL_OW 2
32275: ST_TO_ADDR
32276: GO 32204
32278: POP
32279: POP
// if tmp then
32280: LD_VAR 0 19
32284: IFFALSE 32296
// f := tmp ;
32286: LD_ADDR_VAR 0 12
32290: PUSH
32291: LD_VAR 0 19
32295: ST_TO_ADDR
// end ; x := personel [ i ] ;
32296: LD_ADDR_VAR 0 13
32300: PUSH
32301: LD_VAR 0 6
32305: PUSH
32306: LD_VAR 0 8
32310: ARRAY
32311: ST_TO_ADDR
// if x = - 1 then
32312: LD_VAR 0 13
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: EQUAL
32321: IFFALSE 32530
// begin for j in f do
32323: LD_ADDR_VAR 0 9
32327: PUSH
32328: LD_VAR 0 12
32332: PUSH
32333: FOR_IN
32334: IFFALSE 32526
// repeat InitHc ;
32336: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32340: LD_VAR 0 9
32344: PPUSH
32345: CALL_OW 266
32349: PUSH
32350: LD_INT 5
32352: EQUAL
32353: IFFALSE 32423
// begin if UnitsInside ( j ) < 3 then
32355: LD_VAR 0 9
32359: PPUSH
32360: CALL_OW 313
32364: PUSH
32365: LD_INT 3
32367: LESS
32368: IFFALSE 32404
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32370: LD_INT 0
32372: PPUSH
32373: LD_INT 5
32375: PUSH
32376: LD_INT 8
32378: PUSH
32379: LD_INT 9
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: PUSH
32387: LD_VAR 0 17
32391: ARRAY
32392: PPUSH
32393: LD_VAR 0 4
32397: PPUSH
32398: CALL_OW 380
32402: GO 32421
// PrepareHuman ( false , i , skill ) ;
32404: LD_INT 0
32406: PPUSH
32407: LD_VAR 0 8
32411: PPUSH
32412: LD_VAR 0 4
32416: PPUSH
32417: CALL_OW 380
// end else
32421: GO 32440
// PrepareHuman ( false , i , skill ) ;
32423: LD_INT 0
32425: PPUSH
32426: LD_VAR 0 8
32430: PPUSH
32431: LD_VAR 0 4
32435: PPUSH
32436: CALL_OW 380
// un := CreateHuman ;
32440: LD_ADDR_VAR 0 14
32444: PUSH
32445: CALL_OW 44
32449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32450: LD_ADDR_VAR 0 7
32454: PUSH
32455: LD_VAR 0 7
32459: PPUSH
32460: LD_INT 1
32462: PPUSH
32463: LD_VAR 0 14
32467: PPUSH
32468: CALL_OW 2
32472: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32473: LD_VAR 0 14
32477: PPUSH
32478: LD_VAR 0 9
32482: PPUSH
32483: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32487: LD_VAR 0 9
32491: PPUSH
32492: CALL_OW 313
32496: PUSH
32497: LD_INT 6
32499: EQUAL
32500: PUSH
32501: LD_VAR 0 9
32505: PPUSH
32506: CALL_OW 266
32510: PUSH
32511: LD_INT 32
32513: PUSH
32514: LD_INT 31
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: IN
32521: OR
32522: IFFALSE 32336
32524: GO 32333
32526: POP
32527: POP
// end else
32528: GO 32910
// for j = 1 to x do
32530: LD_ADDR_VAR 0 9
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_VAR 0 13
32544: PUSH
32545: FOR_TO
32546: IFFALSE 32908
// begin InitHc ;
32548: CALL_OW 19
// if not f then
32552: LD_VAR 0 12
32556: NOT
32557: IFFALSE 32646
// begin PrepareHuman ( false , i , skill ) ;
32559: LD_INT 0
32561: PPUSH
32562: LD_VAR 0 8
32566: PPUSH
32567: LD_VAR 0 4
32571: PPUSH
32572: CALL_OW 380
// un := CreateHuman ;
32576: LD_ADDR_VAR 0 14
32580: PUSH
32581: CALL_OW 44
32585: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32586: LD_ADDR_VAR 0 7
32590: PUSH
32591: LD_VAR 0 7
32595: PPUSH
32596: LD_INT 1
32598: PPUSH
32599: LD_VAR 0 14
32603: PPUSH
32604: CALL_OW 2
32608: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32609: LD_VAR 0 14
32613: PPUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 250
32623: PPUSH
32624: LD_VAR 0 1
32628: PPUSH
32629: CALL_OW 251
32633: PPUSH
32634: LD_INT 10
32636: PPUSH
32637: LD_INT 0
32639: PPUSH
32640: CALL_OW 50
// continue ;
32644: GO 32545
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32646: LD_VAR 0 12
32650: PUSH
32651: LD_INT 1
32653: ARRAY
32654: PPUSH
32655: CALL_OW 313
32659: PUSH
32660: LD_VAR 0 12
32664: PUSH
32665: LD_INT 1
32667: ARRAY
32668: PPUSH
32669: CALL_OW 266
32673: PUSH
32674: LD_INT 32
32676: PUSH
32677: LD_INT 31
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: IN
32684: AND
32685: PUSH
32686: LD_VAR 0 12
32690: PUSH
32691: LD_INT 1
32693: ARRAY
32694: PPUSH
32695: CALL_OW 313
32699: PUSH
32700: LD_INT 6
32702: EQUAL
32703: OR
32704: IFFALSE 32724
// f := Delete ( f , 1 ) ;
32706: LD_ADDR_VAR 0 12
32710: PUSH
32711: LD_VAR 0 12
32715: PPUSH
32716: LD_INT 1
32718: PPUSH
32719: CALL_OW 3
32723: ST_TO_ADDR
// if not f then
32724: LD_VAR 0 12
32728: NOT
32729: IFFALSE 32747
// begin x := x + 2 ;
32731: LD_ADDR_VAR 0 13
32735: PUSH
32736: LD_VAR 0 13
32740: PUSH
32741: LD_INT 2
32743: PLUS
32744: ST_TO_ADDR
// continue ;
32745: GO 32545
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32747: LD_VAR 0 12
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: PPUSH
32756: CALL_OW 266
32760: PUSH
32761: LD_INT 5
32763: EQUAL
32764: IFFALSE 32838
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32766: LD_VAR 0 12
32770: PUSH
32771: LD_INT 1
32773: ARRAY
32774: PPUSH
32775: CALL_OW 313
32779: PUSH
32780: LD_INT 3
32782: LESS
32783: IFFALSE 32819
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32785: LD_INT 0
32787: PPUSH
32788: LD_INT 5
32790: PUSH
32791: LD_INT 8
32793: PUSH
32794: LD_INT 9
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: PUSH
32802: LD_VAR 0 17
32806: ARRAY
32807: PPUSH
32808: LD_VAR 0 4
32812: PPUSH
32813: CALL_OW 380
32817: GO 32836
// PrepareHuman ( false , i , skill ) ;
32819: LD_INT 0
32821: PPUSH
32822: LD_VAR 0 8
32826: PPUSH
32827: LD_VAR 0 4
32831: PPUSH
32832: CALL_OW 380
// end else
32836: GO 32855
// PrepareHuman ( false , i , skill ) ;
32838: LD_INT 0
32840: PPUSH
32841: LD_VAR 0 8
32845: PPUSH
32846: LD_VAR 0 4
32850: PPUSH
32851: CALL_OW 380
// un := CreateHuman ;
32855: LD_ADDR_VAR 0 14
32859: PUSH
32860: CALL_OW 44
32864: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32865: LD_ADDR_VAR 0 7
32869: PUSH
32870: LD_VAR 0 7
32874: PPUSH
32875: LD_INT 1
32877: PPUSH
32878: LD_VAR 0 14
32882: PPUSH
32883: CALL_OW 2
32887: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32888: LD_VAR 0 14
32892: PPUSH
32893: LD_VAR 0 12
32897: PUSH
32898: LD_INT 1
32900: ARRAY
32901: PPUSH
32902: CALL_OW 52
// end ;
32906: GO 32545
32908: POP
32909: POP
// end ;
32910: GO 31847
32912: POP
32913: POP
// result := result ^ buildings ;
32914: LD_ADDR_VAR 0 7
32918: PUSH
32919: LD_VAR 0 7
32923: PUSH
32924: LD_VAR 0 18
32928: ADD
32929: ST_TO_ADDR
// end else
32930: GO 33073
// begin for i = 1 to personel do
32932: LD_ADDR_VAR 0 8
32936: PUSH
32937: DOUBLE
32938: LD_INT 1
32940: DEC
32941: ST_TO_ADDR
32942: LD_VAR 0 6
32946: PUSH
32947: FOR_TO
32948: IFFALSE 33071
// begin if i > 4 then
32950: LD_VAR 0 8
32954: PUSH
32955: LD_INT 4
32957: GREATER
32958: IFFALSE 32962
// break ;
32960: GO 33071
// x := personel [ i ] ;
32962: LD_ADDR_VAR 0 13
32966: PUSH
32967: LD_VAR 0 6
32971: PUSH
32972: LD_VAR 0 8
32976: ARRAY
32977: ST_TO_ADDR
// if x = - 1 then
32978: LD_VAR 0 13
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: EQUAL
32987: IFFALSE 32991
// continue ;
32989: GO 32947
// PrepareHuman ( false , i , skill ) ;
32991: LD_INT 0
32993: PPUSH
32994: LD_VAR 0 8
32998: PPUSH
32999: LD_VAR 0 4
33003: PPUSH
33004: CALL_OW 380
// un := CreateHuman ;
33008: LD_ADDR_VAR 0 14
33012: PUSH
33013: CALL_OW 44
33017: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33018: LD_VAR 0 14
33022: PPUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL_OW 250
33032: PPUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 251
33042: PPUSH
33043: LD_INT 10
33045: PPUSH
33046: LD_INT 0
33048: PPUSH
33049: CALL_OW 50
// result := result ^ un ;
33053: LD_ADDR_VAR 0 7
33057: PUSH
33058: LD_VAR 0 7
33062: PUSH
33063: LD_VAR 0 14
33067: ADD
33068: ST_TO_ADDR
// end ;
33069: GO 32947
33071: POP
33072: POP
// end ; end ;
33073: LD_VAR 0 7
33077: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33078: LD_INT 0
33080: PPUSH
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
// result := false ;
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_INT 0
33103: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33104: LD_VAR 0 1
33108: NOT
33109: PUSH
33110: LD_VAR 0 1
33114: PPUSH
33115: CALL_OW 266
33119: PUSH
33120: LD_INT 32
33122: PUSH
33123: LD_INT 33
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: IN
33130: NOT
33131: OR
33132: IFFALSE 33136
// exit ;
33134: GO 34245
// nat := GetNation ( tower ) ;
33136: LD_ADDR_VAR 0 12
33140: PUSH
33141: LD_VAR 0 1
33145: PPUSH
33146: CALL_OW 248
33150: ST_TO_ADDR
// side := GetSide ( tower ) ;
33151: LD_ADDR_VAR 0 16
33155: PUSH
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 255
33165: ST_TO_ADDR
// x := GetX ( tower ) ;
33166: LD_ADDR_VAR 0 10
33170: PUSH
33171: LD_VAR 0 1
33175: PPUSH
33176: CALL_OW 250
33180: ST_TO_ADDR
// y := GetY ( tower ) ;
33181: LD_ADDR_VAR 0 11
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 251
33195: ST_TO_ADDR
// if not x or not y then
33196: LD_VAR 0 10
33200: NOT
33201: PUSH
33202: LD_VAR 0 11
33206: NOT
33207: OR
33208: IFFALSE 33212
// exit ;
33210: GO 34245
// weapon := 0 ;
33212: LD_ADDR_VAR 0 18
33216: PUSH
33217: LD_INT 0
33219: ST_TO_ADDR
// fac_list := [ ] ;
33220: LD_ADDR_VAR 0 17
33224: PUSH
33225: EMPTY
33226: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33227: LD_ADDR_VAR 0 6
33231: PUSH
33232: LD_VAR 0 1
33236: PPUSH
33237: CALL_OW 274
33241: PPUSH
33242: LD_VAR 0 2
33246: PPUSH
33247: LD_INT 0
33249: PPUSH
33250: CALL 30816 0 3
33254: PPUSH
33255: LD_INT 30
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 72
33269: ST_TO_ADDR
// if not factories then
33270: LD_VAR 0 6
33274: NOT
33275: IFFALSE 33279
// exit ;
33277: GO 34245
// for i in factories do
33279: LD_ADDR_VAR 0 8
33283: PUSH
33284: LD_VAR 0 6
33288: PUSH
33289: FOR_IN
33290: IFFALSE 33315
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33292: LD_ADDR_VAR 0 17
33296: PUSH
33297: LD_VAR 0 17
33301: PUSH
33302: LD_VAR 0 8
33306: PPUSH
33307: CALL_OW 478
33311: UNION
33312: ST_TO_ADDR
33313: GO 33289
33315: POP
33316: POP
// if not fac_list then
33317: LD_VAR 0 17
33321: NOT
33322: IFFALSE 33326
// exit ;
33324: GO 34245
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33326: LD_ADDR_VAR 0 5
33330: PUSH
33331: LD_INT 4
33333: PUSH
33334: LD_INT 5
33336: PUSH
33337: LD_INT 9
33339: PUSH
33340: LD_INT 10
33342: PUSH
33343: LD_INT 6
33345: PUSH
33346: LD_INT 7
33348: PUSH
33349: LD_INT 11
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 27
33363: PUSH
33364: LD_INT 28
33366: PUSH
33367: LD_INT 26
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 43
33381: PUSH
33382: LD_INT 44
33384: PUSH
33385: LD_INT 46
33387: PUSH
33388: LD_INT 45
33390: PUSH
33391: LD_INT 47
33393: PUSH
33394: LD_INT 49
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: PUSH
33410: LD_VAR 0 12
33414: ARRAY
33415: ST_TO_ADDR
// list := list isect fac_list ;
33416: LD_ADDR_VAR 0 5
33420: PUSH
33421: LD_VAR 0 5
33425: PUSH
33426: LD_VAR 0 17
33430: ISECT
33431: ST_TO_ADDR
// if not list then
33432: LD_VAR 0 5
33436: NOT
33437: IFFALSE 33441
// exit ;
33439: GO 34245
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33441: LD_VAR 0 12
33445: PUSH
33446: LD_INT 3
33448: EQUAL
33449: PUSH
33450: LD_INT 49
33452: PUSH
33453: LD_VAR 0 5
33457: IN
33458: AND
33459: PUSH
33460: LD_INT 31
33462: PPUSH
33463: LD_VAR 0 16
33467: PPUSH
33468: CALL_OW 321
33472: PUSH
33473: LD_INT 2
33475: EQUAL
33476: AND
33477: IFFALSE 33537
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33479: LD_INT 22
33481: PUSH
33482: LD_VAR 0 16
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 35
33493: PUSH
33494: LD_INT 49
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 91
33503: PUSH
33504: LD_VAR 0 1
33508: PUSH
33509: LD_INT 10
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 69
33526: NOT
33527: IFFALSE 33537
// weapon := ru_time_lapser ;
33529: LD_ADDR_VAR 0 18
33533: PUSH
33534: LD_INT 49
33536: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33537: LD_VAR 0 12
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: IN
33552: PUSH
33553: LD_INT 11
33555: PUSH
33556: LD_VAR 0 5
33560: IN
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_VAR 0 5
33569: IN
33570: OR
33571: AND
33572: PUSH
33573: LD_INT 6
33575: PPUSH
33576: LD_VAR 0 16
33580: PPUSH
33581: CALL_OW 321
33585: PUSH
33586: LD_INT 2
33588: EQUAL
33589: AND
33590: IFFALSE 33755
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33592: LD_INT 22
33594: PUSH
33595: LD_VAR 0 16
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 35
33609: PUSH
33610: LD_INT 11
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 35
33619: PUSH
33620: LD_INT 30
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 91
33634: PUSH
33635: LD_VAR 0 1
33639: PUSH
33640: LD_INT 18
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: PPUSH
33653: CALL_OW 69
33657: NOT
33658: PUSH
33659: LD_INT 22
33661: PUSH
33662: LD_VAR 0 16
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 30
33676: PUSH
33677: LD_INT 32
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 30
33686: PUSH
33687: LD_INT 33
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 91
33701: PUSH
33702: LD_VAR 0 1
33706: PUSH
33707: LD_INT 12
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: PUSH
33720: EMPTY
33721: LIST
33722: PPUSH
33723: CALL_OW 69
33727: PUSH
33728: LD_INT 2
33730: GREATER
33731: AND
33732: IFFALSE 33755
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33734: LD_ADDR_VAR 0 18
33738: PUSH
33739: LD_INT 11
33741: PUSH
33742: LD_INT 30
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_VAR 0 12
33753: ARRAY
33754: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33755: LD_VAR 0 18
33759: NOT
33760: PUSH
33761: LD_INT 40
33763: PPUSH
33764: LD_VAR 0 16
33768: PPUSH
33769: CALL_OW 321
33773: PUSH
33774: LD_INT 2
33776: EQUAL
33777: AND
33778: PUSH
33779: LD_INT 7
33781: PUSH
33782: LD_VAR 0 5
33786: IN
33787: PUSH
33788: LD_INT 28
33790: PUSH
33791: LD_VAR 0 5
33795: IN
33796: OR
33797: PUSH
33798: LD_INT 45
33800: PUSH
33801: LD_VAR 0 5
33805: IN
33806: OR
33807: AND
33808: IFFALSE 34062
// begin hex := GetHexInfo ( x , y ) ;
33810: LD_ADDR_VAR 0 4
33814: PUSH
33815: LD_VAR 0 10
33819: PPUSH
33820: LD_VAR 0 11
33824: PPUSH
33825: CALL_OW 546
33829: ST_TO_ADDR
// if hex [ 1 ] then
33830: LD_VAR 0 4
33834: PUSH
33835: LD_INT 1
33837: ARRAY
33838: IFFALSE 33842
// exit ;
33840: GO 34245
// height := hex [ 2 ] ;
33842: LD_ADDR_VAR 0 15
33846: PUSH
33847: LD_VAR 0 4
33851: PUSH
33852: LD_INT 2
33854: ARRAY
33855: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33856: LD_ADDR_VAR 0 14
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// for i in tmp do
33879: LD_ADDR_VAR 0 8
33883: PUSH
33884: LD_VAR 0 14
33888: PUSH
33889: FOR_IN
33890: IFFALSE 34060
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33892: LD_ADDR_VAR 0 9
33896: PUSH
33897: LD_VAR 0 10
33901: PPUSH
33902: LD_VAR 0 8
33906: PPUSH
33907: LD_INT 5
33909: PPUSH
33910: CALL_OW 272
33914: PUSH
33915: LD_VAR 0 11
33919: PPUSH
33920: LD_VAR 0 8
33924: PPUSH
33925: LD_INT 5
33927: PPUSH
33928: CALL_OW 273
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33937: LD_VAR 0 9
33941: PUSH
33942: LD_INT 1
33944: ARRAY
33945: PPUSH
33946: LD_VAR 0 9
33950: PUSH
33951: LD_INT 2
33953: ARRAY
33954: PPUSH
33955: CALL_OW 488
33959: IFFALSE 34058
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33961: LD_ADDR_VAR 0 4
33965: PUSH
33966: LD_VAR 0 9
33970: PUSH
33971: LD_INT 1
33973: ARRAY
33974: PPUSH
33975: LD_VAR 0 9
33979: PUSH
33980: LD_INT 2
33982: ARRAY
33983: PPUSH
33984: CALL_OW 546
33988: ST_TO_ADDR
// if hex [ 1 ] then
33989: LD_VAR 0 4
33993: PUSH
33994: LD_INT 1
33996: ARRAY
33997: IFFALSE 34001
// continue ;
33999: GO 33889
// h := hex [ 2 ] ;
34001: LD_ADDR_VAR 0 13
34005: PUSH
34006: LD_VAR 0 4
34010: PUSH
34011: LD_INT 2
34013: ARRAY
34014: ST_TO_ADDR
// if h + 7 < height then
34015: LD_VAR 0 13
34019: PUSH
34020: LD_INT 7
34022: PLUS
34023: PUSH
34024: LD_VAR 0 15
34028: LESS
34029: IFFALSE 34058
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34031: LD_ADDR_VAR 0 18
34035: PUSH
34036: LD_INT 7
34038: PUSH
34039: LD_INT 28
34041: PUSH
34042: LD_INT 45
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: PUSH
34050: LD_VAR 0 12
34054: ARRAY
34055: ST_TO_ADDR
// break ;
34056: GO 34060
// end ; end ; end ;
34058: GO 33889
34060: POP
34061: POP
// end ; if not weapon then
34062: LD_VAR 0 18
34066: NOT
34067: IFFALSE 34127
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34069: LD_ADDR_VAR 0 5
34073: PUSH
34074: LD_VAR 0 5
34078: PUSH
34079: LD_INT 11
34081: PUSH
34082: LD_INT 30
34084: PUSH
34085: LD_INT 49
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: DIFF
34093: ST_TO_ADDR
// if not list then
34094: LD_VAR 0 5
34098: NOT
34099: IFFALSE 34103
// exit ;
34101: GO 34245
// weapon := list [ rand ( 1 , list ) ] ;
34103: LD_ADDR_VAR 0 18
34107: PUSH
34108: LD_VAR 0 5
34112: PUSH
34113: LD_INT 1
34115: PPUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: CALL_OW 12
34125: ARRAY
34126: ST_TO_ADDR
// end ; if weapon then
34127: LD_VAR 0 18
34131: IFFALSE 34245
// begin tmp := CostOfWeapon ( weapon ) ;
34133: LD_ADDR_VAR 0 14
34137: PUSH
34138: LD_VAR 0 18
34142: PPUSH
34143: CALL_OW 451
34147: ST_TO_ADDR
// j := GetBase ( tower ) ;
34148: LD_ADDR_VAR 0 9
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 274
34162: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34163: LD_VAR 0 9
34167: PPUSH
34168: LD_INT 1
34170: PPUSH
34171: CALL_OW 275
34175: PUSH
34176: LD_VAR 0 14
34180: PUSH
34181: LD_INT 1
34183: ARRAY
34184: GREATEREQUAL
34185: PUSH
34186: LD_VAR 0 9
34190: PPUSH
34191: LD_INT 2
34193: PPUSH
34194: CALL_OW 275
34198: PUSH
34199: LD_VAR 0 14
34203: PUSH
34204: LD_INT 2
34206: ARRAY
34207: GREATEREQUAL
34208: AND
34209: PUSH
34210: LD_VAR 0 9
34214: PPUSH
34215: LD_INT 3
34217: PPUSH
34218: CALL_OW 275
34222: PUSH
34223: LD_VAR 0 14
34227: PUSH
34228: LD_INT 3
34230: ARRAY
34231: GREATEREQUAL
34232: AND
34233: IFFALSE 34245
// result := weapon ;
34235: LD_ADDR_VAR 0 3
34239: PUSH
34240: LD_VAR 0 18
34244: ST_TO_ADDR
// end ; end ;
34245: LD_VAR 0 3
34249: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34250: LD_INT 0
34252: PPUSH
34253: PPUSH
// result := true ;
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 1
34261: ST_TO_ADDR
// if array1 = array2 then
34262: LD_VAR 0 1
34266: PUSH
34267: LD_VAR 0 2
34271: EQUAL
34272: IFFALSE 34332
// begin for i = 1 to array1 do
34274: LD_ADDR_VAR 0 4
34278: PUSH
34279: DOUBLE
34280: LD_INT 1
34282: DEC
34283: ST_TO_ADDR
34284: LD_VAR 0 1
34288: PUSH
34289: FOR_TO
34290: IFFALSE 34328
// if array1 [ i ] <> array2 [ i ] then
34292: LD_VAR 0 1
34296: PUSH
34297: LD_VAR 0 4
34301: ARRAY
34302: PUSH
34303: LD_VAR 0 2
34307: PUSH
34308: LD_VAR 0 4
34312: ARRAY
34313: NONEQUAL
34314: IFFALSE 34326
// begin result := false ;
34316: LD_ADDR_VAR 0 3
34320: PUSH
34321: LD_INT 0
34323: ST_TO_ADDR
// break ;
34324: GO 34328
// end ;
34326: GO 34289
34328: POP
34329: POP
// end else
34330: GO 34340
// result := false ;
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 0
34339: ST_TO_ADDR
// end ;
34340: LD_VAR 0 3
34344: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
// if not array1 or not array2 then
34349: LD_VAR 0 1
34353: NOT
34354: PUSH
34355: LD_VAR 0 2
34359: NOT
34360: OR
34361: IFFALSE 34365
// exit ;
34363: GO 34429
// result := true ;
34365: LD_ADDR_VAR 0 3
34369: PUSH
34370: LD_INT 1
34372: ST_TO_ADDR
// for i = 1 to array1 do
34373: LD_ADDR_VAR 0 4
34377: PUSH
34378: DOUBLE
34379: LD_INT 1
34381: DEC
34382: ST_TO_ADDR
34383: LD_VAR 0 1
34387: PUSH
34388: FOR_TO
34389: IFFALSE 34427
// if array1 [ i ] <> array2 [ i ] then
34391: LD_VAR 0 1
34395: PUSH
34396: LD_VAR 0 4
34400: ARRAY
34401: PUSH
34402: LD_VAR 0 2
34406: PUSH
34407: LD_VAR 0 4
34411: ARRAY
34412: NONEQUAL
34413: IFFALSE 34425
// begin result := false ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_INT 0
34422: ST_TO_ADDR
// break ;
34423: GO 34427
// end ;
34425: GO 34388
34427: POP
34428: POP
// end ;
34429: LD_VAR 0 3
34433: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
34438: PPUSH
// pom := GetBase ( fac ) ;
34439: LD_ADDR_VAR 0 5
34443: PUSH
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 274
34453: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34454: LD_ADDR_VAR 0 4
34458: PUSH
34459: LD_VAR 0 2
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 2
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PPUSH
34477: LD_VAR 0 2
34481: PUSH
34482: LD_INT 3
34484: ARRAY
34485: PPUSH
34486: LD_VAR 0 2
34490: PUSH
34491: LD_INT 4
34493: ARRAY
34494: PPUSH
34495: CALL_OW 449
34499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: LD_VAR 0 5
34509: PPUSH
34510: LD_INT 1
34512: PPUSH
34513: CALL_OW 275
34517: PUSH
34518: LD_VAR 0 4
34522: PUSH
34523: LD_INT 1
34525: ARRAY
34526: GREATEREQUAL
34527: PUSH
34528: LD_VAR 0 5
34532: PPUSH
34533: LD_INT 2
34535: PPUSH
34536: CALL_OW 275
34540: PUSH
34541: LD_VAR 0 4
34545: PUSH
34546: LD_INT 2
34548: ARRAY
34549: GREATEREQUAL
34550: AND
34551: PUSH
34552: LD_VAR 0 5
34556: PPUSH
34557: LD_INT 3
34559: PPUSH
34560: CALL_OW 275
34564: PUSH
34565: LD_VAR 0 4
34569: PUSH
34570: LD_INT 3
34572: ARRAY
34573: GREATEREQUAL
34574: AND
34575: ST_TO_ADDR
// end ;
34576: LD_VAR 0 3
34580: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34581: LD_INT 0
34583: PPUSH
34584: PPUSH
34585: PPUSH
34586: PPUSH
// pom := GetBase ( building ) ;
34587: LD_ADDR_VAR 0 3
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 274
34601: ST_TO_ADDR
// if not pom then
34602: LD_VAR 0 3
34606: NOT
34607: IFFALSE 34611
// exit ;
34609: GO 34781
// btype := GetBType ( building ) ;
34611: LD_ADDR_VAR 0 5
34615: PUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 266
34625: ST_TO_ADDR
// if btype = b_armoury then
34626: LD_VAR 0 5
34630: PUSH
34631: LD_INT 4
34633: EQUAL
34634: IFFALSE 34644
// btype := b_barracks ;
34636: LD_ADDR_VAR 0 5
34640: PUSH
34641: LD_INT 5
34643: ST_TO_ADDR
// if btype = b_depot then
34644: LD_VAR 0 5
34648: PUSH
34649: LD_INT 0
34651: EQUAL
34652: IFFALSE 34662
// btype := b_warehouse ;
34654: LD_ADDR_VAR 0 5
34658: PUSH
34659: LD_INT 1
34661: ST_TO_ADDR
// if btype = b_workshop then
34662: LD_VAR 0 5
34666: PUSH
34667: LD_INT 2
34669: EQUAL
34670: IFFALSE 34680
// btype := b_factory ;
34672: LD_ADDR_VAR 0 5
34676: PUSH
34677: LD_INT 3
34679: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34680: LD_ADDR_VAR 0 4
34684: PUSH
34685: LD_VAR 0 5
34689: PPUSH
34690: LD_VAR 0 1
34694: PPUSH
34695: CALL_OW 248
34699: PPUSH
34700: CALL_OW 450
34704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34705: LD_ADDR_VAR 0 2
34709: PUSH
34710: LD_VAR 0 3
34714: PPUSH
34715: LD_INT 1
34717: PPUSH
34718: CALL_OW 275
34722: PUSH
34723: LD_VAR 0 4
34727: PUSH
34728: LD_INT 1
34730: ARRAY
34731: GREATEREQUAL
34732: PUSH
34733: LD_VAR 0 3
34737: PPUSH
34738: LD_INT 2
34740: PPUSH
34741: CALL_OW 275
34745: PUSH
34746: LD_VAR 0 4
34750: PUSH
34751: LD_INT 2
34753: ARRAY
34754: GREATEREQUAL
34755: AND
34756: PUSH
34757: LD_VAR 0 3
34761: PPUSH
34762: LD_INT 3
34764: PPUSH
34765: CALL_OW 275
34769: PUSH
34770: LD_VAR 0 4
34774: PUSH
34775: LD_INT 3
34777: ARRAY
34778: GREATEREQUAL
34779: AND
34780: ST_TO_ADDR
// end ;
34781: LD_VAR 0 2
34785: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34786: LD_INT 0
34788: PPUSH
34789: PPUSH
34790: PPUSH
// pom := GetBase ( building ) ;
34791: LD_ADDR_VAR 0 4
34795: PUSH
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL_OW 274
34805: ST_TO_ADDR
// if not pom then
34806: LD_VAR 0 4
34810: NOT
34811: IFFALSE 34815
// exit ;
34813: GO 34916
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34815: LD_ADDR_VAR 0 5
34819: PUSH
34820: LD_VAR 0 2
34824: PPUSH
34825: LD_VAR 0 1
34829: PPUSH
34830: CALL_OW 248
34834: PPUSH
34835: CALL_OW 450
34839: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_VAR 0 4
34849: PPUSH
34850: LD_INT 1
34852: PPUSH
34853: CALL_OW 275
34857: PUSH
34858: LD_VAR 0 5
34862: PUSH
34863: LD_INT 1
34865: ARRAY
34866: GREATEREQUAL
34867: PUSH
34868: LD_VAR 0 4
34872: PPUSH
34873: LD_INT 2
34875: PPUSH
34876: CALL_OW 275
34880: PUSH
34881: LD_VAR 0 5
34885: PUSH
34886: LD_INT 2
34888: ARRAY
34889: GREATEREQUAL
34890: AND
34891: PUSH
34892: LD_VAR 0 4
34896: PPUSH
34897: LD_INT 3
34899: PPUSH
34900: CALL_OW 275
34904: PUSH
34905: LD_VAR 0 5
34909: PUSH
34910: LD_INT 3
34912: ARRAY
34913: GREATEREQUAL
34914: AND
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 3
34920: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
// result := false ;
34934: LD_ADDR_VAR 0 8
34938: PUSH
34939: LD_INT 0
34941: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34942: LD_VAR 0 5
34946: NOT
34947: PUSH
34948: LD_VAR 0 1
34952: NOT
34953: OR
34954: PUSH
34955: LD_VAR 0 2
34959: NOT
34960: OR
34961: PUSH
34962: LD_VAR 0 3
34966: NOT
34967: OR
34968: IFFALSE 34972
// exit ;
34970: GO 35786
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34972: LD_ADDR_VAR 0 14
34976: PUSH
34977: LD_VAR 0 1
34981: PPUSH
34982: LD_VAR 0 2
34986: PPUSH
34987: LD_VAR 0 3
34991: PPUSH
34992: LD_VAR 0 4
34996: PPUSH
34997: LD_VAR 0 5
35001: PUSH
35002: LD_INT 1
35004: ARRAY
35005: PPUSH
35006: CALL_OW 248
35010: PPUSH
35011: LD_INT 0
35013: PPUSH
35014: CALL 37039 0 6
35018: ST_TO_ADDR
// if not hexes then
35019: LD_VAR 0 14
35023: NOT
35024: IFFALSE 35028
// exit ;
35026: GO 35786
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35028: LD_ADDR_VAR 0 17
35032: PUSH
35033: LD_VAR 0 5
35037: PPUSH
35038: LD_INT 22
35040: PUSH
35041: LD_VAR 0 13
35045: PPUSH
35046: CALL_OW 255
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: LD_INT 30
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 30
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PPUSH
35087: CALL_OW 72
35091: ST_TO_ADDR
// for i = 1 to hexes do
35092: LD_ADDR_VAR 0 9
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 14
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35784
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35110: LD_ADDR_VAR 0 13
35114: PUSH
35115: LD_VAR 0 14
35119: PUSH
35120: LD_VAR 0 9
35124: ARRAY
35125: PUSH
35126: LD_INT 1
35128: ARRAY
35129: PPUSH
35130: LD_VAR 0 14
35134: PUSH
35135: LD_VAR 0 9
35139: ARRAY
35140: PUSH
35141: LD_INT 2
35143: ARRAY
35144: PPUSH
35145: CALL_OW 428
35149: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35150: LD_VAR 0 14
35154: PUSH
35155: LD_VAR 0 9
35159: ARRAY
35160: PUSH
35161: LD_INT 1
35163: ARRAY
35164: PPUSH
35165: LD_VAR 0 14
35169: PUSH
35170: LD_VAR 0 9
35174: ARRAY
35175: PUSH
35176: LD_INT 2
35178: ARRAY
35179: PPUSH
35180: CALL_OW 351
35184: PUSH
35185: LD_VAR 0 14
35189: PUSH
35190: LD_VAR 0 9
35194: ARRAY
35195: PUSH
35196: LD_INT 1
35198: ARRAY
35199: PPUSH
35200: LD_VAR 0 14
35204: PUSH
35205: LD_VAR 0 9
35209: ARRAY
35210: PUSH
35211: LD_INT 2
35213: ARRAY
35214: PPUSH
35215: CALL_OW 488
35219: NOT
35220: OR
35221: PUSH
35222: LD_VAR 0 13
35226: PPUSH
35227: CALL_OW 247
35231: PUSH
35232: LD_INT 3
35234: EQUAL
35235: OR
35236: IFFALSE 35242
// exit ;
35238: POP
35239: POP
35240: GO 35786
// if not tmp then
35242: LD_VAR 0 13
35246: NOT
35247: IFFALSE 35251
// continue ;
35249: GO 35107
// result := true ;
35251: LD_ADDR_VAR 0 8
35255: PUSH
35256: LD_INT 1
35258: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35259: LD_VAR 0 6
35263: PUSH
35264: LD_VAR 0 13
35268: PPUSH
35269: CALL_OW 247
35273: PUSH
35274: LD_INT 2
35276: EQUAL
35277: AND
35278: PUSH
35279: LD_VAR 0 13
35283: PPUSH
35284: CALL_OW 263
35288: PUSH
35289: LD_INT 1
35291: EQUAL
35292: AND
35293: IFFALSE 35457
// begin if IsDrivenBy ( tmp ) then
35295: LD_VAR 0 13
35299: PPUSH
35300: CALL_OW 311
35304: IFFALSE 35308
// continue ;
35306: GO 35107
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35308: LD_VAR 0 6
35312: PPUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 60
35318: PUSH
35319: EMPTY
35320: LIST
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 3
35328: PUSH
35329: LD_INT 55
35331: PUSH
35332: EMPTY
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PPUSH
35343: CALL_OW 72
35347: IFFALSE 35455
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35349: LD_ADDR_VAR 0 18
35353: PUSH
35354: LD_VAR 0 6
35358: PPUSH
35359: LD_INT 3
35361: PUSH
35362: LD_INT 60
35364: PUSH
35365: EMPTY
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 3
35374: PUSH
35375: LD_INT 55
35377: PUSH
35378: EMPTY
35379: LIST
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PPUSH
35389: CALL_OW 72
35393: PUSH
35394: LD_INT 1
35396: ARRAY
35397: ST_TO_ADDR
// if IsInUnit ( driver ) then
35398: LD_VAR 0 18
35402: PPUSH
35403: CALL_OW 310
35407: IFFALSE 35418
// ComExit ( driver ) ;
35409: LD_VAR 0 18
35413: PPUSH
35414: CALL 60820 0 1
// AddComEnterUnit ( driver , tmp ) ;
35418: LD_VAR 0 18
35422: PPUSH
35423: LD_VAR 0 13
35427: PPUSH
35428: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35432: LD_VAR 0 18
35436: PPUSH
35437: LD_VAR 0 7
35441: PPUSH
35442: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35446: LD_VAR 0 18
35450: PPUSH
35451: CALL_OW 181
// end ; continue ;
35455: GO 35107
// end ; if not cleaners or not tmp in cleaners then
35457: LD_VAR 0 6
35461: NOT
35462: PUSH
35463: LD_VAR 0 13
35467: PUSH
35468: LD_VAR 0 6
35472: IN
35473: NOT
35474: OR
35475: IFFALSE 35782
// begin if dep then
35477: LD_VAR 0 17
35481: IFFALSE 35617
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35483: LD_ADDR_VAR 0 16
35487: PUSH
35488: LD_VAR 0 17
35492: PUSH
35493: LD_INT 1
35495: ARRAY
35496: PPUSH
35497: CALL_OW 250
35501: PPUSH
35502: LD_VAR 0 17
35506: PUSH
35507: LD_INT 1
35509: ARRAY
35510: PPUSH
35511: CALL_OW 254
35515: PPUSH
35516: LD_INT 5
35518: PPUSH
35519: CALL_OW 272
35523: PUSH
35524: LD_VAR 0 17
35528: PUSH
35529: LD_INT 1
35531: ARRAY
35532: PPUSH
35533: CALL_OW 251
35537: PPUSH
35538: LD_VAR 0 17
35542: PUSH
35543: LD_INT 1
35545: ARRAY
35546: PPUSH
35547: CALL_OW 254
35551: PPUSH
35552: LD_INT 5
35554: PPUSH
35555: CALL_OW 273
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35564: LD_VAR 0 16
35568: PUSH
35569: LD_INT 1
35571: ARRAY
35572: PPUSH
35573: LD_VAR 0 16
35577: PUSH
35578: LD_INT 2
35580: ARRAY
35581: PPUSH
35582: CALL_OW 488
35586: IFFALSE 35617
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35588: LD_VAR 0 13
35592: PPUSH
35593: LD_VAR 0 16
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: LD_VAR 0 16
35606: PUSH
35607: LD_INT 2
35609: ARRAY
35610: PPUSH
35611: CALL_OW 111
// continue ;
35615: GO 35107
// end ; end ; r := GetDir ( tmp ) ;
35617: LD_ADDR_VAR 0 15
35621: PUSH
35622: LD_VAR 0 13
35626: PPUSH
35627: CALL_OW 254
35631: ST_TO_ADDR
// if r = 5 then
35632: LD_VAR 0 15
35636: PUSH
35637: LD_INT 5
35639: EQUAL
35640: IFFALSE 35650
// r := 0 ;
35642: LD_ADDR_VAR 0 15
35646: PUSH
35647: LD_INT 0
35649: ST_TO_ADDR
// for j = r to 5 do
35650: LD_ADDR_VAR 0 10
35654: PUSH
35655: DOUBLE
35656: LD_VAR 0 15
35660: DEC
35661: ST_TO_ADDR
35662: LD_INT 5
35664: PUSH
35665: FOR_TO
35666: IFFALSE 35780
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35668: LD_ADDR_VAR 0 11
35672: PUSH
35673: LD_VAR 0 13
35677: PPUSH
35678: CALL_OW 250
35682: PPUSH
35683: LD_VAR 0 10
35687: PPUSH
35688: LD_INT 2
35690: PPUSH
35691: CALL_OW 272
35695: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35696: LD_ADDR_VAR 0 12
35700: PUSH
35701: LD_VAR 0 13
35705: PPUSH
35706: CALL_OW 251
35710: PPUSH
35711: LD_VAR 0 10
35715: PPUSH
35716: LD_INT 2
35718: PPUSH
35719: CALL_OW 273
35723: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35724: LD_VAR 0 11
35728: PPUSH
35729: LD_VAR 0 12
35733: PPUSH
35734: CALL_OW 488
35738: PUSH
35739: LD_VAR 0 11
35743: PPUSH
35744: LD_VAR 0 12
35748: PPUSH
35749: CALL_OW 428
35753: NOT
35754: AND
35755: IFFALSE 35778
// begin ComMoveXY ( tmp , _x , _y ) ;
35757: LD_VAR 0 13
35761: PPUSH
35762: LD_VAR 0 11
35766: PPUSH
35767: LD_VAR 0 12
35771: PPUSH
35772: CALL_OW 111
// break ;
35776: GO 35780
// end ; end ;
35778: GO 35665
35780: POP
35781: POP
// end ; end ;
35782: GO 35107
35784: POP
35785: POP
// end ;
35786: LD_VAR 0 8
35790: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35791: LD_INT 0
35793: PPUSH
// result := true ;
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_INT 1
35801: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35802: LD_VAR 0 2
35806: PUSH
35807: LD_INT 24
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35821
35813: LD_INT 33
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35821
35819: GO 35846
35821: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35822: LD_ADDR_VAR 0 3
35826: PUSH
35827: LD_INT 32
35829: PPUSH
35830: LD_VAR 0 1
35834: PPUSH
35835: CALL_OW 321
35839: PUSH
35840: LD_INT 2
35842: EQUAL
35843: ST_TO_ADDR
35844: GO 36162
35846: LD_INT 20
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35854
35852: GO 35879
35854: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_INT 6
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 321
35872: PUSH
35873: LD_INT 2
35875: EQUAL
35876: ST_TO_ADDR
35877: GO 36162
35879: LD_INT 22
35881: DOUBLE
35882: EQUAL
35883: IFTRUE 35893
35885: LD_INT 36
35887: DOUBLE
35888: EQUAL
35889: IFTRUE 35893
35891: GO 35918
35893: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35894: LD_ADDR_VAR 0 3
35898: PUSH
35899: LD_INT 15
35901: PPUSH
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 321
35911: PUSH
35912: LD_INT 2
35914: EQUAL
35915: ST_TO_ADDR
35916: GO 36162
35918: LD_INT 30
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35926
35924: GO 35951
35926: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: LD_INT 20
35934: PPUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 321
35944: PUSH
35945: LD_INT 2
35947: EQUAL
35948: ST_TO_ADDR
35949: GO 36162
35951: LD_INT 28
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35965
35957: LD_INT 21
35959: DOUBLE
35960: EQUAL
35961: IFTRUE 35965
35963: GO 35990
35965: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35966: LD_ADDR_VAR 0 3
35970: PUSH
35971: LD_INT 21
35973: PPUSH
35974: LD_VAR 0 1
35978: PPUSH
35979: CALL_OW 321
35983: PUSH
35984: LD_INT 2
35986: EQUAL
35987: ST_TO_ADDR
35988: GO 36162
35990: LD_INT 16
35992: DOUBLE
35993: EQUAL
35994: IFTRUE 35998
35996: GO 36023
35998: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35999: LD_ADDR_VAR 0 3
36003: PUSH
36004: LD_INT 84
36006: PPUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 321
36016: PUSH
36017: LD_INT 2
36019: EQUAL
36020: ST_TO_ADDR
36021: GO 36162
36023: LD_INT 19
36025: DOUBLE
36026: EQUAL
36027: IFTRUE 36037
36029: LD_INT 23
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36062
36037: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: LD_INT 83
36045: PPUSH
36046: LD_VAR 0 1
36050: PPUSH
36051: CALL_OW 321
36055: PUSH
36056: LD_INT 2
36058: EQUAL
36059: ST_TO_ADDR
36060: GO 36162
36062: LD_INT 17
36064: DOUBLE
36065: EQUAL
36066: IFTRUE 36070
36068: GO 36095
36070: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36071: LD_ADDR_VAR 0 3
36075: PUSH
36076: LD_INT 39
36078: PPUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 321
36088: PUSH
36089: LD_INT 2
36091: EQUAL
36092: ST_TO_ADDR
36093: GO 36162
36095: LD_INT 18
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36103
36101: GO 36128
36103: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36104: LD_ADDR_VAR 0 3
36108: PUSH
36109: LD_INT 40
36111: PPUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 321
36121: PUSH
36122: LD_INT 2
36124: EQUAL
36125: ST_TO_ADDR
36126: GO 36162
36128: LD_INT 27
36130: DOUBLE
36131: EQUAL
36132: IFTRUE 36136
36134: GO 36161
36136: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36137: LD_ADDR_VAR 0 3
36141: PUSH
36142: LD_INT 35
36144: PPUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 321
36154: PUSH
36155: LD_INT 2
36157: EQUAL
36158: ST_TO_ADDR
36159: GO 36162
36161: POP
// end ;
36162: LD_VAR 0 3
36166: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36167: LD_INT 0
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
// result := false ;
36180: LD_ADDR_VAR 0 6
36184: PUSH
36185: LD_INT 0
36187: ST_TO_ADDR
// if btype = b_depot then
36188: LD_VAR 0 2
36192: PUSH
36193: LD_INT 0
36195: EQUAL
36196: IFFALSE 36208
// begin result := true ;
36198: LD_ADDR_VAR 0 6
36202: PUSH
36203: LD_INT 1
36205: ST_TO_ADDR
// exit ;
36206: GO 37034
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36208: LD_VAR 0 1
36212: NOT
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 266
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: IN
36234: NOT
36235: OR
36236: PUSH
36237: LD_VAR 0 2
36241: NOT
36242: OR
36243: PUSH
36244: LD_VAR 0 5
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 4
36263: PUSH
36264: LD_INT 5
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: IN
36275: NOT
36276: OR
36277: PUSH
36278: LD_VAR 0 3
36282: PPUSH
36283: LD_VAR 0 4
36287: PPUSH
36288: CALL_OW 488
36292: NOT
36293: OR
36294: IFFALSE 36298
// exit ;
36296: GO 37034
// side := GetSide ( depot ) ;
36298: LD_ADDR_VAR 0 9
36302: PUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: CALL_OW 255
36312: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36313: LD_VAR 0 9
36317: PPUSH
36318: LD_VAR 0 2
36322: PPUSH
36323: CALL 35791 0 2
36327: NOT
36328: IFFALSE 36332
// exit ;
36330: GO 37034
// pom := GetBase ( depot ) ;
36332: LD_ADDR_VAR 0 10
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 274
36346: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36347: LD_ADDR_VAR 0 11
36351: PUSH
36352: LD_VAR 0 2
36356: PPUSH
36357: LD_VAR 0 1
36361: PPUSH
36362: CALL_OW 248
36366: PPUSH
36367: CALL_OW 450
36371: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36372: LD_VAR 0 10
36376: PPUSH
36377: LD_INT 1
36379: PPUSH
36380: CALL_OW 275
36384: PUSH
36385: LD_VAR 0 11
36389: PUSH
36390: LD_INT 1
36392: ARRAY
36393: GREATEREQUAL
36394: PUSH
36395: LD_VAR 0 10
36399: PPUSH
36400: LD_INT 2
36402: PPUSH
36403: CALL_OW 275
36407: PUSH
36408: LD_VAR 0 11
36412: PUSH
36413: LD_INT 2
36415: ARRAY
36416: GREATEREQUAL
36417: AND
36418: PUSH
36419: LD_VAR 0 10
36423: PPUSH
36424: LD_INT 3
36426: PPUSH
36427: CALL_OW 275
36431: PUSH
36432: LD_VAR 0 11
36436: PUSH
36437: LD_INT 3
36439: ARRAY
36440: GREATEREQUAL
36441: AND
36442: NOT
36443: IFFALSE 36447
// exit ;
36445: GO 37034
// if GetBType ( depot ) = b_depot then
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 266
36456: PUSH
36457: LD_INT 0
36459: EQUAL
36460: IFFALSE 36472
// dist := 28 else
36462: LD_ADDR_VAR 0 14
36466: PUSH
36467: LD_INT 28
36469: ST_TO_ADDR
36470: GO 36480
// dist := 36 ;
36472: LD_ADDR_VAR 0 14
36476: PUSH
36477: LD_INT 36
36479: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36480: LD_VAR 0 1
36484: PPUSH
36485: LD_VAR 0 3
36489: PPUSH
36490: LD_VAR 0 4
36494: PPUSH
36495: CALL_OW 297
36499: PUSH
36500: LD_VAR 0 14
36504: GREATER
36505: IFFALSE 36509
// exit ;
36507: GO 37034
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36509: LD_ADDR_VAR 0 12
36513: PUSH
36514: LD_VAR 0 2
36518: PPUSH
36519: LD_VAR 0 3
36523: PPUSH
36524: LD_VAR 0 4
36528: PPUSH
36529: LD_VAR 0 5
36533: PPUSH
36534: LD_VAR 0 1
36538: PPUSH
36539: CALL_OW 248
36543: PPUSH
36544: LD_INT 0
36546: PPUSH
36547: CALL 37039 0 6
36551: ST_TO_ADDR
// if not hexes then
36552: LD_VAR 0 12
36556: NOT
36557: IFFALSE 36561
// exit ;
36559: GO 37034
// hex := GetHexInfo ( x , y ) ;
36561: LD_ADDR_VAR 0 15
36565: PUSH
36566: LD_VAR 0 3
36570: PPUSH
36571: LD_VAR 0 4
36575: PPUSH
36576: CALL_OW 546
36580: ST_TO_ADDR
// if hex [ 1 ] then
36581: LD_VAR 0 15
36585: PUSH
36586: LD_INT 1
36588: ARRAY
36589: IFFALSE 36593
// exit ;
36591: GO 37034
// height := hex [ 2 ] ;
36593: LD_ADDR_VAR 0 13
36597: PUSH
36598: LD_VAR 0 15
36602: PUSH
36603: LD_INT 2
36605: ARRAY
36606: ST_TO_ADDR
// for i = 1 to hexes do
36607: LD_ADDR_VAR 0 7
36611: PUSH
36612: DOUBLE
36613: LD_INT 1
36615: DEC
36616: ST_TO_ADDR
36617: LD_VAR 0 12
36621: PUSH
36622: FOR_TO
36623: IFFALSE 36953
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36625: LD_VAR 0 12
36629: PUSH
36630: LD_VAR 0 7
36634: ARRAY
36635: PUSH
36636: LD_INT 1
36638: ARRAY
36639: PPUSH
36640: LD_VAR 0 12
36644: PUSH
36645: LD_VAR 0 7
36649: ARRAY
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: PPUSH
36655: CALL_OW 488
36659: NOT
36660: PUSH
36661: LD_VAR 0 12
36665: PUSH
36666: LD_VAR 0 7
36670: ARRAY
36671: PUSH
36672: LD_INT 1
36674: ARRAY
36675: PPUSH
36676: LD_VAR 0 12
36680: PUSH
36681: LD_VAR 0 7
36685: ARRAY
36686: PUSH
36687: LD_INT 2
36689: ARRAY
36690: PPUSH
36691: CALL_OW 428
36695: PUSH
36696: LD_INT 0
36698: GREATER
36699: OR
36700: PUSH
36701: LD_VAR 0 12
36705: PUSH
36706: LD_VAR 0 7
36710: ARRAY
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: LD_VAR 0 12
36720: PUSH
36721: LD_VAR 0 7
36725: ARRAY
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: PPUSH
36731: CALL_OW 351
36735: OR
36736: IFFALSE 36742
// exit ;
36738: POP
36739: POP
36740: GO 37034
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36742: LD_ADDR_VAR 0 8
36746: PUSH
36747: LD_VAR 0 12
36751: PUSH
36752: LD_VAR 0 7
36756: ARRAY
36757: PUSH
36758: LD_INT 1
36760: ARRAY
36761: PPUSH
36762: LD_VAR 0 12
36766: PUSH
36767: LD_VAR 0 7
36771: ARRAY
36772: PUSH
36773: LD_INT 2
36775: ARRAY
36776: PPUSH
36777: CALL_OW 546
36781: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36782: LD_VAR 0 8
36786: PUSH
36787: LD_INT 1
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 8
36795: PUSH
36796: LD_INT 2
36798: ARRAY
36799: PUSH
36800: LD_VAR 0 13
36804: PUSH
36805: LD_INT 2
36807: PLUS
36808: GREATER
36809: OR
36810: PUSH
36811: LD_VAR 0 8
36815: PUSH
36816: LD_INT 2
36818: ARRAY
36819: PUSH
36820: LD_VAR 0 13
36824: PUSH
36825: LD_INT 2
36827: MINUS
36828: LESS
36829: OR
36830: PUSH
36831: LD_VAR 0 8
36835: PUSH
36836: LD_INT 3
36838: ARRAY
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 8
36845: PUSH
36846: LD_INT 9
36848: PUSH
36849: LD_INT 10
36851: PUSH
36852: LD_INT 11
36854: PUSH
36855: LD_INT 12
36857: PUSH
36858: LD_INT 13
36860: PUSH
36861: LD_INT 16
36863: PUSH
36864: LD_INT 17
36866: PUSH
36867: LD_INT 18
36869: PUSH
36870: LD_INT 19
36872: PUSH
36873: LD_INT 20
36875: PUSH
36876: LD_INT 21
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: IN
36894: NOT
36895: OR
36896: PUSH
36897: LD_VAR 0 8
36901: PUSH
36902: LD_INT 5
36904: ARRAY
36905: NOT
36906: OR
36907: PUSH
36908: LD_VAR 0 8
36912: PUSH
36913: LD_INT 6
36915: ARRAY
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 7
36925: PUSH
36926: LD_INT 9
36928: PUSH
36929: LD_INT 10
36931: PUSH
36932: LD_INT 11
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: IN
36943: NOT
36944: OR
36945: IFFALSE 36951
// exit ;
36947: POP
36948: POP
36949: GO 37034
// end ;
36951: GO 36622
36953: POP
36954: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36955: LD_VAR 0 9
36959: PPUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: LD_VAR 0 4
36969: PPUSH
36970: LD_INT 20
36972: PPUSH
36973: CALL 28957 0 4
36977: PUSH
36978: LD_INT 4
36980: ARRAY
36981: IFFALSE 36985
// exit ;
36983: GO 37034
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36985: LD_VAR 0 2
36989: PUSH
36990: LD_INT 29
36992: PUSH
36993: LD_INT 30
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: IN
37000: PUSH
37001: LD_VAR 0 3
37005: PPUSH
37006: LD_VAR 0 4
37010: PPUSH
37011: LD_VAR 0 9
37015: PPUSH
37016: CALL_OW 440
37020: NOT
37021: AND
37022: IFFALSE 37026
// exit ;
37024: GO 37034
// result := true ;
37026: LD_ADDR_VAR 0 6
37030: PUSH
37031: LD_INT 1
37033: ST_TO_ADDR
// end ;
37034: LD_VAR 0 6
37038: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37039: LD_INT 0
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
37049: PPUSH
37050: PPUSH
37051: PPUSH
37052: PPUSH
37053: PPUSH
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
37065: PPUSH
37066: PPUSH
37067: PPUSH
37068: PPUSH
37069: PPUSH
37070: PPUSH
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
37087: PPUSH
37088: PPUSH
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
37093: PPUSH
37094: PPUSH
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
// result = [ ] ;
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: EMPTY
37105: ST_TO_ADDR
// temp_list = [ ] ;
37106: LD_ADDR_VAR 0 9
37110: PUSH
37111: EMPTY
37112: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37113: LD_VAR 0 4
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: LD_INT 4
37132: PUSH
37133: LD_INT 5
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: IN
37144: NOT
37145: PUSH
37146: LD_VAR 0 1
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: IN
37161: PUSH
37162: LD_VAR 0 5
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 3
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: IN
37181: NOT
37182: AND
37183: OR
37184: IFFALSE 37188
// exit ;
37186: GO 55579
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37188: LD_VAR 0 1
37192: PUSH
37193: LD_INT 6
37195: PUSH
37196: LD_INT 7
37198: PUSH
37199: LD_INT 8
37201: PUSH
37202: LD_INT 13
37204: PUSH
37205: LD_INT 12
37207: PUSH
37208: LD_INT 15
37210: PUSH
37211: LD_INT 11
37213: PUSH
37214: LD_INT 14
37216: PUSH
37217: LD_INT 10
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: IN
37231: IFFALSE 37241
// btype = b_lab ;
37233: LD_ADDR_VAR 0 1
37237: PUSH
37238: LD_INT 6
37240: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37241: LD_VAR 0 6
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: IN
37260: NOT
37261: PUSH
37262: LD_VAR 0 1
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: LD_INT 6
37281: PUSH
37282: LD_INT 36
37284: PUSH
37285: LD_INT 4
37287: PUSH
37288: LD_INT 5
37290: PUSH
37291: LD_INT 31
37293: PUSH
37294: LD_INT 32
37296: PUSH
37297: LD_INT 33
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: IN
37313: NOT
37314: PUSH
37315: LD_VAR 0 6
37319: PUSH
37320: LD_INT 1
37322: EQUAL
37323: AND
37324: OR
37325: PUSH
37326: LD_VAR 0 1
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: IN
37341: NOT
37342: PUSH
37343: LD_VAR 0 6
37347: PUSH
37348: LD_INT 2
37350: EQUAL
37351: AND
37352: OR
37353: IFFALSE 37363
// mode = 0 ;
37355: LD_ADDR_VAR 0 6
37359: PUSH
37360: LD_INT 0
37362: ST_TO_ADDR
// case mode of 0 :
37363: LD_VAR 0 6
37367: PUSH
37368: LD_INT 0
37370: DOUBLE
37371: EQUAL
37372: IFTRUE 37376
37374: GO 48829
37376: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37377: LD_ADDR_VAR 0 11
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 2
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 3
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: LD_INT 3
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37570: LD_ADDR_VAR 0 12
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: NEG
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 3
37727: NEG
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 3
37738: NEG
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37766: LD_ADDR_VAR 0 13
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: LD_INT 2
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37965: LD_ADDR_VAR 0 14
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 3
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: LD_INT 2
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38161: LD_ADDR_VAR 0 15
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38354: LD_ADDR_VAR 0 16
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: LD_INT 2
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38547: LD_ADDR_VAR 0 17
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38777: LD_ADDR_VAR 0 18
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39007: LD_ADDR_VAR 0 19
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 2
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39237: LD_ADDR_VAR 0 20
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 2
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39467: LD_ADDR_VAR 0 21
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39697: LD_ADDR_VAR 0 22
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39927: LD_ADDR_VAR 0 23
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: LD_INT 3
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 3
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40207: LD_ADDR_VAR 0 24
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40483: LD_ADDR_VAR 0 25
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 3
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 3
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40757: LD_ADDR_VAR 0 26
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 3
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 3
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41033: LD_ADDR_VAR 0 27
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 3
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41313: LD_ADDR_VAR 0 28
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 3
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 3
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41595: LD_ADDR_VAR 0 29
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: LD_INT 3
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 3
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: NEG
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41874: LD_ADDR_VAR 0 30
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42152: LD_ADDR_VAR 0 31
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 3
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42430: LD_ADDR_VAR 0 32
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 3
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42708: LD_ADDR_VAR 0 33
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 3
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 3
42952: NEG
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42987: LD_ADDR_VAR 0 34
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: LD_INT 3
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43267: LD_ADDR_VAR 0 35
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43379: LD_ADDR_VAR 0 36
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43491: LD_ADDR_VAR 0 37
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43603: LD_ADDR_VAR 0 38
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43715: LD_ADDR_VAR 0 39
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43827: LD_ADDR_VAR 0 40
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43939: LD_ADDR_VAR 0 41
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 3
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 3
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: LD_INT 3
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44289: LD_ADDR_VAR 0 42
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44639: LD_ADDR_VAR 0 43
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 3
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 3
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 3
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44987: LD_ADDR_VAR 0 44
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 3
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 3
45296: NEG
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45337: LD_ADDR_VAR 0 45
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 3
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 3
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 3
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45687: LD_ADDR_VAR 0 46
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 3
45983: NEG
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 3
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46035: LD_ADDR_VAR 0 47
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46186: LD_ADDR_VAR 0 48
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46333: LD_ADDR_VAR 0 49
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46477: LD_ADDR_VAR 0 50
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46621: LD_ADDR_VAR 0 51
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46768: LD_ADDR_VAR 0 52
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46919: LD_ADDR_VAR 0 53
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47149: LD_ADDR_VAR 0 54
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47379: LD_ADDR_VAR 0 55
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47609: LD_ADDR_VAR 0 56
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47839: LD_ADDR_VAR 0 57
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48069: LD_ADDR_VAR 0 58
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48299: LD_ADDR_VAR 0 59
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48387: LD_ADDR_VAR 0 60
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48475: LD_ADDR_VAR 0 61
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48563: LD_ADDR_VAR 0 62
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48651: LD_ADDR_VAR 0 63
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48739: LD_ADDR_VAR 0 64
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: ST_TO_ADDR
// end ; 1 :
48827: GO 54724
48829: LD_INT 1
48831: DOUBLE
48832: EQUAL
48833: IFTRUE 48837
48835: GO 51460
48837: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48838: LD_ADDR_VAR 0 11
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 3
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: LIST
48881: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48882: LD_ADDR_VAR 0 12
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48923: LD_ADDR_VAR 0 13
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48963: LD_ADDR_VAR 0 14
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49004: LD_ADDR_VAR 0 15
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49048: LD_ADDR_VAR 0 16
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 3
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49094: LD_ADDR_VAR 0 17
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49138: LD_ADDR_VAR 0 18
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49179: LD_ADDR_VAR 0 19
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49219: LD_ADDR_VAR 0 20
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 3
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49260: LD_ADDR_VAR 0 21
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49304: LD_ADDR_VAR 0 22
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: LIST
49349: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49350: LD_ADDR_VAR 0 23
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 4
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49394: LD_ADDR_VAR 0 24
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 4
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49435: LD_ADDR_VAR 0 25
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 4
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: LD_INT 4
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49475: LD_ADDR_VAR 0 26
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 3
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 4
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49516: LD_ADDR_VAR 0 27
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 4
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49560: LD_ADDR_VAR 0 28
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: LD_INT 4
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 4
49591: NEG
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49606: LD_ADDR_VAR 0 29
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 3
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 4
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 4
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 3
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 5
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 5
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 4
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 6
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 6
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 5
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49761: LD_ADDR_VAR 0 30
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 3
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 4
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 4
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 4
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 5
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 5
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 6
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 6
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49904: LD_ADDR_VAR 0 31
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 4
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 4
49951: PUSH
49952: LD_INT 4
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 4
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 5
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 5
49981: PUSH
49982: LD_INT 5
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: LD_INT 5
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 6
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 6
50011: PUSH
50012: LD_INT 6
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 5
50021: PUSH
50022: LD_INT 6
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50043: LD_ADDR_VAR 0 32
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 3
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 4
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 4
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 5
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 5
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 6
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 6
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 5
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50186: LD_ADDR_VAR 0 33
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 4
50238: NEG
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 4
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 4
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 5
50272: NEG
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 5
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 5
50295: NEG
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 6
50306: NEG
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 6
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50341: LD_ADDR_VAR 0 34
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: LD_INT 4
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 4
50396: NEG
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 4
50408: NEG
50409: PUSH
50410: LD_INT 4
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 4
50420: NEG
50421: PUSH
50422: LD_INT 5
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 5
50432: NEG
50433: PUSH
50434: LD_INT 4
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 5
50444: NEG
50445: PUSH
50446: LD_INT 5
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 5
50456: NEG
50457: PUSH
50458: LD_INT 6
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 6
50468: NEG
50469: PUSH
50470: LD_INT 5
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 6
50480: NEG
50481: PUSH
50482: LD_INT 6
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50504: LD_ADDR_VAR 0 41
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: LIST
50547: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50548: LD_ADDR_VAR 0 42
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50589: LD_ADDR_VAR 0 43
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50629: LD_ADDR_VAR 0 44
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50670: LD_ADDR_VAR 0 45
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50714: LD_ADDR_VAR 0 46
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50760: LD_ADDR_VAR 0 47
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 3
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50793: LD_ADDR_VAR 0 48
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50824: LD_ADDR_VAR 0 49
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50853: LD_ADDR_VAR 0 50
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50882: LD_ADDR_VAR 0 51
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50913: LD_ADDR_VAR 0 52
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50946: LD_ADDR_VAR 0 53
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50990: LD_ADDR_VAR 0 54
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: LIST
51030: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51031: LD_ADDR_VAR 0 55
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51071: LD_ADDR_VAR 0 56
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51112: LD_ADDR_VAR 0 57
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: LIST
51155: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51156: LD_ADDR_VAR 0 58
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51202: LD_ADDR_VAR 0 59
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51246: LD_ADDR_VAR 0 60
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51287: LD_ADDR_VAR 0 61
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51327: LD_ADDR_VAR 0 62
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51368: LD_ADDR_VAR 0 63
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51412: LD_ADDR_VAR 0 64
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: ST_TO_ADDR
// end ; 2 :
51458: GO 54724
51460: LD_INT 2
51462: DOUBLE
51463: EQUAL
51464: IFTRUE 51468
51466: GO 54723
51468: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51469: LD_ADDR_VAR 0 29
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 4
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 5
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 5
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 4
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 5
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: LD_INT 3
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 4
51589: PUSH
51590: LD_INT 3
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 4
51599: PUSH
51600: LD_INT 4
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: LD_INT 4
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 4
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 4
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 5
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 5
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 4
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 5
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 4
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 4
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 4
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 4
51854: NEG
51855: PUSH
51856: LD_INT 4
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 4
51866: NEG
51867: PUSH
51868: LD_INT 5
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: NEG
51879: PUSH
51880: LD_INT 4
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 4
51902: NEG
51903: PUSH
51904: LD_INT 3
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 5
51914: NEG
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 5
51926: NEG
51927: PUSH
51928: LD_INT 5
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 5
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 5
51950: NEG
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52007: LD_ADDR_VAR 0 30
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: LD_INT 4
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 4
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 5
52034: PUSH
52035: LD_INT 4
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 5
52044: PUSH
52045: LD_INT 5
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: LD_INT 5
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 4
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 5
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 4
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 4
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 4
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 4
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 4
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 5
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 5
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 5
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: LD_INT 4
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 3
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 4
52359: NEG
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: LD_INT 4
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: LD_INT 4
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 4
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 5
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 4
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 4
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 5
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: LD_INT 5
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52554: LD_ADDR_VAR 0 31
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 5
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 4
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 5
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 4
52710: NEG
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 4
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 4
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 4
52756: NEG
52757: PUSH
52758: LD_INT 4
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 4
52768: NEG
52769: PUSH
52770: LD_INT 5
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 4
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: NEG
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 5
52816: NEG
52817: PUSH
52818: LD_INT 4
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 5
52828: NEG
52829: PUSH
52830: LD_INT 5
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: LD_INT 5
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 5
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 4
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 3
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 4
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 4
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 4
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 4
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 5
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 5
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 4
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 5
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53104: LD_ADDR_VAR 0 32
53108: PUSH
53109: LD_INT 4
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 4
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 4
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 5
53167: NEG
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 5
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 5
53190: NEG
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 3
53225: NEG
53226: PUSH
53227: LD_INT 4
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 3
53261: NEG
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 4
53273: NEG
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 4
53285: NEG
53286: PUSH
53287: LD_INT 4
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 4
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 5
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 4
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 4
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 5
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 3
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 5
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 4
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 4
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 4
53516: PUSH
53517: LD_INT 4
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 4
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 5
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 5
53546: PUSH
53547: LD_INT 5
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 4
53556: PUSH
53557: LD_INT 5
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: LD_INT 4
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 5
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 5
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53651: LD_ADDR_VAR 0 33
53655: PUSH
53656: LD_INT 4
53658: NEG
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 4
53670: NEG
53671: PUSH
53672: LD_INT 5
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: LD_INT 4
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: NEG
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 4
53706: NEG
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 5
53718: NEG
53719: PUSH
53720: LD_INT 4
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 5
53730: NEG
53731: PUSH
53732: LD_INT 5
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: LD_INT 5
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 4
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 4
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 4
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 5
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 5
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 4
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 5
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 4
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: LD_INT 4
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 4
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 4
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 4
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 4
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 5
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 5
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 4
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 5
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 3
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54189: LD_ADDR_VAR 0 34
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 4
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 5
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 4
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 5
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 5
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 4
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 4
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 4
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 4
54391: PUSH
54392: LD_INT 4
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 5
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 5
54421: PUSH
54422: LD_INT 5
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: LD_INT 5
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 4
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 5
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 3
54471: PUSH
54472: LD_INT 5
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 4
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 4
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 4
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 4
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 5
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 5
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 5
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: ST_TO_ADDR
// end ; end ;
54721: GO 54724
54723: POP
// case btype of b_depot , b_warehouse :
54724: LD_VAR 0 1
54728: PUSH
54729: LD_INT 0
54731: DOUBLE
54732: EQUAL
54733: IFTRUE 54743
54735: LD_INT 1
54737: DOUBLE
54738: EQUAL
54739: IFTRUE 54743
54741: GO 54944
54743: POP
// case nation of nation_american :
54744: LD_VAR 0 5
54748: PUSH
54749: LD_INT 1
54751: DOUBLE
54752: EQUAL
54753: IFTRUE 54757
54755: GO 54813
54757: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54758: LD_ADDR_VAR 0 9
54762: PUSH
54763: LD_VAR 0 11
54767: PUSH
54768: LD_VAR 0 12
54772: PUSH
54773: LD_VAR 0 13
54777: PUSH
54778: LD_VAR 0 14
54782: PUSH
54783: LD_VAR 0 15
54787: PUSH
54788: LD_VAR 0 16
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: PUSH
54801: LD_VAR 0 4
54805: PUSH
54806: LD_INT 1
54808: PLUS
54809: ARRAY
54810: ST_TO_ADDR
54811: GO 54942
54813: LD_INT 2
54815: DOUBLE
54816: EQUAL
54817: IFTRUE 54821
54819: GO 54877
54821: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54822: LD_ADDR_VAR 0 9
54826: PUSH
54827: LD_VAR 0 17
54831: PUSH
54832: LD_VAR 0 18
54836: PUSH
54837: LD_VAR 0 19
54841: PUSH
54842: LD_VAR 0 20
54846: PUSH
54847: LD_VAR 0 21
54851: PUSH
54852: LD_VAR 0 22
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PUSH
54865: LD_VAR 0 4
54869: PUSH
54870: LD_INT 1
54872: PLUS
54873: ARRAY
54874: ST_TO_ADDR
54875: GO 54942
54877: LD_INT 3
54879: DOUBLE
54880: EQUAL
54881: IFTRUE 54885
54883: GO 54941
54885: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54886: LD_ADDR_VAR 0 9
54890: PUSH
54891: LD_VAR 0 23
54895: PUSH
54896: LD_VAR 0 24
54900: PUSH
54901: LD_VAR 0 25
54905: PUSH
54906: LD_VAR 0 26
54910: PUSH
54911: LD_VAR 0 27
54915: PUSH
54916: LD_VAR 0 28
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: PUSH
54929: LD_VAR 0 4
54933: PUSH
54934: LD_INT 1
54936: PLUS
54937: ARRAY
54938: ST_TO_ADDR
54939: GO 54942
54941: POP
54942: GO 55497
54944: LD_INT 2
54946: DOUBLE
54947: EQUAL
54948: IFTRUE 54958
54950: LD_INT 3
54952: DOUBLE
54953: EQUAL
54954: IFTRUE 54958
54956: GO 55014
54958: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54959: LD_ADDR_VAR 0 9
54963: PUSH
54964: LD_VAR 0 29
54968: PUSH
54969: LD_VAR 0 30
54973: PUSH
54974: LD_VAR 0 31
54978: PUSH
54979: LD_VAR 0 32
54983: PUSH
54984: LD_VAR 0 33
54988: PUSH
54989: LD_VAR 0 34
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: PUSH
55002: LD_VAR 0 4
55006: PUSH
55007: LD_INT 1
55009: PLUS
55010: ARRAY
55011: ST_TO_ADDR
55012: GO 55497
55014: LD_INT 16
55016: DOUBLE
55017: EQUAL
55018: IFTRUE 55076
55020: LD_INT 17
55022: DOUBLE
55023: EQUAL
55024: IFTRUE 55076
55026: LD_INT 18
55028: DOUBLE
55029: EQUAL
55030: IFTRUE 55076
55032: LD_INT 19
55034: DOUBLE
55035: EQUAL
55036: IFTRUE 55076
55038: LD_INT 22
55040: DOUBLE
55041: EQUAL
55042: IFTRUE 55076
55044: LD_INT 20
55046: DOUBLE
55047: EQUAL
55048: IFTRUE 55076
55050: LD_INT 21
55052: DOUBLE
55053: EQUAL
55054: IFTRUE 55076
55056: LD_INT 23
55058: DOUBLE
55059: EQUAL
55060: IFTRUE 55076
55062: LD_INT 24
55064: DOUBLE
55065: EQUAL
55066: IFTRUE 55076
55068: LD_INT 25
55070: DOUBLE
55071: EQUAL
55072: IFTRUE 55076
55074: GO 55132
55076: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55077: LD_ADDR_VAR 0 9
55081: PUSH
55082: LD_VAR 0 35
55086: PUSH
55087: LD_VAR 0 36
55091: PUSH
55092: LD_VAR 0 37
55096: PUSH
55097: LD_VAR 0 38
55101: PUSH
55102: LD_VAR 0 39
55106: PUSH
55107: LD_VAR 0 40
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: PUSH
55120: LD_VAR 0 4
55124: PUSH
55125: LD_INT 1
55127: PLUS
55128: ARRAY
55129: ST_TO_ADDR
55130: GO 55497
55132: LD_INT 6
55134: DOUBLE
55135: EQUAL
55136: IFTRUE 55188
55138: LD_INT 7
55140: DOUBLE
55141: EQUAL
55142: IFTRUE 55188
55144: LD_INT 8
55146: DOUBLE
55147: EQUAL
55148: IFTRUE 55188
55150: LD_INT 13
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55188
55156: LD_INT 12
55158: DOUBLE
55159: EQUAL
55160: IFTRUE 55188
55162: LD_INT 15
55164: DOUBLE
55165: EQUAL
55166: IFTRUE 55188
55168: LD_INT 11
55170: DOUBLE
55171: EQUAL
55172: IFTRUE 55188
55174: LD_INT 14
55176: DOUBLE
55177: EQUAL
55178: IFTRUE 55188
55180: LD_INT 10
55182: DOUBLE
55183: EQUAL
55184: IFTRUE 55188
55186: GO 55244
55188: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55189: LD_ADDR_VAR 0 9
55193: PUSH
55194: LD_VAR 0 41
55198: PUSH
55199: LD_VAR 0 42
55203: PUSH
55204: LD_VAR 0 43
55208: PUSH
55209: LD_VAR 0 44
55213: PUSH
55214: LD_VAR 0 45
55218: PUSH
55219: LD_VAR 0 46
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: PUSH
55232: LD_VAR 0 4
55236: PUSH
55237: LD_INT 1
55239: PLUS
55240: ARRAY
55241: ST_TO_ADDR
55242: GO 55497
55244: LD_INT 36
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55252
55250: GO 55308
55252: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55253: LD_ADDR_VAR 0 9
55257: PUSH
55258: LD_VAR 0 47
55262: PUSH
55263: LD_VAR 0 48
55267: PUSH
55268: LD_VAR 0 49
55272: PUSH
55273: LD_VAR 0 50
55277: PUSH
55278: LD_VAR 0 51
55282: PUSH
55283: LD_VAR 0 52
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: PUSH
55296: LD_VAR 0 4
55300: PUSH
55301: LD_INT 1
55303: PLUS
55304: ARRAY
55305: ST_TO_ADDR
55306: GO 55497
55308: LD_INT 4
55310: DOUBLE
55311: EQUAL
55312: IFTRUE 55334
55314: LD_INT 5
55316: DOUBLE
55317: EQUAL
55318: IFTRUE 55334
55320: LD_INT 34
55322: DOUBLE
55323: EQUAL
55324: IFTRUE 55334
55326: LD_INT 37
55328: DOUBLE
55329: EQUAL
55330: IFTRUE 55334
55332: GO 55390
55334: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55335: LD_ADDR_VAR 0 9
55339: PUSH
55340: LD_VAR 0 53
55344: PUSH
55345: LD_VAR 0 54
55349: PUSH
55350: LD_VAR 0 55
55354: PUSH
55355: LD_VAR 0 56
55359: PUSH
55360: LD_VAR 0 57
55364: PUSH
55365: LD_VAR 0 58
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: PUSH
55378: LD_VAR 0 4
55382: PUSH
55383: LD_INT 1
55385: PLUS
55386: ARRAY
55387: ST_TO_ADDR
55388: GO 55497
55390: LD_INT 31
55392: DOUBLE
55393: EQUAL
55394: IFTRUE 55440
55396: LD_INT 32
55398: DOUBLE
55399: EQUAL
55400: IFTRUE 55440
55402: LD_INT 33
55404: DOUBLE
55405: EQUAL
55406: IFTRUE 55440
55408: LD_INT 27
55410: DOUBLE
55411: EQUAL
55412: IFTRUE 55440
55414: LD_INT 26
55416: DOUBLE
55417: EQUAL
55418: IFTRUE 55440
55420: LD_INT 28
55422: DOUBLE
55423: EQUAL
55424: IFTRUE 55440
55426: LD_INT 29
55428: DOUBLE
55429: EQUAL
55430: IFTRUE 55440
55432: LD_INT 30
55434: DOUBLE
55435: EQUAL
55436: IFTRUE 55440
55438: GO 55496
55440: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55441: LD_ADDR_VAR 0 9
55445: PUSH
55446: LD_VAR 0 59
55450: PUSH
55451: LD_VAR 0 60
55455: PUSH
55456: LD_VAR 0 61
55460: PUSH
55461: LD_VAR 0 62
55465: PUSH
55466: LD_VAR 0 63
55470: PUSH
55471: LD_VAR 0 64
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: PUSH
55484: LD_VAR 0 4
55488: PUSH
55489: LD_INT 1
55491: PLUS
55492: ARRAY
55493: ST_TO_ADDR
55494: GO 55497
55496: POP
// temp_list2 = [ ] ;
55497: LD_ADDR_VAR 0 10
55501: PUSH
55502: EMPTY
55503: ST_TO_ADDR
// for i in temp_list do
55504: LD_ADDR_VAR 0 8
55508: PUSH
55509: LD_VAR 0 9
55513: PUSH
55514: FOR_IN
55515: IFFALSE 55567
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55517: LD_ADDR_VAR 0 10
55521: PUSH
55522: LD_VAR 0 10
55526: PUSH
55527: LD_VAR 0 8
55531: PUSH
55532: LD_INT 1
55534: ARRAY
55535: PUSH
55536: LD_VAR 0 2
55540: PLUS
55541: PUSH
55542: LD_VAR 0 8
55546: PUSH
55547: LD_INT 2
55549: ARRAY
55550: PUSH
55551: LD_VAR 0 3
55555: PLUS
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: ADD
55564: ST_TO_ADDR
55565: GO 55514
55567: POP
55568: POP
// result = temp_list2 ;
55569: LD_ADDR_VAR 0 7
55573: PUSH
55574: LD_VAR 0 10
55578: ST_TO_ADDR
// end ;
55579: LD_VAR 0 7
55583: RET
// export function EnemyInRange ( unit , dist ) ; begin
55584: LD_INT 0
55586: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55587: LD_ADDR_VAR 0 3
55591: PUSH
55592: LD_VAR 0 1
55596: PPUSH
55597: CALL_OW 255
55601: PPUSH
55602: LD_VAR 0 1
55606: PPUSH
55607: CALL_OW 250
55611: PPUSH
55612: LD_VAR 0 1
55616: PPUSH
55617: CALL_OW 251
55621: PPUSH
55622: LD_VAR 0 2
55626: PPUSH
55627: CALL 28957 0 4
55631: PUSH
55632: LD_INT 4
55634: ARRAY
55635: ST_TO_ADDR
// end ;
55636: LD_VAR 0 3
55640: RET
// export function PlayerSeeMe ( unit ) ; begin
55641: LD_INT 0
55643: PPUSH
// result := See ( your_side , unit ) ;
55644: LD_ADDR_VAR 0 2
55648: PUSH
55649: LD_OWVAR 2
55653: PPUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 292
55663: ST_TO_ADDR
// end ;
55664: LD_VAR 0 2
55668: RET
// export function ReverseDir ( unit ) ; begin
55669: LD_INT 0
55671: PPUSH
// if not unit then
55672: LD_VAR 0 1
55676: NOT
55677: IFFALSE 55681
// exit ;
55679: GO 55704
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55681: LD_ADDR_VAR 0 2
55685: PUSH
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL_OW 254
55695: PUSH
55696: LD_INT 3
55698: PLUS
55699: PUSH
55700: LD_INT 6
55702: MOD
55703: ST_TO_ADDR
// end ;
55704: LD_VAR 0 2
55708: RET
// export function ReverseArray ( array ) ; var i ; begin
55709: LD_INT 0
55711: PPUSH
55712: PPUSH
// if not array then
55713: LD_VAR 0 1
55717: NOT
55718: IFFALSE 55722
// exit ;
55720: GO 55777
// result := [ ] ;
55722: LD_ADDR_VAR 0 2
55726: PUSH
55727: EMPTY
55728: ST_TO_ADDR
// for i := array downto 1 do
55729: LD_ADDR_VAR 0 3
55733: PUSH
55734: DOUBLE
55735: LD_VAR 0 1
55739: INC
55740: ST_TO_ADDR
55741: LD_INT 1
55743: PUSH
55744: FOR_DOWNTO
55745: IFFALSE 55775
// result := Join ( result , array [ i ] ) ;
55747: LD_ADDR_VAR 0 2
55751: PUSH
55752: LD_VAR 0 2
55756: PPUSH
55757: LD_VAR 0 1
55761: PUSH
55762: LD_VAR 0 3
55766: ARRAY
55767: PPUSH
55768: CALL 60422 0 2
55772: ST_TO_ADDR
55773: GO 55744
55775: POP
55776: POP
// end ;
55777: LD_VAR 0 2
55781: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55782: LD_INT 0
55784: PPUSH
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
// if not unit or not hexes then
55790: LD_VAR 0 1
55794: NOT
55795: PUSH
55796: LD_VAR 0 2
55800: NOT
55801: OR
55802: IFFALSE 55806
// exit ;
55804: GO 55929
// dist := 9999 ;
55806: LD_ADDR_VAR 0 5
55810: PUSH
55811: LD_INT 9999
55813: ST_TO_ADDR
// for i = 1 to hexes do
55814: LD_ADDR_VAR 0 4
55818: PUSH
55819: DOUBLE
55820: LD_INT 1
55822: DEC
55823: ST_TO_ADDR
55824: LD_VAR 0 2
55828: PUSH
55829: FOR_TO
55830: IFFALSE 55917
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55832: LD_ADDR_VAR 0 6
55836: PUSH
55837: LD_VAR 0 1
55841: PPUSH
55842: LD_VAR 0 2
55846: PUSH
55847: LD_VAR 0 4
55851: ARRAY
55852: PUSH
55853: LD_INT 1
55855: ARRAY
55856: PPUSH
55857: LD_VAR 0 2
55861: PUSH
55862: LD_VAR 0 4
55866: ARRAY
55867: PUSH
55868: LD_INT 2
55870: ARRAY
55871: PPUSH
55872: CALL_OW 297
55876: ST_TO_ADDR
// if tdist < dist then
55877: LD_VAR 0 6
55881: PUSH
55882: LD_VAR 0 5
55886: LESS
55887: IFFALSE 55915
// begin hex := hexes [ i ] ;
55889: LD_ADDR_VAR 0 8
55893: PUSH
55894: LD_VAR 0 2
55898: PUSH
55899: LD_VAR 0 4
55903: ARRAY
55904: ST_TO_ADDR
// dist := tdist ;
55905: LD_ADDR_VAR 0 5
55909: PUSH
55910: LD_VAR 0 6
55914: ST_TO_ADDR
// end ; end ;
55915: GO 55829
55917: POP
55918: POP
// result := hex ;
55919: LD_ADDR_VAR 0 3
55923: PUSH
55924: LD_VAR 0 8
55928: ST_TO_ADDR
// end ;
55929: LD_VAR 0 3
55933: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55934: LD_INT 0
55936: PPUSH
55937: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55938: LD_VAR 0 1
55942: NOT
55943: PUSH
55944: LD_VAR 0 1
55948: PUSH
55949: LD_INT 21
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 23
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PPUSH
55973: CALL_OW 69
55977: IN
55978: NOT
55979: OR
55980: IFFALSE 55984
// exit ;
55982: GO 56031
// for i = 1 to 3 do
55984: LD_ADDR_VAR 0 3
55988: PUSH
55989: DOUBLE
55990: LD_INT 1
55992: DEC
55993: ST_TO_ADDR
55994: LD_INT 3
55996: PUSH
55997: FOR_TO
55998: IFFALSE 56029
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56000: LD_VAR 0 1
56004: PPUSH
56005: CALL_OW 250
56009: PPUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: CALL_OW 251
56019: PPUSH
56020: LD_INT 1
56022: PPUSH
56023: CALL_OW 453
56027: GO 55997
56029: POP
56030: POP
// end ;
56031: LD_VAR 0 2
56035: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56036: LD_INT 0
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
// if not unit or not enemy_unit then
56044: LD_VAR 0 1
56048: NOT
56049: PUSH
56050: LD_VAR 0 2
56054: NOT
56055: OR
56056: IFFALSE 56060
// exit ;
56058: GO 56527
// if GetLives ( i ) < 250 then
56060: LD_VAR 0 4
56064: PPUSH
56065: CALL_OW 256
56069: PUSH
56070: LD_INT 250
56072: LESS
56073: IFFALSE 56086
// begin ComAutodestruct ( i ) ;
56075: LD_VAR 0 4
56079: PPUSH
56080: CALL 55934 0 1
// exit ;
56084: GO 56527
// end ; x := GetX ( enemy_unit ) ;
56086: LD_ADDR_VAR 0 7
56090: PUSH
56091: LD_VAR 0 2
56095: PPUSH
56096: CALL_OW 250
56100: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56101: LD_ADDR_VAR 0 8
56105: PUSH
56106: LD_VAR 0 2
56110: PPUSH
56111: CALL_OW 251
56115: ST_TO_ADDR
// if not x or not y then
56116: LD_VAR 0 7
56120: NOT
56121: PUSH
56122: LD_VAR 0 8
56126: NOT
56127: OR
56128: IFFALSE 56132
// exit ;
56130: GO 56527
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56132: LD_ADDR_VAR 0 6
56136: PUSH
56137: LD_VAR 0 7
56141: PPUSH
56142: LD_INT 0
56144: PPUSH
56145: LD_INT 4
56147: PPUSH
56148: CALL_OW 272
56152: PUSH
56153: LD_VAR 0 8
56157: PPUSH
56158: LD_INT 0
56160: PPUSH
56161: LD_INT 4
56163: PPUSH
56164: CALL_OW 273
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_VAR 0 7
56177: PPUSH
56178: LD_INT 1
56180: PPUSH
56181: LD_INT 4
56183: PPUSH
56184: CALL_OW 272
56188: PUSH
56189: LD_VAR 0 8
56193: PPUSH
56194: LD_INT 1
56196: PPUSH
56197: LD_INT 4
56199: PPUSH
56200: CALL_OW 273
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_VAR 0 7
56213: PPUSH
56214: LD_INT 2
56216: PPUSH
56217: LD_INT 4
56219: PPUSH
56220: CALL_OW 272
56224: PUSH
56225: LD_VAR 0 8
56229: PPUSH
56230: LD_INT 2
56232: PPUSH
56233: LD_INT 4
56235: PPUSH
56236: CALL_OW 273
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_VAR 0 7
56249: PPUSH
56250: LD_INT 3
56252: PPUSH
56253: LD_INT 4
56255: PPUSH
56256: CALL_OW 272
56260: PUSH
56261: LD_VAR 0 8
56265: PPUSH
56266: LD_INT 3
56268: PPUSH
56269: LD_INT 4
56271: PPUSH
56272: CALL_OW 273
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_VAR 0 7
56285: PPUSH
56286: LD_INT 4
56288: PPUSH
56289: LD_INT 4
56291: PPUSH
56292: CALL_OW 272
56296: PUSH
56297: LD_VAR 0 8
56301: PPUSH
56302: LD_INT 4
56304: PPUSH
56305: LD_INT 4
56307: PPUSH
56308: CALL_OW 273
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_VAR 0 7
56321: PPUSH
56322: LD_INT 5
56324: PPUSH
56325: LD_INT 4
56327: PPUSH
56328: CALL_OW 272
56332: PUSH
56333: LD_VAR 0 8
56337: PPUSH
56338: LD_INT 5
56340: PPUSH
56341: LD_INT 4
56343: PPUSH
56344: CALL_OW 273
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// for i = tmp downto 1 do
56361: LD_ADDR_VAR 0 4
56365: PUSH
56366: DOUBLE
56367: LD_VAR 0 6
56371: INC
56372: ST_TO_ADDR
56373: LD_INT 1
56375: PUSH
56376: FOR_DOWNTO
56377: IFFALSE 56478
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56379: LD_VAR 0 6
56383: PUSH
56384: LD_VAR 0 4
56388: ARRAY
56389: PUSH
56390: LD_INT 1
56392: ARRAY
56393: PPUSH
56394: LD_VAR 0 6
56398: PUSH
56399: LD_VAR 0 4
56403: ARRAY
56404: PUSH
56405: LD_INT 2
56407: ARRAY
56408: PPUSH
56409: CALL_OW 488
56413: NOT
56414: PUSH
56415: LD_VAR 0 6
56419: PUSH
56420: LD_VAR 0 4
56424: ARRAY
56425: PUSH
56426: LD_INT 1
56428: ARRAY
56429: PPUSH
56430: LD_VAR 0 6
56434: PUSH
56435: LD_VAR 0 4
56439: ARRAY
56440: PUSH
56441: LD_INT 2
56443: ARRAY
56444: PPUSH
56445: CALL_OW 428
56449: PUSH
56450: LD_INT 0
56452: NONEQUAL
56453: OR
56454: IFFALSE 56476
// tmp := Delete ( tmp , i ) ;
56456: LD_ADDR_VAR 0 6
56460: PUSH
56461: LD_VAR 0 6
56465: PPUSH
56466: LD_VAR 0 4
56470: PPUSH
56471: CALL_OW 3
56475: ST_TO_ADDR
56476: GO 56376
56478: POP
56479: POP
// j := GetClosestHex ( unit , tmp ) ;
56480: LD_ADDR_VAR 0 5
56484: PUSH
56485: LD_VAR 0 1
56489: PPUSH
56490: LD_VAR 0 6
56494: PPUSH
56495: CALL 55782 0 2
56499: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56500: LD_VAR 0 1
56504: PPUSH
56505: LD_VAR 0 5
56509: PUSH
56510: LD_INT 1
56512: ARRAY
56513: PPUSH
56514: LD_VAR 0 5
56518: PUSH
56519: LD_INT 2
56521: ARRAY
56522: PPUSH
56523: CALL_OW 111
// end ;
56527: LD_VAR 0 3
56531: RET
// export function PrepareApemanSoldier ( ) ; begin
56532: LD_INT 0
56534: PPUSH
// uc_nation := 0 ;
56535: LD_ADDR_OWVAR 21
56539: PUSH
56540: LD_INT 0
56542: ST_TO_ADDR
// hc_sex := sex_male ;
56543: LD_ADDR_OWVAR 27
56547: PUSH
56548: LD_INT 1
56550: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56551: LD_ADDR_OWVAR 28
56555: PUSH
56556: LD_INT 15
56558: ST_TO_ADDR
// hc_gallery :=  ;
56559: LD_ADDR_OWVAR 33
56563: PUSH
56564: LD_STRING 
56566: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56567: LD_ADDR_OWVAR 31
56571: PUSH
56572: LD_INT 0
56574: PPUSH
56575: LD_INT 3
56577: PPUSH
56578: CALL_OW 12
56582: PUSH
56583: LD_INT 0
56585: PPUSH
56586: LD_INT 3
56588: PPUSH
56589: CALL_OW 12
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// end ;
56606: LD_VAR 0 1
56610: RET
// export function PrepareApemanEngineer ( ) ; begin
56611: LD_INT 0
56613: PPUSH
// uc_nation := 0 ;
56614: LD_ADDR_OWVAR 21
56618: PUSH
56619: LD_INT 0
56621: ST_TO_ADDR
// hc_sex := sex_male ;
56622: LD_ADDR_OWVAR 27
56626: PUSH
56627: LD_INT 1
56629: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56630: LD_ADDR_OWVAR 28
56634: PUSH
56635: LD_INT 16
56637: ST_TO_ADDR
// hc_gallery :=  ;
56638: LD_ADDR_OWVAR 33
56642: PUSH
56643: LD_STRING 
56645: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56646: LD_ADDR_OWVAR 31
56650: PUSH
56651: LD_INT 0
56653: PPUSH
56654: LD_INT 3
56656: PPUSH
56657: CALL_OW 12
56661: PUSH
56662: LD_INT 0
56664: PPUSH
56665: LD_INT 3
56667: PPUSH
56668: CALL_OW 12
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// end ;
56685: LD_VAR 0 1
56689: RET
// export function PrepareApeman ( agressivity ) ; begin
56690: LD_INT 0
56692: PPUSH
// uc_side := 0 ;
56693: LD_ADDR_OWVAR 20
56697: PUSH
56698: LD_INT 0
56700: ST_TO_ADDR
// uc_nation := 0 ;
56701: LD_ADDR_OWVAR 21
56705: PUSH
56706: LD_INT 0
56708: ST_TO_ADDR
// hc_sex := sex_male ;
56709: LD_ADDR_OWVAR 27
56713: PUSH
56714: LD_INT 1
56716: ST_TO_ADDR
// hc_class := class_apeman ;
56717: LD_ADDR_OWVAR 28
56721: PUSH
56722: LD_INT 12
56724: ST_TO_ADDR
// hc_gallery :=  ;
56725: LD_ADDR_OWVAR 33
56729: PUSH
56730: LD_STRING 
56732: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56733: LD_ADDR_OWVAR 35
56737: PUSH
56738: LD_VAR 0 1
56742: NEG
56743: PPUSH
56744: LD_VAR 0 1
56748: PPUSH
56749: CALL_OW 12
56753: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56754: LD_ADDR_OWVAR 31
56758: PUSH
56759: LD_INT 0
56761: PPUSH
56762: LD_INT 3
56764: PPUSH
56765: CALL_OW 12
56769: PUSH
56770: LD_INT 0
56772: PPUSH
56773: LD_INT 3
56775: PPUSH
56776: CALL_OW 12
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: ST_TO_ADDR
// end ;
56793: LD_VAR 0 2
56797: RET
// export function PrepareTiger ( agressivity ) ; begin
56798: LD_INT 0
56800: PPUSH
// uc_side := 0 ;
56801: LD_ADDR_OWVAR 20
56805: PUSH
56806: LD_INT 0
56808: ST_TO_ADDR
// uc_nation := 0 ;
56809: LD_ADDR_OWVAR 21
56813: PUSH
56814: LD_INT 0
56816: ST_TO_ADDR
// hc_class := class_tiger ;
56817: LD_ADDR_OWVAR 28
56821: PUSH
56822: LD_INT 14
56824: ST_TO_ADDR
// hc_gallery :=  ;
56825: LD_ADDR_OWVAR 33
56829: PUSH
56830: LD_STRING 
56832: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56833: LD_ADDR_OWVAR 35
56837: PUSH
56838: LD_VAR 0 1
56842: NEG
56843: PPUSH
56844: LD_VAR 0 1
56848: PPUSH
56849: CALL_OW 12
56853: ST_TO_ADDR
// end ;
56854: LD_VAR 0 2
56858: RET
// export function PrepareEnchidna ( ) ; begin
56859: LD_INT 0
56861: PPUSH
// uc_side := 0 ;
56862: LD_ADDR_OWVAR 20
56866: PUSH
56867: LD_INT 0
56869: ST_TO_ADDR
// uc_nation := 0 ;
56870: LD_ADDR_OWVAR 21
56874: PUSH
56875: LD_INT 0
56877: ST_TO_ADDR
// hc_class := class_baggie ;
56878: LD_ADDR_OWVAR 28
56882: PUSH
56883: LD_INT 13
56885: ST_TO_ADDR
// hc_gallery :=  ;
56886: LD_ADDR_OWVAR 33
56890: PUSH
56891: LD_STRING 
56893: ST_TO_ADDR
// end ;
56894: LD_VAR 0 1
56898: RET
// export function PrepareFrog ( ) ; begin
56899: LD_INT 0
56901: PPUSH
// uc_side := 0 ;
56902: LD_ADDR_OWVAR 20
56906: PUSH
56907: LD_INT 0
56909: ST_TO_ADDR
// uc_nation := 0 ;
56910: LD_ADDR_OWVAR 21
56914: PUSH
56915: LD_INT 0
56917: ST_TO_ADDR
// hc_class := class_frog ;
56918: LD_ADDR_OWVAR 28
56922: PUSH
56923: LD_INT 19
56925: ST_TO_ADDR
// hc_gallery :=  ;
56926: LD_ADDR_OWVAR 33
56930: PUSH
56931: LD_STRING 
56933: ST_TO_ADDR
// end ;
56934: LD_VAR 0 1
56938: RET
// export function PrepareFish ( ) ; begin
56939: LD_INT 0
56941: PPUSH
// uc_side := 0 ;
56942: LD_ADDR_OWVAR 20
56946: PUSH
56947: LD_INT 0
56949: ST_TO_ADDR
// uc_nation := 0 ;
56950: LD_ADDR_OWVAR 21
56954: PUSH
56955: LD_INT 0
56957: ST_TO_ADDR
// hc_class := class_fish ;
56958: LD_ADDR_OWVAR 28
56962: PUSH
56963: LD_INT 20
56965: ST_TO_ADDR
// hc_gallery :=  ;
56966: LD_ADDR_OWVAR 33
56970: PUSH
56971: LD_STRING 
56973: ST_TO_ADDR
// end ;
56974: LD_VAR 0 1
56978: RET
// export function PrepareBird ( ) ; begin
56979: LD_INT 0
56981: PPUSH
// uc_side := 0 ;
56982: LD_ADDR_OWVAR 20
56986: PUSH
56987: LD_INT 0
56989: ST_TO_ADDR
// uc_nation := 0 ;
56990: LD_ADDR_OWVAR 21
56994: PUSH
56995: LD_INT 0
56997: ST_TO_ADDR
// hc_class := class_phororhacos ;
56998: LD_ADDR_OWVAR 28
57002: PUSH
57003: LD_INT 18
57005: ST_TO_ADDR
// hc_gallery :=  ;
57006: LD_ADDR_OWVAR 33
57010: PUSH
57011: LD_STRING 
57013: ST_TO_ADDR
// end ;
57014: LD_VAR 0 1
57018: RET
// export function PrepareHorse ( ) ; begin
57019: LD_INT 0
57021: PPUSH
// uc_side := 0 ;
57022: LD_ADDR_OWVAR 20
57026: PUSH
57027: LD_INT 0
57029: ST_TO_ADDR
// uc_nation := 0 ;
57030: LD_ADDR_OWVAR 21
57034: PUSH
57035: LD_INT 0
57037: ST_TO_ADDR
// hc_class := class_horse ;
57038: LD_ADDR_OWVAR 28
57042: PUSH
57043: LD_INT 21
57045: ST_TO_ADDR
// hc_gallery :=  ;
57046: LD_ADDR_OWVAR 33
57050: PUSH
57051: LD_STRING 
57053: ST_TO_ADDR
// end ;
57054: LD_VAR 0 1
57058: RET
// export function PrepareMastodont ( ) ; begin
57059: LD_INT 0
57061: PPUSH
// uc_side := 0 ;
57062: LD_ADDR_OWVAR 20
57066: PUSH
57067: LD_INT 0
57069: ST_TO_ADDR
// uc_nation := 0 ;
57070: LD_ADDR_OWVAR 21
57074: PUSH
57075: LD_INT 0
57077: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57078: LD_ADDR_OWVAR 37
57082: PUSH
57083: LD_INT 31
57085: ST_TO_ADDR
// vc_control := control_rider ;
57086: LD_ADDR_OWVAR 38
57090: PUSH
57091: LD_INT 4
57093: ST_TO_ADDR
// end ;
57094: LD_VAR 0 1
57098: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57099: LD_INT 0
57101: PPUSH
57102: PPUSH
57103: PPUSH
// uc_side = 0 ;
57104: LD_ADDR_OWVAR 20
57108: PUSH
57109: LD_INT 0
57111: ST_TO_ADDR
// uc_nation = 0 ;
57112: LD_ADDR_OWVAR 21
57116: PUSH
57117: LD_INT 0
57119: ST_TO_ADDR
// InitHc_All ( ) ;
57120: CALL_OW 584
// InitVc ;
57124: CALL_OW 20
// if mastodonts then
57128: LD_VAR 0 6
57132: IFFALSE 57199
// for i = 1 to mastodonts do
57134: LD_ADDR_VAR 0 11
57138: PUSH
57139: DOUBLE
57140: LD_INT 1
57142: DEC
57143: ST_TO_ADDR
57144: LD_VAR 0 6
57148: PUSH
57149: FOR_TO
57150: IFFALSE 57197
// begin vc_chassis := 31 ;
57152: LD_ADDR_OWVAR 37
57156: PUSH
57157: LD_INT 31
57159: ST_TO_ADDR
// vc_control := control_rider ;
57160: LD_ADDR_OWVAR 38
57164: PUSH
57165: LD_INT 4
57167: ST_TO_ADDR
// animal := CreateVehicle ;
57168: LD_ADDR_VAR 0 12
57172: PUSH
57173: CALL_OW 45
57177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57178: LD_VAR 0 12
57182: PPUSH
57183: LD_VAR 0 8
57187: PPUSH
57188: LD_INT 0
57190: PPUSH
57191: CALL 59327 0 3
// end ;
57195: GO 57149
57197: POP
57198: POP
// if horses then
57199: LD_VAR 0 5
57203: IFFALSE 57270
// for i = 1 to horses do
57205: LD_ADDR_VAR 0 11
57209: PUSH
57210: DOUBLE
57211: LD_INT 1
57213: DEC
57214: ST_TO_ADDR
57215: LD_VAR 0 5
57219: PUSH
57220: FOR_TO
57221: IFFALSE 57268
// begin hc_class := 21 ;
57223: LD_ADDR_OWVAR 28
57227: PUSH
57228: LD_INT 21
57230: ST_TO_ADDR
// hc_gallery :=  ;
57231: LD_ADDR_OWVAR 33
57235: PUSH
57236: LD_STRING 
57238: ST_TO_ADDR
// animal := CreateHuman ;
57239: LD_ADDR_VAR 0 12
57243: PUSH
57244: CALL_OW 44
57248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57249: LD_VAR 0 12
57253: PPUSH
57254: LD_VAR 0 8
57258: PPUSH
57259: LD_INT 0
57261: PPUSH
57262: CALL 59327 0 3
// end ;
57266: GO 57220
57268: POP
57269: POP
// if birds then
57270: LD_VAR 0 1
57274: IFFALSE 57341
// for i = 1 to birds do
57276: LD_ADDR_VAR 0 11
57280: PUSH
57281: DOUBLE
57282: LD_INT 1
57284: DEC
57285: ST_TO_ADDR
57286: LD_VAR 0 1
57290: PUSH
57291: FOR_TO
57292: IFFALSE 57339
// begin hc_class := 18 ;
57294: LD_ADDR_OWVAR 28
57298: PUSH
57299: LD_INT 18
57301: ST_TO_ADDR
// hc_gallery =  ;
57302: LD_ADDR_OWVAR 33
57306: PUSH
57307: LD_STRING 
57309: ST_TO_ADDR
// animal := CreateHuman ;
57310: LD_ADDR_VAR 0 12
57314: PUSH
57315: CALL_OW 44
57319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57320: LD_VAR 0 12
57324: PPUSH
57325: LD_VAR 0 8
57329: PPUSH
57330: LD_INT 0
57332: PPUSH
57333: CALL 59327 0 3
// end ;
57337: GO 57291
57339: POP
57340: POP
// if tigers then
57341: LD_VAR 0 2
57345: IFFALSE 57429
// for i = 1 to tigers do
57347: LD_ADDR_VAR 0 11
57351: PUSH
57352: DOUBLE
57353: LD_INT 1
57355: DEC
57356: ST_TO_ADDR
57357: LD_VAR 0 2
57361: PUSH
57362: FOR_TO
57363: IFFALSE 57427
// begin hc_class = class_tiger ;
57365: LD_ADDR_OWVAR 28
57369: PUSH
57370: LD_INT 14
57372: ST_TO_ADDR
// hc_gallery =  ;
57373: LD_ADDR_OWVAR 33
57377: PUSH
57378: LD_STRING 
57380: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57381: LD_ADDR_OWVAR 35
57385: PUSH
57386: LD_INT 7
57388: NEG
57389: PPUSH
57390: LD_INT 7
57392: PPUSH
57393: CALL_OW 12
57397: ST_TO_ADDR
// animal := CreateHuman ;
57398: LD_ADDR_VAR 0 12
57402: PUSH
57403: CALL_OW 44
57407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57408: LD_VAR 0 12
57412: PPUSH
57413: LD_VAR 0 8
57417: PPUSH
57418: LD_INT 0
57420: PPUSH
57421: CALL 59327 0 3
// end ;
57425: GO 57362
57427: POP
57428: POP
// if apemans then
57429: LD_VAR 0 3
57433: IFFALSE 57556
// for i = 1 to apemans do
57435: LD_ADDR_VAR 0 11
57439: PUSH
57440: DOUBLE
57441: LD_INT 1
57443: DEC
57444: ST_TO_ADDR
57445: LD_VAR 0 3
57449: PUSH
57450: FOR_TO
57451: IFFALSE 57554
// begin hc_class = class_apeman ;
57453: LD_ADDR_OWVAR 28
57457: PUSH
57458: LD_INT 12
57460: ST_TO_ADDR
// hc_gallery =  ;
57461: LD_ADDR_OWVAR 33
57465: PUSH
57466: LD_STRING 
57468: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57469: LD_ADDR_OWVAR 35
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PPUSH
57478: LD_INT 2
57480: PPUSH
57481: CALL_OW 12
57485: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57486: LD_ADDR_OWVAR 31
57490: PUSH
57491: LD_INT 1
57493: PPUSH
57494: LD_INT 3
57496: PPUSH
57497: CALL_OW 12
57501: PUSH
57502: LD_INT 1
57504: PPUSH
57505: LD_INT 3
57507: PPUSH
57508: CALL_OW 12
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// animal := CreateHuman ;
57525: LD_ADDR_VAR 0 12
57529: PUSH
57530: CALL_OW 44
57534: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57535: LD_VAR 0 12
57539: PPUSH
57540: LD_VAR 0 8
57544: PPUSH
57545: LD_INT 0
57547: PPUSH
57548: CALL 59327 0 3
// end ;
57552: GO 57450
57554: POP
57555: POP
// if enchidnas then
57556: LD_VAR 0 4
57560: IFFALSE 57627
// for i = 1 to enchidnas do
57562: LD_ADDR_VAR 0 11
57566: PUSH
57567: DOUBLE
57568: LD_INT 1
57570: DEC
57571: ST_TO_ADDR
57572: LD_VAR 0 4
57576: PUSH
57577: FOR_TO
57578: IFFALSE 57625
// begin hc_class = 13 ;
57580: LD_ADDR_OWVAR 28
57584: PUSH
57585: LD_INT 13
57587: ST_TO_ADDR
// hc_gallery =  ;
57588: LD_ADDR_OWVAR 33
57592: PUSH
57593: LD_STRING 
57595: ST_TO_ADDR
// animal := CreateHuman ;
57596: LD_ADDR_VAR 0 12
57600: PUSH
57601: CALL_OW 44
57605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57606: LD_VAR 0 12
57610: PPUSH
57611: LD_VAR 0 8
57615: PPUSH
57616: LD_INT 0
57618: PPUSH
57619: CALL 59327 0 3
// end ;
57623: GO 57577
57625: POP
57626: POP
// if fishes then
57627: LD_VAR 0 7
57631: IFFALSE 57698
// for i = 1 to fishes do
57633: LD_ADDR_VAR 0 11
57637: PUSH
57638: DOUBLE
57639: LD_INT 1
57641: DEC
57642: ST_TO_ADDR
57643: LD_VAR 0 7
57647: PUSH
57648: FOR_TO
57649: IFFALSE 57696
// begin hc_class = 20 ;
57651: LD_ADDR_OWVAR 28
57655: PUSH
57656: LD_INT 20
57658: ST_TO_ADDR
// hc_gallery =  ;
57659: LD_ADDR_OWVAR 33
57663: PUSH
57664: LD_STRING 
57666: ST_TO_ADDR
// animal := CreateHuman ;
57667: LD_ADDR_VAR 0 12
57671: PUSH
57672: CALL_OW 44
57676: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57677: LD_VAR 0 12
57681: PPUSH
57682: LD_VAR 0 9
57686: PPUSH
57687: LD_INT 0
57689: PPUSH
57690: CALL 59327 0 3
// end ;
57694: GO 57648
57696: POP
57697: POP
// end ;
57698: LD_VAR 0 10
57702: RET
// export function WantHeal ( sci , unit ) ; begin
57703: LD_INT 0
57705: PPUSH
// if GetTaskList ( sci ) > 0 then
57706: LD_VAR 0 1
57710: PPUSH
57711: CALL_OW 437
57715: PUSH
57716: LD_INT 0
57718: GREATER
57719: IFFALSE 57789
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57721: LD_VAR 0 1
57725: PPUSH
57726: CALL_OW 437
57730: PUSH
57731: LD_INT 1
57733: ARRAY
57734: PUSH
57735: LD_INT 1
57737: ARRAY
57738: PUSH
57739: LD_STRING l
57741: EQUAL
57742: PUSH
57743: LD_VAR 0 1
57747: PPUSH
57748: CALL_OW 437
57752: PUSH
57753: LD_INT 1
57755: ARRAY
57756: PUSH
57757: LD_INT 4
57759: ARRAY
57760: PUSH
57761: LD_VAR 0 2
57765: EQUAL
57766: AND
57767: IFFALSE 57779
// result := true else
57769: LD_ADDR_VAR 0 3
57773: PUSH
57774: LD_INT 1
57776: ST_TO_ADDR
57777: GO 57787
// result := false ;
57779: LD_ADDR_VAR 0 3
57783: PUSH
57784: LD_INT 0
57786: ST_TO_ADDR
// end else
57787: GO 57797
// result := false ;
57789: LD_ADDR_VAR 0 3
57793: PUSH
57794: LD_INT 0
57796: ST_TO_ADDR
// end ;
57797: LD_VAR 0 3
57801: RET
// export function HealTarget ( sci ) ; begin
57802: LD_INT 0
57804: PPUSH
// if not sci then
57805: LD_VAR 0 1
57809: NOT
57810: IFFALSE 57814
// exit ;
57812: GO 57879
// result := 0 ;
57814: LD_ADDR_VAR 0 2
57818: PUSH
57819: LD_INT 0
57821: ST_TO_ADDR
// if GetTaskList ( sci ) then
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL_OW 437
57831: IFFALSE 57879
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57833: LD_VAR 0 1
57837: PPUSH
57838: CALL_OW 437
57842: PUSH
57843: LD_INT 1
57845: ARRAY
57846: PUSH
57847: LD_INT 1
57849: ARRAY
57850: PUSH
57851: LD_STRING l
57853: EQUAL
57854: IFFALSE 57879
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57856: LD_ADDR_VAR 0 2
57860: PUSH
57861: LD_VAR 0 1
57865: PPUSH
57866: CALL_OW 437
57870: PUSH
57871: LD_INT 1
57873: ARRAY
57874: PUSH
57875: LD_INT 4
57877: ARRAY
57878: ST_TO_ADDR
// end ;
57879: LD_VAR 0 2
57883: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57884: LD_INT 0
57886: PPUSH
57887: PPUSH
57888: PPUSH
57889: PPUSH
// if not base_units then
57890: LD_VAR 0 1
57894: NOT
57895: IFFALSE 57899
// exit ;
57897: GO 57986
// result := false ;
57899: LD_ADDR_VAR 0 2
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57907: LD_ADDR_VAR 0 5
57911: PUSH
57912: LD_VAR 0 1
57916: PPUSH
57917: LD_INT 21
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PPUSH
57927: CALL_OW 72
57931: ST_TO_ADDR
// if not tmp then
57932: LD_VAR 0 5
57936: NOT
57937: IFFALSE 57941
// exit ;
57939: GO 57986
// for i in tmp do
57941: LD_ADDR_VAR 0 3
57945: PUSH
57946: LD_VAR 0 5
57950: PUSH
57951: FOR_IN
57952: IFFALSE 57984
// begin result := EnemyInRange ( i , 22 ) ;
57954: LD_ADDR_VAR 0 2
57958: PUSH
57959: LD_VAR 0 3
57963: PPUSH
57964: LD_INT 22
57966: PPUSH
57967: CALL 55584 0 2
57971: ST_TO_ADDR
// if result then
57972: LD_VAR 0 2
57976: IFFALSE 57982
// exit ;
57978: POP
57979: POP
57980: GO 57986
// end ;
57982: GO 57951
57984: POP
57985: POP
// end ;
57986: LD_VAR 0 2
57990: RET
// export function FilterByTag ( units , tag ) ; begin
57991: LD_INT 0
57993: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57994: LD_ADDR_VAR 0 3
57998: PUSH
57999: LD_VAR 0 1
58003: PPUSH
58004: LD_INT 120
58006: PUSH
58007: LD_VAR 0 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PPUSH
58016: CALL_OW 72
58020: ST_TO_ADDR
// end ;
58021: LD_VAR 0 3
58025: RET
// export function IsDriver ( un ) ; begin
58026: LD_INT 0
58028: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58029: LD_ADDR_VAR 0 2
58033: PUSH
58034: LD_VAR 0 1
58038: PUSH
58039: LD_INT 55
58041: PUSH
58042: EMPTY
58043: LIST
58044: PPUSH
58045: CALL_OW 69
58049: IN
58050: ST_TO_ADDR
// end ;
58051: LD_VAR 0 2
58055: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58056: LD_INT 0
58058: PPUSH
58059: PPUSH
// list := [ ] ;
58060: LD_ADDR_VAR 0 5
58064: PUSH
58065: EMPTY
58066: ST_TO_ADDR
// case d of 0 :
58067: LD_VAR 0 3
58071: PUSH
58072: LD_INT 0
58074: DOUBLE
58075: EQUAL
58076: IFTRUE 58080
58078: GO 58213
58080: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58081: LD_ADDR_VAR 0 5
58085: PUSH
58086: LD_VAR 0 1
58090: PUSH
58091: LD_INT 4
58093: MINUS
58094: PUSH
58095: LD_VAR 0 2
58099: PUSH
58100: LD_INT 4
58102: MINUS
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: PUSH
58112: LD_VAR 0 1
58116: PUSH
58117: LD_INT 3
58119: MINUS
58120: PUSH
58121: LD_VAR 0 2
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: PUSH
58134: LD_VAR 0 1
58138: PUSH
58139: LD_INT 4
58141: PLUS
58142: PUSH
58143: LD_VAR 0 2
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: PUSH
58156: LD_VAR 0 1
58160: PUSH
58161: LD_INT 3
58163: PLUS
58164: PUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_INT 3
58172: PLUS
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: PUSH
58182: LD_VAR 0 1
58186: PUSH
58187: LD_VAR 0 2
58191: PUSH
58192: LD_INT 4
58194: PLUS
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: ST_TO_ADDR
// end ; 1 :
58211: GO 58911
58213: LD_INT 1
58215: DOUBLE
58216: EQUAL
58217: IFTRUE 58221
58219: GO 58354
58221: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58222: LD_ADDR_VAR 0 5
58226: PUSH
58227: LD_VAR 0 1
58231: PUSH
58232: LD_VAR 0 2
58236: PUSH
58237: LD_INT 4
58239: MINUS
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: PUSH
58249: LD_VAR 0 1
58253: PUSH
58254: LD_INT 3
58256: MINUS
58257: PUSH
58258: LD_VAR 0 2
58262: PUSH
58263: LD_INT 3
58265: MINUS
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: PUSH
58275: LD_VAR 0 1
58279: PUSH
58280: LD_INT 4
58282: MINUS
58283: PUSH
58284: LD_VAR 0 2
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: PUSH
58297: LD_VAR 0 1
58301: PUSH
58302: LD_VAR 0 2
58306: PUSH
58307: LD_INT 3
58309: PLUS
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: PUSH
58319: LD_VAR 0 1
58323: PUSH
58324: LD_INT 4
58326: PLUS
58327: PUSH
58328: LD_VAR 0 2
58332: PUSH
58333: LD_INT 4
58335: PLUS
58336: PUSH
58337: LD_INT 5
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// end ; 2 :
58352: GO 58911
58354: LD_INT 2
58356: DOUBLE
58357: EQUAL
58358: IFTRUE 58362
58360: GO 58491
58362: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58363: LD_ADDR_VAR 0 5
58367: PUSH
58368: LD_VAR 0 1
58372: PUSH
58373: LD_VAR 0 2
58377: PUSH
58378: LD_INT 3
58380: MINUS
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: PUSH
58390: LD_VAR 0 1
58394: PUSH
58395: LD_INT 4
58397: PLUS
58398: PUSH
58399: LD_VAR 0 2
58403: PUSH
58404: LD_INT 4
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: PUSH
58412: LD_VAR 0 1
58416: PUSH
58417: LD_VAR 0 2
58421: PUSH
58422: LD_INT 4
58424: PLUS
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_INT 3
58441: MINUS
58442: PUSH
58443: LD_VAR 0 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: PUSH
58456: LD_VAR 0 1
58460: PUSH
58461: LD_INT 4
58463: MINUS
58464: PUSH
58465: LD_VAR 0 2
58469: PUSH
58470: LD_INT 4
58472: MINUS
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: ST_TO_ADDR
// end ; 3 :
58489: GO 58911
58491: LD_INT 3
58493: DOUBLE
58494: EQUAL
58495: IFTRUE 58499
58497: GO 58632
58499: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58500: LD_ADDR_VAR 0 5
58504: PUSH
58505: LD_VAR 0 1
58509: PUSH
58510: LD_INT 3
58512: PLUS
58513: PUSH
58514: LD_VAR 0 2
58518: PUSH
58519: LD_INT 4
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: PUSH
58527: LD_VAR 0 1
58531: PUSH
58532: LD_INT 4
58534: PLUS
58535: PUSH
58536: LD_VAR 0 2
58540: PUSH
58541: LD_INT 4
58543: PLUS
58544: PUSH
58545: LD_INT 5
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: PUSH
58553: LD_VAR 0 1
58557: PUSH
58558: LD_INT 4
58560: MINUS
58561: PUSH
58562: LD_VAR 0 2
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: PUSH
58575: LD_VAR 0 1
58579: PUSH
58580: LD_VAR 0 2
58584: PUSH
58585: LD_INT 4
58587: MINUS
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: PUSH
58597: LD_VAR 0 1
58601: PUSH
58602: LD_INT 3
58604: MINUS
58605: PUSH
58606: LD_VAR 0 2
58610: PUSH
58611: LD_INT 3
58613: MINUS
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// end ; 4 :
58630: GO 58911
58632: LD_INT 4
58634: DOUBLE
58635: EQUAL
58636: IFTRUE 58640
58638: GO 58773
58640: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58641: LD_ADDR_VAR 0 5
58645: PUSH
58646: LD_VAR 0 1
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 4
58658: PLUS
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: PUSH
58668: LD_VAR 0 1
58672: PUSH
58673: LD_INT 3
58675: PLUS
58676: PUSH
58677: LD_VAR 0 2
58681: PUSH
58682: LD_INT 3
58684: PLUS
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: PUSH
58694: LD_VAR 0 1
58698: PUSH
58699: LD_INT 4
58701: PLUS
58702: PUSH
58703: LD_VAR 0 2
58707: PUSH
58708: LD_INT 4
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: PUSH
58716: LD_VAR 0 1
58720: PUSH
58721: LD_VAR 0 2
58725: PUSH
58726: LD_INT 3
58728: MINUS
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: PUSH
58738: LD_VAR 0 1
58742: PUSH
58743: LD_INT 4
58745: MINUS
58746: PUSH
58747: LD_VAR 0 2
58751: PUSH
58752: LD_INT 4
58754: MINUS
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// end ; 5 :
58771: GO 58911
58773: LD_INT 5
58775: DOUBLE
58776: EQUAL
58777: IFTRUE 58781
58779: GO 58910
58781: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58782: LD_ADDR_VAR 0 5
58786: PUSH
58787: LD_VAR 0 1
58791: PUSH
58792: LD_INT 4
58794: MINUS
58795: PUSH
58796: LD_VAR 0 2
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: PUSH
58809: LD_VAR 0 1
58813: PUSH
58814: LD_VAR 0 2
58818: PUSH
58819: LD_INT 4
58821: MINUS
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: PUSH
58831: LD_VAR 0 1
58835: PUSH
58836: LD_INT 4
58838: PLUS
58839: PUSH
58840: LD_VAR 0 2
58844: PUSH
58845: LD_INT 4
58847: PLUS
58848: PUSH
58849: LD_INT 5
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: PUSH
58857: LD_VAR 0 1
58861: PUSH
58862: LD_INT 3
58864: PLUS
58865: PUSH
58866: LD_VAR 0 2
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: LIST
58878: PUSH
58879: LD_VAR 0 1
58883: PUSH
58884: LD_VAR 0 2
58888: PUSH
58889: LD_INT 3
58891: PLUS
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// end ; end ;
58908: GO 58911
58910: POP
// result := list ;
58911: LD_ADDR_VAR 0 4
58915: PUSH
58916: LD_VAR 0 5
58920: ST_TO_ADDR
// end ;
58921: LD_VAR 0 4
58925: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58926: LD_INT 0
58928: PPUSH
58929: PPUSH
58930: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58931: LD_VAR 0 1
58935: NOT
58936: PUSH
58937: LD_VAR 0 2
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: IN
58960: NOT
58961: OR
58962: IFFALSE 58966
// exit ;
58964: GO 59049
// tmp := [ ] ;
58966: LD_ADDR_VAR 0 5
58970: PUSH
58971: EMPTY
58972: ST_TO_ADDR
// for i in units do
58973: LD_ADDR_VAR 0 4
58977: PUSH
58978: LD_VAR 0 1
58982: PUSH
58983: FOR_IN
58984: IFFALSE 59018
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58986: LD_ADDR_VAR 0 5
58990: PUSH
58991: LD_VAR 0 5
58995: PPUSH
58996: LD_VAR 0 4
59000: PPUSH
59001: LD_VAR 0 2
59005: PPUSH
59006: CALL_OW 259
59010: PPUSH
59011: CALL 60422 0 2
59015: ST_TO_ADDR
59016: GO 58983
59018: POP
59019: POP
// if not tmp then
59020: LD_VAR 0 5
59024: NOT
59025: IFFALSE 59029
// exit ;
59027: GO 59049
// result := SortListByListDesc ( units , tmp ) ;
59029: LD_ADDR_VAR 0 3
59033: PUSH
59034: LD_VAR 0 1
59038: PPUSH
59039: LD_VAR 0 5
59043: PPUSH
59044: CALL_OW 77
59048: ST_TO_ADDR
// end ;
59049: LD_VAR 0 3
59053: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59054: LD_INT 0
59056: PPUSH
59057: PPUSH
59058: PPUSH
// result := false ;
59059: LD_ADDR_VAR 0 3
59063: PUSH
59064: LD_INT 0
59066: ST_TO_ADDR
// if not building then
59067: LD_VAR 0 2
59071: NOT
59072: IFFALSE 59076
// exit ;
59074: GO 59214
// x := GetX ( building ) ;
59076: LD_ADDR_VAR 0 4
59080: PUSH
59081: LD_VAR 0 2
59085: PPUSH
59086: CALL_OW 250
59090: ST_TO_ADDR
// y := GetY ( building ) ;
59091: LD_ADDR_VAR 0 5
59095: PUSH
59096: LD_VAR 0 2
59100: PPUSH
59101: CALL_OW 251
59105: ST_TO_ADDR
// if not x or not y then
59106: LD_VAR 0 4
59110: NOT
59111: PUSH
59112: LD_VAR 0 5
59116: NOT
59117: OR
59118: IFFALSE 59122
// exit ;
59120: GO 59214
// if GetTaskList ( unit ) then
59122: LD_VAR 0 1
59126: PPUSH
59127: CALL_OW 437
59131: IFFALSE 59214
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59133: LD_STRING e
59135: PUSH
59136: LD_VAR 0 1
59140: PPUSH
59141: CALL_OW 437
59145: PUSH
59146: LD_INT 1
59148: ARRAY
59149: PUSH
59150: LD_INT 1
59152: ARRAY
59153: EQUAL
59154: PUSH
59155: LD_VAR 0 4
59159: PUSH
59160: LD_VAR 0 1
59164: PPUSH
59165: CALL_OW 437
59169: PUSH
59170: LD_INT 1
59172: ARRAY
59173: PUSH
59174: LD_INT 2
59176: ARRAY
59177: EQUAL
59178: AND
59179: PUSH
59180: LD_VAR 0 5
59184: PUSH
59185: LD_VAR 0 1
59189: PPUSH
59190: CALL_OW 437
59194: PUSH
59195: LD_INT 1
59197: ARRAY
59198: PUSH
59199: LD_INT 3
59201: ARRAY
59202: EQUAL
59203: AND
59204: IFFALSE 59214
// result := true end ;
59206: LD_ADDR_VAR 0 3
59210: PUSH
59211: LD_INT 1
59213: ST_TO_ADDR
// end ;
59214: LD_VAR 0 3
59218: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59219: LD_INT 0
59221: PPUSH
// result := false ;
59222: LD_ADDR_VAR 0 4
59226: PUSH
59227: LD_INT 0
59229: ST_TO_ADDR
// if GetTaskList ( unit ) then
59230: LD_VAR 0 1
59234: PPUSH
59235: CALL_OW 437
59239: IFFALSE 59322
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59241: LD_STRING M
59243: PUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 437
59253: PUSH
59254: LD_INT 1
59256: ARRAY
59257: PUSH
59258: LD_INT 1
59260: ARRAY
59261: EQUAL
59262: PUSH
59263: LD_VAR 0 2
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: CALL_OW 437
59277: PUSH
59278: LD_INT 1
59280: ARRAY
59281: PUSH
59282: LD_INT 2
59284: ARRAY
59285: EQUAL
59286: AND
59287: PUSH
59288: LD_VAR 0 3
59292: PUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 437
59302: PUSH
59303: LD_INT 1
59305: ARRAY
59306: PUSH
59307: LD_INT 3
59309: ARRAY
59310: EQUAL
59311: AND
59312: IFFALSE 59322
// result := true ;
59314: LD_ADDR_VAR 0 4
59318: PUSH
59319: LD_INT 1
59321: ST_TO_ADDR
// end ; end ;
59322: LD_VAR 0 4
59326: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59327: LD_INT 0
59329: PPUSH
59330: PPUSH
59331: PPUSH
59332: PPUSH
// if not unit or not area then
59333: LD_VAR 0 1
59337: NOT
59338: PUSH
59339: LD_VAR 0 2
59343: NOT
59344: OR
59345: IFFALSE 59349
// exit ;
59347: GO 59525
// tmp := AreaToList ( area , i ) ;
59349: LD_ADDR_VAR 0 6
59353: PUSH
59354: LD_VAR 0 2
59358: PPUSH
59359: LD_VAR 0 5
59363: PPUSH
59364: CALL_OW 517
59368: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59369: LD_ADDR_VAR 0 5
59373: PUSH
59374: DOUBLE
59375: LD_INT 1
59377: DEC
59378: ST_TO_ADDR
59379: LD_VAR 0 6
59383: PUSH
59384: LD_INT 1
59386: ARRAY
59387: PUSH
59388: FOR_TO
59389: IFFALSE 59523
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59391: LD_ADDR_VAR 0 7
59395: PUSH
59396: LD_VAR 0 6
59400: PUSH
59401: LD_INT 1
59403: ARRAY
59404: PUSH
59405: LD_VAR 0 5
59409: ARRAY
59410: PUSH
59411: LD_VAR 0 6
59415: PUSH
59416: LD_INT 2
59418: ARRAY
59419: PUSH
59420: LD_VAR 0 5
59424: ARRAY
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59430: LD_INT 92
59432: PUSH
59433: LD_VAR 0 7
59437: PUSH
59438: LD_INT 1
59440: ARRAY
59441: PUSH
59442: LD_VAR 0 7
59446: PUSH
59447: LD_INT 2
59449: ARRAY
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: PPUSH
59460: CALL_OW 69
59464: PUSH
59465: LD_INT 0
59467: EQUAL
59468: IFFALSE 59521
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59470: LD_VAR 0 1
59474: PPUSH
59475: LD_VAR 0 7
59479: PUSH
59480: LD_INT 1
59482: ARRAY
59483: PPUSH
59484: LD_VAR 0 7
59488: PUSH
59489: LD_INT 2
59491: ARRAY
59492: PPUSH
59493: LD_VAR 0 3
59497: PPUSH
59498: CALL_OW 48
// result := IsPlaced ( unit ) ;
59502: LD_ADDR_VAR 0 4
59506: PUSH
59507: LD_VAR 0 1
59511: PPUSH
59512: CALL_OW 305
59516: ST_TO_ADDR
// exit ;
59517: POP
59518: POP
59519: GO 59525
// end ; end ;
59521: GO 59388
59523: POP
59524: POP
// end ;
59525: LD_VAR 0 4
59529: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59530: LD_INT 0
59532: PPUSH
59533: PPUSH
59534: PPUSH
// if not side or side > 8 then
59535: LD_VAR 0 1
59539: NOT
59540: PUSH
59541: LD_VAR 0 1
59545: PUSH
59546: LD_INT 8
59548: GREATER
59549: OR
59550: IFFALSE 59554
// exit ;
59552: GO 59741
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59554: LD_ADDR_VAR 0 4
59558: PUSH
59559: LD_INT 22
59561: PUSH
59562: LD_VAR 0 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 21
59573: PUSH
59574: LD_INT 3
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PPUSH
59585: CALL_OW 69
59589: ST_TO_ADDR
// if not tmp then
59590: LD_VAR 0 4
59594: NOT
59595: IFFALSE 59599
// exit ;
59597: GO 59741
// enable_addtolog := true ;
59599: LD_ADDR_OWVAR 81
59603: PUSH
59604: LD_INT 1
59606: ST_TO_ADDR
// AddToLog ( [ ) ;
59607: LD_STRING [
59609: PPUSH
59610: CALL_OW 561
// for i in tmp do
59614: LD_ADDR_VAR 0 3
59618: PUSH
59619: LD_VAR 0 4
59623: PUSH
59624: FOR_IN
59625: IFFALSE 59732
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59627: LD_STRING [
59629: PUSH
59630: LD_VAR 0 3
59634: PPUSH
59635: CALL_OW 266
59639: STR
59640: PUSH
59641: LD_STRING , 
59643: STR
59644: PUSH
59645: LD_VAR 0 3
59649: PPUSH
59650: CALL_OW 250
59654: STR
59655: PUSH
59656: LD_STRING , 
59658: STR
59659: PUSH
59660: LD_VAR 0 3
59664: PPUSH
59665: CALL_OW 251
59669: STR
59670: PUSH
59671: LD_STRING , 
59673: STR
59674: PUSH
59675: LD_VAR 0 3
59679: PPUSH
59680: CALL_OW 254
59684: STR
59685: PUSH
59686: LD_STRING , 
59688: STR
59689: PUSH
59690: LD_VAR 0 3
59694: PPUSH
59695: LD_INT 1
59697: PPUSH
59698: CALL_OW 268
59702: STR
59703: PUSH
59704: LD_STRING , 
59706: STR
59707: PUSH
59708: LD_VAR 0 3
59712: PPUSH
59713: LD_INT 2
59715: PPUSH
59716: CALL_OW 268
59720: STR
59721: PUSH
59722: LD_STRING ],
59724: STR
59725: PPUSH
59726: CALL_OW 561
// end ;
59730: GO 59624
59732: POP
59733: POP
// AddToLog ( ]; ) ;
59734: LD_STRING ];
59736: PPUSH
59737: CALL_OW 561
// end ;
59741: LD_VAR 0 2
59745: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59746: LD_INT 0
59748: PPUSH
59749: PPUSH
59750: PPUSH
59751: PPUSH
59752: PPUSH
// if not area or not rate or not max then
59753: LD_VAR 0 1
59757: NOT
59758: PUSH
59759: LD_VAR 0 2
59763: NOT
59764: OR
59765: PUSH
59766: LD_VAR 0 4
59770: NOT
59771: OR
59772: IFFALSE 59776
// exit ;
59774: GO 59965
// while 1 do
59776: LD_INT 1
59778: IFFALSE 59965
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59780: LD_ADDR_VAR 0 9
59784: PUSH
59785: LD_VAR 0 1
59789: PPUSH
59790: LD_INT 1
59792: PPUSH
59793: CALL_OW 287
59797: PUSH
59798: LD_INT 10
59800: MUL
59801: ST_TO_ADDR
// r := rate / 10 ;
59802: LD_ADDR_VAR 0 7
59806: PUSH
59807: LD_VAR 0 2
59811: PUSH
59812: LD_INT 10
59814: DIVREAL
59815: ST_TO_ADDR
// time := 1 1$00 ;
59816: LD_ADDR_VAR 0 8
59820: PUSH
59821: LD_INT 2100
59823: ST_TO_ADDR
// if amount < min then
59824: LD_VAR 0 9
59828: PUSH
59829: LD_VAR 0 3
59833: LESS
59834: IFFALSE 59852
// r := r * 2 else
59836: LD_ADDR_VAR 0 7
59840: PUSH
59841: LD_VAR 0 7
59845: PUSH
59846: LD_INT 2
59848: MUL
59849: ST_TO_ADDR
59850: GO 59878
// if amount > max then
59852: LD_VAR 0 9
59856: PUSH
59857: LD_VAR 0 4
59861: GREATER
59862: IFFALSE 59878
// r := r / 2 ;
59864: LD_ADDR_VAR 0 7
59868: PUSH
59869: LD_VAR 0 7
59873: PUSH
59874: LD_INT 2
59876: DIVREAL
59877: ST_TO_ADDR
// time := time / r ;
59878: LD_ADDR_VAR 0 8
59882: PUSH
59883: LD_VAR 0 8
59887: PUSH
59888: LD_VAR 0 7
59892: DIVREAL
59893: ST_TO_ADDR
// if time < 0 then
59894: LD_VAR 0 8
59898: PUSH
59899: LD_INT 0
59901: LESS
59902: IFFALSE 59919
// time := time * - 1 ;
59904: LD_ADDR_VAR 0 8
59908: PUSH
59909: LD_VAR 0 8
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: MUL
59918: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59919: LD_VAR 0 8
59923: PUSH
59924: LD_INT 35
59926: PPUSH
59927: LD_INT 875
59929: PPUSH
59930: CALL_OW 12
59934: PLUS
59935: PPUSH
59936: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59940: LD_INT 1
59942: PPUSH
59943: LD_INT 5
59945: PPUSH
59946: CALL_OW 12
59950: PPUSH
59951: LD_VAR 0 1
59955: PPUSH
59956: LD_INT 1
59958: PPUSH
59959: CALL_OW 55
// end ;
59963: GO 59776
// end ;
59965: LD_VAR 0 5
59969: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59970: LD_INT 0
59972: PPUSH
59973: PPUSH
59974: PPUSH
59975: PPUSH
59976: PPUSH
59977: PPUSH
59978: PPUSH
59979: PPUSH
// if not turrets or not factories then
59980: LD_VAR 0 1
59984: NOT
59985: PUSH
59986: LD_VAR 0 2
59990: NOT
59991: OR
59992: IFFALSE 59996
// exit ;
59994: GO 60303
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59996: LD_ADDR_VAR 0 10
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: LD_INT 6
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: LD_INT 5
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 24
60038: PUSH
60039: LD_INT 25
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 23
60048: PUSH
60049: LD_INT 27
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 42
60062: PUSH
60063: LD_INT 43
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 44
60072: PUSH
60073: LD_INT 46
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 45
60082: PUSH
60083: LD_INT 47
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// result := [ ] ;
60100: LD_ADDR_VAR 0 3
60104: PUSH
60105: EMPTY
60106: ST_TO_ADDR
// for i in turrets do
60107: LD_ADDR_VAR 0 4
60111: PUSH
60112: LD_VAR 0 1
60116: PUSH
60117: FOR_IN
60118: IFFALSE 60301
// begin nat := GetNation ( i ) ;
60120: LD_ADDR_VAR 0 7
60124: PUSH
60125: LD_VAR 0 4
60129: PPUSH
60130: CALL_OW 248
60134: ST_TO_ADDR
// weapon := 0 ;
60135: LD_ADDR_VAR 0 8
60139: PUSH
60140: LD_INT 0
60142: ST_TO_ADDR
// if not nat then
60143: LD_VAR 0 7
60147: NOT
60148: IFFALSE 60152
// continue ;
60150: GO 60117
// for j in list [ nat ] do
60152: LD_ADDR_VAR 0 5
60156: PUSH
60157: LD_VAR 0 10
60161: PUSH
60162: LD_VAR 0 7
60166: ARRAY
60167: PUSH
60168: FOR_IN
60169: IFFALSE 60210
// if GetBWeapon ( i ) = j [ 1 ] then
60171: LD_VAR 0 4
60175: PPUSH
60176: CALL_OW 269
60180: PUSH
60181: LD_VAR 0 5
60185: PUSH
60186: LD_INT 1
60188: ARRAY
60189: EQUAL
60190: IFFALSE 60208
// begin weapon := j [ 2 ] ;
60192: LD_ADDR_VAR 0 8
60196: PUSH
60197: LD_VAR 0 5
60201: PUSH
60202: LD_INT 2
60204: ARRAY
60205: ST_TO_ADDR
// break ;
60206: GO 60210
// end ;
60208: GO 60168
60210: POP
60211: POP
// if not weapon then
60212: LD_VAR 0 8
60216: NOT
60217: IFFALSE 60221
// continue ;
60219: GO 60117
// for k in factories do
60221: LD_ADDR_VAR 0 6
60225: PUSH
60226: LD_VAR 0 2
60230: PUSH
60231: FOR_IN
60232: IFFALSE 60297
// begin weapons := AvailableWeaponList ( k ) ;
60234: LD_ADDR_VAR 0 9
60238: PUSH
60239: LD_VAR 0 6
60243: PPUSH
60244: CALL_OW 478
60248: ST_TO_ADDR
// if not weapons then
60249: LD_VAR 0 9
60253: NOT
60254: IFFALSE 60258
// continue ;
60256: GO 60231
// if weapon in weapons then
60258: LD_VAR 0 8
60262: PUSH
60263: LD_VAR 0 9
60267: IN
60268: IFFALSE 60295
// begin result := [ i , weapon ] ;
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: LD_VAR 0 4
60279: PUSH
60280: LD_VAR 0 8
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: ST_TO_ADDR
// exit ;
60289: POP
60290: POP
60291: POP
60292: POP
60293: GO 60303
// end ; end ;
60295: GO 60231
60297: POP
60298: POP
// end ;
60299: GO 60117
60301: POP
60302: POP
// end ;
60303: LD_VAR 0 3
60307: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60308: LD_INT 0
60310: PPUSH
// if not side or side > 8 then
60311: LD_VAR 0 3
60315: NOT
60316: PUSH
60317: LD_VAR 0 3
60321: PUSH
60322: LD_INT 8
60324: GREATER
60325: OR
60326: IFFALSE 60330
// exit ;
60328: GO 60389
// if not range then
60330: LD_VAR 0 4
60334: NOT
60335: IFFALSE 60346
// range := - 12 ;
60337: LD_ADDR_VAR 0 4
60341: PUSH
60342: LD_INT 12
60344: NEG
60345: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60346: LD_VAR 0 1
60350: PPUSH
60351: LD_VAR 0 2
60355: PPUSH
60356: LD_VAR 0 3
60360: PPUSH
60361: LD_VAR 0 4
60365: PPUSH
60366: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60370: LD_VAR 0 1
60374: PPUSH
60375: LD_VAR 0 2
60379: PPUSH
60380: LD_VAR 0 3
60384: PPUSH
60385: CALL_OW 331
// end ;
60389: LD_VAR 0 5
60393: RET
// export function Video ( mode ) ; begin
60394: LD_INT 0
60396: PPUSH
// ingame_video = mode ;
60397: LD_ADDR_OWVAR 52
60401: PUSH
60402: LD_VAR 0 1
60406: ST_TO_ADDR
// interface_hidden = mode ;
60407: LD_ADDR_OWVAR 54
60411: PUSH
60412: LD_VAR 0 1
60416: ST_TO_ADDR
// end ;
60417: LD_VAR 0 2
60421: RET
// export function Join ( array , element ) ; begin
60422: LD_INT 0
60424: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60425: LD_ADDR_VAR 0 3
60429: PUSH
60430: LD_VAR 0 1
60434: PPUSH
60435: LD_VAR 0 1
60439: PUSH
60440: LD_INT 1
60442: PLUS
60443: PPUSH
60444: LD_VAR 0 2
60448: PPUSH
60449: CALL_OW 1
60453: ST_TO_ADDR
// end ;
60454: LD_VAR 0 3
60458: RET
// export function JoinUnion ( array , element ) ; begin
60459: LD_INT 0
60461: PPUSH
// result := array union element ;
60462: LD_ADDR_VAR 0 3
60466: PUSH
60467: LD_VAR 0 1
60471: PUSH
60472: LD_VAR 0 2
60476: UNION
60477: ST_TO_ADDR
// end ;
60478: LD_VAR 0 3
60482: RET
// export function GetBehemoths ( side ) ; begin
60483: LD_INT 0
60485: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60486: LD_ADDR_VAR 0 2
60490: PUSH
60491: LD_INT 22
60493: PUSH
60494: LD_VAR 0 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 31
60505: PUSH
60506: LD_INT 25
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PPUSH
60517: CALL_OW 69
60521: ST_TO_ADDR
// end ;
60522: LD_VAR 0 2
60526: RET
// export function Shuffle ( array ) ; var i , index ; begin
60527: LD_INT 0
60529: PPUSH
60530: PPUSH
60531: PPUSH
// result := [ ] ;
60532: LD_ADDR_VAR 0 2
60536: PUSH
60537: EMPTY
60538: ST_TO_ADDR
// if not array then
60539: LD_VAR 0 1
60543: NOT
60544: IFFALSE 60548
// exit ;
60546: GO 60647
// Randomize ;
60548: CALL_OW 10
// for i = array downto 1 do
60552: LD_ADDR_VAR 0 3
60556: PUSH
60557: DOUBLE
60558: LD_VAR 0 1
60562: INC
60563: ST_TO_ADDR
60564: LD_INT 1
60566: PUSH
60567: FOR_DOWNTO
60568: IFFALSE 60645
// begin index := rand ( 1 , array ) ;
60570: LD_ADDR_VAR 0 4
60574: PUSH
60575: LD_INT 1
60577: PPUSH
60578: LD_VAR 0 1
60582: PPUSH
60583: CALL_OW 12
60587: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60588: LD_ADDR_VAR 0 2
60592: PUSH
60593: LD_VAR 0 2
60597: PPUSH
60598: LD_VAR 0 2
60602: PUSH
60603: LD_INT 1
60605: PLUS
60606: PPUSH
60607: LD_VAR 0 1
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: PPUSH
60618: CALL_OW 2
60622: ST_TO_ADDR
// array := Delete ( array , index ) ;
60623: LD_ADDR_VAR 0 1
60627: PUSH
60628: LD_VAR 0 1
60632: PPUSH
60633: LD_VAR 0 4
60637: PPUSH
60638: CALL_OW 3
60642: ST_TO_ADDR
// end ;
60643: GO 60567
60645: POP
60646: POP
// end ;
60647: LD_VAR 0 2
60651: RET
// export function GetBaseMaterials ( base ) ; begin
60652: LD_INT 0
60654: PPUSH
// result := [ 0 , 0 , 0 ] ;
60655: LD_ADDR_VAR 0 2
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// if not base then
60674: LD_VAR 0 1
60678: NOT
60679: IFFALSE 60683
// exit ;
60681: GO 60732
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60683: LD_ADDR_VAR 0 2
60687: PUSH
60688: LD_VAR 0 1
60692: PPUSH
60693: LD_INT 1
60695: PPUSH
60696: CALL_OW 275
60700: PUSH
60701: LD_VAR 0 1
60705: PPUSH
60706: LD_INT 2
60708: PPUSH
60709: CALL_OW 275
60713: PUSH
60714: LD_VAR 0 1
60718: PPUSH
60719: LD_INT 3
60721: PPUSH
60722: CALL_OW 275
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: ST_TO_ADDR
// end ;
60732: LD_VAR 0 2
60736: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60737: LD_INT 0
60739: PPUSH
60740: PPUSH
// result := array ;
60741: LD_ADDR_VAR 0 3
60745: PUSH
60746: LD_VAR 0 1
60750: ST_TO_ADDR
// if size >= result then
60751: LD_VAR 0 2
60755: PUSH
60756: LD_VAR 0 3
60760: GREATEREQUAL
60761: IFFALSE 60765
// exit ;
60763: GO 60815
// if size then
60765: LD_VAR 0 2
60769: IFFALSE 60815
// for i := array downto size do
60771: LD_ADDR_VAR 0 4
60775: PUSH
60776: DOUBLE
60777: LD_VAR 0 1
60781: INC
60782: ST_TO_ADDR
60783: LD_VAR 0 2
60787: PUSH
60788: FOR_DOWNTO
60789: IFFALSE 60813
// result := Delete ( result , result ) ;
60791: LD_ADDR_VAR 0 3
60795: PUSH
60796: LD_VAR 0 3
60800: PPUSH
60801: LD_VAR 0 3
60805: PPUSH
60806: CALL_OW 3
60810: ST_TO_ADDR
60811: GO 60788
60813: POP
60814: POP
// end ;
60815: LD_VAR 0 3
60819: RET
// export function ComExit ( unit ) ; var tmp ; begin
60820: LD_INT 0
60822: PPUSH
60823: PPUSH
// if not IsInUnit ( unit ) then
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 310
60833: NOT
60834: IFFALSE 60838
// exit ;
60836: GO 60898
// tmp := IsInUnit ( unit ) ;
60838: LD_ADDR_VAR 0 3
60842: PUSH
60843: LD_VAR 0 1
60847: PPUSH
60848: CALL_OW 310
60852: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60853: LD_VAR 0 3
60857: PPUSH
60858: CALL_OW 247
60862: PUSH
60863: LD_INT 2
60865: EQUAL
60866: IFFALSE 60879
// ComExitVehicle ( unit ) else
60868: LD_VAR 0 1
60872: PPUSH
60873: CALL_OW 121
60877: GO 60888
// ComExitBuilding ( unit ) ;
60879: LD_VAR 0 1
60883: PPUSH
60884: CALL_OW 122
// result := tmp ;
60888: LD_ADDR_VAR 0 2
60892: PUSH
60893: LD_VAR 0 3
60897: ST_TO_ADDR
// end ;
60898: LD_VAR 0 2
60902: RET
// export function ComExitAll ( units ) ; var i ; begin
60903: LD_INT 0
60905: PPUSH
60906: PPUSH
// if not units then
60907: LD_VAR 0 1
60911: NOT
60912: IFFALSE 60916
// exit ;
60914: GO 60942
// for i in units do
60916: LD_ADDR_VAR 0 3
60920: PUSH
60921: LD_VAR 0 1
60925: PUSH
60926: FOR_IN
60927: IFFALSE 60940
// ComExit ( i ) ;
60929: LD_VAR 0 3
60933: PPUSH
60934: CALL 60820 0 1
60938: GO 60926
60940: POP
60941: POP
// end ;
60942: LD_VAR 0 2
60946: RET
// export function ResetHc ; begin
60947: LD_INT 0
60949: PPUSH
// InitHc ;
60950: CALL_OW 19
// hc_importance := 0 ;
60954: LD_ADDR_OWVAR 32
60958: PUSH
60959: LD_INT 0
60961: ST_TO_ADDR
// end ;
60962: LD_VAR 0 1
60966: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60967: LD_INT 0
60969: PPUSH
60970: PPUSH
60971: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60972: LD_ADDR_VAR 0 6
60976: PUSH
60977: LD_VAR 0 1
60981: PUSH
60982: LD_VAR 0 3
60986: PLUS
60987: PUSH
60988: LD_INT 2
60990: DIV
60991: ST_TO_ADDR
// if _x < 0 then
60992: LD_VAR 0 6
60996: PUSH
60997: LD_INT 0
60999: LESS
61000: IFFALSE 61017
// _x := _x * - 1 ;
61002: LD_ADDR_VAR 0 6
61006: PUSH
61007: LD_VAR 0 6
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: MUL
61016: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61017: LD_ADDR_VAR 0 7
61021: PUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_VAR 0 4
61031: PLUS
61032: PUSH
61033: LD_INT 2
61035: DIV
61036: ST_TO_ADDR
// if _y < 0 then
61037: LD_VAR 0 7
61041: PUSH
61042: LD_INT 0
61044: LESS
61045: IFFALSE 61062
// _y := _y * - 1 ;
61047: LD_ADDR_VAR 0 7
61051: PUSH
61052: LD_VAR 0 7
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: MUL
61061: ST_TO_ADDR
// result := [ _x , _y ] ;
61062: LD_ADDR_VAR 0 5
61066: PUSH
61067: LD_VAR 0 6
61071: PUSH
61072: LD_VAR 0 7
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// end ;
61081: LD_VAR 0 5
61085: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
61090: PPUSH
61091: PPUSH
// task := GetTaskList ( unit ) ;
61092: LD_ADDR_VAR 0 7
61096: PUSH
61097: LD_VAR 0 1
61101: PPUSH
61102: CALL_OW 437
61106: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61107: LD_VAR 0 7
61111: NOT
61112: PUSH
61113: LD_VAR 0 1
61117: PPUSH
61118: LD_VAR 0 2
61122: PPUSH
61123: CALL_OW 308
61127: NOT
61128: AND
61129: IFFALSE 61133
// exit ;
61131: GO 61251
// if IsInArea ( unit , area ) then
61133: LD_VAR 0 1
61137: PPUSH
61138: LD_VAR 0 2
61142: PPUSH
61143: CALL_OW 308
61147: IFFALSE 61165
// begin ComMoveToArea ( unit , goAway ) ;
61149: LD_VAR 0 1
61153: PPUSH
61154: LD_VAR 0 3
61158: PPUSH
61159: CALL_OW 113
// exit ;
61163: GO 61251
// end ; if task [ 1 ] [ 1 ] <> M then
61165: LD_VAR 0 7
61169: PUSH
61170: LD_INT 1
61172: ARRAY
61173: PUSH
61174: LD_INT 1
61176: ARRAY
61177: PUSH
61178: LD_STRING M
61180: NONEQUAL
61181: IFFALSE 61185
// exit ;
61183: GO 61251
// x := task [ 1 ] [ 2 ] ;
61185: LD_ADDR_VAR 0 5
61189: PUSH
61190: LD_VAR 0 7
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: PUSH
61199: LD_INT 2
61201: ARRAY
61202: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61203: LD_ADDR_VAR 0 6
61207: PUSH
61208: LD_VAR 0 7
61212: PUSH
61213: LD_INT 1
61215: ARRAY
61216: PUSH
61217: LD_INT 3
61219: ARRAY
61220: ST_TO_ADDR
// if InArea ( x , y , area ) then
61221: LD_VAR 0 5
61225: PPUSH
61226: LD_VAR 0 6
61230: PPUSH
61231: LD_VAR 0 2
61235: PPUSH
61236: CALL_OW 309
61240: IFFALSE 61251
// ComStop ( unit ) ;
61242: LD_VAR 0 1
61246: PPUSH
61247: CALL_OW 141
// end ;
61251: LD_VAR 0 4
61255: RET
// export function Abs ( value ) ; begin
61256: LD_INT 0
61258: PPUSH
// result := value ;
61259: LD_ADDR_VAR 0 2
61263: PUSH
61264: LD_VAR 0 1
61268: ST_TO_ADDR
// if value < 0 then
61269: LD_VAR 0 1
61273: PUSH
61274: LD_INT 0
61276: LESS
61277: IFFALSE 61294
// result := value * - 1 ;
61279: LD_ADDR_VAR 0 2
61283: PUSH
61284: LD_VAR 0 1
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: MUL
61293: ST_TO_ADDR
// end ;
61294: LD_VAR 0 2
61298: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61299: LD_INT 0
61301: PPUSH
61302: PPUSH
61303: PPUSH
61304: PPUSH
61305: PPUSH
61306: PPUSH
61307: PPUSH
61308: PPUSH
// if not unit or not building then
61309: LD_VAR 0 1
61313: NOT
61314: PUSH
61315: LD_VAR 0 2
61319: NOT
61320: OR
61321: IFFALSE 61325
// exit ;
61323: GO 61551
// x := GetX ( building ) ;
61325: LD_ADDR_VAR 0 4
61329: PUSH
61330: LD_VAR 0 2
61334: PPUSH
61335: CALL_OW 250
61339: ST_TO_ADDR
// y := GetY ( building ) ;
61340: LD_ADDR_VAR 0 6
61344: PUSH
61345: LD_VAR 0 2
61349: PPUSH
61350: CALL_OW 251
61354: ST_TO_ADDR
// d := GetDir ( building ) ;
61355: LD_ADDR_VAR 0 8
61359: PUSH
61360: LD_VAR 0 2
61364: PPUSH
61365: CALL_OW 254
61369: ST_TO_ADDR
// r := 4 ;
61370: LD_ADDR_VAR 0 9
61374: PUSH
61375: LD_INT 4
61377: ST_TO_ADDR
// for i := 1 to 5 do
61378: LD_ADDR_VAR 0 10
61382: PUSH
61383: DOUBLE
61384: LD_INT 1
61386: DEC
61387: ST_TO_ADDR
61388: LD_INT 5
61390: PUSH
61391: FOR_TO
61392: IFFALSE 61549
// begin _x := ShiftX ( x , d , r + i ) ;
61394: LD_ADDR_VAR 0 5
61398: PUSH
61399: LD_VAR 0 4
61403: PPUSH
61404: LD_VAR 0 8
61408: PPUSH
61409: LD_VAR 0 9
61413: PUSH
61414: LD_VAR 0 10
61418: PLUS
61419: PPUSH
61420: CALL_OW 272
61424: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61425: LD_ADDR_VAR 0 7
61429: PUSH
61430: LD_VAR 0 6
61434: PPUSH
61435: LD_VAR 0 8
61439: PPUSH
61440: LD_VAR 0 9
61444: PUSH
61445: LD_VAR 0 10
61449: PLUS
61450: PPUSH
61451: CALL_OW 273
61455: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61456: LD_VAR 0 5
61460: PPUSH
61461: LD_VAR 0 7
61465: PPUSH
61466: CALL_OW 488
61470: PUSH
61471: LD_VAR 0 5
61475: PPUSH
61476: LD_VAR 0 7
61480: PPUSH
61481: CALL_OW 428
61485: PPUSH
61486: CALL_OW 247
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: IN
61501: NOT
61502: AND
61503: IFFALSE 61547
// begin ComMoveXY ( unit , _x , _y ) ;
61505: LD_VAR 0 1
61509: PPUSH
61510: LD_VAR 0 5
61514: PPUSH
61515: LD_VAR 0 7
61519: PPUSH
61520: CALL_OW 111
// result := [ _x , _y ] ;
61524: LD_ADDR_VAR 0 3
61528: PUSH
61529: LD_VAR 0 5
61533: PUSH
61534: LD_VAR 0 7
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: ST_TO_ADDR
// exit ;
61543: POP
61544: POP
61545: GO 61551
// end ; end ;
61547: GO 61391
61549: POP
61550: POP
// end ;
61551: LD_VAR 0 3
61555: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61556: LD_INT 0
61558: PPUSH
61559: PPUSH
61560: PPUSH
// result := 0 ;
61561: LD_ADDR_VAR 0 3
61565: PUSH
61566: LD_INT 0
61568: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61569: LD_VAR 0 1
61573: PUSH
61574: LD_INT 0
61576: LESS
61577: PUSH
61578: LD_VAR 0 1
61582: PUSH
61583: LD_INT 8
61585: GREATER
61586: OR
61587: PUSH
61588: LD_VAR 0 2
61592: PUSH
61593: LD_INT 0
61595: LESS
61596: OR
61597: PUSH
61598: LD_VAR 0 2
61602: PUSH
61603: LD_INT 8
61605: GREATER
61606: OR
61607: IFFALSE 61611
// exit ;
61609: GO 61686
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61611: LD_ADDR_VAR 0 4
61615: PUSH
61616: LD_INT 22
61618: PUSH
61619: LD_VAR 0 2
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PPUSH
61628: CALL_OW 69
61632: PUSH
61633: FOR_IN
61634: IFFALSE 61684
// begin un := UnitShoot ( i ) ;
61636: LD_ADDR_VAR 0 5
61640: PUSH
61641: LD_VAR 0 4
61645: PPUSH
61646: CALL_OW 504
61650: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61651: LD_VAR 0 5
61655: PPUSH
61656: CALL_OW 255
61660: PUSH
61661: LD_VAR 0 1
61665: EQUAL
61666: IFFALSE 61682
// begin result := un ;
61668: LD_ADDR_VAR 0 3
61672: PUSH
61673: LD_VAR 0 5
61677: ST_TO_ADDR
// exit ;
61678: POP
61679: POP
61680: GO 61686
// end ; end ;
61682: GO 61633
61684: POP
61685: POP
// end ;
61686: LD_VAR 0 3
61690: RET
// export function GetCargoBay ( units ) ; begin
61691: LD_INT 0
61693: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61694: LD_ADDR_VAR 0 2
61698: PUSH
61699: LD_VAR 0 1
61703: PPUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 34
61709: PUSH
61710: LD_INT 12
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 34
61719: PUSH
61720: LD_INT 51
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 34
61729: PUSH
61730: LD_INT 32
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 34
61739: PUSH
61740: LD_INT 89
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: PPUSH
61754: CALL_OW 72
61758: ST_TO_ADDR
// end ;
61759: LD_VAR 0 2
61763: RET
// export function Negate ( value ) ; begin
61764: LD_INT 0
61766: PPUSH
// result := not value ;
61767: LD_ADDR_VAR 0 2
61771: PUSH
61772: LD_VAR 0 1
61776: NOT
61777: ST_TO_ADDR
// end ;
61778: LD_VAR 0 2
61782: RET
// export function Inc ( value ) ; begin
61783: LD_INT 0
61785: PPUSH
// result := value + 1 ;
61786: LD_ADDR_VAR 0 2
61790: PUSH
61791: LD_VAR 0 1
61795: PUSH
61796: LD_INT 1
61798: PLUS
61799: ST_TO_ADDR
// end ;
61800: LD_VAR 0 2
61804: RET
// export function Dec ( value ) ; begin
61805: LD_INT 0
61807: PPUSH
// result := value - 1 ;
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: LD_VAR 0 1
61817: PUSH
61818: LD_INT 1
61820: MINUS
61821: ST_TO_ADDR
// end ;
61822: LD_VAR 0 2
61826: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61827: LD_INT 0
61829: PPUSH
61830: PPUSH
61831: PPUSH
61832: PPUSH
61833: PPUSH
61834: PPUSH
61835: PPUSH
61836: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61837: LD_VAR 0 1
61841: PPUSH
61842: LD_VAR 0 2
61846: PPUSH
61847: CALL_OW 488
61851: NOT
61852: PUSH
61853: LD_VAR 0 3
61857: PPUSH
61858: LD_VAR 0 4
61862: PPUSH
61863: CALL_OW 488
61867: NOT
61868: OR
61869: IFFALSE 61882
// begin result := - 1 ;
61871: LD_ADDR_VAR 0 5
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: ST_TO_ADDR
// exit ;
61880: GO 62117
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61882: LD_ADDR_VAR 0 12
61886: PUSH
61887: LD_VAR 0 1
61891: PPUSH
61892: LD_VAR 0 2
61896: PPUSH
61897: LD_VAR 0 3
61901: PPUSH
61902: LD_VAR 0 4
61906: PPUSH
61907: CALL 60967 0 4
61911: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61912: LD_ADDR_VAR 0 11
61916: PUSH
61917: LD_VAR 0 1
61921: PPUSH
61922: LD_VAR 0 2
61926: PPUSH
61927: LD_VAR 0 12
61931: PUSH
61932: LD_INT 1
61934: ARRAY
61935: PPUSH
61936: LD_VAR 0 12
61940: PUSH
61941: LD_INT 2
61943: ARRAY
61944: PPUSH
61945: CALL_OW 298
61949: ST_TO_ADDR
// distance := 9999 ;
61950: LD_ADDR_VAR 0 10
61954: PUSH
61955: LD_INT 9999
61957: ST_TO_ADDR
// for i := 0 to 5 do
61958: LD_ADDR_VAR 0 6
61962: PUSH
61963: DOUBLE
61964: LD_INT 0
61966: DEC
61967: ST_TO_ADDR
61968: LD_INT 5
61970: PUSH
61971: FOR_TO
61972: IFFALSE 62115
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61974: LD_ADDR_VAR 0 7
61978: PUSH
61979: LD_VAR 0 1
61983: PPUSH
61984: LD_VAR 0 6
61988: PPUSH
61989: LD_VAR 0 11
61993: PPUSH
61994: CALL_OW 272
61998: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61999: LD_ADDR_VAR 0 8
62003: PUSH
62004: LD_VAR 0 2
62008: PPUSH
62009: LD_VAR 0 6
62013: PPUSH
62014: LD_VAR 0 11
62018: PPUSH
62019: CALL_OW 273
62023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62024: LD_VAR 0 7
62028: PPUSH
62029: LD_VAR 0 8
62033: PPUSH
62034: CALL_OW 488
62038: NOT
62039: IFFALSE 62043
// continue ;
62041: GO 61971
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62043: LD_ADDR_VAR 0 9
62047: PUSH
62048: LD_VAR 0 12
62052: PUSH
62053: LD_INT 1
62055: ARRAY
62056: PPUSH
62057: LD_VAR 0 12
62061: PUSH
62062: LD_INT 2
62064: ARRAY
62065: PPUSH
62066: LD_VAR 0 7
62070: PPUSH
62071: LD_VAR 0 8
62075: PPUSH
62076: CALL_OW 298
62080: ST_TO_ADDR
// if tmp < distance then
62081: LD_VAR 0 9
62085: PUSH
62086: LD_VAR 0 10
62090: LESS
62091: IFFALSE 62113
// begin result := i ;
62093: LD_ADDR_VAR 0 5
62097: PUSH
62098: LD_VAR 0 6
62102: ST_TO_ADDR
// distance := tmp ;
62103: LD_ADDR_VAR 0 10
62107: PUSH
62108: LD_VAR 0 9
62112: ST_TO_ADDR
// end ; end ;
62113: GO 61971
62115: POP
62116: POP
// end ;
62117: LD_VAR 0 5
62121: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62122: LD_INT 0
62124: PPUSH
62125: PPUSH
// if not driver or not IsInUnit ( driver ) then
62126: LD_VAR 0 1
62130: NOT
62131: PUSH
62132: LD_VAR 0 1
62136: PPUSH
62137: CALL_OW 310
62141: NOT
62142: OR
62143: IFFALSE 62147
// exit ;
62145: GO 62237
// vehicle := IsInUnit ( driver ) ;
62147: LD_ADDR_VAR 0 3
62151: PUSH
62152: LD_VAR 0 1
62156: PPUSH
62157: CALL_OW 310
62161: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62162: LD_VAR 0 1
62166: PPUSH
62167: LD_STRING \
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: PUSH
62197: LD_STRING E
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_VAR 0 3
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PPUSH
62233: CALL_OW 446
// end ;
62237: LD_VAR 0 2
62241: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62242: LD_INT 0
62244: PPUSH
62245: PPUSH
// if not driver or not IsInUnit ( driver ) then
62246: LD_VAR 0 1
62250: NOT
62251: PUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: CALL_OW 310
62261: NOT
62262: OR
62263: IFFALSE 62267
// exit ;
62265: GO 62357
// vehicle := IsInUnit ( driver ) ;
62267: LD_ADDR_VAR 0 3
62271: PUSH
62272: LD_VAR 0 1
62276: PPUSH
62277: CALL_OW 310
62281: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62282: LD_VAR 0 1
62286: PPUSH
62287: LD_STRING \
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: PUSH
62317: LD_STRING E
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_VAR 0 3
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PPUSH
62353: CALL_OW 447
// end ;
62357: LD_VAR 0 2
62361: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62362: LD_INT 0
62364: PPUSH
62365: PPUSH
62366: PPUSH
// tmp := [ ] ;
62367: LD_ADDR_VAR 0 5
62371: PUSH
62372: EMPTY
62373: ST_TO_ADDR
// for i in units do
62374: LD_ADDR_VAR 0 4
62378: PUSH
62379: LD_VAR 0 1
62383: PUSH
62384: FOR_IN
62385: IFFALSE 62423
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62387: LD_ADDR_VAR 0 5
62391: PUSH
62392: LD_VAR 0 5
62396: PPUSH
62397: LD_VAR 0 5
62401: PUSH
62402: LD_INT 1
62404: PLUS
62405: PPUSH
62406: LD_VAR 0 4
62410: PPUSH
62411: CALL_OW 256
62415: PPUSH
62416: CALL_OW 2
62420: ST_TO_ADDR
62421: GO 62384
62423: POP
62424: POP
// if not tmp then
62425: LD_VAR 0 5
62429: NOT
62430: IFFALSE 62434
// exit ;
62432: GO 62482
// if asc then
62434: LD_VAR 0 2
62438: IFFALSE 62462
// result := SortListByListAsc ( units , tmp ) else
62440: LD_ADDR_VAR 0 3
62444: PUSH
62445: LD_VAR 0 1
62449: PPUSH
62450: LD_VAR 0 5
62454: PPUSH
62455: CALL_OW 76
62459: ST_TO_ADDR
62460: GO 62482
// result := SortListByListDesc ( units , tmp ) ;
62462: LD_ADDR_VAR 0 3
62466: PUSH
62467: LD_VAR 0 1
62471: PPUSH
62472: LD_VAR 0 5
62476: PPUSH
62477: CALL_OW 77
62481: ST_TO_ADDR
// end ;
62482: LD_VAR 0 3
62486: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62487: LD_INT 0
62489: PPUSH
62490: PPUSH
// task := GetTaskList ( mech ) ;
62491: LD_ADDR_VAR 0 4
62495: PUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL_OW 437
62505: ST_TO_ADDR
// if not task then
62506: LD_VAR 0 4
62510: NOT
62511: IFFALSE 62515
// exit ;
62513: GO 62557
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62515: LD_ADDR_VAR 0 3
62519: PUSH
62520: LD_VAR 0 4
62524: PUSH
62525: LD_INT 1
62527: ARRAY
62528: PUSH
62529: LD_INT 1
62531: ARRAY
62532: PUSH
62533: LD_STRING r
62535: EQUAL
62536: PUSH
62537: LD_VAR 0 4
62541: PUSH
62542: LD_INT 1
62544: ARRAY
62545: PUSH
62546: LD_INT 4
62548: ARRAY
62549: PUSH
62550: LD_VAR 0 2
62554: EQUAL
62555: AND
62556: ST_TO_ADDR
// end ;
62557: LD_VAR 0 3
62561: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62562: LD_INT 0
62564: PPUSH
// SetDir ( unit , d ) ;
62565: LD_VAR 0 1
62569: PPUSH
62570: LD_VAR 0 4
62574: PPUSH
62575: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62579: LD_VAR 0 1
62583: PPUSH
62584: LD_VAR 0 2
62588: PPUSH
62589: LD_VAR 0 3
62593: PPUSH
62594: LD_VAR 0 5
62598: PPUSH
62599: CALL_OW 48
// end ;
62603: LD_VAR 0 6
62607: RET
// export function ToNaturalNumber ( number ) ; begin
62608: LD_INT 0
62610: PPUSH
// result := number div 1 ;
62611: LD_ADDR_VAR 0 2
62615: PUSH
62616: LD_VAR 0 1
62620: PUSH
62621: LD_INT 1
62623: DIV
62624: ST_TO_ADDR
// if number < 0 then
62625: LD_VAR 0 1
62629: PUSH
62630: LD_INT 0
62632: LESS
62633: IFFALSE 62643
// result := 0 ;
62635: LD_ADDR_VAR 0 2
62639: PUSH
62640: LD_INT 0
62642: ST_TO_ADDR
// end ;
62643: LD_VAR 0 2
62647: RET
// export function SortByClass ( units , class ) ; var un ; begin
62648: LD_INT 0
62650: PPUSH
62651: PPUSH
// if not units or not class then
62652: LD_VAR 0 1
62656: NOT
62657: PUSH
62658: LD_VAR 0 2
62662: NOT
62663: OR
62664: IFFALSE 62668
// exit ;
62666: GO 62763
// result := [ ] ;
62668: LD_ADDR_VAR 0 3
62672: PUSH
62673: EMPTY
62674: ST_TO_ADDR
// for un in units do
62675: LD_ADDR_VAR 0 4
62679: PUSH
62680: LD_VAR 0 1
62684: PUSH
62685: FOR_IN
62686: IFFALSE 62761
// if GetClass ( un ) = class then
62688: LD_VAR 0 4
62692: PPUSH
62693: CALL_OW 257
62697: PUSH
62698: LD_VAR 0 2
62702: EQUAL
62703: IFFALSE 62730
// result := Insert ( result , 1 , un ) else
62705: LD_ADDR_VAR 0 3
62709: PUSH
62710: LD_VAR 0 3
62714: PPUSH
62715: LD_INT 1
62717: PPUSH
62718: LD_VAR 0 4
62722: PPUSH
62723: CALL_OW 2
62727: ST_TO_ADDR
62728: GO 62759
// result := Replace ( result , result + 1 , un ) ;
62730: LD_ADDR_VAR 0 3
62734: PUSH
62735: LD_VAR 0 3
62739: PPUSH
62740: LD_VAR 0 3
62744: PUSH
62745: LD_INT 1
62747: PLUS
62748: PPUSH
62749: LD_VAR 0 4
62753: PPUSH
62754: CALL_OW 1
62758: ST_TO_ADDR
62759: GO 62685
62761: POP
62762: POP
// end ;
62763: LD_VAR 0 3
62767: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62768: LD_INT 0
62770: PPUSH
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
62775: PPUSH
62776: PPUSH
// result := [ ] ;
62777: LD_ADDR_VAR 0 4
62781: PUSH
62782: EMPTY
62783: ST_TO_ADDR
// if x - r < 0 then
62784: LD_VAR 0 1
62788: PUSH
62789: LD_VAR 0 3
62793: MINUS
62794: PUSH
62795: LD_INT 0
62797: LESS
62798: IFFALSE 62810
// min_x := 0 else
62800: LD_ADDR_VAR 0 8
62804: PUSH
62805: LD_INT 0
62807: ST_TO_ADDR
62808: GO 62826
// min_x := x - r ;
62810: LD_ADDR_VAR 0 8
62814: PUSH
62815: LD_VAR 0 1
62819: PUSH
62820: LD_VAR 0 3
62824: MINUS
62825: ST_TO_ADDR
// if y - r < 0 then
62826: LD_VAR 0 2
62830: PUSH
62831: LD_VAR 0 3
62835: MINUS
62836: PUSH
62837: LD_INT 0
62839: LESS
62840: IFFALSE 62852
// min_y := 0 else
62842: LD_ADDR_VAR 0 7
62846: PUSH
62847: LD_INT 0
62849: ST_TO_ADDR
62850: GO 62868
// min_y := y - r ;
62852: LD_ADDR_VAR 0 7
62856: PUSH
62857: LD_VAR 0 2
62861: PUSH
62862: LD_VAR 0 3
62866: MINUS
62867: ST_TO_ADDR
// max_x := x + r ;
62868: LD_ADDR_VAR 0 9
62872: PUSH
62873: LD_VAR 0 1
62877: PUSH
62878: LD_VAR 0 3
62882: PLUS
62883: ST_TO_ADDR
// max_y := y + r ;
62884: LD_ADDR_VAR 0 10
62888: PUSH
62889: LD_VAR 0 2
62893: PUSH
62894: LD_VAR 0 3
62898: PLUS
62899: ST_TO_ADDR
// for _x = min_x to max_x do
62900: LD_ADDR_VAR 0 5
62904: PUSH
62905: DOUBLE
62906: LD_VAR 0 8
62910: DEC
62911: ST_TO_ADDR
62912: LD_VAR 0 9
62916: PUSH
62917: FOR_TO
62918: IFFALSE 63019
// for _y = min_y to max_y do
62920: LD_ADDR_VAR 0 6
62924: PUSH
62925: DOUBLE
62926: LD_VAR 0 7
62930: DEC
62931: ST_TO_ADDR
62932: LD_VAR 0 10
62936: PUSH
62937: FOR_TO
62938: IFFALSE 63015
// begin if not ValidHex ( _x , _y ) then
62940: LD_VAR 0 5
62944: PPUSH
62945: LD_VAR 0 6
62949: PPUSH
62950: CALL_OW 488
62954: NOT
62955: IFFALSE 62959
// continue ;
62957: GO 62937
// if GetResourceTypeXY ( _x , _y ) then
62959: LD_VAR 0 5
62963: PPUSH
62964: LD_VAR 0 6
62968: PPUSH
62969: CALL_OW 283
62973: IFFALSE 63013
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62975: LD_ADDR_VAR 0 4
62979: PUSH
62980: LD_VAR 0 4
62984: PPUSH
62985: LD_VAR 0 4
62989: PUSH
62990: LD_INT 1
62992: PLUS
62993: PPUSH
62994: LD_VAR 0 5
62998: PUSH
62999: LD_VAR 0 6
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PPUSH
63008: CALL_OW 1
63012: ST_TO_ADDR
// end ;
63013: GO 62937
63015: POP
63016: POP
63017: GO 62917
63019: POP
63020: POP
// end ;
63021: LD_VAR 0 4
63025: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63026: LD_INT 0
63028: PPUSH
63029: PPUSH
63030: PPUSH
63031: PPUSH
63032: PPUSH
63033: PPUSH
63034: PPUSH
63035: PPUSH
// if not units then
63036: LD_VAR 0 1
63040: NOT
63041: IFFALSE 63045
// exit ;
63043: GO 63569
// result := UnitFilter ( units , [ f_ok ] ) ;
63045: LD_ADDR_VAR 0 3
63049: PUSH
63050: LD_VAR 0 1
63054: PPUSH
63055: LD_INT 50
63057: PUSH
63058: EMPTY
63059: LIST
63060: PPUSH
63061: CALL_OW 72
63065: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63066: LD_ADDR_VAR 0 8
63070: PUSH
63071: LD_VAR 0 1
63075: PUSH
63076: LD_INT 1
63078: ARRAY
63079: PPUSH
63080: CALL_OW 255
63084: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63085: LD_ADDR_VAR 0 10
63089: PUSH
63090: LD_INT 29
63092: PUSH
63093: LD_INT 91
63095: PUSH
63096: LD_INT 49
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// if not result then
63104: LD_VAR 0 3
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 63569
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63113: LD_ADDR_VAR 0 5
63117: PUSH
63118: LD_INT 81
63120: PUSH
63121: LD_VAR 0 8
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PPUSH
63130: CALL_OW 69
63134: ST_TO_ADDR
// for i in result do
63135: LD_ADDR_VAR 0 4
63139: PUSH
63140: LD_VAR 0 3
63144: PUSH
63145: FOR_IN
63146: IFFALSE 63567
// begin tag := GetTag ( i ) + 1 ;
63148: LD_ADDR_VAR 0 9
63152: PUSH
63153: LD_VAR 0 4
63157: PPUSH
63158: CALL_OW 110
63162: PUSH
63163: LD_INT 1
63165: PLUS
63166: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63167: LD_ADDR_VAR 0 7
63171: PUSH
63172: LD_VAR 0 4
63176: PPUSH
63177: CALL_OW 250
63181: PPUSH
63182: LD_VAR 0 4
63186: PPUSH
63187: CALL_OW 251
63191: PPUSH
63192: LD_INT 6
63194: PPUSH
63195: CALL 62768 0 3
63199: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63200: LD_VAR 0 4
63204: PPUSH
63205: CALL_OW 247
63209: PUSH
63210: LD_INT 2
63212: EQUAL
63213: PUSH
63214: LD_VAR 0 7
63218: AND
63219: PUSH
63220: LD_VAR 0 4
63224: PPUSH
63225: CALL_OW 264
63229: PUSH
63230: LD_VAR 0 10
63234: IN
63235: NOT
63236: AND
63237: IFFALSE 63276
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63239: LD_VAR 0 4
63243: PPUSH
63244: LD_VAR 0 7
63248: PUSH
63249: LD_INT 1
63251: ARRAY
63252: PUSH
63253: LD_INT 1
63255: ARRAY
63256: PPUSH
63257: LD_VAR 0 7
63261: PUSH
63262: LD_INT 1
63264: ARRAY
63265: PUSH
63266: LD_INT 2
63268: ARRAY
63269: PPUSH
63270: CALL_OW 116
63274: GO 63565
// if path > tag then
63276: LD_VAR 0 2
63280: PUSH
63281: LD_VAR 0 9
63285: GREATER
63286: IFFALSE 63494
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63288: LD_ADDR_VAR 0 6
63292: PUSH
63293: LD_VAR 0 5
63297: PPUSH
63298: LD_INT 91
63300: PUSH
63301: LD_VAR 0 4
63305: PUSH
63306: LD_INT 8
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: PPUSH
63314: CALL_OW 72
63318: ST_TO_ADDR
// if nearEnemy then
63319: LD_VAR 0 6
63323: IFFALSE 63392
// begin if GetWeapon ( i ) = ru_time_lapser then
63325: LD_VAR 0 4
63329: PPUSH
63330: CALL_OW 264
63334: PUSH
63335: LD_INT 49
63337: EQUAL
63338: IFFALSE 63366
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63340: LD_VAR 0 4
63344: PPUSH
63345: LD_VAR 0 6
63349: PPUSH
63350: LD_VAR 0 4
63354: PPUSH
63355: CALL_OW 74
63359: PPUSH
63360: CALL_OW 112
63364: GO 63390
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63366: LD_VAR 0 4
63370: PPUSH
63371: LD_VAR 0 6
63375: PPUSH
63376: LD_VAR 0 4
63380: PPUSH
63381: CALL_OW 74
63385: PPUSH
63386: CALL 64494 0 2
// end else
63390: GO 63492
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63392: LD_VAR 0 4
63396: PPUSH
63397: LD_VAR 0 2
63401: PUSH
63402: LD_VAR 0 9
63406: ARRAY
63407: PUSH
63408: LD_INT 1
63410: ARRAY
63411: PPUSH
63412: LD_VAR 0 2
63416: PUSH
63417: LD_VAR 0 9
63421: ARRAY
63422: PUSH
63423: LD_INT 2
63425: ARRAY
63426: PPUSH
63427: CALL_OW 297
63431: PUSH
63432: LD_INT 6
63434: GREATER
63435: IFFALSE 63478
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63437: LD_VAR 0 4
63441: PPUSH
63442: LD_VAR 0 2
63446: PUSH
63447: LD_VAR 0 9
63451: ARRAY
63452: PUSH
63453: LD_INT 1
63455: ARRAY
63456: PPUSH
63457: LD_VAR 0 2
63461: PUSH
63462: LD_VAR 0 9
63466: ARRAY
63467: PUSH
63468: LD_INT 2
63470: ARRAY
63471: PPUSH
63472: CALL_OW 114
63476: GO 63492
// SetTag ( i , tag ) ;
63478: LD_VAR 0 4
63482: PPUSH
63483: LD_VAR 0 9
63487: PPUSH
63488: CALL_OW 109
// end else
63492: GO 63565
// if enemy then
63494: LD_VAR 0 5
63498: IFFALSE 63565
// begin if GetWeapon ( i ) = ru_time_lapser then
63500: LD_VAR 0 4
63504: PPUSH
63505: CALL_OW 264
63509: PUSH
63510: LD_INT 49
63512: EQUAL
63513: IFFALSE 63541
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63515: LD_VAR 0 4
63519: PPUSH
63520: LD_VAR 0 5
63524: PPUSH
63525: LD_VAR 0 4
63529: PPUSH
63530: CALL_OW 74
63534: PPUSH
63535: CALL_OW 112
63539: GO 63565
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63541: LD_VAR 0 4
63545: PPUSH
63546: LD_VAR 0 5
63550: PPUSH
63551: LD_VAR 0 4
63555: PPUSH
63556: CALL_OW 74
63560: PPUSH
63561: CALL 64494 0 2
// end ; end ;
63565: GO 63145
63567: POP
63568: POP
// end ;
63569: LD_VAR 0 3
63573: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63574: LD_INT 0
63576: PPUSH
63577: PPUSH
63578: PPUSH
// if not unit or IsInUnit ( unit ) then
63579: LD_VAR 0 1
63583: NOT
63584: PUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 310
63594: OR
63595: IFFALSE 63599
// exit ;
63597: GO 63690
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63599: LD_ADDR_VAR 0 4
63603: PUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 250
63613: PPUSH
63614: LD_VAR 0 2
63618: PPUSH
63619: LD_INT 1
63621: PPUSH
63622: CALL_OW 272
63626: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63627: LD_ADDR_VAR 0 5
63631: PUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 251
63641: PPUSH
63642: LD_VAR 0 2
63646: PPUSH
63647: LD_INT 1
63649: PPUSH
63650: CALL_OW 273
63654: ST_TO_ADDR
// if ValidHex ( x , y ) then
63655: LD_VAR 0 4
63659: PPUSH
63660: LD_VAR 0 5
63664: PPUSH
63665: CALL_OW 488
63669: IFFALSE 63690
// ComTurnXY ( unit , x , y ) ;
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_VAR 0 4
63680: PPUSH
63681: LD_VAR 0 5
63685: PPUSH
63686: CALL_OW 118
// end ;
63690: LD_VAR 0 3
63694: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63695: LD_INT 0
63697: PPUSH
63698: PPUSH
// result := false ;
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: LD_INT 0
63706: ST_TO_ADDR
// if not units then
63707: LD_VAR 0 2
63711: NOT
63712: IFFALSE 63716
// exit ;
63714: GO 63761
// for i in units do
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_VAR 0 2
63725: PUSH
63726: FOR_IN
63727: IFFALSE 63759
// if See ( side , i ) then
63729: LD_VAR 0 1
63733: PPUSH
63734: LD_VAR 0 4
63738: PPUSH
63739: CALL_OW 292
63743: IFFALSE 63757
// begin result := true ;
63745: LD_ADDR_VAR 0 3
63749: PUSH
63750: LD_INT 1
63752: ST_TO_ADDR
// exit ;
63753: POP
63754: POP
63755: GO 63761
// end ;
63757: GO 63726
63759: POP
63760: POP
// end ;
63761: LD_VAR 0 3
63765: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63766: LD_INT 0
63768: PPUSH
63769: PPUSH
63770: PPUSH
63771: PPUSH
// if not unit or not points then
63772: LD_VAR 0 1
63776: NOT
63777: PUSH
63778: LD_VAR 0 2
63782: NOT
63783: OR
63784: IFFALSE 63788
// exit ;
63786: GO 63878
// dist := 99999 ;
63788: LD_ADDR_VAR 0 5
63792: PUSH
63793: LD_INT 99999
63795: ST_TO_ADDR
// for i in points do
63796: LD_ADDR_VAR 0 4
63800: PUSH
63801: LD_VAR 0 2
63805: PUSH
63806: FOR_IN
63807: IFFALSE 63876
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63809: LD_ADDR_VAR 0 6
63813: PUSH
63814: LD_VAR 0 1
63818: PPUSH
63819: LD_VAR 0 4
63823: PUSH
63824: LD_INT 1
63826: ARRAY
63827: PPUSH
63828: LD_VAR 0 4
63832: PUSH
63833: LD_INT 2
63835: ARRAY
63836: PPUSH
63837: CALL_OW 297
63841: ST_TO_ADDR
// if tmpDist < dist then
63842: LD_VAR 0 6
63846: PUSH
63847: LD_VAR 0 5
63851: LESS
63852: IFFALSE 63874
// begin result := i ;
63854: LD_ADDR_VAR 0 3
63858: PUSH
63859: LD_VAR 0 4
63863: ST_TO_ADDR
// dist := tmpDist ;
63864: LD_ADDR_VAR 0 5
63868: PUSH
63869: LD_VAR 0 6
63873: ST_TO_ADDR
// end ; end ;
63874: GO 63806
63876: POP
63877: POP
// end ;
63878: LD_VAR 0 3
63882: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63883: LD_INT 0
63885: PPUSH
// uc_side := side ;
63886: LD_ADDR_OWVAR 20
63890: PUSH
63891: LD_VAR 0 1
63895: ST_TO_ADDR
// uc_nation := 3 ;
63896: LD_ADDR_OWVAR 21
63900: PUSH
63901: LD_INT 3
63903: ST_TO_ADDR
// vc_chassis := 25 ;
63904: LD_ADDR_OWVAR 37
63908: PUSH
63909: LD_INT 25
63911: ST_TO_ADDR
// vc_engine := engine_siberite ;
63912: LD_ADDR_OWVAR 39
63916: PUSH
63917: LD_INT 3
63919: ST_TO_ADDR
// vc_control := control_computer ;
63920: LD_ADDR_OWVAR 38
63924: PUSH
63925: LD_INT 3
63927: ST_TO_ADDR
// vc_weapon := 59 ;
63928: LD_ADDR_OWVAR 40
63932: PUSH
63933: LD_INT 59
63935: ST_TO_ADDR
// result := CreateVehicle ;
63936: LD_ADDR_VAR 0 5
63940: PUSH
63941: CALL_OW 45
63945: ST_TO_ADDR
// SetDir ( result , d ) ;
63946: LD_VAR 0 5
63950: PPUSH
63951: LD_VAR 0 4
63955: PPUSH
63956: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63960: LD_VAR 0 5
63964: PPUSH
63965: LD_VAR 0 2
63969: PPUSH
63970: LD_VAR 0 3
63974: PPUSH
63975: LD_INT 0
63977: PPUSH
63978: CALL_OW 48
// end ;
63982: LD_VAR 0 5
63986: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63987: LD_INT 0
63989: PPUSH
63990: PPUSH
63991: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63992: LD_ADDR_VAR 0 2
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64015: LD_VAR 0 1
64019: NOT
64020: PUSH
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 264
64030: PUSH
64031: LD_INT 12
64033: PUSH
64034: LD_INT 51
64036: PUSH
64037: LD_INT 32
64039: PUSH
64040: LD_INT 89
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: IN
64049: NOT
64050: OR
64051: IFFALSE 64055
// exit ;
64053: GO 64153
// for i := 1 to 3 do
64055: LD_ADDR_VAR 0 3
64059: PUSH
64060: DOUBLE
64061: LD_INT 1
64063: DEC
64064: ST_TO_ADDR
64065: LD_INT 3
64067: PUSH
64068: FOR_TO
64069: IFFALSE 64151
// begin tmp := GetCargo ( cargo , i ) ;
64071: LD_ADDR_VAR 0 4
64075: PUSH
64076: LD_VAR 0 1
64080: PPUSH
64081: LD_VAR 0 3
64085: PPUSH
64086: CALL_OW 289
64090: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64091: LD_ADDR_VAR 0 2
64095: PUSH
64096: LD_VAR 0 2
64100: PPUSH
64101: LD_VAR 0 3
64105: PPUSH
64106: LD_VAR 0 4
64110: PPUSH
64111: CALL_OW 1
64115: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64116: LD_ADDR_VAR 0 2
64120: PUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: LD_INT 4
64128: PPUSH
64129: LD_VAR 0 2
64133: PUSH
64134: LD_INT 4
64136: ARRAY
64137: PUSH
64138: LD_VAR 0 4
64142: PLUS
64143: PPUSH
64144: CALL_OW 1
64148: ST_TO_ADDR
// end ;
64149: GO 64068
64151: POP
64152: POP
// end ;
64153: LD_VAR 0 2
64157: RET
// export function Length ( array ) ; begin
64158: LD_INT 0
64160: PPUSH
// result := array + 0 ;
64161: LD_ADDR_VAR 0 2
64165: PUSH
64166: LD_VAR 0 1
64170: PUSH
64171: LD_INT 0
64173: PLUS
64174: ST_TO_ADDR
// end ;
64175: LD_VAR 0 2
64179: RET
// export function PrepareArray ( array ) ; begin
64180: LD_INT 0
64182: PPUSH
// result := array diff 0 ;
64183: LD_ADDR_VAR 0 2
64187: PUSH
64188: LD_VAR 0 1
64192: PUSH
64193: LD_INT 0
64195: DIFF
64196: ST_TO_ADDR
// if not result [ 1 ] then
64197: LD_VAR 0 2
64201: PUSH
64202: LD_INT 1
64204: ARRAY
64205: NOT
64206: IFFALSE 64226
// result := Delete ( result , 1 ) ;
64208: LD_ADDR_VAR 0 2
64212: PUSH
64213: LD_VAR 0 2
64217: PPUSH
64218: LD_INT 1
64220: PPUSH
64221: CALL_OW 3
64225: ST_TO_ADDR
// end ;
64226: LD_VAR 0 2
64230: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64231: LD_INT 0
64233: PPUSH
64234: PPUSH
64235: PPUSH
64236: PPUSH
// sibRocketRange := 25 ;
64237: LD_ADDR_VAR 0 6
64241: PUSH
64242: LD_INT 25
64244: ST_TO_ADDR
// result := false ;
64245: LD_ADDR_VAR 0 4
64249: PUSH
64250: LD_INT 0
64252: ST_TO_ADDR
// for i := 0 to 5 do
64253: LD_ADDR_VAR 0 5
64257: PUSH
64258: DOUBLE
64259: LD_INT 0
64261: DEC
64262: ST_TO_ADDR
64263: LD_INT 5
64265: PUSH
64266: FOR_TO
64267: IFFALSE 64334
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64269: LD_VAR 0 1
64273: PPUSH
64274: LD_VAR 0 5
64278: PPUSH
64279: LD_VAR 0 6
64283: PPUSH
64284: CALL_OW 272
64288: PPUSH
64289: LD_VAR 0 2
64293: PPUSH
64294: LD_VAR 0 5
64298: PPUSH
64299: LD_VAR 0 6
64303: PPUSH
64304: CALL_OW 273
64308: PPUSH
64309: LD_VAR 0 3
64313: PPUSH
64314: CALL_OW 309
64318: IFFALSE 64332
// begin result := true ;
64320: LD_ADDR_VAR 0 4
64324: PUSH
64325: LD_INT 1
64327: ST_TO_ADDR
// exit ;
64328: POP
64329: POP
64330: GO 64336
// end ;
64332: GO 64266
64334: POP
64335: POP
// end ;
64336: LD_VAR 0 4
64340: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64341: LD_INT 0
64343: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64344: LD_VAR 0 1
64348: PPUSH
64349: LD_VAR 0 2
64353: PPUSH
64354: LD_INT 0
64356: PPUSH
64357: LD_INT 0
64359: PPUSH
64360: LD_INT 1
64362: PPUSH
64363: LD_INT 0
64365: PPUSH
64366: CALL_OW 587
// end ;
64370: LD_VAR 0 3
64374: RET
// export function CenterOnNow ( unit ) ; begin
64375: LD_INT 0
64377: PPUSH
// result := IsInUnit ( unit ) ;
64378: LD_ADDR_VAR 0 2
64382: PUSH
64383: LD_VAR 0 1
64387: PPUSH
64388: CALL_OW 310
64392: ST_TO_ADDR
// if not result then
64393: LD_VAR 0 2
64397: NOT
64398: IFFALSE 64410
// result := unit ;
64400: LD_ADDR_VAR 0 2
64404: PUSH
64405: LD_VAR 0 1
64409: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64410: LD_VAR 0 1
64414: PPUSH
64415: CALL_OW 87
// end ;
64419: LD_VAR 0 2
64423: RET
// export function ComMoveHex ( unit , hex ) ; begin
64424: LD_INT 0
64426: PPUSH
// if not hex then
64427: LD_VAR 0 2
64431: NOT
64432: IFFALSE 64436
// exit ;
64434: GO 64489
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64436: LD_VAR 0 2
64440: PUSH
64441: LD_INT 1
64443: ARRAY
64444: PPUSH
64445: LD_VAR 0 2
64449: PUSH
64450: LD_INT 2
64452: ARRAY
64453: PPUSH
64454: CALL_OW 428
64458: IFFALSE 64462
// exit ;
64460: GO 64489
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64462: LD_VAR 0 1
64466: PPUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_INT 1
64474: ARRAY
64475: PPUSH
64476: LD_VAR 0 2
64480: PUSH
64481: LD_INT 2
64483: ARRAY
64484: PPUSH
64485: CALL_OW 111
// end ;
64489: LD_VAR 0 3
64493: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64494: LD_INT 0
64496: PPUSH
64497: PPUSH
64498: PPUSH
// if not unit or not enemy then
64499: LD_VAR 0 1
64503: NOT
64504: PUSH
64505: LD_VAR 0 2
64509: NOT
64510: OR
64511: IFFALSE 64515
// exit ;
64513: GO 64639
// x := GetX ( enemy ) ;
64515: LD_ADDR_VAR 0 4
64519: PUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: CALL_OW 250
64529: ST_TO_ADDR
// y := GetY ( enemy ) ;
64530: LD_ADDR_VAR 0 5
64534: PUSH
64535: LD_VAR 0 2
64539: PPUSH
64540: CALL_OW 251
64544: ST_TO_ADDR
// if ValidHex ( x , y ) then
64545: LD_VAR 0 4
64549: PPUSH
64550: LD_VAR 0 5
64554: PPUSH
64555: CALL_OW 488
64559: IFFALSE 64639
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64561: LD_VAR 0 2
64565: PPUSH
64566: CALL_OW 247
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: IN
64581: PUSH
64582: LD_VAR 0 1
64586: PPUSH
64587: CALL_OW 255
64591: PPUSH
64592: LD_VAR 0 2
64596: PPUSH
64597: CALL_OW 292
64601: OR
64602: IFFALSE 64620
// ComAttackUnit ( unit , enemy ) else
64604: LD_VAR 0 1
64608: PPUSH
64609: LD_VAR 0 2
64613: PPUSH
64614: CALL_OW 115
64618: GO 64639
// ComAgressiveMove ( unit , x , y ) ;
64620: LD_VAR 0 1
64624: PPUSH
64625: LD_VAR 0 4
64629: PPUSH
64630: LD_VAR 0 5
64634: PPUSH
64635: CALL_OW 114
// end ;
64639: LD_VAR 0 3
64643: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64644: LD_INT 0
64646: PPUSH
64647: PPUSH
64648: PPUSH
// list := AreaToList ( area , 0 ) ;
64649: LD_ADDR_VAR 0 5
64653: PUSH
64654: LD_VAR 0 1
64658: PPUSH
64659: LD_INT 0
64661: PPUSH
64662: CALL_OW 517
64666: ST_TO_ADDR
// if not list then
64667: LD_VAR 0 5
64671: NOT
64672: IFFALSE 64676
// exit ;
64674: GO 64806
// if all then
64676: LD_VAR 0 2
64680: IFFALSE 64768
// begin for i := 1 to list [ 1 ] do
64682: LD_ADDR_VAR 0 4
64686: PUSH
64687: DOUBLE
64688: LD_INT 1
64690: DEC
64691: ST_TO_ADDR
64692: LD_VAR 0 5
64696: PUSH
64697: LD_INT 1
64699: ARRAY
64700: PUSH
64701: FOR_TO
64702: IFFALSE 64764
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64704: LD_ADDR_VAR 0 3
64708: PUSH
64709: LD_VAR 0 3
64713: PPUSH
64714: LD_VAR 0 3
64718: PUSH
64719: LD_INT 1
64721: PLUS
64722: PPUSH
64723: LD_VAR 0 5
64727: PUSH
64728: LD_INT 1
64730: ARRAY
64731: PUSH
64732: LD_VAR 0 4
64736: ARRAY
64737: PUSH
64738: LD_VAR 0 5
64742: PUSH
64743: LD_INT 2
64745: ARRAY
64746: PUSH
64747: LD_VAR 0 4
64751: ARRAY
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PPUSH
64757: CALL_OW 1
64761: ST_TO_ADDR
64762: GO 64701
64764: POP
64765: POP
// exit ;
64766: GO 64806
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64768: LD_ADDR_VAR 0 3
64772: PUSH
64773: LD_VAR 0 5
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PUSH
64782: LD_INT 1
64784: ARRAY
64785: PUSH
64786: LD_VAR 0 5
64790: PUSH
64791: LD_INT 2
64793: ARRAY
64794: PUSH
64795: LD_INT 1
64797: ARRAY
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: ST_TO_ADDR
// end ;
64806: LD_VAR 0 3
64810: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64811: LD_INT 0
64813: PPUSH
64814: PPUSH
// list := AreaToList ( area , 0 ) ;
64815: LD_ADDR_VAR 0 4
64819: PUSH
64820: LD_VAR 0 1
64824: PPUSH
64825: LD_INT 0
64827: PPUSH
64828: CALL_OW 517
64832: ST_TO_ADDR
// if not list then
64833: LD_VAR 0 4
64837: NOT
64838: IFFALSE 64842
// exit ;
64840: GO 64883
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64842: LD_ADDR_VAR 0 3
64846: PUSH
64847: LD_VAR 0 4
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PUSH
64860: LD_VAR 0 4
64864: PUSH
64865: LD_INT 2
64867: ARRAY
64868: PUSH
64869: LD_INT 1
64871: ARRAY
64872: PUSH
64873: LD_VAR 0 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: LIST
64882: ST_TO_ADDR
// end ;
64883: LD_VAR 0 3
64887: RET
// export function First ( array ) ; begin
64888: LD_INT 0
64890: PPUSH
// if not array then
64891: LD_VAR 0 1
64895: NOT
64896: IFFALSE 64900
// exit ;
64898: GO 64914
// result := array [ 1 ] ;
64900: LD_ADDR_VAR 0 2
64904: PUSH
64905: LD_VAR 0 1
64909: PUSH
64910: LD_INT 1
64912: ARRAY
64913: ST_TO_ADDR
// end ;
64914: LD_VAR 0 2
64918: RET
// export function Last ( array ) ; begin
64919: LD_INT 0
64921: PPUSH
// if not array then
64922: LD_VAR 0 1
64926: NOT
64927: IFFALSE 64931
// exit ;
64929: GO 64947
// result := array [ array ] ;
64931: LD_ADDR_VAR 0 2
64935: PUSH
64936: LD_VAR 0 1
64940: PUSH
64941: LD_VAR 0 1
64945: ARRAY
64946: ST_TO_ADDR
// end ;
64947: LD_VAR 0 2
64951: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64952: LD_INT 0
64954: PPUSH
64955: PPUSH
// result := [ ] ;
64956: LD_ADDR_VAR 0 5
64960: PUSH
64961: EMPTY
64962: ST_TO_ADDR
// if not array then
64963: LD_VAR 0 1
64967: NOT
64968: IFFALSE 64972
// exit ;
64970: GO 65084
// for i := 1 to array do
64972: LD_ADDR_VAR 0 6
64976: PUSH
64977: DOUBLE
64978: LD_INT 1
64980: DEC
64981: ST_TO_ADDR
64982: LD_VAR 0 1
64986: PUSH
64987: FOR_TO
64988: IFFALSE 65082
// if array [ i ] [ index ] = value then
64990: LD_VAR 0 1
64994: PUSH
64995: LD_VAR 0 6
64999: ARRAY
65000: PUSH
65001: LD_VAR 0 2
65005: ARRAY
65006: PUSH
65007: LD_VAR 0 3
65011: EQUAL
65012: IFFALSE 65080
// begin if indexColumn then
65014: LD_VAR 0 4
65018: IFFALSE 65054
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65020: LD_ADDR_VAR 0 5
65024: PUSH
65025: LD_VAR 0 5
65029: PPUSH
65030: LD_VAR 0 1
65034: PUSH
65035: LD_VAR 0 6
65039: ARRAY
65040: PUSH
65041: LD_VAR 0 4
65045: ARRAY
65046: PPUSH
65047: CALL 60422 0 2
65051: ST_TO_ADDR
65052: GO 65080
// result := Join ( result , array [ i ] ) ;
65054: LD_ADDR_VAR 0 5
65058: PUSH
65059: LD_VAR 0 5
65063: PPUSH
65064: LD_VAR 0 1
65068: PUSH
65069: LD_VAR 0 6
65073: ARRAY
65074: PPUSH
65075: CALL 60422 0 2
65079: ST_TO_ADDR
// end ;
65080: GO 64987
65082: POP
65083: POP
// end ;
65084: LD_VAR 0 5
65088: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
65089: LD_INT 0
65091: PPUSH
65092: PPUSH
65093: PPUSH
// if btype = b_depot then
65094: LD_VAR 0 2
65098: PUSH
65099: LD_INT 0
65101: EQUAL
65102: IFFALSE 65114
// begin result := true ;
65104: LD_ADDR_VAR 0 3
65108: PUSH
65109: LD_INT 1
65111: ST_TO_ADDR
// exit ;
65112: GO 65230
// end ; pom := GetBase ( depot ) ;
65114: LD_ADDR_VAR 0 4
65118: PUSH
65119: LD_VAR 0 1
65123: PPUSH
65124: CALL_OW 274
65128: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
65129: LD_ADDR_VAR 0 5
65133: PUSH
65134: LD_VAR 0 2
65138: PPUSH
65139: LD_VAR 0 1
65143: PPUSH
65144: CALL_OW 248
65148: PPUSH
65149: CALL_OW 450
65153: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
65154: LD_ADDR_VAR 0 3
65158: PUSH
65159: LD_VAR 0 4
65163: PPUSH
65164: LD_INT 1
65166: PPUSH
65167: CALL_OW 275
65171: PUSH
65172: LD_VAR 0 5
65176: PUSH
65177: LD_INT 1
65179: ARRAY
65180: GREATEREQUAL
65181: PUSH
65182: LD_VAR 0 4
65186: PPUSH
65187: LD_INT 2
65189: PPUSH
65190: CALL_OW 275
65194: PUSH
65195: LD_VAR 0 5
65199: PUSH
65200: LD_INT 2
65202: ARRAY
65203: GREATEREQUAL
65204: AND
65205: PUSH
65206: LD_VAR 0 4
65210: PPUSH
65211: LD_INT 3
65213: PPUSH
65214: CALL_OW 275
65218: PUSH
65219: LD_VAR 0 5
65223: PUSH
65224: LD_INT 3
65226: ARRAY
65227: GREATEREQUAL
65228: AND
65229: ST_TO_ADDR
// end ;
65230: LD_VAR 0 3
65234: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65235: LD_INT 0
65237: PPUSH
// if not vehicles or not parkingPoint then
65238: LD_VAR 0 1
65242: NOT
65243: PUSH
65244: LD_VAR 0 2
65248: NOT
65249: OR
65250: IFFALSE 65254
// exit ;
65252: GO 65352
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65254: LD_ADDR_VAR 0 1
65258: PUSH
65259: LD_VAR 0 1
65263: PPUSH
65264: LD_INT 50
65266: PUSH
65267: EMPTY
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: LD_INT 92
65275: PUSH
65276: LD_VAR 0 2
65280: PUSH
65281: LD_INT 1
65283: ARRAY
65284: PUSH
65285: LD_VAR 0 2
65289: PUSH
65290: LD_INT 2
65292: ARRAY
65293: PUSH
65294: LD_INT 8
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PPUSH
65311: CALL_OW 72
65315: ST_TO_ADDR
// if not vehicles then
65316: LD_VAR 0 1
65320: NOT
65321: IFFALSE 65325
// exit ;
65323: GO 65352
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65325: LD_VAR 0 1
65329: PPUSH
65330: LD_VAR 0 2
65334: PUSH
65335: LD_INT 1
65337: ARRAY
65338: PPUSH
65339: LD_VAR 0 2
65343: PUSH
65344: LD_INT 2
65346: ARRAY
65347: PPUSH
65348: CALL_OW 111
// end ;
65352: LD_VAR 0 3
65356: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65357: LD_INT 0
65359: PPUSH
65360: PPUSH
65361: PPUSH
// if not side or not area then
65362: LD_VAR 0 1
65366: NOT
65367: PUSH
65368: LD_VAR 0 2
65372: NOT
65373: OR
65374: IFFALSE 65378
// exit ;
65376: GO 65497
// tmp := AreaToList ( area , 0 ) ;
65378: LD_ADDR_VAR 0 5
65382: PUSH
65383: LD_VAR 0 2
65387: PPUSH
65388: LD_INT 0
65390: PPUSH
65391: CALL_OW 517
65395: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65396: LD_ADDR_VAR 0 4
65400: PUSH
65401: DOUBLE
65402: LD_INT 1
65404: DEC
65405: ST_TO_ADDR
65406: LD_VAR 0 5
65410: PUSH
65411: LD_INT 1
65413: ARRAY
65414: PUSH
65415: FOR_TO
65416: IFFALSE 65495
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65418: LD_VAR 0 5
65422: PUSH
65423: LD_INT 1
65425: ARRAY
65426: PUSH
65427: LD_VAR 0 4
65431: ARRAY
65432: PPUSH
65433: LD_VAR 0 5
65437: PUSH
65438: LD_INT 2
65440: ARRAY
65441: PUSH
65442: LD_VAR 0 4
65446: ARRAY
65447: PPUSH
65448: CALL_OW 351
65452: IFFALSE 65493
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65454: LD_VAR 0 5
65458: PUSH
65459: LD_INT 1
65461: ARRAY
65462: PUSH
65463: LD_VAR 0 4
65467: ARRAY
65468: PPUSH
65469: LD_VAR 0 5
65473: PUSH
65474: LD_INT 2
65476: ARRAY
65477: PUSH
65478: LD_VAR 0 4
65482: ARRAY
65483: PPUSH
65484: LD_VAR 0 1
65488: PPUSH
65489: CALL_OW 244
// end ;
65493: GO 65415
65495: POP
65496: POP
// end ; end_of_file
65497: LD_VAR 0 3
65501: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65502: LD_VAR 0 1
65506: PPUSH
65507: LD_VAR 0 2
65511: PPUSH
65512: LD_VAR 0 3
65516: PPUSH
65517: LD_VAR 0 4
65521: PPUSH
65522: LD_VAR 0 5
65526: PPUSH
65527: LD_VAR 0 6
65531: PPUSH
65532: CALL 2027 0 6
// end ;
65536: PPOPN 6
65538: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65539: LD_INT 0
65541: PPUSH
// begin if not units then
65542: LD_VAR 0 1
65546: NOT
65547: IFFALSE 65551
// exit ;
65549: GO 65551
// end ;
65551: PPOPN 7
65553: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65554: CALL 1914 0 0
// end ;
65558: PPOPN 1
65560: END
