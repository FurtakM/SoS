// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 77
// Start ;
  73: CALL 90 0 0
// Counter ;
  77: CALL 305 0 0
// PrepareNature ;
  81: CALL 552 0 0
// InitPlayers ;
  85: CALL 1107 0 0
// end ;
  89: END
// export level , test ; function Start ; begin
  90: LD_INT 0
  92: PPUSH
// case Query ( infos ) of 1 :
  93: LD_STRING infos
  95: PPUSH
  96: CALL_OW 97
 100: PUSH
 101: LD_INT 1
 103: DOUBLE
 104: EQUAL
 105: IFTRUE 109
 107: GO 112
 109: POP
// ; end ;
 110: GO 113
 112: POP
// case Query ( level ) of 1 :
 113: LD_STRING level
 115: PPUSH
 116: CALL_OW 97
 120: PUSH
 121: LD_INT 1
 123: DOUBLE
 124: EQUAL
 125: IFTRUE 129
 127: GO 140
 129: POP
// level := 1 ; 2 :
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_INT 1
 137: ST_TO_ADDR
 138: GO 179
 140: LD_INT 2
 142: DOUBLE
 143: EQUAL
 144: IFTRUE 148
 146: GO 159
 148: POP
// level := 2 ; 3 :
 149: LD_ADDR_EXP 1
 153: PUSH
 154: LD_INT 2
 156: ST_TO_ADDR
 157: GO 179
 159: LD_INT 3
 161: DOUBLE
 162: EQUAL
 163: IFTRUE 167
 165: GO 178
 167: POP
// level := 3 ; end ;
 168: LD_ADDR_EXP 1
 172: PUSH
 173: LD_INT 3
 175: ST_TO_ADDR
 176: GO 179
 178: POP
// case Query ( difficulty ) of 1 :
 179: LD_STRING difficulty
 181: PPUSH
 182: CALL_OW 97
 186: PUSH
 187: LD_INT 1
 189: DOUBLE
 190: EQUAL
 191: IFTRUE 195
 193: GO 206
 195: POP
// difficulty := 1 ; 2 :
 196: LD_ADDR_OWVAR 67
 200: PUSH
 201: LD_INT 1
 203: ST_TO_ADDR
 204: GO 245
 206: LD_INT 2
 208: DOUBLE
 209: EQUAL
 210: IFTRUE 214
 212: GO 225
 214: POP
// difficulty := 2 ; 3 :
 215: LD_ADDR_OWVAR 67
 219: PUSH
 220: LD_INT 2
 222: ST_TO_ADDR
 223: GO 245
 225: LD_INT 3
 227: DOUBLE
 228: EQUAL
 229: IFTRUE 233
 231: GO 244
 233: POP
// difficulty := 3 ; end ;
 234: LD_ADDR_OWVAR 67
 238: PUSH
 239: LD_INT 3
 241: ST_TO_ADDR
 242: GO 245
 244: POP
// case Query ( class ) of 1 :
 245: LD_STRING class
 247: PPUSH
 248: CALL_OW 97
 252: PUSH
 253: LD_INT 1
 255: DOUBLE
 256: EQUAL
 257: IFTRUE 261
 259: GO 272
 261: POP
// class_1 := class_soldier ; 2 :
 262: LD_ADDR_EXP 25
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
 270: GO 292
 272: LD_INT 2
 274: DOUBLE
 275: EQUAL
 276: IFTRUE 280
 278: GO 291
 280: POP
// class_1 := class_sniper ; end ;
 281: LD_ADDR_EXP 25
 285: PUSH
 286: LD_INT 5
 288: ST_TO_ADDR
 289: GO 292
 291: POP
// music_nat := 3 ;
 292: LD_ADDR_OWVAR 71
 296: PUSH
 297: LD_INT 3
 299: ST_TO_ADDR
// end ;
 300: LD_VAR 0 1
 304: RET
// export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 305: LD_INT 0
 307: PPUSH
// level := 3 ;
 308: LD_ADDR_EXP 1
 312: PUSH
 313: LD_INT 3
 315: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 316: LD_ADDR_EXP 3
 320: PUSH
 321: LD_INT 10
 323: PUSH
 324: LD_INT 15
 326: PUSH
 327: LD_INT 20
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: LD_EXP 1
 339: ARRAY
 340: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 341: LD_ADDR_EXP 4
 345: PUSH
 346: LD_INT 8
 348: PUSH
 349: LD_INT 12
 351: PUSH
 352: LD_INT 16
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: LD_EXP 1
 364: ARRAY
 365: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 366: LD_ADDR_EXP 5
 370: PUSH
 371: LD_INT 5
 373: PUSH
 374: LD_INT 10
 376: PUSH
 377: LD_INT 15
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_EXP 1
 389: ARRAY
 390: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 391: LD_ADDR_EXP 6
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 3
 401: PUSH
 402: LD_INT 5
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_EXP 1
 414: ARRAY
 415: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 416: LD_ADDR_EXP 7
 420: PUSH
 421: LD_INT 4
 423: PUSH
 424: LD_INT 7
 426: PUSH
 427: LD_INT 10
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_EXP 1
 439: ARRAY
 440: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 441: LD_ADDR_EXP 8
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: LD_INT 2
 451: PUSH
 452: LD_INT 3
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_EXP 1
 464: ARRAY
 465: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 466: LD_ADDR_EXP 16
 470: PUSH
 471: LD_INT 1
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 1
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_EXP 1
 489: ARRAY
 490: ST_TO_ADDR
// PE := 5 ;
 491: LD_ADDR_EXP 10
 495: PUSH
 496: LD_INT 5
 498: ST_TO_ADDR
// PB := 10 ;
 499: LD_ADDR_EXP 11
 503: PUSH
 504: LD_INT 10
 506: ST_TO_ADDR
// PT := 50 ;
 507: LD_ADDR_EXP 12
 511: PUSH
 512: LD_INT 50
 514: ST_TO_ADDR
// PF := 100 ;
 515: LD_ADDR_EXP 13
 519: PUSH
 520: LD_INT 100
 522: ST_TO_ADDR
// PH := 120 ;
 523: LD_ADDR_EXP 14
 527: PUSH
 528: LD_INT 120
 530: ST_TO_ADDR
// PM := 300 ;
 531: LD_ADDR_EXP 15
 535: PUSH
 536: LD_INT 300
 538: ST_TO_ADDR
// PA := 1000 ;
 539: LD_ADDR_EXP 16
 543: PUSH
 544: LD_INT 1000
 546: ST_TO_ADDR
// end ; end_of_file
 547: LD_VAR 0 1
 551: RET
// export function PrepareNature ; var i , animal ; begin
 552: LD_INT 0
 554: PPUSH
 555: PPUSH
 556: PPUSH
// uc_side = 0 ;
 557: LD_ADDR_OWVAR 20
 561: PUSH
 562: LD_INT 0
 564: ST_TO_ADDR
// uc_nation = 0 ;
 565: LD_ADDR_OWVAR 21
 569: PUSH
 570: LD_INT 0
 572: ST_TO_ADDR
// for i = 1 to B1 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_INT 1
 581: DEC
 582: ST_TO_ADDR
 583: LD_EXP 4
 587: PUSH
 588: FOR_TO
 589: IFFALSE 642
// begin hc_class = 18 ;
 591: LD_ADDR_OWVAR 28
 595: PUSH
 596: LD_INT 18
 598: ST_TO_ADDR
// hc_gallery = sandnature ;
 599: LD_ADDR_OWVAR 33
 603: PUSH
 604: LD_STRING sandnature
 606: ST_TO_ADDR
// hc_face_number = 1 ;
 607: LD_ADDR_OWVAR 34
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// animal := CreateHuman ;
 615: LD_ADDR_VAR 0 3
 619: PUSH
 620: CALL_OW 44
 624: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 625: LD_VAR 0 3
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 588
 642: POP
 643: POP
// for i = 1 to T1 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_EXP 5
 658: PUSH
 659: FOR_TO
 660: IFFALSE 729
// begin hc_class = class_tiger ;
 662: LD_ADDR_OWVAR 28
 666: PUSH
 667: LD_INT 14
 669: ST_TO_ADDR
// hc_gallery = sandnature ;
 670: LD_ADDR_OWVAR 33
 674: PUSH
 675: LD_STRING sandnature
 677: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 678: LD_ADDR_OWVAR 35
 682: PUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_INT 50
 688: PPUSH
 689: CALL_OW 12
 693: ST_TO_ADDR
// hc_face_number = 3 ;
 694: LD_ADDR_OWVAR 34
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// animal := CreateHuman ;
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: CALL_OW 44
 711: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 712: LD_VAR 0 3
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 659
 729: POP
 730: POP
// for i = 1 to T1 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_EXP 5
 745: PUSH
 746: FOR_TO
 747: IFFALSE 808
// begin hc_class = 21 ;
 749: LD_ADDR_OWVAR 28
 753: PUSH
 754: LD_INT 21
 756: ST_TO_ADDR
// hc_gallery = sandnature ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING sandnature
 764: ST_TO_ADDR
// hc_agressivity = 0 ;
 765: LD_ADDR_OWVAR 35
 769: PUSH
 770: LD_INT 0
 772: ST_TO_ADDR
// hc_face_number = 5 ;
 773: LD_ADDR_OWVAR 34
 777: PUSH
 778: LD_INT 5
 780: ST_TO_ADDR
// animal := CreateHuman ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 2
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 746
 808: POP
 809: POP
// for i = 1 to E1 do
 810: LD_ADDR_VAR 0 2
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_EXP 3
 824: PUSH
 825: FOR_TO
 826: IFFALSE 879
// begin hc_class = 13 ;
 828: LD_ADDR_OWVAR 28
 832: PUSH
 833: LD_INT 13
 835: ST_TO_ADDR
// hc_gallery = sandnature ;
 836: LD_ADDR_OWVAR 33
 840: PUSH
 841: LD_STRING sandnature
 843: ST_TO_ADDR
// hc_face_number = 4 ;
 844: LD_ADDR_OWVAR 34
 848: PUSH
 849: LD_INT 4
 851: ST_TO_ADDR
// animal := CreateHuman ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: CALL_OW 44
 861: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 862: LD_VAR 0 3
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// end ;
 877: GO 825
 879: POP
 880: POP
// for i = 1 to F1 do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_EXP 6
 895: PUSH
 896: FOR_TO
 897: IFFALSE 950
// begin hc_class = 20 ;
 899: LD_ADDR_OWVAR 28
 903: PUSH
 904: LD_INT 20
 906: ST_TO_ADDR
// hc_gallery = sandnature ;
 907: LD_ADDR_OWVAR 33
 911: PUSH
 912: LD_STRING sandnature
 914: ST_TO_ADDR
// hc_face_number = 2 ;
 915: LD_ADDR_OWVAR 34
 919: PUSH
 920: LD_INT 2
 922: ST_TO_ADDR
// animal := CreateHuman ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: CALL_OW 44
 932: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 933: LD_VAR 0 3
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: LD_INT 0
 943: PPUSH
 944: CALL_OW 49
// end ;
 948: GO 896
 950: POP
 951: POP
// for i = 1 to M1 do
 952: LD_ADDR_VAR 0 2
 956: PUSH
 957: DOUBLE
 958: LD_INT 1
 960: DEC
 961: ST_TO_ADDR
 962: LD_EXP 8
 966: PUSH
 967: FOR_TO
 968: IFFALSE 1013
// begin vc_chassis := 31 ;
 970: LD_ADDR_OWVAR 37
 974: PUSH
 975: LD_INT 31
 977: ST_TO_ADDR
// vc_control := control_rider ;
 978: LD_ADDR_OWVAR 38
 982: PUSH
 983: LD_INT 4
 985: ST_TO_ADDR
// animal := CreateVehicle ;
 986: LD_ADDR_VAR 0 3
 990: PUSH
 991: CALL_OW 45
 995: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 996: LD_VAR 0 3
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 49
// end ;
1011: GO 967
1013: POP
1014: POP
// hc_gallery :=  ;
1015: LD_ADDR_OWVAR 33
1019: PUSH
1020: LD_STRING 
1022: ST_TO_ADDR
// hc_class := class_apeman ;
1023: LD_ADDR_OWVAR 28
1027: PUSH
1028: LD_INT 12
1030: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
1031: LD_ADDR_OWVAR 29
1035: PUSH
1036: LD_INT 15
1038: PUSH
1039: LD_INT 15
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
1046: LD_ADDR_OWVAR 31
1050: PUSH
1051: LD_INT 10
1053: PUSH
1054: LD_INT 10
1056: PUSH
1057: LD_INT 10
1059: PUSH
1060: LD_INT 10
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: ST_TO_ADDR
// hc_name := White Apeman ;
1069: LD_ADDR_OWVAR 26
1073: PUSH
1074: LD_STRING White Apeman
1076: ST_TO_ADDR
// animal := CreateHuman ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: CALL_OW 44
1086: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
1087: LD_VAR 0 3
1091: PPUSH
1092: LD_INT 12
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// end ; end_of_file
1102: LD_VAR 0 1
1106: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
1107: LD_INT 0
1109: PPUSH
// score_player := 0 ;
1110: LD_ADDR_EXP 28
1114: PUSH
1115: LD_INT 0
1117: ST_TO_ADDR
// score_enemy1 := 0 ;
1118: LD_ADDR_EXP 29
1122: PUSH
1123: LD_INT 0
1125: ST_TO_ADDR
// score_enemy2 := 0 ;
1126: LD_ADDR_EXP 30
1130: PUSH
1131: LD_INT 0
1133: ST_TO_ADDR
// score_enemy3 := 0 ;
1134: LD_ADDR_EXP 31
1138: PUSH
1139: LD_INT 0
1141: ST_TO_ADDR
// score_enemy4 := 0 ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_INT 0
1149: ST_TO_ADDR
// score_enemy5 := 0 ;
1150: LD_ADDR_EXP 33
1154: PUSH
1155: LD_INT 0
1157: ST_TO_ADDR
// score_enemy6 := 0 ;
1158: LD_ADDR_EXP 34
1162: PUSH
1163: LD_INT 0
1165: ST_TO_ADDR
// score_enemy7 := 0 ;
1166: LD_ADDR_EXP 35
1170: PUSH
1171: LD_INT 0
1173: ST_TO_ADDR
// if difficulty > 1 then
1174: LD_OWVAR 67
1178: PUSH
1179: LD_INT 1
1181: GREATER
1182: IFFALSE 1194
// class_2 := class_sniper else
1184: LD_ADDR_EXP 26
1188: PUSH
1189: LD_INT 5
1191: ST_TO_ADDR
1192: GO 1202
// class_2 := class_soldier ;
1194: LD_ADDR_EXP 26
1198: PUSH
1199: LD_INT 1
1201: ST_TO_ADDR
// uc_side := 1 ;
1202: LD_ADDR_OWVAR 20
1206: PUSH
1207: LD_INT 1
1209: ST_TO_ADDR
// uc_nation := 1 ;
1210: LD_ADDR_OWVAR 21
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// hc_name :=  ;
1218: LD_ADDR_OWVAR 26
1222: PUSH
1223: LD_STRING 
1225: ST_TO_ADDR
// hc_sex := sex_male ;
1226: LD_ADDR_OWVAR 27
1230: PUSH
1231: LD_INT 1
1233: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1234: LD_ADDR_OWVAR 29
1238: PUSH
1239: LD_INT 12
1241: PUSH
1242: LD_INT 11
1244: PUSH
1245: LD_INT 10
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: PUSH
1253: LD_OWVAR 67
1257: ARRAY
1258: PUSH
1259: LD_INT 10
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: ST_TO_ADDR
// hc_class := class_1 ;
1266: LD_ADDR_OWVAR 28
1270: PUSH
1271: LD_EXP 25
1275: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1276: LD_ADDR_OWVAR 31
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 5
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_OWVAR 67
1299: ARRAY
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// player := CreateHuman ;
1324: LD_ADDR_EXP 19
1328: PUSH
1329: CALL_OW 44
1333: ST_TO_ADDR
// uc_side := 2 ;
1334: LD_ADDR_OWVAR 20
1338: PUSH
1339: LD_INT 2
1341: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1342: LD_ADDR_EXP 26
1346: PUSH
1347: LD_INT 5
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: CALL_OW 12
1367: ARRAY
1368: ST_TO_ADDR
// hc_sex := sex_male ;
1369: LD_ADDR_OWVAR 27
1373: PUSH
1374: LD_INT 1
1376: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1377: LD_ADDR_OWVAR 29
1381: PUSH
1382: LD_INT 11
1384: PUSH
1385: LD_INT 12
1387: PUSH
1388: LD_INT 13
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_OWVAR 67
1400: ARRAY
1401: PUSH
1402: LD_INT 10
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// hc_class := class_2 ;
1409: LD_ADDR_OWVAR 28
1413: PUSH
1414: LD_EXP 26
1418: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1419: LD_ADDR_OWVAR 31
1423: PUSH
1424: LD_INT 8
1426: PUSH
1427: LD_INT 9
1429: PUSH
1430: LD_INT 10
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: PUSH
1438: LD_OWVAR 67
1442: ARRAY
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: ST_TO_ADDR
// hc_gallery :=  ;
1459: LD_ADDR_OWVAR 33
1463: PUSH
1464: LD_STRING 
1466: ST_TO_ADDR
// player_1 := CreateHuman ;
1467: LD_ADDR_EXP 17
1471: PUSH
1472: CALL_OW 44
1476: ST_TO_ADDR
// uc_side := 3 ;
1477: LD_ADDR_OWVAR 20
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// uc_nation := 1 ;
1485: LD_ADDR_OWVAR 21
1489: PUSH
1490: LD_INT 1
1492: ST_TO_ADDR
// hc_sex := sex_male ;
1493: LD_ADDR_OWVAR 27
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1501: LD_ADDR_OWVAR 29
1505: PUSH
1506: LD_INT 10
1508: PUSH
1509: LD_INT 11
1511: PUSH
1512: LD_INT 12
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PUSH
1526: LD_INT 10
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1533: LD_ADDR_EXP 26
1537: PUSH
1538: LD_INT 5
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 1
1550: PPUSH
1551: LD_INT 2
1553: PPUSH
1554: CALL_OW 12
1558: ARRAY
1559: ST_TO_ADDR
// hc_class := class_2 ;
1560: LD_ADDR_OWVAR 28
1564: PUSH
1565: LD_EXP 26
1569: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1570: LD_ADDR_OWVAR 31
1574: PUSH
1575: LD_INT 5
1577: PUSH
1578: LD_INT 7
1580: PUSH
1581: LD_INT 10
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 0
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: ST_TO_ADDR
// hc_gallery :=  ;
1610: LD_ADDR_OWVAR 33
1614: PUSH
1615: LD_STRING 
1617: ST_TO_ADDR
// player_2 := CreateHuman ;
1618: LD_ADDR_EXP 18
1622: PUSH
1623: CALL_OW 44
1627: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1628: LD_ADDR_EXP 26
1632: PUSH
1633: LD_INT 5
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_INT 2
1648: PPUSH
1649: CALL_OW 12
1653: ARRAY
1654: ST_TO_ADDR
// hc_class := class_2 ;
1655: LD_ADDR_OWVAR 28
1659: PUSH
1660: LD_EXP 26
1664: ST_TO_ADDR
// player_3 := CreateHuman ;
1665: LD_ADDR_EXP 20
1669: PUSH
1670: CALL_OW 44
1674: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1675: LD_ADDR_EXP 26
1679: PUSH
1680: LD_INT 5
1682: PUSH
1683: LD_INT 1
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_INT 2
1695: PPUSH
1696: CALL_OW 12
1700: ARRAY
1701: ST_TO_ADDR
// hc_class := class_2 ;
1702: LD_ADDR_OWVAR 28
1706: PUSH
1707: LD_EXP 26
1711: ST_TO_ADDR
// player_4 := CreateHuman ;
1712: LD_ADDR_EXP 21
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1722: LD_ADDR_EXP 26
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 2
1742: PPUSH
1743: CALL_OW 12
1747: ARRAY
1748: ST_TO_ADDR
// hc_class := class_2 ;
1749: LD_ADDR_OWVAR 28
1753: PUSH
1754: LD_EXP 26
1758: ST_TO_ADDR
// player_5 := CreateHuman ;
1759: LD_ADDR_EXP 22
1763: PUSH
1764: CALL_OW 44
1768: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1769: LD_ADDR_EXP 26
1773: PUSH
1774: LD_INT 5
1776: PUSH
1777: LD_INT 1
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 2
1789: PPUSH
1790: CALL_OW 12
1794: ARRAY
1795: ST_TO_ADDR
// hc_class := class_2 ;
1796: LD_ADDR_OWVAR 28
1800: PUSH
1801: LD_EXP 26
1805: ST_TO_ADDR
// player_6 := CreateHuman ;
1806: LD_ADDR_EXP 23
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1816: LD_ADDR_EXP 26
1820: PUSH
1821: LD_INT 5
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 1
1833: PPUSH
1834: LD_INT 2
1836: PPUSH
1837: CALL_OW 12
1841: ARRAY
1842: ST_TO_ADDR
// hc_class := class_2 ;
1843: LD_ADDR_OWVAR 28
1847: PUSH
1848: LD_EXP 26
1852: ST_TO_ADDR
// player_7 := CreateHuman ;
1853: LD_ADDR_EXP 24
1857: PUSH
1858: CALL_OW 44
1862: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1863: LD_EXP 17
1867: PPUSH
1868: LD_INT 4
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1878: LD_EXP 18
1882: PPUSH
1883: LD_INT 5
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1893: LD_EXP 19
1897: PPUSH
1898: LD_INT 7
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1908: LD_EXP 20
1912: PPUSH
1913: LD_INT 6
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1923: LD_EXP 21
1927: PPUSH
1928: LD_INT 8
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1938: LD_EXP 22
1942: PPUSH
1943: LD_INT 9
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1953: LD_EXP 23
1957: PPUSH
1958: LD_INT 10
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1968: LD_EXP 24
1972: PPUSH
1973: LD_INT 11
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1983: LD_EXP 19
1987: PPUSH
1988: CALL_OW 87
// end ;
1992: LD_VAR 0 1
1996: RET
// every 0 0$01 trigger player do var i , un , tab ;
1997: LD_EXP 19
2001: IFFALSE 2330
2003: GO 2005
2005: DISABLE
2006: LD_INT 0
2008: PPUSH
2009: PPUSH
2010: PPUSH
// begin enable ;
2011: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2012: LD_ADDR_VAR 0 3
2016: PUSH
2017: LD_EXP 17
2021: PUSH
2022: LD_EXP 18
2026: PUSH
2027: LD_EXP 20
2031: PUSH
2032: LD_EXP 21
2036: PUSH
2037: LD_EXP 22
2041: PUSH
2042: LD_EXP 23
2046: PUSH
2047: LD_EXP 24
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
2061: LD_ADDR_VAR 0 2
2065: PUSH
2066: LD_VAR 0 3
2070: PPUSH
2071: LD_INT 24
2073: PUSH
2074: LD_INT 250
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 72
2085: ST_TO_ADDR
// for i = 1 to un do
2086: LD_ADDR_VAR 0 1
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_VAR 0 2
2100: PUSH
2101: FOR_TO
2102: IFFALSE 2328
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
2104: LD_VAR 0 2
2108: PUSH
2109: LD_VAR 0 1
2113: ARRAY
2114: PPUSH
2115: CALL_OW 300
2119: PUSH
2120: LD_VAR 0 2
2124: PUSH
2125: LD_VAR 0 1
2129: ARRAY
2130: PPUSH
2131: CALL_OW 314
2135: NOT
2136: AND
2137: IFFALSE 2326
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
2139: LD_INT 22
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 69
2153: PPUSH
2154: LD_VAR 0 2
2158: PUSH
2159: LD_VAR 0 1
2163: ARRAY
2164: PPUSH
2165: CALL_OW 74
2169: PPUSH
2170: LD_VAR 0 2
2174: PUSH
2175: LD_VAR 0 1
2179: ARRAY
2180: PPUSH
2181: CALL_OW 296
2185: PUSH
2186: LD_INT 8
2188: GREATER
2189: IFFALSE 2280
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2191: LD_VAR 0 2
2195: PUSH
2196: LD_VAR 0 1
2200: ARRAY
2201: PPUSH
2202: LD_INT 22
2204: PUSH
2205: LD_INT 0
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PPUSH
2212: CALL_OW 69
2216: PPUSH
2217: LD_VAR 0 2
2221: PUSH
2222: LD_VAR 0 1
2226: ARRAY
2227: PPUSH
2228: CALL_OW 74
2232: PPUSH
2233: CALL_OW 250
2237: PPUSH
2238: LD_INT 22
2240: PUSH
2241: LD_INT 0
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PPUSH
2248: CALL_OW 69
2252: PPUSH
2253: LD_VAR 0 2
2257: PUSH
2258: LD_VAR 0 1
2262: ARRAY
2263: PPUSH
2264: CALL_OW 74
2268: PPUSH
2269: CALL_OW 251
2273: PPUSH
2274: CALL_OW 111
2278: GO 2326
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2280: LD_VAR 0 2
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: PPUSH
2291: LD_INT 22
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PPUSH
2301: CALL_OW 69
2305: PPUSH
2306: LD_VAR 0 2
2310: PUSH
2311: LD_VAR 0 1
2315: ARRAY
2316: PPUSH
2317: CALL_OW 74
2321: PPUSH
2322: CALL_OW 115
// end ;
2326: GO 2101
2328: POP
2329: POP
// end ; end_of_file
2330: PPOPN 3
2332: END
// on UnitGoesToRed ( un ) do var score , players , play ;
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
2337: PPUSH
// begin if un = player then
2338: LD_VAR 0 1
2342: PUSH
2343: LD_EXP 19
2347: EQUAL
2348: IFFALSE 2357
// YouLost ( hunt2 ) ;
2350: LD_STRING hunt2
2352: PPUSH
2353: CALL_OW 104
// players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2357: LD_ADDR_VAR 0 3
2361: PUSH
2362: LD_EXP 19
2366: PUSH
2367: LD_EXP 17
2371: PUSH
2372: LD_EXP 18
2376: PUSH
2377: LD_EXP 20
2381: PUSH
2382: LD_EXP 21
2386: PUSH
2387: LD_EXP 22
2391: PUSH
2392: LD_EXP 23
2396: PUSH
2397: LD_EXP 24
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: ST_TO_ADDR
// if GetSide ( un ) = 0 then
2412: LD_VAR 0 1
2416: PPUSH
2417: CALL_OW 255
2421: PUSH
2422: LD_INT 0
2424: EQUAL
2425: IFFALSE 2871
// begin play := UnitShoot ( un ) ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_VAR 0 1
2436: PPUSH
2437: CALL_OW 504
2441: ST_TO_ADDR
// if play = 0 then
2442: LD_VAR 0 4
2446: PUSH
2447: LD_INT 0
2449: EQUAL
2450: IFFALSE 2472
// play := NearestUnitToUnit ( players , un ) ;
2452: LD_ADDR_VAR 0 4
2456: PUSH
2457: LD_VAR 0 3
2461: PPUSH
2462: LD_VAR 0 1
2466: PPUSH
2467: CALL_OW 74
2471: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2472: LD_VAR 0 1
2476: PPUSH
2477: CALL_OW 257
2481: PUSH
2482: LD_INT 18
2484: DOUBLE
2485: EQUAL
2486: IFTRUE 2490
2488: GO 2503
2490: POP
// score := PB ; class_tiger :
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: LD_EXP 11
2500: ST_TO_ADDR
2501: GO 2609
2503: LD_INT 14
2505: DOUBLE
2506: EQUAL
2507: IFTRUE 2511
2509: GO 2524
2511: POP
// score := PT ; class_fish :
2512: LD_ADDR_VAR 0 2
2516: PUSH
2517: LD_EXP 12
2521: ST_TO_ADDR
2522: GO 2609
2524: LD_INT 20
2526: DOUBLE
2527: EQUAL
2528: IFTRUE 2532
2530: GO 2545
2532: POP
// score := PF ; 21 :
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: LD_EXP 13
2542: ST_TO_ADDR
2543: GO 2609
2545: LD_INT 21
2547: DOUBLE
2548: EQUAL
2549: IFTRUE 2553
2551: GO 2566
2553: POP
// score := PH ; 13 :
2554: LD_ADDR_VAR 0 2
2558: PUSH
2559: LD_EXP 14
2563: ST_TO_ADDR
2564: GO 2609
2566: LD_INT 13
2568: DOUBLE
2569: EQUAL
2570: IFTRUE 2574
2572: GO 2587
2574: POP
// score := PE ; class_apeman :
2575: LD_ADDR_VAR 0 2
2579: PUSH
2580: LD_EXP 10
2584: ST_TO_ADDR
2585: GO 2609
2587: LD_INT 12
2589: DOUBLE
2590: EQUAL
2591: IFTRUE 2595
2593: GO 2608
2595: POP
// score := PA ; end ;
2596: LD_ADDR_VAR 0 2
2600: PUSH
2601: LD_EXP 16
2605: ST_TO_ADDR
2606: GO 2609
2608: POP
// if GetChassis ( un ) = 31 then
2609: LD_VAR 0 1
2613: PPUSH
2614: CALL_OW 265
2618: PUSH
2619: LD_INT 31
2621: EQUAL
2622: IFFALSE 2634
// score := PM ;
2624: LD_ADDR_VAR 0 2
2628: PUSH
2629: LD_EXP 15
2633: ST_TO_ADDR
// if play = player then
2634: LD_VAR 0 4
2638: PUSH
2639: LD_EXP 19
2643: EQUAL
2644: IFFALSE 2662
// score_player := score_player + score ;
2646: LD_ADDR_EXP 28
2650: PUSH
2651: LD_EXP 28
2655: PUSH
2656: LD_VAR 0 2
2660: PLUS
2661: ST_TO_ADDR
// if play = player_1 then
2662: LD_VAR 0 4
2666: PUSH
2667: LD_EXP 17
2671: EQUAL
2672: IFFALSE 2690
// score_enemy1 := score_enemy1 + score ;
2674: LD_ADDR_EXP 29
2678: PUSH
2679: LD_EXP 29
2683: PUSH
2684: LD_VAR 0 2
2688: PLUS
2689: ST_TO_ADDR
// if play = player_2 then
2690: LD_VAR 0 4
2694: PUSH
2695: LD_EXP 18
2699: EQUAL
2700: IFFALSE 2718
// score_enemy2 := score_enemy2 + score ;
2702: LD_ADDR_EXP 30
2706: PUSH
2707: LD_EXP 30
2711: PUSH
2712: LD_VAR 0 2
2716: PLUS
2717: ST_TO_ADDR
// if play = player_3 then
2718: LD_VAR 0 4
2722: PUSH
2723: LD_EXP 20
2727: EQUAL
2728: IFFALSE 2746
// score_enemy3 := score_enemy3 + score ;
2730: LD_ADDR_EXP 31
2734: PUSH
2735: LD_EXP 31
2739: PUSH
2740: LD_VAR 0 2
2744: PLUS
2745: ST_TO_ADDR
// if play = player_4 then
2746: LD_VAR 0 4
2750: PUSH
2751: LD_EXP 21
2755: EQUAL
2756: IFFALSE 2774
// score_enemy4 := score_enemy4 + score ;
2758: LD_ADDR_EXP 32
2762: PUSH
2763: LD_EXP 32
2767: PUSH
2768: LD_VAR 0 2
2772: PLUS
2773: ST_TO_ADDR
// if play = player_5 then
2774: LD_VAR 0 4
2778: PUSH
2779: LD_EXP 22
2783: EQUAL
2784: IFFALSE 2802
// score_enemy5 := score_enemy5 + score ;
2786: LD_ADDR_EXP 33
2790: PUSH
2791: LD_EXP 33
2795: PUSH
2796: LD_VAR 0 2
2800: PLUS
2801: ST_TO_ADDR
// if play = player_6 then
2802: LD_VAR 0 4
2806: PUSH
2807: LD_EXP 23
2811: EQUAL
2812: IFFALSE 2830
// score_enemy6 := score_enemy6 + score ;
2814: LD_ADDR_EXP 34
2818: PUSH
2819: LD_EXP 34
2823: PUSH
2824: LD_VAR 0 2
2828: PLUS
2829: ST_TO_ADDR
// if play = player_7 then
2830: LD_VAR 0 4
2834: PUSH
2835: LD_EXP 24
2839: EQUAL
2840: IFFALSE 2858
// score_enemy7 := score_enemy7 + score ;
2842: LD_ADDR_EXP 35
2846: PUSH
2847: LD_EXP 35
2851: PUSH
2852: LD_VAR 0 2
2856: PLUS
2857: ST_TO_ADDR
// SetTag ( un , - 100 ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: LD_INT 100
2865: NEG
2866: PPUSH
2867: CALL_OW 109
// end ; end ;
2871: PPOPN 4
2873: END
// on UnitDestroyed ( un ) do var score , players , play ;
2874: LD_INT 0
2876: PPUSH
2877: PPUSH
2878: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2879: LD_ADDR_VAR 0 3
2883: PUSH
2884: LD_EXP 19
2888: PUSH
2889: LD_EXP 17
2893: PUSH
2894: LD_EXP 18
2898: PUSH
2899: LD_EXP 20
2903: PUSH
2904: LD_EXP 21
2908: PUSH
2909: LD_EXP 22
2913: PUSH
2914: LD_EXP 23
2918: PUSH
2919: LD_EXP 24
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2934: LD_VAR 0 1
2938: PPUSH
2939: CALL_OW 255
2943: PUSH
2944: LD_INT 0
2946: EQUAL
2947: PUSH
2948: LD_VAR 0 1
2952: PPUSH
2953: CALL_OW 110
2957: PUSH
2958: LD_INT 100
2960: NEG
2961: NONEQUAL
2962: AND
2963: IFFALSE 3396
// begin play := UnitShoot ( un ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 1
2974: PPUSH
2975: CALL_OW 504
2979: ST_TO_ADDR
// if play = 0 then
2980: LD_VAR 0 4
2984: PUSH
2985: LD_INT 0
2987: EQUAL
2988: IFFALSE 3010
// play := NearestUnitToUnit ( players , un ) ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL_OW 74
3009: ST_TO_ADDR
// case GetClass ( un ) of 18 :
3010: LD_VAR 0 1
3014: PPUSH
3015: CALL_OW 257
3019: PUSH
3020: LD_INT 18
3022: DOUBLE
3023: EQUAL
3024: IFTRUE 3028
3026: GO 3041
3028: POP
// score := PB ; class_tiger :
3029: LD_ADDR_VAR 0 2
3033: PUSH
3034: LD_EXP 11
3038: ST_TO_ADDR
3039: GO 3147
3041: LD_INT 14
3043: DOUBLE
3044: EQUAL
3045: IFTRUE 3049
3047: GO 3062
3049: POP
// score := PT ; class_fish :
3050: LD_ADDR_VAR 0 2
3054: PUSH
3055: LD_EXP 12
3059: ST_TO_ADDR
3060: GO 3147
3062: LD_INT 20
3064: DOUBLE
3065: EQUAL
3066: IFTRUE 3070
3068: GO 3083
3070: POP
// score := PF ; 21 :
3071: LD_ADDR_VAR 0 2
3075: PUSH
3076: LD_EXP 13
3080: ST_TO_ADDR
3081: GO 3147
3083: LD_INT 21
3085: DOUBLE
3086: EQUAL
3087: IFTRUE 3091
3089: GO 3104
3091: POP
// score := PH ; 13 :
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_EXP 14
3101: ST_TO_ADDR
3102: GO 3147
3104: LD_INT 13
3106: DOUBLE
3107: EQUAL
3108: IFTRUE 3112
3110: GO 3125
3112: POP
// score := PE ; class_apeman :
3113: LD_ADDR_VAR 0 2
3117: PUSH
3118: LD_EXP 10
3122: ST_TO_ADDR
3123: GO 3147
3125: LD_INT 12
3127: DOUBLE
3128: EQUAL
3129: IFTRUE 3133
3131: GO 3146
3133: POP
// score := PA ; end ;
3134: LD_ADDR_VAR 0 2
3138: PUSH
3139: LD_EXP 16
3143: ST_TO_ADDR
3144: GO 3147
3146: POP
// if GetChassis ( un ) = 31 then
3147: LD_VAR 0 1
3151: PPUSH
3152: CALL_OW 265
3156: PUSH
3157: LD_INT 31
3159: EQUAL
3160: IFFALSE 3172
// score := PM ;
3162: LD_ADDR_VAR 0 2
3166: PUSH
3167: LD_EXP 15
3171: ST_TO_ADDR
// if play = player then
3172: LD_VAR 0 4
3176: PUSH
3177: LD_EXP 19
3181: EQUAL
3182: IFFALSE 3200
// score_player := score_player + score ;
3184: LD_ADDR_EXP 28
3188: PUSH
3189: LD_EXP 28
3193: PUSH
3194: LD_VAR 0 2
3198: PLUS
3199: ST_TO_ADDR
// if play = player_1 then
3200: LD_VAR 0 4
3204: PUSH
3205: LD_EXP 17
3209: EQUAL
3210: IFFALSE 3228
// score_enemy1 := score_enemy1 + score ;
3212: LD_ADDR_EXP 29
3216: PUSH
3217: LD_EXP 29
3221: PUSH
3222: LD_VAR 0 2
3226: PLUS
3227: ST_TO_ADDR
// if play = player_2 then
3228: LD_VAR 0 4
3232: PUSH
3233: LD_EXP 18
3237: EQUAL
3238: IFFALSE 3256
// score_enemy2 := score_enemy2 + score ;
3240: LD_ADDR_EXP 30
3244: PUSH
3245: LD_EXP 30
3249: PUSH
3250: LD_VAR 0 2
3254: PLUS
3255: ST_TO_ADDR
// if play = player_3 then
3256: LD_VAR 0 4
3260: PUSH
3261: LD_EXP 20
3265: EQUAL
3266: IFFALSE 3284
// score_enemy3 := score_enemy3 + score ;
3268: LD_ADDR_EXP 31
3272: PUSH
3273: LD_EXP 31
3277: PUSH
3278: LD_VAR 0 2
3282: PLUS
3283: ST_TO_ADDR
// if play = player_4 then
3284: LD_VAR 0 4
3288: PUSH
3289: LD_EXP 21
3293: EQUAL
3294: IFFALSE 3312
// score_enemy4 := score_enemy4 + score ;
3296: LD_ADDR_EXP 32
3300: PUSH
3301: LD_EXP 32
3305: PUSH
3306: LD_VAR 0 2
3310: PLUS
3311: ST_TO_ADDR
// if play = player_5 then
3312: LD_VAR 0 4
3316: PUSH
3317: LD_EXP 22
3321: EQUAL
3322: IFFALSE 3340
// score_enemy5 := score_enemy5 + score ;
3324: LD_ADDR_EXP 33
3328: PUSH
3329: LD_EXP 33
3333: PUSH
3334: LD_VAR 0 2
3338: PLUS
3339: ST_TO_ADDR
// if play = player_6 then
3340: LD_VAR 0 4
3344: PUSH
3345: LD_EXP 23
3349: EQUAL
3350: IFFALSE 3368
// score_enemy6 := score_enemy6 + score ;
3352: LD_ADDR_EXP 34
3356: PUSH
3357: LD_EXP 34
3361: PUSH
3362: LD_VAR 0 2
3366: PLUS
3367: ST_TO_ADDR
// if play = player_7 then
3368: LD_VAR 0 4
3372: PUSH
3373: LD_EXP 24
3377: EQUAL
3378: IFFALSE 3396
// score_enemy7 := score_enemy7 + score ;
3380: LD_ADDR_EXP 35
3384: PUSH
3385: LD_EXP 35
3389: PUSH
3390: LD_VAR 0 2
3394: PLUS
3395: ST_TO_ADDR
// end ; end ;
3396: PPOPN 4
3398: END
// every 0 0$0.1 do
3399: GO 3401
3401: DISABLE
// begin enable ;
3402: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
3403: LD_ADDR_OWVAR 47
3407: PUSH
3408: LD_STRING #player1
3410: PUSH
3411: LD_EXP 28
3415: PUSH
3416: LD_STRING #player2
3418: PUSH
3419: LD_EXP 29
3423: PUSH
3424: LD_STRING #player3
3426: PUSH
3427: LD_EXP 30
3431: PUSH
3432: LD_STRING #player4
3434: PUSH
3435: LD_EXP 31
3439: PUSH
3440: LD_STRING #player5
3442: PUSH
3443: LD_EXP 32
3447: PUSH
3448: LD_STRING #player6
3450: PUSH
3451: LD_EXP 33
3455: PUSH
3456: LD_STRING #player7
3458: PUSH
3459: LD_EXP 34
3463: PUSH
3464: LD_STRING #player8
3466: PUSH
3467: LD_EXP 35
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// end ;
3490: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_OWVAR 2
3500: EQUAL
3501: PUSH
3502: LD_VAR 0 2
3506: PUSH
3507: LD_INT 0
3509: GREATER
3510: AND
3511: IFFALSE 3520
// YouLost ( hunt1 ) ;
3513: LD_STRING hunt1
3515: PPUSH
3516: CALL_OW 104
// end ;
3520: PPOPN 2
3522: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
3523: LD_INT 22
3525: PUSH
3526: LD_INT 0
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 69
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin Wait ( 0 0$03 ) ;
3546: LD_INT 105
3548: PPUSH
3549: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
3553: LD_EXP 28
3557: PUSH
3558: LD_EXP 29
3562: GREATER
3563: PUSH
3564: LD_EXP 28
3568: PUSH
3569: LD_EXP 30
3573: GREATER
3574: AND
3575: PUSH
3576: LD_EXP 28
3580: PUSH
3581: LD_EXP 31
3585: GREATER
3586: AND
3587: PUSH
3588: LD_EXP 28
3592: PUSH
3593: LD_EXP 32
3597: GREATER
3598: AND
3599: PUSH
3600: LD_EXP 28
3604: PUSH
3605: LD_EXP 33
3609: GREATER
3610: AND
3611: PUSH
3612: LD_EXP 28
3616: PUSH
3617: LD_EXP 34
3621: GREATER
3622: AND
3623: PUSH
3624: LD_EXP 28
3628: PUSH
3629: LD_EXP 35
3633: GREATER
3634: AND
3635: IFFALSE 3643
// YouWin else
3637: CALL_OW 103
3641: GO 3650
// YouLost ( hunt3 ) ;
3643: LD_STRING hunt3
3645: PPUSH
3646: CALL_OW 104
// end ;
3650: END
