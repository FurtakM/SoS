// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 123
// begin difficulty := GetMultiplayerSetting ( 0 ) ;
  73: LD_ADDR_OWVAR 67
  77: PUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 426
  85: ST_TO_ADDR
// level := GetMultiplayerSetting ( 1 ) ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 1
  93: PPUSH
  94: CALL_OW 426
  98: ST_TO_ADDR
// class_1 := [ class_soldier , class_sniper ] [ GetMultiplayerSetting ( 2 ) ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: LD_INT 1
 106: PUSH
 107: LD_INT 5
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: PUSH
 114: LD_INT 2
 116: PPUSH
 117: CALL_OW 426
 121: ARRAY
 122: ST_TO_ADDR
// end ; Counter ;
 123: CALL 136 0 0
// PrepareNature ;
 127: CALL 383 0 0
// InitPlayers ;
 131: CALL 938 0 0
// end ;
 135: END
// export level , test ; export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 136: LD_INT 0
 138: PPUSH
// level := 3 ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 10
 154: PUSH
 155: LD_INT 15
 157: PUSH
 158: LD_INT 20
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_EXP 1
 170: ARRAY
 171: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 172: LD_ADDR_EXP 4
 176: PUSH
 177: LD_INT 8
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 16
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_EXP 1
 195: ARRAY
 196: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 10
 207: PUSH
 208: LD_INT 15
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 1
 220: ARRAY
 221: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 222: LD_ADDR_EXP 6
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_EXP 1
 245: ARRAY
 246: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 247: LD_ADDR_EXP 7
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 10
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_EXP 1
 270: ARRAY
 271: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_EXP 1
 295: ARRAY
 296: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 297: LD_ADDR_EXP 16
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_EXP 1
 320: ARRAY
 321: ST_TO_ADDR
// PE := 5 ;
 322: LD_ADDR_EXP 10
 326: PUSH
 327: LD_INT 5
 329: ST_TO_ADDR
// PB := 10 ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 10
 337: ST_TO_ADDR
// PT := 50 ;
 338: LD_ADDR_EXP 12
 342: PUSH
 343: LD_INT 50
 345: ST_TO_ADDR
// PF := 100 ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_INT 100
 353: ST_TO_ADDR
// PH := 120 ;
 354: LD_ADDR_EXP 14
 358: PUSH
 359: LD_INT 120
 361: ST_TO_ADDR
// PM := 300 ;
 362: LD_ADDR_EXP 15
 366: PUSH
 367: LD_INT 300
 369: ST_TO_ADDR
// PA := 1000 ;
 370: LD_ADDR_EXP 16
 374: PUSH
 375: LD_INT 1000
 377: ST_TO_ADDR
// end ; end_of_file
 378: LD_VAR 0 1
 382: RET
// export function PrepareNature ; var i , animal ; begin
 383: LD_INT 0
 385: PPUSH
 386: PPUSH
 387: PPUSH
// uc_side = 0 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// uc_nation = 0 ;
 396: LD_ADDR_OWVAR 21
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// for i = 1 to B1 do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: DOUBLE
 410: LD_INT 1
 412: DEC
 413: ST_TO_ADDR
 414: LD_EXP 4
 418: PUSH
 419: FOR_TO
 420: IFFALSE 473
// begin hc_class = 18 ;
 422: LD_ADDR_OWVAR 28
 426: PUSH
 427: LD_INT 18
 429: ST_TO_ADDR
// hc_gallery = sandnature ;
 430: LD_ADDR_OWVAR 33
 434: PUSH
 435: LD_STRING sandnature
 437: ST_TO_ADDR
// hc_face_number = 1 ;
 438: LD_ADDR_OWVAR 34
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// animal := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 419
 473: POP
 474: POP
// for i = 1 to T1 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_EXP 5
 489: PUSH
 490: FOR_TO
 491: IFFALSE 560
// begin hc_class = class_tiger ;
 493: LD_ADDR_OWVAR 28
 497: PUSH
 498: LD_INT 14
 500: ST_TO_ADDR
// hc_gallery = sandnature ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING sandnature
 508: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 509: LD_ADDR_OWVAR 35
 513: PUSH
 514: LD_INT 0
 516: PPUSH
 517: LD_INT 50
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// hc_face_number = 3 ;
 525: LD_ADDR_OWVAR 34
 529: PUSH
 530: LD_INT 3
 532: ST_TO_ADDR
// animal := CreateHuman ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: CALL_OW 44
 542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_INT 2
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 49
// end ;
 558: GO 490
 560: POP
 561: POP
// for i = 1 to T1 do
 562: LD_ADDR_VAR 0 2
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_EXP 5
 576: PUSH
 577: FOR_TO
 578: IFFALSE 639
// begin hc_class = 21 ;
 580: LD_ADDR_OWVAR 28
 584: PUSH
 585: LD_INT 21
 587: ST_TO_ADDR
// hc_gallery = sandnature ;
 588: LD_ADDR_OWVAR 33
 592: PUSH
 593: LD_STRING sandnature
 595: ST_TO_ADDR
// hc_agressivity = 0 ;
 596: LD_ADDR_OWVAR 35
 600: PUSH
 601: LD_INT 0
 603: ST_TO_ADDR
// hc_face_number = 5 ;
 604: LD_ADDR_OWVAR 34
 608: PUSH
 609: LD_INT 5
 611: ST_TO_ADDR
// animal := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 622: LD_VAR 0 3
 626: PPUSH
 627: LD_INT 2
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 49
// end ;
 637: GO 577
 639: POP
 640: POP
// for i = 1 to E1 do
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_EXP 3
 655: PUSH
 656: FOR_TO
 657: IFFALSE 710
// begin hc_class = 13 ;
 659: LD_ADDR_OWVAR 28
 663: PUSH
 664: LD_INT 13
 666: ST_TO_ADDR
// hc_gallery = sandnature ;
 667: LD_ADDR_OWVAR 33
 671: PUSH
 672: LD_STRING sandnature
 674: ST_TO_ADDR
// hc_face_number = 4 ;
 675: LD_ADDR_OWVAR 34
 679: PUSH
 680: LD_INT 4
 682: ST_TO_ADDR
// animal := CreateHuman ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: CALL_OW 44
 692: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 693: LD_VAR 0 3
 697: PPUSH
 698: LD_INT 2
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ;
 708: GO 656
 710: POP
 711: POP
// for i = 1 to F1 do
 712: LD_ADDR_VAR 0 2
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_EXP 6
 726: PUSH
 727: FOR_TO
 728: IFFALSE 781
// begin hc_class = 20 ;
 730: LD_ADDR_OWVAR 28
 734: PUSH
 735: LD_INT 20
 737: ST_TO_ADDR
// hc_gallery = sandnature ;
 738: LD_ADDR_OWVAR 33
 742: PUSH
 743: LD_STRING sandnature
 745: ST_TO_ADDR
// hc_face_number = 2 ;
 746: LD_ADDR_OWVAR 34
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// animal := CreateHuman ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// end ;
 779: GO 727
 781: POP
 782: POP
// for i = 1 to M1 do
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: DOUBLE
 789: LD_INT 1
 791: DEC
 792: ST_TO_ADDR
 793: LD_EXP 8
 797: PUSH
 798: FOR_TO
 799: IFFALSE 844
// begin vc_chassis := 31 ;
 801: LD_ADDR_OWVAR 37
 805: PUSH
 806: LD_INT 31
 808: ST_TO_ADDR
// vc_control := control_rider ;
 809: LD_ADDR_OWVAR 38
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// animal := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ;
 842: GO 798
 844: POP
 845: POP
// hc_gallery :=  ;
 846: LD_ADDR_OWVAR 33
 850: PUSH
 851: LD_STRING 
 853: ST_TO_ADDR
// hc_class := class_apeman ;
 854: LD_ADDR_OWVAR 28
 858: PUSH
 859: LD_INT 12
 861: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
 862: LD_ADDR_OWVAR 29
 866: PUSH
 867: LD_INT 15
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: LD_INT 10
 887: PUSH
 888: LD_INT 10
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_name := White Apeman ;
 900: LD_ADDR_OWVAR 26
 904: PUSH
 905: LD_STRING White Apeman
 907: ST_TO_ADDR
// animal := CreateHuman ;
 908: LD_ADDR_VAR 0 3
 912: PUSH
 913: CALL_OW 44
 917: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
 918: LD_VAR 0 3
 922: PPUSH
 923: LD_INT 12
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ; end_of_file
 933: LD_VAR 0 1
 937: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
 938: LD_INT 0
 940: PPUSH
// score_player := 0 ;
 941: LD_ADDR_EXP 28
 945: PUSH
 946: LD_INT 0
 948: ST_TO_ADDR
// score_enemy1 := 0 ;
 949: LD_ADDR_EXP 29
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// score_enemy2 := 0 ;
 957: LD_ADDR_EXP 30
 961: PUSH
 962: LD_INT 0
 964: ST_TO_ADDR
// score_enemy3 := 0 ;
 965: LD_ADDR_EXP 31
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// score_enemy4 := 0 ;
 973: LD_ADDR_EXP 32
 977: PUSH
 978: LD_INT 0
 980: ST_TO_ADDR
// score_enemy5 := 0 ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_INT 0
 988: ST_TO_ADDR
// score_enemy6 := 0 ;
 989: LD_ADDR_EXP 34
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// score_enemy7 := 0 ;
 997: LD_ADDR_EXP 35
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// if difficulty > 1 then
1005: LD_OWVAR 67
1009: PUSH
1010: LD_INT 1
1012: GREATER
1013: IFFALSE 1025
// class_2 := class_sniper else
1015: LD_ADDR_EXP 26
1019: PUSH
1020: LD_INT 5
1022: ST_TO_ADDR
1023: GO 1033
// class_2 := class_soldier ;
1025: LD_ADDR_EXP 26
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// uc_side := 1 ;
1033: LD_ADDR_OWVAR 20
1037: PUSH
1038: LD_INT 1
1040: ST_TO_ADDR
// uc_nation := 1 ;
1041: LD_ADDR_OWVAR 21
1045: PUSH
1046: LD_INT 1
1048: ST_TO_ADDR
// hc_name :=  ;
1049: LD_ADDR_OWVAR 26
1053: PUSH
1054: LD_STRING 
1056: ST_TO_ADDR
// hc_sex := sex_male ;
1057: LD_ADDR_OWVAR 27
1061: PUSH
1062: LD_INT 1
1064: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1065: LD_ADDR_OWVAR 29
1069: PUSH
1070: LD_INT 12
1072: PUSH
1073: LD_INT 11
1075: PUSH
1076: LD_INT 10
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_OWVAR 67
1088: ARRAY
1089: PUSH
1090: LD_INT 10
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: ST_TO_ADDR
// hc_class := class_1 ;
1097: LD_ADDR_OWVAR 28
1101: PUSH
1102: LD_EXP 25
1106: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1107: LD_ADDR_OWVAR 31
1111: PUSH
1112: LD_INT 10
1114: PUSH
1115: LD_INT 7
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_OWVAR 67
1130: ARRAY
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: LD_INT 0
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: ST_TO_ADDR
// hc_gallery :=  ;
1147: LD_ADDR_OWVAR 33
1151: PUSH
1152: LD_STRING 
1154: ST_TO_ADDR
// player := CreateHuman ;
1155: LD_ADDR_EXP 19
1159: PUSH
1160: CALL_OW 44
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1173: LD_ADDR_EXP 26
1177: PUSH
1178: LD_INT 5
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 1
1190: PPUSH
1191: LD_INT 2
1193: PPUSH
1194: CALL_OW 12
1198: ARRAY
1199: ST_TO_ADDR
// hc_sex := sex_male ;
1200: LD_ADDR_OWVAR 27
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1208: LD_ADDR_OWVAR 29
1212: PUSH
1213: LD_INT 11
1215: PUSH
1216: LD_INT 12
1218: PUSH
1219: LD_INT 13
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_OWVAR 67
1231: ARRAY
1232: PUSH
1233: LD_INT 10
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: ST_TO_ADDR
// hc_class := class_2 ;
1240: LD_ADDR_OWVAR 28
1244: PUSH
1245: LD_EXP 26
1249: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1250: LD_ADDR_OWVAR 31
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 9
1260: PUSH
1261: LD_INT 10
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_OWVAR 67
1273: ARRAY
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 0
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: ST_TO_ADDR
// hc_gallery :=  ;
1290: LD_ADDR_OWVAR 33
1294: PUSH
1295: LD_STRING 
1297: ST_TO_ADDR
// player_1 := CreateHuman ;
1298: LD_ADDR_EXP 17
1302: PUSH
1303: CALL_OW 44
1307: ST_TO_ADDR
// uc_side := 3 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 3
1315: ST_TO_ADDR
// uc_nation := 1 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// hc_sex := sex_male ;
1324: LD_ADDR_OWVAR 27
1328: PUSH
1329: LD_INT 1
1331: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1332: LD_ADDR_OWVAR 29
1336: PUSH
1337: LD_INT 10
1339: PUSH
1340: LD_INT 11
1342: PUSH
1343: LD_INT 12
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: PUSH
1351: LD_OWVAR 67
1355: ARRAY
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1364: LD_ADDR_EXP 26
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 2
1384: PPUSH
1385: CALL_OW 12
1389: ARRAY
1390: ST_TO_ADDR
// hc_class := class_2 ;
1391: LD_ADDR_OWVAR 28
1395: PUSH
1396: LD_EXP 26
1400: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1401: LD_ADDR_OWVAR 31
1405: PUSH
1406: LD_INT 5
1408: PUSH
1409: LD_INT 7
1411: PUSH
1412: LD_INT 10
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_OWVAR 67
1424: ARRAY
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: ST_TO_ADDR
// hc_gallery :=  ;
1441: LD_ADDR_OWVAR 33
1445: PUSH
1446: LD_STRING 
1448: ST_TO_ADDR
// player_2 := CreateHuman ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: CALL_OW 44
1458: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1459: LD_ADDR_EXP 26
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 2
1479: PPUSH
1480: CALL_OW 12
1484: ARRAY
1485: ST_TO_ADDR
// hc_class := class_2 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_EXP 26
1495: ST_TO_ADDR
// player_3 := CreateHuman ;
1496: LD_ADDR_EXP 20
1500: PUSH
1501: CALL_OW 44
1505: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1506: LD_ADDR_EXP 26
1510: PUSH
1511: LD_INT 5
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PPUSH
1524: LD_INT 2
1526: PPUSH
1527: CALL_OW 12
1531: ARRAY
1532: ST_TO_ADDR
// hc_class := class_2 ;
1533: LD_ADDR_OWVAR 28
1537: PUSH
1538: LD_EXP 26
1542: ST_TO_ADDR
// player_4 := CreateHuman ;
1543: LD_ADDR_EXP 21
1547: PUSH
1548: CALL_OW 44
1552: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_INT 5
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 2
1573: PPUSH
1574: CALL_OW 12
1578: ARRAY
1579: ST_TO_ADDR
// hc_class := class_2 ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_EXP 26
1589: ST_TO_ADDR
// player_5 := CreateHuman ;
1590: LD_ADDR_EXP 22
1594: PUSH
1595: CALL_OW 44
1599: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1600: LD_ADDR_EXP 26
1604: PUSH
1605: LD_INT 5
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 2
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// hc_class := class_2 ;
1627: LD_ADDR_OWVAR 28
1631: PUSH
1632: LD_EXP 26
1636: ST_TO_ADDR
// player_6 := CreateHuman ;
1637: LD_ADDR_EXP 23
1641: PUSH
1642: CALL_OW 44
1646: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1647: LD_ADDR_EXP 26
1651: PUSH
1652: LD_INT 5
1654: PUSH
1655: LD_INT 1
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 1
1664: PPUSH
1665: LD_INT 2
1667: PPUSH
1668: CALL_OW 12
1672: ARRAY
1673: ST_TO_ADDR
// hc_class := class_2 ;
1674: LD_ADDR_OWVAR 28
1678: PUSH
1679: LD_EXP 26
1683: ST_TO_ADDR
// player_7 := CreateHuman ;
1684: LD_ADDR_EXP 24
1688: PUSH
1689: CALL_OW 44
1693: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1694: LD_EXP 17
1698: PPUSH
1699: LD_INT 4
1701: PPUSH
1702: LD_INT 0
1704: PPUSH
1705: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1709: LD_EXP 18
1713: PPUSH
1714: LD_INT 5
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1724: LD_EXP 19
1728: PPUSH
1729: LD_INT 7
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1739: LD_EXP 20
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1754: LD_EXP 21
1758: PPUSH
1759: LD_INT 8
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1769: LD_EXP 22
1773: PPUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 0
1779: PPUSH
1780: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1784: LD_EXP 23
1788: PPUSH
1789: LD_INT 10
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1799: LD_EXP 24
1803: PPUSH
1804: LD_INT 11
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1814: LD_EXP 19
1818: PPUSH
1819: CALL_OW 87
// end ;
1823: LD_VAR 0 1
1827: RET
// every 0 0$01 trigger player do var i , un , tab ;
1828: LD_EXP 19
1832: IFFALSE 2161
1834: GO 1836
1836: DISABLE
1837: LD_INT 0
1839: PPUSH
1840: PPUSH
1841: PPUSH
// begin enable ;
1842: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
1843: LD_ADDR_VAR 0 3
1847: PUSH
1848: LD_EXP 17
1852: PUSH
1853: LD_EXP 18
1857: PUSH
1858: LD_EXP 20
1862: PUSH
1863: LD_EXP 21
1867: PUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_EXP 23
1877: PUSH
1878: LD_EXP 24
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: LD_VAR 0 3
1901: PPUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 250
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PPUSH
1912: CALL_OW 72
1916: ST_TO_ADDR
// for i = 1 to un do
1917: LD_ADDR_VAR 0 1
1921: PUSH
1922: DOUBLE
1923: LD_INT 1
1925: DEC
1926: ST_TO_ADDR
1927: LD_VAR 0 2
1931: PUSH
1932: FOR_TO
1933: IFFALSE 2159
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
1935: LD_VAR 0 2
1939: PUSH
1940: LD_VAR 0 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 300
1950: PUSH
1951: LD_VAR 0 2
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: CALL_OW 314
1966: NOT
1967: AND
1968: IFFALSE 2157
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
1970: LD_INT 22
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 69
1984: PPUSH
1985: LD_VAR 0 2
1989: PUSH
1990: LD_VAR 0 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 74
2000: PPUSH
2001: LD_VAR 0 2
2005: PUSH
2006: LD_VAR 0 1
2010: ARRAY
2011: PPUSH
2012: CALL_OW 296
2016: PUSH
2017: LD_INT 8
2019: GREATER
2020: IFFALSE 2111
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2022: LD_VAR 0 2
2026: PUSH
2027: LD_VAR 0 1
2031: ARRAY
2032: PPUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PPUSH
2043: CALL_OW 69
2047: PPUSH
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 1
2057: ARRAY
2058: PPUSH
2059: CALL_OW 74
2063: PPUSH
2064: CALL_OW 250
2068: PPUSH
2069: LD_INT 22
2071: PUSH
2072: LD_INT 0
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL_OW 69
2083: PPUSH
2084: LD_VAR 0 2
2088: PUSH
2089: LD_VAR 0 1
2093: ARRAY
2094: PPUSH
2095: CALL_OW 74
2099: PPUSH
2100: CALL_OW 251
2104: PPUSH
2105: CALL_OW 111
2109: GO 2157
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2111: LD_VAR 0 2
2115: PUSH
2116: LD_VAR 0 1
2120: ARRAY
2121: PPUSH
2122: LD_INT 22
2124: PUSH
2125: LD_INT 0
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_VAR 0 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 74
2152: PPUSH
2153: CALL_OW 115
// end ;
2157: GO 1932
2159: POP
2160: POP
// end ; end_of_file
2161: PPOPN 3
2163: END
// on UnitGoesToRed ( un ) do begin if un = player then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_EXP 19
2173: EQUAL
2174: IFFALSE 2183
// YouLost ( hunt2 ) ;
2176: LD_STRING hunt2
2178: PPUSH
2179: CALL_OW 104
// end ;
2183: PPOPN 1
2185: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var players , score , play ;
2186: LD_INT 0
2188: PPUSH
2189: PPUSH
2190: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_EXP 19
2200: PUSH
2201: LD_EXP 17
2205: PUSH
2206: LD_EXP 18
2210: PUSH
2211: LD_EXP 20
2215: PUSH
2216: LD_EXP 21
2220: PUSH
2221: LD_EXP 22
2225: PUSH
2226: LD_EXP 23
2230: PUSH
2231: LD_EXP 24
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2246: LD_VAR 0 1
2250: PPUSH
2251: CALL_OW 255
2255: PUSH
2256: LD_INT 0
2258: EQUAL
2259: PUSH
2260: LD_VAR 0 1
2264: PPUSH
2265: CALL_OW 110
2269: PUSH
2270: LD_INT 100
2272: NEG
2273: NONEQUAL
2274: AND
2275: IFFALSE 2673
// begin play := killer_unit ;
2277: LD_ADDR_VAR 0 6
2281: PUSH
2282: LD_VAR 0 3
2286: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2287: LD_VAR 0 1
2291: PPUSH
2292: CALL_OW 257
2296: PUSH
2297: LD_INT 18
2299: DOUBLE
2300: EQUAL
2301: IFTRUE 2305
2303: GO 2318
2305: POP
// score := PB ; class_tiger :
2306: LD_ADDR_VAR 0 5
2310: PUSH
2311: LD_EXP 11
2315: ST_TO_ADDR
2316: GO 2424
2318: LD_INT 14
2320: DOUBLE
2321: EQUAL
2322: IFTRUE 2326
2324: GO 2339
2326: POP
// score := PT ; class_fish :
2327: LD_ADDR_VAR 0 5
2331: PUSH
2332: LD_EXP 12
2336: ST_TO_ADDR
2337: GO 2424
2339: LD_INT 20
2341: DOUBLE
2342: EQUAL
2343: IFTRUE 2347
2345: GO 2360
2347: POP
// score := PF ; 21 :
2348: LD_ADDR_VAR 0 5
2352: PUSH
2353: LD_EXP 13
2357: ST_TO_ADDR
2358: GO 2424
2360: LD_INT 21
2362: DOUBLE
2363: EQUAL
2364: IFTRUE 2368
2366: GO 2381
2368: POP
// score := PH ; 13 :
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_EXP 14
2378: ST_TO_ADDR
2379: GO 2424
2381: LD_INT 13
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2402
2389: POP
// score := PE ; class_apeman :
2390: LD_ADDR_VAR 0 5
2394: PUSH
2395: LD_EXP 10
2399: ST_TO_ADDR
2400: GO 2424
2402: LD_INT 12
2404: DOUBLE
2405: EQUAL
2406: IFTRUE 2410
2408: GO 2423
2410: POP
// score := PA ; end ;
2411: LD_ADDR_VAR 0 5
2415: PUSH
2416: LD_EXP 16
2420: ST_TO_ADDR
2421: GO 2424
2423: POP
// if GetChassis ( un ) = 31 then
2424: LD_VAR 0 1
2428: PPUSH
2429: CALL_OW 265
2433: PUSH
2434: LD_INT 31
2436: EQUAL
2437: IFFALSE 2449
// score := PM ;
2439: LD_ADDR_VAR 0 5
2443: PUSH
2444: LD_EXP 15
2448: ST_TO_ADDR
// if play = player then
2449: LD_VAR 0 6
2453: PUSH
2454: LD_EXP 19
2458: EQUAL
2459: IFFALSE 2477
// score_player := score_player + score ;
2461: LD_ADDR_EXP 28
2465: PUSH
2466: LD_EXP 28
2470: PUSH
2471: LD_VAR 0 5
2475: PLUS
2476: ST_TO_ADDR
// if play = player_1 then
2477: LD_VAR 0 6
2481: PUSH
2482: LD_EXP 17
2486: EQUAL
2487: IFFALSE 2505
// score_enemy1 := score_enemy1 + score ;
2489: LD_ADDR_EXP 29
2493: PUSH
2494: LD_EXP 29
2498: PUSH
2499: LD_VAR 0 5
2503: PLUS
2504: ST_TO_ADDR
// if play = player_2 then
2505: LD_VAR 0 6
2509: PUSH
2510: LD_EXP 18
2514: EQUAL
2515: IFFALSE 2533
// score_enemy2 := score_enemy2 + score ;
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_EXP 30
2526: PUSH
2527: LD_VAR 0 5
2531: PLUS
2532: ST_TO_ADDR
// if play = player_3 then
2533: LD_VAR 0 6
2537: PUSH
2538: LD_EXP 20
2542: EQUAL
2543: IFFALSE 2561
// score_enemy3 := score_enemy3 + score ;
2545: LD_ADDR_EXP 31
2549: PUSH
2550: LD_EXP 31
2554: PUSH
2555: LD_VAR 0 5
2559: PLUS
2560: ST_TO_ADDR
// if play = player_4 then
2561: LD_VAR 0 6
2565: PUSH
2566: LD_EXP 21
2570: EQUAL
2571: IFFALSE 2589
// score_enemy4 := score_enemy4 + score ;
2573: LD_ADDR_EXP 32
2577: PUSH
2578: LD_EXP 32
2582: PUSH
2583: LD_VAR 0 5
2587: PLUS
2588: ST_TO_ADDR
// if play = player_5 then
2589: LD_VAR 0 6
2593: PUSH
2594: LD_EXP 22
2598: EQUAL
2599: IFFALSE 2617
// score_enemy5 := score_enemy5 + score ;
2601: LD_ADDR_EXP 33
2605: PUSH
2606: LD_EXP 33
2610: PUSH
2611: LD_VAR 0 5
2615: PLUS
2616: ST_TO_ADDR
// if play = player_6 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_EXP 23
2626: EQUAL
2627: IFFALSE 2645
// score_enemy6 := score_enemy6 + score ;
2629: LD_ADDR_EXP 34
2633: PUSH
2634: LD_EXP 34
2638: PUSH
2639: LD_VAR 0 5
2643: PLUS
2644: ST_TO_ADDR
// if play = player_7 then
2645: LD_VAR 0 6
2649: PUSH
2650: LD_EXP 24
2654: EQUAL
2655: IFFALSE 2673
// score_enemy7 := score_enemy7 + score ;
2657: LD_ADDR_EXP 35
2661: PUSH
2662: LD_EXP 35
2666: PUSH
2667: LD_VAR 0 5
2671: PLUS
2672: ST_TO_ADDR
// end ; end ;
2673: PPOPN 6
2675: END
// every 10 do
2676: GO 2678
2678: DISABLE
// begin enable ;
2679: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
2680: LD_ADDR_OWVAR 47
2684: PUSH
2685: LD_STRING #player1
2687: PUSH
2688: LD_EXP 28
2692: PUSH
2693: LD_STRING #player2
2695: PUSH
2696: LD_EXP 29
2700: PUSH
2701: LD_STRING #player3
2703: PUSH
2704: LD_EXP 30
2708: PUSH
2709: LD_STRING #player4
2711: PUSH
2712: LD_EXP 31
2716: PUSH
2717: LD_STRING #player5
2719: PUSH
2720: LD_EXP 32
2724: PUSH
2725: LD_STRING #player6
2727: PUSH
2728: LD_EXP 33
2732: PUSH
2733: LD_STRING #player7
2735: PUSH
2736: LD_EXP 34
2740: PUSH
2741: LD_STRING #player8
2743: PUSH
2744: LD_EXP 35
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: ST_TO_ADDR
// end ;
2767: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
2768: LD_VAR 0 1
2772: PUSH
2773: LD_OWVAR 2
2777: EQUAL
2778: PUSH
2779: LD_VAR 0 2
2783: PUSH
2784: LD_INT 0
2786: GREATER
2787: AND
2788: IFFALSE 2797
// YouLost ( hunt1 ) ;
2790: LD_STRING hunt1
2792: PPUSH
2793: CALL_OW 104
// end ;
2797: PPOPN 2
2799: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
2800: LD_INT 22
2802: PUSH
2803: LD_INT 0
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 69
2814: PUSH
2815: LD_INT 0
2817: EQUAL
2818: IFFALSE 2927
2820: GO 2822
2822: DISABLE
// begin Wait ( 0 0$03 ) ;
2823: LD_INT 105
2825: PPUSH
2826: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
2830: LD_EXP 28
2834: PUSH
2835: LD_EXP 29
2839: GREATER
2840: PUSH
2841: LD_EXP 28
2845: PUSH
2846: LD_EXP 30
2850: GREATER
2851: AND
2852: PUSH
2853: LD_EXP 28
2857: PUSH
2858: LD_EXP 31
2862: GREATER
2863: AND
2864: PUSH
2865: LD_EXP 28
2869: PUSH
2870: LD_EXP 32
2874: GREATER
2875: AND
2876: PUSH
2877: LD_EXP 28
2881: PUSH
2882: LD_EXP 33
2886: GREATER
2887: AND
2888: PUSH
2889: LD_EXP 28
2893: PUSH
2894: LD_EXP 34
2898: GREATER
2899: AND
2900: PUSH
2901: LD_EXP 28
2905: PUSH
2906: LD_EXP 35
2910: GREATER
2911: AND
2912: IFFALSE 2920
// YouWin else
2914: CALL_OW 103
2918: GO 2927
// YouLost ( hunt3 ) ;
2920: LD_STRING hunt3
2922: PPUSH
2923: CALL_OW 104
// end ; end_of_file end_of_file
2927: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
2928: GO 2930
2930: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2931: LD_STRING initStreamRollete();
2933: PPUSH
2934: CALL_OW 559
// InitStreamMode ;
2938: CALL 2947 0 0
// DefineStreamItems ( ) ;
2942: CALL 3387 0 0
// end ;
2946: END
// function InitStreamMode ; begin
2947: LD_INT 0
2949: PPUSH
// streamModeActive := false ;
2950: LD_ADDR_EXP 36
2954: PUSH
2955: LD_INT 0
2957: ST_TO_ADDR
// normalCounter := 26 ;
2958: LD_ADDR_EXP 37
2962: PUSH
2963: LD_INT 26
2965: ST_TO_ADDR
// hardcoreCounter := 12 ;
2966: LD_ADDR_EXP 38
2970: PUSH
2971: LD_INT 12
2973: ST_TO_ADDR
// sRocket := false ;
2974: LD_ADDR_EXP 41
2978: PUSH
2979: LD_INT 0
2981: ST_TO_ADDR
// sSpeed := false ;
2982: LD_ADDR_EXP 40
2986: PUSH
2987: LD_INT 0
2989: ST_TO_ADDR
// sEngine := false ;
2990: LD_ADDR_EXP 42
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// sSpec := false ;
2998: LD_ADDR_EXP 39
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// sLevel := false ;
3006: LD_ADDR_EXP 43
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// sArmoury := false ;
3014: LD_ADDR_EXP 44
3018: PUSH
3019: LD_INT 0
3021: ST_TO_ADDR
// sRadar := false ;
3022: LD_ADDR_EXP 45
3026: PUSH
3027: LD_INT 0
3029: ST_TO_ADDR
// sBunker := false ;
3030: LD_ADDR_EXP 46
3034: PUSH
3035: LD_INT 0
3037: ST_TO_ADDR
// sHack := false ;
3038: LD_ADDR_EXP 47
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// sFire := false ;
3046: LD_ADDR_EXP 48
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// sRefresh := false ;
3054: LD_ADDR_EXP 49
3058: PUSH
3059: LD_INT 0
3061: ST_TO_ADDR
// sExp := false ;
3062: LD_ADDR_EXP 50
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// sDepot := false ;
3070: LD_ADDR_EXP 51
3074: PUSH
3075: LD_INT 0
3077: ST_TO_ADDR
// sFlag := false ;
3078: LD_ADDR_EXP 52
3082: PUSH
3083: LD_INT 0
3085: ST_TO_ADDR
// sKamikadze := false ;
3086: LD_ADDR_EXP 60
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// sTroll := false ;
3094: LD_ADDR_EXP 61
3098: PUSH
3099: LD_INT 0
3101: ST_TO_ADDR
// sSlow := false ;
3102: LD_ADDR_EXP 62
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// sLack := false ;
3110: LD_ADDR_EXP 63
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sTank := false ;
3118: LD_ADDR_EXP 65
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sRemote := false ;
3126: LD_ADDR_EXP 66
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sPowell := false ;
3134: LD_ADDR_EXP 67
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sTeleport := false ;
3142: LD_ADDR_EXP 70
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sOilTower := false ;
3150: LD_ADDR_EXP 72
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sShovel := false ;
3158: LD_ADDR_EXP 73
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sSheik := false ;
3166: LD_ADDR_EXP 74
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sEarthquake := false ;
3174: LD_ADDR_EXP 76
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sAI := false ;
3182: LD_ADDR_EXP 77
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sCargo := false ;
3190: LD_ADDR_EXP 80
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sDLaser := false ;
3198: LD_ADDR_EXP 81
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sExchange := false ;
3206: LD_ADDR_EXP 82
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sFac := false ;
3214: LD_ADDR_EXP 83
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sPower := false ;
3222: LD_ADDR_EXP 84
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sRandom := false ;
3230: LD_ADDR_EXP 85
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sShield := false ;
3238: LD_ADDR_EXP 86
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sTime := false ;
3246: LD_ADDR_EXP 87
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sTools := false ;
3254: LD_ADDR_EXP 88
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sSold := false ;
3262: LD_ADDR_EXP 53
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sDiff := false ;
3270: LD_ADDR_EXP 54
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sFog := false ;
3278: LD_ADDR_EXP 57
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sReset := false ;
3286: LD_ADDR_EXP 58
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sSun := false ;
3294: LD_ADDR_EXP 59
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sTiger := false ;
3302: LD_ADDR_EXP 55
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sBomb := false ;
3310: LD_ADDR_EXP 56
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sWound := false ;
3318: LD_ADDR_EXP 64
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sBetray := false ;
3326: LD_ADDR_EXP 68
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sContamin := false ;
3334: LD_ADDR_EXP 69
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sOil := false ;
3342: LD_ADDR_EXP 71
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sStu := false ;
3350: LD_ADDR_EXP 75
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sBazooka := false ;
3358: LD_ADDR_EXP 78
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sMortar := false ;
3366: LD_ADDR_EXP 79
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sRanger := false ;
3374: LD_ADDR_EXP 89
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// end ;
3382: LD_VAR 0 1
3386: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3387: LD_INT 0
3389: PPUSH
3390: PPUSH
3391: PPUSH
3392: PPUSH
3393: PPUSH
// result := [ ] ;
3394: LD_ADDR_VAR 0 1
3398: PUSH
3399: EMPTY
3400: ST_TO_ADDR
// if campaign_id = 1 then
3401: LD_OWVAR 69
3405: PUSH
3406: LD_INT 1
3408: EQUAL
3409: IFFALSE 6357
// begin case mission_number of 1 :
3411: LD_OWVAR 70
3415: PUSH
3416: LD_INT 1
3418: DOUBLE
3419: EQUAL
3420: IFTRUE 3424
3422: GO 3488
3424: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3425: LD_ADDR_VAR 0 1
3429: PUSH
3430: LD_INT 2
3432: PUSH
3433: LD_INT 4
3435: PUSH
3436: LD_INT 11
3438: PUSH
3439: LD_INT 12
3441: PUSH
3442: LD_INT 15
3444: PUSH
3445: LD_INT 16
3447: PUSH
3448: LD_INT 22
3450: PUSH
3451: LD_INT 23
3453: PUSH
3454: LD_INT 26
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: PUSH
3468: LD_INT 101
3470: PUSH
3471: LD_INT 102
3473: PUSH
3474: LD_INT 106
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: ST_TO_ADDR
3486: GO 6357
3488: LD_INT 2
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3568
3496: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3497: LD_ADDR_VAR 0 1
3501: PUSH
3502: LD_INT 2
3504: PUSH
3505: LD_INT 4
3507: PUSH
3508: LD_INT 11
3510: PUSH
3511: LD_INT 12
3513: PUSH
3514: LD_INT 15
3516: PUSH
3517: LD_INT 16
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 23
3525: PUSH
3526: LD_INT 26
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 101
3542: PUSH
3543: LD_INT 102
3545: PUSH
3546: LD_INT 105
3548: PUSH
3549: LD_INT 106
3551: PUSH
3552: LD_INT 108
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: ST_TO_ADDR
3566: GO 6357
3568: LD_INT 3
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3652
3576: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3577: LD_ADDR_VAR 0 1
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: LD_INT 4
3587: PUSH
3588: LD_INT 5
3590: PUSH
3591: LD_INT 11
3593: PUSH
3594: LD_INT 12
3596: PUSH
3597: LD_INT 15
3599: PUSH
3600: LD_INT 16
3602: PUSH
3603: LD_INT 22
3605: PUSH
3606: LD_INT 26
3608: PUSH
3609: LD_INT 36
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 101
3626: PUSH
3627: LD_INT 102
3629: PUSH
3630: LD_INT 105
3632: PUSH
3633: LD_INT 106
3635: PUSH
3636: LD_INT 108
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: ST_TO_ADDR
3650: GO 6357
3652: LD_INT 4
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3744
3660: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3661: LD_ADDR_VAR 0 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: LD_INT 5
3674: PUSH
3675: LD_INT 8
3677: PUSH
3678: LD_INT 11
3680: PUSH
3681: LD_INT 12
3683: PUSH
3684: LD_INT 15
3686: PUSH
3687: LD_INT 16
3689: PUSH
3690: LD_INT 22
3692: PUSH
3693: LD_INT 23
3695: PUSH
3696: LD_INT 26
3698: PUSH
3699: LD_INT 36
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 101
3718: PUSH
3719: LD_INT 102
3721: PUSH
3722: LD_INT 105
3724: PUSH
3725: LD_INT 106
3727: PUSH
3728: LD_INT 108
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: ST_TO_ADDR
3742: GO 6357
3744: LD_INT 5
3746: DOUBLE
3747: EQUAL
3748: IFTRUE 3752
3750: GO 3852
3752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3753: LD_ADDR_VAR 0 1
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 4
3763: PUSH
3764: LD_INT 5
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 11
3775: PUSH
3776: LD_INT 12
3778: PUSH
3779: LD_INT 15
3781: PUSH
3782: LD_INT 16
3784: PUSH
3785: LD_INT 22
3787: PUSH
3788: LD_INT 23
3790: PUSH
3791: LD_INT 25
3793: PUSH
3794: LD_INT 26
3796: PUSH
3797: LD_INT 36
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 101
3818: PUSH
3819: LD_INT 102
3821: PUSH
3822: LD_INT 105
3824: PUSH
3825: LD_INT 106
3827: PUSH
3828: LD_INT 108
3830: PUSH
3831: LD_INT 109
3833: PUSH
3834: LD_INT 112
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: ST_TO_ADDR
3850: GO 6357
3852: LD_INT 6
3854: DOUBLE
3855: EQUAL
3856: IFTRUE 3860
3858: GO 3980
3860: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 4
3871: PUSH
3872: LD_INT 5
3874: PUSH
3875: LD_INT 6
3877: PUSH
3878: LD_INT 8
3880: PUSH
3881: LD_INT 11
3883: PUSH
3884: LD_INT 12
3886: PUSH
3887: LD_INT 15
3889: PUSH
3890: LD_INT 16
3892: PUSH
3893: LD_INT 20
3895: PUSH
3896: LD_INT 21
3898: PUSH
3899: LD_INT 22
3901: PUSH
3902: LD_INT 23
3904: PUSH
3905: LD_INT 25
3907: PUSH
3908: LD_INT 26
3910: PUSH
3911: LD_INT 30
3913: PUSH
3914: LD_INT 31
3916: PUSH
3917: LD_INT 32
3919: PUSH
3920: LD_INT 36
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 101
3946: PUSH
3947: LD_INT 102
3949: PUSH
3950: LD_INT 105
3952: PUSH
3953: LD_INT 106
3955: PUSH
3956: LD_INT 108
3958: PUSH
3959: LD_INT 109
3961: PUSH
3962: LD_INT 112
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: ST_TO_ADDR
3978: GO 6357
3980: LD_INT 7
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4088
3988: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: LD_INT 7
4005: PUSH
4006: LD_INT 11
4008: PUSH
4009: LD_INT 12
4011: PUSH
4012: LD_INT 15
4014: PUSH
4015: LD_INT 16
4017: PUSH
4018: LD_INT 20
4020: PUSH
4021: LD_INT 21
4023: PUSH
4024: LD_INT 22
4026: PUSH
4027: LD_INT 23
4029: PUSH
4030: LD_INT 25
4032: PUSH
4033: LD_INT 26
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 101
4054: PUSH
4055: LD_INT 102
4057: PUSH
4058: LD_INT 103
4060: PUSH
4061: LD_INT 105
4063: PUSH
4064: LD_INT 106
4066: PUSH
4067: LD_INT 108
4069: PUSH
4070: LD_INT 112
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: ST_TO_ADDR
4086: GO 6357
4088: LD_INT 8
4090: DOUBLE
4091: EQUAL
4092: IFTRUE 4096
4094: GO 4224
4096: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4097: LD_ADDR_VAR 0 1
4101: PUSH
4102: LD_INT 2
4104: PUSH
4105: LD_INT 4
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 6
4113: PUSH
4114: LD_INT 7
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 11
4122: PUSH
4123: LD_INT 12
4125: PUSH
4126: LD_INT 15
4128: PUSH
4129: LD_INT 16
4131: PUSH
4132: LD_INT 20
4134: PUSH
4135: LD_INT 21
4137: PUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 23
4143: PUSH
4144: LD_INT 25
4146: PUSH
4147: LD_INT 26
4149: PUSH
4150: LD_INT 30
4152: PUSH
4153: LD_INT 31
4155: PUSH
4156: LD_INT 32
4158: PUSH
4159: LD_INT 36
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 101
4186: PUSH
4187: LD_INT 102
4189: PUSH
4190: LD_INT 103
4192: PUSH
4193: LD_INT 105
4195: PUSH
4196: LD_INT 106
4198: PUSH
4199: LD_INT 108
4201: PUSH
4202: LD_INT 109
4204: PUSH
4205: LD_INT 112
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
4222: GO 6357
4224: LD_INT 9
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4368
4232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4233: LD_ADDR_VAR 0 1
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 6
4249: PUSH
4250: LD_INT 7
4252: PUSH
4253: LD_INT 8
4255: PUSH
4256: LD_INT 11
4258: PUSH
4259: LD_INT 12
4261: PUSH
4262: LD_INT 15
4264: PUSH
4265: LD_INT 16
4267: PUSH
4268: LD_INT 20
4270: PUSH
4271: LD_INT 21
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 23
4279: PUSH
4280: LD_INT 25
4282: PUSH
4283: LD_INT 26
4285: PUSH
4286: LD_INT 28
4288: PUSH
4289: LD_INT 30
4291: PUSH
4292: LD_INT 31
4294: PUSH
4295: LD_INT 32
4297: PUSH
4298: LD_INT 36
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 101
4326: PUSH
4327: LD_INT 102
4329: PUSH
4330: LD_INT 103
4332: PUSH
4333: LD_INT 105
4335: PUSH
4336: LD_INT 106
4338: PUSH
4339: LD_INT 108
4341: PUSH
4342: LD_INT 109
4344: PUSH
4345: LD_INT 112
4347: PUSH
4348: LD_INT 114
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: ST_TO_ADDR
4366: GO 6357
4368: LD_INT 10
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4560
4376: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4377: LD_ADDR_VAR 0 1
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 4
4387: PUSH
4388: LD_INT 5
4390: PUSH
4391: LD_INT 6
4393: PUSH
4394: LD_INT 7
4396: PUSH
4397: LD_INT 8
4399: PUSH
4400: LD_INT 9
4402: PUSH
4403: LD_INT 10
4405: PUSH
4406: LD_INT 11
4408: PUSH
4409: LD_INT 12
4411: PUSH
4412: LD_INT 13
4414: PUSH
4415: LD_INT 14
4417: PUSH
4418: LD_INT 15
4420: PUSH
4421: LD_INT 16
4423: PUSH
4424: LD_INT 17
4426: PUSH
4427: LD_INT 18
4429: PUSH
4430: LD_INT 19
4432: PUSH
4433: LD_INT 20
4435: PUSH
4436: LD_INT 21
4438: PUSH
4439: LD_INT 22
4441: PUSH
4442: LD_INT 23
4444: PUSH
4445: LD_INT 24
4447: PUSH
4448: LD_INT 25
4450: PUSH
4451: LD_INT 26
4453: PUSH
4454: LD_INT 28
4456: PUSH
4457: LD_INT 30
4459: PUSH
4460: LD_INT 31
4462: PUSH
4463: LD_INT 32
4465: PUSH
4466: LD_INT 36
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 101
4502: PUSH
4503: LD_INT 102
4505: PUSH
4506: LD_INT 103
4508: PUSH
4509: LD_INT 104
4511: PUSH
4512: LD_INT 105
4514: PUSH
4515: LD_INT 106
4517: PUSH
4518: LD_INT 107
4520: PUSH
4521: LD_INT 108
4523: PUSH
4524: LD_INT 109
4526: PUSH
4527: LD_INT 110
4529: PUSH
4530: LD_INT 111
4532: PUSH
4533: LD_INT 112
4535: PUSH
4536: LD_INT 114
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 6357
4560: LD_INT 11
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4760
4568: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4569: LD_ADDR_VAR 0 1
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: LD_INT 5
4585: PUSH
4586: LD_INT 6
4588: PUSH
4589: LD_INT 7
4591: PUSH
4592: LD_INT 8
4594: PUSH
4595: LD_INT 9
4597: PUSH
4598: LD_INT 10
4600: PUSH
4601: LD_INT 11
4603: PUSH
4604: LD_INT 12
4606: PUSH
4607: LD_INT 13
4609: PUSH
4610: LD_INT 14
4612: PUSH
4613: LD_INT 15
4615: PUSH
4616: LD_INT 16
4618: PUSH
4619: LD_INT 17
4621: PUSH
4622: LD_INT 18
4624: PUSH
4625: LD_INT 19
4627: PUSH
4628: LD_INT 20
4630: PUSH
4631: LD_INT 21
4633: PUSH
4634: LD_INT 22
4636: PUSH
4637: LD_INT 23
4639: PUSH
4640: LD_INT 24
4642: PUSH
4643: LD_INT 25
4645: PUSH
4646: LD_INT 26
4648: PUSH
4649: LD_INT 28
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 31
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 34
4663: PUSH
4664: LD_INT 36
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 101
4702: PUSH
4703: LD_INT 102
4705: PUSH
4706: LD_INT 103
4708: PUSH
4709: LD_INT 104
4711: PUSH
4712: LD_INT 105
4714: PUSH
4715: LD_INT 106
4717: PUSH
4718: LD_INT 107
4720: PUSH
4721: LD_INT 108
4723: PUSH
4724: LD_INT 109
4726: PUSH
4727: LD_INT 110
4729: PUSH
4730: LD_INT 111
4732: PUSH
4733: LD_INT 112
4735: PUSH
4736: LD_INT 114
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: ST_TO_ADDR
4758: GO 6357
4760: LD_INT 12
4762: DOUBLE
4763: EQUAL
4764: IFTRUE 4768
4766: GO 4976
4768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4769: LD_ADDR_VAR 0 1
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: LD_INT 2
4779: PUSH
4780: LD_INT 3
4782: PUSH
4783: LD_INT 4
4785: PUSH
4786: LD_INT 5
4788: PUSH
4789: LD_INT 6
4791: PUSH
4792: LD_INT 7
4794: PUSH
4795: LD_INT 8
4797: PUSH
4798: LD_INT 9
4800: PUSH
4801: LD_INT 10
4803: PUSH
4804: LD_INT 11
4806: PUSH
4807: LD_INT 12
4809: PUSH
4810: LD_INT 13
4812: PUSH
4813: LD_INT 14
4815: PUSH
4816: LD_INT 15
4818: PUSH
4819: LD_INT 16
4821: PUSH
4822: LD_INT 17
4824: PUSH
4825: LD_INT 18
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: LD_INT 20
4833: PUSH
4834: LD_INT 21
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 23
4842: PUSH
4843: LD_INT 24
4845: PUSH
4846: LD_INT 25
4848: PUSH
4849: LD_INT 26
4851: PUSH
4852: LD_INT 27
4854: PUSH
4855: LD_INT 28
4857: PUSH
4858: LD_INT 30
4860: PUSH
4861: LD_INT 31
4863: PUSH
4864: LD_INT 32
4866: PUSH
4867: LD_INT 33
4869: PUSH
4870: LD_INT 34
4872: PUSH
4873: LD_INT 36
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 101
4914: PUSH
4915: LD_INT 102
4917: PUSH
4918: LD_INT 103
4920: PUSH
4921: LD_INT 104
4923: PUSH
4924: LD_INT 105
4926: PUSH
4927: LD_INT 106
4929: PUSH
4930: LD_INT 107
4932: PUSH
4933: LD_INT 108
4935: PUSH
4936: LD_INT 109
4938: PUSH
4939: LD_INT 110
4941: PUSH
4942: LD_INT 111
4944: PUSH
4945: LD_INT 112
4947: PUSH
4948: LD_INT 113
4950: PUSH
4951: LD_INT 114
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: ST_TO_ADDR
4974: GO 6357
4976: LD_INT 13
4978: DOUBLE
4979: EQUAL
4980: IFTRUE 4984
4982: GO 5192
4984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_INT 1
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: LD_INT 4
5001: PUSH
5002: LD_INT 5
5004: PUSH
5005: LD_INT 6
5007: PUSH
5008: LD_INT 7
5010: PUSH
5011: LD_INT 8
5013: PUSH
5014: LD_INT 9
5016: PUSH
5017: LD_INT 10
5019: PUSH
5020: LD_INT 11
5022: PUSH
5023: LD_INT 12
5025: PUSH
5026: LD_INT 13
5028: PUSH
5029: LD_INT 14
5031: PUSH
5032: LD_INT 15
5034: PUSH
5035: LD_INT 16
5037: PUSH
5038: LD_INT 17
5040: PUSH
5041: LD_INT 18
5043: PUSH
5044: LD_INT 19
5046: PUSH
5047: LD_INT 20
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 22
5055: PUSH
5056: LD_INT 23
5058: PUSH
5059: LD_INT 24
5061: PUSH
5062: LD_INT 25
5064: PUSH
5065: LD_INT 26
5067: PUSH
5068: LD_INT 27
5070: PUSH
5071: LD_INT 28
5073: PUSH
5074: LD_INT 30
5076: PUSH
5077: LD_INT 31
5079: PUSH
5080: LD_INT 32
5082: PUSH
5083: LD_INT 33
5085: PUSH
5086: LD_INT 34
5088: PUSH
5089: LD_INT 36
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_INT 101
5130: PUSH
5131: LD_INT 102
5133: PUSH
5134: LD_INT 103
5136: PUSH
5137: LD_INT 104
5139: PUSH
5140: LD_INT 105
5142: PUSH
5143: LD_INT 106
5145: PUSH
5146: LD_INT 107
5148: PUSH
5149: LD_INT 108
5151: PUSH
5152: LD_INT 109
5154: PUSH
5155: LD_INT 110
5157: PUSH
5158: LD_INT 111
5160: PUSH
5161: LD_INT 112
5163: PUSH
5164: LD_INT 113
5166: PUSH
5167: LD_INT 114
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: ST_TO_ADDR
5190: GO 6357
5192: LD_INT 14
5194: DOUBLE
5195: EQUAL
5196: IFTRUE 5200
5198: GO 5412
5200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5201: LD_ADDR_VAR 0 1
5205: PUSH
5206: LD_INT 1
5208: PUSH
5209: LD_INT 2
5211: PUSH
5212: LD_INT 3
5214: PUSH
5215: LD_INT 4
5217: PUSH
5218: LD_INT 5
5220: PUSH
5221: LD_INT 6
5223: PUSH
5224: LD_INT 7
5226: PUSH
5227: LD_INT 8
5229: PUSH
5230: LD_INT 9
5232: PUSH
5233: LD_INT 10
5235: PUSH
5236: LD_INT 11
5238: PUSH
5239: LD_INT 12
5241: PUSH
5242: LD_INT 13
5244: PUSH
5245: LD_INT 14
5247: PUSH
5248: LD_INT 15
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: LD_INT 17
5256: PUSH
5257: LD_INT 18
5259: PUSH
5260: LD_INT 19
5262: PUSH
5263: LD_INT 20
5265: PUSH
5266: LD_INT 21
5268: PUSH
5269: LD_INT 22
5271: PUSH
5272: LD_INT 23
5274: PUSH
5275: LD_INT 24
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 26
5283: PUSH
5284: LD_INT 27
5286: PUSH
5287: LD_INT 28
5289: PUSH
5290: LD_INT 29
5292: PUSH
5293: LD_INT 30
5295: PUSH
5296: LD_INT 31
5298: PUSH
5299: LD_INT 32
5301: PUSH
5302: LD_INT 33
5304: PUSH
5305: LD_INT 34
5307: PUSH
5308: LD_INT 36
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 101
5350: PUSH
5351: LD_INT 102
5353: PUSH
5354: LD_INT 103
5356: PUSH
5357: LD_INT 104
5359: PUSH
5360: LD_INT 105
5362: PUSH
5363: LD_INT 106
5365: PUSH
5366: LD_INT 107
5368: PUSH
5369: LD_INT 108
5371: PUSH
5372: LD_INT 109
5374: PUSH
5375: LD_INT 110
5377: PUSH
5378: LD_INT 111
5380: PUSH
5381: LD_INT 112
5383: PUSH
5384: LD_INT 113
5386: PUSH
5387: LD_INT 114
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: ST_TO_ADDR
5410: GO 6357
5412: LD_INT 15
5414: DOUBLE
5415: EQUAL
5416: IFTRUE 5420
5418: GO 5632
5420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5421: LD_ADDR_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: LD_INT 4
5437: PUSH
5438: LD_INT 5
5440: PUSH
5441: LD_INT 6
5443: PUSH
5444: LD_INT 7
5446: PUSH
5447: LD_INT 8
5449: PUSH
5450: LD_INT 9
5452: PUSH
5453: LD_INT 10
5455: PUSH
5456: LD_INT 11
5458: PUSH
5459: LD_INT 12
5461: PUSH
5462: LD_INT 13
5464: PUSH
5465: LD_INT 14
5467: PUSH
5468: LD_INT 15
5470: PUSH
5471: LD_INT 16
5473: PUSH
5474: LD_INT 17
5476: PUSH
5477: LD_INT 18
5479: PUSH
5480: LD_INT 19
5482: PUSH
5483: LD_INT 20
5485: PUSH
5486: LD_INT 21
5488: PUSH
5489: LD_INT 22
5491: PUSH
5492: LD_INT 23
5494: PUSH
5495: LD_INT 24
5497: PUSH
5498: LD_INT 25
5500: PUSH
5501: LD_INT 26
5503: PUSH
5504: LD_INT 27
5506: PUSH
5507: LD_INT 28
5509: PUSH
5510: LD_INT 29
5512: PUSH
5513: LD_INT 30
5515: PUSH
5516: LD_INT 31
5518: PUSH
5519: LD_INT 32
5521: PUSH
5522: LD_INT 33
5524: PUSH
5525: LD_INT 34
5527: PUSH
5528: LD_INT 36
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 101
5570: PUSH
5571: LD_INT 102
5573: PUSH
5574: LD_INT 103
5576: PUSH
5577: LD_INT 104
5579: PUSH
5580: LD_INT 105
5582: PUSH
5583: LD_INT 106
5585: PUSH
5586: LD_INT 107
5588: PUSH
5589: LD_INT 108
5591: PUSH
5592: LD_INT 109
5594: PUSH
5595: LD_INT 110
5597: PUSH
5598: LD_INT 111
5600: PUSH
5601: LD_INT 112
5603: PUSH
5604: LD_INT 113
5606: PUSH
5607: LD_INT 114
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: ST_TO_ADDR
5630: GO 6357
5632: LD_INT 16
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5764
5640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5641: LD_ADDR_VAR 0 1
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 4
5651: PUSH
5652: LD_INT 5
5654: PUSH
5655: LD_INT 7
5657: PUSH
5658: LD_INT 11
5660: PUSH
5661: LD_INT 12
5663: PUSH
5664: LD_INT 15
5666: PUSH
5667: LD_INT 16
5669: PUSH
5670: LD_INT 20
5672: PUSH
5673: LD_INT 21
5675: PUSH
5676: LD_INT 22
5678: PUSH
5679: LD_INT 23
5681: PUSH
5682: LD_INT 25
5684: PUSH
5685: LD_INT 26
5687: PUSH
5688: LD_INT 30
5690: PUSH
5691: LD_INT 31
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 33
5699: PUSH
5700: LD_INT 34
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 101
5726: PUSH
5727: LD_INT 102
5729: PUSH
5730: LD_INT 103
5732: PUSH
5733: LD_INT 106
5735: PUSH
5736: LD_INT 108
5738: PUSH
5739: LD_INT 112
5741: PUSH
5742: LD_INT 113
5744: PUSH
5745: LD_INT 114
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: ST_TO_ADDR
5762: GO 6357
5764: LD_INT 17
5766: DOUBLE
5767: EQUAL
5768: IFTRUE 5772
5770: GO 5984
5772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: LD_INT 4
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 6
5795: PUSH
5796: LD_INT 7
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: LD_INT 9
5804: PUSH
5805: LD_INT 10
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 13
5816: PUSH
5817: LD_INT 14
5819: PUSH
5820: LD_INT 15
5822: PUSH
5823: LD_INT 16
5825: PUSH
5826: LD_INT 17
5828: PUSH
5829: LD_INT 18
5831: PUSH
5832: LD_INT 19
5834: PUSH
5835: LD_INT 20
5837: PUSH
5838: LD_INT 21
5840: PUSH
5841: LD_INT 22
5843: PUSH
5844: LD_INT 23
5846: PUSH
5847: LD_INT 24
5849: PUSH
5850: LD_INT 25
5852: PUSH
5853: LD_INT 26
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 28
5861: PUSH
5862: LD_INT 29
5864: PUSH
5865: LD_INT 30
5867: PUSH
5868: LD_INT 31
5870: PUSH
5871: LD_INT 32
5873: PUSH
5874: LD_INT 33
5876: PUSH
5877: LD_INT 34
5879: PUSH
5880: LD_INT 36
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 101
5922: PUSH
5923: LD_INT 102
5925: PUSH
5926: LD_INT 103
5928: PUSH
5929: LD_INT 104
5931: PUSH
5932: LD_INT 105
5934: PUSH
5935: LD_INT 106
5937: PUSH
5938: LD_INT 107
5940: PUSH
5941: LD_INT 108
5943: PUSH
5944: LD_INT 109
5946: PUSH
5947: LD_INT 110
5949: PUSH
5950: LD_INT 111
5952: PUSH
5953: LD_INT 112
5955: PUSH
5956: LD_INT 113
5958: PUSH
5959: LD_INT 114
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: ST_TO_ADDR
5982: GO 6357
5984: LD_INT 18
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6128
5992: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
5993: LD_ADDR_VAR 0 1
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: LD_INT 7
6009: PUSH
6010: LD_INT 11
6012: PUSH
6013: LD_INT 12
6015: PUSH
6016: LD_INT 15
6018: PUSH
6019: LD_INT 16
6021: PUSH
6022: LD_INT 20
6024: PUSH
6025: LD_INT 21
6027: PUSH
6028: LD_INT 22
6030: PUSH
6031: LD_INT 23
6033: PUSH
6034: LD_INT 25
6036: PUSH
6037: LD_INT 26
6039: PUSH
6040: LD_INT 30
6042: PUSH
6043: LD_INT 31
6045: PUSH
6046: LD_INT 32
6048: PUSH
6049: LD_INT 33
6051: PUSH
6052: LD_INT 34
6054: PUSH
6055: LD_INT 35
6057: PUSH
6058: LD_INT 36
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 101
6086: PUSH
6087: LD_INT 102
6089: PUSH
6090: LD_INT 103
6092: PUSH
6093: LD_INT 106
6095: PUSH
6096: LD_INT 108
6098: PUSH
6099: LD_INT 112
6101: PUSH
6102: LD_INT 113
6104: PUSH
6105: LD_INT 114
6107: PUSH
6108: LD_INT 115
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: ST_TO_ADDR
6126: GO 6357
6128: LD_INT 19
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6356
6136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6137: LD_ADDR_VAR 0 1
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: LD_INT 11
6174: PUSH
6175: LD_INT 12
6177: PUSH
6178: LD_INT 13
6180: PUSH
6181: LD_INT 14
6183: PUSH
6184: LD_INT 15
6186: PUSH
6187: LD_INT 16
6189: PUSH
6190: LD_INT 17
6192: PUSH
6193: LD_INT 18
6195: PUSH
6196: LD_INT 19
6198: PUSH
6199: LD_INT 20
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 22
6207: PUSH
6208: LD_INT 23
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: LD_INT 25
6216: PUSH
6217: LD_INT 26
6219: PUSH
6220: LD_INT 27
6222: PUSH
6223: LD_INT 28
6225: PUSH
6226: LD_INT 29
6228: PUSH
6229: LD_INT 30
6231: PUSH
6232: LD_INT 31
6234: PUSH
6235: LD_INT 32
6237: PUSH
6238: LD_INT 33
6240: PUSH
6241: LD_INT 34
6243: PUSH
6244: LD_INT 35
6246: PUSH
6247: LD_INT 36
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 101
6290: PUSH
6291: LD_INT 102
6293: PUSH
6294: LD_INT 103
6296: PUSH
6297: LD_INT 104
6299: PUSH
6300: LD_INT 105
6302: PUSH
6303: LD_INT 106
6305: PUSH
6306: LD_INT 107
6308: PUSH
6309: LD_INT 108
6311: PUSH
6312: LD_INT 109
6314: PUSH
6315: LD_INT 110
6317: PUSH
6318: LD_INT 111
6320: PUSH
6321: LD_INT 112
6323: PUSH
6324: LD_INT 113
6326: PUSH
6327: LD_INT 114
6329: PUSH
6330: LD_INT 115
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: ST_TO_ADDR
6354: GO 6357
6356: POP
// end ; if result then
6357: LD_VAR 0 1
6361: IFFALSE 6650
// begin normal :=  ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_STRING 
6370: ST_TO_ADDR
// hardcore :=  ;
6371: LD_ADDR_VAR 0 4
6375: PUSH
6376: LD_STRING 
6378: ST_TO_ADDR
// for i = 1 to normalCounter do
6379: LD_ADDR_VAR 0 5
6383: PUSH
6384: DOUBLE
6385: LD_INT 1
6387: DEC
6388: ST_TO_ADDR
6389: LD_EXP 37
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6496
// begin tmp := 0 ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_STRING 0
6404: ST_TO_ADDR
// if result [ 1 ] then
6405: LD_VAR 0 1
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: IFFALSE 6478
// if result [ 1 ] [ 1 ] = i then
6415: LD_VAR 0 1
6419: PUSH
6420: LD_INT 1
6422: ARRAY
6423: PUSH
6424: LD_INT 1
6426: ARRAY
6427: PUSH
6428: LD_VAR 0 5
6432: EQUAL
6433: IFFALSE 6478
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6435: LD_ADDR_VAR 0 1
6439: PUSH
6440: LD_VAR 0 1
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: LD_VAR 0 1
6452: PUSH
6453: LD_INT 1
6455: ARRAY
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: CALL_OW 3
6464: PPUSH
6465: CALL_OW 1
6469: ST_TO_ADDR
// tmp := 1 ;
6470: LD_ADDR_VAR 0 2
6474: PUSH
6475: LD_STRING 1
6477: ST_TO_ADDR
// end ; normal := normal & tmp ;
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_VAR 0 3
6487: PUSH
6488: LD_VAR 0 2
6492: STR
6493: ST_TO_ADDR
// end ;
6494: GO 6394
6496: POP
6497: POP
// for i = 1 to hardcoreCounter do
6498: LD_ADDR_VAR 0 5
6502: PUSH
6503: DOUBLE
6504: LD_INT 1
6506: DEC
6507: ST_TO_ADDR
6508: LD_EXP 38
6512: PUSH
6513: FOR_TO
6514: IFFALSE 6619
// begin tmp := 0 ;
6516: LD_ADDR_VAR 0 2
6520: PUSH
6521: LD_STRING 0
6523: ST_TO_ADDR
// if result [ 2 ] then
6524: LD_VAR 0 1
6528: PUSH
6529: LD_INT 2
6531: ARRAY
6532: IFFALSE 6601
// if result [ 2 ] [ 1 ] = 100 + i then
6534: LD_VAR 0 1
6538: PUSH
6539: LD_INT 2
6541: ARRAY
6542: PUSH
6543: LD_INT 1
6545: ARRAY
6546: PUSH
6547: LD_INT 100
6549: PUSH
6550: LD_VAR 0 5
6554: PLUS
6555: EQUAL
6556: IFFALSE 6601
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: LD_VAR 0 1
6567: PPUSH
6568: LD_INT 2
6570: PPUSH
6571: LD_VAR 0 1
6575: PUSH
6576: LD_INT 2
6578: ARRAY
6579: PPUSH
6580: LD_INT 1
6582: PPUSH
6583: CALL_OW 3
6587: PPUSH
6588: CALL_OW 1
6592: ST_TO_ADDR
// tmp := 1 ;
6593: LD_ADDR_VAR 0 2
6597: PUSH
6598: LD_STRING 1
6600: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6601: LD_ADDR_VAR 0 4
6605: PUSH
6606: LD_VAR 0 4
6610: PUSH
6611: LD_VAR 0 2
6615: STR
6616: ST_TO_ADDR
// end ;
6617: GO 6513
6619: POP
6620: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6621: LD_STRING getStreamItemsFromMission("
6623: PUSH
6624: LD_VAR 0 3
6628: STR
6629: PUSH
6630: LD_STRING ","
6632: STR
6633: PUSH
6634: LD_VAR 0 4
6638: STR
6639: PUSH
6640: LD_STRING ")
6642: STR
6643: PPUSH
6644: CALL_OW 559
// end else
6648: GO 6657
// ToLua ( getStreamItemsFromMission("","") ) ;
6650: LD_STRING getStreamItemsFromMission("","")
6652: PPUSH
6653: CALL_OW 559
// end ;
6657: LD_VAR 0 1
6661: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 100
6669: EQUAL
6670: IFFALSE 7619
// begin if not StreamModeActive then
6672: LD_EXP 36
6676: NOT
6677: IFFALSE 6687
// StreamModeActive := true ;
6679: LD_ADDR_EXP 36
6683: PUSH
6684: LD_INT 1
6686: ST_TO_ADDR
// if p3 = 0 then
6687: LD_VAR 0 3
6691: PUSH
6692: LD_INT 0
6694: EQUAL
6695: IFFALSE 6701
// InitStreamMode ;
6697: CALL 2947 0 0
// if p3 = 1 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_INT 1
6708: EQUAL
6709: IFFALSE 6719
// sRocket := true ;
6711: LD_ADDR_EXP 41
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// if p3 = 2 then
6719: LD_VAR 0 3
6723: PUSH
6724: LD_INT 2
6726: EQUAL
6727: IFFALSE 6737
// sSpeed := true ;
6729: LD_ADDR_EXP 40
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// if p3 = 3 then
6737: LD_VAR 0 3
6741: PUSH
6742: LD_INT 3
6744: EQUAL
6745: IFFALSE 6755
// sEngine := true ;
6747: LD_ADDR_EXP 42
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if p3 = 4 then
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 4
6762: EQUAL
6763: IFFALSE 6773
// sSpec := true ;
6765: LD_ADDR_EXP 39
6769: PUSH
6770: LD_INT 1
6772: ST_TO_ADDR
// if p3 = 5 then
6773: LD_VAR 0 3
6777: PUSH
6778: LD_INT 5
6780: EQUAL
6781: IFFALSE 6791
// sLevel := true ;
6783: LD_ADDR_EXP 43
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if p3 = 6 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 6
6798: EQUAL
6799: IFFALSE 6809
// sArmoury := true ;
6801: LD_ADDR_EXP 44
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// if p3 = 7 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 7
6816: EQUAL
6817: IFFALSE 6827
// sRadar := true ;
6819: LD_ADDR_EXP 45
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// if p3 = 8 then
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 8
6834: EQUAL
6835: IFFALSE 6845
// sBunker := true ;
6837: LD_ADDR_EXP 46
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 9 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 9
6852: EQUAL
6853: IFFALSE 6863
// sHack := true ;
6855: LD_ADDR_EXP 47
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// if p3 = 10 then
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 10
6870: EQUAL
6871: IFFALSE 6881
// sFire := true ;
6873: LD_ADDR_EXP 48
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// if p3 = 11 then
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 11
6888: EQUAL
6889: IFFALSE 6899
// sRefresh := true ;
6891: LD_ADDR_EXP 49
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// if p3 = 12 then
6899: LD_VAR 0 3
6903: PUSH
6904: LD_INT 12
6906: EQUAL
6907: IFFALSE 6917
// sExp := true ;
6909: LD_ADDR_EXP 50
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// if p3 = 13 then
6917: LD_VAR 0 3
6921: PUSH
6922: LD_INT 13
6924: EQUAL
6925: IFFALSE 6935
// sDepot := true ;
6927: LD_ADDR_EXP 51
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// if p3 = 14 then
6935: LD_VAR 0 3
6939: PUSH
6940: LD_INT 14
6942: EQUAL
6943: IFFALSE 6953
// sFlag := true ;
6945: LD_ADDR_EXP 52
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// if p3 = 15 then
6953: LD_VAR 0 3
6957: PUSH
6958: LD_INT 15
6960: EQUAL
6961: IFFALSE 6971
// sKamikadze := true ;
6963: LD_ADDR_EXP 60
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// if p3 = 16 then
6971: LD_VAR 0 3
6975: PUSH
6976: LD_INT 16
6978: EQUAL
6979: IFFALSE 6989
// sTroll := true ;
6981: LD_ADDR_EXP 61
6985: PUSH
6986: LD_INT 1
6988: ST_TO_ADDR
// if p3 = 17 then
6989: LD_VAR 0 3
6993: PUSH
6994: LD_INT 17
6996: EQUAL
6997: IFFALSE 7007
// sSlow := true ;
6999: LD_ADDR_EXP 62
7003: PUSH
7004: LD_INT 1
7006: ST_TO_ADDR
// if p3 = 18 then
7007: LD_VAR 0 3
7011: PUSH
7012: LD_INT 18
7014: EQUAL
7015: IFFALSE 7025
// sLack := true ;
7017: LD_ADDR_EXP 63
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// if p3 = 19 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 19
7032: EQUAL
7033: IFFALSE 7043
// sTank := true ;
7035: LD_ADDR_EXP 65
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 20 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 20
7050: EQUAL
7051: IFFALSE 7061
// sRemote := true ;
7053: LD_ADDR_EXP 66
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 21 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 21
7068: EQUAL
7069: IFFALSE 7079
// sPowell := true ;
7071: LD_ADDR_EXP 67
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// if p3 = 22 then
7079: LD_VAR 0 3
7083: PUSH
7084: LD_INT 22
7086: EQUAL
7087: IFFALSE 7097
// sTeleport := true ;
7089: LD_ADDR_EXP 70
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// if p3 = 23 then
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 23
7104: EQUAL
7105: IFFALSE 7115
// sOilTower := true ;
7107: LD_ADDR_EXP 72
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// if p3 = 24 then
7115: LD_VAR 0 3
7119: PUSH
7120: LD_INT 24
7122: EQUAL
7123: IFFALSE 7133
// sShovel := true ;
7125: LD_ADDR_EXP 73
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// if p3 = 25 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 25
7140: EQUAL
7141: IFFALSE 7151
// sSheik := true ;
7143: LD_ADDR_EXP 74
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// if p3 = 26 then
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 26
7158: EQUAL
7159: IFFALSE 7169
// sEarthquake := true ;
7161: LD_ADDR_EXP 76
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// if p3 = 27 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 27
7176: EQUAL
7177: IFFALSE 7187
// sAI := true ;
7179: LD_ADDR_EXP 77
7183: PUSH
7184: LD_INT 1
7186: ST_TO_ADDR
// if p3 = 28 then
7187: LD_VAR 0 3
7191: PUSH
7192: LD_INT 28
7194: EQUAL
7195: IFFALSE 7205
// sCargo := true ;
7197: LD_ADDR_EXP 80
7201: PUSH
7202: LD_INT 1
7204: ST_TO_ADDR
// if p3 = 29 then
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 29
7212: EQUAL
7213: IFFALSE 7223
// sDLaser := true ;
7215: LD_ADDR_EXP 81
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// if p3 = 30 then
7223: LD_VAR 0 3
7227: PUSH
7228: LD_INT 30
7230: EQUAL
7231: IFFALSE 7241
// sExchange := true ;
7233: LD_ADDR_EXP 82
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// if p3 = 31 then
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 31
7248: EQUAL
7249: IFFALSE 7259
// sFac := true ;
7251: LD_ADDR_EXP 83
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// if p3 = 32 then
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 32
7266: EQUAL
7267: IFFALSE 7277
// sPower := true ;
7269: LD_ADDR_EXP 84
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// if p3 = 33 then
7277: LD_VAR 0 3
7281: PUSH
7282: LD_INT 33
7284: EQUAL
7285: IFFALSE 7295
// sRandom := true ;
7287: LD_ADDR_EXP 85
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// if p3 = 34 then
7295: LD_VAR 0 3
7299: PUSH
7300: LD_INT 34
7302: EQUAL
7303: IFFALSE 7313
// sShield := true ;
7305: LD_ADDR_EXP 86
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// if p3 = 35 then
7313: LD_VAR 0 3
7317: PUSH
7318: LD_INT 35
7320: EQUAL
7321: IFFALSE 7331
// sTime := true ;
7323: LD_ADDR_EXP 87
7327: PUSH
7328: LD_INT 1
7330: ST_TO_ADDR
// if p3 = 36 then
7331: LD_VAR 0 3
7335: PUSH
7336: LD_INT 36
7338: EQUAL
7339: IFFALSE 7349
// sTools := true ;
7341: LD_ADDR_EXP 88
7345: PUSH
7346: LD_INT 1
7348: ST_TO_ADDR
// if p3 = 101 then
7349: LD_VAR 0 3
7353: PUSH
7354: LD_INT 101
7356: EQUAL
7357: IFFALSE 7367
// sSold := true ;
7359: LD_ADDR_EXP 53
7363: PUSH
7364: LD_INT 1
7366: ST_TO_ADDR
// if p3 = 102 then
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 102
7374: EQUAL
7375: IFFALSE 7385
// sDiff := true ;
7377: LD_ADDR_EXP 54
7381: PUSH
7382: LD_INT 1
7384: ST_TO_ADDR
// if p3 = 103 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 103
7392: EQUAL
7393: IFFALSE 7403
// sFog := true ;
7395: LD_ADDR_EXP 57
7399: PUSH
7400: LD_INT 1
7402: ST_TO_ADDR
// if p3 = 104 then
7403: LD_VAR 0 3
7407: PUSH
7408: LD_INT 104
7410: EQUAL
7411: IFFALSE 7421
// sReset := true ;
7413: LD_ADDR_EXP 58
7417: PUSH
7418: LD_INT 1
7420: ST_TO_ADDR
// if p3 = 105 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 105
7428: EQUAL
7429: IFFALSE 7439
// sSun := true ;
7431: LD_ADDR_EXP 59
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 106 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 106
7446: EQUAL
7447: IFFALSE 7457
// sTiger := true ;
7449: LD_ADDR_EXP 55
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 107 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 107
7464: EQUAL
7465: IFFALSE 7475
// sBomb := true ;
7467: LD_ADDR_EXP 56
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 108 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 108
7482: EQUAL
7483: IFFALSE 7493
// sWound := true ;
7485: LD_ADDR_EXP 64
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 109 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 109
7500: EQUAL
7501: IFFALSE 7511
// sBetray := true ;
7503: LD_ADDR_EXP 68
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 110 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 110
7518: EQUAL
7519: IFFALSE 7529
// sContamin := true ;
7521: LD_ADDR_EXP 69
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 111 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 111
7536: EQUAL
7537: IFFALSE 7547
// sOil := true ;
7539: LD_ADDR_EXP 71
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 112 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 112
7554: EQUAL
7555: IFFALSE 7565
// sStu := true ;
7557: LD_ADDR_EXP 75
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 113 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 113
7572: EQUAL
7573: IFFALSE 7583
// sBazooka := true ;
7575: LD_ADDR_EXP 78
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 114 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 114
7590: EQUAL
7591: IFFALSE 7601
// sMortar := true ;
7593: LD_ADDR_EXP 79
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 115 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 115
7608: EQUAL
7609: IFFALSE 7619
// sRanger := true ;
7611: LD_ADDR_EXP 89
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// end ; end ;
7619: PPOPN 6
7621: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7622: LD_EXP 36
7626: PUSH
7627: LD_EXP 41
7631: AND
7632: IFFALSE 7756
7634: GO 7636
7636: DISABLE
7637: LD_INT 0
7639: PPUSH
7640: PPUSH
// begin enable ;
7641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7642: LD_ADDR_VAR 0 2
7646: PUSH
7647: LD_INT 22
7649: PUSH
7650: LD_OWVAR 2
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 2
7661: PUSH
7662: LD_INT 34
7664: PUSH
7665: LD_INT 7
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 45
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 34
7684: PUSH
7685: LD_INT 28
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 34
7694: PUSH
7695: LD_INT 47
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: ST_TO_ADDR
// if not tmp then
7718: LD_VAR 0 2
7722: NOT
7723: IFFALSE 7727
// exit ;
7725: GO 7756
// for i in tmp do
7727: LD_ADDR_VAR 0 1
7731: PUSH
7732: LD_VAR 0 2
7736: PUSH
7737: FOR_IN
7738: IFFALSE 7754
// begin SetLives ( i , 0 ) ;
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_INT 0
7747: PPUSH
7748: CALL_OW 234
// end ;
7752: GO 7737
7754: POP
7755: POP
// end ;
7756: PPOPN 2
7758: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7759: LD_EXP 36
7763: PUSH
7764: LD_EXP 42
7768: AND
7769: IFFALSE 7853
7771: GO 7773
7773: DISABLE
7774: LD_INT 0
7776: PPUSH
7777: PPUSH
// begin enable ;
7778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7779: LD_ADDR_VAR 0 2
7783: PUSH
7784: LD_INT 22
7786: PUSH
7787: LD_OWVAR 2
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_INT 32
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 69
7814: ST_TO_ADDR
// if not tmp then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 7853
// for i in tmp do
7824: LD_ADDR_VAR 0 1
7828: PUSH
7829: LD_VAR 0 2
7833: PUSH
7834: FOR_IN
7835: IFFALSE 7851
// begin SetLives ( i , 0 ) ;
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 0
7844: PPUSH
7845: CALL_OW 234
// end ;
7849: GO 7834
7851: POP
7852: POP
// end ;
7853: PPOPN 2
7855: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7856: LD_EXP 36
7860: PUSH
7861: LD_EXP 39
7865: AND
7866: IFFALSE 7959
7868: GO 7870
7870: DISABLE
7871: LD_INT 0
7873: PPUSH
// begin enable ;
7874: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7875: LD_ADDR_VAR 0 1
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_OWVAR 2
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 9
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 8
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: PUSH
7940: FOR_IN
7941: IFFALSE 7957
// begin SetClass ( i , 1 ) ;
7943: LD_VAR 0 1
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: CALL_OW 336
// end ;
7955: GO 7940
7957: POP
7958: POP
// end ;
7959: PPOPN 1
7961: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7962: LD_EXP 36
7966: PUSH
7967: LD_EXP 40
7971: AND
7972: PUSH
7973: LD_OWVAR 65
7977: PUSH
7978: LD_INT 7
7980: LESS
7981: AND
7982: IFFALSE 7996
7984: GO 7986
7986: DISABLE
// begin enable ;
7987: ENABLE
// game_speed := 7 ;
7988: LD_ADDR_OWVAR 65
7992: PUSH
7993: LD_INT 7
7995: ST_TO_ADDR
// end ;
7996: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7997: LD_EXP 36
8001: PUSH
8002: LD_EXP 43
8006: AND
8007: IFFALSE 8209
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
8016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8017: LD_ADDR_VAR 0 3
8021: PUSH
8022: LD_INT 81
8024: PUSH
8025: LD_OWVAR 2
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 21
8036: PUSH
8037: LD_INT 1
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PPUSH
8048: CALL_OW 69
8052: ST_TO_ADDR
// if not tmp then
8053: LD_VAR 0 3
8057: NOT
8058: IFFALSE 8062
// exit ;
8060: GO 8209
// if tmp > 5 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 5
8069: GREATER
8070: IFFALSE 8082
// k := 5 else
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_INT 5
8079: ST_TO_ADDR
8080: GO 8092
// k := tmp ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_VAR 0 3
8091: ST_TO_ADDR
// for i := 1 to k do
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: DOUBLE
8098: LD_INT 1
8100: DEC
8101: ST_TO_ADDR
8102: LD_VAR 0 2
8106: PUSH
8107: FOR_TO
8108: IFFALSE 8207
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8110: LD_VAR 0 3
8114: PUSH
8115: LD_VAR 0 1
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 1
8125: PUSH
8126: LD_INT 4
8128: MOD
8129: PUSH
8130: LD_INT 1
8132: PLUS
8133: PPUSH
8134: CALL_OW 259
8138: PUSH
8139: LD_INT 10
8141: LESS
8142: IFFALSE 8205
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8144: LD_VAR 0 3
8148: PUSH
8149: LD_VAR 0 1
8153: ARRAY
8154: PPUSH
8155: LD_VAR 0 1
8159: PUSH
8160: LD_INT 4
8162: MOD
8163: PUSH
8164: LD_INT 1
8166: PLUS
8167: PPUSH
8168: LD_VAR 0 3
8172: PUSH
8173: LD_VAR 0 1
8177: ARRAY
8178: PPUSH
8179: LD_VAR 0 1
8183: PUSH
8184: LD_INT 4
8186: MOD
8187: PUSH
8188: LD_INT 1
8190: PLUS
8191: PPUSH
8192: CALL_OW 259
8196: PUSH
8197: LD_INT 1
8199: PLUS
8200: PPUSH
8201: CALL_OW 237
8205: GO 8107
8207: POP
8208: POP
// end ;
8209: PPOPN 3
8211: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8212: LD_EXP 36
8216: PUSH
8217: LD_EXP 44
8221: AND
8222: IFFALSE 8242
8224: GO 8226
8226: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8227: LD_INT 4
8229: PPUSH
8230: LD_OWVAR 2
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: CALL_OW 324
8242: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8243: LD_EXP 36
8247: PUSH
8248: LD_EXP 73
8252: AND
8253: IFFALSE 8273
8255: GO 8257
8257: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8258: LD_INT 19
8260: PPUSH
8261: LD_OWVAR 2
8265: PPUSH
8266: LD_INT 0
8268: PPUSH
8269: CALL_OW 324
8273: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8274: LD_EXP 36
8278: PUSH
8279: LD_EXP 45
8283: AND
8284: IFFALSE 8386
8286: GO 8288
8288: DISABLE
8289: LD_INT 0
8291: PPUSH
8292: PPUSH
// begin enable ;
8293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8294: LD_ADDR_VAR 0 2
8298: PUSH
8299: LD_INT 22
8301: PUSH
8302: LD_OWVAR 2
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 2
8313: PUSH
8314: LD_INT 34
8316: PUSH
8317: LD_INT 11
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 34
8326: PUSH
8327: LD_INT 30
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// if not tmp then
8348: LD_VAR 0 2
8352: NOT
8353: IFFALSE 8357
// exit ;
8355: GO 8386
// for i in tmp do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: LD_VAR 0 2
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8384
// begin SetLives ( i , 0 ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: LD_INT 0
8377: PPUSH
8378: CALL_OW 234
// end ;
8382: GO 8367
8384: POP
8385: POP
// end ;
8386: PPOPN 2
8388: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8389: LD_EXP 36
8393: PUSH
8394: LD_EXP 46
8398: AND
8399: IFFALSE 8419
8401: GO 8403
8403: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8404: LD_INT 32
8406: PPUSH
8407: LD_OWVAR 2
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 324
8419: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8420: LD_EXP 36
8424: PUSH
8425: LD_EXP 47
8429: AND
8430: IFFALSE 8611
8432: GO 8434
8434: DISABLE
8435: LD_INT 0
8437: PPUSH
8438: PPUSH
8439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8440: LD_ADDR_VAR 0 2
8444: PUSH
8445: LD_INT 22
8447: PUSH
8448: LD_OWVAR 2
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 33
8459: PUSH
8460: LD_INT 3
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 69
8475: ST_TO_ADDR
// if not tmp then
8476: LD_VAR 0 2
8480: NOT
8481: IFFALSE 8485
// exit ;
8483: GO 8611
// side := 0 ;
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: LD_INT 0
8492: ST_TO_ADDR
// for i := 1 to 8 do
8493: LD_ADDR_VAR 0 1
8497: PUSH
8498: DOUBLE
8499: LD_INT 1
8501: DEC
8502: ST_TO_ADDR
8503: LD_INT 8
8505: PUSH
8506: FOR_TO
8507: IFFALSE 8555
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8509: LD_OWVAR 2
8513: PUSH
8514: LD_VAR 0 1
8518: NONEQUAL
8519: PUSH
8520: LD_OWVAR 2
8524: PPUSH
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 81
8534: PUSH
8535: LD_INT 2
8537: EQUAL
8538: AND
8539: IFFALSE 8553
// begin side := i ;
8541: LD_ADDR_VAR 0 3
8545: PUSH
8546: LD_VAR 0 1
8550: ST_TO_ADDR
// break ;
8551: GO 8555
// end ;
8553: GO 8506
8555: POP
8556: POP
// if not side then
8557: LD_VAR 0 3
8561: NOT
8562: IFFALSE 8566
// exit ;
8564: GO 8611
// for i := 1 to tmp do
8566: LD_ADDR_VAR 0 1
8570: PUSH
8571: DOUBLE
8572: LD_INT 1
8574: DEC
8575: ST_TO_ADDR
8576: LD_VAR 0 2
8580: PUSH
8581: FOR_TO
8582: IFFALSE 8609
// if Prob ( 30 ) then
8584: LD_INT 30
8586: PPUSH
8587: CALL_OW 13
8591: IFFALSE 8607
// SetSide ( i , side ) ;
8593: LD_VAR 0 1
8597: PPUSH
8598: LD_VAR 0 3
8602: PPUSH
8603: CALL_OW 235
8607: GO 8581
8609: POP
8610: POP
// end ;
8611: PPOPN 3
8613: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8614: LD_EXP 36
8618: PUSH
8619: LD_EXP 49
8623: AND
8624: IFFALSE 8743
8626: GO 8628
8628: DISABLE
8629: LD_INT 0
8631: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8632: LD_ADDR_VAR 0 1
8636: PUSH
8637: LD_INT 22
8639: PUSH
8640: LD_OWVAR 2
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 3
8661: PUSH
8662: LD_INT 23
8664: PUSH
8665: LD_INT 0
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: PPUSH
8681: CALL_OW 69
8685: PUSH
8686: FOR_IN
8687: IFFALSE 8741
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8689: LD_VAR 0 1
8693: PPUSH
8694: CALL_OW 257
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: LD_INT 4
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: IN
8717: IFFALSE 8739
// SetClass ( un , rand ( 1 , 4 ) ) ;
8719: LD_VAR 0 1
8723: PPUSH
8724: LD_INT 1
8726: PPUSH
8727: LD_INT 4
8729: PPUSH
8730: CALL_OW 12
8734: PPUSH
8735: CALL_OW 336
8739: GO 8686
8741: POP
8742: POP
// end ;
8743: PPOPN 1
8745: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8746: LD_EXP 36
8750: PUSH
8751: LD_EXP 48
8755: AND
8756: IFFALSE 8835
8758: GO 8760
8760: DISABLE
8761: LD_INT 0
8763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 22
8771: PUSH
8772: LD_OWVAR 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 21
8783: PUSH
8784: LD_INT 3
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 69
8799: ST_TO_ADDR
// if not tmp then
8800: LD_VAR 0 1
8804: NOT
8805: IFFALSE 8809
// exit ;
8807: GO 8835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8809: LD_VAR 0 1
8813: PUSH
8814: LD_INT 1
8816: PPUSH
8817: LD_VAR 0 1
8821: PPUSH
8822: CALL_OW 12
8826: ARRAY
8827: PPUSH
8828: LD_INT 100
8830: PPUSH
8831: CALL_OW 234
// end ;
8835: PPOPN 1
8837: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8838: LD_EXP 36
8842: PUSH
8843: LD_EXP 50
8847: AND
8848: IFFALSE 8946
8850: GO 8852
8852: DISABLE
8853: LD_INT 0
8855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8856: LD_ADDR_VAR 0 1
8860: PUSH
8861: LD_INT 22
8863: PUSH
8864: LD_OWVAR 2
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: LD_INT 21
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 69
8891: ST_TO_ADDR
// if not tmp then
8892: LD_VAR 0 1
8896: NOT
8897: IFFALSE 8901
// exit ;
8899: GO 8946
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 1
8908: PPUSH
8909: LD_VAR 0 1
8913: PPUSH
8914: CALL_OW 12
8918: ARRAY
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: LD_INT 4
8925: PPUSH
8926: CALL_OW 12
8930: PPUSH
8931: LD_INT 3000
8933: PPUSH
8934: LD_INT 9000
8936: PPUSH
8937: CALL_OW 12
8941: PPUSH
8942: CALL_OW 492
// end ;
8946: PPOPN 1
8948: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8949: LD_EXP 36
8953: PUSH
8954: LD_EXP 51
8958: AND
8959: IFFALSE 8979
8961: GO 8963
8963: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8964: LD_INT 1
8966: PPUSH
8967: LD_OWVAR 2
8971: PPUSH
8972: LD_INT 0
8974: PPUSH
8975: CALL_OW 324
8979: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8980: LD_EXP 36
8984: PUSH
8985: LD_EXP 52
8989: AND
8990: IFFALSE 9073
8992: GO 8994
8994: DISABLE
8995: LD_INT 0
8997: PPUSH
8998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8999: LD_ADDR_VAR 0 2
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_OWVAR 2
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 21
9018: PUSH
9019: LD_INT 3
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: ST_TO_ADDR
// if not tmp then
9035: LD_VAR 0 2
9039: NOT
9040: IFFALSE 9044
// exit ;
9042: GO 9073
// for i in tmp do
9044: LD_ADDR_VAR 0 1
9048: PUSH
9049: LD_VAR 0 2
9053: PUSH
9054: FOR_IN
9055: IFFALSE 9071
// SetBLevel ( i , 10 ) ;
9057: LD_VAR 0 1
9061: PPUSH
9062: LD_INT 10
9064: PPUSH
9065: CALL_OW 241
9069: GO 9054
9071: POP
9072: POP
// end ;
9073: PPOPN 2
9075: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9076: LD_EXP 36
9080: PUSH
9081: LD_EXP 53
9085: AND
9086: IFFALSE 9197
9088: GO 9090
9090: DISABLE
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
9095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_OWVAR 2
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 25
9115: PUSH
9116: LD_INT 1
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 69
9131: ST_TO_ADDR
// if not tmp then
9132: LD_VAR 0 3
9136: NOT
9137: IFFALSE 9141
// exit ;
9139: GO 9197
// un := tmp [ rand ( 1 , tmp ) ] ;
9141: LD_ADDR_VAR 0 2
9145: PUSH
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_VAR 0 3
9158: PPUSH
9159: CALL_OW 12
9163: ARRAY
9164: ST_TO_ADDR
// if Crawls ( un ) then
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 318
9174: IFFALSE 9185
// ComWalk ( un ) ;
9176: LD_VAR 0 2
9180: PPUSH
9181: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_INT 5
9192: PPUSH
9193: CALL_OW 336
// end ;
9197: PPOPN 3
9199: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
9200: LD_EXP 36
9204: PUSH
9205: LD_EXP 54
9209: AND
9210: PUSH
9211: LD_OWVAR 67
9215: PUSH
9216: LD_INT 3
9218: LESS
9219: AND
9220: IFFALSE 9239
9222: GO 9224
9224: DISABLE
// Difficulty := Difficulty + 1 ;
9225: LD_ADDR_OWVAR 67
9229: PUSH
9230: LD_OWVAR 67
9234: PUSH
9235: LD_INT 1
9237: PLUS
9238: ST_TO_ADDR
9239: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9240: LD_EXP 36
9244: PUSH
9245: LD_EXP 55
9249: AND
9250: IFFALSE 9353
9252: GO 9254
9254: DISABLE
9255: LD_INT 0
9257: PPUSH
// begin for i := 1 to 5 do
9258: LD_ADDR_VAR 0 1
9262: PUSH
9263: DOUBLE
9264: LD_INT 1
9266: DEC
9267: ST_TO_ADDR
9268: LD_INT 5
9270: PUSH
9271: FOR_TO
9272: IFFALSE 9351
// begin uc_nation := nation_nature ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// uc_side := 0 ;
9282: LD_ADDR_OWVAR 20
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9290: LD_ADDR_OWVAR 29
9294: PUSH
9295: LD_INT 12
9297: PUSH
9298: LD_INT 12
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: ST_TO_ADDR
// hc_agressivity := 20 ;
9305: LD_ADDR_OWVAR 35
9309: PUSH
9310: LD_INT 20
9312: ST_TO_ADDR
// hc_class := class_tiger ;
9313: LD_ADDR_OWVAR 28
9317: PUSH
9318: LD_INT 14
9320: ST_TO_ADDR
// hc_gallery :=  ;
9321: LD_ADDR_OWVAR 33
9325: PUSH
9326: LD_STRING 
9328: ST_TO_ADDR
// hc_name :=  ;
9329: LD_ADDR_OWVAR 26
9333: PUSH
9334: LD_STRING 
9336: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9337: CALL_OW 44
9341: PPUSH
9342: LD_INT 0
9344: PPUSH
9345: CALL_OW 51
// end ;
9349: GO 9271
9351: POP
9352: POP
// end ;
9353: PPOPN 1
9355: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9356: LD_EXP 36
9360: PUSH
9361: LD_EXP 56
9365: AND
9366: IFFALSE 9375
9368: GO 9370
9370: DISABLE
// StreamSibBomb ;
9371: CALL 9376 0 0
9375: END
// export function StreamSibBomb ; var i , x , y ; begin
9376: LD_INT 0
9378: PPUSH
9379: PPUSH
9380: PPUSH
9381: PPUSH
// result := false ;
9382: LD_ADDR_VAR 0 1
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// for i := 1 to 16 do
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: DOUBLE
9396: LD_INT 1
9398: DEC
9399: ST_TO_ADDR
9400: LD_INT 16
9402: PUSH
9403: FOR_TO
9404: IFFALSE 9603
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9406: LD_ADDR_VAR 0 3
9410: PUSH
9411: LD_INT 10
9413: PUSH
9414: LD_INT 20
9416: PUSH
9417: LD_INT 30
9419: PUSH
9420: LD_INT 40
9422: PUSH
9423: LD_INT 50
9425: PUSH
9426: LD_INT 60
9428: PUSH
9429: LD_INT 70
9431: PUSH
9432: LD_INT 80
9434: PUSH
9435: LD_INT 90
9437: PUSH
9438: LD_INT 100
9440: PUSH
9441: LD_INT 110
9443: PUSH
9444: LD_INT 120
9446: PUSH
9447: LD_INT 130
9449: PUSH
9450: LD_INT 140
9452: PUSH
9453: LD_INT 150
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 1
9475: PPUSH
9476: LD_INT 15
9478: PPUSH
9479: CALL_OW 12
9483: ARRAY
9484: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9485: LD_ADDR_VAR 0 4
9489: PUSH
9490: LD_INT 10
9492: PUSH
9493: LD_INT 20
9495: PUSH
9496: LD_INT 30
9498: PUSH
9499: LD_INT 40
9501: PUSH
9502: LD_INT 50
9504: PUSH
9505: LD_INT 60
9507: PUSH
9508: LD_INT 70
9510: PUSH
9511: LD_INT 80
9513: PUSH
9514: LD_INT 90
9516: PUSH
9517: LD_INT 100
9519: PUSH
9520: LD_INT 110
9522: PUSH
9523: LD_INT 120
9525: PUSH
9526: LD_INT 130
9528: PUSH
9529: LD_INT 140
9531: PUSH
9532: LD_INT 150
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 1
9554: PPUSH
9555: LD_INT 15
9557: PPUSH
9558: CALL_OW 12
9562: ARRAY
9563: ST_TO_ADDR
// if ValidHex ( x , y ) then
9564: LD_VAR 0 3
9568: PPUSH
9569: LD_VAR 0 4
9573: PPUSH
9574: CALL_OW 488
9578: IFFALSE 9601
// begin result := [ x , y ] ;
9580: LD_ADDR_VAR 0 1
9584: PUSH
9585: LD_VAR 0 3
9589: PUSH
9590: LD_VAR 0 4
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: ST_TO_ADDR
// break ;
9599: GO 9603
// end ; end ;
9601: GO 9403
9603: POP
9604: POP
// if result then
9605: LD_VAR 0 1
9609: IFFALSE 9669
// begin ToLua ( playSibBomb() ) ;
9611: LD_STRING playSibBomb()
9613: PPUSH
9614: CALL_OW 559
// wait ( 0 0$14 ) ;
9618: LD_INT 490
9620: PPUSH
9621: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9625: LD_VAR 0 1
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: LD_VAR 0 1
9638: PUSH
9639: LD_INT 2
9641: ARRAY
9642: PPUSH
9643: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: LD_VAR 0 1
9660: PUSH
9661: LD_INT 2
9663: ARRAY
9664: PPUSH
9665: CALL_OW 429
// end ; end ;
9669: LD_VAR 0 1
9673: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9674: LD_EXP 36
9678: PUSH
9679: LD_EXP 58
9683: AND
9684: IFFALSE 9696
9686: GO 9688
9688: DISABLE
// YouLost (  ) ;
9689: LD_STRING 
9691: PPUSH
9692: CALL_OW 104
9696: END
// every 0 0$1 trigger StreamModeActive and sFog do
9697: LD_EXP 36
9701: PUSH
9702: LD_EXP 57
9706: AND
9707: IFFALSE 9721
9709: GO 9711
9711: DISABLE
// FogOff ( your_side ) ;
9712: LD_OWVAR 2
9716: PPUSH
9717: CALL_OW 344
9721: END
// every 0 0$1 trigger StreamModeActive and sSun do
9722: LD_EXP 36
9726: PUSH
9727: LD_EXP 59
9731: AND
9732: IFFALSE 9760
9734: GO 9736
9736: DISABLE
// begin solar_recharge_percent := 0 ;
9737: LD_ADDR_OWVAR 79
9741: PUSH
9742: LD_INT 0
9744: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9745: LD_INT 10500
9747: PPUSH
9748: CALL_OW 67
// solar_recharge_percent := 100 ;
9752: LD_ADDR_OWVAR 79
9756: PUSH
9757: LD_INT 100
9759: ST_TO_ADDR
// end ;
9760: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9761: LD_EXP 36
9765: PUSH
9766: LD_EXP 60
9770: AND
9771: IFFALSE 10010
9773: GO 9775
9775: DISABLE
9776: LD_INT 0
9778: PPUSH
9779: PPUSH
9780: PPUSH
// begin tmp := [ ] ;
9781: LD_ADDR_VAR 0 3
9785: PUSH
9786: EMPTY
9787: ST_TO_ADDR
// for i := 1 to 6 do
9788: LD_ADDR_VAR 0 1
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_INT 6
9800: PUSH
9801: FOR_TO
9802: IFFALSE 9907
// begin uc_nation := nation_nature ;
9804: LD_ADDR_OWVAR 21
9808: PUSH
9809: LD_INT 0
9811: ST_TO_ADDR
// uc_side := 0 ;
9812: LD_ADDR_OWVAR 20
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9820: LD_ADDR_OWVAR 29
9824: PUSH
9825: LD_INT 12
9827: PUSH
9828: LD_INT 12
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: ST_TO_ADDR
// hc_agressivity := 20 ;
9835: LD_ADDR_OWVAR 35
9839: PUSH
9840: LD_INT 20
9842: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9843: LD_ADDR_OWVAR 28
9847: PUSH
9848: LD_INT 17
9850: ST_TO_ADDR
// hc_gallery :=  ;
9851: LD_ADDR_OWVAR 33
9855: PUSH
9856: LD_STRING 
9858: ST_TO_ADDR
// hc_name :=  ;
9859: LD_ADDR_OWVAR 26
9863: PUSH
9864: LD_STRING 
9866: ST_TO_ADDR
// un := CreateHuman ;
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: CALL_OW 44
9876: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9877: LD_VAR 0 2
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 51
// tmp := tmp ^ un ;
9889: LD_ADDR_VAR 0 3
9893: PUSH
9894: LD_VAR 0 3
9898: PUSH
9899: LD_VAR 0 2
9903: ADD
9904: ST_TO_ADDR
// end ;
9905: GO 9801
9907: POP
9908: POP
// repeat wait ( 0 0$1 ) ;
9909: LD_INT 35
9911: PPUSH
9912: CALL_OW 67
// for un in tmp do
9916: LD_ADDR_VAR 0 2
9920: PUSH
9921: LD_VAR 0 3
9925: PUSH
9926: FOR_IN
9927: IFFALSE 10001
// begin if IsDead ( un ) then
9929: LD_VAR 0 2
9933: PPUSH
9934: CALL_OW 301
9938: IFFALSE 9958
// begin tmp := tmp diff un ;
9940: LD_ADDR_VAR 0 3
9944: PUSH
9945: LD_VAR 0 3
9949: PUSH
9950: LD_VAR 0 2
9954: DIFF
9955: ST_TO_ADDR
// continue ;
9956: GO 9926
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9958: LD_VAR 0 2
9962: PPUSH
9963: LD_INT 3
9965: PUSH
9966: LD_INT 22
9968: PUSH
9969: LD_INT 0
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 69
9984: PPUSH
9985: LD_VAR 0 2
9989: PPUSH
9990: CALL_OW 74
9994: PPUSH
9995: CALL_OW 115
// end ;
9999: GO 9926
10001: POP
10002: POP
// until not tmp ;
10003: LD_VAR 0 3
10007: NOT
10008: IFFALSE 9909
// end ;
10010: PPOPN 3
10012: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10013: LD_EXP 36
10017: PUSH
10018: LD_EXP 61
10022: AND
10023: IFFALSE 10077
10025: GO 10027
10027: DISABLE
// begin ToLua ( displayTroll(); ) ;
10028: LD_STRING displayTroll();
10030: PPUSH
10031: CALL_OW 559
// wait ( 3 3$00 ) ;
10035: LD_INT 6300
10037: PPUSH
10038: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10042: LD_STRING hideTroll();
10044: PPUSH
10045: CALL_OW 559
// wait ( 1 1$00 ) ;
10049: LD_INT 2100
10051: PPUSH
10052: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10056: LD_STRING displayTroll();
10058: PPUSH
10059: CALL_OW 559
// wait ( 1 1$00 ) ;
10063: LD_INT 2100
10065: PPUSH
10066: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10070: LD_STRING hideTroll();
10072: PPUSH
10073: CALL_OW 559
// end ;
10077: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10078: LD_EXP 36
10082: PUSH
10083: LD_EXP 62
10087: AND
10088: IFFALSE 10151
10090: GO 10092
10092: DISABLE
10093: LD_INT 0
10095: PPUSH
// begin p := 0 ;
10096: LD_ADDR_VAR 0 1
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// repeat game_speed := 1 ;
10104: LD_ADDR_OWVAR 65
10108: PUSH
10109: LD_INT 1
10111: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// p := p + 1 ;
10119: LD_ADDR_VAR 0 1
10123: PUSH
10124: LD_VAR 0 1
10128: PUSH
10129: LD_INT 1
10131: PLUS
10132: ST_TO_ADDR
// until p >= 60 ;
10133: LD_VAR 0 1
10137: PUSH
10138: LD_INT 60
10140: GREATEREQUAL
10141: IFFALSE 10104
// game_speed := 4 ;
10143: LD_ADDR_OWVAR 65
10147: PUSH
10148: LD_INT 4
10150: ST_TO_ADDR
// end ;
10151: PPOPN 1
10153: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10154: LD_EXP 36
10158: PUSH
10159: LD_EXP 63
10163: AND
10164: IFFALSE 10310
10166: GO 10168
10168: DISABLE
10169: LD_INT 0
10171: PPUSH
10172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10173: LD_ADDR_VAR 0 1
10177: PUSH
10178: LD_INT 22
10180: PUSH
10181: LD_OWVAR 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: LD_INT 30
10195: PUSH
10196: LD_INT 0
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 30
10205: PUSH
10206: LD_INT 1
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: LIST
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL_OW 69
10226: ST_TO_ADDR
// if not depot then
10227: LD_VAR 0 1
10231: NOT
10232: IFFALSE 10236
// exit ;
10234: GO 10310
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: LD_VAR 0 1
10245: PUSH
10246: LD_INT 1
10248: PPUSH
10249: LD_VAR 0 1
10253: PPUSH
10254: CALL_OW 12
10258: ARRAY
10259: PPUSH
10260: CALL_OW 274
10264: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_INT 0
10275: PPUSH
10276: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10280: LD_VAR 0 2
10284: PPUSH
10285: LD_INT 2
10287: PPUSH
10288: LD_INT 0
10290: PPUSH
10291: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10295: LD_VAR 0 2
10299: PPUSH
10300: LD_INT 3
10302: PPUSH
10303: LD_INT 0
10305: PPUSH
10306: CALL_OW 277
// end ;
10310: PPOPN 2
10312: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10313: LD_EXP 36
10317: PUSH
10318: LD_EXP 64
10322: AND
10323: IFFALSE 10420
10325: GO 10327
10327: DISABLE
10328: LD_INT 0
10330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10331: LD_ADDR_VAR 0 1
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 3
10360: PUSH
10361: LD_INT 23
10363: PUSH
10364: LD_INT 0
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 69
10384: ST_TO_ADDR
// if not tmp then
10385: LD_VAR 0 1
10389: NOT
10390: IFFALSE 10394
// exit ;
10392: GO 10420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10394: LD_VAR 0 1
10398: PUSH
10399: LD_INT 1
10401: PPUSH
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: PPUSH
10413: LD_INT 200
10415: PPUSH
10416: CALL_OW 234
// end ;
10420: PPOPN 1
10422: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10423: LD_EXP 36
10427: PUSH
10428: LD_EXP 65
10432: AND
10433: IFFALSE 10512
10435: GO 10437
10437: DISABLE
10438: LD_INT 0
10440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_INT 22
10448: PUSH
10449: LD_OWVAR 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 21
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 69
10476: ST_TO_ADDR
// if not tmp then
10477: LD_VAR 0 1
10481: NOT
10482: IFFALSE 10486
// exit ;
10484: GO 10512
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10486: LD_VAR 0 1
10490: PUSH
10491: LD_INT 1
10493: PPUSH
10494: LD_VAR 0 1
10498: PPUSH
10499: CALL_OW 12
10503: ARRAY
10504: PPUSH
10505: LD_INT 60
10507: PPUSH
10508: CALL_OW 234
// end ;
10512: PPOPN 1
10514: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10515: LD_EXP 36
10519: PUSH
10520: LD_EXP 66
10524: AND
10525: IFFALSE 10624
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
// begin enable ;
10534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10535: LD_ADDR_VAR 0 1
10539: PUSH
10540: LD_INT 22
10542: PUSH
10543: LD_OWVAR 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 61
10554: PUSH
10555: EMPTY
10556: LIST
10557: PUSH
10558: LD_INT 33
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 69
10577: ST_TO_ADDR
// if not tmp then
10578: LD_VAR 0 1
10582: NOT
10583: IFFALSE 10587
// exit ;
10585: GO 10624
// for i in tmp do
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: LD_VAR 0 1
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10622
// if IsControledBy ( i ) then
10600: LD_VAR 0 2
10604: PPUSH
10605: CALL_OW 312
10609: IFFALSE 10620
// ComUnlink ( i ) ;
10611: LD_VAR 0 2
10615: PPUSH
10616: CALL_OW 136
10620: GO 10597
10622: POP
10623: POP
// end ;
10624: PPOPN 2
10626: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10627: LD_EXP 36
10631: PUSH
10632: LD_EXP 67
10636: AND
10637: IFFALSE 10771
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// begin ToLua ( displayPowell(); ) ;
10646: LD_STRING displayPowell();
10648: PPUSH
10649: CALL_OW 559
// uc_side := 0 ;
10653: LD_ADDR_OWVAR 20
10657: PUSH
10658: LD_INT 0
10660: ST_TO_ADDR
// uc_nation := 2 ;
10661: LD_ADDR_OWVAR 21
10665: PUSH
10666: LD_INT 2
10668: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10669: LD_ADDR_OWVAR 37
10673: PUSH
10674: LD_INT 14
10676: ST_TO_ADDR
// vc_engine := engine_siberite ;
10677: LD_ADDR_OWVAR 39
10681: PUSH
10682: LD_INT 3
10684: ST_TO_ADDR
// vc_control := control_apeman ;
10685: LD_ADDR_OWVAR 38
10689: PUSH
10690: LD_INT 5
10692: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10693: LD_ADDR_OWVAR 40
10697: PUSH
10698: LD_INT 29
10700: ST_TO_ADDR
// un := CreateVehicle ;
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: CALL_OW 45
10710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10711: LD_VAR 0 2
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10723: LD_INT 35
10725: PPUSH
10726: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_OWVAR 3
10739: PUSH
10740: LD_VAR 0 2
10744: DIFF
10745: PPUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 74
10755: PPUSH
10756: CALL_OW 115
// until IsOk ( un ) ;
10760: LD_VAR 0 2
10764: PPUSH
10765: CALL_OW 302
10769: IFFALSE 10723
// end ;
10771: PPOPN 2
10773: END
// every 0 0$1 trigger StreamModeActive and sStu do
10774: LD_EXP 36
10778: PUSH
10779: LD_EXP 75
10783: AND
10784: IFFALSE 10796
10786: GO 10788
10788: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10789: LD_STRING displayStucuk();
10791: PPUSH
10792: CALL_OW 559
// end ;
10796: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10797: LD_EXP 36
10801: PUSH
10802: LD_EXP 68
10806: AND
10807: IFFALSE 10948
10809: GO 10811
10811: DISABLE
10812: LD_INT 0
10814: PPUSH
10815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_INT 22
10823: PUSH
10824: LD_OWVAR 2
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 21
10835: PUSH
10836: LD_INT 1
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PPUSH
10847: CALL_OW 69
10851: ST_TO_ADDR
// if not tmp then
10852: LD_VAR 0 2
10856: NOT
10857: IFFALSE 10861
// exit ;
10859: GO 10948
// un := tmp [ rand ( 1 , tmp ) ] ;
10861: LD_ADDR_VAR 0 1
10865: PUSH
10866: LD_VAR 0 2
10870: PUSH
10871: LD_INT 1
10873: PPUSH
10874: LD_VAR 0 2
10878: PPUSH
10879: CALL_OW 12
10883: ARRAY
10884: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10885: LD_VAR 0 1
10889: PPUSH
10890: LD_INT 0
10892: PPUSH
10893: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10897: LD_VAR 0 1
10901: PPUSH
10902: LD_OWVAR 3
10906: PUSH
10907: LD_VAR 0 1
10911: DIFF
10912: PPUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 74
10922: PPUSH
10923: CALL_OW 115
// wait ( 0 0$20 ) ;
10927: LD_INT 700
10929: PPUSH
10930: CALL_OW 67
// SetSide ( un , your_side ) ;
10934: LD_VAR 0 1
10938: PPUSH
10939: LD_OWVAR 2
10943: PPUSH
10944: CALL_OW 235
// end ;
10948: PPOPN 2
10950: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10951: LD_EXP 36
10955: PUSH
10956: LD_EXP 69
10960: AND
10961: IFFALSE 11067
10963: GO 10965
10965: DISABLE
10966: LD_INT 0
10968: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10969: LD_ADDR_VAR 0 1
10973: PUSH
10974: LD_INT 22
10976: PUSH
10977: LD_OWVAR 2
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 2
10988: PUSH
10989: LD_INT 30
10991: PUSH
10992: LD_INT 0
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 30
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 69
11022: ST_TO_ADDR
// if not depot then
11023: LD_VAR 0 1
11027: NOT
11028: IFFALSE 11032
// exit ;
11030: GO 11067
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11032: LD_VAR 0 1
11036: PUSH
11037: LD_INT 1
11039: ARRAY
11040: PPUSH
11041: CALL_OW 250
11045: PPUSH
11046: LD_VAR 0 1
11050: PUSH
11051: LD_INT 1
11053: ARRAY
11054: PPUSH
11055: CALL_OW 251
11059: PPUSH
11060: LD_INT 70
11062: PPUSH
11063: CALL_OW 495
// end ;
11067: PPOPN 1
11069: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11070: LD_EXP 36
11074: PUSH
11075: LD_EXP 70
11079: AND
11080: IFFALSE 11291
11082: GO 11084
11084: DISABLE
11085: LD_INT 0
11087: PPUSH
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11092: LD_ADDR_VAR 0 5
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_OWVAR 2
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 69
11127: ST_TO_ADDR
// if not tmp then
11128: LD_VAR 0 5
11132: NOT
11133: IFFALSE 11137
// exit ;
11135: GO 11291
// for i in tmp do
11137: LD_ADDR_VAR 0 1
11141: PUSH
11142: LD_VAR 0 5
11146: PUSH
11147: FOR_IN
11148: IFFALSE 11289
// begin d := rand ( 0 , 5 ) ;
11150: LD_ADDR_VAR 0 4
11154: PUSH
11155: LD_INT 0
11157: PPUSH
11158: LD_INT 5
11160: PPUSH
11161: CALL_OW 12
11165: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_VAR 0 1
11175: PPUSH
11176: CALL_OW 250
11180: PPUSH
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_INT 3
11188: PPUSH
11189: LD_INT 12
11191: PPUSH
11192: CALL_OW 12
11196: PPUSH
11197: CALL_OW 272
11201: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11202: LD_ADDR_VAR 0 3
11206: PUSH
11207: LD_VAR 0 1
11211: PPUSH
11212: CALL_OW 251
11216: PPUSH
11217: LD_VAR 0 4
11221: PPUSH
11222: LD_INT 3
11224: PPUSH
11225: LD_INT 12
11227: PPUSH
11228: CALL_OW 12
11232: PPUSH
11233: CALL_OW 273
11237: ST_TO_ADDR
// if ValidHex ( x , y ) then
11238: LD_VAR 0 2
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: CALL_OW 488
11252: IFFALSE 11287
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11254: LD_VAR 0 1
11258: PPUSH
11259: LD_VAR 0 2
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: LD_INT 3
11271: PPUSH
11272: LD_INT 6
11274: PPUSH
11275: CALL_OW 12
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 483
// end ;
11287: GO 11147
11289: POP
11290: POP
// end ;
11291: PPOPN 5
11293: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11294: LD_EXP 36
11298: PUSH
11299: LD_EXP 71
11303: AND
11304: IFFALSE 11398
11306: GO 11308
11308: DISABLE
11309: LD_INT 0
11311: PPUSH
11312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11313: LD_ADDR_VAR 0 2
11317: PUSH
11318: LD_INT 22
11320: PUSH
11321: LD_OWVAR 2
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 32
11332: PUSH
11333: LD_INT 1
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 21
11342: PUSH
11343: LD_INT 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: PPUSH
11355: CALL_OW 69
11359: ST_TO_ADDR
// if not tmp then
11360: LD_VAR 0 2
11364: NOT
11365: IFFALSE 11369
// exit ;
11367: GO 11398
// for i in tmp do
11369: LD_ADDR_VAR 0 1
11373: PUSH
11374: LD_VAR 0 2
11378: PUSH
11379: FOR_IN
11380: IFFALSE 11396
// SetFuel ( i , 0 ) ;
11382: LD_VAR 0 1
11386: PPUSH
11387: LD_INT 0
11389: PPUSH
11390: CALL_OW 240
11394: GO 11379
11396: POP
11397: POP
// end ;
11398: PPOPN 2
11400: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11401: LD_EXP 36
11405: PUSH
11406: LD_EXP 72
11410: AND
11411: IFFALSE 11477
11413: GO 11415
11415: DISABLE
11416: LD_INT 0
11418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11419: LD_ADDR_VAR 0 1
11423: PUSH
11424: LD_INT 22
11426: PUSH
11427: LD_OWVAR 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 30
11438: PUSH
11439: LD_INT 29
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: ST_TO_ADDR
// if not tmp then
11455: LD_VAR 0 1
11459: NOT
11460: IFFALSE 11464
// exit ;
11462: GO 11477
// DestroyUnit ( tmp [ 1 ] ) ;
11464: LD_VAR 0 1
11468: PUSH
11469: LD_INT 1
11471: ARRAY
11472: PPUSH
11473: CALL_OW 65
// end ;
11477: PPOPN 1
11479: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11480: LD_EXP 36
11484: PUSH
11485: LD_EXP 74
11489: AND
11490: IFFALSE 11619
11492: GO 11494
11494: DISABLE
11495: LD_INT 0
11497: PPUSH
// begin uc_side := 0 ;
11498: LD_ADDR_OWVAR 20
11502: PUSH
11503: LD_INT 0
11505: ST_TO_ADDR
// uc_nation := nation_arabian ;
11506: LD_ADDR_OWVAR 21
11510: PUSH
11511: LD_INT 2
11513: ST_TO_ADDR
// hc_gallery :=  ;
11514: LD_ADDR_OWVAR 33
11518: PUSH
11519: LD_STRING 
11521: ST_TO_ADDR
// hc_name :=  ;
11522: LD_ADDR_OWVAR 26
11526: PUSH
11527: LD_STRING 
11529: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11530: LD_INT 1
11532: PPUSH
11533: LD_INT 11
11535: PPUSH
11536: LD_INT 10
11538: PPUSH
11539: CALL_OW 380
// un := CreateHuman ;
11543: LD_ADDR_VAR 0 1
11547: PUSH
11548: CALL_OW 44
11552: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11553: LD_VAR 0 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11565: LD_INT 35
11567: PPUSH
11568: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11572: LD_VAR 0 1
11576: PPUSH
11577: LD_INT 22
11579: PUSH
11580: LD_OWVAR 2
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: PPUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 115
// until IsDead ( un ) ;
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 301
11617: IFFALSE 11565
// end ;
11619: PPOPN 1
11621: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11622: LD_EXP 36
11626: PUSH
11627: LD_EXP 76
11631: AND
11632: IFFALSE 11644
11634: GO 11636
11636: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11637: LD_STRING earthquake(getX(game), 0, 32)
11639: PPUSH
11640: CALL_OW 559
11644: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11645: LD_EXP 36
11649: PUSH
11650: LD_EXP 77
11654: AND
11655: IFFALSE 11746
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
// begin enable ;
11663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11664: LD_ADDR_VAR 0 1
11668: PUSH
11669: LD_INT 22
11671: PUSH
11672: LD_OWVAR 2
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 21
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 33
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ST_TO_ADDR
// if not tmp then
11711: LD_VAR 0 1
11715: NOT
11716: IFFALSE 11720
// exit ;
11718: GO 11746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11720: LD_VAR 0 1
11724: PUSH
11725: LD_INT 1
11727: PPUSH
11728: LD_VAR 0 1
11732: PPUSH
11733: CALL_OW 12
11737: ARRAY
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 234
// end ;
11746: PPOPN 1
11748: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11749: LD_EXP 36
11753: PUSH
11754: LD_EXP 78
11758: AND
11759: IFFALSE 11900
11761: GO 11763
11763: DISABLE
11764: LD_INT 0
11766: PPUSH
11767: PPUSH
11768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11769: LD_ADDR_VAR 0 3
11773: PUSH
11774: LD_INT 22
11776: PUSH
11777: LD_OWVAR 2
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 25
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PPUSH
11800: CALL_OW 69
11804: ST_TO_ADDR
// if not tmp then
11805: LD_VAR 0 3
11809: NOT
11810: IFFALSE 11814
// exit ;
11812: GO 11900
// un := tmp [ rand ( 1 , tmp ) ] ;
11814: LD_ADDR_VAR 0 2
11818: PUSH
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 1
11826: PPUSH
11827: LD_VAR 0 3
11831: PPUSH
11832: CALL_OW 12
11836: ARRAY
11837: ST_TO_ADDR
// if Crawls ( un ) then
11838: LD_VAR 0 2
11842: PPUSH
11843: CALL_OW 318
11847: IFFALSE 11858
// ComWalk ( un ) ;
11849: LD_VAR 0 2
11853: PPUSH
11854: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 9
11865: PPUSH
11866: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11870: LD_INT 28
11872: PPUSH
11873: LD_OWVAR 2
11877: PPUSH
11878: LD_INT 2
11880: PPUSH
11881: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11885: LD_INT 29
11887: PPUSH
11888: LD_OWVAR 2
11892: PPUSH
11893: LD_INT 2
11895: PPUSH
11896: CALL_OW 322
// end ;
11900: PPOPN 3
11902: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11903: LD_EXP 36
11907: PUSH
11908: LD_EXP 79
11912: AND
11913: IFFALSE 12024
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
11921: PPUSH
11922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11923: LD_ADDR_VAR 0 3
11927: PUSH
11928: LD_INT 22
11930: PUSH
11931: LD_OWVAR 2
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 25
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PPUSH
11954: CALL_OW 69
11958: ST_TO_ADDR
// if not tmp then
11959: LD_VAR 0 3
11963: NOT
11964: IFFALSE 11968
// exit ;
11966: GO 12024
// un := tmp [ rand ( 1 , tmp ) ] ;
11968: LD_ADDR_VAR 0 2
11972: PUSH
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 1
11980: PPUSH
11981: LD_VAR 0 3
11985: PPUSH
11986: CALL_OW 12
11990: ARRAY
11991: ST_TO_ADDR
// if Crawls ( un ) then
11992: LD_VAR 0 2
11996: PPUSH
11997: CALL_OW 318
12001: IFFALSE 12012
// ComWalk ( un ) ;
12003: LD_VAR 0 2
12007: PPUSH
12008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12012: LD_VAR 0 2
12016: PPUSH
12017: LD_INT 8
12019: PPUSH
12020: CALL_OW 336
// end ;
12024: PPOPN 3
12026: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12027: LD_EXP 36
12031: PUSH
12032: LD_EXP 80
12036: AND
12037: IFFALSE 12181
12039: GO 12041
12041: DISABLE
12042: LD_INT 0
12044: PPUSH
12045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: LD_INT 22
12053: PUSH
12054: LD_OWVAR 2
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 21
12065: PUSH
12066: LD_INT 2
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 2
12075: PUSH
12076: LD_INT 34
12078: PUSH
12079: LD_INT 12
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 34
12088: PUSH
12089: LD_INT 51
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 34
12098: PUSH
12099: LD_INT 32
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// if not tmp then
12122: LD_VAR 0 2
12126: NOT
12127: IFFALSE 12131
// exit ;
12129: GO 12181
// for i in tmp do
12131: LD_ADDR_VAR 0 1
12135: PUSH
12136: LD_VAR 0 2
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12179
// if GetCargo ( i , mat_artifact ) = 0 then
12144: LD_VAR 0 1
12148: PPUSH
12149: LD_INT 4
12151: PPUSH
12152: CALL_OW 289
12156: PUSH
12157: LD_INT 0
12159: EQUAL
12160: IFFALSE 12177
// SetCargo ( i , mat_siberit , 100 ) ;
12162: LD_VAR 0 1
12166: PPUSH
12167: LD_INT 3
12169: PPUSH
12170: LD_INT 100
12172: PPUSH
12173: CALL_OW 290
12177: GO 12141
12179: POP
12180: POP
// end ;
12181: PPOPN 2
12183: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12184: LD_EXP 36
12188: PUSH
12189: LD_EXP 81
12193: AND
12194: IFFALSE 12347
12196: GO 12198
12198: DISABLE
12199: LD_INT 0
12201: PPUSH
12202: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_OWVAR 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: ST_TO_ADDR
// if not tmp then
12225: LD_VAR 0 2
12229: NOT
12230: IFFALSE 12234
// exit ;
12232: GO 12347
// for i := 1 to 2 do
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: DOUBLE
12240: LD_INT 1
12242: DEC
12243: ST_TO_ADDR
12244: LD_INT 2
12246: PUSH
12247: FOR_TO
12248: IFFALSE 12345
// begin uc_side := your_side ;
12250: LD_ADDR_OWVAR 20
12254: PUSH
12255: LD_OWVAR 2
12259: ST_TO_ADDR
// uc_nation := nation_american ;
12260: LD_ADDR_OWVAR 21
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// vc_chassis := us_morphling ;
12268: LD_ADDR_OWVAR 37
12272: PUSH
12273: LD_INT 5
12275: ST_TO_ADDR
// vc_engine := engine_siberite ;
12276: LD_ADDR_OWVAR 39
12280: PUSH
12281: LD_INT 3
12283: ST_TO_ADDR
// vc_control := control_computer ;
12284: LD_ADDR_OWVAR 38
12288: PUSH
12289: LD_INT 3
12291: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12292: LD_ADDR_OWVAR 40
12296: PUSH
12297: LD_INT 10
12299: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
12300: CALL_OW 45
12304: PPUSH
12305: LD_VAR 0 2
12309: PUSH
12310: LD_INT 1
12312: ARRAY
12313: PPUSH
12314: CALL_OW 250
12318: PPUSH
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 1
12326: ARRAY
12327: PPUSH
12328: CALL_OW 251
12332: PPUSH
12333: LD_INT 12
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: CALL_OW 50
// end ;
12343: GO 12247
12345: POP
12346: POP
// end ;
12347: PPOPN 2
12349: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12350: LD_EXP 36
12354: PUSH
12355: LD_EXP 82
12359: AND
12360: IFFALSE 12582
12362: GO 12364
12364: DISABLE
12365: LD_INT 0
12367: PPUSH
12368: PPUSH
12369: PPUSH
12370: PPUSH
12371: PPUSH
12372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12373: LD_ADDR_VAR 0 6
12377: PUSH
12378: LD_INT 22
12380: PUSH
12381: LD_OWVAR 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 21
12392: PUSH
12393: LD_INT 1
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: LD_INT 23
12405: PUSH
12406: LD_INT 0
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 69
12426: ST_TO_ADDR
// if not tmp then
12427: LD_VAR 0 6
12431: NOT
12432: IFFALSE 12436
// exit ;
12434: GO 12582
// s1 := rand ( 1 , 4 ) ;
12436: LD_ADDR_VAR 0 2
12440: PUSH
12441: LD_INT 1
12443: PPUSH
12444: LD_INT 4
12446: PPUSH
12447: CALL_OW 12
12451: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12452: LD_ADDR_VAR 0 4
12456: PUSH
12457: LD_VAR 0 6
12461: PUSH
12462: LD_INT 1
12464: ARRAY
12465: PPUSH
12466: LD_VAR 0 2
12470: PPUSH
12471: CALL_OW 259
12475: ST_TO_ADDR
// if s1 = 1 then
12476: LD_VAR 0 2
12480: PUSH
12481: LD_INT 1
12483: EQUAL
12484: IFFALSE 12504
// s2 := rand ( 2 , 4 ) else
12486: LD_ADDR_VAR 0 3
12490: PUSH
12491: LD_INT 2
12493: PPUSH
12494: LD_INT 4
12496: PPUSH
12497: CALL_OW 12
12501: ST_TO_ADDR
12502: GO 12512
// s2 := 1 ;
12504: LD_ADDR_VAR 0 3
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12512: LD_ADDR_VAR 0 5
12516: PUSH
12517: LD_VAR 0 6
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_VAR 0 3
12530: PPUSH
12531: CALL_OW 259
12535: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12536: LD_VAR 0 6
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: LD_VAR 0 2
12549: PPUSH
12550: LD_VAR 0 5
12554: PPUSH
12555: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12559: LD_VAR 0 6
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_VAR 0 4
12577: PPUSH
12578: CALL_OW 237
// end ;
12582: PPOPN 6
12584: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12585: LD_EXP 36
12589: PUSH
12590: LD_EXP 83
12594: AND
12595: IFFALSE 12674
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12603: LD_ADDR_VAR 0 1
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_OWVAR 2
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 69
12638: ST_TO_ADDR
// if not tmp then
12639: LD_VAR 0 1
12643: NOT
12644: IFFALSE 12648
// exit ;
12646: GO 12674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12648: LD_VAR 0 1
12652: PUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_VAR 0 1
12660: PPUSH
12661: CALL_OW 12
12665: ARRAY
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 234
// end ;
12674: PPOPN 1
12676: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12677: LD_EXP 36
12681: PUSH
12682: LD_EXP 84
12686: AND
12687: IFFALSE 12799
12689: GO 12691
12691: DISABLE
12692: LD_INT 0
12694: PPUSH
12695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: LD_INT 22
12703: PUSH
12704: LD_OWVAR 2
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: LD_INT 30
12718: PUSH
12719: LD_INT 27
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 30
12728: PUSH
12729: LD_INT 26
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 30
12738: PUSH
12739: LD_INT 28
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 69
12760: ST_TO_ADDR
// if not tmp then
12761: LD_VAR 0 2
12765: NOT
12766: IFFALSE 12770
// exit ;
12768: GO 12799
// for i in tmp do
12770: LD_ADDR_VAR 0 1
12774: PUSH
12775: LD_VAR 0 2
12779: PUSH
12780: FOR_IN
12781: IFFALSE 12797
// SetLives ( i , 1 ) ;
12783: LD_VAR 0 1
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 234
12795: GO 12780
12797: POP
12798: POP
// end ;
12799: PPOPN 2
12801: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12802: LD_EXP 36
12806: PUSH
12807: LD_EXP 85
12811: AND
12812: IFFALSE 13082
12814: GO 12816
12816: DISABLE
12817: LD_INT 0
12819: PPUSH
12820: PPUSH
12821: PPUSH
// begin i := rand ( 1 , 7 ) ;
12822: LD_ADDR_VAR 0 1
12826: PUSH
12827: LD_INT 1
12829: PPUSH
12830: LD_INT 7
12832: PPUSH
12833: CALL_OW 12
12837: ST_TO_ADDR
// case i of 1 :
12838: LD_VAR 0 1
12842: PUSH
12843: LD_INT 1
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 12861
12851: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12852: LD_STRING earthquake(getX(game), 0, 32)
12854: PPUSH
12855: CALL_OW 559
12859: GO 13082
12861: LD_INT 2
12863: DOUBLE
12864: EQUAL
12865: IFTRUE 12869
12867: GO 12879
12869: POP
// ToLua ( displayStucuk(); ) ; 3 :
12870: LD_STRING displayStucuk();
12872: PPUSH
12873: CALL_OW 559
12877: GO 13082
12879: LD_INT 3
12881: DOUBLE
12882: EQUAL
12883: IFTRUE 12887
12885: GO 12991
12887: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12888: LD_ADDR_VAR 0 2
12892: PUSH
12893: LD_INT 22
12895: PUSH
12896: LD_OWVAR 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 25
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 69
12923: ST_TO_ADDR
// if not tmp then
12924: LD_VAR 0 2
12928: NOT
12929: IFFALSE 12933
// exit ;
12931: GO 13082
// un := tmp [ rand ( 1 , tmp ) ] ;
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_VAR 0 2
12942: PUSH
12943: LD_INT 1
12945: PPUSH
12946: LD_VAR 0 2
12950: PPUSH
12951: CALL_OW 12
12955: ARRAY
12956: ST_TO_ADDR
// if Crawls ( un ) then
12957: LD_VAR 0 3
12961: PPUSH
12962: CALL_OW 318
12966: IFFALSE 12977
// ComWalk ( un ) ;
12968: LD_VAR 0 3
12972: PPUSH
12973: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 8
12984: PPUSH
12985: CALL_OW 336
// end ; 4 :
12989: GO 13082
12991: LD_INT 4
12993: DOUBLE
12994: EQUAL
12995: IFTRUE 12999
12997: GO 13060
12999: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13000: LD_ADDR_VAR 0 2
13004: PUSH
13005: LD_INT 22
13007: PUSH
13008: LD_OWVAR 2
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 30
13019: PUSH
13020: LD_INT 29
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// if not tmp then
13036: LD_VAR 0 2
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13082
// DestroyUnit ( tmp [ 1 ] ) ;
13045: LD_VAR 0 2
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PPUSH
13054: CALL_OW 65
// end ; 5 .. 7 :
13058: GO 13082
13060: LD_INT 5
13062: DOUBLE
13063: GREATEREQUAL
13064: IFFALSE 13072
13066: LD_INT 7
13068: DOUBLE
13069: LESSEQUAL
13070: IFTRUE 13074
13072: GO 13081
13074: POP
// StreamSibBomb ; end ;
13075: CALL 9376 0 0
13079: GO 13082
13081: POP
// end ;
13082: PPOPN 3
13084: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13085: LD_EXP 36
13089: PUSH
13090: LD_EXP 86
13094: AND
13095: IFFALSE 13251
13097: GO 13099
13099: DISABLE
13100: LD_INT 0
13102: PPUSH
13103: PPUSH
13104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13105: LD_ADDR_VAR 0 2
13109: PUSH
13110: LD_INT 81
13112: PUSH
13113: LD_OWVAR 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: ST_TO_ADDR
// if not tmp then
13159: LD_VAR 0 2
13163: NOT
13164: IFFALSE 13168
// exit ;
13166: GO 13251
// p := 0 ;
13168: LD_ADDR_VAR 0 3
13172: PUSH
13173: LD_INT 0
13175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13176: LD_INT 35
13178: PPUSH
13179: CALL_OW 67
// p := p + 1 ;
13183: LD_ADDR_VAR 0 3
13187: PUSH
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 1
13195: PLUS
13196: ST_TO_ADDR
// for i in tmp do
13197: LD_ADDR_VAR 0 1
13201: PUSH
13202: LD_VAR 0 2
13206: PUSH
13207: FOR_IN
13208: IFFALSE 13239
// if GetLives ( i ) < 1000 then
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 256
13219: PUSH
13220: LD_INT 1000
13222: LESS
13223: IFFALSE 13237
// SetLives ( i , 1000 ) ;
13225: LD_VAR 0 1
13229: PPUSH
13230: LD_INT 1000
13232: PPUSH
13233: CALL_OW 234
13237: GO 13207
13239: POP
13240: POP
// until p > 20 ;
13241: LD_VAR 0 3
13245: PUSH
13246: LD_INT 20
13248: GREATER
13249: IFFALSE 13176
// end ;
13251: PPOPN 3
13253: END
// every 0 0$1 trigger StreamModeActive and sTime do
13254: LD_EXP 36
13258: PUSH
13259: LD_EXP 87
13263: AND
13264: IFFALSE 13299
13266: GO 13268
13268: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13269: LD_INT 28
13271: PPUSH
13272: LD_OWVAR 2
13276: PPUSH
13277: LD_INT 2
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13284: LD_INT 30
13286: PPUSH
13287: LD_OWVAR 2
13291: PPUSH
13292: LD_INT 2
13294: PPUSH
13295: CALL_OW 322
// end ;
13299: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13300: LD_EXP 36
13304: PUSH
13305: LD_EXP 88
13309: AND
13310: IFFALSE 13431
13312: GO 13314
13314: DISABLE
13315: LD_INT 0
13317: PPUSH
13318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13319: LD_ADDR_VAR 0 2
13323: PUSH
13324: LD_INT 22
13326: PUSH
13327: LD_OWVAR 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 21
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 3
13348: PUSH
13349: LD_INT 23
13351: PUSH
13352: LD_INT 0
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: PPUSH
13368: CALL_OW 69
13372: ST_TO_ADDR
// if not tmp then
13373: LD_VAR 0 2
13377: NOT
13378: IFFALSE 13382
// exit ;
13380: GO 13431
// for i in tmp do
13382: LD_ADDR_VAR 0 1
13386: PUSH
13387: LD_VAR 0 2
13391: PUSH
13392: FOR_IN
13393: IFFALSE 13429
// begin if Crawls ( i ) then
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 318
13404: IFFALSE 13415
// ComWalk ( i ) ;
13406: LD_VAR 0 1
13410: PPUSH
13411: CALL_OW 138
// SetClass ( i , 2 ) ;
13415: LD_VAR 0 1
13419: PPUSH
13420: LD_INT 2
13422: PPUSH
13423: CALL_OW 336
// end ;
13427: GO 13392
13429: POP
13430: POP
// end ;
13431: PPOPN 2
13433: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13434: LD_EXP 36
13438: PUSH
13439: LD_EXP 89
13443: AND
13444: IFFALSE 13649
13446: GO 13448
13448: DISABLE
13449: LD_INT 0
13451: PPUSH
13452: PPUSH
13453: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13454: LD_OWVAR 2
13458: PPUSH
13459: LD_INT 9
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13472: LD_INT 9
13474: PPUSH
13475: LD_OWVAR 2
13479: PPUSH
13480: CALL_OW 343
// hc_name := Dark Warrior ;
13484: LD_ADDR_OWVAR 26
13488: PUSH
13489: LD_STRING Dark Warrior
13491: ST_TO_ADDR
// hc_gallery :=  ;
13492: LD_ADDR_OWVAR 33
13496: PUSH
13497: LD_STRING 
13499: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
13500: LD_INT 1
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: LD_INT 10
13508: PPUSH
13509: CALL_OW 380
// un := CreateHuman ;
13513: LD_ADDR_VAR 0 3
13517: PUSH
13518: CALL_OW 44
13522: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13523: LD_VAR 0 3
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: CALL_OW 51
// p := 0 ;
13535: LD_ADDR_VAR 0 2
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13543: LD_INT 35
13545: PPUSH
13546: CALL_OW 67
// if GetLives ( un ) < 1000 then
13550: LD_VAR 0 3
13554: PPUSH
13555: CALL_OW 256
13559: PUSH
13560: LD_INT 1000
13562: LESS
13563: IFFALSE 13577
// SetLives ( un , 1000 ) ;
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1000
13572: PPUSH
13573: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 81
13584: PUSH
13585: LD_OWVAR 2
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 74
13608: PPUSH
13609: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13613: LD_VAR 0 2
13617: PUSH
13618: LD_INT 60
13620: GREATER
13621: PUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: CALL_OW 301
13631: OR
13632: IFFALSE 13543
// if un then
13634: LD_VAR 0 3
13638: IFFALSE 13649
// RemoveUnit ( un ) ;
13640: LD_VAR 0 3
13644: PPUSH
13645: CALL_OW 64
// end ;
13649: PPOPN 3
13651: END
