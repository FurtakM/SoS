// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1216
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1214
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1214
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: PUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 428
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1214
// ComMoveXY ( hunters [ i ] , x , y ) ;
1189: LD_EXP 6
1193: PUSH
1194: LD_VAR 0 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 111
// end ; end ; end ;
1214: GO 876
1216: POP
1217: POP
// end ; end_of_file
1218: PPOPN 5
1220: END
// on UnitGoesToRed ( un ) do var i ;
1221: LD_INT 0
1223: PPUSH
// begin if GetSide ( un ) = 1 then
1224: LD_VAR 0 1
1228: PPUSH
1229: CALL_OW 255
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1246
// YouLost ( hunt2 ) ;
1239: LD_STRING hunt2
1241: PPUSH
1242: CALL_OW 104
// if GetSide ( un ) > 1 then
1246: LD_VAR 0 1
1250: PPUSH
1251: CALL_OW 255
1255: PUSH
1256: LD_INT 1
1258: GREATER
1259: IFFALSE 1312
// begin for i := 1 to 6 do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_INT 6
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1298
// begin wait ( 0 0$1 ) ;
1277: LD_INT 35
1279: PPUSH
1280: CALL_OW 67
// SetLives ( un , 249 ) ;
1284: LD_VAR 0 1
1288: PPUSH
1289: LD_INT 249
1291: PPUSH
1292: CALL_OW 234
// end ;
1296: GO 1274
1298: POP
1299: POP
// SetLives ( un , 1000 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 1000
1307: PPUSH
1308: CALL_OW 234
// end ; end ;
1312: PPOPN 2
1314: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1315: LD_VAR 0 1
1319: PUSH
1320: LD_INT 1
1322: EQUAL
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: GREATER
1332: AND
1333: IFFALSE 1342
// YouLost ( hunt1 ) ;
1335: LD_STRING hunt1
1337: PPUSH
1338: CALL_OW 104
// end ;
1342: PPOPN 2
1344: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1345: LD_INT 0
1347: PPUSH
// begin point := 0 ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1356: LD_VAR 0 1
1360: PPUSH
1361: CALL_OW 257
1365: PUSH
1366: LD_INT 20
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1385
1374: POP
// point := 10 ; class_horse :
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_INT 10
1382: ST_TO_ADDR
1383: GO 1519
1385: LD_INT 21
1387: DOUBLE
1388: EQUAL
1389: IFTRUE 1393
1391: GO 1404
1393: POP
// point := 10 ; class_baggie :
1394: LD_ADDR_VAR 0 4
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
1402: GO 1519
1404: LD_INT 13
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1423
1412: POP
// point := 5 ; class_phororhacos :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 5
1420: ST_TO_ADDR
1421: GO 1519
1423: LD_INT 18
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1442
1431: POP
// point := 10 ; class_tiger :
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: LD_INT 10
1439: ST_TO_ADDR
1440: GO 1519
1442: LD_INT 14
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1461
1450: POP
// point := 20 ; class_apeman :
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_INT 20
1458: ST_TO_ADDR
1459: GO 1519
1461: LD_INT 12
1463: DOUBLE
1464: EQUAL
1465: IFTRUE 1469
1467: GO 1480
1469: POP
// point := 30 ; class_apeman_soldier :
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 30
1477: ST_TO_ADDR
1478: GO 1519
1480: LD_INT 15
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// point := 50 ; class_frog :
1489: LD_ADDR_VAR 0 4
1493: PUSH
1494: LD_INT 50
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 19
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// point := 10 ; end ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_INT 10
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// if point then
1519: LD_VAR 0 4
1523: IFFALSE 1562
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1525: LD_ADDR_EXP 5
1529: PUSH
1530: LD_EXP 5
1534: PPUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_EXP 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_VAR 0 4
1555: PLUS
1556: PPUSH
1557: CALL_OW 1
1561: ST_TO_ADDR
// end ;
1562: PPOPN 4
1564: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1565: LD_INT 22
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: PUSH
1580: LD_INT 10
1582: LESS
1583: IFFALSE 1685
1585: GO 1587
1587: DISABLE
// begin enable ;
1588: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1589: LD_INT 2
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 12
1605: PUSH
1606: LD_INT 0
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: PUSH
1617: LD_INT 0
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: CALL_OW 12
1627: PUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: PUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 12
1649: PUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 12
1660: PUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL 387 0 3
// end ;
1685: END
// every 0 0$1 do var i ;
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
// begin enable ;
1692: ENABLE
// display_strings := [ ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// for i := 1 to huntersAmount do
1700: LD_ADDR_VAR 0 1
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_EXP 3
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1850
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_OWVAR 47
1727: PUSH
1728: LD_STRING #player
1730: PUSH
1731: LD_VAR 0 1
1735: STR
1736: PUSH
1737: LD_VAR 0 1
1741: PUSH
1742: LD_EXP 5
1746: PUSH
1747: LD_VAR 0 1
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: ADD
1758: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1759: LD_EXP 5
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PUSH
1770: LD_INT 750
1772: PUSH
1773: LD_INT 1250
1775: PUSH
1776: LD_INT 2000
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_OWVAR 67
1788: ARRAY
1789: GREATEREQUAL
1790: IFFALSE 1848
// begin if i = 1 then
1792: LD_VAR 0 1
1796: PUSH
1797: LD_INT 1
1799: EQUAL
1800: IFFALSE 1841
// begin DialogueOn ;
1802: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1806: LD_STRING ACH_HUNT
1808: PPUSH
1809: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1813: LD_ADDR_OWVAR 47
1817: PUSH
1818: LD_STRING #hunting-win
1820: PUSH
1821: EMPTY
1822: LIST
1823: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1824: LD_INT 175
1826: PPUSH
1827: CALL_OW 68
// YouWin ;
1831: CALL_OW 103
// DialogueOff ;
1835: CALL_OW 7
// end else
1839: GO 1848
// YouLost ( hunt3 ) ;
1841: LD_STRING hunt3
1843: PPUSH
1844: CALL_OW 104
// end ; end ;
1848: GO 1715
1850: POP
1851: POP
// end ; end_of_file end_of_file
1852: PPOPN 1
1854: END
// export globalGameSaveCounter ; every 0 0$1 do
1855: GO 1857
1857: DISABLE
// begin enable ;
1858: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1859: LD_STRING updateTimer(
1861: PUSH
1862: LD_OWVAR 1
1866: STR
1867: PUSH
1868: LD_STRING );
1870: STR
1871: PPUSH
1872: CALL_OW 559
// end ;
1876: END
// every 0 0$1 do
1877: GO 1879
1879: DISABLE
// begin globalGameSaveCounter := 0 ;
1880: LD_ADDR_EXP 7
1884: PUSH
1885: LD_INT 0
1887: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1888: LD_STRING setGameSaveCounter(0)
1890: PPUSH
1891: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1895: LD_STRING initStreamRollete();
1897: PPUSH
1898: CALL_OW 559
// InitStreamMode ;
1902: CALL 3228 0 0
// DefineStreamItems ( false ) ;
1906: LD_INT 0
1908: PPUSH
1909: CALL 3692 0 1
// end ;
1913: END
// export function SOS_MapStart ( ) ; begin
1914: LD_INT 0
1916: PPUSH
// if streamModeActive then
1917: LD_EXP 8
1921: IFFALSE 1930
// DefineStreamItems ( true ) ;
1923: LD_INT 1
1925: PPUSH
1926: CALL 3692 0 1
// UpdateLuaVariables ( ) ;
1930: CALL 1947 0 0
// UpdateFactoryWaypoints ( ) ;
1934: CALL 16561 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1938: CALL 16818 0 0
// end ;
1942: LD_VAR 0 1
1946: RET
// function UpdateLuaVariables ( ) ; begin
1947: LD_INT 0
1949: PPUSH
// if globalGameSaveCounter then
1950: LD_EXP 7
1954: IFFALSE 1988
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1956: LD_ADDR_EXP 7
1960: PUSH
1961: LD_EXP 7
1965: PPUSH
1966: CALL 60791 0 1
1970: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1971: LD_STRING setGameSaveCounter(
1973: PUSH
1974: LD_EXP 7
1978: STR
1979: PUSH
1980: LD_STRING )
1982: STR
1983: PPUSH
1984: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1988: LD_STRING setGameDifficulty(
1990: PUSH
1991: LD_OWVAR 67
1995: STR
1996: PUSH
1997: LD_STRING )
1999: STR
2000: PPUSH
2001: CALL_OW 559
// end ;
2005: LD_VAR 0 1
2009: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2010: LD_INT 0
2012: PPUSH
// if p2 = stream_mode then
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 100
2020: EQUAL
2021: IFFALSE 3024
// begin if not StreamModeActive then
2023: LD_EXP 8
2027: NOT
2028: IFFALSE 2038
// StreamModeActive := true ;
2030: LD_ADDR_EXP 8
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// if p3 = 0 then
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 0
2045: EQUAL
2046: IFFALSE 2052
// InitStreamMode ;
2048: CALL 3228 0 0
// if p3 = 1 then
2052: LD_VAR 0 3
2056: PUSH
2057: LD_INT 1
2059: EQUAL
2060: IFFALSE 2070
// sRocket := true ;
2062: LD_ADDR_EXP 13
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// if p3 = 2 then
2070: LD_VAR 0 3
2074: PUSH
2075: LD_INT 2
2077: EQUAL
2078: IFFALSE 2088
// sSpeed := true ;
2080: LD_ADDR_EXP 12
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// if p3 = 3 then
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 3
2095: EQUAL
2096: IFFALSE 2106
// sEngine := true ;
2098: LD_ADDR_EXP 14
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// if p3 = 4 then
2106: LD_VAR 0 3
2110: PUSH
2111: LD_INT 4
2113: EQUAL
2114: IFFALSE 2124
// sSpec := true ;
2116: LD_ADDR_EXP 11
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// if p3 = 5 then
2124: LD_VAR 0 3
2128: PUSH
2129: LD_INT 5
2131: EQUAL
2132: IFFALSE 2142
// sLevel := true ;
2134: LD_ADDR_EXP 15
2138: PUSH
2139: LD_INT 1
2141: ST_TO_ADDR
// if p3 = 6 then
2142: LD_VAR 0 3
2146: PUSH
2147: LD_INT 6
2149: EQUAL
2150: IFFALSE 2160
// sArmoury := true ;
2152: LD_ADDR_EXP 16
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// if p3 = 7 then
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 7
2167: EQUAL
2168: IFFALSE 2178
// sRadar := true ;
2170: LD_ADDR_EXP 17
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// if p3 = 8 then
2178: LD_VAR 0 3
2182: PUSH
2183: LD_INT 8
2185: EQUAL
2186: IFFALSE 2196
// sBunker := true ;
2188: LD_ADDR_EXP 18
2192: PUSH
2193: LD_INT 1
2195: ST_TO_ADDR
// if p3 = 9 then
2196: LD_VAR 0 3
2200: PUSH
2201: LD_INT 9
2203: EQUAL
2204: IFFALSE 2214
// sHack := true ;
2206: LD_ADDR_EXP 19
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// if p3 = 10 then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 10
2221: EQUAL
2222: IFFALSE 2232
// sFire := true ;
2224: LD_ADDR_EXP 20
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// if p3 = 11 then
2232: LD_VAR 0 3
2236: PUSH
2237: LD_INT 11
2239: EQUAL
2240: IFFALSE 2250
// sRefresh := true ;
2242: LD_ADDR_EXP 21
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// if p3 = 12 then
2250: LD_VAR 0 3
2254: PUSH
2255: LD_INT 12
2257: EQUAL
2258: IFFALSE 2268
// sExp := true ;
2260: LD_ADDR_EXP 22
2264: PUSH
2265: LD_INT 1
2267: ST_TO_ADDR
// if p3 = 13 then
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 13
2275: EQUAL
2276: IFFALSE 2286
// sDepot := true ;
2278: LD_ADDR_EXP 23
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// if p3 = 14 then
2286: LD_VAR 0 3
2290: PUSH
2291: LD_INT 14
2293: EQUAL
2294: IFFALSE 2304
// sFlag := true ;
2296: LD_ADDR_EXP 24
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// if p3 = 15 then
2304: LD_VAR 0 3
2308: PUSH
2309: LD_INT 15
2311: EQUAL
2312: IFFALSE 2322
// sKamikadze := true ;
2314: LD_ADDR_EXP 32
2318: PUSH
2319: LD_INT 1
2321: ST_TO_ADDR
// if p3 = 16 then
2322: LD_VAR 0 3
2326: PUSH
2327: LD_INT 16
2329: EQUAL
2330: IFFALSE 2340
// sTroll := true ;
2332: LD_ADDR_EXP 33
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// if p3 = 17 then
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 17
2347: EQUAL
2348: IFFALSE 2358
// sSlow := true ;
2350: LD_ADDR_EXP 34
2354: PUSH
2355: LD_INT 1
2357: ST_TO_ADDR
// if p3 = 18 then
2358: LD_VAR 0 3
2362: PUSH
2363: LD_INT 18
2365: EQUAL
2366: IFFALSE 2376
// sLack := true ;
2368: LD_ADDR_EXP 35
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// if p3 = 19 then
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 19
2383: EQUAL
2384: IFFALSE 2394
// sTank := true ;
2386: LD_ADDR_EXP 37
2390: PUSH
2391: LD_INT 1
2393: ST_TO_ADDR
// if p3 = 20 then
2394: LD_VAR 0 3
2398: PUSH
2399: LD_INT 20
2401: EQUAL
2402: IFFALSE 2412
// sRemote := true ;
2404: LD_ADDR_EXP 38
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// if p3 = 21 then
2412: LD_VAR 0 3
2416: PUSH
2417: LD_INT 21
2419: EQUAL
2420: IFFALSE 2430
// sPowell := true ;
2422: LD_ADDR_EXP 39
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// if p3 = 22 then
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 22
2437: EQUAL
2438: IFFALSE 2448
// sTeleport := true ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// if p3 = 23 then
2448: LD_VAR 0 3
2452: PUSH
2453: LD_INT 23
2455: EQUAL
2456: IFFALSE 2466
// sOilTower := true ;
2458: LD_ADDR_EXP 44
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// if p3 = 24 then
2466: LD_VAR 0 3
2470: PUSH
2471: LD_INT 24
2473: EQUAL
2474: IFFALSE 2484
// sShovel := true ;
2476: LD_ADDR_EXP 45
2480: PUSH
2481: LD_INT 1
2483: ST_TO_ADDR
// if p3 = 25 then
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 25
2491: EQUAL
2492: IFFALSE 2502
// sSheik := true ;
2494: LD_ADDR_EXP 46
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// if p3 = 26 then
2502: LD_VAR 0 3
2506: PUSH
2507: LD_INT 26
2509: EQUAL
2510: IFFALSE 2520
// sEarthquake := true ;
2512: LD_ADDR_EXP 48
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// if p3 = 27 then
2520: LD_VAR 0 3
2524: PUSH
2525: LD_INT 27
2527: EQUAL
2528: IFFALSE 2538
// sAI := true ;
2530: LD_ADDR_EXP 49
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// if p3 = 28 then
2538: LD_VAR 0 3
2542: PUSH
2543: LD_INT 28
2545: EQUAL
2546: IFFALSE 2556
// sCargo := true ;
2548: LD_ADDR_EXP 52
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// if p3 = 29 then
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 29
2563: EQUAL
2564: IFFALSE 2574
// sDLaser := true ;
2566: LD_ADDR_EXP 53
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if p3 = 30 then
2574: LD_VAR 0 3
2578: PUSH
2579: LD_INT 30
2581: EQUAL
2582: IFFALSE 2592
// sExchange := true ;
2584: LD_ADDR_EXP 54
2588: PUSH
2589: LD_INT 1
2591: ST_TO_ADDR
// if p3 = 31 then
2592: LD_VAR 0 3
2596: PUSH
2597: LD_INT 31
2599: EQUAL
2600: IFFALSE 2610
// sFac := true ;
2602: LD_ADDR_EXP 55
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// if p3 = 32 then
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 32
2617: EQUAL
2618: IFFALSE 2628
// sPower := true ;
2620: LD_ADDR_EXP 56
2624: PUSH
2625: LD_INT 1
2627: ST_TO_ADDR
// if p3 = 33 then
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 33
2635: EQUAL
2636: IFFALSE 2646
// sRandom := true ;
2638: LD_ADDR_EXP 57
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// if p3 = 34 then
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 34
2653: EQUAL
2654: IFFALSE 2664
// sShield := true ;
2656: LD_ADDR_EXP 58
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// if p3 = 35 then
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 35
2671: EQUAL
2672: IFFALSE 2682
// sTime := true ;
2674: LD_ADDR_EXP 59
2678: PUSH
2679: LD_INT 1
2681: ST_TO_ADDR
// if p3 = 36 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 36
2689: EQUAL
2690: IFFALSE 2700
// sTools := true ;
2692: LD_ADDR_EXP 60
2696: PUSH
2697: LD_INT 1
2699: ST_TO_ADDR
// if p3 = 101 then
2700: LD_VAR 0 3
2704: PUSH
2705: LD_INT 101
2707: EQUAL
2708: IFFALSE 2718
// sSold := true ;
2710: LD_ADDR_EXP 25
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// if p3 = 102 then
2718: LD_VAR 0 3
2722: PUSH
2723: LD_INT 102
2725: EQUAL
2726: IFFALSE 2736
// sDiff := true ;
2728: LD_ADDR_EXP 26
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// if p3 = 103 then
2736: LD_VAR 0 3
2740: PUSH
2741: LD_INT 103
2743: EQUAL
2744: IFFALSE 2754
// sFog := true ;
2746: LD_ADDR_EXP 29
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// if p3 = 104 then
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 104
2761: EQUAL
2762: IFFALSE 2772
// sReset := true ;
2764: LD_ADDR_EXP 30
2768: PUSH
2769: LD_INT 1
2771: ST_TO_ADDR
// if p3 = 105 then
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 105
2779: EQUAL
2780: IFFALSE 2790
// sSun := true ;
2782: LD_ADDR_EXP 31
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// if p3 = 106 then
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 106
2797: EQUAL
2798: IFFALSE 2808
// sTiger := true ;
2800: LD_ADDR_EXP 27
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// if p3 = 107 then
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 107
2815: EQUAL
2816: IFFALSE 2826
// sBomb := true ;
2818: LD_ADDR_EXP 28
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// if p3 = 108 then
2826: LD_VAR 0 3
2830: PUSH
2831: LD_INT 108
2833: EQUAL
2834: IFFALSE 2844
// sWound := true ;
2836: LD_ADDR_EXP 36
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// if p3 = 109 then
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 109
2851: EQUAL
2852: IFFALSE 2862
// sBetray := true ;
2854: LD_ADDR_EXP 40
2858: PUSH
2859: LD_INT 1
2861: ST_TO_ADDR
// if p3 = 110 then
2862: LD_VAR 0 3
2866: PUSH
2867: LD_INT 110
2869: EQUAL
2870: IFFALSE 2880
// sContamin := true ;
2872: LD_ADDR_EXP 41
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// if p3 = 111 then
2880: LD_VAR 0 3
2884: PUSH
2885: LD_INT 111
2887: EQUAL
2888: IFFALSE 2898
// sOil := true ;
2890: LD_ADDR_EXP 43
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// if p3 = 112 then
2898: LD_VAR 0 3
2902: PUSH
2903: LD_INT 112
2905: EQUAL
2906: IFFALSE 2916
// sStu := true ;
2908: LD_ADDR_EXP 47
2912: PUSH
2913: LD_INT 1
2915: ST_TO_ADDR
// if p3 = 113 then
2916: LD_VAR 0 3
2920: PUSH
2921: LD_INT 113
2923: EQUAL
2924: IFFALSE 2934
// sBazooka := true ;
2926: LD_ADDR_EXP 50
2930: PUSH
2931: LD_INT 1
2933: ST_TO_ADDR
// if p3 = 114 then
2934: LD_VAR 0 3
2938: PUSH
2939: LD_INT 114
2941: EQUAL
2942: IFFALSE 2952
// sMortar := true ;
2944: LD_ADDR_EXP 51
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// if p3 = 115 then
2952: LD_VAR 0 3
2956: PUSH
2957: LD_INT 115
2959: EQUAL
2960: IFFALSE 2970
// sRanger := true ;
2962: LD_ADDR_EXP 61
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// if p3 = 116 then
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 116
2977: EQUAL
2978: IFFALSE 2988
// sComputer := true ;
2980: LD_ADDR_EXP 62
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// if p3 = 117 then
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 117
2995: EQUAL
2996: IFFALSE 3006
// s30 := true ;
2998: LD_ADDR_EXP 63
3002: PUSH
3003: LD_INT 1
3005: ST_TO_ADDR
// if p3 = 118 then
3006: LD_VAR 0 3
3010: PUSH
3011: LD_INT 118
3013: EQUAL
3014: IFFALSE 3024
// s60 := true ;
3016: LD_ADDR_EXP 64
3020: PUSH
3021: LD_INT 1
3023: ST_TO_ADDR
// end ; if p2 = hack_mode then
3024: LD_VAR 0 2
3028: PUSH
3029: LD_INT 101
3031: EQUAL
3032: IFFALSE 3160
// begin case p3 of 1 :
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 1
3041: DOUBLE
3042: EQUAL
3043: IFTRUE 3047
3045: GO 3054
3047: POP
// hHackUnlimitedResources ; 2 :
3048: CALL 15307 0 0
3052: GO 3160
3054: LD_INT 2
3056: DOUBLE
3057: EQUAL
3058: IFTRUE 3062
3060: GO 3069
3062: POP
// hHackSetLevel10 ; 3 :
3063: CALL 15440 0 0
3067: GO 3160
3069: LD_INT 3
3071: DOUBLE
3072: EQUAL
3073: IFTRUE 3077
3075: GO 3084
3077: POP
// hHackSetLevel10YourUnits ; 4 :
3078: CALL 15525 0 0
3082: GO 3160
3084: LD_INT 4
3086: DOUBLE
3087: EQUAL
3088: IFTRUE 3092
3090: GO 3099
3092: POP
// hHackInvincible ; 5 :
3093: CALL 15973 0 0
3097: GO 3160
3099: LD_INT 5
3101: DOUBLE
3102: EQUAL
3103: IFTRUE 3107
3105: GO 3114
3107: POP
// hHackInvisible ; 6 :
3108: CALL 16084 0 0
3112: GO 3160
3114: LD_INT 6
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3129
3122: POP
// hHackChangeYourSide ; 7 :
3123: CALL 16141 0 0
3127: GO 3160
3129: LD_INT 7
3131: DOUBLE
3132: EQUAL
3133: IFTRUE 3137
3135: GO 3144
3137: POP
// hHackChangeUnitSide ; 8 :
3138: CALL 16183 0 0
3142: GO 3160
3144: LD_INT 8
3146: DOUBLE
3147: EQUAL
3148: IFTRUE 3152
3150: GO 3159
3152: POP
// hHackFog ; end ;
3153: CALL 16284 0 0
3157: GO 3160
3159: POP
// end ; if p2 = game_save_mode then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 102
3167: EQUAL
3168: IFFALSE 3223
// begin if p3 = 1 then
3170: LD_VAR 0 3
3174: PUSH
3175: LD_INT 1
3177: EQUAL
3178: IFFALSE 3190
// globalGameSaveCounter := p4 ;
3180: LD_ADDR_EXP 7
3184: PUSH
3185: LD_VAR 0 4
3189: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3190: LD_VAR 0 3
3194: PUSH
3195: LD_INT 2
3197: EQUAL
3198: PUSH
3199: LD_EXP 7
3203: AND
3204: IFFALSE 3223
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3206: LD_STRING setGameSaveCounter(
3208: PUSH
3209: LD_EXP 7
3213: STR
3214: PUSH
3215: LD_STRING )
3217: STR
3218: PPUSH
3219: CALL_OW 559
// end ; end ;
3223: LD_VAR 0 7
3227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3228: LD_INT 0
3230: PPUSH
// streamModeActive := false ;
3231: LD_ADDR_EXP 8
3235: PUSH
3236: LD_INT 0
3238: ST_TO_ADDR
// normalCounter := 36 ;
3239: LD_ADDR_EXP 9
3243: PUSH
3244: LD_INT 36
3246: ST_TO_ADDR
// hardcoreCounter := 18 ;
3247: LD_ADDR_EXP 10
3251: PUSH
3252: LD_INT 18
3254: ST_TO_ADDR
// sRocket := false ;
3255: LD_ADDR_EXP 13
3259: PUSH
3260: LD_INT 0
3262: ST_TO_ADDR
// sSpeed := false ;
3263: LD_ADDR_EXP 12
3267: PUSH
3268: LD_INT 0
3270: ST_TO_ADDR
// sEngine := false ;
3271: LD_ADDR_EXP 14
3275: PUSH
3276: LD_INT 0
3278: ST_TO_ADDR
// sSpec := false ;
3279: LD_ADDR_EXP 11
3283: PUSH
3284: LD_INT 0
3286: ST_TO_ADDR
// sLevel := false ;
3287: LD_ADDR_EXP 15
3291: PUSH
3292: LD_INT 0
3294: ST_TO_ADDR
// sArmoury := false ;
3295: LD_ADDR_EXP 16
3299: PUSH
3300: LD_INT 0
3302: ST_TO_ADDR
// sRadar := false ;
3303: LD_ADDR_EXP 17
3307: PUSH
3308: LD_INT 0
3310: ST_TO_ADDR
// sBunker := false ;
3311: LD_ADDR_EXP 18
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// sHack := false ;
3319: LD_ADDR_EXP 19
3323: PUSH
3324: LD_INT 0
3326: ST_TO_ADDR
// sFire := false ;
3327: LD_ADDR_EXP 20
3331: PUSH
3332: LD_INT 0
3334: ST_TO_ADDR
// sRefresh := false ;
3335: LD_ADDR_EXP 21
3339: PUSH
3340: LD_INT 0
3342: ST_TO_ADDR
// sExp := false ;
3343: LD_ADDR_EXP 22
3347: PUSH
3348: LD_INT 0
3350: ST_TO_ADDR
// sDepot := false ;
3351: LD_ADDR_EXP 23
3355: PUSH
3356: LD_INT 0
3358: ST_TO_ADDR
// sFlag := false ;
3359: LD_ADDR_EXP 24
3363: PUSH
3364: LD_INT 0
3366: ST_TO_ADDR
// sKamikadze := false ;
3367: LD_ADDR_EXP 32
3371: PUSH
3372: LD_INT 0
3374: ST_TO_ADDR
// sTroll := false ;
3375: LD_ADDR_EXP 33
3379: PUSH
3380: LD_INT 0
3382: ST_TO_ADDR
// sSlow := false ;
3383: LD_ADDR_EXP 34
3387: PUSH
3388: LD_INT 0
3390: ST_TO_ADDR
// sLack := false ;
3391: LD_ADDR_EXP 35
3395: PUSH
3396: LD_INT 0
3398: ST_TO_ADDR
// sTank := false ;
3399: LD_ADDR_EXP 37
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// sRemote := false ;
3407: LD_ADDR_EXP 38
3411: PUSH
3412: LD_INT 0
3414: ST_TO_ADDR
// sPowell := false ;
3415: LD_ADDR_EXP 39
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// sTeleport := false ;
3423: LD_ADDR_EXP 42
3427: PUSH
3428: LD_INT 0
3430: ST_TO_ADDR
// sOilTower := false ;
3431: LD_ADDR_EXP 44
3435: PUSH
3436: LD_INT 0
3438: ST_TO_ADDR
// sShovel := false ;
3439: LD_ADDR_EXP 45
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// sSheik := false ;
3447: LD_ADDR_EXP 46
3451: PUSH
3452: LD_INT 0
3454: ST_TO_ADDR
// sEarthquake := false ;
3455: LD_ADDR_EXP 48
3459: PUSH
3460: LD_INT 0
3462: ST_TO_ADDR
// sAI := false ;
3463: LD_ADDR_EXP 49
3467: PUSH
3468: LD_INT 0
3470: ST_TO_ADDR
// sCargo := false ;
3471: LD_ADDR_EXP 52
3475: PUSH
3476: LD_INT 0
3478: ST_TO_ADDR
// sDLaser := false ;
3479: LD_ADDR_EXP 53
3483: PUSH
3484: LD_INT 0
3486: ST_TO_ADDR
// sExchange := false ;
3487: LD_ADDR_EXP 54
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// sFac := false ;
3495: LD_ADDR_EXP 55
3499: PUSH
3500: LD_INT 0
3502: ST_TO_ADDR
// sPower := false ;
3503: LD_ADDR_EXP 56
3507: PUSH
3508: LD_INT 0
3510: ST_TO_ADDR
// sRandom := false ;
3511: LD_ADDR_EXP 57
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// sShield := false ;
3519: LD_ADDR_EXP 58
3523: PUSH
3524: LD_INT 0
3526: ST_TO_ADDR
// sTime := false ;
3527: LD_ADDR_EXP 59
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// sTools := false ;
3535: LD_ADDR_EXP 60
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// sSold := false ;
3543: LD_ADDR_EXP 25
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// sDiff := false ;
3551: LD_ADDR_EXP 26
3555: PUSH
3556: LD_INT 0
3558: ST_TO_ADDR
// sFog := false ;
3559: LD_ADDR_EXP 29
3563: PUSH
3564: LD_INT 0
3566: ST_TO_ADDR
// sReset := false ;
3567: LD_ADDR_EXP 30
3571: PUSH
3572: LD_INT 0
3574: ST_TO_ADDR
// sSun := false ;
3575: LD_ADDR_EXP 31
3579: PUSH
3580: LD_INT 0
3582: ST_TO_ADDR
// sTiger := false ;
3583: LD_ADDR_EXP 27
3587: PUSH
3588: LD_INT 0
3590: ST_TO_ADDR
// sBomb := false ;
3591: LD_ADDR_EXP 28
3595: PUSH
3596: LD_INT 0
3598: ST_TO_ADDR
// sWound := false ;
3599: LD_ADDR_EXP 36
3603: PUSH
3604: LD_INT 0
3606: ST_TO_ADDR
// sBetray := false ;
3607: LD_ADDR_EXP 40
3611: PUSH
3612: LD_INT 0
3614: ST_TO_ADDR
// sContamin := false ;
3615: LD_ADDR_EXP 41
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// sOil := false ;
3623: LD_ADDR_EXP 43
3627: PUSH
3628: LD_INT 0
3630: ST_TO_ADDR
// sStu := false ;
3631: LD_ADDR_EXP 47
3635: PUSH
3636: LD_INT 0
3638: ST_TO_ADDR
// sBazooka := false ;
3639: LD_ADDR_EXP 50
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// sMortar := false ;
3647: LD_ADDR_EXP 51
3651: PUSH
3652: LD_INT 0
3654: ST_TO_ADDR
// sRanger := false ;
3655: LD_ADDR_EXP 61
3659: PUSH
3660: LD_INT 0
3662: ST_TO_ADDR
// sComputer := false ;
3663: LD_ADDR_EXP 62
3667: PUSH
3668: LD_INT 0
3670: ST_TO_ADDR
// s30 := false ;
3671: LD_ADDR_EXP 63
3675: PUSH
3676: LD_INT 0
3678: ST_TO_ADDR
// s60 := false ;
3679: LD_ADDR_EXP 64
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
3696: PPUSH
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
// result := [ ] ;
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: EMPTY
3707: ST_TO_ADDR
// if campaign_id = 1 then
3708: LD_OWVAR 69
3712: PUSH
3713: LD_INT 1
3715: EQUAL
3716: IFFALSE 6882
// begin case mission_number of 1 :
3718: LD_OWVAR 70
3722: PUSH
3723: LD_INT 1
3725: DOUBLE
3726: EQUAL
3727: IFTRUE 3731
3729: GO 3807
3731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 4
3742: PUSH
3743: LD_INT 11
3745: PUSH
3746: LD_INT 12
3748: PUSH
3749: LD_INT 15
3751: PUSH
3752: LD_INT 16
3754: PUSH
3755: LD_INT 22
3757: PUSH
3758: LD_INT 23
3760: PUSH
3761: LD_INT 26
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 101
3777: PUSH
3778: LD_INT 102
3780: PUSH
3781: LD_INT 106
3783: PUSH
3784: LD_INT 116
3786: PUSH
3787: LD_INT 117
3789: PUSH
3790: LD_INT 118
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: ST_TO_ADDR
3805: GO 6880
3807: LD_INT 2
3809: DOUBLE
3810: EQUAL
3811: IFTRUE 3815
3813: GO 3899
3815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3816: LD_ADDR_VAR 0 2
3820: PUSH
3821: LD_INT 2
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 11
3829: PUSH
3830: LD_INT 12
3832: PUSH
3833: LD_INT 15
3835: PUSH
3836: LD_INT 16
3838: PUSH
3839: LD_INT 22
3841: PUSH
3842: LD_INT 23
3844: PUSH
3845: LD_INT 26
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: LD_INT 101
3861: PUSH
3862: LD_INT 102
3864: PUSH
3865: LD_INT 105
3867: PUSH
3868: LD_INT 106
3870: PUSH
3871: LD_INT 108
3873: PUSH
3874: LD_INT 116
3876: PUSH
3877: LD_INT 117
3879: PUSH
3880: LD_INT 118
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: ST_TO_ADDR
3897: GO 6880
3899: LD_INT 3
3901: DOUBLE
3902: EQUAL
3903: IFTRUE 3907
3905: GO 3995
3907: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 4
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 11
3924: PUSH
3925: LD_INT 12
3927: PUSH
3928: LD_INT 15
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 26
3939: PUSH
3940: LD_INT 36
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PUSH
3955: LD_INT 101
3957: PUSH
3958: LD_INT 102
3960: PUSH
3961: LD_INT 105
3963: PUSH
3964: LD_INT 106
3966: PUSH
3967: LD_INT 108
3969: PUSH
3970: LD_INT 116
3972: PUSH
3973: LD_INT 117
3975: PUSH
3976: LD_INT 118
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: ST_TO_ADDR
3993: GO 6880
3995: LD_INT 4
3997: DOUBLE
3998: EQUAL
3999: IFTRUE 4003
4001: GO 4099
4003: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4004: LD_ADDR_VAR 0 2
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: LD_INT 8
4020: PUSH
4021: LD_INT 11
4023: PUSH
4024: LD_INT 12
4026: PUSH
4027: LD_INT 15
4029: PUSH
4030: LD_INT 16
4032: PUSH
4033: LD_INT 22
4035: PUSH
4036: LD_INT 23
4038: PUSH
4039: LD_INT 26
4041: PUSH
4042: LD_INT 36
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 101
4061: PUSH
4062: LD_INT 102
4064: PUSH
4065: LD_INT 105
4067: PUSH
4068: LD_INT 106
4070: PUSH
4071: LD_INT 108
4073: PUSH
4074: LD_INT 116
4076: PUSH
4077: LD_INT 117
4079: PUSH
4080: LD_INT 118
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: ST_TO_ADDR
4097: GO 6880
4099: LD_INT 5
4101: DOUBLE
4102: EQUAL
4103: IFTRUE 4107
4105: GO 4219
4107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 6
4124: PUSH
4125: LD_INT 8
4127: PUSH
4128: LD_INT 11
4130: PUSH
4131: LD_INT 12
4133: PUSH
4134: LD_INT 15
4136: PUSH
4137: LD_INT 16
4139: PUSH
4140: LD_INT 22
4142: PUSH
4143: LD_INT 23
4145: PUSH
4146: LD_INT 25
4148: PUSH
4149: LD_INT 26
4151: PUSH
4152: LD_INT 36
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 101
4173: PUSH
4174: LD_INT 102
4176: PUSH
4177: LD_INT 105
4179: PUSH
4180: LD_INT 106
4182: PUSH
4183: LD_INT 108
4185: PUSH
4186: LD_INT 109
4188: PUSH
4189: LD_INT 112
4191: PUSH
4192: LD_INT 116
4194: PUSH
4195: LD_INT 117
4197: PUSH
4198: LD_INT 118
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: ST_TO_ADDR
4217: GO 6880
4219: LD_INT 6
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4359
4227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: LD_INT 6
4244: PUSH
4245: LD_INT 8
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 15
4256: PUSH
4257: LD_INT 16
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 26
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 31
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 36
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 101
4313: PUSH
4314: LD_INT 102
4316: PUSH
4317: LD_INT 105
4319: PUSH
4320: LD_INT 106
4322: PUSH
4323: LD_INT 108
4325: PUSH
4326: LD_INT 109
4328: PUSH
4329: LD_INT 112
4331: PUSH
4332: LD_INT 116
4334: PUSH
4335: LD_INT 117
4337: PUSH
4338: LD_INT 118
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: ST_TO_ADDR
4357: GO 6880
4359: LD_INT 7
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4367
4365: GO 4479
4367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: LD_INT 5
4381: PUSH
4382: LD_INT 7
4384: PUSH
4385: LD_INT 11
4387: PUSH
4388: LD_INT 12
4390: PUSH
4391: LD_INT 15
4393: PUSH
4394: LD_INT 16
4396: PUSH
4397: LD_INT 20
4399: PUSH
4400: LD_INT 21
4402: PUSH
4403: LD_INT 22
4405: PUSH
4406: LD_INT 23
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 26
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 101
4433: PUSH
4434: LD_INT 102
4436: PUSH
4437: LD_INT 103
4439: PUSH
4440: LD_INT 105
4442: PUSH
4443: LD_INT 106
4445: PUSH
4446: LD_INT 108
4448: PUSH
4449: LD_INT 112
4451: PUSH
4452: LD_INT 116
4454: PUSH
4455: LD_INT 117
4457: PUSH
4458: LD_INT 118
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: ST_TO_ADDR
4477: GO 6880
4479: LD_INT 8
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4627
4487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4488: LD_ADDR_VAR 0 2
4492: PUSH
4493: LD_INT 2
4495: PUSH
4496: LD_INT 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 6
4504: PUSH
4505: LD_INT 7
4507: PUSH
4508: LD_INT 8
4510: PUSH
4511: LD_INT 11
4513: PUSH
4514: LD_INT 12
4516: PUSH
4517: LD_INT 15
4519: PUSH
4520: LD_INT 16
4522: PUSH
4523: LD_INT 20
4525: PUSH
4526: LD_INT 21
4528: PUSH
4529: LD_INT 22
4531: PUSH
4532: LD_INT 23
4534: PUSH
4535: LD_INT 25
4537: PUSH
4538: LD_INT 26
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 31
4546: PUSH
4547: LD_INT 32
4549: PUSH
4550: LD_INT 36
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 101
4577: PUSH
4578: LD_INT 102
4580: PUSH
4581: LD_INT 103
4583: PUSH
4584: LD_INT 105
4586: PUSH
4587: LD_INT 106
4589: PUSH
4590: LD_INT 108
4592: PUSH
4593: LD_INT 109
4595: PUSH
4596: LD_INT 112
4598: PUSH
4599: LD_INT 116
4601: PUSH
4602: LD_INT 117
4604: PUSH
4605: LD_INT 118
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: ST_TO_ADDR
4625: GO 6880
4627: LD_INT 9
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4635
4633: GO 4783
4635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: LD_INT 2
4643: PUSH
4644: LD_INT 4
4646: PUSH
4647: LD_INT 5
4649: PUSH
4650: LD_INT 6
4652: PUSH
4653: LD_INT 7
4655: PUSH
4656: LD_INT 8
4658: PUSH
4659: LD_INT 11
4661: PUSH
4662: LD_INT 12
4664: PUSH
4665: LD_INT 15
4667: PUSH
4668: LD_INT 16
4670: PUSH
4671: LD_INT 20
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 26
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 30
4694: PUSH
4695: LD_INT 31
4697: PUSH
4698: LD_INT 32
4700: PUSH
4701: LD_INT 36
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 101
4729: PUSH
4730: LD_INT 102
4732: PUSH
4733: LD_INT 103
4735: PUSH
4736: LD_INT 105
4738: PUSH
4739: LD_INT 106
4741: PUSH
4742: LD_INT 108
4744: PUSH
4745: LD_INT 109
4747: PUSH
4748: LD_INT 112
4750: PUSH
4751: LD_INT 114
4753: PUSH
4754: LD_INT 116
4756: PUSH
4757: LD_INT 117
4759: PUSH
4760: LD_INT 118
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 6880
4783: LD_INT 10
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4987
4791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 6
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: LD_INT 8
4814: PUSH
4815: LD_INT 9
4817: PUSH
4818: LD_INT 10
4820: PUSH
4821: LD_INT 11
4823: PUSH
4824: LD_INT 12
4826: PUSH
4827: LD_INT 13
4829: PUSH
4830: LD_INT 14
4832: PUSH
4833: LD_INT 15
4835: PUSH
4836: LD_INT 16
4838: PUSH
4839: LD_INT 17
4841: PUSH
4842: LD_INT 18
4844: PUSH
4845: LD_INT 19
4847: PUSH
4848: LD_INT 20
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 23
4859: PUSH
4860: LD_INT 24
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 26
4868: PUSH
4869: LD_INT 28
4871: PUSH
4872: LD_INT 30
4874: PUSH
4875: LD_INT 31
4877: PUSH
4878: LD_INT 32
4880: PUSH
4881: LD_INT 36
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 101
4917: PUSH
4918: LD_INT 102
4920: PUSH
4921: LD_INT 103
4923: PUSH
4924: LD_INT 104
4926: PUSH
4927: LD_INT 105
4929: PUSH
4930: LD_INT 106
4932: PUSH
4933: LD_INT 107
4935: PUSH
4936: LD_INT 108
4938: PUSH
4939: LD_INT 109
4941: PUSH
4942: LD_INT 110
4944: PUSH
4945: LD_INT 111
4947: PUSH
4948: LD_INT 112
4950: PUSH
4951: LD_INT 114
4953: PUSH
4954: LD_INT 116
4956: PUSH
4957: LD_INT 117
4959: PUSH
4960: LD_INT 118
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: ST_TO_ADDR
4985: GO 6880
4987: LD_INT 11
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 4995
4993: GO 5199
4995: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: LD_INT 4
5009: PUSH
5010: LD_INT 5
5012: PUSH
5013: LD_INT 6
5015: PUSH
5016: LD_INT 7
5018: PUSH
5019: LD_INT 8
5021: PUSH
5022: LD_INT 9
5024: PUSH
5025: LD_INT 10
5027: PUSH
5028: LD_INT 11
5030: PUSH
5031: LD_INT 12
5033: PUSH
5034: LD_INT 13
5036: PUSH
5037: LD_INT 14
5039: PUSH
5040: LD_INT 15
5042: PUSH
5043: LD_INT 16
5045: PUSH
5046: LD_INT 17
5048: PUSH
5049: LD_INT 18
5051: PUSH
5052: LD_INT 19
5054: PUSH
5055: LD_INT 20
5057: PUSH
5058: LD_INT 21
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 23
5066: PUSH
5067: LD_INT 24
5069: PUSH
5070: LD_INT 25
5072: PUSH
5073: LD_INT 26
5075: PUSH
5076: LD_INT 28
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 31
5084: PUSH
5085: LD_INT 32
5087: PUSH
5088: LD_INT 34
5090: PUSH
5091: LD_INT 36
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 101
5129: PUSH
5130: LD_INT 102
5132: PUSH
5133: LD_INT 103
5135: PUSH
5136: LD_INT 104
5138: PUSH
5139: LD_INT 105
5141: PUSH
5142: LD_INT 106
5144: PUSH
5145: LD_INT 107
5147: PUSH
5148: LD_INT 108
5150: PUSH
5151: LD_INT 109
5153: PUSH
5154: LD_INT 110
5156: PUSH
5157: LD_INT 111
5159: PUSH
5160: LD_INT 112
5162: PUSH
5163: LD_INT 114
5165: PUSH
5166: LD_INT 116
5168: PUSH
5169: LD_INT 117
5171: PUSH
5172: LD_INT 118
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: ST_TO_ADDR
5197: GO 6880
5199: LD_INT 12
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5427
5207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5208: LD_ADDR_VAR 0 2
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: LD_INT 2
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: LD_INT 4
5224: PUSH
5225: LD_INT 5
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 7
5233: PUSH
5234: LD_INT 8
5236: PUSH
5237: LD_INT 9
5239: PUSH
5240: LD_INT 10
5242: PUSH
5243: LD_INT 11
5245: PUSH
5246: LD_INT 12
5248: PUSH
5249: LD_INT 13
5251: PUSH
5252: LD_INT 14
5254: PUSH
5255: LD_INT 15
5257: PUSH
5258: LD_INT 16
5260: PUSH
5261: LD_INT 17
5263: PUSH
5264: LD_INT 18
5266: PUSH
5267: LD_INT 19
5269: PUSH
5270: LD_INT 20
5272: PUSH
5273: LD_INT 21
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 23
5281: PUSH
5282: LD_INT 24
5284: PUSH
5285: LD_INT 25
5287: PUSH
5288: LD_INT 26
5290: PUSH
5291: LD_INT 27
5293: PUSH
5294: LD_INT 28
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 31
5302: PUSH
5303: LD_INT 32
5305: PUSH
5306: LD_INT 33
5308: PUSH
5309: LD_INT 34
5311: PUSH
5312: LD_INT 36
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 101
5353: PUSH
5354: LD_INT 102
5356: PUSH
5357: LD_INT 103
5359: PUSH
5360: LD_INT 104
5362: PUSH
5363: LD_INT 105
5365: PUSH
5366: LD_INT 106
5368: PUSH
5369: LD_INT 107
5371: PUSH
5372: LD_INT 108
5374: PUSH
5375: LD_INT 109
5377: PUSH
5378: LD_INT 110
5380: PUSH
5381: LD_INT 111
5383: PUSH
5384: LD_INT 112
5386: PUSH
5387: LD_INT 113
5389: PUSH
5390: LD_INT 114
5392: PUSH
5393: LD_INT 116
5395: PUSH
5396: LD_INT 117
5398: PUSH
5399: LD_INT 118
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: ST_TO_ADDR
5425: GO 6880
5427: LD_INT 13
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5435
5433: GO 5643
5435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 4
5452: PUSH
5453: LD_INT 5
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: LD_INT 9
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: LD_INT 11
5467: PUSH
5468: LD_INT 12
5470: PUSH
5471: LD_INT 14
5473: PUSH
5474: LD_INT 15
5476: PUSH
5477: LD_INT 16
5479: PUSH
5480: LD_INT 17
5482: PUSH
5483: LD_INT 18
5485: PUSH
5486: LD_INT 19
5488: PUSH
5489: LD_INT 20
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 22
5497: PUSH
5498: LD_INT 23
5500: PUSH
5501: LD_INT 24
5503: PUSH
5504: LD_INT 25
5506: PUSH
5507: LD_INT 26
5509: PUSH
5510: LD_INT 27
5512: PUSH
5513: LD_INT 28
5515: PUSH
5516: LD_INT 30
5518: PUSH
5519: LD_INT 31
5521: PUSH
5522: LD_INT 32
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: LD_INT 34
5530: PUSH
5531: LD_INT 36
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 101
5569: PUSH
5570: LD_INT 102
5572: PUSH
5573: LD_INT 103
5575: PUSH
5576: LD_INT 104
5578: PUSH
5579: LD_INT 105
5581: PUSH
5582: LD_INT 106
5584: PUSH
5585: LD_INT 107
5587: PUSH
5588: LD_INT 108
5590: PUSH
5591: LD_INT 109
5593: PUSH
5594: LD_INT 110
5596: PUSH
5597: LD_INT 111
5599: PUSH
5600: LD_INT 112
5602: PUSH
5603: LD_INT 113
5605: PUSH
5606: LD_INT 114
5608: PUSH
5609: LD_INT 116
5611: PUSH
5612: LD_INT 117
5614: PUSH
5615: LD_INT 118
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: ST_TO_ADDR
5641: GO 6880
5643: LD_INT 14
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5651
5649: GO 5875
5651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5652: LD_ADDR_VAR 0 2
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: LD_INT 2
5662: PUSH
5663: LD_INT 3
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: LD_INT 6
5674: PUSH
5675: LD_INT 7
5677: PUSH
5678: LD_INT 8
5680: PUSH
5681: LD_INT 9
5683: PUSH
5684: LD_INT 10
5686: PUSH
5687: LD_INT 11
5689: PUSH
5690: LD_INT 12
5692: PUSH
5693: LD_INT 13
5695: PUSH
5696: LD_INT 14
5698: PUSH
5699: LD_INT 15
5701: PUSH
5702: LD_INT 16
5704: PUSH
5705: LD_INT 17
5707: PUSH
5708: LD_INT 18
5710: PUSH
5711: LD_INT 19
5713: PUSH
5714: LD_INT 20
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 23
5725: PUSH
5726: LD_INT 24
5728: PUSH
5729: LD_INT 25
5731: PUSH
5732: LD_INT 26
5734: PUSH
5735: LD_INT 27
5737: PUSH
5738: LD_INT 28
5740: PUSH
5741: LD_INT 29
5743: PUSH
5744: LD_INT 30
5746: PUSH
5747: LD_INT 31
5749: PUSH
5750: LD_INT 32
5752: PUSH
5753: LD_INT 33
5755: PUSH
5756: LD_INT 34
5758: PUSH
5759: LD_INT 36
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 101
5801: PUSH
5802: LD_INT 102
5804: PUSH
5805: LD_INT 103
5807: PUSH
5808: LD_INT 104
5810: PUSH
5811: LD_INT 105
5813: PUSH
5814: LD_INT 106
5816: PUSH
5817: LD_INT 107
5819: PUSH
5820: LD_INT 108
5822: PUSH
5823: LD_INT 109
5825: PUSH
5826: LD_INT 110
5828: PUSH
5829: LD_INT 111
5831: PUSH
5832: LD_INT 112
5834: PUSH
5835: LD_INT 113
5837: PUSH
5838: LD_INT 114
5840: PUSH
5841: LD_INT 116
5843: PUSH
5844: LD_INT 117
5846: PUSH
5847: LD_INT 118
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: ST_TO_ADDR
5873: GO 6880
5875: LD_INT 15
5877: DOUBLE
5878: EQUAL
5879: IFTRUE 5883
5881: GO 6107
5883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5884: LD_ADDR_VAR 0 2
5888: PUSH
5889: LD_INT 1
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: LD_INT 4
5900: PUSH
5901: LD_INT 5
5903: PUSH
5904: LD_INT 6
5906: PUSH
5907: LD_INT 7
5909: PUSH
5910: LD_INT 8
5912: PUSH
5913: LD_INT 9
5915: PUSH
5916: LD_INT 10
5918: PUSH
5919: LD_INT 11
5921: PUSH
5922: LD_INT 12
5924: PUSH
5925: LD_INT 13
5927: PUSH
5928: LD_INT 14
5930: PUSH
5931: LD_INT 15
5933: PUSH
5934: LD_INT 16
5936: PUSH
5937: LD_INT 17
5939: PUSH
5940: LD_INT 18
5942: PUSH
5943: LD_INT 19
5945: PUSH
5946: LD_INT 20
5948: PUSH
5949: LD_INT 21
5951: PUSH
5952: LD_INT 22
5954: PUSH
5955: LD_INT 23
5957: PUSH
5958: LD_INT 24
5960: PUSH
5961: LD_INT 25
5963: PUSH
5964: LD_INT 26
5966: PUSH
5967: LD_INT 27
5969: PUSH
5970: LD_INT 28
5972: PUSH
5973: LD_INT 29
5975: PUSH
5976: LD_INT 30
5978: PUSH
5979: LD_INT 31
5981: PUSH
5982: LD_INT 32
5984: PUSH
5985: LD_INT 33
5987: PUSH
5988: LD_INT 34
5990: PUSH
5991: LD_INT 36
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 101
6033: PUSH
6034: LD_INT 102
6036: PUSH
6037: LD_INT 103
6039: PUSH
6040: LD_INT 104
6042: PUSH
6043: LD_INT 105
6045: PUSH
6046: LD_INT 106
6048: PUSH
6049: LD_INT 107
6051: PUSH
6052: LD_INT 108
6054: PUSH
6055: LD_INT 109
6057: PUSH
6058: LD_INT 110
6060: PUSH
6061: LD_INT 111
6063: PUSH
6064: LD_INT 112
6066: PUSH
6067: LD_INT 113
6069: PUSH
6070: LD_INT 114
6072: PUSH
6073: LD_INT 116
6075: PUSH
6076: LD_INT 117
6078: PUSH
6079: LD_INT 118
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: ST_TO_ADDR
6105: GO 6880
6107: LD_INT 16
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6251
6115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 7
6132: PUSH
6133: LD_INT 11
6135: PUSH
6136: LD_INT 12
6138: PUSH
6139: LD_INT 15
6141: PUSH
6142: LD_INT 16
6144: PUSH
6145: LD_INT 20
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 23
6156: PUSH
6157: LD_INT 25
6159: PUSH
6160: LD_INT 26
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 31
6168: PUSH
6169: LD_INT 32
6171: PUSH
6172: LD_INT 33
6174: PUSH
6175: LD_INT 34
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 101
6201: PUSH
6202: LD_INT 102
6204: PUSH
6205: LD_INT 103
6207: PUSH
6208: LD_INT 106
6210: PUSH
6211: LD_INT 108
6213: PUSH
6214: LD_INT 112
6216: PUSH
6217: LD_INT 113
6219: PUSH
6220: LD_INT 114
6222: PUSH
6223: LD_INT 116
6225: PUSH
6226: LD_INT 117
6228: PUSH
6229: LD_INT 118
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: ST_TO_ADDR
6249: GO 6880
6251: LD_INT 17
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6483
6259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: LD_INT 1
6267: PUSH
6268: LD_INT 2
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: LD_INT 5
6279: PUSH
6280: LD_INT 6
6282: PUSH
6283: LD_INT 7
6285: PUSH
6286: LD_INT 8
6288: PUSH
6289: LD_INT 9
6291: PUSH
6292: LD_INT 10
6294: PUSH
6295: LD_INT 11
6297: PUSH
6298: LD_INT 12
6300: PUSH
6301: LD_INT 13
6303: PUSH
6304: LD_INT 14
6306: PUSH
6307: LD_INT 15
6309: PUSH
6310: LD_INT 16
6312: PUSH
6313: LD_INT 17
6315: PUSH
6316: LD_INT 18
6318: PUSH
6319: LD_INT 19
6321: PUSH
6322: LD_INT 20
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_INT 23
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 25
6339: PUSH
6340: LD_INT 26
6342: PUSH
6343: LD_INT 27
6345: PUSH
6346: LD_INT 28
6348: PUSH
6349: LD_INT 29
6351: PUSH
6352: LD_INT 30
6354: PUSH
6355: LD_INT 31
6357: PUSH
6358: LD_INT 32
6360: PUSH
6361: LD_INT 33
6363: PUSH
6364: LD_INT 34
6366: PUSH
6367: LD_INT 36
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 101
6409: PUSH
6410: LD_INT 102
6412: PUSH
6413: LD_INT 103
6415: PUSH
6416: LD_INT 104
6418: PUSH
6419: LD_INT 105
6421: PUSH
6422: LD_INT 106
6424: PUSH
6425: LD_INT 107
6427: PUSH
6428: LD_INT 108
6430: PUSH
6431: LD_INT 109
6433: PUSH
6434: LD_INT 110
6436: PUSH
6437: LD_INT 111
6439: PUSH
6440: LD_INT 112
6442: PUSH
6443: LD_INT 113
6445: PUSH
6446: LD_INT 114
6448: PUSH
6449: LD_INT 116
6451: PUSH
6452: LD_INT 117
6454: PUSH
6455: LD_INT 118
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: ST_TO_ADDR
6481: GO 6880
6483: LD_INT 18
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6639
6491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6492: LD_ADDR_VAR 0 2
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: LD_INT 4
6502: PUSH
6503: LD_INT 5
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 33
6550: PUSH
6551: LD_INT 34
6553: PUSH
6554: LD_INT 35
6556: PUSH
6557: LD_INT 36
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 101
6585: PUSH
6586: LD_INT 102
6588: PUSH
6589: LD_INT 103
6591: PUSH
6592: LD_INT 106
6594: PUSH
6595: LD_INT 108
6597: PUSH
6598: LD_INT 112
6600: PUSH
6601: LD_INT 113
6603: PUSH
6604: LD_INT 114
6606: PUSH
6607: LD_INT 115
6609: PUSH
6610: LD_INT 116
6612: PUSH
6613: LD_INT 117
6615: PUSH
6616: LD_INT 118
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 6880
6639: LD_INT 19
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6879
6647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6648: LD_ADDR_VAR 0 2
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: LD_INT 6
6670: PUSH
6671: LD_INT 7
6673: PUSH
6674: LD_INT 8
6676: PUSH
6677: LD_INT 9
6679: PUSH
6680: LD_INT 10
6682: PUSH
6683: LD_INT 11
6685: PUSH
6686: LD_INT 12
6688: PUSH
6689: LD_INT 13
6691: PUSH
6692: LD_INT 14
6694: PUSH
6695: LD_INT 15
6697: PUSH
6698: LD_INT 16
6700: PUSH
6701: LD_INT 17
6703: PUSH
6704: LD_INT 18
6706: PUSH
6707: LD_INT 19
6709: PUSH
6710: LD_INT 20
6712: PUSH
6713: LD_INT 21
6715: PUSH
6716: LD_INT 22
6718: PUSH
6719: LD_INT 23
6721: PUSH
6722: LD_INT 24
6724: PUSH
6725: LD_INT 25
6727: PUSH
6728: LD_INT 26
6730: PUSH
6731: LD_INT 27
6733: PUSH
6734: LD_INT 28
6736: PUSH
6737: LD_INT 29
6739: PUSH
6740: LD_INT 30
6742: PUSH
6743: LD_INT 31
6745: PUSH
6746: LD_INT 32
6748: PUSH
6749: LD_INT 33
6751: PUSH
6752: LD_INT 34
6754: PUSH
6755: LD_INT 35
6757: PUSH
6758: LD_INT 36
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 101
6801: PUSH
6802: LD_INT 102
6804: PUSH
6805: LD_INT 103
6807: PUSH
6808: LD_INT 104
6810: PUSH
6811: LD_INT 105
6813: PUSH
6814: LD_INT 106
6816: PUSH
6817: LD_INT 107
6819: PUSH
6820: LD_INT 108
6822: PUSH
6823: LD_INT 109
6825: PUSH
6826: LD_INT 110
6828: PUSH
6829: LD_INT 111
6831: PUSH
6832: LD_INT 112
6834: PUSH
6835: LD_INT 113
6837: PUSH
6838: LD_INT 114
6840: PUSH
6841: LD_INT 115
6843: PUSH
6844: LD_INT 116
6846: PUSH
6847: LD_INT 117
6849: PUSH
6850: LD_INT 118
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 6880
6879: POP
// end else
6880: GO 7111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: LD_INT 6
6904: PUSH
6905: LD_INT 7
6907: PUSH
6908: LD_INT 8
6910: PUSH
6911: LD_INT 9
6913: PUSH
6914: LD_INT 10
6916: PUSH
6917: LD_INT 11
6919: PUSH
6920: LD_INT 12
6922: PUSH
6923: LD_INT 13
6925: PUSH
6926: LD_INT 14
6928: PUSH
6929: LD_INT 15
6931: PUSH
6932: LD_INT 16
6934: PUSH
6935: LD_INT 17
6937: PUSH
6938: LD_INT 18
6940: PUSH
6941: LD_INT 19
6943: PUSH
6944: LD_INT 20
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 22
6952: PUSH
6953: LD_INT 23
6955: PUSH
6956: LD_INT 24
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 26
6964: PUSH
6965: LD_INT 27
6967: PUSH
6968: LD_INT 28
6970: PUSH
6971: LD_INT 29
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: LD_INT 32
6982: PUSH
6983: LD_INT 33
6985: PUSH
6986: LD_INT 34
6988: PUSH
6989: LD_INT 35
6991: PUSH
6992: LD_INT 36
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 101
7035: PUSH
7036: LD_INT 102
7038: PUSH
7039: LD_INT 103
7041: PUSH
7042: LD_INT 104
7044: PUSH
7045: LD_INT 105
7047: PUSH
7048: LD_INT 106
7050: PUSH
7051: LD_INT 107
7053: PUSH
7054: LD_INT 108
7056: PUSH
7057: LD_INT 109
7059: PUSH
7060: LD_INT 110
7062: PUSH
7063: LD_INT 111
7065: PUSH
7066: LD_INT 112
7068: PUSH
7069: LD_INT 113
7071: PUSH
7072: LD_INT 114
7074: PUSH
7075: LD_INT 115
7077: PUSH
7078: LD_INT 116
7080: PUSH
7081: LD_INT 117
7083: PUSH
7084: LD_INT 118
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: ST_TO_ADDR
// if result then
7111: LD_VAR 0 2
7115: IFFALSE 7901
// begin normal :=  ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_STRING 
7124: ST_TO_ADDR
// hardcore :=  ;
7125: LD_ADDR_VAR 0 6
7129: PUSH
7130: LD_STRING 
7132: ST_TO_ADDR
// active :=  ;
7133: LD_ADDR_VAR 0 7
7137: PUSH
7138: LD_STRING 
7140: ST_TO_ADDR
// for i = 1 to normalCounter do
7141: LD_ADDR_VAR 0 8
7145: PUSH
7146: DOUBLE
7147: LD_INT 1
7149: DEC
7150: ST_TO_ADDR
7151: LD_EXP 9
7155: PUSH
7156: FOR_TO
7157: IFFALSE 7258
// begin tmp := 0 ;
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_STRING 0
7166: ST_TO_ADDR
// if result [ 1 ] then
7167: LD_VAR 0 2
7171: PUSH
7172: LD_INT 1
7174: ARRAY
7175: IFFALSE 7240
// if result [ 1 ] [ 1 ] = i then
7177: LD_VAR 0 2
7181: PUSH
7182: LD_INT 1
7184: ARRAY
7185: PUSH
7186: LD_INT 1
7188: ARRAY
7189: PUSH
7190: LD_VAR 0 8
7194: EQUAL
7195: IFFALSE 7240
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_VAR 0 2
7214: PUSH
7215: LD_INT 1
7217: ARRAY
7218: PPUSH
7219: LD_INT 1
7221: PPUSH
7222: CALL_OW 3
7226: PPUSH
7227: CALL_OW 1
7231: ST_TO_ADDR
// tmp := 1 ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 1
7239: ST_TO_ADDR
// end ; normal := normal & tmp ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_VAR 0 5
7249: PUSH
7250: LD_VAR 0 3
7254: STR
7255: ST_TO_ADDR
// end ;
7256: GO 7156
7258: POP
7259: POP
// for i = 1 to hardcoreCounter do
7260: LD_ADDR_VAR 0 8
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_EXP 10
7274: PUSH
7275: FOR_TO
7276: IFFALSE 7381
// begin tmp := 0 ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_STRING 0
7285: ST_TO_ADDR
// if result [ 2 ] then
7286: LD_VAR 0 2
7290: PUSH
7291: LD_INT 2
7293: ARRAY
7294: IFFALSE 7363
// if result [ 2 ] [ 1 ] = 100 + i then
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 2
7303: ARRAY
7304: PUSH
7305: LD_INT 1
7307: ARRAY
7308: PUSH
7309: LD_INT 100
7311: PUSH
7312: LD_VAR 0 8
7316: PLUS
7317: EQUAL
7318: IFFALSE 7363
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: LD_VAR 0 2
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: PPUSH
7342: LD_INT 1
7344: PPUSH
7345: CALL_OW 3
7349: PPUSH
7350: CALL_OW 1
7354: ST_TO_ADDR
// tmp := 1 ;
7355: LD_ADDR_VAR 0 3
7359: PUSH
7360: LD_STRING 1
7362: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7363: LD_ADDR_VAR 0 6
7367: PUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_VAR 0 3
7377: STR
7378: ST_TO_ADDR
// end ;
7379: GO 7275
7381: POP
7382: POP
// if isGameLoad then
7383: LD_VAR 0 1
7387: IFFALSE 7862
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_EXP 13
7398: PUSH
7399: LD_EXP 12
7403: PUSH
7404: LD_EXP 14
7408: PUSH
7409: LD_EXP 11
7413: PUSH
7414: LD_EXP 15
7418: PUSH
7419: LD_EXP 16
7423: PUSH
7424: LD_EXP 17
7428: PUSH
7429: LD_EXP 18
7433: PUSH
7434: LD_EXP 19
7438: PUSH
7439: LD_EXP 20
7443: PUSH
7444: LD_EXP 21
7448: PUSH
7449: LD_EXP 22
7453: PUSH
7454: LD_EXP 23
7458: PUSH
7459: LD_EXP 24
7463: PUSH
7464: LD_EXP 32
7468: PUSH
7469: LD_EXP 33
7473: PUSH
7474: LD_EXP 34
7478: PUSH
7479: LD_EXP 35
7483: PUSH
7484: LD_EXP 37
7488: PUSH
7489: LD_EXP 38
7493: PUSH
7494: LD_EXP 39
7498: PUSH
7499: LD_EXP 42
7503: PUSH
7504: LD_EXP 44
7508: PUSH
7509: LD_EXP 45
7513: PUSH
7514: LD_EXP 46
7518: PUSH
7519: LD_EXP 48
7523: PUSH
7524: LD_EXP 49
7528: PUSH
7529: LD_EXP 52
7533: PUSH
7534: LD_EXP 53
7538: PUSH
7539: LD_EXP 54
7543: PUSH
7544: LD_EXP 55
7548: PUSH
7549: LD_EXP 56
7553: PUSH
7554: LD_EXP 57
7558: PUSH
7559: LD_EXP 58
7563: PUSH
7564: LD_EXP 59
7568: PUSH
7569: LD_EXP 60
7573: PUSH
7574: LD_EXP 25
7578: PUSH
7579: LD_EXP 26
7583: PUSH
7584: LD_EXP 29
7588: PUSH
7589: LD_EXP 30
7593: PUSH
7594: LD_EXP 31
7598: PUSH
7599: LD_EXP 27
7603: PUSH
7604: LD_EXP 28
7608: PUSH
7609: LD_EXP 36
7613: PUSH
7614: LD_EXP 40
7618: PUSH
7619: LD_EXP 41
7623: PUSH
7624: LD_EXP 43
7628: PUSH
7629: LD_EXP 47
7633: PUSH
7634: LD_EXP 50
7638: PUSH
7639: LD_EXP 51
7643: PUSH
7644: LD_EXP 61
7648: PUSH
7649: LD_EXP 62
7653: PUSH
7654: LD_EXP 63
7658: PUSH
7659: LD_EXP 64
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// tmp :=  ;
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// for i = 1 to normalCounter do
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: DOUBLE
7734: LD_INT 1
7736: DEC
7737: ST_TO_ADDR
7738: LD_EXP 9
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7780
// begin if flags [ i ] then
7746: LD_VAR 0 4
7750: PUSH
7751: LD_VAR 0 8
7755: ARRAY
7756: IFFALSE 7778
// tmp := tmp & i & ; ;
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_VAR 0 3
7767: PUSH
7768: LD_VAR 0 8
7772: STR
7773: PUSH
7774: LD_STRING ;
7776: STR
7777: ST_TO_ADDR
// end ;
7778: GO 7743
7780: POP
7781: POP
// for i = 1 to hardcoreCounter do
7782: LD_ADDR_VAR 0 8
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_EXP 10
7796: PUSH
7797: FOR_TO
7798: IFFALSE 7844
// begin if flags [ normalCounter + i ] then
7800: LD_VAR 0 4
7804: PUSH
7805: LD_EXP 9
7809: PUSH
7810: LD_VAR 0 8
7814: PLUS
7815: ARRAY
7816: IFFALSE 7842
// tmp := tmp & ( 100 + i ) & ; ;
7818: LD_ADDR_VAR 0 3
7822: PUSH
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 100
7830: PUSH
7831: LD_VAR 0 8
7835: PLUS
7836: STR
7837: PUSH
7838: LD_STRING ;
7840: STR
7841: ST_TO_ADDR
// end ;
7842: GO 7797
7844: POP
7845: POP
// if tmp then
7846: LD_VAR 0 3
7850: IFFALSE 7862
// active := tmp ;
7852: LD_ADDR_VAR 0 7
7856: PUSH
7857: LD_VAR 0 3
7861: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7862: LD_STRING getStreamItemsFromMission("
7864: PUSH
7865: LD_VAR 0 5
7869: STR
7870: PUSH
7871: LD_STRING ","
7873: STR
7874: PUSH
7875: LD_VAR 0 6
7879: STR
7880: PUSH
7881: LD_STRING ","
7883: STR
7884: PUSH
7885: LD_VAR 0 7
7889: STR
7890: PUSH
7891: LD_STRING ")
7893: STR
7894: PPUSH
7895: CALL_OW 559
// end else
7899: GO 7908
// ToLua ( getStreamItemsFromMission("","","") ) ;
7901: LD_STRING getStreamItemsFromMission("","","")
7903: PPUSH
7904: CALL_OW 559
// end ;
7908: LD_VAR 0 2
7912: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7913: LD_EXP 8
7917: PUSH
7918: LD_EXP 13
7922: AND
7923: IFFALSE 8047
7925: GO 7927
7927: DISABLE
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
// begin enable ;
7932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_INT 22
7940: PUSH
7941: LD_OWVAR 2
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 34
7955: PUSH
7956: LD_INT 7
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 34
7965: PUSH
7966: LD_INT 45
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 34
7975: PUSH
7976: LD_INT 28
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 34
7985: PUSH
7986: LD_INT 47
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 69
8008: ST_TO_ADDR
// if not tmp then
8009: LD_VAR 0 2
8013: NOT
8014: IFFALSE 8018
// exit ;
8016: GO 8047
// for i in tmp do
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8045
// begin SetLives ( i , 0 ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 0
8038: PPUSH
8039: CALL_OW 234
// end ;
8043: GO 8028
8045: POP
8046: POP
// end ;
8047: PPOPN 2
8049: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8050: LD_EXP 8
8054: PUSH
8055: LD_EXP 14
8059: AND
8060: IFFALSE 8144
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
// begin enable ;
8069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8070: LD_ADDR_VAR 0 2
8074: PUSH
8075: LD_INT 22
8077: PUSH
8078: LD_OWVAR 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 32
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: ST_TO_ADDR
// if not tmp then
8106: LD_VAR 0 2
8110: NOT
8111: IFFALSE 8115
// exit ;
8113: GO 8144
// for i in tmp do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 2
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8142
// begin SetLives ( i , 0 ) ;
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 0
8135: PPUSH
8136: CALL_OW 234
// end ;
8140: GO 8125
8142: POP
8143: POP
// end ;
8144: PPOPN 2
8146: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8147: LD_EXP 8
8151: PUSH
8152: LD_EXP 11
8156: AND
8157: IFFALSE 8250
8159: GO 8161
8161: DISABLE
8162: LD_INT 0
8164: PPUSH
// begin enable ;
8165: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8166: LD_ADDR_VAR 0 1
8170: PUSH
8171: LD_INT 22
8173: PUSH
8174: LD_OWVAR 2
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 5
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 25
8198: PUSH
8199: LD_INT 9
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 25
8208: PUSH
8209: LD_INT 8
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8248
// begin SetClass ( i , 1 ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: CALL_OW 336
// end ;
8246: GO 8231
8248: POP
8249: POP
// end ;
8250: PPOPN 1
8252: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8253: LD_EXP 8
8257: PUSH
8258: LD_EXP 12
8262: AND
8263: PUSH
8264: LD_OWVAR 65
8268: PUSH
8269: LD_INT 7
8271: LESS
8272: AND
8273: IFFALSE 8287
8275: GO 8277
8277: DISABLE
// begin enable ;
8278: ENABLE
// game_speed := 7 ;
8279: LD_ADDR_OWVAR 65
8283: PUSH
8284: LD_INT 7
8286: ST_TO_ADDR
// end ;
8287: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8288: LD_EXP 8
8292: PUSH
8293: LD_EXP 15
8297: AND
8298: IFFALSE 8500
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_INT 81
8315: PUSH
8316: LD_OWVAR 2
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 21
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 3
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8500
// if tmp > 5 then
8353: LD_VAR 0 3
8357: PUSH
8358: LD_INT 5
8360: GREATER
8361: IFFALSE 8373
// k := 5 else
8363: LD_ADDR_VAR 0 2
8367: PUSH
8368: LD_INT 5
8370: ST_TO_ADDR
8371: GO 8383
// k := tmp ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_VAR 0 3
8382: ST_TO_ADDR
// for i := 1 to k do
8383: LD_ADDR_VAR 0 1
8387: PUSH
8388: DOUBLE
8389: LD_INT 1
8391: DEC
8392: ST_TO_ADDR
8393: LD_VAR 0 2
8397: PUSH
8398: FOR_TO
8399: IFFALSE 8498
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_VAR 0 1
8410: ARRAY
8411: PPUSH
8412: LD_VAR 0 1
8416: PUSH
8417: LD_INT 4
8419: MOD
8420: PUSH
8421: LD_INT 1
8423: PLUS
8424: PPUSH
8425: CALL_OW 259
8429: PUSH
8430: LD_INT 10
8432: LESS
8433: IFFALSE 8496
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8435: LD_VAR 0 3
8439: PUSH
8440: LD_VAR 0 1
8444: ARRAY
8445: PPUSH
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 4
8453: MOD
8454: PUSH
8455: LD_INT 1
8457: PLUS
8458: PPUSH
8459: LD_VAR 0 3
8463: PUSH
8464: LD_VAR 0 1
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 1
8474: PUSH
8475: LD_INT 4
8477: MOD
8478: PUSH
8479: LD_INT 1
8481: PLUS
8482: PPUSH
8483: CALL_OW 259
8487: PUSH
8488: LD_INT 1
8490: PLUS
8491: PPUSH
8492: CALL_OW 237
8496: GO 8398
8498: POP
8499: POP
// end ;
8500: PPOPN 3
8502: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8503: LD_EXP 8
8507: PUSH
8508: LD_EXP 16
8512: AND
8513: IFFALSE 8533
8515: GO 8517
8517: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8518: LD_INT 4
8520: PPUSH
8521: LD_OWVAR 2
8525: PPUSH
8526: LD_INT 0
8528: PPUSH
8529: CALL_OW 324
8533: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8534: LD_EXP 8
8538: PUSH
8539: LD_EXP 45
8543: AND
8544: IFFALSE 8564
8546: GO 8548
8548: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8549: LD_INT 19
8551: PPUSH
8552: LD_OWVAR 2
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL_OW 324
8564: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8565: LD_EXP 8
8569: PUSH
8570: LD_EXP 17
8574: AND
8575: IFFALSE 8677
8577: GO 8579
8579: DISABLE
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
// begin enable ;
8584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_OWVAR 2
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 2
8604: PUSH
8605: LD_INT 34
8607: PUSH
8608: LD_INT 11
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 34
8617: PUSH
8618: LD_INT 30
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 69
8638: ST_TO_ADDR
// if not tmp then
8639: LD_VAR 0 2
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8677
// for i in tmp do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: LD_VAR 0 2
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8675
// begin SetLives ( i , 0 ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: LD_INT 0
8668: PPUSH
8669: CALL_OW 234
// end ;
8673: GO 8658
8675: POP
8676: POP
// end ;
8677: PPOPN 2
8679: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8680: LD_EXP 8
8684: PUSH
8685: LD_EXP 18
8689: AND
8690: IFFALSE 8710
8692: GO 8694
8694: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8695: LD_INT 32
8697: PPUSH
8698: LD_OWVAR 2
8702: PPUSH
8703: LD_INT 0
8705: PPUSH
8706: CALL_OW 324
8710: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8711: LD_EXP 8
8715: PUSH
8716: LD_EXP 19
8720: AND
8721: IFFALSE 8902
8723: GO 8725
8725: DISABLE
8726: LD_INT 0
8728: PPUSH
8729: PPUSH
8730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: LD_INT 22
8738: PUSH
8739: LD_OWVAR 2
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 33
8750: PUSH
8751: LD_INT 3
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: ST_TO_ADDR
// if not tmp then
8767: LD_VAR 0 2
8771: NOT
8772: IFFALSE 8776
// exit ;
8774: GO 8902
// side := 0 ;
8776: LD_ADDR_VAR 0 3
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// for i := 1 to 8 do
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: DOUBLE
8790: LD_INT 1
8792: DEC
8793: ST_TO_ADDR
8794: LD_INT 8
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8846
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8800: LD_OWVAR 2
8804: PUSH
8805: LD_VAR 0 1
8809: NONEQUAL
8810: PUSH
8811: LD_OWVAR 2
8815: PPUSH
8816: LD_VAR 0 1
8820: PPUSH
8821: CALL_OW 81
8825: PUSH
8826: LD_INT 2
8828: EQUAL
8829: AND
8830: IFFALSE 8844
// begin side := i ;
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_VAR 0 1
8841: ST_TO_ADDR
// break ;
8842: GO 8846
// end ;
8844: GO 8797
8846: POP
8847: POP
// if not side then
8848: LD_VAR 0 3
8852: NOT
8853: IFFALSE 8857
// exit ;
8855: GO 8902
// for i := 1 to tmp do
8857: LD_ADDR_VAR 0 1
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_VAR 0 2
8871: PUSH
8872: FOR_TO
8873: IFFALSE 8900
// if Prob ( 60 ) then
8875: LD_INT 60
8877: PPUSH
8878: CALL_OW 13
8882: IFFALSE 8898
// SetSide ( i , side ) ;
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_VAR 0 3
8893: PPUSH
8894: CALL_OW 235
8898: GO 8872
8900: POP
8901: POP
// end ;
8902: PPOPN 3
8904: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8905: LD_EXP 8
8909: PUSH
8910: LD_EXP 21
8914: AND
8915: IFFALSE 9034
8917: GO 8919
8919: DISABLE
8920: LD_INT 0
8922: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_OWVAR 2
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 21
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: LD_INT 23
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 69
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9032
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 257
8989: PUSH
8990: LD_INT 1
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: LD_INT 4
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: IN
9008: IFFALSE 9030
// SetClass ( un , rand ( 1 , 4 ) ) ;
9010: LD_VAR 0 1
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_INT 4
9020: PPUSH
9021: CALL_OW 12
9025: PPUSH
9026: CALL_OW 336
9030: GO 8977
9032: POP
9033: POP
// end ;
9034: PPOPN 1
9036: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9037: LD_EXP 8
9041: PUSH
9042: LD_EXP 20
9046: AND
9047: IFFALSE 9126
9049: GO 9051
9051: DISABLE
9052: LD_INT 0
9054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9055: LD_ADDR_VAR 0 1
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_OWVAR 2
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 21
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PPUSH
9086: CALL_OW 69
9090: ST_TO_ADDR
// if not tmp then
9091: LD_VAR 0 1
9095: NOT
9096: IFFALSE 9100
// exit ;
9098: GO 9126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9100: LD_VAR 0 1
9104: PUSH
9105: LD_INT 1
9107: PPUSH
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 12
9117: ARRAY
9118: PPUSH
9119: LD_INT 100
9121: PPUSH
9122: CALL_OW 234
// end ;
9126: PPOPN 1
9128: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9129: LD_EXP 8
9133: PUSH
9134: LD_EXP 22
9138: AND
9139: IFFALSE 9237
9141: GO 9143
9143: DISABLE
9144: LD_INT 0
9146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9147: LD_ADDR_VAR 0 1
9151: PUSH
9152: LD_INT 22
9154: PUSH
9155: LD_OWVAR 2
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 21
9166: PUSH
9167: LD_INT 1
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PPUSH
9178: CALL_OW 69
9182: ST_TO_ADDR
// if not tmp then
9183: LD_VAR 0 1
9187: NOT
9188: IFFALSE 9192
// exit ;
9190: GO 9237
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9192: LD_VAR 0 1
9196: PUSH
9197: LD_INT 1
9199: PPUSH
9200: LD_VAR 0 1
9204: PPUSH
9205: CALL_OW 12
9209: ARRAY
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: LD_INT 4
9216: PPUSH
9217: CALL_OW 12
9221: PPUSH
9222: LD_INT 3000
9224: PPUSH
9225: LD_INT 9000
9227: PPUSH
9228: CALL_OW 12
9232: PPUSH
9233: CALL_OW 492
// end ;
9237: PPOPN 1
9239: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9240: LD_EXP 8
9244: PUSH
9245: LD_EXP 23
9249: AND
9250: IFFALSE 9270
9252: GO 9254
9254: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9255: LD_INT 1
9257: PPUSH
9258: LD_OWVAR 2
9262: PPUSH
9263: LD_INT 0
9265: PPUSH
9266: CALL_OW 324
9270: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9271: LD_EXP 8
9275: PUSH
9276: LD_EXP 24
9280: AND
9281: IFFALSE 9364
9283: GO 9285
9285: DISABLE
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9290: LD_ADDR_VAR 0 2
9294: PUSH
9295: LD_INT 22
9297: PUSH
9298: LD_OWVAR 2
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PPUSH
9321: CALL_OW 69
9325: ST_TO_ADDR
// if not tmp then
9326: LD_VAR 0 2
9330: NOT
9331: IFFALSE 9335
// exit ;
9333: GO 9364
// for i in tmp do
9335: LD_ADDR_VAR 0 1
9339: PUSH
9340: LD_VAR 0 2
9344: PUSH
9345: FOR_IN
9346: IFFALSE 9362
// SetBLevel ( i , 10 ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 10
9355: PPUSH
9356: CALL_OW 241
9360: GO 9345
9362: POP
9363: POP
// end ;
9364: PPOPN 2
9366: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9367: LD_EXP 8
9371: PUSH
9372: LD_EXP 25
9376: AND
9377: IFFALSE 9488
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_OWVAR 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 25
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 69
9422: ST_TO_ADDR
// if not tmp then
9423: LD_VAR 0 3
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9488
// un := tmp [ rand ( 1 , tmp ) ] ;
9432: LD_ADDR_VAR 0 2
9436: PUSH
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 1
9444: PPUSH
9445: LD_VAR 0 3
9449: PPUSH
9450: CALL_OW 12
9454: ARRAY
9455: ST_TO_ADDR
// if Crawls ( un ) then
9456: LD_VAR 0 2
9460: PPUSH
9461: CALL_OW 318
9465: IFFALSE 9476
// ComWalk ( un ) ;
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9476: LD_VAR 0 2
9480: PPUSH
9481: LD_INT 5
9483: PPUSH
9484: CALL_OW 336
// end ;
9488: PPOPN 3
9490: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9491: LD_EXP 8
9495: PUSH
9496: LD_EXP 26
9500: AND
9501: PUSH
9502: LD_OWVAR 67
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: AND
9511: IFFALSE 9530
9513: GO 9515
9515: DISABLE
// begin Difficulty := Difficulty + 1 ;
9516: LD_ADDR_OWVAR 67
9520: PUSH
9521: LD_OWVAR 67
9525: PUSH
9526: LD_INT 1
9528: PLUS
9529: ST_TO_ADDR
// end ;
9530: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9531: LD_EXP 8
9535: PUSH
9536: LD_EXP 27
9540: AND
9541: IFFALSE 9644
9543: GO 9545
9545: DISABLE
9546: LD_INT 0
9548: PPUSH
// begin for i := 1 to 5 do
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: DOUBLE
9555: LD_INT 1
9557: DEC
9558: ST_TO_ADDR
9559: LD_INT 5
9561: PUSH
9562: FOR_TO
9563: IFFALSE 9642
// begin uc_nation := nation_nature ;
9565: LD_ADDR_OWVAR 21
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// uc_side := 0 ;
9573: LD_ADDR_OWVAR 20
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9581: LD_ADDR_OWVAR 29
9585: PUSH
9586: LD_INT 12
9588: PUSH
9589: LD_INT 12
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: ST_TO_ADDR
// hc_agressivity := 20 ;
9596: LD_ADDR_OWVAR 35
9600: PUSH
9601: LD_INT 20
9603: ST_TO_ADDR
// hc_class := class_tiger ;
9604: LD_ADDR_OWVAR 28
9608: PUSH
9609: LD_INT 14
9611: ST_TO_ADDR
// hc_gallery :=  ;
9612: LD_ADDR_OWVAR 33
9616: PUSH
9617: LD_STRING 
9619: ST_TO_ADDR
// hc_name :=  ;
9620: LD_ADDR_OWVAR 26
9624: PUSH
9625: LD_STRING 
9627: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9628: CALL_OW 44
9632: PPUSH
9633: LD_INT 0
9635: PPUSH
9636: CALL_OW 51
// end ;
9640: GO 9562
9642: POP
9643: POP
// end ;
9644: PPOPN 1
9646: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9647: LD_EXP 8
9651: PUSH
9652: LD_EXP 28
9656: AND
9657: IFFALSE 9666
9659: GO 9661
9661: DISABLE
// StreamSibBomb ;
9662: CALL 9667 0 0
9666: END
// export function StreamSibBomb ; var i , x , y ; begin
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
// result := false ;
9673: LD_ADDR_VAR 0 1
9677: PUSH
9678: LD_INT 0
9680: ST_TO_ADDR
// for i := 1 to 16 do
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: DOUBLE
9687: LD_INT 1
9689: DEC
9690: ST_TO_ADDR
9691: LD_INT 16
9693: PUSH
9694: FOR_TO
9695: IFFALSE 9894
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: LD_INT 10
9704: PUSH
9705: LD_INT 20
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 40
9713: PUSH
9714: LD_INT 50
9716: PUSH
9717: LD_INT 60
9719: PUSH
9720: LD_INT 70
9722: PUSH
9723: LD_INT 80
9725: PUSH
9726: LD_INT 90
9728: PUSH
9729: LD_INT 100
9731: PUSH
9732: LD_INT 110
9734: PUSH
9735: LD_INT 120
9737: PUSH
9738: LD_INT 130
9740: PUSH
9741: LD_INT 140
9743: PUSH
9744: LD_INT 150
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 1
9766: PPUSH
9767: LD_INT 15
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9776: LD_ADDR_VAR 0 4
9780: PUSH
9781: LD_INT 10
9783: PUSH
9784: LD_INT 20
9786: PUSH
9787: LD_INT 30
9789: PUSH
9790: LD_INT 40
9792: PUSH
9793: LD_INT 50
9795: PUSH
9796: LD_INT 60
9798: PUSH
9799: LD_INT 70
9801: PUSH
9802: LD_INT 80
9804: PUSH
9805: LD_INT 90
9807: PUSH
9808: LD_INT 100
9810: PUSH
9811: LD_INT 110
9813: PUSH
9814: LD_INT 120
9816: PUSH
9817: LD_INT 130
9819: PUSH
9820: LD_INT 140
9822: PUSH
9823: LD_INT 150
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 1
9845: PPUSH
9846: LD_INT 15
9848: PPUSH
9849: CALL_OW 12
9853: ARRAY
9854: ST_TO_ADDR
// if ValidHex ( x , y ) then
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 488
9869: IFFALSE 9892
// begin result := [ x , y ] ;
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_VAR 0 3
9880: PUSH
9881: LD_VAR 0 4
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: ST_TO_ADDR
// break ;
9890: GO 9894
// end ; end ;
9892: GO 9694
9894: POP
9895: POP
// if result then
9896: LD_VAR 0 1
9900: IFFALSE 9960
// begin ToLua ( playSibBomb() ) ;
9902: LD_STRING playSibBomb()
9904: PPUSH
9905: CALL_OW 559
// wait ( 0 0$14 ) ;
9909: LD_INT 490
9911: PPUSH
9912: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9916: LD_VAR 0 1
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PPUSH
9925: LD_VAR 0 1
9929: PUSH
9930: LD_INT 2
9932: ARRAY
9933: PPUSH
9934: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 1
9945: ARRAY
9946: PPUSH
9947: LD_VAR 0 1
9951: PUSH
9952: LD_INT 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 429
// end ; end ;
9960: LD_VAR 0 1
9964: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9965: LD_EXP 8
9969: PUSH
9970: LD_EXP 30
9974: AND
9975: IFFALSE 9987
9977: GO 9979
9979: DISABLE
// YouLost (  ) ;
9980: LD_STRING 
9982: PPUSH
9983: CALL_OW 104
9987: END
// every 0 0$1 trigger StreamModeActive and sFog do
9988: LD_EXP 8
9992: PUSH
9993: LD_EXP 29
9997: AND
9998: IFFALSE 10012
10000: GO 10002
10002: DISABLE
// FogOff ( your_side ) ;
10003: LD_OWVAR 2
10007: PPUSH
10008: CALL_OW 344
10012: END
// every 0 0$1 trigger StreamModeActive and sSun do
10013: LD_EXP 8
10017: PUSH
10018: LD_EXP 31
10022: AND
10023: IFFALSE 10051
10025: GO 10027
10027: DISABLE
// begin solar_recharge_percent := 0 ;
10028: LD_ADDR_OWVAR 79
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10036: LD_INT 10500
10038: PPUSH
10039: CALL_OW 67
// solar_recharge_percent := 100 ;
10043: LD_ADDR_OWVAR 79
10047: PUSH
10048: LD_INT 100
10050: ST_TO_ADDR
// end ;
10051: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10052: LD_EXP 8
10056: PUSH
10057: LD_EXP 32
10061: AND
10062: IFFALSE 10301
10064: GO 10066
10066: DISABLE
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
// begin tmp := [ ] ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: EMPTY
10078: ST_TO_ADDR
// for i := 1 to 6 do
10079: LD_ADDR_VAR 0 1
10083: PUSH
10084: DOUBLE
10085: LD_INT 1
10087: DEC
10088: ST_TO_ADDR
10089: LD_INT 6
10091: PUSH
10092: FOR_TO
10093: IFFALSE 10198
// begin uc_nation := nation_nature ;
10095: LD_ADDR_OWVAR 21
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_side := 0 ;
10103: LD_ADDR_OWVAR 20
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10111: LD_ADDR_OWVAR 29
10115: PUSH
10116: LD_INT 12
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: ST_TO_ADDR
// hc_agressivity := 20 ;
10126: LD_ADDR_OWVAR 35
10130: PUSH
10131: LD_INT 20
10133: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10134: LD_ADDR_OWVAR 28
10138: PUSH
10139: LD_INT 17
10141: ST_TO_ADDR
// hc_gallery :=  ;
10142: LD_ADDR_OWVAR 33
10146: PUSH
10147: LD_STRING 
10149: ST_TO_ADDR
// hc_name :=  ;
10150: LD_ADDR_OWVAR 26
10154: PUSH
10155: LD_STRING 
10157: ST_TO_ADDR
// un := CreateHuman ;
10158: LD_ADDR_VAR 0 2
10162: PUSH
10163: CALL_OW 44
10167: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10168: LD_VAR 0 2
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 51
// tmp := tmp ^ un ;
10180: LD_ADDR_VAR 0 3
10184: PUSH
10185: LD_VAR 0 3
10189: PUSH
10190: LD_VAR 0 2
10194: ADD
10195: ST_TO_ADDR
// end ;
10196: GO 10092
10198: POP
10199: POP
// repeat wait ( 0 0$1 ) ;
10200: LD_INT 35
10202: PPUSH
10203: CALL_OW 67
// for un in tmp do
10207: LD_ADDR_VAR 0 2
10211: PUSH
10212: LD_VAR 0 3
10216: PUSH
10217: FOR_IN
10218: IFFALSE 10292
// begin if IsDead ( un ) then
10220: LD_VAR 0 2
10224: PPUSH
10225: CALL_OW 301
10229: IFFALSE 10249
// begin tmp := tmp diff un ;
10231: LD_ADDR_VAR 0 3
10235: PUSH
10236: LD_VAR 0 3
10240: PUSH
10241: LD_VAR 0 2
10245: DIFF
10246: ST_TO_ADDR
// continue ;
10247: GO 10217
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_INT 3
10256: PUSH
10257: LD_INT 22
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 69
10275: PPUSH
10276: LD_VAR 0 2
10280: PPUSH
10281: CALL_OW 74
10285: PPUSH
10286: CALL_OW 115
// end ;
10290: GO 10217
10292: POP
10293: POP
// until not tmp ;
10294: LD_VAR 0 3
10298: NOT
10299: IFFALSE 10200
// end ;
10301: PPOPN 3
10303: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10304: LD_EXP 8
10308: PUSH
10309: LD_EXP 33
10313: AND
10314: IFFALSE 10368
10316: GO 10318
10318: DISABLE
// begin ToLua ( displayTroll(); ) ;
10319: LD_STRING displayTroll();
10321: PPUSH
10322: CALL_OW 559
// wait ( 3 3$00 ) ;
10326: LD_INT 6300
10328: PPUSH
10329: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10333: LD_STRING hideTroll();
10335: PPUSH
10336: CALL_OW 559
// wait ( 1 1$00 ) ;
10340: LD_INT 2100
10342: PPUSH
10343: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10347: LD_STRING displayTroll();
10349: PPUSH
10350: CALL_OW 559
// wait ( 1 1$00 ) ;
10354: LD_INT 2100
10356: PPUSH
10357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10361: LD_STRING hideTroll();
10363: PPUSH
10364: CALL_OW 559
// end ;
10368: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10369: LD_EXP 8
10373: PUSH
10374: LD_EXP 34
10378: AND
10379: IFFALSE 10442
10381: GO 10383
10383: DISABLE
10384: LD_INT 0
10386: PPUSH
// begin p := 0 ;
10387: LD_ADDR_VAR 0 1
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
// repeat game_speed := 1 ;
10395: LD_ADDR_OWVAR 65
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10403: LD_INT 35
10405: PPUSH
10406: CALL_OW 67
// p := p + 1 ;
10410: LD_ADDR_VAR 0 1
10414: PUSH
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 1
10422: PLUS
10423: ST_TO_ADDR
// until p >= 60 ;
10424: LD_VAR 0 1
10428: PUSH
10429: LD_INT 60
10431: GREATEREQUAL
10432: IFFALSE 10395
// game_speed := 4 ;
10434: LD_ADDR_OWVAR 65
10438: PUSH
10439: LD_INT 4
10441: ST_TO_ADDR
// end ;
10442: PPOPN 1
10444: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10445: LD_EXP 8
10449: PUSH
10450: LD_EXP 35
10454: AND
10455: IFFALSE 10601
10457: GO 10459
10459: DISABLE
10460: LD_INT 0
10462: PPUSH
10463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_OWVAR 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: LD_INT 30
10486: PUSH
10487: LD_INT 0
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 69
10517: ST_TO_ADDR
// if not depot then
10518: LD_VAR 0 1
10522: NOT
10523: IFFALSE 10527
// exit ;
10525: GO 10601
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10527: LD_ADDR_VAR 0 2
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: LD_INT 1
10539: PPUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL_OW 12
10549: ARRAY
10550: PPUSH
10551: CALL_OW 274
10555: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10556: LD_VAR 0 2
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: LD_INT 0
10566: PPUSH
10567: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10571: LD_VAR 0 2
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: LD_INT 3
10593: PPUSH
10594: LD_INT 0
10596: PPUSH
10597: CALL_OW 277
// end ;
10601: PPOPN 2
10603: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10604: LD_EXP 8
10608: PUSH
10609: LD_EXP 36
10613: AND
10614: IFFALSE 10711
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10622: LD_ADDR_VAR 0 1
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_OWVAR 2
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 21
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 3
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: PPUSH
10671: CALL_OW 69
10675: ST_TO_ADDR
// if not tmp then
10676: LD_VAR 0 1
10680: NOT
10681: IFFALSE 10685
// exit ;
10683: GO 10711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10685: LD_VAR 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_VAR 0 1
10697: PPUSH
10698: CALL_OW 12
10702: ARRAY
10703: PPUSH
10704: LD_INT 200
10706: PPUSH
10707: CALL_OW 234
// end ;
10711: PPOPN 1
10713: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10714: LD_EXP 8
10718: PUSH
10719: LD_EXP 37
10723: AND
10724: IFFALSE 10803
10726: GO 10728
10728: DISABLE
10729: LD_INT 0
10731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_OWVAR 2
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 21
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PPUSH
10763: CALL_OW 69
10767: ST_TO_ADDR
// if not tmp then
10768: LD_VAR 0 1
10772: NOT
10773: IFFALSE 10777
// exit ;
10775: GO 10803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10777: LD_VAR 0 1
10781: PUSH
10782: LD_INT 1
10784: PPUSH
10785: LD_VAR 0 1
10789: PPUSH
10790: CALL_OW 12
10794: ARRAY
10795: PPUSH
10796: LD_INT 60
10798: PPUSH
10799: CALL_OW 234
// end ;
10803: PPOPN 1
10805: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10806: LD_EXP 8
10810: PUSH
10811: LD_EXP 38
10815: AND
10816: IFFALSE 10915
10818: GO 10820
10820: DISABLE
10821: LD_INT 0
10823: PPUSH
10824: PPUSH
// begin enable ;
10825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10826: LD_ADDR_VAR 0 1
10830: PUSH
10831: LD_INT 22
10833: PUSH
10834: LD_OWVAR 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 61
10845: PUSH
10846: EMPTY
10847: LIST
10848: PUSH
10849: LD_INT 33
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: ST_TO_ADDR
// if not tmp then
10869: LD_VAR 0 1
10873: NOT
10874: IFFALSE 10878
// exit ;
10876: GO 10915
// for i in tmp do
10878: LD_ADDR_VAR 0 2
10882: PUSH
10883: LD_VAR 0 1
10887: PUSH
10888: FOR_IN
10889: IFFALSE 10913
// if IsControledBy ( i ) then
10891: LD_VAR 0 2
10895: PPUSH
10896: CALL_OW 312
10900: IFFALSE 10911
// ComUnlink ( i ) ;
10902: LD_VAR 0 2
10906: PPUSH
10907: CALL_OW 136
10911: GO 10888
10913: POP
10914: POP
// end ;
10915: PPOPN 2
10917: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10918: LD_EXP 8
10922: PUSH
10923: LD_EXP 39
10927: AND
10928: IFFALSE 11068
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
// begin ToLua ( displayPowell(); ) ;
10937: LD_STRING displayPowell();
10939: PPUSH
10940: CALL_OW 559
// uc_side := 0 ;
10944: LD_ADDR_OWVAR 20
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// uc_nation := 2 ;
10952: LD_ADDR_OWVAR 21
10956: PUSH
10957: LD_INT 2
10959: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10960: LD_ADDR_OWVAR 37
10964: PUSH
10965: LD_INT 14
10967: ST_TO_ADDR
// vc_engine := engine_siberite ;
10968: LD_ADDR_OWVAR 39
10972: PUSH
10973: LD_INT 3
10975: ST_TO_ADDR
// vc_control := control_apeman ;
10976: LD_ADDR_OWVAR 38
10980: PUSH
10981: LD_INT 5
10983: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10984: LD_ADDR_OWVAR 40
10988: PUSH
10989: LD_INT 29
10991: ST_TO_ADDR
// un := CreateVehicle ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: CALL_OW 45
11001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11014: LD_INT 35
11016: PPUSH
11017: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11021: LD_VAR 0 2
11025: PPUSH
11026: LD_INT 22
11028: PUSH
11029: LD_OWVAR 2
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 69
11042: PPUSH
11043: LD_VAR 0 2
11047: PPUSH
11048: CALL_OW 74
11052: PPUSH
11053: CALL_OW 115
// until IsDead ( un ) ;
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 301
11066: IFFALSE 11014
// end ;
11068: PPOPN 2
11070: END
// every 0 0$1 trigger StreamModeActive and sStu do
11071: LD_EXP 8
11075: PUSH
11076: LD_EXP 47
11080: AND
11081: IFFALSE 11097
11083: GO 11085
11085: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11086: LD_STRING displayStucuk();
11088: PPUSH
11089: CALL_OW 559
// ResetFog ;
11093: CALL_OW 335
// end ;
11097: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11098: LD_EXP 8
11102: PUSH
11103: LD_EXP 40
11107: AND
11108: IFFALSE 11249
11110: GO 11112
11112: DISABLE
11113: LD_INT 0
11115: PPUSH
11116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_OWVAR 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 21
11136: PUSH
11137: LD_INT 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 69
11152: ST_TO_ADDR
// if not tmp then
11153: LD_VAR 0 2
11157: NOT
11158: IFFALSE 11162
// exit ;
11160: GO 11249
// un := tmp [ rand ( 1 , tmp ) ] ;
11162: LD_ADDR_VAR 0 1
11166: PUSH
11167: LD_VAR 0 2
11171: PUSH
11172: LD_INT 1
11174: PPUSH
11175: LD_VAR 0 2
11179: PPUSH
11180: CALL_OW 12
11184: ARRAY
11185: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11186: LD_VAR 0 1
11190: PPUSH
11191: LD_INT 0
11193: PPUSH
11194: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11198: LD_VAR 0 1
11202: PPUSH
11203: LD_OWVAR 3
11207: PUSH
11208: LD_VAR 0 1
11212: DIFF
11213: PPUSH
11214: LD_VAR 0 1
11218: PPUSH
11219: CALL_OW 74
11223: PPUSH
11224: CALL_OW 115
// wait ( 0 0$20 ) ;
11228: LD_INT 700
11230: PPUSH
11231: CALL_OW 67
// SetSide ( un , your_side ) ;
11235: LD_VAR 0 1
11239: PPUSH
11240: LD_OWVAR 2
11244: PPUSH
11245: CALL_OW 235
// end ;
11249: PPOPN 2
11251: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11252: LD_EXP 8
11256: PUSH
11257: LD_EXP 41
11261: AND
11262: IFFALSE 11368
11264: GO 11266
11266: DISABLE
11267: LD_INT 0
11269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11270: LD_ADDR_VAR 0 1
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_OWVAR 2
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 0
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 30
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 69
11323: ST_TO_ADDR
// if not depot then
11324: LD_VAR 0 1
11328: NOT
11329: IFFALSE 11333
// exit ;
11331: GO 11368
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11333: LD_VAR 0 1
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PPUSH
11342: CALL_OW 250
11346: PPUSH
11347: LD_VAR 0 1
11351: PUSH
11352: LD_INT 1
11354: ARRAY
11355: PPUSH
11356: CALL_OW 251
11360: PPUSH
11361: LD_INT 70
11363: PPUSH
11364: CALL_OW 495
// end ;
11368: PPOPN 1
11370: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11371: LD_EXP 8
11375: PUSH
11376: LD_EXP 42
11380: AND
11381: IFFALSE 11592
11383: GO 11385
11385: DISABLE
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_INT 22
11400: PUSH
11401: LD_OWVAR 2
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 21
11412: PUSH
11413: LD_INT 1
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if not tmp then
11429: LD_VAR 0 5
11433: NOT
11434: IFFALSE 11438
// exit ;
11436: GO 11592
// for i in tmp do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: LD_VAR 0 5
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11590
// begin d := rand ( 0 , 5 ) ;
11451: LD_ADDR_VAR 0 4
11455: PUSH
11456: LD_INT 0
11458: PPUSH
11459: LD_INT 5
11461: PPUSH
11462: CALL_OW 12
11466: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11467: LD_ADDR_VAR 0 2
11471: PUSH
11472: LD_VAR 0 1
11476: PPUSH
11477: CALL_OW 250
11481: PPUSH
11482: LD_VAR 0 4
11486: PPUSH
11487: LD_INT 3
11489: PPUSH
11490: LD_INT 12
11492: PPUSH
11493: CALL_OW 12
11497: PPUSH
11498: CALL_OW 272
11502: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 251
11517: PPUSH
11518: LD_VAR 0 4
11522: PPUSH
11523: LD_INT 3
11525: PPUSH
11526: LD_INT 12
11528: PPUSH
11529: CALL_OW 12
11533: PPUSH
11534: CALL_OW 273
11538: ST_TO_ADDR
// if ValidHex ( x , y ) then
11539: LD_VAR 0 2
11543: PPUSH
11544: LD_VAR 0 3
11548: PPUSH
11549: CALL_OW 488
11553: IFFALSE 11588
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_VAR 0 2
11564: PPUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 3
11572: PPUSH
11573: LD_INT 6
11575: PPUSH
11576: CALL_OW 12
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 483
// end ;
11588: GO 11448
11590: POP
11591: POP
// end ;
11592: PPOPN 5
11594: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11595: LD_EXP 8
11599: PUSH
11600: LD_EXP 43
11604: AND
11605: IFFALSE 11699
11607: GO 11609
11609: DISABLE
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11614: LD_ADDR_VAR 0 2
11618: PUSH
11619: LD_INT 22
11621: PUSH
11622: LD_OWVAR 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 32
11633: PUSH
11634: LD_INT 1
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 21
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 69
11660: ST_TO_ADDR
// if not tmp then
11661: LD_VAR 0 2
11665: NOT
11666: IFFALSE 11670
// exit ;
11668: GO 11699
// for i in tmp do
11670: LD_ADDR_VAR 0 1
11674: PUSH
11675: LD_VAR 0 2
11679: PUSH
11680: FOR_IN
11681: IFFALSE 11697
// SetFuel ( i , 0 ) ;
11683: LD_VAR 0 1
11687: PPUSH
11688: LD_INT 0
11690: PPUSH
11691: CALL_OW 240
11695: GO 11680
11697: POP
11698: POP
// end ;
11699: PPOPN 2
11701: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11702: LD_EXP 8
11706: PUSH
11707: LD_EXP 44
11711: AND
11712: IFFALSE 11778
11714: GO 11716
11716: DISABLE
11717: LD_INT 0
11719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11720: LD_ADDR_VAR 0 1
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_OWVAR 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 30
11739: PUSH
11740: LD_INT 29
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: ST_TO_ADDR
// if not tmp then
11756: LD_VAR 0 1
11760: NOT
11761: IFFALSE 11765
// exit ;
11763: GO 11778
// DestroyUnit ( tmp [ 1 ] ) ;
11765: LD_VAR 0 1
11769: PUSH
11770: LD_INT 1
11772: ARRAY
11773: PPUSH
11774: CALL_OW 65
// end ;
11778: PPOPN 1
11780: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11781: LD_EXP 8
11785: PUSH
11786: LD_EXP 46
11790: AND
11791: IFFALSE 11920
11793: GO 11795
11795: DISABLE
11796: LD_INT 0
11798: PPUSH
// begin uc_side := 0 ;
11799: LD_ADDR_OWVAR 20
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// uc_nation := nation_arabian ;
11807: LD_ADDR_OWVAR 21
11811: PUSH
11812: LD_INT 2
11814: ST_TO_ADDR
// hc_gallery :=  ;
11815: LD_ADDR_OWVAR 33
11819: PUSH
11820: LD_STRING 
11822: ST_TO_ADDR
// hc_name :=  ;
11823: LD_ADDR_OWVAR 26
11827: PUSH
11828: LD_STRING 
11830: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 11
11836: PPUSH
11837: LD_INT 10
11839: PPUSH
11840: CALL_OW 380
// un := CreateHuman ;
11844: LD_ADDR_VAR 0 1
11848: PUSH
11849: CALL_OW 44
11853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11854: LD_VAR 0 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11866: LD_INT 35
11868: PPUSH
11869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 22
11880: PUSH
11881: LD_OWVAR 2
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PPUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 74
11904: PPUSH
11905: CALL_OW 115
// until IsDead ( un ) ;
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 301
11918: IFFALSE 11866
// end ;
11920: PPOPN 1
11922: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11923: LD_EXP 8
11927: PUSH
11928: LD_EXP 48
11932: AND
11933: IFFALSE 11945
11935: GO 11937
11937: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11938: LD_STRING earthquake(getX(game), 0, 32)
11940: PPUSH
11941: CALL_OW 559
11945: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11946: LD_EXP 8
11950: PUSH
11951: LD_EXP 49
11955: AND
11956: IFFALSE 12047
11958: GO 11960
11960: DISABLE
11961: LD_INT 0
11963: PPUSH
// begin enable ;
11964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: LD_OWVAR 2
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 21
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 33
11994: PUSH
11995: LD_INT 3
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: ST_TO_ADDR
// if not tmp then
12012: LD_VAR 0 1
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12021: LD_VAR 0 1
12025: PUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_VAR 0 1
12033: PPUSH
12034: CALL_OW 12
12038: ARRAY
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 234
// end ;
12047: PPOPN 1
12049: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12050: LD_EXP 8
12054: PUSH
12055: LD_EXP 50
12059: AND
12060: IFFALSE 12201
12062: GO 12064
12064: DISABLE
12065: LD_INT 0
12067: PPUSH
12068: PPUSH
12069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12070: LD_ADDR_VAR 0 3
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_OWVAR 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 25
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PPUSH
12101: CALL_OW 69
12105: ST_TO_ADDR
// if not tmp then
12106: LD_VAR 0 3
12110: NOT
12111: IFFALSE 12115
// exit ;
12113: GO 12201
// un := tmp [ rand ( 1 , tmp ) ] ;
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_VAR 0 3
12132: PPUSH
12133: CALL_OW 12
12137: ARRAY
12138: ST_TO_ADDR
// if Crawls ( un ) then
12139: LD_VAR 0 2
12143: PPUSH
12144: CALL_OW 318
12148: IFFALSE 12159
// ComWalk ( un ) ;
12150: LD_VAR 0 2
12154: PPUSH
12155: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12159: LD_VAR 0 2
12163: PPUSH
12164: LD_INT 9
12166: PPUSH
12167: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12171: LD_INT 28
12173: PPUSH
12174: LD_OWVAR 2
12178: PPUSH
12179: LD_INT 2
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12186: LD_INT 29
12188: PPUSH
12189: LD_OWVAR 2
12193: PPUSH
12194: LD_INT 2
12196: PPUSH
12197: CALL_OW 322
// end ;
12201: PPOPN 3
12203: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12204: LD_EXP 8
12208: PUSH
12209: LD_EXP 51
12213: AND
12214: IFFALSE 12325
12216: GO 12218
12218: DISABLE
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12224: LD_ADDR_VAR 0 3
12228: PUSH
12229: LD_INT 22
12231: PUSH
12232: LD_OWVAR 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// if not tmp then
12260: LD_VAR 0 3
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 12325
// un := tmp [ rand ( 1 , tmp ) ] ;
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 1
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: CALL_OW 12
12291: ARRAY
12292: ST_TO_ADDR
// if Crawls ( un ) then
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 318
12302: IFFALSE 12313
// ComWalk ( un ) ;
12304: LD_VAR 0 2
12308: PPUSH
12309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12313: LD_VAR 0 2
12317: PPUSH
12318: LD_INT 8
12320: PPUSH
12321: CALL_OW 336
// end ;
12325: PPOPN 3
12327: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12328: LD_EXP 8
12332: PUSH
12333: LD_EXP 52
12337: AND
12338: IFFALSE 12482
12340: GO 12342
12342: DISABLE
12343: LD_INT 0
12345: PPUSH
12346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12347: LD_ADDR_VAR 0 2
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_OWVAR 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: LD_INT 34
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 34
12389: PUSH
12390: LD_INT 51
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 34
12399: PUSH
12400: LD_INT 32
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: PPUSH
12418: CALL_OW 69
12422: ST_TO_ADDR
// if not tmp then
12423: LD_VAR 0 2
12427: NOT
12428: IFFALSE 12432
// exit ;
12430: GO 12482
// for i in tmp do
12432: LD_ADDR_VAR 0 1
12436: PUSH
12437: LD_VAR 0 2
12441: PUSH
12442: FOR_IN
12443: IFFALSE 12480
// if GetCargo ( i , mat_artifact ) = 0 then
12445: LD_VAR 0 1
12449: PPUSH
12450: LD_INT 4
12452: PPUSH
12453: CALL_OW 289
12457: PUSH
12458: LD_INT 0
12460: EQUAL
12461: IFFALSE 12478
// SetCargo ( i , mat_siberit , 100 ) ;
12463: LD_VAR 0 1
12467: PPUSH
12468: LD_INT 3
12470: PPUSH
12471: LD_INT 100
12473: PPUSH
12474: CALL_OW 290
12478: GO 12442
12480: POP
12481: POP
// end ;
12482: PPOPN 2
12484: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12485: LD_EXP 8
12489: PUSH
12490: LD_EXP 53
12494: AND
12495: IFFALSE 12678
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12504: LD_ADDR_VAR 0 2
12508: PUSH
12509: LD_INT 22
12511: PUSH
12512: LD_OWVAR 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 69
12525: ST_TO_ADDR
// if not tmp then
12526: LD_VAR 0 2
12530: NOT
12531: IFFALSE 12535
// exit ;
12533: GO 12678
// for i := 1 to 2 do
12535: LD_ADDR_VAR 0 1
12539: PUSH
12540: DOUBLE
12541: LD_INT 1
12543: DEC
12544: ST_TO_ADDR
12545: LD_INT 2
12547: PUSH
12548: FOR_TO
12549: IFFALSE 12676
// begin uc_side := your_side ;
12551: LD_ADDR_OWVAR 20
12555: PUSH
12556: LD_OWVAR 2
12560: ST_TO_ADDR
// uc_nation := nation_american ;
12561: LD_ADDR_OWVAR 21
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// vc_chassis := us_morphling ;
12569: LD_ADDR_OWVAR 37
12573: PUSH
12574: LD_INT 5
12576: ST_TO_ADDR
// vc_engine := engine_siberite ;
12577: LD_ADDR_OWVAR 39
12581: PUSH
12582: LD_INT 3
12584: ST_TO_ADDR
// vc_control := control_computer ;
12585: LD_ADDR_OWVAR 38
12589: PUSH
12590: LD_INT 3
12592: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12593: LD_ADDR_OWVAR 40
12597: PUSH
12598: LD_INT 10
12600: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12601: LD_VAR 0 2
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 310
12614: NOT
12615: IFFALSE 12662
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12617: CALL_OW 45
12621: PPUSH
12622: LD_VAR 0 2
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: CALL_OW 250
12635: PPUSH
12636: LD_VAR 0 2
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PPUSH
12645: CALL_OW 251
12649: PPUSH
12650: LD_INT 12
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 50
12660: GO 12674
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12662: CALL_OW 45
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 51
// end ;
12674: GO 12548
12676: POP
12677: POP
// end ;
12678: PPOPN 2
12680: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12681: LD_EXP 8
12685: PUSH
12686: LD_EXP 54
12690: AND
12691: IFFALSE 12913
12693: GO 12695
12695: DISABLE
12696: LD_INT 0
12698: PPUSH
12699: PPUSH
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12704: LD_ADDR_VAR 0 6
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_OWVAR 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 1
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 3
12733: PUSH
12734: LD_INT 23
12736: PUSH
12737: LD_INT 0
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 69
12757: ST_TO_ADDR
// if not tmp then
12758: LD_VAR 0 6
12762: NOT
12763: IFFALSE 12767
// exit ;
12765: GO 12913
// s1 := rand ( 1 , 4 ) ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 1
12774: PPUSH
12775: LD_INT 4
12777: PPUSH
12778: CALL_OW 12
12782: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12783: LD_ADDR_VAR 0 4
12787: PUSH
12788: LD_VAR 0 6
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PPUSH
12797: LD_VAR 0 2
12801: PPUSH
12802: CALL_OW 259
12806: ST_TO_ADDR
// if s1 = 1 then
12807: LD_VAR 0 2
12811: PUSH
12812: LD_INT 1
12814: EQUAL
12815: IFFALSE 12835
// s2 := rand ( 2 , 4 ) else
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: LD_INT 2
12824: PPUSH
12825: LD_INT 4
12827: PPUSH
12828: CALL_OW 12
12832: ST_TO_ADDR
12833: GO 12843
// s2 := 1 ;
12835: LD_ADDR_VAR 0 3
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_VAR 0 6
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 259
12866: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12867: LD_VAR 0 6
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 2
12880: PPUSH
12881: LD_VAR 0 5
12885: PPUSH
12886: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12890: LD_VAR 0 6
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_VAR 0 4
12908: PPUSH
12909: CALL_OW 237
// end ;
12913: PPOPN 6
12915: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12916: LD_EXP 8
12920: PUSH
12921: LD_EXP 55
12925: AND
12926: IFFALSE 13005
12928: GO 12930
12930: DISABLE
12931: LD_INT 0
12933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_OWVAR 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: ST_TO_ADDR
// if not tmp then
12970: LD_VAR 0 1
12974: NOT
12975: IFFALSE 12979
// exit ;
12977: GO 13005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: PPUSH
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 12
12996: ARRAY
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 234
// end ;
13005: PPOPN 1
13007: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13008: LD_EXP 8
13012: PUSH
13013: LD_EXP 56
13017: AND
13018: IFFALSE 13130
13020: GO 13022
13022: DISABLE
13023: LD_INT 0
13025: PPUSH
13026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_OWVAR 2
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 27
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 26
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 28
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PPUSH
13087: CALL_OW 69
13091: ST_TO_ADDR
// if not tmp then
13092: LD_VAR 0 2
13096: NOT
13097: IFFALSE 13101
// exit ;
13099: GO 13130
// for i in tmp do
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_VAR 0 2
13110: PUSH
13111: FOR_IN
13112: IFFALSE 13128
// SetLives ( i , 1 ) ;
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 234
13126: GO 13111
13128: POP
13129: POP
// end ;
13130: PPOPN 2
13132: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13133: LD_EXP 8
13137: PUSH
13138: LD_EXP 57
13142: AND
13143: IFFALSE 13430
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
13151: PPUSH
13152: PPUSH
// begin i := rand ( 1 , 7 ) ;
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_INT 1
13160: PPUSH
13161: LD_INT 7
13163: PPUSH
13164: CALL_OW 12
13168: ST_TO_ADDR
// case i of 1 :
13169: LD_VAR 0 1
13173: PUSH
13174: LD_INT 1
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13192
13182: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13183: LD_STRING earthquake(getX(game), 0, 32)
13185: PPUSH
13186: CALL_OW 559
13190: GO 13430
13192: LD_INT 2
13194: DOUBLE
13195: EQUAL
13196: IFTRUE 13200
13198: GO 13214
13200: POP
// begin ToLua ( displayStucuk(); ) ;
13201: LD_STRING displayStucuk();
13203: PPUSH
13204: CALL_OW 559
// ResetFog ;
13208: CALL_OW 335
// end ; 3 :
13212: GO 13430
13214: LD_INT 3
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13326
13222: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13223: LD_ADDR_VAR 0 2
13227: PUSH
13228: LD_INT 22
13230: PUSH
13231: LD_OWVAR 2
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 25
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 69
13258: ST_TO_ADDR
// if not tmp then
13259: LD_VAR 0 2
13263: NOT
13264: IFFALSE 13268
// exit ;
13266: GO 13430
// un := tmp [ rand ( 1 , tmp ) ] ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_VAR 0 2
13277: PUSH
13278: LD_INT 1
13280: PPUSH
13281: LD_VAR 0 2
13285: PPUSH
13286: CALL_OW 12
13290: ARRAY
13291: ST_TO_ADDR
// if Crawls ( un ) then
13292: LD_VAR 0 3
13296: PPUSH
13297: CALL_OW 318
13301: IFFALSE 13312
// ComWalk ( un ) ;
13303: LD_VAR 0 3
13307: PPUSH
13308: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 8
13319: PPUSH
13320: CALL_OW 336
// end ; 4 :
13324: GO 13430
13326: LD_INT 4
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13408
13334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_INT 22
13342: PUSH
13343: LD_OWVAR 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 30
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: ST_TO_ADDR
// if not tmp then
13371: LD_VAR 0 2
13375: NOT
13376: IFFALSE 13380
// exit ;
13378: GO 13430
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13393: LD_VAR 0 2
13397: PUSH
13398: LD_INT 1
13400: ARRAY
13401: PPUSH
13402: CALL_OW 65
// end ; 5 .. 7 :
13406: GO 13430
13408: LD_INT 5
13410: DOUBLE
13411: GREATEREQUAL
13412: IFFALSE 13420
13414: LD_INT 7
13416: DOUBLE
13417: LESSEQUAL
13418: IFTRUE 13422
13420: GO 13429
13422: POP
// StreamSibBomb ; end ;
13423: CALL 9667 0 0
13427: GO 13430
13429: POP
// end ;
13430: PPOPN 3
13432: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13433: LD_EXP 8
13437: PUSH
13438: LD_EXP 58
13442: AND
13443: IFFALSE 13599
13445: GO 13447
13447: DISABLE
13448: LD_INT 0
13450: PPUSH
13451: PPUSH
13452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 81
13460: PUSH
13461: LD_OWVAR 2
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 2
13472: PUSH
13473: LD_INT 21
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: ST_TO_ADDR
// if not tmp then
13507: LD_VAR 0 2
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13599
// p := 0 ;
13516: LD_ADDR_VAR 0 3
13520: PUSH
13521: LD_INT 0
13523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13524: LD_INT 35
13526: PPUSH
13527: CALL_OW 67
// p := p + 1 ;
13531: LD_ADDR_VAR 0 3
13535: PUSH
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 1
13543: PLUS
13544: ST_TO_ADDR
// for i in tmp do
13545: LD_ADDR_VAR 0 1
13549: PUSH
13550: LD_VAR 0 2
13554: PUSH
13555: FOR_IN
13556: IFFALSE 13587
// if GetLives ( i ) < 1000 then
13558: LD_VAR 0 1
13562: PPUSH
13563: CALL_OW 256
13567: PUSH
13568: LD_INT 1000
13570: LESS
13571: IFFALSE 13585
// SetLives ( i , 1000 ) ;
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_INT 1000
13580: PPUSH
13581: CALL_OW 234
13585: GO 13555
13587: POP
13588: POP
// until p > 20 ;
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 20
13596: GREATER
13597: IFFALSE 13524
// end ;
13599: PPOPN 3
13601: END
// every 0 0$1 trigger StreamModeActive and sTime do
13602: LD_EXP 8
13606: PUSH
13607: LD_EXP 59
13611: AND
13612: IFFALSE 13647
13614: GO 13616
13616: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13617: LD_INT 28
13619: PPUSH
13620: LD_OWVAR 2
13624: PPUSH
13625: LD_INT 2
13627: PPUSH
13628: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13632: LD_INT 30
13634: PPUSH
13635: LD_OWVAR 2
13639: PPUSH
13640: LD_INT 2
13642: PPUSH
13643: CALL_OW 322
// end ;
13647: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13648: LD_EXP 8
13652: PUSH
13653: LD_EXP 60
13657: AND
13658: IFFALSE 13779
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13667: LD_ADDR_VAR 0 2
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_OWVAR 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: LD_INT 23
13699: PUSH
13700: LD_INT 0
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if not tmp then
13721: LD_VAR 0 2
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13779
// for i in tmp do
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13777
// begin if Crawls ( i ) then
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 318
13752: IFFALSE 13763
// ComWalk ( i ) ;
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 138
// SetClass ( i , 2 ) ;
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: CALL_OW 336
// end ;
13775: GO 13740
13777: POP
13778: POP
// end ;
13779: PPOPN 2
13781: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13782: LD_EXP 8
13786: PUSH
13787: LD_EXP 61
13791: AND
13792: IFFALSE 14080
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13802: LD_OWVAR 2
13806: PPUSH
13807: LD_INT 9
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13820: LD_INT 9
13822: PPUSH
13823: LD_OWVAR 2
13827: PPUSH
13828: CALL_OW 343
// uc_side := 9 ;
13832: LD_ADDR_OWVAR 20
13836: PUSH
13837: LD_INT 9
13839: ST_TO_ADDR
// uc_nation := 2 ;
13840: LD_ADDR_OWVAR 21
13844: PUSH
13845: LD_INT 2
13847: ST_TO_ADDR
// hc_name := Dark Warrior ;
13848: LD_ADDR_OWVAR 26
13852: PUSH
13853: LD_STRING Dark Warrior
13855: ST_TO_ADDR
// hc_gallery :=  ;
13856: LD_ADDR_OWVAR 33
13860: PUSH
13861: LD_STRING 
13863: ST_TO_ADDR
// hc_noskilllimit := true ;
13864: LD_ADDR_OWVAR 76
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13872: LD_ADDR_OWVAR 31
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: ST_TO_ADDR
// un := CreateHuman ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: CALL_OW 44
13904: ST_TO_ADDR
// hc_noskilllimit := false ;
13905: LD_ADDR_OWVAR 76
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13913: LD_VAR 0 3
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 51
// ToLua ( playRanger() ) ;
13925: LD_STRING playRanger()
13927: PPUSH
13928: CALL_OW 559
// p := 0 ;
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 0
13939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13940: LD_INT 35
13942: PPUSH
13943: CALL_OW 67
// p := p + 1 ;
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_VAR 0 2
13956: PUSH
13957: LD_INT 1
13959: PLUS
13960: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13961: LD_VAR 0 3
13965: PPUSH
13966: CALL_OW 256
13970: PUSH
13971: LD_INT 1000
13973: LESS
13974: IFFALSE 13988
// SetLives ( un , 1000 ) ;
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 1000
13983: PPUSH
13984: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13988: LD_VAR 0 3
13992: PPUSH
13993: LD_INT 81
13995: PUSH
13996: LD_OWVAR 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 91
14007: PUSH
14008: LD_VAR 0 3
14012: PUSH
14013: LD_INT 30
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: CALL_OW 74
14039: PPUSH
14040: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14044: LD_VAR 0 2
14048: PUSH
14049: LD_INT 80
14051: GREATER
14052: PUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: CALL_OW 301
14062: OR
14063: IFFALSE 13940
// if un then
14065: LD_VAR 0 3
14069: IFFALSE 14080
// RemoveUnit ( un ) ;
14071: LD_VAR 0 3
14075: PPUSH
14076: CALL_OW 64
// end ;
14080: PPOPN 3
14082: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14083: LD_EXP 62
14087: IFFALSE 14203
14089: GO 14091
14091: DISABLE
14092: LD_INT 0
14094: PPUSH
14095: PPUSH
14096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14097: LD_ADDR_VAR 0 2
14101: PUSH
14102: LD_INT 81
14104: PUSH
14105: LD_OWVAR 2
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 69
14132: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14133: LD_STRING playComputer()
14135: PPUSH
14136: CALL_OW 559
// if not tmp then
14140: LD_VAR 0 2
14144: NOT
14145: IFFALSE 14149
// exit ;
14147: GO 14203
// for i in tmp do
14149: LD_ADDR_VAR 0 1
14153: PUSH
14154: LD_VAR 0 2
14158: PUSH
14159: FOR_IN
14160: IFFALSE 14201
// for j := 1 to 4 do
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: DOUBLE
14168: LD_INT 1
14170: DEC
14171: ST_TO_ADDR
14172: LD_INT 4
14174: PUSH
14175: FOR_TO
14176: IFFALSE 14197
// SetSkill ( i , j , 10 ) ;
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 10
14190: PPUSH
14191: CALL_OW 237
14195: GO 14175
14197: POP
14198: POP
14199: GO 14159
14201: POP
14202: POP
// end ;
14203: PPOPN 3
14205: END
// every 0 0$1 trigger s30 do var i , tmp ;
14206: LD_EXP 63
14210: IFFALSE 14279
14212: GO 14214
14214: DISABLE
14215: LD_INT 0
14217: PPUSH
14218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14219: LD_ADDR_VAR 0 2
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: ST_TO_ADDR
// if not tmp then
14241: LD_VAR 0 2
14245: NOT
14246: IFFALSE 14250
// exit ;
14248: GO 14279
// for i in tmp do
14250: LD_ADDR_VAR 0 1
14254: PUSH
14255: LD_VAR 0 2
14259: PUSH
14260: FOR_IN
14261: IFFALSE 14277
// SetLives ( i , 300 ) ;
14263: LD_VAR 0 1
14267: PPUSH
14268: LD_INT 300
14270: PPUSH
14271: CALL_OW 234
14275: GO 14260
14277: POP
14278: POP
// end ;
14279: PPOPN 2
14281: END
// every 0 0$1 trigger s60 do var i , tmp ;
14282: LD_EXP 64
14286: IFFALSE 14355
14288: GO 14290
14290: DISABLE
14291: LD_INT 0
14293: PPUSH
14294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14295: LD_ADDR_VAR 0 2
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_OWVAR 2
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: ST_TO_ADDR
// if not tmp then
14317: LD_VAR 0 2
14321: NOT
14322: IFFALSE 14326
// exit ;
14324: GO 14355
// for i in tmp do
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_VAR 0 2
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14353
// SetLives ( i , 600 ) ;
14339: LD_VAR 0 1
14343: PPUSH
14344: LD_INT 600
14346: PPUSH
14347: CALL_OW 234
14351: GO 14336
14353: POP
14354: POP
// end ;
14355: PPOPN 2
14357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14358: LD_INT 0
14360: PPUSH
// case cmd of 301 :
14361: LD_VAR 0 1
14365: PUSH
14366: LD_INT 301
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14406
14374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14375: LD_VAR 0 6
14379: PPUSH
14380: LD_VAR 0 7
14384: PPUSH
14385: LD_VAR 0 8
14389: PPUSH
14390: LD_VAR 0 4
14394: PPUSH
14395: LD_VAR 0 5
14399: PPUSH
14400: CALL 15615 0 5
14404: GO 14527
14406: LD_INT 302
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14451
14414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14415: LD_VAR 0 6
14419: PPUSH
14420: LD_VAR 0 7
14424: PPUSH
14425: LD_VAR 0 8
14429: PPUSH
14430: LD_VAR 0 9
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: LD_VAR 0 5
14444: PPUSH
14445: CALL 15706 0 6
14449: GO 14527
14451: LD_INT 303
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14496
14459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14460: LD_VAR 0 6
14464: PPUSH
14465: LD_VAR 0 7
14469: PPUSH
14470: LD_VAR 0 8
14474: PPUSH
14475: LD_VAR 0 9
14479: PPUSH
14480: LD_VAR 0 4
14484: PPUSH
14485: LD_VAR 0 5
14489: PPUSH
14490: CALL 14532 0 6
14494: GO 14527
14496: LD_INT 304
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14526
14504: POP
// hHackTeleport ( unit , x , y ) ; end ;
14505: LD_VAR 0 2
14509: PPUSH
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_VAR 0 5
14519: PPUSH
14520: CALL 16299 0 3
14524: GO 14527
14526: POP
// end ;
14527: LD_VAR 0 12
14531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14536: LD_VAR 0 1
14540: PUSH
14541: LD_INT 1
14543: LESS
14544: PUSH
14545: LD_VAR 0 1
14549: PUSH
14550: LD_INT 3
14552: GREATER
14553: OR
14554: PUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: LD_VAR 0 6
14564: PPUSH
14565: CALL_OW 428
14569: OR
14570: IFFALSE 14574
// exit ;
14572: GO 15302
// uc_side := your_side ;
14574: LD_ADDR_OWVAR 20
14578: PUSH
14579: LD_OWVAR 2
14583: ST_TO_ADDR
// uc_nation := nation ;
14584: LD_ADDR_OWVAR 21
14588: PUSH
14589: LD_VAR 0 1
14593: ST_TO_ADDR
// bc_level = 1 ;
14594: LD_ADDR_OWVAR 43
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// case btype of 1 :
14602: LD_VAR 0 2
14606: PUSH
14607: LD_INT 1
14609: DOUBLE
14610: EQUAL
14611: IFTRUE 14615
14613: GO 14626
14615: POP
// bc_type := b_depot ; 2 :
14616: LD_ADDR_OWVAR 42
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
14624: GO 15246
14626: LD_INT 2
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14645
14634: POP
// bc_type := b_warehouse ; 3 :
14635: LD_ADDR_OWVAR 42
14639: PUSH
14640: LD_INT 1
14642: ST_TO_ADDR
14643: GO 15246
14645: LD_INT 3
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14664
14653: POP
// bc_type := b_lab ; 4 .. 9 :
14654: LD_ADDR_OWVAR 42
14658: PUSH
14659: LD_INT 6
14661: ST_TO_ADDR
14662: GO 15246
14664: LD_INT 4
14666: DOUBLE
14667: GREATEREQUAL
14668: IFFALSE 14676
14670: LD_INT 9
14672: DOUBLE
14673: LESSEQUAL
14674: IFTRUE 14678
14676: GO 14738
14678: POP
// begin bc_type := b_lab_half ;
14679: LD_ADDR_OWVAR 42
14683: PUSH
14684: LD_INT 7
14686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14687: LD_ADDR_OWVAR 44
14691: PUSH
14692: LD_INT 10
14694: PUSH
14695: LD_INT 11
14697: PUSH
14698: LD_INT 12
14700: PUSH
14701: LD_INT 15
14703: PUSH
14704: LD_INT 14
14706: PUSH
14707: LD_INT 13
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 3
14725: MINUS
14726: ARRAY
14727: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14728: LD_ADDR_OWVAR 45
14732: PUSH
14733: LD_INT 9
14735: ST_TO_ADDR
// end ; 10 .. 13 :
14736: GO 15246
14738: LD_INT 10
14740: DOUBLE
14741: GREATEREQUAL
14742: IFFALSE 14750
14744: LD_INT 13
14746: DOUBLE
14747: LESSEQUAL
14748: IFTRUE 14752
14750: GO 14829
14752: POP
// begin bc_type := b_lab_full ;
14753: LD_ADDR_OWVAR 42
14757: PUSH
14758: LD_INT 8
14760: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14761: LD_ADDR_OWVAR 44
14765: PUSH
14766: LD_INT 10
14768: PUSH
14769: LD_INT 12
14771: PUSH
14772: LD_INT 14
14774: PUSH
14775: LD_INT 13
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: LD_VAR 0 2
14788: PUSH
14789: LD_INT 9
14791: MINUS
14792: ARRAY
14793: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14794: LD_ADDR_OWVAR 45
14798: PUSH
14799: LD_INT 11
14801: PUSH
14802: LD_INT 15
14804: PUSH
14805: LD_INT 12
14807: PUSH
14808: LD_INT 15
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 9
14824: MINUS
14825: ARRAY
14826: ST_TO_ADDR
// end ; 14 :
14827: GO 15246
14829: LD_INT 14
14831: DOUBLE
14832: EQUAL
14833: IFTRUE 14837
14835: GO 14848
14837: POP
// bc_type := b_workshop ; 15 :
14838: LD_ADDR_OWVAR 42
14842: PUSH
14843: LD_INT 2
14845: ST_TO_ADDR
14846: GO 15246
14848: LD_INT 15
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14856
14854: GO 14867
14856: POP
// bc_type := b_factory ; 16 :
14857: LD_ADDR_OWVAR 42
14861: PUSH
14862: LD_INT 3
14864: ST_TO_ADDR
14865: GO 15246
14867: LD_INT 16
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 14886
14875: POP
// bc_type := b_ext_gun ; 17 :
14876: LD_ADDR_OWVAR 42
14880: PUSH
14881: LD_INT 17
14883: ST_TO_ADDR
14884: GO 15246
14886: LD_INT 17
14888: DOUBLE
14889: EQUAL
14890: IFTRUE 14894
14892: GO 14922
14894: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14895: LD_ADDR_OWVAR 42
14899: PUSH
14900: LD_INT 19
14902: PUSH
14903: LD_INT 23
14905: PUSH
14906: LD_INT 19
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_VAR 0 1
14918: ARRAY
14919: ST_TO_ADDR
14920: GO 15246
14922: LD_INT 18
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14930
14928: GO 14941
14930: POP
// bc_type := b_ext_radar ; 19 :
14931: LD_ADDR_OWVAR 42
14935: PUSH
14936: LD_INT 20
14938: ST_TO_ADDR
14939: GO 15246
14941: LD_INT 19
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14949
14947: GO 14960
14949: POP
// bc_type := b_ext_radio ; 20 :
14950: LD_ADDR_OWVAR 42
14954: PUSH
14955: LD_INT 22
14957: ST_TO_ADDR
14958: GO 15246
14960: LD_INT 20
14962: DOUBLE
14963: EQUAL
14964: IFTRUE 14968
14966: GO 14979
14968: POP
// bc_type := b_ext_siberium ; 21 :
14969: LD_ADDR_OWVAR 42
14973: PUSH
14974: LD_INT 21
14976: ST_TO_ADDR
14977: GO 15246
14979: LD_INT 21
14981: DOUBLE
14982: EQUAL
14983: IFTRUE 14987
14985: GO 14998
14987: POP
// bc_type := b_ext_computer ; 22 :
14988: LD_ADDR_OWVAR 42
14992: PUSH
14993: LD_INT 24
14995: ST_TO_ADDR
14996: GO 15246
14998: LD_INT 22
15000: DOUBLE
15001: EQUAL
15002: IFTRUE 15006
15004: GO 15017
15006: POP
// bc_type := b_ext_track ; 23 :
15007: LD_ADDR_OWVAR 42
15011: PUSH
15012: LD_INT 16
15014: ST_TO_ADDR
15015: GO 15246
15017: LD_INT 23
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15036
15025: POP
// bc_type := b_ext_laser ; 24 :
15026: LD_ADDR_OWVAR 42
15030: PUSH
15031: LD_INT 25
15033: ST_TO_ADDR
15034: GO 15246
15036: LD_INT 24
15038: DOUBLE
15039: EQUAL
15040: IFTRUE 15044
15042: GO 15055
15044: POP
// bc_type := b_control_tower ; 25 :
15045: LD_ADDR_OWVAR 42
15049: PUSH
15050: LD_INT 36
15052: ST_TO_ADDR
15053: GO 15246
15055: LD_INT 25
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15074
15063: POP
// bc_type := b_breastwork ; 26 :
15064: LD_ADDR_OWVAR 42
15068: PUSH
15069: LD_INT 31
15071: ST_TO_ADDR
15072: GO 15246
15074: LD_INT 26
15076: DOUBLE
15077: EQUAL
15078: IFTRUE 15082
15080: GO 15093
15082: POP
// bc_type := b_bunker ; 27 :
15083: LD_ADDR_OWVAR 42
15087: PUSH
15088: LD_INT 32
15090: ST_TO_ADDR
15091: GO 15246
15093: LD_INT 27
15095: DOUBLE
15096: EQUAL
15097: IFTRUE 15101
15099: GO 15112
15101: POP
// bc_type := b_turret ; 28 :
15102: LD_ADDR_OWVAR 42
15106: PUSH
15107: LD_INT 33
15109: ST_TO_ADDR
15110: GO 15246
15112: LD_INT 28
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15131
15120: POP
// bc_type := b_armoury ; 29 :
15121: LD_ADDR_OWVAR 42
15125: PUSH
15126: LD_INT 4
15128: ST_TO_ADDR
15129: GO 15246
15131: LD_INT 29
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15150
15139: POP
// bc_type := b_barracks ; 30 :
15140: LD_ADDR_OWVAR 42
15144: PUSH
15145: LD_INT 5
15147: ST_TO_ADDR
15148: GO 15246
15150: LD_INT 30
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15169
15158: POP
// bc_type := b_solar_power ; 31 :
15159: LD_ADDR_OWVAR 42
15163: PUSH
15164: LD_INT 27
15166: ST_TO_ADDR
15167: GO 15246
15169: LD_INT 31
15171: DOUBLE
15172: EQUAL
15173: IFTRUE 15177
15175: GO 15188
15177: POP
// bc_type := b_oil_power ; 32 :
15178: LD_ADDR_OWVAR 42
15182: PUSH
15183: LD_INT 26
15185: ST_TO_ADDR
15186: GO 15246
15188: LD_INT 32
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15207
15196: POP
// bc_type := b_siberite_power ; 33 :
15197: LD_ADDR_OWVAR 42
15201: PUSH
15202: LD_INT 28
15204: ST_TO_ADDR
15205: GO 15246
15207: LD_INT 33
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15226
15215: POP
// bc_type := b_oil_mine ; 34 :
15216: LD_ADDR_OWVAR 42
15220: PUSH
15221: LD_INT 29
15223: ST_TO_ADDR
15224: GO 15246
15226: LD_INT 34
15228: DOUBLE
15229: EQUAL
15230: IFTRUE 15234
15232: GO 15245
15234: POP
// bc_type := b_siberite_mine ; end ;
15235: LD_ADDR_OWVAR 42
15239: PUSH
15240: LD_INT 30
15242: ST_TO_ADDR
15243: GO 15246
15245: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15246: LD_ADDR_VAR 0 8
15250: PUSH
15251: LD_VAR 0 5
15255: PPUSH
15256: LD_VAR 0 6
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: CALL_OW 47
15270: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15271: LD_OWVAR 42
15275: PUSH
15276: LD_INT 32
15278: PUSH
15279: LD_INT 33
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: IN
15286: IFFALSE 15302
// PlaceWeaponTurret ( b , weapon ) ;
15288: LD_VAR 0 8
15292: PPUSH
15293: LD_VAR 0 4
15297: PPUSH
15298: CALL_OW 431
// end ;
15302: LD_VAR 0 7
15306: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15307: LD_INT 0
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15313: LD_ADDR_VAR 0 4
15317: PUSH
15318: LD_INT 22
15320: PUSH
15321: LD_OWVAR 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: LD_INT 30
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 1
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 69
15366: ST_TO_ADDR
// if not tmp then
15367: LD_VAR 0 4
15371: NOT
15372: IFFALSE 15376
// exit ;
15374: GO 15435
// for i in tmp do
15376: LD_ADDR_VAR 0 2
15380: PUSH
15381: LD_VAR 0 4
15385: PUSH
15386: FOR_IN
15387: IFFALSE 15433
// for j = 1 to 3 do
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_INT 3
15401: PUSH
15402: FOR_TO
15403: IFFALSE 15429
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15405: LD_VAR 0 2
15409: PPUSH
15410: CALL_OW 274
15414: PPUSH
15415: LD_VAR 0 3
15419: PPUSH
15420: LD_INT 99999
15422: PPUSH
15423: CALL_OW 277
15427: GO 15402
15429: POP
15430: POP
15431: GO 15386
15433: POP
15434: POP
// end ;
15435: LD_VAR 0 1
15439: RET
// export function hHackSetLevel10 ; var i , j ; begin
15440: LD_INT 0
15442: PPUSH
15443: PPUSH
15444: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 69
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15518
// if IsSelected ( i ) then
15468: LD_VAR 0 2
15472: PPUSH
15473: CALL_OW 306
15477: IFFALSE 15516
// begin for j := 1 to 4 do
15479: LD_ADDR_VAR 0 3
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_INT 4
15491: PUSH
15492: FOR_TO
15493: IFFALSE 15514
// SetSkill ( i , j , 10 ) ;
15495: LD_VAR 0 2
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_INT 10
15507: PPUSH
15508: CALL_OW 237
15512: GO 15492
15514: POP
15515: POP
// end ;
15516: GO 15465
15518: POP
15519: POP
// end ;
15520: LD_VAR 0 1
15524: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15525: LD_INT 0
15527: PPUSH
15528: PPUSH
15529: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15530: LD_ADDR_VAR 0 2
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_OWVAR 2
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: PUSH
15566: FOR_IN
15567: IFFALSE 15608
// begin for j := 1 to 4 do
15569: LD_ADDR_VAR 0 3
15573: PUSH
15574: DOUBLE
15575: LD_INT 1
15577: DEC
15578: ST_TO_ADDR
15579: LD_INT 4
15581: PUSH
15582: FOR_TO
15583: IFFALSE 15604
// SetSkill ( i , j , 10 ) ;
15585: LD_VAR 0 2
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 10
15597: PPUSH
15598: CALL_OW 237
15602: GO 15582
15604: POP
15605: POP
// end ;
15606: GO 15566
15608: POP
15609: POP
// end ;
15610: LD_VAR 0 1
15614: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15615: LD_INT 0
15617: PPUSH
// uc_side := your_side ;
15618: LD_ADDR_OWVAR 20
15622: PUSH
15623: LD_OWVAR 2
15627: ST_TO_ADDR
// uc_nation := nation ;
15628: LD_ADDR_OWVAR 21
15632: PUSH
15633: LD_VAR 0 1
15637: ST_TO_ADDR
// InitHc ;
15638: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15642: LD_INT 0
15644: PPUSH
15645: LD_VAR 0 2
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15659: LD_VAR 0 4
15663: PPUSH
15664: LD_VAR 0 5
15668: PPUSH
15669: CALL_OW 428
15673: PUSH
15674: LD_INT 0
15676: EQUAL
15677: IFFALSE 15701
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15679: CALL_OW 44
15683: PPUSH
15684: LD_VAR 0 4
15688: PPUSH
15689: LD_VAR 0 5
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 48
// end ;
15701: LD_VAR 0 6
15705: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
// uc_side := your_side ;
15710: LD_ADDR_OWVAR 20
15714: PUSH
15715: LD_OWVAR 2
15719: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: LD_INT 4
15736: PUSH
15737: LD_INT 5
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: IN
15747: IFFALSE 15759
// uc_nation := nation_american else
15749: LD_ADDR_OWVAR 21
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
15757: GO 15802
// if chassis in [ 11 , 12 , 13 , 14 ] then
15759: LD_VAR 0 1
15763: PUSH
15764: LD_INT 11
15766: PUSH
15767: LD_INT 12
15769: PUSH
15770: LD_INT 13
15772: PUSH
15773: LD_INT 14
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: IN
15782: IFFALSE 15794
// uc_nation := nation_arabian else
15784: LD_ADDR_OWVAR 21
15788: PUSH
15789: LD_INT 2
15791: ST_TO_ADDR
15792: GO 15802
// uc_nation := nation_russian ;
15794: LD_ADDR_OWVAR 21
15798: PUSH
15799: LD_INT 3
15801: ST_TO_ADDR
// vc_chassis := chassis ;
15802: LD_ADDR_OWVAR 37
15806: PUSH
15807: LD_VAR 0 1
15811: ST_TO_ADDR
// vc_engine := engine ;
15812: LD_ADDR_OWVAR 39
15816: PUSH
15817: LD_VAR 0 2
15821: ST_TO_ADDR
// vc_control := control ;
15822: LD_ADDR_OWVAR 38
15826: PUSH
15827: LD_VAR 0 3
15831: ST_TO_ADDR
// vc_weapon := weapon ;
15832: LD_ADDR_OWVAR 40
15836: PUSH
15837: LD_VAR 0 4
15841: ST_TO_ADDR
// un := CreateVehicle ;
15842: LD_ADDR_VAR 0 8
15846: PUSH
15847: CALL_OW 45
15851: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15852: LD_VAR 0 8
15856: PPUSH
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 5
15862: PPUSH
15863: CALL_OW 12
15867: PPUSH
15868: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15872: LD_VAR 0 8
15876: PPUSH
15877: LD_VAR 0 5
15881: PPUSH
15882: LD_VAR 0 6
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 48
// end ;
15894: LD_VAR 0 7
15898: RET
// export hInvincible ; every 1 do
15899: GO 15901
15901: DISABLE
// hInvincible := [ ] ;
15902: LD_ADDR_EXP 65
15906: PUSH
15907: EMPTY
15908: ST_TO_ADDR
15909: END
// every 10 do var i ;
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
// begin enable ;
15916: ENABLE
// if not hInvincible then
15917: LD_EXP 65
15921: NOT
15922: IFFALSE 15926
// exit ;
15924: GO 15970
// for i in hInvincible do
15926: LD_ADDR_VAR 0 1
15930: PUSH
15931: LD_EXP 65
15935: PUSH
15936: FOR_IN
15937: IFFALSE 15968
// if GetLives ( i ) < 1000 then
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 256
15948: PUSH
15949: LD_INT 1000
15951: LESS
15952: IFFALSE 15966
// SetLives ( i , 1000 ) ;
15954: LD_VAR 0 1
15958: PPUSH
15959: LD_INT 1000
15961: PPUSH
15962: CALL_OW 234
15966: GO 15936
15968: POP
15969: POP
// end ;
15970: PPOPN 1
15972: END
// export function hHackInvincible ; var i ; begin
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: LD_INT 21
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 21
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: PPUSH
16010: CALL_OW 69
16014: PUSH
16015: FOR_IN
16016: IFFALSE 16077
// if IsSelected ( i ) then
16018: LD_VAR 0 2
16022: PPUSH
16023: CALL_OW 306
16027: IFFALSE 16075
// begin if i in hInvincible then
16029: LD_VAR 0 2
16033: PUSH
16034: LD_EXP 65
16038: IN
16039: IFFALSE 16059
// hInvincible := hInvincible diff i else
16041: LD_ADDR_EXP 65
16045: PUSH
16046: LD_EXP 65
16050: PUSH
16051: LD_VAR 0 2
16055: DIFF
16056: ST_TO_ADDR
16057: GO 16075
// hInvincible := hInvincible union i ;
16059: LD_ADDR_EXP 65
16063: PUSH
16064: LD_EXP 65
16068: PUSH
16069: LD_VAR 0 2
16073: UNION
16074: ST_TO_ADDR
// end ;
16075: GO 16015
16077: POP
16078: POP
// end ;
16079: LD_VAR 0 1
16083: RET
// export function hHackInvisible ; var i , j ; begin
16084: LD_INT 0
16086: PPUSH
16087: PPUSH
16088: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: PUSH
16109: FOR_IN
16110: IFFALSE 16134
// if IsSelected ( i ) then
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 306
16121: IFFALSE 16132
// ComForceInvisible ( i ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 496
16132: GO 16109
16134: POP
16135: POP
// end ;
16136: LD_VAR 0 1
16140: RET
// export function hHackChangeYourSide ; begin
16141: LD_INT 0
16143: PPUSH
// if your_side = 8 then
16144: LD_OWVAR 2
16148: PUSH
16149: LD_INT 8
16151: EQUAL
16152: IFFALSE 16164
// your_side := 0 else
16154: LD_ADDR_OWVAR 2
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
16162: GO 16178
// your_side := your_side + 1 ;
16164: LD_ADDR_OWVAR 2
16168: PUSH
16169: LD_OWVAR 2
16173: PUSH
16174: LD_INT 1
16176: PLUS
16177: ST_TO_ADDR
// end ;
16178: LD_VAR 0 1
16182: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16183: LD_INT 0
16185: PPUSH
16186: PPUSH
16187: PPUSH
// for i in all_units do
16188: LD_ADDR_VAR 0 2
16192: PUSH
16193: LD_OWVAR 3
16197: PUSH
16198: FOR_IN
16199: IFFALSE 16277
// if IsSelected ( i ) then
16201: LD_VAR 0 2
16205: PPUSH
16206: CALL_OW 306
16210: IFFALSE 16275
// begin j := GetSide ( i ) ;
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_VAR 0 2
16221: PPUSH
16222: CALL_OW 255
16226: ST_TO_ADDR
// if j = 8 then
16227: LD_VAR 0 3
16231: PUSH
16232: LD_INT 8
16234: EQUAL
16235: IFFALSE 16247
// j := 0 else
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 0
16244: ST_TO_ADDR
16245: GO 16261
// j := j + 1 ;
16247: LD_ADDR_VAR 0 3
16251: PUSH
16252: LD_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: PLUS
16260: ST_TO_ADDR
// SetSide ( i , j ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_VAR 0 3
16270: PPUSH
16271: CALL_OW 235
// end ;
16275: GO 16198
16277: POP
16278: POP
// end ;
16279: LD_VAR 0 1
16283: RET
// export function hHackFog ; begin
16284: LD_INT 0
16286: PPUSH
// FogOff ( true ) ;
16287: LD_INT 1
16289: PPUSH
16290: CALL_OW 344
// end ;
16294: LD_VAR 0 1
16298: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16299: LD_INT 0
16301: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_VAR 0 2
16311: PPUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: LD_INT 1
16322: PPUSH
16323: CALL_OW 483
// CenterOnXY ( x , y ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 84
// end ;
16341: LD_VAR 0 4
16345: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16350: LD_VAR 0 1
16354: NOT
16355: PUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: CALL_OW 488
16370: NOT
16371: OR
16372: PUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 266
16382: PUSH
16383: LD_INT 3
16385: NONEQUAL
16386: PUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 247
16396: PUSH
16397: LD_INT 1
16399: EQUAL
16400: NOT
16401: AND
16402: OR
16403: IFFALSE 16407
// exit ;
16405: GO 16556
// if GetType ( factory ) = unit_human then
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 247
16416: PUSH
16417: LD_INT 1
16419: EQUAL
16420: IFFALSE 16437
// factory := IsInUnit ( factory ) ;
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 310
16436: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 266
16446: PUSH
16447: LD_INT 3
16449: NONEQUAL
16450: IFFALSE 16454
// exit ;
16452: GO 16556
// if HexInfo ( x , y ) = factory then
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: CALL_OW 428
16468: PUSH
16469: LD_VAR 0 1
16473: EQUAL
16474: IFFALSE 16501
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16476: LD_ADDR_EXP 66
16480: PUSH
16481: LD_EXP 66
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: LD_INT 0
16493: PPUSH
16494: CALL_OW 1
16498: ST_TO_ADDR
16499: GO 16552
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16501: LD_ADDR_EXP 66
16505: PUSH
16506: LD_EXP 66
16510: PPUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 255
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: LD_VAR 0 2
16535: PUSH
16536: LD_VAR 0 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 1
16551: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16552: CALL 16561 0 0
// end ;
16556: LD_VAR 0 4
16560: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
16565: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16566: LD_STRING resetFactoryWaypoint();
16568: PPUSH
16569: CALL_OW 559
// if factoryWaypoints then
16573: LD_EXP 66
16577: IFFALSE 16703
// begin list := PrepareArray ( factoryWaypoints ) ;
16579: LD_ADDR_VAR 0 3
16583: PUSH
16584: LD_EXP 66
16588: PPUSH
16589: CALL 63188 0 1
16593: ST_TO_ADDR
// for i := 1 to list do
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: DOUBLE
16600: LD_INT 1
16602: DEC
16603: ST_TO_ADDR
16604: LD_VAR 0 3
16608: PUSH
16609: FOR_TO
16610: IFFALSE 16701
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16612: LD_STRING setFactoryWaypointXY(
16614: PUSH
16615: LD_VAR 0 3
16619: PUSH
16620: LD_VAR 0 2
16624: ARRAY
16625: PUSH
16626: LD_INT 1
16628: ARRAY
16629: STR
16630: PUSH
16631: LD_STRING ,
16633: STR
16634: PUSH
16635: LD_VAR 0 3
16639: PUSH
16640: LD_VAR 0 2
16644: ARRAY
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: STR
16650: PUSH
16651: LD_STRING ,
16653: STR
16654: PUSH
16655: LD_VAR 0 3
16659: PUSH
16660: LD_VAR 0 2
16664: ARRAY
16665: PUSH
16666: LD_INT 3
16668: ARRAY
16669: STR
16670: PUSH
16671: LD_STRING ,
16673: STR
16674: PUSH
16675: LD_VAR 0 3
16679: PUSH
16680: LD_VAR 0 2
16684: ARRAY
16685: PUSH
16686: LD_INT 4
16688: ARRAY
16689: STR
16690: PUSH
16691: LD_STRING )
16693: STR
16694: PPUSH
16695: CALL_OW 559
16699: GO 16609
16701: POP
16702: POP
// end ; end ;
16703: LD_VAR 0 1
16707: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16708: LD_INT 0
16710: PPUSH
// if HexInfo ( x , y ) = warehouse then
16711: LD_VAR 0 2
16715: PPUSH
16716: LD_VAR 0 3
16720: PPUSH
16721: CALL_OW 428
16725: PUSH
16726: LD_VAR 0 1
16730: EQUAL
16731: IFFALSE 16758
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16733: LD_ADDR_EXP 67
16737: PUSH
16738: LD_EXP 67
16742: PPUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: LD_INT 0
16750: PPUSH
16751: CALL_OW 1
16755: ST_TO_ADDR
16756: GO 16809
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16758: LD_ADDR_EXP 67
16762: PUSH
16763: LD_EXP 67
16767: PPUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 255
16782: PUSH
16783: LD_VAR 0 1
16787: PUSH
16788: LD_VAR 0 2
16792: PUSH
16793: LD_VAR 0 3
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 1
16808: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16809: CALL 16818 0 0
// end ;
16813: LD_VAR 0 4
16817: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
16822: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16823: LD_STRING resetWarehouseGatheringPoints();
16825: PPUSH
16826: CALL_OW 559
// if warehouseGatheringPoints then
16830: LD_EXP 67
16834: IFFALSE 16960
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: LD_EXP 67
16845: PPUSH
16846: CALL 63188 0 1
16850: ST_TO_ADDR
// for i := 1 to list do
16851: LD_ADDR_VAR 0 2
16855: PUSH
16856: DOUBLE
16857: LD_INT 1
16859: DEC
16860: ST_TO_ADDR
16861: LD_VAR 0 3
16865: PUSH
16866: FOR_TO
16867: IFFALSE 16958
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16869: LD_STRING setWarehouseGatheringPointXY(
16871: PUSH
16872: LD_VAR 0 3
16876: PUSH
16877: LD_VAR 0 2
16881: ARRAY
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: STR
16887: PUSH
16888: LD_STRING ,
16890: STR
16891: PUSH
16892: LD_VAR 0 3
16896: PUSH
16897: LD_VAR 0 2
16901: ARRAY
16902: PUSH
16903: LD_INT 2
16905: ARRAY
16906: STR
16907: PUSH
16908: LD_STRING ,
16910: STR
16911: PUSH
16912: LD_VAR 0 3
16916: PUSH
16917: LD_VAR 0 2
16921: ARRAY
16922: PUSH
16923: LD_INT 3
16925: ARRAY
16926: STR
16927: PUSH
16928: LD_STRING ,
16930: STR
16931: PUSH
16932: LD_VAR 0 3
16936: PUSH
16937: LD_VAR 0 2
16941: ARRAY
16942: PUSH
16943: LD_INT 4
16945: ARRAY
16946: STR
16947: PUSH
16948: LD_STRING )
16950: STR
16951: PPUSH
16952: CALL_OW 559
16956: GO 16866
16958: POP
16959: POP
// end ; end ;
16960: LD_VAR 0 1
16964: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16965: LD_EXP 67
16969: IFFALSE 17654
16971: GO 16973
16973: DISABLE
16974: LD_INT 0
16976: PPUSH
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
16983: PPUSH
16984: PPUSH
// begin enable ;
16985: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16986: LD_ADDR_VAR 0 3
16990: PUSH
16991: LD_EXP 67
16995: PPUSH
16996: CALL 63188 0 1
17000: ST_TO_ADDR
// if not list then
17001: LD_VAR 0 3
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17654
// for i := 1 to list do
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: DOUBLE
17016: LD_INT 1
17018: DEC
17019: ST_TO_ADDR
17020: LD_VAR 0 3
17024: PUSH
17025: FOR_TO
17026: IFFALSE 17652
// begin depot := list [ i ] [ 2 ] ;
17028: LD_ADDR_VAR 0 8
17032: PUSH
17033: LD_VAR 0 3
17037: PUSH
17038: LD_VAR 0 1
17042: ARRAY
17043: PUSH
17044: LD_INT 2
17046: ARRAY
17047: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17048: LD_ADDR_VAR 0 5
17052: PUSH
17053: LD_VAR 0 3
17057: PUSH
17058: LD_VAR 0 1
17062: ARRAY
17063: PUSH
17064: LD_INT 1
17066: ARRAY
17067: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17068: LD_VAR 0 8
17072: PPUSH
17073: CALL_OW 301
17077: PUSH
17078: LD_VAR 0 5
17082: PUSH
17083: LD_VAR 0 8
17087: PPUSH
17088: CALL_OW 255
17092: NONEQUAL
17093: OR
17094: IFFALSE 17123
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17096: LD_ADDR_EXP 67
17100: PUSH
17101: LD_EXP 67
17105: PPUSH
17106: LD_VAR 0 8
17110: PPUSH
17111: LD_INT 0
17113: PPUSH
17114: CALL_OW 1
17118: ST_TO_ADDR
// exit ;
17119: POP
17120: POP
17121: GO 17654
// end ; x := list [ i ] [ 3 ] ;
17123: LD_ADDR_VAR 0 6
17127: PUSH
17128: LD_VAR 0 3
17132: PUSH
17133: LD_VAR 0 1
17137: ARRAY
17138: PUSH
17139: LD_INT 3
17141: ARRAY
17142: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17143: LD_ADDR_VAR 0 7
17147: PUSH
17148: LD_VAR 0 3
17152: PUSH
17153: LD_VAR 0 1
17157: ARRAY
17158: PUSH
17159: LD_INT 4
17161: ARRAY
17162: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17163: LD_ADDR_VAR 0 9
17167: PUSH
17168: LD_VAR 0 6
17172: PPUSH
17173: LD_VAR 0 7
17177: PPUSH
17178: LD_INT 16
17180: PPUSH
17181: CALL 61776 0 3
17185: ST_TO_ADDR
// if not cratesNearbyPoint then
17186: LD_VAR 0 9
17190: NOT
17191: IFFALSE 17197
// exit ;
17193: POP
17194: POP
17195: GO 17654
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17197: LD_ADDR_VAR 0 4
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_VAR 0 5
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: LD_INT 60
17219: PUSH
17220: EMPTY
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 91
17229: PUSH
17230: LD_VAR 0 8
17234: PUSH
17235: LD_INT 6
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 25
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 25
17258: PUSH
17259: LD_INT 16
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: PUSH
17282: LD_VAR 0 8
17286: PPUSH
17287: CALL_OW 313
17291: PPUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 60
17297: PUSH
17298: EMPTY
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: LD_INT 25
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 25
17320: PUSH
17321: LD_INT 16
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 72
17341: UNION
17342: ST_TO_ADDR
// if tmp then
17343: LD_VAR 0 4
17347: IFFALSE 17427
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17349: LD_ADDR_VAR 0 4
17353: PUSH
17354: LD_VAR 0 4
17358: PPUSH
17359: LD_INT 3
17361: PPUSH
17362: CALL 59745 0 2
17366: ST_TO_ADDR
// for j in tmp do
17367: LD_ADDR_VAR 0 2
17371: PUSH
17372: LD_VAR 0 4
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17421
// begin if IsInUnit ( j ) then
17380: LD_VAR 0 2
17384: PPUSH
17385: CALL_OW 310
17389: IFFALSE 17400
// ComExit ( j ) ;
17391: LD_VAR 0 2
17395: PPUSH
17396: CALL 59828 0 1
// AddComCollect ( j , x , y ) ;
17400: LD_VAR 0 2
17404: PPUSH
17405: LD_VAR 0 6
17409: PPUSH
17410: LD_VAR 0 7
17414: PPUSH
17415: CALL_OW 177
// end ;
17419: GO 17377
17421: POP
17422: POP
// exit ;
17423: POP
17424: POP
17425: GO 17654
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17427: LD_ADDR_VAR 0 4
17431: PUSH
17432: LD_INT 22
17434: PUSH
17435: LD_VAR 0 5
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 91
17446: PUSH
17447: LD_VAR 0 8
17451: PUSH
17452: LD_INT 8
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 2
17462: PUSH
17463: LD_INT 34
17465: PUSH
17466: LD_INT 12
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 34
17475: PUSH
17476: LD_INT 51
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 34
17485: PUSH
17486: LD_INT 32
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 34
17495: PUSH
17496: LD_INT 89
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PPUSH
17515: CALL_OW 69
17519: ST_TO_ADDR
// if tmp then
17520: LD_VAR 0 4
17524: IFFALSE 17650
// begin for j in tmp do
17526: LD_ADDR_VAR 0 2
17530: PUSH
17531: LD_VAR 0 4
17535: PUSH
17536: FOR_IN
17537: IFFALSE 17648
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17539: LD_VAR 0 2
17543: PPUSH
17544: CALL_OW 262
17548: PUSH
17549: LD_INT 3
17551: EQUAL
17552: PUSH
17553: LD_VAR 0 2
17557: PPUSH
17558: CALL_OW 261
17562: PUSH
17563: LD_INT 20
17565: GREATER
17566: OR
17567: PUSH
17568: LD_VAR 0 2
17572: PPUSH
17573: CALL_OW 314
17577: NOT
17578: AND
17579: PUSH
17580: LD_VAR 0 2
17584: PPUSH
17585: CALL_OW 263
17589: PUSH
17590: LD_INT 1
17592: NONEQUAL
17593: PUSH
17594: LD_VAR 0 2
17598: PPUSH
17599: CALL_OW 311
17603: OR
17604: AND
17605: IFFALSE 17646
// begin ComCollect ( j , x , y ) ;
17607: LD_VAR 0 2
17611: PPUSH
17612: LD_VAR 0 6
17616: PPUSH
17617: LD_VAR 0 7
17621: PPUSH
17622: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17626: LD_VAR 0 2
17630: PPUSH
17631: LD_VAR 0 8
17635: PPUSH
17636: CALL_OW 172
// exit ;
17640: POP
17641: POP
17642: POP
17643: POP
17644: GO 17654
// end ;
17646: GO 17536
17648: POP
17649: POP
// end ; end ;
17650: GO 17025
17652: POP
17653: POP
// end ; end_of_file
17654: PPOPN 9
17656: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 200
17664: DOUBLE
17665: GREATEREQUAL
17666: IFFALSE 17674
17668: LD_INT 299
17670: DOUBLE
17671: LESSEQUAL
17672: IFTRUE 17676
17674: GO 17708
17676: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_VAR 0 2
17686: PPUSH
17687: LD_VAR 0 3
17691: PPUSH
17692: LD_VAR 0 4
17696: PPUSH
17697: LD_VAR 0 5
17701: PPUSH
17702: CALL 18196 0 5
17706: GO 17785
17708: LD_INT 300
17710: DOUBLE
17711: GREATEREQUAL
17712: IFFALSE 17720
17714: LD_INT 399
17716: DOUBLE
17717: LESSEQUAL
17718: IFTRUE 17722
17720: GO 17784
17722: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_VAR 0 2
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_VAR 0 4
17742: PPUSH
17743: LD_VAR 0 5
17747: PPUSH
17748: LD_VAR 0 6
17752: PPUSH
17753: LD_VAR 0 7
17757: PPUSH
17758: LD_VAR 0 8
17762: PPUSH
17763: LD_VAR 0 9
17767: PPUSH
17768: LD_VAR 0 10
17772: PPUSH
17773: LD_VAR 0 11
17777: PPUSH
17778: CALL 14358 0 11
17782: GO 17785
17784: POP
// end ;
17785: PPOPN 11
17787: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17788: LD_VAR 0 1
17792: PPUSH
17793: LD_VAR 0 2
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: LD_VAR 0 4
17807: PPUSH
17808: LD_VAR 0 5
17812: PPUSH
17813: CALL 17932 0 5
// end ; end_of_file
17817: PPOPN 5
17819: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17820: LD_INT 0
17822: PPUSH
17823: PPUSH
17824: PPUSH
17825: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 264
17835: PUSH
17836: LD_INT 91
17838: EQUAL
17839: IFFALSE 17911
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17841: LD_INT 68
17843: PPUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 255
17853: PPUSH
17854: CALL_OW 321
17858: PUSH
17859: LD_INT 2
17861: EQUAL
17862: IFFALSE 17874
// eff := 70 else
17864: LD_ADDR_VAR 0 4
17868: PUSH
17869: LD_INT 70
17871: ST_TO_ADDR
17872: GO 17882
// eff := 30 ;
17874: LD_ADDR_VAR 0 4
17878: PUSH
17879: LD_INT 30
17881: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 250
17891: PPUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 251
17901: PPUSH
17902: LD_VAR 0 4
17906: PPUSH
17907: CALL_OW 495
// end ; end ;
17911: LD_VAR 0 2
17915: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17916: LD_INT 0
17918: PPUSH
// end ;
17919: LD_VAR 0 4
17923: RET
// export function SOS_Command ( cmd ) ; begin
17924: LD_INT 0
17926: PPUSH
// end ;
17927: LD_VAR 0 2
17931: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17932: LD_INT 0
17934: PPUSH
// end ;
17935: LD_VAR 0 6
17939: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
// if not vehicle or not factory then
17944: LD_VAR 0 1
17948: NOT
17949: PUSH
17950: LD_VAR 0 2
17954: NOT
17955: OR
17956: IFFALSE 17960
// exit ;
17958: GO 18191
// if factoryWaypoints >= factory then
17960: LD_EXP 66
17964: PUSH
17965: LD_VAR 0 2
17969: GREATEREQUAL
17970: IFFALSE 18191
// if factoryWaypoints [ factory ] then
17972: LD_EXP 66
17976: PUSH
17977: LD_VAR 0 2
17981: ARRAY
17982: IFFALSE 18191
// begin if GetControl ( vehicle ) = control_manual then
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 263
17993: PUSH
17994: LD_INT 1
17996: EQUAL
17997: IFFALSE 18078
// begin driver := IsDrivenBy ( vehicle ) ;
17999: LD_ADDR_VAR 0 4
18003: PUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 311
18013: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18014: LD_VAR 0 4
18018: PPUSH
18019: LD_EXP 66
18023: PUSH
18024: LD_VAR 0 2
18028: ARRAY
18029: PUSH
18030: LD_INT 3
18032: ARRAY
18033: PPUSH
18034: LD_EXP 66
18038: PUSH
18039: LD_VAR 0 2
18043: ARRAY
18044: PUSH
18045: LD_INT 4
18047: ARRAY
18048: PPUSH
18049: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18053: LD_VAR 0 4
18057: PPUSH
18058: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18062: LD_VAR 0 4
18066: PPUSH
18067: LD_VAR 0 2
18071: PPUSH
18072: CALL_OW 180
// end else
18076: GO 18191
// if GetControl ( vehicle ) = control_remote then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 263
18087: PUSH
18088: LD_INT 2
18090: EQUAL
18091: IFFALSE 18152
// begin wait ( 0 0$2 ) ;
18093: LD_INT 70
18095: PPUSH
18096: CALL_OW 67
// if Connect ( vehicle ) then
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL 30049 0 1
18109: IFFALSE 18150
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_EXP 66
18120: PUSH
18121: LD_VAR 0 2
18125: ARRAY
18126: PUSH
18127: LD_INT 3
18129: ARRAY
18130: PPUSH
18131: LD_EXP 66
18135: PUSH
18136: LD_VAR 0 2
18140: ARRAY
18141: PUSH
18142: LD_INT 4
18144: ARRAY
18145: PPUSH
18146: CALL_OW 171
// end else
18150: GO 18191
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18152: LD_VAR 0 1
18156: PPUSH
18157: LD_EXP 66
18161: PUSH
18162: LD_VAR 0 2
18166: ARRAY
18167: PUSH
18168: LD_INT 3
18170: ARRAY
18171: PPUSH
18172: LD_EXP 66
18176: PUSH
18177: LD_VAR 0 2
18181: ARRAY
18182: PUSH
18183: LD_INT 4
18185: ARRAY
18186: PPUSH
18187: CALL_OW 171
// end ; end ;
18191: LD_VAR 0 3
18195: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18196: LD_INT 0
18198: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18199: LD_VAR 0 1
18203: PUSH
18204: LD_INT 250
18206: EQUAL
18207: PUSH
18208: LD_VAR 0 2
18212: PPUSH
18213: CALL_OW 264
18217: PUSH
18218: LD_INT 81
18220: EQUAL
18221: AND
18222: IFFALSE 18243
// MinerPlaceMine ( unit , x , y ) ;
18224: LD_VAR 0 2
18228: PPUSH
18229: LD_VAR 0 4
18233: PPUSH
18234: LD_VAR 0 5
18238: PPUSH
18239: CALL 20628 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 251
18250: EQUAL
18251: PUSH
18252: LD_VAR 0 2
18256: PPUSH
18257: CALL_OW 264
18261: PUSH
18262: LD_INT 81
18264: EQUAL
18265: AND
18266: IFFALSE 18287
// MinerDetonateMine ( unit , x , y ) ;
18268: LD_VAR 0 2
18272: PPUSH
18273: LD_VAR 0 4
18277: PPUSH
18278: LD_VAR 0 5
18282: PPUSH
18283: CALL 20903 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18287: LD_VAR 0 1
18291: PUSH
18292: LD_INT 252
18294: EQUAL
18295: PUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL_OW 264
18305: PUSH
18306: LD_INT 81
18308: EQUAL
18309: AND
18310: IFFALSE 18331
// MinerCreateMinefield ( unit , x , y ) ;
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_VAR 0 4
18321: PPUSH
18322: LD_VAR 0 5
18326: PPUSH
18327: CALL 21320 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_INT 253
18338: EQUAL
18339: PUSH
18340: LD_VAR 0 2
18344: PPUSH
18345: CALL_OW 257
18349: PUSH
18350: LD_INT 5
18352: EQUAL
18353: AND
18354: IFFALSE 18375
// ComBinocular ( unit , x , y ) ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: CALL 21689 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18375: LD_VAR 0 1
18379: PUSH
18380: LD_INT 254
18382: EQUAL
18383: PUSH
18384: LD_VAR 0 2
18388: PPUSH
18389: CALL_OW 264
18393: PUSH
18394: LD_INT 99
18396: EQUAL
18397: AND
18398: PUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: CALL_OW 263
18408: PUSH
18409: LD_INT 3
18411: EQUAL
18412: AND
18413: IFFALSE 18429
// HackDestroyVehicle ( unit , selectedUnit ) ;
18415: LD_VAR 0 2
18419: PPUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: CALL 19992 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18429: LD_VAR 0 1
18433: PUSH
18434: LD_INT 255
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: CALL_OW 264
18447: PUSH
18448: LD_INT 14
18450: PUSH
18451: LD_INT 53
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: IN
18458: AND
18459: PUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: CALL_OW 488
18474: AND
18475: IFFALSE 18499
// CutTreeXYR ( unit , x , y , 12 ) ;
18477: LD_VAR 0 2
18481: PPUSH
18482: LD_VAR 0 4
18486: PPUSH
18487: LD_VAR 0 5
18491: PPUSH
18492: LD_INT 12
18494: PPUSH
18495: CALL 18562 0 4
// if cmd = 256 then
18499: LD_VAR 0 1
18503: PUSH
18504: LD_INT 256
18506: EQUAL
18507: IFFALSE 18528
// SetFactoryWaypoint ( unit , x , y ) ;
18509: LD_VAR 0 2
18513: PPUSH
18514: LD_VAR 0 4
18518: PPUSH
18519: LD_VAR 0 5
18523: PPUSH
18524: CALL 16346 0 3
// if cmd = 257 then
18528: LD_VAR 0 1
18532: PUSH
18533: LD_INT 257
18535: EQUAL
18536: IFFALSE 18557
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18538: LD_VAR 0 2
18542: PPUSH
18543: LD_VAR 0 4
18547: PPUSH
18548: LD_VAR 0 5
18552: PPUSH
18553: CALL 16708 0 3
// end ;
18557: LD_VAR 0 6
18561: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18562: LD_INT 0
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18573: LD_VAR 0 1
18577: NOT
18578: PUSH
18579: LD_VAR 0 2
18583: PPUSH
18584: LD_VAR 0 3
18588: PPUSH
18589: CALL_OW 488
18593: NOT
18594: OR
18595: PUSH
18596: LD_VAR 0 4
18600: NOT
18601: OR
18602: IFFALSE 18606
// exit ;
18604: GO 18946
// list := [ ] ;
18606: LD_ADDR_VAR 0 13
18610: PUSH
18611: EMPTY
18612: ST_TO_ADDR
// if x - r < 0 then
18613: LD_VAR 0 2
18617: PUSH
18618: LD_VAR 0 4
18622: MINUS
18623: PUSH
18624: LD_INT 0
18626: LESS
18627: IFFALSE 18639
// min_x := 0 else
18629: LD_ADDR_VAR 0 7
18633: PUSH
18634: LD_INT 0
18636: ST_TO_ADDR
18637: GO 18655
// min_x := x - r ;
18639: LD_ADDR_VAR 0 7
18643: PUSH
18644: LD_VAR 0 2
18648: PUSH
18649: LD_VAR 0 4
18653: MINUS
18654: ST_TO_ADDR
// if y - r < 0 then
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 4
18664: MINUS
18665: PUSH
18666: LD_INT 0
18668: LESS
18669: IFFALSE 18681
// min_y := 0 else
18671: LD_ADDR_VAR 0 8
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
18679: GO 18697
// min_y := y - r ;
18681: LD_ADDR_VAR 0 8
18685: PUSH
18686: LD_VAR 0 3
18690: PUSH
18691: LD_VAR 0 4
18695: MINUS
18696: ST_TO_ADDR
// max_x := x + r ;
18697: LD_ADDR_VAR 0 9
18701: PUSH
18702: LD_VAR 0 2
18706: PUSH
18707: LD_VAR 0 4
18711: PLUS
18712: ST_TO_ADDR
// max_y := y + r ;
18713: LD_ADDR_VAR 0 10
18717: PUSH
18718: LD_VAR 0 3
18722: PUSH
18723: LD_VAR 0 4
18727: PLUS
18728: ST_TO_ADDR
// for _x = min_x to max_x do
18729: LD_ADDR_VAR 0 11
18733: PUSH
18734: DOUBLE
18735: LD_VAR 0 7
18739: DEC
18740: ST_TO_ADDR
18741: LD_VAR 0 9
18745: PUSH
18746: FOR_TO
18747: IFFALSE 18864
// for _y = min_y to max_y do
18749: LD_ADDR_VAR 0 12
18753: PUSH
18754: DOUBLE
18755: LD_VAR 0 8
18759: DEC
18760: ST_TO_ADDR
18761: LD_VAR 0 10
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18860
// begin if not ValidHex ( _x , _y ) then
18769: LD_VAR 0 11
18773: PPUSH
18774: LD_VAR 0 12
18778: PPUSH
18779: CALL_OW 488
18783: NOT
18784: IFFALSE 18788
// continue ;
18786: GO 18766
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18788: LD_VAR 0 11
18792: PPUSH
18793: LD_VAR 0 12
18797: PPUSH
18798: CALL_OW 351
18802: PUSH
18803: LD_VAR 0 11
18807: PPUSH
18808: LD_VAR 0 12
18812: PPUSH
18813: CALL_OW 554
18817: AND
18818: IFFALSE 18858
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18820: LD_ADDR_VAR 0 13
18824: PUSH
18825: LD_VAR 0 13
18829: PPUSH
18830: LD_VAR 0 13
18834: PUSH
18835: LD_INT 1
18837: PLUS
18838: PPUSH
18839: LD_VAR 0 11
18843: PUSH
18844: LD_VAR 0 12
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 2
18857: ST_TO_ADDR
// end ;
18858: GO 18766
18860: POP
18861: POP
18862: GO 18746
18864: POP
18865: POP
// if not list then
18866: LD_VAR 0 13
18870: NOT
18871: IFFALSE 18875
// exit ;
18873: GO 18946
// for i in list do
18875: LD_ADDR_VAR 0 6
18879: PUSH
18880: LD_VAR 0 13
18884: PUSH
18885: FOR_IN
18886: IFFALSE 18944
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: LD_STRING M
18895: PUSH
18896: LD_VAR 0 6
18900: PUSH
18901: LD_INT 1
18903: ARRAY
18904: PUSH
18905: LD_VAR 0 6
18909: PUSH
18910: LD_INT 2
18912: ARRAY
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: PPUSH
18938: CALL_OW 447
18942: GO 18885
18944: POP
18945: POP
// end ;
18946: LD_VAR 0 5
18950: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18951: LD_EXP 69
18955: NOT
18956: IFFALSE 19006
18958: GO 18960
18960: DISABLE
// begin initHack := true ;
18961: LD_ADDR_EXP 69
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// hackTanks := [ ] ;
18969: LD_ADDR_EXP 70
18973: PUSH
18974: EMPTY
18975: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18976: LD_ADDR_EXP 71
18980: PUSH
18981: EMPTY
18982: ST_TO_ADDR
// hackLimit := 3 ;
18983: LD_ADDR_EXP 72
18987: PUSH
18988: LD_INT 3
18990: ST_TO_ADDR
// hackDist := 12 ;
18991: LD_ADDR_EXP 73
18995: PUSH
18996: LD_INT 12
18998: ST_TO_ADDR
// hackCounter := [ ] ;
18999: LD_ADDR_EXP 74
19003: PUSH
19004: EMPTY
19005: ST_TO_ADDR
// end ;
19006: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19007: LD_EXP 69
19011: PUSH
19012: LD_INT 34
19014: PUSH
19015: LD_INT 99
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: AND
19027: IFFALSE 19280
19029: GO 19031
19031: DISABLE
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
// begin enable ;
19036: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19037: LD_ADDR_VAR 0 1
19041: PUSH
19042: LD_INT 34
19044: PUSH
19045: LD_INT 99
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19278
// begin if not i in hackTanks then
19060: LD_VAR 0 1
19064: PUSH
19065: LD_EXP 70
19069: IN
19070: NOT
19071: IFFALSE 19154
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19073: LD_ADDR_EXP 70
19077: PUSH
19078: LD_EXP 70
19082: PPUSH
19083: LD_EXP 70
19087: PUSH
19088: LD_INT 1
19090: PLUS
19091: PPUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: CALL_OW 1
19101: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19102: LD_ADDR_EXP 71
19106: PUSH
19107: LD_EXP 71
19111: PPUSH
19112: LD_EXP 71
19116: PUSH
19117: LD_INT 1
19119: PLUS
19120: PPUSH
19121: EMPTY
19122: PPUSH
19123: CALL_OW 1
19127: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19128: LD_ADDR_EXP 74
19132: PUSH
19133: LD_EXP 74
19137: PPUSH
19138: LD_EXP 74
19142: PUSH
19143: LD_INT 1
19145: PLUS
19146: PPUSH
19147: EMPTY
19148: PPUSH
19149: CALL_OW 1
19153: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 302
19163: NOT
19164: IFFALSE 19177
// begin HackUnlinkAll ( i ) ;
19166: LD_VAR 0 1
19170: PPUSH
19171: CALL 19283 0 1
// continue ;
19175: GO 19057
// end ; HackCheckCapturedStatus ( i ) ;
19177: LD_VAR 0 1
19181: PPUSH
19182: CALL 19726 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19186: LD_ADDR_VAR 0 2
19190: PUSH
19191: LD_INT 81
19193: PUSH
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 255
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 33
19210: PUSH
19211: LD_INT 3
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 91
19220: PUSH
19221: LD_VAR 0 1
19225: PUSH
19226: LD_EXP 73
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 50
19238: PUSH
19239: EMPTY
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 69
19252: ST_TO_ADDR
// if not tmp then
19253: LD_VAR 0 2
19257: NOT
19258: IFFALSE 19262
// continue ;
19260: GO 19057
// HackLink ( i , tmp ) ;
19262: LD_VAR 0 1
19266: PPUSH
19267: LD_VAR 0 2
19271: PPUSH
19272: CALL 19419 0 2
// end ;
19276: GO 19057
19278: POP
19279: POP
// end ;
19280: PPOPN 2
19282: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19283: LD_INT 0
19285: PPUSH
19286: PPUSH
19287: PPUSH
// if not hack in hackTanks then
19288: LD_VAR 0 1
19292: PUSH
19293: LD_EXP 70
19297: IN
19298: NOT
19299: IFFALSE 19303
// exit ;
19301: GO 19414
// index := GetElementIndex ( hackTanks , hack ) ;
19303: LD_ADDR_VAR 0 4
19307: PUSH
19308: LD_EXP 70
19312: PPUSH
19313: LD_VAR 0 1
19317: PPUSH
19318: CALL 26856 0 2
19322: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19323: LD_EXP 71
19327: PUSH
19328: LD_VAR 0 4
19332: ARRAY
19333: IFFALSE 19414
// begin for i in hackTanksCaptured [ index ] do
19335: LD_ADDR_VAR 0 3
19339: PUSH
19340: LD_EXP 71
19344: PUSH
19345: LD_VAR 0 4
19349: ARRAY
19350: PUSH
19351: FOR_IN
19352: IFFALSE 19378
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 1
19361: ARRAY
19362: PPUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 2
19370: ARRAY
19371: PPUSH
19372: CALL_OW 235
19376: GO 19351
19378: POP
19379: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19380: LD_ADDR_EXP 71
19384: PUSH
19385: LD_EXP 71
19389: PPUSH
19390: LD_VAR 0 4
19394: PPUSH
19395: EMPTY
19396: PPUSH
19397: CALL_OW 1
19401: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19402: LD_VAR 0 1
19406: PPUSH
19407: LD_INT 0
19409: PPUSH
19410: CALL_OW 505
// end ; end ;
19414: LD_VAR 0 2
19418: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
// if not hack in hackTanks or not vehicles then
19424: LD_VAR 0 1
19428: PUSH
19429: LD_EXP 70
19433: IN
19434: NOT
19435: PUSH
19436: LD_VAR 0 2
19440: NOT
19441: OR
19442: IFFALSE 19446
// exit ;
19444: GO 19721
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19446: LD_ADDR_VAR 0 2
19450: PUSH
19451: LD_VAR 0 1
19455: PPUSH
19456: LD_VAR 0 2
19460: PPUSH
19461: LD_INT 1
19463: PPUSH
19464: LD_INT 1
19466: PPUSH
19467: CALL 27506 0 4
19471: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19472: LD_ADDR_VAR 0 5
19476: PUSH
19477: LD_EXP 70
19481: PPUSH
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL 26856 0 2
19491: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19492: LD_EXP 71
19496: PUSH
19497: LD_VAR 0 5
19501: ARRAY
19502: PUSH
19503: LD_EXP 72
19507: LESS
19508: IFFALSE 19697
// begin for i := 1 to vehicles do
19510: LD_ADDR_VAR 0 4
19514: PUSH
19515: DOUBLE
19516: LD_INT 1
19518: DEC
19519: ST_TO_ADDR
19520: LD_VAR 0 2
19524: PUSH
19525: FOR_TO
19526: IFFALSE 19695
// begin if hackTanksCaptured [ index ] = hackLimit then
19528: LD_EXP 71
19532: PUSH
19533: LD_VAR 0 5
19537: ARRAY
19538: PUSH
19539: LD_EXP 72
19543: EQUAL
19544: IFFALSE 19548
// break ;
19546: GO 19695
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19548: LD_ADDR_EXP 74
19552: PUSH
19553: LD_EXP 74
19557: PPUSH
19558: LD_VAR 0 5
19562: PPUSH
19563: LD_EXP 74
19567: PUSH
19568: LD_VAR 0 5
19572: ARRAY
19573: PUSH
19574: LD_INT 1
19576: PLUS
19577: PPUSH
19578: CALL_OW 1
19582: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19583: LD_ADDR_EXP 71
19587: PUSH
19588: LD_EXP 71
19592: PPUSH
19593: LD_VAR 0 5
19597: PUSH
19598: LD_EXP 71
19602: PUSH
19603: LD_VAR 0 5
19607: ARRAY
19608: PUSH
19609: LD_INT 1
19611: PLUS
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PPUSH
19617: LD_VAR 0 2
19621: PUSH
19622: LD_VAR 0 4
19626: ARRAY
19627: PUSH
19628: LD_VAR 0 2
19632: PUSH
19633: LD_VAR 0 4
19637: ARRAY
19638: PPUSH
19639: CALL_OW 255
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PPUSH
19648: CALL 27071 0 3
19652: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19653: LD_VAR 0 2
19657: PUSH
19658: LD_VAR 0 4
19662: ARRAY
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 255
19673: PPUSH
19674: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19678: LD_VAR 0 2
19682: PUSH
19683: LD_VAR 0 4
19687: ARRAY
19688: PPUSH
19689: CALL_OW 141
// end ;
19693: GO 19525
19695: POP
19696: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_EXP 71
19706: PUSH
19707: LD_VAR 0 5
19711: ARRAY
19712: PUSH
19713: LD_INT 0
19715: PLUS
19716: PPUSH
19717: CALL_OW 505
// end ;
19721: LD_VAR 0 3
19725: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19726: LD_INT 0
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
// if not hack in hackTanks then
19732: LD_VAR 0 1
19736: PUSH
19737: LD_EXP 70
19741: IN
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19987
// index := GetElementIndex ( hackTanks , hack ) ;
19747: LD_ADDR_VAR 0 4
19751: PUSH
19752: LD_EXP 70
19756: PPUSH
19757: LD_VAR 0 1
19761: PPUSH
19762: CALL 26856 0 2
19766: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19767: LD_ADDR_VAR 0 3
19771: PUSH
19772: DOUBLE
19773: LD_EXP 71
19777: PUSH
19778: LD_VAR 0 4
19782: ARRAY
19783: INC
19784: ST_TO_ADDR
19785: LD_INT 1
19787: PUSH
19788: FOR_DOWNTO
19789: IFFALSE 19961
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19791: LD_ADDR_VAR 0 5
19795: PUSH
19796: LD_EXP 71
19800: PUSH
19801: LD_VAR 0 4
19805: ARRAY
19806: PUSH
19807: LD_VAR 0 3
19811: ARRAY
19812: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19813: LD_VAR 0 5
19817: PUSH
19818: LD_INT 1
19820: ARRAY
19821: PPUSH
19822: CALL_OW 302
19826: NOT
19827: PUSH
19828: LD_VAR 0 5
19832: PUSH
19833: LD_INT 1
19835: ARRAY
19836: PPUSH
19837: CALL_OW 255
19841: PUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 255
19851: NONEQUAL
19852: OR
19853: IFFALSE 19959
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19855: LD_VAR 0 5
19859: PUSH
19860: LD_INT 1
19862: ARRAY
19863: PPUSH
19864: CALL_OW 305
19868: PUSH
19869: LD_VAR 0 5
19873: PUSH
19874: LD_INT 1
19876: ARRAY
19877: PPUSH
19878: CALL_OW 255
19882: PUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 255
19892: EQUAL
19893: AND
19894: IFFALSE 19918
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19896: LD_VAR 0 5
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: PPUSH
19905: LD_VAR 0 5
19909: PUSH
19910: LD_INT 2
19912: ARRAY
19913: PPUSH
19914: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19918: LD_ADDR_EXP 71
19922: PUSH
19923: LD_EXP 71
19927: PPUSH
19928: LD_VAR 0 4
19932: PPUSH
19933: LD_EXP 71
19937: PUSH
19938: LD_VAR 0 4
19942: ARRAY
19943: PPUSH
19944: LD_VAR 0 3
19948: PPUSH
19949: CALL_OW 3
19953: PPUSH
19954: CALL_OW 1
19958: ST_TO_ADDR
// end ; end ;
19959: GO 19788
19961: POP
19962: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19963: LD_VAR 0 1
19967: PPUSH
19968: LD_EXP 71
19972: PUSH
19973: LD_VAR 0 4
19977: ARRAY
19978: PUSH
19979: LD_INT 0
19981: PLUS
19982: PPUSH
19983: CALL_OW 505
// end ;
19987: LD_VAR 0 2
19991: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19992: LD_INT 0
19994: PPUSH
19995: PPUSH
19996: PPUSH
19997: PPUSH
// if not hack in hackTanks then
19998: LD_VAR 0 1
20002: PUSH
20003: LD_EXP 70
20007: IN
20008: NOT
20009: IFFALSE 20013
// exit ;
20011: GO 20098
// index := GetElementIndex ( hackTanks , hack ) ;
20013: LD_ADDR_VAR 0 5
20017: PUSH
20018: LD_EXP 70
20022: PPUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL 26856 0 2
20032: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20033: LD_ADDR_VAR 0 4
20037: PUSH
20038: DOUBLE
20039: LD_INT 1
20041: DEC
20042: ST_TO_ADDR
20043: LD_EXP 71
20047: PUSH
20048: LD_VAR 0 5
20052: ARRAY
20053: PUSH
20054: FOR_TO
20055: IFFALSE 20096
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20057: LD_EXP 71
20061: PUSH
20062: LD_VAR 0 5
20066: ARRAY
20067: PUSH
20068: LD_VAR 0 4
20072: ARRAY
20073: PUSH
20074: LD_INT 1
20076: ARRAY
20077: PUSH
20078: LD_VAR 0 2
20082: EQUAL
20083: IFFALSE 20094
// KillUnit ( vehicle ) ;
20085: LD_VAR 0 2
20089: PPUSH
20090: CALL_OW 66
20094: GO 20054
20096: POP
20097: POP
// end ;
20098: LD_VAR 0 3
20102: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20103: LD_EXP 75
20107: NOT
20108: IFFALSE 20143
20110: GO 20112
20112: DISABLE
// begin initMiner := true ;
20113: LD_ADDR_EXP 75
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// minersList := [ ] ;
20121: LD_ADDR_EXP 76
20125: PUSH
20126: EMPTY
20127: ST_TO_ADDR
// minerMinesList := [ ] ;
20128: LD_ADDR_EXP 77
20132: PUSH
20133: EMPTY
20134: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20135: LD_ADDR_EXP 78
20139: PUSH
20140: LD_INT 5
20142: ST_TO_ADDR
// end ;
20143: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20144: LD_EXP 75
20148: PUSH
20149: LD_INT 34
20151: PUSH
20152: LD_INT 81
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: AND
20164: IFFALSE 20625
20166: GO 20168
20168: DISABLE
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
// begin enable ;
20175: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20176: LD_ADDR_VAR 0 1
20180: PUSH
20181: LD_INT 34
20183: PUSH
20184: LD_INT 81
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 69
20195: PUSH
20196: FOR_IN
20197: IFFALSE 20269
// begin if not i in minersList then
20199: LD_VAR 0 1
20203: PUSH
20204: LD_EXP 76
20208: IN
20209: NOT
20210: IFFALSE 20267
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20212: LD_ADDR_EXP 76
20216: PUSH
20217: LD_EXP 76
20221: PPUSH
20222: LD_EXP 76
20226: PUSH
20227: LD_INT 1
20229: PLUS
20230: PPUSH
20231: LD_VAR 0 1
20235: PPUSH
20236: CALL_OW 1
20240: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20241: LD_ADDR_EXP 77
20245: PUSH
20246: LD_EXP 77
20250: PPUSH
20251: LD_EXP 77
20255: PUSH
20256: LD_INT 1
20258: PLUS
20259: PPUSH
20260: EMPTY
20261: PPUSH
20262: CALL_OW 1
20266: ST_TO_ADDR
// end end ;
20267: GO 20196
20269: POP
20270: POP
// for i := minerMinesList downto 1 do
20271: LD_ADDR_VAR 0 1
20275: PUSH
20276: DOUBLE
20277: LD_EXP 77
20281: INC
20282: ST_TO_ADDR
20283: LD_INT 1
20285: PUSH
20286: FOR_DOWNTO
20287: IFFALSE 20623
// begin if IsLive ( minersList [ i ] ) then
20289: LD_EXP 76
20293: PUSH
20294: LD_VAR 0 1
20298: ARRAY
20299: PPUSH
20300: CALL_OW 300
20304: IFFALSE 20332
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20306: LD_EXP 76
20310: PUSH
20311: LD_VAR 0 1
20315: ARRAY
20316: PPUSH
20317: LD_EXP 77
20321: PUSH
20322: LD_VAR 0 1
20326: ARRAY
20327: PPUSH
20328: CALL_OW 505
// if not minerMinesList [ i ] then
20332: LD_EXP 77
20336: PUSH
20337: LD_VAR 0 1
20341: ARRAY
20342: NOT
20343: IFFALSE 20347
// continue ;
20345: GO 20286
// for j := minerMinesList [ i ] downto 1 do
20347: LD_ADDR_VAR 0 2
20351: PUSH
20352: DOUBLE
20353: LD_EXP 77
20357: PUSH
20358: LD_VAR 0 1
20362: ARRAY
20363: INC
20364: ST_TO_ADDR
20365: LD_INT 1
20367: PUSH
20368: FOR_DOWNTO
20369: IFFALSE 20619
// begin side := GetSide ( minersList [ i ] ) ;
20371: LD_ADDR_VAR 0 3
20375: PUSH
20376: LD_EXP 76
20380: PUSH
20381: LD_VAR 0 1
20385: ARRAY
20386: PPUSH
20387: CALL_OW 255
20391: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20392: LD_ADDR_VAR 0 4
20396: PUSH
20397: LD_EXP 77
20401: PUSH
20402: LD_VAR 0 1
20406: ARRAY
20407: PUSH
20408: LD_VAR 0 2
20412: ARRAY
20413: PUSH
20414: LD_INT 1
20416: ARRAY
20417: PPUSH
20418: LD_EXP 77
20422: PUSH
20423: LD_VAR 0 1
20427: ARRAY
20428: PUSH
20429: LD_VAR 0 2
20433: ARRAY
20434: PUSH
20435: LD_INT 2
20437: ARRAY
20438: PPUSH
20439: CALL_OW 428
20443: ST_TO_ADDR
// if not tmp then
20444: LD_VAR 0 4
20448: NOT
20449: IFFALSE 20453
// continue ;
20451: GO 20368
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20453: LD_VAR 0 4
20457: PUSH
20458: LD_INT 81
20460: PUSH
20461: LD_VAR 0 3
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PPUSH
20470: CALL_OW 69
20474: IN
20475: PUSH
20476: LD_EXP 77
20480: PUSH
20481: LD_VAR 0 1
20485: ARRAY
20486: PUSH
20487: LD_VAR 0 2
20491: ARRAY
20492: PUSH
20493: LD_INT 1
20495: ARRAY
20496: PPUSH
20497: LD_EXP 77
20501: PUSH
20502: LD_VAR 0 1
20506: ARRAY
20507: PUSH
20508: LD_VAR 0 2
20512: ARRAY
20513: PUSH
20514: LD_INT 2
20516: ARRAY
20517: PPUSH
20518: CALL_OW 458
20522: AND
20523: IFFALSE 20617
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20525: LD_EXP 77
20529: PUSH
20530: LD_VAR 0 1
20534: ARRAY
20535: PUSH
20536: LD_VAR 0 2
20540: ARRAY
20541: PUSH
20542: LD_INT 1
20544: ARRAY
20545: PPUSH
20546: LD_EXP 77
20550: PUSH
20551: LD_VAR 0 1
20555: ARRAY
20556: PUSH
20557: LD_VAR 0 2
20561: ARRAY
20562: PUSH
20563: LD_INT 2
20565: ARRAY
20566: PPUSH
20567: LD_VAR 0 3
20571: PPUSH
20572: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20576: LD_ADDR_EXP 77
20580: PUSH
20581: LD_EXP 77
20585: PPUSH
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_EXP 77
20595: PUSH
20596: LD_VAR 0 1
20600: ARRAY
20601: PPUSH
20602: LD_VAR 0 2
20606: PPUSH
20607: CALL_OW 3
20611: PPUSH
20612: CALL_OW 1
20616: ST_TO_ADDR
// end ; end ;
20617: GO 20368
20619: POP
20620: POP
// end ;
20621: GO 20286
20623: POP
20624: POP
// end ;
20625: PPOPN 4
20627: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20628: LD_INT 0
20630: PPUSH
20631: PPUSH
// result := false ;
20632: LD_ADDR_VAR 0 4
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 264
20649: PUSH
20650: LD_INT 81
20652: EQUAL
20653: NOT
20654: IFFALSE 20658
// exit ;
20656: GO 20898
// index := GetElementIndex ( minersList , unit ) ;
20658: LD_ADDR_VAR 0 5
20662: PUSH
20663: LD_EXP 76
20667: PPUSH
20668: LD_VAR 0 1
20672: PPUSH
20673: CALL 26856 0 2
20677: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20678: LD_EXP 77
20682: PUSH
20683: LD_VAR 0 5
20687: ARRAY
20688: PUSH
20689: LD_EXP 78
20693: GREATEREQUAL
20694: IFFALSE 20698
// exit ;
20696: GO 20898
// ComMoveXY ( unit , x , y ) ;
20698: LD_VAR 0 1
20702: PPUSH
20703: LD_VAR 0 2
20707: PPUSH
20708: LD_VAR 0 3
20712: PPUSH
20713: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20717: LD_INT 35
20719: PPUSH
20720: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20724: LD_VAR 0 1
20728: PPUSH
20729: LD_VAR 0 2
20733: PPUSH
20734: LD_VAR 0 3
20738: PPUSH
20739: CALL 58240 0 3
20743: NOT
20744: PUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: CALL_OW 314
20754: AND
20755: IFFALSE 20759
// exit ;
20757: GO 20898
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 3
20768: PPUSH
20769: CALL_OW 428
20773: PUSH
20774: LD_VAR 0 1
20778: EQUAL
20779: PUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 314
20789: NOT
20790: AND
20791: IFFALSE 20717
// PlaySoundXY ( x , y , PlantMine ) ;
20793: LD_VAR 0 2
20797: PPUSH
20798: LD_VAR 0 3
20802: PPUSH
20803: LD_STRING PlantMine
20805: PPUSH
20806: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20810: LD_VAR 0 2
20814: PPUSH
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_VAR 0 1
20824: PPUSH
20825: CALL_OW 255
20829: PPUSH
20830: LD_INT 0
20832: PPUSH
20833: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20837: LD_ADDR_EXP 77
20841: PUSH
20842: LD_EXP 77
20846: PPUSH
20847: LD_VAR 0 5
20851: PUSH
20852: LD_EXP 77
20856: PUSH
20857: LD_VAR 0 5
20861: ARRAY
20862: PUSH
20863: LD_INT 1
20865: PLUS
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PPUSH
20871: LD_VAR 0 2
20875: PUSH
20876: LD_VAR 0 3
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PPUSH
20885: CALL 27071 0 3
20889: ST_TO_ADDR
// result := true ;
20890: LD_ADDR_VAR 0 4
20894: PUSH
20895: LD_INT 1
20897: ST_TO_ADDR
// end ;
20898: LD_VAR 0 4
20902: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20903: LD_INT 0
20905: PPUSH
20906: PPUSH
20907: PPUSH
// if not unit in minersList then
20908: LD_VAR 0 1
20912: PUSH
20913: LD_EXP 76
20917: IN
20918: NOT
20919: IFFALSE 20923
// exit ;
20921: GO 21315
// index := GetElementIndex ( minersList , unit ) ;
20923: LD_ADDR_VAR 0 6
20927: PUSH
20928: LD_EXP 76
20932: PPUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL 26856 0 2
20942: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20943: LD_ADDR_VAR 0 5
20947: PUSH
20948: DOUBLE
20949: LD_EXP 77
20953: PUSH
20954: LD_VAR 0 6
20958: ARRAY
20959: INC
20960: ST_TO_ADDR
20961: LD_INT 1
20963: PUSH
20964: FOR_DOWNTO
20965: IFFALSE 21126
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20967: LD_EXP 77
20971: PUSH
20972: LD_VAR 0 6
20976: ARRAY
20977: PUSH
20978: LD_VAR 0 5
20982: ARRAY
20983: PUSH
20984: LD_INT 1
20986: ARRAY
20987: PUSH
20988: LD_VAR 0 2
20992: EQUAL
20993: PUSH
20994: LD_EXP 77
20998: PUSH
20999: LD_VAR 0 6
21003: ARRAY
21004: PUSH
21005: LD_VAR 0 5
21009: ARRAY
21010: PUSH
21011: LD_INT 2
21013: ARRAY
21014: PUSH
21015: LD_VAR 0 3
21019: EQUAL
21020: AND
21021: IFFALSE 21124
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21023: LD_EXP 77
21027: PUSH
21028: LD_VAR 0 6
21032: ARRAY
21033: PUSH
21034: LD_VAR 0 5
21038: ARRAY
21039: PUSH
21040: LD_INT 1
21042: ARRAY
21043: PPUSH
21044: LD_EXP 77
21048: PUSH
21049: LD_VAR 0 6
21053: ARRAY
21054: PUSH
21055: LD_VAR 0 5
21059: ARRAY
21060: PUSH
21061: LD_INT 2
21063: ARRAY
21064: PPUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL_OW 255
21074: PPUSH
21075: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21079: LD_ADDR_EXP 77
21083: PUSH
21084: LD_EXP 77
21088: PPUSH
21089: LD_VAR 0 6
21093: PPUSH
21094: LD_EXP 77
21098: PUSH
21099: LD_VAR 0 6
21103: ARRAY
21104: PPUSH
21105: LD_VAR 0 5
21109: PPUSH
21110: CALL_OW 3
21114: PPUSH
21115: CALL_OW 1
21119: ST_TO_ADDR
// exit ;
21120: POP
21121: POP
21122: GO 21315
// end ; end ;
21124: GO 20964
21126: POP
21127: POP
// for i := minerMinesList [ index ] downto 1 do
21128: LD_ADDR_VAR 0 5
21132: PUSH
21133: DOUBLE
21134: LD_EXP 77
21138: PUSH
21139: LD_VAR 0 6
21143: ARRAY
21144: INC
21145: ST_TO_ADDR
21146: LD_INT 1
21148: PUSH
21149: FOR_DOWNTO
21150: IFFALSE 21313
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21152: LD_EXP 77
21156: PUSH
21157: LD_VAR 0 6
21161: ARRAY
21162: PUSH
21163: LD_VAR 0 5
21167: ARRAY
21168: PUSH
21169: LD_INT 1
21171: ARRAY
21172: PPUSH
21173: LD_EXP 77
21177: PUSH
21178: LD_VAR 0 6
21182: ARRAY
21183: PUSH
21184: LD_VAR 0 5
21188: ARRAY
21189: PUSH
21190: LD_INT 2
21192: ARRAY
21193: PPUSH
21194: LD_VAR 0 2
21198: PPUSH
21199: LD_VAR 0 3
21203: PPUSH
21204: CALL_OW 298
21208: PUSH
21209: LD_INT 6
21211: LESS
21212: IFFALSE 21311
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21214: LD_EXP 77
21218: PUSH
21219: LD_VAR 0 6
21223: ARRAY
21224: PUSH
21225: LD_VAR 0 5
21229: ARRAY
21230: PUSH
21231: LD_INT 1
21233: ARRAY
21234: PPUSH
21235: LD_EXP 77
21239: PUSH
21240: LD_VAR 0 6
21244: ARRAY
21245: PUSH
21246: LD_VAR 0 5
21250: ARRAY
21251: PUSH
21252: LD_INT 2
21254: ARRAY
21255: PPUSH
21256: LD_VAR 0 1
21260: PPUSH
21261: CALL_OW 255
21265: PPUSH
21266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21270: LD_ADDR_EXP 77
21274: PUSH
21275: LD_EXP 77
21279: PPUSH
21280: LD_VAR 0 6
21284: PPUSH
21285: LD_EXP 77
21289: PUSH
21290: LD_VAR 0 6
21294: ARRAY
21295: PPUSH
21296: LD_VAR 0 5
21300: PPUSH
21301: CALL_OW 3
21305: PPUSH
21306: CALL_OW 1
21310: ST_TO_ADDR
// end ; end ;
21311: GO 21149
21313: POP
21314: POP
// end ;
21315: LD_VAR 0 4
21319: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21320: LD_INT 0
21322: PPUSH
21323: PPUSH
21324: PPUSH
21325: PPUSH
21326: PPUSH
21327: PPUSH
21328: PPUSH
21329: PPUSH
21330: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21331: LD_VAR 0 1
21335: PPUSH
21336: CALL_OW 264
21340: PUSH
21341: LD_INT 81
21343: EQUAL
21344: NOT
21345: PUSH
21346: LD_VAR 0 1
21350: PUSH
21351: LD_EXP 76
21355: IN
21356: NOT
21357: OR
21358: IFFALSE 21362
// exit ;
21360: GO 21684
// index := GetElementIndex ( minersList , unit ) ;
21362: LD_ADDR_VAR 0 6
21366: PUSH
21367: LD_EXP 76
21371: PPUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL 26856 0 2
21381: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21382: LD_ADDR_VAR 0 8
21386: PUSH
21387: LD_EXP 78
21391: PUSH
21392: LD_EXP 77
21396: PUSH
21397: LD_VAR 0 6
21401: ARRAY
21402: MINUS
21403: ST_TO_ADDR
// if not minesFreeAmount then
21404: LD_VAR 0 8
21408: NOT
21409: IFFALSE 21413
// exit ;
21411: GO 21684
// tmp := [ ] ;
21413: LD_ADDR_VAR 0 7
21417: PUSH
21418: EMPTY
21419: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21420: LD_ADDR_VAR 0 5
21424: PUSH
21425: DOUBLE
21426: LD_INT 1
21428: DEC
21429: ST_TO_ADDR
21430: LD_VAR 0 8
21434: PUSH
21435: FOR_TO
21436: IFFALSE 21631
// begin _d := rand ( 0 , 5 ) ;
21438: LD_ADDR_VAR 0 11
21442: PUSH
21443: LD_INT 0
21445: PPUSH
21446: LD_INT 5
21448: PPUSH
21449: CALL_OW 12
21453: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21454: LD_ADDR_VAR 0 12
21458: PUSH
21459: LD_INT 2
21461: PPUSH
21462: LD_INT 6
21464: PPUSH
21465: CALL_OW 12
21469: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21470: LD_ADDR_VAR 0 9
21474: PUSH
21475: LD_VAR 0 2
21479: PPUSH
21480: LD_VAR 0 11
21484: PPUSH
21485: LD_VAR 0 12
21489: PPUSH
21490: CALL_OW 272
21494: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21495: LD_ADDR_VAR 0 10
21499: PUSH
21500: LD_VAR 0 3
21504: PPUSH
21505: LD_VAR 0 11
21509: PPUSH
21510: LD_VAR 0 12
21514: PPUSH
21515: CALL_OW 273
21519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21520: LD_VAR 0 9
21524: PPUSH
21525: LD_VAR 0 10
21529: PPUSH
21530: CALL_OW 488
21534: PUSH
21535: LD_VAR 0 9
21539: PUSH
21540: LD_VAR 0 10
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_VAR 0 7
21553: IN
21554: NOT
21555: AND
21556: PUSH
21557: LD_VAR 0 9
21561: PPUSH
21562: LD_VAR 0 10
21566: PPUSH
21567: CALL_OW 458
21571: NOT
21572: AND
21573: IFFALSE 21615
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21575: LD_ADDR_VAR 0 7
21579: PUSH
21580: LD_VAR 0 7
21584: PPUSH
21585: LD_VAR 0 7
21589: PUSH
21590: LD_INT 1
21592: PLUS
21593: PPUSH
21594: LD_VAR 0 9
21598: PUSH
21599: LD_VAR 0 10
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 1
21612: ST_TO_ADDR
21613: GO 21629
// i := i - 1 ;
21615: LD_ADDR_VAR 0 5
21619: PUSH
21620: LD_VAR 0 5
21624: PUSH
21625: LD_INT 1
21627: MINUS
21628: ST_TO_ADDR
// end ;
21629: GO 21435
21631: POP
21632: POP
// for i in tmp do
21633: LD_ADDR_VAR 0 5
21637: PUSH
21638: LD_VAR 0 7
21642: PUSH
21643: FOR_IN
21644: IFFALSE 21682
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21646: LD_VAR 0 1
21650: PPUSH
21651: LD_VAR 0 5
21655: PUSH
21656: LD_INT 1
21658: ARRAY
21659: PPUSH
21660: LD_VAR 0 5
21664: PUSH
21665: LD_INT 2
21667: ARRAY
21668: PPUSH
21669: CALL 20628 0 3
21673: NOT
21674: IFFALSE 21680
// exit ;
21676: POP
21677: POP
21678: GO 21684
21680: GO 21643
21682: POP
21683: POP
// end ;
21684: LD_VAR 0 4
21688: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21689: LD_INT 0
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
// if not GetClass ( unit ) = class_sniper then
21698: LD_VAR 0 1
21702: PPUSH
21703: CALL_OW 257
21707: PUSH
21708: LD_INT 5
21710: EQUAL
21711: NOT
21712: IFFALSE 21716
// exit ;
21714: GO 22104
// dist := 8 ;
21716: LD_ADDR_VAR 0 5
21720: PUSH
21721: LD_INT 8
21723: ST_TO_ADDR
// viewRange := 12 ;
21724: LD_ADDR_VAR 0 7
21728: PUSH
21729: LD_INT 12
21731: ST_TO_ADDR
// side := GetSide ( unit ) ;
21732: LD_ADDR_VAR 0 6
21736: PUSH
21737: LD_VAR 0 1
21741: PPUSH
21742: CALL_OW 255
21746: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21747: LD_INT 61
21749: PPUSH
21750: LD_VAR 0 6
21754: PPUSH
21755: CALL_OW 321
21759: PUSH
21760: LD_INT 2
21762: EQUAL
21763: IFFALSE 21773
// viewRange := 16 ;
21765: LD_ADDR_VAR 0 7
21769: PUSH
21770: LD_INT 16
21772: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21773: LD_VAR 0 1
21777: PPUSH
21778: LD_VAR 0 2
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: CALL_OW 297
21792: PUSH
21793: LD_VAR 0 5
21797: GREATER
21798: IFFALSE 21877
// begin ComMoveXY ( unit , x , y ) ;
21800: LD_VAR 0 1
21804: PPUSH
21805: LD_VAR 0 2
21809: PPUSH
21810: LD_VAR 0 3
21814: PPUSH
21815: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21819: LD_INT 35
21821: PPUSH
21822: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21826: LD_VAR 0 1
21830: PPUSH
21831: LD_VAR 0 2
21835: PPUSH
21836: LD_VAR 0 3
21840: PPUSH
21841: CALL 58240 0 3
21845: NOT
21846: IFFALSE 21850
// exit ;
21848: GO 22104
// until GetDistUnitXY ( unit , x , y ) < dist ;
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_VAR 0 2
21859: PPUSH
21860: LD_VAR 0 3
21864: PPUSH
21865: CALL_OW 297
21869: PUSH
21870: LD_VAR 0 5
21874: LESS
21875: IFFALSE 21819
// end ; ComTurnXY ( unit , x , y ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_VAR 0 2
21886: PPUSH
21887: LD_VAR 0 3
21891: PPUSH
21892: CALL_OW 118
// wait ( 5 ) ;
21896: LD_INT 5
21898: PPUSH
21899: CALL_OW 67
// _d := GetDir ( unit ) ;
21903: LD_ADDR_VAR 0 10
21907: PUSH
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL_OW 254
21917: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21918: LD_ADDR_VAR 0 8
21922: PUSH
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 250
21932: PPUSH
21933: LD_VAR 0 10
21937: PPUSH
21938: LD_VAR 0 5
21942: PPUSH
21943: CALL_OW 272
21947: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21948: LD_ADDR_VAR 0 9
21952: PUSH
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL_OW 251
21962: PPUSH
21963: LD_VAR 0 10
21967: PPUSH
21968: LD_VAR 0 5
21972: PPUSH
21973: CALL_OW 273
21977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21978: LD_VAR 0 8
21982: PPUSH
21983: LD_VAR 0 9
21987: PPUSH
21988: CALL_OW 488
21992: NOT
21993: IFFALSE 21997
// exit ;
21995: GO 22104
// ComAnimCustom ( unit , 1 ) ;
21997: LD_VAR 0 1
22001: PPUSH
22002: LD_INT 1
22004: PPUSH
22005: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22009: LD_VAR 0 8
22013: PPUSH
22014: LD_VAR 0 9
22018: PPUSH
22019: LD_VAR 0 6
22023: PPUSH
22024: LD_VAR 0 7
22028: PPUSH
22029: CALL_OW 330
// repeat wait ( 1 ) ;
22033: LD_INT 1
22035: PPUSH
22036: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22040: LD_VAR 0 1
22044: PPUSH
22045: CALL_OW 316
22049: PUSH
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 314
22059: OR
22060: PUSH
22061: LD_VAR 0 1
22065: PPUSH
22066: CALL_OW 302
22070: NOT
22071: OR
22072: PUSH
22073: LD_VAR 0 1
22077: PPUSH
22078: CALL_OW 301
22082: OR
22083: IFFALSE 22033
// RemoveSeeing ( _x , _y , side ) ;
22085: LD_VAR 0 8
22089: PPUSH
22090: LD_VAR 0 9
22094: PPUSH
22095: LD_VAR 0 6
22099: PPUSH
22100: CALL_OW 331
// end ; end_of_file
22104: LD_VAR 0 4
22108: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
// if exist_mode then
22113: LD_VAR 0 2
22117: IFFALSE 22142
// unit := CreateCharacter ( prefix & ident ) else
22119: LD_ADDR_VAR 0 5
22123: PUSH
22124: LD_VAR 0 3
22128: PUSH
22129: LD_VAR 0 1
22133: STR
22134: PPUSH
22135: CALL_OW 34
22139: ST_TO_ADDR
22140: GO 22157
// unit := NewCharacter ( ident ) ;
22142: LD_ADDR_VAR 0 5
22146: PUSH
22147: LD_VAR 0 1
22151: PPUSH
22152: CALL_OW 25
22156: ST_TO_ADDR
// result := unit ;
22157: LD_ADDR_VAR 0 4
22161: PUSH
22162: LD_VAR 0 5
22166: ST_TO_ADDR
// end ;
22167: LD_VAR 0 4
22171: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22172: LD_INT 0
22174: PPUSH
22175: PPUSH
// if not side or not nation then
22176: LD_VAR 0 1
22180: NOT
22181: PUSH
22182: LD_VAR 0 2
22186: NOT
22187: OR
22188: IFFALSE 22192
// exit ;
22190: GO 22960
// case nation of nation_american :
22192: LD_VAR 0 2
22196: PUSH
22197: LD_INT 1
22199: DOUBLE
22200: EQUAL
22201: IFTRUE 22205
22203: GO 22419
22205: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22206: LD_ADDR_VAR 0 4
22210: PUSH
22211: LD_INT 35
22213: PUSH
22214: LD_INT 45
22216: PUSH
22217: LD_INT 46
22219: PUSH
22220: LD_INT 47
22222: PUSH
22223: LD_INT 82
22225: PUSH
22226: LD_INT 83
22228: PUSH
22229: LD_INT 84
22231: PUSH
22232: LD_INT 85
22234: PUSH
22235: LD_INT 86
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: LD_INT 6
22246: PUSH
22247: LD_INT 15
22249: PUSH
22250: LD_INT 16
22252: PUSH
22253: LD_INT 7
22255: PUSH
22256: LD_INT 12
22258: PUSH
22259: LD_INT 13
22261: PUSH
22262: LD_INT 10
22264: PUSH
22265: LD_INT 14
22267: PUSH
22268: LD_INT 20
22270: PUSH
22271: LD_INT 21
22273: PUSH
22274: LD_INT 22
22276: PUSH
22277: LD_INT 25
22279: PUSH
22280: LD_INT 32
22282: PUSH
22283: LD_INT 27
22285: PUSH
22286: LD_INT 36
22288: PUSH
22289: LD_INT 69
22291: PUSH
22292: LD_INT 39
22294: PUSH
22295: LD_INT 34
22297: PUSH
22298: LD_INT 40
22300: PUSH
22301: LD_INT 48
22303: PUSH
22304: LD_INT 49
22306: PUSH
22307: LD_INT 50
22309: PUSH
22310: LD_INT 51
22312: PUSH
22313: LD_INT 52
22315: PUSH
22316: LD_INT 53
22318: PUSH
22319: LD_INT 54
22321: PUSH
22322: LD_INT 55
22324: PUSH
22325: LD_INT 56
22327: PUSH
22328: LD_INT 57
22330: PUSH
22331: LD_INT 58
22333: PUSH
22334: LD_INT 59
22336: PUSH
22337: LD_INT 60
22339: PUSH
22340: LD_INT 61
22342: PUSH
22343: LD_INT 62
22345: PUSH
22346: LD_INT 80
22348: PUSH
22349: LD_INT 82
22351: PUSH
22352: LD_INT 83
22354: PUSH
22355: LD_INT 84
22357: PUSH
22358: LD_INT 85
22360: PUSH
22361: LD_INT 86
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: ST_TO_ADDR
22417: GO 22884
22419: LD_INT 2
22421: DOUBLE
22422: EQUAL
22423: IFTRUE 22427
22425: GO 22653
22427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22428: LD_ADDR_VAR 0 4
22432: PUSH
22433: LD_INT 35
22435: PUSH
22436: LD_INT 45
22438: PUSH
22439: LD_INT 46
22441: PUSH
22442: LD_INT 47
22444: PUSH
22445: LD_INT 82
22447: PUSH
22448: LD_INT 83
22450: PUSH
22451: LD_INT 84
22453: PUSH
22454: LD_INT 85
22456: PUSH
22457: LD_INT 87
22459: PUSH
22460: LD_INT 70
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 11
22468: PUSH
22469: LD_INT 3
22471: PUSH
22472: LD_INT 4
22474: PUSH
22475: LD_INT 5
22477: PUSH
22478: LD_INT 6
22480: PUSH
22481: LD_INT 15
22483: PUSH
22484: LD_INT 18
22486: PUSH
22487: LD_INT 7
22489: PUSH
22490: LD_INT 17
22492: PUSH
22493: LD_INT 8
22495: PUSH
22496: LD_INT 20
22498: PUSH
22499: LD_INT 21
22501: PUSH
22502: LD_INT 22
22504: PUSH
22505: LD_INT 72
22507: PUSH
22508: LD_INT 26
22510: PUSH
22511: LD_INT 69
22513: PUSH
22514: LD_INT 39
22516: PUSH
22517: LD_INT 40
22519: PUSH
22520: LD_INT 41
22522: PUSH
22523: LD_INT 42
22525: PUSH
22526: LD_INT 43
22528: PUSH
22529: LD_INT 48
22531: PUSH
22532: LD_INT 49
22534: PUSH
22535: LD_INT 50
22537: PUSH
22538: LD_INT 51
22540: PUSH
22541: LD_INT 52
22543: PUSH
22544: LD_INT 53
22546: PUSH
22547: LD_INT 54
22549: PUSH
22550: LD_INT 55
22552: PUSH
22553: LD_INT 56
22555: PUSH
22556: LD_INT 60
22558: PUSH
22559: LD_INT 61
22561: PUSH
22562: LD_INT 62
22564: PUSH
22565: LD_INT 66
22567: PUSH
22568: LD_INT 67
22570: PUSH
22571: LD_INT 68
22573: PUSH
22574: LD_INT 81
22576: PUSH
22577: LD_INT 82
22579: PUSH
22580: LD_INT 83
22582: PUSH
22583: LD_INT 84
22585: PUSH
22586: LD_INT 85
22588: PUSH
22589: LD_INT 87
22591: PUSH
22592: LD_INT 88
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: ST_TO_ADDR
22651: GO 22884
22653: LD_INT 3
22655: DOUBLE
22656: EQUAL
22657: IFTRUE 22661
22659: GO 22883
22661: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22662: LD_ADDR_VAR 0 4
22666: PUSH
22667: LD_INT 46
22669: PUSH
22670: LD_INT 47
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 82
22681: PUSH
22682: LD_INT 83
22684: PUSH
22685: LD_INT 84
22687: PUSH
22688: LD_INT 85
22690: PUSH
22691: LD_INT 86
22693: PUSH
22694: LD_INT 11
22696: PUSH
22697: LD_INT 9
22699: PUSH
22700: LD_INT 20
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: LD_INT 21
22708: PUSH
22709: LD_INT 24
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 25
22717: PUSH
22718: LD_INT 28
22720: PUSH
22721: LD_INT 29
22723: PUSH
22724: LD_INT 30
22726: PUSH
22727: LD_INT 31
22729: PUSH
22730: LD_INT 37
22732: PUSH
22733: LD_INT 38
22735: PUSH
22736: LD_INT 32
22738: PUSH
22739: LD_INT 27
22741: PUSH
22742: LD_INT 33
22744: PUSH
22745: LD_INT 69
22747: PUSH
22748: LD_INT 39
22750: PUSH
22751: LD_INT 34
22753: PUSH
22754: LD_INT 40
22756: PUSH
22757: LD_INT 71
22759: PUSH
22760: LD_INT 23
22762: PUSH
22763: LD_INT 44
22765: PUSH
22766: LD_INT 48
22768: PUSH
22769: LD_INT 49
22771: PUSH
22772: LD_INT 50
22774: PUSH
22775: LD_INT 51
22777: PUSH
22778: LD_INT 52
22780: PUSH
22781: LD_INT 53
22783: PUSH
22784: LD_INT 54
22786: PUSH
22787: LD_INT 55
22789: PUSH
22790: LD_INT 56
22792: PUSH
22793: LD_INT 57
22795: PUSH
22796: LD_INT 58
22798: PUSH
22799: LD_INT 59
22801: PUSH
22802: LD_INT 63
22804: PUSH
22805: LD_INT 64
22807: PUSH
22808: LD_INT 65
22810: PUSH
22811: LD_INT 82
22813: PUSH
22814: LD_INT 83
22816: PUSH
22817: LD_INT 84
22819: PUSH
22820: LD_INT 85
22822: PUSH
22823: LD_INT 86
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: ST_TO_ADDR
22881: GO 22884
22883: POP
// if state > - 1 and state < 3 then
22884: LD_VAR 0 3
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: GREATER
22893: PUSH
22894: LD_VAR 0 3
22898: PUSH
22899: LD_INT 3
22901: LESS
22902: AND
22903: IFFALSE 22960
// for i in result do
22905: LD_ADDR_VAR 0 5
22909: PUSH
22910: LD_VAR 0 4
22914: PUSH
22915: FOR_IN
22916: IFFALSE 22958
// if GetTech ( i , side ) <> state then
22918: LD_VAR 0 5
22922: PPUSH
22923: LD_VAR 0 1
22927: PPUSH
22928: CALL_OW 321
22932: PUSH
22933: LD_VAR 0 3
22937: NONEQUAL
22938: IFFALSE 22956
// result := result diff i ;
22940: LD_ADDR_VAR 0 4
22944: PUSH
22945: LD_VAR 0 4
22949: PUSH
22950: LD_VAR 0 5
22954: DIFF
22955: ST_TO_ADDR
22956: GO 22915
22958: POP
22959: POP
// end ;
22960: LD_VAR 0 4
22964: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22965: LD_INT 0
22967: PPUSH
22968: PPUSH
22969: PPUSH
// result := true ;
22970: LD_ADDR_VAR 0 3
22974: PUSH
22975: LD_INT 1
22977: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22978: LD_ADDR_VAR 0 5
22982: PUSH
22983: LD_VAR 0 2
22987: PPUSH
22988: CALL_OW 480
22992: ST_TO_ADDR
// if not tmp then
22993: LD_VAR 0 5
22997: NOT
22998: IFFALSE 23002
// exit ;
23000: GO 23051
// for i in tmp do
23002: LD_ADDR_VAR 0 4
23006: PUSH
23007: LD_VAR 0 5
23011: PUSH
23012: FOR_IN
23013: IFFALSE 23049
// if GetTech ( i , side ) <> state_researched then
23015: LD_VAR 0 4
23019: PPUSH
23020: LD_VAR 0 1
23024: PPUSH
23025: CALL_OW 321
23029: PUSH
23030: LD_INT 2
23032: NONEQUAL
23033: IFFALSE 23047
// begin result := false ;
23035: LD_ADDR_VAR 0 3
23039: PUSH
23040: LD_INT 0
23042: ST_TO_ADDR
// exit ;
23043: POP
23044: POP
23045: GO 23051
// end ;
23047: GO 23012
23049: POP
23050: POP
// end ;
23051: LD_VAR 0 3
23055: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23056: LD_INT 0
23058: PPUSH
23059: PPUSH
23060: PPUSH
23061: PPUSH
23062: PPUSH
23063: PPUSH
23064: PPUSH
23065: PPUSH
23066: PPUSH
23067: PPUSH
23068: PPUSH
23069: PPUSH
23070: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23071: LD_VAR 0 1
23075: NOT
23076: PUSH
23077: LD_VAR 0 1
23081: PPUSH
23082: CALL_OW 257
23086: PUSH
23087: LD_INT 9
23089: NONEQUAL
23090: OR
23091: IFFALSE 23095
// exit ;
23093: GO 23668
// side := GetSide ( unit ) ;
23095: LD_ADDR_VAR 0 9
23099: PUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 255
23109: ST_TO_ADDR
// tech_space := tech_spacanom ;
23110: LD_ADDR_VAR 0 12
23114: PUSH
23115: LD_INT 29
23117: ST_TO_ADDR
// tech_time := tech_taurad ;
23118: LD_ADDR_VAR 0 13
23122: PUSH
23123: LD_INT 28
23125: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23126: LD_ADDR_VAR 0 11
23130: PUSH
23131: LD_VAR 0 1
23135: PPUSH
23136: CALL_OW 310
23140: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23141: LD_VAR 0 11
23145: PPUSH
23146: CALL_OW 247
23150: PUSH
23151: LD_INT 2
23153: EQUAL
23154: IFFALSE 23158
// exit ;
23156: GO 23668
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23158: LD_ADDR_VAR 0 8
23162: PUSH
23163: LD_INT 81
23165: PUSH
23166: LD_VAR 0 9
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 3
23177: PUSH
23178: LD_INT 21
23180: PUSH
23181: LD_INT 3
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PPUSH
23196: CALL_OW 69
23200: ST_TO_ADDR
// if not tmp then
23201: LD_VAR 0 8
23205: NOT
23206: IFFALSE 23210
// exit ;
23208: GO 23668
// if in_unit then
23210: LD_VAR 0 11
23214: IFFALSE 23238
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23216: LD_ADDR_VAR 0 10
23220: PUSH
23221: LD_VAR 0 8
23225: PPUSH
23226: LD_VAR 0 11
23230: PPUSH
23231: CALL_OW 74
23235: ST_TO_ADDR
23236: GO 23258
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23238: LD_ADDR_VAR 0 10
23242: PUSH
23243: LD_VAR 0 8
23247: PPUSH
23248: LD_VAR 0 1
23252: PPUSH
23253: CALL_OW 74
23257: ST_TO_ADDR
// if not enemy then
23258: LD_VAR 0 10
23262: NOT
23263: IFFALSE 23267
// exit ;
23265: GO 23668
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23267: LD_VAR 0 11
23271: PUSH
23272: LD_VAR 0 11
23276: PPUSH
23277: LD_VAR 0 10
23281: PPUSH
23282: CALL_OW 296
23286: PUSH
23287: LD_INT 13
23289: GREATER
23290: AND
23291: PUSH
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_VAR 0 10
23301: PPUSH
23302: CALL_OW 296
23306: PUSH
23307: LD_INT 12
23309: GREATER
23310: OR
23311: IFFALSE 23315
// exit ;
23313: GO 23668
// missile := [ 1 ] ;
23315: LD_ADDR_VAR 0 14
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23326: LD_VAR 0 9
23330: PPUSH
23331: LD_VAR 0 12
23335: PPUSH
23336: CALL_OW 325
23340: IFFALSE 23369
// missile := Replace ( missile , missile + 1 , 2 ) ;
23342: LD_ADDR_VAR 0 14
23346: PUSH
23347: LD_VAR 0 14
23351: PPUSH
23352: LD_VAR 0 14
23356: PUSH
23357: LD_INT 1
23359: PLUS
23360: PPUSH
23361: LD_INT 2
23363: PPUSH
23364: CALL_OW 1
23368: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23369: LD_VAR 0 9
23373: PPUSH
23374: LD_VAR 0 13
23378: PPUSH
23379: CALL_OW 325
23383: PUSH
23384: LD_VAR 0 10
23388: PPUSH
23389: CALL_OW 255
23393: PPUSH
23394: LD_VAR 0 13
23398: PPUSH
23399: CALL_OW 325
23403: NOT
23404: AND
23405: IFFALSE 23434
// missile := Replace ( missile , missile + 1 , 3 ) ;
23407: LD_ADDR_VAR 0 14
23411: PUSH
23412: LD_VAR 0 14
23416: PPUSH
23417: LD_VAR 0 14
23421: PUSH
23422: LD_INT 1
23424: PLUS
23425: PPUSH
23426: LD_INT 3
23428: PPUSH
23429: CALL_OW 1
23433: ST_TO_ADDR
// if missile < 2 then
23434: LD_VAR 0 14
23438: PUSH
23439: LD_INT 2
23441: LESS
23442: IFFALSE 23446
// exit ;
23444: GO 23668
// x := GetX ( enemy ) ;
23446: LD_ADDR_VAR 0 4
23450: PUSH
23451: LD_VAR 0 10
23455: PPUSH
23456: CALL_OW 250
23460: ST_TO_ADDR
// y := GetY ( enemy ) ;
23461: LD_ADDR_VAR 0 5
23465: PUSH
23466: LD_VAR 0 10
23470: PPUSH
23471: CALL_OW 251
23475: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23476: LD_ADDR_VAR 0 6
23480: PUSH
23481: LD_VAR 0 4
23485: PUSH
23486: LD_INT 1
23488: NEG
23489: PPUSH
23490: LD_INT 1
23492: PPUSH
23493: CALL_OW 12
23497: PLUS
23498: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23499: LD_ADDR_VAR 0 7
23503: PUSH
23504: LD_VAR 0 5
23508: PUSH
23509: LD_INT 1
23511: NEG
23512: PPUSH
23513: LD_INT 1
23515: PPUSH
23516: CALL_OW 12
23520: PLUS
23521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23522: LD_VAR 0 6
23526: PPUSH
23527: LD_VAR 0 7
23531: PPUSH
23532: CALL_OW 488
23536: NOT
23537: IFFALSE 23559
// begin _x := x ;
23539: LD_ADDR_VAR 0 6
23543: PUSH
23544: LD_VAR 0 4
23548: ST_TO_ADDR
// _y := y ;
23549: LD_ADDR_VAR 0 7
23553: PUSH
23554: LD_VAR 0 5
23558: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23559: LD_ADDR_VAR 0 3
23563: PUSH
23564: LD_INT 1
23566: PPUSH
23567: LD_VAR 0 14
23571: PPUSH
23572: CALL_OW 12
23576: ST_TO_ADDR
// case i of 1 :
23577: LD_VAR 0 3
23581: PUSH
23582: LD_INT 1
23584: DOUBLE
23585: EQUAL
23586: IFTRUE 23590
23588: GO 23607
23590: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_VAR 0 10
23600: PPUSH
23601: CALL_OW 115
23605: GO 23668
23607: LD_INT 2
23609: DOUBLE
23610: EQUAL
23611: IFTRUE 23615
23613: GO 23637
23615: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23616: LD_VAR 0 1
23620: PPUSH
23621: LD_VAR 0 6
23625: PPUSH
23626: LD_VAR 0 7
23630: PPUSH
23631: CALL_OW 153
23635: GO 23668
23637: LD_INT 3
23639: DOUBLE
23640: EQUAL
23641: IFTRUE 23645
23643: GO 23667
23645: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23646: LD_VAR 0 1
23650: PPUSH
23651: LD_VAR 0 6
23655: PPUSH
23656: LD_VAR 0 7
23660: PPUSH
23661: CALL_OW 154
23665: GO 23668
23667: POP
// end ;
23668: LD_VAR 0 2
23672: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
// if not unit or not building then
23681: LD_VAR 0 1
23685: NOT
23686: PUSH
23687: LD_VAR 0 2
23691: NOT
23692: OR
23693: IFFALSE 23697
// exit ;
23695: GO 23855
// x := GetX ( building ) ;
23697: LD_ADDR_VAR 0 5
23701: PUSH
23702: LD_VAR 0 2
23706: PPUSH
23707: CALL_OW 250
23711: ST_TO_ADDR
// y := GetY ( building ) ;
23712: LD_ADDR_VAR 0 6
23716: PUSH
23717: LD_VAR 0 2
23721: PPUSH
23722: CALL_OW 251
23726: ST_TO_ADDR
// for i = 0 to 5 do
23727: LD_ADDR_VAR 0 4
23731: PUSH
23732: DOUBLE
23733: LD_INT 0
23735: DEC
23736: ST_TO_ADDR
23737: LD_INT 5
23739: PUSH
23740: FOR_TO
23741: IFFALSE 23853
// begin _x := ShiftX ( x , i , 3 ) ;
23743: LD_ADDR_VAR 0 7
23747: PUSH
23748: LD_VAR 0 5
23752: PPUSH
23753: LD_VAR 0 4
23757: PPUSH
23758: LD_INT 3
23760: PPUSH
23761: CALL_OW 272
23765: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23766: LD_ADDR_VAR 0 8
23770: PUSH
23771: LD_VAR 0 6
23775: PPUSH
23776: LD_VAR 0 4
23780: PPUSH
23781: LD_INT 3
23783: PPUSH
23784: CALL_OW 273
23788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23789: LD_VAR 0 7
23793: PPUSH
23794: LD_VAR 0 8
23798: PPUSH
23799: CALL_OW 488
23803: NOT
23804: IFFALSE 23808
// continue ;
23806: GO 23740
// if HexInfo ( _x , _y ) = 0 then
23808: LD_VAR 0 7
23812: PPUSH
23813: LD_VAR 0 8
23817: PPUSH
23818: CALL_OW 428
23822: PUSH
23823: LD_INT 0
23825: EQUAL
23826: IFFALSE 23851
// begin ComMoveXY ( unit , _x , _y ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: LD_VAR 0 7
23837: PPUSH
23838: LD_VAR 0 8
23842: PPUSH
23843: CALL_OW 111
// exit ;
23847: POP
23848: POP
23849: GO 23855
// end ; end ;
23851: GO 23740
23853: POP
23854: POP
// end ;
23855: LD_VAR 0 3
23859: RET
// export function ScanBase ( side , base_area ) ; begin
23860: LD_INT 0
23862: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23863: LD_ADDR_VAR 0 3
23867: PUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_INT 81
23875: PUSH
23876: LD_VAR 0 1
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PPUSH
23885: CALL_OW 70
23889: ST_TO_ADDR
// end ;
23890: LD_VAR 0 3
23894: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23895: LD_INT 0
23897: PPUSH
23898: PPUSH
23899: PPUSH
23900: PPUSH
// result := false ;
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 0
23908: ST_TO_ADDR
// side := GetSide ( unit ) ;
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: CALL_OW 255
23923: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23924: LD_ADDR_VAR 0 4
23928: PUSH
23929: LD_VAR 0 1
23933: PPUSH
23934: CALL_OW 248
23938: ST_TO_ADDR
// case nat of 1 :
23939: LD_VAR 0 4
23943: PUSH
23944: LD_INT 1
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23952
23950: GO 23963
23952: POP
// tech := tech_lassight ; 2 :
23953: LD_ADDR_VAR 0 5
23957: PUSH
23958: LD_INT 12
23960: ST_TO_ADDR
23961: GO 24002
23963: LD_INT 2
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23982
23971: POP
// tech := tech_mortar ; 3 :
23972: LD_ADDR_VAR 0 5
23976: PUSH
23977: LD_INT 41
23979: ST_TO_ADDR
23980: GO 24002
23982: LD_INT 3
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23990
23988: GO 24001
23990: POP
// tech := tech_bazooka ; end ;
23991: LD_ADDR_VAR 0 5
23995: PUSH
23996: LD_INT 44
23998: ST_TO_ADDR
23999: GO 24002
24001: POP
// if Researched ( side , tech ) then
24002: LD_VAR 0 3
24006: PPUSH
24007: LD_VAR 0 5
24011: PPUSH
24012: CALL_OW 325
24016: IFFALSE 24043
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_INT 5
24025: PUSH
24026: LD_INT 8
24028: PUSH
24029: LD_INT 9
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: LD_VAR 0 4
24041: ARRAY
24042: ST_TO_ADDR
// end ;
24043: LD_VAR 0 2
24047: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24048: LD_INT 0
24050: PPUSH
24051: PPUSH
24052: PPUSH
// if not mines then
24053: LD_VAR 0 2
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24206
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24062: LD_ADDR_VAR 0 5
24066: PUSH
24067: LD_INT 81
24069: PUSH
24070: LD_VAR 0 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 3
24081: PUSH
24082: LD_INT 21
24084: PUSH
24085: LD_INT 3
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PPUSH
24100: CALL_OW 69
24104: ST_TO_ADDR
// for i in mines do
24105: LD_ADDR_VAR 0 4
24109: PUSH
24110: LD_VAR 0 2
24114: PUSH
24115: FOR_IN
24116: IFFALSE 24204
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24118: LD_VAR 0 4
24122: PUSH
24123: LD_INT 1
24125: ARRAY
24126: PPUSH
24127: LD_VAR 0 4
24131: PUSH
24132: LD_INT 2
24134: ARRAY
24135: PPUSH
24136: CALL_OW 458
24140: NOT
24141: IFFALSE 24145
// continue ;
24143: GO 24115
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24145: LD_VAR 0 4
24149: PUSH
24150: LD_INT 1
24152: ARRAY
24153: PPUSH
24154: LD_VAR 0 4
24158: PUSH
24159: LD_INT 2
24161: ARRAY
24162: PPUSH
24163: CALL_OW 428
24167: PUSH
24168: LD_VAR 0 5
24172: IN
24173: IFFALSE 24202
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24175: LD_VAR 0 4
24179: PUSH
24180: LD_INT 1
24182: ARRAY
24183: PPUSH
24184: LD_VAR 0 4
24188: PUSH
24189: LD_INT 2
24191: ARRAY
24192: PPUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 456
// end ;
24202: GO 24115
24204: POP
24205: POP
// end ;
24206: LD_VAR 0 3
24210: RET
// export function Count ( array ) ; begin
24211: LD_INT 0
24213: PPUSH
// result := array + 0 ;
24214: LD_ADDR_VAR 0 2
24218: PUSH
24219: LD_VAR 0 1
24223: PUSH
24224: LD_INT 0
24226: PLUS
24227: ST_TO_ADDR
// end ;
24228: LD_VAR 0 2
24232: RET
// export function IsEmpty ( building ) ; begin
24233: LD_INT 0
24235: PPUSH
// if not building then
24236: LD_VAR 0 1
24240: NOT
24241: IFFALSE 24245
// exit ;
24243: GO 24288
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24245: LD_ADDR_VAR 0 2
24249: PUSH
24250: LD_VAR 0 1
24254: PUSH
24255: LD_INT 22
24257: PUSH
24258: LD_VAR 0 1
24262: PPUSH
24263: CALL_OW 255
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 58
24274: PUSH
24275: EMPTY
24276: LIST
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: IN
24287: ST_TO_ADDR
// end ;
24288: LD_VAR 0 2
24292: RET
// export function IsNotFull ( building ) ; var places ; begin
24293: LD_INT 0
24295: PPUSH
24296: PPUSH
// if not building then
24297: LD_VAR 0 1
24301: NOT
24302: IFFALSE 24306
// exit ;
24304: GO 24334
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24306: LD_ADDR_VAR 0 2
24310: PUSH
24311: LD_VAR 0 1
24315: PPUSH
24316: LD_INT 3
24318: PUSH
24319: LD_INT 62
24321: PUSH
24322: EMPTY
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PPUSH
24329: CALL_OW 72
24333: ST_TO_ADDR
// end ;
24334: LD_VAR 0 2
24338: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24339: LD_INT 0
24341: PPUSH
24342: PPUSH
24343: PPUSH
24344: PPUSH
// tmp := [ ] ;
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: EMPTY
24351: ST_TO_ADDR
// list := [ ] ;
24352: LD_ADDR_VAR 0 5
24356: PUSH
24357: EMPTY
24358: ST_TO_ADDR
// for i = 16 to 25 do
24359: LD_ADDR_VAR 0 4
24363: PUSH
24364: DOUBLE
24365: LD_INT 16
24367: DEC
24368: ST_TO_ADDR
24369: LD_INT 25
24371: PUSH
24372: FOR_TO
24373: IFFALSE 24446
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24375: LD_ADDR_VAR 0 3
24379: PUSH
24380: LD_VAR 0 3
24384: PUSH
24385: LD_INT 22
24387: PUSH
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 255
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 91
24404: PUSH
24405: LD_VAR 0 1
24409: PUSH
24410: LD_INT 6
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 30
24420: PUSH
24421: LD_VAR 0 4
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: ADD
24443: ST_TO_ADDR
24444: GO 24372
24446: POP
24447: POP
// for i = 1 to tmp do
24448: LD_ADDR_VAR 0 4
24452: PUSH
24453: DOUBLE
24454: LD_INT 1
24456: DEC
24457: ST_TO_ADDR
24458: LD_VAR 0 3
24462: PUSH
24463: FOR_TO
24464: IFFALSE 24552
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24466: LD_ADDR_VAR 0 5
24470: PUSH
24471: LD_VAR 0 5
24475: PUSH
24476: LD_VAR 0 3
24480: PUSH
24481: LD_VAR 0 4
24485: ARRAY
24486: PPUSH
24487: CALL_OW 266
24491: PUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_VAR 0 4
24501: ARRAY
24502: PPUSH
24503: CALL_OW 250
24507: PUSH
24508: LD_VAR 0 3
24512: PUSH
24513: LD_VAR 0 4
24517: ARRAY
24518: PPUSH
24519: CALL_OW 251
24523: PUSH
24524: LD_VAR 0 3
24528: PUSH
24529: LD_VAR 0 4
24533: ARRAY
24534: PPUSH
24535: CALL_OW 254
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: ADD
24549: ST_TO_ADDR
24550: GO 24463
24552: POP
24553: POP
// result := list ;
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_VAR 0 5
24563: ST_TO_ADDR
// end ;
24564: LD_VAR 0 2
24568: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24569: LD_INT 0
24571: PPUSH
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
// if not factory then
24578: LD_VAR 0 1
24582: NOT
24583: IFFALSE 24587
// exit ;
24585: GO 25180
// if control = control_apeman then
24587: LD_VAR 0 4
24591: PUSH
24592: LD_INT 5
24594: EQUAL
24595: IFFALSE 24704
// begin tmp := UnitsInside ( factory ) ;
24597: LD_ADDR_VAR 0 8
24601: PUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 313
24611: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24612: LD_VAR 0 8
24616: PPUSH
24617: LD_INT 25
24619: PUSH
24620: LD_INT 12
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 72
24631: NOT
24632: IFFALSE 24642
// control := control_manual ;
24634: LD_ADDR_VAR 0 4
24638: PUSH
24639: LD_INT 1
24641: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24642: LD_ADDR_VAR 0 8
24646: PUSH
24647: LD_VAR 0 1
24651: PPUSH
24652: CALL 24339 0 1
24656: ST_TO_ADDR
// if tmp then
24657: LD_VAR 0 8
24661: IFFALSE 24704
// begin for i in tmp do
24663: LD_ADDR_VAR 0 7
24667: PUSH
24668: LD_VAR 0 8
24672: PUSH
24673: FOR_IN
24674: IFFALSE 24702
// if i [ 1 ] = b_ext_radio then
24676: LD_VAR 0 7
24680: PUSH
24681: LD_INT 1
24683: ARRAY
24684: PUSH
24685: LD_INT 22
24687: EQUAL
24688: IFFALSE 24700
// begin control := control_remote ;
24690: LD_ADDR_VAR 0 4
24694: PUSH
24695: LD_INT 2
24697: ST_TO_ADDR
// break ;
24698: GO 24702
// end ;
24700: GO 24673
24702: POP
24703: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24704: LD_VAR 0 1
24708: PPUSH
24709: LD_VAR 0 2
24713: PPUSH
24714: LD_VAR 0 3
24718: PPUSH
24719: LD_VAR 0 4
24723: PPUSH
24724: LD_VAR 0 5
24728: PPUSH
24729: CALL_OW 448
24733: IFFALSE 24768
// begin result := [ chassis , engine , control , weapon ] ;
24735: LD_ADDR_VAR 0 6
24739: PUSH
24740: LD_VAR 0 2
24744: PUSH
24745: LD_VAR 0 3
24749: PUSH
24750: LD_VAR 0 4
24754: PUSH
24755: LD_VAR 0 5
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: ST_TO_ADDR
// exit ;
24766: GO 25180
// end ; _chassis := AvailableChassisList ( factory ) ;
24768: LD_ADDR_VAR 0 9
24772: PUSH
24773: LD_VAR 0 1
24777: PPUSH
24778: CALL_OW 475
24782: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24783: LD_ADDR_VAR 0 11
24787: PUSH
24788: LD_VAR 0 1
24792: PPUSH
24793: CALL_OW 476
24797: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24798: LD_ADDR_VAR 0 12
24802: PUSH
24803: LD_VAR 0 1
24807: PPUSH
24808: CALL_OW 477
24812: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24813: LD_ADDR_VAR 0 10
24817: PUSH
24818: LD_VAR 0 1
24822: PPUSH
24823: CALL_OW 478
24827: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24828: LD_VAR 0 9
24832: NOT
24833: PUSH
24834: LD_VAR 0 11
24838: NOT
24839: OR
24840: PUSH
24841: LD_VAR 0 12
24845: NOT
24846: OR
24847: PUSH
24848: LD_VAR 0 10
24852: NOT
24853: OR
24854: IFFALSE 24889
// begin result := [ chassis , engine , control , weapon ] ;
24856: LD_ADDR_VAR 0 6
24860: PUSH
24861: LD_VAR 0 2
24865: PUSH
24866: LD_VAR 0 3
24870: PUSH
24871: LD_VAR 0 4
24875: PUSH
24876: LD_VAR 0 5
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: ST_TO_ADDR
// exit ;
24887: GO 25180
// end ; if not chassis in _chassis then
24889: LD_VAR 0 2
24893: PUSH
24894: LD_VAR 0 9
24898: IN
24899: NOT
24900: IFFALSE 24926
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24902: LD_ADDR_VAR 0 2
24906: PUSH
24907: LD_VAR 0 9
24911: PUSH
24912: LD_INT 1
24914: PPUSH
24915: LD_VAR 0 9
24919: PPUSH
24920: CALL_OW 12
24924: ARRAY
24925: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24926: LD_VAR 0 2
24930: PPUSH
24931: LD_VAR 0 3
24935: PPUSH
24936: CALL 25185 0 2
24940: NOT
24941: IFFALSE 25000
// repeat engine := _engine [ 1 ] ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_VAR 0 11
24952: PUSH
24953: LD_INT 1
24955: ARRAY
24956: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24957: LD_ADDR_VAR 0 11
24961: PUSH
24962: LD_VAR 0 11
24966: PPUSH
24967: LD_INT 1
24969: PPUSH
24970: CALL_OW 3
24974: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24975: LD_VAR 0 2
24979: PPUSH
24980: LD_VAR 0 3
24984: PPUSH
24985: CALL 25185 0 2
24989: PUSH
24990: LD_VAR 0 11
24994: PUSH
24995: EMPTY
24996: EQUAL
24997: OR
24998: IFFALSE 24943
// if not control in _control then
25000: LD_VAR 0 4
25004: PUSH
25005: LD_VAR 0 12
25009: IN
25010: NOT
25011: IFFALSE 25037
// control := _control [ rand ( 1 , _control ) ] ;
25013: LD_ADDR_VAR 0 4
25017: PUSH
25018: LD_VAR 0 12
25022: PUSH
25023: LD_INT 1
25025: PPUSH
25026: LD_VAR 0 12
25030: PPUSH
25031: CALL_OW 12
25035: ARRAY
25036: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25037: LD_VAR 0 2
25041: PPUSH
25042: LD_VAR 0 5
25046: PPUSH
25047: CALL 25405 0 2
25051: NOT
25052: IFFALSE 25111
// repeat weapon := _weapon [ 1 ] ;
25054: LD_ADDR_VAR 0 5
25058: PUSH
25059: LD_VAR 0 10
25063: PUSH
25064: LD_INT 1
25066: ARRAY
25067: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25068: LD_ADDR_VAR 0 10
25072: PUSH
25073: LD_VAR 0 10
25077: PPUSH
25078: LD_INT 1
25080: PPUSH
25081: CALL_OW 3
25085: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25086: LD_VAR 0 2
25090: PPUSH
25091: LD_VAR 0 5
25095: PPUSH
25096: CALL 25405 0 2
25100: PUSH
25101: LD_VAR 0 10
25105: PUSH
25106: EMPTY
25107: EQUAL
25108: OR
25109: IFFALSE 25054
// result := [ ] ;
25111: LD_ADDR_VAR 0 6
25115: PUSH
25116: EMPTY
25117: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25118: LD_VAR 0 1
25122: PPUSH
25123: LD_VAR 0 2
25127: PPUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: LD_VAR 0 4
25137: PPUSH
25138: LD_VAR 0 5
25142: PPUSH
25143: CALL_OW 448
25147: IFFALSE 25180
// result := [ chassis , engine , control , weapon ] ;
25149: LD_ADDR_VAR 0 6
25153: PUSH
25154: LD_VAR 0 2
25158: PUSH
25159: LD_VAR 0 3
25163: PUSH
25164: LD_VAR 0 4
25168: PUSH
25169: LD_VAR 0 5
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: ST_TO_ADDR
// end ;
25180: LD_VAR 0 6
25184: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25185: LD_INT 0
25187: PPUSH
// if not chassis or not engine then
25188: LD_VAR 0 1
25192: NOT
25193: PUSH
25194: LD_VAR 0 2
25198: NOT
25199: OR
25200: IFFALSE 25204
// exit ;
25202: GO 25400
// case engine of engine_solar :
25204: LD_VAR 0 2
25208: PUSH
25209: LD_INT 2
25211: DOUBLE
25212: EQUAL
25213: IFTRUE 25217
25215: GO 25255
25217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25218: LD_ADDR_VAR 0 3
25222: PUSH
25223: LD_INT 11
25225: PUSH
25226: LD_INT 12
25228: PUSH
25229: LD_INT 13
25231: PUSH
25232: LD_INT 14
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: LD_INT 3
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: ST_TO_ADDR
25253: GO 25384
25255: LD_INT 1
25257: DOUBLE
25258: EQUAL
25259: IFTRUE 25263
25261: GO 25325
25263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25264: LD_ADDR_VAR 0 3
25268: PUSH
25269: LD_INT 11
25271: PUSH
25272: LD_INT 12
25274: PUSH
25275: LD_INT 13
25277: PUSH
25278: LD_INT 14
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 4
25292: PUSH
25293: LD_INT 5
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 23
25301: PUSH
25302: LD_INT 22
25304: PUSH
25305: LD_INT 24
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
25323: GO 25384
25325: LD_INT 3
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25383
25333: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25334: LD_ADDR_VAR 0 3
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: LD_INT 14
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: LD_INT 3
25350: PUSH
25351: LD_INT 4
25353: PUSH
25354: LD_INT 5
25356: PUSH
25357: LD_INT 21
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 23
25365: PUSH
25366: LD_INT 24
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: ST_TO_ADDR
25381: GO 25384
25383: POP
// result := ( chassis in result ) ;
25384: LD_ADDR_VAR 0 3
25388: PUSH
25389: LD_VAR 0 1
25393: PUSH
25394: LD_VAR 0 3
25398: IN
25399: ST_TO_ADDR
// end ;
25400: LD_VAR 0 3
25404: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25405: LD_INT 0
25407: PPUSH
// if not chassis or not weapon then
25408: LD_VAR 0 1
25412: NOT
25413: PUSH
25414: LD_VAR 0 2
25418: NOT
25419: OR
25420: IFFALSE 25424
// exit ;
25422: GO 26484
// case weapon of us_machine_gun :
25424: LD_VAR 0 2
25428: PUSH
25429: LD_INT 2
25431: DOUBLE
25432: EQUAL
25433: IFTRUE 25437
25435: GO 25467
25437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 3
25451: PUSH
25452: LD_INT 4
25454: PUSH
25455: LD_INT 5
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: ST_TO_ADDR
25465: GO 26468
25467: LD_INT 3
25469: DOUBLE
25470: EQUAL
25471: IFTRUE 25475
25473: GO 25505
25475: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 3
25489: PUSH
25490: LD_INT 4
25492: PUSH
25493: LD_INT 5
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: ST_TO_ADDR
25503: GO 26468
25505: LD_INT 11
25507: DOUBLE
25508: EQUAL
25509: IFTRUE 25513
25511: GO 25543
25513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25514: LD_ADDR_VAR 0 3
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 3
25527: PUSH
25528: LD_INT 4
25530: PUSH
25531: LD_INT 5
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
25541: GO 26468
25543: LD_INT 4
25545: DOUBLE
25546: EQUAL
25547: IFTRUE 25551
25549: GO 25577
25551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25552: LD_ADDR_VAR 0 3
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: LD_INT 4
25565: PUSH
25566: LD_INT 5
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: ST_TO_ADDR
25575: GO 26468
25577: LD_INT 5
25579: DOUBLE
25580: EQUAL
25581: IFTRUE 25585
25583: GO 25611
25585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25586: LD_ADDR_VAR 0 3
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 3
25596: PUSH
25597: LD_INT 4
25599: PUSH
25600: LD_INT 5
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 26468
25611: LD_INT 9
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25645
25619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: LD_INT 4
25633: PUSH
25634: LD_INT 5
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
25643: GO 26468
25645: LD_INT 7
25647: DOUBLE
25648: EQUAL
25649: IFTRUE 25653
25651: GO 25679
25653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 3
25664: PUSH
25665: LD_INT 4
25667: PUSH
25668: LD_INT 5
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
25677: GO 26468
25679: LD_INT 12
25681: DOUBLE
25682: EQUAL
25683: IFTRUE 25687
25685: GO 25713
25687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25688: LD_ADDR_VAR 0 3
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 3
25698: PUSH
25699: LD_INT 4
25701: PUSH
25702: LD_INT 5
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
25711: GO 26468
25713: LD_INT 13
25715: DOUBLE
25716: EQUAL
25717: IFTRUE 25721
25719: GO 25747
25721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 3
25732: PUSH
25733: LD_INT 4
25735: PUSH
25736: LD_INT 5
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
25745: GO 26468
25747: LD_INT 14
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25755
25753: GO 25773
25755: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25756: LD_ADDR_VAR 0 3
25760: PUSH
25761: LD_INT 4
25763: PUSH
25764: LD_INT 5
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: ST_TO_ADDR
25771: GO 26468
25773: LD_INT 6
25775: DOUBLE
25776: EQUAL
25777: IFTRUE 25781
25779: GO 25799
25781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25782: LD_ADDR_VAR 0 3
25786: PUSH
25787: LD_INT 4
25789: PUSH
25790: LD_INT 5
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: ST_TO_ADDR
25797: GO 26468
25799: LD_INT 10
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25807
25805: GO 25825
25807: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 4
25815: PUSH
25816: LD_INT 5
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: ST_TO_ADDR
25823: GO 26468
25825: LD_INT 22
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25859
25833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25834: LD_ADDR_VAR 0 3
25838: PUSH
25839: LD_INT 11
25841: PUSH
25842: LD_INT 12
25844: PUSH
25845: LD_INT 13
25847: PUSH
25848: LD_INT 14
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: ST_TO_ADDR
25857: GO 26468
25859: LD_INT 23
25861: DOUBLE
25862: EQUAL
25863: IFTRUE 25867
25865: GO 25893
25867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25868: LD_ADDR_VAR 0 3
25872: PUSH
25873: LD_INT 11
25875: PUSH
25876: LD_INT 12
25878: PUSH
25879: LD_INT 13
25881: PUSH
25882: LD_INT 14
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: ST_TO_ADDR
25891: GO 26468
25893: LD_INT 24
25895: DOUBLE
25896: EQUAL
25897: IFTRUE 25901
25899: GO 25927
25901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25902: LD_ADDR_VAR 0 3
25906: PUSH
25907: LD_INT 11
25909: PUSH
25910: LD_INT 12
25912: PUSH
25913: LD_INT 13
25915: PUSH
25916: LD_INT 14
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: ST_TO_ADDR
25925: GO 26468
25927: LD_INT 30
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 25961
25935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_INT 11
25943: PUSH
25944: LD_INT 12
25946: PUSH
25947: LD_INT 13
25949: PUSH
25950: LD_INT 14
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: ST_TO_ADDR
25959: GO 26468
25961: LD_INT 25
25963: DOUBLE
25964: EQUAL
25965: IFTRUE 25969
25967: GO 25987
25969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25970: LD_ADDR_VAR 0 3
25974: PUSH
25975: LD_INT 13
25977: PUSH
25978: LD_INT 14
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: ST_TO_ADDR
25985: GO 26468
25987: LD_INT 27
25989: DOUBLE
25990: EQUAL
25991: IFTRUE 25995
25993: GO 26013
25995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25996: LD_ADDR_VAR 0 3
26000: PUSH
26001: LD_INT 13
26003: PUSH
26004: LD_INT 14
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: ST_TO_ADDR
26011: GO 26468
26013: LD_INT 92
26015: DOUBLE
26016: EQUAL
26017: IFTRUE 26021
26019: GO 26047
26021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26022: LD_ADDR_VAR 0 3
26026: PUSH
26027: LD_INT 11
26029: PUSH
26030: LD_INT 12
26032: PUSH
26033: LD_INT 13
26035: PUSH
26036: LD_INT 14
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: ST_TO_ADDR
26045: GO 26468
26047: LD_INT 28
26049: DOUBLE
26050: EQUAL
26051: IFTRUE 26055
26053: GO 26073
26055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26056: LD_ADDR_VAR 0 3
26060: PUSH
26061: LD_INT 13
26063: PUSH
26064: LD_INT 14
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: ST_TO_ADDR
26071: GO 26468
26073: LD_INT 29
26075: DOUBLE
26076: EQUAL
26077: IFTRUE 26081
26079: GO 26099
26081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_INT 13
26089: PUSH
26090: LD_INT 14
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: ST_TO_ADDR
26097: GO 26468
26099: LD_INT 31
26101: DOUBLE
26102: EQUAL
26103: IFTRUE 26107
26105: GO 26125
26107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26108: LD_ADDR_VAR 0 3
26112: PUSH
26113: LD_INT 13
26115: PUSH
26116: LD_INT 14
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: ST_TO_ADDR
26123: GO 26468
26125: LD_INT 26
26127: DOUBLE
26128: EQUAL
26129: IFTRUE 26133
26131: GO 26151
26133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26134: LD_ADDR_VAR 0 3
26138: PUSH
26139: LD_INT 13
26141: PUSH
26142: LD_INT 14
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: ST_TO_ADDR
26149: GO 26468
26151: LD_INT 42
26153: DOUBLE
26154: EQUAL
26155: IFTRUE 26159
26157: GO 26185
26159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 21
26167: PUSH
26168: LD_INT 22
26170: PUSH
26171: LD_INT 23
26173: PUSH
26174: LD_INT 24
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: ST_TO_ADDR
26183: GO 26468
26185: LD_INT 43
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26219
26193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 21
26201: PUSH
26202: LD_INT 22
26204: PUSH
26205: LD_INT 23
26207: PUSH
26208: LD_INT 24
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 26468
26219: LD_INT 44
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26253
26227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 21
26235: PUSH
26236: LD_INT 22
26238: PUSH
26239: LD_INT 23
26241: PUSH
26242: LD_INT 24
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 26468
26253: LD_INT 45
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26287
26261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 21
26269: PUSH
26270: LD_INT 22
26272: PUSH
26273: LD_INT 23
26275: PUSH
26276: LD_INT 24
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
26285: GO 26468
26287: LD_INT 49
26289: DOUBLE
26290: EQUAL
26291: IFTRUE 26295
26293: GO 26321
26295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 21
26303: PUSH
26304: LD_INT 22
26306: PUSH
26307: LD_INT 23
26309: PUSH
26310: LD_INT 24
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26468
26321: LD_INT 51
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26355
26329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26330: LD_ADDR_VAR 0 3
26334: PUSH
26335: LD_INT 21
26337: PUSH
26338: LD_INT 22
26340: PUSH
26341: LD_INT 23
26343: PUSH
26344: LD_INT 24
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
26353: GO 26468
26355: LD_INT 52
26357: DOUBLE
26358: EQUAL
26359: IFTRUE 26363
26361: GO 26389
26363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26364: LD_ADDR_VAR 0 3
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 22
26374: PUSH
26375: LD_INT 23
26377: PUSH
26378: LD_INT 24
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: ST_TO_ADDR
26387: GO 26468
26389: LD_INT 53
26391: DOUBLE
26392: EQUAL
26393: IFTRUE 26397
26395: GO 26415
26397: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26398: LD_ADDR_VAR 0 3
26402: PUSH
26403: LD_INT 23
26405: PUSH
26406: LD_INT 24
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: ST_TO_ADDR
26413: GO 26468
26415: LD_INT 46
26417: DOUBLE
26418: EQUAL
26419: IFTRUE 26423
26421: GO 26441
26423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26424: LD_ADDR_VAR 0 3
26428: PUSH
26429: LD_INT 23
26431: PUSH
26432: LD_INT 24
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: ST_TO_ADDR
26439: GO 26468
26441: LD_INT 47
26443: DOUBLE
26444: EQUAL
26445: IFTRUE 26449
26447: GO 26467
26449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26450: LD_ADDR_VAR 0 3
26454: PUSH
26455: LD_INT 23
26457: PUSH
26458: LD_INT 24
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: ST_TO_ADDR
26465: GO 26468
26467: POP
// result := ( chassis in result ) ;
26468: LD_ADDR_VAR 0 3
26472: PUSH
26473: LD_VAR 0 1
26477: PUSH
26478: LD_VAR 0 3
26482: IN
26483: ST_TO_ADDR
// end ;
26484: LD_VAR 0 3
26488: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
// result := array ;
26498: LD_ADDR_VAR 0 5
26502: PUSH
26503: LD_VAR 0 1
26507: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26508: LD_VAR 0 1
26512: NOT
26513: PUSH
26514: LD_VAR 0 2
26518: NOT
26519: OR
26520: PUSH
26521: LD_VAR 0 3
26525: NOT
26526: OR
26527: PUSH
26528: LD_VAR 0 2
26532: PUSH
26533: LD_VAR 0 1
26537: GREATER
26538: OR
26539: PUSH
26540: LD_VAR 0 3
26544: PUSH
26545: LD_VAR 0 1
26549: GREATER
26550: OR
26551: IFFALSE 26555
// exit ;
26553: GO 26851
// if direction then
26555: LD_VAR 0 4
26559: IFFALSE 26623
// begin d := 1 ;
26561: LD_ADDR_VAR 0 9
26565: PUSH
26566: LD_INT 1
26568: ST_TO_ADDR
// if i_from > i_to then
26569: LD_VAR 0 2
26573: PUSH
26574: LD_VAR 0 3
26578: GREATER
26579: IFFALSE 26605
// length := ( array - i_from ) + i_to else
26581: LD_ADDR_VAR 0 11
26585: PUSH
26586: LD_VAR 0 1
26590: PUSH
26591: LD_VAR 0 2
26595: MINUS
26596: PUSH
26597: LD_VAR 0 3
26601: PLUS
26602: ST_TO_ADDR
26603: GO 26621
// length := i_to - i_from ;
26605: LD_ADDR_VAR 0 11
26609: PUSH
26610: LD_VAR 0 3
26614: PUSH
26615: LD_VAR 0 2
26619: MINUS
26620: ST_TO_ADDR
// end else
26621: GO 26684
// begin d := - 1 ;
26623: LD_ADDR_VAR 0 9
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: ST_TO_ADDR
// if i_from > i_to then
26632: LD_VAR 0 2
26636: PUSH
26637: LD_VAR 0 3
26641: GREATER
26642: IFFALSE 26662
// length := i_from - i_to else
26644: LD_ADDR_VAR 0 11
26648: PUSH
26649: LD_VAR 0 2
26653: PUSH
26654: LD_VAR 0 3
26658: MINUS
26659: ST_TO_ADDR
26660: GO 26684
// length := ( array - i_to ) + i_from ;
26662: LD_ADDR_VAR 0 11
26666: PUSH
26667: LD_VAR 0 1
26671: PUSH
26672: LD_VAR 0 3
26676: MINUS
26677: PUSH
26678: LD_VAR 0 2
26682: PLUS
26683: ST_TO_ADDR
// end ; if not length then
26684: LD_VAR 0 11
26688: NOT
26689: IFFALSE 26693
// exit ;
26691: GO 26851
// tmp := array ;
26693: LD_ADDR_VAR 0 10
26697: PUSH
26698: LD_VAR 0 1
26702: ST_TO_ADDR
// for i = 1 to length do
26703: LD_ADDR_VAR 0 6
26707: PUSH
26708: DOUBLE
26709: LD_INT 1
26711: DEC
26712: ST_TO_ADDR
26713: LD_VAR 0 11
26717: PUSH
26718: FOR_TO
26719: IFFALSE 26839
// begin for j = 1 to array do
26721: LD_ADDR_VAR 0 7
26725: PUSH
26726: DOUBLE
26727: LD_INT 1
26729: DEC
26730: ST_TO_ADDR
26731: LD_VAR 0 1
26735: PUSH
26736: FOR_TO
26737: IFFALSE 26825
// begin k := j + d ;
26739: LD_ADDR_VAR 0 8
26743: PUSH
26744: LD_VAR 0 7
26748: PUSH
26749: LD_VAR 0 9
26753: PLUS
26754: ST_TO_ADDR
// if k > array then
26755: LD_VAR 0 8
26759: PUSH
26760: LD_VAR 0 1
26764: GREATER
26765: IFFALSE 26775
// k := 1 ;
26767: LD_ADDR_VAR 0 8
26771: PUSH
26772: LD_INT 1
26774: ST_TO_ADDR
// if not k then
26775: LD_VAR 0 8
26779: NOT
26780: IFFALSE 26792
// k := array ;
26782: LD_ADDR_VAR 0 8
26786: PUSH
26787: LD_VAR 0 1
26791: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26792: LD_ADDR_VAR 0 10
26796: PUSH
26797: LD_VAR 0 10
26801: PPUSH
26802: LD_VAR 0 8
26806: PPUSH
26807: LD_VAR 0 1
26811: PUSH
26812: LD_VAR 0 7
26816: ARRAY
26817: PPUSH
26818: CALL_OW 1
26822: ST_TO_ADDR
// end ;
26823: GO 26736
26825: POP
26826: POP
// array := tmp ;
26827: LD_ADDR_VAR 0 1
26831: PUSH
26832: LD_VAR 0 10
26836: ST_TO_ADDR
// end ;
26837: GO 26718
26839: POP
26840: POP
// result := array ;
26841: LD_ADDR_VAR 0 5
26845: PUSH
26846: LD_VAR 0 1
26850: ST_TO_ADDR
// end ;
26851: LD_VAR 0 5
26855: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26856: LD_INT 0
26858: PPUSH
26859: PPUSH
// result := 0 ;
26860: LD_ADDR_VAR 0 3
26864: PUSH
26865: LD_INT 0
26867: ST_TO_ADDR
// if not array or not value in array then
26868: LD_VAR 0 1
26872: NOT
26873: PUSH
26874: LD_VAR 0 2
26878: PUSH
26879: LD_VAR 0 1
26883: IN
26884: NOT
26885: OR
26886: IFFALSE 26890
// exit ;
26888: GO 26944
// for i = 1 to array do
26890: LD_ADDR_VAR 0 4
26894: PUSH
26895: DOUBLE
26896: LD_INT 1
26898: DEC
26899: ST_TO_ADDR
26900: LD_VAR 0 1
26904: PUSH
26905: FOR_TO
26906: IFFALSE 26942
// if value = array [ i ] then
26908: LD_VAR 0 2
26912: PUSH
26913: LD_VAR 0 1
26917: PUSH
26918: LD_VAR 0 4
26922: ARRAY
26923: EQUAL
26924: IFFALSE 26940
// begin result := i ;
26926: LD_ADDR_VAR 0 3
26930: PUSH
26931: LD_VAR 0 4
26935: ST_TO_ADDR
// exit ;
26936: POP
26937: POP
26938: GO 26944
// end ;
26940: GO 26905
26942: POP
26943: POP
// end ;
26944: LD_VAR 0 3
26948: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26949: LD_INT 0
26951: PPUSH
// vc_chassis := chassis ;
26952: LD_ADDR_OWVAR 37
26956: PUSH
26957: LD_VAR 0 1
26961: ST_TO_ADDR
// vc_engine := engine ;
26962: LD_ADDR_OWVAR 39
26966: PUSH
26967: LD_VAR 0 2
26971: ST_TO_ADDR
// vc_control := control ;
26972: LD_ADDR_OWVAR 38
26976: PUSH
26977: LD_VAR 0 3
26981: ST_TO_ADDR
// vc_weapon := weapon ;
26982: LD_ADDR_OWVAR 40
26986: PUSH
26987: LD_VAR 0 4
26991: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26992: LD_ADDR_OWVAR 41
26996: PUSH
26997: LD_VAR 0 5
27001: ST_TO_ADDR
// end ;
27002: LD_VAR 0 6
27006: RET
// export function WantPlant ( unit ) ; var task ; begin
27007: LD_INT 0
27009: PPUSH
27010: PPUSH
// result := false ;
27011: LD_ADDR_VAR 0 2
27015: PUSH
27016: LD_INT 0
27018: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27019: LD_ADDR_VAR 0 3
27023: PUSH
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL_OW 437
27033: ST_TO_ADDR
// if task then
27034: LD_VAR 0 3
27038: IFFALSE 27066
// if task [ 1 ] [ 1 ] = p then
27040: LD_VAR 0 3
27044: PUSH
27045: LD_INT 1
27047: ARRAY
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PUSH
27053: LD_STRING p
27055: EQUAL
27056: IFFALSE 27066
// result := true ;
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_INT 1
27065: ST_TO_ADDR
// end ;
27066: LD_VAR 0 2
27070: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
// if pos < 1 then
27077: LD_VAR 0 2
27081: PUSH
27082: LD_INT 1
27084: LESS
27085: IFFALSE 27089
// exit ;
27087: GO 27392
// if pos = 1 then
27089: LD_VAR 0 2
27093: PUSH
27094: LD_INT 1
27096: EQUAL
27097: IFFALSE 27130
// result := Replace ( arr , pos [ 1 ] , value ) else
27099: LD_ADDR_VAR 0 4
27103: PUSH
27104: LD_VAR 0 1
27108: PPUSH
27109: LD_VAR 0 2
27113: PUSH
27114: LD_INT 1
27116: ARRAY
27117: PPUSH
27118: LD_VAR 0 3
27122: PPUSH
27123: CALL_OW 1
27127: ST_TO_ADDR
27128: GO 27392
// begin tmp := arr ;
27130: LD_ADDR_VAR 0 6
27134: PUSH
27135: LD_VAR 0 1
27139: ST_TO_ADDR
// s_arr := [ tmp ] ;
27140: LD_ADDR_VAR 0 7
27144: PUSH
27145: LD_VAR 0 6
27149: PUSH
27150: EMPTY
27151: LIST
27152: ST_TO_ADDR
// for i = 1 to pos - 1 do
27153: LD_ADDR_VAR 0 5
27157: PUSH
27158: DOUBLE
27159: LD_INT 1
27161: DEC
27162: ST_TO_ADDR
27163: LD_VAR 0 2
27167: PUSH
27168: LD_INT 1
27170: MINUS
27171: PUSH
27172: FOR_TO
27173: IFFALSE 27218
// begin tmp := tmp [ pos [ i ] ] ;
27175: LD_ADDR_VAR 0 6
27179: PUSH
27180: LD_VAR 0 6
27184: PUSH
27185: LD_VAR 0 2
27189: PUSH
27190: LD_VAR 0 5
27194: ARRAY
27195: ARRAY
27196: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27197: LD_ADDR_VAR 0 7
27201: PUSH
27202: LD_VAR 0 7
27206: PUSH
27207: LD_VAR 0 6
27211: PUSH
27212: EMPTY
27213: LIST
27214: ADD
27215: ST_TO_ADDR
// end ;
27216: GO 27172
27218: POP
27219: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27220: LD_ADDR_VAR 0 6
27224: PUSH
27225: LD_VAR 0 6
27229: PPUSH
27230: LD_VAR 0 2
27234: PUSH
27235: LD_VAR 0 2
27239: ARRAY
27240: PPUSH
27241: LD_VAR 0 3
27245: PPUSH
27246: CALL_OW 1
27250: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27251: LD_ADDR_VAR 0 7
27255: PUSH
27256: LD_VAR 0 7
27260: PPUSH
27261: LD_VAR 0 7
27265: PPUSH
27266: LD_VAR 0 6
27270: PPUSH
27271: CALL_OW 1
27275: ST_TO_ADDR
// for i = s_arr downto 2 do
27276: LD_ADDR_VAR 0 5
27280: PUSH
27281: DOUBLE
27282: LD_VAR 0 7
27286: INC
27287: ST_TO_ADDR
27288: LD_INT 2
27290: PUSH
27291: FOR_DOWNTO
27292: IFFALSE 27376
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27294: LD_ADDR_VAR 0 6
27298: PUSH
27299: LD_VAR 0 7
27303: PUSH
27304: LD_VAR 0 5
27308: PUSH
27309: LD_INT 1
27311: MINUS
27312: ARRAY
27313: PPUSH
27314: LD_VAR 0 2
27318: PUSH
27319: LD_VAR 0 5
27323: PUSH
27324: LD_INT 1
27326: MINUS
27327: ARRAY
27328: PPUSH
27329: LD_VAR 0 7
27333: PUSH
27334: LD_VAR 0 5
27338: ARRAY
27339: PPUSH
27340: CALL_OW 1
27344: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27345: LD_ADDR_VAR 0 7
27349: PUSH
27350: LD_VAR 0 7
27354: PPUSH
27355: LD_VAR 0 5
27359: PUSH
27360: LD_INT 1
27362: MINUS
27363: PPUSH
27364: LD_VAR 0 6
27368: PPUSH
27369: CALL_OW 1
27373: ST_TO_ADDR
// end ;
27374: GO 27291
27376: POP
27377: POP
// result := s_arr [ 1 ] ;
27378: LD_ADDR_VAR 0 4
27382: PUSH
27383: LD_VAR 0 7
27387: PUSH
27388: LD_INT 1
27390: ARRAY
27391: ST_TO_ADDR
// end ; end ;
27392: LD_VAR 0 4
27396: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27397: LD_INT 0
27399: PPUSH
27400: PPUSH
// if not list then
27401: LD_VAR 0 1
27405: NOT
27406: IFFALSE 27410
// exit ;
27408: GO 27501
// i := list [ pos1 ] ;
27410: LD_ADDR_VAR 0 5
27414: PUSH
27415: LD_VAR 0 1
27419: PUSH
27420: LD_VAR 0 2
27424: ARRAY
27425: ST_TO_ADDR
// if not i then
27426: LD_VAR 0 5
27430: NOT
27431: IFFALSE 27435
// exit ;
27433: GO 27501
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27435: LD_ADDR_VAR 0 1
27439: PUSH
27440: LD_VAR 0 1
27444: PPUSH
27445: LD_VAR 0 2
27449: PPUSH
27450: LD_VAR 0 1
27454: PUSH
27455: LD_VAR 0 3
27459: ARRAY
27460: PPUSH
27461: CALL_OW 1
27465: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27466: LD_ADDR_VAR 0 1
27470: PUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: LD_VAR 0 3
27480: PPUSH
27481: LD_VAR 0 5
27485: PPUSH
27486: CALL_OW 1
27490: ST_TO_ADDR
// result := list ;
27491: LD_ADDR_VAR 0 4
27495: PUSH
27496: LD_VAR 0 1
27500: ST_TO_ADDR
// end ;
27501: LD_VAR 0 4
27505: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27506: LD_INT 0
27508: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27509: LD_ADDR_VAR 0 5
27513: PUSH
27514: LD_VAR 0 1
27518: PPUSH
27519: CALL_OW 250
27523: PPUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: CALL_OW 251
27533: PPUSH
27534: LD_VAR 0 2
27538: PPUSH
27539: LD_VAR 0 3
27543: PPUSH
27544: LD_VAR 0 4
27548: PPUSH
27549: CALL 27559 0 5
27553: ST_TO_ADDR
// end ;
27554: LD_VAR 0 5
27558: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27559: LD_INT 0
27561: PPUSH
27562: PPUSH
27563: PPUSH
27564: PPUSH
// if not list then
27565: LD_VAR 0 3
27569: NOT
27570: IFFALSE 27574
// exit ;
27572: GO 27962
// result := [ ] ;
27574: LD_ADDR_VAR 0 6
27578: PUSH
27579: EMPTY
27580: ST_TO_ADDR
// for i in list do
27581: LD_ADDR_VAR 0 7
27585: PUSH
27586: LD_VAR 0 3
27590: PUSH
27591: FOR_IN
27592: IFFALSE 27794
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27594: LD_ADDR_VAR 0 9
27598: PUSH
27599: LD_VAR 0 7
27603: PPUSH
27604: LD_VAR 0 1
27608: PPUSH
27609: LD_VAR 0 2
27613: PPUSH
27614: CALL_OW 297
27618: ST_TO_ADDR
// if not result then
27619: LD_VAR 0 6
27623: NOT
27624: IFFALSE 27650
// result := [ [ i , tmp ] ] else
27626: LD_ADDR_VAR 0 6
27630: PUSH
27631: LD_VAR 0 7
27635: PUSH
27636: LD_VAR 0 9
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: ST_TO_ADDR
27648: GO 27792
// begin if result [ result ] [ 2 ] < tmp then
27650: LD_VAR 0 6
27654: PUSH
27655: LD_VAR 0 6
27659: ARRAY
27660: PUSH
27661: LD_INT 2
27663: ARRAY
27664: PUSH
27665: LD_VAR 0 9
27669: LESS
27670: IFFALSE 27712
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27672: LD_ADDR_VAR 0 6
27676: PUSH
27677: LD_VAR 0 6
27681: PPUSH
27682: LD_VAR 0 6
27686: PUSH
27687: LD_INT 1
27689: PLUS
27690: PPUSH
27691: LD_VAR 0 7
27695: PUSH
27696: LD_VAR 0 9
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PPUSH
27705: CALL_OW 2
27709: ST_TO_ADDR
27710: GO 27792
// for j = 1 to result do
27712: LD_ADDR_VAR 0 8
27716: PUSH
27717: DOUBLE
27718: LD_INT 1
27720: DEC
27721: ST_TO_ADDR
27722: LD_VAR 0 6
27726: PUSH
27727: FOR_TO
27728: IFFALSE 27790
// begin if tmp < result [ j ] [ 2 ] then
27730: LD_VAR 0 9
27734: PUSH
27735: LD_VAR 0 6
27739: PUSH
27740: LD_VAR 0 8
27744: ARRAY
27745: PUSH
27746: LD_INT 2
27748: ARRAY
27749: LESS
27750: IFFALSE 27788
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27752: LD_ADDR_VAR 0 6
27756: PUSH
27757: LD_VAR 0 6
27761: PPUSH
27762: LD_VAR 0 8
27766: PPUSH
27767: LD_VAR 0 7
27771: PUSH
27772: LD_VAR 0 9
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PPUSH
27781: CALL_OW 2
27785: ST_TO_ADDR
// break ;
27786: GO 27790
// end ; end ;
27788: GO 27727
27790: POP
27791: POP
// end ; end ;
27792: GO 27591
27794: POP
27795: POP
// if result and not asc then
27796: LD_VAR 0 6
27800: PUSH
27801: LD_VAR 0 4
27805: NOT
27806: AND
27807: IFFALSE 27882
// begin tmp := result ;
27809: LD_ADDR_VAR 0 9
27813: PUSH
27814: LD_VAR 0 6
27818: ST_TO_ADDR
// for i = tmp downto 1 do
27819: LD_ADDR_VAR 0 7
27823: PUSH
27824: DOUBLE
27825: LD_VAR 0 9
27829: INC
27830: ST_TO_ADDR
27831: LD_INT 1
27833: PUSH
27834: FOR_DOWNTO
27835: IFFALSE 27880
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27837: LD_ADDR_VAR 0 6
27841: PUSH
27842: LD_VAR 0 6
27846: PPUSH
27847: LD_VAR 0 9
27851: PUSH
27852: LD_VAR 0 7
27856: MINUS
27857: PUSH
27858: LD_INT 1
27860: PLUS
27861: PPUSH
27862: LD_VAR 0 9
27866: PUSH
27867: LD_VAR 0 7
27871: ARRAY
27872: PPUSH
27873: CALL_OW 1
27877: ST_TO_ADDR
27878: GO 27834
27880: POP
27881: POP
// end ; tmp := [ ] ;
27882: LD_ADDR_VAR 0 9
27886: PUSH
27887: EMPTY
27888: ST_TO_ADDR
// if mode then
27889: LD_VAR 0 5
27893: IFFALSE 27962
// begin for i = 1 to result do
27895: LD_ADDR_VAR 0 7
27899: PUSH
27900: DOUBLE
27901: LD_INT 1
27903: DEC
27904: ST_TO_ADDR
27905: LD_VAR 0 6
27909: PUSH
27910: FOR_TO
27911: IFFALSE 27950
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27913: LD_ADDR_VAR 0 9
27917: PUSH
27918: LD_VAR 0 9
27922: PPUSH
27923: LD_VAR 0 7
27927: PPUSH
27928: LD_VAR 0 6
27932: PUSH
27933: LD_VAR 0 7
27937: ARRAY
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: PPUSH
27943: CALL_OW 1
27947: ST_TO_ADDR
27948: GO 27910
27950: POP
27951: POP
// result := tmp ;
27952: LD_ADDR_VAR 0 6
27956: PUSH
27957: LD_VAR 0 9
27961: ST_TO_ADDR
// end ; end ;
27962: LD_VAR 0 6
27966: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27967: LD_INT 0
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27975: LD_ADDR_VAR 0 5
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: ST_TO_ADDR
// if not x or not y then
27997: LD_VAR 0 2
28001: NOT
28002: PUSH
28003: LD_VAR 0 3
28007: NOT
28008: OR
28009: IFFALSE 28013
// exit ;
28011: GO 29663
// if not range then
28013: LD_VAR 0 4
28017: NOT
28018: IFFALSE 28028
// range := 10 ;
28020: LD_ADDR_VAR 0 4
28024: PUSH
28025: LD_INT 10
28027: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28028: LD_ADDR_VAR 0 8
28032: PUSH
28033: LD_INT 81
28035: PUSH
28036: LD_VAR 0 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 92
28047: PUSH
28048: LD_VAR 0 2
28052: PUSH
28053: LD_VAR 0 3
28057: PUSH
28058: LD_VAR 0 4
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: LD_INT 21
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: PPUSH
28091: CALL_OW 69
28095: ST_TO_ADDR
// if not tmp then
28096: LD_VAR 0 8
28100: NOT
28101: IFFALSE 28105
// exit ;
28103: GO 29663
// for i in tmp do
28105: LD_ADDR_VAR 0 6
28109: PUSH
28110: LD_VAR 0 8
28114: PUSH
28115: FOR_IN
28116: IFFALSE 29638
// begin points := [ 0 , 0 , 0 ] ;
28118: LD_ADDR_VAR 0 9
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: ST_TO_ADDR
// bpoints := 1 ;
28137: LD_ADDR_VAR 0 10
28141: PUSH
28142: LD_INT 1
28144: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28145: LD_VAR 0 6
28149: PPUSH
28150: CALL_OW 247
28154: PUSH
28155: LD_INT 1
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28741
28163: POP
// begin if GetClass ( i ) = 1 then
28164: LD_VAR 0 6
28168: PPUSH
28169: CALL_OW 257
28173: PUSH
28174: LD_INT 1
28176: EQUAL
28177: IFFALSE 28198
// points := [ 10 , 5 , 3 ] ;
28179: LD_ADDR_VAR 0 9
28183: PUSH
28184: LD_INT 10
28186: PUSH
28187: LD_INT 5
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28198: LD_VAR 0 6
28202: PPUSH
28203: CALL_OW 257
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: LD_INT 4
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: IN
28222: IFFALSE 28243
// points := [ 3 , 2 , 1 ] ;
28224: LD_ADDR_VAR 0 9
28228: PUSH
28229: LD_INT 3
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28243: LD_VAR 0 6
28247: PPUSH
28248: CALL_OW 257
28252: PUSH
28253: LD_INT 5
28255: EQUAL
28256: IFFALSE 28277
// points := [ 130 , 5 , 2 ] ;
28258: LD_ADDR_VAR 0 9
28262: PUSH
28263: LD_INT 130
28265: PUSH
28266: LD_INT 5
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28277: LD_VAR 0 6
28281: PPUSH
28282: CALL_OW 257
28286: PUSH
28287: LD_INT 8
28289: EQUAL
28290: IFFALSE 28311
// points := [ 35 , 35 , 30 ] ;
28292: LD_ADDR_VAR 0 9
28296: PUSH
28297: LD_INT 35
28299: PUSH
28300: LD_INT 35
28302: PUSH
28303: LD_INT 30
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28311: LD_VAR 0 6
28315: PPUSH
28316: CALL_OW 257
28320: PUSH
28321: LD_INT 9
28323: EQUAL
28324: IFFALSE 28345
// points := [ 20 , 55 , 40 ] ;
28326: LD_ADDR_VAR 0 9
28330: PUSH
28331: LD_INT 20
28333: PUSH
28334: LD_INT 55
28336: PUSH
28337: LD_INT 40
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28345: LD_VAR 0 6
28349: PPUSH
28350: CALL_OW 257
28354: PUSH
28355: LD_INT 12
28357: PUSH
28358: LD_INT 16
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: IN
28365: IFFALSE 28386
// points := [ 5 , 3 , 2 ] ;
28367: LD_ADDR_VAR 0 9
28371: PUSH
28372: LD_INT 5
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28386: LD_VAR 0 6
28390: PPUSH
28391: CALL_OW 257
28395: PUSH
28396: LD_INT 17
28398: EQUAL
28399: IFFALSE 28420
// points := [ 100 , 50 , 75 ] ;
28401: LD_ADDR_VAR 0 9
28405: PUSH
28406: LD_INT 100
28408: PUSH
28409: LD_INT 50
28411: PUSH
28412: LD_INT 75
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28420: LD_VAR 0 6
28424: PPUSH
28425: CALL_OW 257
28429: PUSH
28430: LD_INT 15
28432: EQUAL
28433: IFFALSE 28454
// points := [ 10 , 5 , 3 ] ;
28435: LD_ADDR_VAR 0 9
28439: PUSH
28440: LD_INT 10
28442: PUSH
28443: LD_INT 5
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 257
28463: PUSH
28464: LD_INT 14
28466: EQUAL
28467: IFFALSE 28488
// points := [ 10 , 0 , 0 ] ;
28469: LD_ADDR_VAR 0 9
28473: PUSH
28474: LD_INT 10
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28488: LD_VAR 0 6
28492: PPUSH
28493: CALL_OW 257
28497: PUSH
28498: LD_INT 11
28500: EQUAL
28501: IFFALSE 28522
// points := [ 30 , 10 , 5 ] ;
28503: LD_ADDR_VAR 0 9
28507: PUSH
28508: LD_INT 30
28510: PUSH
28511: LD_INT 10
28513: PUSH
28514: LD_INT 5
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28522: LD_VAR 0 1
28526: PPUSH
28527: LD_INT 5
28529: PPUSH
28530: CALL_OW 321
28534: PUSH
28535: LD_INT 2
28537: EQUAL
28538: IFFALSE 28555
// bpoints := bpoints * 1.8 ;
28540: LD_ADDR_VAR 0 10
28544: PUSH
28545: LD_VAR 0 10
28549: PUSH
28550: LD_REAL  1.80000000000000E+0000
28553: MUL
28554: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28555: LD_VAR 0 6
28559: PPUSH
28560: CALL_OW 257
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: LD_INT 2
28570: PUSH
28571: LD_INT 3
28573: PUSH
28574: LD_INT 4
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: IN
28583: PUSH
28584: LD_VAR 0 1
28588: PPUSH
28589: LD_INT 51
28591: PPUSH
28592: CALL_OW 321
28596: PUSH
28597: LD_INT 2
28599: EQUAL
28600: AND
28601: IFFALSE 28618
// bpoints := bpoints * 1.2 ;
28603: LD_ADDR_VAR 0 10
28607: PUSH
28608: LD_VAR 0 10
28612: PUSH
28613: LD_REAL  1.20000000000000E+0000
28616: MUL
28617: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28618: LD_VAR 0 6
28622: PPUSH
28623: CALL_OW 257
28627: PUSH
28628: LD_INT 5
28630: PUSH
28631: LD_INT 7
28633: PUSH
28634: LD_INT 9
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: IN
28642: PUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: LD_INT 52
28650: PPUSH
28651: CALL_OW 321
28655: PUSH
28656: LD_INT 2
28658: EQUAL
28659: AND
28660: IFFALSE 28677
// bpoints := bpoints * 1.5 ;
28662: LD_ADDR_VAR 0 10
28666: PUSH
28667: LD_VAR 0 10
28671: PUSH
28672: LD_REAL  1.50000000000000E+0000
28675: MUL
28676: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28677: LD_VAR 0 1
28681: PPUSH
28682: LD_INT 66
28684: PPUSH
28685: CALL_OW 321
28689: PUSH
28690: LD_INT 2
28692: EQUAL
28693: IFFALSE 28710
// bpoints := bpoints * 1.1 ;
28695: LD_ADDR_VAR 0 10
28699: PUSH
28700: LD_VAR 0 10
28704: PUSH
28705: LD_REAL  1.10000000000000E+0000
28708: MUL
28709: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28710: LD_ADDR_VAR 0 10
28714: PUSH
28715: LD_VAR 0 10
28719: PUSH
28720: LD_VAR 0 6
28724: PPUSH
28725: LD_INT 1
28727: PPUSH
28728: CALL_OW 259
28732: PUSH
28733: LD_REAL  1.15000000000000E+0000
28736: MUL
28737: MUL
28738: ST_TO_ADDR
// end ; unit_vehicle :
28739: GO 29567
28741: LD_INT 2
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 29555
28749: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28750: LD_VAR 0 6
28754: PPUSH
28755: CALL_OW 264
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 42
28765: PUSH
28766: LD_INT 24
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: IN
28774: IFFALSE 28795
// points := [ 25 , 5 , 3 ] ;
28776: LD_ADDR_VAR 0 9
28780: PUSH
28781: LD_INT 25
28783: PUSH
28784: LD_INT 5
28786: PUSH
28787: LD_INT 3
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28795: LD_VAR 0 6
28799: PPUSH
28800: CALL_OW 264
28804: PUSH
28805: LD_INT 4
28807: PUSH
28808: LD_INT 43
28810: PUSH
28811: LD_INT 25
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: IN
28819: IFFALSE 28840
// points := [ 40 , 15 , 5 ] ;
28821: LD_ADDR_VAR 0 9
28825: PUSH
28826: LD_INT 40
28828: PUSH
28829: LD_INT 15
28831: PUSH
28832: LD_INT 5
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28840: LD_VAR 0 6
28844: PPUSH
28845: CALL_OW 264
28849: PUSH
28850: LD_INT 3
28852: PUSH
28853: LD_INT 23
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: IN
28860: IFFALSE 28881
// points := [ 7 , 25 , 8 ] ;
28862: LD_ADDR_VAR 0 9
28866: PUSH
28867: LD_INT 7
28869: PUSH
28870: LD_INT 25
28872: PUSH
28873: LD_INT 8
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28881: LD_VAR 0 6
28885: PPUSH
28886: CALL_OW 264
28890: PUSH
28891: LD_INT 5
28893: PUSH
28894: LD_INT 27
28896: PUSH
28897: LD_INT 44
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: IN
28905: IFFALSE 28926
// points := [ 14 , 50 , 16 ] ;
28907: LD_ADDR_VAR 0 9
28911: PUSH
28912: LD_INT 14
28914: PUSH
28915: LD_INT 50
28917: PUSH
28918: LD_INT 16
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28926: LD_VAR 0 6
28930: PPUSH
28931: CALL_OW 264
28935: PUSH
28936: LD_INT 6
28938: PUSH
28939: LD_INT 46
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: IN
28946: IFFALSE 28967
// points := [ 32 , 120 , 70 ] ;
28948: LD_ADDR_VAR 0 9
28952: PUSH
28953: LD_INT 32
28955: PUSH
28956: LD_INT 120
28958: PUSH
28959: LD_INT 70
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28967: LD_VAR 0 6
28971: PPUSH
28972: CALL_OW 264
28976: PUSH
28977: LD_INT 7
28979: PUSH
28980: LD_INT 28
28982: PUSH
28983: LD_INT 45
28985: PUSH
28986: LD_INT 92
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: IN
28995: IFFALSE 29016
// points := [ 35 , 20 , 45 ] ;
28997: LD_ADDR_VAR 0 9
29001: PUSH
29002: LD_INT 35
29004: PUSH
29005: LD_INT 20
29007: PUSH
29008: LD_INT 45
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29016: LD_VAR 0 6
29020: PPUSH
29021: CALL_OW 264
29025: PUSH
29026: LD_INT 47
29028: PUSH
29029: EMPTY
29030: LIST
29031: IN
29032: IFFALSE 29053
// points := [ 67 , 45 , 75 ] ;
29034: LD_ADDR_VAR 0 9
29038: PUSH
29039: LD_INT 67
29041: PUSH
29042: LD_INT 45
29044: PUSH
29045: LD_INT 75
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29053: LD_VAR 0 6
29057: PPUSH
29058: CALL_OW 264
29062: PUSH
29063: LD_INT 26
29065: PUSH
29066: EMPTY
29067: LIST
29068: IN
29069: IFFALSE 29090
// points := [ 120 , 30 , 80 ] ;
29071: LD_ADDR_VAR 0 9
29075: PUSH
29076: LD_INT 120
29078: PUSH
29079: LD_INT 30
29081: PUSH
29082: LD_INT 80
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29090: LD_VAR 0 6
29094: PPUSH
29095: CALL_OW 264
29099: PUSH
29100: LD_INT 22
29102: PUSH
29103: EMPTY
29104: LIST
29105: IN
29106: IFFALSE 29127
// points := [ 40 , 1 , 1 ] ;
29108: LD_ADDR_VAR 0 9
29112: PUSH
29113: LD_INT 40
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29127: LD_VAR 0 6
29131: PPUSH
29132: CALL_OW 264
29136: PUSH
29137: LD_INT 29
29139: PUSH
29140: EMPTY
29141: LIST
29142: IN
29143: IFFALSE 29164
// points := [ 70 , 200 , 400 ] ;
29145: LD_ADDR_VAR 0 9
29149: PUSH
29150: LD_INT 70
29152: PUSH
29153: LD_INT 200
29155: PUSH
29156: LD_INT 400
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: LIST
29163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29164: LD_VAR 0 6
29168: PPUSH
29169: CALL_OW 264
29173: PUSH
29174: LD_INT 14
29176: PUSH
29177: LD_INT 53
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: IN
29184: IFFALSE 29205
// points := [ 40 , 10 , 20 ] ;
29186: LD_ADDR_VAR 0 9
29190: PUSH
29191: LD_INT 40
29193: PUSH
29194: LD_INT 10
29196: PUSH
29197: LD_INT 20
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29205: LD_VAR 0 6
29209: PPUSH
29210: CALL_OW 264
29214: PUSH
29215: LD_INT 9
29217: PUSH
29218: EMPTY
29219: LIST
29220: IN
29221: IFFALSE 29242
// points := [ 5 , 70 , 20 ] ;
29223: LD_ADDR_VAR 0 9
29227: PUSH
29228: LD_INT 5
29230: PUSH
29231: LD_INT 70
29233: PUSH
29234: LD_INT 20
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29242: LD_VAR 0 6
29246: PPUSH
29247: CALL_OW 264
29251: PUSH
29252: LD_INT 10
29254: PUSH
29255: EMPTY
29256: LIST
29257: IN
29258: IFFALSE 29279
// points := [ 35 , 110 , 70 ] ;
29260: LD_ADDR_VAR 0 9
29264: PUSH
29265: LD_INT 35
29267: PUSH
29268: LD_INT 110
29270: PUSH
29271: LD_INT 70
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29279: LD_VAR 0 6
29283: PPUSH
29284: CALL_OW 265
29288: PUSH
29289: LD_INT 25
29291: EQUAL
29292: IFFALSE 29313
// points := [ 80 , 65 , 100 ] ;
29294: LD_ADDR_VAR 0 9
29298: PUSH
29299: LD_INT 80
29301: PUSH
29302: LD_INT 65
29304: PUSH
29305: LD_INT 100
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29313: LD_VAR 0 6
29317: PPUSH
29318: CALL_OW 263
29322: PUSH
29323: LD_INT 1
29325: EQUAL
29326: IFFALSE 29361
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29328: LD_ADDR_VAR 0 10
29332: PUSH
29333: LD_VAR 0 10
29337: PUSH
29338: LD_VAR 0 6
29342: PPUSH
29343: CALL_OW 311
29347: PPUSH
29348: LD_INT 3
29350: PPUSH
29351: CALL_OW 259
29355: PUSH
29356: LD_INT 4
29358: MUL
29359: MUL
29360: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29361: LD_VAR 0 6
29365: PPUSH
29366: CALL_OW 263
29370: PUSH
29371: LD_INT 2
29373: EQUAL
29374: IFFALSE 29425
// begin j := IsControledBy ( i ) ;
29376: LD_ADDR_VAR 0 7
29380: PUSH
29381: LD_VAR 0 6
29385: PPUSH
29386: CALL_OW 312
29390: ST_TO_ADDR
// if j then
29391: LD_VAR 0 7
29395: IFFALSE 29425
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29397: LD_ADDR_VAR 0 10
29401: PUSH
29402: LD_VAR 0 10
29406: PUSH
29407: LD_VAR 0 7
29411: PPUSH
29412: LD_INT 3
29414: PPUSH
29415: CALL_OW 259
29419: PUSH
29420: LD_INT 3
29422: MUL
29423: MUL
29424: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29425: LD_VAR 0 6
29429: PPUSH
29430: CALL_OW 264
29434: PUSH
29435: LD_INT 5
29437: PUSH
29438: LD_INT 6
29440: PUSH
29441: LD_INT 46
29443: PUSH
29444: LD_INT 44
29446: PUSH
29447: LD_INT 47
29449: PUSH
29450: LD_INT 45
29452: PUSH
29453: LD_INT 28
29455: PUSH
29456: LD_INT 7
29458: PUSH
29459: LD_INT 27
29461: PUSH
29462: LD_INT 29
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: IN
29477: PUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: LD_INT 52
29485: PPUSH
29486: CALL_OW 321
29490: PUSH
29491: LD_INT 2
29493: EQUAL
29494: AND
29495: IFFALSE 29512
// bpoints := bpoints * 1.2 ;
29497: LD_ADDR_VAR 0 10
29501: PUSH
29502: LD_VAR 0 10
29506: PUSH
29507: LD_REAL  1.20000000000000E+0000
29510: MUL
29511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29512: LD_VAR 0 6
29516: PPUSH
29517: CALL_OW 264
29521: PUSH
29522: LD_INT 6
29524: PUSH
29525: LD_INT 46
29527: PUSH
29528: LD_INT 47
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: IN
29536: IFFALSE 29553
// bpoints := bpoints * 1.2 ;
29538: LD_ADDR_VAR 0 10
29542: PUSH
29543: LD_VAR 0 10
29547: PUSH
29548: LD_REAL  1.20000000000000E+0000
29551: MUL
29552: ST_TO_ADDR
// end ; unit_building :
29553: GO 29567
29555: LD_INT 3
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29566
29563: POP
// ; end ;
29564: GO 29567
29566: POP
// for j = 1 to 3 do
29567: LD_ADDR_VAR 0 7
29571: PUSH
29572: DOUBLE
29573: LD_INT 1
29575: DEC
29576: ST_TO_ADDR
29577: LD_INT 3
29579: PUSH
29580: FOR_TO
29581: IFFALSE 29634
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29583: LD_ADDR_VAR 0 5
29587: PUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: LD_VAR 0 7
29597: PPUSH
29598: LD_VAR 0 5
29602: PUSH
29603: LD_VAR 0 7
29607: ARRAY
29608: PUSH
29609: LD_VAR 0 9
29613: PUSH
29614: LD_VAR 0 7
29618: ARRAY
29619: PUSH
29620: LD_VAR 0 10
29624: MUL
29625: PLUS
29626: PPUSH
29627: CALL_OW 1
29631: ST_TO_ADDR
29632: GO 29580
29634: POP
29635: POP
// end ;
29636: GO 28115
29638: POP
29639: POP
// result := Replace ( result , 4 , tmp ) ;
29640: LD_ADDR_VAR 0 5
29644: PUSH
29645: LD_VAR 0 5
29649: PPUSH
29650: LD_INT 4
29652: PPUSH
29653: LD_VAR 0 8
29657: PPUSH
29658: CALL_OW 1
29662: ST_TO_ADDR
// end ;
29663: LD_VAR 0 5
29667: RET
// export function DangerAtRange ( unit , range ) ; begin
29668: LD_INT 0
29670: PPUSH
// if not unit then
29671: LD_VAR 0 1
29675: NOT
29676: IFFALSE 29680
// exit ;
29678: GO 29725
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29680: LD_ADDR_VAR 0 3
29684: PUSH
29685: LD_VAR 0 1
29689: PPUSH
29690: CALL_OW 255
29694: PPUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 250
29704: PPUSH
29705: LD_VAR 0 1
29709: PPUSH
29710: CALL_OW 251
29714: PPUSH
29715: LD_VAR 0 2
29719: PPUSH
29720: CALL 27967 0 4
29724: ST_TO_ADDR
// end ;
29725: LD_VAR 0 3
29729: RET
// export function DangerInArea ( side , area ) ; begin
29730: LD_INT 0
29732: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29733: LD_ADDR_VAR 0 3
29737: PUSH
29738: LD_VAR 0 2
29742: PPUSH
29743: LD_INT 81
29745: PUSH
29746: LD_VAR 0 1
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PPUSH
29755: CALL_OW 70
29759: ST_TO_ADDR
// end ;
29760: LD_VAR 0 3
29764: RET
// export function IsExtension ( b ) ; begin
29765: LD_INT 0
29767: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29768: LD_ADDR_VAR 0 2
29772: PUSH
29773: LD_VAR 0 1
29777: PUSH
29778: LD_INT 23
29780: PUSH
29781: LD_INT 20
29783: PUSH
29784: LD_INT 22
29786: PUSH
29787: LD_INT 17
29789: PUSH
29790: LD_INT 24
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 19
29798: PUSH
29799: LD_INT 16
29801: PUSH
29802: LD_INT 25
29804: PUSH
29805: LD_INT 18
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: IN
29820: ST_TO_ADDR
// end ;
29821: LD_VAR 0 2
29825: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29826: LD_INT 0
29828: PPUSH
29829: PPUSH
29830: PPUSH
// result := [ ] ;
29831: LD_ADDR_VAR 0 4
29835: PUSH
29836: EMPTY
29837: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29838: LD_ADDR_VAR 0 5
29842: PUSH
29843: LD_VAR 0 2
29847: PPUSH
29848: LD_INT 21
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PPUSH
29858: CALL_OW 70
29862: ST_TO_ADDR
// if not tmp then
29863: LD_VAR 0 5
29867: NOT
29868: IFFALSE 29872
// exit ;
29870: GO 29936
// if checkLink then
29872: LD_VAR 0 3
29876: IFFALSE 29926
// begin for i in tmp do
29878: LD_ADDR_VAR 0 6
29882: PUSH
29883: LD_VAR 0 5
29887: PUSH
29888: FOR_IN
29889: IFFALSE 29924
// if GetBase ( i ) <> base then
29891: LD_VAR 0 6
29895: PPUSH
29896: CALL_OW 274
29900: PUSH
29901: LD_VAR 0 1
29905: NONEQUAL
29906: IFFALSE 29922
// ComLinkToBase ( base , i ) ;
29908: LD_VAR 0 1
29912: PPUSH
29913: LD_VAR 0 6
29917: PPUSH
29918: CALL_OW 169
29922: GO 29888
29924: POP
29925: POP
// end ; result := tmp ;
29926: LD_ADDR_VAR 0 4
29930: PUSH
29931: LD_VAR 0 5
29935: ST_TO_ADDR
// end ;
29936: LD_VAR 0 4
29940: RET
// export function ComComplete ( units , b ) ; var i ; begin
29941: LD_INT 0
29943: PPUSH
29944: PPUSH
// if not units then
29945: LD_VAR 0 1
29949: NOT
29950: IFFALSE 29954
// exit ;
29952: GO 30044
// for i in units do
29954: LD_ADDR_VAR 0 4
29958: PUSH
29959: LD_VAR 0 1
29963: PUSH
29964: FOR_IN
29965: IFFALSE 30042
// if BuildingStatus ( b ) = bs_build then
29967: LD_VAR 0 2
29971: PPUSH
29972: CALL_OW 461
29976: PUSH
29977: LD_INT 1
29979: EQUAL
29980: IFFALSE 30040
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29982: LD_VAR 0 4
29986: PPUSH
29987: LD_STRING h
29989: PUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: CALL_OW 250
29999: PUSH
30000: LD_VAR 0 2
30004: PPUSH
30005: CALL_OW 251
30009: PUSH
30010: LD_VAR 0 2
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: PPUSH
30036: CALL_OW 446
30040: GO 29964
30042: POP
30043: POP
// end ;
30044: LD_VAR 0 3
30048: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30049: LD_INT 0
30051: PPUSH
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30057: LD_VAR 0 1
30061: NOT
30062: PUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 263
30072: PUSH
30073: LD_INT 2
30075: NONEQUAL
30076: OR
30077: IFFALSE 30081
// exit ;
30079: GO 30397
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30081: LD_ADDR_VAR 0 6
30085: PUSH
30086: LD_INT 22
30088: PUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 255
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 30
30108: PUSH
30109: LD_INT 36
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 34
30118: PUSH
30119: LD_INT 31
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PPUSH
30135: CALL_OW 69
30139: ST_TO_ADDR
// if not tmp then
30140: LD_VAR 0 6
30144: NOT
30145: IFFALSE 30149
// exit ;
30147: GO 30397
// result := [ ] ;
30149: LD_ADDR_VAR 0 2
30153: PUSH
30154: EMPTY
30155: ST_TO_ADDR
// for i in tmp do
30156: LD_ADDR_VAR 0 3
30160: PUSH
30161: LD_VAR 0 6
30165: PUSH
30166: FOR_IN
30167: IFFALSE 30238
// begin t := UnitsInside ( i ) ;
30169: LD_ADDR_VAR 0 4
30173: PUSH
30174: LD_VAR 0 3
30178: PPUSH
30179: CALL_OW 313
30183: ST_TO_ADDR
// if t then
30184: LD_VAR 0 4
30188: IFFALSE 30236
// for j in t do
30190: LD_ADDR_VAR 0 7
30194: PUSH
30195: LD_VAR 0 4
30199: PUSH
30200: FOR_IN
30201: IFFALSE 30234
// result := Replace ( result , result + 1 , j ) ;
30203: LD_ADDR_VAR 0 2
30207: PUSH
30208: LD_VAR 0 2
30212: PPUSH
30213: LD_VAR 0 2
30217: PUSH
30218: LD_INT 1
30220: PLUS
30221: PPUSH
30222: LD_VAR 0 7
30226: PPUSH
30227: CALL_OW 1
30231: ST_TO_ADDR
30232: GO 30200
30234: POP
30235: POP
// end ;
30236: GO 30166
30238: POP
30239: POP
// if not result then
30240: LD_VAR 0 2
30244: NOT
30245: IFFALSE 30249
// exit ;
30247: GO 30397
// mech := result [ 1 ] ;
30249: LD_ADDR_VAR 0 5
30253: PUSH
30254: LD_VAR 0 2
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: ST_TO_ADDR
// if result > 1 then
30263: LD_VAR 0 2
30267: PUSH
30268: LD_INT 1
30270: GREATER
30271: IFFALSE 30383
// begin for i = 2 to result do
30273: LD_ADDR_VAR 0 3
30277: PUSH
30278: DOUBLE
30279: LD_INT 2
30281: DEC
30282: ST_TO_ADDR
30283: LD_VAR 0 2
30287: PUSH
30288: FOR_TO
30289: IFFALSE 30381
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30291: LD_ADDR_VAR 0 4
30295: PUSH
30296: LD_VAR 0 2
30300: PUSH
30301: LD_VAR 0 3
30305: ARRAY
30306: PPUSH
30307: LD_INT 3
30309: PPUSH
30310: CALL_OW 259
30314: PUSH
30315: LD_VAR 0 2
30319: PUSH
30320: LD_VAR 0 3
30324: ARRAY
30325: PPUSH
30326: CALL_OW 432
30330: MINUS
30331: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30332: LD_VAR 0 4
30336: PUSH
30337: LD_VAR 0 5
30341: PPUSH
30342: LD_INT 3
30344: PPUSH
30345: CALL_OW 259
30349: PUSH
30350: LD_VAR 0 5
30354: PPUSH
30355: CALL_OW 432
30359: MINUS
30360: GREATEREQUAL
30361: IFFALSE 30379
// mech := result [ i ] ;
30363: LD_ADDR_VAR 0 5
30367: PUSH
30368: LD_VAR 0 2
30372: PUSH
30373: LD_VAR 0 3
30377: ARRAY
30378: ST_TO_ADDR
// end ;
30379: GO 30288
30381: POP
30382: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30383: LD_VAR 0 1
30387: PPUSH
30388: LD_VAR 0 5
30392: PPUSH
30393: CALL_OW 135
// end ;
30397: LD_VAR 0 2
30401: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30402: LD_INT 0
30404: PPUSH
30405: PPUSH
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
30410: PPUSH
30411: PPUSH
30412: PPUSH
30413: PPUSH
30414: PPUSH
30415: PPUSH
30416: PPUSH
// result := [ ] ;
30417: LD_ADDR_VAR 0 7
30421: PUSH
30422: EMPTY
30423: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30424: LD_VAR 0 1
30428: PPUSH
30429: CALL_OW 266
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: IN
30444: NOT
30445: IFFALSE 30449
// exit ;
30447: GO 32083
// if name then
30449: LD_VAR 0 3
30453: IFFALSE 30469
// SetBName ( base_dep , name ) ;
30455: LD_VAR 0 1
30459: PPUSH
30460: LD_VAR 0 3
30464: PPUSH
30465: CALL_OW 500
// base := GetBase ( base_dep ) ;
30469: LD_ADDR_VAR 0 15
30473: PUSH
30474: LD_VAR 0 1
30478: PPUSH
30479: CALL_OW 274
30483: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30484: LD_ADDR_VAR 0 16
30488: PUSH
30489: LD_VAR 0 1
30493: PPUSH
30494: CALL_OW 255
30498: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30499: LD_ADDR_VAR 0 17
30503: PUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 248
30513: ST_TO_ADDR
// if sources then
30514: LD_VAR 0 5
30518: IFFALSE 30565
// for i = 1 to 3 do
30520: LD_ADDR_VAR 0 8
30524: PUSH
30525: DOUBLE
30526: LD_INT 1
30528: DEC
30529: ST_TO_ADDR
30530: LD_INT 3
30532: PUSH
30533: FOR_TO
30534: IFFALSE 30563
// AddResourceType ( base , i , sources [ i ] ) ;
30536: LD_VAR 0 15
30540: PPUSH
30541: LD_VAR 0 8
30545: PPUSH
30546: LD_VAR 0 5
30550: PUSH
30551: LD_VAR 0 8
30555: ARRAY
30556: PPUSH
30557: CALL_OW 276
30561: GO 30533
30563: POP
30564: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30565: LD_ADDR_VAR 0 18
30569: PUSH
30570: LD_VAR 0 15
30574: PPUSH
30575: LD_VAR 0 2
30579: PPUSH
30580: LD_INT 1
30582: PPUSH
30583: CALL 29826 0 3
30587: ST_TO_ADDR
// InitHc ;
30588: CALL_OW 19
// InitUc ;
30592: CALL_OW 18
// uc_side := side ;
30596: LD_ADDR_OWVAR 20
30600: PUSH
30601: LD_VAR 0 16
30605: ST_TO_ADDR
// uc_nation := nation ;
30606: LD_ADDR_OWVAR 21
30610: PUSH
30611: LD_VAR 0 17
30615: ST_TO_ADDR
// if buildings then
30616: LD_VAR 0 18
30620: IFFALSE 31942
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30622: LD_ADDR_VAR 0 19
30626: PUSH
30627: LD_VAR 0 18
30631: PPUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 30
30637: PUSH
30638: LD_INT 29
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: LD_INT 30
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 72
30664: ST_TO_ADDR
// if tmp then
30665: LD_VAR 0 19
30669: IFFALSE 30717
// for i in tmp do
30671: LD_ADDR_VAR 0 8
30675: PUSH
30676: LD_VAR 0 19
30680: PUSH
30681: FOR_IN
30682: IFFALSE 30715
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30684: LD_VAR 0 8
30688: PPUSH
30689: CALL_OW 250
30693: PPUSH
30694: LD_VAR 0 8
30698: PPUSH
30699: CALL_OW 251
30703: PPUSH
30704: LD_VAR 0 16
30708: PPUSH
30709: CALL_OW 441
30713: GO 30681
30715: POP
30716: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30717: LD_VAR 0 18
30721: PPUSH
30722: LD_INT 2
30724: PUSH
30725: LD_INT 30
30727: PUSH
30728: LD_INT 32
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 30
30737: PUSH
30738: LD_INT 33
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: PPUSH
30750: CALL_OW 72
30754: IFFALSE 30842
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30756: LD_ADDR_VAR 0 8
30760: PUSH
30761: LD_VAR 0 18
30765: PPUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 30
30771: PUSH
30772: LD_INT 32
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 30
30781: PUSH
30782: LD_INT 33
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: PPUSH
30794: CALL_OW 72
30798: PUSH
30799: FOR_IN
30800: IFFALSE 30840
// begin if not GetBWeapon ( i ) then
30802: LD_VAR 0 8
30806: PPUSH
30807: CALL_OW 269
30811: NOT
30812: IFFALSE 30838
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30814: LD_VAR 0 8
30818: PPUSH
30819: LD_VAR 0 8
30823: PPUSH
30824: LD_VAR 0 2
30828: PPUSH
30829: CALL 32088 0 2
30833: PPUSH
30834: CALL_OW 431
// end ;
30838: GO 30799
30840: POP
30841: POP
// end ; for i = 1 to personel do
30842: LD_ADDR_VAR 0 8
30846: PUSH
30847: DOUBLE
30848: LD_INT 1
30850: DEC
30851: ST_TO_ADDR
30852: LD_VAR 0 6
30856: PUSH
30857: FOR_TO
30858: IFFALSE 31922
// begin if i > 4 then
30860: LD_VAR 0 8
30864: PUSH
30865: LD_INT 4
30867: GREATER
30868: IFFALSE 30872
// break ;
30870: GO 31922
// case i of 1 :
30872: LD_VAR 0 8
30876: PUSH
30877: LD_INT 1
30879: DOUBLE
30880: EQUAL
30881: IFTRUE 30885
30883: GO 30965
30885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30886: LD_ADDR_VAR 0 12
30890: PUSH
30891: LD_VAR 0 18
30895: PPUSH
30896: LD_INT 22
30898: PUSH
30899: LD_VAR 0 16
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 58
30910: PUSH
30911: EMPTY
30912: LIST
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 30
30919: PUSH
30920: LD_INT 32
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 30
30929: PUSH
30930: LD_INT 4
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 30
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: PPUSH
30958: CALL_OW 72
30962: ST_TO_ADDR
30963: GO 31187
30965: LD_INT 2
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 31035
30973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30974: LD_ADDR_VAR 0 12
30978: PUSH
30979: LD_VAR 0 18
30983: PPUSH
30984: LD_INT 22
30986: PUSH
30987: LD_VAR 0 16
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: LD_INT 30
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 30
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PPUSH
31028: CALL_OW 72
31032: ST_TO_ADDR
31033: GO 31187
31035: LD_INT 3
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31105
31043: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31044: LD_ADDR_VAR 0 12
31048: PUSH
31049: LD_VAR 0 18
31053: PPUSH
31054: LD_INT 22
31056: PUSH
31057: LD_VAR 0 16
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 30
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PPUSH
31098: CALL_OW 72
31102: ST_TO_ADDR
31103: GO 31187
31105: LD_INT 4
31107: DOUBLE
31108: EQUAL
31109: IFTRUE 31113
31111: GO 31186
31113: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31114: LD_ADDR_VAR 0 12
31118: PUSH
31119: LD_VAR 0 18
31123: PPUSH
31124: LD_INT 22
31126: PUSH
31127: LD_VAR 0 16
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 30
31141: PUSH
31142: LD_INT 6
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_INT 7
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 8
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 72
31183: ST_TO_ADDR
31184: GO 31187
31186: POP
// if i = 1 then
31187: LD_VAR 0 8
31191: PUSH
31192: LD_INT 1
31194: EQUAL
31195: IFFALSE 31306
// begin tmp := [ ] ;
31197: LD_ADDR_VAR 0 19
31201: PUSH
31202: EMPTY
31203: ST_TO_ADDR
// for j in f do
31204: LD_ADDR_VAR 0 9
31208: PUSH
31209: LD_VAR 0 12
31213: PUSH
31214: FOR_IN
31215: IFFALSE 31288
// if GetBType ( j ) = b_bunker then
31217: LD_VAR 0 9
31221: PPUSH
31222: CALL_OW 266
31226: PUSH
31227: LD_INT 32
31229: EQUAL
31230: IFFALSE 31257
// tmp := Insert ( tmp , 1 , j ) else
31232: LD_ADDR_VAR 0 19
31236: PUSH
31237: LD_VAR 0 19
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: LD_VAR 0 9
31249: PPUSH
31250: CALL_OW 2
31254: ST_TO_ADDR
31255: GO 31286
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31257: LD_ADDR_VAR 0 19
31261: PUSH
31262: LD_VAR 0 19
31266: PPUSH
31267: LD_VAR 0 19
31271: PUSH
31272: LD_INT 1
31274: PLUS
31275: PPUSH
31276: LD_VAR 0 9
31280: PPUSH
31281: CALL_OW 2
31285: ST_TO_ADDR
31286: GO 31214
31288: POP
31289: POP
// if tmp then
31290: LD_VAR 0 19
31294: IFFALSE 31306
// f := tmp ;
31296: LD_ADDR_VAR 0 12
31300: PUSH
31301: LD_VAR 0 19
31305: ST_TO_ADDR
// end ; x := personel [ i ] ;
31306: LD_ADDR_VAR 0 13
31310: PUSH
31311: LD_VAR 0 6
31315: PUSH
31316: LD_VAR 0 8
31320: ARRAY
31321: ST_TO_ADDR
// if x = - 1 then
31322: LD_VAR 0 13
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: EQUAL
31331: IFFALSE 31540
// begin for j in f do
31333: LD_ADDR_VAR 0 9
31337: PUSH
31338: LD_VAR 0 12
31342: PUSH
31343: FOR_IN
31344: IFFALSE 31536
// repeat InitHc ;
31346: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31350: LD_VAR 0 9
31354: PPUSH
31355: CALL_OW 266
31359: PUSH
31360: LD_INT 5
31362: EQUAL
31363: IFFALSE 31433
// begin if UnitsInside ( j ) < 3 then
31365: LD_VAR 0 9
31369: PPUSH
31370: CALL_OW 313
31374: PUSH
31375: LD_INT 3
31377: LESS
31378: IFFALSE 31414
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31380: LD_INT 0
31382: PPUSH
31383: LD_INT 5
31385: PUSH
31386: LD_INT 8
31388: PUSH
31389: LD_INT 9
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: PUSH
31397: LD_VAR 0 17
31401: ARRAY
31402: PPUSH
31403: LD_VAR 0 4
31407: PPUSH
31408: CALL_OW 380
31412: GO 31431
// PrepareHuman ( false , i , skill ) ;
31414: LD_INT 0
31416: PPUSH
31417: LD_VAR 0 8
31421: PPUSH
31422: LD_VAR 0 4
31426: PPUSH
31427: CALL_OW 380
// end else
31431: GO 31450
// PrepareHuman ( false , i , skill ) ;
31433: LD_INT 0
31435: PPUSH
31436: LD_VAR 0 8
31440: PPUSH
31441: LD_VAR 0 4
31445: PPUSH
31446: CALL_OW 380
// un := CreateHuman ;
31450: LD_ADDR_VAR 0 14
31454: PUSH
31455: CALL_OW 44
31459: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31460: LD_ADDR_VAR 0 7
31464: PUSH
31465: LD_VAR 0 7
31469: PPUSH
31470: LD_INT 1
31472: PPUSH
31473: LD_VAR 0 14
31477: PPUSH
31478: CALL_OW 2
31482: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31483: LD_VAR 0 14
31487: PPUSH
31488: LD_VAR 0 9
31492: PPUSH
31493: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31497: LD_VAR 0 9
31501: PPUSH
31502: CALL_OW 313
31506: PUSH
31507: LD_INT 6
31509: EQUAL
31510: PUSH
31511: LD_VAR 0 9
31515: PPUSH
31516: CALL_OW 266
31520: PUSH
31521: LD_INT 32
31523: PUSH
31524: LD_INT 31
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: IN
31531: OR
31532: IFFALSE 31346
31534: GO 31343
31536: POP
31537: POP
// end else
31538: GO 31920
// for j = 1 to x do
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: DOUBLE
31546: LD_INT 1
31548: DEC
31549: ST_TO_ADDR
31550: LD_VAR 0 13
31554: PUSH
31555: FOR_TO
31556: IFFALSE 31918
// begin InitHc ;
31558: CALL_OW 19
// if not f then
31562: LD_VAR 0 12
31566: NOT
31567: IFFALSE 31656
// begin PrepareHuman ( false , i , skill ) ;
31569: LD_INT 0
31571: PPUSH
31572: LD_VAR 0 8
31576: PPUSH
31577: LD_VAR 0 4
31581: PPUSH
31582: CALL_OW 380
// un := CreateHuman ;
31586: LD_ADDR_VAR 0 14
31590: PUSH
31591: CALL_OW 44
31595: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31596: LD_ADDR_VAR 0 7
31600: PUSH
31601: LD_VAR 0 7
31605: PPUSH
31606: LD_INT 1
31608: PPUSH
31609: LD_VAR 0 14
31613: PPUSH
31614: CALL_OW 2
31618: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31619: LD_VAR 0 14
31623: PPUSH
31624: LD_VAR 0 1
31628: PPUSH
31629: CALL_OW 250
31633: PPUSH
31634: LD_VAR 0 1
31638: PPUSH
31639: CALL_OW 251
31643: PPUSH
31644: LD_INT 10
31646: PPUSH
31647: LD_INT 0
31649: PPUSH
31650: CALL_OW 50
// continue ;
31654: GO 31555
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31656: LD_VAR 0 12
31660: PUSH
31661: LD_INT 1
31663: ARRAY
31664: PPUSH
31665: CALL_OW 313
31669: PUSH
31670: LD_VAR 0 12
31674: PUSH
31675: LD_INT 1
31677: ARRAY
31678: PPUSH
31679: CALL_OW 266
31683: PUSH
31684: LD_INT 32
31686: PUSH
31687: LD_INT 31
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: IN
31694: AND
31695: PUSH
31696: LD_VAR 0 12
31700: PUSH
31701: LD_INT 1
31703: ARRAY
31704: PPUSH
31705: CALL_OW 313
31709: PUSH
31710: LD_INT 6
31712: EQUAL
31713: OR
31714: IFFALSE 31734
// f := Delete ( f , 1 ) ;
31716: LD_ADDR_VAR 0 12
31720: PUSH
31721: LD_VAR 0 12
31725: PPUSH
31726: LD_INT 1
31728: PPUSH
31729: CALL_OW 3
31733: ST_TO_ADDR
// if not f then
31734: LD_VAR 0 12
31738: NOT
31739: IFFALSE 31757
// begin x := x + 2 ;
31741: LD_ADDR_VAR 0 13
31745: PUSH
31746: LD_VAR 0 13
31750: PUSH
31751: LD_INT 2
31753: PLUS
31754: ST_TO_ADDR
// continue ;
31755: GO 31555
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31757: LD_VAR 0 12
31761: PUSH
31762: LD_INT 1
31764: ARRAY
31765: PPUSH
31766: CALL_OW 266
31770: PUSH
31771: LD_INT 5
31773: EQUAL
31774: IFFALSE 31848
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31776: LD_VAR 0 12
31780: PUSH
31781: LD_INT 1
31783: ARRAY
31784: PPUSH
31785: CALL_OW 313
31789: PUSH
31790: LD_INT 3
31792: LESS
31793: IFFALSE 31829
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31795: LD_INT 0
31797: PPUSH
31798: LD_INT 5
31800: PUSH
31801: LD_INT 8
31803: PUSH
31804: LD_INT 9
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: PUSH
31812: LD_VAR 0 17
31816: ARRAY
31817: PPUSH
31818: LD_VAR 0 4
31822: PPUSH
31823: CALL_OW 380
31827: GO 31846
// PrepareHuman ( false , i , skill ) ;
31829: LD_INT 0
31831: PPUSH
31832: LD_VAR 0 8
31836: PPUSH
31837: LD_VAR 0 4
31841: PPUSH
31842: CALL_OW 380
// end else
31846: GO 31865
// PrepareHuman ( false , i , skill ) ;
31848: LD_INT 0
31850: PPUSH
31851: LD_VAR 0 8
31855: PPUSH
31856: LD_VAR 0 4
31860: PPUSH
31861: CALL_OW 380
// un := CreateHuman ;
31865: LD_ADDR_VAR 0 14
31869: PUSH
31870: CALL_OW 44
31874: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31875: LD_ADDR_VAR 0 7
31879: PUSH
31880: LD_VAR 0 7
31884: PPUSH
31885: LD_INT 1
31887: PPUSH
31888: LD_VAR 0 14
31892: PPUSH
31893: CALL_OW 2
31897: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31898: LD_VAR 0 14
31902: PPUSH
31903: LD_VAR 0 12
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: PPUSH
31912: CALL_OW 52
// end ;
31916: GO 31555
31918: POP
31919: POP
// end ;
31920: GO 30857
31922: POP
31923: POP
// result := result ^ buildings ;
31924: LD_ADDR_VAR 0 7
31928: PUSH
31929: LD_VAR 0 7
31933: PUSH
31934: LD_VAR 0 18
31938: ADD
31939: ST_TO_ADDR
// end else
31940: GO 32083
// begin for i = 1 to personel do
31942: LD_ADDR_VAR 0 8
31946: PUSH
31947: DOUBLE
31948: LD_INT 1
31950: DEC
31951: ST_TO_ADDR
31952: LD_VAR 0 6
31956: PUSH
31957: FOR_TO
31958: IFFALSE 32081
// begin if i > 4 then
31960: LD_VAR 0 8
31964: PUSH
31965: LD_INT 4
31967: GREATER
31968: IFFALSE 31972
// break ;
31970: GO 32081
// x := personel [ i ] ;
31972: LD_ADDR_VAR 0 13
31976: PUSH
31977: LD_VAR 0 6
31981: PUSH
31982: LD_VAR 0 8
31986: ARRAY
31987: ST_TO_ADDR
// if x = - 1 then
31988: LD_VAR 0 13
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: EQUAL
31997: IFFALSE 32001
// continue ;
31999: GO 31957
// PrepareHuman ( false , i , skill ) ;
32001: LD_INT 0
32003: PPUSH
32004: LD_VAR 0 8
32008: PPUSH
32009: LD_VAR 0 4
32013: PPUSH
32014: CALL_OW 380
// un := CreateHuman ;
32018: LD_ADDR_VAR 0 14
32022: PUSH
32023: CALL_OW 44
32027: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32028: LD_VAR 0 14
32032: PPUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 250
32042: PPUSH
32043: LD_VAR 0 1
32047: PPUSH
32048: CALL_OW 251
32052: PPUSH
32053: LD_INT 10
32055: PPUSH
32056: LD_INT 0
32058: PPUSH
32059: CALL_OW 50
// result := result ^ un ;
32063: LD_ADDR_VAR 0 7
32067: PUSH
32068: LD_VAR 0 7
32072: PUSH
32073: LD_VAR 0 14
32077: ADD
32078: ST_TO_ADDR
// end ;
32079: GO 31957
32081: POP
32082: POP
// end ; end ;
32083: LD_VAR 0 7
32087: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32088: LD_INT 0
32090: PPUSH
32091: PPUSH
32092: PPUSH
32093: PPUSH
32094: PPUSH
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
// result := false ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_INT 0
32113: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32114: LD_VAR 0 1
32118: NOT
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL_OW 266
32129: PUSH
32130: LD_INT 32
32132: PUSH
32133: LD_INT 33
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: IN
32140: NOT
32141: OR
32142: IFFALSE 32146
// exit ;
32144: GO 33255
// nat := GetNation ( tower ) ;
32146: LD_ADDR_VAR 0 12
32150: PUSH
32151: LD_VAR 0 1
32155: PPUSH
32156: CALL_OW 248
32160: ST_TO_ADDR
// side := GetSide ( tower ) ;
32161: LD_ADDR_VAR 0 16
32165: PUSH
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 255
32175: ST_TO_ADDR
// x := GetX ( tower ) ;
32176: LD_ADDR_VAR 0 10
32180: PUSH
32181: LD_VAR 0 1
32185: PPUSH
32186: CALL_OW 250
32190: ST_TO_ADDR
// y := GetY ( tower ) ;
32191: LD_ADDR_VAR 0 11
32195: PUSH
32196: LD_VAR 0 1
32200: PPUSH
32201: CALL_OW 251
32205: ST_TO_ADDR
// if not x or not y then
32206: LD_VAR 0 10
32210: NOT
32211: PUSH
32212: LD_VAR 0 11
32216: NOT
32217: OR
32218: IFFALSE 32222
// exit ;
32220: GO 33255
// weapon := 0 ;
32222: LD_ADDR_VAR 0 18
32226: PUSH
32227: LD_INT 0
32229: ST_TO_ADDR
// fac_list := [ ] ;
32230: LD_ADDR_VAR 0 17
32234: PUSH
32235: EMPTY
32236: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32237: LD_ADDR_VAR 0 6
32241: PUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: CALL_OW 274
32251: PPUSH
32252: LD_VAR 0 2
32256: PPUSH
32257: LD_INT 0
32259: PPUSH
32260: CALL 29826 0 3
32264: PPUSH
32265: LD_INT 30
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PPUSH
32275: CALL_OW 72
32279: ST_TO_ADDR
// if not factories then
32280: LD_VAR 0 6
32284: NOT
32285: IFFALSE 32289
// exit ;
32287: GO 33255
// for i in factories do
32289: LD_ADDR_VAR 0 8
32293: PUSH
32294: LD_VAR 0 6
32298: PUSH
32299: FOR_IN
32300: IFFALSE 32325
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32302: LD_ADDR_VAR 0 17
32306: PUSH
32307: LD_VAR 0 17
32311: PUSH
32312: LD_VAR 0 8
32316: PPUSH
32317: CALL_OW 478
32321: UNION
32322: ST_TO_ADDR
32323: GO 32299
32325: POP
32326: POP
// if not fac_list then
32327: LD_VAR 0 17
32331: NOT
32332: IFFALSE 32336
// exit ;
32334: GO 33255
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32336: LD_ADDR_VAR 0 5
32340: PUSH
32341: LD_INT 4
32343: PUSH
32344: LD_INT 5
32346: PUSH
32347: LD_INT 9
32349: PUSH
32350: LD_INT 10
32352: PUSH
32353: LD_INT 6
32355: PUSH
32356: LD_INT 7
32358: PUSH
32359: LD_INT 11
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 27
32373: PUSH
32374: LD_INT 28
32376: PUSH
32377: LD_INT 26
32379: PUSH
32380: LD_INT 30
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 43
32391: PUSH
32392: LD_INT 44
32394: PUSH
32395: LD_INT 46
32397: PUSH
32398: LD_INT 45
32400: PUSH
32401: LD_INT 47
32403: PUSH
32404: LD_INT 49
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: PUSH
32420: LD_VAR 0 12
32424: ARRAY
32425: ST_TO_ADDR
// list := list isect fac_list ;
32426: LD_ADDR_VAR 0 5
32430: PUSH
32431: LD_VAR 0 5
32435: PUSH
32436: LD_VAR 0 17
32440: ISECT
32441: ST_TO_ADDR
// if not list then
32442: LD_VAR 0 5
32446: NOT
32447: IFFALSE 32451
// exit ;
32449: GO 33255
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32451: LD_VAR 0 12
32455: PUSH
32456: LD_INT 3
32458: EQUAL
32459: PUSH
32460: LD_INT 49
32462: PUSH
32463: LD_VAR 0 5
32467: IN
32468: AND
32469: PUSH
32470: LD_INT 31
32472: PPUSH
32473: LD_VAR 0 16
32477: PPUSH
32478: CALL_OW 321
32482: PUSH
32483: LD_INT 2
32485: EQUAL
32486: AND
32487: IFFALSE 32547
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32489: LD_INT 22
32491: PUSH
32492: LD_VAR 0 16
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 35
32503: PUSH
32504: LD_INT 49
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 91
32513: PUSH
32514: LD_VAR 0 1
32518: PUSH
32519: LD_INT 10
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: PPUSH
32532: CALL_OW 69
32536: NOT
32537: IFFALSE 32547
// weapon := ru_time_lapser ;
32539: LD_ADDR_VAR 0 18
32543: PUSH
32544: LD_INT 49
32546: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32547: LD_VAR 0 12
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: IN
32562: PUSH
32563: LD_INT 11
32565: PUSH
32566: LD_VAR 0 5
32570: IN
32571: PUSH
32572: LD_INT 30
32574: PUSH
32575: LD_VAR 0 5
32579: IN
32580: OR
32581: AND
32582: PUSH
32583: LD_INT 6
32585: PPUSH
32586: LD_VAR 0 16
32590: PPUSH
32591: CALL_OW 321
32595: PUSH
32596: LD_INT 2
32598: EQUAL
32599: AND
32600: IFFALSE 32765
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32602: LD_INT 22
32604: PUSH
32605: LD_VAR 0 16
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: LD_INT 35
32619: PUSH
32620: LD_INT 11
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 35
32629: PUSH
32630: LD_INT 30
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 91
32644: PUSH
32645: LD_VAR 0 1
32649: PUSH
32650: LD_INT 18
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: PPUSH
32663: CALL_OW 69
32667: NOT
32668: PUSH
32669: LD_INT 22
32671: PUSH
32672: LD_VAR 0 16
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 30
32686: PUSH
32687: LD_INT 32
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 30
32696: PUSH
32697: LD_INT 33
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 91
32711: PUSH
32712: LD_VAR 0 1
32716: PUSH
32717: LD_INT 12
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: PPUSH
32733: CALL_OW 69
32737: PUSH
32738: LD_INT 2
32740: GREATER
32741: AND
32742: IFFALSE 32765
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32744: LD_ADDR_VAR 0 18
32748: PUSH
32749: LD_INT 11
32751: PUSH
32752: LD_INT 30
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_VAR 0 12
32763: ARRAY
32764: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32765: LD_VAR 0 18
32769: NOT
32770: PUSH
32771: LD_INT 40
32773: PPUSH
32774: LD_VAR 0 16
32778: PPUSH
32779: CALL_OW 321
32783: PUSH
32784: LD_INT 2
32786: EQUAL
32787: AND
32788: PUSH
32789: LD_INT 7
32791: PUSH
32792: LD_VAR 0 5
32796: IN
32797: PUSH
32798: LD_INT 28
32800: PUSH
32801: LD_VAR 0 5
32805: IN
32806: OR
32807: PUSH
32808: LD_INT 45
32810: PUSH
32811: LD_VAR 0 5
32815: IN
32816: OR
32817: AND
32818: IFFALSE 33072
// begin hex := GetHexInfo ( x , y ) ;
32820: LD_ADDR_VAR 0 4
32824: PUSH
32825: LD_VAR 0 10
32829: PPUSH
32830: LD_VAR 0 11
32834: PPUSH
32835: CALL_OW 546
32839: ST_TO_ADDR
// if hex [ 1 ] then
32840: LD_VAR 0 4
32844: PUSH
32845: LD_INT 1
32847: ARRAY
32848: IFFALSE 32852
// exit ;
32850: GO 33255
// height := hex [ 2 ] ;
32852: LD_ADDR_VAR 0 15
32856: PUSH
32857: LD_VAR 0 4
32861: PUSH
32862: LD_INT 2
32864: ARRAY
32865: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32866: LD_ADDR_VAR 0 14
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 3
32879: PUSH
32880: LD_INT 5
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
// for i in tmp do
32889: LD_ADDR_VAR 0 8
32893: PUSH
32894: LD_VAR 0 14
32898: PUSH
32899: FOR_IN
32900: IFFALSE 33070
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32902: LD_ADDR_VAR 0 9
32906: PUSH
32907: LD_VAR 0 10
32911: PPUSH
32912: LD_VAR 0 8
32916: PPUSH
32917: LD_INT 5
32919: PPUSH
32920: CALL_OW 272
32924: PUSH
32925: LD_VAR 0 11
32929: PPUSH
32930: LD_VAR 0 8
32934: PPUSH
32935: LD_INT 5
32937: PPUSH
32938: CALL_OW 273
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32947: LD_VAR 0 9
32951: PUSH
32952: LD_INT 1
32954: ARRAY
32955: PPUSH
32956: LD_VAR 0 9
32960: PUSH
32961: LD_INT 2
32963: ARRAY
32964: PPUSH
32965: CALL_OW 488
32969: IFFALSE 33068
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32971: LD_ADDR_VAR 0 4
32975: PUSH
32976: LD_VAR 0 9
32980: PUSH
32981: LD_INT 1
32983: ARRAY
32984: PPUSH
32985: LD_VAR 0 9
32989: PUSH
32990: LD_INT 2
32992: ARRAY
32993: PPUSH
32994: CALL_OW 546
32998: ST_TO_ADDR
// if hex [ 1 ] then
32999: LD_VAR 0 4
33003: PUSH
33004: LD_INT 1
33006: ARRAY
33007: IFFALSE 33011
// continue ;
33009: GO 32899
// h := hex [ 2 ] ;
33011: LD_ADDR_VAR 0 13
33015: PUSH
33016: LD_VAR 0 4
33020: PUSH
33021: LD_INT 2
33023: ARRAY
33024: ST_TO_ADDR
// if h + 7 < height then
33025: LD_VAR 0 13
33029: PUSH
33030: LD_INT 7
33032: PLUS
33033: PUSH
33034: LD_VAR 0 15
33038: LESS
33039: IFFALSE 33068
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33041: LD_ADDR_VAR 0 18
33045: PUSH
33046: LD_INT 7
33048: PUSH
33049: LD_INT 28
33051: PUSH
33052: LD_INT 45
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: PUSH
33060: LD_VAR 0 12
33064: ARRAY
33065: ST_TO_ADDR
// break ;
33066: GO 33070
// end ; end ; end ;
33068: GO 32899
33070: POP
33071: POP
// end ; if not weapon then
33072: LD_VAR 0 18
33076: NOT
33077: IFFALSE 33137
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33079: LD_ADDR_VAR 0 5
33083: PUSH
33084: LD_VAR 0 5
33088: PUSH
33089: LD_INT 11
33091: PUSH
33092: LD_INT 30
33094: PUSH
33095: LD_INT 49
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: DIFF
33103: ST_TO_ADDR
// if not list then
33104: LD_VAR 0 5
33108: NOT
33109: IFFALSE 33113
// exit ;
33111: GO 33255
// weapon := list [ rand ( 1 , list ) ] ;
33113: LD_ADDR_VAR 0 18
33117: PUSH
33118: LD_VAR 0 5
33122: PUSH
33123: LD_INT 1
33125: PPUSH
33126: LD_VAR 0 5
33130: PPUSH
33131: CALL_OW 12
33135: ARRAY
33136: ST_TO_ADDR
// end ; if weapon then
33137: LD_VAR 0 18
33141: IFFALSE 33255
// begin tmp := CostOfWeapon ( weapon ) ;
33143: LD_ADDR_VAR 0 14
33147: PUSH
33148: LD_VAR 0 18
33152: PPUSH
33153: CALL_OW 451
33157: ST_TO_ADDR
// j := GetBase ( tower ) ;
33158: LD_ADDR_VAR 0 9
33162: PUSH
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL_OW 274
33172: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33173: LD_VAR 0 9
33177: PPUSH
33178: LD_INT 1
33180: PPUSH
33181: CALL_OW 275
33185: PUSH
33186: LD_VAR 0 14
33190: PUSH
33191: LD_INT 1
33193: ARRAY
33194: GREATEREQUAL
33195: PUSH
33196: LD_VAR 0 9
33200: PPUSH
33201: LD_INT 2
33203: PPUSH
33204: CALL_OW 275
33208: PUSH
33209: LD_VAR 0 14
33213: PUSH
33214: LD_INT 2
33216: ARRAY
33217: GREATEREQUAL
33218: AND
33219: PUSH
33220: LD_VAR 0 9
33224: PPUSH
33225: LD_INT 3
33227: PPUSH
33228: CALL_OW 275
33232: PUSH
33233: LD_VAR 0 14
33237: PUSH
33238: LD_INT 3
33240: ARRAY
33241: GREATEREQUAL
33242: AND
33243: IFFALSE 33255
// result := weapon ;
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: LD_VAR 0 18
33254: ST_TO_ADDR
// end ; end ;
33255: LD_VAR 0 3
33259: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33260: LD_INT 0
33262: PPUSH
33263: PPUSH
// result := true ;
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_INT 1
33271: ST_TO_ADDR
// if array1 = array2 then
33272: LD_VAR 0 1
33276: PUSH
33277: LD_VAR 0 2
33281: EQUAL
33282: IFFALSE 33342
// begin for i = 1 to array1 do
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: DOUBLE
33290: LD_INT 1
33292: DEC
33293: ST_TO_ADDR
33294: LD_VAR 0 1
33298: PUSH
33299: FOR_TO
33300: IFFALSE 33338
// if array1 [ i ] <> array2 [ i ] then
33302: LD_VAR 0 1
33306: PUSH
33307: LD_VAR 0 4
33311: ARRAY
33312: PUSH
33313: LD_VAR 0 2
33317: PUSH
33318: LD_VAR 0 4
33322: ARRAY
33323: NONEQUAL
33324: IFFALSE 33336
// begin result := false ;
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_INT 0
33333: ST_TO_ADDR
// break ;
33334: GO 33338
// end ;
33336: GO 33299
33338: POP
33339: POP
// end else
33340: GO 33350
// result := false ;
33342: LD_ADDR_VAR 0 3
33346: PUSH
33347: LD_INT 0
33349: ST_TO_ADDR
// end ;
33350: LD_VAR 0 3
33354: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33355: LD_INT 0
33357: PPUSH
33358: PPUSH
// if not array1 or not array2 then
33359: LD_VAR 0 1
33363: NOT
33364: PUSH
33365: LD_VAR 0 2
33369: NOT
33370: OR
33371: IFFALSE 33375
// exit ;
33373: GO 33439
// result := true ;
33375: LD_ADDR_VAR 0 3
33379: PUSH
33380: LD_INT 1
33382: ST_TO_ADDR
// for i = 1 to array1 do
33383: LD_ADDR_VAR 0 4
33387: PUSH
33388: DOUBLE
33389: LD_INT 1
33391: DEC
33392: ST_TO_ADDR
33393: LD_VAR 0 1
33397: PUSH
33398: FOR_TO
33399: IFFALSE 33437
// if array1 [ i ] <> array2 [ i ] then
33401: LD_VAR 0 1
33405: PUSH
33406: LD_VAR 0 4
33410: ARRAY
33411: PUSH
33412: LD_VAR 0 2
33416: PUSH
33417: LD_VAR 0 4
33421: ARRAY
33422: NONEQUAL
33423: IFFALSE 33435
// begin result := false ;
33425: LD_ADDR_VAR 0 3
33429: PUSH
33430: LD_INT 0
33432: ST_TO_ADDR
// break ;
33433: GO 33437
// end ;
33435: GO 33398
33437: POP
33438: POP
// end ;
33439: LD_VAR 0 3
33443: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33444: LD_INT 0
33446: PPUSH
33447: PPUSH
33448: PPUSH
// pom := GetBase ( fac ) ;
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 274
33463: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33464: LD_ADDR_VAR 0 4
33468: PUSH
33469: LD_VAR 0 2
33473: PUSH
33474: LD_INT 1
33476: ARRAY
33477: PPUSH
33478: LD_VAR 0 2
33482: PUSH
33483: LD_INT 2
33485: ARRAY
33486: PPUSH
33487: LD_VAR 0 2
33491: PUSH
33492: LD_INT 3
33494: ARRAY
33495: PPUSH
33496: LD_VAR 0 2
33500: PUSH
33501: LD_INT 4
33503: ARRAY
33504: PPUSH
33505: CALL_OW 449
33509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_VAR 0 5
33519: PPUSH
33520: LD_INT 1
33522: PPUSH
33523: CALL_OW 275
33527: PUSH
33528: LD_VAR 0 4
33532: PUSH
33533: LD_INT 1
33535: ARRAY
33536: GREATEREQUAL
33537: PUSH
33538: LD_VAR 0 5
33542: PPUSH
33543: LD_INT 2
33545: PPUSH
33546: CALL_OW 275
33550: PUSH
33551: LD_VAR 0 4
33555: PUSH
33556: LD_INT 2
33558: ARRAY
33559: GREATEREQUAL
33560: AND
33561: PUSH
33562: LD_VAR 0 5
33566: PPUSH
33567: LD_INT 3
33569: PPUSH
33570: CALL_OW 275
33574: PUSH
33575: LD_VAR 0 4
33579: PUSH
33580: LD_INT 3
33582: ARRAY
33583: GREATEREQUAL
33584: AND
33585: ST_TO_ADDR
// end ;
33586: LD_VAR 0 3
33590: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33591: LD_INT 0
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
// pom := GetBase ( building ) ;
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_VAR 0 1
33606: PPUSH
33607: CALL_OW 274
33611: ST_TO_ADDR
// if not pom then
33612: LD_VAR 0 3
33616: NOT
33617: IFFALSE 33621
// exit ;
33619: GO 33791
// btype := GetBType ( building ) ;
33621: LD_ADDR_VAR 0 5
33625: PUSH
33626: LD_VAR 0 1
33630: PPUSH
33631: CALL_OW 266
33635: ST_TO_ADDR
// if btype = b_armoury then
33636: LD_VAR 0 5
33640: PUSH
33641: LD_INT 4
33643: EQUAL
33644: IFFALSE 33654
// btype := b_barracks ;
33646: LD_ADDR_VAR 0 5
33650: PUSH
33651: LD_INT 5
33653: ST_TO_ADDR
// if btype = b_depot then
33654: LD_VAR 0 5
33658: PUSH
33659: LD_INT 0
33661: EQUAL
33662: IFFALSE 33672
// btype := b_warehouse ;
33664: LD_ADDR_VAR 0 5
33668: PUSH
33669: LD_INT 1
33671: ST_TO_ADDR
// if btype = b_workshop then
33672: LD_VAR 0 5
33676: PUSH
33677: LD_INT 2
33679: EQUAL
33680: IFFALSE 33690
// btype := b_factory ;
33682: LD_ADDR_VAR 0 5
33686: PUSH
33687: LD_INT 3
33689: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33690: LD_ADDR_VAR 0 4
33694: PUSH
33695: LD_VAR 0 5
33699: PPUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 248
33709: PPUSH
33710: CALL_OW 450
33714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33715: LD_ADDR_VAR 0 2
33719: PUSH
33720: LD_VAR 0 3
33724: PPUSH
33725: LD_INT 1
33727: PPUSH
33728: CALL_OW 275
33732: PUSH
33733: LD_VAR 0 4
33737: PUSH
33738: LD_INT 1
33740: ARRAY
33741: GREATEREQUAL
33742: PUSH
33743: LD_VAR 0 3
33747: PPUSH
33748: LD_INT 2
33750: PPUSH
33751: CALL_OW 275
33755: PUSH
33756: LD_VAR 0 4
33760: PUSH
33761: LD_INT 2
33763: ARRAY
33764: GREATEREQUAL
33765: AND
33766: PUSH
33767: LD_VAR 0 3
33771: PPUSH
33772: LD_INT 3
33774: PPUSH
33775: CALL_OW 275
33779: PUSH
33780: LD_VAR 0 4
33784: PUSH
33785: LD_INT 3
33787: ARRAY
33788: GREATEREQUAL
33789: AND
33790: ST_TO_ADDR
// end ;
33791: LD_VAR 0 2
33795: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
33800: PPUSH
// pom := GetBase ( building ) ;
33801: LD_ADDR_VAR 0 4
33805: PUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 274
33815: ST_TO_ADDR
// if not pom then
33816: LD_VAR 0 4
33820: NOT
33821: IFFALSE 33825
// exit ;
33823: GO 33926
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33825: LD_ADDR_VAR 0 5
33829: PUSH
33830: LD_VAR 0 2
33834: PPUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 248
33844: PPUSH
33845: CALL_OW 450
33849: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_VAR 0 4
33859: PPUSH
33860: LD_INT 1
33862: PPUSH
33863: CALL_OW 275
33867: PUSH
33868: LD_VAR 0 5
33872: PUSH
33873: LD_INT 1
33875: ARRAY
33876: GREATEREQUAL
33877: PUSH
33878: LD_VAR 0 4
33882: PPUSH
33883: LD_INT 2
33885: PPUSH
33886: CALL_OW 275
33890: PUSH
33891: LD_VAR 0 5
33895: PUSH
33896: LD_INT 2
33898: ARRAY
33899: GREATEREQUAL
33900: AND
33901: PUSH
33902: LD_VAR 0 4
33906: PPUSH
33907: LD_INT 3
33909: PPUSH
33910: CALL_OW 275
33914: PUSH
33915: LD_VAR 0 5
33919: PUSH
33920: LD_INT 3
33922: ARRAY
33923: GREATEREQUAL
33924: AND
33925: ST_TO_ADDR
// end ;
33926: LD_VAR 0 3
33930: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33931: LD_INT 0
33933: PPUSH
33934: PPUSH
33935: PPUSH
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
// result := false ;
33944: LD_ADDR_VAR 0 8
33948: PUSH
33949: LD_INT 0
33951: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33952: LD_VAR 0 5
33956: NOT
33957: PUSH
33958: LD_VAR 0 1
33962: NOT
33963: OR
33964: PUSH
33965: LD_VAR 0 2
33969: NOT
33970: OR
33971: PUSH
33972: LD_VAR 0 3
33976: NOT
33977: OR
33978: IFFALSE 33982
// exit ;
33980: GO 34796
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33982: LD_ADDR_VAR 0 14
33986: PUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: LD_VAR 0 2
33996: PPUSH
33997: LD_VAR 0 3
34001: PPUSH
34002: LD_VAR 0 4
34006: PPUSH
34007: LD_VAR 0 5
34011: PUSH
34012: LD_INT 1
34014: ARRAY
34015: PPUSH
34016: CALL_OW 248
34020: PPUSH
34021: LD_INT 0
34023: PPUSH
34024: CALL 36049 0 6
34028: ST_TO_ADDR
// if not hexes then
34029: LD_VAR 0 14
34033: NOT
34034: IFFALSE 34038
// exit ;
34036: GO 34796
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34038: LD_ADDR_VAR 0 17
34042: PUSH
34043: LD_VAR 0 5
34047: PPUSH
34048: LD_INT 22
34050: PUSH
34051: LD_VAR 0 13
34055: PPUSH
34056: CALL_OW 255
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 30
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 30
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PPUSH
34097: CALL_OW 72
34101: ST_TO_ADDR
// for i = 1 to hexes do
34102: LD_ADDR_VAR 0 9
34106: PUSH
34107: DOUBLE
34108: LD_INT 1
34110: DEC
34111: ST_TO_ADDR
34112: LD_VAR 0 14
34116: PUSH
34117: FOR_TO
34118: IFFALSE 34794
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34120: LD_ADDR_VAR 0 13
34124: PUSH
34125: LD_VAR 0 14
34129: PUSH
34130: LD_VAR 0 9
34134: ARRAY
34135: PUSH
34136: LD_INT 1
34138: ARRAY
34139: PPUSH
34140: LD_VAR 0 14
34144: PUSH
34145: LD_VAR 0 9
34149: ARRAY
34150: PUSH
34151: LD_INT 2
34153: ARRAY
34154: PPUSH
34155: CALL_OW 428
34159: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34160: LD_VAR 0 14
34164: PUSH
34165: LD_VAR 0 9
34169: ARRAY
34170: PUSH
34171: LD_INT 1
34173: ARRAY
34174: PPUSH
34175: LD_VAR 0 14
34179: PUSH
34180: LD_VAR 0 9
34184: ARRAY
34185: PUSH
34186: LD_INT 2
34188: ARRAY
34189: PPUSH
34190: CALL_OW 351
34194: PUSH
34195: LD_VAR 0 14
34199: PUSH
34200: LD_VAR 0 9
34204: ARRAY
34205: PUSH
34206: LD_INT 1
34208: ARRAY
34209: PPUSH
34210: LD_VAR 0 14
34214: PUSH
34215: LD_VAR 0 9
34219: ARRAY
34220: PUSH
34221: LD_INT 2
34223: ARRAY
34224: PPUSH
34225: CALL_OW 488
34229: NOT
34230: OR
34231: PUSH
34232: LD_VAR 0 13
34236: PPUSH
34237: CALL_OW 247
34241: PUSH
34242: LD_INT 3
34244: EQUAL
34245: OR
34246: IFFALSE 34252
// exit ;
34248: POP
34249: POP
34250: GO 34796
// if not tmp then
34252: LD_VAR 0 13
34256: NOT
34257: IFFALSE 34261
// continue ;
34259: GO 34117
// result := true ;
34261: LD_ADDR_VAR 0 8
34265: PUSH
34266: LD_INT 1
34268: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34269: LD_VAR 0 6
34273: PUSH
34274: LD_VAR 0 13
34278: PPUSH
34279: CALL_OW 247
34283: PUSH
34284: LD_INT 2
34286: EQUAL
34287: AND
34288: PUSH
34289: LD_VAR 0 13
34293: PPUSH
34294: CALL_OW 263
34298: PUSH
34299: LD_INT 1
34301: EQUAL
34302: AND
34303: IFFALSE 34467
// begin if IsDrivenBy ( tmp ) then
34305: LD_VAR 0 13
34309: PPUSH
34310: CALL_OW 311
34314: IFFALSE 34318
// continue ;
34316: GO 34117
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34318: LD_VAR 0 6
34322: PPUSH
34323: LD_INT 3
34325: PUSH
34326: LD_INT 60
34328: PUSH
34329: EMPTY
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: LD_INT 55
34341: PUSH
34342: EMPTY
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PPUSH
34353: CALL_OW 72
34357: IFFALSE 34465
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34359: LD_ADDR_VAR 0 18
34363: PUSH
34364: LD_VAR 0 6
34368: PPUSH
34369: LD_INT 3
34371: PUSH
34372: LD_INT 60
34374: PUSH
34375: EMPTY
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 55
34387: PUSH
34388: EMPTY
34389: LIST
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PPUSH
34399: CALL_OW 72
34403: PUSH
34404: LD_INT 1
34406: ARRAY
34407: ST_TO_ADDR
// if IsInUnit ( driver ) then
34408: LD_VAR 0 18
34412: PPUSH
34413: CALL_OW 310
34417: IFFALSE 34428
// ComExit ( driver ) ;
34419: LD_VAR 0 18
34423: PPUSH
34424: CALL 59828 0 1
// AddComEnterUnit ( driver , tmp ) ;
34428: LD_VAR 0 18
34432: PPUSH
34433: LD_VAR 0 13
34437: PPUSH
34438: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34442: LD_VAR 0 18
34446: PPUSH
34447: LD_VAR 0 7
34451: PPUSH
34452: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34456: LD_VAR 0 18
34460: PPUSH
34461: CALL_OW 181
// end ; continue ;
34465: GO 34117
// end ; if not cleaners or not tmp in cleaners then
34467: LD_VAR 0 6
34471: NOT
34472: PUSH
34473: LD_VAR 0 13
34477: PUSH
34478: LD_VAR 0 6
34482: IN
34483: NOT
34484: OR
34485: IFFALSE 34792
// begin if dep then
34487: LD_VAR 0 17
34491: IFFALSE 34627
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34493: LD_ADDR_VAR 0 16
34497: PUSH
34498: LD_VAR 0 17
34502: PUSH
34503: LD_INT 1
34505: ARRAY
34506: PPUSH
34507: CALL_OW 250
34511: PPUSH
34512: LD_VAR 0 17
34516: PUSH
34517: LD_INT 1
34519: ARRAY
34520: PPUSH
34521: CALL_OW 254
34525: PPUSH
34526: LD_INT 5
34528: PPUSH
34529: CALL_OW 272
34533: PUSH
34534: LD_VAR 0 17
34538: PUSH
34539: LD_INT 1
34541: ARRAY
34542: PPUSH
34543: CALL_OW 251
34547: PPUSH
34548: LD_VAR 0 17
34552: PUSH
34553: LD_INT 1
34555: ARRAY
34556: PPUSH
34557: CALL_OW 254
34561: PPUSH
34562: LD_INT 5
34564: PPUSH
34565: CALL_OW 273
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34574: LD_VAR 0 16
34578: PUSH
34579: LD_INT 1
34581: ARRAY
34582: PPUSH
34583: LD_VAR 0 16
34587: PUSH
34588: LD_INT 2
34590: ARRAY
34591: PPUSH
34592: CALL_OW 488
34596: IFFALSE 34627
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34598: LD_VAR 0 13
34602: PPUSH
34603: LD_VAR 0 16
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: PPUSH
34612: LD_VAR 0 16
34616: PUSH
34617: LD_INT 2
34619: ARRAY
34620: PPUSH
34621: CALL_OW 111
// continue ;
34625: GO 34117
// end ; end ; r := GetDir ( tmp ) ;
34627: LD_ADDR_VAR 0 15
34631: PUSH
34632: LD_VAR 0 13
34636: PPUSH
34637: CALL_OW 254
34641: ST_TO_ADDR
// if r = 5 then
34642: LD_VAR 0 15
34646: PUSH
34647: LD_INT 5
34649: EQUAL
34650: IFFALSE 34660
// r := 0 ;
34652: LD_ADDR_VAR 0 15
34656: PUSH
34657: LD_INT 0
34659: ST_TO_ADDR
// for j = r to 5 do
34660: LD_ADDR_VAR 0 10
34664: PUSH
34665: DOUBLE
34666: LD_VAR 0 15
34670: DEC
34671: ST_TO_ADDR
34672: LD_INT 5
34674: PUSH
34675: FOR_TO
34676: IFFALSE 34790
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34678: LD_ADDR_VAR 0 11
34682: PUSH
34683: LD_VAR 0 13
34687: PPUSH
34688: CALL_OW 250
34692: PPUSH
34693: LD_VAR 0 10
34697: PPUSH
34698: LD_INT 2
34700: PPUSH
34701: CALL_OW 272
34705: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34706: LD_ADDR_VAR 0 12
34710: PUSH
34711: LD_VAR 0 13
34715: PPUSH
34716: CALL_OW 251
34720: PPUSH
34721: LD_VAR 0 10
34725: PPUSH
34726: LD_INT 2
34728: PPUSH
34729: CALL_OW 273
34733: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34734: LD_VAR 0 11
34738: PPUSH
34739: LD_VAR 0 12
34743: PPUSH
34744: CALL_OW 488
34748: PUSH
34749: LD_VAR 0 11
34753: PPUSH
34754: LD_VAR 0 12
34758: PPUSH
34759: CALL_OW 428
34763: NOT
34764: AND
34765: IFFALSE 34788
// begin ComMoveXY ( tmp , _x , _y ) ;
34767: LD_VAR 0 13
34771: PPUSH
34772: LD_VAR 0 11
34776: PPUSH
34777: LD_VAR 0 12
34781: PPUSH
34782: CALL_OW 111
// break ;
34786: GO 34790
// end ; end ;
34788: GO 34675
34790: POP
34791: POP
// end ; end ;
34792: GO 34117
34794: POP
34795: POP
// end ;
34796: LD_VAR 0 8
34800: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34801: LD_INT 0
34803: PPUSH
// result := true ;
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 1
34811: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34812: LD_VAR 0 2
34816: PUSH
34817: LD_INT 24
34819: DOUBLE
34820: EQUAL
34821: IFTRUE 34831
34823: LD_INT 33
34825: DOUBLE
34826: EQUAL
34827: IFTRUE 34831
34829: GO 34856
34831: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34832: LD_ADDR_VAR 0 3
34836: PUSH
34837: LD_INT 32
34839: PPUSH
34840: LD_VAR 0 1
34844: PPUSH
34845: CALL_OW 321
34849: PUSH
34850: LD_INT 2
34852: EQUAL
34853: ST_TO_ADDR
34854: GO 35172
34856: LD_INT 20
34858: DOUBLE
34859: EQUAL
34860: IFTRUE 34864
34862: GO 34889
34864: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34865: LD_ADDR_VAR 0 3
34869: PUSH
34870: LD_INT 6
34872: PPUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: CALL_OW 321
34882: PUSH
34883: LD_INT 2
34885: EQUAL
34886: ST_TO_ADDR
34887: GO 35172
34889: LD_INT 22
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34903
34895: LD_INT 36
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34928
34903: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_INT 15
34911: PPUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 321
34921: PUSH
34922: LD_INT 2
34924: EQUAL
34925: ST_TO_ADDR
34926: GO 35172
34928: LD_INT 30
34930: DOUBLE
34931: EQUAL
34932: IFTRUE 34936
34934: GO 34961
34936: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_INT 20
34944: PPUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: CALL_OW 321
34954: PUSH
34955: LD_INT 2
34957: EQUAL
34958: ST_TO_ADDR
34959: GO 35172
34961: LD_INT 28
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 34975
34967: LD_INT 21
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 35000
34975: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34976: LD_ADDR_VAR 0 3
34980: PUSH
34981: LD_INT 21
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 321
34993: PUSH
34994: LD_INT 2
34996: EQUAL
34997: ST_TO_ADDR
34998: GO 35172
35000: LD_INT 16
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35033
35008: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 84
35016: PPUSH
35017: LD_VAR 0 1
35021: PPUSH
35022: CALL_OW 321
35026: PUSH
35027: LD_INT 2
35029: EQUAL
35030: ST_TO_ADDR
35031: GO 35172
35033: LD_INT 19
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35047
35039: LD_INT 23
35041: DOUBLE
35042: EQUAL
35043: IFTRUE 35047
35045: GO 35072
35047: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35048: LD_ADDR_VAR 0 3
35052: PUSH
35053: LD_INT 83
35055: PPUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 321
35065: PUSH
35066: LD_INT 2
35068: EQUAL
35069: ST_TO_ADDR
35070: GO 35172
35072: LD_INT 17
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35105
35080: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: LD_INT 39
35088: PPUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 321
35098: PUSH
35099: LD_INT 2
35101: EQUAL
35102: ST_TO_ADDR
35103: GO 35172
35105: LD_INT 18
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35113
35111: GO 35138
35113: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35114: LD_ADDR_VAR 0 3
35118: PUSH
35119: LD_INT 40
35121: PPUSH
35122: LD_VAR 0 1
35126: PPUSH
35127: CALL_OW 321
35131: PUSH
35132: LD_INT 2
35134: EQUAL
35135: ST_TO_ADDR
35136: GO 35172
35138: LD_INT 27
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35146
35144: GO 35171
35146: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35147: LD_ADDR_VAR 0 3
35151: PUSH
35152: LD_INT 35
35154: PPUSH
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL_OW 321
35164: PUSH
35165: LD_INT 2
35167: EQUAL
35168: ST_TO_ADDR
35169: GO 35172
35171: POP
// end ;
35172: LD_VAR 0 3
35176: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35177: LD_INT 0
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
// result := false ;
35190: LD_ADDR_VAR 0 6
35194: PUSH
35195: LD_INT 0
35197: ST_TO_ADDR
// if btype = b_depot then
35198: LD_VAR 0 2
35202: PUSH
35203: LD_INT 0
35205: EQUAL
35206: IFFALSE 35218
// begin result := true ;
35208: LD_ADDR_VAR 0 6
35212: PUSH
35213: LD_INT 1
35215: ST_TO_ADDR
// exit ;
35216: GO 36044
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35218: LD_VAR 0 1
35222: NOT
35223: PUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 266
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: IN
35244: NOT
35245: OR
35246: PUSH
35247: LD_VAR 0 2
35251: NOT
35252: OR
35253: PUSH
35254: LD_VAR 0 5
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 3
35270: PUSH
35271: LD_INT 4
35273: PUSH
35274: LD_INT 5
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: IN
35285: NOT
35286: OR
35287: PUSH
35288: LD_VAR 0 3
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: CALL_OW 488
35302: NOT
35303: OR
35304: IFFALSE 35308
// exit ;
35306: GO 36044
// side := GetSide ( depot ) ;
35308: LD_ADDR_VAR 0 9
35312: PUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 255
35322: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35323: LD_VAR 0 9
35327: PPUSH
35328: LD_VAR 0 2
35332: PPUSH
35333: CALL 34801 0 2
35337: NOT
35338: IFFALSE 35342
// exit ;
35340: GO 36044
// pom := GetBase ( depot ) ;
35342: LD_ADDR_VAR 0 10
35346: PUSH
35347: LD_VAR 0 1
35351: PPUSH
35352: CALL_OW 274
35356: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35357: LD_ADDR_VAR 0 11
35361: PUSH
35362: LD_VAR 0 2
35366: PPUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 248
35376: PPUSH
35377: CALL_OW 450
35381: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35382: LD_VAR 0 10
35386: PPUSH
35387: LD_INT 1
35389: PPUSH
35390: CALL_OW 275
35394: PUSH
35395: LD_VAR 0 11
35399: PUSH
35400: LD_INT 1
35402: ARRAY
35403: GREATEREQUAL
35404: PUSH
35405: LD_VAR 0 10
35409: PPUSH
35410: LD_INT 2
35412: PPUSH
35413: CALL_OW 275
35417: PUSH
35418: LD_VAR 0 11
35422: PUSH
35423: LD_INT 2
35425: ARRAY
35426: GREATEREQUAL
35427: AND
35428: PUSH
35429: LD_VAR 0 10
35433: PPUSH
35434: LD_INT 3
35436: PPUSH
35437: CALL_OW 275
35441: PUSH
35442: LD_VAR 0 11
35446: PUSH
35447: LD_INT 3
35449: ARRAY
35450: GREATEREQUAL
35451: AND
35452: NOT
35453: IFFALSE 35457
// exit ;
35455: GO 36044
// if GetBType ( depot ) = b_depot then
35457: LD_VAR 0 1
35461: PPUSH
35462: CALL_OW 266
35466: PUSH
35467: LD_INT 0
35469: EQUAL
35470: IFFALSE 35482
// dist := 28 else
35472: LD_ADDR_VAR 0 14
35476: PUSH
35477: LD_INT 28
35479: ST_TO_ADDR
35480: GO 35490
// dist := 36 ;
35482: LD_ADDR_VAR 0 14
35486: PUSH
35487: LD_INT 36
35489: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35490: LD_VAR 0 1
35494: PPUSH
35495: LD_VAR 0 3
35499: PPUSH
35500: LD_VAR 0 4
35504: PPUSH
35505: CALL_OW 297
35509: PUSH
35510: LD_VAR 0 14
35514: GREATER
35515: IFFALSE 35519
// exit ;
35517: GO 36044
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35519: LD_ADDR_VAR 0 12
35523: PUSH
35524: LD_VAR 0 2
35528: PPUSH
35529: LD_VAR 0 3
35533: PPUSH
35534: LD_VAR 0 4
35538: PPUSH
35539: LD_VAR 0 5
35543: PPUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: CALL_OW 248
35553: PPUSH
35554: LD_INT 0
35556: PPUSH
35557: CALL 36049 0 6
35561: ST_TO_ADDR
// if not hexes then
35562: LD_VAR 0 12
35566: NOT
35567: IFFALSE 35571
// exit ;
35569: GO 36044
// hex := GetHexInfo ( x , y ) ;
35571: LD_ADDR_VAR 0 15
35575: PUSH
35576: LD_VAR 0 3
35580: PPUSH
35581: LD_VAR 0 4
35585: PPUSH
35586: CALL_OW 546
35590: ST_TO_ADDR
// if hex [ 1 ] then
35591: LD_VAR 0 15
35595: PUSH
35596: LD_INT 1
35598: ARRAY
35599: IFFALSE 35603
// exit ;
35601: GO 36044
// height := hex [ 2 ] ;
35603: LD_ADDR_VAR 0 13
35607: PUSH
35608: LD_VAR 0 15
35612: PUSH
35613: LD_INT 2
35615: ARRAY
35616: ST_TO_ADDR
// for i = 1 to hexes do
35617: LD_ADDR_VAR 0 7
35621: PUSH
35622: DOUBLE
35623: LD_INT 1
35625: DEC
35626: ST_TO_ADDR
35627: LD_VAR 0 12
35631: PUSH
35632: FOR_TO
35633: IFFALSE 35963
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35635: LD_VAR 0 12
35639: PUSH
35640: LD_VAR 0 7
35644: ARRAY
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PPUSH
35650: LD_VAR 0 12
35654: PUSH
35655: LD_VAR 0 7
35659: ARRAY
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PPUSH
35665: CALL_OW 488
35669: NOT
35670: PUSH
35671: LD_VAR 0 12
35675: PUSH
35676: LD_VAR 0 7
35680: ARRAY
35681: PUSH
35682: LD_INT 1
35684: ARRAY
35685: PPUSH
35686: LD_VAR 0 12
35690: PUSH
35691: LD_VAR 0 7
35695: ARRAY
35696: PUSH
35697: LD_INT 2
35699: ARRAY
35700: PPUSH
35701: CALL_OW 428
35705: PUSH
35706: LD_INT 0
35708: GREATER
35709: OR
35710: PUSH
35711: LD_VAR 0 12
35715: PUSH
35716: LD_VAR 0 7
35720: ARRAY
35721: PUSH
35722: LD_INT 1
35724: ARRAY
35725: PPUSH
35726: LD_VAR 0 12
35730: PUSH
35731: LD_VAR 0 7
35735: ARRAY
35736: PUSH
35737: LD_INT 2
35739: ARRAY
35740: PPUSH
35741: CALL_OW 351
35745: OR
35746: IFFALSE 35752
// exit ;
35748: POP
35749: POP
35750: GO 36044
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35752: LD_ADDR_VAR 0 8
35756: PUSH
35757: LD_VAR 0 12
35761: PUSH
35762: LD_VAR 0 7
35766: ARRAY
35767: PUSH
35768: LD_INT 1
35770: ARRAY
35771: PPUSH
35772: LD_VAR 0 12
35776: PUSH
35777: LD_VAR 0 7
35781: ARRAY
35782: PUSH
35783: LD_INT 2
35785: ARRAY
35786: PPUSH
35787: CALL_OW 546
35791: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35792: LD_VAR 0 8
35796: PUSH
35797: LD_INT 1
35799: ARRAY
35800: PUSH
35801: LD_VAR 0 8
35805: PUSH
35806: LD_INT 2
35808: ARRAY
35809: PUSH
35810: LD_VAR 0 13
35814: PUSH
35815: LD_INT 2
35817: PLUS
35818: GREATER
35819: OR
35820: PUSH
35821: LD_VAR 0 8
35825: PUSH
35826: LD_INT 2
35828: ARRAY
35829: PUSH
35830: LD_VAR 0 13
35834: PUSH
35835: LD_INT 2
35837: MINUS
35838: LESS
35839: OR
35840: PUSH
35841: LD_VAR 0 8
35845: PUSH
35846: LD_INT 3
35848: ARRAY
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 8
35855: PUSH
35856: LD_INT 9
35858: PUSH
35859: LD_INT 10
35861: PUSH
35862: LD_INT 11
35864: PUSH
35865: LD_INT 12
35867: PUSH
35868: LD_INT 13
35870: PUSH
35871: LD_INT 16
35873: PUSH
35874: LD_INT 17
35876: PUSH
35877: LD_INT 18
35879: PUSH
35880: LD_INT 19
35882: PUSH
35883: LD_INT 20
35885: PUSH
35886: LD_INT 21
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: IN
35904: NOT
35905: OR
35906: PUSH
35907: LD_VAR 0 8
35911: PUSH
35912: LD_INT 5
35914: ARRAY
35915: NOT
35916: OR
35917: PUSH
35918: LD_VAR 0 8
35922: PUSH
35923: LD_INT 6
35925: ARRAY
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: LD_INT 7
35935: PUSH
35936: LD_INT 9
35938: PUSH
35939: LD_INT 10
35941: PUSH
35942: LD_INT 11
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: IN
35953: NOT
35954: OR
35955: IFFALSE 35961
// exit ;
35957: POP
35958: POP
35959: GO 36044
// end ;
35961: GO 35632
35963: POP
35964: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35965: LD_VAR 0 9
35969: PPUSH
35970: LD_VAR 0 3
35974: PPUSH
35975: LD_VAR 0 4
35979: PPUSH
35980: LD_INT 20
35982: PPUSH
35983: CALL 27967 0 4
35987: PUSH
35988: LD_INT 4
35990: ARRAY
35991: IFFALSE 35995
// exit ;
35993: GO 36044
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35995: LD_VAR 0 2
35999: PUSH
36000: LD_INT 29
36002: PUSH
36003: LD_INT 30
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: IN
36010: PUSH
36011: LD_VAR 0 3
36015: PPUSH
36016: LD_VAR 0 4
36020: PPUSH
36021: LD_VAR 0 9
36025: PPUSH
36026: CALL_OW 440
36030: NOT
36031: AND
36032: IFFALSE 36036
// exit ;
36034: GO 36044
// result := true ;
36036: LD_ADDR_VAR 0 6
36040: PUSH
36041: LD_INT 1
36043: ST_TO_ADDR
// end ;
36044: LD_VAR 0 6
36048: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36049: LD_INT 0
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
// result = [ ] ;
36109: LD_ADDR_VAR 0 7
36113: PUSH
36114: EMPTY
36115: ST_TO_ADDR
// temp_list = [ ] ;
36116: LD_ADDR_VAR 0 9
36120: PUSH
36121: EMPTY
36122: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36123: LD_VAR 0 4
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: LD_INT 3
36139: PUSH
36140: LD_INT 4
36142: PUSH
36143: LD_INT 5
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: IN
36154: NOT
36155: PUSH
36156: LD_VAR 0 1
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: IN
36171: PUSH
36172: LD_VAR 0 5
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: LD_INT 3
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: IN
36191: NOT
36192: AND
36193: OR
36194: IFFALSE 36198
// exit ;
36196: GO 54589
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36198: LD_VAR 0 1
36202: PUSH
36203: LD_INT 6
36205: PUSH
36206: LD_INT 7
36208: PUSH
36209: LD_INT 8
36211: PUSH
36212: LD_INT 13
36214: PUSH
36215: LD_INT 12
36217: PUSH
36218: LD_INT 15
36220: PUSH
36221: LD_INT 11
36223: PUSH
36224: LD_INT 14
36226: PUSH
36227: LD_INT 10
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: IN
36241: IFFALSE 36251
// btype = b_lab ;
36243: LD_ADDR_VAR 0 1
36247: PUSH
36248: LD_INT 6
36250: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36251: LD_VAR 0 6
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: IN
36270: NOT
36271: PUSH
36272: LD_VAR 0 1
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 3
36288: PUSH
36289: LD_INT 6
36291: PUSH
36292: LD_INT 36
36294: PUSH
36295: LD_INT 4
36297: PUSH
36298: LD_INT 5
36300: PUSH
36301: LD_INT 31
36303: PUSH
36304: LD_INT 32
36306: PUSH
36307: LD_INT 33
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: IN
36323: NOT
36324: PUSH
36325: LD_VAR 0 6
36329: PUSH
36330: LD_INT 1
36332: EQUAL
36333: AND
36334: OR
36335: PUSH
36336: LD_VAR 0 1
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: IN
36351: NOT
36352: PUSH
36353: LD_VAR 0 6
36357: PUSH
36358: LD_INT 2
36360: EQUAL
36361: AND
36362: OR
36363: IFFALSE 36373
// mode = 0 ;
36365: LD_ADDR_VAR 0 6
36369: PUSH
36370: LD_INT 0
36372: ST_TO_ADDR
// case mode of 0 :
36373: LD_VAR 0 6
36377: PUSH
36378: LD_INT 0
36380: DOUBLE
36381: EQUAL
36382: IFTRUE 36386
36384: GO 47839
36386: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36387: LD_ADDR_VAR 0 11
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36580: LD_ADDR_VAR 0 12
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: NEG
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 3
36748: NEG
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36776: LD_ADDR_VAR 0 13
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 2
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: LD_INT 3
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 3
36947: NEG
36948: PUSH
36949: LD_INT 3
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36975: LD_ADDR_VAR 0 14
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 3
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 2
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37171: LD_ADDR_VAR 0 15
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37364: LD_ADDR_VAR 0 16
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: PUSH
37522: LD_INT 3
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37557: LD_ADDR_VAR 0 17
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37787: LD_ADDR_VAR 0 18
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 2
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38017: LD_ADDR_VAR 0 19
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: LD_INT 2
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38247: LD_ADDR_VAR 0 20
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 2
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38477: LD_ADDR_VAR 0 21
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 2
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38707: LD_ADDR_VAR 0 22
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38937: LD_ADDR_VAR 0 23
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: LD_INT 3
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39217: LD_ADDR_VAR 0 24
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39493: LD_ADDR_VAR 0 25
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 3
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 3
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39767: LD_ADDR_VAR 0 26
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 3
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40043: LD_ADDR_VAR 0 27
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 3
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 3
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40323: LD_ADDR_VAR 0 28
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: NEG
40535: PUSH
40536: LD_INT 3
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 3
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 3
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40605: LD_ADDR_VAR 0 29
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: LD_INT 3
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40884: LD_ADDR_VAR 0 30
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 3
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41162: LD_ADDR_VAR 0 31
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 2
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 3
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 3
41405: NEG
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41440: LD_ADDR_VAR 0 32
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 3
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 3
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 3
41683: NEG
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41718: LD_ADDR_VAR 0 33
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: LD_INT 3
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41997: LD_ADDR_VAR 0 34
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42277: LD_ADDR_VAR 0 35
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42389: LD_ADDR_VAR 0 36
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42501: LD_ADDR_VAR 0 37
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42613: LD_ADDR_VAR 0 38
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42725: LD_ADDR_VAR 0 39
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42837: LD_ADDR_VAR 0 40
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42949: LD_ADDR_VAR 0 41
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: NEG
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 3
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 3
43246: NEG
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: LD_INT 3
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43299: LD_ADDR_VAR 0 42
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 3
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: NEG
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43649: LD_ADDR_VAR 0 43
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 3
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 3
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43997: LD_ADDR_VAR 0 44
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 3
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 3
44294: NEG
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 3
44306: NEG
44307: PUSH
44308: LD_INT 3
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44347: LD_ADDR_VAR 0 45
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 3
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: LD_INT 3
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 3
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 3
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44697: LD_ADDR_VAR 0 46
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 3
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 3
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 3
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45045: LD_ADDR_VAR 0 47
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45196: LD_ADDR_VAR 0 48
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45343: LD_ADDR_VAR 0 49
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45487: LD_ADDR_VAR 0 50
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45631: LD_ADDR_VAR 0 51
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45778: LD_ADDR_VAR 0 52
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45929: LD_ADDR_VAR 0 53
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46159: LD_ADDR_VAR 0 54
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46389: LD_ADDR_VAR 0 55
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46619: LD_ADDR_VAR 0 56
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46849: LD_ADDR_VAR 0 57
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47079: LD_ADDR_VAR 0 58
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47309: LD_ADDR_VAR 0 59
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47397: LD_ADDR_VAR 0 60
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47485: LD_ADDR_VAR 0 61
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47573: LD_ADDR_VAR 0 62
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47661: LD_ADDR_VAR 0 63
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47749: LD_ADDR_VAR 0 64
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: ST_TO_ADDR
// end ; 1 :
47837: GO 53734
47839: LD_INT 1
47841: DOUBLE
47842: EQUAL
47843: IFTRUE 47847
47845: GO 50470
47847: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47848: LD_ADDR_VAR 0 11
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 3
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47892: LD_ADDR_VAR 0 12
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47933: LD_ADDR_VAR 0 13
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47973: LD_ADDR_VAR 0 14
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48014: LD_ADDR_VAR 0 15
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48058: LD_ADDR_VAR 0 16
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 3
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 3
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48104: LD_ADDR_VAR 0 17
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48148: LD_ADDR_VAR 0 18
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48189: LD_ADDR_VAR 0 19
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48229: LD_ADDR_VAR 0 20
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48270: LD_ADDR_VAR 0 21
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48314: LD_ADDR_VAR 0 22
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: LIST
48359: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48360: LD_ADDR_VAR 0 23
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 3
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 4
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48404: LD_ADDR_VAR 0 24
48408: PUSH
48409: LD_INT 3
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48445: LD_ADDR_VAR 0 25
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 4
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48485: LD_ADDR_VAR 0 26
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 4
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48526: LD_ADDR_VAR 0 27
48530: PUSH
48531: LD_INT 3
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 4
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48570: LD_ADDR_VAR 0 28
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 4
48601: NEG
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48616: LD_ADDR_VAR 0 29
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 4
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 4
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 5
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 5
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 4
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 6
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 6
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 5
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48771: LD_ADDR_VAR 0 30
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 4
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 4
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 4
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 5
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 5
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 5
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 6
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 6
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48914: LD_ADDR_VAR 0 31
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 4
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: LD_INT 4
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: LD_INT 4
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 5
48981: PUSH
48982: LD_INT 4
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 5
48991: PUSH
48992: LD_INT 5
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 4
49001: PUSH
49002: LD_INT 5
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 6
49011: PUSH
49012: LD_INT 5
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 6
49021: PUSH
49022: LD_INT 6
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 5
49031: PUSH
49032: LD_INT 6
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49053: LD_ADDR_VAR 0 32
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 4
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 4
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 5
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 5
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 4
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 6
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 6
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 5
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49196: LD_ADDR_VAR 0 33
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 3
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 4
49248: NEG
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 4
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 4
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 5
49282: NEG
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 5
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 5
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 6
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 6
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49351: LD_ADDR_VAR 0 34
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 3
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: NEG
49383: PUSH
49384: LD_INT 3
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: LD_INT 4
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: NEG
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 4
49418: NEG
49419: PUSH
49420: LD_INT 4
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 4
49430: NEG
49431: PUSH
49432: LD_INT 5
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 5
49442: NEG
49443: PUSH
49444: LD_INT 4
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 5
49454: NEG
49455: PUSH
49456: LD_INT 5
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 5
49466: NEG
49467: PUSH
49468: LD_INT 6
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 6
49478: NEG
49479: PUSH
49480: LD_INT 5
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 6
49490: NEG
49491: PUSH
49492: LD_INT 6
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49514: LD_ADDR_VAR 0 41
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 3
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49558: LD_ADDR_VAR 0 42
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49599: LD_ADDR_VAR 0 43
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49639: LD_ADDR_VAR 0 44
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49680: LD_ADDR_VAR 0 45
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49724: LD_ADDR_VAR 0 46
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49770: LD_ADDR_VAR 0 47
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49803: LD_ADDR_VAR 0 48
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49834: LD_ADDR_VAR 0 49
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49863: LD_ADDR_VAR 0 50
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49892: LD_ADDR_VAR 0 51
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49923: LD_ADDR_VAR 0 52
49927: PUSH
49928: LD_INT 3
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49956: LD_ADDR_VAR 0 53
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 3
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50000: LD_ADDR_VAR 0 54
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50041: LD_ADDR_VAR 0 55
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: PUSH
50059: LD_INT 3
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50081: LD_ADDR_VAR 0 56
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50122: LD_ADDR_VAR 0 57
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50166: LD_ADDR_VAR 0 58
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: LIST
50211: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50212: LD_ADDR_VAR 0 59
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50256: LD_ADDR_VAR 0 60
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: LIST
50296: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50297: LD_ADDR_VAR 0 61
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50337: LD_ADDR_VAR 0 62
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50378: LD_ADDR_VAR 0 63
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50422: LD_ADDR_VAR 0 64
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// end ; 2 :
50468: GO 53734
50470: LD_INT 2
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 53733
50478: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50479: LD_ADDR_VAR 0 29
50483: PUSH
50484: LD_INT 4
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 4
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 5
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 5
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 4
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 5
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 4
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 4
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: LD_INT 4
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 4
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 4
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 4
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 4
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 5
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 5
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 4
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 5
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 4
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 4
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 4
50864: NEG
50865: PUSH
50866: LD_INT 4
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: NEG
50877: PUSH
50878: LD_INT 5
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: LD_INT 4
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 4
50912: NEG
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 5
50924: NEG
50925: PUSH
50926: LD_INT 4
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 5
50936: NEG
50937: PUSH
50938: LD_INT 5
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 5
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 5
50960: NEG
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51017: LD_ADDR_VAR 0 30
51021: PUSH
51022: LD_INT 4
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 4
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 5
51044: PUSH
51045: LD_INT 4
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 5
51054: PUSH
51055: LD_INT 5
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 4
51064: PUSH
51065: LD_INT 5
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: LD_INT 4
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 5
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 4
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 4
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 5
51263: NEG
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 5
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 5
51286: NEG
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 4
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 4
51369: NEG
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 4
51381: NEG
51382: PUSH
51383: LD_INT 4
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 4
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 4
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 5
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 4
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 4
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 5
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 5
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51564: LD_ADDR_VAR 0 31
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 4
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 5
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 5
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 5
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 4
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 4
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 4
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 4
51766: NEG
51767: PUSH
51768: LD_INT 4
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 4
51778: NEG
51779: PUSH
51780: LD_INT 5
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: LD_INT 4
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 4
51814: NEG
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 5
51826: NEG
51827: PUSH
51828: LD_INT 4
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: LD_INT 5
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 5
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 5
51862: NEG
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 4
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 4
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 4
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 5
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 5
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 4
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 5
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52114: LD_ADDR_VAR 0 32
52118: PUSH
52119: LD_INT 4
52121: NEG
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 4
52132: NEG
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 4
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 5
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 5
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 5
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: LD_INT 4
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 3
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 4
52295: NEG
52296: PUSH
52297: LD_INT 4
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 4
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 4
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 4
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 5
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 4
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 4
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 5
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 5
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 4
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 4
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 4
52526: PUSH
52527: LD_INT 4
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 4
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 5
52546: PUSH
52547: LD_INT 4
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 5
52556: PUSH
52557: LD_INT 5
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 4
52566: PUSH
52567: LD_INT 5
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: LD_INT 4
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 3
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 5
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: LD_INT 5
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52661: LD_ADDR_VAR 0 33
52665: PUSH
52666: LD_INT 4
52668: NEG
52669: PUSH
52670: LD_INT 4
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 4
52680: NEG
52681: PUSH
52682: LD_INT 5
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: NEG
52693: PUSH
52694: LD_INT 4
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 4
52716: NEG
52717: PUSH
52718: LD_INT 3
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 5
52728: NEG
52729: PUSH
52730: LD_INT 4
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 5
52740: NEG
52741: PUSH
52742: LD_INT 5
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: NEG
52753: PUSH
52754: LD_INT 5
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 5
52764: NEG
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 4
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 4
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: LD_INT 4
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 4
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 5
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 5
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 5
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 4
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 4
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: LD_INT 4
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 4
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 4
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 5
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 5
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 4
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 5
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53199: LD_ADDR_VAR 0 34
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 4
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 5
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 4
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 4
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 5
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 5
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 4
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 4
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 4
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 4
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 5
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 5
53431: PUSH
53432: LD_INT 5
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 4
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: LD_INT 4
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: LD_INT 5
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 4
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: LD_INT 4
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 4
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 4
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 4
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 5
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 5
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 5
53663: NEG
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// end ; end ;
53731: GO 53734
53733: POP
// case btype of b_depot , b_warehouse :
53734: LD_VAR 0 1
53738: PUSH
53739: LD_INT 0
53741: DOUBLE
53742: EQUAL
53743: IFTRUE 53753
53745: LD_INT 1
53747: DOUBLE
53748: EQUAL
53749: IFTRUE 53753
53751: GO 53954
53753: POP
// case nation of nation_american :
53754: LD_VAR 0 5
53758: PUSH
53759: LD_INT 1
53761: DOUBLE
53762: EQUAL
53763: IFTRUE 53767
53765: GO 53823
53767: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53768: LD_ADDR_VAR 0 9
53772: PUSH
53773: LD_VAR 0 11
53777: PUSH
53778: LD_VAR 0 12
53782: PUSH
53783: LD_VAR 0 13
53787: PUSH
53788: LD_VAR 0 14
53792: PUSH
53793: LD_VAR 0 15
53797: PUSH
53798: LD_VAR 0 16
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: PUSH
53811: LD_VAR 0 4
53815: PUSH
53816: LD_INT 1
53818: PLUS
53819: ARRAY
53820: ST_TO_ADDR
53821: GO 53952
53823: LD_INT 2
53825: DOUBLE
53826: EQUAL
53827: IFTRUE 53831
53829: GO 53887
53831: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53832: LD_ADDR_VAR 0 9
53836: PUSH
53837: LD_VAR 0 17
53841: PUSH
53842: LD_VAR 0 18
53846: PUSH
53847: LD_VAR 0 19
53851: PUSH
53852: LD_VAR 0 20
53856: PUSH
53857: LD_VAR 0 21
53861: PUSH
53862: LD_VAR 0 22
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: PUSH
53875: LD_VAR 0 4
53879: PUSH
53880: LD_INT 1
53882: PLUS
53883: ARRAY
53884: ST_TO_ADDR
53885: GO 53952
53887: LD_INT 3
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53895
53893: GO 53951
53895: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53896: LD_ADDR_VAR 0 9
53900: PUSH
53901: LD_VAR 0 23
53905: PUSH
53906: LD_VAR 0 24
53910: PUSH
53911: LD_VAR 0 25
53915: PUSH
53916: LD_VAR 0 26
53920: PUSH
53921: LD_VAR 0 27
53925: PUSH
53926: LD_VAR 0 28
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: LD_VAR 0 4
53943: PUSH
53944: LD_INT 1
53946: PLUS
53947: ARRAY
53948: ST_TO_ADDR
53949: GO 53952
53951: POP
53952: GO 54507
53954: LD_INT 2
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 53968
53960: LD_INT 3
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53968
53966: GO 54024
53968: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53969: LD_ADDR_VAR 0 9
53973: PUSH
53974: LD_VAR 0 29
53978: PUSH
53979: LD_VAR 0 30
53983: PUSH
53984: LD_VAR 0 31
53988: PUSH
53989: LD_VAR 0 32
53993: PUSH
53994: LD_VAR 0 33
53998: PUSH
53999: LD_VAR 0 34
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: PUSH
54012: LD_VAR 0 4
54016: PUSH
54017: LD_INT 1
54019: PLUS
54020: ARRAY
54021: ST_TO_ADDR
54022: GO 54507
54024: LD_INT 16
54026: DOUBLE
54027: EQUAL
54028: IFTRUE 54086
54030: LD_INT 17
54032: DOUBLE
54033: EQUAL
54034: IFTRUE 54086
54036: LD_INT 18
54038: DOUBLE
54039: EQUAL
54040: IFTRUE 54086
54042: LD_INT 19
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54086
54048: LD_INT 22
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54086
54054: LD_INT 20
54056: DOUBLE
54057: EQUAL
54058: IFTRUE 54086
54060: LD_INT 21
54062: DOUBLE
54063: EQUAL
54064: IFTRUE 54086
54066: LD_INT 23
54068: DOUBLE
54069: EQUAL
54070: IFTRUE 54086
54072: LD_INT 24
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54086
54078: LD_INT 25
54080: DOUBLE
54081: EQUAL
54082: IFTRUE 54086
54084: GO 54142
54086: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54087: LD_ADDR_VAR 0 9
54091: PUSH
54092: LD_VAR 0 35
54096: PUSH
54097: LD_VAR 0 36
54101: PUSH
54102: LD_VAR 0 37
54106: PUSH
54107: LD_VAR 0 38
54111: PUSH
54112: LD_VAR 0 39
54116: PUSH
54117: LD_VAR 0 40
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: PUSH
54130: LD_VAR 0 4
54134: PUSH
54135: LD_INT 1
54137: PLUS
54138: ARRAY
54139: ST_TO_ADDR
54140: GO 54507
54142: LD_INT 6
54144: DOUBLE
54145: EQUAL
54146: IFTRUE 54198
54148: LD_INT 7
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54198
54154: LD_INT 8
54156: DOUBLE
54157: EQUAL
54158: IFTRUE 54198
54160: LD_INT 13
54162: DOUBLE
54163: EQUAL
54164: IFTRUE 54198
54166: LD_INT 12
54168: DOUBLE
54169: EQUAL
54170: IFTRUE 54198
54172: LD_INT 15
54174: DOUBLE
54175: EQUAL
54176: IFTRUE 54198
54178: LD_INT 11
54180: DOUBLE
54181: EQUAL
54182: IFTRUE 54198
54184: LD_INT 14
54186: DOUBLE
54187: EQUAL
54188: IFTRUE 54198
54190: LD_INT 10
54192: DOUBLE
54193: EQUAL
54194: IFTRUE 54198
54196: GO 54254
54198: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54199: LD_ADDR_VAR 0 9
54203: PUSH
54204: LD_VAR 0 41
54208: PUSH
54209: LD_VAR 0 42
54213: PUSH
54214: LD_VAR 0 43
54218: PUSH
54219: LD_VAR 0 44
54223: PUSH
54224: LD_VAR 0 45
54228: PUSH
54229: LD_VAR 0 46
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: PUSH
54242: LD_VAR 0 4
54246: PUSH
54247: LD_INT 1
54249: PLUS
54250: ARRAY
54251: ST_TO_ADDR
54252: GO 54507
54254: LD_INT 36
54256: DOUBLE
54257: EQUAL
54258: IFTRUE 54262
54260: GO 54318
54262: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54263: LD_ADDR_VAR 0 9
54267: PUSH
54268: LD_VAR 0 47
54272: PUSH
54273: LD_VAR 0 48
54277: PUSH
54278: LD_VAR 0 49
54282: PUSH
54283: LD_VAR 0 50
54287: PUSH
54288: LD_VAR 0 51
54292: PUSH
54293: LD_VAR 0 52
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: PUSH
54306: LD_VAR 0 4
54310: PUSH
54311: LD_INT 1
54313: PLUS
54314: ARRAY
54315: ST_TO_ADDR
54316: GO 54507
54318: LD_INT 4
54320: DOUBLE
54321: EQUAL
54322: IFTRUE 54344
54324: LD_INT 5
54326: DOUBLE
54327: EQUAL
54328: IFTRUE 54344
54330: LD_INT 34
54332: DOUBLE
54333: EQUAL
54334: IFTRUE 54344
54336: LD_INT 37
54338: DOUBLE
54339: EQUAL
54340: IFTRUE 54344
54342: GO 54400
54344: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54345: LD_ADDR_VAR 0 9
54349: PUSH
54350: LD_VAR 0 53
54354: PUSH
54355: LD_VAR 0 54
54359: PUSH
54360: LD_VAR 0 55
54364: PUSH
54365: LD_VAR 0 56
54369: PUSH
54370: LD_VAR 0 57
54374: PUSH
54375: LD_VAR 0 58
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: PUSH
54388: LD_VAR 0 4
54392: PUSH
54393: LD_INT 1
54395: PLUS
54396: ARRAY
54397: ST_TO_ADDR
54398: GO 54507
54400: LD_INT 31
54402: DOUBLE
54403: EQUAL
54404: IFTRUE 54450
54406: LD_INT 32
54408: DOUBLE
54409: EQUAL
54410: IFTRUE 54450
54412: LD_INT 33
54414: DOUBLE
54415: EQUAL
54416: IFTRUE 54450
54418: LD_INT 27
54420: DOUBLE
54421: EQUAL
54422: IFTRUE 54450
54424: LD_INT 26
54426: DOUBLE
54427: EQUAL
54428: IFTRUE 54450
54430: LD_INT 28
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54450
54436: LD_INT 29
54438: DOUBLE
54439: EQUAL
54440: IFTRUE 54450
54442: LD_INT 30
54444: DOUBLE
54445: EQUAL
54446: IFTRUE 54450
54448: GO 54506
54450: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54451: LD_ADDR_VAR 0 9
54455: PUSH
54456: LD_VAR 0 59
54460: PUSH
54461: LD_VAR 0 60
54465: PUSH
54466: LD_VAR 0 61
54470: PUSH
54471: LD_VAR 0 62
54475: PUSH
54476: LD_VAR 0 63
54480: PUSH
54481: LD_VAR 0 64
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: PUSH
54494: LD_VAR 0 4
54498: PUSH
54499: LD_INT 1
54501: PLUS
54502: ARRAY
54503: ST_TO_ADDR
54504: GO 54507
54506: POP
// temp_list2 = [ ] ;
54507: LD_ADDR_VAR 0 10
54511: PUSH
54512: EMPTY
54513: ST_TO_ADDR
// for i in temp_list do
54514: LD_ADDR_VAR 0 8
54518: PUSH
54519: LD_VAR 0 9
54523: PUSH
54524: FOR_IN
54525: IFFALSE 54577
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54527: LD_ADDR_VAR 0 10
54531: PUSH
54532: LD_VAR 0 10
54536: PUSH
54537: LD_VAR 0 8
54541: PUSH
54542: LD_INT 1
54544: ARRAY
54545: PUSH
54546: LD_VAR 0 2
54550: PLUS
54551: PUSH
54552: LD_VAR 0 8
54556: PUSH
54557: LD_INT 2
54559: ARRAY
54560: PUSH
54561: LD_VAR 0 3
54565: PLUS
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: EMPTY
54572: LIST
54573: ADD
54574: ST_TO_ADDR
54575: GO 54524
54577: POP
54578: POP
// result = temp_list2 ;
54579: LD_ADDR_VAR 0 7
54583: PUSH
54584: LD_VAR 0 10
54588: ST_TO_ADDR
// end ;
54589: LD_VAR 0 7
54593: RET
// export function EnemyInRange ( unit , dist ) ; begin
54594: LD_INT 0
54596: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54597: LD_ADDR_VAR 0 3
54601: PUSH
54602: LD_VAR 0 1
54606: PPUSH
54607: CALL_OW 255
54611: PPUSH
54612: LD_VAR 0 1
54616: PPUSH
54617: CALL_OW 250
54621: PPUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: CALL_OW 251
54631: PPUSH
54632: LD_VAR 0 2
54636: PPUSH
54637: CALL 27967 0 4
54641: PUSH
54642: LD_INT 4
54644: ARRAY
54645: ST_TO_ADDR
// end ;
54646: LD_VAR 0 3
54650: RET
// export function PlayerSeeMe ( unit ) ; begin
54651: LD_INT 0
54653: PPUSH
// result := See ( your_side , unit ) ;
54654: LD_ADDR_VAR 0 2
54658: PUSH
54659: LD_OWVAR 2
54663: PPUSH
54664: LD_VAR 0 1
54668: PPUSH
54669: CALL_OW 292
54673: ST_TO_ADDR
// end ;
54674: LD_VAR 0 2
54678: RET
// export function ReverseDir ( unit ) ; begin
54679: LD_INT 0
54681: PPUSH
// if not unit then
54682: LD_VAR 0 1
54686: NOT
54687: IFFALSE 54691
// exit ;
54689: GO 54714
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54691: LD_ADDR_VAR 0 2
54695: PUSH
54696: LD_VAR 0 1
54700: PPUSH
54701: CALL_OW 254
54705: PUSH
54706: LD_INT 3
54708: PLUS
54709: PUSH
54710: LD_INT 6
54712: MOD
54713: ST_TO_ADDR
// end ;
54714: LD_VAR 0 2
54718: RET
// export function ReverseArray ( array ) ; var i ; begin
54719: LD_INT 0
54721: PPUSH
54722: PPUSH
// if not array then
54723: LD_VAR 0 1
54727: NOT
54728: IFFALSE 54732
// exit ;
54730: GO 54787
// result := [ ] ;
54732: LD_ADDR_VAR 0 2
54736: PUSH
54737: EMPTY
54738: ST_TO_ADDR
// for i := array downto 1 do
54739: LD_ADDR_VAR 0 3
54743: PUSH
54744: DOUBLE
54745: LD_VAR 0 1
54749: INC
54750: ST_TO_ADDR
54751: LD_INT 1
54753: PUSH
54754: FOR_DOWNTO
54755: IFFALSE 54785
// result := Join ( result , array [ i ] ) ;
54757: LD_ADDR_VAR 0 2
54761: PUSH
54762: LD_VAR 0 2
54766: PPUSH
54767: LD_VAR 0 1
54771: PUSH
54772: LD_VAR 0 3
54776: ARRAY
54777: PPUSH
54778: CALL 59430 0 2
54782: ST_TO_ADDR
54783: GO 54754
54785: POP
54786: POP
// end ;
54787: LD_VAR 0 2
54791: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54792: LD_INT 0
54794: PPUSH
54795: PPUSH
54796: PPUSH
54797: PPUSH
54798: PPUSH
54799: PPUSH
// if not unit or not hexes then
54800: LD_VAR 0 1
54804: NOT
54805: PUSH
54806: LD_VAR 0 2
54810: NOT
54811: OR
54812: IFFALSE 54816
// exit ;
54814: GO 54939
// dist := 9999 ;
54816: LD_ADDR_VAR 0 5
54820: PUSH
54821: LD_INT 9999
54823: ST_TO_ADDR
// for i = 1 to hexes do
54824: LD_ADDR_VAR 0 4
54828: PUSH
54829: DOUBLE
54830: LD_INT 1
54832: DEC
54833: ST_TO_ADDR
54834: LD_VAR 0 2
54838: PUSH
54839: FOR_TO
54840: IFFALSE 54927
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54842: LD_ADDR_VAR 0 6
54846: PUSH
54847: LD_VAR 0 1
54851: PPUSH
54852: LD_VAR 0 2
54856: PUSH
54857: LD_VAR 0 4
54861: ARRAY
54862: PUSH
54863: LD_INT 1
54865: ARRAY
54866: PPUSH
54867: LD_VAR 0 2
54871: PUSH
54872: LD_VAR 0 4
54876: ARRAY
54877: PUSH
54878: LD_INT 2
54880: ARRAY
54881: PPUSH
54882: CALL_OW 297
54886: ST_TO_ADDR
// if tdist < dist then
54887: LD_VAR 0 6
54891: PUSH
54892: LD_VAR 0 5
54896: LESS
54897: IFFALSE 54925
// begin hex := hexes [ i ] ;
54899: LD_ADDR_VAR 0 8
54903: PUSH
54904: LD_VAR 0 2
54908: PUSH
54909: LD_VAR 0 4
54913: ARRAY
54914: ST_TO_ADDR
// dist := tdist ;
54915: LD_ADDR_VAR 0 5
54919: PUSH
54920: LD_VAR 0 6
54924: ST_TO_ADDR
// end ; end ;
54925: GO 54839
54927: POP
54928: POP
// result := hex ;
54929: LD_ADDR_VAR 0 3
54933: PUSH
54934: LD_VAR 0 8
54938: ST_TO_ADDR
// end ;
54939: LD_VAR 0 3
54943: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54944: LD_INT 0
54946: PPUSH
54947: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54948: LD_VAR 0 1
54952: NOT
54953: PUSH
54954: LD_VAR 0 1
54958: PUSH
54959: LD_INT 21
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 23
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PPUSH
54983: CALL_OW 69
54987: IN
54988: NOT
54989: OR
54990: IFFALSE 54994
// exit ;
54992: GO 55041
// for i = 1 to 3 do
54994: LD_ADDR_VAR 0 3
54998: PUSH
54999: DOUBLE
55000: LD_INT 1
55002: DEC
55003: ST_TO_ADDR
55004: LD_INT 3
55006: PUSH
55007: FOR_TO
55008: IFFALSE 55039
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55010: LD_VAR 0 1
55014: PPUSH
55015: CALL_OW 250
55019: PPUSH
55020: LD_VAR 0 1
55024: PPUSH
55025: CALL_OW 251
55029: PPUSH
55030: LD_INT 1
55032: PPUSH
55033: CALL_OW 453
55037: GO 55007
55039: POP
55040: POP
// end ;
55041: LD_VAR 0 2
55045: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55046: LD_INT 0
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55054: LD_VAR 0 1
55058: NOT
55059: PUSH
55060: LD_VAR 0 2
55064: NOT
55065: OR
55066: PUSH
55067: LD_VAR 0 1
55071: PPUSH
55072: CALL_OW 314
55076: OR
55077: IFFALSE 55081
// exit ;
55079: GO 55548
// if GetLives ( i ) < 250 then
55081: LD_VAR 0 4
55085: PPUSH
55086: CALL_OW 256
55090: PUSH
55091: LD_INT 250
55093: LESS
55094: IFFALSE 55107
// begin ComAutodestruct ( i ) ;
55096: LD_VAR 0 4
55100: PPUSH
55101: CALL 54944 0 1
// exit ;
55105: GO 55548
// end ; x := GetX ( enemy_unit ) ;
55107: LD_ADDR_VAR 0 7
55111: PUSH
55112: LD_VAR 0 2
55116: PPUSH
55117: CALL_OW 250
55121: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55122: LD_ADDR_VAR 0 8
55126: PUSH
55127: LD_VAR 0 2
55131: PPUSH
55132: CALL_OW 251
55136: ST_TO_ADDR
// if not x or not y then
55137: LD_VAR 0 7
55141: NOT
55142: PUSH
55143: LD_VAR 0 8
55147: NOT
55148: OR
55149: IFFALSE 55153
// exit ;
55151: GO 55548
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55153: LD_ADDR_VAR 0 6
55157: PUSH
55158: LD_VAR 0 7
55162: PPUSH
55163: LD_INT 0
55165: PPUSH
55166: LD_INT 4
55168: PPUSH
55169: CALL_OW 272
55173: PUSH
55174: LD_VAR 0 8
55178: PPUSH
55179: LD_INT 0
55181: PPUSH
55182: LD_INT 4
55184: PPUSH
55185: CALL_OW 273
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_VAR 0 7
55198: PPUSH
55199: LD_INT 1
55201: PPUSH
55202: LD_INT 4
55204: PPUSH
55205: CALL_OW 272
55209: PUSH
55210: LD_VAR 0 8
55214: PPUSH
55215: LD_INT 1
55217: PPUSH
55218: LD_INT 4
55220: PPUSH
55221: CALL_OW 273
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_VAR 0 7
55234: PPUSH
55235: LD_INT 2
55237: PPUSH
55238: LD_INT 4
55240: PPUSH
55241: CALL_OW 272
55245: PUSH
55246: LD_VAR 0 8
55250: PPUSH
55251: LD_INT 2
55253: PPUSH
55254: LD_INT 4
55256: PPUSH
55257: CALL_OW 273
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_VAR 0 7
55270: PPUSH
55271: LD_INT 3
55273: PPUSH
55274: LD_INT 4
55276: PPUSH
55277: CALL_OW 272
55281: PUSH
55282: LD_VAR 0 8
55286: PPUSH
55287: LD_INT 3
55289: PPUSH
55290: LD_INT 4
55292: PPUSH
55293: CALL_OW 273
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_VAR 0 7
55306: PPUSH
55307: LD_INT 4
55309: PPUSH
55310: LD_INT 4
55312: PPUSH
55313: CALL_OW 272
55317: PUSH
55318: LD_VAR 0 8
55322: PPUSH
55323: LD_INT 4
55325: PPUSH
55326: LD_INT 4
55328: PPUSH
55329: CALL_OW 273
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_VAR 0 7
55342: PPUSH
55343: LD_INT 5
55345: PPUSH
55346: LD_INT 4
55348: PPUSH
55349: CALL_OW 272
55353: PUSH
55354: LD_VAR 0 8
55358: PPUSH
55359: LD_INT 5
55361: PPUSH
55362: LD_INT 4
55364: PPUSH
55365: CALL_OW 273
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: ST_TO_ADDR
// for i = tmp downto 1 do
55382: LD_ADDR_VAR 0 4
55386: PUSH
55387: DOUBLE
55388: LD_VAR 0 6
55392: INC
55393: ST_TO_ADDR
55394: LD_INT 1
55396: PUSH
55397: FOR_DOWNTO
55398: IFFALSE 55499
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55400: LD_VAR 0 6
55404: PUSH
55405: LD_VAR 0 4
55409: ARRAY
55410: PUSH
55411: LD_INT 1
55413: ARRAY
55414: PPUSH
55415: LD_VAR 0 6
55419: PUSH
55420: LD_VAR 0 4
55424: ARRAY
55425: PUSH
55426: LD_INT 2
55428: ARRAY
55429: PPUSH
55430: CALL_OW 488
55434: NOT
55435: PUSH
55436: LD_VAR 0 6
55440: PUSH
55441: LD_VAR 0 4
55445: ARRAY
55446: PUSH
55447: LD_INT 1
55449: ARRAY
55450: PPUSH
55451: LD_VAR 0 6
55455: PUSH
55456: LD_VAR 0 4
55460: ARRAY
55461: PUSH
55462: LD_INT 2
55464: ARRAY
55465: PPUSH
55466: CALL_OW 428
55470: PUSH
55471: LD_INT 0
55473: NONEQUAL
55474: OR
55475: IFFALSE 55497
// tmp := Delete ( tmp , i ) ;
55477: LD_ADDR_VAR 0 6
55481: PUSH
55482: LD_VAR 0 6
55486: PPUSH
55487: LD_VAR 0 4
55491: PPUSH
55492: CALL_OW 3
55496: ST_TO_ADDR
55497: GO 55397
55499: POP
55500: POP
// j := GetClosestHex ( unit , tmp ) ;
55501: LD_ADDR_VAR 0 5
55505: PUSH
55506: LD_VAR 0 1
55510: PPUSH
55511: LD_VAR 0 6
55515: PPUSH
55516: CALL 54792 0 2
55520: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55521: LD_VAR 0 1
55525: PPUSH
55526: LD_VAR 0 5
55530: PUSH
55531: LD_INT 1
55533: ARRAY
55534: PPUSH
55535: LD_VAR 0 5
55539: PUSH
55540: LD_INT 2
55542: ARRAY
55543: PPUSH
55544: CALL_OW 111
// end ;
55548: LD_VAR 0 3
55552: RET
// export function PrepareApemanSoldier ( ) ; begin
55553: LD_INT 0
55555: PPUSH
// uc_nation := 0 ;
55556: LD_ADDR_OWVAR 21
55560: PUSH
55561: LD_INT 0
55563: ST_TO_ADDR
// hc_sex := sex_male ;
55564: LD_ADDR_OWVAR 27
55568: PUSH
55569: LD_INT 1
55571: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55572: LD_ADDR_OWVAR 28
55576: PUSH
55577: LD_INT 15
55579: ST_TO_ADDR
// hc_gallery :=  ;
55580: LD_ADDR_OWVAR 33
55584: PUSH
55585: LD_STRING 
55587: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55588: LD_ADDR_OWVAR 31
55592: PUSH
55593: LD_INT 0
55595: PPUSH
55596: LD_INT 3
55598: PPUSH
55599: CALL_OW 12
55603: PUSH
55604: LD_INT 0
55606: PPUSH
55607: LD_INT 3
55609: PPUSH
55610: CALL_OW 12
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// end ;
55627: LD_VAR 0 1
55631: RET
// export function PrepareApemanEngineer ( ) ; begin
55632: LD_INT 0
55634: PPUSH
// uc_nation := 0 ;
55635: LD_ADDR_OWVAR 21
55639: PUSH
55640: LD_INT 0
55642: ST_TO_ADDR
// hc_sex := sex_male ;
55643: LD_ADDR_OWVAR 27
55647: PUSH
55648: LD_INT 1
55650: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55651: LD_ADDR_OWVAR 28
55655: PUSH
55656: LD_INT 16
55658: ST_TO_ADDR
// hc_gallery :=  ;
55659: LD_ADDR_OWVAR 33
55663: PUSH
55664: LD_STRING 
55666: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55667: LD_ADDR_OWVAR 31
55671: PUSH
55672: LD_INT 0
55674: PPUSH
55675: LD_INT 3
55677: PPUSH
55678: CALL_OW 12
55682: PUSH
55683: LD_INT 0
55685: PPUSH
55686: LD_INT 3
55688: PPUSH
55689: CALL_OW 12
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: ST_TO_ADDR
// end ;
55706: LD_VAR 0 1
55710: RET
// export function PrepareApeman ( agressivity ) ; begin
55711: LD_INT 0
55713: PPUSH
// uc_side := 0 ;
55714: LD_ADDR_OWVAR 20
55718: PUSH
55719: LD_INT 0
55721: ST_TO_ADDR
// uc_nation := 0 ;
55722: LD_ADDR_OWVAR 21
55726: PUSH
55727: LD_INT 0
55729: ST_TO_ADDR
// hc_sex := sex_male ;
55730: LD_ADDR_OWVAR 27
55734: PUSH
55735: LD_INT 1
55737: ST_TO_ADDR
// hc_class := class_apeman ;
55738: LD_ADDR_OWVAR 28
55742: PUSH
55743: LD_INT 12
55745: ST_TO_ADDR
// hc_gallery :=  ;
55746: LD_ADDR_OWVAR 33
55750: PUSH
55751: LD_STRING 
55753: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55754: LD_ADDR_OWVAR 35
55758: PUSH
55759: LD_VAR 0 1
55763: NEG
55764: PPUSH
55765: LD_VAR 0 1
55769: PPUSH
55770: CALL_OW 12
55774: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55775: LD_ADDR_OWVAR 31
55779: PUSH
55780: LD_INT 0
55782: PPUSH
55783: LD_INT 3
55785: PPUSH
55786: CALL_OW 12
55790: PUSH
55791: LD_INT 0
55793: PPUSH
55794: LD_INT 3
55796: PPUSH
55797: CALL_OW 12
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: ST_TO_ADDR
// end ;
55814: LD_VAR 0 2
55818: RET
// export function PrepareTiger ( agressivity ) ; begin
55819: LD_INT 0
55821: PPUSH
// uc_side := 0 ;
55822: LD_ADDR_OWVAR 20
55826: PUSH
55827: LD_INT 0
55829: ST_TO_ADDR
// uc_nation := 0 ;
55830: LD_ADDR_OWVAR 21
55834: PUSH
55835: LD_INT 0
55837: ST_TO_ADDR
// hc_class := class_tiger ;
55838: LD_ADDR_OWVAR 28
55842: PUSH
55843: LD_INT 14
55845: ST_TO_ADDR
// hc_gallery :=  ;
55846: LD_ADDR_OWVAR 33
55850: PUSH
55851: LD_STRING 
55853: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55854: LD_ADDR_OWVAR 35
55858: PUSH
55859: LD_VAR 0 1
55863: NEG
55864: PPUSH
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 12
55874: ST_TO_ADDR
// end ;
55875: LD_VAR 0 2
55879: RET
// export function PrepareEnchidna ( ) ; begin
55880: LD_INT 0
55882: PPUSH
// uc_side := 0 ;
55883: LD_ADDR_OWVAR 20
55887: PUSH
55888: LD_INT 0
55890: ST_TO_ADDR
// uc_nation := 0 ;
55891: LD_ADDR_OWVAR 21
55895: PUSH
55896: LD_INT 0
55898: ST_TO_ADDR
// hc_class := class_baggie ;
55899: LD_ADDR_OWVAR 28
55903: PUSH
55904: LD_INT 13
55906: ST_TO_ADDR
// hc_gallery :=  ;
55907: LD_ADDR_OWVAR 33
55911: PUSH
55912: LD_STRING 
55914: ST_TO_ADDR
// end ;
55915: LD_VAR 0 1
55919: RET
// export function PrepareFrog ( ) ; begin
55920: LD_INT 0
55922: PPUSH
// uc_side := 0 ;
55923: LD_ADDR_OWVAR 20
55927: PUSH
55928: LD_INT 0
55930: ST_TO_ADDR
// uc_nation := 0 ;
55931: LD_ADDR_OWVAR 21
55935: PUSH
55936: LD_INT 0
55938: ST_TO_ADDR
// hc_class := class_frog ;
55939: LD_ADDR_OWVAR 28
55943: PUSH
55944: LD_INT 19
55946: ST_TO_ADDR
// hc_gallery :=  ;
55947: LD_ADDR_OWVAR 33
55951: PUSH
55952: LD_STRING 
55954: ST_TO_ADDR
// end ;
55955: LD_VAR 0 1
55959: RET
// export function PrepareFish ( ) ; begin
55960: LD_INT 0
55962: PPUSH
// uc_side := 0 ;
55963: LD_ADDR_OWVAR 20
55967: PUSH
55968: LD_INT 0
55970: ST_TO_ADDR
// uc_nation := 0 ;
55971: LD_ADDR_OWVAR 21
55975: PUSH
55976: LD_INT 0
55978: ST_TO_ADDR
// hc_class := class_fish ;
55979: LD_ADDR_OWVAR 28
55983: PUSH
55984: LD_INT 20
55986: ST_TO_ADDR
// hc_gallery :=  ;
55987: LD_ADDR_OWVAR 33
55991: PUSH
55992: LD_STRING 
55994: ST_TO_ADDR
// end ;
55995: LD_VAR 0 1
55999: RET
// export function PrepareBird ( ) ; begin
56000: LD_INT 0
56002: PPUSH
// uc_side := 0 ;
56003: LD_ADDR_OWVAR 20
56007: PUSH
56008: LD_INT 0
56010: ST_TO_ADDR
// uc_nation := 0 ;
56011: LD_ADDR_OWVAR 21
56015: PUSH
56016: LD_INT 0
56018: ST_TO_ADDR
// hc_class := class_phororhacos ;
56019: LD_ADDR_OWVAR 28
56023: PUSH
56024: LD_INT 18
56026: ST_TO_ADDR
// hc_gallery :=  ;
56027: LD_ADDR_OWVAR 33
56031: PUSH
56032: LD_STRING 
56034: ST_TO_ADDR
// end ;
56035: LD_VAR 0 1
56039: RET
// export function PrepareHorse ( ) ; begin
56040: LD_INT 0
56042: PPUSH
// uc_side := 0 ;
56043: LD_ADDR_OWVAR 20
56047: PUSH
56048: LD_INT 0
56050: ST_TO_ADDR
// uc_nation := 0 ;
56051: LD_ADDR_OWVAR 21
56055: PUSH
56056: LD_INT 0
56058: ST_TO_ADDR
// hc_class := class_horse ;
56059: LD_ADDR_OWVAR 28
56063: PUSH
56064: LD_INT 21
56066: ST_TO_ADDR
// hc_gallery :=  ;
56067: LD_ADDR_OWVAR 33
56071: PUSH
56072: LD_STRING 
56074: ST_TO_ADDR
// end ;
56075: LD_VAR 0 1
56079: RET
// export function PrepareMastodont ( ) ; begin
56080: LD_INT 0
56082: PPUSH
// uc_side := 0 ;
56083: LD_ADDR_OWVAR 20
56087: PUSH
56088: LD_INT 0
56090: ST_TO_ADDR
// uc_nation := 0 ;
56091: LD_ADDR_OWVAR 21
56095: PUSH
56096: LD_INT 0
56098: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56099: LD_ADDR_OWVAR 37
56103: PUSH
56104: LD_INT 31
56106: ST_TO_ADDR
// vc_control := control_rider ;
56107: LD_ADDR_OWVAR 38
56111: PUSH
56112: LD_INT 4
56114: ST_TO_ADDR
// end ;
56115: LD_VAR 0 1
56119: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56120: LD_INT 0
56122: PPUSH
56123: PPUSH
56124: PPUSH
// uc_side = 0 ;
56125: LD_ADDR_OWVAR 20
56129: PUSH
56130: LD_INT 0
56132: ST_TO_ADDR
// uc_nation = 0 ;
56133: LD_ADDR_OWVAR 21
56137: PUSH
56138: LD_INT 0
56140: ST_TO_ADDR
// InitHc_All ( ) ;
56141: CALL_OW 584
// InitVc ;
56145: CALL_OW 20
// if mastodonts then
56149: LD_VAR 0 6
56153: IFFALSE 56220
// for i = 1 to mastodonts do
56155: LD_ADDR_VAR 0 11
56159: PUSH
56160: DOUBLE
56161: LD_INT 1
56163: DEC
56164: ST_TO_ADDR
56165: LD_VAR 0 6
56169: PUSH
56170: FOR_TO
56171: IFFALSE 56218
// begin vc_chassis := 31 ;
56173: LD_ADDR_OWVAR 37
56177: PUSH
56178: LD_INT 31
56180: ST_TO_ADDR
// vc_control := control_rider ;
56181: LD_ADDR_OWVAR 38
56185: PUSH
56186: LD_INT 4
56188: ST_TO_ADDR
// animal := CreateVehicle ;
56189: LD_ADDR_VAR 0 12
56193: PUSH
56194: CALL_OW 45
56198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56199: LD_VAR 0 12
56203: PPUSH
56204: LD_VAR 0 8
56208: PPUSH
56209: LD_INT 0
56211: PPUSH
56212: CALL 58348 0 3
// end ;
56216: GO 56170
56218: POP
56219: POP
// if horses then
56220: LD_VAR 0 5
56224: IFFALSE 56291
// for i = 1 to horses do
56226: LD_ADDR_VAR 0 11
56230: PUSH
56231: DOUBLE
56232: LD_INT 1
56234: DEC
56235: ST_TO_ADDR
56236: LD_VAR 0 5
56240: PUSH
56241: FOR_TO
56242: IFFALSE 56289
// begin hc_class := 21 ;
56244: LD_ADDR_OWVAR 28
56248: PUSH
56249: LD_INT 21
56251: ST_TO_ADDR
// hc_gallery :=  ;
56252: LD_ADDR_OWVAR 33
56256: PUSH
56257: LD_STRING 
56259: ST_TO_ADDR
// animal := CreateHuman ;
56260: LD_ADDR_VAR 0 12
56264: PUSH
56265: CALL_OW 44
56269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56270: LD_VAR 0 12
56274: PPUSH
56275: LD_VAR 0 8
56279: PPUSH
56280: LD_INT 0
56282: PPUSH
56283: CALL 58348 0 3
// end ;
56287: GO 56241
56289: POP
56290: POP
// if birds then
56291: LD_VAR 0 1
56295: IFFALSE 56362
// for i = 1 to birds do
56297: LD_ADDR_VAR 0 11
56301: PUSH
56302: DOUBLE
56303: LD_INT 1
56305: DEC
56306: ST_TO_ADDR
56307: LD_VAR 0 1
56311: PUSH
56312: FOR_TO
56313: IFFALSE 56360
// begin hc_class := 18 ;
56315: LD_ADDR_OWVAR 28
56319: PUSH
56320: LD_INT 18
56322: ST_TO_ADDR
// hc_gallery =  ;
56323: LD_ADDR_OWVAR 33
56327: PUSH
56328: LD_STRING 
56330: ST_TO_ADDR
// animal := CreateHuman ;
56331: LD_ADDR_VAR 0 12
56335: PUSH
56336: CALL_OW 44
56340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56341: LD_VAR 0 12
56345: PPUSH
56346: LD_VAR 0 8
56350: PPUSH
56351: LD_INT 0
56353: PPUSH
56354: CALL 58348 0 3
// end ;
56358: GO 56312
56360: POP
56361: POP
// if tigers then
56362: LD_VAR 0 2
56366: IFFALSE 56450
// for i = 1 to tigers do
56368: LD_ADDR_VAR 0 11
56372: PUSH
56373: DOUBLE
56374: LD_INT 1
56376: DEC
56377: ST_TO_ADDR
56378: LD_VAR 0 2
56382: PUSH
56383: FOR_TO
56384: IFFALSE 56448
// begin hc_class = class_tiger ;
56386: LD_ADDR_OWVAR 28
56390: PUSH
56391: LD_INT 14
56393: ST_TO_ADDR
// hc_gallery =  ;
56394: LD_ADDR_OWVAR 33
56398: PUSH
56399: LD_STRING 
56401: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56402: LD_ADDR_OWVAR 35
56406: PUSH
56407: LD_INT 7
56409: NEG
56410: PPUSH
56411: LD_INT 7
56413: PPUSH
56414: CALL_OW 12
56418: ST_TO_ADDR
// animal := CreateHuman ;
56419: LD_ADDR_VAR 0 12
56423: PUSH
56424: CALL_OW 44
56428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56429: LD_VAR 0 12
56433: PPUSH
56434: LD_VAR 0 8
56438: PPUSH
56439: LD_INT 0
56441: PPUSH
56442: CALL 58348 0 3
// end ;
56446: GO 56383
56448: POP
56449: POP
// if apemans then
56450: LD_VAR 0 3
56454: IFFALSE 56577
// for i = 1 to apemans do
56456: LD_ADDR_VAR 0 11
56460: PUSH
56461: DOUBLE
56462: LD_INT 1
56464: DEC
56465: ST_TO_ADDR
56466: LD_VAR 0 3
56470: PUSH
56471: FOR_TO
56472: IFFALSE 56575
// begin hc_class = class_apeman ;
56474: LD_ADDR_OWVAR 28
56478: PUSH
56479: LD_INT 12
56481: ST_TO_ADDR
// hc_gallery =  ;
56482: LD_ADDR_OWVAR 33
56486: PUSH
56487: LD_STRING 
56489: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56490: LD_ADDR_OWVAR 35
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PPUSH
56499: LD_INT 2
56501: PPUSH
56502: CALL_OW 12
56506: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56507: LD_ADDR_OWVAR 31
56511: PUSH
56512: LD_INT 1
56514: PPUSH
56515: LD_INT 3
56517: PPUSH
56518: CALL_OW 12
56522: PUSH
56523: LD_INT 1
56525: PPUSH
56526: LD_INT 3
56528: PPUSH
56529: CALL_OW 12
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: ST_TO_ADDR
// animal := CreateHuman ;
56546: LD_ADDR_VAR 0 12
56550: PUSH
56551: CALL_OW 44
56555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56556: LD_VAR 0 12
56560: PPUSH
56561: LD_VAR 0 8
56565: PPUSH
56566: LD_INT 0
56568: PPUSH
56569: CALL 58348 0 3
// end ;
56573: GO 56471
56575: POP
56576: POP
// if enchidnas then
56577: LD_VAR 0 4
56581: IFFALSE 56648
// for i = 1 to enchidnas do
56583: LD_ADDR_VAR 0 11
56587: PUSH
56588: DOUBLE
56589: LD_INT 1
56591: DEC
56592: ST_TO_ADDR
56593: LD_VAR 0 4
56597: PUSH
56598: FOR_TO
56599: IFFALSE 56646
// begin hc_class = 13 ;
56601: LD_ADDR_OWVAR 28
56605: PUSH
56606: LD_INT 13
56608: ST_TO_ADDR
// hc_gallery =  ;
56609: LD_ADDR_OWVAR 33
56613: PUSH
56614: LD_STRING 
56616: ST_TO_ADDR
// animal := CreateHuman ;
56617: LD_ADDR_VAR 0 12
56621: PUSH
56622: CALL_OW 44
56626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56627: LD_VAR 0 12
56631: PPUSH
56632: LD_VAR 0 8
56636: PPUSH
56637: LD_INT 0
56639: PPUSH
56640: CALL 58348 0 3
// end ;
56644: GO 56598
56646: POP
56647: POP
// if fishes then
56648: LD_VAR 0 7
56652: IFFALSE 56719
// for i = 1 to fishes do
56654: LD_ADDR_VAR 0 11
56658: PUSH
56659: DOUBLE
56660: LD_INT 1
56662: DEC
56663: ST_TO_ADDR
56664: LD_VAR 0 7
56668: PUSH
56669: FOR_TO
56670: IFFALSE 56717
// begin hc_class = 20 ;
56672: LD_ADDR_OWVAR 28
56676: PUSH
56677: LD_INT 20
56679: ST_TO_ADDR
// hc_gallery =  ;
56680: LD_ADDR_OWVAR 33
56684: PUSH
56685: LD_STRING 
56687: ST_TO_ADDR
// animal := CreateHuman ;
56688: LD_ADDR_VAR 0 12
56692: PUSH
56693: CALL_OW 44
56697: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56698: LD_VAR 0 12
56702: PPUSH
56703: LD_VAR 0 9
56707: PPUSH
56708: LD_INT 0
56710: PPUSH
56711: CALL 58348 0 3
// end ;
56715: GO 56669
56717: POP
56718: POP
// end ;
56719: LD_VAR 0 10
56723: RET
// export function WantHeal ( sci , unit ) ; begin
56724: LD_INT 0
56726: PPUSH
// if GetTaskList ( sci ) > 0 then
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 437
56736: PUSH
56737: LD_INT 0
56739: GREATER
56740: IFFALSE 56810
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56742: LD_VAR 0 1
56746: PPUSH
56747: CALL_OW 437
56751: PUSH
56752: LD_INT 1
56754: ARRAY
56755: PUSH
56756: LD_INT 1
56758: ARRAY
56759: PUSH
56760: LD_STRING l
56762: EQUAL
56763: PUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 437
56773: PUSH
56774: LD_INT 1
56776: ARRAY
56777: PUSH
56778: LD_INT 4
56780: ARRAY
56781: PUSH
56782: LD_VAR 0 2
56786: EQUAL
56787: AND
56788: IFFALSE 56800
// result := true else
56790: LD_ADDR_VAR 0 3
56794: PUSH
56795: LD_INT 1
56797: ST_TO_ADDR
56798: GO 56808
// result := false ;
56800: LD_ADDR_VAR 0 3
56804: PUSH
56805: LD_INT 0
56807: ST_TO_ADDR
// end else
56808: GO 56818
// result := false ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_INT 0
56817: ST_TO_ADDR
// end ;
56818: LD_VAR 0 3
56822: RET
// export function HealTarget ( sci ) ; begin
56823: LD_INT 0
56825: PPUSH
// if not sci then
56826: LD_VAR 0 1
56830: NOT
56831: IFFALSE 56835
// exit ;
56833: GO 56900
// result := 0 ;
56835: LD_ADDR_VAR 0 2
56839: PUSH
56840: LD_INT 0
56842: ST_TO_ADDR
// if GetTaskList ( sci ) then
56843: LD_VAR 0 1
56847: PPUSH
56848: CALL_OW 437
56852: IFFALSE 56900
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56854: LD_VAR 0 1
56858: PPUSH
56859: CALL_OW 437
56863: PUSH
56864: LD_INT 1
56866: ARRAY
56867: PUSH
56868: LD_INT 1
56870: ARRAY
56871: PUSH
56872: LD_STRING l
56874: EQUAL
56875: IFFALSE 56900
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56877: LD_ADDR_VAR 0 2
56881: PUSH
56882: LD_VAR 0 1
56886: PPUSH
56887: CALL_OW 437
56891: PUSH
56892: LD_INT 1
56894: ARRAY
56895: PUSH
56896: LD_INT 4
56898: ARRAY
56899: ST_TO_ADDR
// end ;
56900: LD_VAR 0 2
56904: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56905: LD_INT 0
56907: PPUSH
56908: PPUSH
56909: PPUSH
56910: PPUSH
// if not base_units then
56911: LD_VAR 0 1
56915: NOT
56916: IFFALSE 56920
// exit ;
56918: GO 57007
// result := false ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_INT 0
56927: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56928: LD_ADDR_VAR 0 5
56932: PUSH
56933: LD_VAR 0 1
56937: PPUSH
56938: LD_INT 21
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PPUSH
56948: CALL_OW 72
56952: ST_TO_ADDR
// if not tmp then
56953: LD_VAR 0 5
56957: NOT
56958: IFFALSE 56962
// exit ;
56960: GO 57007
// for i in tmp do
56962: LD_ADDR_VAR 0 3
56966: PUSH
56967: LD_VAR 0 5
56971: PUSH
56972: FOR_IN
56973: IFFALSE 57005
// begin result := EnemyInRange ( i , 22 ) ;
56975: LD_ADDR_VAR 0 2
56979: PUSH
56980: LD_VAR 0 3
56984: PPUSH
56985: LD_INT 22
56987: PPUSH
56988: CALL 54594 0 2
56992: ST_TO_ADDR
// if result then
56993: LD_VAR 0 2
56997: IFFALSE 57003
// exit ;
56999: POP
57000: POP
57001: GO 57007
// end ;
57003: GO 56972
57005: POP
57006: POP
// end ;
57007: LD_VAR 0 2
57011: RET
// export function FilterByTag ( units , tag ) ; begin
57012: LD_INT 0
57014: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57015: LD_ADDR_VAR 0 3
57019: PUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: LD_INT 120
57027: PUSH
57028: LD_VAR 0 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PPUSH
57037: CALL_OW 72
57041: ST_TO_ADDR
// end ;
57042: LD_VAR 0 3
57046: RET
// export function IsDriver ( un ) ; begin
57047: LD_INT 0
57049: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57050: LD_ADDR_VAR 0 2
57054: PUSH
57055: LD_VAR 0 1
57059: PUSH
57060: LD_INT 55
57062: PUSH
57063: EMPTY
57064: LIST
57065: PPUSH
57066: CALL_OW 69
57070: IN
57071: ST_TO_ADDR
// end ;
57072: LD_VAR 0 2
57076: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57077: LD_INT 0
57079: PPUSH
57080: PPUSH
// list := [ ] ;
57081: LD_ADDR_VAR 0 5
57085: PUSH
57086: EMPTY
57087: ST_TO_ADDR
// case d of 0 :
57088: LD_VAR 0 3
57092: PUSH
57093: LD_INT 0
57095: DOUBLE
57096: EQUAL
57097: IFTRUE 57101
57099: GO 57234
57101: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57102: LD_ADDR_VAR 0 5
57106: PUSH
57107: LD_VAR 0 1
57111: PUSH
57112: LD_INT 4
57114: MINUS
57115: PUSH
57116: LD_VAR 0 2
57120: PUSH
57121: LD_INT 4
57123: MINUS
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: PUSH
57133: LD_VAR 0 1
57137: PUSH
57138: LD_INT 3
57140: MINUS
57141: PUSH
57142: LD_VAR 0 2
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: PUSH
57155: LD_VAR 0 1
57159: PUSH
57160: LD_INT 4
57162: PLUS
57163: PUSH
57164: LD_VAR 0 2
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: PUSH
57177: LD_VAR 0 1
57181: PUSH
57182: LD_INT 3
57184: PLUS
57185: PUSH
57186: LD_VAR 0 2
57190: PUSH
57191: LD_INT 3
57193: PLUS
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: PUSH
57203: LD_VAR 0 1
57207: PUSH
57208: LD_VAR 0 2
57212: PUSH
57213: LD_INT 4
57215: PLUS
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: ST_TO_ADDR
// end ; 1 :
57232: GO 57932
57234: LD_INT 1
57236: DOUBLE
57237: EQUAL
57238: IFTRUE 57242
57240: GO 57375
57242: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57243: LD_ADDR_VAR 0 5
57247: PUSH
57248: LD_VAR 0 1
57252: PUSH
57253: LD_VAR 0 2
57257: PUSH
57258: LD_INT 4
57260: MINUS
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: PUSH
57270: LD_VAR 0 1
57274: PUSH
57275: LD_INT 3
57277: MINUS
57278: PUSH
57279: LD_VAR 0 2
57283: PUSH
57284: LD_INT 3
57286: MINUS
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: LIST
57295: PUSH
57296: LD_VAR 0 1
57300: PUSH
57301: LD_INT 4
57303: MINUS
57304: PUSH
57305: LD_VAR 0 2
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: PUSH
57318: LD_VAR 0 1
57322: PUSH
57323: LD_VAR 0 2
57327: PUSH
57328: LD_INT 3
57330: PLUS
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: PUSH
57340: LD_VAR 0 1
57344: PUSH
57345: LD_INT 4
57347: PLUS
57348: PUSH
57349: LD_VAR 0 2
57353: PUSH
57354: LD_INT 4
57356: PLUS
57357: PUSH
57358: LD_INT 5
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// end ; 2 :
57373: GO 57932
57375: LD_INT 2
57377: DOUBLE
57378: EQUAL
57379: IFTRUE 57383
57381: GO 57512
57383: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57384: LD_ADDR_VAR 0 5
57388: PUSH
57389: LD_VAR 0 1
57393: PUSH
57394: LD_VAR 0 2
57398: PUSH
57399: LD_INT 3
57401: MINUS
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: PUSH
57411: LD_VAR 0 1
57415: PUSH
57416: LD_INT 4
57418: PLUS
57419: PUSH
57420: LD_VAR 0 2
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: LIST
57432: PUSH
57433: LD_VAR 0 1
57437: PUSH
57438: LD_VAR 0 2
57442: PUSH
57443: LD_INT 4
57445: PLUS
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: PUSH
57455: LD_VAR 0 1
57459: PUSH
57460: LD_INT 3
57462: MINUS
57463: PUSH
57464: LD_VAR 0 2
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: PUSH
57477: LD_VAR 0 1
57481: PUSH
57482: LD_INT 4
57484: MINUS
57485: PUSH
57486: LD_VAR 0 2
57490: PUSH
57491: LD_INT 4
57493: MINUS
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// end ; 3 :
57510: GO 57932
57512: LD_INT 3
57514: DOUBLE
57515: EQUAL
57516: IFTRUE 57520
57518: GO 57653
57520: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57521: LD_ADDR_VAR 0 5
57525: PUSH
57526: LD_VAR 0 1
57530: PUSH
57531: LD_INT 3
57533: PLUS
57534: PUSH
57535: LD_VAR 0 2
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: LIST
57547: PUSH
57548: LD_VAR 0 1
57552: PUSH
57553: LD_INT 4
57555: PLUS
57556: PUSH
57557: LD_VAR 0 2
57561: PUSH
57562: LD_INT 4
57564: PLUS
57565: PUSH
57566: LD_INT 5
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: PUSH
57574: LD_VAR 0 1
57578: PUSH
57579: LD_INT 4
57581: MINUS
57582: PUSH
57583: LD_VAR 0 2
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: LIST
57595: PUSH
57596: LD_VAR 0 1
57600: PUSH
57601: LD_VAR 0 2
57605: PUSH
57606: LD_INT 4
57608: MINUS
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: PUSH
57618: LD_VAR 0 1
57622: PUSH
57623: LD_INT 3
57625: MINUS
57626: PUSH
57627: LD_VAR 0 2
57631: PUSH
57632: LD_INT 3
57634: MINUS
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// end ; 4 :
57651: GO 57932
57653: LD_INT 4
57655: DOUBLE
57656: EQUAL
57657: IFTRUE 57661
57659: GO 57794
57661: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57662: LD_ADDR_VAR 0 5
57666: PUSH
57667: LD_VAR 0 1
57671: PUSH
57672: LD_VAR 0 2
57676: PUSH
57677: LD_INT 4
57679: PLUS
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: PUSH
57689: LD_VAR 0 1
57693: PUSH
57694: LD_INT 3
57696: PLUS
57697: PUSH
57698: LD_VAR 0 2
57702: PUSH
57703: LD_INT 3
57705: PLUS
57706: PUSH
57707: LD_INT 5
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: PUSH
57715: LD_VAR 0 1
57719: PUSH
57720: LD_INT 4
57722: PLUS
57723: PUSH
57724: LD_VAR 0 2
57728: PUSH
57729: LD_INT 4
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: PUSH
57737: LD_VAR 0 1
57741: PUSH
57742: LD_VAR 0 2
57746: PUSH
57747: LD_INT 3
57749: MINUS
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: PUSH
57759: LD_VAR 0 1
57763: PUSH
57764: LD_INT 4
57766: MINUS
57767: PUSH
57768: LD_VAR 0 2
57772: PUSH
57773: LD_INT 4
57775: MINUS
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// end ; 5 :
57792: GO 57932
57794: LD_INT 5
57796: DOUBLE
57797: EQUAL
57798: IFTRUE 57802
57800: GO 57931
57802: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57803: LD_ADDR_VAR 0 5
57807: PUSH
57808: LD_VAR 0 1
57812: PUSH
57813: LD_INT 4
57815: MINUS
57816: PUSH
57817: LD_VAR 0 2
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: LIST
57829: PUSH
57830: LD_VAR 0 1
57834: PUSH
57835: LD_VAR 0 2
57839: PUSH
57840: LD_INT 4
57842: MINUS
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: LIST
57851: PUSH
57852: LD_VAR 0 1
57856: PUSH
57857: LD_INT 4
57859: PLUS
57860: PUSH
57861: LD_VAR 0 2
57865: PUSH
57866: LD_INT 4
57868: PLUS
57869: PUSH
57870: LD_INT 5
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: PUSH
57878: LD_VAR 0 1
57882: PUSH
57883: LD_INT 3
57885: PLUS
57886: PUSH
57887: LD_VAR 0 2
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: PUSH
57900: LD_VAR 0 1
57904: PUSH
57905: LD_VAR 0 2
57909: PUSH
57910: LD_INT 3
57912: PLUS
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// end ; end ;
57929: GO 57932
57931: POP
// result := list ;
57932: LD_ADDR_VAR 0 4
57936: PUSH
57937: LD_VAR 0 5
57941: ST_TO_ADDR
// end ;
57942: LD_VAR 0 4
57946: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57947: LD_INT 0
57949: PPUSH
57950: PPUSH
57951: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57952: LD_VAR 0 1
57956: NOT
57957: PUSH
57958: LD_VAR 0 2
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 4
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: IN
57981: NOT
57982: OR
57983: IFFALSE 57987
// exit ;
57985: GO 58070
// tmp := [ ] ;
57987: LD_ADDR_VAR 0 5
57991: PUSH
57992: EMPTY
57993: ST_TO_ADDR
// for i in units do
57994: LD_ADDR_VAR 0 4
57998: PUSH
57999: LD_VAR 0 1
58003: PUSH
58004: FOR_IN
58005: IFFALSE 58039
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58007: LD_ADDR_VAR 0 5
58011: PUSH
58012: LD_VAR 0 5
58016: PPUSH
58017: LD_VAR 0 4
58021: PPUSH
58022: LD_VAR 0 2
58026: PPUSH
58027: CALL_OW 259
58031: PPUSH
58032: CALL 59430 0 2
58036: ST_TO_ADDR
58037: GO 58004
58039: POP
58040: POP
// if not tmp then
58041: LD_VAR 0 5
58045: NOT
58046: IFFALSE 58050
// exit ;
58048: GO 58070
// result := SortListByListDesc ( units , tmp ) ;
58050: LD_ADDR_VAR 0 3
58054: PUSH
58055: LD_VAR 0 1
58059: PPUSH
58060: LD_VAR 0 5
58064: PPUSH
58065: CALL_OW 77
58069: ST_TO_ADDR
// end ;
58070: LD_VAR 0 3
58074: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58075: LD_INT 0
58077: PPUSH
58078: PPUSH
58079: PPUSH
// result := false ;
58080: LD_ADDR_VAR 0 3
58084: PUSH
58085: LD_INT 0
58087: ST_TO_ADDR
// if not building then
58088: LD_VAR 0 2
58092: NOT
58093: IFFALSE 58097
// exit ;
58095: GO 58235
// x := GetX ( building ) ;
58097: LD_ADDR_VAR 0 4
58101: PUSH
58102: LD_VAR 0 2
58106: PPUSH
58107: CALL_OW 250
58111: ST_TO_ADDR
// y := GetY ( building ) ;
58112: LD_ADDR_VAR 0 5
58116: PUSH
58117: LD_VAR 0 2
58121: PPUSH
58122: CALL_OW 251
58126: ST_TO_ADDR
// if not x or not y then
58127: LD_VAR 0 4
58131: NOT
58132: PUSH
58133: LD_VAR 0 5
58137: NOT
58138: OR
58139: IFFALSE 58143
// exit ;
58141: GO 58235
// if GetTaskList ( unit ) then
58143: LD_VAR 0 1
58147: PPUSH
58148: CALL_OW 437
58152: IFFALSE 58235
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58154: LD_STRING e
58156: PUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 437
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PUSH
58171: LD_INT 1
58173: ARRAY
58174: EQUAL
58175: PUSH
58176: LD_VAR 0 4
58180: PUSH
58181: LD_VAR 0 1
58185: PPUSH
58186: CALL_OW 437
58190: PUSH
58191: LD_INT 1
58193: ARRAY
58194: PUSH
58195: LD_INT 2
58197: ARRAY
58198: EQUAL
58199: AND
58200: PUSH
58201: LD_VAR 0 5
58205: PUSH
58206: LD_VAR 0 1
58210: PPUSH
58211: CALL_OW 437
58215: PUSH
58216: LD_INT 1
58218: ARRAY
58219: PUSH
58220: LD_INT 3
58222: ARRAY
58223: EQUAL
58224: AND
58225: IFFALSE 58235
// result := true end ;
58227: LD_ADDR_VAR 0 3
58231: PUSH
58232: LD_INT 1
58234: ST_TO_ADDR
// end ;
58235: LD_VAR 0 3
58239: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58240: LD_INT 0
58242: PPUSH
// result := false ;
58243: LD_ADDR_VAR 0 4
58247: PUSH
58248: LD_INT 0
58250: ST_TO_ADDR
// if GetTaskList ( unit ) then
58251: LD_VAR 0 1
58255: PPUSH
58256: CALL_OW 437
58260: IFFALSE 58343
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58262: LD_STRING M
58264: PUSH
58265: LD_VAR 0 1
58269: PPUSH
58270: CALL_OW 437
58274: PUSH
58275: LD_INT 1
58277: ARRAY
58278: PUSH
58279: LD_INT 1
58281: ARRAY
58282: EQUAL
58283: PUSH
58284: LD_VAR 0 2
58288: PUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: CALL_OW 437
58298: PUSH
58299: LD_INT 1
58301: ARRAY
58302: PUSH
58303: LD_INT 2
58305: ARRAY
58306: EQUAL
58307: AND
58308: PUSH
58309: LD_VAR 0 3
58313: PUSH
58314: LD_VAR 0 1
58318: PPUSH
58319: CALL_OW 437
58323: PUSH
58324: LD_INT 1
58326: ARRAY
58327: PUSH
58328: LD_INT 3
58330: ARRAY
58331: EQUAL
58332: AND
58333: IFFALSE 58343
// result := true ;
58335: LD_ADDR_VAR 0 4
58339: PUSH
58340: LD_INT 1
58342: ST_TO_ADDR
// end ; end ;
58343: LD_VAR 0 4
58347: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58348: LD_INT 0
58350: PPUSH
58351: PPUSH
58352: PPUSH
58353: PPUSH
// if not unit or not area then
58354: LD_VAR 0 1
58358: NOT
58359: PUSH
58360: LD_VAR 0 2
58364: NOT
58365: OR
58366: IFFALSE 58370
// exit ;
58368: GO 58533
// tmp := AreaToList ( area , i ) ;
58370: LD_ADDR_VAR 0 6
58374: PUSH
58375: LD_VAR 0 2
58379: PPUSH
58380: LD_VAR 0 5
58384: PPUSH
58385: CALL_OW 517
58389: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58390: LD_ADDR_VAR 0 5
58394: PUSH
58395: DOUBLE
58396: LD_INT 1
58398: DEC
58399: ST_TO_ADDR
58400: LD_VAR 0 6
58404: PUSH
58405: LD_INT 1
58407: ARRAY
58408: PUSH
58409: FOR_TO
58410: IFFALSE 58531
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58412: LD_ADDR_VAR 0 7
58416: PUSH
58417: LD_VAR 0 6
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: PUSH
58426: LD_VAR 0 5
58430: ARRAY
58431: PUSH
58432: LD_VAR 0 6
58436: PUSH
58437: LD_INT 2
58439: ARRAY
58440: PUSH
58441: LD_VAR 0 5
58445: ARRAY
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
58451: LD_INT 92
58453: PUSH
58454: LD_VAR 0 7
58458: PUSH
58459: LD_INT 1
58461: ARRAY
58462: PUSH
58463: LD_VAR 0 7
58467: PUSH
58468: LD_INT 2
58470: ARRAY
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: PPUSH
58481: CALL_OW 69
58485: PUSH
58486: LD_INT 0
58488: EQUAL
58489: IFFALSE 58529
// begin PlaceUnitArea ( unit , area , mode ) ;
58491: LD_VAR 0 1
58495: PPUSH
58496: LD_VAR 0 2
58500: PPUSH
58501: LD_VAR 0 3
58505: PPUSH
58506: CALL_OW 49
// result := IsPlaced ( unit ) ;
58510: LD_ADDR_VAR 0 4
58514: PUSH
58515: LD_VAR 0 1
58519: PPUSH
58520: CALL_OW 305
58524: ST_TO_ADDR
// exit ;
58525: POP
58526: POP
58527: GO 58533
// end ; end ;
58529: GO 58409
58531: POP
58532: POP
// end ;
58533: LD_VAR 0 4
58537: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58538: LD_INT 0
58540: PPUSH
58541: PPUSH
58542: PPUSH
// if not side or side > 8 then
58543: LD_VAR 0 1
58547: NOT
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: LD_INT 8
58556: GREATER
58557: OR
58558: IFFALSE 58562
// exit ;
58560: GO 58749
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58562: LD_ADDR_VAR 0 4
58566: PUSH
58567: LD_INT 22
58569: PUSH
58570: LD_VAR 0 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 21
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PPUSH
58593: CALL_OW 69
58597: ST_TO_ADDR
// if not tmp then
58598: LD_VAR 0 4
58602: NOT
58603: IFFALSE 58607
// exit ;
58605: GO 58749
// enable_addtolog := true ;
58607: LD_ADDR_OWVAR 81
58611: PUSH
58612: LD_INT 1
58614: ST_TO_ADDR
// AddToLog ( [ ) ;
58615: LD_STRING [
58617: PPUSH
58618: CALL_OW 561
// for i in tmp do
58622: LD_ADDR_VAR 0 3
58626: PUSH
58627: LD_VAR 0 4
58631: PUSH
58632: FOR_IN
58633: IFFALSE 58740
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58635: LD_STRING [
58637: PUSH
58638: LD_VAR 0 3
58642: PPUSH
58643: CALL_OW 266
58647: STR
58648: PUSH
58649: LD_STRING , 
58651: STR
58652: PUSH
58653: LD_VAR 0 3
58657: PPUSH
58658: CALL_OW 250
58662: STR
58663: PUSH
58664: LD_STRING , 
58666: STR
58667: PUSH
58668: LD_VAR 0 3
58672: PPUSH
58673: CALL_OW 251
58677: STR
58678: PUSH
58679: LD_STRING , 
58681: STR
58682: PUSH
58683: LD_VAR 0 3
58687: PPUSH
58688: CALL_OW 254
58692: STR
58693: PUSH
58694: LD_STRING , 
58696: STR
58697: PUSH
58698: LD_VAR 0 3
58702: PPUSH
58703: LD_INT 1
58705: PPUSH
58706: CALL_OW 268
58710: STR
58711: PUSH
58712: LD_STRING , 
58714: STR
58715: PUSH
58716: LD_VAR 0 3
58720: PPUSH
58721: LD_INT 2
58723: PPUSH
58724: CALL_OW 268
58728: STR
58729: PUSH
58730: LD_STRING ],
58732: STR
58733: PPUSH
58734: CALL_OW 561
// end ;
58738: GO 58632
58740: POP
58741: POP
// AddToLog ( ]; ) ;
58742: LD_STRING ];
58744: PPUSH
58745: CALL_OW 561
// end ;
58749: LD_VAR 0 2
58753: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58754: LD_INT 0
58756: PPUSH
58757: PPUSH
58758: PPUSH
58759: PPUSH
58760: PPUSH
// if not area or not rate or not max then
58761: LD_VAR 0 1
58765: NOT
58766: PUSH
58767: LD_VAR 0 2
58771: NOT
58772: OR
58773: PUSH
58774: LD_VAR 0 4
58778: NOT
58779: OR
58780: IFFALSE 58784
// exit ;
58782: GO 58973
// while 1 do
58784: LD_INT 1
58786: IFFALSE 58973
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58788: LD_ADDR_VAR 0 9
58792: PUSH
58793: LD_VAR 0 1
58797: PPUSH
58798: LD_INT 1
58800: PPUSH
58801: CALL_OW 287
58805: PUSH
58806: LD_INT 10
58808: MUL
58809: ST_TO_ADDR
// r := rate / 10 ;
58810: LD_ADDR_VAR 0 7
58814: PUSH
58815: LD_VAR 0 2
58819: PUSH
58820: LD_INT 10
58822: DIVREAL
58823: ST_TO_ADDR
// time := 1 1$00 ;
58824: LD_ADDR_VAR 0 8
58828: PUSH
58829: LD_INT 2100
58831: ST_TO_ADDR
// if amount < min then
58832: LD_VAR 0 9
58836: PUSH
58837: LD_VAR 0 3
58841: LESS
58842: IFFALSE 58860
// r := r * 2 else
58844: LD_ADDR_VAR 0 7
58848: PUSH
58849: LD_VAR 0 7
58853: PUSH
58854: LD_INT 2
58856: MUL
58857: ST_TO_ADDR
58858: GO 58886
// if amount > max then
58860: LD_VAR 0 9
58864: PUSH
58865: LD_VAR 0 4
58869: GREATER
58870: IFFALSE 58886
// r := r / 2 ;
58872: LD_ADDR_VAR 0 7
58876: PUSH
58877: LD_VAR 0 7
58881: PUSH
58882: LD_INT 2
58884: DIVREAL
58885: ST_TO_ADDR
// time := time / r ;
58886: LD_ADDR_VAR 0 8
58890: PUSH
58891: LD_VAR 0 8
58895: PUSH
58896: LD_VAR 0 7
58900: DIVREAL
58901: ST_TO_ADDR
// if time < 0 then
58902: LD_VAR 0 8
58906: PUSH
58907: LD_INT 0
58909: LESS
58910: IFFALSE 58927
// time := time * - 1 ;
58912: LD_ADDR_VAR 0 8
58916: PUSH
58917: LD_VAR 0 8
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: MUL
58926: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58927: LD_VAR 0 8
58931: PUSH
58932: LD_INT 35
58934: PPUSH
58935: LD_INT 875
58937: PPUSH
58938: CALL_OW 12
58942: PLUS
58943: PPUSH
58944: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58948: LD_INT 1
58950: PPUSH
58951: LD_INT 5
58953: PPUSH
58954: CALL_OW 12
58958: PPUSH
58959: LD_VAR 0 1
58963: PPUSH
58964: LD_INT 1
58966: PPUSH
58967: CALL_OW 55
// end ;
58971: GO 58784
// end ;
58973: LD_VAR 0 5
58977: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58978: LD_INT 0
58980: PPUSH
58981: PPUSH
58982: PPUSH
58983: PPUSH
58984: PPUSH
58985: PPUSH
58986: PPUSH
58987: PPUSH
// if not turrets or not factories then
58988: LD_VAR 0 1
58992: NOT
58993: PUSH
58994: LD_VAR 0 2
58998: NOT
58999: OR
59000: IFFALSE 59004
// exit ;
59002: GO 59311
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59004: LD_ADDR_VAR 0 10
59008: PUSH
59009: LD_INT 5
59011: PUSH
59012: LD_INT 6
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 4
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: LD_INT 5
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 24
59046: PUSH
59047: LD_INT 25
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 23
59056: PUSH
59057: LD_INT 27
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 42
59070: PUSH
59071: LD_INT 43
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 44
59080: PUSH
59081: LD_INT 46
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 45
59090: PUSH
59091: LD_INT 47
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: ST_TO_ADDR
// result := [ ] ;
59108: LD_ADDR_VAR 0 3
59112: PUSH
59113: EMPTY
59114: ST_TO_ADDR
// for i in turrets do
59115: LD_ADDR_VAR 0 4
59119: PUSH
59120: LD_VAR 0 1
59124: PUSH
59125: FOR_IN
59126: IFFALSE 59309
// begin nat := GetNation ( i ) ;
59128: LD_ADDR_VAR 0 7
59132: PUSH
59133: LD_VAR 0 4
59137: PPUSH
59138: CALL_OW 248
59142: ST_TO_ADDR
// weapon := 0 ;
59143: LD_ADDR_VAR 0 8
59147: PUSH
59148: LD_INT 0
59150: ST_TO_ADDR
// if not nat then
59151: LD_VAR 0 7
59155: NOT
59156: IFFALSE 59160
// continue ;
59158: GO 59125
// for j in list [ nat ] do
59160: LD_ADDR_VAR 0 5
59164: PUSH
59165: LD_VAR 0 10
59169: PUSH
59170: LD_VAR 0 7
59174: ARRAY
59175: PUSH
59176: FOR_IN
59177: IFFALSE 59218
// if GetBWeapon ( i ) = j [ 1 ] then
59179: LD_VAR 0 4
59183: PPUSH
59184: CALL_OW 269
59188: PUSH
59189: LD_VAR 0 5
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: EQUAL
59198: IFFALSE 59216
// begin weapon := j [ 2 ] ;
59200: LD_ADDR_VAR 0 8
59204: PUSH
59205: LD_VAR 0 5
59209: PUSH
59210: LD_INT 2
59212: ARRAY
59213: ST_TO_ADDR
// break ;
59214: GO 59218
// end ;
59216: GO 59176
59218: POP
59219: POP
// if not weapon then
59220: LD_VAR 0 8
59224: NOT
59225: IFFALSE 59229
// continue ;
59227: GO 59125
// for k in factories do
59229: LD_ADDR_VAR 0 6
59233: PUSH
59234: LD_VAR 0 2
59238: PUSH
59239: FOR_IN
59240: IFFALSE 59305
// begin weapons := AvailableWeaponList ( k ) ;
59242: LD_ADDR_VAR 0 9
59246: PUSH
59247: LD_VAR 0 6
59251: PPUSH
59252: CALL_OW 478
59256: ST_TO_ADDR
// if not weapons then
59257: LD_VAR 0 9
59261: NOT
59262: IFFALSE 59266
// continue ;
59264: GO 59239
// if weapon in weapons then
59266: LD_VAR 0 8
59270: PUSH
59271: LD_VAR 0 9
59275: IN
59276: IFFALSE 59303
// begin result := [ i , weapon ] ;
59278: LD_ADDR_VAR 0 3
59282: PUSH
59283: LD_VAR 0 4
59287: PUSH
59288: LD_VAR 0 8
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// exit ;
59297: POP
59298: POP
59299: POP
59300: POP
59301: GO 59311
// end ; end ;
59303: GO 59239
59305: POP
59306: POP
// end ;
59307: GO 59125
59309: POP
59310: POP
// end ;
59311: LD_VAR 0 3
59315: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59316: LD_INT 0
59318: PPUSH
// if not side or side > 8 then
59319: LD_VAR 0 3
59323: NOT
59324: PUSH
59325: LD_VAR 0 3
59329: PUSH
59330: LD_INT 8
59332: GREATER
59333: OR
59334: IFFALSE 59338
// exit ;
59336: GO 59397
// if not range then
59338: LD_VAR 0 4
59342: NOT
59343: IFFALSE 59354
// range := - 12 ;
59345: LD_ADDR_VAR 0 4
59349: PUSH
59350: LD_INT 12
59352: NEG
59353: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59354: LD_VAR 0 1
59358: PPUSH
59359: LD_VAR 0 2
59363: PPUSH
59364: LD_VAR 0 3
59368: PPUSH
59369: LD_VAR 0 4
59373: PPUSH
59374: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59378: LD_VAR 0 1
59382: PPUSH
59383: LD_VAR 0 2
59387: PPUSH
59388: LD_VAR 0 3
59392: PPUSH
59393: CALL_OW 331
// end ;
59397: LD_VAR 0 5
59401: RET
// export function Video ( mode ) ; begin
59402: LD_INT 0
59404: PPUSH
// ingame_video = mode ;
59405: LD_ADDR_OWVAR 52
59409: PUSH
59410: LD_VAR 0 1
59414: ST_TO_ADDR
// interface_hidden = mode ;
59415: LD_ADDR_OWVAR 54
59419: PUSH
59420: LD_VAR 0 1
59424: ST_TO_ADDR
// end ;
59425: LD_VAR 0 2
59429: RET
// export function Join ( array , element ) ; begin
59430: LD_INT 0
59432: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59433: LD_ADDR_VAR 0 3
59437: PUSH
59438: LD_VAR 0 1
59442: PPUSH
59443: LD_VAR 0 1
59447: PUSH
59448: LD_INT 1
59450: PLUS
59451: PPUSH
59452: LD_VAR 0 2
59456: PPUSH
59457: CALL_OW 1
59461: ST_TO_ADDR
// end ;
59462: LD_VAR 0 3
59466: RET
// export function JoinUnion ( array , element ) ; begin
59467: LD_INT 0
59469: PPUSH
// result := array union element ;
59470: LD_ADDR_VAR 0 3
59474: PUSH
59475: LD_VAR 0 1
59479: PUSH
59480: LD_VAR 0 2
59484: UNION
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 3
59490: RET
// export function GetBehemoths ( side ) ; begin
59491: LD_INT 0
59493: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59494: LD_ADDR_VAR 0 2
59498: PUSH
59499: LD_INT 22
59501: PUSH
59502: LD_VAR 0 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 31
59513: PUSH
59514: LD_INT 25
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PPUSH
59525: CALL_OW 69
59529: ST_TO_ADDR
// end ;
59530: LD_VAR 0 2
59534: RET
// export function Shuffle ( array ) ; var i , index ; begin
59535: LD_INT 0
59537: PPUSH
59538: PPUSH
59539: PPUSH
// result := [ ] ;
59540: LD_ADDR_VAR 0 2
59544: PUSH
59545: EMPTY
59546: ST_TO_ADDR
// if not array then
59547: LD_VAR 0 1
59551: NOT
59552: IFFALSE 59556
// exit ;
59554: GO 59655
// Randomize ;
59556: CALL_OW 10
// for i = array downto 1 do
59560: LD_ADDR_VAR 0 3
59564: PUSH
59565: DOUBLE
59566: LD_VAR 0 1
59570: INC
59571: ST_TO_ADDR
59572: LD_INT 1
59574: PUSH
59575: FOR_DOWNTO
59576: IFFALSE 59653
// begin index := rand ( 1 , array ) ;
59578: LD_ADDR_VAR 0 4
59582: PUSH
59583: LD_INT 1
59585: PPUSH
59586: LD_VAR 0 1
59590: PPUSH
59591: CALL_OW 12
59595: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59596: LD_ADDR_VAR 0 2
59600: PUSH
59601: LD_VAR 0 2
59605: PPUSH
59606: LD_VAR 0 2
59610: PUSH
59611: LD_INT 1
59613: PLUS
59614: PPUSH
59615: LD_VAR 0 1
59619: PUSH
59620: LD_VAR 0 4
59624: ARRAY
59625: PPUSH
59626: CALL_OW 2
59630: ST_TO_ADDR
// array := Delete ( array , index ) ;
59631: LD_ADDR_VAR 0 1
59635: PUSH
59636: LD_VAR 0 1
59640: PPUSH
59641: LD_VAR 0 4
59645: PPUSH
59646: CALL_OW 3
59650: ST_TO_ADDR
// end ;
59651: GO 59575
59653: POP
59654: POP
// end ;
59655: LD_VAR 0 2
59659: RET
// export function GetBaseMaterials ( base ) ; begin
59660: LD_INT 0
59662: PPUSH
// result := [ 0 , 0 , 0 ] ;
59663: LD_ADDR_VAR 0 2
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// if not base then
59682: LD_VAR 0 1
59686: NOT
59687: IFFALSE 59691
// exit ;
59689: GO 59740
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59691: LD_ADDR_VAR 0 2
59695: PUSH
59696: LD_VAR 0 1
59700: PPUSH
59701: LD_INT 1
59703: PPUSH
59704: CALL_OW 275
59708: PUSH
59709: LD_VAR 0 1
59713: PPUSH
59714: LD_INT 2
59716: PPUSH
59717: CALL_OW 275
59721: PUSH
59722: LD_VAR 0 1
59726: PPUSH
59727: LD_INT 3
59729: PPUSH
59730: CALL_OW 275
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: ST_TO_ADDR
// end ;
59740: LD_VAR 0 2
59744: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59745: LD_INT 0
59747: PPUSH
59748: PPUSH
// result := array ;
59749: LD_ADDR_VAR 0 3
59753: PUSH
59754: LD_VAR 0 1
59758: ST_TO_ADDR
// if size >= result then
59759: LD_VAR 0 2
59763: PUSH
59764: LD_VAR 0 3
59768: GREATEREQUAL
59769: IFFALSE 59773
// exit ;
59771: GO 59823
// if size then
59773: LD_VAR 0 2
59777: IFFALSE 59823
// for i := array downto size do
59779: LD_ADDR_VAR 0 4
59783: PUSH
59784: DOUBLE
59785: LD_VAR 0 1
59789: INC
59790: ST_TO_ADDR
59791: LD_VAR 0 2
59795: PUSH
59796: FOR_DOWNTO
59797: IFFALSE 59821
// result := Delete ( result , result ) ;
59799: LD_ADDR_VAR 0 3
59803: PUSH
59804: LD_VAR 0 3
59808: PPUSH
59809: LD_VAR 0 3
59813: PPUSH
59814: CALL_OW 3
59818: ST_TO_ADDR
59819: GO 59796
59821: POP
59822: POP
// end ;
59823: LD_VAR 0 3
59827: RET
// export function ComExit ( unit ) ; var tmp ; begin
59828: LD_INT 0
59830: PPUSH
59831: PPUSH
// if not IsInUnit ( unit ) then
59832: LD_VAR 0 1
59836: PPUSH
59837: CALL_OW 310
59841: NOT
59842: IFFALSE 59846
// exit ;
59844: GO 59906
// tmp := IsInUnit ( unit ) ;
59846: LD_ADDR_VAR 0 3
59850: PUSH
59851: LD_VAR 0 1
59855: PPUSH
59856: CALL_OW 310
59860: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59861: LD_VAR 0 3
59865: PPUSH
59866: CALL_OW 247
59870: PUSH
59871: LD_INT 2
59873: EQUAL
59874: IFFALSE 59887
// ComExitVehicle ( unit ) else
59876: LD_VAR 0 1
59880: PPUSH
59881: CALL_OW 121
59885: GO 59896
// ComExitBuilding ( unit ) ;
59887: LD_VAR 0 1
59891: PPUSH
59892: CALL_OW 122
// result := tmp ;
59896: LD_ADDR_VAR 0 2
59900: PUSH
59901: LD_VAR 0 3
59905: ST_TO_ADDR
// end ;
59906: LD_VAR 0 2
59910: RET
// export function ComExitAll ( units ) ; var i ; begin
59911: LD_INT 0
59913: PPUSH
59914: PPUSH
// if not units then
59915: LD_VAR 0 1
59919: NOT
59920: IFFALSE 59924
// exit ;
59922: GO 59950
// for i in units do
59924: LD_ADDR_VAR 0 3
59928: PUSH
59929: LD_VAR 0 1
59933: PUSH
59934: FOR_IN
59935: IFFALSE 59948
// ComExit ( i ) ;
59937: LD_VAR 0 3
59941: PPUSH
59942: CALL 59828 0 1
59946: GO 59934
59948: POP
59949: POP
// end ;
59950: LD_VAR 0 2
59954: RET
// export function ResetHc ; begin
59955: LD_INT 0
59957: PPUSH
// InitHc ;
59958: CALL_OW 19
// hc_importance := 0 ;
59962: LD_ADDR_OWVAR 32
59966: PUSH
59967: LD_INT 0
59969: ST_TO_ADDR
// end ;
59970: LD_VAR 0 1
59974: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59975: LD_INT 0
59977: PPUSH
59978: PPUSH
59979: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59980: LD_ADDR_VAR 0 6
59984: PUSH
59985: LD_VAR 0 1
59989: PUSH
59990: LD_VAR 0 3
59994: PLUS
59995: PUSH
59996: LD_INT 2
59998: DIV
59999: ST_TO_ADDR
// if _x < 0 then
60000: LD_VAR 0 6
60004: PUSH
60005: LD_INT 0
60007: LESS
60008: IFFALSE 60025
// _x := _x * - 1 ;
60010: LD_ADDR_VAR 0 6
60014: PUSH
60015: LD_VAR 0 6
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: MUL
60024: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60025: LD_ADDR_VAR 0 7
60029: PUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_VAR 0 4
60039: PLUS
60040: PUSH
60041: LD_INT 2
60043: DIV
60044: ST_TO_ADDR
// if _y < 0 then
60045: LD_VAR 0 7
60049: PUSH
60050: LD_INT 0
60052: LESS
60053: IFFALSE 60070
// _y := _y * - 1 ;
60055: LD_ADDR_VAR 0 7
60059: PUSH
60060: LD_VAR 0 7
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: MUL
60069: ST_TO_ADDR
// result := [ _x , _y ] ;
60070: LD_ADDR_VAR 0 5
60074: PUSH
60075: LD_VAR 0 6
60079: PUSH
60080: LD_VAR 0 7
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// end ;
60089: LD_VAR 0 5
60093: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60094: LD_INT 0
60096: PPUSH
60097: PPUSH
60098: PPUSH
60099: PPUSH
// task := GetTaskList ( unit ) ;
60100: LD_ADDR_VAR 0 7
60104: PUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 437
60114: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60115: LD_VAR 0 7
60119: NOT
60120: PUSH
60121: LD_VAR 0 1
60125: PPUSH
60126: LD_VAR 0 2
60130: PPUSH
60131: CALL_OW 308
60135: NOT
60136: AND
60137: IFFALSE 60141
// exit ;
60139: GO 60259
// if IsInArea ( unit , area ) then
60141: LD_VAR 0 1
60145: PPUSH
60146: LD_VAR 0 2
60150: PPUSH
60151: CALL_OW 308
60155: IFFALSE 60173
// begin ComMoveToArea ( unit , goAway ) ;
60157: LD_VAR 0 1
60161: PPUSH
60162: LD_VAR 0 3
60166: PPUSH
60167: CALL_OW 113
// exit ;
60171: GO 60259
// end ; if task [ 1 ] [ 1 ] <> M then
60173: LD_VAR 0 7
60177: PUSH
60178: LD_INT 1
60180: ARRAY
60181: PUSH
60182: LD_INT 1
60184: ARRAY
60185: PUSH
60186: LD_STRING M
60188: NONEQUAL
60189: IFFALSE 60193
// exit ;
60191: GO 60259
// x := task [ 1 ] [ 2 ] ;
60193: LD_ADDR_VAR 0 5
60197: PUSH
60198: LD_VAR 0 7
60202: PUSH
60203: LD_INT 1
60205: ARRAY
60206: PUSH
60207: LD_INT 2
60209: ARRAY
60210: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60211: LD_ADDR_VAR 0 6
60215: PUSH
60216: LD_VAR 0 7
60220: PUSH
60221: LD_INT 1
60223: ARRAY
60224: PUSH
60225: LD_INT 3
60227: ARRAY
60228: ST_TO_ADDR
// if InArea ( x , y , area ) then
60229: LD_VAR 0 5
60233: PPUSH
60234: LD_VAR 0 6
60238: PPUSH
60239: LD_VAR 0 2
60243: PPUSH
60244: CALL_OW 309
60248: IFFALSE 60259
// ComStop ( unit ) ;
60250: LD_VAR 0 1
60254: PPUSH
60255: CALL_OW 141
// end ;
60259: LD_VAR 0 4
60263: RET
// export function Abs ( value ) ; begin
60264: LD_INT 0
60266: PPUSH
// result := value ;
60267: LD_ADDR_VAR 0 2
60271: PUSH
60272: LD_VAR 0 1
60276: ST_TO_ADDR
// if value < 0 then
60277: LD_VAR 0 1
60281: PUSH
60282: LD_INT 0
60284: LESS
60285: IFFALSE 60302
// result := value * - 1 ;
60287: LD_ADDR_VAR 0 2
60291: PUSH
60292: LD_VAR 0 1
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: MUL
60301: ST_TO_ADDR
// end ;
60302: LD_VAR 0 2
60306: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60307: LD_INT 0
60309: PPUSH
60310: PPUSH
60311: PPUSH
60312: PPUSH
60313: PPUSH
60314: PPUSH
60315: PPUSH
60316: PPUSH
// if not unit or not building then
60317: LD_VAR 0 1
60321: NOT
60322: PUSH
60323: LD_VAR 0 2
60327: NOT
60328: OR
60329: IFFALSE 60333
// exit ;
60331: GO 60559
// x := GetX ( building ) ;
60333: LD_ADDR_VAR 0 4
60337: PUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: CALL_OW 250
60347: ST_TO_ADDR
// y := GetY ( building ) ;
60348: LD_ADDR_VAR 0 6
60352: PUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: CALL_OW 251
60362: ST_TO_ADDR
// d := GetDir ( building ) ;
60363: LD_ADDR_VAR 0 8
60367: PUSH
60368: LD_VAR 0 2
60372: PPUSH
60373: CALL_OW 254
60377: ST_TO_ADDR
// r := 4 ;
60378: LD_ADDR_VAR 0 9
60382: PUSH
60383: LD_INT 4
60385: ST_TO_ADDR
// for i := 1 to 5 do
60386: LD_ADDR_VAR 0 10
60390: PUSH
60391: DOUBLE
60392: LD_INT 1
60394: DEC
60395: ST_TO_ADDR
60396: LD_INT 5
60398: PUSH
60399: FOR_TO
60400: IFFALSE 60557
// begin _x := ShiftX ( x , d , r + i ) ;
60402: LD_ADDR_VAR 0 5
60406: PUSH
60407: LD_VAR 0 4
60411: PPUSH
60412: LD_VAR 0 8
60416: PPUSH
60417: LD_VAR 0 9
60421: PUSH
60422: LD_VAR 0 10
60426: PLUS
60427: PPUSH
60428: CALL_OW 272
60432: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60433: LD_ADDR_VAR 0 7
60437: PUSH
60438: LD_VAR 0 6
60442: PPUSH
60443: LD_VAR 0 8
60447: PPUSH
60448: LD_VAR 0 9
60452: PUSH
60453: LD_VAR 0 10
60457: PLUS
60458: PPUSH
60459: CALL_OW 273
60463: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60464: LD_VAR 0 5
60468: PPUSH
60469: LD_VAR 0 7
60473: PPUSH
60474: CALL_OW 488
60478: PUSH
60479: LD_VAR 0 5
60483: PPUSH
60484: LD_VAR 0 7
60488: PPUSH
60489: CALL_OW 428
60493: PPUSH
60494: CALL_OW 247
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: IN
60509: NOT
60510: AND
60511: IFFALSE 60555
// begin ComMoveXY ( unit , _x , _y ) ;
60513: LD_VAR 0 1
60517: PPUSH
60518: LD_VAR 0 5
60522: PPUSH
60523: LD_VAR 0 7
60527: PPUSH
60528: CALL_OW 111
// result := [ _x , _y ] ;
60532: LD_ADDR_VAR 0 3
60536: PUSH
60537: LD_VAR 0 5
60541: PUSH
60542: LD_VAR 0 7
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: ST_TO_ADDR
// exit ;
60551: POP
60552: POP
60553: GO 60559
// end ; end ;
60555: GO 60399
60557: POP
60558: POP
// end ;
60559: LD_VAR 0 3
60563: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60564: LD_INT 0
60566: PPUSH
60567: PPUSH
60568: PPUSH
// result := 0 ;
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_INT 0
60576: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60577: LD_VAR 0 1
60581: PUSH
60582: LD_INT 0
60584: LESS
60585: PUSH
60586: LD_VAR 0 1
60590: PUSH
60591: LD_INT 8
60593: GREATER
60594: OR
60595: PUSH
60596: LD_VAR 0 2
60600: PUSH
60601: LD_INT 0
60603: LESS
60604: OR
60605: PUSH
60606: LD_VAR 0 2
60610: PUSH
60611: LD_INT 8
60613: GREATER
60614: OR
60615: IFFALSE 60619
// exit ;
60617: GO 60694
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60619: LD_ADDR_VAR 0 4
60623: PUSH
60624: LD_INT 22
60626: PUSH
60627: LD_VAR 0 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PPUSH
60636: CALL_OW 69
60640: PUSH
60641: FOR_IN
60642: IFFALSE 60692
// begin un := UnitShoot ( i ) ;
60644: LD_ADDR_VAR 0 5
60648: PUSH
60649: LD_VAR 0 4
60653: PPUSH
60654: CALL_OW 504
60658: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60659: LD_VAR 0 5
60663: PPUSH
60664: CALL_OW 255
60668: PUSH
60669: LD_VAR 0 1
60673: EQUAL
60674: IFFALSE 60690
// begin result := un ;
60676: LD_ADDR_VAR 0 3
60680: PUSH
60681: LD_VAR 0 5
60685: ST_TO_ADDR
// exit ;
60686: POP
60687: POP
60688: GO 60694
// end ; end ;
60690: GO 60641
60692: POP
60693: POP
// end ;
60694: LD_VAR 0 3
60698: RET
// export function GetCargoBay ( units ) ; begin
60699: LD_INT 0
60701: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60702: LD_ADDR_VAR 0 2
60706: PUSH
60707: LD_VAR 0 1
60711: PPUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 34
60717: PUSH
60718: LD_INT 12
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 34
60727: PUSH
60728: LD_INT 51
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 34
60737: PUSH
60738: LD_INT 32
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 34
60747: PUSH
60748: LD_INT 89
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: PPUSH
60762: CALL_OW 72
60766: ST_TO_ADDR
// end ;
60767: LD_VAR 0 2
60771: RET
// export function Negate ( value ) ; begin
60772: LD_INT 0
60774: PPUSH
// result := not value ;
60775: LD_ADDR_VAR 0 2
60779: PUSH
60780: LD_VAR 0 1
60784: NOT
60785: ST_TO_ADDR
// end ;
60786: LD_VAR 0 2
60790: RET
// export function Inc ( value ) ; begin
60791: LD_INT 0
60793: PPUSH
// result := value + 1 ;
60794: LD_ADDR_VAR 0 2
60798: PUSH
60799: LD_VAR 0 1
60803: PUSH
60804: LD_INT 1
60806: PLUS
60807: ST_TO_ADDR
// end ;
60808: LD_VAR 0 2
60812: RET
// export function Dec ( value ) ; begin
60813: LD_INT 0
60815: PPUSH
// result := value - 1 ;
60816: LD_ADDR_VAR 0 2
60820: PUSH
60821: LD_VAR 0 1
60825: PUSH
60826: LD_INT 1
60828: MINUS
60829: ST_TO_ADDR
// end ;
60830: LD_VAR 0 2
60834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60835: LD_INT 0
60837: PPUSH
60838: PPUSH
60839: PPUSH
60840: PPUSH
60841: PPUSH
60842: PPUSH
60843: PPUSH
60844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60845: LD_VAR 0 1
60849: PPUSH
60850: LD_VAR 0 2
60854: PPUSH
60855: CALL_OW 488
60859: NOT
60860: PUSH
60861: LD_VAR 0 3
60865: PPUSH
60866: LD_VAR 0 4
60870: PPUSH
60871: CALL_OW 488
60875: NOT
60876: OR
60877: IFFALSE 60890
// begin result := - 1 ;
60879: LD_ADDR_VAR 0 5
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: ST_TO_ADDR
// exit ;
60888: GO 61125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60890: LD_ADDR_VAR 0 12
60894: PUSH
60895: LD_VAR 0 1
60899: PPUSH
60900: LD_VAR 0 2
60904: PPUSH
60905: LD_VAR 0 3
60909: PPUSH
60910: LD_VAR 0 4
60914: PPUSH
60915: CALL 59975 0 4
60919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60920: LD_ADDR_VAR 0 11
60924: PUSH
60925: LD_VAR 0 1
60929: PPUSH
60930: LD_VAR 0 2
60934: PPUSH
60935: LD_VAR 0 12
60939: PUSH
60940: LD_INT 1
60942: ARRAY
60943: PPUSH
60944: LD_VAR 0 12
60948: PUSH
60949: LD_INT 2
60951: ARRAY
60952: PPUSH
60953: CALL_OW 298
60957: ST_TO_ADDR
// distance := 9999 ;
60958: LD_ADDR_VAR 0 10
60962: PUSH
60963: LD_INT 9999
60965: ST_TO_ADDR
// for i := 0 to 5 do
60966: LD_ADDR_VAR 0 6
60970: PUSH
60971: DOUBLE
60972: LD_INT 0
60974: DEC
60975: ST_TO_ADDR
60976: LD_INT 5
60978: PUSH
60979: FOR_TO
60980: IFFALSE 61123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60982: LD_ADDR_VAR 0 7
60986: PUSH
60987: LD_VAR 0 1
60991: PPUSH
60992: LD_VAR 0 6
60996: PPUSH
60997: LD_VAR 0 11
61001: PPUSH
61002: CALL_OW 272
61006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61007: LD_ADDR_VAR 0 8
61011: PUSH
61012: LD_VAR 0 2
61016: PPUSH
61017: LD_VAR 0 6
61021: PPUSH
61022: LD_VAR 0 11
61026: PPUSH
61027: CALL_OW 273
61031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61032: LD_VAR 0 7
61036: PPUSH
61037: LD_VAR 0 8
61041: PPUSH
61042: CALL_OW 488
61046: NOT
61047: IFFALSE 61051
// continue ;
61049: GO 60979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61051: LD_ADDR_VAR 0 9
61055: PUSH
61056: LD_VAR 0 12
61060: PUSH
61061: LD_INT 1
61063: ARRAY
61064: PPUSH
61065: LD_VAR 0 12
61069: PUSH
61070: LD_INT 2
61072: ARRAY
61073: PPUSH
61074: LD_VAR 0 7
61078: PPUSH
61079: LD_VAR 0 8
61083: PPUSH
61084: CALL_OW 298
61088: ST_TO_ADDR
// if tmp < distance then
61089: LD_VAR 0 9
61093: PUSH
61094: LD_VAR 0 10
61098: LESS
61099: IFFALSE 61121
// begin result := i ;
61101: LD_ADDR_VAR 0 5
61105: PUSH
61106: LD_VAR 0 6
61110: ST_TO_ADDR
// distance := tmp ;
61111: LD_ADDR_VAR 0 10
61115: PUSH
61116: LD_VAR 0 9
61120: ST_TO_ADDR
// end ; end ;
61121: GO 60979
61123: POP
61124: POP
// end ;
61125: LD_VAR 0 5
61129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61130: LD_INT 0
61132: PPUSH
61133: PPUSH
// if not driver or not IsInUnit ( driver ) then
61134: LD_VAR 0 1
61138: NOT
61139: PUSH
61140: LD_VAR 0 1
61144: PPUSH
61145: CALL_OW 310
61149: NOT
61150: OR
61151: IFFALSE 61155
// exit ;
61153: GO 61245
// vehicle := IsInUnit ( driver ) ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: CALL_OW 310
61169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61170: LD_VAR 0 1
61174: PPUSH
61175: LD_STRING \
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: PUSH
61205: LD_STRING E
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_VAR 0 3
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PPUSH
61241: CALL_OW 446
// end ;
61245: LD_VAR 0 2
61249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61250: LD_INT 0
61252: PPUSH
61253: PPUSH
// if not driver or not IsInUnit ( driver ) then
61254: LD_VAR 0 1
61258: NOT
61259: PUSH
61260: LD_VAR 0 1
61264: PPUSH
61265: CALL_OW 310
61269: NOT
61270: OR
61271: IFFALSE 61275
// exit ;
61273: GO 61365
// vehicle := IsInUnit ( driver ) ;
61275: LD_ADDR_VAR 0 3
61279: PUSH
61280: LD_VAR 0 1
61284: PPUSH
61285: CALL_OW 310
61289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61290: LD_VAR 0 1
61294: PPUSH
61295: LD_STRING \
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: PUSH
61325: LD_STRING E
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_VAR 0 3
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PPUSH
61361: CALL_OW 447
// end ;
61365: LD_VAR 0 2
61369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61370: LD_INT 0
61372: PPUSH
61373: PPUSH
61374: PPUSH
// tmp := [ ] ;
61375: LD_ADDR_VAR 0 5
61379: PUSH
61380: EMPTY
61381: ST_TO_ADDR
// for i in units do
61382: LD_ADDR_VAR 0 4
61386: PUSH
61387: LD_VAR 0 1
61391: PUSH
61392: FOR_IN
61393: IFFALSE 61431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61395: LD_ADDR_VAR 0 5
61399: PUSH
61400: LD_VAR 0 5
61404: PPUSH
61405: LD_VAR 0 5
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: PPUSH
61414: LD_VAR 0 4
61418: PPUSH
61419: CALL_OW 256
61423: PPUSH
61424: CALL_OW 2
61428: ST_TO_ADDR
61429: GO 61392
61431: POP
61432: POP
// if not tmp then
61433: LD_VAR 0 5
61437: NOT
61438: IFFALSE 61442
// exit ;
61440: GO 61490
// if asc then
61442: LD_VAR 0 2
61446: IFFALSE 61470
// result := SortListByListAsc ( units , tmp ) else
61448: LD_ADDR_VAR 0 3
61452: PUSH
61453: LD_VAR 0 1
61457: PPUSH
61458: LD_VAR 0 5
61462: PPUSH
61463: CALL_OW 76
61467: ST_TO_ADDR
61468: GO 61490
// result := SortListByListDesc ( units , tmp ) ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_VAR 0 1
61479: PPUSH
61480: LD_VAR 0 5
61484: PPUSH
61485: CALL_OW 77
61489: ST_TO_ADDR
// end ;
61490: LD_VAR 0 3
61494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61495: LD_INT 0
61497: PPUSH
61498: PPUSH
// task := GetTaskList ( mech ) ;
61499: LD_ADDR_VAR 0 4
61503: PUSH
61504: LD_VAR 0 1
61508: PPUSH
61509: CALL_OW 437
61513: ST_TO_ADDR
// if not task then
61514: LD_VAR 0 4
61518: NOT
61519: IFFALSE 61523
// exit ;
61521: GO 61565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61523: LD_ADDR_VAR 0 3
61527: PUSH
61528: LD_VAR 0 4
61532: PUSH
61533: LD_INT 1
61535: ARRAY
61536: PUSH
61537: LD_INT 1
61539: ARRAY
61540: PUSH
61541: LD_STRING r
61543: EQUAL
61544: PUSH
61545: LD_VAR 0 4
61549: PUSH
61550: LD_INT 1
61552: ARRAY
61553: PUSH
61554: LD_INT 4
61556: ARRAY
61557: PUSH
61558: LD_VAR 0 2
61562: EQUAL
61563: AND
61564: ST_TO_ADDR
// end ;
61565: LD_VAR 0 3
61569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61570: LD_INT 0
61572: PPUSH
// SetDir ( unit , d ) ;
61573: LD_VAR 0 1
61577: PPUSH
61578: LD_VAR 0 4
61582: PPUSH
61583: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61587: LD_VAR 0 1
61591: PPUSH
61592: LD_VAR 0 2
61596: PPUSH
61597: LD_VAR 0 3
61601: PPUSH
61602: LD_VAR 0 5
61606: PPUSH
61607: CALL_OW 48
// end ;
61611: LD_VAR 0 6
61615: RET
// export function ToNaturalNumber ( number ) ; begin
61616: LD_INT 0
61618: PPUSH
// result := number div 1 ;
61619: LD_ADDR_VAR 0 2
61623: PUSH
61624: LD_VAR 0 1
61628: PUSH
61629: LD_INT 1
61631: DIV
61632: ST_TO_ADDR
// if number < 0 then
61633: LD_VAR 0 1
61637: PUSH
61638: LD_INT 0
61640: LESS
61641: IFFALSE 61651
// result := 0 ;
61643: LD_ADDR_VAR 0 2
61647: PUSH
61648: LD_INT 0
61650: ST_TO_ADDR
// end ;
61651: LD_VAR 0 2
61655: RET
// export function SortByClass ( units , class ) ; var un ; begin
61656: LD_INT 0
61658: PPUSH
61659: PPUSH
// if not units or not class then
61660: LD_VAR 0 1
61664: NOT
61665: PUSH
61666: LD_VAR 0 2
61670: NOT
61671: OR
61672: IFFALSE 61676
// exit ;
61674: GO 61771
// result := [ ] ;
61676: LD_ADDR_VAR 0 3
61680: PUSH
61681: EMPTY
61682: ST_TO_ADDR
// for un in units do
61683: LD_ADDR_VAR 0 4
61687: PUSH
61688: LD_VAR 0 1
61692: PUSH
61693: FOR_IN
61694: IFFALSE 61769
// if GetClass ( un ) = class then
61696: LD_VAR 0 4
61700: PPUSH
61701: CALL_OW 257
61705: PUSH
61706: LD_VAR 0 2
61710: EQUAL
61711: IFFALSE 61738
// result := Insert ( result , 1 , un ) else
61713: LD_ADDR_VAR 0 3
61717: PUSH
61718: LD_VAR 0 3
61722: PPUSH
61723: LD_INT 1
61725: PPUSH
61726: LD_VAR 0 4
61730: PPUSH
61731: CALL_OW 2
61735: ST_TO_ADDR
61736: GO 61767
// result := Replace ( result , result + 1 , un ) ;
61738: LD_ADDR_VAR 0 3
61742: PUSH
61743: LD_VAR 0 3
61747: PPUSH
61748: LD_VAR 0 3
61752: PUSH
61753: LD_INT 1
61755: PLUS
61756: PPUSH
61757: LD_VAR 0 4
61761: PPUSH
61762: CALL_OW 1
61766: ST_TO_ADDR
61767: GO 61693
61769: POP
61770: POP
// end ;
61771: LD_VAR 0 3
61775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61776: LD_INT 0
61778: PPUSH
61779: PPUSH
61780: PPUSH
61781: PPUSH
61782: PPUSH
61783: PPUSH
61784: PPUSH
// result := [ ] ;
61785: LD_ADDR_VAR 0 4
61789: PUSH
61790: EMPTY
61791: ST_TO_ADDR
// if x - r < 0 then
61792: LD_VAR 0 1
61796: PUSH
61797: LD_VAR 0 3
61801: MINUS
61802: PUSH
61803: LD_INT 0
61805: LESS
61806: IFFALSE 61818
// min_x := 0 else
61808: LD_ADDR_VAR 0 8
61812: PUSH
61813: LD_INT 0
61815: ST_TO_ADDR
61816: GO 61834
// min_x := x - r ;
61818: LD_ADDR_VAR 0 8
61822: PUSH
61823: LD_VAR 0 1
61827: PUSH
61828: LD_VAR 0 3
61832: MINUS
61833: ST_TO_ADDR
// if y - r < 0 then
61834: LD_VAR 0 2
61838: PUSH
61839: LD_VAR 0 3
61843: MINUS
61844: PUSH
61845: LD_INT 0
61847: LESS
61848: IFFALSE 61860
// min_y := 0 else
61850: LD_ADDR_VAR 0 7
61854: PUSH
61855: LD_INT 0
61857: ST_TO_ADDR
61858: GO 61876
// min_y := y - r ;
61860: LD_ADDR_VAR 0 7
61864: PUSH
61865: LD_VAR 0 2
61869: PUSH
61870: LD_VAR 0 3
61874: MINUS
61875: ST_TO_ADDR
// max_x := x + r ;
61876: LD_ADDR_VAR 0 9
61880: PUSH
61881: LD_VAR 0 1
61885: PUSH
61886: LD_VAR 0 3
61890: PLUS
61891: ST_TO_ADDR
// max_y := y + r ;
61892: LD_ADDR_VAR 0 10
61896: PUSH
61897: LD_VAR 0 2
61901: PUSH
61902: LD_VAR 0 3
61906: PLUS
61907: ST_TO_ADDR
// for _x = min_x to max_x do
61908: LD_ADDR_VAR 0 5
61912: PUSH
61913: DOUBLE
61914: LD_VAR 0 8
61918: DEC
61919: ST_TO_ADDR
61920: LD_VAR 0 9
61924: PUSH
61925: FOR_TO
61926: IFFALSE 62027
// for _y = min_y to max_y do
61928: LD_ADDR_VAR 0 6
61932: PUSH
61933: DOUBLE
61934: LD_VAR 0 7
61938: DEC
61939: ST_TO_ADDR
61940: LD_VAR 0 10
61944: PUSH
61945: FOR_TO
61946: IFFALSE 62023
// begin if not ValidHex ( _x , _y ) then
61948: LD_VAR 0 5
61952: PPUSH
61953: LD_VAR 0 6
61957: PPUSH
61958: CALL_OW 488
61962: NOT
61963: IFFALSE 61967
// continue ;
61965: GO 61945
// if GetResourceTypeXY ( _x , _y ) then
61967: LD_VAR 0 5
61971: PPUSH
61972: LD_VAR 0 6
61976: PPUSH
61977: CALL_OW 283
61981: IFFALSE 62021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61983: LD_ADDR_VAR 0 4
61987: PUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: LD_VAR 0 4
61997: PUSH
61998: LD_INT 1
62000: PLUS
62001: PPUSH
62002: LD_VAR 0 5
62006: PUSH
62007: LD_VAR 0 6
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PPUSH
62016: CALL_OW 1
62020: ST_TO_ADDR
// end ;
62021: GO 61945
62023: POP
62024: POP
62025: GO 61925
62027: POP
62028: POP
// end ;
62029: LD_VAR 0 4
62033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62034: LD_INT 0
62036: PPUSH
62037: PPUSH
62038: PPUSH
62039: PPUSH
62040: PPUSH
62041: PPUSH
62042: PPUSH
62043: PPUSH
// if not units then
62044: LD_VAR 0 1
62048: NOT
62049: IFFALSE 62053
// exit ;
62051: GO 62577
// result := UnitFilter ( units , [ f_ok ] ) ;
62053: LD_ADDR_VAR 0 3
62057: PUSH
62058: LD_VAR 0 1
62062: PPUSH
62063: LD_INT 50
62065: PUSH
62066: EMPTY
62067: LIST
62068: PPUSH
62069: CALL_OW 72
62073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62074: LD_ADDR_VAR 0 8
62078: PUSH
62079: LD_VAR 0 1
62083: PUSH
62084: LD_INT 1
62086: ARRAY
62087: PPUSH
62088: CALL_OW 255
62092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62093: LD_ADDR_VAR 0 10
62097: PUSH
62098: LD_INT 29
62100: PUSH
62101: LD_INT 91
62103: PUSH
62104: LD_INT 49
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// if not result then
62112: LD_VAR 0 3
62116: NOT
62117: IFFALSE 62121
// exit ;
62119: GO 62577
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62121: LD_ADDR_VAR 0 5
62125: PUSH
62126: LD_INT 81
62128: PUSH
62129: LD_VAR 0 8
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PPUSH
62138: CALL_OW 69
62142: ST_TO_ADDR
// for i in result do
62143: LD_ADDR_VAR 0 4
62147: PUSH
62148: LD_VAR 0 3
62152: PUSH
62153: FOR_IN
62154: IFFALSE 62575
// begin tag := GetTag ( i ) + 1 ;
62156: LD_ADDR_VAR 0 9
62160: PUSH
62161: LD_VAR 0 4
62165: PPUSH
62166: CALL_OW 110
62170: PUSH
62171: LD_INT 1
62173: PLUS
62174: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62175: LD_ADDR_VAR 0 7
62179: PUSH
62180: LD_VAR 0 4
62184: PPUSH
62185: CALL_OW 250
62189: PPUSH
62190: LD_VAR 0 4
62194: PPUSH
62195: CALL_OW 251
62199: PPUSH
62200: LD_INT 6
62202: PPUSH
62203: CALL 61776 0 3
62207: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62208: LD_VAR 0 4
62212: PPUSH
62213: CALL_OW 247
62217: PUSH
62218: LD_INT 2
62220: EQUAL
62221: PUSH
62222: LD_VAR 0 7
62226: AND
62227: PUSH
62228: LD_VAR 0 4
62232: PPUSH
62233: CALL_OW 264
62237: PUSH
62238: LD_VAR 0 10
62242: IN
62243: NOT
62244: AND
62245: IFFALSE 62284
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62247: LD_VAR 0 4
62251: PPUSH
62252: LD_VAR 0 7
62256: PUSH
62257: LD_INT 1
62259: ARRAY
62260: PUSH
62261: LD_INT 1
62263: ARRAY
62264: PPUSH
62265: LD_VAR 0 7
62269: PUSH
62270: LD_INT 1
62272: ARRAY
62273: PUSH
62274: LD_INT 2
62276: ARRAY
62277: PPUSH
62278: CALL_OW 116
62282: GO 62573
// if path > tag then
62284: LD_VAR 0 2
62288: PUSH
62289: LD_VAR 0 9
62293: GREATER
62294: IFFALSE 62502
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62296: LD_ADDR_VAR 0 6
62300: PUSH
62301: LD_VAR 0 5
62305: PPUSH
62306: LD_INT 91
62308: PUSH
62309: LD_VAR 0 4
62313: PUSH
62314: LD_INT 8
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: PPUSH
62322: CALL_OW 72
62326: ST_TO_ADDR
// if nearEnemy then
62327: LD_VAR 0 6
62331: IFFALSE 62400
// begin if GetWeapon ( i ) = ru_time_lapser then
62333: LD_VAR 0 4
62337: PPUSH
62338: CALL_OW 264
62342: PUSH
62343: LD_INT 49
62345: EQUAL
62346: IFFALSE 62374
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62348: LD_VAR 0 4
62352: PPUSH
62353: LD_VAR 0 6
62357: PPUSH
62358: LD_VAR 0 4
62362: PPUSH
62363: CALL_OW 74
62367: PPUSH
62368: CALL_OW 112
62372: GO 62398
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62374: LD_VAR 0 4
62378: PPUSH
62379: LD_VAR 0 6
62383: PPUSH
62384: LD_VAR 0 4
62388: PPUSH
62389: CALL_OW 74
62393: PPUSH
62394: CALL 63502 0 2
// end else
62398: GO 62500
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62400: LD_VAR 0 4
62404: PPUSH
62405: LD_VAR 0 2
62409: PUSH
62410: LD_VAR 0 9
62414: ARRAY
62415: PUSH
62416: LD_INT 1
62418: ARRAY
62419: PPUSH
62420: LD_VAR 0 2
62424: PUSH
62425: LD_VAR 0 9
62429: ARRAY
62430: PUSH
62431: LD_INT 2
62433: ARRAY
62434: PPUSH
62435: CALL_OW 297
62439: PUSH
62440: LD_INT 6
62442: GREATER
62443: IFFALSE 62486
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62445: LD_VAR 0 4
62449: PPUSH
62450: LD_VAR 0 2
62454: PUSH
62455: LD_VAR 0 9
62459: ARRAY
62460: PUSH
62461: LD_INT 1
62463: ARRAY
62464: PPUSH
62465: LD_VAR 0 2
62469: PUSH
62470: LD_VAR 0 9
62474: ARRAY
62475: PUSH
62476: LD_INT 2
62478: ARRAY
62479: PPUSH
62480: CALL_OW 114
62484: GO 62500
// SetTag ( i , tag ) ;
62486: LD_VAR 0 4
62490: PPUSH
62491: LD_VAR 0 9
62495: PPUSH
62496: CALL_OW 109
// end else
62500: GO 62573
// if enemy then
62502: LD_VAR 0 5
62506: IFFALSE 62573
// begin if GetWeapon ( i ) = ru_time_lapser then
62508: LD_VAR 0 4
62512: PPUSH
62513: CALL_OW 264
62517: PUSH
62518: LD_INT 49
62520: EQUAL
62521: IFFALSE 62549
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62523: LD_VAR 0 4
62527: PPUSH
62528: LD_VAR 0 5
62532: PPUSH
62533: LD_VAR 0 4
62537: PPUSH
62538: CALL_OW 74
62542: PPUSH
62543: CALL_OW 112
62547: GO 62573
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62549: LD_VAR 0 4
62553: PPUSH
62554: LD_VAR 0 5
62558: PPUSH
62559: LD_VAR 0 4
62563: PPUSH
62564: CALL_OW 74
62568: PPUSH
62569: CALL 63502 0 2
// end ; end ;
62573: GO 62153
62575: POP
62576: POP
// end ;
62577: LD_VAR 0 3
62581: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62582: LD_INT 0
62584: PPUSH
62585: PPUSH
62586: PPUSH
// if not unit or IsInUnit ( unit ) then
62587: LD_VAR 0 1
62591: NOT
62592: PUSH
62593: LD_VAR 0 1
62597: PPUSH
62598: CALL_OW 310
62602: OR
62603: IFFALSE 62607
// exit ;
62605: GO 62698
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62607: LD_ADDR_VAR 0 4
62611: PUSH
62612: LD_VAR 0 1
62616: PPUSH
62617: CALL_OW 250
62621: PPUSH
62622: LD_VAR 0 2
62626: PPUSH
62627: LD_INT 1
62629: PPUSH
62630: CALL_OW 272
62634: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62635: LD_ADDR_VAR 0 5
62639: PUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: CALL_OW 251
62649: PPUSH
62650: LD_VAR 0 2
62654: PPUSH
62655: LD_INT 1
62657: PPUSH
62658: CALL_OW 273
62662: ST_TO_ADDR
// if ValidHex ( x , y ) then
62663: LD_VAR 0 4
62667: PPUSH
62668: LD_VAR 0 5
62672: PPUSH
62673: CALL_OW 488
62677: IFFALSE 62698
// ComTurnXY ( unit , x , y ) ;
62679: LD_VAR 0 1
62683: PPUSH
62684: LD_VAR 0 4
62688: PPUSH
62689: LD_VAR 0 5
62693: PPUSH
62694: CALL_OW 118
// end ;
62698: LD_VAR 0 3
62702: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62703: LD_INT 0
62705: PPUSH
62706: PPUSH
// result := false ;
62707: LD_ADDR_VAR 0 3
62711: PUSH
62712: LD_INT 0
62714: ST_TO_ADDR
// if not units then
62715: LD_VAR 0 2
62719: NOT
62720: IFFALSE 62724
// exit ;
62722: GO 62769
// for i in units do
62724: LD_ADDR_VAR 0 4
62728: PUSH
62729: LD_VAR 0 2
62733: PUSH
62734: FOR_IN
62735: IFFALSE 62767
// if See ( side , i ) then
62737: LD_VAR 0 1
62741: PPUSH
62742: LD_VAR 0 4
62746: PPUSH
62747: CALL_OW 292
62751: IFFALSE 62765
// begin result := true ;
62753: LD_ADDR_VAR 0 3
62757: PUSH
62758: LD_INT 1
62760: ST_TO_ADDR
// exit ;
62761: POP
62762: POP
62763: GO 62769
// end ;
62765: GO 62734
62767: POP
62768: POP
// end ;
62769: LD_VAR 0 3
62773: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62774: LD_INT 0
62776: PPUSH
62777: PPUSH
62778: PPUSH
62779: PPUSH
// if not unit or not points then
62780: LD_VAR 0 1
62784: NOT
62785: PUSH
62786: LD_VAR 0 2
62790: NOT
62791: OR
62792: IFFALSE 62796
// exit ;
62794: GO 62886
// dist := 99999 ;
62796: LD_ADDR_VAR 0 5
62800: PUSH
62801: LD_INT 99999
62803: ST_TO_ADDR
// for i in points do
62804: LD_ADDR_VAR 0 4
62808: PUSH
62809: LD_VAR 0 2
62813: PUSH
62814: FOR_IN
62815: IFFALSE 62884
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62817: LD_ADDR_VAR 0 6
62821: PUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: LD_VAR 0 4
62831: PUSH
62832: LD_INT 1
62834: ARRAY
62835: PPUSH
62836: LD_VAR 0 4
62840: PUSH
62841: LD_INT 2
62843: ARRAY
62844: PPUSH
62845: CALL_OW 297
62849: ST_TO_ADDR
// if tmpDist < dist then
62850: LD_VAR 0 6
62854: PUSH
62855: LD_VAR 0 5
62859: LESS
62860: IFFALSE 62882
// begin result := i ;
62862: LD_ADDR_VAR 0 3
62866: PUSH
62867: LD_VAR 0 4
62871: ST_TO_ADDR
// dist := tmpDist ;
62872: LD_ADDR_VAR 0 5
62876: PUSH
62877: LD_VAR 0 6
62881: ST_TO_ADDR
// end ; end ;
62882: GO 62814
62884: POP
62885: POP
// end ;
62886: LD_VAR 0 3
62890: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62891: LD_INT 0
62893: PPUSH
// uc_side := side ;
62894: LD_ADDR_OWVAR 20
62898: PUSH
62899: LD_VAR 0 1
62903: ST_TO_ADDR
// uc_nation := 3 ;
62904: LD_ADDR_OWVAR 21
62908: PUSH
62909: LD_INT 3
62911: ST_TO_ADDR
// vc_chassis := 25 ;
62912: LD_ADDR_OWVAR 37
62916: PUSH
62917: LD_INT 25
62919: ST_TO_ADDR
// vc_engine := engine_siberite ;
62920: LD_ADDR_OWVAR 39
62924: PUSH
62925: LD_INT 3
62927: ST_TO_ADDR
// vc_control := control_computer ;
62928: LD_ADDR_OWVAR 38
62932: PUSH
62933: LD_INT 3
62935: ST_TO_ADDR
// vc_weapon := 59 ;
62936: LD_ADDR_OWVAR 40
62940: PUSH
62941: LD_INT 59
62943: ST_TO_ADDR
// result := CreateVehicle ;
62944: LD_ADDR_VAR 0 5
62948: PUSH
62949: CALL_OW 45
62953: ST_TO_ADDR
// SetDir ( result , d ) ;
62954: LD_VAR 0 5
62958: PPUSH
62959: LD_VAR 0 4
62963: PPUSH
62964: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62968: LD_VAR 0 5
62972: PPUSH
62973: LD_VAR 0 2
62977: PPUSH
62978: LD_VAR 0 3
62982: PPUSH
62983: LD_INT 0
62985: PPUSH
62986: CALL_OW 48
// end ;
62990: LD_VAR 0 5
62994: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62995: LD_INT 0
62997: PPUSH
62998: PPUSH
62999: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63000: LD_ADDR_VAR 0 2
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63023: LD_VAR 0 1
63027: NOT
63028: PUSH
63029: LD_VAR 0 1
63033: PPUSH
63034: CALL_OW 264
63038: PUSH
63039: LD_INT 12
63041: PUSH
63042: LD_INT 51
63044: PUSH
63045: LD_INT 32
63047: PUSH
63048: LD_INT 89
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: IN
63057: NOT
63058: OR
63059: IFFALSE 63063
// exit ;
63061: GO 63161
// for i := 1 to 3 do
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: DOUBLE
63069: LD_INT 1
63071: DEC
63072: ST_TO_ADDR
63073: LD_INT 3
63075: PUSH
63076: FOR_TO
63077: IFFALSE 63159
// begin tmp := GetCargo ( cargo , i ) ;
63079: LD_ADDR_VAR 0 4
63083: PUSH
63084: LD_VAR 0 1
63088: PPUSH
63089: LD_VAR 0 3
63093: PPUSH
63094: CALL_OW 289
63098: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63099: LD_ADDR_VAR 0 2
63103: PUSH
63104: LD_VAR 0 2
63108: PPUSH
63109: LD_VAR 0 3
63113: PPUSH
63114: LD_VAR 0 4
63118: PPUSH
63119: CALL_OW 1
63123: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63124: LD_ADDR_VAR 0 2
63128: PUSH
63129: LD_VAR 0 2
63133: PPUSH
63134: LD_INT 4
63136: PPUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 4
63144: ARRAY
63145: PUSH
63146: LD_VAR 0 4
63150: PLUS
63151: PPUSH
63152: CALL_OW 1
63156: ST_TO_ADDR
// end ;
63157: GO 63076
63159: POP
63160: POP
// end ;
63161: LD_VAR 0 2
63165: RET
// export function Length ( array ) ; begin
63166: LD_INT 0
63168: PPUSH
// result := array + 0 ;
63169: LD_ADDR_VAR 0 2
63173: PUSH
63174: LD_VAR 0 1
63178: PUSH
63179: LD_INT 0
63181: PLUS
63182: ST_TO_ADDR
// end ;
63183: LD_VAR 0 2
63187: RET
// export function PrepareArray ( array ) ; begin
63188: LD_INT 0
63190: PPUSH
// result := array diff 0 ;
63191: LD_ADDR_VAR 0 2
63195: PUSH
63196: LD_VAR 0 1
63200: PUSH
63201: LD_INT 0
63203: DIFF
63204: ST_TO_ADDR
// if not result [ 1 ] then
63205: LD_VAR 0 2
63209: PUSH
63210: LD_INT 1
63212: ARRAY
63213: NOT
63214: IFFALSE 63234
// result := Delete ( result , 1 ) ;
63216: LD_ADDR_VAR 0 2
63220: PUSH
63221: LD_VAR 0 2
63225: PPUSH
63226: LD_INT 1
63228: PPUSH
63229: CALL_OW 3
63233: ST_TO_ADDR
// end ;
63234: LD_VAR 0 2
63238: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63239: LD_INT 0
63241: PPUSH
63242: PPUSH
63243: PPUSH
63244: PPUSH
// sibRocketRange := 25 ;
63245: LD_ADDR_VAR 0 6
63249: PUSH
63250: LD_INT 25
63252: ST_TO_ADDR
// result := false ;
63253: LD_ADDR_VAR 0 4
63257: PUSH
63258: LD_INT 0
63260: ST_TO_ADDR
// for i := 0 to 5 do
63261: LD_ADDR_VAR 0 5
63265: PUSH
63266: DOUBLE
63267: LD_INT 0
63269: DEC
63270: ST_TO_ADDR
63271: LD_INT 5
63273: PUSH
63274: FOR_TO
63275: IFFALSE 63342
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63277: LD_VAR 0 1
63281: PPUSH
63282: LD_VAR 0 5
63286: PPUSH
63287: LD_VAR 0 6
63291: PPUSH
63292: CALL_OW 272
63296: PPUSH
63297: LD_VAR 0 2
63301: PPUSH
63302: LD_VAR 0 5
63306: PPUSH
63307: LD_VAR 0 6
63311: PPUSH
63312: CALL_OW 273
63316: PPUSH
63317: LD_VAR 0 3
63321: PPUSH
63322: CALL_OW 309
63326: IFFALSE 63340
// begin result := true ;
63328: LD_ADDR_VAR 0 4
63332: PUSH
63333: LD_INT 1
63335: ST_TO_ADDR
// exit ;
63336: POP
63337: POP
63338: GO 63344
// end ;
63340: GO 63274
63342: POP
63343: POP
// end ;
63344: LD_VAR 0 4
63348: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63349: LD_INT 0
63351: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63352: LD_VAR 0 1
63356: PPUSH
63357: LD_VAR 0 2
63361: PPUSH
63362: LD_INT 0
63364: PPUSH
63365: LD_INT 0
63367: PPUSH
63368: LD_INT 1
63370: PPUSH
63371: LD_INT 0
63373: PPUSH
63374: CALL_OW 587
// end ;
63378: LD_VAR 0 3
63382: RET
// export function CenterOnNow ( unit ) ; begin
63383: LD_INT 0
63385: PPUSH
// result := IsInUnit ( unit ) ;
63386: LD_ADDR_VAR 0 2
63390: PUSH
63391: LD_VAR 0 1
63395: PPUSH
63396: CALL_OW 310
63400: ST_TO_ADDR
// if not result then
63401: LD_VAR 0 2
63405: NOT
63406: IFFALSE 63418
// result := unit ;
63408: LD_ADDR_VAR 0 2
63412: PUSH
63413: LD_VAR 0 1
63417: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 87
// end ;
63427: LD_VAR 0 2
63431: RET
// export function ComMoveHex ( unit , hex ) ; begin
63432: LD_INT 0
63434: PPUSH
// if not hex then
63435: LD_VAR 0 2
63439: NOT
63440: IFFALSE 63444
// exit ;
63442: GO 63497
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63444: LD_VAR 0 2
63448: PUSH
63449: LD_INT 1
63451: ARRAY
63452: PPUSH
63453: LD_VAR 0 2
63457: PUSH
63458: LD_INT 2
63460: ARRAY
63461: PPUSH
63462: CALL_OW 428
63466: IFFALSE 63470
// exit ;
63468: GO 63497
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_VAR 0 2
63479: PUSH
63480: LD_INT 1
63482: ARRAY
63483: PPUSH
63484: LD_VAR 0 2
63488: PUSH
63489: LD_INT 2
63491: ARRAY
63492: PPUSH
63493: CALL_OW 111
// end ;
63497: LD_VAR 0 3
63501: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63502: LD_INT 0
63504: PPUSH
63505: PPUSH
63506: PPUSH
// if not unit or not enemy then
63507: LD_VAR 0 1
63511: NOT
63512: PUSH
63513: LD_VAR 0 2
63517: NOT
63518: OR
63519: IFFALSE 63523
// exit ;
63521: GO 63647
// x := GetX ( enemy ) ;
63523: LD_ADDR_VAR 0 4
63527: PUSH
63528: LD_VAR 0 2
63532: PPUSH
63533: CALL_OW 250
63537: ST_TO_ADDR
// y := GetY ( enemy ) ;
63538: LD_ADDR_VAR 0 5
63542: PUSH
63543: LD_VAR 0 2
63547: PPUSH
63548: CALL_OW 251
63552: ST_TO_ADDR
// if ValidHex ( x , y ) then
63553: LD_VAR 0 4
63557: PPUSH
63558: LD_VAR 0 5
63562: PPUSH
63563: CALL_OW 488
63567: IFFALSE 63647
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
63569: LD_VAR 0 2
63573: PPUSH
63574: CALL_OW 247
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: IN
63589: PUSH
63590: LD_VAR 0 1
63594: PPUSH
63595: CALL_OW 255
63599: PPUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: CALL_OW 292
63609: AND
63610: IFFALSE 63628
// ComAttackUnit ( unit , enemy ) else
63612: LD_VAR 0 1
63616: PPUSH
63617: LD_VAR 0 2
63621: PPUSH
63622: CALL_OW 115
63626: GO 63647
// ComAgressiveMove ( unit , x , y ) ;
63628: LD_VAR 0 1
63632: PPUSH
63633: LD_VAR 0 4
63637: PPUSH
63638: LD_VAR 0 5
63642: PPUSH
63643: CALL_OW 114
// end ; end_of_file
63647: LD_VAR 0 3
63651: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63652: LD_VAR 0 1
63656: PPUSH
63657: LD_VAR 0 2
63661: PPUSH
63662: LD_VAR 0 3
63666: PPUSH
63667: LD_VAR 0 4
63671: PPUSH
63672: LD_VAR 0 5
63676: PPUSH
63677: LD_VAR 0 6
63681: PPUSH
63682: CALL 2010 0 6
// end ;
63686: PPOPN 6
63688: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63689: LD_INT 0
63691: PPUSH
// begin if not units then
63692: LD_VAR 0 1
63696: NOT
63697: IFFALSE 63701
// exit ;
63699: GO 63701
// end ;
63701: PPOPN 7
63703: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63704: CALL 1914 0 0
// end ;
63708: PPOPN 1
63710: END
