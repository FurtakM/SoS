// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// InitGlobalVariables ;
  18: CALL 19816 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := 0 ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 4
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_EXP 95
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 447: LD_ADDR_VAR 0 8
 451: PUSH
 452: LD_INT 20
 454: PUSH
 455: EMPTY
 456: LIST
 457: ST_TO_ADDR
// InitHc_All ( ) ;
 458: CALL_OW 584
// for i := 1 to numbers - 2 do
 462: LD_ADDR_VAR 0 5
 466: PUSH
 467: DOUBLE
 468: LD_INT 1
 470: DEC
 471: ST_TO_ADDR
 472: LD_VAR 0 3
 476: PUSH
 477: LD_INT 2
 479: MINUS
 480: PUSH
 481: FOR_TO
 482: IFFALSE 623
// begin if numbers [ i ] = 0 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_VAR 0 5
 493: ARRAY
 494: PUSH
 495: LD_INT 0
 497: EQUAL
 498: IFFALSE 502
// continue ;
 500: GO 481
// hc_class := classes [ i ] ;
 502: LD_ADDR_OWVAR 28
 506: PUSH
 507: LD_VAR 0 7
 511: PUSH
 512: LD_VAR 0 5
 516: ARRAY
 517: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 518: LD_ADDR_OWVAR 29
 522: PUSH
 523: LD_INT 8
 525: PPUSH
 526: LD_INT 12
 528: PPUSH
 529: CALL_OW 12
 533: PUSH
 534: LD_INT 8
 536: PPUSH
 537: LD_INT 12
 539: PPUSH
 540: CALL_OW 12
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 549: LD_ADDR_OWVAR 35
 553: PUSH
 554: LD_INT 5
 556: NEG
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_OWVAR 67
 570: PUSH
 571: LD_INT 5
 573: MUL
 574: PLUS
 575: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 576: LD_ADDR_VAR 0 6
 580: PUSH
 581: DOUBLE
 582: LD_INT 1
 584: DEC
 585: ST_TO_ADDR
 586: LD_VAR 0 3
 590: PUSH
 591: LD_VAR 0 5
 595: ARRAY
 596: PUSH
 597: FOR_TO
 598: IFFALSE 619
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
 617: GO 597
 619: POP
 620: POP
// end ;
 621: GO 481
 623: POP
 624: POP
// if not waterArea then
 625: LD_VAR 0 2
 629: NOT
 630: IFFALSE 634
// exit ;
 632: GO 714
// hc_class := waterClass [ 1 ] ;
 634: LD_ADDR_OWVAR 28
 638: PUSH
 639: LD_VAR 0 8
 643: PUSH
 644: LD_INT 1
 646: ARRAY
 647: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 648: LD_ADDR_OWVAR 29
 652: PUSH
 653: LD_INT 10
 655: PUSH
 656: LD_INT 10
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: ST_TO_ADDR
// hc_agressivity := 0 ;
 663: LD_ADDR_OWVAR 35
 667: PUSH
 668: LD_INT 0
 670: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 671: LD_ADDR_VAR 0 6
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 3
 685: PUSH
 686: LD_INT 7
 688: ARRAY
 689: PUSH
 690: FOR_TO
 691: IFFALSE 712
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 693: CALL_OW 44
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 49
 710: GO 690
 712: POP
 713: POP
// end ; end_of_file
 714: LD_VAR 0 4
 718: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 719: LD_INT 22
 721: PUSH
 722: LD_INT 0
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 25
 731: PUSH
 732: LD_INT 15
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: IFFALSE 853
 749: GO 751
 751: DISABLE
 752: LD_INT 0
 754: PPUSH
// begin enable ;
 755: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 756: LD_ADDR_VAR 0 1
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 25
 773: PUSH
 774: LD_INT 15
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: FOR_IN
 791: IFFALSE 851
// if GetLives ( i ) < 1000 then
 793: LD_VAR 0 1
 797: PPUSH
 798: CALL_OW 256
 802: PUSH
 803: LD_INT 1000
 805: LESS
 806: IFFALSE 849
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 808: LD_VAR 0 1
 812: PPUSH
 813: LD_INT 3
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PPUSH
 830: CALL_OW 69
 834: PPUSH
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 74
 844: PPUSH
 845: CALL_OW 115
 849: GO 790
 851: POP
 852: POP
// end ;
 853: PPOPN 1
 855: END
// every 3 do var i , enemy , x , y , d ;
 856: GO 858
 858: DISABLE
 859: LD_INT 0
 861: PPUSH
 862: PPUSH
 863: PPUSH
 864: PPUSH
 865: PPUSH
// begin enable ;
 866: ENABLE
// for i := 2 to huntersAmount do
 867: LD_ADDR_VAR 0 1
 871: PUSH
 872: DOUBLE
 873: LD_INT 2
 875: DEC
 876: ST_TO_ADDR
 877: LD_EXP 3
 881: PUSH
 882: FOR_TO
 883: IFFALSE 1222
// begin if not HasTask ( hunters [ i ] ) then
 885: LD_EXP 6
 889: PUSH
 890: LD_VAR 0 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 314
 900: NOT
 901: IFFALSE 1220
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_EXP 6
 927: PUSH
 928: LD_VAR 0 1
 932: ARRAY
 933: PPUSH
 934: CALL_OW 74
 938: ST_TO_ADDR
// if not enemy then
 939: LD_VAR 0 2
 943: NOT
 944: IFFALSE 948
// continue ;
 946: GO 882
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 948: LD_EXP 6
 952: PUSH
 953: LD_VAR 0 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: CALL_OW 296
 968: PUSH
 969: LD_INT 17
 971: LESS
 972: IFFALSE 1075
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 974: LD_EXP 6
 978: PUSH
 979: LD_VAR 0 1
 983: ARRAY
 984: PPUSH
 985: CALL_OW 257
 989: PUSH
 990: LD_INT 11
 992: EQUAL
 993: IFFALSE 1053
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL_OW 257
1004: PUSH
1005: LD_INT 19
1007: PUSH
1008: LD_INT 20
1010: PUSH
1011: LD_INT 13
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: IN
1019: IFFALSE 1038
// ComCarabine ( hunters [ i ] ) else
1021: LD_EXP 6
1025: PUSH
1026: LD_VAR 0 1
1030: ARRAY
1031: PPUSH
1032: CALL_OW 162
1036: GO 1053
// ComSabre ( hunters [ i ] ) ;
1038: LD_EXP 6
1042: PUSH
1043: LD_VAR 0 1
1047: ARRAY
1048: PPUSH
1049: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1053: LD_EXP 6
1057: PUSH
1058: LD_VAR 0 1
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 115
// end else
1073: GO 1220
// begin d := rand ( 0 , 5 ) ;
1075: LD_ADDR_VAR 0 5
1079: PUSH
1080: LD_INT 0
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 12
1090: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_VAR 0 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 5
1116: PPUSH
1117: LD_INT 8
1119: PPUSH
1120: CALL_OW 272
1124: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1125: LD_ADDR_VAR 0 4
1129: PUSH
1130: LD_EXP 6
1134: PUSH
1135: LD_VAR 0 1
1139: ARRAY
1140: PPUSH
1141: CALL_OW 251
1145: PPUSH
1146: LD_VAR 0 5
1150: PPUSH
1151: LD_INT 8
1153: PPUSH
1154: CALL_OW 273
1158: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 488
1173: PUSH
1174: LD_VAR 0 3
1178: PPUSH
1179: LD_VAR 0 4
1183: PPUSH
1184: CALL_OW 428
1188: PUSH
1189: LD_INT 0
1191: EQUAL
1192: AND
1193: IFFALSE 1220
// ComMoveXY ( hunters [ i ] , x , y ) ;
1195: LD_EXP 6
1199: PUSH
1200: LD_VAR 0 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 3
1210: PPUSH
1211: LD_VAR 0 4
1215: PPUSH
1216: CALL_OW 111
// end ; end ; end ;
1220: GO 882
1222: POP
1223: POP
// end ; end_of_file
1224: PPOPN 5
1226: END
// on UnitGoesToRed ( un ) do var i ;
1227: LD_INT 0
1229: PPUSH
// begin if GetSide ( un ) = 1 then
1230: LD_VAR 0 1
1234: PPUSH
1235: CALL_OW 255
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1252
// YouLost ( hunt2 ) ;
1245: LD_STRING hunt2
1247: PPUSH
1248: CALL_OW 104
// if GetSide ( un ) > 1 then
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 255
1261: PUSH
1262: LD_INT 1
1264: GREATER
1265: IFFALSE 1318
// begin for i := 1 to 6 do
1267: LD_ADDR_VAR 0 2
1271: PUSH
1272: DOUBLE
1273: LD_INT 1
1275: DEC
1276: ST_TO_ADDR
1277: LD_INT 6
1279: PUSH
1280: FOR_TO
1281: IFFALSE 1304
// begin wait ( 0 0$1 ) ;
1283: LD_INT 35
1285: PPUSH
1286: CALL_OW 67
// SetLives ( un , 249 ) ;
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 249
1297: PPUSH
1298: CALL_OW 234
// end ;
1302: GO 1280
1304: POP
1305: POP
// SetLives ( un , 1000 ) ;
1306: LD_VAR 0 1
1310: PPUSH
1311: LD_INT 1000
1313: PPUSH
1314: CALL_OW 234
// end ; end ;
1318: PPOPN 2
1320: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1321: LD_VAR 0 1
1325: PUSH
1326: LD_INT 1
1328: EQUAL
1329: PUSH
1330: LD_VAR 0 2
1334: PUSH
1335: LD_INT 1
1337: GREATER
1338: AND
1339: IFFALSE 1348
// YouLost ( hunt1 ) ;
1341: LD_STRING hunt1
1343: PPUSH
1344: CALL_OW 104
// end ;
1348: PPOPN 2
1350: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1351: LD_INT 0
1353: PPUSH
// begin point := 0 ;
1354: LD_ADDR_VAR 0 4
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL_OW 257
1371: PUSH
1372: LD_INT 20
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1391
1380: POP
// point := 10 ; class_horse :
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 10
1388: ST_TO_ADDR
1389: GO 1527
1391: LD_EXP 95
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1412
1401: POP
// point := 10 ; class_baggie :
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 10
1409: ST_TO_ADDR
1410: GO 1527
1412: LD_INT 13
1414: DOUBLE
1415: EQUAL
1416: IFTRUE 1420
1418: GO 1431
1420: POP
// point := 5 ; class_phororhacos :
1421: LD_ADDR_VAR 0 4
1425: PUSH
1426: LD_INT 5
1428: ST_TO_ADDR
1429: GO 1527
1431: LD_INT 18
1433: DOUBLE
1434: EQUAL
1435: IFTRUE 1439
1437: GO 1450
1439: POP
// point := 10 ; class_tiger :
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 10
1447: ST_TO_ADDR
1448: GO 1527
1450: LD_INT 14
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1469
1458: POP
// point := 20 ; class_apeman :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 20
1466: ST_TO_ADDR
1467: GO 1527
1469: LD_INT 12
1471: DOUBLE
1472: EQUAL
1473: IFTRUE 1477
1475: GO 1488
1477: POP
// point := 30 ; class_apeman_soldier :
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: LD_INT 30
1485: ST_TO_ADDR
1486: GO 1527
1488: LD_INT 15
1490: DOUBLE
1491: EQUAL
1492: IFTRUE 1496
1494: GO 1507
1496: POP
// point := 50 ; class_frog :
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: LD_INT 50
1504: ST_TO_ADDR
1505: GO 1527
1507: LD_INT 19
1509: DOUBLE
1510: EQUAL
1511: IFTRUE 1515
1513: GO 1526
1515: POP
// point := 10 ; end ;
1516: LD_ADDR_VAR 0 4
1520: PUSH
1521: LD_INT 10
1523: ST_TO_ADDR
1524: GO 1527
1526: POP
// if point then
1527: LD_VAR 0 4
1531: IFFALSE 1570
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1533: LD_ADDR_EXP 5
1537: PUSH
1538: LD_EXP 5
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_EXP 5
1552: PUSH
1553: LD_VAR 0 2
1557: ARRAY
1558: PUSH
1559: LD_VAR 0 4
1563: PLUS
1564: PPUSH
1565: CALL_OW 1
1569: ST_TO_ADDR
// end ;
1570: PPOPN 4
1572: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1573: LD_INT 22
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: PUSH
1588: LD_INT 10
1590: LESS
1591: IFFALSE 1693
1593: GO 1595
1595: DISABLE
// begin enable ;
1596: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1597: LD_INT 2
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: LD_INT 4
1608: PPUSH
1609: CALL_OW 12
1613: PUSH
1614: LD_INT 0
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 12
1624: PUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 4
1630: PPUSH
1631: CALL_OW 12
1635: PUSH
1636: LD_INT 2
1638: PPUSH
1639: LD_INT 4
1641: PPUSH
1642: CALL_OW 12
1646: PUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 12
1657: PUSH
1658: LD_INT 0
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 12
1668: PUSH
1669: LD_INT 0
1671: PPUSH
1672: LD_INT 4
1674: PPUSH
1675: CALL_OW 12
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL 391 0 3
// end ;
1693: END
// every 0 0$1 do var i ;
1694: GO 1696
1696: DISABLE
1697: LD_INT 0
1699: PPUSH
// begin enable ;
1700: ENABLE
// display_strings := [ ] ;
1701: LD_ADDR_OWVAR 47
1705: PUSH
1706: EMPTY
1707: ST_TO_ADDR
// for i := 1 to huntersAmount do
1708: LD_ADDR_VAR 0 1
1712: PUSH
1713: DOUBLE
1714: LD_INT 1
1716: DEC
1717: ST_TO_ADDR
1718: LD_EXP 3
1722: PUSH
1723: FOR_TO
1724: IFFALSE 1858
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1726: LD_ADDR_OWVAR 47
1730: PUSH
1731: LD_OWVAR 47
1735: PUSH
1736: LD_STRING #player
1738: PUSH
1739: LD_VAR 0 1
1743: STR
1744: PUSH
1745: LD_VAR 0 1
1749: PUSH
1750: LD_EXP 5
1754: PUSH
1755: LD_VAR 0 1
1759: ARRAY
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: ADD
1766: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1767: LD_EXP 5
1771: PUSH
1772: LD_VAR 0 1
1776: ARRAY
1777: PUSH
1778: LD_INT 750
1780: PUSH
1781: LD_INT 1250
1783: PUSH
1784: LD_INT 2000
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_OWVAR 67
1796: ARRAY
1797: GREATEREQUAL
1798: IFFALSE 1856
// begin if i = 1 then
1800: LD_VAR 0 1
1804: PUSH
1805: LD_INT 1
1807: EQUAL
1808: IFFALSE 1849
// begin DialogueOn ;
1810: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1814: LD_STRING ACH_HUNT
1816: PPUSH
1817: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1821: LD_ADDR_OWVAR 47
1825: PUSH
1826: LD_STRING #hunting-win
1828: PUSH
1829: EMPTY
1830: LIST
1831: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1832: LD_INT 175
1834: PPUSH
1835: CALL_OW 68
// YouWin ;
1839: CALL_OW 103
// DialogueOff ;
1843: CALL_OW 7
// end else
1847: GO 1856
// YouLost ( hunt3 ) ;
1849: LD_STRING hunt3
1851: PPUSH
1852: CALL_OW 104
// end ; end ;
1856: GO 1723
1858: POP
1859: POP
// end ; end_of_file end_of_file
1860: PPOPN 1
1862: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1863: LD_INT 0
1865: PPUSH
// if p2 = 100 then
1866: LD_VAR 0 2
1870: PUSH
1871: LD_INT 100
1873: EQUAL
1874: IFFALSE 2877
// begin if not StreamModeActive then
1876: LD_EXP 7
1880: NOT
1881: IFFALSE 1891
// StreamModeActive := true ;
1883: LD_ADDR_EXP 7
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// if p3 = 0 then
1891: LD_VAR 0 3
1895: PUSH
1896: LD_INT 0
1898: EQUAL
1899: IFFALSE 1905
// InitStreamMode ;
1901: CALL 3037 0 0
// if p3 = 1 then
1905: LD_VAR 0 3
1909: PUSH
1910: LD_INT 1
1912: EQUAL
1913: IFFALSE 1923
// sRocket := true ;
1915: LD_ADDR_EXP 12
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// if p3 = 2 then
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 2
1930: EQUAL
1931: IFFALSE 1941
// sSpeed := true ;
1933: LD_ADDR_EXP 11
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// if p3 = 3 then
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 3
1948: EQUAL
1949: IFFALSE 1959
// sEngine := true ;
1951: LD_ADDR_EXP 13
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 4 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 4
1966: EQUAL
1967: IFFALSE 1977
// sSpec := true ;
1969: LD_ADDR_EXP 10
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// if p3 = 5 then
1977: LD_VAR 0 3
1981: PUSH
1982: LD_INT 5
1984: EQUAL
1985: IFFALSE 1995
// sLevel := true ;
1987: LD_ADDR_EXP 14
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if p3 = 6 then
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 6
2002: EQUAL
2003: IFFALSE 2013
// sArmoury := true ;
2005: LD_ADDR_EXP 15
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 7 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 7
2020: EQUAL
2021: IFFALSE 2031
// sRadar := true ;
2023: LD_ADDR_EXP 16
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 8 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 8
2038: EQUAL
2039: IFFALSE 2049
// sBunker := true ;
2041: LD_ADDR_EXP 17
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 9 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 9
2056: EQUAL
2057: IFFALSE 2067
// sHack := true ;
2059: LD_ADDR_EXP 18
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 10 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 10
2074: EQUAL
2075: IFFALSE 2085
// sFire := true ;
2077: LD_ADDR_EXP 19
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 11 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 11
2092: EQUAL
2093: IFFALSE 2103
// sRefresh := true ;
2095: LD_ADDR_EXP 20
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 12 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 12
2110: EQUAL
2111: IFFALSE 2121
// sExp := true ;
2113: LD_ADDR_EXP 21
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 13 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 13
2128: EQUAL
2129: IFFALSE 2139
// sDepot := true ;
2131: LD_ADDR_EXP 22
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 14 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 14
2146: EQUAL
2147: IFFALSE 2157
// sFlag := true ;
2149: LD_ADDR_EXP 23
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 15 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 15
2164: EQUAL
2165: IFFALSE 2175
// sKamikadze := true ;
2167: LD_ADDR_EXP 31
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 16 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 16
2182: EQUAL
2183: IFFALSE 2193
// sTroll := true ;
2185: LD_ADDR_EXP 32
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 17 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 17
2200: EQUAL
2201: IFFALSE 2211
// sSlow := true ;
2203: LD_ADDR_EXP 33
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 18 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 18
2218: EQUAL
2219: IFFALSE 2229
// sLack := true ;
2221: LD_ADDR_EXP 34
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 19 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 19
2236: EQUAL
2237: IFFALSE 2247
// sTank := true ;
2239: LD_ADDR_EXP 36
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 20 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 20
2254: EQUAL
2255: IFFALSE 2265
// sRemote := true ;
2257: LD_ADDR_EXP 37
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 21 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 21
2272: EQUAL
2273: IFFALSE 2283
// sPowell := true ;
2275: LD_ADDR_EXP 38
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 22 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 22
2290: EQUAL
2291: IFFALSE 2301
// sTeleport := true ;
2293: LD_ADDR_EXP 41
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 23 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 23
2308: EQUAL
2309: IFFALSE 2319
// sOilTower := true ;
2311: LD_ADDR_EXP 43
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 24 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 24
2326: EQUAL
2327: IFFALSE 2337
// sShovel := true ;
2329: LD_ADDR_EXP 44
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 25 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 25
2344: EQUAL
2345: IFFALSE 2355
// sSheik := true ;
2347: LD_ADDR_EXP 45
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 26 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 26
2362: EQUAL
2363: IFFALSE 2373
// sEarthquake := true ;
2365: LD_ADDR_EXP 47
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 27 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 27
2380: EQUAL
2381: IFFALSE 2391
// sAI := true ;
2383: LD_ADDR_EXP 48
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 28 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 28
2398: EQUAL
2399: IFFALSE 2409
// sCargo := true ;
2401: LD_ADDR_EXP 51
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 29 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 29
2416: EQUAL
2417: IFFALSE 2427
// sDLaser := true ;
2419: LD_ADDR_EXP 52
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 30 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 30
2434: EQUAL
2435: IFFALSE 2445
// sExchange := true ;
2437: LD_ADDR_EXP 53
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 31 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 31
2452: EQUAL
2453: IFFALSE 2463
// sFac := true ;
2455: LD_ADDR_EXP 54
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 32 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 32
2470: EQUAL
2471: IFFALSE 2481
// sPower := true ;
2473: LD_ADDR_EXP 55
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 33 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 33
2488: EQUAL
2489: IFFALSE 2499
// sRandom := true ;
2491: LD_ADDR_EXP 56
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 34 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 34
2506: EQUAL
2507: IFFALSE 2517
// sShield := true ;
2509: LD_ADDR_EXP 57
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 35 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 35
2524: EQUAL
2525: IFFALSE 2535
// sTime := true ;
2527: LD_ADDR_EXP 58
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 36 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 36
2542: EQUAL
2543: IFFALSE 2553
// sTools := true ;
2545: LD_ADDR_EXP 59
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// if p3 = 101 then
2553: LD_VAR 0 3
2557: PUSH
2558: LD_INT 101
2560: EQUAL
2561: IFFALSE 2571
// sSold := true ;
2563: LD_ADDR_EXP 24
2567: PUSH
2568: LD_INT 1
2570: ST_TO_ADDR
// if p3 = 102 then
2571: LD_VAR 0 3
2575: PUSH
2576: LD_INT 102
2578: EQUAL
2579: IFFALSE 2589
// sDiff := true ;
2581: LD_ADDR_EXP 25
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// if p3 = 103 then
2589: LD_VAR 0 3
2593: PUSH
2594: LD_INT 103
2596: EQUAL
2597: IFFALSE 2607
// sFog := true ;
2599: LD_ADDR_EXP 28
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if p3 = 104 then
2607: LD_VAR 0 3
2611: PUSH
2612: LD_INT 104
2614: EQUAL
2615: IFFALSE 2625
// sReset := true ;
2617: LD_ADDR_EXP 29
2621: PUSH
2622: LD_INT 1
2624: ST_TO_ADDR
// if p3 = 105 then
2625: LD_VAR 0 3
2629: PUSH
2630: LD_INT 105
2632: EQUAL
2633: IFFALSE 2643
// sSun := true ;
2635: LD_ADDR_EXP 30
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// if p3 = 106 then
2643: LD_VAR 0 3
2647: PUSH
2648: LD_INT 106
2650: EQUAL
2651: IFFALSE 2661
// sTiger := true ;
2653: LD_ADDR_EXP 26
2657: PUSH
2658: LD_INT 1
2660: ST_TO_ADDR
// if p3 = 107 then
2661: LD_VAR 0 3
2665: PUSH
2666: LD_INT 107
2668: EQUAL
2669: IFFALSE 2679
// sBomb := true ;
2671: LD_ADDR_EXP 27
2675: PUSH
2676: LD_INT 1
2678: ST_TO_ADDR
// if p3 = 108 then
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 108
2686: EQUAL
2687: IFFALSE 2697
// sWound := true ;
2689: LD_ADDR_EXP 35
2693: PUSH
2694: LD_INT 1
2696: ST_TO_ADDR
// if p3 = 109 then
2697: LD_VAR 0 3
2701: PUSH
2702: LD_INT 109
2704: EQUAL
2705: IFFALSE 2715
// sBetray := true ;
2707: LD_ADDR_EXP 39
2711: PUSH
2712: LD_INT 1
2714: ST_TO_ADDR
// if p3 = 110 then
2715: LD_VAR 0 3
2719: PUSH
2720: LD_INT 110
2722: EQUAL
2723: IFFALSE 2733
// sContamin := true ;
2725: LD_ADDR_EXP 40
2729: PUSH
2730: LD_INT 1
2732: ST_TO_ADDR
// if p3 = 111 then
2733: LD_VAR 0 3
2737: PUSH
2738: LD_INT 111
2740: EQUAL
2741: IFFALSE 2751
// sOil := true ;
2743: LD_ADDR_EXP 42
2747: PUSH
2748: LD_INT 1
2750: ST_TO_ADDR
// if p3 = 112 then
2751: LD_VAR 0 3
2755: PUSH
2756: LD_INT 112
2758: EQUAL
2759: IFFALSE 2769
// sStu := true ;
2761: LD_ADDR_EXP 46
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// if p3 = 113 then
2769: LD_VAR 0 3
2773: PUSH
2774: LD_INT 113
2776: EQUAL
2777: IFFALSE 2787
// sBazooka := true ;
2779: LD_ADDR_EXP 49
2783: PUSH
2784: LD_INT 1
2786: ST_TO_ADDR
// if p3 = 114 then
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 114
2794: EQUAL
2795: IFFALSE 2805
// sMortar := true ;
2797: LD_ADDR_EXP 50
2801: PUSH
2802: LD_INT 1
2804: ST_TO_ADDR
// if p3 = 115 then
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 115
2812: EQUAL
2813: IFFALSE 2823
// sRanger := true ;
2815: LD_ADDR_EXP 60
2819: PUSH
2820: LD_INT 1
2822: ST_TO_ADDR
// if p3 = 116 then
2823: LD_VAR 0 3
2827: PUSH
2828: LD_INT 116
2830: EQUAL
2831: IFFALSE 2841
// sComputer := true ;
2833: LD_ADDR_EXP 61
2837: PUSH
2838: LD_INT 1
2840: ST_TO_ADDR
// if p3 = 117 then
2841: LD_VAR 0 3
2845: PUSH
2846: LD_INT 117
2848: EQUAL
2849: IFFALSE 2859
// s30 := true ;
2851: LD_ADDR_EXP 62
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// if p3 = 118 then
2859: LD_VAR 0 3
2863: PUSH
2864: LD_INT 118
2866: EQUAL
2867: IFFALSE 2877
// s60 := true ;
2869: LD_ADDR_EXP 63
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// end ; if p2 = 101 then
2877: LD_VAR 0 2
2881: PUSH
2882: LD_INT 101
2884: EQUAL
2885: IFFALSE 3013
// begin case p3 of 1 :
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 1
2894: DOUBLE
2895: EQUAL
2896: IFTRUE 2900
2898: GO 2907
2900: POP
// hHackUnlimitedResources ; 2 :
2901: CALL 14609 0 0
2905: GO 3013
2907: LD_INT 2
2909: DOUBLE
2910: EQUAL
2911: IFTRUE 2915
2913: GO 2922
2915: POP
// hHackSetLevel10 ; 3 :
2916: CALL 14742 0 0
2920: GO 3013
2922: LD_INT 3
2924: DOUBLE
2925: EQUAL
2926: IFTRUE 2930
2928: GO 2937
2930: POP
// hHackSetLevel10YourUnits ; 4 :
2931: CALL 14827 0 0
2935: GO 3013
2937: LD_INT 4
2939: DOUBLE
2940: EQUAL
2941: IFTRUE 2945
2943: GO 2952
2945: POP
// hHackInvincible ; 5 :
2946: CALL 15275 0 0
2950: GO 3013
2952: LD_INT 5
2954: DOUBLE
2955: EQUAL
2956: IFTRUE 2960
2958: GO 2967
2960: POP
// hHackInvisible ; 6 :
2961: CALL 15386 0 0
2965: GO 3013
2967: LD_INT 6
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 2982
2975: POP
// hHackChangeYourSide ; 7 :
2976: CALL 15443 0 0
2980: GO 3013
2982: LD_INT 7
2984: DOUBLE
2985: EQUAL
2986: IFTRUE 2990
2988: GO 2997
2990: POP
// hHackChangeUnitSide ; 8 :
2991: CALL 15485 0 0
2995: GO 3013
2997: LD_INT 8
2999: DOUBLE
3000: EQUAL
3001: IFTRUE 3005
3003: GO 3012
3005: POP
// hHackFog ; end ;
3006: CALL 15586 0 0
3010: GO 3013
3012: POP
// end ; end ;
3013: LD_VAR 0 7
3017: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3018: GO 3020
3020: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3021: LD_STRING initStreamRollete();
3023: PPUSH
3024: CALL_OW 559
// InitStreamMode ;
3028: CALL 3037 0 0
// DefineStreamItems ( ) ;
3032: CALL 3501 0 0
// end ;
3036: END
// function InitStreamMode ; begin
3037: LD_INT 0
3039: PPUSH
// streamModeActive := false ;
3040: LD_ADDR_EXP 7
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// normalCounter := 36 ;
3048: LD_ADDR_EXP 8
3052: PUSH
3053: LD_INT 36
3055: ST_TO_ADDR
// hardcoreCounter := 16 ;
3056: LD_ADDR_EXP 9
3060: PUSH
3061: LD_INT 16
3063: ST_TO_ADDR
// sRocket := false ;
3064: LD_ADDR_EXP 12
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// sSpeed := false ;
3072: LD_ADDR_EXP 11
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// sEngine := false ;
3080: LD_ADDR_EXP 13
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// sSpec := false ;
3088: LD_ADDR_EXP 10
3092: PUSH
3093: LD_INT 0
3095: ST_TO_ADDR
// sLevel := false ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// sArmoury := false ;
3104: LD_ADDR_EXP 15
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// sRadar := false ;
3112: LD_ADDR_EXP 16
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// sBunker := false ;
3120: LD_ADDR_EXP 17
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sHack := false ;
3128: LD_ADDR_EXP 18
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sFire := false ;
3136: LD_ADDR_EXP 19
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sRefresh := false ;
3144: LD_ADDR_EXP 20
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sExp := false ;
3152: LD_ADDR_EXP 21
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sDepot := false ;
3160: LD_ADDR_EXP 22
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sFlag := false ;
3168: LD_ADDR_EXP 23
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sKamikadze := false ;
3176: LD_ADDR_EXP 31
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sTroll := false ;
3184: LD_ADDR_EXP 32
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sSlow := false ;
3192: LD_ADDR_EXP 33
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// sLack := false ;
3200: LD_ADDR_EXP 34
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// sTank := false ;
3208: LD_ADDR_EXP 36
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// sRemote := false ;
3216: LD_ADDR_EXP 37
3220: PUSH
3221: LD_INT 0
3223: ST_TO_ADDR
// sPowell := false ;
3224: LD_ADDR_EXP 38
3228: PUSH
3229: LD_INT 0
3231: ST_TO_ADDR
// sTeleport := false ;
3232: LD_ADDR_EXP 41
3236: PUSH
3237: LD_INT 0
3239: ST_TO_ADDR
// sOilTower := false ;
3240: LD_ADDR_EXP 43
3244: PUSH
3245: LD_INT 0
3247: ST_TO_ADDR
// sShovel := false ;
3248: LD_ADDR_EXP 44
3252: PUSH
3253: LD_INT 0
3255: ST_TO_ADDR
// sSheik := false ;
3256: LD_ADDR_EXP 45
3260: PUSH
3261: LD_INT 0
3263: ST_TO_ADDR
// sEarthquake := false ;
3264: LD_ADDR_EXP 47
3268: PUSH
3269: LD_INT 0
3271: ST_TO_ADDR
// sAI := false ;
3272: LD_ADDR_EXP 48
3276: PUSH
3277: LD_INT 0
3279: ST_TO_ADDR
// sCargo := false ;
3280: LD_ADDR_EXP 51
3284: PUSH
3285: LD_INT 0
3287: ST_TO_ADDR
// sDLaser := false ;
3288: LD_ADDR_EXP 52
3292: PUSH
3293: LD_INT 0
3295: ST_TO_ADDR
// sExchange := false ;
3296: LD_ADDR_EXP 53
3300: PUSH
3301: LD_INT 0
3303: ST_TO_ADDR
// sFac := false ;
3304: LD_ADDR_EXP 54
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// sPower := false ;
3312: LD_ADDR_EXP 55
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// sRandom := false ;
3320: LD_ADDR_EXP 56
3324: PUSH
3325: LD_INT 0
3327: ST_TO_ADDR
// sShield := false ;
3328: LD_ADDR_EXP 57
3332: PUSH
3333: LD_INT 0
3335: ST_TO_ADDR
// sTime := false ;
3336: LD_ADDR_EXP 58
3340: PUSH
3341: LD_INT 0
3343: ST_TO_ADDR
// sTools := false ;
3344: LD_ADDR_EXP 59
3348: PUSH
3349: LD_INT 0
3351: ST_TO_ADDR
// sSold := false ;
3352: LD_ADDR_EXP 24
3356: PUSH
3357: LD_INT 0
3359: ST_TO_ADDR
// sDiff := false ;
3360: LD_ADDR_EXP 25
3364: PUSH
3365: LD_INT 0
3367: ST_TO_ADDR
// sFog := false ;
3368: LD_ADDR_EXP 28
3372: PUSH
3373: LD_INT 0
3375: ST_TO_ADDR
// sReset := false ;
3376: LD_ADDR_EXP 29
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// sSun := false ;
3384: LD_ADDR_EXP 30
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// sTiger := false ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: LD_INT 0
3399: ST_TO_ADDR
// sBomb := false ;
3400: LD_ADDR_EXP 27
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// sWound := false ;
3408: LD_ADDR_EXP 35
3412: PUSH
3413: LD_INT 0
3415: ST_TO_ADDR
// sBetray := false ;
3416: LD_ADDR_EXP 39
3420: PUSH
3421: LD_INT 0
3423: ST_TO_ADDR
// sContamin := false ;
3424: LD_ADDR_EXP 40
3428: PUSH
3429: LD_INT 0
3431: ST_TO_ADDR
// sOil := false ;
3432: LD_ADDR_EXP 42
3436: PUSH
3437: LD_INT 0
3439: ST_TO_ADDR
// sStu := false ;
3440: LD_ADDR_EXP 46
3444: PUSH
3445: LD_INT 0
3447: ST_TO_ADDR
// sBazooka := false ;
3448: LD_ADDR_EXP 49
3452: PUSH
3453: LD_INT 0
3455: ST_TO_ADDR
// sMortar := false ;
3456: LD_ADDR_EXP 50
3460: PUSH
3461: LD_INT 0
3463: ST_TO_ADDR
// sRanger := false ;
3464: LD_ADDR_EXP 60
3468: PUSH
3469: LD_INT 0
3471: ST_TO_ADDR
// sComputer := false ;
3472: LD_ADDR_EXP 61
3476: PUSH
3477: LD_INT 0
3479: ST_TO_ADDR
// s30 := false ;
3480: LD_ADDR_EXP 62
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// s60 := false ;
3488: LD_ADDR_EXP 63
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// end ;
3496: LD_VAR 0 1
3500: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3501: LD_INT 0
3503: PPUSH
3504: PPUSH
3505: PPUSH
3506: PPUSH
3507: PPUSH
// result := [ ] ;
3508: LD_ADDR_VAR 0 1
3512: PUSH
3513: EMPTY
3514: ST_TO_ADDR
// if campaign_id = 1 then
3515: LD_OWVAR 69
3519: PUSH
3520: LD_INT 1
3522: EQUAL
3523: IFFALSE 6689
// begin case mission_number of 1 :
3525: LD_OWVAR 70
3529: PUSH
3530: LD_INT 1
3532: DOUBLE
3533: EQUAL
3534: IFTRUE 3538
3536: GO 3614
3538: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3539: LD_ADDR_VAR 0 1
3543: PUSH
3544: LD_INT 2
3546: PUSH
3547: LD_INT 4
3549: PUSH
3550: LD_INT 11
3552: PUSH
3553: LD_INT 12
3555: PUSH
3556: LD_INT 15
3558: PUSH
3559: LD_INT 16
3561: PUSH
3562: LD_INT 22
3564: PUSH
3565: LD_INT 23
3567: PUSH
3568: LD_INT 26
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 101
3584: PUSH
3585: LD_INT 102
3587: PUSH
3588: LD_INT 106
3590: PUSH
3591: LD_INT 116
3593: PUSH
3594: LD_INT 117
3596: PUSH
3597: LD_INT 118
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: ST_TO_ADDR
3612: GO 6687
3614: LD_INT 2
3616: DOUBLE
3617: EQUAL
3618: IFTRUE 3622
3620: GO 3706
3622: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: LD_INT 4
3633: PUSH
3634: LD_INT 11
3636: PUSH
3637: LD_INT 12
3639: PUSH
3640: LD_INT 15
3642: PUSH
3643: LD_INT 16
3645: PUSH
3646: LD_INT 22
3648: PUSH
3649: LD_INT 23
3651: PUSH
3652: LD_INT 26
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 101
3668: PUSH
3669: LD_INT 102
3671: PUSH
3672: LD_INT 105
3674: PUSH
3675: LD_INT 106
3677: PUSH
3678: LD_INT 108
3680: PUSH
3681: LD_INT 116
3683: PUSH
3684: LD_INT 117
3686: PUSH
3687: LD_INT 118
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: ST_TO_ADDR
3704: GO 6687
3706: LD_INT 3
3708: DOUBLE
3709: EQUAL
3710: IFTRUE 3714
3712: GO 3802
3714: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3715: LD_ADDR_VAR 0 1
3719: PUSH
3720: LD_INT 2
3722: PUSH
3723: LD_INT 4
3725: PUSH
3726: LD_INT 5
3728: PUSH
3729: LD_INT 11
3731: PUSH
3732: LD_INT 12
3734: PUSH
3735: LD_INT 15
3737: PUSH
3738: LD_INT 16
3740: PUSH
3741: LD_INT 22
3743: PUSH
3744: LD_INT 26
3746: PUSH
3747: LD_INT 36
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 101
3764: PUSH
3765: LD_INT 102
3767: PUSH
3768: LD_INT 105
3770: PUSH
3771: LD_INT 106
3773: PUSH
3774: LD_INT 108
3776: PUSH
3777: LD_INT 116
3779: PUSH
3780: LD_INT 117
3782: PUSH
3783: LD_INT 118
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: ST_TO_ADDR
3800: GO 6687
3802: LD_INT 4
3804: DOUBLE
3805: EQUAL
3806: IFTRUE 3810
3808: GO 3906
3810: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3811: LD_ADDR_VAR 0 1
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: LD_INT 4
3821: PUSH
3822: LD_INT 5
3824: PUSH
3825: LD_INT 8
3827: PUSH
3828: LD_INT 11
3830: PUSH
3831: LD_INT 12
3833: PUSH
3834: LD_INT 15
3836: PUSH
3837: LD_INT 16
3839: PUSH
3840: LD_INT 22
3842: PUSH
3843: LD_INT 23
3845: PUSH
3846: LD_INT 26
3848: PUSH
3849: LD_INT 36
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 101
3868: PUSH
3869: LD_INT 102
3871: PUSH
3872: LD_INT 105
3874: PUSH
3875: LD_INT 106
3877: PUSH
3878: LD_INT 108
3880: PUSH
3881: LD_INT 116
3883: PUSH
3884: LD_INT 117
3886: PUSH
3887: LD_INT 118
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: ST_TO_ADDR
3904: GO 6687
3906: LD_INT 5
3908: DOUBLE
3909: EQUAL
3910: IFTRUE 3914
3912: GO 4026
3914: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3915: LD_ADDR_VAR 0 1
3919: PUSH
3920: LD_INT 2
3922: PUSH
3923: LD_INT 4
3925: PUSH
3926: LD_INT 5
3928: PUSH
3929: LD_INT 6
3931: PUSH
3932: LD_INT 8
3934: PUSH
3935: LD_INT 11
3937: PUSH
3938: LD_INT 12
3940: PUSH
3941: LD_INT 15
3943: PUSH
3944: LD_INT 16
3946: PUSH
3947: LD_INT 22
3949: PUSH
3950: LD_INT 23
3952: PUSH
3953: LD_INT 25
3955: PUSH
3956: LD_INT 26
3958: PUSH
3959: LD_INT 36
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 101
3980: PUSH
3981: LD_INT 102
3983: PUSH
3984: LD_INT 105
3986: PUSH
3987: LD_INT 106
3989: PUSH
3990: LD_INT 108
3992: PUSH
3993: LD_INT 109
3995: PUSH
3996: LD_INT 112
3998: PUSH
3999: LD_INT 116
4001: PUSH
4002: LD_INT 117
4004: PUSH
4005: LD_INT 118
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: ST_TO_ADDR
4024: GO 6687
4026: LD_INT 6
4028: DOUBLE
4029: EQUAL
4030: IFTRUE 4034
4032: GO 4166
4034: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4035: LD_ADDR_VAR 0 1
4039: PUSH
4040: LD_INT 2
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: LD_INT 5
4048: PUSH
4049: LD_INT 6
4051: PUSH
4052: LD_INT 8
4054: PUSH
4055: LD_INT 11
4057: PUSH
4058: LD_INT 12
4060: PUSH
4061: LD_INT 15
4063: PUSH
4064: LD_INT 16
4066: PUSH
4067: LD_INT 20
4069: PUSH
4070: LD_INT 21
4072: PUSH
4073: LD_INT 22
4075: PUSH
4076: LD_INT 23
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 26
4084: PUSH
4085: LD_INT 30
4087: PUSH
4088: LD_INT 31
4090: PUSH
4091: LD_INT 32
4093: PUSH
4094: LD_INT 36
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 101
4120: PUSH
4121: LD_INT 102
4123: PUSH
4124: LD_INT 105
4126: PUSH
4127: LD_INT 106
4129: PUSH
4130: LD_INT 108
4132: PUSH
4133: LD_INT 109
4135: PUSH
4136: LD_INT 112
4138: PUSH
4139: LD_INT 116
4141: PUSH
4142: LD_INT 117
4144: PUSH
4145: LD_INT 118
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
4164: GO 6687
4166: LD_INT 7
4168: DOUBLE
4169: EQUAL
4170: IFTRUE 4174
4172: GO 4286
4174: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4175: LD_ADDR_VAR 0 1
4179: PUSH
4180: LD_INT 2
4182: PUSH
4183: LD_INT 4
4185: PUSH
4186: LD_INT 5
4188: PUSH
4189: LD_INT 7
4191: PUSH
4192: LD_INT 11
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 15
4200: PUSH
4201: LD_INT 16
4203: PUSH
4204: LD_INT 20
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 22
4212: PUSH
4213: LD_INT 23
4215: PUSH
4216: LD_INT 25
4218: PUSH
4219: LD_INT 26
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 101
4240: PUSH
4241: LD_INT 102
4243: PUSH
4244: LD_INT 103
4246: PUSH
4247: LD_INT 105
4249: PUSH
4250: LD_INT 106
4252: PUSH
4253: LD_INT 108
4255: PUSH
4256: LD_INT 112
4258: PUSH
4259: LD_INT 116
4261: PUSH
4262: LD_INT 117
4264: PUSH
4265: LD_INT 118
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: ST_TO_ADDR
4284: GO 6687
4286: LD_INT 8
4288: DOUBLE
4289: EQUAL
4290: IFTRUE 4294
4292: GO 4434
4294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4295: LD_ADDR_VAR 0 1
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: LD_INT 4
4305: PUSH
4306: LD_INT 5
4308: PUSH
4309: LD_INT 6
4311: PUSH
4312: LD_INT 7
4314: PUSH
4315: LD_INT 8
4317: PUSH
4318: LD_INT 11
4320: PUSH
4321: LD_INT 12
4323: PUSH
4324: LD_INT 15
4326: PUSH
4327: LD_INT 16
4329: PUSH
4330: LD_INT 20
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 22
4338: PUSH
4339: LD_INT 23
4341: PUSH
4342: LD_INT 25
4344: PUSH
4345: LD_INT 26
4347: PUSH
4348: LD_INT 30
4350: PUSH
4351: LD_INT 31
4353: PUSH
4354: LD_INT 32
4356: PUSH
4357: LD_INT 36
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 101
4384: PUSH
4385: LD_INT 102
4387: PUSH
4388: LD_INT 103
4390: PUSH
4391: LD_INT 105
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 108
4399: PUSH
4400: LD_INT 109
4402: PUSH
4403: LD_INT 112
4405: PUSH
4406: LD_INT 116
4408: PUSH
4409: LD_INT 117
4411: PUSH
4412: LD_INT 118
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: ST_TO_ADDR
4432: GO 6687
4434: LD_INT 9
4436: DOUBLE
4437: EQUAL
4438: IFTRUE 4442
4440: GO 4590
4442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4443: LD_ADDR_VAR 0 1
4447: PUSH
4448: LD_INT 2
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 5
4456: PUSH
4457: LD_INT 6
4459: PUSH
4460: LD_INT 7
4462: PUSH
4463: LD_INT 8
4465: PUSH
4466: LD_INT 11
4468: PUSH
4469: LD_INT 12
4471: PUSH
4472: LD_INT 15
4474: PUSH
4475: LD_INT 16
4477: PUSH
4478: LD_INT 20
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 22
4486: PUSH
4487: LD_INT 23
4489: PUSH
4490: LD_INT 25
4492: PUSH
4493: LD_INT 26
4495: PUSH
4496: LD_INT 28
4498: PUSH
4499: LD_INT 30
4501: PUSH
4502: LD_INT 31
4504: PUSH
4505: LD_INT 32
4507: PUSH
4508: LD_INT 36
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 101
4536: PUSH
4537: LD_INT 102
4539: PUSH
4540: LD_INT 103
4542: PUSH
4543: LD_INT 105
4545: PUSH
4546: LD_INT 106
4548: PUSH
4549: LD_INT 108
4551: PUSH
4552: LD_INT 109
4554: PUSH
4555: LD_INT 112
4557: PUSH
4558: LD_INT 114
4560: PUSH
4561: LD_INT 116
4563: PUSH
4564: LD_INT 117
4566: PUSH
4567: LD_INT 118
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: ST_TO_ADDR
4588: GO 6687
4590: LD_INT 10
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4794
4598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4599: LD_ADDR_VAR 0 1
4603: PUSH
4604: LD_INT 2
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: LD_INT 6
4615: PUSH
4616: LD_INT 7
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: LD_INT 9
4624: PUSH
4625: LD_INT 10
4627: PUSH
4628: LD_INT 11
4630: PUSH
4631: LD_INT 12
4633: PUSH
4634: LD_INT 13
4636: PUSH
4637: LD_INT 14
4639: PUSH
4640: LD_INT 15
4642: PUSH
4643: LD_INT 16
4645: PUSH
4646: LD_INT 17
4648: PUSH
4649: LD_INT 18
4651: PUSH
4652: LD_INT 19
4654: PUSH
4655: LD_INT 20
4657: PUSH
4658: LD_INT 21
4660: PUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 23
4666: PUSH
4667: LD_INT 24
4669: PUSH
4670: LD_INT 25
4672: PUSH
4673: LD_INT 26
4675: PUSH
4676: LD_INT 28
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: LD_INT 32
4687: PUSH
4688: LD_INT 36
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 101
4724: PUSH
4725: LD_INT 102
4727: PUSH
4728: LD_INT 103
4730: PUSH
4731: LD_INT 104
4733: PUSH
4734: LD_INT 105
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 107
4742: PUSH
4743: LD_INT 108
4745: PUSH
4746: LD_INT 109
4748: PUSH
4749: LD_INT 110
4751: PUSH
4752: LD_INT 111
4754: PUSH
4755: LD_INT 112
4757: PUSH
4758: LD_INT 114
4760: PUSH
4761: LD_INT 116
4763: PUSH
4764: LD_INT 117
4766: PUSH
4767: LD_INT 118
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: ST_TO_ADDR
4792: GO 6687
4794: LD_INT 11
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 5006
4802: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4803: LD_ADDR_VAR 0 1
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: LD_INT 4
4816: PUSH
4817: LD_INT 5
4819: PUSH
4820: LD_INT 6
4822: PUSH
4823: LD_INT 7
4825: PUSH
4826: LD_INT 8
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: LD_INT 10
4834: PUSH
4835: LD_INT 11
4837: PUSH
4838: LD_INT 12
4840: PUSH
4841: LD_INT 13
4843: PUSH
4844: LD_INT 14
4846: PUSH
4847: LD_INT 15
4849: PUSH
4850: LD_INT 16
4852: PUSH
4853: LD_INT 17
4855: PUSH
4856: LD_INT 18
4858: PUSH
4859: LD_INT 19
4861: PUSH
4862: LD_INT 20
4864: PUSH
4865: LD_INT 21
4867: PUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 23
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 26
4882: PUSH
4883: LD_INT 28
4885: PUSH
4886: LD_INT 30
4888: PUSH
4889: LD_INT 31
4891: PUSH
4892: LD_INT 32
4894: PUSH
4895: LD_INT 34
4897: PUSH
4898: LD_INT 36
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 101
4936: PUSH
4937: LD_INT 102
4939: PUSH
4940: LD_INT 103
4942: PUSH
4943: LD_INT 104
4945: PUSH
4946: LD_INT 105
4948: PUSH
4949: LD_INT 106
4951: PUSH
4952: LD_INT 107
4954: PUSH
4955: LD_INT 108
4957: PUSH
4958: LD_INT 109
4960: PUSH
4961: LD_INT 110
4963: PUSH
4964: LD_INT 111
4966: PUSH
4967: LD_INT 112
4969: PUSH
4970: LD_INT 114
4972: PUSH
4973: LD_INT 116
4975: PUSH
4976: LD_INT 117
4978: PUSH
4979: LD_INT 118
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
5004: GO 6687
5006: LD_INT 12
5008: DOUBLE
5009: EQUAL
5010: IFTRUE 5014
5012: GO 5234
5014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5015: LD_ADDR_VAR 0 1
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: LD_INT 2
5025: PUSH
5026: LD_INT 3
5028: PUSH
5029: LD_INT 4
5031: PUSH
5032: LD_INT 5
5034: PUSH
5035: LD_INT 6
5037: PUSH
5038: LD_INT 7
5040: PUSH
5041: LD_INT 8
5043: PUSH
5044: LD_INT 9
5046: PUSH
5047: LD_INT 10
5049: PUSH
5050: LD_INT 11
5052: PUSH
5053: LD_INT 12
5055: PUSH
5056: LD_INT 13
5058: PUSH
5059: LD_INT 14
5061: PUSH
5062: LD_INT 15
5064: PUSH
5065: LD_INT 16
5067: PUSH
5068: LD_INT 17
5070: PUSH
5071: LD_INT 18
5073: PUSH
5074: LD_INT 19
5076: PUSH
5077: LD_INT 20
5079: PUSH
5080: LD_INT 21
5082: PUSH
5083: LD_INT 22
5085: PUSH
5086: LD_INT 23
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 25
5094: PUSH
5095: LD_INT 26
5097: PUSH
5098: LD_INT 27
5100: PUSH
5101: LD_INT 28
5103: PUSH
5104: LD_INT 30
5106: PUSH
5107: LD_INT 31
5109: PUSH
5110: LD_INT 32
5112: PUSH
5113: LD_INT 33
5115: PUSH
5116: LD_INT 34
5118: PUSH
5119: LD_INT 36
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 101
5160: PUSH
5161: LD_INT 102
5163: PUSH
5164: LD_INT 103
5166: PUSH
5167: LD_INT 104
5169: PUSH
5170: LD_INT 105
5172: PUSH
5173: LD_INT 106
5175: PUSH
5176: LD_INT 107
5178: PUSH
5179: LD_INT 108
5181: PUSH
5182: LD_INT 109
5184: PUSH
5185: LD_INT 110
5187: PUSH
5188: LD_INT 111
5190: PUSH
5191: LD_INT 112
5193: PUSH
5194: LD_INT 113
5196: PUSH
5197: LD_INT 114
5199: PUSH
5200: LD_INT 116
5202: PUSH
5203: LD_INT 117
5205: PUSH
5206: LD_INT 118
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: ST_TO_ADDR
5232: GO 6687
5234: LD_INT 13
5236: DOUBLE
5237: EQUAL
5238: IFTRUE 5242
5240: GO 5450
5242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5243: LD_ADDR_VAR 0 1
5247: PUSH
5248: LD_INT 1
5250: PUSH
5251: LD_INT 2
5253: PUSH
5254: LD_INT 3
5256: PUSH
5257: LD_INT 4
5259: PUSH
5260: LD_INT 5
5262: PUSH
5263: LD_INT 8
5265: PUSH
5266: LD_INT 9
5268: PUSH
5269: LD_INT 10
5271: PUSH
5272: LD_INT 11
5274: PUSH
5275: LD_INT 12
5277: PUSH
5278: LD_INT 14
5280: PUSH
5281: LD_INT 15
5283: PUSH
5284: LD_INT 16
5286: PUSH
5287: LD_INT 17
5289: PUSH
5290: LD_INT 18
5292: PUSH
5293: LD_INT 19
5295: PUSH
5296: LD_INT 20
5298: PUSH
5299: LD_INT 21
5301: PUSH
5302: LD_INT 22
5304: PUSH
5305: LD_INT 23
5307: PUSH
5308: LD_INT 24
5310: PUSH
5311: LD_INT 25
5313: PUSH
5314: LD_INT 26
5316: PUSH
5317: LD_INT 27
5319: PUSH
5320: LD_INT 28
5322: PUSH
5323: LD_INT 30
5325: PUSH
5326: LD_INT 31
5328: PUSH
5329: LD_INT 32
5331: PUSH
5332: LD_INT 33
5334: PUSH
5335: LD_INT 34
5337: PUSH
5338: LD_INT 36
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 101
5376: PUSH
5377: LD_INT 102
5379: PUSH
5380: LD_INT 103
5382: PUSH
5383: LD_INT 104
5385: PUSH
5386: LD_INT 105
5388: PUSH
5389: LD_INT 106
5391: PUSH
5392: LD_INT 107
5394: PUSH
5395: LD_INT 108
5397: PUSH
5398: LD_INT 109
5400: PUSH
5401: LD_INT 110
5403: PUSH
5404: LD_INT 111
5406: PUSH
5407: LD_INT 112
5409: PUSH
5410: LD_INT 113
5412: PUSH
5413: LD_INT 114
5415: PUSH
5416: LD_INT 116
5418: PUSH
5419: LD_INT 117
5421: PUSH
5422: LD_INT 118
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: ST_TO_ADDR
5448: GO 6687
5450: LD_INT 14
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5682
5458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5459: LD_ADDR_VAR 0 1
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: LD_INT 2
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 5
5478: PUSH
5479: LD_INT 6
5481: PUSH
5482: LD_INT 7
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 9
5490: PUSH
5491: LD_INT 10
5493: PUSH
5494: LD_INT 11
5496: PUSH
5497: LD_INT 12
5499: PUSH
5500: LD_INT 13
5502: PUSH
5503: LD_INT 14
5505: PUSH
5506: LD_INT 15
5508: PUSH
5509: LD_INT 16
5511: PUSH
5512: LD_INT 17
5514: PUSH
5515: LD_INT 18
5517: PUSH
5518: LD_INT 19
5520: PUSH
5521: LD_INT 20
5523: PUSH
5524: LD_INT 21
5526: PUSH
5527: LD_INT 22
5529: PUSH
5530: LD_INT 23
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 25
5538: PUSH
5539: LD_INT 26
5541: PUSH
5542: LD_INT 27
5544: PUSH
5545: LD_INT 28
5547: PUSH
5548: LD_INT 29
5550: PUSH
5551: LD_INT 30
5553: PUSH
5554: LD_INT 31
5556: PUSH
5557: LD_INT 32
5559: PUSH
5560: LD_INT 33
5562: PUSH
5563: LD_INT 34
5565: PUSH
5566: LD_INT 36
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 101
5608: PUSH
5609: LD_INT 102
5611: PUSH
5612: LD_INT 103
5614: PUSH
5615: LD_INT 104
5617: PUSH
5618: LD_INT 105
5620: PUSH
5621: LD_INT 106
5623: PUSH
5624: LD_INT 107
5626: PUSH
5627: LD_INT 108
5629: PUSH
5630: LD_INT 109
5632: PUSH
5633: LD_INT 110
5635: PUSH
5636: LD_INT 111
5638: PUSH
5639: LD_INT 112
5641: PUSH
5642: LD_INT 113
5644: PUSH
5645: LD_INT 114
5647: PUSH
5648: LD_INT 116
5650: PUSH
5651: LD_INT 117
5653: PUSH
5654: LD_INT 118
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: ST_TO_ADDR
5680: GO 6687
5682: LD_INT 15
5684: DOUBLE
5685: EQUAL
5686: IFTRUE 5690
5688: GO 5914
5690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 1
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: LD_INT 3
5704: PUSH
5705: LD_INT 4
5707: PUSH
5708: LD_INT 5
5710: PUSH
5711: LD_INT 6
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: LD_INT 8
5719: PUSH
5720: LD_INT 9
5722: PUSH
5723: LD_INT 10
5725: PUSH
5726: LD_INT 11
5728: PUSH
5729: LD_INT 12
5731: PUSH
5732: LD_INT 13
5734: PUSH
5735: LD_INT 14
5737: PUSH
5738: LD_INT 15
5740: PUSH
5741: LD_INT 16
5743: PUSH
5744: LD_INT 17
5746: PUSH
5747: LD_INT 18
5749: PUSH
5750: LD_INT 19
5752: PUSH
5753: LD_INT 20
5755: PUSH
5756: LD_INT 21
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 23
5764: PUSH
5765: LD_INT 24
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: LD_INT 26
5773: PUSH
5774: LD_INT 27
5776: PUSH
5777: LD_INT 28
5779: PUSH
5780: LD_INT 29
5782: PUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 31
5788: PUSH
5789: LD_INT 32
5791: PUSH
5792: LD_INT 33
5794: PUSH
5795: LD_INT 34
5797: PUSH
5798: LD_INT 36
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 101
5840: PUSH
5841: LD_INT 102
5843: PUSH
5844: LD_INT 103
5846: PUSH
5847: LD_INT 104
5849: PUSH
5850: LD_INT 105
5852: PUSH
5853: LD_INT 106
5855: PUSH
5856: LD_INT 107
5858: PUSH
5859: LD_INT 108
5861: PUSH
5862: LD_INT 109
5864: PUSH
5865: LD_INT 110
5867: PUSH
5868: LD_INT 111
5870: PUSH
5871: LD_INT 112
5873: PUSH
5874: LD_INT 113
5876: PUSH
5877: LD_INT 114
5879: PUSH
5880: LD_INT 116
5882: PUSH
5883: LD_INT 117
5885: PUSH
5886: LD_INT 118
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: ST_TO_ADDR
5912: GO 6687
5914: LD_INT 16
5916: DOUBLE
5917: EQUAL
5918: IFTRUE 5922
5920: GO 6058
5922: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: LD_INT 2
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: LD_INT 5
5936: PUSH
5937: LD_INT 7
5939: PUSH
5940: LD_INT 11
5942: PUSH
5943: LD_INT 12
5945: PUSH
5946: LD_INT 15
5948: PUSH
5949: LD_INT 16
5951: PUSH
5952: LD_INT 20
5954: PUSH
5955: LD_INT 21
5957: PUSH
5958: LD_INT 22
5960: PUSH
5961: LD_INT 23
5963: PUSH
5964: LD_INT 25
5966: PUSH
5967: LD_INT 26
5969: PUSH
5970: LD_INT 30
5972: PUSH
5973: LD_INT 31
5975: PUSH
5976: LD_INT 32
5978: PUSH
5979: LD_INT 33
5981: PUSH
5982: LD_INT 34
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 101
6008: PUSH
6009: LD_INT 102
6011: PUSH
6012: LD_INT 103
6014: PUSH
6015: LD_INT 106
6017: PUSH
6018: LD_INT 108
6020: PUSH
6021: LD_INT 112
6023: PUSH
6024: LD_INT 113
6026: PUSH
6027: LD_INT 114
6029: PUSH
6030: LD_INT 116
6032: PUSH
6033: LD_INT 117
6035: PUSH
6036: LD_INT 118
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: ST_TO_ADDR
6056: GO 6687
6058: LD_INT 17
6060: DOUBLE
6061: EQUAL
6062: IFTRUE 6066
6064: GO 6290
6066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6067: LD_ADDR_VAR 0 1
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: LD_INT 2
6077: PUSH
6078: LD_INT 3
6080: PUSH
6081: LD_INT 4
6083: PUSH
6084: LD_INT 5
6086: PUSH
6087: LD_INT 6
6089: PUSH
6090: LD_INT 7
6092: PUSH
6093: LD_INT 8
6095: PUSH
6096: LD_INT 9
6098: PUSH
6099: LD_INT 10
6101: PUSH
6102: LD_INT 11
6104: PUSH
6105: LD_INT 12
6107: PUSH
6108: LD_INT 13
6110: PUSH
6111: LD_INT 14
6113: PUSH
6114: LD_INT 15
6116: PUSH
6117: LD_INT 16
6119: PUSH
6120: LD_INT 17
6122: PUSH
6123: LD_INT 18
6125: PUSH
6126: LD_INT 19
6128: PUSH
6129: LD_INT 20
6131: PUSH
6132: LD_INT 21
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 23
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 26
6149: PUSH
6150: LD_INT 27
6152: PUSH
6153: LD_INT 28
6155: PUSH
6156: LD_INT 29
6158: PUSH
6159: LD_INT 30
6161: PUSH
6162: LD_INT 31
6164: PUSH
6165: LD_INT 32
6167: PUSH
6168: LD_INT 33
6170: PUSH
6171: LD_INT 34
6173: PUSH
6174: LD_INT 36
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 101
6216: PUSH
6217: LD_INT 102
6219: PUSH
6220: LD_INT 103
6222: PUSH
6223: LD_INT 104
6225: PUSH
6226: LD_INT 105
6228: PUSH
6229: LD_INT 106
6231: PUSH
6232: LD_INT 107
6234: PUSH
6235: LD_INT 108
6237: PUSH
6238: LD_INT 109
6240: PUSH
6241: LD_INT 110
6243: PUSH
6244: LD_INT 111
6246: PUSH
6247: LD_INT 112
6249: PUSH
6250: LD_INT 113
6252: PUSH
6253: LD_INT 114
6255: PUSH
6256: LD_INT 116
6258: PUSH
6259: LD_INT 117
6261: PUSH
6262: LD_INT 118
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: ST_TO_ADDR
6288: GO 6687
6290: LD_INT 18
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6446
6298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6299: LD_ADDR_VAR 0 1
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: LD_INT 4
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: LD_INT 7
6315: PUSH
6316: LD_INT 11
6318: PUSH
6319: LD_INT 12
6321: PUSH
6322: LD_INT 15
6324: PUSH
6325: LD_INT 16
6327: PUSH
6328: LD_INT 20
6330: PUSH
6331: LD_INT 21
6333: PUSH
6334: LD_INT 22
6336: PUSH
6337: LD_INT 23
6339: PUSH
6340: LD_INT 25
6342: PUSH
6343: LD_INT 26
6345: PUSH
6346: LD_INT 30
6348: PUSH
6349: LD_INT 31
6351: PUSH
6352: LD_INT 32
6354: PUSH
6355: LD_INT 33
6357: PUSH
6358: LD_INT 34
6360: PUSH
6361: LD_INT 35
6363: PUSH
6364: LD_INT 36
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 101
6392: PUSH
6393: LD_INT 102
6395: PUSH
6396: LD_INT 103
6398: PUSH
6399: LD_INT 106
6401: PUSH
6402: LD_INT 108
6404: PUSH
6405: LD_INT 112
6407: PUSH
6408: LD_INT 113
6410: PUSH
6411: LD_INT 114
6413: PUSH
6414: LD_INT 115
6416: PUSH
6417: LD_INT 116
6419: PUSH
6420: LD_INT 117
6422: PUSH
6423: LD_INT 118
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: ST_TO_ADDR
6444: GO 6687
6446: LD_INT 19
6448: DOUBLE
6449: EQUAL
6450: IFTRUE 6454
6452: GO 6686
6454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_INT 1
6462: PUSH
6463: LD_INT 2
6465: PUSH
6466: LD_INT 3
6468: PUSH
6469: LD_INT 4
6471: PUSH
6472: LD_INT 5
6474: PUSH
6475: LD_INT 6
6477: PUSH
6478: LD_INT 7
6480: PUSH
6481: LD_INT 8
6483: PUSH
6484: LD_INT 9
6486: PUSH
6487: LD_INT 10
6489: PUSH
6490: LD_INT 11
6492: PUSH
6493: LD_INT 12
6495: PUSH
6496: LD_INT 13
6498: PUSH
6499: LD_INT 14
6501: PUSH
6502: LD_INT 15
6504: PUSH
6505: LD_INT 16
6507: PUSH
6508: LD_INT 17
6510: PUSH
6511: LD_INT 18
6513: PUSH
6514: LD_INT 19
6516: PUSH
6517: LD_INT 20
6519: PUSH
6520: LD_INT 21
6522: PUSH
6523: LD_INT 22
6525: PUSH
6526: LD_INT 23
6528: PUSH
6529: LD_INT 24
6531: PUSH
6532: LD_INT 25
6534: PUSH
6535: LD_INT 26
6537: PUSH
6538: LD_INT 27
6540: PUSH
6541: LD_INT 28
6543: PUSH
6544: LD_INT 29
6546: PUSH
6547: LD_INT 30
6549: PUSH
6550: LD_INT 31
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 33
6558: PUSH
6559: LD_INT 34
6561: PUSH
6562: LD_INT 35
6564: PUSH
6565: LD_INT 36
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 101
6608: PUSH
6609: LD_INT 102
6611: PUSH
6612: LD_INT 103
6614: PUSH
6615: LD_INT 104
6617: PUSH
6618: LD_INT 105
6620: PUSH
6621: LD_INT 106
6623: PUSH
6624: LD_INT 107
6626: PUSH
6627: LD_INT 108
6629: PUSH
6630: LD_INT 109
6632: PUSH
6633: LD_INT 110
6635: PUSH
6636: LD_INT 111
6638: PUSH
6639: LD_INT 112
6641: PUSH
6642: LD_INT 113
6644: PUSH
6645: LD_INT 114
6647: PUSH
6648: LD_INT 115
6650: PUSH
6651: LD_INT 116
6653: PUSH
6654: LD_INT 117
6656: PUSH
6657: LD_INT 118
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: ST_TO_ADDR
6684: GO 6687
6686: POP
// end else
6687: GO 6918
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6689: LD_ADDR_VAR 0 1
6693: PUSH
6694: LD_INT 1
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 5
6708: PUSH
6709: LD_INT 6
6711: PUSH
6712: LD_INT 7
6714: PUSH
6715: LD_INT 8
6717: PUSH
6718: LD_INT 9
6720: PUSH
6721: LD_INT 10
6723: PUSH
6724: LD_INT 11
6726: PUSH
6727: LD_INT 12
6729: PUSH
6730: LD_INT 13
6732: PUSH
6733: LD_INT 14
6735: PUSH
6736: LD_INT 15
6738: PUSH
6739: LD_INT 16
6741: PUSH
6742: LD_INT 17
6744: PUSH
6745: LD_INT 18
6747: PUSH
6748: LD_INT 19
6750: PUSH
6751: LD_INT 20
6753: PUSH
6754: LD_INT 21
6756: PUSH
6757: LD_INT 22
6759: PUSH
6760: LD_INT 23
6762: PUSH
6763: LD_INT 24
6765: PUSH
6766: LD_INT 25
6768: PUSH
6769: LD_INT 26
6771: PUSH
6772: LD_INT 27
6774: PUSH
6775: LD_INT 28
6777: PUSH
6778: LD_INT 29
6780: PUSH
6781: LD_INT 30
6783: PUSH
6784: LD_INT 31
6786: PUSH
6787: LD_INT 32
6789: PUSH
6790: LD_INT 33
6792: PUSH
6793: LD_INT 34
6795: PUSH
6796: LD_INT 35
6798: PUSH
6799: LD_INT 36
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 101
6842: PUSH
6843: LD_INT 102
6845: PUSH
6846: LD_INT 103
6848: PUSH
6849: LD_INT 104
6851: PUSH
6852: LD_INT 105
6854: PUSH
6855: LD_INT 106
6857: PUSH
6858: LD_INT 107
6860: PUSH
6861: LD_INT 108
6863: PUSH
6864: LD_INT 109
6866: PUSH
6867: LD_INT 110
6869: PUSH
6870: LD_INT 111
6872: PUSH
6873: LD_INT 112
6875: PUSH
6876: LD_INT 113
6878: PUSH
6879: LD_INT 114
6881: PUSH
6882: LD_INT 115
6884: PUSH
6885: LD_INT 116
6887: PUSH
6888: LD_INT 117
6890: PUSH
6891: LD_INT 118
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: ST_TO_ADDR
// if result then
6918: LD_VAR 0 1
6922: IFFALSE 7211
// begin normal :=  ;
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_STRING 
6931: ST_TO_ADDR
// hardcore :=  ;
6932: LD_ADDR_VAR 0 4
6936: PUSH
6937: LD_STRING 
6939: ST_TO_ADDR
// for i = 1 to normalCounter do
6940: LD_ADDR_VAR 0 5
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 8
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7057
// begin tmp := 0 ;
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_STRING 0
6965: ST_TO_ADDR
// if result [ 1 ] then
6966: LD_VAR 0 1
6970: PUSH
6971: LD_INT 1
6973: ARRAY
6974: IFFALSE 7039
// if result [ 1 ] [ 1 ] = i then
6976: LD_VAR 0 1
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PUSH
6985: LD_INT 1
6987: ARRAY
6988: PUSH
6989: LD_VAR 0 5
6993: EQUAL
6994: IFFALSE 7039
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6996: LD_ADDR_VAR 0 1
7000: PUSH
7001: LD_VAR 0 1
7005: PPUSH
7006: LD_INT 1
7008: PPUSH
7009: LD_VAR 0 1
7013: PUSH
7014: LD_INT 1
7016: ARRAY
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: CALL_OW 3
7025: PPUSH
7026: CALL_OW 1
7030: ST_TO_ADDR
// tmp := 1 ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_STRING 1
7038: ST_TO_ADDR
// end ; normal := normal & tmp ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 3
7048: PUSH
7049: LD_VAR 0 2
7053: STR
7054: ST_TO_ADDR
// end ;
7055: GO 6955
7057: POP
7058: POP
// for i = 1 to hardcoreCounter do
7059: LD_ADDR_VAR 0 5
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_EXP 9
7073: PUSH
7074: FOR_TO
7075: IFFALSE 7180
// begin tmp := 0 ;
7077: LD_ADDR_VAR 0 2
7081: PUSH
7082: LD_STRING 0
7084: ST_TO_ADDR
// if result [ 2 ] then
7085: LD_VAR 0 1
7089: PUSH
7090: LD_INT 2
7092: ARRAY
7093: IFFALSE 7162
// if result [ 2 ] [ 1 ] = 100 + i then
7095: LD_VAR 0 1
7099: PUSH
7100: LD_INT 2
7102: ARRAY
7103: PUSH
7104: LD_INT 1
7106: ARRAY
7107: PUSH
7108: LD_INT 100
7110: PUSH
7111: LD_VAR 0 5
7115: PLUS
7116: EQUAL
7117: IFFALSE 7162
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7119: LD_ADDR_VAR 0 1
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: LD_INT 2
7131: PPUSH
7132: LD_VAR 0 1
7136: PUSH
7137: LD_INT 2
7139: ARRAY
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 3
7148: PPUSH
7149: CALL_OW 1
7153: ST_TO_ADDR
// tmp := 1 ;
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: LD_STRING 1
7161: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7162: LD_ADDR_VAR 0 4
7166: PUSH
7167: LD_VAR 0 4
7171: PUSH
7172: LD_VAR 0 2
7176: STR
7177: ST_TO_ADDR
// end ;
7178: GO 7074
7180: POP
7181: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7182: LD_STRING getStreamItemsFromMission("
7184: PUSH
7185: LD_VAR 0 3
7189: STR
7190: PUSH
7191: LD_STRING ","
7193: STR
7194: PUSH
7195: LD_VAR 0 4
7199: STR
7200: PUSH
7201: LD_STRING ")
7203: STR
7204: PPUSH
7205: CALL_OW 559
// end else
7209: GO 7218
// ToLua ( getStreamItemsFromMission("","") ) ;
7211: LD_STRING getStreamItemsFromMission("","")
7213: PPUSH
7214: CALL_OW 559
// end ;
7218: LD_VAR 0 1
7222: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7223: LD_EXP 7
7227: PUSH
7228: LD_EXP 12
7232: AND
7233: IFFALSE 7357
7235: GO 7237
7237: DISABLE
7238: LD_INT 0
7240: PPUSH
7241: PPUSH
// begin enable ;
7242: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7243: LD_ADDR_VAR 0 2
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_OWVAR 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: LD_INT 34
7265: PUSH
7266: LD_INT 7
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 34
7275: PUSH
7276: LD_INT 45
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 34
7285: PUSH
7286: LD_INT 28
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: LD_INT 34
7295: PUSH
7296: LD_INT 47
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: ST_TO_ADDR
// if not tmp then
7319: LD_VAR 0 2
7323: NOT
7324: IFFALSE 7328
// exit ;
7326: GO 7357
// for i in tmp do
7328: LD_ADDR_VAR 0 1
7332: PUSH
7333: LD_VAR 0 2
7337: PUSH
7338: FOR_IN
7339: IFFALSE 7355
// begin SetLives ( i , 0 ) ;
7341: LD_VAR 0 1
7345: PPUSH
7346: LD_INT 0
7348: PPUSH
7349: CALL_OW 234
// end ;
7353: GO 7338
7355: POP
7356: POP
// end ;
7357: PPOPN 2
7359: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7360: LD_EXP 7
7364: PUSH
7365: LD_EXP 13
7369: AND
7370: IFFALSE 7454
7372: GO 7374
7374: DISABLE
7375: LD_INT 0
7377: PPUSH
7378: PPUSH
// begin enable ;
7379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7380: LD_ADDR_VAR 0 2
7384: PUSH
7385: LD_INT 22
7387: PUSH
7388: LD_OWVAR 2
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 32
7399: PUSH
7400: LD_INT 3
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// if not tmp then
7416: LD_VAR 0 2
7420: NOT
7421: IFFALSE 7425
// exit ;
7423: GO 7454
// for i in tmp do
7425: LD_ADDR_VAR 0 1
7429: PUSH
7430: LD_VAR 0 2
7434: PUSH
7435: FOR_IN
7436: IFFALSE 7452
// begin SetLives ( i , 0 ) ;
7438: LD_VAR 0 1
7442: PPUSH
7443: LD_INT 0
7445: PPUSH
7446: CALL_OW 234
// end ;
7450: GO 7435
7452: POP
7453: POP
// end ;
7454: PPOPN 2
7456: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7457: LD_EXP 7
7461: PUSH
7462: LD_EXP 10
7466: AND
7467: IFFALSE 7560
7469: GO 7471
7471: DISABLE
7472: LD_INT 0
7474: PPUSH
// begin enable ;
7475: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7476: LD_ADDR_VAR 0 1
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_OWVAR 2
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 25
7498: PUSH
7499: LD_INT 5
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 9
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 8
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PPUSH
7536: CALL_OW 69
7540: PUSH
7541: FOR_IN
7542: IFFALSE 7558
// begin SetClass ( i , 1 ) ;
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_INT 1
7551: PPUSH
7552: CALL_OW 336
// end ;
7556: GO 7541
7558: POP
7559: POP
// end ;
7560: PPOPN 1
7562: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7563: LD_EXP 7
7567: PUSH
7568: LD_EXP 11
7572: AND
7573: PUSH
7574: LD_OWVAR 65
7578: PUSH
7579: LD_INT 7
7581: LESS
7582: AND
7583: IFFALSE 7597
7585: GO 7587
7587: DISABLE
// begin enable ;
7588: ENABLE
// game_speed := 7 ;
7589: LD_ADDR_OWVAR 65
7593: PUSH
7594: LD_INT 7
7596: ST_TO_ADDR
// end ;
7597: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7598: LD_EXP 7
7602: PUSH
7603: LD_EXP 14
7607: AND
7608: IFFALSE 7810
7610: GO 7612
7612: DISABLE
7613: LD_INT 0
7615: PPUSH
7616: PPUSH
7617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7618: LD_ADDR_VAR 0 3
7622: PUSH
7623: LD_INT 81
7625: PUSH
7626: LD_OWVAR 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 21
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: ST_TO_ADDR
// if not tmp then
7654: LD_VAR 0 3
7658: NOT
7659: IFFALSE 7663
// exit ;
7661: GO 7810
// if tmp > 5 then
7663: LD_VAR 0 3
7667: PUSH
7668: LD_INT 5
7670: GREATER
7671: IFFALSE 7683
// k := 5 else
7673: LD_ADDR_VAR 0 2
7677: PUSH
7678: LD_INT 5
7680: ST_TO_ADDR
7681: GO 7693
// k := tmp ;
7683: LD_ADDR_VAR 0 2
7687: PUSH
7688: LD_VAR 0 3
7692: ST_TO_ADDR
// for i := 1 to k do
7693: LD_ADDR_VAR 0 1
7697: PUSH
7698: DOUBLE
7699: LD_INT 1
7701: DEC
7702: ST_TO_ADDR
7703: LD_VAR 0 2
7707: PUSH
7708: FOR_TO
7709: IFFALSE 7808
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7711: LD_VAR 0 3
7715: PUSH
7716: LD_VAR 0 1
7720: ARRAY
7721: PPUSH
7722: LD_VAR 0 1
7726: PUSH
7727: LD_INT 4
7729: MOD
7730: PUSH
7731: LD_INT 1
7733: PLUS
7734: PPUSH
7735: CALL_OW 259
7739: PUSH
7740: LD_INT 10
7742: LESS
7743: IFFALSE 7806
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7745: LD_VAR 0 3
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_VAR 0 1
7760: PUSH
7761: LD_INT 4
7763: MOD
7764: PUSH
7765: LD_INT 1
7767: PLUS
7768: PPUSH
7769: LD_VAR 0 3
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PPUSH
7780: LD_VAR 0 1
7784: PUSH
7785: LD_INT 4
7787: MOD
7788: PUSH
7789: LD_INT 1
7791: PLUS
7792: PPUSH
7793: CALL_OW 259
7797: PUSH
7798: LD_INT 1
7800: PLUS
7801: PPUSH
7802: CALL_OW 237
7806: GO 7708
7808: POP
7809: POP
// end ;
7810: PPOPN 3
7812: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7813: LD_EXP 7
7817: PUSH
7818: LD_EXP 15
7822: AND
7823: IFFALSE 7843
7825: GO 7827
7827: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7828: LD_INT 4
7830: PPUSH
7831: LD_OWVAR 2
7835: PPUSH
7836: LD_INT 0
7838: PPUSH
7839: CALL_OW 324
7843: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7844: LD_EXP 7
7848: PUSH
7849: LD_EXP 44
7853: AND
7854: IFFALSE 7874
7856: GO 7858
7858: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7859: LD_INT 19
7861: PPUSH
7862: LD_OWVAR 2
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: CALL_OW 324
7874: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7875: LD_EXP 7
7879: PUSH
7880: LD_EXP 16
7884: AND
7885: IFFALSE 7987
7887: GO 7889
7889: DISABLE
7890: LD_INT 0
7892: PPUSH
7893: PPUSH
// begin enable ;
7894: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_OWVAR 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 2
7914: PUSH
7915: LD_INT 34
7917: PUSH
7918: LD_INT 11
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 34
7927: PUSH
7928: LD_INT 30
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 69
7948: ST_TO_ADDR
// if not tmp then
7949: LD_VAR 0 2
7953: NOT
7954: IFFALSE 7958
// exit ;
7956: GO 7987
// for i in tmp do
7958: LD_ADDR_VAR 0 1
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: FOR_IN
7969: IFFALSE 7985
// begin SetLives ( i , 0 ) ;
7971: LD_VAR 0 1
7975: PPUSH
7976: LD_INT 0
7978: PPUSH
7979: CALL_OW 234
// end ;
7983: GO 7968
7985: POP
7986: POP
// end ;
7987: PPOPN 2
7989: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7990: LD_EXP 7
7994: PUSH
7995: LD_EXP 17
7999: AND
8000: IFFALSE 8020
8002: GO 8004
8004: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8005: LD_INT 32
8007: PPUSH
8008: LD_OWVAR 2
8012: PPUSH
8013: LD_INT 0
8015: PPUSH
8016: CALL_OW 324
8020: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8021: LD_EXP 7
8025: PUSH
8026: LD_EXP 18
8030: AND
8031: IFFALSE 8212
8033: GO 8035
8035: DISABLE
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
8040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8041: LD_ADDR_VAR 0 2
8045: PUSH
8046: LD_INT 22
8048: PUSH
8049: LD_OWVAR 2
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 33
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: ST_TO_ADDR
// if not tmp then
8077: LD_VAR 0 2
8081: NOT
8082: IFFALSE 8086
// exit ;
8084: GO 8212
// side := 0 ;
8086: LD_ADDR_VAR 0 3
8090: PUSH
8091: LD_INT 0
8093: ST_TO_ADDR
// for i := 1 to 8 do
8094: LD_ADDR_VAR 0 1
8098: PUSH
8099: DOUBLE
8100: LD_INT 1
8102: DEC
8103: ST_TO_ADDR
8104: LD_INT 8
8106: PUSH
8107: FOR_TO
8108: IFFALSE 8156
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8110: LD_OWVAR 2
8114: PUSH
8115: LD_VAR 0 1
8119: NONEQUAL
8120: PUSH
8121: LD_OWVAR 2
8125: PPUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 81
8135: PUSH
8136: LD_INT 2
8138: EQUAL
8139: AND
8140: IFFALSE 8154
// begin side := i ;
8142: LD_ADDR_VAR 0 3
8146: PUSH
8147: LD_VAR 0 1
8151: ST_TO_ADDR
// break ;
8152: GO 8156
// end ;
8154: GO 8107
8156: POP
8157: POP
// if not side then
8158: LD_VAR 0 3
8162: NOT
8163: IFFALSE 8167
// exit ;
8165: GO 8212
// for i := 1 to tmp do
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: DOUBLE
8173: LD_INT 1
8175: DEC
8176: ST_TO_ADDR
8177: LD_VAR 0 2
8181: PUSH
8182: FOR_TO
8183: IFFALSE 8210
// if Prob ( 60 ) then
8185: LD_INT 60
8187: PPUSH
8188: CALL_OW 13
8192: IFFALSE 8208
// SetSide ( i , side ) ;
8194: LD_VAR 0 1
8198: PPUSH
8199: LD_VAR 0 3
8203: PPUSH
8204: CALL_OW 235
8208: GO 8182
8210: POP
8211: POP
// end ;
8212: PPOPN 3
8214: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8215: LD_EXP 7
8219: PUSH
8220: LD_EXP 20
8224: AND
8225: IFFALSE 8344
8227: GO 8229
8229: DISABLE
8230: LD_INT 0
8232: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_INT 22
8240: PUSH
8241: LD_OWVAR 2
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 23
8265: PUSH
8266: LD_INT 0
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: PPUSH
8282: CALL_OW 69
8286: PUSH
8287: FOR_IN
8288: IFFALSE 8342
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8290: LD_VAR 0 1
8294: PPUSH
8295: CALL_OW 257
8299: PUSH
8300: LD_INT 1
8302: PUSH
8303: LD_INT 2
8305: PUSH
8306: LD_INT 3
8308: PUSH
8309: LD_INT 4
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: IN
8318: IFFALSE 8340
// SetClass ( un , rand ( 1 , 4 ) ) ;
8320: LD_VAR 0 1
8324: PPUSH
8325: LD_INT 1
8327: PPUSH
8328: LD_INT 4
8330: PPUSH
8331: CALL_OW 12
8335: PPUSH
8336: CALL_OW 336
8340: GO 8287
8342: POP
8343: POP
// end ;
8344: PPOPN 1
8346: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8347: LD_EXP 7
8351: PUSH
8352: LD_EXP 19
8356: AND
8357: IFFALSE 8436
8359: GO 8361
8361: DISABLE
8362: LD_INT 0
8364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8365: LD_ADDR_VAR 0 1
8369: PUSH
8370: LD_INT 22
8372: PUSH
8373: LD_OWVAR 2
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 21
8384: PUSH
8385: LD_INT 3
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 69
8400: ST_TO_ADDR
// if not tmp then
8401: LD_VAR 0 1
8405: NOT
8406: IFFALSE 8410
// exit ;
8408: GO 8436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8410: LD_VAR 0 1
8414: PUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL_OW 12
8427: ARRAY
8428: PPUSH
8429: LD_INT 100
8431: PPUSH
8432: CALL_OW 234
// end ;
8436: PPOPN 1
8438: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8439: LD_EXP 7
8443: PUSH
8444: LD_EXP 21
8448: AND
8449: IFFALSE 8547
8451: GO 8453
8453: DISABLE
8454: LD_INT 0
8456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8457: LD_ADDR_VAR 0 1
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_OWVAR 2
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 21
8476: PUSH
8477: LD_INT 1
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: ST_TO_ADDR
// if not tmp then
8493: LD_VAR 0 1
8497: NOT
8498: IFFALSE 8502
// exit ;
8500: GO 8547
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8502: LD_VAR 0 1
8506: PUSH
8507: LD_INT 1
8509: PPUSH
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 12
8519: ARRAY
8520: PPUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_INT 4
8526: PPUSH
8527: CALL_OW 12
8531: PPUSH
8532: LD_INT 3000
8534: PPUSH
8535: LD_INT 9000
8537: PPUSH
8538: CALL_OW 12
8542: PPUSH
8543: CALL_OW 492
// end ;
8547: PPOPN 1
8549: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8550: LD_EXP 7
8554: PUSH
8555: LD_EXP 22
8559: AND
8560: IFFALSE 8580
8562: GO 8564
8564: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8565: LD_INT 1
8567: PPUSH
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_INT 0
8575: PPUSH
8576: CALL_OW 324
8580: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8581: LD_EXP 7
8585: PUSH
8586: LD_EXP 23
8590: AND
8591: IFFALSE 8674
8593: GO 8595
8595: DISABLE
8596: LD_INT 0
8598: PPUSH
8599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: LD_INT 22
8607: PUSH
8608: LD_OWVAR 2
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 3
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 69
8635: ST_TO_ADDR
// if not tmp then
8636: LD_VAR 0 2
8640: NOT
8641: IFFALSE 8645
// exit ;
8643: GO 8674
// for i in tmp do
8645: LD_ADDR_VAR 0 1
8649: PUSH
8650: LD_VAR 0 2
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8672
// SetBLevel ( i , 10 ) ;
8658: LD_VAR 0 1
8662: PPUSH
8663: LD_INT 10
8665: PPUSH
8666: CALL_OW 241
8670: GO 8655
8672: POP
8673: POP
// end ;
8674: PPOPN 2
8676: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8677: LD_EXP 7
8681: PUSH
8682: LD_EXP 24
8686: AND
8687: IFFALSE 8798
8689: GO 8691
8691: DISABLE
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
8696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_INT 22
8704: PUSH
8705: LD_OWVAR 2
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_INT 25
8716: PUSH
8717: LD_INT 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: ST_TO_ADDR
// if not tmp then
8733: LD_VAR 0 3
8737: NOT
8738: IFFALSE 8742
// exit ;
8740: GO 8798
// un := tmp [ rand ( 1 , tmp ) ] ;
8742: LD_ADDR_VAR 0 2
8746: PUSH
8747: LD_VAR 0 3
8751: PUSH
8752: LD_INT 1
8754: PPUSH
8755: LD_VAR 0 3
8759: PPUSH
8760: CALL_OW 12
8764: ARRAY
8765: ST_TO_ADDR
// if Crawls ( un ) then
8766: LD_VAR 0 2
8770: PPUSH
8771: CALL_OW 318
8775: IFFALSE 8786
// ComWalk ( un ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_INT 5
8793: PPUSH
8794: CALL_OW 336
// end ;
8798: PPOPN 3
8800: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8801: LD_EXP 7
8805: PUSH
8806: LD_EXP 25
8810: AND
8811: PUSH
8812: LD_OWVAR 67
8816: PUSH
8817: LD_INT 4
8819: LESS
8820: AND
8821: IFFALSE 8840
8823: GO 8825
8825: DISABLE
// begin Difficulty := Difficulty + 1 ;
8826: LD_ADDR_OWVAR 67
8830: PUSH
8831: LD_OWVAR 67
8835: PUSH
8836: LD_INT 1
8838: PLUS
8839: ST_TO_ADDR
// end ;
8840: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8841: LD_EXP 7
8845: PUSH
8846: LD_EXP 26
8850: AND
8851: IFFALSE 8954
8853: GO 8855
8855: DISABLE
8856: LD_INT 0
8858: PPUSH
// begin for i := 1 to 5 do
8859: LD_ADDR_VAR 0 1
8863: PUSH
8864: DOUBLE
8865: LD_INT 1
8867: DEC
8868: ST_TO_ADDR
8869: LD_INT 5
8871: PUSH
8872: FOR_TO
8873: IFFALSE 8952
// begin uc_nation := nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side := 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8891: LD_ADDR_OWVAR 29
8895: PUSH
8896: LD_INT 12
8898: PUSH
8899: LD_INT 12
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: ST_TO_ADDR
// hc_agressivity := 20 ;
8906: LD_ADDR_OWVAR 35
8910: PUSH
8911: LD_INT 20
8913: ST_TO_ADDR
// hc_class := class_tiger ;
8914: LD_ADDR_OWVAR 28
8918: PUSH
8919: LD_INT 14
8921: ST_TO_ADDR
// hc_gallery :=  ;
8922: LD_ADDR_OWVAR 33
8926: PUSH
8927: LD_STRING 
8929: ST_TO_ADDR
// hc_name :=  ;
8930: LD_ADDR_OWVAR 26
8934: PUSH
8935: LD_STRING 
8937: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8938: CALL_OW 44
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 51
// end ;
8950: GO 8872
8952: POP
8953: POP
// end ;
8954: PPOPN 1
8956: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8957: LD_EXP 7
8961: PUSH
8962: LD_EXP 27
8966: AND
8967: IFFALSE 8976
8969: GO 8971
8971: DISABLE
// StreamSibBomb ;
8972: CALL 8977 0 0
8976: END
// export function StreamSibBomb ; var i , x , y ; begin
8977: LD_INT 0
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
// result := false ;
8983: LD_ADDR_VAR 0 1
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// for i := 1 to 16 do
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_INT 16
9003: PUSH
9004: FOR_TO
9005: IFFALSE 9204
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9007: LD_ADDR_VAR 0 3
9011: PUSH
9012: LD_INT 10
9014: PUSH
9015: LD_INT 20
9017: PUSH
9018: LD_INT 30
9020: PUSH
9021: LD_INT 40
9023: PUSH
9024: LD_INT 50
9026: PUSH
9027: LD_INT 60
9029: PUSH
9030: LD_INT 70
9032: PUSH
9033: LD_INT 80
9035: PUSH
9036: LD_INT 90
9038: PUSH
9039: LD_INT 100
9041: PUSH
9042: LD_INT 110
9044: PUSH
9045: LD_INT 120
9047: PUSH
9048: LD_INT 130
9050: PUSH
9051: LD_INT 140
9053: PUSH
9054: LD_INT 150
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 1
9076: PPUSH
9077: LD_INT 15
9079: PPUSH
9080: CALL_OW 12
9084: ARRAY
9085: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9086: LD_ADDR_VAR 0 4
9090: PUSH
9091: LD_INT 10
9093: PUSH
9094: LD_INT 20
9096: PUSH
9097: LD_INT 30
9099: PUSH
9100: LD_INT 40
9102: PUSH
9103: LD_INT 50
9105: PUSH
9106: LD_INT 60
9108: PUSH
9109: LD_INT 70
9111: PUSH
9112: LD_INT 80
9114: PUSH
9115: LD_INT 90
9117: PUSH
9118: LD_INT 100
9120: PUSH
9121: LD_INT 110
9123: PUSH
9124: LD_INT 120
9126: PUSH
9127: LD_INT 130
9129: PUSH
9130: LD_INT 140
9132: PUSH
9133: LD_INT 150
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 1
9155: PPUSH
9156: LD_INT 15
9158: PPUSH
9159: CALL_OW 12
9163: ARRAY
9164: ST_TO_ADDR
// if ValidHex ( x , y ) then
9165: LD_VAR 0 3
9169: PPUSH
9170: LD_VAR 0 4
9174: PPUSH
9175: CALL_OW 488
9179: IFFALSE 9202
// begin result := [ x , y ] ;
9181: LD_ADDR_VAR 0 1
9185: PUSH
9186: LD_VAR 0 3
9190: PUSH
9191: LD_VAR 0 4
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: ST_TO_ADDR
// break ;
9200: GO 9204
// end ; end ;
9202: GO 9004
9204: POP
9205: POP
// if result then
9206: LD_VAR 0 1
9210: IFFALSE 9270
// begin ToLua ( playSibBomb() ) ;
9212: LD_STRING playSibBomb()
9214: PPUSH
9215: CALL_OW 559
// wait ( 0 0$14 ) ;
9219: LD_INT 490
9221: PPUSH
9222: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9226: LD_VAR 0 1
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 1
9239: PUSH
9240: LD_INT 2
9242: ARRAY
9243: PPUSH
9244: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9248: LD_VAR 0 1
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: LD_VAR 0 1
9261: PUSH
9262: LD_INT 2
9264: ARRAY
9265: PPUSH
9266: CALL_OW 429
// end ; end ;
9270: LD_VAR 0 1
9274: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9275: LD_EXP 7
9279: PUSH
9280: LD_EXP 29
9284: AND
9285: IFFALSE 9297
9287: GO 9289
9289: DISABLE
// YouLost (  ) ;
9290: LD_STRING 
9292: PPUSH
9293: CALL_OW 104
9297: END
// every 0 0$1 trigger StreamModeActive and sFog do
9298: LD_EXP 7
9302: PUSH
9303: LD_EXP 28
9307: AND
9308: IFFALSE 9322
9310: GO 9312
9312: DISABLE
// FogOff ( your_side ) ;
9313: LD_OWVAR 2
9317: PPUSH
9318: CALL_OW 344
9322: END
// every 0 0$1 trigger StreamModeActive and sSun do
9323: LD_EXP 7
9327: PUSH
9328: LD_EXP 30
9332: AND
9333: IFFALSE 9361
9335: GO 9337
9337: DISABLE
// begin solar_recharge_percent := 0 ;
9338: LD_ADDR_OWVAR 79
9342: PUSH
9343: LD_INT 0
9345: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9346: LD_INT 10500
9348: PPUSH
9349: CALL_OW 67
// solar_recharge_percent := 100 ;
9353: LD_ADDR_OWVAR 79
9357: PUSH
9358: LD_INT 100
9360: ST_TO_ADDR
// end ;
9361: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9362: LD_EXP 7
9366: PUSH
9367: LD_EXP 31
9371: AND
9372: IFFALSE 9611
9374: GO 9376
9376: DISABLE
9377: LD_INT 0
9379: PPUSH
9380: PPUSH
9381: PPUSH
// begin tmp := [ ] ;
9382: LD_ADDR_VAR 0 3
9386: PUSH
9387: EMPTY
9388: ST_TO_ADDR
// for i := 1 to 6 do
9389: LD_ADDR_VAR 0 1
9393: PUSH
9394: DOUBLE
9395: LD_INT 1
9397: DEC
9398: ST_TO_ADDR
9399: LD_INT 6
9401: PUSH
9402: FOR_TO
9403: IFFALSE 9508
// begin uc_nation := nation_nature ;
9405: LD_ADDR_OWVAR 21
9409: PUSH
9410: LD_INT 0
9412: ST_TO_ADDR
// uc_side := 0 ;
9413: LD_ADDR_OWVAR 20
9417: PUSH
9418: LD_INT 0
9420: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9421: LD_ADDR_OWVAR 29
9425: PUSH
9426: LD_INT 12
9428: PUSH
9429: LD_INT 12
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: ST_TO_ADDR
// hc_agressivity := 20 ;
9436: LD_ADDR_OWVAR 35
9440: PUSH
9441: LD_INT 20
9443: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9444: LD_ADDR_OWVAR 28
9448: PUSH
9449: LD_INT 17
9451: ST_TO_ADDR
// hc_gallery :=  ;
9452: LD_ADDR_OWVAR 33
9456: PUSH
9457: LD_STRING 
9459: ST_TO_ADDR
// hc_name :=  ;
9460: LD_ADDR_OWVAR 26
9464: PUSH
9465: LD_STRING 
9467: ST_TO_ADDR
// un := CreateHuman ;
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: CALL_OW 44
9477: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9478: LD_VAR 0 2
9482: PPUSH
9483: LD_INT 1
9485: PPUSH
9486: CALL_OW 51
// tmp := tmp ^ un ;
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: LD_VAR 0 3
9499: PUSH
9500: LD_VAR 0 2
9504: ADD
9505: ST_TO_ADDR
// end ;
9506: GO 9402
9508: POP
9509: POP
// repeat wait ( 0 0$1 ) ;
9510: LD_INT 35
9512: PPUSH
9513: CALL_OW 67
// for un in tmp do
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_VAR 0 3
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9602
// begin if IsDead ( un ) then
9530: LD_VAR 0 2
9534: PPUSH
9535: CALL_OW 301
9539: IFFALSE 9559
// begin tmp := tmp diff un ;
9541: LD_ADDR_VAR 0 3
9545: PUSH
9546: LD_VAR 0 3
9550: PUSH
9551: LD_VAR 0 2
9555: DIFF
9556: ST_TO_ADDR
// continue ;
9557: GO 9527
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9559: LD_VAR 0 2
9563: PPUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 0
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: CALL_OW 69
9585: PPUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: CALL_OW 74
9595: PPUSH
9596: CALL_OW 115
// end ;
9600: GO 9527
9602: POP
9603: POP
// until not tmp ;
9604: LD_VAR 0 3
9608: NOT
9609: IFFALSE 9510
// end ;
9611: PPOPN 3
9613: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9614: LD_EXP 7
9618: PUSH
9619: LD_EXP 32
9623: AND
9624: IFFALSE 9678
9626: GO 9628
9628: DISABLE
// begin ToLua ( displayTroll(); ) ;
9629: LD_STRING displayTroll();
9631: PPUSH
9632: CALL_OW 559
// wait ( 3 3$00 ) ;
9636: LD_INT 6300
9638: PPUSH
9639: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9643: LD_STRING hideTroll();
9645: PPUSH
9646: CALL_OW 559
// wait ( 1 1$00 ) ;
9650: LD_INT 2100
9652: PPUSH
9653: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9657: LD_STRING displayTroll();
9659: PPUSH
9660: CALL_OW 559
// wait ( 1 1$00 ) ;
9664: LD_INT 2100
9666: PPUSH
9667: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9671: LD_STRING hideTroll();
9673: PPUSH
9674: CALL_OW 559
// end ;
9678: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9679: LD_EXP 7
9683: PUSH
9684: LD_EXP 33
9688: AND
9689: IFFALSE 9752
9691: GO 9693
9693: DISABLE
9694: LD_INT 0
9696: PPUSH
// begin p := 0 ;
9697: LD_ADDR_VAR 0 1
9701: PUSH
9702: LD_INT 0
9704: ST_TO_ADDR
// repeat game_speed := 1 ;
9705: LD_ADDR_OWVAR 65
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9713: LD_INT 35
9715: PPUSH
9716: CALL_OW 67
// p := p + 1 ;
9720: LD_ADDR_VAR 0 1
9724: PUSH
9725: LD_VAR 0 1
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// until p >= 60 ;
9734: LD_VAR 0 1
9738: PUSH
9739: LD_INT 60
9741: GREATEREQUAL
9742: IFFALSE 9705
// game_speed := 4 ;
9744: LD_ADDR_OWVAR 65
9748: PUSH
9749: LD_INT 4
9751: ST_TO_ADDR
// end ;
9752: PPOPN 1
9754: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9755: LD_EXP 7
9759: PUSH
9760: LD_EXP 34
9764: AND
9765: IFFALSE 9911
9767: GO 9769
9769: DISABLE
9770: LD_INT 0
9772: PPUSH
9773: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9774: LD_ADDR_VAR 0 1
9778: PUSH
9779: LD_INT 22
9781: PUSH
9782: LD_OWVAR 2
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 2
9793: PUSH
9794: LD_INT 30
9796: PUSH
9797: LD_INT 0
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 1
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PPUSH
9823: CALL_OW 69
9827: ST_TO_ADDR
// if not depot then
9828: LD_VAR 0 1
9832: NOT
9833: IFFALSE 9837
// exit ;
9835: GO 9911
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9837: LD_ADDR_VAR 0 2
9841: PUSH
9842: LD_VAR 0 1
9846: PUSH
9847: LD_INT 1
9849: PPUSH
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 12
9859: ARRAY
9860: PPUSH
9861: CALL_OW 274
9865: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_INT 1
9873: PPUSH
9874: LD_INT 0
9876: PPUSH
9877: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9881: LD_VAR 0 2
9885: PPUSH
9886: LD_INT 2
9888: PPUSH
9889: LD_INT 0
9891: PPUSH
9892: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9896: LD_VAR 0 2
9900: PPUSH
9901: LD_INT 3
9903: PPUSH
9904: LD_INT 0
9906: PPUSH
9907: CALL_OW 277
// end ;
9911: PPOPN 2
9913: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9914: LD_EXP 7
9918: PUSH
9919: LD_EXP 35
9923: AND
9924: IFFALSE 10021
9926: GO 9928
9928: DISABLE
9929: LD_INT 0
9931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9932: LD_ADDR_VAR 0 1
9936: PUSH
9937: LD_INT 22
9939: PUSH
9940: LD_OWVAR 2
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 21
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: LD_INT 23
9964: PUSH
9965: LD_INT 0
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: PPUSH
9981: CALL_OW 69
9985: ST_TO_ADDR
// if not tmp then
9986: LD_VAR 0 1
9990: NOT
9991: IFFALSE 9995
// exit ;
9993: GO 10021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9995: LD_VAR 0 1
9999: PUSH
10000: LD_INT 1
10002: PPUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 12
10012: ARRAY
10013: PPUSH
10014: LD_INT 200
10016: PPUSH
10017: CALL_OW 234
// end ;
10021: PPOPN 1
10023: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10024: LD_EXP 7
10028: PUSH
10029: LD_EXP 36
10033: AND
10034: IFFALSE 10113
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10042: LD_ADDR_VAR 0 1
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_OWVAR 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 21
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: ST_TO_ADDR
// if not tmp then
10078: LD_VAR 0 1
10082: NOT
10083: IFFALSE 10087
// exit ;
10085: GO 10113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10087: LD_VAR 0 1
10091: PUSH
10092: LD_INT 1
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 12
10104: ARRAY
10105: PPUSH
10106: LD_INT 60
10108: PPUSH
10109: CALL_OW 234
// end ;
10113: PPOPN 1
10115: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10116: LD_EXP 7
10120: PUSH
10121: LD_EXP 37
10125: AND
10126: IFFALSE 10225
10128: GO 10130
10130: DISABLE
10131: LD_INT 0
10133: PPUSH
10134: PPUSH
// begin enable ;
10135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10136: LD_ADDR_VAR 0 1
10140: PUSH
10141: LD_INT 22
10143: PUSH
10144: LD_OWVAR 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 61
10155: PUSH
10156: EMPTY
10157: LIST
10158: PUSH
10159: LD_INT 33
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 69
10178: ST_TO_ADDR
// if not tmp then
10179: LD_VAR 0 1
10183: NOT
10184: IFFALSE 10188
// exit ;
10186: GO 10225
// for i in tmp do
10188: LD_ADDR_VAR 0 2
10192: PUSH
10193: LD_VAR 0 1
10197: PUSH
10198: FOR_IN
10199: IFFALSE 10223
// if IsControledBy ( i ) then
10201: LD_VAR 0 2
10205: PPUSH
10206: CALL_OW 312
10210: IFFALSE 10221
// ComUnlink ( i ) ;
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 136
10221: GO 10198
10223: POP
10224: POP
// end ;
10225: PPOPN 2
10227: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10228: LD_EXP 7
10232: PUSH
10233: LD_EXP 38
10237: AND
10238: IFFALSE 10378
10240: GO 10242
10242: DISABLE
10243: LD_INT 0
10245: PPUSH
10246: PPUSH
// begin ToLua ( displayPowell(); ) ;
10247: LD_STRING displayPowell();
10249: PPUSH
10250: CALL_OW 559
// uc_side := 0 ;
10254: LD_ADDR_OWVAR 20
10258: PUSH
10259: LD_INT 0
10261: ST_TO_ADDR
// uc_nation := 2 ;
10262: LD_ADDR_OWVAR 21
10266: PUSH
10267: LD_INT 2
10269: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10270: LD_ADDR_OWVAR 37
10274: PUSH
10275: LD_INT 14
10277: ST_TO_ADDR
// vc_engine := engine_siberite ;
10278: LD_ADDR_OWVAR 39
10282: PUSH
10283: LD_INT 3
10285: ST_TO_ADDR
// vc_control := control_apeman ;
10286: LD_ADDR_OWVAR 38
10290: PUSH
10291: LD_INT 5
10293: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10294: LD_ADDR_OWVAR 40
10298: PUSH
10299: LD_INT 29
10301: ST_TO_ADDR
// un := CreateVehicle ;
10302: LD_ADDR_VAR 0 2
10306: PUSH
10307: CALL_OW 45
10311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10312: LD_VAR 0 2
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10324: LD_INT 35
10326: PPUSH
10327: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PPUSH
10353: LD_VAR 0 2
10357: PPUSH
10358: CALL_OW 74
10362: PPUSH
10363: CALL_OW 115
// until IsDead ( un ) ;
10367: LD_VAR 0 2
10371: PPUSH
10372: CALL_OW 301
10376: IFFALSE 10324
// end ;
10378: PPOPN 2
10380: END
// every 0 0$1 trigger StreamModeActive and sStu do
10381: LD_EXP 7
10385: PUSH
10386: LD_EXP 46
10390: AND
10391: IFFALSE 10407
10393: GO 10395
10395: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10396: LD_STRING displayStucuk();
10398: PPUSH
10399: CALL_OW 559
// ResetFog ;
10403: CALL_OW 335
// end ;
10407: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10408: LD_EXP 7
10412: PUSH
10413: LD_EXP 39
10417: AND
10418: IFFALSE 10559
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
10426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10427: LD_ADDR_VAR 0 2
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_OWVAR 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 21
10446: PUSH
10447: LD_INT 1
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PPUSH
10458: CALL_OW 69
10462: ST_TO_ADDR
// if not tmp then
10463: LD_VAR 0 2
10467: NOT
10468: IFFALSE 10472
// exit ;
10470: GO 10559
// un := tmp [ rand ( 1 , tmp ) ] ;
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_VAR 0 2
10481: PUSH
10482: LD_INT 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 12
10494: ARRAY
10495: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 0
10503: PPUSH
10504: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_OWVAR 3
10517: PUSH
10518: LD_VAR 0 1
10522: DIFF
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: CALL_OW 74
10533: PPUSH
10534: CALL_OW 115
// wait ( 0 0$20 ) ;
10538: LD_INT 700
10540: PPUSH
10541: CALL_OW 67
// SetSide ( un , your_side ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_OWVAR 2
10554: PPUSH
10555: CALL_OW 235
// end ;
10559: PPOPN 2
10561: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10562: LD_EXP 7
10566: PUSH
10567: LD_EXP 40
10571: AND
10572: IFFALSE 10678
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10580: LD_ADDR_VAR 0 1
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_OWVAR 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: LD_INT 30
10602: PUSH
10603: LD_INT 0
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 30
10612: PUSH
10613: LD_INT 1
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 69
10633: ST_TO_ADDR
// if not depot then
10634: LD_VAR 0 1
10638: NOT
10639: IFFALSE 10643
// exit ;
10641: GO 10678
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10643: LD_VAR 0 1
10647: PUSH
10648: LD_INT 1
10650: ARRAY
10651: PPUSH
10652: CALL_OW 250
10656: PPUSH
10657: LD_VAR 0 1
10661: PUSH
10662: LD_INT 1
10664: ARRAY
10665: PPUSH
10666: CALL_OW 251
10670: PPUSH
10671: LD_INT 70
10673: PPUSH
10674: CALL_OW 495
// end ;
10678: PPOPN 1
10680: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10681: LD_EXP 7
10685: PUSH
10686: LD_EXP 41
10690: AND
10691: IFFALSE 10902
10693: GO 10695
10695: DISABLE
10696: LD_INT 0
10698: PPUSH
10699: PPUSH
10700: PPUSH
10701: PPUSH
10702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10703: LD_ADDR_VAR 0 5
10707: PUSH
10708: LD_INT 22
10710: PUSH
10711: LD_OWVAR 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 21
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PPUSH
10734: CALL_OW 69
10738: ST_TO_ADDR
// if not tmp then
10739: LD_VAR 0 5
10743: NOT
10744: IFFALSE 10748
// exit ;
10746: GO 10902
// for i in tmp do
10748: LD_ADDR_VAR 0 1
10752: PUSH
10753: LD_VAR 0 5
10757: PUSH
10758: FOR_IN
10759: IFFALSE 10900
// begin d := rand ( 0 , 5 ) ;
10761: LD_ADDR_VAR 0 4
10765: PUSH
10766: LD_INT 0
10768: PPUSH
10769: LD_INT 5
10771: PPUSH
10772: CALL_OW 12
10776: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10777: LD_ADDR_VAR 0 2
10781: PUSH
10782: LD_VAR 0 1
10786: PPUSH
10787: CALL_OW 250
10791: PPUSH
10792: LD_VAR 0 4
10796: PPUSH
10797: LD_INT 3
10799: PPUSH
10800: LD_INT 12
10802: PPUSH
10803: CALL_OW 12
10807: PPUSH
10808: CALL_OW 272
10812: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10813: LD_ADDR_VAR 0 3
10817: PUSH
10818: LD_VAR 0 1
10822: PPUSH
10823: CALL_OW 251
10827: PPUSH
10828: LD_VAR 0 4
10832: PPUSH
10833: LD_INT 3
10835: PPUSH
10836: LD_INT 12
10838: PPUSH
10839: CALL_OW 12
10843: PPUSH
10844: CALL_OW 273
10848: ST_TO_ADDR
// if ValidHex ( x , y ) then
10849: LD_VAR 0 2
10853: PPUSH
10854: LD_VAR 0 3
10858: PPUSH
10859: CALL_OW 488
10863: IFFALSE 10898
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10865: LD_VAR 0 1
10869: PPUSH
10870: LD_VAR 0 2
10874: PPUSH
10875: LD_VAR 0 3
10879: PPUSH
10880: LD_INT 3
10882: PPUSH
10883: LD_INT 6
10885: PPUSH
10886: CALL_OW 12
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 483
// end ;
10898: GO 10758
10900: POP
10901: POP
// end ;
10902: PPOPN 5
10904: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10905: LD_EXP 7
10909: PUSH
10910: LD_EXP 42
10914: AND
10915: IFFALSE 11009
10917: GO 10919
10919: DISABLE
10920: LD_INT 0
10922: PPUSH
10923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10924: LD_ADDR_VAR 0 2
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_OWVAR 2
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 32
10943: PUSH
10944: LD_INT 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 21
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: PPUSH
10966: CALL_OW 69
10970: ST_TO_ADDR
// if not tmp then
10971: LD_VAR 0 2
10975: NOT
10976: IFFALSE 10980
// exit ;
10978: GO 11009
// for i in tmp do
10980: LD_ADDR_VAR 0 1
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: FOR_IN
10991: IFFALSE 11007
// SetFuel ( i , 0 ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_INT 0
11000: PPUSH
11001: CALL_OW 240
11005: GO 10990
11007: POP
11008: POP
// end ;
11009: PPOPN 2
11011: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11012: LD_EXP 7
11016: PUSH
11017: LD_EXP 43
11021: AND
11022: IFFALSE 11088
11024: GO 11026
11026: DISABLE
11027: LD_INT 0
11029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11030: LD_ADDR_VAR 0 1
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_OWVAR 2
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 30
11049: PUSH
11050: LD_INT 29
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 69
11065: ST_TO_ADDR
// if not tmp then
11066: LD_VAR 0 1
11070: NOT
11071: IFFALSE 11075
// exit ;
11073: GO 11088
// DestroyUnit ( tmp [ 1 ] ) ;
11075: LD_VAR 0 1
11079: PUSH
11080: LD_INT 1
11082: ARRAY
11083: PPUSH
11084: CALL_OW 65
// end ;
11088: PPOPN 1
11090: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11091: LD_EXP 7
11095: PUSH
11096: LD_EXP 45
11100: AND
11101: IFFALSE 11230
11103: GO 11105
11105: DISABLE
11106: LD_INT 0
11108: PPUSH
// begin uc_side := 0 ;
11109: LD_ADDR_OWVAR 20
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// uc_nation := nation_arabian ;
11117: LD_ADDR_OWVAR 21
11121: PUSH
11122: LD_INT 2
11124: ST_TO_ADDR
// hc_gallery :=  ;
11125: LD_ADDR_OWVAR 33
11129: PUSH
11130: LD_STRING 
11132: ST_TO_ADDR
// hc_name :=  ;
11133: LD_ADDR_OWVAR 26
11137: PUSH
11138: LD_STRING 
11140: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11141: LD_INT 1
11143: PPUSH
11144: LD_INT 11
11146: PPUSH
11147: LD_INT 10
11149: PPUSH
11150: CALL_OW 380
// un := CreateHuman ;
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: CALL_OW 44
11163: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11164: LD_VAR 0 1
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11176: LD_INT 35
11178: PPUSH
11179: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11183: LD_VAR 0 1
11187: PPUSH
11188: LD_INT 22
11190: PUSH
11191: LD_OWVAR 2
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: PPUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 74
11214: PPUSH
11215: CALL_OW 115
// until IsDead ( un ) ;
11219: LD_VAR 0 1
11223: PPUSH
11224: CALL_OW 301
11228: IFFALSE 11176
// end ;
11230: PPOPN 1
11232: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11233: LD_EXP 7
11237: PUSH
11238: LD_EXP 47
11242: AND
11243: IFFALSE 11255
11245: GO 11247
11247: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11248: LD_STRING earthquake(getX(game), 0, 32)
11250: PPUSH
11251: CALL_OW 559
11255: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11256: LD_EXP 7
11260: PUSH
11261: LD_EXP 48
11265: AND
11266: IFFALSE 11357
11268: GO 11270
11270: DISABLE
11271: LD_INT 0
11273: PPUSH
// begin enable ;
11274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11275: LD_ADDR_VAR 0 1
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_OWVAR 2
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 21
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 33
11304: PUSH
11305: LD_INT 3
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: ST_TO_ADDR
// if not tmp then
11322: LD_VAR 0 1
11326: NOT
11327: IFFALSE 11331
// exit ;
11329: GO 11357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11331: LD_VAR 0 1
11335: PUSH
11336: LD_INT 1
11338: PPUSH
11339: LD_VAR 0 1
11343: PPUSH
11344: CALL_OW 12
11348: ARRAY
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 234
// end ;
11357: PPOPN 1
11359: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11360: LD_EXP 7
11364: PUSH
11365: LD_EXP 49
11369: AND
11370: IFFALSE 11511
11372: GO 11374
11374: DISABLE
11375: LD_INT 0
11377: PPUSH
11378: PPUSH
11379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11380: LD_ADDR_VAR 0 3
11384: PUSH
11385: LD_INT 22
11387: PUSH
11388: LD_OWVAR 2
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 25
11399: PUSH
11400: LD_INT 1
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: ST_TO_ADDR
// if not tmp then
11416: LD_VAR 0 3
11420: NOT
11421: IFFALSE 11425
// exit ;
11423: GO 11511
// un := tmp [ rand ( 1 , tmp ) ] ;
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: LD_VAR 0 3
11434: PUSH
11435: LD_INT 1
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: CALL_OW 12
11447: ARRAY
11448: ST_TO_ADDR
// if Crawls ( un ) then
11449: LD_VAR 0 2
11453: PPUSH
11454: CALL_OW 318
11458: IFFALSE 11469
// ComWalk ( un ) ;
11460: LD_VAR 0 2
11464: PPUSH
11465: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11469: LD_VAR 0 2
11473: PPUSH
11474: LD_INT 9
11476: PPUSH
11477: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11481: LD_INT 28
11483: PPUSH
11484: LD_OWVAR 2
11488: PPUSH
11489: LD_INT 2
11491: PPUSH
11492: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11496: LD_INT 29
11498: PPUSH
11499: LD_OWVAR 2
11503: PPUSH
11504: LD_INT 2
11506: PPUSH
11507: CALL_OW 322
// end ;
11511: PPOPN 3
11513: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11514: LD_EXP 7
11518: PUSH
11519: LD_EXP 50
11523: AND
11524: IFFALSE 11635
11526: GO 11528
11528: DISABLE
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
11533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11534: LD_ADDR_VAR 0 3
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_OWVAR 2
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 25
11553: PUSH
11554: LD_INT 1
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 69
11569: ST_TO_ADDR
// if not tmp then
11570: LD_VAR 0 3
11574: NOT
11575: IFFALSE 11579
// exit ;
11577: GO 11635
// un := tmp [ rand ( 1 , tmp ) ] ;
11579: LD_ADDR_VAR 0 2
11583: PUSH
11584: LD_VAR 0 3
11588: PUSH
11589: LD_INT 1
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 12
11601: ARRAY
11602: ST_TO_ADDR
// if Crawls ( un ) then
11603: LD_VAR 0 2
11607: PPUSH
11608: CALL_OW 318
11612: IFFALSE 11623
// ComWalk ( un ) ;
11614: LD_VAR 0 2
11618: PPUSH
11619: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11623: LD_VAR 0 2
11627: PPUSH
11628: LD_INT 8
11630: PPUSH
11631: CALL_OW 336
// end ;
11635: PPOPN 3
11637: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11638: LD_EXP 7
11642: PUSH
11643: LD_EXP 51
11647: AND
11648: IFFALSE 11792
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_OWVAR 2
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 21
11676: PUSH
11677: LD_INT 2
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: LD_INT 34
11689: PUSH
11690: LD_INT 12
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 34
11699: PUSH
11700: LD_INT 51
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 34
11709: PUSH
11710: LD_INT 32
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 69
11732: ST_TO_ADDR
// if not tmp then
11733: LD_VAR 0 2
11737: NOT
11738: IFFALSE 11742
// exit ;
11740: GO 11792
// for i in tmp do
11742: LD_ADDR_VAR 0 1
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11790
// if GetCargo ( i , mat_artifact ) = 0 then
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_INT 4
11762: PPUSH
11763: CALL_OW 289
11767: PUSH
11768: LD_INT 0
11770: EQUAL
11771: IFFALSE 11788
// SetCargo ( i , mat_siberit , 100 ) ;
11773: LD_VAR 0 1
11777: PPUSH
11778: LD_INT 3
11780: PPUSH
11781: LD_INT 100
11783: PPUSH
11784: CALL_OW 290
11788: GO 11752
11790: POP
11791: POP
// end ;
11792: PPOPN 2
11794: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11795: LD_EXP 7
11799: PUSH
11800: LD_EXP 52
11804: AND
11805: IFFALSE 11988
11807: GO 11809
11809: DISABLE
11810: LD_INT 0
11812: PPUSH
11813: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11814: LD_ADDR_VAR 0 2
11818: PUSH
11819: LD_INT 22
11821: PUSH
11822: LD_OWVAR 2
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PPUSH
11831: CALL_OW 69
11835: ST_TO_ADDR
// if not tmp then
11836: LD_VAR 0 2
11840: NOT
11841: IFFALSE 11845
// exit ;
11843: GO 11988
// for i := 1 to 2 do
11845: LD_ADDR_VAR 0 1
11849: PUSH
11850: DOUBLE
11851: LD_INT 1
11853: DEC
11854: ST_TO_ADDR
11855: LD_INT 2
11857: PUSH
11858: FOR_TO
11859: IFFALSE 11986
// begin uc_side := your_side ;
11861: LD_ADDR_OWVAR 20
11865: PUSH
11866: LD_OWVAR 2
11870: ST_TO_ADDR
// uc_nation := nation_american ;
11871: LD_ADDR_OWVAR 21
11875: PUSH
11876: LD_INT 1
11878: ST_TO_ADDR
// vc_chassis := us_morphling ;
11879: LD_ADDR_OWVAR 37
11883: PUSH
11884: LD_INT 5
11886: ST_TO_ADDR
// vc_engine := engine_siberite ;
11887: LD_ADDR_OWVAR 39
11891: PUSH
11892: LD_INT 3
11894: ST_TO_ADDR
// vc_control := control_computer ;
11895: LD_ADDR_OWVAR 38
11899: PUSH
11900: LD_INT 3
11902: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11903: LD_ADDR_OWVAR 40
11907: PUSH
11908: LD_INT 10
11910: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11911: LD_VAR 0 2
11915: PUSH
11916: LD_INT 1
11918: ARRAY
11919: PPUSH
11920: CALL_OW 310
11924: NOT
11925: IFFALSE 11972
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11927: CALL_OW 45
11931: PPUSH
11932: LD_VAR 0 2
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: CALL_OW 250
11945: PPUSH
11946: LD_VAR 0 2
11950: PUSH
11951: LD_INT 1
11953: ARRAY
11954: PPUSH
11955: CALL_OW 251
11959: PPUSH
11960: LD_INT 12
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: CALL_OW 50
11970: GO 11984
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11972: CALL_OW 45
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 51
// end ;
11984: GO 11858
11986: POP
11987: POP
// end ;
11988: PPOPN 2
11990: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11991: LD_EXP 7
11995: PUSH
11996: LD_EXP 53
12000: AND
12001: IFFALSE 12223
12003: GO 12005
12005: DISABLE
12006: LD_INT 0
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12014: LD_ADDR_VAR 0 6
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_OWVAR 2
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 3
12043: PUSH
12044: LD_INT 23
12046: PUSH
12047: LD_INT 0
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 69
12067: ST_TO_ADDR
// if not tmp then
12068: LD_VAR 0 6
12072: NOT
12073: IFFALSE 12077
// exit ;
12075: GO 12223
// s1 := rand ( 1 , 4 ) ;
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_INT 4
12087: PPUSH
12088: CALL_OW 12
12092: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12093: LD_ADDR_VAR 0 4
12097: PUSH
12098: LD_VAR 0 6
12102: PUSH
12103: LD_INT 1
12105: ARRAY
12106: PPUSH
12107: LD_VAR 0 2
12111: PPUSH
12112: CALL_OW 259
12116: ST_TO_ADDR
// if s1 = 1 then
12117: LD_VAR 0 2
12121: PUSH
12122: LD_INT 1
12124: EQUAL
12125: IFFALSE 12145
// s2 := rand ( 2 , 4 ) else
12127: LD_ADDR_VAR 0 3
12131: PUSH
12132: LD_INT 2
12134: PPUSH
12135: LD_INT 4
12137: PPUSH
12138: CALL_OW 12
12142: ST_TO_ADDR
12143: GO 12153
// s2 := 1 ;
12145: LD_ADDR_VAR 0 3
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12153: LD_ADDR_VAR 0 5
12157: PUSH
12158: LD_VAR 0 6
12162: PUSH
12163: LD_INT 1
12165: ARRAY
12166: PPUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: CALL_OW 259
12176: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12177: LD_VAR 0 6
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: LD_VAR 0 2
12190: PPUSH
12191: LD_VAR 0 5
12195: PPUSH
12196: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12200: LD_VAR 0 6
12204: PUSH
12205: LD_INT 1
12207: ARRAY
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_VAR 0 4
12218: PPUSH
12219: CALL_OW 237
// end ;
12223: PPOPN 6
12225: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12226: LD_EXP 7
12230: PUSH
12231: LD_EXP 54
12235: AND
12236: IFFALSE 12315
12238: GO 12240
12240: DISABLE
12241: LD_INT 0
12243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12244: LD_ADDR_VAR 0 1
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_OWVAR 2
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 30
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if not tmp then
12280: LD_VAR 0 1
12284: NOT
12285: IFFALSE 12289
// exit ;
12287: GO 12315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12289: LD_VAR 0 1
12293: PUSH
12294: LD_INT 1
12296: PPUSH
12297: LD_VAR 0 1
12301: PPUSH
12302: CALL_OW 12
12306: ARRAY
12307: PPUSH
12308: LD_INT 1
12310: PPUSH
12311: CALL_OW 234
// end ;
12315: PPOPN 1
12317: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12318: LD_EXP 7
12322: PUSH
12323: LD_EXP 55
12327: AND
12328: IFFALSE 12440
12330: GO 12332
12332: DISABLE
12333: LD_INT 0
12335: PPUSH
12336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_OWVAR 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: LD_INT 30
12359: PUSH
12360: LD_INT 27
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 30
12369: PUSH
12370: LD_INT 26
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_INT 28
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 69
12401: ST_TO_ADDR
// if not tmp then
12402: LD_VAR 0 2
12406: NOT
12407: IFFALSE 12411
// exit ;
12409: GO 12440
// for i in tmp do
12411: LD_ADDR_VAR 0 1
12415: PUSH
12416: LD_VAR 0 2
12420: PUSH
12421: FOR_IN
12422: IFFALSE 12438
// SetLives ( i , 1 ) ;
12424: LD_VAR 0 1
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 234
12436: GO 12421
12438: POP
12439: POP
// end ;
12440: PPOPN 2
12442: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12443: LD_EXP 7
12447: PUSH
12448: LD_EXP 56
12452: AND
12453: IFFALSE 12740
12455: GO 12457
12457: DISABLE
12458: LD_INT 0
12460: PPUSH
12461: PPUSH
12462: PPUSH
// begin i := rand ( 1 , 7 ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_INT 7
12473: PPUSH
12474: CALL_OW 12
12478: ST_TO_ADDR
// case i of 1 :
12479: LD_VAR 0 1
12483: PUSH
12484: LD_INT 1
12486: DOUBLE
12487: EQUAL
12488: IFTRUE 12492
12490: GO 12502
12492: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12493: LD_STRING earthquake(getX(game), 0, 32)
12495: PPUSH
12496: CALL_OW 559
12500: GO 12740
12502: LD_INT 2
12504: DOUBLE
12505: EQUAL
12506: IFTRUE 12510
12508: GO 12524
12510: POP
// begin ToLua ( displayStucuk(); ) ;
12511: LD_STRING displayStucuk();
12513: PPUSH
12514: CALL_OW 559
// ResetFog ;
12518: CALL_OW 335
// end ; 3 :
12522: GO 12740
12524: LD_INT 3
12526: DOUBLE
12527: EQUAL
12528: IFTRUE 12532
12530: GO 12636
12532: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12533: LD_ADDR_VAR 0 2
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_OWVAR 2
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 25
12552: PUSH
12553: LD_INT 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: ST_TO_ADDR
// if not tmp then
12569: LD_VAR 0 2
12573: NOT
12574: IFFALSE 12578
// exit ;
12576: GO 12740
// un := tmp [ rand ( 1 , tmp ) ] ;
12578: LD_ADDR_VAR 0 3
12582: PUSH
12583: LD_VAR 0 2
12587: PUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_VAR 0 2
12595: PPUSH
12596: CALL_OW 12
12600: ARRAY
12601: ST_TO_ADDR
// if Crawls ( un ) then
12602: LD_VAR 0 3
12606: PPUSH
12607: CALL_OW 318
12611: IFFALSE 12622
// ComWalk ( un ) ;
12613: LD_VAR 0 3
12617: PPUSH
12618: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12622: LD_VAR 0 3
12626: PPUSH
12627: LD_INT 8
12629: PPUSH
12630: CALL_OW 336
// end ; 4 :
12634: GO 12740
12636: LD_INT 4
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12718
12644: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12645: LD_ADDR_VAR 0 2
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_OWVAR 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 30
12664: PUSH
12665: LD_INT 29
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PPUSH
12676: CALL_OW 69
12680: ST_TO_ADDR
// if not tmp then
12681: LD_VAR 0 2
12685: NOT
12686: IFFALSE 12690
// exit ;
12688: GO 12740
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12690: LD_VAR 0 2
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12703: LD_VAR 0 2
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: PPUSH
12712: CALL_OW 65
// end ; 5 .. 7 :
12716: GO 12740
12718: LD_INT 5
12720: DOUBLE
12721: GREATEREQUAL
12722: IFFALSE 12730
12724: LD_INT 7
12726: DOUBLE
12727: LESSEQUAL
12728: IFTRUE 12732
12730: GO 12739
12732: POP
// StreamSibBomb ; end ;
12733: CALL 8977 0 0
12737: GO 12740
12739: POP
// end ;
12740: PPOPN 3
12742: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12743: LD_EXP 7
12747: PUSH
12748: LD_EXP 57
12752: AND
12753: IFFALSE 12909
12755: GO 12757
12757: DISABLE
12758: LD_INT 0
12760: PPUSH
12761: PPUSH
12762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_INT 81
12770: PUSH
12771: LD_OWVAR 2
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 1
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 21
12795: PUSH
12796: LD_INT 2
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 69
12816: ST_TO_ADDR
// if not tmp then
12817: LD_VAR 0 2
12821: NOT
12822: IFFALSE 12826
// exit ;
12824: GO 12909
// p := 0 ;
12826: LD_ADDR_VAR 0 3
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12834: LD_INT 35
12836: PPUSH
12837: CALL_OW 67
// p := p + 1 ;
12841: LD_ADDR_VAR 0 3
12845: PUSH
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: PLUS
12854: ST_TO_ADDR
// for i in tmp do
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_VAR 0 2
12864: PUSH
12865: FOR_IN
12866: IFFALSE 12897
// if GetLives ( i ) < 1000 then
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 256
12877: PUSH
12878: LD_INT 1000
12880: LESS
12881: IFFALSE 12895
// SetLives ( i , 1000 ) ;
12883: LD_VAR 0 1
12887: PPUSH
12888: LD_INT 1000
12890: PPUSH
12891: CALL_OW 234
12895: GO 12865
12897: POP
12898: POP
// until p > 20 ;
12899: LD_VAR 0 3
12903: PUSH
12904: LD_INT 20
12906: GREATER
12907: IFFALSE 12834
// end ;
12909: PPOPN 3
12911: END
// every 0 0$1 trigger StreamModeActive and sTime do
12912: LD_EXP 7
12916: PUSH
12917: LD_EXP 58
12921: AND
12922: IFFALSE 12957
12924: GO 12926
12926: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12927: LD_INT 28
12929: PPUSH
12930: LD_OWVAR 2
12934: PPUSH
12935: LD_INT 2
12937: PPUSH
12938: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12942: LD_INT 30
12944: PPUSH
12945: LD_OWVAR 2
12949: PPUSH
12950: LD_INT 2
12952: PPUSH
12953: CALL_OW 322
// end ;
12957: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12958: LD_EXP 7
12962: PUSH
12963: LD_EXP 59
12967: AND
12968: IFFALSE 13089
12970: GO 12972
12972: DISABLE
12973: LD_INT 0
12975: PPUSH
12976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12977: LD_ADDR_VAR 0 2
12981: PUSH
12982: LD_INT 22
12984: PUSH
12985: LD_OWVAR 2
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: LD_INT 21
12996: PUSH
12997: LD_INT 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 3
13006: PUSH
13007: LD_INT 23
13009: PUSH
13010: LD_INT 0
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 69
13030: ST_TO_ADDR
// if not tmp then
13031: LD_VAR 0 2
13035: NOT
13036: IFFALSE 13040
// exit ;
13038: GO 13089
// for i in tmp do
13040: LD_ADDR_VAR 0 1
13044: PUSH
13045: LD_VAR 0 2
13049: PUSH
13050: FOR_IN
13051: IFFALSE 13087
// begin if Crawls ( i ) then
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 318
13062: IFFALSE 13073
// ComWalk ( i ) ;
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 138
// SetClass ( i , 2 ) ;
13073: LD_VAR 0 1
13077: PPUSH
13078: LD_INT 2
13080: PPUSH
13081: CALL_OW 336
// end ;
13085: GO 13050
13087: POP
13088: POP
// end ;
13089: PPOPN 2
13091: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13092: LD_EXP 7
13096: PUSH
13097: LD_EXP 60
13101: AND
13102: IFFALSE 13390
13104: GO 13106
13106: DISABLE
13107: LD_INT 0
13109: PPUSH
13110: PPUSH
13111: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13112: LD_OWVAR 2
13116: PPUSH
13117: LD_INT 9
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13130: LD_INT 9
13132: PPUSH
13133: LD_OWVAR 2
13137: PPUSH
13138: CALL_OW 343
// uc_side := 9 ;
13142: LD_ADDR_OWVAR 20
13146: PUSH
13147: LD_INT 9
13149: ST_TO_ADDR
// uc_nation := 2 ;
13150: LD_ADDR_OWVAR 21
13154: PUSH
13155: LD_INT 2
13157: ST_TO_ADDR
// hc_name := Dark Warrior ;
13158: LD_ADDR_OWVAR 26
13162: PUSH
13163: LD_STRING Dark Warrior
13165: ST_TO_ADDR
// hc_gallery :=  ;
13166: LD_ADDR_OWVAR 33
13170: PUSH
13171: LD_STRING 
13173: ST_TO_ADDR
// hc_noskilllimit := true ;
13174: LD_ADDR_OWVAR 76
13178: PUSH
13179: LD_INT 1
13181: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13182: LD_ADDR_OWVAR 31
13186: PUSH
13187: LD_INT 30
13189: PUSH
13190: LD_INT 30
13192: PUSH
13193: LD_INT 30
13195: PUSH
13196: LD_INT 30
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: ST_TO_ADDR
// un := CreateHuman ;
13205: LD_ADDR_VAR 0 3
13209: PUSH
13210: CALL_OW 44
13214: ST_TO_ADDR
// hc_noskilllimit := false ;
13215: LD_ADDR_OWVAR 76
13219: PUSH
13220: LD_INT 0
13222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13223: LD_VAR 0 3
13227: PPUSH
13228: LD_INT 1
13230: PPUSH
13231: CALL_OW 51
// ToLua ( playRanger() ) ;
13235: LD_STRING playRanger()
13237: PPUSH
13238: CALL_OW 559
// p := 0 ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_INT 0
13249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13250: LD_INT 35
13252: PPUSH
13253: CALL_OW 67
// p := p + 1 ;
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_VAR 0 2
13266: PUSH
13267: LD_INT 1
13269: PLUS
13270: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13271: LD_VAR 0 3
13275: PPUSH
13276: CALL_OW 256
13280: PUSH
13281: LD_INT 1000
13283: LESS
13284: IFFALSE 13298
// SetLives ( un , 1000 ) ;
13286: LD_VAR 0 3
13290: PPUSH
13291: LD_INT 1000
13293: PPUSH
13294: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_INT 81
13305: PUSH
13306: LD_OWVAR 2
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 91
13317: PUSH
13318: LD_VAR 0 3
13322: PUSH
13323: LD_INT 30
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PPUSH
13335: CALL_OW 69
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: CALL_OW 74
13349: PPUSH
13350: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 80
13361: GREATER
13362: PUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: CALL_OW 301
13372: OR
13373: IFFALSE 13250
// if un then
13375: LD_VAR 0 3
13379: IFFALSE 13390
// RemoveUnit ( un ) ;
13381: LD_VAR 0 3
13385: PPUSH
13386: CALL_OW 64
// end ;
13390: PPOPN 3
13392: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13393: LD_EXP 61
13397: IFFALSE 13513
13399: GO 13401
13401: DISABLE
13402: LD_INT 0
13404: PPUSH
13405: PPUSH
13406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 81
13414: PUSH
13415: LD_OWVAR 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 21
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PPUSH
13438: CALL_OW 69
13442: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13443: LD_STRING playComputer()
13445: PPUSH
13446: CALL_OW 559
// if not tmp then
13450: LD_VAR 0 2
13454: NOT
13455: IFFALSE 13459
// exit ;
13457: GO 13513
// for i in tmp do
13459: LD_ADDR_VAR 0 1
13463: PUSH
13464: LD_VAR 0 2
13468: PUSH
13469: FOR_IN
13470: IFFALSE 13511
// for j := 1 to 4 do
13472: LD_ADDR_VAR 0 3
13476: PUSH
13477: DOUBLE
13478: LD_INT 1
13480: DEC
13481: ST_TO_ADDR
13482: LD_INT 4
13484: PUSH
13485: FOR_TO
13486: IFFALSE 13507
// SetSkill ( i , j , 10 ) ;
13488: LD_VAR 0 1
13492: PPUSH
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_INT 10
13500: PPUSH
13501: CALL_OW 237
13505: GO 13485
13507: POP
13508: POP
13509: GO 13469
13511: POP
13512: POP
// end ;
13513: PPOPN 3
13515: END
// every 0 0$1 trigger s30 do var i , tmp ;
13516: LD_EXP 62
13520: IFFALSE 13589
13522: GO 13524
13524: DISABLE
13525: LD_INT 0
13527: PPUSH
13528: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 22
13536: PUSH
13537: LD_OWVAR 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PPUSH
13546: CALL_OW 69
13550: ST_TO_ADDR
// if not tmp then
13551: LD_VAR 0 2
13555: NOT
13556: IFFALSE 13560
// exit ;
13558: GO 13589
// for i in tmp do
13560: LD_ADDR_VAR 0 1
13564: PUSH
13565: LD_VAR 0 2
13569: PUSH
13570: FOR_IN
13571: IFFALSE 13587
// SetLives ( i , 300 ) ;
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_INT 300
13580: PPUSH
13581: CALL_OW 234
13585: GO 13570
13587: POP
13588: POP
// end ;
13589: PPOPN 2
13591: END
// every 0 0$1 trigger s60 do var i , tmp ;
13592: LD_EXP 63
13596: IFFALSE 13665
13598: GO 13600
13600: DISABLE
13601: LD_INT 0
13603: PPUSH
13604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_OWVAR 2
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: ST_TO_ADDR
// if not tmp then
13627: LD_VAR 0 2
13631: NOT
13632: IFFALSE 13636
// exit ;
13634: GO 13665
// for i in tmp do
13636: LD_ADDR_VAR 0 1
13640: PUSH
13641: LD_VAR 0 2
13645: PUSH
13646: FOR_IN
13647: IFFALSE 13663
// SetLives ( i , 600 ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_INT 600
13656: PPUSH
13657: CALL_OW 234
13661: GO 13646
13663: POP
13664: POP
// end ;
13665: PPOPN 2
13667: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13668: LD_INT 0
13670: PPUSH
// case cmd of 301 :
13671: LD_VAR 0 1
13675: PUSH
13676: LD_INT 301
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13716
13684: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13685: LD_VAR 0 6
13689: PPUSH
13690: LD_VAR 0 7
13694: PPUSH
13695: LD_VAR 0 8
13699: PPUSH
13700: LD_VAR 0 4
13704: PPUSH
13705: LD_VAR 0 5
13709: PPUSH
13710: CALL 14917 0 5
13714: GO 13837
13716: LD_INT 302
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13761
13724: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13725: LD_VAR 0 6
13729: PPUSH
13730: LD_VAR 0 7
13734: PPUSH
13735: LD_VAR 0 8
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: LD_VAR 0 5
13754: PPUSH
13755: CALL 15008 0 6
13759: GO 13837
13761: LD_INT 303
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13769
13767: GO 13806
13769: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13770: LD_VAR 0 6
13774: PPUSH
13775: LD_VAR 0 7
13779: PPUSH
13780: LD_VAR 0 8
13784: PPUSH
13785: LD_VAR 0 9
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: LD_VAR 0 5
13799: PPUSH
13800: CALL 13842 0 6
13804: GO 13837
13806: LD_INT 304
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13836
13814: POP
// hHackTeleport ( unit , x , y ) ; end ;
13815: LD_VAR 0 2
13819: PPUSH
13820: LD_VAR 0 4
13824: PPUSH
13825: LD_VAR 0 5
13829: PPUSH
13830: CALL 15601 0 3
13834: GO 13837
13836: POP
// end ;
13837: LD_VAR 0 12
13841: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13846: LD_VAR 0 1
13850: PUSH
13851: LD_INT 1
13853: LESS
13854: PUSH
13855: LD_VAR 0 1
13859: PUSH
13860: LD_INT 3
13862: GREATER
13863: OR
13864: PUSH
13865: LD_VAR 0 5
13869: PPUSH
13870: LD_VAR 0 6
13874: PPUSH
13875: CALL_OW 428
13879: OR
13880: IFFALSE 13884
// exit ;
13882: GO 14604
// uc_side := your_side ;
13884: LD_ADDR_OWVAR 20
13888: PUSH
13889: LD_OWVAR 2
13893: ST_TO_ADDR
// uc_nation := nation ;
13894: LD_ADDR_OWVAR 21
13898: PUSH
13899: LD_VAR 0 1
13903: ST_TO_ADDR
// bc_level = 1 ;
13904: LD_ADDR_OWVAR 43
13908: PUSH
13909: LD_INT 1
13911: ST_TO_ADDR
// case btype of 1 :
13912: LD_VAR 0 2
13916: PUSH
13917: LD_INT 1
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 13936
13925: POP
// bc_type := b_depot ; 2 :
13926: LD_ADDR_OWVAR 42
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
13934: GO 14548
13936: LD_INT 2
13938: DOUBLE
13939: EQUAL
13940: IFTRUE 13944
13942: GO 13955
13944: POP
// bc_type := b_warehouse ; 3 :
13945: LD_ADDR_OWVAR 42
13949: PUSH
13950: LD_INT 1
13952: ST_TO_ADDR
13953: GO 14548
13955: LD_INT 3
13957: DOUBLE
13958: EQUAL
13959: IFTRUE 13963
13961: GO 13974
13963: POP
// bc_type := b_lab ; 4 .. 9 :
13964: LD_ADDR_OWVAR 42
13968: PUSH
13969: LD_INT 6
13971: ST_TO_ADDR
13972: GO 14548
13974: LD_INT 4
13976: DOUBLE
13977: GREATEREQUAL
13978: IFFALSE 13986
13980: LD_INT 9
13982: DOUBLE
13983: LESSEQUAL
13984: IFTRUE 13988
13986: GO 14040
13988: POP
// begin bc_type := b_lab_half ;
13989: LD_ADDR_OWVAR 42
13993: PUSH
13994: LD_INT 7
13996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13997: LD_ADDR_OWVAR 44
14001: PUSH
14002: LD_INT 10
14004: PUSH
14005: LD_INT 11
14007: PUSH
14008: LD_INT 12
14010: PUSH
14011: LD_INT 15
14013: PUSH
14014: LD_INT 14
14016: PUSH
14017: LD_INT 13
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: PUSH
14028: LD_VAR 0 2
14032: PUSH
14033: LD_INT 3
14035: MINUS
14036: ARRAY
14037: ST_TO_ADDR
// end ; 10 .. 13 :
14038: GO 14548
14040: LD_INT 10
14042: DOUBLE
14043: GREATEREQUAL
14044: IFFALSE 14052
14046: LD_INT 13
14048: DOUBLE
14049: LESSEQUAL
14050: IFTRUE 14054
14052: GO 14131
14054: POP
// begin bc_type := b_lab_full ;
14055: LD_ADDR_OWVAR 42
14059: PUSH
14060: LD_INT 8
14062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14063: LD_ADDR_OWVAR 44
14067: PUSH
14068: LD_INT 10
14070: PUSH
14071: LD_INT 12
14073: PUSH
14074: LD_INT 14
14076: PUSH
14077: LD_INT 13
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: LD_VAR 0 2
14090: PUSH
14091: LD_INT 9
14093: MINUS
14094: ARRAY
14095: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14096: LD_ADDR_OWVAR 45
14100: PUSH
14101: LD_INT 11
14103: PUSH
14104: LD_INT 15
14106: PUSH
14107: LD_INT 12
14109: PUSH
14110: LD_INT 15
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: LD_VAR 0 2
14123: PUSH
14124: LD_INT 9
14126: MINUS
14127: ARRAY
14128: ST_TO_ADDR
// end ; 14 :
14129: GO 14548
14131: LD_INT 14
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14150
14139: POP
// bc_type := b_workshop ; 15 :
14140: LD_ADDR_OWVAR 42
14144: PUSH
14145: LD_INT 2
14147: ST_TO_ADDR
14148: GO 14548
14150: LD_INT 15
14152: DOUBLE
14153: EQUAL
14154: IFTRUE 14158
14156: GO 14169
14158: POP
// bc_type := b_factory ; 16 :
14159: LD_ADDR_OWVAR 42
14163: PUSH
14164: LD_INT 3
14166: ST_TO_ADDR
14167: GO 14548
14169: LD_INT 16
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 14188
14177: POP
// bc_type := b_ext_gun ; 17 :
14178: LD_ADDR_OWVAR 42
14182: PUSH
14183: LD_INT 17
14185: ST_TO_ADDR
14186: GO 14548
14188: LD_INT 17
14190: DOUBLE
14191: EQUAL
14192: IFTRUE 14196
14194: GO 14224
14196: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14197: LD_ADDR_OWVAR 42
14201: PUSH
14202: LD_INT 19
14204: PUSH
14205: LD_INT 23
14207: PUSH
14208: LD_INT 19
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: LD_VAR 0 1
14220: ARRAY
14221: ST_TO_ADDR
14222: GO 14548
14224: LD_INT 18
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14243
14232: POP
// bc_type := b_ext_radar ; 19 :
14233: LD_ADDR_OWVAR 42
14237: PUSH
14238: LD_INT 20
14240: ST_TO_ADDR
14241: GO 14548
14243: LD_INT 19
14245: DOUBLE
14246: EQUAL
14247: IFTRUE 14251
14249: GO 14262
14251: POP
// bc_type := b_ext_radio ; 20 :
14252: LD_ADDR_OWVAR 42
14256: PUSH
14257: LD_INT 22
14259: ST_TO_ADDR
14260: GO 14548
14262: LD_INT 20
14264: DOUBLE
14265: EQUAL
14266: IFTRUE 14270
14268: GO 14281
14270: POP
// bc_type := b_ext_siberium ; 21 :
14271: LD_ADDR_OWVAR 42
14275: PUSH
14276: LD_INT 21
14278: ST_TO_ADDR
14279: GO 14548
14281: LD_INT 21
14283: DOUBLE
14284: EQUAL
14285: IFTRUE 14289
14287: GO 14300
14289: POP
// bc_type := b_ext_computer ; 22 :
14290: LD_ADDR_OWVAR 42
14294: PUSH
14295: LD_INT 24
14297: ST_TO_ADDR
14298: GO 14548
14300: LD_INT 22
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14319
14308: POP
// bc_type := b_ext_track ; 23 :
14309: LD_ADDR_OWVAR 42
14313: PUSH
14314: LD_INT 16
14316: ST_TO_ADDR
14317: GO 14548
14319: LD_INT 23
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14338
14327: POP
// bc_type := b_ext_laser ; 24 :
14328: LD_ADDR_OWVAR 42
14332: PUSH
14333: LD_INT 25
14335: ST_TO_ADDR
14336: GO 14548
14338: LD_INT 24
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14357
14346: POP
// bc_type := b_control_tower ; 25 :
14347: LD_ADDR_OWVAR 42
14351: PUSH
14352: LD_INT 36
14354: ST_TO_ADDR
14355: GO 14548
14357: LD_INT 25
14359: DOUBLE
14360: EQUAL
14361: IFTRUE 14365
14363: GO 14376
14365: POP
// bc_type := b_breastwork ; 26 :
14366: LD_ADDR_OWVAR 42
14370: PUSH
14371: LD_INT 31
14373: ST_TO_ADDR
14374: GO 14548
14376: LD_INT 26
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14395
14384: POP
// bc_type := b_bunker ; 27 :
14385: LD_ADDR_OWVAR 42
14389: PUSH
14390: LD_INT 32
14392: ST_TO_ADDR
14393: GO 14548
14395: LD_INT 27
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14414
14403: POP
// bc_type := b_turret ; 28 :
14404: LD_ADDR_OWVAR 42
14408: PUSH
14409: LD_INT 33
14411: ST_TO_ADDR
14412: GO 14548
14414: LD_INT 28
14416: DOUBLE
14417: EQUAL
14418: IFTRUE 14422
14420: GO 14433
14422: POP
// bc_type := b_armoury ; 29 :
14423: LD_ADDR_OWVAR 42
14427: PUSH
14428: LD_INT 4
14430: ST_TO_ADDR
14431: GO 14548
14433: LD_INT 29
14435: DOUBLE
14436: EQUAL
14437: IFTRUE 14441
14439: GO 14452
14441: POP
// bc_type := b_barracks ; 30 :
14442: LD_ADDR_OWVAR 42
14446: PUSH
14447: LD_INT 5
14449: ST_TO_ADDR
14450: GO 14548
14452: LD_INT 30
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14471
14460: POP
// bc_type := b_solar_power ; 31 :
14461: LD_ADDR_OWVAR 42
14465: PUSH
14466: LD_INT 27
14468: ST_TO_ADDR
14469: GO 14548
14471: LD_INT 31
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14490
14479: POP
// bc_type := b_oil_power ; 32 :
14480: LD_ADDR_OWVAR 42
14484: PUSH
14485: LD_INT 26
14487: ST_TO_ADDR
14488: GO 14548
14490: LD_INT 32
14492: DOUBLE
14493: EQUAL
14494: IFTRUE 14498
14496: GO 14509
14498: POP
// bc_type := b_siberite_power ; 33 :
14499: LD_ADDR_OWVAR 42
14503: PUSH
14504: LD_INT 28
14506: ST_TO_ADDR
14507: GO 14548
14509: LD_INT 33
14511: DOUBLE
14512: EQUAL
14513: IFTRUE 14517
14515: GO 14528
14517: POP
// bc_type := b_oil_mine ; 34 :
14518: LD_ADDR_OWVAR 42
14522: PUSH
14523: LD_INT 29
14525: ST_TO_ADDR
14526: GO 14548
14528: LD_INT 34
14530: DOUBLE
14531: EQUAL
14532: IFTRUE 14536
14534: GO 14547
14536: POP
// bc_type := b_siberite_mine ; end ;
14537: LD_ADDR_OWVAR 42
14541: PUSH
14542: LD_INT 30
14544: ST_TO_ADDR
14545: GO 14548
14547: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14548: LD_ADDR_VAR 0 8
14552: PUSH
14553: LD_VAR 0 5
14557: PPUSH
14558: LD_VAR 0 6
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: CALL_OW 47
14572: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14573: LD_OWVAR 42
14577: PUSH
14578: LD_INT 32
14580: PUSH
14581: LD_INT 33
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: IN
14588: IFFALSE 14604
// PlaceWeaponTurret ( b , weapon ) ;
14590: LD_VAR 0 8
14594: PPUSH
14595: LD_VAR 0 4
14599: PPUSH
14600: CALL_OW 431
// end ;
14604: LD_VAR 0 7
14608: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14609: LD_INT 0
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14615: LD_ADDR_VAR 0 4
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_OWVAR 2
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 30
14637: PUSH
14638: LD_INT 0
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 30
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PPUSH
14664: CALL_OW 69
14668: ST_TO_ADDR
// if not tmp then
14669: LD_VAR 0 4
14673: NOT
14674: IFFALSE 14678
// exit ;
14676: GO 14737
// for i in tmp do
14678: LD_ADDR_VAR 0 2
14682: PUSH
14683: LD_VAR 0 4
14687: PUSH
14688: FOR_IN
14689: IFFALSE 14735
// for j = 1 to 3 do
14691: LD_ADDR_VAR 0 3
14695: PUSH
14696: DOUBLE
14697: LD_INT 1
14699: DEC
14700: ST_TO_ADDR
14701: LD_INT 3
14703: PUSH
14704: FOR_TO
14705: IFFALSE 14731
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14707: LD_VAR 0 2
14711: PPUSH
14712: CALL_OW 274
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 99999
14724: PPUSH
14725: CALL_OW 277
14729: GO 14704
14731: POP
14732: POP
14733: GO 14688
14735: POP
14736: POP
// end ;
14737: LD_VAR 0 1
14741: RET
// export function hHackSetLevel10 ; var i , j ; begin
14742: LD_INT 0
14744: PPUSH
14745: PPUSH
14746: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14747: LD_ADDR_VAR 0 2
14751: PUSH
14752: LD_INT 21
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PUSH
14767: FOR_IN
14768: IFFALSE 14820
// if IsSelected ( i ) then
14770: LD_VAR 0 2
14774: PPUSH
14775: CALL_OW 306
14779: IFFALSE 14818
// begin for j := 1 to 4 do
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: DOUBLE
14787: LD_INT 1
14789: DEC
14790: ST_TO_ADDR
14791: LD_INT 4
14793: PUSH
14794: FOR_TO
14795: IFFALSE 14816
// SetSkill ( i , j , 10 ) ;
14797: LD_VAR 0 2
14801: PPUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_INT 10
14809: PPUSH
14810: CALL_OW 237
14814: GO 14794
14816: POP
14817: POP
// end ;
14818: GO 14767
14820: POP
14821: POP
// end ;
14822: LD_VAR 0 1
14826: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
14831: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_OWVAR 2
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: PUSH
14868: FOR_IN
14869: IFFALSE 14910
// begin for j := 1 to 4 do
14871: LD_ADDR_VAR 0 3
14875: PUSH
14876: DOUBLE
14877: LD_INT 1
14879: DEC
14880: ST_TO_ADDR
14881: LD_INT 4
14883: PUSH
14884: FOR_TO
14885: IFFALSE 14906
// SetSkill ( i , j , 10 ) ;
14887: LD_VAR 0 2
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: LD_INT 10
14899: PPUSH
14900: CALL_OW 237
14904: GO 14884
14906: POP
14907: POP
// end ;
14908: GO 14868
14910: POP
14911: POP
// end ;
14912: LD_VAR 0 1
14916: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14917: LD_INT 0
14919: PPUSH
// uc_side := your_side ;
14920: LD_ADDR_OWVAR 20
14924: PUSH
14925: LD_OWVAR 2
14929: ST_TO_ADDR
// uc_nation := nation ;
14930: LD_ADDR_OWVAR 21
14934: PUSH
14935: LD_VAR 0 1
14939: ST_TO_ADDR
// InitHc ;
14940: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14944: LD_INT 0
14946: PPUSH
14947: LD_VAR 0 2
14951: PPUSH
14952: LD_VAR 0 3
14956: PPUSH
14957: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14961: LD_VAR 0 4
14965: PPUSH
14966: LD_VAR 0 5
14970: PPUSH
14971: CALL_OW 428
14975: PUSH
14976: LD_INT 0
14978: EQUAL
14979: IFFALSE 15003
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14981: CALL_OW 44
14985: PPUSH
14986: LD_VAR 0 4
14990: PPUSH
14991: LD_VAR 0 5
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 48
// end ;
15003: LD_VAR 0 6
15007: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15008: LD_INT 0
15010: PPUSH
15011: PPUSH
// uc_side := your_side ;
15012: LD_ADDR_OWVAR 20
15016: PUSH
15017: LD_OWVAR 2
15021: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15022: LD_VAR 0 1
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 3
15035: PUSH
15036: LD_INT 4
15038: PUSH
15039: LD_INT 5
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: IN
15049: IFFALSE 15061
// uc_nation := nation_american else
15051: LD_ADDR_OWVAR 21
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
15059: GO 15104
// if chassis in [ 11 , 12 , 13 , 14 ] then
15061: LD_VAR 0 1
15065: PUSH
15066: LD_INT 11
15068: PUSH
15069: LD_INT 12
15071: PUSH
15072: LD_INT 13
15074: PUSH
15075: LD_INT 14
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: IN
15084: IFFALSE 15096
// uc_nation := nation_arabian else
15086: LD_ADDR_OWVAR 21
15090: PUSH
15091: LD_INT 2
15093: ST_TO_ADDR
15094: GO 15104
// uc_nation := nation_russian ;
15096: LD_ADDR_OWVAR 21
15100: PUSH
15101: LD_INT 3
15103: ST_TO_ADDR
// vc_chassis := chassis ;
15104: LD_ADDR_OWVAR 37
15108: PUSH
15109: LD_VAR 0 1
15113: ST_TO_ADDR
// vc_engine := engine ;
15114: LD_ADDR_OWVAR 39
15118: PUSH
15119: LD_VAR 0 2
15123: ST_TO_ADDR
// vc_control := control ;
15124: LD_ADDR_OWVAR 38
15128: PUSH
15129: LD_VAR 0 3
15133: ST_TO_ADDR
// vc_weapon := weapon ;
15134: LD_ADDR_OWVAR 40
15138: PUSH
15139: LD_VAR 0 4
15143: ST_TO_ADDR
// un := CreateVehicle ;
15144: LD_ADDR_VAR 0 8
15148: PUSH
15149: CALL_OW 45
15153: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15154: LD_VAR 0 8
15158: PPUSH
15159: LD_INT 0
15161: PPUSH
15162: LD_INT 5
15164: PPUSH
15165: CALL_OW 12
15169: PPUSH
15170: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15174: LD_VAR 0 8
15178: PPUSH
15179: LD_VAR 0 5
15183: PPUSH
15184: LD_VAR 0 6
15188: PPUSH
15189: LD_INT 1
15191: PPUSH
15192: CALL_OW 48
// end ;
15196: LD_VAR 0 7
15200: RET
// export hInvincible ; every 1 do
15201: GO 15203
15203: DISABLE
// hInvincible := [ ] ;
15204: LD_ADDR_EXP 64
15208: PUSH
15209: EMPTY
15210: ST_TO_ADDR
15211: END
// every 10 do var i ;
15212: GO 15214
15214: DISABLE
15215: LD_INT 0
15217: PPUSH
// begin enable ;
15218: ENABLE
// if not hInvincible then
15219: LD_EXP 64
15223: NOT
15224: IFFALSE 15228
// exit ;
15226: GO 15272
// for i in hInvincible do
15228: LD_ADDR_VAR 0 1
15232: PUSH
15233: LD_EXP 64
15237: PUSH
15238: FOR_IN
15239: IFFALSE 15270
// if GetLives ( i ) < 1000 then
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 256
15250: PUSH
15251: LD_INT 1000
15253: LESS
15254: IFFALSE 15268
// SetLives ( i , 1000 ) ;
15256: LD_VAR 0 1
15260: PPUSH
15261: LD_INT 1000
15263: PPUSH
15264: CALL_OW 234
15268: GO 15238
15270: POP
15271: POP
// end ;
15272: PPOPN 1
15274: END
// export function hHackInvincible ; var i ; begin
15275: LD_INT 0
15277: PPUSH
15278: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: LD_INT 2
15286: PUSH
15287: LD_INT 21
15289: PUSH
15290: LD_INT 1
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 21
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: PUSH
15317: FOR_IN
15318: IFFALSE 15379
// if IsSelected ( i ) then
15320: LD_VAR 0 2
15324: PPUSH
15325: CALL_OW 306
15329: IFFALSE 15377
// begin if i in hInvincible then
15331: LD_VAR 0 2
15335: PUSH
15336: LD_EXP 64
15340: IN
15341: IFFALSE 15361
// hInvincible := hInvincible diff i else
15343: LD_ADDR_EXP 64
15347: PUSH
15348: LD_EXP 64
15352: PUSH
15353: LD_VAR 0 2
15357: DIFF
15358: ST_TO_ADDR
15359: GO 15377
// hInvincible := hInvincible union i ;
15361: LD_ADDR_EXP 64
15365: PUSH
15366: LD_EXP 64
15370: PUSH
15371: LD_VAR 0 2
15375: UNION
15376: ST_TO_ADDR
// end ;
15377: GO 15317
15379: POP
15380: POP
// end ;
15381: LD_VAR 0 1
15385: RET
// export function hHackInvisible ; var i , j ; begin
15386: LD_INT 0
15388: PPUSH
15389: PPUSH
15390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_INT 21
15398: PUSH
15399: LD_INT 1
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 69
15410: PUSH
15411: FOR_IN
15412: IFFALSE 15436
// if IsSelected ( i ) then
15414: LD_VAR 0 2
15418: PPUSH
15419: CALL_OW 306
15423: IFFALSE 15434
// ComForceInvisible ( i ) ;
15425: LD_VAR 0 2
15429: PPUSH
15430: CALL_OW 496
15434: GO 15411
15436: POP
15437: POP
// end ;
15438: LD_VAR 0 1
15442: RET
// export function hHackChangeYourSide ; begin
15443: LD_INT 0
15445: PPUSH
// if your_side = 8 then
15446: LD_OWVAR 2
15450: PUSH
15451: LD_INT 8
15453: EQUAL
15454: IFFALSE 15466
// your_side := 0 else
15456: LD_ADDR_OWVAR 2
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
15464: GO 15480
// your_side := your_side + 1 ;
15466: LD_ADDR_OWVAR 2
15470: PUSH
15471: LD_OWVAR 2
15475: PUSH
15476: LD_INT 1
15478: PLUS
15479: ST_TO_ADDR
// end ;
15480: LD_VAR 0 1
15484: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15485: LD_INT 0
15487: PPUSH
15488: PPUSH
15489: PPUSH
// for i in all_units do
15490: LD_ADDR_VAR 0 2
15494: PUSH
15495: LD_OWVAR 3
15499: PUSH
15500: FOR_IN
15501: IFFALSE 15579
// if IsSelected ( i ) then
15503: LD_VAR 0 2
15507: PPUSH
15508: CALL_OW 306
15512: IFFALSE 15577
// begin j := GetSide ( i ) ;
15514: LD_ADDR_VAR 0 3
15518: PUSH
15519: LD_VAR 0 2
15523: PPUSH
15524: CALL_OW 255
15528: ST_TO_ADDR
// if j = 8 then
15529: LD_VAR 0 3
15533: PUSH
15534: LD_INT 8
15536: EQUAL
15537: IFFALSE 15549
// j := 0 else
15539: LD_ADDR_VAR 0 3
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
15547: GO 15563
// j := j + 1 ;
15549: LD_ADDR_VAR 0 3
15553: PUSH
15554: LD_VAR 0 3
15558: PUSH
15559: LD_INT 1
15561: PLUS
15562: ST_TO_ADDR
// SetSide ( i , j ) ;
15563: LD_VAR 0 2
15567: PPUSH
15568: LD_VAR 0 3
15572: PPUSH
15573: CALL_OW 235
// end ;
15577: GO 15500
15579: POP
15580: POP
// end ;
15581: LD_VAR 0 1
15585: RET
// export function hHackFog ; begin
15586: LD_INT 0
15588: PPUSH
// FogOff ( true ) ;
15589: LD_INT 1
15591: PPUSH
15592: CALL_OW 344
// end ;
15596: LD_VAR 0 1
15600: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15601: LD_INT 0
15603: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15604: LD_VAR 0 1
15608: PPUSH
15609: LD_VAR 0 2
15613: PPUSH
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_INT 1
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 483
// CenterOnXY ( x , y ) ;
15629: LD_VAR 0 2
15633: PPUSH
15634: LD_VAR 0 3
15638: PPUSH
15639: CALL_OW 84
// end ; end_of_file
15643: LD_VAR 0 4
15647: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 200
15655: DOUBLE
15656: GREATEREQUAL
15657: IFFALSE 15665
15659: LD_INT 299
15661: DOUBLE
15662: LESSEQUAL
15663: IFTRUE 15667
15665: GO 15699
15667: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15668: LD_VAR 0 1
15672: PPUSH
15673: LD_VAR 0 2
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: LD_VAR 0 4
15687: PPUSH
15688: LD_VAR 0 5
15692: PPUSH
15693: CALL 15933 0 5
15697: GO 15776
15699: LD_INT 300
15701: DOUBLE
15702: GREATEREQUAL
15703: IFFALSE 15711
15705: LD_INT 399
15707: DOUBLE
15708: LESSEQUAL
15709: IFTRUE 15713
15711: GO 15775
15713: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15714: LD_VAR 0 1
15718: PPUSH
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_VAR 0 4
15733: PPUSH
15734: LD_VAR 0 5
15738: PPUSH
15739: LD_VAR 0 6
15743: PPUSH
15744: LD_VAR 0 7
15748: PPUSH
15749: LD_VAR 0 8
15753: PPUSH
15754: LD_VAR 0 9
15758: PPUSH
15759: LD_VAR 0 10
15763: PPUSH
15764: LD_VAR 0 11
15768: PPUSH
15769: CALL 13668 0 11
15773: GO 15776
15775: POP
// end ;
15776: PPOPN 11
15778: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15779: LD_VAR 0 1
15783: PPUSH
15784: LD_VAR 0 2
15788: PPUSH
15789: LD_VAR 0 3
15793: PPUSH
15794: LD_VAR 0 4
15798: PPUSH
15799: LD_VAR 0 5
15803: PPUSH
15804: CALL 15925 0 5
// end ; end_of_file
15808: PPOPN 5
15810: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15811: LD_INT 0
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 264
15826: PUSH
15827: LD_EXP 81
15831: EQUAL
15832: IFFALSE 15904
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15834: LD_INT 68
15836: PPUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 255
15846: PPUSH
15847: CALL_OW 321
15851: PUSH
15852: LD_INT 2
15854: EQUAL
15855: IFFALSE 15867
// eff := 70 else
15857: LD_ADDR_VAR 0 4
15861: PUSH
15862: LD_INT 70
15864: ST_TO_ADDR
15865: GO 15875
// eff := 30 ;
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_INT 30
15874: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 250
15884: PPUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 251
15894: PPUSH
15895: LD_VAR 0 4
15899: PPUSH
15900: CALL_OW 495
// end ; end ;
15904: LD_VAR 0 2
15908: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15909: LD_INT 0
15911: PPUSH
// end ;
15912: LD_VAR 0 4
15916: RET
// export function SOS_Command ( cmd ) ; begin
15917: LD_INT 0
15919: PPUSH
// end ;
15920: LD_VAR 0 2
15924: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15925: LD_INT 0
15927: PPUSH
// end ;
15928: LD_VAR 0 6
15932: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15933: LD_INT 0
15935: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15936: LD_VAR 0 1
15940: PUSH
15941: LD_INT 250
15943: EQUAL
15944: PUSH
15945: LD_VAR 0 2
15949: PPUSH
15950: CALL_OW 264
15954: PUSH
15955: LD_EXP 84
15959: EQUAL
15960: AND
15961: IFFALSE 15982
// MinerPlaceMine ( unit , x , y ) ;
15963: LD_VAR 0 2
15967: PPUSH
15968: LD_VAR 0 4
15972: PPUSH
15973: LD_VAR 0 5
15977: PPUSH
15978: CALL 18331 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 251
15989: EQUAL
15990: PUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: CALL_OW 264
16000: PUSH
16001: LD_EXP 84
16005: EQUAL
16006: AND
16007: IFFALSE 16028
// MinerDetonateMine ( unit , x , y ) ;
16009: LD_VAR 0 2
16013: PPUSH
16014: LD_VAR 0 4
16018: PPUSH
16019: LD_VAR 0 5
16023: PPUSH
16024: CALL 18608 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16028: LD_VAR 0 1
16032: PUSH
16033: LD_INT 252
16035: EQUAL
16036: PUSH
16037: LD_VAR 0 2
16041: PPUSH
16042: CALL_OW 264
16046: PUSH
16047: LD_EXP 84
16051: EQUAL
16052: AND
16053: IFFALSE 16074
// MinerCreateMinefield ( unit , x , y ) ;
16055: LD_VAR 0 2
16059: PPUSH
16060: LD_VAR 0 4
16064: PPUSH
16065: LD_VAR 0 5
16069: PPUSH
16070: CALL 19025 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16074: LD_VAR 0 1
16078: PUSH
16079: LD_INT 253
16081: EQUAL
16082: PUSH
16083: LD_VAR 0 2
16087: PPUSH
16088: CALL_OW 257
16092: PUSH
16093: LD_INT 5
16095: EQUAL
16096: AND
16097: IFFALSE 16118
// ComBinocular ( unit , x , y ) ;
16099: LD_VAR 0 2
16103: PPUSH
16104: LD_VAR 0 4
16108: PPUSH
16109: LD_VAR 0 5
16113: PPUSH
16114: CALL 19396 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16118: LD_VAR 0 1
16122: PUSH
16123: LD_INT 254
16125: EQUAL
16126: PUSH
16127: LD_VAR 0 2
16131: PPUSH
16132: CALL_OW 264
16136: PUSH
16137: LD_EXP 79
16141: EQUAL
16142: AND
16143: PUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: CALL_OW 263
16153: PUSH
16154: LD_INT 3
16156: EQUAL
16157: AND
16158: IFFALSE 16174
// HackDestroyVehicle ( unit , selectedUnit ) ;
16160: LD_VAR 0 2
16164: PPUSH
16165: LD_VAR 0 3
16169: PPUSH
16170: CALL 17691 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16174: LD_VAR 0 1
16178: PUSH
16179: LD_INT 255
16181: EQUAL
16182: PUSH
16183: LD_VAR 0 2
16187: PPUSH
16188: CALL_OW 264
16192: PUSH
16193: LD_INT 14
16195: PUSH
16196: LD_INT 53
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: IN
16203: AND
16204: PUSH
16205: LD_VAR 0 4
16209: PPUSH
16210: LD_VAR 0 5
16214: PPUSH
16215: CALL_OW 488
16219: AND
16220: IFFALSE 16244
// CutTreeXYR ( unit , x , y , 12 ) ;
16222: LD_VAR 0 2
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: LD_INT 12
16239: PPUSH
16240: CALL 16257 0 4
// end ;
16244: LD_VAR 0 6
16248: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
16249: LD_INT 0
16251: PPUSH
// end ;
16252: LD_VAR 0 4
16256: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
16263: PPUSH
16264: PPUSH
16265: PPUSH
16266: PPUSH
16267: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16268: LD_VAR 0 1
16272: NOT
16273: PUSH
16274: LD_VAR 0 2
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: CALL_OW 488
16288: NOT
16289: OR
16290: PUSH
16291: LD_VAR 0 4
16295: NOT
16296: OR
16297: IFFALSE 16301
// exit ;
16299: GO 16641
// list := [ ] ;
16301: LD_ADDR_VAR 0 13
16305: PUSH
16306: EMPTY
16307: ST_TO_ADDR
// if x - r < 0 then
16308: LD_VAR 0 2
16312: PUSH
16313: LD_VAR 0 4
16317: MINUS
16318: PUSH
16319: LD_INT 0
16321: LESS
16322: IFFALSE 16334
// min_x := 0 else
16324: LD_ADDR_VAR 0 7
16328: PUSH
16329: LD_INT 0
16331: ST_TO_ADDR
16332: GO 16350
// min_x := x - r ;
16334: LD_ADDR_VAR 0 7
16338: PUSH
16339: LD_VAR 0 2
16343: PUSH
16344: LD_VAR 0 4
16348: MINUS
16349: ST_TO_ADDR
// if y - r < 0 then
16350: LD_VAR 0 3
16354: PUSH
16355: LD_VAR 0 4
16359: MINUS
16360: PUSH
16361: LD_INT 0
16363: LESS
16364: IFFALSE 16376
// min_y := 0 else
16366: LD_ADDR_VAR 0 8
16370: PUSH
16371: LD_INT 0
16373: ST_TO_ADDR
16374: GO 16392
// min_y := y - r ;
16376: LD_ADDR_VAR 0 8
16380: PUSH
16381: LD_VAR 0 3
16385: PUSH
16386: LD_VAR 0 4
16390: MINUS
16391: ST_TO_ADDR
// max_x := x + r ;
16392: LD_ADDR_VAR 0 9
16396: PUSH
16397: LD_VAR 0 2
16401: PUSH
16402: LD_VAR 0 4
16406: PLUS
16407: ST_TO_ADDR
// max_y := y + r ;
16408: LD_ADDR_VAR 0 10
16412: PUSH
16413: LD_VAR 0 3
16417: PUSH
16418: LD_VAR 0 4
16422: PLUS
16423: ST_TO_ADDR
// for _x = min_x to max_x do
16424: LD_ADDR_VAR 0 11
16428: PUSH
16429: DOUBLE
16430: LD_VAR 0 7
16434: DEC
16435: ST_TO_ADDR
16436: LD_VAR 0 9
16440: PUSH
16441: FOR_TO
16442: IFFALSE 16559
// for _y = min_y to max_y do
16444: LD_ADDR_VAR 0 12
16448: PUSH
16449: DOUBLE
16450: LD_VAR 0 8
16454: DEC
16455: ST_TO_ADDR
16456: LD_VAR 0 10
16460: PUSH
16461: FOR_TO
16462: IFFALSE 16555
// begin if not ValidHex ( _x , _y ) then
16464: LD_VAR 0 11
16468: PPUSH
16469: LD_VAR 0 12
16473: PPUSH
16474: CALL_OW 488
16478: NOT
16479: IFFALSE 16483
// continue ;
16481: GO 16461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16483: LD_VAR 0 11
16487: PPUSH
16488: LD_VAR 0 12
16492: PPUSH
16493: CALL_OW 351
16497: PUSH
16498: LD_VAR 0 11
16502: PPUSH
16503: LD_VAR 0 12
16507: PPUSH
16508: CALL_OW 554
16512: AND
16513: IFFALSE 16553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16515: LD_ADDR_VAR 0 13
16519: PUSH
16520: LD_VAR 0 13
16524: PPUSH
16525: LD_VAR 0 13
16529: PUSH
16530: LD_INT 1
16532: PLUS
16533: PPUSH
16534: LD_VAR 0 11
16538: PUSH
16539: LD_VAR 0 12
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 2
16552: ST_TO_ADDR
// end ;
16553: GO 16461
16555: POP
16556: POP
16557: GO 16441
16559: POP
16560: POP
// if not list then
16561: LD_VAR 0 13
16565: NOT
16566: IFFALSE 16570
// exit ;
16568: GO 16641
// for i in list do
16570: LD_ADDR_VAR 0 6
16574: PUSH
16575: LD_VAR 0 13
16579: PUSH
16580: FOR_IN
16581: IFFALSE 16639
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_STRING M
16590: PUSH
16591: LD_VAR 0 6
16595: PUSH
16596: LD_INT 1
16598: ARRAY
16599: PUSH
16600: LD_VAR 0 6
16604: PUSH
16605: LD_INT 2
16607: ARRAY
16608: PUSH
16609: LD_INT 0
16611: PUSH
16612: LD_INT 0
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: PPUSH
16633: CALL_OW 447
16637: GO 16580
16639: POP
16640: POP
// end ;
16641: LD_VAR 0 5
16645: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16646: LD_EXP 67
16650: NOT
16651: IFFALSE 16701
16653: GO 16655
16655: DISABLE
// begin initHack := true ;
16656: LD_ADDR_EXP 67
16660: PUSH
16661: LD_INT 1
16663: ST_TO_ADDR
// hackTanks := [ ] ;
16664: LD_ADDR_EXP 68
16668: PUSH
16669: EMPTY
16670: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16671: LD_ADDR_EXP 69
16675: PUSH
16676: EMPTY
16677: ST_TO_ADDR
// hackLimit := 3 ;
16678: LD_ADDR_EXP 70
16682: PUSH
16683: LD_INT 3
16685: ST_TO_ADDR
// hackDist := 12 ;
16686: LD_ADDR_EXP 71
16690: PUSH
16691: LD_INT 12
16693: ST_TO_ADDR
// hackCounter := [ ] ;
16694: LD_ADDR_EXP 72
16698: PUSH
16699: EMPTY
16700: ST_TO_ADDR
// end ;
16701: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16702: LD_EXP 67
16706: PUSH
16707: LD_INT 34
16709: PUSH
16710: LD_EXP 79
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL_OW 69
16723: AND
16724: IFFALSE 16979
16726: GO 16728
16728: DISABLE
16729: LD_INT 0
16731: PPUSH
16732: PPUSH
// begin enable ;
16733: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16734: LD_ADDR_VAR 0 1
16738: PUSH
16739: LD_INT 34
16741: PUSH
16742: LD_EXP 79
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16977
// begin if not i in hackTanks then
16759: LD_VAR 0 1
16763: PUSH
16764: LD_EXP 68
16768: IN
16769: NOT
16770: IFFALSE 16853
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16772: LD_ADDR_EXP 68
16776: PUSH
16777: LD_EXP 68
16781: PPUSH
16782: LD_EXP 68
16786: PUSH
16787: LD_INT 1
16789: PLUS
16790: PPUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 1
16800: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16801: LD_ADDR_EXP 69
16805: PUSH
16806: LD_EXP 69
16810: PPUSH
16811: LD_EXP 69
16815: PUSH
16816: LD_INT 1
16818: PLUS
16819: PPUSH
16820: EMPTY
16821: PPUSH
16822: CALL_OW 1
16826: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16827: LD_ADDR_EXP 72
16831: PUSH
16832: LD_EXP 72
16836: PPUSH
16837: LD_EXP 72
16841: PUSH
16842: LD_INT 1
16844: PLUS
16845: PPUSH
16846: EMPTY
16847: PPUSH
16848: CALL_OW 1
16852: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 302
16862: NOT
16863: IFFALSE 16876
// begin HackUnlinkAll ( i ) ;
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL 16982 0 1
// continue ;
16874: GO 16756
// end ; HackCheckCapturedStatus ( i ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL 17425 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16885: LD_ADDR_VAR 0 2
16889: PUSH
16890: LD_INT 81
16892: PUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 255
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 33
16909: PUSH
16910: LD_INT 3
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 91
16919: PUSH
16920: LD_VAR 0 1
16924: PUSH
16925: LD_EXP 71
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 50
16937: PUSH
16938: EMPTY
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 69
16951: ST_TO_ADDR
// if not tmp then
16952: LD_VAR 0 2
16956: NOT
16957: IFFALSE 16961
// continue ;
16959: GO 16756
// HackLink ( i , tmp ) ;
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_VAR 0 2
16970: PPUSH
16971: CALL 17118 0 2
// end ;
16975: GO 16756
16977: POP
16978: POP
// end ;
16979: PPOPN 2
16981: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16982: LD_INT 0
16984: PPUSH
16985: PPUSH
16986: PPUSH
// if not hack in hackTanks then
16987: LD_VAR 0 1
16991: PUSH
16992: LD_EXP 68
16996: IN
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17113
// index := GetElementIndex ( hackTanks , hack ) ;
17002: LD_ADDR_VAR 0 4
17006: PUSH
17007: LD_EXP 68
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL 24755 0 2
17021: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17022: LD_EXP 69
17026: PUSH
17027: LD_VAR 0 4
17031: ARRAY
17032: IFFALSE 17113
// begin for i in hackTanksCaptured [ index ] do
17034: LD_ADDR_VAR 0 3
17038: PUSH
17039: LD_EXP 69
17043: PUSH
17044: LD_VAR 0 4
17048: ARRAY
17049: PUSH
17050: FOR_IN
17051: IFFALSE 17077
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17053: LD_VAR 0 3
17057: PUSH
17058: LD_INT 1
17060: ARRAY
17061: PPUSH
17062: LD_VAR 0 3
17066: PUSH
17067: LD_INT 2
17069: ARRAY
17070: PPUSH
17071: CALL_OW 235
17075: GO 17050
17077: POP
17078: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17079: LD_ADDR_EXP 69
17083: PUSH
17084: LD_EXP 69
17088: PPUSH
17089: LD_VAR 0 4
17093: PPUSH
17094: EMPTY
17095: PPUSH
17096: CALL_OW 1
17100: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17101: LD_VAR 0 1
17105: PPUSH
17106: LD_INT 0
17108: PPUSH
17109: CALL_OW 505
// end ; end ;
17113: LD_VAR 0 2
17117: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17118: LD_INT 0
17120: PPUSH
17121: PPUSH
17122: PPUSH
// if not hack in hackTanks or not vehicles then
17123: LD_VAR 0 1
17127: PUSH
17128: LD_EXP 68
17132: IN
17133: NOT
17134: PUSH
17135: LD_VAR 0 2
17139: NOT
17140: OR
17141: IFFALSE 17145
// exit ;
17143: GO 17420
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17145: LD_ADDR_VAR 0 2
17149: PUSH
17150: LD_VAR 0 1
17154: PPUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL 25405 0 4
17170: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17171: LD_ADDR_VAR 0 5
17175: PUSH
17176: LD_EXP 68
17180: PPUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL 24755 0 2
17190: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17191: LD_EXP 69
17195: PUSH
17196: LD_VAR 0 5
17200: ARRAY
17201: PUSH
17202: LD_EXP 70
17206: LESS
17207: IFFALSE 17396
// begin for i := 1 to vehicles do
17209: LD_ADDR_VAR 0 4
17213: PUSH
17214: DOUBLE
17215: LD_INT 1
17217: DEC
17218: ST_TO_ADDR
17219: LD_VAR 0 2
17223: PUSH
17224: FOR_TO
17225: IFFALSE 17394
// begin if hackTanksCaptured [ index ] = hackLimit then
17227: LD_EXP 69
17231: PUSH
17232: LD_VAR 0 5
17236: ARRAY
17237: PUSH
17238: LD_EXP 70
17242: EQUAL
17243: IFFALSE 17247
// break ;
17245: GO 17394
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17247: LD_ADDR_EXP 72
17251: PUSH
17252: LD_EXP 72
17256: PPUSH
17257: LD_VAR 0 5
17261: PPUSH
17262: LD_EXP 72
17266: PUSH
17267: LD_VAR 0 5
17271: ARRAY
17272: PUSH
17273: LD_INT 1
17275: PLUS
17276: PPUSH
17277: CALL_OW 1
17281: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17282: LD_ADDR_EXP 69
17286: PUSH
17287: LD_EXP 69
17291: PPUSH
17292: LD_VAR 0 5
17296: PUSH
17297: LD_EXP 69
17301: PUSH
17302: LD_VAR 0 5
17306: ARRAY
17307: PUSH
17308: LD_INT 1
17310: PLUS
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PPUSH
17316: LD_VAR 0 2
17320: PUSH
17321: LD_VAR 0 4
17325: ARRAY
17326: PUSH
17327: LD_VAR 0 2
17331: PUSH
17332: LD_VAR 0 4
17336: ARRAY
17337: PPUSH
17338: CALL_OW 255
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL 24970 0 3
17351: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17352: LD_VAR 0 2
17356: PUSH
17357: LD_VAR 0 4
17361: ARRAY
17362: PPUSH
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 255
17372: PPUSH
17373: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17377: LD_VAR 0 2
17381: PUSH
17382: LD_VAR 0 4
17386: ARRAY
17387: PPUSH
17388: CALL_OW 141
// end ;
17392: GO 17224
17394: POP
17395: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17396: LD_VAR 0 1
17400: PPUSH
17401: LD_EXP 69
17405: PUSH
17406: LD_VAR 0 5
17410: ARRAY
17411: PUSH
17412: LD_INT 0
17414: PLUS
17415: PPUSH
17416: CALL_OW 505
// end ;
17420: LD_VAR 0 3
17424: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17425: LD_INT 0
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
// if not hack in hackTanks then
17431: LD_VAR 0 1
17435: PUSH
17436: LD_EXP 68
17440: IN
17441: NOT
17442: IFFALSE 17446
// exit ;
17444: GO 17686
// index := GetElementIndex ( hackTanks , hack ) ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_EXP 68
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL 24755 0 2
17465: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: DOUBLE
17472: LD_EXP 69
17476: PUSH
17477: LD_VAR 0 4
17481: ARRAY
17482: INC
17483: ST_TO_ADDR
17484: LD_INT 1
17486: PUSH
17487: FOR_DOWNTO
17488: IFFALSE 17660
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17490: LD_ADDR_VAR 0 5
17494: PUSH
17495: LD_EXP 69
17499: PUSH
17500: LD_VAR 0 4
17504: ARRAY
17505: PUSH
17506: LD_VAR 0 3
17510: ARRAY
17511: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17512: LD_VAR 0 5
17516: PUSH
17517: LD_INT 1
17519: ARRAY
17520: PPUSH
17521: CALL_OW 302
17525: NOT
17526: PUSH
17527: LD_VAR 0 5
17531: PUSH
17532: LD_INT 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 255
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 255
17550: NONEQUAL
17551: OR
17552: IFFALSE 17658
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17554: LD_VAR 0 5
17558: PUSH
17559: LD_INT 1
17561: ARRAY
17562: PPUSH
17563: CALL_OW 305
17567: PUSH
17568: LD_VAR 0 5
17572: PUSH
17573: LD_INT 1
17575: ARRAY
17576: PPUSH
17577: CALL_OW 255
17581: PUSH
17582: LD_VAR 0 1
17586: PPUSH
17587: CALL_OW 255
17591: EQUAL
17592: AND
17593: IFFALSE 17617
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17595: LD_VAR 0 5
17599: PUSH
17600: LD_INT 1
17602: ARRAY
17603: PPUSH
17604: LD_VAR 0 5
17608: PUSH
17609: LD_INT 2
17611: ARRAY
17612: PPUSH
17613: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17617: LD_ADDR_EXP 69
17621: PUSH
17622: LD_EXP 69
17626: PPUSH
17627: LD_VAR 0 4
17631: PPUSH
17632: LD_EXP 69
17636: PUSH
17637: LD_VAR 0 4
17641: ARRAY
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: CALL_OW 3
17652: PPUSH
17653: CALL_OW 1
17657: ST_TO_ADDR
// end ; end ;
17658: GO 17487
17660: POP
17661: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_EXP 69
17671: PUSH
17672: LD_VAR 0 4
17676: ARRAY
17677: PUSH
17678: LD_INT 0
17680: PLUS
17681: PPUSH
17682: CALL_OW 505
// end ;
17686: LD_VAR 0 2
17690: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17691: LD_INT 0
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
// if not hack in hackTanks then
17697: LD_VAR 0 1
17701: PUSH
17702: LD_EXP 68
17706: IN
17707: NOT
17708: IFFALSE 17712
// exit ;
17710: GO 17797
// index := GetElementIndex ( hackTanks , hack ) ;
17712: LD_ADDR_VAR 0 5
17716: PUSH
17717: LD_EXP 68
17721: PPUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: CALL 24755 0 2
17731: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17732: LD_ADDR_VAR 0 4
17736: PUSH
17737: DOUBLE
17738: LD_INT 1
17740: DEC
17741: ST_TO_ADDR
17742: LD_EXP 69
17746: PUSH
17747: LD_VAR 0 5
17751: ARRAY
17752: PUSH
17753: FOR_TO
17754: IFFALSE 17795
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17756: LD_EXP 69
17760: PUSH
17761: LD_VAR 0 5
17765: ARRAY
17766: PUSH
17767: LD_VAR 0 4
17771: ARRAY
17772: PUSH
17773: LD_INT 1
17775: ARRAY
17776: PUSH
17777: LD_VAR 0 2
17781: EQUAL
17782: IFFALSE 17793
// KillUnit ( vehicle ) ;
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL_OW 66
17793: GO 17753
17795: POP
17796: POP
// end ;
17797: LD_VAR 0 3
17801: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17802: LD_EXP 73
17806: NOT
17807: IFFALSE 17842
17809: GO 17811
17811: DISABLE
// begin initMiner := true ;
17812: LD_ADDR_EXP 73
17816: PUSH
17817: LD_INT 1
17819: ST_TO_ADDR
// minersList := [ ] ;
17820: LD_ADDR_EXP 74
17824: PUSH
17825: EMPTY
17826: ST_TO_ADDR
// minerMinesList := [ ] ;
17827: LD_ADDR_EXP 75
17831: PUSH
17832: EMPTY
17833: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17834: LD_ADDR_EXP 76
17838: PUSH
17839: LD_INT 5
17841: ST_TO_ADDR
// end ;
17842: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17843: LD_EXP 73
17847: PUSH
17848: LD_INT 34
17850: PUSH
17851: LD_EXP 84
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 69
17864: AND
17865: IFFALSE 18328
17867: GO 17869
17869: DISABLE
17870: LD_INT 0
17872: PPUSH
17873: PPUSH
17874: PPUSH
17875: PPUSH
// begin enable ;
17876: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17877: LD_ADDR_VAR 0 1
17881: PUSH
17882: LD_INT 34
17884: PUSH
17885: LD_EXP 84
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 69
17898: PUSH
17899: FOR_IN
17900: IFFALSE 17972
// begin if not i in minersList then
17902: LD_VAR 0 1
17906: PUSH
17907: LD_EXP 74
17911: IN
17912: NOT
17913: IFFALSE 17970
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17915: LD_ADDR_EXP 74
17919: PUSH
17920: LD_EXP 74
17924: PPUSH
17925: LD_EXP 74
17929: PUSH
17930: LD_INT 1
17932: PLUS
17933: PPUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 1
17943: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17944: LD_ADDR_EXP 75
17948: PUSH
17949: LD_EXP 75
17953: PPUSH
17954: LD_EXP 75
17958: PUSH
17959: LD_INT 1
17961: PLUS
17962: PPUSH
17963: EMPTY
17964: PPUSH
17965: CALL_OW 1
17969: ST_TO_ADDR
// end end ;
17970: GO 17899
17972: POP
17973: POP
// for i := minerMinesList downto 1 do
17974: LD_ADDR_VAR 0 1
17978: PUSH
17979: DOUBLE
17980: LD_EXP 75
17984: INC
17985: ST_TO_ADDR
17986: LD_INT 1
17988: PUSH
17989: FOR_DOWNTO
17990: IFFALSE 18326
// begin if IsLive ( minersList [ i ] ) then
17992: LD_EXP 74
17996: PUSH
17997: LD_VAR 0 1
18001: ARRAY
18002: PPUSH
18003: CALL_OW 300
18007: IFFALSE 18035
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18009: LD_EXP 74
18013: PUSH
18014: LD_VAR 0 1
18018: ARRAY
18019: PPUSH
18020: LD_EXP 75
18024: PUSH
18025: LD_VAR 0 1
18029: ARRAY
18030: PPUSH
18031: CALL_OW 505
// if not minerMinesList [ i ] then
18035: LD_EXP 75
18039: PUSH
18040: LD_VAR 0 1
18044: ARRAY
18045: NOT
18046: IFFALSE 18050
// continue ;
18048: GO 17989
// for j := minerMinesList [ i ] downto 1 do
18050: LD_ADDR_VAR 0 2
18054: PUSH
18055: DOUBLE
18056: LD_EXP 75
18060: PUSH
18061: LD_VAR 0 1
18065: ARRAY
18066: INC
18067: ST_TO_ADDR
18068: LD_INT 1
18070: PUSH
18071: FOR_DOWNTO
18072: IFFALSE 18322
// begin side := GetSide ( minersList [ i ] ) ;
18074: LD_ADDR_VAR 0 3
18078: PUSH
18079: LD_EXP 74
18083: PUSH
18084: LD_VAR 0 1
18088: ARRAY
18089: PPUSH
18090: CALL_OW 255
18094: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18095: LD_ADDR_VAR 0 4
18099: PUSH
18100: LD_EXP 75
18104: PUSH
18105: LD_VAR 0 1
18109: ARRAY
18110: PUSH
18111: LD_VAR 0 2
18115: ARRAY
18116: PUSH
18117: LD_INT 1
18119: ARRAY
18120: PPUSH
18121: LD_EXP 75
18125: PUSH
18126: LD_VAR 0 1
18130: ARRAY
18131: PUSH
18132: LD_VAR 0 2
18136: ARRAY
18137: PUSH
18138: LD_INT 2
18140: ARRAY
18141: PPUSH
18142: CALL_OW 428
18146: ST_TO_ADDR
// if not tmp then
18147: LD_VAR 0 4
18151: NOT
18152: IFFALSE 18156
// continue ;
18154: GO 18071
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18156: LD_VAR 0 4
18160: PUSH
18161: LD_INT 81
18163: PUSH
18164: LD_VAR 0 3
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: IN
18178: PUSH
18179: LD_EXP 75
18183: PUSH
18184: LD_VAR 0 1
18188: ARRAY
18189: PUSH
18190: LD_VAR 0 2
18194: ARRAY
18195: PUSH
18196: LD_INT 1
18198: ARRAY
18199: PPUSH
18200: LD_EXP 75
18204: PUSH
18205: LD_VAR 0 1
18209: ARRAY
18210: PUSH
18211: LD_VAR 0 2
18215: ARRAY
18216: PUSH
18217: LD_INT 2
18219: ARRAY
18220: PPUSH
18221: CALL_OW 458
18225: AND
18226: IFFALSE 18320
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18228: LD_EXP 75
18232: PUSH
18233: LD_VAR 0 1
18237: ARRAY
18238: PUSH
18239: LD_VAR 0 2
18243: ARRAY
18244: PUSH
18245: LD_INT 1
18247: ARRAY
18248: PPUSH
18249: LD_EXP 75
18253: PUSH
18254: LD_VAR 0 1
18258: ARRAY
18259: PUSH
18260: LD_VAR 0 2
18264: ARRAY
18265: PUSH
18266: LD_INT 2
18268: ARRAY
18269: PPUSH
18270: LD_VAR 0 3
18274: PPUSH
18275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18279: LD_ADDR_EXP 75
18283: PUSH
18284: LD_EXP 75
18288: PPUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: LD_EXP 75
18298: PUSH
18299: LD_VAR 0 1
18303: ARRAY
18304: PPUSH
18305: LD_VAR 0 2
18309: PPUSH
18310: CALL_OW 3
18314: PPUSH
18315: CALL_OW 1
18319: ST_TO_ADDR
// end ; end ;
18320: GO 18071
18322: POP
18323: POP
// end ;
18324: GO 17989
18326: POP
18327: POP
// end ;
18328: PPOPN 4
18330: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18331: LD_INT 0
18333: PPUSH
18334: PPUSH
// result := false ;
18335: LD_ADDR_VAR 0 4
18339: PUSH
18340: LD_INT 0
18342: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 264
18352: PUSH
18353: LD_EXP 84
18357: EQUAL
18358: NOT
18359: IFFALSE 18363
// exit ;
18361: GO 18603
// index := GetElementIndex ( minersList , unit ) ;
18363: LD_ADDR_VAR 0 5
18367: PUSH
18368: LD_EXP 74
18372: PPUSH
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL 24755 0 2
18382: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18383: LD_EXP 75
18387: PUSH
18388: LD_VAR 0 5
18392: ARRAY
18393: PUSH
18394: LD_EXP 76
18398: GREATEREQUAL
18399: IFFALSE 18403
// exit ;
18401: GO 18603
// ComMoveXY ( unit , x , y ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_VAR 0 2
18412: PPUSH
18413: LD_VAR 0 3
18417: PPUSH
18418: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18422: LD_INT 35
18424: PPUSH
18425: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18429: LD_VAR 0 1
18433: PPUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: CALL 55527 0 3
18448: NOT
18449: PUSH
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 314
18459: AND
18460: IFFALSE 18464
// exit ;
18462: GO 18603
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18464: LD_VAR 0 2
18468: PPUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: CALL_OW 428
18478: PUSH
18479: LD_VAR 0 1
18483: EQUAL
18484: PUSH
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 314
18494: NOT
18495: AND
18496: IFFALSE 18422
// PlaySoundXY ( x , y , PlantMine ) ;
18498: LD_VAR 0 2
18502: PPUSH
18503: LD_VAR 0 3
18507: PPUSH
18508: LD_STRING PlantMine
18510: PPUSH
18511: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18515: LD_VAR 0 2
18519: PPUSH
18520: LD_VAR 0 3
18524: PPUSH
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 255
18534: PPUSH
18535: LD_INT 0
18537: PPUSH
18538: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18542: LD_ADDR_EXP 75
18546: PUSH
18547: LD_EXP 75
18551: PPUSH
18552: LD_VAR 0 5
18556: PUSH
18557: LD_EXP 75
18561: PUSH
18562: LD_VAR 0 5
18566: ARRAY
18567: PUSH
18568: LD_INT 1
18570: PLUS
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: LD_VAR 0 2
18580: PUSH
18581: LD_VAR 0 3
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PPUSH
18590: CALL 24970 0 3
18594: ST_TO_ADDR
// result := true ;
18595: LD_ADDR_VAR 0 4
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// end ;
18603: LD_VAR 0 4
18607: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18608: LD_INT 0
18610: PPUSH
18611: PPUSH
18612: PPUSH
// if not unit in minersList then
18613: LD_VAR 0 1
18617: PUSH
18618: LD_EXP 74
18622: IN
18623: NOT
18624: IFFALSE 18628
// exit ;
18626: GO 19020
// index := GetElementIndex ( minersList , unit ) ;
18628: LD_ADDR_VAR 0 6
18632: PUSH
18633: LD_EXP 74
18637: PPUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL 24755 0 2
18647: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18648: LD_ADDR_VAR 0 5
18652: PUSH
18653: DOUBLE
18654: LD_EXP 75
18658: PUSH
18659: LD_VAR 0 6
18663: ARRAY
18664: INC
18665: ST_TO_ADDR
18666: LD_INT 1
18668: PUSH
18669: FOR_DOWNTO
18670: IFFALSE 18831
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18672: LD_EXP 75
18676: PUSH
18677: LD_VAR 0 6
18681: ARRAY
18682: PUSH
18683: LD_VAR 0 5
18687: ARRAY
18688: PUSH
18689: LD_INT 1
18691: ARRAY
18692: PUSH
18693: LD_VAR 0 2
18697: EQUAL
18698: PUSH
18699: LD_EXP 75
18703: PUSH
18704: LD_VAR 0 6
18708: ARRAY
18709: PUSH
18710: LD_VAR 0 5
18714: ARRAY
18715: PUSH
18716: LD_INT 2
18718: ARRAY
18719: PUSH
18720: LD_VAR 0 3
18724: EQUAL
18725: AND
18726: IFFALSE 18829
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18728: LD_EXP 75
18732: PUSH
18733: LD_VAR 0 6
18737: ARRAY
18738: PUSH
18739: LD_VAR 0 5
18743: ARRAY
18744: PUSH
18745: LD_INT 1
18747: ARRAY
18748: PPUSH
18749: LD_EXP 75
18753: PUSH
18754: LD_VAR 0 6
18758: ARRAY
18759: PUSH
18760: LD_VAR 0 5
18764: ARRAY
18765: PUSH
18766: LD_INT 2
18768: ARRAY
18769: PPUSH
18770: LD_VAR 0 1
18774: PPUSH
18775: CALL_OW 255
18779: PPUSH
18780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18784: LD_ADDR_EXP 75
18788: PUSH
18789: LD_EXP 75
18793: PPUSH
18794: LD_VAR 0 6
18798: PPUSH
18799: LD_EXP 75
18803: PUSH
18804: LD_VAR 0 6
18808: ARRAY
18809: PPUSH
18810: LD_VAR 0 5
18814: PPUSH
18815: CALL_OW 3
18819: PPUSH
18820: CALL_OW 1
18824: ST_TO_ADDR
// exit ;
18825: POP
18826: POP
18827: GO 19020
// end ; end ;
18829: GO 18669
18831: POP
18832: POP
// for i := minerMinesList [ index ] downto 1 do
18833: LD_ADDR_VAR 0 5
18837: PUSH
18838: DOUBLE
18839: LD_EXP 75
18843: PUSH
18844: LD_VAR 0 6
18848: ARRAY
18849: INC
18850: ST_TO_ADDR
18851: LD_INT 1
18853: PUSH
18854: FOR_DOWNTO
18855: IFFALSE 19018
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18857: LD_EXP 75
18861: PUSH
18862: LD_VAR 0 6
18866: ARRAY
18867: PUSH
18868: LD_VAR 0 5
18872: ARRAY
18873: PUSH
18874: LD_INT 1
18876: ARRAY
18877: PPUSH
18878: LD_EXP 75
18882: PUSH
18883: LD_VAR 0 6
18887: ARRAY
18888: PUSH
18889: LD_VAR 0 5
18893: ARRAY
18894: PUSH
18895: LD_INT 2
18897: ARRAY
18898: PPUSH
18899: LD_VAR 0 2
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: CALL_OW 298
18913: PUSH
18914: LD_INT 6
18916: LESS
18917: IFFALSE 19016
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18919: LD_EXP 75
18923: PUSH
18924: LD_VAR 0 6
18928: ARRAY
18929: PUSH
18930: LD_VAR 0 5
18934: ARRAY
18935: PUSH
18936: LD_INT 1
18938: ARRAY
18939: PPUSH
18940: LD_EXP 75
18944: PUSH
18945: LD_VAR 0 6
18949: ARRAY
18950: PUSH
18951: LD_VAR 0 5
18955: ARRAY
18956: PUSH
18957: LD_INT 2
18959: ARRAY
18960: PPUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 255
18970: PPUSH
18971: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18975: LD_ADDR_EXP 75
18979: PUSH
18980: LD_EXP 75
18984: PPUSH
18985: LD_VAR 0 6
18989: PPUSH
18990: LD_EXP 75
18994: PUSH
18995: LD_VAR 0 6
18999: ARRAY
19000: PPUSH
19001: LD_VAR 0 5
19005: PPUSH
19006: CALL_OW 3
19010: PPUSH
19011: CALL_OW 1
19015: ST_TO_ADDR
// end ; end ;
19016: GO 18854
19018: POP
19019: POP
// end ;
19020: LD_VAR 0 4
19024: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19025: LD_INT 0
19027: PPUSH
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
19032: PPUSH
19033: PPUSH
19034: PPUSH
19035: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL_OW 264
19045: PUSH
19046: LD_EXP 84
19050: EQUAL
19051: NOT
19052: PUSH
19053: LD_VAR 0 1
19057: PUSH
19058: LD_EXP 74
19062: IN
19063: NOT
19064: OR
19065: IFFALSE 19069
// exit ;
19067: GO 19391
// index := GetElementIndex ( minersList , unit ) ;
19069: LD_ADDR_VAR 0 6
19073: PUSH
19074: LD_EXP 74
19078: PPUSH
19079: LD_VAR 0 1
19083: PPUSH
19084: CALL 24755 0 2
19088: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19089: LD_ADDR_VAR 0 8
19093: PUSH
19094: LD_EXP 76
19098: PUSH
19099: LD_EXP 75
19103: PUSH
19104: LD_VAR 0 6
19108: ARRAY
19109: MINUS
19110: ST_TO_ADDR
// if not minesFreeAmount then
19111: LD_VAR 0 8
19115: NOT
19116: IFFALSE 19120
// exit ;
19118: GO 19391
// tmp := [ ] ;
19120: LD_ADDR_VAR 0 7
19124: PUSH
19125: EMPTY
19126: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19127: LD_ADDR_VAR 0 5
19131: PUSH
19132: DOUBLE
19133: LD_INT 1
19135: DEC
19136: ST_TO_ADDR
19137: LD_VAR 0 8
19141: PUSH
19142: FOR_TO
19143: IFFALSE 19338
// begin _d := rand ( 0 , 5 ) ;
19145: LD_ADDR_VAR 0 11
19149: PUSH
19150: LD_INT 0
19152: PPUSH
19153: LD_INT 5
19155: PPUSH
19156: CALL_OW 12
19160: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19161: LD_ADDR_VAR 0 12
19165: PUSH
19166: LD_INT 2
19168: PPUSH
19169: LD_INT 6
19171: PPUSH
19172: CALL_OW 12
19176: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19177: LD_ADDR_VAR 0 9
19181: PUSH
19182: LD_VAR 0 2
19186: PPUSH
19187: LD_VAR 0 11
19191: PPUSH
19192: LD_VAR 0 12
19196: PPUSH
19197: CALL_OW 272
19201: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19202: LD_ADDR_VAR 0 10
19206: PUSH
19207: LD_VAR 0 3
19211: PPUSH
19212: LD_VAR 0 11
19216: PPUSH
19217: LD_VAR 0 12
19221: PPUSH
19222: CALL_OW 273
19226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19227: LD_VAR 0 9
19231: PPUSH
19232: LD_VAR 0 10
19236: PPUSH
19237: CALL_OW 488
19241: PUSH
19242: LD_VAR 0 9
19246: PUSH
19247: LD_VAR 0 10
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_VAR 0 7
19260: IN
19261: NOT
19262: AND
19263: PUSH
19264: LD_VAR 0 9
19268: PPUSH
19269: LD_VAR 0 10
19273: PPUSH
19274: CALL_OW 458
19278: NOT
19279: AND
19280: IFFALSE 19322
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19282: LD_ADDR_VAR 0 7
19286: PUSH
19287: LD_VAR 0 7
19291: PPUSH
19292: LD_VAR 0 7
19296: PUSH
19297: LD_INT 1
19299: PLUS
19300: PPUSH
19301: LD_VAR 0 9
19305: PUSH
19306: LD_VAR 0 10
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 1
19319: ST_TO_ADDR
19320: GO 19336
// i := i - 1 ;
19322: LD_ADDR_VAR 0 5
19326: PUSH
19327: LD_VAR 0 5
19331: PUSH
19332: LD_INT 1
19334: MINUS
19335: ST_TO_ADDR
// end ;
19336: GO 19142
19338: POP
19339: POP
// for i in tmp do
19340: LD_ADDR_VAR 0 5
19344: PUSH
19345: LD_VAR 0 7
19349: PUSH
19350: FOR_IN
19351: IFFALSE 19389
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19353: LD_VAR 0 1
19357: PPUSH
19358: LD_VAR 0 5
19362: PUSH
19363: LD_INT 1
19365: ARRAY
19366: PPUSH
19367: LD_VAR 0 5
19371: PUSH
19372: LD_INT 2
19374: ARRAY
19375: PPUSH
19376: CALL 18331 0 3
19380: NOT
19381: IFFALSE 19387
// exit ;
19383: POP
19384: POP
19385: GO 19391
19387: GO 19350
19389: POP
19390: POP
// end ;
19391: LD_VAR 0 4
19395: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19396: LD_INT 0
19398: PPUSH
19399: PPUSH
19400: PPUSH
19401: PPUSH
19402: PPUSH
19403: PPUSH
19404: PPUSH
// if not GetClass ( unit ) = class_sniper then
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 257
19414: PUSH
19415: LD_INT 5
19417: EQUAL
19418: NOT
19419: IFFALSE 19423
// exit ;
19421: GO 19811
// dist := 8 ;
19423: LD_ADDR_VAR 0 5
19427: PUSH
19428: LD_INT 8
19430: ST_TO_ADDR
// viewRange := 12 ;
19431: LD_ADDR_VAR 0 7
19435: PUSH
19436: LD_INT 12
19438: ST_TO_ADDR
// side := GetSide ( unit ) ;
19439: LD_ADDR_VAR 0 6
19443: PUSH
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 255
19453: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19454: LD_INT 61
19456: PPUSH
19457: LD_VAR 0 6
19461: PPUSH
19462: CALL_OW 321
19466: PUSH
19467: LD_INT 2
19469: EQUAL
19470: IFFALSE 19480
// viewRange := 16 ;
19472: LD_ADDR_VAR 0 7
19476: PUSH
19477: LD_INT 16
19479: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_VAR 0 2
19489: PPUSH
19490: LD_VAR 0 3
19494: PPUSH
19495: CALL_OW 297
19499: PUSH
19500: LD_VAR 0 5
19504: GREATER
19505: IFFALSE 19584
// begin ComMoveXY ( unit , x , y ) ;
19507: LD_VAR 0 1
19511: PPUSH
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_VAR 0 3
19521: PPUSH
19522: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19526: LD_INT 35
19528: PPUSH
19529: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19533: LD_VAR 0 1
19537: PPUSH
19538: LD_VAR 0 2
19542: PPUSH
19543: LD_VAR 0 3
19547: PPUSH
19548: CALL 55527 0 3
19552: NOT
19553: IFFALSE 19557
// exit ;
19555: GO 19811
// until GetDistUnitXY ( unit , x , y ) < dist ;
19557: LD_VAR 0 1
19561: PPUSH
19562: LD_VAR 0 2
19566: PPUSH
19567: LD_VAR 0 3
19571: PPUSH
19572: CALL_OW 297
19576: PUSH
19577: LD_VAR 0 5
19581: LESS
19582: IFFALSE 19526
// end ; ComTurnXY ( unit , x , y ) ;
19584: LD_VAR 0 1
19588: PPUSH
19589: LD_VAR 0 2
19593: PPUSH
19594: LD_VAR 0 3
19598: PPUSH
19599: CALL_OW 118
// wait ( 5 ) ;
19603: LD_INT 5
19605: PPUSH
19606: CALL_OW 67
// _d := GetDir ( unit ) ;
19610: LD_ADDR_VAR 0 10
19614: PUSH
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL_OW 254
19624: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19625: LD_ADDR_VAR 0 8
19629: PUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 250
19639: PPUSH
19640: LD_VAR 0 10
19644: PPUSH
19645: LD_VAR 0 5
19649: PPUSH
19650: CALL_OW 272
19654: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19655: LD_ADDR_VAR 0 9
19659: PUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: CALL_OW 251
19669: PPUSH
19670: LD_VAR 0 10
19674: PPUSH
19675: LD_VAR 0 5
19679: PPUSH
19680: CALL_OW 273
19684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19685: LD_VAR 0 8
19689: PPUSH
19690: LD_VAR 0 9
19694: PPUSH
19695: CALL_OW 488
19699: NOT
19700: IFFALSE 19704
// exit ;
19702: GO 19811
// ComAnimCustom ( unit , 1 ) ;
19704: LD_VAR 0 1
19708: PPUSH
19709: LD_INT 1
19711: PPUSH
19712: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19716: LD_VAR 0 8
19720: PPUSH
19721: LD_VAR 0 9
19725: PPUSH
19726: LD_VAR 0 6
19730: PPUSH
19731: LD_VAR 0 7
19735: PPUSH
19736: CALL_OW 330
// repeat wait ( 1 ) ;
19740: LD_INT 1
19742: PPUSH
19743: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 316
19756: PUSH
19757: LD_VAR 0 1
19761: PPUSH
19762: CALL_OW 314
19766: OR
19767: PUSH
19768: LD_VAR 0 1
19772: PPUSH
19773: CALL_OW 302
19777: NOT
19778: OR
19779: PUSH
19780: LD_VAR 0 1
19784: PPUSH
19785: CALL_OW 301
19789: OR
19790: IFFALSE 19740
// RemoveSeeing ( _x , _y , side ) ;
19792: LD_VAR 0 8
19796: PPUSH
19797: LD_VAR 0 9
19801: PPUSH
19802: LD_VAR 0 6
19806: PPUSH
19807: CALL_OW 331
// end ; end_of_file
19811: LD_VAR 0 4
19815: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19816: LD_INT 0
19818: PPUSH
// ar_miner := 81 ;
19819: LD_ADDR_EXP 84
19823: PUSH
19824: LD_INT 81
19826: ST_TO_ADDR
// ar_crane := 88 ;
19827: LD_ADDR_EXP 83
19831: PUSH
19832: LD_INT 88
19834: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19835: LD_ADDR_EXP 78
19839: PUSH
19840: LD_INT 89
19842: ST_TO_ADDR
// us_hack := 99 ;
19843: LD_ADDR_EXP 79
19847: PUSH
19848: LD_INT 99
19850: ST_TO_ADDR
// us_artillery := 97 ;
19851: LD_ADDR_EXP 80
19855: PUSH
19856: LD_INT 97
19858: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19859: LD_ADDR_EXP 81
19863: PUSH
19864: LD_INT 91
19866: ST_TO_ADDR
// ar_mortar := 92 ;
19867: LD_ADDR_EXP 82
19871: PUSH
19872: LD_INT 92
19874: ST_TO_ADDR
// ru_radar := 98 ;
19875: LD_ADDR_EXP 77
19879: PUSH
19880: LD_INT 98
19882: ST_TO_ADDR
// tech_Artillery := 80 ;
19883: LD_ADDR_EXP 85
19887: PUSH
19888: LD_INT 80
19890: ST_TO_ADDR
// tech_RadMat := 81 ;
19891: LD_ADDR_EXP 86
19895: PUSH
19896: LD_INT 81
19898: ST_TO_ADDR
// tech_BasicTools := 82 ;
19899: LD_ADDR_EXP 87
19903: PUSH
19904: LD_INT 82
19906: ST_TO_ADDR
// tech_Cargo := 83 ;
19907: LD_ADDR_EXP 88
19911: PUSH
19912: LD_INT 83
19914: ST_TO_ADDR
// tech_Track := 84 ;
19915: LD_ADDR_EXP 89
19919: PUSH
19920: LD_INT 84
19922: ST_TO_ADDR
// tech_Crane := 85 ;
19923: LD_ADDR_EXP 90
19927: PUSH
19928: LD_INT 85
19930: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19931: LD_ADDR_EXP 91
19935: PUSH
19936: LD_INT 86
19938: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19939: LD_ADDR_EXP 92
19943: PUSH
19944: LD_INT 87
19946: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19947: LD_ADDR_EXP 93
19951: PUSH
19952: LD_INT 88
19954: ST_TO_ADDR
// class_mastodont := 31 ;
19955: LD_ADDR_EXP 94
19959: PUSH
19960: LD_INT 31
19962: ST_TO_ADDR
// class_horse := 21 ;
19963: LD_ADDR_EXP 95
19967: PUSH
19968: LD_INT 21
19970: ST_TO_ADDR
// end ;
19971: LD_VAR 0 1
19975: RET
// every 1 do
19976: GO 19978
19978: DISABLE
// InitGlobalVariables ; end_of_file
19979: CALL 19816 0 0
19983: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19984: LD_INT 0
19986: PPUSH
19987: PPUSH
// if exist_mode then
19988: LD_VAR 0 2
19992: IFFALSE 20017
// unit := CreateCharacter ( prefix & ident ) else
19994: LD_ADDR_VAR 0 5
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_VAR 0 1
20008: STR
20009: PPUSH
20010: CALL_OW 34
20014: ST_TO_ADDR
20015: GO 20032
// unit := NewCharacter ( ident ) ;
20017: LD_ADDR_VAR 0 5
20021: PUSH
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 25
20031: ST_TO_ADDR
// result := unit ;
20032: LD_ADDR_VAR 0 4
20036: PUSH
20037: LD_VAR 0 5
20041: ST_TO_ADDR
// end ;
20042: LD_VAR 0 4
20046: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20047: LD_INT 0
20049: PPUSH
20050: PPUSH
// if not side or not nation then
20051: LD_VAR 0 1
20055: NOT
20056: PUSH
20057: LD_VAR 0 2
20061: NOT
20062: OR
20063: IFFALSE 20067
// exit ;
20065: GO 20835
// case nation of nation_american :
20067: LD_VAR 0 2
20071: PUSH
20072: LD_INT 1
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20294
20080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20081: LD_ADDR_VAR 0 4
20085: PUSH
20086: LD_INT 35
20088: PUSH
20089: LD_INT 45
20091: PUSH
20092: LD_INT 46
20094: PUSH
20095: LD_INT 47
20097: PUSH
20098: LD_INT 82
20100: PUSH
20101: LD_INT 83
20103: PUSH
20104: LD_INT 84
20106: PUSH
20107: LD_INT 85
20109: PUSH
20110: LD_INT 86
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 6
20121: PUSH
20122: LD_INT 15
20124: PUSH
20125: LD_INT 16
20127: PUSH
20128: LD_INT 7
20130: PUSH
20131: LD_INT 12
20133: PUSH
20134: LD_INT 13
20136: PUSH
20137: LD_INT 10
20139: PUSH
20140: LD_INT 14
20142: PUSH
20143: LD_INT 20
20145: PUSH
20146: LD_INT 21
20148: PUSH
20149: LD_INT 22
20151: PUSH
20152: LD_INT 25
20154: PUSH
20155: LD_INT 32
20157: PUSH
20158: LD_INT 27
20160: PUSH
20161: LD_INT 36
20163: PUSH
20164: LD_INT 69
20166: PUSH
20167: LD_INT 39
20169: PUSH
20170: LD_INT 34
20172: PUSH
20173: LD_INT 40
20175: PUSH
20176: LD_INT 48
20178: PUSH
20179: LD_INT 49
20181: PUSH
20182: LD_INT 50
20184: PUSH
20185: LD_INT 51
20187: PUSH
20188: LD_INT 52
20190: PUSH
20191: LD_INT 53
20193: PUSH
20194: LD_INT 54
20196: PUSH
20197: LD_INT 55
20199: PUSH
20200: LD_INT 56
20202: PUSH
20203: LD_INT 57
20205: PUSH
20206: LD_INT 58
20208: PUSH
20209: LD_INT 59
20211: PUSH
20212: LD_INT 60
20214: PUSH
20215: LD_INT 61
20217: PUSH
20218: LD_INT 62
20220: PUSH
20221: LD_INT 80
20223: PUSH
20224: LD_INT 82
20226: PUSH
20227: LD_INT 83
20229: PUSH
20230: LD_INT 84
20232: PUSH
20233: LD_INT 85
20235: PUSH
20236: LD_INT 86
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: ST_TO_ADDR
20292: GO 20759
20294: LD_INT 2
20296: DOUBLE
20297: EQUAL
20298: IFTRUE 20302
20300: GO 20528
20302: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20303: LD_ADDR_VAR 0 4
20307: PUSH
20308: LD_INT 35
20310: PUSH
20311: LD_INT 45
20313: PUSH
20314: LD_INT 46
20316: PUSH
20317: LD_INT 47
20319: PUSH
20320: LD_INT 82
20322: PUSH
20323: LD_INT 83
20325: PUSH
20326: LD_INT 84
20328: PUSH
20329: LD_INT 85
20331: PUSH
20332: LD_INT 87
20334: PUSH
20335: LD_INT 70
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: LD_INT 11
20343: PUSH
20344: LD_INT 3
20346: PUSH
20347: LD_INT 4
20349: PUSH
20350: LD_INT 5
20352: PUSH
20353: LD_INT 6
20355: PUSH
20356: LD_INT 15
20358: PUSH
20359: LD_INT 18
20361: PUSH
20362: LD_INT 7
20364: PUSH
20365: LD_INT 17
20367: PUSH
20368: LD_INT 8
20370: PUSH
20371: LD_INT 20
20373: PUSH
20374: LD_INT 21
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_INT 72
20382: PUSH
20383: LD_INT 26
20385: PUSH
20386: LD_INT 69
20388: PUSH
20389: LD_INT 39
20391: PUSH
20392: LD_INT 40
20394: PUSH
20395: LD_INT 41
20397: PUSH
20398: LD_INT 42
20400: PUSH
20401: LD_INT 43
20403: PUSH
20404: LD_INT 48
20406: PUSH
20407: LD_INT 49
20409: PUSH
20410: LD_INT 50
20412: PUSH
20413: LD_INT 51
20415: PUSH
20416: LD_INT 52
20418: PUSH
20419: LD_INT 53
20421: PUSH
20422: LD_INT 54
20424: PUSH
20425: LD_INT 55
20427: PUSH
20428: LD_INT 56
20430: PUSH
20431: LD_INT 60
20433: PUSH
20434: LD_INT 61
20436: PUSH
20437: LD_INT 62
20439: PUSH
20440: LD_INT 66
20442: PUSH
20443: LD_INT 67
20445: PUSH
20446: LD_INT 68
20448: PUSH
20449: LD_INT 81
20451: PUSH
20452: LD_INT 82
20454: PUSH
20455: LD_INT 83
20457: PUSH
20458: LD_INT 84
20460: PUSH
20461: LD_INT 85
20463: PUSH
20464: LD_INT 87
20466: PUSH
20467: LD_INT 88
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 20759
20528: LD_INT 3
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20758
20536: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20537: LD_ADDR_VAR 0 4
20541: PUSH
20542: LD_INT 46
20544: PUSH
20545: LD_INT 47
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: LD_INT 82
20556: PUSH
20557: LD_INT 83
20559: PUSH
20560: LD_INT 84
20562: PUSH
20563: LD_INT 85
20565: PUSH
20566: LD_INT 86
20568: PUSH
20569: LD_INT 11
20571: PUSH
20572: LD_INT 9
20574: PUSH
20575: LD_INT 20
20577: PUSH
20578: LD_INT 19
20580: PUSH
20581: LD_INT 21
20583: PUSH
20584: LD_INT 24
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 25
20592: PUSH
20593: LD_INT 28
20595: PUSH
20596: LD_INT 29
20598: PUSH
20599: LD_INT 30
20601: PUSH
20602: LD_INT 31
20604: PUSH
20605: LD_INT 37
20607: PUSH
20608: LD_INT 38
20610: PUSH
20611: LD_INT 32
20613: PUSH
20614: LD_INT 27
20616: PUSH
20617: LD_INT 33
20619: PUSH
20620: LD_INT 69
20622: PUSH
20623: LD_INT 39
20625: PUSH
20626: LD_INT 34
20628: PUSH
20629: LD_INT 40
20631: PUSH
20632: LD_INT 71
20634: PUSH
20635: LD_INT 23
20637: PUSH
20638: LD_INT 44
20640: PUSH
20641: LD_INT 48
20643: PUSH
20644: LD_INT 49
20646: PUSH
20647: LD_INT 50
20649: PUSH
20650: LD_INT 51
20652: PUSH
20653: LD_INT 52
20655: PUSH
20656: LD_INT 53
20658: PUSH
20659: LD_INT 54
20661: PUSH
20662: LD_INT 55
20664: PUSH
20665: LD_INT 56
20667: PUSH
20668: LD_INT 57
20670: PUSH
20671: LD_INT 58
20673: PUSH
20674: LD_INT 59
20676: PUSH
20677: LD_INT 63
20679: PUSH
20680: LD_INT 64
20682: PUSH
20683: LD_INT 65
20685: PUSH
20686: LD_INT 82
20688: PUSH
20689: LD_INT 83
20691: PUSH
20692: LD_INT 84
20694: PUSH
20695: LD_INT 85
20697: PUSH
20698: LD_INT 86
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: ST_TO_ADDR
20756: GO 20759
20758: POP
// if state > - 1 and state < 3 then
20759: LD_VAR 0 3
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: GREATER
20768: PUSH
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 3
20776: LESS
20777: AND
20778: IFFALSE 20835
// for i in result do
20780: LD_ADDR_VAR 0 5
20784: PUSH
20785: LD_VAR 0 4
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20833
// if GetTech ( i , side ) <> state then
20793: LD_VAR 0 5
20797: PPUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL_OW 321
20807: PUSH
20808: LD_VAR 0 3
20812: NONEQUAL
20813: IFFALSE 20831
// result := result diff i ;
20815: LD_ADDR_VAR 0 4
20819: PUSH
20820: LD_VAR 0 4
20824: PUSH
20825: LD_VAR 0 5
20829: DIFF
20830: ST_TO_ADDR
20831: GO 20790
20833: POP
20834: POP
// end ;
20835: LD_VAR 0 4
20839: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
// result := true ;
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20853: LD_ADDR_VAR 0 5
20857: PUSH
20858: LD_VAR 0 2
20862: PPUSH
20863: CALL_OW 480
20867: ST_TO_ADDR
// if not tmp then
20868: LD_VAR 0 5
20872: NOT
20873: IFFALSE 20877
// exit ;
20875: GO 20926
// for i in tmp do
20877: LD_ADDR_VAR 0 4
20881: PUSH
20882: LD_VAR 0 5
20886: PUSH
20887: FOR_IN
20888: IFFALSE 20924
// if GetTech ( i , side ) <> state_researched then
20890: LD_VAR 0 4
20894: PPUSH
20895: LD_VAR 0 1
20899: PPUSH
20900: CALL_OW 321
20904: PUSH
20905: LD_INT 2
20907: NONEQUAL
20908: IFFALSE 20922
// begin result := false ;
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: LD_INT 0
20917: ST_TO_ADDR
// exit ;
20918: POP
20919: POP
20920: GO 20926
// end ;
20922: GO 20887
20924: POP
20925: POP
// end ;
20926: LD_VAR 0 3
20930: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20931: LD_INT 0
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20946: LD_VAR 0 1
20950: NOT
20951: PUSH
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 257
20961: PUSH
20962: LD_INT 9
20964: NONEQUAL
20965: OR
20966: IFFALSE 20970
// exit ;
20968: GO 21543
// side := GetSide ( unit ) ;
20970: LD_ADDR_VAR 0 9
20974: PUSH
20975: LD_VAR 0 1
20979: PPUSH
20980: CALL_OW 255
20984: ST_TO_ADDR
// tech_space := tech_spacanom ;
20985: LD_ADDR_VAR 0 12
20989: PUSH
20990: LD_INT 29
20992: ST_TO_ADDR
// tech_time := tech_taurad ;
20993: LD_ADDR_VAR 0 13
20997: PUSH
20998: LD_INT 28
21000: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21001: LD_ADDR_VAR 0 11
21005: PUSH
21006: LD_VAR 0 1
21010: PPUSH
21011: CALL_OW 310
21015: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21016: LD_VAR 0 11
21020: PPUSH
21021: CALL_OW 247
21025: PUSH
21026: LD_INT 2
21028: EQUAL
21029: IFFALSE 21033
// exit ;
21031: GO 21543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21033: LD_ADDR_VAR 0 8
21037: PUSH
21038: LD_INT 81
21040: PUSH
21041: LD_VAR 0 9
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 3
21052: PUSH
21053: LD_INT 21
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PPUSH
21071: CALL_OW 69
21075: ST_TO_ADDR
// if not tmp then
21076: LD_VAR 0 8
21080: NOT
21081: IFFALSE 21085
// exit ;
21083: GO 21543
// if in_unit then
21085: LD_VAR 0 11
21089: IFFALSE 21113
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21091: LD_ADDR_VAR 0 10
21095: PUSH
21096: LD_VAR 0 8
21100: PPUSH
21101: LD_VAR 0 11
21105: PPUSH
21106: CALL_OW 74
21110: ST_TO_ADDR
21111: GO 21133
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21113: LD_ADDR_VAR 0 10
21117: PUSH
21118: LD_VAR 0 8
21122: PPUSH
21123: LD_VAR 0 1
21127: PPUSH
21128: CALL_OW 74
21132: ST_TO_ADDR
// if not enemy then
21133: LD_VAR 0 10
21137: NOT
21138: IFFALSE 21142
// exit ;
21140: GO 21543
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21142: LD_VAR 0 11
21146: PUSH
21147: LD_VAR 0 11
21151: PPUSH
21152: LD_VAR 0 10
21156: PPUSH
21157: CALL_OW 296
21161: PUSH
21162: LD_INT 13
21164: GREATER
21165: AND
21166: PUSH
21167: LD_VAR 0 1
21171: PPUSH
21172: LD_VAR 0 10
21176: PPUSH
21177: CALL_OW 296
21181: PUSH
21182: LD_INT 12
21184: GREATER
21185: OR
21186: IFFALSE 21190
// exit ;
21188: GO 21543
// missile := [ 1 ] ;
21190: LD_ADDR_VAR 0 14
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: EMPTY
21199: LIST
21200: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21201: LD_VAR 0 9
21205: PPUSH
21206: LD_VAR 0 12
21210: PPUSH
21211: CALL_OW 325
21215: IFFALSE 21244
// missile := Insert ( missile , missile + 1 , 2 ) ;
21217: LD_ADDR_VAR 0 14
21221: PUSH
21222: LD_VAR 0 14
21226: PPUSH
21227: LD_VAR 0 14
21231: PUSH
21232: LD_INT 1
21234: PLUS
21235: PPUSH
21236: LD_INT 2
21238: PPUSH
21239: CALL_OW 2
21243: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21244: LD_VAR 0 9
21248: PPUSH
21249: LD_VAR 0 13
21253: PPUSH
21254: CALL_OW 325
21258: PUSH
21259: LD_VAR 0 10
21263: PPUSH
21264: CALL_OW 255
21268: PPUSH
21269: LD_VAR 0 13
21273: PPUSH
21274: CALL_OW 325
21278: NOT
21279: AND
21280: IFFALSE 21309
// missile := Insert ( missile , missile + 1 , 3 ) ;
21282: LD_ADDR_VAR 0 14
21286: PUSH
21287: LD_VAR 0 14
21291: PPUSH
21292: LD_VAR 0 14
21296: PUSH
21297: LD_INT 1
21299: PLUS
21300: PPUSH
21301: LD_INT 3
21303: PPUSH
21304: CALL_OW 2
21308: ST_TO_ADDR
// if missile < 2 then
21309: LD_VAR 0 14
21313: PUSH
21314: LD_INT 2
21316: LESS
21317: IFFALSE 21321
// exit ;
21319: GO 21543
// x := GetX ( enemy ) ;
21321: LD_ADDR_VAR 0 4
21325: PUSH
21326: LD_VAR 0 10
21330: PPUSH
21331: CALL_OW 250
21335: ST_TO_ADDR
// y := GetY ( enemy ) ;
21336: LD_ADDR_VAR 0 5
21340: PUSH
21341: LD_VAR 0 10
21345: PPUSH
21346: CALL_OW 251
21350: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21351: LD_ADDR_VAR 0 6
21355: PUSH
21356: LD_VAR 0 4
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 12
21372: PLUS
21373: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21374: LD_ADDR_VAR 0 7
21378: PUSH
21379: LD_VAR 0 5
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PPUSH
21388: LD_INT 1
21390: PPUSH
21391: CALL_OW 12
21395: PLUS
21396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21397: LD_VAR 0 6
21401: PPUSH
21402: LD_VAR 0 7
21406: PPUSH
21407: CALL_OW 488
21411: NOT
21412: IFFALSE 21434
// begin _x := x ;
21414: LD_ADDR_VAR 0 6
21418: PUSH
21419: LD_VAR 0 4
21423: ST_TO_ADDR
// _y := y ;
21424: LD_ADDR_VAR 0 7
21428: PUSH
21429: LD_VAR 0 5
21433: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_INT 1
21441: PPUSH
21442: LD_VAR 0 14
21446: PPUSH
21447: CALL_OW 12
21451: ST_TO_ADDR
// case i of 1 :
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 1
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21482
21465: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21466: LD_VAR 0 1
21470: PPUSH
21471: LD_VAR 0 10
21475: PPUSH
21476: CALL_OW 115
21480: GO 21543
21482: LD_INT 2
21484: DOUBLE
21485: EQUAL
21486: IFTRUE 21490
21488: GO 21512
21490: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21491: LD_VAR 0 1
21495: PPUSH
21496: LD_VAR 0 6
21500: PPUSH
21501: LD_VAR 0 7
21505: PPUSH
21506: CALL_OW 153
21510: GO 21543
21512: LD_INT 3
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21542
21520: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_VAR 0 6
21530: PPUSH
21531: LD_VAR 0 7
21535: PPUSH
21536: CALL_OW 154
21540: GO 21543
21542: POP
// end ;
21543: LD_VAR 0 2
21547: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21548: LD_INT 0
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
// if not unit or not building then
21556: LD_VAR 0 1
21560: NOT
21561: PUSH
21562: LD_VAR 0 2
21566: NOT
21567: OR
21568: IFFALSE 21572
// exit ;
21570: GO 21730
// x := GetX ( building ) ;
21572: LD_ADDR_VAR 0 5
21576: PUSH
21577: LD_VAR 0 2
21581: PPUSH
21582: CALL_OW 250
21586: ST_TO_ADDR
// y := GetY ( building ) ;
21587: LD_ADDR_VAR 0 6
21591: PUSH
21592: LD_VAR 0 2
21596: PPUSH
21597: CALL_OW 251
21601: ST_TO_ADDR
// for i = 0 to 5 do
21602: LD_ADDR_VAR 0 4
21606: PUSH
21607: DOUBLE
21608: LD_INT 0
21610: DEC
21611: ST_TO_ADDR
21612: LD_INT 5
21614: PUSH
21615: FOR_TO
21616: IFFALSE 21728
// begin _x := ShiftX ( x , i , 3 ) ;
21618: LD_ADDR_VAR 0 7
21622: PUSH
21623: LD_VAR 0 5
21627: PPUSH
21628: LD_VAR 0 4
21632: PPUSH
21633: LD_INT 3
21635: PPUSH
21636: CALL_OW 272
21640: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21641: LD_ADDR_VAR 0 8
21645: PUSH
21646: LD_VAR 0 6
21650: PPUSH
21651: LD_VAR 0 4
21655: PPUSH
21656: LD_INT 3
21658: PPUSH
21659: CALL_OW 273
21663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21664: LD_VAR 0 7
21668: PPUSH
21669: LD_VAR 0 8
21673: PPUSH
21674: CALL_OW 488
21678: NOT
21679: IFFALSE 21683
// continue ;
21681: GO 21615
// if HexInfo ( _x , _y ) = 0 then
21683: LD_VAR 0 7
21687: PPUSH
21688: LD_VAR 0 8
21692: PPUSH
21693: CALL_OW 428
21697: PUSH
21698: LD_INT 0
21700: EQUAL
21701: IFFALSE 21726
// begin ComMoveXY ( unit , _x , _y ) ;
21703: LD_VAR 0 1
21707: PPUSH
21708: LD_VAR 0 7
21712: PPUSH
21713: LD_VAR 0 8
21717: PPUSH
21718: CALL_OW 111
// exit ;
21722: POP
21723: POP
21724: GO 21730
// end ; end ;
21726: GO 21615
21728: POP
21729: POP
// end ;
21730: LD_VAR 0 3
21734: RET
// export function ScanBase ( side , base_area ) ; begin
21735: LD_INT 0
21737: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21738: LD_ADDR_VAR 0 3
21742: PUSH
21743: LD_VAR 0 2
21747: PPUSH
21748: LD_INT 81
21750: PUSH
21751: LD_VAR 0 1
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 70
21764: ST_TO_ADDR
// end ;
21765: LD_VAR 0 3
21769: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21770: LD_INT 0
21772: PPUSH
21773: PPUSH
21774: PPUSH
21775: PPUSH
// result := false ;
21776: LD_ADDR_VAR 0 2
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// side := GetSide ( unit ) ;
21784: LD_ADDR_VAR 0 3
21788: PUSH
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 255
21798: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21799: LD_ADDR_VAR 0 4
21803: PUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 248
21813: ST_TO_ADDR
// case nat of 1 :
21814: LD_VAR 0 4
21818: PUSH
21819: LD_INT 1
21821: DOUBLE
21822: EQUAL
21823: IFTRUE 21827
21825: GO 21838
21827: POP
// tech := tech_lassight ; 2 :
21828: LD_ADDR_VAR 0 5
21832: PUSH
21833: LD_INT 12
21835: ST_TO_ADDR
21836: GO 21877
21838: LD_INT 2
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21846
21844: GO 21857
21846: POP
// tech := tech_mortar ; 3 :
21847: LD_ADDR_VAR 0 5
21851: PUSH
21852: LD_INT 41
21854: ST_TO_ADDR
21855: GO 21877
21857: LD_INT 3
21859: DOUBLE
21860: EQUAL
21861: IFTRUE 21865
21863: GO 21876
21865: POP
// tech := tech_bazooka ; end ;
21866: LD_ADDR_VAR 0 5
21870: PUSH
21871: LD_INT 44
21873: ST_TO_ADDR
21874: GO 21877
21876: POP
// if Researched ( side , tech ) then
21877: LD_VAR 0 3
21881: PPUSH
21882: LD_VAR 0 5
21886: PPUSH
21887: CALL_OW 325
21891: IFFALSE 21918
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21893: LD_ADDR_VAR 0 2
21897: PUSH
21898: LD_INT 5
21900: PUSH
21901: LD_INT 8
21903: PUSH
21904: LD_INT 9
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: PUSH
21912: LD_VAR 0 4
21916: ARRAY
21917: ST_TO_ADDR
// end ;
21918: LD_VAR 0 2
21922: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21923: LD_INT 0
21925: PPUSH
21926: PPUSH
21927: PPUSH
// if not mines then
21928: LD_VAR 0 2
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 22081
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21937: LD_ADDR_VAR 0 5
21941: PUSH
21942: LD_INT 81
21944: PUSH
21945: LD_VAR 0 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: LD_INT 21
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PPUSH
21975: CALL_OW 69
21979: ST_TO_ADDR
// for i in mines do
21980: LD_ADDR_VAR 0 4
21984: PUSH
21985: LD_VAR 0 2
21989: PUSH
21990: FOR_IN
21991: IFFALSE 22079
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21993: LD_VAR 0 4
21997: PUSH
21998: LD_INT 1
22000: ARRAY
22001: PPUSH
22002: LD_VAR 0 4
22006: PUSH
22007: LD_INT 2
22009: ARRAY
22010: PPUSH
22011: CALL_OW 458
22015: NOT
22016: IFFALSE 22020
// continue ;
22018: GO 21990
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22020: LD_VAR 0 4
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: PPUSH
22029: LD_VAR 0 4
22033: PUSH
22034: LD_INT 2
22036: ARRAY
22037: PPUSH
22038: CALL_OW 428
22042: PUSH
22043: LD_VAR 0 5
22047: IN
22048: IFFALSE 22077
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22050: LD_VAR 0 4
22054: PUSH
22055: LD_INT 1
22057: ARRAY
22058: PPUSH
22059: LD_VAR 0 4
22063: PUSH
22064: LD_INT 2
22066: ARRAY
22067: PPUSH
22068: LD_VAR 0 1
22072: PPUSH
22073: CALL_OW 456
// end ;
22077: GO 21990
22079: POP
22080: POP
// end ;
22081: LD_VAR 0 3
22085: RET
// export function Count ( array ) ; var i ; begin
22086: LD_INT 0
22088: PPUSH
22089: PPUSH
// result := 0 ;
22090: LD_ADDR_VAR 0 2
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// for i in array do
22098: LD_ADDR_VAR 0 3
22102: PUSH
22103: LD_VAR 0 1
22107: PUSH
22108: FOR_IN
22109: IFFALSE 22133
// if i then
22111: LD_VAR 0 3
22115: IFFALSE 22131
// result := result + 1 ;
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: LD_VAR 0 2
22126: PUSH
22127: LD_INT 1
22129: PLUS
22130: ST_TO_ADDR
22131: GO 22108
22133: POP
22134: POP
// end ;
22135: LD_VAR 0 2
22139: RET
// export function IsEmpty ( building ) ; begin
22140: LD_INT 0
22142: PPUSH
// if not building then
22143: LD_VAR 0 1
22147: NOT
22148: IFFALSE 22152
// exit ;
22150: GO 22195
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22152: LD_ADDR_VAR 0 2
22156: PUSH
22157: LD_VAR 0 1
22161: PUSH
22162: LD_INT 22
22164: PUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 255
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 58
22181: PUSH
22182: EMPTY
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: IN
22194: ST_TO_ADDR
// end ;
22195: LD_VAR 0 2
22199: RET
// export function IsNotFull ( building ) ; begin
22200: LD_INT 0
22202: PPUSH
// if not building then
22203: LD_VAR 0 1
22207: NOT
22208: IFFALSE 22212
// exit ;
22210: GO 22231
// result := UnitsInside ( building ) < 6 ;
22212: LD_ADDR_VAR 0 2
22216: PUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: CALL_OW 313
22226: PUSH
22227: LD_INT 6
22229: LESS
22230: ST_TO_ADDR
// end ;
22231: LD_VAR 0 2
22235: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22236: LD_INT 0
22238: PPUSH
22239: PPUSH
22240: PPUSH
22241: PPUSH
// tmp := [ ] ;
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: EMPTY
22248: ST_TO_ADDR
// list := [ ] ;
22249: LD_ADDR_VAR 0 5
22253: PUSH
22254: EMPTY
22255: ST_TO_ADDR
// for i = 16 to 25 do
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: DOUBLE
22262: LD_INT 16
22264: DEC
22265: ST_TO_ADDR
22266: LD_INT 25
22268: PUSH
22269: FOR_TO
22270: IFFALSE 22343
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22272: LD_ADDR_VAR 0 3
22276: PUSH
22277: LD_VAR 0 3
22281: PUSH
22282: LD_INT 22
22284: PUSH
22285: LD_VAR 0 1
22289: PPUSH
22290: CALL_OW 255
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 91
22301: PUSH
22302: LD_VAR 0 1
22306: PUSH
22307: LD_INT 6
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 30
22317: PUSH
22318: LD_VAR 0 4
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: EMPTY
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ADD
22340: ST_TO_ADDR
22341: GO 22269
22343: POP
22344: POP
// for i = 1 to tmp do
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: DOUBLE
22351: LD_INT 1
22353: DEC
22354: ST_TO_ADDR
22355: LD_VAR 0 3
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22449
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22363: LD_ADDR_VAR 0 5
22367: PUSH
22368: LD_VAR 0 5
22372: PUSH
22373: LD_VAR 0 3
22377: PUSH
22378: LD_VAR 0 4
22382: ARRAY
22383: PPUSH
22384: CALL_OW 266
22388: PUSH
22389: LD_VAR 0 3
22393: PUSH
22394: LD_VAR 0 4
22398: ARRAY
22399: PPUSH
22400: CALL_OW 250
22404: PUSH
22405: LD_VAR 0 3
22409: PUSH
22410: LD_VAR 0 4
22414: ARRAY
22415: PPUSH
22416: CALL_OW 251
22420: PUSH
22421: LD_VAR 0 3
22425: PUSH
22426: LD_VAR 0 4
22430: ARRAY
22431: PPUSH
22432: CALL_OW 254
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: ADD
22446: ST_TO_ADDR
22447: GO 22360
22449: POP
22450: POP
// result := list ;
22451: LD_ADDR_VAR 0 2
22455: PUSH
22456: LD_VAR 0 5
22460: ST_TO_ADDR
// end ;
22461: LD_VAR 0 2
22465: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22466: LD_INT 0
22468: PPUSH
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
// if not factory then
22475: LD_VAR 0 1
22479: NOT
22480: IFFALSE 22484
// exit ;
22482: GO 23077
// if control = control_apeman then
22484: LD_VAR 0 4
22488: PUSH
22489: LD_INT 5
22491: EQUAL
22492: IFFALSE 22601
// begin tmp := UnitsInside ( factory ) ;
22494: LD_ADDR_VAR 0 8
22498: PUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 313
22508: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22509: LD_VAR 0 8
22513: PPUSH
22514: LD_INT 25
22516: PUSH
22517: LD_INT 12
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: CALL_OW 72
22528: NOT
22529: IFFALSE 22539
// control := control_manual ;
22531: LD_ADDR_VAR 0 4
22535: PUSH
22536: LD_INT 1
22538: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22539: LD_ADDR_VAR 0 8
22543: PUSH
22544: LD_VAR 0 1
22548: PPUSH
22549: CALL 22236 0 1
22553: ST_TO_ADDR
// if tmp then
22554: LD_VAR 0 8
22558: IFFALSE 22601
// begin for i in tmp do
22560: LD_ADDR_VAR 0 7
22564: PUSH
22565: LD_VAR 0 8
22569: PUSH
22570: FOR_IN
22571: IFFALSE 22599
// if i [ 1 ] = b_ext_radio then
22573: LD_VAR 0 7
22577: PUSH
22578: LD_INT 1
22580: ARRAY
22581: PUSH
22582: LD_INT 22
22584: EQUAL
22585: IFFALSE 22597
// begin control := control_remote ;
22587: LD_ADDR_VAR 0 4
22591: PUSH
22592: LD_INT 2
22594: ST_TO_ADDR
// break ;
22595: GO 22599
// end ;
22597: GO 22570
22599: POP
22600: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22601: LD_VAR 0 1
22605: PPUSH
22606: LD_VAR 0 2
22610: PPUSH
22611: LD_VAR 0 3
22615: PPUSH
22616: LD_VAR 0 4
22620: PPUSH
22621: LD_VAR 0 5
22625: PPUSH
22626: CALL_OW 448
22630: IFFALSE 22665
// begin result := [ chassis , engine , control , weapon ] ;
22632: LD_ADDR_VAR 0 6
22636: PUSH
22637: LD_VAR 0 2
22641: PUSH
22642: LD_VAR 0 3
22646: PUSH
22647: LD_VAR 0 4
22651: PUSH
22652: LD_VAR 0 5
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: ST_TO_ADDR
// exit ;
22663: GO 23077
// end ; _chassis := AvailableChassisList ( factory ) ;
22665: LD_ADDR_VAR 0 9
22669: PUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 475
22679: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22680: LD_ADDR_VAR 0 11
22684: PUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: CALL_OW 476
22694: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22695: LD_ADDR_VAR 0 12
22699: PUSH
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL_OW 477
22709: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22710: LD_ADDR_VAR 0 10
22714: PUSH
22715: LD_VAR 0 1
22719: PPUSH
22720: CALL_OW 478
22724: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22725: LD_VAR 0 9
22729: NOT
22730: PUSH
22731: LD_VAR 0 11
22735: NOT
22736: OR
22737: PUSH
22738: LD_VAR 0 12
22742: NOT
22743: OR
22744: PUSH
22745: LD_VAR 0 10
22749: NOT
22750: OR
22751: IFFALSE 22786
// begin result := [ chassis , engine , control , weapon ] ;
22753: LD_ADDR_VAR 0 6
22757: PUSH
22758: LD_VAR 0 2
22762: PUSH
22763: LD_VAR 0 3
22767: PUSH
22768: LD_VAR 0 4
22772: PUSH
22773: LD_VAR 0 5
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: ST_TO_ADDR
// exit ;
22784: GO 23077
// end ; if not chassis in _chassis then
22786: LD_VAR 0 2
22790: PUSH
22791: LD_VAR 0 9
22795: IN
22796: NOT
22797: IFFALSE 22823
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22799: LD_ADDR_VAR 0 2
22803: PUSH
22804: LD_VAR 0 9
22808: PUSH
22809: LD_INT 1
22811: PPUSH
22812: LD_VAR 0 9
22816: PPUSH
22817: CALL_OW 12
22821: ARRAY
22822: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22823: LD_VAR 0 2
22827: PPUSH
22828: LD_VAR 0 3
22832: PPUSH
22833: CALL 23082 0 2
22837: NOT
22838: IFFALSE 22897
// repeat engine := _engine [ 1 ] ;
22840: LD_ADDR_VAR 0 3
22844: PUSH
22845: LD_VAR 0 11
22849: PUSH
22850: LD_INT 1
22852: ARRAY
22853: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22854: LD_ADDR_VAR 0 11
22858: PUSH
22859: LD_VAR 0 11
22863: PPUSH
22864: LD_INT 1
22866: PPUSH
22867: CALL_OW 3
22871: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22872: LD_VAR 0 2
22876: PPUSH
22877: LD_VAR 0 3
22881: PPUSH
22882: CALL 23082 0 2
22886: PUSH
22887: LD_VAR 0 11
22891: PUSH
22892: EMPTY
22893: EQUAL
22894: OR
22895: IFFALSE 22840
// if not control in _control then
22897: LD_VAR 0 4
22901: PUSH
22902: LD_VAR 0 12
22906: IN
22907: NOT
22908: IFFALSE 22934
// control := _control [ rand ( 1 , _control ) ] ;
22910: LD_ADDR_VAR 0 4
22914: PUSH
22915: LD_VAR 0 12
22919: PUSH
22920: LD_INT 1
22922: PPUSH
22923: LD_VAR 0 12
22927: PPUSH
22928: CALL_OW 12
22932: ARRAY
22933: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22934: LD_VAR 0 2
22938: PPUSH
22939: LD_VAR 0 5
22943: PPUSH
22944: CALL 23302 0 2
22948: NOT
22949: IFFALSE 23008
// repeat weapon := _weapon [ 1 ] ;
22951: LD_ADDR_VAR 0 5
22955: PUSH
22956: LD_VAR 0 10
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22965: LD_ADDR_VAR 0 10
22969: PUSH
22970: LD_VAR 0 10
22974: PPUSH
22975: LD_INT 1
22977: PPUSH
22978: CALL_OW 3
22982: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22983: LD_VAR 0 2
22987: PPUSH
22988: LD_VAR 0 5
22992: PPUSH
22993: CALL 23302 0 2
22997: PUSH
22998: LD_VAR 0 10
23002: PUSH
23003: EMPTY
23004: EQUAL
23005: OR
23006: IFFALSE 22951
// result := [ ] ;
23008: LD_ADDR_VAR 0 6
23012: PUSH
23013: EMPTY
23014: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23015: LD_VAR 0 1
23019: PPUSH
23020: LD_VAR 0 2
23024: PPUSH
23025: LD_VAR 0 3
23029: PPUSH
23030: LD_VAR 0 4
23034: PPUSH
23035: LD_VAR 0 5
23039: PPUSH
23040: CALL_OW 448
23044: IFFALSE 23077
// result := [ chassis , engine , control , weapon ] ;
23046: LD_ADDR_VAR 0 6
23050: PUSH
23051: LD_VAR 0 2
23055: PUSH
23056: LD_VAR 0 3
23060: PUSH
23061: LD_VAR 0 4
23065: PUSH
23066: LD_VAR 0 5
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: ST_TO_ADDR
// end ;
23077: LD_VAR 0 6
23081: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23082: LD_INT 0
23084: PPUSH
// if not chassis or not engine then
23085: LD_VAR 0 1
23089: NOT
23090: PUSH
23091: LD_VAR 0 2
23095: NOT
23096: OR
23097: IFFALSE 23101
// exit ;
23099: GO 23297
// case engine of engine_solar :
23101: LD_VAR 0 2
23105: PUSH
23106: LD_INT 2
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23152
23114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 11
23122: PUSH
23123: LD_INT 12
23125: PUSH
23126: LD_INT 13
23128: PUSH
23129: LD_INT 14
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: ST_TO_ADDR
23150: GO 23281
23152: LD_INT 1
23154: DOUBLE
23155: EQUAL
23156: IFTRUE 23160
23158: GO 23222
23160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23161: LD_ADDR_VAR 0 3
23165: PUSH
23166: LD_INT 11
23168: PUSH
23169: LD_INT 12
23171: PUSH
23172: LD_INT 13
23174: PUSH
23175: LD_INT 14
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: LD_INT 3
23186: PUSH
23187: LD_INT 4
23189: PUSH
23190: LD_INT 5
23192: PUSH
23193: LD_INT 21
23195: PUSH
23196: LD_INT 23
23198: PUSH
23199: LD_INT 22
23201: PUSH
23202: LD_INT 24
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
23220: GO 23281
23222: LD_INT 3
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23280
23230: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_INT 13
23238: PUSH
23239: LD_INT 14
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 3
23247: PUSH
23248: LD_INT 4
23250: PUSH
23251: LD_INT 5
23253: PUSH
23254: LD_INT 21
23256: PUSH
23257: LD_INT 22
23259: PUSH
23260: LD_INT 23
23262: PUSH
23263: LD_INT 24
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: ST_TO_ADDR
23278: GO 23281
23280: POP
// result := ( chassis in result ) ;
23281: LD_ADDR_VAR 0 3
23285: PUSH
23286: LD_VAR 0 1
23290: PUSH
23291: LD_VAR 0 3
23295: IN
23296: ST_TO_ADDR
// end ;
23297: LD_VAR 0 3
23301: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23302: LD_INT 0
23304: PPUSH
// if not chassis or not weapon then
23305: LD_VAR 0 1
23309: NOT
23310: PUSH
23311: LD_VAR 0 2
23315: NOT
23316: OR
23317: IFFALSE 23321
// exit ;
23319: GO 24383
// case weapon of us_machine_gun :
23321: LD_VAR 0 2
23325: PUSH
23326: LD_INT 2
23328: DOUBLE
23329: EQUAL
23330: IFTRUE 23334
23332: GO 23364
23334: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23335: LD_ADDR_VAR 0 3
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: LD_INT 2
23345: PUSH
23346: LD_INT 3
23348: PUSH
23349: LD_INT 4
23351: PUSH
23352: LD_INT 5
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: ST_TO_ADDR
23362: GO 24367
23364: LD_INT 3
23366: DOUBLE
23367: EQUAL
23368: IFTRUE 23372
23370: GO 23402
23372: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23373: LD_ADDR_VAR 0 3
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 3
23386: PUSH
23387: LD_INT 4
23389: PUSH
23390: LD_INT 5
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: ST_TO_ADDR
23400: GO 24367
23402: LD_INT 11
23404: DOUBLE
23405: EQUAL
23406: IFTRUE 23410
23408: GO 23440
23410: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: LD_INT 4
23427: PUSH
23428: LD_INT 5
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: ST_TO_ADDR
23438: GO 24367
23440: LD_INT 4
23442: DOUBLE
23443: EQUAL
23444: IFTRUE 23448
23446: GO 23474
23448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23449: LD_ADDR_VAR 0 3
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 3
23459: PUSH
23460: LD_INT 4
23462: PUSH
23463: LD_INT 5
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: ST_TO_ADDR
23472: GO 24367
23474: LD_INT 5
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23508
23482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23483: LD_ADDR_VAR 0 3
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 4
23496: PUSH
23497: LD_INT 5
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: ST_TO_ADDR
23506: GO 24367
23508: LD_INT 9
23510: DOUBLE
23511: EQUAL
23512: IFTRUE 23516
23514: GO 23542
23516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23517: LD_ADDR_VAR 0 3
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 3
23527: PUSH
23528: LD_INT 4
23530: PUSH
23531: LD_INT 5
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
23540: GO 24367
23542: LD_INT 7
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23576
23550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: LD_INT 4
23564: PUSH
23565: LD_INT 5
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
23574: GO 24367
23576: LD_INT 12
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23610
23584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: LD_INT 4
23598: PUSH
23599: LD_INT 5
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 24367
23610: LD_INT 13
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23644
23618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: LD_INT 3
23629: PUSH
23630: LD_INT 4
23632: PUSH
23633: LD_INT 5
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 24367
23644: LD_INT 14
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23670
23652: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_INT 4
23660: PUSH
23661: LD_INT 5
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: ST_TO_ADDR
23668: GO 24367
23670: LD_INT 6
23672: DOUBLE
23673: EQUAL
23674: IFTRUE 23678
23676: GO 23696
23678: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_INT 4
23686: PUSH
23687: LD_INT 5
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
23694: GO 24367
23696: LD_INT 10
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23722
23704: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_INT 4
23712: PUSH
23713: LD_INT 5
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: ST_TO_ADDR
23720: GO 24367
23722: LD_INT 22
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23756
23730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_INT 11
23738: PUSH
23739: LD_INT 12
23741: PUSH
23742: LD_INT 13
23744: PUSH
23745: LD_INT 14
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
23754: GO 24367
23756: LD_INT 23
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 23790
23764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23765: LD_ADDR_VAR 0 3
23769: PUSH
23770: LD_INT 11
23772: PUSH
23773: LD_INT 12
23775: PUSH
23776: LD_INT 13
23778: PUSH
23779: LD_INT 14
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
23788: GO 24367
23790: LD_INT 24
23792: DOUBLE
23793: EQUAL
23794: IFTRUE 23798
23796: GO 23824
23798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23799: LD_ADDR_VAR 0 3
23803: PUSH
23804: LD_INT 11
23806: PUSH
23807: LD_INT 12
23809: PUSH
23810: LD_INT 13
23812: PUSH
23813: LD_INT 14
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
23822: GO 24367
23824: LD_INT 30
23826: DOUBLE
23827: EQUAL
23828: IFTRUE 23832
23830: GO 23858
23832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23833: LD_ADDR_VAR 0 3
23837: PUSH
23838: LD_INT 11
23840: PUSH
23841: LD_INT 12
23843: PUSH
23844: LD_INT 13
23846: PUSH
23847: LD_INT 14
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
23856: GO 24367
23858: LD_INT 25
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23884
23866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23867: LD_ADDR_VAR 0 3
23871: PUSH
23872: LD_INT 13
23874: PUSH
23875: LD_INT 14
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: ST_TO_ADDR
23882: GO 24367
23884: LD_INT 27
23886: DOUBLE
23887: EQUAL
23888: IFTRUE 23892
23890: GO 23910
23892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23893: LD_ADDR_VAR 0 3
23897: PUSH
23898: LD_INT 13
23900: PUSH
23901: LD_INT 14
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: ST_TO_ADDR
23908: GO 24367
23910: LD_EXP 82
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23946
23920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_INT 11
23928: PUSH
23929: LD_INT 12
23931: PUSH
23932: LD_INT 13
23934: PUSH
23935: LD_INT 14
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: ST_TO_ADDR
23944: GO 24367
23946: LD_INT 28
23948: DOUBLE
23949: EQUAL
23950: IFTRUE 23954
23952: GO 23972
23954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23955: LD_ADDR_VAR 0 3
23959: PUSH
23960: LD_INT 13
23962: PUSH
23963: LD_INT 14
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: ST_TO_ADDR
23970: GO 24367
23972: LD_INT 29
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 23998
23980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23981: LD_ADDR_VAR 0 3
23985: PUSH
23986: LD_INT 13
23988: PUSH
23989: LD_INT 14
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: ST_TO_ADDR
23996: GO 24367
23998: LD_INT 31
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24024
24006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: LD_INT 13
24014: PUSH
24015: LD_INT 14
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: ST_TO_ADDR
24022: GO 24367
24024: LD_INT 26
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24050
24032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24033: LD_ADDR_VAR 0 3
24037: PUSH
24038: LD_INT 13
24040: PUSH
24041: LD_INT 14
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 24367
24050: LD_INT 42
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24084
24058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_INT 21
24066: PUSH
24067: LD_INT 22
24069: PUSH
24070: LD_INT 23
24072: PUSH
24073: LD_INT 24
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: ST_TO_ADDR
24082: GO 24367
24084: LD_INT 43
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24118
24092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24093: LD_ADDR_VAR 0 3
24097: PUSH
24098: LD_INT 21
24100: PUSH
24101: LD_INT 22
24103: PUSH
24104: LD_INT 23
24106: PUSH
24107: LD_INT 24
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: ST_TO_ADDR
24116: GO 24367
24118: LD_INT 44
24120: DOUBLE
24121: EQUAL
24122: IFTRUE 24126
24124: GO 24152
24126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24127: LD_ADDR_VAR 0 3
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
24150: GO 24367
24152: LD_INT 45
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24186
24160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24161: LD_ADDR_VAR 0 3
24165: PUSH
24166: LD_INT 21
24168: PUSH
24169: LD_INT 22
24171: PUSH
24172: LD_INT 23
24174: PUSH
24175: LD_INT 24
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: ST_TO_ADDR
24184: GO 24367
24186: LD_INT 49
24188: DOUBLE
24189: EQUAL
24190: IFTRUE 24194
24192: GO 24220
24194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24195: LD_ADDR_VAR 0 3
24199: PUSH
24200: LD_INT 21
24202: PUSH
24203: LD_INT 22
24205: PUSH
24206: LD_INT 23
24208: PUSH
24209: LD_INT 24
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
24218: GO 24367
24220: LD_INT 51
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24254
24228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_INT 21
24236: PUSH
24237: LD_INT 22
24239: PUSH
24240: LD_INT 23
24242: PUSH
24243: LD_INT 24
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: ST_TO_ADDR
24252: GO 24367
24254: LD_INT 52
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24288
24262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: LD_INT 21
24270: PUSH
24271: LD_INT 22
24273: PUSH
24274: LD_INT 23
24276: PUSH
24277: LD_INT 24
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: ST_TO_ADDR
24286: GO 24367
24288: LD_INT 53
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24314
24296: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24297: LD_ADDR_VAR 0 3
24301: PUSH
24302: LD_INT 23
24304: PUSH
24305: LD_INT 24
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 24367
24314: LD_INT 46
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24340
24322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 23
24330: PUSH
24331: LD_INT 24
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: ST_TO_ADDR
24338: GO 24367
24340: LD_INT 47
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24366
24348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_INT 23
24356: PUSH
24357: LD_INT 24
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: ST_TO_ADDR
24364: GO 24367
24366: POP
// result := ( chassis in result ) ;
24367: LD_ADDR_VAR 0 3
24371: PUSH
24372: LD_VAR 0 1
24376: PUSH
24377: LD_VAR 0 3
24381: IN
24382: ST_TO_ADDR
// end ;
24383: LD_VAR 0 3
24387: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24388: LD_INT 0
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
// result := array ;
24397: LD_ADDR_VAR 0 5
24401: PUSH
24402: LD_VAR 0 1
24406: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24407: LD_VAR 0 1
24411: NOT
24412: PUSH
24413: LD_VAR 0 2
24417: NOT
24418: OR
24419: PUSH
24420: LD_VAR 0 3
24424: NOT
24425: OR
24426: PUSH
24427: LD_VAR 0 2
24431: PUSH
24432: LD_VAR 0 1
24436: GREATER
24437: OR
24438: PUSH
24439: LD_VAR 0 3
24443: PUSH
24444: LD_VAR 0 1
24448: GREATER
24449: OR
24450: IFFALSE 24454
// exit ;
24452: GO 24750
// if direction then
24454: LD_VAR 0 4
24458: IFFALSE 24522
// begin d := 1 ;
24460: LD_ADDR_VAR 0 9
24464: PUSH
24465: LD_INT 1
24467: ST_TO_ADDR
// if i_from > i_to then
24468: LD_VAR 0 2
24472: PUSH
24473: LD_VAR 0 3
24477: GREATER
24478: IFFALSE 24504
// length := ( array - i_from ) + i_to else
24480: LD_ADDR_VAR 0 11
24484: PUSH
24485: LD_VAR 0 1
24489: PUSH
24490: LD_VAR 0 2
24494: MINUS
24495: PUSH
24496: LD_VAR 0 3
24500: PLUS
24501: ST_TO_ADDR
24502: GO 24520
// length := i_to - i_from ;
24504: LD_ADDR_VAR 0 11
24508: PUSH
24509: LD_VAR 0 3
24513: PUSH
24514: LD_VAR 0 2
24518: MINUS
24519: ST_TO_ADDR
// end else
24520: GO 24583
// begin d := - 1 ;
24522: LD_ADDR_VAR 0 9
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: ST_TO_ADDR
// if i_from > i_to then
24531: LD_VAR 0 2
24535: PUSH
24536: LD_VAR 0 3
24540: GREATER
24541: IFFALSE 24561
// length := i_from - i_to else
24543: LD_ADDR_VAR 0 11
24547: PUSH
24548: LD_VAR 0 2
24552: PUSH
24553: LD_VAR 0 3
24557: MINUS
24558: ST_TO_ADDR
24559: GO 24583
// length := ( array - i_to ) + i_from ;
24561: LD_ADDR_VAR 0 11
24565: PUSH
24566: LD_VAR 0 1
24570: PUSH
24571: LD_VAR 0 3
24575: MINUS
24576: PUSH
24577: LD_VAR 0 2
24581: PLUS
24582: ST_TO_ADDR
// end ; if not length then
24583: LD_VAR 0 11
24587: NOT
24588: IFFALSE 24592
// exit ;
24590: GO 24750
// tmp := array ;
24592: LD_ADDR_VAR 0 10
24596: PUSH
24597: LD_VAR 0 1
24601: ST_TO_ADDR
// for i = 1 to length do
24602: LD_ADDR_VAR 0 6
24606: PUSH
24607: DOUBLE
24608: LD_INT 1
24610: DEC
24611: ST_TO_ADDR
24612: LD_VAR 0 11
24616: PUSH
24617: FOR_TO
24618: IFFALSE 24738
// begin for j = 1 to array do
24620: LD_ADDR_VAR 0 7
24624: PUSH
24625: DOUBLE
24626: LD_INT 1
24628: DEC
24629: ST_TO_ADDR
24630: LD_VAR 0 1
24634: PUSH
24635: FOR_TO
24636: IFFALSE 24724
// begin k := j + d ;
24638: LD_ADDR_VAR 0 8
24642: PUSH
24643: LD_VAR 0 7
24647: PUSH
24648: LD_VAR 0 9
24652: PLUS
24653: ST_TO_ADDR
// if k > array then
24654: LD_VAR 0 8
24658: PUSH
24659: LD_VAR 0 1
24663: GREATER
24664: IFFALSE 24674
// k := 1 ;
24666: LD_ADDR_VAR 0 8
24670: PUSH
24671: LD_INT 1
24673: ST_TO_ADDR
// if not k then
24674: LD_VAR 0 8
24678: NOT
24679: IFFALSE 24691
// k := array ;
24681: LD_ADDR_VAR 0 8
24685: PUSH
24686: LD_VAR 0 1
24690: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24691: LD_ADDR_VAR 0 10
24695: PUSH
24696: LD_VAR 0 10
24700: PPUSH
24701: LD_VAR 0 8
24705: PPUSH
24706: LD_VAR 0 1
24710: PUSH
24711: LD_VAR 0 7
24715: ARRAY
24716: PPUSH
24717: CALL_OW 1
24721: ST_TO_ADDR
// end ;
24722: GO 24635
24724: POP
24725: POP
// array := tmp ;
24726: LD_ADDR_VAR 0 1
24730: PUSH
24731: LD_VAR 0 10
24735: ST_TO_ADDR
// end ;
24736: GO 24617
24738: POP
24739: POP
// result := array ;
24740: LD_ADDR_VAR 0 5
24744: PUSH
24745: LD_VAR 0 1
24749: ST_TO_ADDR
// end ;
24750: LD_VAR 0 5
24754: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24755: LD_INT 0
24757: PPUSH
24758: PPUSH
// result := 0 ;
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_INT 0
24766: ST_TO_ADDR
// if not array or not value in array then
24767: LD_VAR 0 1
24771: NOT
24772: PUSH
24773: LD_VAR 0 2
24777: PUSH
24778: LD_VAR 0 1
24782: IN
24783: NOT
24784: OR
24785: IFFALSE 24789
// exit ;
24787: GO 24843
// for i = 1 to array do
24789: LD_ADDR_VAR 0 4
24793: PUSH
24794: DOUBLE
24795: LD_INT 1
24797: DEC
24798: ST_TO_ADDR
24799: LD_VAR 0 1
24803: PUSH
24804: FOR_TO
24805: IFFALSE 24841
// if value = array [ i ] then
24807: LD_VAR 0 2
24811: PUSH
24812: LD_VAR 0 1
24816: PUSH
24817: LD_VAR 0 4
24821: ARRAY
24822: EQUAL
24823: IFFALSE 24839
// begin result := i ;
24825: LD_ADDR_VAR 0 3
24829: PUSH
24830: LD_VAR 0 4
24834: ST_TO_ADDR
// exit ;
24835: POP
24836: POP
24837: GO 24843
// end ;
24839: GO 24804
24841: POP
24842: POP
// end ;
24843: LD_VAR 0 3
24847: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24848: LD_INT 0
24850: PPUSH
// vc_chassis := chassis ;
24851: LD_ADDR_OWVAR 37
24855: PUSH
24856: LD_VAR 0 1
24860: ST_TO_ADDR
// vc_engine := engine ;
24861: LD_ADDR_OWVAR 39
24865: PUSH
24866: LD_VAR 0 2
24870: ST_TO_ADDR
// vc_control := control ;
24871: LD_ADDR_OWVAR 38
24875: PUSH
24876: LD_VAR 0 3
24880: ST_TO_ADDR
// vc_weapon := weapon ;
24881: LD_ADDR_OWVAR 40
24885: PUSH
24886: LD_VAR 0 4
24890: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24891: LD_ADDR_OWVAR 41
24895: PUSH
24896: LD_VAR 0 5
24900: ST_TO_ADDR
// end ;
24901: LD_VAR 0 6
24905: RET
// export function WantPlant ( unit ) ; var task ; begin
24906: LD_INT 0
24908: PPUSH
24909: PPUSH
// result := false ;
24910: LD_ADDR_VAR 0 2
24914: PUSH
24915: LD_INT 0
24917: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24918: LD_ADDR_VAR 0 3
24922: PUSH
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 437
24932: ST_TO_ADDR
// if task then
24933: LD_VAR 0 3
24937: IFFALSE 24965
// if task [ 1 ] [ 1 ] = p then
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 1
24946: ARRAY
24947: PUSH
24948: LD_INT 1
24950: ARRAY
24951: PUSH
24952: LD_STRING p
24954: EQUAL
24955: IFFALSE 24965
// result := true ;
24957: LD_ADDR_VAR 0 2
24961: PUSH
24962: LD_INT 1
24964: ST_TO_ADDR
// end ;
24965: LD_VAR 0 2
24969: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24970: LD_INT 0
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
// if pos < 1 then
24976: LD_VAR 0 2
24980: PUSH
24981: LD_INT 1
24983: LESS
24984: IFFALSE 24988
// exit ;
24986: GO 25291
// if pos = 1 then
24988: LD_VAR 0 2
24992: PUSH
24993: LD_INT 1
24995: EQUAL
24996: IFFALSE 25029
// result := Replace ( arr , pos [ 1 ] , value ) else
24998: LD_ADDR_VAR 0 4
25002: PUSH
25003: LD_VAR 0 1
25007: PPUSH
25008: LD_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: ARRAY
25016: PPUSH
25017: LD_VAR 0 3
25021: PPUSH
25022: CALL_OW 1
25026: ST_TO_ADDR
25027: GO 25291
// begin tmp := arr ;
25029: LD_ADDR_VAR 0 6
25033: PUSH
25034: LD_VAR 0 1
25038: ST_TO_ADDR
// s_arr := [ tmp ] ;
25039: LD_ADDR_VAR 0 7
25043: PUSH
25044: LD_VAR 0 6
25048: PUSH
25049: EMPTY
25050: LIST
25051: ST_TO_ADDR
// for i = 1 to pos - 1 do
25052: LD_ADDR_VAR 0 5
25056: PUSH
25057: DOUBLE
25058: LD_INT 1
25060: DEC
25061: ST_TO_ADDR
25062: LD_VAR 0 2
25066: PUSH
25067: LD_INT 1
25069: MINUS
25070: PUSH
25071: FOR_TO
25072: IFFALSE 25117
// begin tmp := tmp [ pos [ i ] ] ;
25074: LD_ADDR_VAR 0 6
25078: PUSH
25079: LD_VAR 0 6
25083: PUSH
25084: LD_VAR 0 2
25088: PUSH
25089: LD_VAR 0 5
25093: ARRAY
25094: ARRAY
25095: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25096: LD_ADDR_VAR 0 7
25100: PUSH
25101: LD_VAR 0 7
25105: PUSH
25106: LD_VAR 0 6
25110: PUSH
25111: EMPTY
25112: LIST
25113: ADD
25114: ST_TO_ADDR
// end ;
25115: GO 25071
25117: POP
25118: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25119: LD_ADDR_VAR 0 6
25123: PUSH
25124: LD_VAR 0 6
25128: PPUSH
25129: LD_VAR 0 2
25133: PUSH
25134: LD_VAR 0 2
25138: ARRAY
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: CALL_OW 1
25149: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25150: LD_ADDR_VAR 0 7
25154: PUSH
25155: LD_VAR 0 7
25159: PPUSH
25160: LD_VAR 0 7
25164: PPUSH
25165: LD_VAR 0 6
25169: PPUSH
25170: CALL_OW 1
25174: ST_TO_ADDR
// for i = s_arr downto 2 do
25175: LD_ADDR_VAR 0 5
25179: PUSH
25180: DOUBLE
25181: LD_VAR 0 7
25185: INC
25186: ST_TO_ADDR
25187: LD_INT 2
25189: PUSH
25190: FOR_DOWNTO
25191: IFFALSE 25275
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25193: LD_ADDR_VAR 0 6
25197: PUSH
25198: LD_VAR 0 7
25202: PUSH
25203: LD_VAR 0 5
25207: PUSH
25208: LD_INT 1
25210: MINUS
25211: ARRAY
25212: PPUSH
25213: LD_VAR 0 2
25217: PUSH
25218: LD_VAR 0 5
25222: PUSH
25223: LD_INT 1
25225: MINUS
25226: ARRAY
25227: PPUSH
25228: LD_VAR 0 7
25232: PUSH
25233: LD_VAR 0 5
25237: ARRAY
25238: PPUSH
25239: CALL_OW 1
25243: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25244: LD_ADDR_VAR 0 7
25248: PUSH
25249: LD_VAR 0 7
25253: PPUSH
25254: LD_VAR 0 5
25258: PUSH
25259: LD_INT 1
25261: MINUS
25262: PPUSH
25263: LD_VAR 0 6
25267: PPUSH
25268: CALL_OW 1
25272: ST_TO_ADDR
// end ;
25273: GO 25190
25275: POP
25276: POP
// result := s_arr [ 1 ] ;
25277: LD_ADDR_VAR 0 4
25281: PUSH
25282: LD_VAR 0 7
25286: PUSH
25287: LD_INT 1
25289: ARRAY
25290: ST_TO_ADDR
// end ; end ;
25291: LD_VAR 0 4
25295: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25296: LD_INT 0
25298: PPUSH
25299: PPUSH
// if not list then
25300: LD_VAR 0 1
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25400
// i := list [ pos1 ] ;
25309: LD_ADDR_VAR 0 5
25313: PUSH
25314: LD_VAR 0 1
25318: PUSH
25319: LD_VAR 0 2
25323: ARRAY
25324: ST_TO_ADDR
// if not i then
25325: LD_VAR 0 5
25329: NOT
25330: IFFALSE 25334
// exit ;
25332: GO 25400
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25334: LD_ADDR_VAR 0 1
25338: PUSH
25339: LD_VAR 0 1
25343: PPUSH
25344: LD_VAR 0 2
25348: PPUSH
25349: LD_VAR 0 1
25353: PUSH
25354: LD_VAR 0 3
25358: ARRAY
25359: PPUSH
25360: CALL_OW 1
25364: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25365: LD_ADDR_VAR 0 1
25369: PUSH
25370: LD_VAR 0 1
25374: PPUSH
25375: LD_VAR 0 3
25379: PPUSH
25380: LD_VAR 0 5
25384: PPUSH
25385: CALL_OW 1
25389: ST_TO_ADDR
// result := list ;
25390: LD_ADDR_VAR 0 4
25394: PUSH
25395: LD_VAR 0 1
25399: ST_TO_ADDR
// end ;
25400: LD_VAR 0 4
25404: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25405: LD_INT 0
25407: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25408: LD_ADDR_VAR 0 5
25412: PUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 250
25422: PPUSH
25423: LD_VAR 0 1
25427: PPUSH
25428: CALL_OW 251
25432: PPUSH
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_VAR 0 3
25442: PPUSH
25443: LD_VAR 0 4
25447: PPUSH
25448: CALL 25458 0 5
25452: ST_TO_ADDR
// end ;
25453: LD_VAR 0 5
25457: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25458: LD_INT 0
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
// if not list then
25464: LD_VAR 0 3
25468: NOT
25469: IFFALSE 25473
// exit ;
25471: GO 25861
// result := [ ] ;
25473: LD_ADDR_VAR 0 6
25477: PUSH
25478: EMPTY
25479: ST_TO_ADDR
// for i in list do
25480: LD_ADDR_VAR 0 7
25484: PUSH
25485: LD_VAR 0 3
25489: PUSH
25490: FOR_IN
25491: IFFALSE 25693
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25493: LD_ADDR_VAR 0 9
25497: PUSH
25498: LD_VAR 0 7
25502: PPUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: LD_VAR 0 2
25512: PPUSH
25513: CALL_OW 297
25517: ST_TO_ADDR
// if not result then
25518: LD_VAR 0 6
25522: NOT
25523: IFFALSE 25549
// result := [ [ i , tmp ] ] else
25525: LD_ADDR_VAR 0 6
25529: PUSH
25530: LD_VAR 0 7
25534: PUSH
25535: LD_VAR 0 9
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: EMPTY
25545: LIST
25546: ST_TO_ADDR
25547: GO 25691
// begin if result [ result ] [ 2 ] < tmp then
25549: LD_VAR 0 6
25553: PUSH
25554: LD_VAR 0 6
25558: ARRAY
25559: PUSH
25560: LD_INT 2
25562: ARRAY
25563: PUSH
25564: LD_VAR 0 9
25568: LESS
25569: IFFALSE 25611
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25571: LD_ADDR_VAR 0 6
25575: PUSH
25576: LD_VAR 0 6
25580: PPUSH
25581: LD_VAR 0 6
25585: PUSH
25586: LD_INT 1
25588: PLUS
25589: PPUSH
25590: LD_VAR 0 7
25594: PUSH
25595: LD_VAR 0 9
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PPUSH
25604: CALL_OW 2
25608: ST_TO_ADDR
25609: GO 25691
// for j = 1 to result do
25611: LD_ADDR_VAR 0 8
25615: PUSH
25616: DOUBLE
25617: LD_INT 1
25619: DEC
25620: ST_TO_ADDR
25621: LD_VAR 0 6
25625: PUSH
25626: FOR_TO
25627: IFFALSE 25689
// begin if tmp < result [ j ] [ 2 ] then
25629: LD_VAR 0 9
25633: PUSH
25634: LD_VAR 0 6
25638: PUSH
25639: LD_VAR 0 8
25643: ARRAY
25644: PUSH
25645: LD_INT 2
25647: ARRAY
25648: LESS
25649: IFFALSE 25687
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25651: LD_ADDR_VAR 0 6
25655: PUSH
25656: LD_VAR 0 6
25660: PPUSH
25661: LD_VAR 0 8
25665: PPUSH
25666: LD_VAR 0 7
25670: PUSH
25671: LD_VAR 0 9
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 2
25684: ST_TO_ADDR
// break ;
25685: GO 25689
// end ; end ;
25687: GO 25626
25689: POP
25690: POP
// end ; end ;
25691: GO 25490
25693: POP
25694: POP
// if result and not asc then
25695: LD_VAR 0 6
25699: PUSH
25700: LD_VAR 0 4
25704: NOT
25705: AND
25706: IFFALSE 25781
// begin tmp := result ;
25708: LD_ADDR_VAR 0 9
25712: PUSH
25713: LD_VAR 0 6
25717: ST_TO_ADDR
// for i = tmp downto 1 do
25718: LD_ADDR_VAR 0 7
25722: PUSH
25723: DOUBLE
25724: LD_VAR 0 9
25728: INC
25729: ST_TO_ADDR
25730: LD_INT 1
25732: PUSH
25733: FOR_DOWNTO
25734: IFFALSE 25779
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25736: LD_ADDR_VAR 0 6
25740: PUSH
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_VAR 0 9
25750: PUSH
25751: LD_VAR 0 7
25755: MINUS
25756: PUSH
25757: LD_INT 1
25759: PLUS
25760: PPUSH
25761: LD_VAR 0 9
25765: PUSH
25766: LD_VAR 0 7
25770: ARRAY
25771: PPUSH
25772: CALL_OW 1
25776: ST_TO_ADDR
25777: GO 25733
25779: POP
25780: POP
// end ; tmp := [ ] ;
25781: LD_ADDR_VAR 0 9
25785: PUSH
25786: EMPTY
25787: ST_TO_ADDR
// if mode then
25788: LD_VAR 0 5
25792: IFFALSE 25861
// begin for i = 1 to result do
25794: LD_ADDR_VAR 0 7
25798: PUSH
25799: DOUBLE
25800: LD_INT 1
25802: DEC
25803: ST_TO_ADDR
25804: LD_VAR 0 6
25808: PUSH
25809: FOR_TO
25810: IFFALSE 25849
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25812: LD_ADDR_VAR 0 9
25816: PUSH
25817: LD_VAR 0 9
25821: PPUSH
25822: LD_VAR 0 7
25826: PPUSH
25827: LD_VAR 0 6
25831: PUSH
25832: LD_VAR 0 7
25836: ARRAY
25837: PUSH
25838: LD_INT 1
25840: ARRAY
25841: PPUSH
25842: CALL_OW 1
25846: ST_TO_ADDR
25847: GO 25809
25849: POP
25850: POP
// result := tmp ;
25851: LD_ADDR_VAR 0 6
25855: PUSH
25856: LD_VAR 0 9
25860: ST_TO_ADDR
// end ; end ;
25861: LD_VAR 0 6
25865: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25866: LD_INT 0
25868: PPUSH
25869: PPUSH
25870: PPUSH
25871: PPUSH
25872: PPUSH
25873: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25874: LD_ADDR_VAR 0 5
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: ST_TO_ADDR
// if not x or not y then
25896: LD_VAR 0 2
25900: NOT
25901: PUSH
25902: LD_VAR 0 3
25906: NOT
25907: OR
25908: IFFALSE 25912
// exit ;
25910: GO 27564
// if not range then
25912: LD_VAR 0 4
25916: NOT
25917: IFFALSE 25927
// range := 10 ;
25919: LD_ADDR_VAR 0 4
25923: PUSH
25924: LD_INT 10
25926: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25927: LD_ADDR_VAR 0 8
25931: PUSH
25932: LD_INT 81
25934: PUSH
25935: LD_VAR 0 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 92
25946: PUSH
25947: LD_VAR 0 2
25951: PUSH
25952: LD_VAR 0 3
25956: PUSH
25957: LD_VAR 0 4
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 21
25973: PUSH
25974: LD_INT 3
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: PPUSH
25990: CALL_OW 69
25994: ST_TO_ADDR
// if not tmp then
25995: LD_VAR 0 8
25999: NOT
26000: IFFALSE 26004
// exit ;
26002: GO 27564
// for i in tmp do
26004: LD_ADDR_VAR 0 6
26008: PUSH
26009: LD_VAR 0 8
26013: PUSH
26014: FOR_IN
26015: IFFALSE 27539
// begin points := [ 0 , 0 , 0 ] ;
26017: LD_ADDR_VAR 0 9
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
// bpoints := 1 ;
26036: LD_ADDR_VAR 0 10
26040: PUSH
26041: LD_INT 1
26043: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26044: LD_VAR 0 6
26048: PPUSH
26049: CALL_OW 247
26053: PUSH
26054: LD_INT 1
26056: DOUBLE
26057: EQUAL
26058: IFTRUE 26062
26060: GO 26640
26062: POP
// begin if GetClass ( i ) = 1 then
26063: LD_VAR 0 6
26067: PPUSH
26068: CALL_OW 257
26072: PUSH
26073: LD_INT 1
26075: EQUAL
26076: IFFALSE 26097
// points := [ 10 , 5 , 3 ] ;
26078: LD_ADDR_VAR 0 9
26082: PUSH
26083: LD_INT 10
26085: PUSH
26086: LD_INT 5
26088: PUSH
26089: LD_INT 3
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26097: LD_VAR 0 6
26101: PPUSH
26102: CALL_OW 257
26106: PUSH
26107: LD_INT 2
26109: PUSH
26110: LD_INT 3
26112: PUSH
26113: LD_INT 4
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: IN
26121: IFFALSE 26142
// points := [ 3 , 2 , 1 ] ;
26123: LD_ADDR_VAR 0 9
26127: PUSH
26128: LD_INT 3
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26142: LD_VAR 0 6
26146: PPUSH
26147: CALL_OW 257
26151: PUSH
26152: LD_INT 5
26154: EQUAL
26155: IFFALSE 26176
// points := [ 130 , 5 , 2 ] ;
26157: LD_ADDR_VAR 0 9
26161: PUSH
26162: LD_INT 130
26164: PUSH
26165: LD_INT 5
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26176: LD_VAR 0 6
26180: PPUSH
26181: CALL_OW 257
26185: PUSH
26186: LD_INT 8
26188: EQUAL
26189: IFFALSE 26210
// points := [ 35 , 35 , 30 ] ;
26191: LD_ADDR_VAR 0 9
26195: PUSH
26196: LD_INT 35
26198: PUSH
26199: LD_INT 35
26201: PUSH
26202: LD_INT 30
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: LIST
26209: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26210: LD_VAR 0 6
26214: PPUSH
26215: CALL_OW 257
26219: PUSH
26220: LD_INT 9
26222: EQUAL
26223: IFFALSE 26244
// points := [ 20 , 55 , 40 ] ;
26225: LD_ADDR_VAR 0 9
26229: PUSH
26230: LD_INT 20
26232: PUSH
26233: LD_INT 55
26235: PUSH
26236: LD_INT 40
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26244: LD_VAR 0 6
26248: PPUSH
26249: CALL_OW 257
26253: PUSH
26254: LD_INT 12
26256: PUSH
26257: LD_INT 16
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: IN
26264: IFFALSE 26285
// points := [ 5 , 3 , 2 ] ;
26266: LD_ADDR_VAR 0 9
26270: PUSH
26271: LD_INT 5
26273: PUSH
26274: LD_INT 3
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26285: LD_VAR 0 6
26289: PPUSH
26290: CALL_OW 257
26294: PUSH
26295: LD_INT 17
26297: EQUAL
26298: IFFALSE 26319
// points := [ 100 , 50 , 75 ] ;
26300: LD_ADDR_VAR 0 9
26304: PUSH
26305: LD_INT 100
26307: PUSH
26308: LD_INT 50
26310: PUSH
26311: LD_INT 75
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26319: LD_VAR 0 6
26323: PPUSH
26324: CALL_OW 257
26328: PUSH
26329: LD_INT 15
26331: EQUAL
26332: IFFALSE 26353
// points := [ 10 , 5 , 3 ] ;
26334: LD_ADDR_VAR 0 9
26338: PUSH
26339: LD_INT 10
26341: PUSH
26342: LD_INT 5
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26353: LD_VAR 0 6
26357: PPUSH
26358: CALL_OW 257
26362: PUSH
26363: LD_INT 14
26365: EQUAL
26366: IFFALSE 26387
// points := [ 10 , 0 , 0 ] ;
26368: LD_ADDR_VAR 0 9
26372: PUSH
26373: LD_INT 10
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26387: LD_VAR 0 6
26391: PPUSH
26392: CALL_OW 257
26396: PUSH
26397: LD_INT 11
26399: EQUAL
26400: IFFALSE 26421
// points := [ 30 , 10 , 5 ] ;
26402: LD_ADDR_VAR 0 9
26406: PUSH
26407: LD_INT 30
26409: PUSH
26410: LD_INT 10
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26421: LD_VAR 0 1
26425: PPUSH
26426: LD_INT 5
26428: PPUSH
26429: CALL_OW 321
26433: PUSH
26434: LD_INT 2
26436: EQUAL
26437: IFFALSE 26454
// bpoints := bpoints * 1.8 ;
26439: LD_ADDR_VAR 0 10
26443: PUSH
26444: LD_VAR 0 10
26448: PUSH
26449: LD_REAL  1.80000000000000E+0000
26452: MUL
26453: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26454: LD_VAR 0 6
26458: PPUSH
26459: CALL_OW 257
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: LD_INT 4
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: IN
26482: PUSH
26483: LD_VAR 0 1
26487: PPUSH
26488: LD_INT 51
26490: PPUSH
26491: CALL_OW 321
26495: PUSH
26496: LD_INT 2
26498: EQUAL
26499: AND
26500: IFFALSE 26517
// bpoints := bpoints * 1.2 ;
26502: LD_ADDR_VAR 0 10
26506: PUSH
26507: LD_VAR 0 10
26511: PUSH
26512: LD_REAL  1.20000000000000E+0000
26515: MUL
26516: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26517: LD_VAR 0 6
26521: PPUSH
26522: CALL_OW 257
26526: PUSH
26527: LD_INT 5
26529: PUSH
26530: LD_INT 7
26532: PUSH
26533: LD_INT 9
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: IN
26541: PUSH
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_INT 52
26549: PPUSH
26550: CALL_OW 321
26554: PUSH
26555: LD_INT 2
26557: EQUAL
26558: AND
26559: IFFALSE 26576
// bpoints := bpoints * 1.5 ;
26561: LD_ADDR_VAR 0 10
26565: PUSH
26566: LD_VAR 0 10
26570: PUSH
26571: LD_REAL  1.50000000000000E+0000
26574: MUL
26575: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26576: LD_VAR 0 1
26580: PPUSH
26581: LD_INT 66
26583: PPUSH
26584: CALL_OW 321
26588: PUSH
26589: LD_INT 2
26591: EQUAL
26592: IFFALSE 26609
// bpoints := bpoints * 1.1 ;
26594: LD_ADDR_VAR 0 10
26598: PUSH
26599: LD_VAR 0 10
26603: PUSH
26604: LD_REAL  1.10000000000000E+0000
26607: MUL
26608: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26609: LD_ADDR_VAR 0 10
26613: PUSH
26614: LD_VAR 0 10
26618: PUSH
26619: LD_VAR 0 6
26623: PPUSH
26624: LD_INT 1
26626: PPUSH
26627: CALL_OW 259
26631: PUSH
26632: LD_REAL  1.15000000000000E+0000
26635: MUL
26636: MUL
26637: ST_TO_ADDR
// end ; unit_vehicle :
26638: GO 27468
26640: LD_INT 2
26642: DOUBLE
26643: EQUAL
26644: IFTRUE 26648
26646: GO 27456
26648: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26649: LD_VAR 0 6
26653: PPUSH
26654: CALL_OW 264
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 42
26664: PUSH
26665: LD_INT 24
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: IN
26673: IFFALSE 26694
// points := [ 25 , 5 , 3 ] ;
26675: LD_ADDR_VAR 0 9
26679: PUSH
26680: LD_INT 25
26682: PUSH
26683: LD_INT 5
26685: PUSH
26686: LD_INT 3
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26694: LD_VAR 0 6
26698: PPUSH
26699: CALL_OW 264
26703: PUSH
26704: LD_INT 4
26706: PUSH
26707: LD_INT 43
26709: PUSH
26710: LD_INT 25
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: LIST
26717: IN
26718: IFFALSE 26739
// points := [ 40 , 15 , 5 ] ;
26720: LD_ADDR_VAR 0 9
26724: PUSH
26725: LD_INT 40
26727: PUSH
26728: LD_INT 15
26730: PUSH
26731: LD_INT 5
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26739: LD_VAR 0 6
26743: PPUSH
26744: CALL_OW 264
26748: PUSH
26749: LD_INT 3
26751: PUSH
26752: LD_INT 23
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: IN
26759: IFFALSE 26780
// points := [ 7 , 25 , 8 ] ;
26761: LD_ADDR_VAR 0 9
26765: PUSH
26766: LD_INT 7
26768: PUSH
26769: LD_INT 25
26771: PUSH
26772: LD_INT 8
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26780: LD_VAR 0 6
26784: PPUSH
26785: CALL_OW 264
26789: PUSH
26790: LD_INT 5
26792: PUSH
26793: LD_INT 27
26795: PUSH
26796: LD_INT 44
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: IN
26804: IFFALSE 26825
// points := [ 14 , 50 , 16 ] ;
26806: LD_ADDR_VAR 0 9
26810: PUSH
26811: LD_INT 14
26813: PUSH
26814: LD_INT 50
26816: PUSH
26817: LD_INT 16
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26825: LD_VAR 0 6
26829: PPUSH
26830: CALL_OW 264
26834: PUSH
26835: LD_INT 6
26837: PUSH
26838: LD_INT 46
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: IN
26845: IFFALSE 26866
// points := [ 32 , 120 , 70 ] ;
26847: LD_ADDR_VAR 0 9
26851: PUSH
26852: LD_INT 32
26854: PUSH
26855: LD_INT 120
26857: PUSH
26858: LD_INT 70
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26866: LD_VAR 0 6
26870: PPUSH
26871: CALL_OW 264
26875: PUSH
26876: LD_INT 7
26878: PUSH
26879: LD_INT 28
26881: PUSH
26882: LD_INT 45
26884: PUSH
26885: LD_EXP 82
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: IN
26896: IFFALSE 26917
// points := [ 35 , 20 , 45 ] ;
26898: LD_ADDR_VAR 0 9
26902: PUSH
26903: LD_INT 35
26905: PUSH
26906: LD_INT 20
26908: PUSH
26909: LD_INT 45
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26917: LD_VAR 0 6
26921: PPUSH
26922: CALL_OW 264
26926: PUSH
26927: LD_INT 47
26929: PUSH
26930: EMPTY
26931: LIST
26932: IN
26933: IFFALSE 26954
// points := [ 67 , 45 , 75 ] ;
26935: LD_ADDR_VAR 0 9
26939: PUSH
26940: LD_INT 67
26942: PUSH
26943: LD_INT 45
26945: PUSH
26946: LD_INT 75
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26954: LD_VAR 0 6
26958: PPUSH
26959: CALL_OW 264
26963: PUSH
26964: LD_INT 26
26966: PUSH
26967: EMPTY
26968: LIST
26969: IN
26970: IFFALSE 26991
// points := [ 120 , 30 , 80 ] ;
26972: LD_ADDR_VAR 0 9
26976: PUSH
26977: LD_INT 120
26979: PUSH
26980: LD_INT 30
26982: PUSH
26983: LD_INT 80
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26991: LD_VAR 0 6
26995: PPUSH
26996: CALL_OW 264
27000: PUSH
27001: LD_INT 22
27003: PUSH
27004: EMPTY
27005: LIST
27006: IN
27007: IFFALSE 27028
// points := [ 40 , 1 , 1 ] ;
27009: LD_ADDR_VAR 0 9
27013: PUSH
27014: LD_INT 40
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27028: LD_VAR 0 6
27032: PPUSH
27033: CALL_OW 264
27037: PUSH
27038: LD_INT 29
27040: PUSH
27041: EMPTY
27042: LIST
27043: IN
27044: IFFALSE 27065
// points := [ 70 , 200 , 400 ] ;
27046: LD_ADDR_VAR 0 9
27050: PUSH
27051: LD_INT 70
27053: PUSH
27054: LD_INT 200
27056: PUSH
27057: LD_INT 400
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27065: LD_VAR 0 6
27069: PPUSH
27070: CALL_OW 264
27074: PUSH
27075: LD_INT 14
27077: PUSH
27078: LD_INT 53
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: IN
27085: IFFALSE 27106
// points := [ 40 , 10 , 20 ] ;
27087: LD_ADDR_VAR 0 9
27091: PUSH
27092: LD_INT 40
27094: PUSH
27095: LD_INT 10
27097: PUSH
27098: LD_INT 20
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27106: LD_VAR 0 6
27110: PPUSH
27111: CALL_OW 264
27115: PUSH
27116: LD_INT 9
27118: PUSH
27119: EMPTY
27120: LIST
27121: IN
27122: IFFALSE 27143
// points := [ 5 , 70 , 20 ] ;
27124: LD_ADDR_VAR 0 9
27128: PUSH
27129: LD_INT 5
27131: PUSH
27132: LD_INT 70
27134: PUSH
27135: LD_INT 20
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27143: LD_VAR 0 6
27147: PPUSH
27148: CALL_OW 264
27152: PUSH
27153: LD_INT 10
27155: PUSH
27156: EMPTY
27157: LIST
27158: IN
27159: IFFALSE 27180
// points := [ 35 , 110 , 70 ] ;
27161: LD_ADDR_VAR 0 9
27165: PUSH
27166: LD_INT 35
27168: PUSH
27169: LD_INT 110
27171: PUSH
27172: LD_INT 70
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27180: LD_VAR 0 6
27184: PPUSH
27185: CALL_OW 265
27189: PUSH
27190: LD_INT 25
27192: EQUAL
27193: IFFALSE 27214
// points := [ 80 , 65 , 100 ] ;
27195: LD_ADDR_VAR 0 9
27199: PUSH
27200: LD_INT 80
27202: PUSH
27203: LD_INT 65
27205: PUSH
27206: LD_INT 100
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 263
27223: PUSH
27224: LD_INT 1
27226: EQUAL
27227: IFFALSE 27262
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27229: LD_ADDR_VAR 0 10
27233: PUSH
27234: LD_VAR 0 10
27238: PUSH
27239: LD_VAR 0 6
27243: PPUSH
27244: CALL_OW 311
27248: PPUSH
27249: LD_INT 3
27251: PPUSH
27252: CALL_OW 259
27256: PUSH
27257: LD_INT 4
27259: MUL
27260: MUL
27261: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27262: LD_VAR 0 6
27266: PPUSH
27267: CALL_OW 263
27271: PUSH
27272: LD_INT 2
27274: EQUAL
27275: IFFALSE 27326
// begin j := IsControledBy ( i ) ;
27277: LD_ADDR_VAR 0 7
27281: PUSH
27282: LD_VAR 0 6
27286: PPUSH
27287: CALL_OW 312
27291: ST_TO_ADDR
// if j then
27292: LD_VAR 0 7
27296: IFFALSE 27326
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27298: LD_ADDR_VAR 0 10
27302: PUSH
27303: LD_VAR 0 10
27307: PUSH
27308: LD_VAR 0 7
27312: PPUSH
27313: LD_INT 3
27315: PPUSH
27316: CALL_OW 259
27320: PUSH
27321: LD_INT 3
27323: MUL
27324: MUL
27325: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27326: LD_VAR 0 6
27330: PPUSH
27331: CALL_OW 264
27335: PUSH
27336: LD_INT 5
27338: PUSH
27339: LD_INT 6
27341: PUSH
27342: LD_INT 46
27344: PUSH
27345: LD_INT 44
27347: PUSH
27348: LD_INT 47
27350: PUSH
27351: LD_INT 45
27353: PUSH
27354: LD_INT 28
27356: PUSH
27357: LD_INT 7
27359: PUSH
27360: LD_INT 27
27362: PUSH
27363: LD_INT 29
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: IN
27378: PUSH
27379: LD_VAR 0 1
27383: PPUSH
27384: LD_INT 52
27386: PPUSH
27387: CALL_OW 321
27391: PUSH
27392: LD_INT 2
27394: EQUAL
27395: AND
27396: IFFALSE 27413
// bpoints := bpoints * 1.2 ;
27398: LD_ADDR_VAR 0 10
27402: PUSH
27403: LD_VAR 0 10
27407: PUSH
27408: LD_REAL  1.20000000000000E+0000
27411: MUL
27412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27413: LD_VAR 0 6
27417: PPUSH
27418: CALL_OW 264
27422: PUSH
27423: LD_INT 6
27425: PUSH
27426: LD_INT 46
27428: PUSH
27429: LD_INT 47
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: IN
27437: IFFALSE 27454
// bpoints := bpoints * 1.2 ;
27439: LD_ADDR_VAR 0 10
27443: PUSH
27444: LD_VAR 0 10
27448: PUSH
27449: LD_REAL  1.20000000000000E+0000
27452: MUL
27453: ST_TO_ADDR
// end ; unit_building :
27454: GO 27468
27456: LD_INT 3
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27467
27464: POP
// ; end ;
27465: GO 27468
27467: POP
// for j = 1 to 3 do
27468: LD_ADDR_VAR 0 7
27472: PUSH
27473: DOUBLE
27474: LD_INT 1
27476: DEC
27477: ST_TO_ADDR
27478: LD_INT 3
27480: PUSH
27481: FOR_TO
27482: IFFALSE 27535
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27484: LD_ADDR_VAR 0 5
27488: PUSH
27489: LD_VAR 0 5
27493: PPUSH
27494: LD_VAR 0 7
27498: PPUSH
27499: LD_VAR 0 5
27503: PUSH
27504: LD_VAR 0 7
27508: ARRAY
27509: PUSH
27510: LD_VAR 0 9
27514: PUSH
27515: LD_VAR 0 7
27519: ARRAY
27520: PUSH
27521: LD_VAR 0 10
27525: MUL
27526: PLUS
27527: PPUSH
27528: CALL_OW 1
27532: ST_TO_ADDR
27533: GO 27481
27535: POP
27536: POP
// end ;
27537: GO 26014
27539: POP
27540: POP
// result := Replace ( result , 4 , tmp ) ;
27541: LD_ADDR_VAR 0 5
27545: PUSH
27546: LD_VAR 0 5
27550: PPUSH
27551: LD_INT 4
27553: PPUSH
27554: LD_VAR 0 8
27558: PPUSH
27559: CALL_OW 1
27563: ST_TO_ADDR
// end ;
27564: LD_VAR 0 5
27568: RET
// export function DangerAtRange ( unit , range ) ; begin
27569: LD_INT 0
27571: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 255
27586: PPUSH
27587: LD_VAR 0 1
27591: PPUSH
27592: CALL_OW 250
27596: PPUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 251
27606: PPUSH
27607: LD_VAR 0 2
27611: PPUSH
27612: CALL 25866 0 4
27616: ST_TO_ADDR
// end ;
27617: LD_VAR 0 3
27621: RET
// export function DangerInArea ( side , area ) ; begin
27622: LD_INT 0
27624: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27625: LD_ADDR_VAR 0 3
27629: PUSH
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_INT 81
27637: PUSH
27638: LD_VAR 0 1
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 70
27651: ST_TO_ADDR
// end ;
27652: LD_VAR 0 3
27656: RET
// export function IsExtension ( b ) ; begin
27657: LD_INT 0
27659: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27660: LD_ADDR_VAR 0 2
27664: PUSH
27665: LD_VAR 0 1
27669: PUSH
27670: LD_INT 23
27672: PUSH
27673: LD_INT 20
27675: PUSH
27676: LD_INT 22
27678: PUSH
27679: LD_INT 17
27681: PUSH
27682: LD_INT 24
27684: PUSH
27685: LD_INT 21
27687: PUSH
27688: LD_INT 19
27690: PUSH
27691: LD_INT 16
27693: PUSH
27694: LD_INT 25
27696: PUSH
27697: LD_INT 18
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: IN
27712: ST_TO_ADDR
// end ;
27713: LD_VAR 0 2
27717: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27718: LD_INT 0
27720: PPUSH
27721: PPUSH
27722: PPUSH
// result := [ ] ;
27723: LD_ADDR_VAR 0 4
27727: PUSH
27728: EMPTY
27729: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27730: LD_ADDR_VAR 0 5
27734: PUSH
27735: LD_VAR 0 2
27739: PPUSH
27740: LD_INT 21
27742: PUSH
27743: LD_INT 3
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PPUSH
27750: CALL_OW 70
27754: ST_TO_ADDR
// if not tmp then
27755: LD_VAR 0 5
27759: NOT
27760: IFFALSE 27764
// exit ;
27762: GO 27828
// if checkLink then
27764: LD_VAR 0 3
27768: IFFALSE 27818
// begin for i in tmp do
27770: LD_ADDR_VAR 0 6
27774: PUSH
27775: LD_VAR 0 5
27779: PUSH
27780: FOR_IN
27781: IFFALSE 27816
// if GetBase ( i ) <> base then
27783: LD_VAR 0 6
27787: PPUSH
27788: CALL_OW 274
27792: PUSH
27793: LD_VAR 0 1
27797: NONEQUAL
27798: IFFALSE 27814
// ComLinkToBase ( base , i ) ;
27800: LD_VAR 0 1
27804: PPUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 169
27814: GO 27780
27816: POP
27817: POP
// end ; result := tmp ;
27818: LD_ADDR_VAR 0 4
27822: PUSH
27823: LD_VAR 0 5
27827: ST_TO_ADDR
// end ;
27828: LD_VAR 0 4
27832: RET
// export function ComComplete ( units , b ) ; var i ; begin
27833: LD_INT 0
27835: PPUSH
27836: PPUSH
// if not units then
27837: LD_VAR 0 1
27841: NOT
27842: IFFALSE 27846
// exit ;
27844: GO 27936
// for i in units do
27846: LD_ADDR_VAR 0 4
27850: PUSH
27851: LD_VAR 0 1
27855: PUSH
27856: FOR_IN
27857: IFFALSE 27934
// if BuildingStatus ( b ) = bs_build then
27859: LD_VAR 0 2
27863: PPUSH
27864: CALL_OW 461
27868: PUSH
27869: LD_INT 1
27871: EQUAL
27872: IFFALSE 27932
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27874: LD_VAR 0 4
27878: PPUSH
27879: LD_STRING h
27881: PUSH
27882: LD_VAR 0 2
27886: PPUSH
27887: CALL_OW 250
27891: PUSH
27892: LD_VAR 0 2
27896: PPUSH
27897: CALL_OW 251
27901: PUSH
27902: LD_VAR 0 2
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: PPUSH
27928: CALL_OW 446
27932: GO 27856
27934: POP
27935: POP
// end ;
27936: LD_VAR 0 3
27940: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27941: LD_INT 0
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27949: LD_VAR 0 1
27953: NOT
27954: PUSH
27955: LD_VAR 0 1
27959: PPUSH
27960: CALL_OW 263
27964: PUSH
27965: LD_INT 2
27967: NONEQUAL
27968: OR
27969: IFFALSE 27973
// exit ;
27971: GO 28289
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27973: LD_ADDR_VAR 0 6
27977: PUSH
27978: LD_INT 22
27980: PUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL_OW 255
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 30
28000: PUSH
28001: LD_INT 36
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 34
28010: PUSH
28011: LD_INT 31
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 69
28031: ST_TO_ADDR
// if not tmp then
28032: LD_VAR 0 6
28036: NOT
28037: IFFALSE 28041
// exit ;
28039: GO 28289
// result := [ ] ;
28041: LD_ADDR_VAR 0 2
28045: PUSH
28046: EMPTY
28047: ST_TO_ADDR
// for i in tmp do
28048: LD_ADDR_VAR 0 3
28052: PUSH
28053: LD_VAR 0 6
28057: PUSH
28058: FOR_IN
28059: IFFALSE 28130
// begin t := UnitsInside ( i ) ;
28061: LD_ADDR_VAR 0 4
28065: PUSH
28066: LD_VAR 0 3
28070: PPUSH
28071: CALL_OW 313
28075: ST_TO_ADDR
// if t then
28076: LD_VAR 0 4
28080: IFFALSE 28128
// for j in t do
28082: LD_ADDR_VAR 0 7
28086: PUSH
28087: LD_VAR 0 4
28091: PUSH
28092: FOR_IN
28093: IFFALSE 28126
// result := Replace ( result , result + 1 , j ) ;
28095: LD_ADDR_VAR 0 2
28099: PUSH
28100: LD_VAR 0 2
28104: PPUSH
28105: LD_VAR 0 2
28109: PUSH
28110: LD_INT 1
28112: PLUS
28113: PPUSH
28114: LD_VAR 0 7
28118: PPUSH
28119: CALL_OW 1
28123: ST_TO_ADDR
28124: GO 28092
28126: POP
28127: POP
// end ;
28128: GO 28058
28130: POP
28131: POP
// if not result then
28132: LD_VAR 0 2
28136: NOT
28137: IFFALSE 28141
// exit ;
28139: GO 28289
// mech := result [ 1 ] ;
28141: LD_ADDR_VAR 0 5
28145: PUSH
28146: LD_VAR 0 2
28150: PUSH
28151: LD_INT 1
28153: ARRAY
28154: ST_TO_ADDR
// if result > 1 then
28155: LD_VAR 0 2
28159: PUSH
28160: LD_INT 1
28162: GREATER
28163: IFFALSE 28275
// begin for i = 2 to result do
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: DOUBLE
28171: LD_INT 2
28173: DEC
28174: ST_TO_ADDR
28175: LD_VAR 0 2
28179: PUSH
28180: FOR_TO
28181: IFFALSE 28273
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28183: LD_ADDR_VAR 0 4
28187: PUSH
28188: LD_VAR 0 2
28192: PUSH
28193: LD_VAR 0 3
28197: ARRAY
28198: PPUSH
28199: LD_INT 3
28201: PPUSH
28202: CALL_OW 259
28206: PUSH
28207: LD_VAR 0 2
28211: PUSH
28212: LD_VAR 0 3
28216: ARRAY
28217: PPUSH
28218: CALL_OW 432
28222: MINUS
28223: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28224: LD_VAR 0 4
28228: PUSH
28229: LD_VAR 0 5
28233: PPUSH
28234: LD_INT 3
28236: PPUSH
28237: CALL_OW 259
28241: PUSH
28242: LD_VAR 0 5
28246: PPUSH
28247: CALL_OW 432
28251: MINUS
28252: GREATEREQUAL
28253: IFFALSE 28271
// mech := result [ i ] ;
28255: LD_ADDR_VAR 0 5
28259: PUSH
28260: LD_VAR 0 2
28264: PUSH
28265: LD_VAR 0 3
28269: ARRAY
28270: ST_TO_ADDR
// end ;
28271: GO 28180
28273: POP
28274: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28275: LD_VAR 0 1
28279: PPUSH
28280: LD_VAR 0 5
28284: PPUSH
28285: CALL_OW 135
// end ;
28289: LD_VAR 0 2
28293: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28294: LD_INT 0
28296: PPUSH
28297: PPUSH
28298: PPUSH
28299: PPUSH
28300: PPUSH
28301: PPUSH
28302: PPUSH
28303: PPUSH
28304: PPUSH
28305: PPUSH
28306: PPUSH
28307: PPUSH
28308: PPUSH
// result := [ ] ;
28309: LD_ADDR_VAR 0 7
28313: PUSH
28314: EMPTY
28315: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28316: LD_VAR 0 1
28320: PPUSH
28321: CALL_OW 266
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: IN
28336: NOT
28337: IFFALSE 28341
// exit ;
28339: GO 29975
// if name then
28341: LD_VAR 0 3
28345: IFFALSE 28361
// SetBName ( base_dep , name ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_VAR 0 3
28356: PPUSH
28357: CALL_OW 500
// base := GetBase ( base_dep ) ;
28361: LD_ADDR_VAR 0 15
28365: PUSH
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL_OW 274
28375: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28376: LD_ADDR_VAR 0 16
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 255
28390: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28391: LD_ADDR_VAR 0 17
28395: PUSH
28396: LD_VAR 0 1
28400: PPUSH
28401: CALL_OW 248
28405: ST_TO_ADDR
// if sources then
28406: LD_VAR 0 5
28410: IFFALSE 28457
// for i = 1 to 3 do
28412: LD_ADDR_VAR 0 8
28416: PUSH
28417: DOUBLE
28418: LD_INT 1
28420: DEC
28421: ST_TO_ADDR
28422: LD_INT 3
28424: PUSH
28425: FOR_TO
28426: IFFALSE 28455
// AddResourceType ( base , i , sources [ i ] ) ;
28428: LD_VAR 0 15
28432: PPUSH
28433: LD_VAR 0 8
28437: PPUSH
28438: LD_VAR 0 5
28442: PUSH
28443: LD_VAR 0 8
28447: ARRAY
28448: PPUSH
28449: CALL_OW 276
28453: GO 28425
28455: POP
28456: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28457: LD_ADDR_VAR 0 18
28461: PUSH
28462: LD_VAR 0 15
28466: PPUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: LD_INT 1
28474: PPUSH
28475: CALL 27718 0 3
28479: ST_TO_ADDR
// InitHc ;
28480: CALL_OW 19
// InitUc ;
28484: CALL_OW 18
// uc_side := side ;
28488: LD_ADDR_OWVAR 20
28492: PUSH
28493: LD_VAR 0 16
28497: ST_TO_ADDR
// uc_nation := nation ;
28498: LD_ADDR_OWVAR 21
28502: PUSH
28503: LD_VAR 0 17
28507: ST_TO_ADDR
// if buildings then
28508: LD_VAR 0 18
28512: IFFALSE 29834
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28514: LD_ADDR_VAR 0 19
28518: PUSH
28519: LD_VAR 0 18
28523: PPUSH
28524: LD_INT 2
28526: PUSH
28527: LD_INT 30
28529: PUSH
28530: LD_INT 29
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 30
28539: PUSH
28540: LD_INT 30
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: LIST
28551: PPUSH
28552: CALL_OW 72
28556: ST_TO_ADDR
// if tmp then
28557: LD_VAR 0 19
28561: IFFALSE 28609
// for i in tmp do
28563: LD_ADDR_VAR 0 8
28567: PUSH
28568: LD_VAR 0 19
28572: PUSH
28573: FOR_IN
28574: IFFALSE 28607
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28576: LD_VAR 0 8
28580: PPUSH
28581: CALL_OW 250
28585: PPUSH
28586: LD_VAR 0 8
28590: PPUSH
28591: CALL_OW 251
28595: PPUSH
28596: LD_VAR 0 16
28600: PPUSH
28601: CALL_OW 441
28605: GO 28573
28607: POP
28608: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28609: LD_VAR 0 18
28613: PPUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 30
28619: PUSH
28620: LD_INT 32
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 30
28629: PUSH
28630: LD_INT 33
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: PPUSH
28642: CALL_OW 72
28646: IFFALSE 28734
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28648: LD_ADDR_VAR 0 8
28652: PUSH
28653: LD_VAR 0 18
28657: PPUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 30
28663: PUSH
28664: LD_INT 32
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 30
28673: PUSH
28674: LD_INT 33
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: PPUSH
28686: CALL_OW 72
28690: PUSH
28691: FOR_IN
28692: IFFALSE 28732
// begin if not GetBWeapon ( i ) then
28694: LD_VAR 0 8
28698: PPUSH
28699: CALL_OW 269
28703: NOT
28704: IFFALSE 28730
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28706: LD_VAR 0 8
28710: PPUSH
28711: LD_VAR 0 8
28715: PPUSH
28716: LD_VAR 0 2
28720: PPUSH
28721: CALL 29980 0 2
28725: PPUSH
28726: CALL_OW 431
// end ;
28730: GO 28691
28732: POP
28733: POP
// end ; for i = 1 to personel do
28734: LD_ADDR_VAR 0 8
28738: PUSH
28739: DOUBLE
28740: LD_INT 1
28742: DEC
28743: ST_TO_ADDR
28744: LD_VAR 0 6
28748: PUSH
28749: FOR_TO
28750: IFFALSE 29814
// begin if i > 4 then
28752: LD_VAR 0 8
28756: PUSH
28757: LD_INT 4
28759: GREATER
28760: IFFALSE 28764
// break ;
28762: GO 29814
// case i of 1 :
28764: LD_VAR 0 8
28768: PUSH
28769: LD_INT 1
28771: DOUBLE
28772: EQUAL
28773: IFTRUE 28777
28775: GO 28857
28777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28778: LD_ADDR_VAR 0 12
28782: PUSH
28783: LD_VAR 0 18
28787: PPUSH
28788: LD_INT 22
28790: PUSH
28791: LD_VAR 0 16
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 58
28802: PUSH
28803: EMPTY
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 30
28811: PUSH
28812: LD_INT 32
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 30
28821: PUSH
28822: LD_INT 4
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 30
28831: PUSH
28832: LD_INT 5
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: PPUSH
28850: CALL_OW 72
28854: ST_TO_ADDR
28855: GO 29079
28857: LD_INT 2
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28927
28865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28866: LD_ADDR_VAR 0 12
28870: PUSH
28871: LD_VAR 0 18
28875: PPUSH
28876: LD_INT 22
28878: PUSH
28879: LD_VAR 0 16
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 30
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 30
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 72
28924: ST_TO_ADDR
28925: GO 29079
28927: LD_INT 3
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 28997
28935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28936: LD_ADDR_VAR 0 12
28940: PUSH
28941: LD_VAR 0 18
28945: PPUSH
28946: LD_INT 22
28948: PUSH
28949: LD_VAR 0 16
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: LD_INT 30
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 30
28973: PUSH
28974: LD_INT 3
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PPUSH
28990: CALL_OW 72
28994: ST_TO_ADDR
28995: GO 29079
28997: LD_INT 4
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29078
29005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29006: LD_ADDR_VAR 0 12
29010: PUSH
29011: LD_VAR 0 18
29015: PPUSH
29016: LD_INT 22
29018: PUSH
29019: LD_VAR 0 16
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: PUSH
29031: LD_INT 30
29033: PUSH
29034: LD_INT 6
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 30
29043: PUSH
29044: LD_INT 7
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 30
29053: PUSH
29054: LD_INT 8
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PPUSH
29071: CALL_OW 72
29075: ST_TO_ADDR
29076: GO 29079
29078: POP
// if i = 1 then
29079: LD_VAR 0 8
29083: PUSH
29084: LD_INT 1
29086: EQUAL
29087: IFFALSE 29198
// begin tmp := [ ] ;
29089: LD_ADDR_VAR 0 19
29093: PUSH
29094: EMPTY
29095: ST_TO_ADDR
// for j in f do
29096: LD_ADDR_VAR 0 9
29100: PUSH
29101: LD_VAR 0 12
29105: PUSH
29106: FOR_IN
29107: IFFALSE 29180
// if GetBType ( j ) = b_bunker then
29109: LD_VAR 0 9
29113: PPUSH
29114: CALL_OW 266
29118: PUSH
29119: LD_INT 32
29121: EQUAL
29122: IFFALSE 29149
// tmp := Insert ( tmp , 1 , j ) else
29124: LD_ADDR_VAR 0 19
29128: PUSH
29129: LD_VAR 0 19
29133: PPUSH
29134: LD_INT 1
29136: PPUSH
29137: LD_VAR 0 9
29141: PPUSH
29142: CALL_OW 2
29146: ST_TO_ADDR
29147: GO 29178
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29149: LD_ADDR_VAR 0 19
29153: PUSH
29154: LD_VAR 0 19
29158: PPUSH
29159: LD_VAR 0 19
29163: PUSH
29164: LD_INT 1
29166: PLUS
29167: PPUSH
29168: LD_VAR 0 9
29172: PPUSH
29173: CALL_OW 2
29177: ST_TO_ADDR
29178: GO 29106
29180: POP
29181: POP
// if tmp then
29182: LD_VAR 0 19
29186: IFFALSE 29198
// f := tmp ;
29188: LD_ADDR_VAR 0 12
29192: PUSH
29193: LD_VAR 0 19
29197: ST_TO_ADDR
// end ; x := personel [ i ] ;
29198: LD_ADDR_VAR 0 13
29202: PUSH
29203: LD_VAR 0 6
29207: PUSH
29208: LD_VAR 0 8
29212: ARRAY
29213: ST_TO_ADDR
// if x = - 1 then
29214: LD_VAR 0 13
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: EQUAL
29223: IFFALSE 29432
// begin for j in f do
29225: LD_ADDR_VAR 0 9
29229: PUSH
29230: LD_VAR 0 12
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29428
// repeat InitHc ;
29238: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29242: LD_VAR 0 9
29246: PPUSH
29247: CALL_OW 266
29251: PUSH
29252: LD_INT 5
29254: EQUAL
29255: IFFALSE 29325
// begin if UnitsInside ( j ) < 3 then
29257: LD_VAR 0 9
29261: PPUSH
29262: CALL_OW 313
29266: PUSH
29267: LD_INT 3
29269: LESS
29270: IFFALSE 29306
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29272: LD_INT 0
29274: PPUSH
29275: LD_INT 5
29277: PUSH
29278: LD_INT 8
29280: PUSH
29281: LD_INT 9
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: PUSH
29289: LD_VAR 0 17
29293: ARRAY
29294: PPUSH
29295: LD_VAR 0 4
29299: PPUSH
29300: CALL_OW 380
29304: GO 29323
// PrepareHuman ( false , i , skill ) ;
29306: LD_INT 0
29308: PPUSH
29309: LD_VAR 0 8
29313: PPUSH
29314: LD_VAR 0 4
29318: PPUSH
29319: CALL_OW 380
// end else
29323: GO 29342
// PrepareHuman ( false , i , skill ) ;
29325: LD_INT 0
29327: PPUSH
29328: LD_VAR 0 8
29332: PPUSH
29333: LD_VAR 0 4
29337: PPUSH
29338: CALL_OW 380
// un := CreateHuman ;
29342: LD_ADDR_VAR 0 14
29346: PUSH
29347: CALL_OW 44
29351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29352: LD_ADDR_VAR 0 7
29356: PUSH
29357: LD_VAR 0 7
29361: PPUSH
29362: LD_INT 1
29364: PPUSH
29365: LD_VAR 0 14
29369: PPUSH
29370: CALL_OW 2
29374: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29375: LD_VAR 0 14
29379: PPUSH
29380: LD_VAR 0 9
29384: PPUSH
29385: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29389: LD_VAR 0 9
29393: PPUSH
29394: CALL_OW 313
29398: PUSH
29399: LD_INT 6
29401: EQUAL
29402: PUSH
29403: LD_VAR 0 9
29407: PPUSH
29408: CALL_OW 266
29412: PUSH
29413: LD_INT 32
29415: PUSH
29416: LD_INT 31
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: IN
29423: OR
29424: IFFALSE 29238
29426: GO 29235
29428: POP
29429: POP
// end else
29430: GO 29812
// for j = 1 to x do
29432: LD_ADDR_VAR 0 9
29436: PUSH
29437: DOUBLE
29438: LD_INT 1
29440: DEC
29441: ST_TO_ADDR
29442: LD_VAR 0 13
29446: PUSH
29447: FOR_TO
29448: IFFALSE 29810
// begin InitHc ;
29450: CALL_OW 19
// if not f then
29454: LD_VAR 0 12
29458: NOT
29459: IFFALSE 29548
// begin PrepareHuman ( false , i , skill ) ;
29461: LD_INT 0
29463: PPUSH
29464: LD_VAR 0 8
29468: PPUSH
29469: LD_VAR 0 4
29473: PPUSH
29474: CALL_OW 380
// un := CreateHuman ;
29478: LD_ADDR_VAR 0 14
29482: PUSH
29483: CALL_OW 44
29487: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29488: LD_ADDR_VAR 0 7
29492: PUSH
29493: LD_VAR 0 7
29497: PPUSH
29498: LD_INT 1
29500: PPUSH
29501: LD_VAR 0 14
29505: PPUSH
29506: CALL_OW 2
29510: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29511: LD_VAR 0 14
29515: PPUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: CALL_OW 250
29525: PPUSH
29526: LD_VAR 0 1
29530: PPUSH
29531: CALL_OW 251
29535: PPUSH
29536: LD_INT 10
29538: PPUSH
29539: LD_INT 0
29541: PPUSH
29542: CALL_OW 50
// continue ;
29546: GO 29447
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29548: LD_VAR 0 12
29552: PUSH
29553: LD_INT 1
29555: ARRAY
29556: PPUSH
29557: CALL_OW 313
29561: PUSH
29562: LD_VAR 0 12
29566: PUSH
29567: LD_INT 1
29569: ARRAY
29570: PPUSH
29571: CALL_OW 266
29575: PUSH
29576: LD_INT 32
29578: PUSH
29579: LD_INT 31
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: IN
29586: AND
29587: PUSH
29588: LD_VAR 0 12
29592: PUSH
29593: LD_INT 1
29595: ARRAY
29596: PPUSH
29597: CALL_OW 313
29601: PUSH
29602: LD_INT 6
29604: EQUAL
29605: OR
29606: IFFALSE 29626
// f := Delete ( f , 1 ) ;
29608: LD_ADDR_VAR 0 12
29612: PUSH
29613: LD_VAR 0 12
29617: PPUSH
29618: LD_INT 1
29620: PPUSH
29621: CALL_OW 3
29625: ST_TO_ADDR
// if not f then
29626: LD_VAR 0 12
29630: NOT
29631: IFFALSE 29649
// begin x := x + 2 ;
29633: LD_ADDR_VAR 0 13
29637: PUSH
29638: LD_VAR 0 13
29642: PUSH
29643: LD_INT 2
29645: PLUS
29646: ST_TO_ADDR
// continue ;
29647: GO 29447
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29649: LD_VAR 0 12
29653: PUSH
29654: LD_INT 1
29656: ARRAY
29657: PPUSH
29658: CALL_OW 266
29662: PUSH
29663: LD_INT 5
29665: EQUAL
29666: IFFALSE 29740
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29668: LD_VAR 0 12
29672: PUSH
29673: LD_INT 1
29675: ARRAY
29676: PPUSH
29677: CALL_OW 313
29681: PUSH
29682: LD_INT 3
29684: LESS
29685: IFFALSE 29721
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29687: LD_INT 0
29689: PPUSH
29690: LD_INT 5
29692: PUSH
29693: LD_INT 8
29695: PUSH
29696: LD_INT 9
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: PUSH
29704: LD_VAR 0 17
29708: ARRAY
29709: PPUSH
29710: LD_VAR 0 4
29714: PPUSH
29715: CALL_OW 380
29719: GO 29738
// PrepareHuman ( false , i , skill ) ;
29721: LD_INT 0
29723: PPUSH
29724: LD_VAR 0 8
29728: PPUSH
29729: LD_VAR 0 4
29733: PPUSH
29734: CALL_OW 380
// end else
29738: GO 29757
// PrepareHuman ( false , i , skill ) ;
29740: LD_INT 0
29742: PPUSH
29743: LD_VAR 0 8
29747: PPUSH
29748: LD_VAR 0 4
29752: PPUSH
29753: CALL_OW 380
// un := CreateHuman ;
29757: LD_ADDR_VAR 0 14
29761: PUSH
29762: CALL_OW 44
29766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29767: LD_ADDR_VAR 0 7
29771: PUSH
29772: LD_VAR 0 7
29776: PPUSH
29777: LD_INT 1
29779: PPUSH
29780: LD_VAR 0 14
29784: PPUSH
29785: CALL_OW 2
29789: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29790: LD_VAR 0 14
29794: PPUSH
29795: LD_VAR 0 12
29799: PUSH
29800: LD_INT 1
29802: ARRAY
29803: PPUSH
29804: CALL_OW 52
// end ;
29808: GO 29447
29810: POP
29811: POP
// end ;
29812: GO 28749
29814: POP
29815: POP
// result := result ^ buildings ;
29816: LD_ADDR_VAR 0 7
29820: PUSH
29821: LD_VAR 0 7
29825: PUSH
29826: LD_VAR 0 18
29830: ADD
29831: ST_TO_ADDR
// end else
29832: GO 29975
// begin for i = 1 to personel do
29834: LD_ADDR_VAR 0 8
29838: PUSH
29839: DOUBLE
29840: LD_INT 1
29842: DEC
29843: ST_TO_ADDR
29844: LD_VAR 0 6
29848: PUSH
29849: FOR_TO
29850: IFFALSE 29973
// begin if i > 4 then
29852: LD_VAR 0 8
29856: PUSH
29857: LD_INT 4
29859: GREATER
29860: IFFALSE 29864
// break ;
29862: GO 29973
// x := personel [ i ] ;
29864: LD_ADDR_VAR 0 13
29868: PUSH
29869: LD_VAR 0 6
29873: PUSH
29874: LD_VAR 0 8
29878: ARRAY
29879: ST_TO_ADDR
// if x = - 1 then
29880: LD_VAR 0 13
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: EQUAL
29889: IFFALSE 29893
// continue ;
29891: GO 29849
// PrepareHuman ( false , i , skill ) ;
29893: LD_INT 0
29895: PPUSH
29896: LD_VAR 0 8
29900: PPUSH
29901: LD_VAR 0 4
29905: PPUSH
29906: CALL_OW 380
// un := CreateHuman ;
29910: LD_ADDR_VAR 0 14
29914: PUSH
29915: CALL_OW 44
29919: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29920: LD_VAR 0 14
29924: PPUSH
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 250
29934: PPUSH
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL_OW 251
29944: PPUSH
29945: LD_INT 10
29947: PPUSH
29948: LD_INT 0
29950: PPUSH
29951: CALL_OW 50
// result := result ^ un ;
29955: LD_ADDR_VAR 0 7
29959: PUSH
29960: LD_VAR 0 7
29964: PUSH
29965: LD_VAR 0 14
29969: ADD
29970: ST_TO_ADDR
// end ;
29971: GO 29849
29973: POP
29974: POP
// end ; end ;
29975: LD_VAR 0 7
29979: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29980: LD_INT 0
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
// result := false ;
29998: LD_ADDR_VAR 0 3
30002: PUSH
30003: LD_INT 0
30005: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30006: LD_VAR 0 1
30010: NOT
30011: PUSH
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 266
30021: PUSH
30022: LD_INT 32
30024: PUSH
30025: LD_INT 33
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: IN
30032: NOT
30033: OR
30034: IFFALSE 30038
// exit ;
30036: GO 31147
// nat := GetNation ( tower ) ;
30038: LD_ADDR_VAR 0 12
30042: PUSH
30043: LD_VAR 0 1
30047: PPUSH
30048: CALL_OW 248
30052: ST_TO_ADDR
// side := GetSide ( tower ) ;
30053: LD_ADDR_VAR 0 16
30057: PUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL_OW 255
30067: ST_TO_ADDR
// x := GetX ( tower ) ;
30068: LD_ADDR_VAR 0 10
30072: PUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL_OW 250
30082: ST_TO_ADDR
// y := GetY ( tower ) ;
30083: LD_ADDR_VAR 0 11
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 251
30097: ST_TO_ADDR
// if not x or not y then
30098: LD_VAR 0 10
30102: NOT
30103: PUSH
30104: LD_VAR 0 11
30108: NOT
30109: OR
30110: IFFALSE 30114
// exit ;
30112: GO 31147
// weapon := 0 ;
30114: LD_ADDR_VAR 0 18
30118: PUSH
30119: LD_INT 0
30121: ST_TO_ADDR
// fac_list := [ ] ;
30122: LD_ADDR_VAR 0 17
30126: PUSH
30127: EMPTY
30128: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30129: LD_ADDR_VAR 0 6
30133: PUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL_OW 274
30143: PPUSH
30144: LD_VAR 0 2
30148: PPUSH
30149: LD_INT 0
30151: PPUSH
30152: CALL 27718 0 3
30156: PPUSH
30157: LD_INT 30
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PPUSH
30167: CALL_OW 72
30171: ST_TO_ADDR
// if not factories then
30172: LD_VAR 0 6
30176: NOT
30177: IFFALSE 30181
// exit ;
30179: GO 31147
// for i in factories do
30181: LD_ADDR_VAR 0 8
30185: PUSH
30186: LD_VAR 0 6
30190: PUSH
30191: FOR_IN
30192: IFFALSE 30217
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30194: LD_ADDR_VAR 0 17
30198: PUSH
30199: LD_VAR 0 17
30203: PUSH
30204: LD_VAR 0 8
30208: PPUSH
30209: CALL_OW 478
30213: UNION
30214: ST_TO_ADDR
30215: GO 30191
30217: POP
30218: POP
// if not fac_list then
30219: LD_VAR 0 17
30223: NOT
30224: IFFALSE 30228
// exit ;
30226: GO 31147
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30228: LD_ADDR_VAR 0 5
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: LD_INT 5
30238: PUSH
30239: LD_INT 9
30241: PUSH
30242: LD_INT 10
30244: PUSH
30245: LD_INT 6
30247: PUSH
30248: LD_INT 7
30250: PUSH
30251: LD_INT 11
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 27
30265: PUSH
30266: LD_INT 28
30268: PUSH
30269: LD_INT 26
30271: PUSH
30272: LD_INT 30
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 43
30283: PUSH
30284: LD_INT 44
30286: PUSH
30287: LD_INT 46
30289: PUSH
30290: LD_INT 45
30292: PUSH
30293: LD_INT 47
30295: PUSH
30296: LD_INT 49
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: PUSH
30312: LD_VAR 0 12
30316: ARRAY
30317: ST_TO_ADDR
// list := list isect fac_list ;
30318: LD_ADDR_VAR 0 5
30322: PUSH
30323: LD_VAR 0 5
30327: PUSH
30328: LD_VAR 0 17
30332: ISECT
30333: ST_TO_ADDR
// if not list then
30334: LD_VAR 0 5
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 31147
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30343: LD_VAR 0 12
30347: PUSH
30348: LD_INT 3
30350: EQUAL
30351: PUSH
30352: LD_INT 49
30354: PUSH
30355: LD_VAR 0 5
30359: IN
30360: AND
30361: PUSH
30362: LD_INT 31
30364: PPUSH
30365: LD_VAR 0 16
30369: PPUSH
30370: CALL_OW 321
30374: PUSH
30375: LD_INT 2
30377: EQUAL
30378: AND
30379: IFFALSE 30439
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30381: LD_INT 22
30383: PUSH
30384: LD_VAR 0 16
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 35
30395: PUSH
30396: LD_INT 49
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 91
30405: PUSH
30406: LD_VAR 0 1
30410: PUSH
30411: LD_INT 10
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: PPUSH
30424: CALL_OW 69
30428: NOT
30429: IFFALSE 30439
// weapon := ru_time_lapser ;
30431: LD_ADDR_VAR 0 18
30435: PUSH
30436: LD_INT 49
30438: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30439: LD_VAR 0 12
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: IN
30454: PUSH
30455: LD_INT 11
30457: PUSH
30458: LD_VAR 0 5
30462: IN
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_VAR 0 5
30471: IN
30472: OR
30473: AND
30474: PUSH
30475: LD_INT 6
30477: PPUSH
30478: LD_VAR 0 16
30482: PPUSH
30483: CALL_OW 321
30487: PUSH
30488: LD_INT 2
30490: EQUAL
30491: AND
30492: IFFALSE 30657
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30494: LD_INT 22
30496: PUSH
30497: LD_VAR 0 16
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: LD_INT 35
30511: PUSH
30512: LD_INT 11
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 35
30521: PUSH
30522: LD_INT 30
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 91
30536: PUSH
30537: LD_VAR 0 1
30541: PUSH
30542: LD_INT 18
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: PPUSH
30555: CALL_OW 69
30559: NOT
30560: PUSH
30561: LD_INT 22
30563: PUSH
30564: LD_VAR 0 16
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 30
30578: PUSH
30579: LD_INT 32
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 30
30588: PUSH
30589: LD_INT 33
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 91
30603: PUSH
30604: LD_VAR 0 1
30608: PUSH
30609: LD_INT 12
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: PPUSH
30625: CALL_OW 69
30629: PUSH
30630: LD_INT 2
30632: GREATER
30633: AND
30634: IFFALSE 30657
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30636: LD_ADDR_VAR 0 18
30640: PUSH
30641: LD_INT 11
30643: PUSH
30644: LD_INT 30
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_VAR 0 12
30655: ARRAY
30656: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30657: LD_VAR 0 18
30661: NOT
30662: PUSH
30663: LD_INT 40
30665: PPUSH
30666: LD_VAR 0 16
30670: PPUSH
30671: CALL_OW 321
30675: PUSH
30676: LD_INT 2
30678: EQUAL
30679: AND
30680: PUSH
30681: LD_INT 7
30683: PUSH
30684: LD_VAR 0 5
30688: IN
30689: PUSH
30690: LD_INT 28
30692: PUSH
30693: LD_VAR 0 5
30697: IN
30698: OR
30699: PUSH
30700: LD_INT 45
30702: PUSH
30703: LD_VAR 0 5
30707: IN
30708: OR
30709: AND
30710: IFFALSE 30964
// begin hex := GetHexInfo ( x , y ) ;
30712: LD_ADDR_VAR 0 4
30716: PUSH
30717: LD_VAR 0 10
30721: PPUSH
30722: LD_VAR 0 11
30726: PPUSH
30727: CALL_OW 546
30731: ST_TO_ADDR
// if hex [ 1 ] then
30732: LD_VAR 0 4
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: IFFALSE 30744
// exit ;
30742: GO 31147
// height := hex [ 2 ] ;
30744: LD_ADDR_VAR 0 15
30748: PUSH
30749: LD_VAR 0 4
30753: PUSH
30754: LD_INT 2
30756: ARRAY
30757: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30758: LD_ADDR_VAR 0 14
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 5
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: ST_TO_ADDR
// for i in tmp do
30781: LD_ADDR_VAR 0 8
30785: PUSH
30786: LD_VAR 0 14
30790: PUSH
30791: FOR_IN
30792: IFFALSE 30962
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30794: LD_ADDR_VAR 0 9
30798: PUSH
30799: LD_VAR 0 10
30803: PPUSH
30804: LD_VAR 0 8
30808: PPUSH
30809: LD_INT 5
30811: PPUSH
30812: CALL_OW 272
30816: PUSH
30817: LD_VAR 0 11
30821: PPUSH
30822: LD_VAR 0 8
30826: PPUSH
30827: LD_INT 5
30829: PPUSH
30830: CALL_OW 273
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30839: LD_VAR 0 9
30843: PUSH
30844: LD_INT 1
30846: ARRAY
30847: PPUSH
30848: LD_VAR 0 9
30852: PUSH
30853: LD_INT 2
30855: ARRAY
30856: PPUSH
30857: CALL_OW 488
30861: IFFALSE 30960
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30863: LD_ADDR_VAR 0 4
30867: PUSH
30868: LD_VAR 0 9
30872: PUSH
30873: LD_INT 1
30875: ARRAY
30876: PPUSH
30877: LD_VAR 0 9
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: PPUSH
30886: CALL_OW 546
30890: ST_TO_ADDR
// if hex [ 1 ] then
30891: LD_VAR 0 4
30895: PUSH
30896: LD_INT 1
30898: ARRAY
30899: IFFALSE 30903
// continue ;
30901: GO 30791
// h := hex [ 2 ] ;
30903: LD_ADDR_VAR 0 13
30907: PUSH
30908: LD_VAR 0 4
30912: PUSH
30913: LD_INT 2
30915: ARRAY
30916: ST_TO_ADDR
// if h + 7 < height then
30917: LD_VAR 0 13
30921: PUSH
30922: LD_INT 7
30924: PLUS
30925: PUSH
30926: LD_VAR 0 15
30930: LESS
30931: IFFALSE 30960
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30933: LD_ADDR_VAR 0 18
30937: PUSH
30938: LD_INT 7
30940: PUSH
30941: LD_INT 28
30943: PUSH
30944: LD_INT 45
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: PUSH
30952: LD_VAR 0 12
30956: ARRAY
30957: ST_TO_ADDR
// break ;
30958: GO 30962
// end ; end ; end ;
30960: GO 30791
30962: POP
30963: POP
// end ; if not weapon then
30964: LD_VAR 0 18
30968: NOT
30969: IFFALSE 31029
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30971: LD_ADDR_VAR 0 5
30975: PUSH
30976: LD_VAR 0 5
30980: PUSH
30981: LD_INT 11
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 49
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: DIFF
30995: ST_TO_ADDR
// if not list then
30996: LD_VAR 0 5
31000: NOT
31001: IFFALSE 31005
// exit ;
31003: GO 31147
// weapon := list [ rand ( 1 , list ) ] ;
31005: LD_ADDR_VAR 0 18
31009: PUSH
31010: LD_VAR 0 5
31014: PUSH
31015: LD_INT 1
31017: PPUSH
31018: LD_VAR 0 5
31022: PPUSH
31023: CALL_OW 12
31027: ARRAY
31028: ST_TO_ADDR
// end ; if weapon then
31029: LD_VAR 0 18
31033: IFFALSE 31147
// begin tmp := CostOfWeapon ( weapon ) ;
31035: LD_ADDR_VAR 0 14
31039: PUSH
31040: LD_VAR 0 18
31044: PPUSH
31045: CALL_OW 451
31049: ST_TO_ADDR
// j := GetBase ( tower ) ;
31050: LD_ADDR_VAR 0 9
31054: PUSH
31055: LD_VAR 0 1
31059: PPUSH
31060: CALL_OW 274
31064: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31065: LD_VAR 0 9
31069: PPUSH
31070: LD_INT 1
31072: PPUSH
31073: CALL_OW 275
31077: PUSH
31078: LD_VAR 0 14
31082: PUSH
31083: LD_INT 1
31085: ARRAY
31086: GREATEREQUAL
31087: PUSH
31088: LD_VAR 0 9
31092: PPUSH
31093: LD_INT 2
31095: PPUSH
31096: CALL_OW 275
31100: PUSH
31101: LD_VAR 0 14
31105: PUSH
31106: LD_INT 2
31108: ARRAY
31109: GREATEREQUAL
31110: AND
31111: PUSH
31112: LD_VAR 0 9
31116: PPUSH
31117: LD_INT 3
31119: PPUSH
31120: CALL_OW 275
31124: PUSH
31125: LD_VAR 0 14
31129: PUSH
31130: LD_INT 3
31132: ARRAY
31133: GREATEREQUAL
31134: AND
31135: IFFALSE 31147
// result := weapon ;
31137: LD_ADDR_VAR 0 3
31141: PUSH
31142: LD_VAR 0 18
31146: ST_TO_ADDR
// end ; end ;
31147: LD_VAR 0 3
31151: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31152: LD_INT 0
31154: PPUSH
31155: PPUSH
// result := true ;
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: LD_INT 1
31163: ST_TO_ADDR
// if array1 = array2 then
31164: LD_VAR 0 1
31168: PUSH
31169: LD_VAR 0 2
31173: EQUAL
31174: IFFALSE 31234
// begin for i = 1 to array1 do
31176: LD_ADDR_VAR 0 4
31180: PUSH
31181: DOUBLE
31182: LD_INT 1
31184: DEC
31185: ST_TO_ADDR
31186: LD_VAR 0 1
31190: PUSH
31191: FOR_TO
31192: IFFALSE 31230
// if array1 [ i ] <> array2 [ i ] then
31194: LD_VAR 0 1
31198: PUSH
31199: LD_VAR 0 4
31203: ARRAY
31204: PUSH
31205: LD_VAR 0 2
31209: PUSH
31210: LD_VAR 0 4
31214: ARRAY
31215: NONEQUAL
31216: IFFALSE 31228
// begin result := false ;
31218: LD_ADDR_VAR 0 3
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// break ;
31226: GO 31230
// end ;
31228: GO 31191
31230: POP
31231: POP
// end else
31232: GO 31242
// result := false ;
31234: LD_ADDR_VAR 0 3
31238: PUSH
31239: LD_INT 0
31241: ST_TO_ADDR
// end ;
31242: LD_VAR 0 3
31246: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
// if not array1 or not array2 then
31251: LD_VAR 0 1
31255: NOT
31256: PUSH
31257: LD_VAR 0 2
31261: NOT
31262: OR
31263: IFFALSE 31267
// exit ;
31265: GO 31331
// result := true ;
31267: LD_ADDR_VAR 0 3
31271: PUSH
31272: LD_INT 1
31274: ST_TO_ADDR
// for i = 1 to array1 do
31275: LD_ADDR_VAR 0 4
31279: PUSH
31280: DOUBLE
31281: LD_INT 1
31283: DEC
31284: ST_TO_ADDR
31285: LD_VAR 0 1
31289: PUSH
31290: FOR_TO
31291: IFFALSE 31329
// if array1 [ i ] <> array2 [ i ] then
31293: LD_VAR 0 1
31297: PUSH
31298: LD_VAR 0 4
31302: ARRAY
31303: PUSH
31304: LD_VAR 0 2
31308: PUSH
31309: LD_VAR 0 4
31313: ARRAY
31314: NONEQUAL
31315: IFFALSE 31327
// begin result := false ;
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_INT 0
31324: ST_TO_ADDR
// break ;
31325: GO 31329
// end ;
31327: GO 31290
31329: POP
31330: POP
// end ;
31331: LD_VAR 0 3
31335: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31336: LD_INT 0
31338: PPUSH
31339: PPUSH
31340: PPUSH
// pom := GetBase ( fac ) ;
31341: LD_ADDR_VAR 0 5
31345: PUSH
31346: LD_VAR 0 1
31350: PPUSH
31351: CALL_OW 274
31355: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31356: LD_ADDR_VAR 0 4
31360: PUSH
31361: LD_VAR 0 2
31365: PUSH
31366: LD_INT 1
31368: ARRAY
31369: PPUSH
31370: LD_VAR 0 2
31374: PUSH
31375: LD_INT 2
31377: ARRAY
31378: PPUSH
31379: LD_VAR 0 2
31383: PUSH
31384: LD_INT 3
31386: ARRAY
31387: PPUSH
31388: LD_VAR 0 2
31392: PUSH
31393: LD_INT 4
31395: ARRAY
31396: PPUSH
31397: CALL_OW 449
31401: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_VAR 0 5
31411: PPUSH
31412: LD_INT 1
31414: PPUSH
31415: CALL_OW 275
31419: PUSH
31420: LD_VAR 0 4
31424: PUSH
31425: LD_INT 1
31427: ARRAY
31428: GREATEREQUAL
31429: PUSH
31430: LD_VAR 0 5
31434: PPUSH
31435: LD_INT 2
31437: PPUSH
31438: CALL_OW 275
31442: PUSH
31443: LD_VAR 0 4
31447: PUSH
31448: LD_INT 2
31450: ARRAY
31451: GREATEREQUAL
31452: AND
31453: PUSH
31454: LD_VAR 0 5
31458: PPUSH
31459: LD_INT 3
31461: PPUSH
31462: CALL_OW 275
31466: PUSH
31467: LD_VAR 0 4
31471: PUSH
31472: LD_INT 3
31474: ARRAY
31475: GREATEREQUAL
31476: AND
31477: ST_TO_ADDR
// end ;
31478: LD_VAR 0 3
31482: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31483: LD_INT 0
31485: PPUSH
31486: PPUSH
31487: PPUSH
31488: PPUSH
// pom := GetBase ( building ) ;
31489: LD_ADDR_VAR 0 3
31493: PUSH
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 274
31503: ST_TO_ADDR
// if not pom then
31504: LD_VAR 0 3
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31683
// btype := GetBType ( building ) ;
31513: LD_ADDR_VAR 0 5
31517: PUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 266
31527: ST_TO_ADDR
// if btype = b_armoury then
31528: LD_VAR 0 5
31532: PUSH
31533: LD_INT 4
31535: EQUAL
31536: IFFALSE 31546
// btype := b_barracks ;
31538: LD_ADDR_VAR 0 5
31542: PUSH
31543: LD_INT 5
31545: ST_TO_ADDR
// if btype = b_depot then
31546: LD_VAR 0 5
31550: PUSH
31551: LD_INT 0
31553: EQUAL
31554: IFFALSE 31564
// btype := b_warehouse ;
31556: LD_ADDR_VAR 0 5
31560: PUSH
31561: LD_INT 1
31563: ST_TO_ADDR
// if btype = b_workshop then
31564: LD_VAR 0 5
31568: PUSH
31569: LD_INT 2
31571: EQUAL
31572: IFFALSE 31582
// btype := b_factory ;
31574: LD_ADDR_VAR 0 5
31578: PUSH
31579: LD_INT 3
31581: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31582: LD_ADDR_VAR 0 4
31586: PUSH
31587: LD_VAR 0 5
31591: PPUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 248
31601: PPUSH
31602: CALL_OW 450
31606: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31607: LD_ADDR_VAR 0 2
31611: PUSH
31612: LD_VAR 0 3
31616: PPUSH
31617: LD_INT 1
31619: PPUSH
31620: CALL_OW 275
31624: PUSH
31625: LD_VAR 0 4
31629: PUSH
31630: LD_INT 1
31632: ARRAY
31633: GREATEREQUAL
31634: PUSH
31635: LD_VAR 0 3
31639: PPUSH
31640: LD_INT 2
31642: PPUSH
31643: CALL_OW 275
31647: PUSH
31648: LD_VAR 0 4
31652: PUSH
31653: LD_INT 2
31655: ARRAY
31656: GREATEREQUAL
31657: AND
31658: PUSH
31659: LD_VAR 0 3
31663: PPUSH
31664: LD_INT 3
31666: PPUSH
31667: CALL_OW 275
31671: PUSH
31672: LD_VAR 0 4
31676: PUSH
31677: LD_INT 3
31679: ARRAY
31680: GREATEREQUAL
31681: AND
31682: ST_TO_ADDR
// end ;
31683: LD_VAR 0 2
31687: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31688: LD_INT 0
31690: PPUSH
31691: PPUSH
31692: PPUSH
// pom := GetBase ( building ) ;
31693: LD_ADDR_VAR 0 4
31697: PUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 274
31707: ST_TO_ADDR
// if not pom then
31708: LD_VAR 0 4
31712: NOT
31713: IFFALSE 31717
// exit ;
31715: GO 31818
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31717: LD_ADDR_VAR 0 5
31721: PUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: LD_VAR 0 1
31731: PPUSH
31732: CALL_OW 248
31736: PPUSH
31737: CALL_OW 450
31741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: LD_VAR 0 4
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 275
31759: PUSH
31760: LD_VAR 0 5
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: GREATEREQUAL
31769: PUSH
31770: LD_VAR 0 4
31774: PPUSH
31775: LD_INT 2
31777: PPUSH
31778: CALL_OW 275
31782: PUSH
31783: LD_VAR 0 5
31787: PUSH
31788: LD_INT 2
31790: ARRAY
31791: GREATEREQUAL
31792: AND
31793: PUSH
31794: LD_VAR 0 4
31798: PPUSH
31799: LD_INT 3
31801: PPUSH
31802: CALL_OW 275
31806: PUSH
31807: LD_VAR 0 5
31811: PUSH
31812: LD_INT 3
31814: ARRAY
31815: GREATEREQUAL
31816: AND
31817: ST_TO_ADDR
// end ;
31818: LD_VAR 0 3
31822: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31823: LD_INT 0
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
// result := false ;
31836: LD_ADDR_VAR 0 8
31840: PUSH
31841: LD_INT 0
31843: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31844: LD_VAR 0 5
31848: NOT
31849: PUSH
31850: LD_VAR 0 1
31854: NOT
31855: OR
31856: PUSH
31857: LD_VAR 0 2
31861: NOT
31862: OR
31863: PUSH
31864: LD_VAR 0 3
31868: NOT
31869: OR
31870: IFFALSE 31874
// exit ;
31872: GO 32688
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31874: LD_ADDR_VAR 0 14
31878: PUSH
31879: LD_VAR 0 1
31883: PPUSH
31884: LD_VAR 0 2
31888: PPUSH
31889: LD_VAR 0 3
31893: PPUSH
31894: LD_VAR 0 4
31898: PPUSH
31899: LD_VAR 0 5
31903: PUSH
31904: LD_INT 1
31906: ARRAY
31907: PPUSH
31908: CALL_OW 248
31912: PPUSH
31913: LD_INT 0
31915: PPUSH
31916: CALL 33925 0 6
31920: ST_TO_ADDR
// if not hexes then
31921: LD_VAR 0 14
31925: NOT
31926: IFFALSE 31930
// exit ;
31928: GO 32688
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31930: LD_ADDR_VAR 0 17
31934: PUSH
31935: LD_VAR 0 5
31939: PPUSH
31940: LD_INT 22
31942: PUSH
31943: LD_VAR 0 13
31947: PPUSH
31948: CALL_OW 255
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 30
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 30
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PPUSH
31989: CALL_OW 72
31993: ST_TO_ADDR
// for i = 1 to hexes do
31994: LD_ADDR_VAR 0 9
31998: PUSH
31999: DOUBLE
32000: LD_INT 1
32002: DEC
32003: ST_TO_ADDR
32004: LD_VAR 0 14
32008: PUSH
32009: FOR_TO
32010: IFFALSE 32686
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32012: LD_ADDR_VAR 0 13
32016: PUSH
32017: LD_VAR 0 14
32021: PUSH
32022: LD_VAR 0 9
32026: ARRAY
32027: PUSH
32028: LD_INT 1
32030: ARRAY
32031: PPUSH
32032: LD_VAR 0 14
32036: PUSH
32037: LD_VAR 0 9
32041: ARRAY
32042: PUSH
32043: LD_INT 2
32045: ARRAY
32046: PPUSH
32047: CALL_OW 428
32051: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32052: LD_VAR 0 14
32056: PUSH
32057: LD_VAR 0 9
32061: ARRAY
32062: PUSH
32063: LD_INT 1
32065: ARRAY
32066: PPUSH
32067: LD_VAR 0 14
32071: PUSH
32072: LD_VAR 0 9
32076: ARRAY
32077: PUSH
32078: LD_INT 2
32080: ARRAY
32081: PPUSH
32082: CALL_OW 351
32086: PUSH
32087: LD_VAR 0 14
32091: PUSH
32092: LD_VAR 0 9
32096: ARRAY
32097: PUSH
32098: LD_INT 1
32100: ARRAY
32101: PPUSH
32102: LD_VAR 0 14
32106: PUSH
32107: LD_VAR 0 9
32111: ARRAY
32112: PUSH
32113: LD_INT 2
32115: ARRAY
32116: PPUSH
32117: CALL_OW 488
32121: NOT
32122: OR
32123: PUSH
32124: LD_VAR 0 13
32128: PPUSH
32129: CALL_OW 247
32133: PUSH
32134: LD_INT 3
32136: EQUAL
32137: OR
32138: IFFALSE 32144
// exit ;
32140: POP
32141: POP
32142: GO 32688
// if not tmp then
32144: LD_VAR 0 13
32148: NOT
32149: IFFALSE 32153
// continue ;
32151: GO 32009
// result := true ;
32153: LD_ADDR_VAR 0 8
32157: PUSH
32158: LD_INT 1
32160: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32161: LD_VAR 0 6
32165: PUSH
32166: LD_VAR 0 13
32170: PPUSH
32171: CALL_OW 247
32175: PUSH
32176: LD_INT 2
32178: EQUAL
32179: AND
32180: PUSH
32181: LD_VAR 0 13
32185: PPUSH
32186: CALL_OW 263
32190: PUSH
32191: LD_INT 1
32193: EQUAL
32194: AND
32195: IFFALSE 32359
// begin if IsDrivenBy ( tmp ) then
32197: LD_VAR 0 13
32201: PPUSH
32202: CALL_OW 311
32206: IFFALSE 32210
// continue ;
32208: GO 32009
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32210: LD_VAR 0 6
32214: PPUSH
32215: LD_INT 3
32217: PUSH
32218: LD_INT 60
32220: PUSH
32221: EMPTY
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 55
32233: PUSH
32234: EMPTY
32235: LIST
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PPUSH
32245: CALL_OW 72
32249: IFFALSE 32357
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32251: LD_ADDR_VAR 0 18
32255: PUSH
32256: LD_VAR 0 6
32260: PPUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 60
32266: PUSH
32267: EMPTY
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: LD_INT 55
32279: PUSH
32280: EMPTY
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PPUSH
32291: CALL_OW 72
32295: PUSH
32296: LD_INT 1
32298: ARRAY
32299: ST_TO_ADDR
// if IsInUnit ( driver ) then
32300: LD_VAR 0 18
32304: PPUSH
32305: CALL_OW 310
32309: IFFALSE 32320
// ComExit ( driver ) ;
32311: LD_VAR 0 18
32315: PPUSH
32316: CALL 57109 0 1
// AddComEnterUnit ( driver , tmp ) ;
32320: LD_VAR 0 18
32324: PPUSH
32325: LD_VAR 0 13
32329: PPUSH
32330: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32334: LD_VAR 0 18
32338: PPUSH
32339: LD_VAR 0 7
32343: PPUSH
32344: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32348: LD_VAR 0 18
32352: PPUSH
32353: CALL_OW 181
// end ; continue ;
32357: GO 32009
// end ; if not cleaners or not tmp in cleaners then
32359: LD_VAR 0 6
32363: NOT
32364: PUSH
32365: LD_VAR 0 13
32369: PUSH
32370: LD_VAR 0 6
32374: IN
32375: NOT
32376: OR
32377: IFFALSE 32684
// begin if dep then
32379: LD_VAR 0 17
32383: IFFALSE 32519
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32385: LD_ADDR_VAR 0 16
32389: PUSH
32390: LD_VAR 0 17
32394: PUSH
32395: LD_INT 1
32397: ARRAY
32398: PPUSH
32399: CALL_OW 250
32403: PPUSH
32404: LD_VAR 0 17
32408: PUSH
32409: LD_INT 1
32411: ARRAY
32412: PPUSH
32413: CALL_OW 254
32417: PPUSH
32418: LD_INT 5
32420: PPUSH
32421: CALL_OW 272
32425: PUSH
32426: LD_VAR 0 17
32430: PUSH
32431: LD_INT 1
32433: ARRAY
32434: PPUSH
32435: CALL_OW 251
32439: PPUSH
32440: LD_VAR 0 17
32444: PUSH
32445: LD_INT 1
32447: ARRAY
32448: PPUSH
32449: CALL_OW 254
32453: PPUSH
32454: LD_INT 5
32456: PPUSH
32457: CALL_OW 273
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32466: LD_VAR 0 16
32470: PUSH
32471: LD_INT 1
32473: ARRAY
32474: PPUSH
32475: LD_VAR 0 16
32479: PUSH
32480: LD_INT 2
32482: ARRAY
32483: PPUSH
32484: CALL_OW 488
32488: IFFALSE 32519
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32490: LD_VAR 0 13
32494: PPUSH
32495: LD_VAR 0 16
32499: PUSH
32500: LD_INT 1
32502: ARRAY
32503: PPUSH
32504: LD_VAR 0 16
32508: PUSH
32509: LD_INT 2
32511: ARRAY
32512: PPUSH
32513: CALL_OW 111
// continue ;
32517: GO 32009
// end ; end ; r := GetDir ( tmp ) ;
32519: LD_ADDR_VAR 0 15
32523: PUSH
32524: LD_VAR 0 13
32528: PPUSH
32529: CALL_OW 254
32533: ST_TO_ADDR
// if r = 5 then
32534: LD_VAR 0 15
32538: PUSH
32539: LD_INT 5
32541: EQUAL
32542: IFFALSE 32552
// r := 0 ;
32544: LD_ADDR_VAR 0 15
32548: PUSH
32549: LD_INT 0
32551: ST_TO_ADDR
// for j = r to 5 do
32552: LD_ADDR_VAR 0 10
32556: PUSH
32557: DOUBLE
32558: LD_VAR 0 15
32562: DEC
32563: ST_TO_ADDR
32564: LD_INT 5
32566: PUSH
32567: FOR_TO
32568: IFFALSE 32682
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32570: LD_ADDR_VAR 0 11
32574: PUSH
32575: LD_VAR 0 13
32579: PPUSH
32580: CALL_OW 250
32584: PPUSH
32585: LD_VAR 0 10
32589: PPUSH
32590: LD_INT 2
32592: PPUSH
32593: CALL_OW 272
32597: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32598: LD_ADDR_VAR 0 12
32602: PUSH
32603: LD_VAR 0 13
32607: PPUSH
32608: CALL_OW 251
32612: PPUSH
32613: LD_VAR 0 10
32617: PPUSH
32618: LD_INT 2
32620: PPUSH
32621: CALL_OW 273
32625: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32626: LD_VAR 0 11
32630: PPUSH
32631: LD_VAR 0 12
32635: PPUSH
32636: CALL_OW 488
32640: PUSH
32641: LD_VAR 0 11
32645: PPUSH
32646: LD_VAR 0 12
32650: PPUSH
32651: CALL_OW 428
32655: NOT
32656: AND
32657: IFFALSE 32680
// begin ComMoveXY ( tmp , _x , _y ) ;
32659: LD_VAR 0 13
32663: PPUSH
32664: LD_VAR 0 11
32668: PPUSH
32669: LD_VAR 0 12
32673: PPUSH
32674: CALL_OW 111
// break ;
32678: GO 32682
// end ; end ;
32680: GO 32567
32682: POP
32683: POP
// end ; end ;
32684: GO 32009
32686: POP
32687: POP
// end ;
32688: LD_VAR 0 8
32692: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32693: LD_INT 0
32695: PPUSH
// result := true ;
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: LD_INT 1
32703: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32704: LD_VAR 0 2
32708: PUSH
32709: LD_INT 24
32711: DOUBLE
32712: EQUAL
32713: IFTRUE 32723
32715: LD_INT 33
32717: DOUBLE
32718: EQUAL
32719: IFTRUE 32723
32721: GO 32748
32723: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32724: LD_ADDR_VAR 0 3
32728: PUSH
32729: LD_INT 32
32731: PPUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 321
32741: PUSH
32742: LD_INT 2
32744: EQUAL
32745: ST_TO_ADDR
32746: GO 33068
32748: LD_INT 20
32750: DOUBLE
32751: EQUAL
32752: IFTRUE 32756
32754: GO 32781
32756: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: LD_INT 6
32764: PPUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 321
32774: PUSH
32775: LD_INT 2
32777: EQUAL
32778: ST_TO_ADDR
32779: GO 33068
32781: LD_INT 22
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32795
32787: LD_INT 36
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32795
32793: GO 32820
32795: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32796: LD_ADDR_VAR 0 3
32800: PUSH
32801: LD_INT 15
32803: PPUSH
32804: LD_VAR 0 1
32808: PPUSH
32809: CALL_OW 321
32813: PUSH
32814: LD_INT 2
32816: EQUAL
32817: ST_TO_ADDR
32818: GO 33068
32820: LD_INT 30
32822: DOUBLE
32823: EQUAL
32824: IFTRUE 32828
32826: GO 32853
32828: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32829: LD_ADDR_VAR 0 3
32833: PUSH
32834: LD_INT 20
32836: PPUSH
32837: LD_VAR 0 1
32841: PPUSH
32842: CALL_OW 321
32846: PUSH
32847: LD_INT 2
32849: EQUAL
32850: ST_TO_ADDR
32851: GO 33068
32853: LD_INT 28
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32867
32859: LD_INT 21
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32892
32867: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32868: LD_ADDR_VAR 0 3
32872: PUSH
32873: LD_INT 21
32875: PPUSH
32876: LD_VAR 0 1
32880: PPUSH
32881: CALL_OW 321
32885: PUSH
32886: LD_INT 2
32888: EQUAL
32889: ST_TO_ADDR
32890: GO 33068
32892: LD_INT 16
32894: DOUBLE
32895: EQUAL
32896: IFTRUE 32900
32898: GO 32927
32900: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32901: LD_ADDR_VAR 0 3
32905: PUSH
32906: LD_EXP 89
32910: PPUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 321
32920: PUSH
32921: LD_INT 2
32923: EQUAL
32924: ST_TO_ADDR
32925: GO 33068
32927: LD_INT 19
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32941
32933: LD_INT 23
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32968
32941: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_EXP 88
32951: PPUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 321
32961: PUSH
32962: LD_INT 2
32964: EQUAL
32965: ST_TO_ADDR
32966: GO 33068
32968: LD_INT 17
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 33001
32976: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_INT 39
32984: PPUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 321
32994: PUSH
32995: LD_INT 2
32997: EQUAL
32998: ST_TO_ADDR
32999: GO 33068
33001: LD_INT 18
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33034
33009: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 40
33017: PPUSH
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 321
33027: PUSH
33028: LD_INT 2
33030: EQUAL
33031: ST_TO_ADDR
33032: GO 33068
33034: LD_INT 27
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33067
33042: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33043: LD_ADDR_VAR 0 3
33047: PUSH
33048: LD_INT 35
33050: PPUSH
33051: LD_VAR 0 1
33055: PPUSH
33056: CALL_OW 321
33060: PUSH
33061: LD_INT 2
33063: EQUAL
33064: ST_TO_ADDR
33065: GO 33068
33067: POP
// end ;
33068: LD_VAR 0 3
33072: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
33078: PPUSH
33079: PPUSH
33080: PPUSH
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
// result := false ;
33086: LD_ADDR_VAR 0 6
33090: PUSH
33091: LD_INT 0
33093: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33094: LD_VAR 0 1
33098: NOT
33099: PUSH
33100: LD_VAR 0 1
33104: PPUSH
33105: CALL_OW 266
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: IN
33120: NOT
33121: OR
33122: PUSH
33123: LD_VAR 0 2
33127: NOT
33128: OR
33129: PUSH
33130: LD_VAR 0 5
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: LD_INT 5
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: IN
33161: NOT
33162: OR
33163: PUSH
33164: LD_VAR 0 3
33168: PPUSH
33169: LD_VAR 0 4
33173: PPUSH
33174: CALL_OW 488
33178: NOT
33179: OR
33180: IFFALSE 33184
// exit ;
33182: GO 33920
// side := GetSide ( depot ) ;
33184: LD_ADDR_VAR 0 9
33188: PUSH
33189: LD_VAR 0 1
33193: PPUSH
33194: CALL_OW 255
33198: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33199: LD_VAR 0 9
33203: PPUSH
33204: LD_VAR 0 2
33208: PPUSH
33209: CALL 32693 0 2
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33920
// pom := GetBase ( depot ) ;
33218: LD_ADDR_VAR 0 10
33222: PUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: CALL_OW 274
33232: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33233: LD_ADDR_VAR 0 11
33237: PUSH
33238: LD_VAR 0 2
33242: PPUSH
33243: LD_VAR 0 1
33247: PPUSH
33248: CALL_OW 248
33252: PPUSH
33253: CALL_OW 450
33257: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33258: LD_VAR 0 10
33262: PPUSH
33263: LD_INT 1
33265: PPUSH
33266: CALL_OW 275
33270: PUSH
33271: LD_VAR 0 11
33275: PUSH
33276: LD_INT 1
33278: ARRAY
33279: GREATEREQUAL
33280: PUSH
33281: LD_VAR 0 10
33285: PPUSH
33286: LD_INT 2
33288: PPUSH
33289: CALL_OW 275
33293: PUSH
33294: LD_VAR 0 11
33298: PUSH
33299: LD_INT 2
33301: ARRAY
33302: GREATEREQUAL
33303: AND
33304: PUSH
33305: LD_VAR 0 10
33309: PPUSH
33310: LD_INT 3
33312: PPUSH
33313: CALL_OW 275
33317: PUSH
33318: LD_VAR 0 11
33322: PUSH
33323: LD_INT 3
33325: ARRAY
33326: GREATEREQUAL
33327: AND
33328: NOT
33329: IFFALSE 33333
// exit ;
33331: GO 33920
// if GetBType ( depot ) = b_depot then
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 266
33342: PUSH
33343: LD_INT 0
33345: EQUAL
33346: IFFALSE 33358
// dist := 28 else
33348: LD_ADDR_VAR 0 14
33352: PUSH
33353: LD_INT 28
33355: ST_TO_ADDR
33356: GO 33366
// dist := 36 ;
33358: LD_ADDR_VAR 0 14
33362: PUSH
33363: LD_INT 36
33365: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33366: LD_VAR 0 1
33370: PPUSH
33371: LD_VAR 0 3
33375: PPUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: CALL_OW 297
33385: PUSH
33386: LD_VAR 0 14
33390: GREATER
33391: IFFALSE 33395
// exit ;
33393: GO 33920
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33395: LD_ADDR_VAR 0 12
33399: PUSH
33400: LD_VAR 0 2
33404: PPUSH
33405: LD_VAR 0 3
33409: PPUSH
33410: LD_VAR 0 4
33414: PPUSH
33415: LD_VAR 0 5
33419: PPUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 248
33429: PPUSH
33430: LD_INT 0
33432: PPUSH
33433: CALL 33925 0 6
33437: ST_TO_ADDR
// if not hexes then
33438: LD_VAR 0 12
33442: NOT
33443: IFFALSE 33447
// exit ;
33445: GO 33920
// hex := GetHexInfo ( x , y ) ;
33447: LD_ADDR_VAR 0 15
33451: PUSH
33452: LD_VAR 0 3
33456: PPUSH
33457: LD_VAR 0 4
33461: PPUSH
33462: CALL_OW 546
33466: ST_TO_ADDR
// if hex [ 1 ] then
33467: LD_VAR 0 15
33471: PUSH
33472: LD_INT 1
33474: ARRAY
33475: IFFALSE 33479
// exit ;
33477: GO 33920
// height := hex [ 2 ] ;
33479: LD_ADDR_VAR 0 13
33483: PUSH
33484: LD_VAR 0 15
33488: PUSH
33489: LD_INT 2
33491: ARRAY
33492: ST_TO_ADDR
// for i = 1 to hexes do
33493: LD_ADDR_VAR 0 7
33497: PUSH
33498: DOUBLE
33499: LD_INT 1
33501: DEC
33502: ST_TO_ADDR
33503: LD_VAR 0 12
33507: PUSH
33508: FOR_TO
33509: IFFALSE 33839
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33511: LD_VAR 0 12
33515: PUSH
33516: LD_VAR 0 7
33520: ARRAY
33521: PUSH
33522: LD_INT 1
33524: ARRAY
33525: PPUSH
33526: LD_VAR 0 12
33530: PUSH
33531: LD_VAR 0 7
33535: ARRAY
33536: PUSH
33537: LD_INT 2
33539: ARRAY
33540: PPUSH
33541: CALL_OW 488
33545: NOT
33546: PUSH
33547: LD_VAR 0 12
33551: PUSH
33552: LD_VAR 0 7
33556: ARRAY
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: PPUSH
33562: LD_VAR 0 12
33566: PUSH
33567: LD_VAR 0 7
33571: ARRAY
33572: PUSH
33573: LD_INT 2
33575: ARRAY
33576: PPUSH
33577: CALL_OW 428
33581: PUSH
33582: LD_INT 0
33584: GREATER
33585: OR
33586: PUSH
33587: LD_VAR 0 12
33591: PUSH
33592: LD_VAR 0 7
33596: ARRAY
33597: PUSH
33598: LD_INT 1
33600: ARRAY
33601: PPUSH
33602: LD_VAR 0 12
33606: PUSH
33607: LD_VAR 0 7
33611: ARRAY
33612: PUSH
33613: LD_INT 2
33615: ARRAY
33616: PPUSH
33617: CALL_OW 351
33621: OR
33622: IFFALSE 33628
// exit ;
33624: POP
33625: POP
33626: GO 33920
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33628: LD_ADDR_VAR 0 8
33632: PUSH
33633: LD_VAR 0 12
33637: PUSH
33638: LD_VAR 0 7
33642: ARRAY
33643: PUSH
33644: LD_INT 1
33646: ARRAY
33647: PPUSH
33648: LD_VAR 0 12
33652: PUSH
33653: LD_VAR 0 7
33657: ARRAY
33658: PUSH
33659: LD_INT 2
33661: ARRAY
33662: PPUSH
33663: CALL_OW 546
33667: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33668: LD_VAR 0 8
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PUSH
33677: LD_VAR 0 8
33681: PUSH
33682: LD_INT 2
33684: ARRAY
33685: PUSH
33686: LD_VAR 0 13
33690: PUSH
33691: LD_INT 2
33693: PLUS
33694: GREATER
33695: OR
33696: PUSH
33697: LD_VAR 0 8
33701: PUSH
33702: LD_INT 2
33704: ARRAY
33705: PUSH
33706: LD_VAR 0 13
33710: PUSH
33711: LD_INT 2
33713: MINUS
33714: LESS
33715: OR
33716: PUSH
33717: LD_VAR 0 8
33721: PUSH
33722: LD_INT 3
33724: ARRAY
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 8
33731: PUSH
33732: LD_INT 9
33734: PUSH
33735: LD_INT 10
33737: PUSH
33738: LD_INT 11
33740: PUSH
33741: LD_INT 12
33743: PUSH
33744: LD_INT 13
33746: PUSH
33747: LD_INT 16
33749: PUSH
33750: LD_INT 17
33752: PUSH
33753: LD_INT 18
33755: PUSH
33756: LD_INT 19
33758: PUSH
33759: LD_INT 20
33761: PUSH
33762: LD_INT 21
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: IN
33780: NOT
33781: OR
33782: PUSH
33783: LD_VAR 0 8
33787: PUSH
33788: LD_INT 5
33790: ARRAY
33791: NOT
33792: OR
33793: PUSH
33794: LD_VAR 0 8
33798: PUSH
33799: LD_INT 6
33801: ARRAY
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 7
33811: PUSH
33812: LD_INT 9
33814: PUSH
33815: LD_INT 10
33817: PUSH
33818: LD_INT 11
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: IN
33829: NOT
33830: OR
33831: IFFALSE 33837
// exit ;
33833: POP
33834: POP
33835: GO 33920
// end ;
33837: GO 33508
33839: POP
33840: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33841: LD_VAR 0 9
33845: PPUSH
33846: LD_VAR 0 3
33850: PPUSH
33851: LD_VAR 0 4
33855: PPUSH
33856: LD_INT 20
33858: PPUSH
33859: CALL 25866 0 4
33863: PUSH
33864: LD_INT 4
33866: ARRAY
33867: IFFALSE 33871
// exit ;
33869: GO 33920
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33871: LD_VAR 0 2
33875: PUSH
33876: LD_INT 29
33878: PUSH
33879: LD_INT 30
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: IN
33886: PUSH
33887: LD_VAR 0 3
33891: PPUSH
33892: LD_VAR 0 4
33896: PPUSH
33897: LD_VAR 0 9
33901: PPUSH
33902: CALL_OW 440
33906: NOT
33907: AND
33908: IFFALSE 33912
// exit ;
33910: GO 33920
// result := true ;
33912: LD_ADDR_VAR 0 6
33916: PUSH
33917: LD_INT 1
33919: ST_TO_ADDR
// end ;
33920: LD_VAR 0 6
33924: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33925: LD_INT 0
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
// result = [ ] ;
33985: LD_ADDR_VAR 0 7
33989: PUSH
33990: EMPTY
33991: ST_TO_ADDR
// temp_list = [ ] ;
33992: LD_ADDR_VAR 0 9
33996: PUSH
33997: EMPTY
33998: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33999: LD_VAR 0 4
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 4
34018: PUSH
34019: LD_INT 5
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: IN
34030: NOT
34031: PUSH
34032: LD_VAR 0 1
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: IN
34047: PUSH
34048: LD_VAR 0 5
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: IN
34067: NOT
34068: AND
34069: OR
34070: IFFALSE 34074
// exit ;
34072: GO 52465
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34074: LD_VAR 0 1
34078: PUSH
34079: LD_INT 6
34081: PUSH
34082: LD_INT 7
34084: PUSH
34085: LD_INT 8
34087: PUSH
34088: LD_INT 13
34090: PUSH
34091: LD_INT 12
34093: PUSH
34094: LD_INT 15
34096: PUSH
34097: LD_INT 11
34099: PUSH
34100: LD_INT 14
34102: PUSH
34103: LD_INT 10
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: IN
34117: IFFALSE 34127
// btype = b_lab ;
34119: LD_ADDR_VAR 0 1
34123: PUSH
34124: LD_INT 6
34126: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34127: LD_VAR 0 6
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: IN
34146: NOT
34147: PUSH
34148: LD_VAR 0 1
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 6
34167: PUSH
34168: LD_INT 36
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: LD_INT 5
34176: PUSH
34177: LD_INT 31
34179: PUSH
34180: LD_INT 32
34182: PUSH
34183: LD_INT 33
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: IN
34199: NOT
34200: PUSH
34201: LD_VAR 0 6
34205: PUSH
34206: LD_INT 1
34208: EQUAL
34209: AND
34210: OR
34211: PUSH
34212: LD_VAR 0 1
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: IN
34227: NOT
34228: PUSH
34229: LD_VAR 0 6
34233: PUSH
34234: LD_INT 2
34236: EQUAL
34237: AND
34238: OR
34239: IFFALSE 34249
// mode = 0 ;
34241: LD_ADDR_VAR 0 6
34245: PUSH
34246: LD_INT 0
34248: ST_TO_ADDR
// case mode of 0 :
34249: LD_VAR 0 6
34253: PUSH
34254: LD_INT 0
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 45715
34262: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34263: LD_ADDR_VAR 0 11
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 2
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: LD_INT 3
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34456: LD_ADDR_VAR 0 12
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: NEG
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 3
34613: NEG
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 3
34624: NEG
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34652: LD_ADDR_VAR 0 13
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: NEG
34800: PUSH
34801: LD_INT 3
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 3
34811: NEG
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34851: LD_ADDR_VAR 0 14
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 3
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: LD_INT 3
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: LD_INT 2
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35047: LD_ADDR_VAR 0 15
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: NEG
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 3
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35240: LD_ADDR_VAR 0 16
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 3
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35433: LD_ADDR_VAR 0 17
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35663: LD_ADDR_VAR 0 18
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35893: LD_ADDR_VAR 0 19
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36123: LD_ADDR_VAR 0 20
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: NEG
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36353: LD_ADDR_VAR 0 21
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36583: LD_ADDR_VAR 0 22
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 2
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 2
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 2
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 2
36759: NEG
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 2
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36813: LD_ADDR_VAR 0 23
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: NEG
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 3
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37093: LD_ADDR_VAR 0 24
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37369: LD_ADDR_VAR 0 25
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 3
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37643: LD_ADDR_VAR 0 26
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37919: LD_ADDR_VAR 0 27
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 3
38152: NEG
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: NEG
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38199: LD_ADDR_VAR 0 28
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38481: LD_ADDR_VAR 0 29
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 2
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 3
38725: NEG
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38760: LD_ADDR_VAR 0 30
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 3
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 3
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 3
39003: NEG
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39038: LD_ADDR_VAR 0 31
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: LD_INT 3
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 3
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 3
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39316: LD_ADDR_VAR 0 32
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 3
39559: NEG
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39594: LD_ADDR_VAR 0 33
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: LD_INT 2
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 3
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 3
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39873: LD_ADDR_VAR 0 34
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 3
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 3
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 3
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 3
40118: NEG
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40153: LD_ADDR_VAR 0 35
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40265: LD_ADDR_VAR 0 36
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: LD_INT 2
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40377: LD_ADDR_VAR 0 37
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40489: LD_ADDR_VAR 0 38
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40601: LD_ADDR_VAR 0 39
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40713: LD_ADDR_VAR 0 40
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40825: LD_ADDR_VAR 0 41
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 3
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 3
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 3
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 3
41068: PUSH
41069: LD_INT 3
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 3
41099: NEG
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 3
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 3
41134: NEG
41135: PUSH
41136: LD_INT 3
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41175: LD_ADDR_VAR 0 42
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 3
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 3
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 3
41472: NEG
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41525: LD_ADDR_VAR 0 43
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 3
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 3
41821: NEG
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 3
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41873: LD_ADDR_VAR 0 44
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 3
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: NEG
42183: PUSH
42184: LD_INT 3
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42223: LD_ADDR_VAR 0 45
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 3
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 3
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42573: LD_ADDR_VAR 0 46
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 3
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 3
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 3
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: NEG
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42921: LD_ADDR_VAR 0 47
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43072: LD_ADDR_VAR 0 48
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43219: LD_ADDR_VAR 0 49
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43363: LD_ADDR_VAR 0 50
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43507: LD_ADDR_VAR 0 51
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43654: LD_ADDR_VAR 0 52
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43805: LD_ADDR_VAR 0 53
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44035: LD_ADDR_VAR 0 54
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44265: LD_ADDR_VAR 0 55
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44495: LD_ADDR_VAR 0 56
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44725: LD_ADDR_VAR 0 57
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44955: LD_ADDR_VAR 0 58
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45185: LD_ADDR_VAR 0 59
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45273: LD_ADDR_VAR 0 60
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45361: LD_ADDR_VAR 0 61
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45449: LD_ADDR_VAR 0 62
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45537: LD_ADDR_VAR 0 63
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45625: LD_ADDR_VAR 0 64
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: ST_TO_ADDR
// end ; 1 :
45713: GO 51610
45715: LD_INT 1
45717: DOUBLE
45718: EQUAL
45719: IFTRUE 45723
45721: GO 48346
45723: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45724: LD_ADDR_VAR 0 11
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 3
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45768: LD_ADDR_VAR 0 12
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45809: LD_ADDR_VAR 0 13
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45849: LD_ADDR_VAR 0 14
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45890: LD_ADDR_VAR 0 15
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 3
45908: NEG
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45934: LD_ADDR_VAR 0 16
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 3
45965: NEG
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45980: LD_ADDR_VAR 0 17
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 3
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46024: LD_ADDR_VAR 0 18
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46065: LD_ADDR_VAR 0 19
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46105: LD_ADDR_VAR 0 20
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46146: LD_ADDR_VAR 0 21
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46190: LD_ADDR_VAR 0 22
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: NEG
46222: PUSH
46223: LD_INT 3
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46236: LD_ADDR_VAR 0 23
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 4
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 3
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46280: LD_ADDR_VAR 0 24
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 4
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46321: LD_ADDR_VAR 0 25
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 4
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: LD_INT 4
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46361: LD_ADDR_VAR 0 26
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 4
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46402: LD_ADDR_VAR 0 27
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 4
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46446: LD_ADDR_VAR 0 28
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: LD_INT 4
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 4
46477: NEG
46478: PUSH
46479: LD_INT 3
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46492: LD_ADDR_VAR 0 29
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 4
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 4
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 5
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 5
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 6
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 6
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46647: LD_ADDR_VAR 0 30
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 4
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 4
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 4
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 5
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 5
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 5
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 6
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 6
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46790: LD_ADDR_VAR 0 31
46794: PUSH
46795: LD_INT 3
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 4
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 4
46837: PUSH
46838: LD_INT 4
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: LD_INT 4
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: LD_INT 4
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 5
46867: PUSH
46868: LD_INT 5
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 4
46877: PUSH
46878: LD_INT 5
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 6
46887: PUSH
46888: LD_INT 5
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 6
46897: PUSH
46898: LD_INT 6
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 5
46907: PUSH
46908: LD_INT 6
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46929: LD_ADDR_VAR 0 32
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 4
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 4
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 5
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 5
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 4
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 6
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 6
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 5
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47072: LD_ADDR_VAR 0 33
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 3
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 4
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 4
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 5
47158: NEG
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 5
47169: NEG
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 5
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 6
47192: NEG
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 6
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47227: LD_ADDR_VAR 0 34
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 3
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: NEG
47259: PUSH
47260: LD_INT 3
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: NEG
47271: PUSH
47272: LD_INT 4
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 4
47282: NEG
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 4
47294: NEG
47295: PUSH
47296: LD_INT 4
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: LD_INT 5
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 5
47318: NEG
47319: PUSH
47320: LD_INT 4
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 5
47330: NEG
47331: PUSH
47332: LD_INT 5
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 5
47342: NEG
47343: PUSH
47344: LD_INT 6
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 6
47354: NEG
47355: PUSH
47356: LD_INT 5
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 6
47366: NEG
47367: PUSH
47368: LD_INT 6
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47390: LD_ADDR_VAR 0 41
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47434: LD_ADDR_VAR 0 42
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47475: LD_ADDR_VAR 0 43
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47515: LD_ADDR_VAR 0 44
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 3
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47556: LD_ADDR_VAR 0 45
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47600: LD_ADDR_VAR 0 46
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 3
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47646: LD_ADDR_VAR 0 47
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47679: LD_ADDR_VAR 0 48
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47710: LD_ADDR_VAR 0 49
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47739: LD_ADDR_VAR 0 50
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47768: LD_ADDR_VAR 0 51
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47799: LD_ADDR_VAR 0 52
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47832: LD_ADDR_VAR 0 53
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 3
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47876: LD_ADDR_VAR 0 54
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47917: LD_ADDR_VAR 0 55
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47957: LD_ADDR_VAR 0 56
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47998: LD_ADDR_VAR 0 57
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 3
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48042: LD_ADDR_VAR 0 58
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 3
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48088: LD_ADDR_VAR 0 59
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48132: LD_ADDR_VAR 0 60
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48173: LD_ADDR_VAR 0 61
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48213: LD_ADDR_VAR 0 62
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48254: LD_ADDR_VAR 0 63
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48298: LD_ADDR_VAR 0 64
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: ST_TO_ADDR
// end ; 2 :
48344: GO 51610
48346: LD_INT 2
48348: DOUBLE
48349: EQUAL
48350: IFTRUE 48354
48352: GO 51609
48354: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48355: LD_ADDR_VAR 0 29
48359: PUSH
48360: LD_INT 4
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 4
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 5
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 5
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: LD_INT 4
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 4
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 4
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 4
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 4
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 4
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 5
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 5
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 4
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 5
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 4
48694: NEG
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 4
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 4
48717: NEG
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 4
48740: NEG
48741: PUSH
48742: LD_INT 4
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 4
48752: NEG
48753: PUSH
48754: LD_INT 5
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 4
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: LD_INT 3
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 4
48788: NEG
48789: PUSH
48790: LD_INT 3
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 5
48800: NEG
48801: PUSH
48802: LD_INT 4
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 5
48812: NEG
48813: PUSH
48814: LD_INT 5
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 5
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 5
48836: NEG
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48893: LD_ADDR_VAR 0 30
48897: PUSH
48898: LD_INT 4
48900: PUSH
48901: LD_INT 4
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 4
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 5
48920: PUSH
48921: LD_INT 4
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 5
48930: PUSH
48931: LD_INT 5
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 4
48940: PUSH
48941: LD_INT 5
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 5
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: LD_INT 5
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 4
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 4
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 4
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 4
49083: NEG
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 4
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 4
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 5
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 5
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 5
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: NEG
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: LD_INT 4
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 4
49245: NEG
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 4
49257: NEG
49258: PUSH
49259: LD_INT 4
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 4
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 4
49281: NEG
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 4
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 5
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 4
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 4
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 5
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: LD_INT 5
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49440: LD_ADDR_VAR 0 31
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 4
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 4
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 5
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 5
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 4
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 5
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: NEG
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 4
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 4
49619: NEG
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 4
49642: NEG
49643: PUSH
49644: LD_INT 4
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 4
49654: NEG
49655: PUSH
49656: LD_INT 5
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: LD_INT 4
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: NEG
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 4
49690: NEG
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 5
49702: NEG
49703: PUSH
49704: LD_INT 4
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 5
49714: NEG
49715: PUSH
49716: LD_INT 5
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 3
49726: NEG
49727: PUSH
49728: LD_INT 5
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 5
49738: NEG
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 3
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 4
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 4
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 4
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 5
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 5
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 4
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 5
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49990: LD_ADDR_VAR 0 32
49994: PUSH
49995: LD_INT 4
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 4
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 5
50053: NEG
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 5
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 5
50076: NEG
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: LD_INT 4
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 3
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 4
50159: NEG
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 4
50171: NEG
50172: PUSH
50173: LD_INT 4
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 4
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 4
50195: NEG
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 4
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 5
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 4
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 3
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 4
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 5
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 5
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 4
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 4
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: LD_INT 4
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 4
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 5
50422: PUSH
50423: LD_INT 4
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 5
50432: PUSH
50433: LD_INT 5
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: LD_INT 5
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 4
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 5
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 5
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50537: LD_ADDR_VAR 0 33
50541: PUSH
50542: LD_INT 4
50544: NEG
50545: PUSH
50546: LD_INT 4
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 4
50556: NEG
50557: PUSH
50558: LD_INT 5
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: LD_INT 4
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: LD_INT 3
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 4
50592: NEG
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 5
50604: NEG
50605: PUSH
50606: LD_INT 4
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 5
50616: NEG
50617: PUSH
50618: LD_INT 5
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 5
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 5
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 4
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 4
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 4
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 4
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 4
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 5
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 5
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 4
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 5
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 4
50867: PUSH
50868: LD_INT 3
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 4
50877: PUSH
50878: LD_INT 4
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 4
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 4
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 4
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 4
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 5
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 5
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 4
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 5
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51075: LD_ADDR_VAR 0 34
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 4
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 5
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 4
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 5
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 5
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 4
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 4
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 5
51297: PUSH
51298: LD_INT 4
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 5
51307: PUSH
51308: LD_INT 5
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 4
51317: PUSH
51318: LD_INT 5
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 5
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 4
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 4
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 4
51460: NEG
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 4
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 4
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 5
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 5
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 5
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 3
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// end ; end ;
51607: GO 51610
51609: POP
// case btype of b_depot , b_warehouse :
51610: LD_VAR 0 1
51614: PUSH
51615: LD_INT 0
51617: DOUBLE
51618: EQUAL
51619: IFTRUE 51629
51621: LD_INT 1
51623: DOUBLE
51624: EQUAL
51625: IFTRUE 51629
51627: GO 51830
51629: POP
// case nation of nation_american :
51630: LD_VAR 0 5
51634: PUSH
51635: LD_INT 1
51637: DOUBLE
51638: EQUAL
51639: IFTRUE 51643
51641: GO 51699
51643: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51644: LD_ADDR_VAR 0 9
51648: PUSH
51649: LD_VAR 0 11
51653: PUSH
51654: LD_VAR 0 12
51658: PUSH
51659: LD_VAR 0 13
51663: PUSH
51664: LD_VAR 0 14
51668: PUSH
51669: LD_VAR 0 15
51673: PUSH
51674: LD_VAR 0 16
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: PUSH
51687: LD_VAR 0 4
51691: PUSH
51692: LD_INT 1
51694: PLUS
51695: ARRAY
51696: ST_TO_ADDR
51697: GO 51828
51699: LD_INT 2
51701: DOUBLE
51702: EQUAL
51703: IFTRUE 51707
51705: GO 51763
51707: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51708: LD_ADDR_VAR 0 9
51712: PUSH
51713: LD_VAR 0 17
51717: PUSH
51718: LD_VAR 0 18
51722: PUSH
51723: LD_VAR 0 19
51727: PUSH
51728: LD_VAR 0 20
51732: PUSH
51733: LD_VAR 0 21
51737: PUSH
51738: LD_VAR 0 22
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: PUSH
51751: LD_VAR 0 4
51755: PUSH
51756: LD_INT 1
51758: PLUS
51759: ARRAY
51760: ST_TO_ADDR
51761: GO 51828
51763: LD_INT 3
51765: DOUBLE
51766: EQUAL
51767: IFTRUE 51771
51769: GO 51827
51771: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51772: LD_ADDR_VAR 0 9
51776: PUSH
51777: LD_VAR 0 23
51781: PUSH
51782: LD_VAR 0 24
51786: PUSH
51787: LD_VAR 0 25
51791: PUSH
51792: LD_VAR 0 26
51796: PUSH
51797: LD_VAR 0 27
51801: PUSH
51802: LD_VAR 0 28
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: PUSH
51815: LD_VAR 0 4
51819: PUSH
51820: LD_INT 1
51822: PLUS
51823: ARRAY
51824: ST_TO_ADDR
51825: GO 51828
51827: POP
51828: GO 52383
51830: LD_INT 2
51832: DOUBLE
51833: EQUAL
51834: IFTRUE 51844
51836: LD_INT 3
51838: DOUBLE
51839: EQUAL
51840: IFTRUE 51844
51842: GO 51900
51844: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51845: LD_ADDR_VAR 0 9
51849: PUSH
51850: LD_VAR 0 29
51854: PUSH
51855: LD_VAR 0 30
51859: PUSH
51860: LD_VAR 0 31
51864: PUSH
51865: LD_VAR 0 32
51869: PUSH
51870: LD_VAR 0 33
51874: PUSH
51875: LD_VAR 0 34
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: PUSH
51888: LD_VAR 0 4
51892: PUSH
51893: LD_INT 1
51895: PLUS
51896: ARRAY
51897: ST_TO_ADDR
51898: GO 52383
51900: LD_INT 16
51902: DOUBLE
51903: EQUAL
51904: IFTRUE 51962
51906: LD_INT 17
51908: DOUBLE
51909: EQUAL
51910: IFTRUE 51962
51912: LD_INT 18
51914: DOUBLE
51915: EQUAL
51916: IFTRUE 51962
51918: LD_INT 19
51920: DOUBLE
51921: EQUAL
51922: IFTRUE 51962
51924: LD_INT 22
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51962
51930: LD_INT 20
51932: DOUBLE
51933: EQUAL
51934: IFTRUE 51962
51936: LD_INT 21
51938: DOUBLE
51939: EQUAL
51940: IFTRUE 51962
51942: LD_INT 23
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51962
51948: LD_INT 24
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51962
51954: LD_INT 25
51956: DOUBLE
51957: EQUAL
51958: IFTRUE 51962
51960: GO 52018
51962: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51963: LD_ADDR_VAR 0 9
51967: PUSH
51968: LD_VAR 0 35
51972: PUSH
51973: LD_VAR 0 36
51977: PUSH
51978: LD_VAR 0 37
51982: PUSH
51983: LD_VAR 0 38
51987: PUSH
51988: LD_VAR 0 39
51992: PUSH
51993: LD_VAR 0 40
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: LD_VAR 0 4
52010: PUSH
52011: LD_INT 1
52013: PLUS
52014: ARRAY
52015: ST_TO_ADDR
52016: GO 52383
52018: LD_INT 6
52020: DOUBLE
52021: EQUAL
52022: IFTRUE 52074
52024: LD_INT 7
52026: DOUBLE
52027: EQUAL
52028: IFTRUE 52074
52030: LD_INT 8
52032: DOUBLE
52033: EQUAL
52034: IFTRUE 52074
52036: LD_INT 13
52038: DOUBLE
52039: EQUAL
52040: IFTRUE 52074
52042: LD_INT 12
52044: DOUBLE
52045: EQUAL
52046: IFTRUE 52074
52048: LD_INT 15
52050: DOUBLE
52051: EQUAL
52052: IFTRUE 52074
52054: LD_INT 11
52056: DOUBLE
52057: EQUAL
52058: IFTRUE 52074
52060: LD_INT 14
52062: DOUBLE
52063: EQUAL
52064: IFTRUE 52074
52066: LD_INT 10
52068: DOUBLE
52069: EQUAL
52070: IFTRUE 52074
52072: GO 52130
52074: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52075: LD_ADDR_VAR 0 9
52079: PUSH
52080: LD_VAR 0 41
52084: PUSH
52085: LD_VAR 0 42
52089: PUSH
52090: LD_VAR 0 43
52094: PUSH
52095: LD_VAR 0 44
52099: PUSH
52100: LD_VAR 0 45
52104: PUSH
52105: LD_VAR 0 46
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: PUSH
52118: LD_VAR 0 4
52122: PUSH
52123: LD_INT 1
52125: PLUS
52126: ARRAY
52127: ST_TO_ADDR
52128: GO 52383
52130: LD_INT 36
52132: DOUBLE
52133: EQUAL
52134: IFTRUE 52138
52136: GO 52194
52138: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52139: LD_ADDR_VAR 0 9
52143: PUSH
52144: LD_VAR 0 47
52148: PUSH
52149: LD_VAR 0 48
52153: PUSH
52154: LD_VAR 0 49
52158: PUSH
52159: LD_VAR 0 50
52163: PUSH
52164: LD_VAR 0 51
52168: PUSH
52169: LD_VAR 0 52
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: PUSH
52182: LD_VAR 0 4
52186: PUSH
52187: LD_INT 1
52189: PLUS
52190: ARRAY
52191: ST_TO_ADDR
52192: GO 52383
52194: LD_INT 4
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52220
52200: LD_INT 5
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52220
52206: LD_INT 34
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52220
52212: LD_INT 37
52214: DOUBLE
52215: EQUAL
52216: IFTRUE 52220
52218: GO 52276
52220: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52221: LD_ADDR_VAR 0 9
52225: PUSH
52226: LD_VAR 0 53
52230: PUSH
52231: LD_VAR 0 54
52235: PUSH
52236: LD_VAR 0 55
52240: PUSH
52241: LD_VAR 0 56
52245: PUSH
52246: LD_VAR 0 57
52250: PUSH
52251: LD_VAR 0 58
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: PUSH
52264: LD_VAR 0 4
52268: PUSH
52269: LD_INT 1
52271: PLUS
52272: ARRAY
52273: ST_TO_ADDR
52274: GO 52383
52276: LD_INT 31
52278: DOUBLE
52279: EQUAL
52280: IFTRUE 52326
52282: LD_INT 32
52284: DOUBLE
52285: EQUAL
52286: IFTRUE 52326
52288: LD_INT 33
52290: DOUBLE
52291: EQUAL
52292: IFTRUE 52326
52294: LD_INT 27
52296: DOUBLE
52297: EQUAL
52298: IFTRUE 52326
52300: LD_INT 26
52302: DOUBLE
52303: EQUAL
52304: IFTRUE 52326
52306: LD_INT 28
52308: DOUBLE
52309: EQUAL
52310: IFTRUE 52326
52312: LD_INT 29
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52326
52318: LD_INT 30
52320: DOUBLE
52321: EQUAL
52322: IFTRUE 52326
52324: GO 52382
52326: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52327: LD_ADDR_VAR 0 9
52331: PUSH
52332: LD_VAR 0 59
52336: PUSH
52337: LD_VAR 0 60
52341: PUSH
52342: LD_VAR 0 61
52346: PUSH
52347: LD_VAR 0 62
52351: PUSH
52352: LD_VAR 0 63
52356: PUSH
52357: LD_VAR 0 64
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: PUSH
52370: LD_VAR 0 4
52374: PUSH
52375: LD_INT 1
52377: PLUS
52378: ARRAY
52379: ST_TO_ADDR
52380: GO 52383
52382: POP
// temp_list2 = [ ] ;
52383: LD_ADDR_VAR 0 10
52387: PUSH
52388: EMPTY
52389: ST_TO_ADDR
// for i in temp_list do
52390: LD_ADDR_VAR 0 8
52394: PUSH
52395: LD_VAR 0 9
52399: PUSH
52400: FOR_IN
52401: IFFALSE 52453
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52403: LD_ADDR_VAR 0 10
52407: PUSH
52408: LD_VAR 0 10
52412: PUSH
52413: LD_VAR 0 8
52417: PUSH
52418: LD_INT 1
52420: ARRAY
52421: PUSH
52422: LD_VAR 0 2
52426: PLUS
52427: PUSH
52428: LD_VAR 0 8
52432: PUSH
52433: LD_INT 2
52435: ARRAY
52436: PUSH
52437: LD_VAR 0 3
52441: PLUS
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: ADD
52450: ST_TO_ADDR
52451: GO 52400
52453: POP
52454: POP
// result = temp_list2 ;
52455: LD_ADDR_VAR 0 7
52459: PUSH
52460: LD_VAR 0 10
52464: ST_TO_ADDR
// end ;
52465: LD_VAR 0 7
52469: RET
// export function EnemyInRange ( unit , dist ) ; begin
52470: LD_INT 0
52472: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52473: LD_ADDR_VAR 0 3
52477: PUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: CALL_OW 255
52487: PPUSH
52488: LD_VAR 0 1
52492: PPUSH
52493: CALL_OW 250
52497: PPUSH
52498: LD_VAR 0 1
52502: PPUSH
52503: CALL_OW 251
52507: PPUSH
52508: LD_VAR 0 2
52512: PPUSH
52513: CALL 25866 0 4
52517: PUSH
52518: LD_INT 4
52520: ARRAY
52521: ST_TO_ADDR
// end ;
52522: LD_VAR 0 3
52526: RET
// export function PlayerSeeMe ( unit ) ; begin
52527: LD_INT 0
52529: PPUSH
// result := See ( your_side , unit ) ;
52530: LD_ADDR_VAR 0 2
52534: PUSH
52535: LD_OWVAR 2
52539: PPUSH
52540: LD_VAR 0 1
52544: PPUSH
52545: CALL_OW 292
52549: ST_TO_ADDR
// end ;
52550: LD_VAR 0 2
52554: RET
// export function ReverseDir ( unit ) ; begin
52555: LD_INT 0
52557: PPUSH
// if not unit then
52558: LD_VAR 0 1
52562: NOT
52563: IFFALSE 52567
// exit ;
52565: GO 52590
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52567: LD_ADDR_VAR 0 2
52571: PUSH
52572: LD_VAR 0 1
52576: PPUSH
52577: CALL_OW 254
52581: PUSH
52582: LD_INT 3
52584: PLUS
52585: PUSH
52586: LD_INT 6
52588: MOD
52589: ST_TO_ADDR
// end ;
52590: LD_VAR 0 2
52594: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52595: LD_INT 0
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
52601: PPUSH
// if not hexes then
52602: LD_VAR 0 2
52606: NOT
52607: IFFALSE 52611
// exit ;
52609: GO 52759
// dist := 9999 ;
52611: LD_ADDR_VAR 0 5
52615: PUSH
52616: LD_INT 9999
52618: ST_TO_ADDR
// for i = 1 to hexes do
52619: LD_ADDR_VAR 0 4
52623: PUSH
52624: DOUBLE
52625: LD_INT 1
52627: DEC
52628: ST_TO_ADDR
52629: LD_VAR 0 2
52633: PUSH
52634: FOR_TO
52635: IFFALSE 52747
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52637: LD_VAR 0 1
52641: PPUSH
52642: LD_VAR 0 2
52646: PUSH
52647: LD_VAR 0 4
52651: ARRAY
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 2
52661: PUSH
52662: LD_VAR 0 4
52666: ARRAY
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: PPUSH
52672: CALL_OW 297
52676: PUSH
52677: LD_VAR 0 5
52681: LESS
52682: IFFALSE 52745
// begin hex := hexes [ i ] ;
52684: LD_ADDR_VAR 0 7
52688: PUSH
52689: LD_VAR 0 2
52693: PUSH
52694: LD_VAR 0 4
52698: ARRAY
52699: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52700: LD_ADDR_VAR 0 5
52704: PUSH
52705: LD_VAR 0 1
52709: PPUSH
52710: LD_VAR 0 2
52714: PUSH
52715: LD_VAR 0 4
52719: ARRAY
52720: PUSH
52721: LD_INT 1
52723: ARRAY
52724: PPUSH
52725: LD_VAR 0 2
52729: PUSH
52730: LD_VAR 0 4
52734: ARRAY
52735: PUSH
52736: LD_INT 2
52738: ARRAY
52739: PPUSH
52740: CALL_OW 297
52744: ST_TO_ADDR
// end ; end ;
52745: GO 52634
52747: POP
52748: POP
// result := hex ;
52749: LD_ADDR_VAR 0 3
52753: PUSH
52754: LD_VAR 0 7
52758: ST_TO_ADDR
// end ;
52759: LD_VAR 0 3
52763: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52764: LD_INT 0
52766: PPUSH
52767: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52768: LD_VAR 0 1
52772: NOT
52773: PUSH
52774: LD_VAR 0 1
52778: PUSH
52779: LD_INT 21
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 23
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PPUSH
52803: CALL_OW 69
52807: IN
52808: NOT
52809: OR
52810: IFFALSE 52814
// exit ;
52812: GO 52861
// for i = 1 to 3 do
52814: LD_ADDR_VAR 0 3
52818: PUSH
52819: DOUBLE
52820: LD_INT 1
52822: DEC
52823: ST_TO_ADDR
52824: LD_INT 3
52826: PUSH
52827: FOR_TO
52828: IFFALSE 52859
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL_OW 250
52839: PPUSH
52840: LD_VAR 0 1
52844: PPUSH
52845: CALL_OW 251
52849: PPUSH
52850: LD_INT 1
52852: PPUSH
52853: CALL_OW 453
52857: GO 52827
52859: POP
52860: POP
// end ;
52861: LD_VAR 0 2
52865: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52866: LD_INT 0
52868: PPUSH
52869: PPUSH
52870: PPUSH
52871: PPUSH
52872: PPUSH
52873: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52874: LD_VAR 0 1
52878: NOT
52879: PUSH
52880: LD_VAR 0 2
52884: NOT
52885: OR
52886: PUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: CALL_OW 314
52896: OR
52897: IFFALSE 52901
// exit ;
52899: GO 53342
// x := GetX ( enemy_unit ) ;
52901: LD_ADDR_VAR 0 7
52905: PUSH
52906: LD_VAR 0 2
52910: PPUSH
52911: CALL_OW 250
52915: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52916: LD_ADDR_VAR 0 8
52920: PUSH
52921: LD_VAR 0 2
52925: PPUSH
52926: CALL_OW 251
52930: ST_TO_ADDR
// if not x or not y then
52931: LD_VAR 0 7
52935: NOT
52936: PUSH
52937: LD_VAR 0 8
52941: NOT
52942: OR
52943: IFFALSE 52947
// exit ;
52945: GO 53342
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52947: LD_ADDR_VAR 0 6
52951: PUSH
52952: LD_VAR 0 7
52956: PPUSH
52957: LD_INT 0
52959: PPUSH
52960: LD_INT 4
52962: PPUSH
52963: CALL_OW 272
52967: PUSH
52968: LD_VAR 0 8
52972: PPUSH
52973: LD_INT 0
52975: PPUSH
52976: LD_INT 4
52978: PPUSH
52979: CALL_OW 273
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_VAR 0 7
52992: PPUSH
52993: LD_INT 1
52995: PPUSH
52996: LD_INT 4
52998: PPUSH
52999: CALL_OW 272
53003: PUSH
53004: LD_VAR 0 8
53008: PPUSH
53009: LD_INT 1
53011: PPUSH
53012: LD_INT 4
53014: PPUSH
53015: CALL_OW 273
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_VAR 0 7
53028: PPUSH
53029: LD_INT 2
53031: PPUSH
53032: LD_INT 4
53034: PPUSH
53035: CALL_OW 272
53039: PUSH
53040: LD_VAR 0 8
53044: PPUSH
53045: LD_INT 2
53047: PPUSH
53048: LD_INT 4
53050: PPUSH
53051: CALL_OW 273
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_VAR 0 7
53064: PPUSH
53065: LD_INT 3
53067: PPUSH
53068: LD_INT 4
53070: PPUSH
53071: CALL_OW 272
53075: PUSH
53076: LD_VAR 0 8
53080: PPUSH
53081: LD_INT 3
53083: PPUSH
53084: LD_INT 4
53086: PPUSH
53087: CALL_OW 273
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_VAR 0 7
53100: PPUSH
53101: LD_INT 4
53103: PPUSH
53104: LD_INT 4
53106: PPUSH
53107: CALL_OW 272
53111: PUSH
53112: LD_VAR 0 8
53116: PPUSH
53117: LD_INT 4
53119: PPUSH
53120: LD_INT 4
53122: PPUSH
53123: CALL_OW 273
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_VAR 0 7
53136: PPUSH
53137: LD_INT 5
53139: PPUSH
53140: LD_INT 4
53142: PPUSH
53143: CALL_OW 272
53147: PUSH
53148: LD_VAR 0 8
53152: PPUSH
53153: LD_INT 5
53155: PPUSH
53156: LD_INT 4
53158: PPUSH
53159: CALL_OW 273
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// for i = tmp downto 1 do
53176: LD_ADDR_VAR 0 4
53180: PUSH
53181: DOUBLE
53182: LD_VAR 0 6
53186: INC
53187: ST_TO_ADDR
53188: LD_INT 1
53190: PUSH
53191: FOR_DOWNTO
53192: IFFALSE 53293
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53194: LD_VAR 0 6
53198: PUSH
53199: LD_VAR 0 4
53203: ARRAY
53204: PUSH
53205: LD_INT 1
53207: ARRAY
53208: PPUSH
53209: LD_VAR 0 6
53213: PUSH
53214: LD_VAR 0 4
53218: ARRAY
53219: PUSH
53220: LD_INT 2
53222: ARRAY
53223: PPUSH
53224: CALL_OW 488
53228: NOT
53229: PUSH
53230: LD_VAR 0 6
53234: PUSH
53235: LD_VAR 0 4
53239: ARRAY
53240: PUSH
53241: LD_INT 1
53243: ARRAY
53244: PPUSH
53245: LD_VAR 0 6
53249: PUSH
53250: LD_VAR 0 4
53254: ARRAY
53255: PUSH
53256: LD_INT 2
53258: ARRAY
53259: PPUSH
53260: CALL_OW 428
53264: PUSH
53265: LD_INT 0
53267: NONEQUAL
53268: OR
53269: IFFALSE 53291
// tmp := Delete ( tmp , i ) ;
53271: LD_ADDR_VAR 0 6
53275: PUSH
53276: LD_VAR 0 6
53280: PPUSH
53281: LD_VAR 0 4
53285: PPUSH
53286: CALL_OW 3
53290: ST_TO_ADDR
53291: GO 53191
53293: POP
53294: POP
// j := GetClosestHex ( unit , tmp ) ;
53295: LD_ADDR_VAR 0 5
53299: PUSH
53300: LD_VAR 0 1
53304: PPUSH
53305: LD_VAR 0 6
53309: PPUSH
53310: CALL 52595 0 2
53314: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53315: LD_VAR 0 1
53319: PPUSH
53320: LD_VAR 0 5
53324: PUSH
53325: LD_INT 1
53327: ARRAY
53328: PPUSH
53329: LD_VAR 0 5
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PPUSH
53338: CALL_OW 111
// end ;
53342: LD_VAR 0 3
53346: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53347: LD_INT 0
53349: PPUSH
53350: PPUSH
53351: PPUSH
// uc_side = 0 ;
53352: LD_ADDR_OWVAR 20
53356: PUSH
53357: LD_INT 0
53359: ST_TO_ADDR
// uc_nation = 0 ;
53360: LD_ADDR_OWVAR 21
53364: PUSH
53365: LD_INT 0
53367: ST_TO_ADDR
// InitHc_All ( ) ;
53368: CALL_OW 584
// InitVc ;
53372: CALL_OW 20
// if mastodonts then
53376: LD_VAR 0 6
53380: IFFALSE 53447
// for i = 1 to mastodonts do
53382: LD_ADDR_VAR 0 11
53386: PUSH
53387: DOUBLE
53388: LD_INT 1
53390: DEC
53391: ST_TO_ADDR
53392: LD_VAR 0 6
53396: PUSH
53397: FOR_TO
53398: IFFALSE 53445
// begin vc_chassis := 31 ;
53400: LD_ADDR_OWVAR 37
53404: PUSH
53405: LD_INT 31
53407: ST_TO_ADDR
// vc_control := control_rider ;
53408: LD_ADDR_OWVAR 38
53412: PUSH
53413: LD_INT 4
53415: ST_TO_ADDR
// animal := CreateVehicle ;
53416: LD_ADDR_VAR 0 12
53420: PUSH
53421: CALL_OW 45
53425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53426: LD_VAR 0 12
53430: PPUSH
53431: LD_VAR 0 8
53435: PPUSH
53436: LD_INT 0
53438: PPUSH
53439: CALL 55635 0 3
// end ;
53443: GO 53397
53445: POP
53446: POP
// if horses then
53447: LD_VAR 0 5
53451: IFFALSE 53518
// for i = 1 to horses do
53453: LD_ADDR_VAR 0 11
53457: PUSH
53458: DOUBLE
53459: LD_INT 1
53461: DEC
53462: ST_TO_ADDR
53463: LD_VAR 0 5
53467: PUSH
53468: FOR_TO
53469: IFFALSE 53516
// begin hc_class := 21 ;
53471: LD_ADDR_OWVAR 28
53475: PUSH
53476: LD_INT 21
53478: ST_TO_ADDR
// hc_gallery :=  ;
53479: LD_ADDR_OWVAR 33
53483: PUSH
53484: LD_STRING 
53486: ST_TO_ADDR
// animal := CreateHuman ;
53487: LD_ADDR_VAR 0 12
53491: PUSH
53492: CALL_OW 44
53496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53497: LD_VAR 0 12
53501: PPUSH
53502: LD_VAR 0 8
53506: PPUSH
53507: LD_INT 0
53509: PPUSH
53510: CALL 55635 0 3
// end ;
53514: GO 53468
53516: POP
53517: POP
// if birds then
53518: LD_VAR 0 1
53522: IFFALSE 53589
// for i = 1 to birds do
53524: LD_ADDR_VAR 0 11
53528: PUSH
53529: DOUBLE
53530: LD_INT 1
53532: DEC
53533: ST_TO_ADDR
53534: LD_VAR 0 1
53538: PUSH
53539: FOR_TO
53540: IFFALSE 53587
// begin hc_class = 18 ;
53542: LD_ADDR_OWVAR 28
53546: PUSH
53547: LD_INT 18
53549: ST_TO_ADDR
// hc_gallery =  ;
53550: LD_ADDR_OWVAR 33
53554: PUSH
53555: LD_STRING 
53557: ST_TO_ADDR
// animal := CreateHuman ;
53558: LD_ADDR_VAR 0 12
53562: PUSH
53563: CALL_OW 44
53567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53568: LD_VAR 0 12
53572: PPUSH
53573: LD_VAR 0 8
53577: PPUSH
53578: LD_INT 0
53580: PPUSH
53581: CALL 55635 0 3
// end ;
53585: GO 53539
53587: POP
53588: POP
// if tigers then
53589: LD_VAR 0 2
53593: IFFALSE 53677
// for i = 1 to tigers do
53595: LD_ADDR_VAR 0 11
53599: PUSH
53600: DOUBLE
53601: LD_INT 1
53603: DEC
53604: ST_TO_ADDR
53605: LD_VAR 0 2
53609: PUSH
53610: FOR_TO
53611: IFFALSE 53675
// begin hc_class = class_tiger ;
53613: LD_ADDR_OWVAR 28
53617: PUSH
53618: LD_INT 14
53620: ST_TO_ADDR
// hc_gallery =  ;
53621: LD_ADDR_OWVAR 33
53625: PUSH
53626: LD_STRING 
53628: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53629: LD_ADDR_OWVAR 35
53633: PUSH
53634: LD_INT 7
53636: NEG
53637: PPUSH
53638: LD_INT 7
53640: PPUSH
53641: CALL_OW 12
53645: ST_TO_ADDR
// animal := CreateHuman ;
53646: LD_ADDR_VAR 0 12
53650: PUSH
53651: CALL_OW 44
53655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53656: LD_VAR 0 12
53660: PPUSH
53661: LD_VAR 0 8
53665: PPUSH
53666: LD_INT 0
53668: PPUSH
53669: CALL 55635 0 3
// end ;
53673: GO 53610
53675: POP
53676: POP
// if apemans then
53677: LD_VAR 0 3
53681: IFFALSE 53804
// for i = 1 to apemans do
53683: LD_ADDR_VAR 0 11
53687: PUSH
53688: DOUBLE
53689: LD_INT 1
53691: DEC
53692: ST_TO_ADDR
53693: LD_VAR 0 3
53697: PUSH
53698: FOR_TO
53699: IFFALSE 53802
// begin hc_class = class_apeman ;
53701: LD_ADDR_OWVAR 28
53705: PUSH
53706: LD_INT 12
53708: ST_TO_ADDR
// hc_gallery =  ;
53709: LD_ADDR_OWVAR 33
53713: PUSH
53714: LD_STRING 
53716: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53717: LD_ADDR_OWVAR 35
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PPUSH
53726: LD_INT 2
53728: PPUSH
53729: CALL_OW 12
53733: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53734: LD_ADDR_OWVAR 31
53738: PUSH
53739: LD_INT 1
53741: PPUSH
53742: LD_INT 3
53744: PPUSH
53745: CALL_OW 12
53749: PUSH
53750: LD_INT 1
53752: PPUSH
53753: LD_INT 3
53755: PPUSH
53756: CALL_OW 12
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// animal := CreateHuman ;
53773: LD_ADDR_VAR 0 12
53777: PUSH
53778: CALL_OW 44
53782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53783: LD_VAR 0 12
53787: PPUSH
53788: LD_VAR 0 8
53792: PPUSH
53793: LD_INT 0
53795: PPUSH
53796: CALL 55635 0 3
// end ;
53800: GO 53698
53802: POP
53803: POP
// if enchidnas then
53804: LD_VAR 0 4
53808: IFFALSE 53875
// for i = 1 to enchidnas do
53810: LD_ADDR_VAR 0 11
53814: PUSH
53815: DOUBLE
53816: LD_INT 1
53818: DEC
53819: ST_TO_ADDR
53820: LD_VAR 0 4
53824: PUSH
53825: FOR_TO
53826: IFFALSE 53873
// begin hc_class = 13 ;
53828: LD_ADDR_OWVAR 28
53832: PUSH
53833: LD_INT 13
53835: ST_TO_ADDR
// hc_gallery =  ;
53836: LD_ADDR_OWVAR 33
53840: PUSH
53841: LD_STRING 
53843: ST_TO_ADDR
// animal := CreateHuman ;
53844: LD_ADDR_VAR 0 12
53848: PUSH
53849: CALL_OW 44
53853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53854: LD_VAR 0 12
53858: PPUSH
53859: LD_VAR 0 8
53863: PPUSH
53864: LD_INT 0
53866: PPUSH
53867: CALL 55635 0 3
// end ;
53871: GO 53825
53873: POP
53874: POP
// if fishes then
53875: LD_VAR 0 7
53879: IFFALSE 53946
// for i = 1 to fishes do
53881: LD_ADDR_VAR 0 11
53885: PUSH
53886: DOUBLE
53887: LD_INT 1
53889: DEC
53890: ST_TO_ADDR
53891: LD_VAR 0 7
53895: PUSH
53896: FOR_TO
53897: IFFALSE 53944
// begin hc_class = 20 ;
53899: LD_ADDR_OWVAR 28
53903: PUSH
53904: LD_INT 20
53906: ST_TO_ADDR
// hc_gallery =  ;
53907: LD_ADDR_OWVAR 33
53911: PUSH
53912: LD_STRING 
53914: ST_TO_ADDR
// animal := CreateHuman ;
53915: LD_ADDR_VAR 0 12
53919: PUSH
53920: CALL_OW 44
53924: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53925: LD_VAR 0 12
53929: PPUSH
53930: LD_VAR 0 9
53934: PPUSH
53935: LD_INT 0
53937: PPUSH
53938: CALL 55635 0 3
// end ;
53942: GO 53896
53944: POP
53945: POP
// end ;
53946: LD_VAR 0 10
53950: RET
// export function WantHeal ( sci , unit ) ; begin
53951: LD_INT 0
53953: PPUSH
// if GetTaskList ( sci ) > 0 then
53954: LD_VAR 0 1
53958: PPUSH
53959: CALL_OW 437
53963: PUSH
53964: LD_INT 0
53966: GREATER
53967: IFFALSE 54037
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53969: LD_VAR 0 1
53973: PPUSH
53974: CALL_OW 437
53978: PUSH
53979: LD_INT 1
53981: ARRAY
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: PUSH
53987: LD_STRING l
53989: EQUAL
53990: PUSH
53991: LD_VAR 0 1
53995: PPUSH
53996: CALL_OW 437
54000: PUSH
54001: LD_INT 1
54003: ARRAY
54004: PUSH
54005: LD_INT 4
54007: ARRAY
54008: PUSH
54009: LD_VAR 0 2
54013: EQUAL
54014: AND
54015: IFFALSE 54027
// result := true else
54017: LD_ADDR_VAR 0 3
54021: PUSH
54022: LD_INT 1
54024: ST_TO_ADDR
54025: GO 54035
// result := false ;
54027: LD_ADDR_VAR 0 3
54031: PUSH
54032: LD_INT 0
54034: ST_TO_ADDR
// end else
54035: GO 54045
// result := false ;
54037: LD_ADDR_VAR 0 3
54041: PUSH
54042: LD_INT 0
54044: ST_TO_ADDR
// end ;
54045: LD_VAR 0 3
54049: RET
// export function HealTarget ( sci ) ; begin
54050: LD_INT 0
54052: PPUSH
// if not sci then
54053: LD_VAR 0 1
54057: NOT
54058: IFFALSE 54062
// exit ;
54060: GO 54127
// result := 0 ;
54062: LD_ADDR_VAR 0 2
54066: PUSH
54067: LD_INT 0
54069: ST_TO_ADDR
// if GetTaskList ( sci ) then
54070: LD_VAR 0 1
54074: PPUSH
54075: CALL_OW 437
54079: IFFALSE 54127
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54081: LD_VAR 0 1
54085: PPUSH
54086: CALL_OW 437
54090: PUSH
54091: LD_INT 1
54093: ARRAY
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: PUSH
54099: LD_STRING l
54101: EQUAL
54102: IFFALSE 54127
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54104: LD_ADDR_VAR 0 2
54108: PUSH
54109: LD_VAR 0 1
54113: PPUSH
54114: CALL_OW 437
54118: PUSH
54119: LD_INT 1
54121: ARRAY
54122: PUSH
54123: LD_INT 4
54125: ARRAY
54126: ST_TO_ADDR
// end ;
54127: LD_VAR 0 2
54131: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54132: LD_INT 0
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
// if not base_units then
54138: LD_VAR 0 1
54142: NOT
54143: IFFALSE 54147
// exit ;
54145: GO 54234
// result := false ;
54147: LD_ADDR_VAR 0 2
54151: PUSH
54152: LD_INT 0
54154: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54155: LD_ADDR_VAR 0 5
54159: PUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: LD_INT 21
54167: PUSH
54168: LD_INT 3
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PPUSH
54175: CALL_OW 72
54179: ST_TO_ADDR
// if not tmp then
54180: LD_VAR 0 5
54184: NOT
54185: IFFALSE 54189
// exit ;
54187: GO 54234
// for i in tmp do
54189: LD_ADDR_VAR 0 3
54193: PUSH
54194: LD_VAR 0 5
54198: PUSH
54199: FOR_IN
54200: IFFALSE 54232
// begin result := EnemyInRange ( i , 22 ) ;
54202: LD_ADDR_VAR 0 2
54206: PUSH
54207: LD_VAR 0 3
54211: PPUSH
54212: LD_INT 22
54214: PPUSH
54215: CALL 52470 0 2
54219: ST_TO_ADDR
// if result then
54220: LD_VAR 0 2
54224: IFFALSE 54230
// exit ;
54226: POP
54227: POP
54228: GO 54234
// end ;
54230: GO 54199
54232: POP
54233: POP
// end ;
54234: LD_VAR 0 2
54238: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54239: LD_INT 0
54241: PPUSH
54242: PPUSH
// if not units then
54243: LD_VAR 0 1
54247: NOT
54248: IFFALSE 54252
// exit ;
54250: GO 54322
// result := [ ] ;
54252: LD_ADDR_VAR 0 3
54256: PUSH
54257: EMPTY
54258: ST_TO_ADDR
// for i in units do
54259: LD_ADDR_VAR 0 4
54263: PUSH
54264: LD_VAR 0 1
54268: PUSH
54269: FOR_IN
54270: IFFALSE 54320
// if GetTag ( i ) = tag then
54272: LD_VAR 0 4
54276: PPUSH
54277: CALL_OW 110
54281: PUSH
54282: LD_VAR 0 2
54286: EQUAL
54287: IFFALSE 54318
// result := Replace ( result , result + 1 , i ) ;
54289: LD_ADDR_VAR 0 3
54293: PUSH
54294: LD_VAR 0 3
54298: PPUSH
54299: LD_VAR 0 3
54303: PUSH
54304: LD_INT 1
54306: PLUS
54307: PPUSH
54308: LD_VAR 0 4
54312: PPUSH
54313: CALL_OW 1
54317: ST_TO_ADDR
54318: GO 54269
54320: POP
54321: POP
// end ;
54322: LD_VAR 0 3
54326: RET
// export function IsDriver ( un ) ; begin
54327: LD_INT 0
54329: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54330: LD_ADDR_VAR 0 2
54334: PUSH
54335: LD_VAR 0 1
54339: PUSH
54340: LD_INT 55
54342: PUSH
54343: EMPTY
54344: LIST
54345: PPUSH
54346: CALL_OW 69
54350: IN
54351: ST_TO_ADDR
// end ;
54352: LD_VAR 0 2
54356: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54357: LD_INT 0
54359: PPUSH
54360: PPUSH
// list := [ ] ;
54361: LD_ADDR_VAR 0 5
54365: PUSH
54366: EMPTY
54367: ST_TO_ADDR
// case d of 0 :
54368: LD_VAR 0 3
54372: PUSH
54373: LD_INT 0
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54381
54379: GO 54514
54381: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54382: LD_ADDR_VAR 0 5
54386: PUSH
54387: LD_VAR 0 1
54391: PUSH
54392: LD_INT 4
54394: MINUS
54395: PUSH
54396: LD_VAR 0 2
54400: PUSH
54401: LD_INT 4
54403: MINUS
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: PUSH
54413: LD_VAR 0 1
54417: PUSH
54418: LD_INT 3
54420: MINUS
54421: PUSH
54422: LD_VAR 0 2
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: PUSH
54435: LD_VAR 0 1
54439: PUSH
54440: LD_INT 4
54442: PLUS
54443: PUSH
54444: LD_VAR 0 2
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: PUSH
54457: LD_VAR 0 1
54461: PUSH
54462: LD_INT 3
54464: PLUS
54465: PUSH
54466: LD_VAR 0 2
54470: PUSH
54471: LD_INT 3
54473: PLUS
54474: PUSH
54475: LD_INT 5
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: PUSH
54483: LD_VAR 0 1
54487: PUSH
54488: LD_VAR 0 2
54492: PUSH
54493: LD_INT 4
54495: PLUS
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// end ; 1 :
54512: GO 55212
54514: LD_INT 1
54516: DOUBLE
54517: EQUAL
54518: IFTRUE 54522
54520: GO 54655
54522: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54523: LD_ADDR_VAR 0 5
54527: PUSH
54528: LD_VAR 0 1
54532: PUSH
54533: LD_VAR 0 2
54537: PUSH
54538: LD_INT 4
54540: MINUS
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_VAR 0 1
54554: PUSH
54555: LD_INT 3
54557: MINUS
54558: PUSH
54559: LD_VAR 0 2
54563: PUSH
54564: LD_INT 3
54566: MINUS
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: LIST
54575: PUSH
54576: LD_VAR 0 1
54580: PUSH
54581: LD_INT 4
54583: MINUS
54584: PUSH
54585: LD_VAR 0 2
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: PUSH
54598: LD_VAR 0 1
54602: PUSH
54603: LD_VAR 0 2
54607: PUSH
54608: LD_INT 3
54610: PLUS
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: PUSH
54620: LD_VAR 0 1
54624: PUSH
54625: LD_INT 4
54627: PLUS
54628: PUSH
54629: LD_VAR 0 2
54633: PUSH
54634: LD_INT 4
54636: PLUS
54637: PUSH
54638: LD_INT 5
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// end ; 2 :
54653: GO 55212
54655: LD_INT 2
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54663
54661: GO 54792
54663: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54664: LD_ADDR_VAR 0 5
54668: PUSH
54669: LD_VAR 0 1
54673: PUSH
54674: LD_VAR 0 2
54678: PUSH
54679: LD_INT 3
54681: MINUS
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: PUSH
54691: LD_VAR 0 1
54695: PUSH
54696: LD_INT 4
54698: PLUS
54699: PUSH
54700: LD_VAR 0 2
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: PUSH
54713: LD_VAR 0 1
54717: PUSH
54718: LD_VAR 0 2
54722: PUSH
54723: LD_INT 4
54725: PLUS
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_INT 3
54742: MINUS
54743: PUSH
54744: LD_VAR 0 2
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: PUSH
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 4
54764: MINUS
54765: PUSH
54766: LD_VAR 0 2
54770: PUSH
54771: LD_INT 4
54773: MINUS
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// end ; 3 :
54790: GO 55212
54792: LD_INT 3
54794: DOUBLE
54795: EQUAL
54796: IFTRUE 54800
54798: GO 54933
54800: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54801: LD_ADDR_VAR 0 5
54805: PUSH
54806: LD_VAR 0 1
54810: PUSH
54811: LD_INT 3
54813: PLUS
54814: PUSH
54815: LD_VAR 0 2
54819: PUSH
54820: LD_INT 4
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: PUSH
54828: LD_VAR 0 1
54832: PUSH
54833: LD_INT 4
54835: PLUS
54836: PUSH
54837: LD_VAR 0 2
54841: PUSH
54842: LD_INT 4
54844: PLUS
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: PUSH
54854: LD_VAR 0 1
54858: PUSH
54859: LD_INT 4
54861: MINUS
54862: PUSH
54863: LD_VAR 0 2
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: PUSH
54876: LD_VAR 0 1
54880: PUSH
54881: LD_VAR 0 2
54885: PUSH
54886: LD_INT 4
54888: MINUS
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: LD_VAR 0 1
54902: PUSH
54903: LD_INT 3
54905: MINUS
54906: PUSH
54907: LD_VAR 0 2
54911: PUSH
54912: LD_INT 3
54914: MINUS
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// end ; 4 :
54931: GO 55212
54933: LD_INT 4
54935: DOUBLE
54936: EQUAL
54937: IFTRUE 54941
54939: GO 55074
54941: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54942: LD_ADDR_VAR 0 5
54946: PUSH
54947: LD_VAR 0 1
54951: PUSH
54952: LD_VAR 0 2
54956: PUSH
54957: LD_INT 4
54959: PLUS
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: PUSH
54969: LD_VAR 0 1
54973: PUSH
54974: LD_INT 3
54976: PLUS
54977: PUSH
54978: LD_VAR 0 2
54982: PUSH
54983: LD_INT 3
54985: PLUS
54986: PUSH
54987: LD_INT 5
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: PUSH
54995: LD_VAR 0 1
54999: PUSH
55000: LD_INT 4
55002: PLUS
55003: PUSH
55004: LD_VAR 0 2
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: PUSH
55017: LD_VAR 0 1
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: LD_INT 3
55029: MINUS
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: PUSH
55039: LD_VAR 0 1
55043: PUSH
55044: LD_INT 4
55046: MINUS
55047: PUSH
55048: LD_VAR 0 2
55052: PUSH
55053: LD_INT 4
55055: MINUS
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// end ; 5 :
55072: GO 55212
55074: LD_INT 5
55076: DOUBLE
55077: EQUAL
55078: IFTRUE 55082
55080: GO 55211
55082: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55083: LD_ADDR_VAR 0 5
55087: PUSH
55088: LD_VAR 0 1
55092: PUSH
55093: LD_INT 4
55095: MINUS
55096: PUSH
55097: LD_VAR 0 2
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: PUSH
55110: LD_VAR 0 1
55114: PUSH
55115: LD_VAR 0 2
55119: PUSH
55120: LD_INT 4
55122: MINUS
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: PUSH
55132: LD_VAR 0 1
55136: PUSH
55137: LD_INT 4
55139: PLUS
55140: PUSH
55141: LD_VAR 0 2
55145: PUSH
55146: LD_INT 4
55148: PLUS
55149: PUSH
55150: LD_INT 5
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: PUSH
55158: LD_VAR 0 1
55162: PUSH
55163: LD_INT 3
55165: PLUS
55166: PUSH
55167: LD_VAR 0 2
55171: PUSH
55172: LD_INT 4
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: PUSH
55180: LD_VAR 0 1
55184: PUSH
55185: LD_VAR 0 2
55189: PUSH
55190: LD_INT 3
55192: PLUS
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: ST_TO_ADDR
// end ; end ;
55209: GO 55212
55211: POP
// result := list ;
55212: LD_ADDR_VAR 0 4
55216: PUSH
55217: LD_VAR 0 5
55221: ST_TO_ADDR
// end ;
55222: LD_VAR 0 4
55226: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55227: LD_INT 0
55229: PPUSH
55230: PPUSH
55231: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55232: LD_VAR 0 1
55236: NOT
55237: PUSH
55238: LD_VAR 0 2
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: LD_INT 4
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: IN
55261: NOT
55262: OR
55263: IFFALSE 55267
// exit ;
55265: GO 55359
// tmp := [ ] ;
55267: LD_ADDR_VAR 0 5
55271: PUSH
55272: EMPTY
55273: ST_TO_ADDR
// for i in units do
55274: LD_ADDR_VAR 0 4
55278: PUSH
55279: LD_VAR 0 1
55283: PUSH
55284: FOR_IN
55285: IFFALSE 55328
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55287: LD_ADDR_VAR 0 5
55291: PUSH
55292: LD_VAR 0 5
55296: PPUSH
55297: LD_VAR 0 5
55301: PUSH
55302: LD_INT 1
55304: PLUS
55305: PPUSH
55306: LD_VAR 0 4
55310: PPUSH
55311: LD_VAR 0 2
55315: PPUSH
55316: CALL_OW 259
55320: PPUSH
55321: CALL_OW 2
55325: ST_TO_ADDR
55326: GO 55284
55328: POP
55329: POP
// if not tmp then
55330: LD_VAR 0 5
55334: NOT
55335: IFFALSE 55339
// exit ;
55337: GO 55359
// result := SortListByListDesc ( units , tmp ) ;
55339: LD_ADDR_VAR 0 3
55343: PUSH
55344: LD_VAR 0 1
55348: PPUSH
55349: LD_VAR 0 5
55353: PPUSH
55354: CALL_OW 77
55358: ST_TO_ADDR
// end ;
55359: LD_VAR 0 3
55363: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55364: LD_INT 0
55366: PPUSH
55367: PPUSH
55368: PPUSH
// result := false ;
55369: LD_ADDR_VAR 0 3
55373: PUSH
55374: LD_INT 0
55376: ST_TO_ADDR
// x := GetX ( building ) ;
55377: LD_ADDR_VAR 0 4
55381: PUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: CALL_OW 250
55391: ST_TO_ADDR
// y := GetY ( building ) ;
55392: LD_ADDR_VAR 0 5
55396: PUSH
55397: LD_VAR 0 2
55401: PPUSH
55402: CALL_OW 251
55406: ST_TO_ADDR
// if not building or not x or not y then
55407: LD_VAR 0 2
55411: NOT
55412: PUSH
55413: LD_VAR 0 4
55417: NOT
55418: OR
55419: PUSH
55420: LD_VAR 0 5
55424: NOT
55425: OR
55426: IFFALSE 55430
// exit ;
55428: GO 55522
// if GetTaskList ( unit ) then
55430: LD_VAR 0 1
55434: PPUSH
55435: CALL_OW 437
55439: IFFALSE 55522
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55441: LD_STRING e
55443: PUSH
55444: LD_VAR 0 1
55448: PPUSH
55449: CALL_OW 437
55453: PUSH
55454: LD_INT 1
55456: ARRAY
55457: PUSH
55458: LD_INT 1
55460: ARRAY
55461: EQUAL
55462: PUSH
55463: LD_VAR 0 4
55467: PUSH
55468: LD_VAR 0 1
55472: PPUSH
55473: CALL_OW 437
55477: PUSH
55478: LD_INT 1
55480: ARRAY
55481: PUSH
55482: LD_INT 2
55484: ARRAY
55485: EQUAL
55486: AND
55487: PUSH
55488: LD_VAR 0 5
55492: PUSH
55493: LD_VAR 0 1
55497: PPUSH
55498: CALL_OW 437
55502: PUSH
55503: LD_INT 1
55505: ARRAY
55506: PUSH
55507: LD_INT 3
55509: ARRAY
55510: EQUAL
55511: AND
55512: IFFALSE 55522
// result := true end ;
55514: LD_ADDR_VAR 0 3
55518: PUSH
55519: LD_INT 1
55521: ST_TO_ADDR
// end ;
55522: LD_VAR 0 3
55526: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55527: LD_INT 0
55529: PPUSH
// result := false ;
55530: LD_ADDR_VAR 0 4
55534: PUSH
55535: LD_INT 0
55537: ST_TO_ADDR
// if GetTaskList ( unit ) then
55538: LD_VAR 0 1
55542: PPUSH
55543: CALL_OW 437
55547: IFFALSE 55630
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55549: LD_STRING M
55551: PUSH
55552: LD_VAR 0 1
55556: PPUSH
55557: CALL_OW 437
55561: PUSH
55562: LD_INT 1
55564: ARRAY
55565: PUSH
55566: LD_INT 1
55568: ARRAY
55569: EQUAL
55570: PUSH
55571: LD_VAR 0 2
55575: PUSH
55576: LD_VAR 0 1
55580: PPUSH
55581: CALL_OW 437
55585: PUSH
55586: LD_INT 1
55588: ARRAY
55589: PUSH
55590: LD_INT 2
55592: ARRAY
55593: EQUAL
55594: AND
55595: PUSH
55596: LD_VAR 0 3
55600: PUSH
55601: LD_VAR 0 1
55605: PPUSH
55606: CALL_OW 437
55610: PUSH
55611: LD_INT 1
55613: ARRAY
55614: PUSH
55615: LD_INT 3
55617: ARRAY
55618: EQUAL
55619: AND
55620: IFFALSE 55630
// result := true ;
55622: LD_ADDR_VAR 0 4
55626: PUSH
55627: LD_INT 1
55629: ST_TO_ADDR
// end ; end ;
55630: LD_VAR 0 4
55634: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55635: LD_INT 0
55637: PPUSH
55638: PPUSH
55639: PPUSH
55640: PPUSH
// if not unit or not area then
55641: LD_VAR 0 1
55645: NOT
55646: PUSH
55647: LD_VAR 0 2
55651: NOT
55652: OR
55653: IFFALSE 55657
// exit ;
55655: GO 55821
// tmp := AreaToList ( area , i ) ;
55657: LD_ADDR_VAR 0 6
55661: PUSH
55662: LD_VAR 0 2
55666: PPUSH
55667: LD_VAR 0 5
55671: PPUSH
55672: CALL_OW 517
55676: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55677: LD_ADDR_VAR 0 5
55681: PUSH
55682: DOUBLE
55683: LD_INT 1
55685: DEC
55686: ST_TO_ADDR
55687: LD_VAR 0 6
55691: PUSH
55692: LD_INT 1
55694: ARRAY
55695: PUSH
55696: FOR_TO
55697: IFFALSE 55819
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55699: LD_ADDR_VAR 0 7
55703: PUSH
55704: LD_VAR 0 6
55708: PUSH
55709: LD_INT 1
55711: ARRAY
55712: PUSH
55713: LD_VAR 0 5
55717: ARRAY
55718: PUSH
55719: LD_VAR 0 6
55723: PUSH
55724: LD_INT 2
55726: ARRAY
55727: PUSH
55728: LD_VAR 0 5
55732: ARRAY
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55738: LD_VAR 0 7
55742: PUSH
55743: LD_INT 1
55745: ARRAY
55746: PPUSH
55747: LD_VAR 0 7
55751: PUSH
55752: LD_INT 2
55754: ARRAY
55755: PPUSH
55756: CALL_OW 428
55760: PUSH
55761: LD_INT 0
55763: EQUAL
55764: IFFALSE 55817
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55766: LD_VAR 0 1
55770: PPUSH
55771: LD_VAR 0 7
55775: PUSH
55776: LD_INT 1
55778: ARRAY
55779: PPUSH
55780: LD_VAR 0 7
55784: PUSH
55785: LD_INT 2
55787: ARRAY
55788: PPUSH
55789: LD_VAR 0 3
55793: PPUSH
55794: CALL_OW 48
// result := IsPlaced ( unit ) ;
55798: LD_ADDR_VAR 0 4
55802: PUSH
55803: LD_VAR 0 1
55807: PPUSH
55808: CALL_OW 305
55812: ST_TO_ADDR
// exit ;
55813: POP
55814: POP
55815: GO 55821
// end ; end ;
55817: GO 55696
55819: POP
55820: POP
// end ;
55821: LD_VAR 0 4
55825: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55826: LD_INT 0
55828: PPUSH
55829: PPUSH
55830: PPUSH
// if not side or side > 8 then
55831: LD_VAR 0 1
55835: NOT
55836: PUSH
55837: LD_VAR 0 1
55841: PUSH
55842: LD_INT 8
55844: GREATER
55845: OR
55846: IFFALSE 55850
// exit ;
55848: GO 56037
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55850: LD_ADDR_VAR 0 4
55854: PUSH
55855: LD_INT 22
55857: PUSH
55858: LD_VAR 0 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 21
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PPUSH
55881: CALL_OW 69
55885: ST_TO_ADDR
// if not tmp then
55886: LD_VAR 0 4
55890: NOT
55891: IFFALSE 55895
// exit ;
55893: GO 56037
// enable_addtolog := true ;
55895: LD_ADDR_OWVAR 81
55899: PUSH
55900: LD_INT 1
55902: ST_TO_ADDR
// AddToLog ( [ ) ;
55903: LD_STRING [
55905: PPUSH
55906: CALL_OW 561
// for i in tmp do
55910: LD_ADDR_VAR 0 3
55914: PUSH
55915: LD_VAR 0 4
55919: PUSH
55920: FOR_IN
55921: IFFALSE 56028
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55923: LD_STRING [
55925: PUSH
55926: LD_VAR 0 3
55930: PPUSH
55931: CALL_OW 266
55935: STR
55936: PUSH
55937: LD_STRING , 
55939: STR
55940: PUSH
55941: LD_VAR 0 3
55945: PPUSH
55946: CALL_OW 250
55950: STR
55951: PUSH
55952: LD_STRING , 
55954: STR
55955: PUSH
55956: LD_VAR 0 3
55960: PPUSH
55961: CALL_OW 251
55965: STR
55966: PUSH
55967: LD_STRING , 
55969: STR
55970: PUSH
55971: LD_VAR 0 3
55975: PPUSH
55976: CALL_OW 254
55980: STR
55981: PUSH
55982: LD_STRING , 
55984: STR
55985: PUSH
55986: LD_VAR 0 3
55990: PPUSH
55991: LD_INT 1
55993: PPUSH
55994: CALL_OW 268
55998: STR
55999: PUSH
56000: LD_STRING , 
56002: STR
56003: PUSH
56004: LD_VAR 0 3
56008: PPUSH
56009: LD_INT 2
56011: PPUSH
56012: CALL_OW 268
56016: STR
56017: PUSH
56018: LD_STRING ],
56020: STR
56021: PPUSH
56022: CALL_OW 561
// end ;
56026: GO 55920
56028: POP
56029: POP
// AddToLog ( ]; ) ;
56030: LD_STRING ];
56032: PPUSH
56033: CALL_OW 561
// end ;
56037: LD_VAR 0 2
56041: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56042: LD_INT 0
56044: PPUSH
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
// if not area or not rate or not max then
56049: LD_VAR 0 1
56053: NOT
56054: PUSH
56055: LD_VAR 0 2
56059: NOT
56060: OR
56061: PUSH
56062: LD_VAR 0 4
56066: NOT
56067: OR
56068: IFFALSE 56072
// exit ;
56070: GO 56264
// while 1 do
56072: LD_INT 1
56074: IFFALSE 56264
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56076: LD_ADDR_VAR 0 9
56080: PUSH
56081: LD_VAR 0 1
56085: PPUSH
56086: LD_INT 1
56088: PPUSH
56089: CALL_OW 287
56093: PUSH
56094: LD_INT 10
56096: MUL
56097: ST_TO_ADDR
// r := rate / 10 ;
56098: LD_ADDR_VAR 0 7
56102: PUSH
56103: LD_VAR 0 2
56107: PUSH
56108: LD_INT 10
56110: DIVREAL
56111: ST_TO_ADDR
// time := 1 1$00 ;
56112: LD_ADDR_VAR 0 8
56116: PUSH
56117: LD_INT 2100
56119: ST_TO_ADDR
// if amount < min then
56120: LD_VAR 0 9
56124: PUSH
56125: LD_VAR 0 3
56129: LESS
56130: IFFALSE 56148
// r := r * 2 else
56132: LD_ADDR_VAR 0 7
56136: PUSH
56137: LD_VAR 0 7
56141: PUSH
56142: LD_INT 2
56144: MUL
56145: ST_TO_ADDR
56146: GO 56174
// if amount > max then
56148: LD_VAR 0 9
56152: PUSH
56153: LD_VAR 0 4
56157: GREATER
56158: IFFALSE 56174
// r := r / 2 ;
56160: LD_ADDR_VAR 0 7
56164: PUSH
56165: LD_VAR 0 7
56169: PUSH
56170: LD_INT 2
56172: DIVREAL
56173: ST_TO_ADDR
// time := time / r ;
56174: LD_ADDR_VAR 0 8
56178: PUSH
56179: LD_VAR 0 8
56183: PUSH
56184: LD_VAR 0 7
56188: DIVREAL
56189: ST_TO_ADDR
// if time < 0 then
56190: LD_VAR 0 8
56194: PUSH
56195: LD_INT 0
56197: LESS
56198: IFFALSE 56215
// time := time * - 1 ;
56200: LD_ADDR_VAR 0 8
56204: PUSH
56205: LD_VAR 0 8
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: MUL
56214: ST_TO_ADDR
// wait ( time ) ;
56215: LD_VAR 0 8
56219: PPUSH
56220: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56224: LD_INT 35
56226: PPUSH
56227: LD_INT 875
56229: PPUSH
56230: CALL_OW 12
56234: PPUSH
56235: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56239: LD_INT 1
56241: PPUSH
56242: LD_INT 5
56244: PPUSH
56245: CALL_OW 12
56249: PPUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: LD_INT 1
56257: PPUSH
56258: CALL_OW 55
// end ;
56262: GO 56072
// end ;
56264: LD_VAR 0 5
56268: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56269: LD_INT 0
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
56277: PPUSH
56278: PPUSH
// if not turrets or not factories then
56279: LD_VAR 0 1
56283: NOT
56284: PUSH
56285: LD_VAR 0 2
56289: NOT
56290: OR
56291: IFFALSE 56295
// exit ;
56293: GO 56602
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56295: LD_ADDR_VAR 0 10
56299: PUSH
56300: LD_INT 5
56302: PUSH
56303: LD_INT 6
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 24
56337: PUSH
56338: LD_INT 25
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 23
56347: PUSH
56348: LD_INT 27
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 42
56361: PUSH
56362: LD_INT 43
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 44
56371: PUSH
56372: LD_INT 46
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 45
56381: PUSH
56382: LD_INT 47
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// result := [ ] ;
56399: LD_ADDR_VAR 0 3
56403: PUSH
56404: EMPTY
56405: ST_TO_ADDR
// for i in turrets do
56406: LD_ADDR_VAR 0 4
56410: PUSH
56411: LD_VAR 0 1
56415: PUSH
56416: FOR_IN
56417: IFFALSE 56600
// begin nat := GetNation ( i ) ;
56419: LD_ADDR_VAR 0 7
56423: PUSH
56424: LD_VAR 0 4
56428: PPUSH
56429: CALL_OW 248
56433: ST_TO_ADDR
// weapon := 0 ;
56434: LD_ADDR_VAR 0 8
56438: PUSH
56439: LD_INT 0
56441: ST_TO_ADDR
// if not nat then
56442: LD_VAR 0 7
56446: NOT
56447: IFFALSE 56451
// continue ;
56449: GO 56416
// for j in list [ nat ] do
56451: LD_ADDR_VAR 0 5
56455: PUSH
56456: LD_VAR 0 10
56460: PUSH
56461: LD_VAR 0 7
56465: ARRAY
56466: PUSH
56467: FOR_IN
56468: IFFALSE 56509
// if GetBWeapon ( i ) = j [ 1 ] then
56470: LD_VAR 0 4
56474: PPUSH
56475: CALL_OW 269
56479: PUSH
56480: LD_VAR 0 5
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: EQUAL
56489: IFFALSE 56507
// begin weapon := j [ 2 ] ;
56491: LD_ADDR_VAR 0 8
56495: PUSH
56496: LD_VAR 0 5
56500: PUSH
56501: LD_INT 2
56503: ARRAY
56504: ST_TO_ADDR
// break ;
56505: GO 56509
// end ;
56507: GO 56467
56509: POP
56510: POP
// if not weapon then
56511: LD_VAR 0 8
56515: NOT
56516: IFFALSE 56520
// continue ;
56518: GO 56416
// for k in factories do
56520: LD_ADDR_VAR 0 6
56524: PUSH
56525: LD_VAR 0 2
56529: PUSH
56530: FOR_IN
56531: IFFALSE 56596
// begin weapons := AvailableWeaponList ( k ) ;
56533: LD_ADDR_VAR 0 9
56537: PUSH
56538: LD_VAR 0 6
56542: PPUSH
56543: CALL_OW 478
56547: ST_TO_ADDR
// if not weapons then
56548: LD_VAR 0 9
56552: NOT
56553: IFFALSE 56557
// continue ;
56555: GO 56530
// if weapon in weapons then
56557: LD_VAR 0 8
56561: PUSH
56562: LD_VAR 0 9
56566: IN
56567: IFFALSE 56594
// begin result := [ i , weapon ] ;
56569: LD_ADDR_VAR 0 3
56573: PUSH
56574: LD_VAR 0 4
56578: PUSH
56579: LD_VAR 0 8
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// exit ;
56588: POP
56589: POP
56590: POP
56591: POP
56592: GO 56602
// end ; end ;
56594: GO 56530
56596: POP
56597: POP
// end ;
56598: GO 56416
56600: POP
56601: POP
// end ;
56602: LD_VAR 0 3
56606: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56607: LD_INT 0
56609: PPUSH
// if not side or side > 8 then
56610: LD_VAR 0 3
56614: NOT
56615: PUSH
56616: LD_VAR 0 3
56620: PUSH
56621: LD_INT 8
56623: GREATER
56624: OR
56625: IFFALSE 56629
// exit ;
56627: GO 56688
// if not range then
56629: LD_VAR 0 4
56633: NOT
56634: IFFALSE 56645
// range := - 12 ;
56636: LD_ADDR_VAR 0 4
56640: PUSH
56641: LD_INT 12
56643: NEG
56644: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56645: LD_VAR 0 1
56649: PPUSH
56650: LD_VAR 0 2
56654: PPUSH
56655: LD_VAR 0 3
56659: PPUSH
56660: LD_VAR 0 4
56664: PPUSH
56665: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56669: LD_VAR 0 1
56673: PPUSH
56674: LD_VAR 0 2
56678: PPUSH
56679: LD_VAR 0 3
56683: PPUSH
56684: CALL_OW 331
// end ;
56688: LD_VAR 0 5
56692: RET
// export function Video ( mode ) ; begin
56693: LD_INT 0
56695: PPUSH
// ingame_video = mode ;
56696: LD_ADDR_OWVAR 52
56700: PUSH
56701: LD_VAR 0 1
56705: ST_TO_ADDR
// interface_hidden = mode ;
56706: LD_ADDR_OWVAR 54
56710: PUSH
56711: LD_VAR 0 1
56715: ST_TO_ADDR
// end ;
56716: LD_VAR 0 2
56720: RET
// export function Join ( array , element ) ; begin
56721: LD_INT 0
56723: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56724: LD_ADDR_VAR 0 3
56728: PUSH
56729: LD_VAR 0 1
56733: PPUSH
56734: LD_VAR 0 1
56738: PUSH
56739: LD_INT 1
56741: PLUS
56742: PPUSH
56743: LD_VAR 0 2
56747: PPUSH
56748: CALL_OW 1
56752: ST_TO_ADDR
// end ;
56753: LD_VAR 0 3
56757: RET
// export function JoinUnion ( array , element ) ; begin
56758: LD_INT 0
56760: PPUSH
// result := array union element ;
56761: LD_ADDR_VAR 0 3
56765: PUSH
56766: LD_VAR 0 1
56770: PUSH
56771: LD_VAR 0 2
56775: UNION
56776: ST_TO_ADDR
// end ;
56777: LD_VAR 0 3
56781: RET
// export function GetBehemoths ( side ) ; begin
56782: LD_INT 0
56784: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56785: LD_ADDR_VAR 0 2
56789: PUSH
56790: LD_INT 22
56792: PUSH
56793: LD_VAR 0 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 31
56804: PUSH
56805: LD_INT 25
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PPUSH
56816: CALL_OW 69
56820: ST_TO_ADDR
// end ;
56821: LD_VAR 0 2
56825: RET
// export function Shuffle ( array ) ; var i , index ; begin
56826: LD_INT 0
56828: PPUSH
56829: PPUSH
56830: PPUSH
// result := [ ] ;
56831: LD_ADDR_VAR 0 2
56835: PUSH
56836: EMPTY
56837: ST_TO_ADDR
// if not array then
56838: LD_VAR 0 1
56842: NOT
56843: IFFALSE 56847
// exit ;
56845: GO 56946
// Randomize ;
56847: CALL_OW 10
// for i = array downto 1 do
56851: LD_ADDR_VAR 0 3
56855: PUSH
56856: DOUBLE
56857: LD_VAR 0 1
56861: INC
56862: ST_TO_ADDR
56863: LD_INT 1
56865: PUSH
56866: FOR_DOWNTO
56867: IFFALSE 56944
// begin index := rand ( 1 , array ) ;
56869: LD_ADDR_VAR 0 4
56873: PUSH
56874: LD_INT 1
56876: PPUSH
56877: LD_VAR 0 1
56881: PPUSH
56882: CALL_OW 12
56886: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56887: LD_ADDR_VAR 0 2
56891: PUSH
56892: LD_VAR 0 2
56896: PPUSH
56897: LD_VAR 0 2
56901: PUSH
56902: LD_INT 1
56904: PLUS
56905: PPUSH
56906: LD_VAR 0 1
56910: PUSH
56911: LD_VAR 0 4
56915: ARRAY
56916: PPUSH
56917: CALL_OW 2
56921: ST_TO_ADDR
// array := Delete ( array , index ) ;
56922: LD_ADDR_VAR 0 1
56926: PUSH
56927: LD_VAR 0 1
56931: PPUSH
56932: LD_VAR 0 4
56936: PPUSH
56937: CALL_OW 3
56941: ST_TO_ADDR
// end ;
56942: GO 56866
56944: POP
56945: POP
// end ;
56946: LD_VAR 0 2
56950: RET
// export function GetBaseMaterials ( base ) ; begin
56951: LD_INT 0
56953: PPUSH
// result := [ 0 , 0 , 0 ] ;
56954: LD_ADDR_VAR 0 2
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// if not base then
56973: LD_VAR 0 1
56977: NOT
56978: IFFALSE 56982
// exit ;
56980: GO 57031
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56982: LD_ADDR_VAR 0 2
56986: PUSH
56987: LD_VAR 0 1
56991: PPUSH
56992: LD_INT 1
56994: PPUSH
56995: CALL_OW 275
56999: PUSH
57000: LD_VAR 0 1
57004: PPUSH
57005: LD_INT 2
57007: PPUSH
57008: CALL_OW 275
57012: PUSH
57013: LD_VAR 0 1
57017: PPUSH
57018: LD_INT 3
57020: PPUSH
57021: CALL_OW 275
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: ST_TO_ADDR
// end ;
57031: LD_VAR 0 2
57035: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57036: LD_INT 0
57038: PPUSH
57039: PPUSH
// result := array ;
57040: LD_ADDR_VAR 0 3
57044: PUSH
57045: LD_VAR 0 1
57049: ST_TO_ADDR
// if size > 0 then
57050: LD_VAR 0 2
57054: PUSH
57055: LD_INT 0
57057: GREATER
57058: IFFALSE 57104
// for i := array downto size do
57060: LD_ADDR_VAR 0 4
57064: PUSH
57065: DOUBLE
57066: LD_VAR 0 1
57070: INC
57071: ST_TO_ADDR
57072: LD_VAR 0 2
57076: PUSH
57077: FOR_DOWNTO
57078: IFFALSE 57102
// result := Delete ( result , result ) ;
57080: LD_ADDR_VAR 0 3
57084: PUSH
57085: LD_VAR 0 3
57089: PPUSH
57090: LD_VAR 0 3
57094: PPUSH
57095: CALL_OW 3
57099: ST_TO_ADDR
57100: GO 57077
57102: POP
57103: POP
// end ;
57104: LD_VAR 0 3
57108: RET
// export function ComExit ( unit ) ; var tmp ; begin
57109: LD_INT 0
57111: PPUSH
57112: PPUSH
// if not IsInUnit ( unit ) then
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 310
57122: NOT
57123: IFFALSE 57127
// exit ;
57125: GO 57187
// tmp := IsInUnit ( unit ) ;
57127: LD_ADDR_VAR 0 3
57131: PUSH
57132: LD_VAR 0 1
57136: PPUSH
57137: CALL_OW 310
57141: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57142: LD_VAR 0 3
57146: PPUSH
57147: CALL_OW 247
57151: PUSH
57152: LD_INT 2
57154: EQUAL
57155: IFFALSE 57168
// ComExitVehicle ( unit ) else
57157: LD_VAR 0 1
57161: PPUSH
57162: CALL_OW 121
57166: GO 57177
// ComExitBuilding ( unit ) ;
57168: LD_VAR 0 1
57172: PPUSH
57173: CALL_OW 122
// result := tmp ;
57177: LD_ADDR_VAR 0 2
57181: PUSH
57182: LD_VAR 0 3
57186: ST_TO_ADDR
// end ;
57187: LD_VAR 0 2
57191: RET
// export function ComExitAll ( units ) ; var i ; begin
57192: LD_INT 0
57194: PPUSH
57195: PPUSH
// if not units then
57196: LD_VAR 0 1
57200: NOT
57201: IFFALSE 57205
// exit ;
57203: GO 57231
// for i in units do
57205: LD_ADDR_VAR 0 3
57209: PUSH
57210: LD_VAR 0 1
57214: PUSH
57215: FOR_IN
57216: IFFALSE 57229
// ComExit ( i ) ;
57218: LD_VAR 0 3
57222: PPUSH
57223: CALL 57109 0 1
57227: GO 57215
57229: POP
57230: POP
// end ;
57231: LD_VAR 0 2
57235: RET
// export function ResetHc ; begin
57236: LD_INT 0
57238: PPUSH
// InitHc ;
57239: CALL_OW 19
// hc_importance := 0 ;
57243: LD_ADDR_OWVAR 32
57247: PUSH
57248: LD_INT 0
57250: ST_TO_ADDR
// end ;
57251: LD_VAR 0 1
57255: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57256: LD_INT 0
57258: PPUSH
57259: PPUSH
57260: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57261: LD_ADDR_VAR 0 6
57265: PUSH
57266: LD_VAR 0 1
57270: PUSH
57271: LD_VAR 0 3
57275: PLUS
57276: PUSH
57277: LD_INT 2
57279: DIV
57280: ST_TO_ADDR
// if _x < 0 then
57281: LD_VAR 0 6
57285: PUSH
57286: LD_INT 0
57288: LESS
57289: IFFALSE 57306
// _x := _x * - 1 ;
57291: LD_ADDR_VAR 0 6
57295: PUSH
57296: LD_VAR 0 6
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: MUL
57305: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57306: LD_ADDR_VAR 0 7
57310: PUSH
57311: LD_VAR 0 2
57315: PUSH
57316: LD_VAR 0 4
57320: PLUS
57321: PUSH
57322: LD_INT 2
57324: DIV
57325: ST_TO_ADDR
// if _y < 0 then
57326: LD_VAR 0 7
57330: PUSH
57331: LD_INT 0
57333: LESS
57334: IFFALSE 57351
// _y := _y * - 1 ;
57336: LD_ADDR_VAR 0 7
57340: PUSH
57341: LD_VAR 0 7
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: MUL
57350: ST_TO_ADDR
// result := [ _x , _y ] ;
57351: LD_ADDR_VAR 0 5
57355: PUSH
57356: LD_VAR 0 6
57360: PUSH
57361: LD_VAR 0 7
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: ST_TO_ADDR
// end ;
57370: LD_VAR 0 5
57374: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57375: LD_INT 0
57377: PPUSH
57378: PPUSH
57379: PPUSH
57380: PPUSH
// task := GetTaskList ( unit ) ;
57381: LD_ADDR_VAR 0 7
57385: PUSH
57386: LD_VAR 0 1
57390: PPUSH
57391: CALL_OW 437
57395: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57396: LD_VAR 0 7
57400: NOT
57401: PUSH
57402: LD_VAR 0 1
57406: PPUSH
57407: LD_VAR 0 2
57411: PPUSH
57412: CALL_OW 308
57416: NOT
57417: AND
57418: IFFALSE 57422
// exit ;
57420: GO 57540
// if IsInArea ( unit , area ) then
57422: LD_VAR 0 1
57426: PPUSH
57427: LD_VAR 0 2
57431: PPUSH
57432: CALL_OW 308
57436: IFFALSE 57454
// begin ComMoveToArea ( unit , goAway ) ;
57438: LD_VAR 0 1
57442: PPUSH
57443: LD_VAR 0 3
57447: PPUSH
57448: CALL_OW 113
// exit ;
57452: GO 57540
// end ; if task [ 1 ] [ 1 ] <> M then
57454: LD_VAR 0 7
57458: PUSH
57459: LD_INT 1
57461: ARRAY
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PUSH
57467: LD_STRING M
57469: NONEQUAL
57470: IFFALSE 57474
// exit ;
57472: GO 57540
// x := task [ 1 ] [ 2 ] ;
57474: LD_ADDR_VAR 0 5
57478: PUSH
57479: LD_VAR 0 7
57483: PUSH
57484: LD_INT 1
57486: ARRAY
57487: PUSH
57488: LD_INT 2
57490: ARRAY
57491: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57492: LD_ADDR_VAR 0 6
57496: PUSH
57497: LD_VAR 0 7
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: PUSH
57506: LD_INT 3
57508: ARRAY
57509: ST_TO_ADDR
// if InArea ( x , y , area ) then
57510: LD_VAR 0 5
57514: PPUSH
57515: LD_VAR 0 6
57519: PPUSH
57520: LD_VAR 0 2
57524: PPUSH
57525: CALL_OW 309
57529: IFFALSE 57540
// ComStop ( unit ) ;
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 141
// end ;
57540: LD_VAR 0 4
57544: RET
// export function Abs ( value ) ; begin
57545: LD_INT 0
57547: PPUSH
// result := value ;
57548: LD_ADDR_VAR 0 2
57552: PUSH
57553: LD_VAR 0 1
57557: ST_TO_ADDR
// if value < 0 then
57558: LD_VAR 0 1
57562: PUSH
57563: LD_INT 0
57565: LESS
57566: IFFALSE 57583
// result := value * - 1 ;
57568: LD_ADDR_VAR 0 2
57572: PUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: MUL
57582: ST_TO_ADDR
// end ;
57583: LD_VAR 0 2
57587: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57588: LD_INT 0
57590: PPUSH
57591: PPUSH
57592: PPUSH
57593: PPUSH
57594: PPUSH
57595: PPUSH
57596: PPUSH
57597: PPUSH
// if not unit or not building then
57598: LD_VAR 0 1
57602: NOT
57603: PUSH
57604: LD_VAR 0 2
57608: NOT
57609: OR
57610: IFFALSE 57614
// exit ;
57612: GO 57840
// x := GetX ( building ) ;
57614: LD_ADDR_VAR 0 4
57618: PUSH
57619: LD_VAR 0 2
57623: PPUSH
57624: CALL_OW 250
57628: ST_TO_ADDR
// y := GetY ( building ) ;
57629: LD_ADDR_VAR 0 6
57633: PUSH
57634: LD_VAR 0 2
57638: PPUSH
57639: CALL_OW 251
57643: ST_TO_ADDR
// d := GetDir ( building ) ;
57644: LD_ADDR_VAR 0 8
57648: PUSH
57649: LD_VAR 0 2
57653: PPUSH
57654: CALL_OW 254
57658: ST_TO_ADDR
// r := 4 ;
57659: LD_ADDR_VAR 0 9
57663: PUSH
57664: LD_INT 4
57666: ST_TO_ADDR
// for i := 1 to 5 do
57667: LD_ADDR_VAR 0 10
57671: PUSH
57672: DOUBLE
57673: LD_INT 1
57675: DEC
57676: ST_TO_ADDR
57677: LD_INT 5
57679: PUSH
57680: FOR_TO
57681: IFFALSE 57838
// begin _x := ShiftX ( x , d , r + i ) ;
57683: LD_ADDR_VAR 0 5
57687: PUSH
57688: LD_VAR 0 4
57692: PPUSH
57693: LD_VAR 0 8
57697: PPUSH
57698: LD_VAR 0 9
57702: PUSH
57703: LD_VAR 0 10
57707: PLUS
57708: PPUSH
57709: CALL_OW 272
57713: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57714: LD_ADDR_VAR 0 7
57718: PUSH
57719: LD_VAR 0 6
57723: PPUSH
57724: LD_VAR 0 8
57728: PPUSH
57729: LD_VAR 0 9
57733: PUSH
57734: LD_VAR 0 10
57738: PLUS
57739: PPUSH
57740: CALL_OW 273
57744: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57745: LD_VAR 0 5
57749: PPUSH
57750: LD_VAR 0 7
57754: PPUSH
57755: CALL_OW 488
57759: PUSH
57760: LD_VAR 0 5
57764: PPUSH
57765: LD_VAR 0 7
57769: PPUSH
57770: CALL_OW 428
57774: PPUSH
57775: CALL_OW 247
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: IN
57790: NOT
57791: AND
57792: IFFALSE 57836
// begin ComMoveXY ( unit , _x , _y ) ;
57794: LD_VAR 0 1
57798: PPUSH
57799: LD_VAR 0 5
57803: PPUSH
57804: LD_VAR 0 7
57808: PPUSH
57809: CALL_OW 111
// result := [ _x , _y ] ;
57813: LD_ADDR_VAR 0 3
57817: PUSH
57818: LD_VAR 0 5
57822: PUSH
57823: LD_VAR 0 7
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: ST_TO_ADDR
// exit ;
57832: POP
57833: POP
57834: GO 57840
// end ; end ;
57836: GO 57680
57838: POP
57839: POP
// end ;
57840: LD_VAR 0 3
57844: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57845: LD_INT 0
57847: PPUSH
57848: PPUSH
57849: PPUSH
// result := 0 ;
57850: LD_ADDR_VAR 0 3
57854: PUSH
57855: LD_INT 0
57857: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57858: LD_VAR 0 1
57862: PUSH
57863: LD_INT 0
57865: LESS
57866: PUSH
57867: LD_VAR 0 1
57871: PUSH
57872: LD_INT 8
57874: GREATER
57875: OR
57876: PUSH
57877: LD_VAR 0 2
57881: PUSH
57882: LD_INT 0
57884: LESS
57885: OR
57886: PUSH
57887: LD_VAR 0 2
57891: PUSH
57892: LD_INT 8
57894: GREATER
57895: OR
57896: IFFALSE 57900
// exit ;
57898: GO 57975
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57900: LD_ADDR_VAR 0 4
57904: PUSH
57905: LD_INT 22
57907: PUSH
57908: LD_VAR 0 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PPUSH
57917: CALL_OW 69
57921: PUSH
57922: FOR_IN
57923: IFFALSE 57973
// begin un := UnitShoot ( i ) ;
57925: LD_ADDR_VAR 0 5
57929: PUSH
57930: LD_VAR 0 4
57934: PPUSH
57935: CALL_OW 504
57939: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57940: LD_VAR 0 5
57944: PPUSH
57945: CALL_OW 255
57949: PUSH
57950: LD_VAR 0 1
57954: EQUAL
57955: IFFALSE 57971
// begin result := un ;
57957: LD_ADDR_VAR 0 3
57961: PUSH
57962: LD_VAR 0 5
57966: ST_TO_ADDR
// exit ;
57967: POP
57968: POP
57969: GO 57975
// end ; end ;
57971: GO 57922
57973: POP
57974: POP
// end ;
57975: LD_VAR 0 3
57979: RET
// export function GetCargoBay ( units ) ; begin
57980: LD_INT 0
57982: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57983: LD_ADDR_VAR 0 2
57987: PUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 34
57998: PUSH
57999: LD_INT 12
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 34
58008: PUSH
58009: LD_INT 51
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 34
58018: PUSH
58019: LD_INT 32
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 34
58028: PUSH
58029: LD_EXP 78
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: PPUSH
58045: CALL_OW 72
58049: ST_TO_ADDR
// end ;
58050: LD_VAR 0 2
58054: RET
// export function Negate ( value ) ; begin
58055: LD_INT 0
58057: PPUSH
// result := not value ;
58058: LD_ADDR_VAR 0 2
58062: PUSH
58063: LD_VAR 0 1
58067: NOT
58068: ST_TO_ADDR
// end ;
58069: LD_VAR 0 2
58073: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
58074: LD_INT 0
58076: PPUSH
// if x1 = x2 then
58077: LD_VAR 0 1
58081: PUSH
58082: LD_VAR 0 3
58086: EQUAL
58087: IFFALSE 58121
// begin if y1 > y2 then
58089: LD_VAR 0 2
58093: PUSH
58094: LD_VAR 0 4
58098: GREATER
58099: IFFALSE 58111
// result := 0 else
58101: LD_ADDR_VAR 0 5
58105: PUSH
58106: LD_INT 0
58108: ST_TO_ADDR
58109: GO 58119
// result := 3 ;
58111: LD_ADDR_VAR 0 5
58115: PUSH
58116: LD_INT 3
58118: ST_TO_ADDR
// exit ;
58119: GO 58207
// end ; if y1 = y2 then
58121: LD_VAR 0 2
58125: PUSH
58126: LD_VAR 0 4
58130: EQUAL
58131: IFFALSE 58165
// begin if x1 > x2 then
58133: LD_VAR 0 1
58137: PUSH
58138: LD_VAR 0 3
58142: GREATER
58143: IFFALSE 58155
// result := 1 else
58145: LD_ADDR_VAR 0 5
58149: PUSH
58150: LD_INT 1
58152: ST_TO_ADDR
58153: GO 58163
// result := 4 ;
58155: LD_ADDR_VAR 0 5
58159: PUSH
58160: LD_INT 4
58162: ST_TO_ADDR
// exit ;
58163: GO 58207
// end ; if x1 > x2 and y1 > y2 then
58165: LD_VAR 0 1
58169: PUSH
58170: LD_VAR 0 3
58174: GREATER
58175: PUSH
58176: LD_VAR 0 2
58180: PUSH
58181: LD_VAR 0 4
58185: GREATER
58186: AND
58187: IFFALSE 58199
// result := 2 else
58189: LD_ADDR_VAR 0 5
58193: PUSH
58194: LD_INT 2
58196: ST_TO_ADDR
58197: GO 58207
// result := 5 ;
58199: LD_ADDR_VAR 0 5
58203: PUSH
58204: LD_INT 5
58206: ST_TO_ADDR
// end ;
58207: LD_VAR 0 5
58211: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58212: LD_INT 0
58214: PPUSH
58215: PPUSH
// if not driver or not IsInUnit ( driver ) then
58216: LD_VAR 0 1
58220: NOT
58221: PUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: CALL_OW 310
58231: NOT
58232: OR
58233: IFFALSE 58237
// exit ;
58235: GO 58327
// vehicle := IsInUnit ( driver ) ;
58237: LD_ADDR_VAR 0 3
58241: PUSH
58242: LD_VAR 0 1
58246: PPUSH
58247: CALL_OW 310
58251: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58252: LD_VAR 0 1
58256: PPUSH
58257: LD_STRING \
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: PUSH
58287: LD_STRING E
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_VAR 0 3
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PPUSH
58323: CALL_OW 446
// end ;
58327: LD_VAR 0 2
58331: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58332: LD_INT 0
58334: PPUSH
58335: PPUSH
// if not driver or not IsInUnit ( driver ) then
58336: LD_VAR 0 1
58340: NOT
58341: PUSH
58342: LD_VAR 0 1
58346: PPUSH
58347: CALL_OW 310
58351: NOT
58352: OR
58353: IFFALSE 58357
// exit ;
58355: GO 58447
// vehicle := IsInUnit ( driver ) ;
58357: LD_ADDR_VAR 0 3
58361: PUSH
58362: LD_VAR 0 1
58366: PPUSH
58367: CALL_OW 310
58371: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58372: LD_VAR 0 1
58376: PPUSH
58377: LD_STRING \
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: PUSH
58407: LD_STRING E
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_VAR 0 3
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PPUSH
58443: CALL_OW 447
// end ;
58447: LD_VAR 0 2
58451: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58452: LD_INT 0
58454: PPUSH
58455: PPUSH
58456: PPUSH
// tmp := [ ] ;
58457: LD_ADDR_VAR 0 5
58461: PUSH
58462: EMPTY
58463: ST_TO_ADDR
// for i in units do
58464: LD_ADDR_VAR 0 4
58468: PUSH
58469: LD_VAR 0 1
58473: PUSH
58474: FOR_IN
58475: IFFALSE 58513
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58477: LD_ADDR_VAR 0 5
58481: PUSH
58482: LD_VAR 0 5
58486: PPUSH
58487: LD_VAR 0 5
58491: PUSH
58492: LD_INT 1
58494: PLUS
58495: PPUSH
58496: LD_VAR 0 4
58500: PPUSH
58501: CALL_OW 256
58505: PPUSH
58506: CALL_OW 2
58510: ST_TO_ADDR
58511: GO 58474
58513: POP
58514: POP
// if not tmp then
58515: LD_VAR 0 5
58519: NOT
58520: IFFALSE 58524
// exit ;
58522: GO 58572
// if asc then
58524: LD_VAR 0 2
58528: IFFALSE 58552
// result := SortListByListAsc ( units , tmp ) else
58530: LD_ADDR_VAR 0 3
58534: PUSH
58535: LD_VAR 0 1
58539: PPUSH
58540: LD_VAR 0 5
58544: PPUSH
58545: CALL_OW 76
58549: ST_TO_ADDR
58550: GO 58572
// result := SortListByListDesc ( units , tmp ) ;
58552: LD_ADDR_VAR 0 3
58556: PUSH
58557: LD_VAR 0 1
58561: PPUSH
58562: LD_VAR 0 5
58566: PPUSH
58567: CALL_OW 77
58571: ST_TO_ADDR
// end ;
58572: LD_VAR 0 3
58576: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58577: LD_INT 0
58579: PPUSH
58580: PPUSH
// task := GetTaskList ( mech ) ;
58581: LD_ADDR_VAR 0 4
58585: PUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: CALL_OW 437
58595: ST_TO_ADDR
// if not task then
58596: LD_VAR 0 4
58600: NOT
58601: IFFALSE 58605
// exit ;
58603: GO 58647
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58605: LD_ADDR_VAR 0 3
58609: PUSH
58610: LD_VAR 0 4
58614: PUSH
58615: LD_INT 1
58617: ARRAY
58618: PUSH
58619: LD_INT 1
58621: ARRAY
58622: PUSH
58623: LD_STRING r
58625: EQUAL
58626: PUSH
58627: LD_VAR 0 4
58631: PUSH
58632: LD_INT 1
58634: ARRAY
58635: PUSH
58636: LD_INT 4
58638: ARRAY
58639: PUSH
58640: LD_VAR 0 2
58644: EQUAL
58645: AND
58646: ST_TO_ADDR
// end ;
58647: LD_VAR 0 3
58651: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58652: LD_INT 0
58654: PPUSH
// SetDir ( unit , d ) ;
58655: LD_VAR 0 1
58659: PPUSH
58660: LD_VAR 0 4
58664: PPUSH
58665: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58669: LD_VAR 0 1
58673: PPUSH
58674: LD_VAR 0 2
58678: PPUSH
58679: LD_VAR 0 3
58683: PPUSH
58684: LD_VAR 0 5
58688: PPUSH
58689: CALL_OW 48
// end ;
58693: LD_VAR 0 6
58697: RET
// export function ToNaturalNumber ( number ) ; begin
58698: LD_INT 0
58700: PPUSH
// result := number div 1 ;
58701: LD_ADDR_VAR 0 2
58705: PUSH
58706: LD_VAR 0 1
58710: PUSH
58711: LD_INT 1
58713: DIV
58714: ST_TO_ADDR
// if number < 0 then
58715: LD_VAR 0 1
58719: PUSH
58720: LD_INT 0
58722: LESS
58723: IFFALSE 58733
// result := 0 ;
58725: LD_ADDR_VAR 0 2
58729: PUSH
58730: LD_INT 0
58732: ST_TO_ADDR
// end ;
58733: LD_VAR 0 2
58737: RET
// export function SortByClass ( units , class ) ; var un ; begin
58738: LD_INT 0
58740: PPUSH
58741: PPUSH
// if not units or not class then
58742: LD_VAR 0 1
58746: NOT
58747: PUSH
58748: LD_VAR 0 2
58752: NOT
58753: OR
58754: IFFALSE 58758
// exit ;
58756: GO 58853
// result := [ ] ;
58758: LD_ADDR_VAR 0 3
58762: PUSH
58763: EMPTY
58764: ST_TO_ADDR
// for un in units do
58765: LD_ADDR_VAR 0 4
58769: PUSH
58770: LD_VAR 0 1
58774: PUSH
58775: FOR_IN
58776: IFFALSE 58851
// if GetClass ( un ) = class then
58778: LD_VAR 0 4
58782: PPUSH
58783: CALL_OW 257
58787: PUSH
58788: LD_VAR 0 2
58792: EQUAL
58793: IFFALSE 58820
// result := Insert ( result , 1 , un ) else
58795: LD_ADDR_VAR 0 3
58799: PUSH
58800: LD_VAR 0 3
58804: PPUSH
58805: LD_INT 1
58807: PPUSH
58808: LD_VAR 0 4
58812: PPUSH
58813: CALL_OW 2
58817: ST_TO_ADDR
58818: GO 58849
// result := Replace ( result , result + 1 , un ) ;
58820: LD_ADDR_VAR 0 3
58824: PUSH
58825: LD_VAR 0 3
58829: PPUSH
58830: LD_VAR 0 3
58834: PUSH
58835: LD_INT 1
58837: PLUS
58838: PPUSH
58839: LD_VAR 0 4
58843: PPUSH
58844: CALL_OW 1
58848: ST_TO_ADDR
58849: GO 58775
58851: POP
58852: POP
// end ;
58853: LD_VAR 0 3
58857: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58858: LD_INT 0
58860: PPUSH
58861: PPUSH
58862: PPUSH
58863: PPUSH
58864: PPUSH
58865: PPUSH
58866: PPUSH
// result := [ ] ;
58867: LD_ADDR_VAR 0 4
58871: PUSH
58872: EMPTY
58873: ST_TO_ADDR
// if x - r < 0 then
58874: LD_VAR 0 1
58878: PUSH
58879: LD_VAR 0 3
58883: MINUS
58884: PUSH
58885: LD_INT 0
58887: LESS
58888: IFFALSE 58900
// min_x := 0 else
58890: LD_ADDR_VAR 0 8
58894: PUSH
58895: LD_INT 0
58897: ST_TO_ADDR
58898: GO 58916
// min_x := x - r ;
58900: LD_ADDR_VAR 0 8
58904: PUSH
58905: LD_VAR 0 1
58909: PUSH
58910: LD_VAR 0 3
58914: MINUS
58915: ST_TO_ADDR
// if y - r < 0 then
58916: LD_VAR 0 2
58920: PUSH
58921: LD_VAR 0 3
58925: MINUS
58926: PUSH
58927: LD_INT 0
58929: LESS
58930: IFFALSE 58942
// min_y := 0 else
58932: LD_ADDR_VAR 0 7
58936: PUSH
58937: LD_INT 0
58939: ST_TO_ADDR
58940: GO 58958
// min_y := y - r ;
58942: LD_ADDR_VAR 0 7
58946: PUSH
58947: LD_VAR 0 2
58951: PUSH
58952: LD_VAR 0 3
58956: MINUS
58957: ST_TO_ADDR
// max_x := x + r ;
58958: LD_ADDR_VAR 0 9
58962: PUSH
58963: LD_VAR 0 1
58967: PUSH
58968: LD_VAR 0 3
58972: PLUS
58973: ST_TO_ADDR
// max_y := y + r ;
58974: LD_ADDR_VAR 0 10
58978: PUSH
58979: LD_VAR 0 2
58983: PUSH
58984: LD_VAR 0 3
58988: PLUS
58989: ST_TO_ADDR
// for _x = min_x to max_x do
58990: LD_ADDR_VAR 0 5
58994: PUSH
58995: DOUBLE
58996: LD_VAR 0 8
59000: DEC
59001: ST_TO_ADDR
59002: LD_VAR 0 9
59006: PUSH
59007: FOR_TO
59008: IFFALSE 59109
// for _y = min_y to max_y do
59010: LD_ADDR_VAR 0 6
59014: PUSH
59015: DOUBLE
59016: LD_VAR 0 7
59020: DEC
59021: ST_TO_ADDR
59022: LD_VAR 0 10
59026: PUSH
59027: FOR_TO
59028: IFFALSE 59105
// begin if not ValidHex ( _x , _y ) then
59030: LD_VAR 0 5
59034: PPUSH
59035: LD_VAR 0 6
59039: PPUSH
59040: CALL_OW 488
59044: NOT
59045: IFFALSE 59049
// continue ;
59047: GO 59027
// if GetResourceTypeXY ( _x , _y ) then
59049: LD_VAR 0 5
59053: PPUSH
59054: LD_VAR 0 6
59058: PPUSH
59059: CALL_OW 283
59063: IFFALSE 59103
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59065: LD_ADDR_VAR 0 4
59069: PUSH
59070: LD_VAR 0 4
59074: PPUSH
59075: LD_VAR 0 4
59079: PUSH
59080: LD_INT 1
59082: PLUS
59083: PPUSH
59084: LD_VAR 0 5
59088: PUSH
59089: LD_VAR 0 6
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PPUSH
59098: CALL_OW 1
59102: ST_TO_ADDR
// end ;
59103: GO 59027
59105: POP
59106: POP
59107: GO 59007
59109: POP
59110: POP
// end ;
59111: LD_VAR 0 4
59115: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
59116: LD_INT 0
59118: PPUSH
59119: PPUSH
59120: PPUSH
59121: PPUSH
59122: PPUSH
59123: PPUSH
// if not units then
59124: LD_VAR 0 1
59128: NOT
59129: IFFALSE 59133
// exit ;
59131: GO 59534
// result := UnitFilter ( units , [ f_ok ] ) ;
59133: LD_ADDR_VAR 0 3
59137: PUSH
59138: LD_VAR 0 1
59142: PPUSH
59143: LD_INT 50
59145: PUSH
59146: EMPTY
59147: LIST
59148: PPUSH
59149: CALL_OW 72
59153: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59154: LD_ADDR_VAR 0 7
59158: PUSH
59159: LD_VAR 0 1
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PPUSH
59168: CALL_OW 255
59172: ST_TO_ADDR
// if not result then
59173: LD_VAR 0 3
59177: NOT
59178: IFFALSE 59182
// exit ;
59180: GO 59534
// for i in result do
59182: LD_ADDR_VAR 0 4
59186: PUSH
59187: LD_VAR 0 3
59191: PUSH
59192: FOR_IN
59193: IFFALSE 59532
// begin tag := GetTag ( i ) + 1 ;
59195: LD_ADDR_VAR 0 8
59199: PUSH
59200: LD_VAR 0 4
59204: PPUSH
59205: CALL_OW 110
59209: PUSH
59210: LD_INT 1
59212: PLUS
59213: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59214: LD_ADDR_VAR 0 6
59218: PUSH
59219: LD_VAR 0 4
59223: PPUSH
59224: CALL_OW 250
59228: PPUSH
59229: LD_VAR 0 4
59233: PPUSH
59234: CALL_OW 251
59238: PPUSH
59239: LD_INT 6
59241: PPUSH
59242: CALL 58858 0 3
59246: ST_TO_ADDR
// if cr then
59247: LD_VAR 0 6
59251: IFFALSE 59290
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59253: LD_VAR 0 4
59257: PPUSH
59258: LD_VAR 0 6
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: PUSH
59267: LD_INT 1
59269: ARRAY
59270: PPUSH
59271: LD_VAR 0 6
59275: PUSH
59276: LD_INT 1
59278: ARRAY
59279: PUSH
59280: LD_INT 2
59282: ARRAY
59283: PPUSH
59284: CALL_OW 116
59288: GO 59530
// if path > tag then
59290: LD_VAR 0 2
59294: PUSH
59295: LD_VAR 0 8
59299: GREATER
59300: IFFALSE 59478
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
59302: LD_ADDR_VAR 0 5
59306: PUSH
59307: LD_INT 81
59309: PUSH
59310: LD_VAR 0 7
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 91
59321: PUSH
59322: LD_VAR 0 4
59326: PUSH
59327: LD_INT 12
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: LIST
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PPUSH
59339: CALL_OW 69
59343: ST_TO_ADDR
// if enemy then
59344: LD_VAR 0 5
59348: IFFALSE 59376
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59350: LD_VAR 0 4
59354: PPUSH
59355: LD_VAR 0 5
59359: PPUSH
59360: LD_VAR 0 4
59364: PPUSH
59365: CALL_OW 74
59369: PPUSH
59370: CALL_OW 115
59374: GO 59476
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59376: LD_VAR 0 4
59380: PPUSH
59381: LD_VAR 0 2
59385: PUSH
59386: LD_VAR 0 8
59390: ARRAY
59391: PUSH
59392: LD_INT 1
59394: ARRAY
59395: PPUSH
59396: LD_VAR 0 2
59400: PUSH
59401: LD_VAR 0 8
59405: ARRAY
59406: PUSH
59407: LD_INT 2
59409: ARRAY
59410: PPUSH
59411: CALL_OW 297
59415: PUSH
59416: LD_INT 6
59418: GREATER
59419: IFFALSE 59462
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59421: LD_VAR 0 4
59425: PPUSH
59426: LD_VAR 0 2
59430: PUSH
59431: LD_VAR 0 8
59435: ARRAY
59436: PUSH
59437: LD_INT 1
59439: ARRAY
59440: PPUSH
59441: LD_VAR 0 2
59445: PUSH
59446: LD_VAR 0 8
59450: ARRAY
59451: PUSH
59452: LD_INT 2
59454: ARRAY
59455: PPUSH
59456: CALL_OW 114
59460: GO 59476
// SetTag ( i , tag ) ;
59462: LD_VAR 0 4
59466: PPUSH
59467: LD_VAR 0 8
59471: PPUSH
59472: CALL_OW 109
// end else
59476: GO 59530
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59478: LD_ADDR_VAR 0 5
59482: PUSH
59483: LD_INT 81
59485: PUSH
59486: LD_VAR 0 7
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PPUSH
59495: CALL_OW 69
59499: ST_TO_ADDR
// if enemy then
59500: LD_VAR 0 5
59504: IFFALSE 59530
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59506: LD_VAR 0 4
59510: PPUSH
59511: LD_VAR 0 5
59515: PPUSH
59516: LD_VAR 0 4
59520: PPUSH
59521: CALL_OW 74
59525: PPUSH
59526: CALL_OW 115
// end ; end ;
59530: GO 59192
59532: POP
59533: POP
// end ; end_of_file
59534: LD_VAR 0 3
59538: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59539: LD_VAR 0 1
59543: PPUSH
59544: LD_VAR 0 2
59548: PPUSH
59549: LD_VAR 0 3
59553: PPUSH
59554: LD_VAR 0 4
59558: PPUSH
59559: LD_VAR 0 5
59563: PPUSH
59564: LD_VAR 0 6
59568: PPUSH
59569: CALL 1863 0 6
// end ;
59573: PPOPN 6
59575: END
