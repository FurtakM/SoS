// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 123
// begin difficulty := GetMultiplayerSetting ( 0 ) ;
  73: LD_ADDR_OWVAR 67
  77: PUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 426
  85: ST_TO_ADDR
// level := GetMultiplayerSetting ( 1 ) ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 1
  93: PPUSH
  94: CALL_OW 426
  98: ST_TO_ADDR
// class_1 := [ class_soldier , class_sniper ] [ GetMultiplayerSetting ( 2 ) ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: LD_INT 1
 106: PUSH
 107: LD_INT 5
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: PUSH
 114: LD_INT 2
 116: PPUSH
 117: CALL_OW 426
 121: ARRAY
 122: ST_TO_ADDR
// end ; Counter ;
 123: CALL 136 0 0
// PrepareNature ;
 127: CALL 383 0 0
// InitPlayers ;
 131: CALL 938 0 0
// end ;
 135: END
// export level , test ; export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 136: LD_INT 0
 138: PPUSH
// level := 3 ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 10
 154: PUSH
 155: LD_INT 15
 157: PUSH
 158: LD_INT 20
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_EXP 1
 170: ARRAY
 171: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 172: LD_ADDR_EXP 4
 176: PUSH
 177: LD_INT 8
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 16
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_EXP 1
 195: ARRAY
 196: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 10
 207: PUSH
 208: LD_INT 15
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 1
 220: ARRAY
 221: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 222: LD_ADDR_EXP 6
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_EXP 1
 245: ARRAY
 246: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 247: LD_ADDR_EXP 7
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 10
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_EXP 1
 270: ARRAY
 271: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_EXP 1
 295: ARRAY
 296: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 297: LD_ADDR_EXP 16
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_EXP 1
 320: ARRAY
 321: ST_TO_ADDR
// PE := 5 ;
 322: LD_ADDR_EXP 10
 326: PUSH
 327: LD_INT 5
 329: ST_TO_ADDR
// PB := 10 ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 10
 337: ST_TO_ADDR
// PT := 50 ;
 338: LD_ADDR_EXP 12
 342: PUSH
 343: LD_INT 50
 345: ST_TO_ADDR
// PF := 100 ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_INT 100
 353: ST_TO_ADDR
// PH := 120 ;
 354: LD_ADDR_EXP 14
 358: PUSH
 359: LD_INT 120
 361: ST_TO_ADDR
// PM := 300 ;
 362: LD_ADDR_EXP 15
 366: PUSH
 367: LD_INT 300
 369: ST_TO_ADDR
// PA := 1000 ;
 370: LD_ADDR_EXP 16
 374: PUSH
 375: LD_INT 1000
 377: ST_TO_ADDR
// end ; end_of_file
 378: LD_VAR 0 1
 382: RET
// export function PrepareNature ; var i , animal ; begin
 383: LD_INT 0
 385: PPUSH
 386: PPUSH
 387: PPUSH
// uc_side = 0 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// uc_nation = 0 ;
 396: LD_ADDR_OWVAR 21
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// for i = 1 to B1 do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: DOUBLE
 410: LD_INT 1
 412: DEC
 413: ST_TO_ADDR
 414: LD_EXP 4
 418: PUSH
 419: FOR_TO
 420: IFFALSE 473
// begin hc_class = 18 ;
 422: LD_ADDR_OWVAR 28
 426: PUSH
 427: LD_INT 18
 429: ST_TO_ADDR
// hc_gallery = sandnature ;
 430: LD_ADDR_OWVAR 33
 434: PUSH
 435: LD_STRING sandnature
 437: ST_TO_ADDR
// hc_face_number = 1 ;
 438: LD_ADDR_OWVAR 34
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// animal := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 419
 473: POP
 474: POP
// for i = 1 to T1 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_EXP 5
 489: PUSH
 490: FOR_TO
 491: IFFALSE 560
// begin hc_class = class_tiger ;
 493: LD_ADDR_OWVAR 28
 497: PUSH
 498: LD_INT 14
 500: ST_TO_ADDR
// hc_gallery = sandnature ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING sandnature
 508: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 509: LD_ADDR_OWVAR 35
 513: PUSH
 514: LD_INT 0
 516: PPUSH
 517: LD_INT 50
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// hc_face_number = 3 ;
 525: LD_ADDR_OWVAR 34
 529: PUSH
 530: LD_INT 3
 532: ST_TO_ADDR
// animal := CreateHuman ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: CALL_OW 44
 542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_INT 2
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 49
// end ;
 558: GO 490
 560: POP
 561: POP
// for i = 1 to T1 do
 562: LD_ADDR_VAR 0 2
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_EXP 5
 576: PUSH
 577: FOR_TO
 578: IFFALSE 639
// begin hc_class = 21 ;
 580: LD_ADDR_OWVAR 28
 584: PUSH
 585: LD_INT 21
 587: ST_TO_ADDR
// hc_gallery = sandnature ;
 588: LD_ADDR_OWVAR 33
 592: PUSH
 593: LD_STRING sandnature
 595: ST_TO_ADDR
// hc_agressivity = 0 ;
 596: LD_ADDR_OWVAR 35
 600: PUSH
 601: LD_INT 0
 603: ST_TO_ADDR
// hc_face_number = 5 ;
 604: LD_ADDR_OWVAR 34
 608: PUSH
 609: LD_INT 5
 611: ST_TO_ADDR
// animal := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 622: LD_VAR 0 3
 626: PPUSH
 627: LD_INT 2
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 49
// end ;
 637: GO 577
 639: POP
 640: POP
// for i = 1 to E1 do
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_EXP 3
 655: PUSH
 656: FOR_TO
 657: IFFALSE 710
// begin hc_class = 13 ;
 659: LD_ADDR_OWVAR 28
 663: PUSH
 664: LD_INT 13
 666: ST_TO_ADDR
// hc_gallery = sandnature ;
 667: LD_ADDR_OWVAR 33
 671: PUSH
 672: LD_STRING sandnature
 674: ST_TO_ADDR
// hc_face_number = 4 ;
 675: LD_ADDR_OWVAR 34
 679: PUSH
 680: LD_INT 4
 682: ST_TO_ADDR
// animal := CreateHuman ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: CALL_OW 44
 692: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 693: LD_VAR 0 3
 697: PPUSH
 698: LD_INT 2
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ;
 708: GO 656
 710: POP
 711: POP
// for i = 1 to F1 do
 712: LD_ADDR_VAR 0 2
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_EXP 6
 726: PUSH
 727: FOR_TO
 728: IFFALSE 781
// begin hc_class = 20 ;
 730: LD_ADDR_OWVAR 28
 734: PUSH
 735: LD_INT 20
 737: ST_TO_ADDR
// hc_gallery = sandnature ;
 738: LD_ADDR_OWVAR 33
 742: PUSH
 743: LD_STRING sandnature
 745: ST_TO_ADDR
// hc_face_number = 2 ;
 746: LD_ADDR_OWVAR 34
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// animal := CreateHuman ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// end ;
 779: GO 727
 781: POP
 782: POP
// for i = 1 to M1 do
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: DOUBLE
 789: LD_INT 1
 791: DEC
 792: ST_TO_ADDR
 793: LD_EXP 8
 797: PUSH
 798: FOR_TO
 799: IFFALSE 844
// begin vc_chassis := 31 ;
 801: LD_ADDR_OWVAR 37
 805: PUSH
 806: LD_INT 31
 808: ST_TO_ADDR
// vc_control := control_rider ;
 809: LD_ADDR_OWVAR 38
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// animal := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ;
 842: GO 798
 844: POP
 845: POP
// hc_gallery :=  ;
 846: LD_ADDR_OWVAR 33
 850: PUSH
 851: LD_STRING 
 853: ST_TO_ADDR
// hc_class := class_apeman ;
 854: LD_ADDR_OWVAR 28
 858: PUSH
 859: LD_INT 12
 861: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
 862: LD_ADDR_OWVAR 29
 866: PUSH
 867: LD_INT 15
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: LD_INT 10
 887: PUSH
 888: LD_INT 10
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_name := White Apeman ;
 900: LD_ADDR_OWVAR 26
 904: PUSH
 905: LD_STRING White Apeman
 907: ST_TO_ADDR
// animal := CreateHuman ;
 908: LD_ADDR_VAR 0 3
 912: PUSH
 913: CALL_OW 44
 917: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
 918: LD_VAR 0 3
 922: PPUSH
 923: LD_INT 12
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ; end_of_file
 933: LD_VAR 0 1
 937: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
 938: LD_INT 0
 940: PPUSH
// score_player := 0 ;
 941: LD_ADDR_EXP 28
 945: PUSH
 946: LD_INT 0
 948: ST_TO_ADDR
// score_enemy1 := 0 ;
 949: LD_ADDR_EXP 29
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// score_enemy2 := 0 ;
 957: LD_ADDR_EXP 30
 961: PUSH
 962: LD_INT 0
 964: ST_TO_ADDR
// score_enemy3 := 0 ;
 965: LD_ADDR_EXP 31
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// score_enemy4 := 0 ;
 973: LD_ADDR_EXP 32
 977: PUSH
 978: LD_INT 0
 980: ST_TO_ADDR
// score_enemy5 := 0 ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_INT 0
 988: ST_TO_ADDR
// score_enemy6 := 0 ;
 989: LD_ADDR_EXP 34
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// score_enemy7 := 0 ;
 997: LD_ADDR_EXP 35
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// if difficulty > 1 then
1005: LD_OWVAR 67
1009: PUSH
1010: LD_INT 1
1012: GREATER
1013: IFFALSE 1025
// class_2 := class_sniper else
1015: LD_ADDR_EXP 26
1019: PUSH
1020: LD_INT 5
1022: ST_TO_ADDR
1023: GO 1033
// class_2 := class_soldier ;
1025: LD_ADDR_EXP 26
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// uc_side := 1 ;
1033: LD_ADDR_OWVAR 20
1037: PUSH
1038: LD_INT 1
1040: ST_TO_ADDR
// uc_nation := 1 ;
1041: LD_ADDR_OWVAR 21
1045: PUSH
1046: LD_INT 1
1048: ST_TO_ADDR
// hc_name :=  ;
1049: LD_ADDR_OWVAR 26
1053: PUSH
1054: LD_STRING 
1056: ST_TO_ADDR
// hc_sex := sex_male ;
1057: LD_ADDR_OWVAR 27
1061: PUSH
1062: LD_INT 1
1064: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1065: LD_ADDR_OWVAR 29
1069: PUSH
1070: LD_INT 12
1072: PUSH
1073: LD_INT 11
1075: PUSH
1076: LD_INT 10
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_OWVAR 67
1088: ARRAY
1089: PUSH
1090: LD_INT 10
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: ST_TO_ADDR
// hc_class := class_1 ;
1097: LD_ADDR_OWVAR 28
1101: PUSH
1102: LD_EXP 25
1106: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1107: LD_ADDR_OWVAR 31
1111: PUSH
1112: LD_INT 10
1114: PUSH
1115: LD_INT 7
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_OWVAR 67
1130: ARRAY
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: LD_INT 0
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: ST_TO_ADDR
// hc_gallery :=  ;
1147: LD_ADDR_OWVAR 33
1151: PUSH
1152: LD_STRING 
1154: ST_TO_ADDR
// player := CreateHuman ;
1155: LD_ADDR_EXP 19
1159: PUSH
1160: CALL_OW 44
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1173: LD_ADDR_EXP 26
1177: PUSH
1178: LD_INT 5
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 1
1190: PPUSH
1191: LD_INT 2
1193: PPUSH
1194: CALL_OW 12
1198: ARRAY
1199: ST_TO_ADDR
// hc_sex := sex_male ;
1200: LD_ADDR_OWVAR 27
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1208: LD_ADDR_OWVAR 29
1212: PUSH
1213: LD_INT 11
1215: PUSH
1216: LD_INT 12
1218: PUSH
1219: LD_INT 13
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_OWVAR 67
1231: ARRAY
1232: PUSH
1233: LD_INT 10
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: ST_TO_ADDR
// hc_class := class_2 ;
1240: LD_ADDR_OWVAR 28
1244: PUSH
1245: LD_EXP 26
1249: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1250: LD_ADDR_OWVAR 31
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 9
1260: PUSH
1261: LD_INT 10
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_OWVAR 67
1273: ARRAY
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 0
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: ST_TO_ADDR
// hc_gallery :=  ;
1290: LD_ADDR_OWVAR 33
1294: PUSH
1295: LD_STRING 
1297: ST_TO_ADDR
// player_1 := CreateHuman ;
1298: LD_ADDR_EXP 17
1302: PUSH
1303: CALL_OW 44
1307: ST_TO_ADDR
// uc_side := 3 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 3
1315: ST_TO_ADDR
// uc_nation := 1 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// hc_sex := sex_male ;
1324: LD_ADDR_OWVAR 27
1328: PUSH
1329: LD_INT 1
1331: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1332: LD_ADDR_OWVAR 29
1336: PUSH
1337: LD_INT 10
1339: PUSH
1340: LD_INT 11
1342: PUSH
1343: LD_INT 12
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: PUSH
1351: LD_OWVAR 67
1355: ARRAY
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1364: LD_ADDR_EXP 26
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 2
1384: PPUSH
1385: CALL_OW 12
1389: ARRAY
1390: ST_TO_ADDR
// hc_class := class_2 ;
1391: LD_ADDR_OWVAR 28
1395: PUSH
1396: LD_EXP 26
1400: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1401: LD_ADDR_OWVAR 31
1405: PUSH
1406: LD_INT 5
1408: PUSH
1409: LD_INT 7
1411: PUSH
1412: LD_INT 10
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_OWVAR 67
1424: ARRAY
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: ST_TO_ADDR
// hc_gallery :=  ;
1441: LD_ADDR_OWVAR 33
1445: PUSH
1446: LD_STRING 
1448: ST_TO_ADDR
// player_2 := CreateHuman ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: CALL_OW 44
1458: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1459: LD_ADDR_EXP 26
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 2
1479: PPUSH
1480: CALL_OW 12
1484: ARRAY
1485: ST_TO_ADDR
// hc_class := class_2 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_EXP 26
1495: ST_TO_ADDR
// player_3 := CreateHuman ;
1496: LD_ADDR_EXP 20
1500: PUSH
1501: CALL_OW 44
1505: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1506: LD_ADDR_EXP 26
1510: PUSH
1511: LD_INT 5
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PPUSH
1524: LD_INT 2
1526: PPUSH
1527: CALL_OW 12
1531: ARRAY
1532: ST_TO_ADDR
// hc_class := class_2 ;
1533: LD_ADDR_OWVAR 28
1537: PUSH
1538: LD_EXP 26
1542: ST_TO_ADDR
// player_4 := CreateHuman ;
1543: LD_ADDR_EXP 21
1547: PUSH
1548: CALL_OW 44
1552: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_INT 5
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 2
1573: PPUSH
1574: CALL_OW 12
1578: ARRAY
1579: ST_TO_ADDR
// hc_class := class_2 ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_EXP 26
1589: ST_TO_ADDR
// player_5 := CreateHuman ;
1590: LD_ADDR_EXP 22
1594: PUSH
1595: CALL_OW 44
1599: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1600: LD_ADDR_EXP 26
1604: PUSH
1605: LD_INT 5
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 2
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// hc_class := class_2 ;
1627: LD_ADDR_OWVAR 28
1631: PUSH
1632: LD_EXP 26
1636: ST_TO_ADDR
// player_6 := CreateHuman ;
1637: LD_ADDR_EXP 23
1641: PUSH
1642: CALL_OW 44
1646: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1647: LD_ADDR_EXP 26
1651: PUSH
1652: LD_INT 5
1654: PUSH
1655: LD_INT 1
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 1
1664: PPUSH
1665: LD_INT 2
1667: PPUSH
1668: CALL_OW 12
1672: ARRAY
1673: ST_TO_ADDR
// hc_class := class_2 ;
1674: LD_ADDR_OWVAR 28
1678: PUSH
1679: LD_EXP 26
1683: ST_TO_ADDR
// player_7 := CreateHuman ;
1684: LD_ADDR_EXP 24
1688: PUSH
1689: CALL_OW 44
1693: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1694: LD_EXP 17
1698: PPUSH
1699: LD_INT 4
1701: PPUSH
1702: LD_INT 0
1704: PPUSH
1705: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1709: LD_EXP 18
1713: PPUSH
1714: LD_INT 5
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1724: LD_EXP 19
1728: PPUSH
1729: LD_INT 7
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1739: LD_EXP 20
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1754: LD_EXP 21
1758: PPUSH
1759: LD_INT 8
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1769: LD_EXP 22
1773: PPUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 0
1779: PPUSH
1780: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1784: LD_EXP 23
1788: PPUSH
1789: LD_INT 10
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1799: LD_EXP 24
1803: PPUSH
1804: LD_INT 11
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1814: LD_EXP 19
1818: PPUSH
1819: CALL_OW 87
// end ;
1823: LD_VAR 0 1
1827: RET
// every 0 0$01 trigger player do var i , un , tab ;
1828: LD_EXP 19
1832: IFFALSE 2161
1834: GO 1836
1836: DISABLE
1837: LD_INT 0
1839: PPUSH
1840: PPUSH
1841: PPUSH
// begin enable ;
1842: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
1843: LD_ADDR_VAR 0 3
1847: PUSH
1848: LD_EXP 17
1852: PUSH
1853: LD_EXP 18
1857: PUSH
1858: LD_EXP 20
1862: PUSH
1863: LD_EXP 21
1867: PUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_EXP 23
1877: PUSH
1878: LD_EXP 24
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: LD_VAR 0 3
1901: PPUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 250
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PPUSH
1912: CALL_OW 72
1916: ST_TO_ADDR
// for i = 1 to un do
1917: LD_ADDR_VAR 0 1
1921: PUSH
1922: DOUBLE
1923: LD_INT 1
1925: DEC
1926: ST_TO_ADDR
1927: LD_VAR 0 2
1931: PUSH
1932: FOR_TO
1933: IFFALSE 2159
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
1935: LD_VAR 0 2
1939: PUSH
1940: LD_VAR 0 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 300
1950: PUSH
1951: LD_VAR 0 2
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: CALL_OW 314
1966: NOT
1967: AND
1968: IFFALSE 2157
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
1970: LD_INT 22
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 69
1984: PPUSH
1985: LD_VAR 0 2
1989: PUSH
1990: LD_VAR 0 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 74
2000: PPUSH
2001: LD_VAR 0 2
2005: PUSH
2006: LD_VAR 0 1
2010: ARRAY
2011: PPUSH
2012: CALL_OW 296
2016: PUSH
2017: LD_INT 8
2019: GREATER
2020: IFFALSE 2111
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2022: LD_VAR 0 2
2026: PUSH
2027: LD_VAR 0 1
2031: ARRAY
2032: PPUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PPUSH
2043: CALL_OW 69
2047: PPUSH
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 1
2057: ARRAY
2058: PPUSH
2059: CALL_OW 74
2063: PPUSH
2064: CALL_OW 250
2068: PPUSH
2069: LD_INT 22
2071: PUSH
2072: LD_INT 0
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL_OW 69
2083: PPUSH
2084: LD_VAR 0 2
2088: PUSH
2089: LD_VAR 0 1
2093: ARRAY
2094: PPUSH
2095: CALL_OW 74
2099: PPUSH
2100: CALL_OW 251
2104: PPUSH
2105: CALL_OW 111
2109: GO 2157
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2111: LD_VAR 0 2
2115: PUSH
2116: LD_VAR 0 1
2120: ARRAY
2121: PPUSH
2122: LD_INT 22
2124: PUSH
2125: LD_INT 0
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_VAR 0 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 74
2152: PPUSH
2153: CALL_OW 115
// end ;
2157: GO 1932
2159: POP
2160: POP
// end ; end_of_file
2161: PPOPN 3
2163: END
// on UnitGoesToRed ( un ) do begin if un = player then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_EXP 19
2173: EQUAL
2174: IFFALSE 2183
// YouLost ( hunt2 ) ;
2176: LD_STRING hunt2
2178: PPUSH
2179: CALL_OW 104
// end ;
2183: PPOPN 1
2185: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var players , score , play ;
2186: LD_INT 0
2188: PPUSH
2189: PPUSH
2190: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_EXP 19
2200: PUSH
2201: LD_EXP 17
2205: PUSH
2206: LD_EXP 18
2210: PUSH
2211: LD_EXP 20
2215: PUSH
2216: LD_EXP 21
2220: PUSH
2221: LD_EXP 22
2225: PUSH
2226: LD_EXP 23
2230: PUSH
2231: LD_EXP 24
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2246: LD_VAR 0 1
2250: PPUSH
2251: CALL_OW 255
2255: PUSH
2256: LD_INT 0
2258: EQUAL
2259: PUSH
2260: LD_VAR 0 1
2264: PPUSH
2265: CALL_OW 110
2269: PUSH
2270: LD_INT 100
2272: NEG
2273: NONEQUAL
2274: AND
2275: IFFALSE 2673
// begin play := killer_unit ;
2277: LD_ADDR_VAR 0 6
2281: PUSH
2282: LD_VAR 0 3
2286: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2287: LD_VAR 0 1
2291: PPUSH
2292: CALL_OW 257
2296: PUSH
2297: LD_INT 18
2299: DOUBLE
2300: EQUAL
2301: IFTRUE 2305
2303: GO 2318
2305: POP
// score := PB ; class_tiger :
2306: LD_ADDR_VAR 0 5
2310: PUSH
2311: LD_EXP 11
2315: ST_TO_ADDR
2316: GO 2424
2318: LD_INT 14
2320: DOUBLE
2321: EQUAL
2322: IFTRUE 2326
2324: GO 2339
2326: POP
// score := PT ; class_fish :
2327: LD_ADDR_VAR 0 5
2331: PUSH
2332: LD_EXP 12
2336: ST_TO_ADDR
2337: GO 2424
2339: LD_INT 20
2341: DOUBLE
2342: EQUAL
2343: IFTRUE 2347
2345: GO 2360
2347: POP
// score := PF ; 21 :
2348: LD_ADDR_VAR 0 5
2352: PUSH
2353: LD_EXP 13
2357: ST_TO_ADDR
2358: GO 2424
2360: LD_INT 21
2362: DOUBLE
2363: EQUAL
2364: IFTRUE 2368
2366: GO 2381
2368: POP
// score := PH ; 13 :
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_EXP 14
2378: ST_TO_ADDR
2379: GO 2424
2381: LD_INT 13
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2402
2389: POP
// score := PE ; class_apeman :
2390: LD_ADDR_VAR 0 5
2394: PUSH
2395: LD_EXP 10
2399: ST_TO_ADDR
2400: GO 2424
2402: LD_INT 12
2404: DOUBLE
2405: EQUAL
2406: IFTRUE 2410
2408: GO 2423
2410: POP
// score := PA ; end ;
2411: LD_ADDR_VAR 0 5
2415: PUSH
2416: LD_EXP 16
2420: ST_TO_ADDR
2421: GO 2424
2423: POP
// if GetChassis ( un ) = 31 then
2424: LD_VAR 0 1
2428: PPUSH
2429: CALL_OW 265
2433: PUSH
2434: LD_INT 31
2436: EQUAL
2437: IFFALSE 2449
// score := PM ;
2439: LD_ADDR_VAR 0 5
2443: PUSH
2444: LD_EXP 15
2448: ST_TO_ADDR
// if play = player then
2449: LD_VAR 0 6
2453: PUSH
2454: LD_EXP 19
2458: EQUAL
2459: IFFALSE 2477
// score_player := score_player + score ;
2461: LD_ADDR_EXP 28
2465: PUSH
2466: LD_EXP 28
2470: PUSH
2471: LD_VAR 0 5
2475: PLUS
2476: ST_TO_ADDR
// if play = player_1 then
2477: LD_VAR 0 6
2481: PUSH
2482: LD_EXP 17
2486: EQUAL
2487: IFFALSE 2505
// score_enemy1 := score_enemy1 + score ;
2489: LD_ADDR_EXP 29
2493: PUSH
2494: LD_EXP 29
2498: PUSH
2499: LD_VAR 0 5
2503: PLUS
2504: ST_TO_ADDR
// if play = player_2 then
2505: LD_VAR 0 6
2509: PUSH
2510: LD_EXP 18
2514: EQUAL
2515: IFFALSE 2533
// score_enemy2 := score_enemy2 + score ;
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_EXP 30
2526: PUSH
2527: LD_VAR 0 5
2531: PLUS
2532: ST_TO_ADDR
// if play = player_3 then
2533: LD_VAR 0 6
2537: PUSH
2538: LD_EXP 20
2542: EQUAL
2543: IFFALSE 2561
// score_enemy3 := score_enemy3 + score ;
2545: LD_ADDR_EXP 31
2549: PUSH
2550: LD_EXP 31
2554: PUSH
2555: LD_VAR 0 5
2559: PLUS
2560: ST_TO_ADDR
// if play = player_4 then
2561: LD_VAR 0 6
2565: PUSH
2566: LD_EXP 21
2570: EQUAL
2571: IFFALSE 2589
// score_enemy4 := score_enemy4 + score ;
2573: LD_ADDR_EXP 32
2577: PUSH
2578: LD_EXP 32
2582: PUSH
2583: LD_VAR 0 5
2587: PLUS
2588: ST_TO_ADDR
// if play = player_5 then
2589: LD_VAR 0 6
2593: PUSH
2594: LD_EXP 22
2598: EQUAL
2599: IFFALSE 2617
// score_enemy5 := score_enemy5 + score ;
2601: LD_ADDR_EXP 33
2605: PUSH
2606: LD_EXP 33
2610: PUSH
2611: LD_VAR 0 5
2615: PLUS
2616: ST_TO_ADDR
// if play = player_6 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_EXP 23
2626: EQUAL
2627: IFFALSE 2645
// score_enemy6 := score_enemy6 + score ;
2629: LD_ADDR_EXP 34
2633: PUSH
2634: LD_EXP 34
2638: PUSH
2639: LD_VAR 0 5
2643: PLUS
2644: ST_TO_ADDR
// if play = player_7 then
2645: LD_VAR 0 6
2649: PUSH
2650: LD_EXP 24
2654: EQUAL
2655: IFFALSE 2673
// score_enemy7 := score_enemy7 + score ;
2657: LD_ADDR_EXP 35
2661: PUSH
2662: LD_EXP 35
2666: PUSH
2667: LD_VAR 0 5
2671: PLUS
2672: ST_TO_ADDR
// end ; end ;
2673: PPOPN 6
2675: END
// every 10 do
2676: GO 2678
2678: DISABLE
// begin enable ;
2679: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
2680: LD_ADDR_OWVAR 47
2684: PUSH
2685: LD_STRING #player1
2687: PUSH
2688: LD_EXP 28
2692: PUSH
2693: LD_STRING #player2
2695: PUSH
2696: LD_EXP 29
2700: PUSH
2701: LD_STRING #player3
2703: PUSH
2704: LD_EXP 30
2708: PUSH
2709: LD_STRING #player4
2711: PUSH
2712: LD_EXP 31
2716: PUSH
2717: LD_STRING #player5
2719: PUSH
2720: LD_EXP 32
2724: PUSH
2725: LD_STRING #player6
2727: PUSH
2728: LD_EXP 33
2732: PUSH
2733: LD_STRING #player7
2735: PUSH
2736: LD_EXP 34
2740: PUSH
2741: LD_STRING #player8
2743: PUSH
2744: LD_EXP 35
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: ST_TO_ADDR
// end ;
2767: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
2768: LD_VAR 0 1
2772: PUSH
2773: LD_OWVAR 2
2777: EQUAL
2778: PUSH
2779: LD_VAR 0 2
2783: PUSH
2784: LD_INT 0
2786: GREATER
2787: AND
2788: IFFALSE 2797
// YouLost ( hunt1 ) ;
2790: LD_STRING hunt1
2792: PPUSH
2793: CALL_OW 104
// end ;
2797: PPOPN 2
2799: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
2800: LD_INT 22
2802: PUSH
2803: LD_INT 0
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 69
2814: PUSH
2815: LD_INT 0
2817: EQUAL
2818: IFFALSE 2927
2820: GO 2822
2822: DISABLE
// begin Wait ( 0 0$03 ) ;
2823: LD_INT 105
2825: PPUSH
2826: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
2830: LD_EXP 28
2834: PUSH
2835: LD_EXP 29
2839: GREATER
2840: PUSH
2841: LD_EXP 28
2845: PUSH
2846: LD_EXP 30
2850: GREATER
2851: AND
2852: PUSH
2853: LD_EXP 28
2857: PUSH
2858: LD_EXP 31
2862: GREATER
2863: AND
2864: PUSH
2865: LD_EXP 28
2869: PUSH
2870: LD_EXP 32
2874: GREATER
2875: AND
2876: PUSH
2877: LD_EXP 28
2881: PUSH
2882: LD_EXP 33
2886: GREATER
2887: AND
2888: PUSH
2889: LD_EXP 28
2893: PUSH
2894: LD_EXP 34
2898: GREATER
2899: AND
2900: PUSH
2901: LD_EXP 28
2905: PUSH
2906: LD_EXP 35
2910: GREATER
2911: AND
2912: IFFALSE 2920
// YouWin else
2914: CALL_OW 103
2918: GO 2927
// YouLost ( hunt3 ) ;
2920: LD_STRING hunt3
2922: PPUSH
2923: CALL_OW 104
// end ; end_of_file end_of_file
2927: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
2928: GO 2930
2930: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2931: LD_STRING initStreamRollete();
2933: PPUSH
2934: CALL_OW 559
// InitStreamMode ;
2938: CALL 2947 0 0
// DefineStreamItems ( ) ;
2942: CALL 3387 0 0
// end ;
2946: END
// function InitStreamMode ; begin
2947: LD_INT 0
2949: PPUSH
// streamModeActive := false ;
2950: LD_ADDR_EXP 36
2954: PUSH
2955: LD_INT 0
2957: ST_TO_ADDR
// normalCounter := 36 ;
2958: LD_ADDR_EXP 37
2962: PUSH
2963: LD_INT 36
2965: ST_TO_ADDR
// hardcoreCounter := 16 ;
2966: LD_ADDR_EXP 38
2970: PUSH
2971: LD_INT 16
2973: ST_TO_ADDR
// sRocket := false ;
2974: LD_ADDR_EXP 41
2978: PUSH
2979: LD_INT 0
2981: ST_TO_ADDR
// sSpeed := false ;
2982: LD_ADDR_EXP 40
2986: PUSH
2987: LD_INT 0
2989: ST_TO_ADDR
// sEngine := false ;
2990: LD_ADDR_EXP 42
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// sSpec := false ;
2998: LD_ADDR_EXP 39
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// sLevel := false ;
3006: LD_ADDR_EXP 43
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// sArmoury := false ;
3014: LD_ADDR_EXP 44
3018: PUSH
3019: LD_INT 0
3021: ST_TO_ADDR
// sRadar := false ;
3022: LD_ADDR_EXP 45
3026: PUSH
3027: LD_INT 0
3029: ST_TO_ADDR
// sBunker := false ;
3030: LD_ADDR_EXP 46
3034: PUSH
3035: LD_INT 0
3037: ST_TO_ADDR
// sHack := false ;
3038: LD_ADDR_EXP 47
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// sFire := false ;
3046: LD_ADDR_EXP 48
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// sRefresh := false ;
3054: LD_ADDR_EXP 49
3058: PUSH
3059: LD_INT 0
3061: ST_TO_ADDR
// sExp := false ;
3062: LD_ADDR_EXP 50
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// sDepot := false ;
3070: LD_ADDR_EXP 51
3074: PUSH
3075: LD_INT 0
3077: ST_TO_ADDR
// sFlag := false ;
3078: LD_ADDR_EXP 52
3082: PUSH
3083: LD_INT 0
3085: ST_TO_ADDR
// sKamikadze := false ;
3086: LD_ADDR_EXP 60
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// sTroll := false ;
3094: LD_ADDR_EXP 61
3098: PUSH
3099: LD_INT 0
3101: ST_TO_ADDR
// sSlow := false ;
3102: LD_ADDR_EXP 62
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// sLack := false ;
3110: LD_ADDR_EXP 63
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sTank := false ;
3118: LD_ADDR_EXP 65
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sRemote := false ;
3126: LD_ADDR_EXP 66
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sPowell := false ;
3134: LD_ADDR_EXP 67
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sTeleport := false ;
3142: LD_ADDR_EXP 70
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sOilTower := false ;
3150: LD_ADDR_EXP 72
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sShovel := false ;
3158: LD_ADDR_EXP 73
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sSheik := false ;
3166: LD_ADDR_EXP 74
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sEarthquake := false ;
3174: LD_ADDR_EXP 76
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sAI := false ;
3182: LD_ADDR_EXP 77
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sCargo := false ;
3190: LD_ADDR_EXP 80
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sDLaser := false ;
3198: LD_ADDR_EXP 81
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sExchange := false ;
3206: LD_ADDR_EXP 82
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sFac := false ;
3214: LD_ADDR_EXP 83
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sPower := false ;
3222: LD_ADDR_EXP 84
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sRandom := false ;
3230: LD_ADDR_EXP 85
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sShield := false ;
3238: LD_ADDR_EXP 86
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sTime := false ;
3246: LD_ADDR_EXP 87
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sTools := false ;
3254: LD_ADDR_EXP 88
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sSold := false ;
3262: LD_ADDR_EXP 53
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sDiff := false ;
3270: LD_ADDR_EXP 54
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sFog := false ;
3278: LD_ADDR_EXP 57
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sReset := false ;
3286: LD_ADDR_EXP 58
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sSun := false ;
3294: LD_ADDR_EXP 59
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sTiger := false ;
3302: LD_ADDR_EXP 55
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sBomb := false ;
3310: LD_ADDR_EXP 56
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sWound := false ;
3318: LD_ADDR_EXP 64
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sBetray := false ;
3326: LD_ADDR_EXP 68
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sContamin := false ;
3334: LD_ADDR_EXP 69
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sOil := false ;
3342: LD_ADDR_EXP 71
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sStu := false ;
3350: LD_ADDR_EXP 75
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sBazooka := false ;
3358: LD_ADDR_EXP 78
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sMortar := false ;
3366: LD_ADDR_EXP 79
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sRanger := false ;
3374: LD_ADDR_EXP 89
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// end ;
3382: LD_VAR 0 1
3386: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3387: LD_INT 0
3389: PPUSH
3390: PPUSH
3391: PPUSH
3392: PPUSH
3393: PPUSH
// result := [ ] ;
3394: LD_ADDR_VAR 0 1
3398: PUSH
3399: EMPTY
3400: ST_TO_ADDR
// if campaign_id = 1 then
3401: LD_OWVAR 69
3405: PUSH
3406: LD_INT 1
3408: EQUAL
3409: IFFALSE 6347
// begin case mission_number of 1 :
3411: LD_OWVAR 70
3415: PUSH
3416: LD_INT 1
3418: DOUBLE
3419: EQUAL
3420: IFTRUE 3424
3422: GO 3488
3424: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3425: LD_ADDR_VAR 0 1
3429: PUSH
3430: LD_INT 2
3432: PUSH
3433: LD_INT 4
3435: PUSH
3436: LD_INT 11
3438: PUSH
3439: LD_INT 12
3441: PUSH
3442: LD_INT 15
3444: PUSH
3445: LD_INT 16
3447: PUSH
3448: LD_INT 22
3450: PUSH
3451: LD_INT 23
3453: PUSH
3454: LD_INT 26
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: PUSH
3468: LD_INT 101
3470: PUSH
3471: LD_INT 102
3473: PUSH
3474: LD_INT 106
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: ST_TO_ADDR
3486: GO 6345
3488: LD_INT 2
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3568
3496: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3497: LD_ADDR_VAR 0 1
3501: PUSH
3502: LD_INT 2
3504: PUSH
3505: LD_INT 4
3507: PUSH
3508: LD_INT 11
3510: PUSH
3511: LD_INT 12
3513: PUSH
3514: LD_INT 15
3516: PUSH
3517: LD_INT 16
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 23
3525: PUSH
3526: LD_INT 26
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 101
3542: PUSH
3543: LD_INT 102
3545: PUSH
3546: LD_INT 105
3548: PUSH
3549: LD_INT 106
3551: PUSH
3552: LD_INT 108
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: ST_TO_ADDR
3566: GO 6345
3568: LD_INT 3
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3652
3576: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3577: LD_ADDR_VAR 0 1
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: LD_INT 4
3587: PUSH
3588: LD_INT 5
3590: PUSH
3591: LD_INT 11
3593: PUSH
3594: LD_INT 12
3596: PUSH
3597: LD_INT 15
3599: PUSH
3600: LD_INT 16
3602: PUSH
3603: LD_INT 22
3605: PUSH
3606: LD_INT 26
3608: PUSH
3609: LD_INT 36
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 101
3626: PUSH
3627: LD_INT 102
3629: PUSH
3630: LD_INT 105
3632: PUSH
3633: LD_INT 106
3635: PUSH
3636: LD_INT 108
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: ST_TO_ADDR
3650: GO 6345
3652: LD_INT 4
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3744
3660: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3661: LD_ADDR_VAR 0 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: LD_INT 5
3674: PUSH
3675: LD_INT 8
3677: PUSH
3678: LD_INT 11
3680: PUSH
3681: LD_INT 12
3683: PUSH
3684: LD_INT 15
3686: PUSH
3687: LD_INT 16
3689: PUSH
3690: LD_INT 22
3692: PUSH
3693: LD_INT 23
3695: PUSH
3696: LD_INT 26
3698: PUSH
3699: LD_INT 36
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 101
3718: PUSH
3719: LD_INT 102
3721: PUSH
3722: LD_INT 105
3724: PUSH
3725: LD_INT 106
3727: PUSH
3728: LD_INT 108
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: ST_TO_ADDR
3742: GO 6345
3744: LD_INT 5
3746: DOUBLE
3747: EQUAL
3748: IFTRUE 3752
3750: GO 3852
3752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3753: LD_ADDR_VAR 0 1
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 4
3763: PUSH
3764: LD_INT 5
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 11
3775: PUSH
3776: LD_INT 12
3778: PUSH
3779: LD_INT 15
3781: PUSH
3782: LD_INT 16
3784: PUSH
3785: LD_INT 22
3787: PUSH
3788: LD_INT 23
3790: PUSH
3791: LD_INT 25
3793: PUSH
3794: LD_INT 26
3796: PUSH
3797: LD_INT 36
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 101
3818: PUSH
3819: LD_INT 102
3821: PUSH
3822: LD_INT 105
3824: PUSH
3825: LD_INT 106
3827: PUSH
3828: LD_INT 108
3830: PUSH
3831: LD_INT 109
3833: PUSH
3834: LD_INT 112
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: ST_TO_ADDR
3850: GO 6345
3852: LD_INT 6
3854: DOUBLE
3855: EQUAL
3856: IFTRUE 3860
3858: GO 3980
3860: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 4
3871: PUSH
3872: LD_INT 5
3874: PUSH
3875: LD_INT 6
3877: PUSH
3878: LD_INT 8
3880: PUSH
3881: LD_INT 11
3883: PUSH
3884: LD_INT 12
3886: PUSH
3887: LD_INT 15
3889: PUSH
3890: LD_INT 16
3892: PUSH
3893: LD_INT 20
3895: PUSH
3896: LD_INT 21
3898: PUSH
3899: LD_INT 22
3901: PUSH
3902: LD_INT 23
3904: PUSH
3905: LD_INT 25
3907: PUSH
3908: LD_INT 26
3910: PUSH
3911: LD_INT 30
3913: PUSH
3914: LD_INT 31
3916: PUSH
3917: LD_INT 32
3919: PUSH
3920: LD_INT 36
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 101
3946: PUSH
3947: LD_INT 102
3949: PUSH
3950: LD_INT 105
3952: PUSH
3953: LD_INT 106
3955: PUSH
3956: LD_INT 108
3958: PUSH
3959: LD_INT 109
3961: PUSH
3962: LD_INT 112
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: ST_TO_ADDR
3978: GO 6345
3980: LD_INT 7
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4088
3988: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: LD_INT 7
4005: PUSH
4006: LD_INT 11
4008: PUSH
4009: LD_INT 12
4011: PUSH
4012: LD_INT 15
4014: PUSH
4015: LD_INT 16
4017: PUSH
4018: LD_INT 20
4020: PUSH
4021: LD_INT 21
4023: PUSH
4024: LD_INT 22
4026: PUSH
4027: LD_INT 23
4029: PUSH
4030: LD_INT 25
4032: PUSH
4033: LD_INT 26
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 101
4054: PUSH
4055: LD_INT 102
4057: PUSH
4058: LD_INT 103
4060: PUSH
4061: LD_INT 105
4063: PUSH
4064: LD_INT 106
4066: PUSH
4067: LD_INT 108
4069: PUSH
4070: LD_INT 112
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: ST_TO_ADDR
4086: GO 6345
4088: LD_INT 8
4090: DOUBLE
4091: EQUAL
4092: IFTRUE 4096
4094: GO 4224
4096: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4097: LD_ADDR_VAR 0 1
4101: PUSH
4102: LD_INT 2
4104: PUSH
4105: LD_INT 4
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 6
4113: PUSH
4114: LD_INT 7
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 11
4122: PUSH
4123: LD_INT 12
4125: PUSH
4126: LD_INT 15
4128: PUSH
4129: LD_INT 16
4131: PUSH
4132: LD_INT 20
4134: PUSH
4135: LD_INT 21
4137: PUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 23
4143: PUSH
4144: LD_INT 25
4146: PUSH
4147: LD_INT 26
4149: PUSH
4150: LD_INT 30
4152: PUSH
4153: LD_INT 31
4155: PUSH
4156: LD_INT 32
4158: PUSH
4159: LD_INT 36
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 101
4186: PUSH
4187: LD_INT 102
4189: PUSH
4190: LD_INT 103
4192: PUSH
4193: LD_INT 105
4195: PUSH
4196: LD_INT 106
4198: PUSH
4199: LD_INT 108
4201: PUSH
4202: LD_INT 109
4204: PUSH
4205: LD_INT 112
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
4222: GO 6345
4224: LD_INT 9
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4368
4232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4233: LD_ADDR_VAR 0 1
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 6
4249: PUSH
4250: LD_INT 7
4252: PUSH
4253: LD_INT 8
4255: PUSH
4256: LD_INT 11
4258: PUSH
4259: LD_INT 12
4261: PUSH
4262: LD_INT 15
4264: PUSH
4265: LD_INT 16
4267: PUSH
4268: LD_INT 20
4270: PUSH
4271: LD_INT 21
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 23
4279: PUSH
4280: LD_INT 25
4282: PUSH
4283: LD_INT 26
4285: PUSH
4286: LD_INT 28
4288: PUSH
4289: LD_INT 30
4291: PUSH
4292: LD_INT 31
4294: PUSH
4295: LD_INT 32
4297: PUSH
4298: LD_INT 36
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 101
4326: PUSH
4327: LD_INT 102
4329: PUSH
4330: LD_INT 103
4332: PUSH
4333: LD_INT 105
4335: PUSH
4336: LD_INT 106
4338: PUSH
4339: LD_INT 108
4341: PUSH
4342: LD_INT 109
4344: PUSH
4345: LD_INT 112
4347: PUSH
4348: LD_INT 114
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: ST_TO_ADDR
4366: GO 6345
4368: LD_INT 10
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4560
4376: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4377: LD_ADDR_VAR 0 1
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 4
4387: PUSH
4388: LD_INT 5
4390: PUSH
4391: LD_INT 6
4393: PUSH
4394: LD_INT 7
4396: PUSH
4397: LD_INT 8
4399: PUSH
4400: LD_INT 9
4402: PUSH
4403: LD_INT 10
4405: PUSH
4406: LD_INT 11
4408: PUSH
4409: LD_INT 12
4411: PUSH
4412: LD_INT 13
4414: PUSH
4415: LD_INT 14
4417: PUSH
4418: LD_INT 15
4420: PUSH
4421: LD_INT 16
4423: PUSH
4424: LD_INT 17
4426: PUSH
4427: LD_INT 18
4429: PUSH
4430: LD_INT 19
4432: PUSH
4433: LD_INT 20
4435: PUSH
4436: LD_INT 21
4438: PUSH
4439: LD_INT 22
4441: PUSH
4442: LD_INT 23
4444: PUSH
4445: LD_INT 24
4447: PUSH
4448: LD_INT 25
4450: PUSH
4451: LD_INT 26
4453: PUSH
4454: LD_INT 28
4456: PUSH
4457: LD_INT 30
4459: PUSH
4460: LD_INT 31
4462: PUSH
4463: LD_INT 32
4465: PUSH
4466: LD_INT 36
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 101
4502: PUSH
4503: LD_INT 102
4505: PUSH
4506: LD_INT 103
4508: PUSH
4509: LD_INT 104
4511: PUSH
4512: LD_INT 105
4514: PUSH
4515: LD_INT 106
4517: PUSH
4518: LD_INT 107
4520: PUSH
4521: LD_INT 108
4523: PUSH
4524: LD_INT 109
4526: PUSH
4527: LD_INT 110
4529: PUSH
4530: LD_INT 111
4532: PUSH
4533: LD_INT 112
4535: PUSH
4536: LD_INT 114
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 6345
4560: LD_INT 11
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4760
4568: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4569: LD_ADDR_VAR 0 1
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: LD_INT 5
4585: PUSH
4586: LD_INT 6
4588: PUSH
4589: LD_INT 7
4591: PUSH
4592: LD_INT 8
4594: PUSH
4595: LD_INT 9
4597: PUSH
4598: LD_INT 10
4600: PUSH
4601: LD_INT 11
4603: PUSH
4604: LD_INT 12
4606: PUSH
4607: LD_INT 13
4609: PUSH
4610: LD_INT 14
4612: PUSH
4613: LD_INT 15
4615: PUSH
4616: LD_INT 16
4618: PUSH
4619: LD_INT 17
4621: PUSH
4622: LD_INT 18
4624: PUSH
4625: LD_INT 19
4627: PUSH
4628: LD_INT 20
4630: PUSH
4631: LD_INT 21
4633: PUSH
4634: LD_INT 22
4636: PUSH
4637: LD_INT 23
4639: PUSH
4640: LD_INT 24
4642: PUSH
4643: LD_INT 25
4645: PUSH
4646: LD_INT 26
4648: PUSH
4649: LD_INT 28
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 31
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 34
4663: PUSH
4664: LD_INT 36
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 101
4702: PUSH
4703: LD_INT 102
4705: PUSH
4706: LD_INT 103
4708: PUSH
4709: LD_INT 104
4711: PUSH
4712: LD_INT 105
4714: PUSH
4715: LD_INT 106
4717: PUSH
4718: LD_INT 107
4720: PUSH
4721: LD_INT 108
4723: PUSH
4724: LD_INT 109
4726: PUSH
4727: LD_INT 110
4729: PUSH
4730: LD_INT 111
4732: PUSH
4733: LD_INT 112
4735: PUSH
4736: LD_INT 114
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: ST_TO_ADDR
4758: GO 6345
4760: LD_INT 12
4762: DOUBLE
4763: EQUAL
4764: IFTRUE 4768
4766: GO 4976
4768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4769: LD_ADDR_VAR 0 1
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: LD_INT 2
4779: PUSH
4780: LD_INT 3
4782: PUSH
4783: LD_INT 4
4785: PUSH
4786: LD_INT 5
4788: PUSH
4789: LD_INT 6
4791: PUSH
4792: LD_INT 7
4794: PUSH
4795: LD_INT 8
4797: PUSH
4798: LD_INT 9
4800: PUSH
4801: LD_INT 10
4803: PUSH
4804: LD_INT 11
4806: PUSH
4807: LD_INT 12
4809: PUSH
4810: LD_INT 13
4812: PUSH
4813: LD_INT 14
4815: PUSH
4816: LD_INT 15
4818: PUSH
4819: LD_INT 16
4821: PUSH
4822: LD_INT 17
4824: PUSH
4825: LD_INT 18
4827: PUSH
4828: LD_INT 19
4830: PUSH
4831: LD_INT 20
4833: PUSH
4834: LD_INT 21
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 23
4842: PUSH
4843: LD_INT 24
4845: PUSH
4846: LD_INT 25
4848: PUSH
4849: LD_INT 26
4851: PUSH
4852: LD_INT 27
4854: PUSH
4855: LD_INT 28
4857: PUSH
4858: LD_INT 30
4860: PUSH
4861: LD_INT 31
4863: PUSH
4864: LD_INT 32
4866: PUSH
4867: LD_INT 33
4869: PUSH
4870: LD_INT 34
4872: PUSH
4873: LD_INT 36
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 101
4914: PUSH
4915: LD_INT 102
4917: PUSH
4918: LD_INT 103
4920: PUSH
4921: LD_INT 104
4923: PUSH
4924: LD_INT 105
4926: PUSH
4927: LD_INT 106
4929: PUSH
4930: LD_INT 107
4932: PUSH
4933: LD_INT 108
4935: PUSH
4936: LD_INT 109
4938: PUSH
4939: LD_INT 110
4941: PUSH
4942: LD_INT 111
4944: PUSH
4945: LD_INT 112
4947: PUSH
4948: LD_INT 113
4950: PUSH
4951: LD_INT 114
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: ST_TO_ADDR
4974: GO 6345
4976: LD_INT 13
4978: DOUBLE
4979: EQUAL
4980: IFTRUE 4984
4982: GO 5180
4984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_INT 1
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: LD_INT 4
5001: PUSH
5002: LD_INT 5
5004: PUSH
5005: LD_INT 8
5007: PUSH
5008: LD_INT 9
5010: PUSH
5011: LD_INT 10
5013: PUSH
5014: LD_INT 11
5016: PUSH
5017: LD_INT 12
5019: PUSH
5020: LD_INT 14
5022: PUSH
5023: LD_INT 15
5025: PUSH
5026: LD_INT 16
5028: PUSH
5029: LD_INT 17
5031: PUSH
5032: LD_INT 18
5034: PUSH
5035: LD_INT 19
5037: PUSH
5038: LD_INT 20
5040: PUSH
5041: LD_INT 21
5043: PUSH
5044: LD_INT 22
5046: PUSH
5047: LD_INT 23
5049: PUSH
5050: LD_INT 24
5052: PUSH
5053: LD_INT 25
5055: PUSH
5056: LD_INT 26
5058: PUSH
5059: LD_INT 27
5061: PUSH
5062: LD_INT 28
5064: PUSH
5065: LD_INT 30
5067: PUSH
5068: LD_INT 31
5070: PUSH
5071: LD_INT 32
5073: PUSH
5074: LD_INT 33
5076: PUSH
5077: LD_INT 34
5079: PUSH
5080: LD_INT 36
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 101
5118: PUSH
5119: LD_INT 102
5121: PUSH
5122: LD_INT 103
5124: PUSH
5125: LD_INT 104
5127: PUSH
5128: LD_INT 105
5130: PUSH
5131: LD_INT 106
5133: PUSH
5134: LD_INT 107
5136: PUSH
5137: LD_INT 108
5139: PUSH
5140: LD_INT 109
5142: PUSH
5143: LD_INT 110
5145: PUSH
5146: LD_INT 111
5148: PUSH
5149: LD_INT 112
5151: PUSH
5152: LD_INT 113
5154: PUSH
5155: LD_INT 114
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: ST_TO_ADDR
5178: GO 6345
5180: LD_INT 14
5182: DOUBLE
5183: EQUAL
5184: IFTRUE 5188
5186: GO 5400
5188: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: LD_INT 3
5202: PUSH
5203: LD_INT 4
5205: PUSH
5206: LD_INT 5
5208: PUSH
5209: LD_INT 6
5211: PUSH
5212: LD_INT 7
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: LD_INT 10
5223: PUSH
5224: LD_INT 11
5226: PUSH
5227: LD_INT 12
5229: PUSH
5230: LD_INT 13
5232: PUSH
5233: LD_INT 14
5235: PUSH
5236: LD_INT 15
5238: PUSH
5239: LD_INT 16
5241: PUSH
5242: LD_INT 17
5244: PUSH
5245: LD_INT 18
5247: PUSH
5248: LD_INT 19
5250: PUSH
5251: LD_INT 20
5253: PUSH
5254: LD_INT 21
5256: PUSH
5257: LD_INT 22
5259: PUSH
5260: LD_INT 23
5262: PUSH
5263: LD_INT 24
5265: PUSH
5266: LD_INT 25
5268: PUSH
5269: LD_INT 26
5271: PUSH
5272: LD_INT 27
5274: PUSH
5275: LD_INT 28
5277: PUSH
5278: LD_INT 29
5280: PUSH
5281: LD_INT 30
5283: PUSH
5284: LD_INT 31
5286: PUSH
5287: LD_INT 32
5289: PUSH
5290: LD_INT 33
5292: PUSH
5293: LD_INT 34
5295: PUSH
5296: LD_INT 36
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 101
5338: PUSH
5339: LD_INT 102
5341: PUSH
5342: LD_INT 103
5344: PUSH
5345: LD_INT 104
5347: PUSH
5348: LD_INT 105
5350: PUSH
5351: LD_INT 106
5353: PUSH
5354: LD_INT 107
5356: PUSH
5357: LD_INT 108
5359: PUSH
5360: LD_INT 109
5362: PUSH
5363: LD_INT 110
5365: PUSH
5366: LD_INT 111
5368: PUSH
5369: LD_INT 112
5371: PUSH
5372: LD_INT 113
5374: PUSH
5375: LD_INT 114
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: ST_TO_ADDR
5398: GO 6345
5400: LD_INT 15
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5620
5408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5409: LD_ADDR_VAR 0 1
5413: PUSH
5414: LD_INT 1
5416: PUSH
5417: LD_INT 2
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: LD_INT 4
5425: PUSH
5426: LD_INT 5
5428: PUSH
5429: LD_INT 6
5431: PUSH
5432: LD_INT 7
5434: PUSH
5435: LD_INT 8
5437: PUSH
5438: LD_INT 9
5440: PUSH
5441: LD_INT 10
5443: PUSH
5444: LD_INT 11
5446: PUSH
5447: LD_INT 12
5449: PUSH
5450: LD_INT 13
5452: PUSH
5453: LD_INT 14
5455: PUSH
5456: LD_INT 15
5458: PUSH
5459: LD_INT 16
5461: PUSH
5462: LD_INT 17
5464: PUSH
5465: LD_INT 18
5467: PUSH
5468: LD_INT 19
5470: PUSH
5471: LD_INT 20
5473: PUSH
5474: LD_INT 21
5476: PUSH
5477: LD_INT 22
5479: PUSH
5480: LD_INT 23
5482: PUSH
5483: LD_INT 24
5485: PUSH
5486: LD_INT 25
5488: PUSH
5489: LD_INT 26
5491: PUSH
5492: LD_INT 27
5494: PUSH
5495: LD_INT 28
5497: PUSH
5498: LD_INT 29
5500: PUSH
5501: LD_INT 30
5503: PUSH
5504: LD_INT 31
5506: PUSH
5507: LD_INT 32
5509: PUSH
5510: LD_INT 33
5512: PUSH
5513: LD_INT 34
5515: PUSH
5516: LD_INT 36
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 101
5558: PUSH
5559: LD_INT 102
5561: PUSH
5562: LD_INT 103
5564: PUSH
5565: LD_INT 104
5567: PUSH
5568: LD_INT 105
5570: PUSH
5571: LD_INT 106
5573: PUSH
5574: LD_INT 107
5576: PUSH
5577: LD_INT 108
5579: PUSH
5580: LD_INT 109
5582: PUSH
5583: LD_INT 110
5585: PUSH
5586: LD_INT 111
5588: PUSH
5589: LD_INT 112
5591: PUSH
5592: LD_INT 113
5594: PUSH
5595: LD_INT 114
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: ST_TO_ADDR
5618: GO 6345
5620: LD_INT 16
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5628
5626: GO 5752
5628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5629: LD_ADDR_VAR 0 1
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: LD_INT 4
5639: PUSH
5640: LD_INT 5
5642: PUSH
5643: LD_INT 7
5645: PUSH
5646: LD_INT 11
5648: PUSH
5649: LD_INT 12
5651: PUSH
5652: LD_INT 15
5654: PUSH
5655: LD_INT 16
5657: PUSH
5658: LD_INT 20
5660: PUSH
5661: LD_INT 21
5663: PUSH
5664: LD_INT 22
5666: PUSH
5667: LD_INT 23
5669: PUSH
5670: LD_INT 25
5672: PUSH
5673: LD_INT 26
5675: PUSH
5676: LD_INT 30
5678: PUSH
5679: LD_INT 31
5681: PUSH
5682: LD_INT 32
5684: PUSH
5685: LD_INT 33
5687: PUSH
5688: LD_INT 34
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: LD_INT 101
5714: PUSH
5715: LD_INT 102
5717: PUSH
5718: LD_INT 103
5720: PUSH
5721: LD_INT 106
5723: PUSH
5724: LD_INT 108
5726: PUSH
5727: LD_INT 112
5729: PUSH
5730: LD_INT 113
5732: PUSH
5733: LD_INT 114
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: ST_TO_ADDR
5750: GO 6345
5752: LD_INT 17
5754: DOUBLE
5755: EQUAL
5756: IFTRUE 5760
5758: GO 5972
5760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5761: LD_ADDR_VAR 0 1
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 4
5777: PUSH
5778: LD_INT 5
5780: PUSH
5781: LD_INT 6
5783: PUSH
5784: LD_INT 7
5786: PUSH
5787: LD_INT 8
5789: PUSH
5790: LD_INT 9
5792: PUSH
5793: LD_INT 10
5795: PUSH
5796: LD_INT 11
5798: PUSH
5799: LD_INT 12
5801: PUSH
5802: LD_INT 13
5804: PUSH
5805: LD_INT 14
5807: PUSH
5808: LD_INT 15
5810: PUSH
5811: LD_INT 16
5813: PUSH
5814: LD_INT 17
5816: PUSH
5817: LD_INT 18
5819: PUSH
5820: LD_INT 19
5822: PUSH
5823: LD_INT 20
5825: PUSH
5826: LD_INT 21
5828: PUSH
5829: LD_INT 22
5831: PUSH
5832: LD_INT 23
5834: PUSH
5835: LD_INT 24
5837: PUSH
5838: LD_INT 25
5840: PUSH
5841: LD_INT 26
5843: PUSH
5844: LD_INT 27
5846: PUSH
5847: LD_INT 28
5849: PUSH
5850: LD_INT 29
5852: PUSH
5853: LD_INT 30
5855: PUSH
5856: LD_INT 31
5858: PUSH
5859: LD_INT 32
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: LD_INT 34
5867: PUSH
5868: LD_INT 36
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: PUSH
5908: LD_INT 101
5910: PUSH
5911: LD_INT 102
5913: PUSH
5914: LD_INT 103
5916: PUSH
5917: LD_INT 104
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 106
5925: PUSH
5926: LD_INT 107
5928: PUSH
5929: LD_INT 108
5931: PUSH
5932: LD_INT 109
5934: PUSH
5935: LD_INT 110
5937: PUSH
5938: LD_INT 111
5940: PUSH
5941: LD_INT 112
5943: PUSH
5944: LD_INT 113
5946: PUSH
5947: LD_INT 114
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: ST_TO_ADDR
5970: GO 6345
5972: LD_INT 18
5974: DOUBLE
5975: EQUAL
5976: IFTRUE 5980
5978: GO 6116
5980: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
5981: LD_ADDR_VAR 0 1
5985: PUSH
5986: LD_INT 2
5988: PUSH
5989: LD_INT 4
5991: PUSH
5992: LD_INT 5
5994: PUSH
5995: LD_INT 7
5997: PUSH
5998: LD_INT 11
6000: PUSH
6001: LD_INT 12
6003: PUSH
6004: LD_INT 15
6006: PUSH
6007: LD_INT 16
6009: PUSH
6010: LD_INT 20
6012: PUSH
6013: LD_INT 21
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 23
6021: PUSH
6022: LD_INT 25
6024: PUSH
6025: LD_INT 26
6027: PUSH
6028: LD_INT 30
6030: PUSH
6031: LD_INT 31
6033: PUSH
6034: LD_INT 32
6036: PUSH
6037: LD_INT 33
6039: PUSH
6040: LD_INT 34
6042: PUSH
6043: LD_INT 35
6045: PUSH
6046: LD_INT 36
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 101
6074: PUSH
6075: LD_INT 102
6077: PUSH
6078: LD_INT 103
6080: PUSH
6081: LD_INT 106
6083: PUSH
6084: LD_INT 108
6086: PUSH
6087: LD_INT 112
6089: PUSH
6090: LD_INT 113
6092: PUSH
6093: LD_INT 114
6095: PUSH
6096: LD_INT 115
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: ST_TO_ADDR
6114: GO 6345
6116: LD_INT 19
6118: DOUBLE
6119: EQUAL
6120: IFTRUE 6124
6122: GO 6344
6124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6125: LD_ADDR_VAR 0 1
6129: PUSH
6130: LD_INT 1
6132: PUSH
6133: LD_INT 2
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: LD_INT 5
6144: PUSH
6145: LD_INT 6
6147: PUSH
6148: LD_INT 7
6150: PUSH
6151: LD_INT 8
6153: PUSH
6154: LD_INT 9
6156: PUSH
6157: LD_INT 10
6159: PUSH
6160: LD_INT 11
6162: PUSH
6163: LD_INT 12
6165: PUSH
6166: LD_INT 13
6168: PUSH
6169: LD_INT 14
6171: PUSH
6172: LD_INT 15
6174: PUSH
6175: LD_INT 16
6177: PUSH
6178: LD_INT 17
6180: PUSH
6181: LD_INT 18
6183: PUSH
6184: LD_INT 19
6186: PUSH
6187: LD_INT 20
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 23
6198: PUSH
6199: LD_INT 24
6201: PUSH
6202: LD_INT 25
6204: PUSH
6205: LD_INT 26
6207: PUSH
6208: LD_INT 27
6210: PUSH
6211: LD_INT 28
6213: PUSH
6214: LD_INT 29
6216: PUSH
6217: LD_INT 30
6219: PUSH
6220: LD_INT 31
6222: PUSH
6223: LD_INT 32
6225: PUSH
6226: LD_INT 33
6228: PUSH
6229: LD_INT 34
6231: PUSH
6232: LD_INT 35
6234: PUSH
6235: LD_INT 36
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 101
6278: PUSH
6279: LD_INT 102
6281: PUSH
6282: LD_INT 103
6284: PUSH
6285: LD_INT 104
6287: PUSH
6288: LD_INT 105
6290: PUSH
6291: LD_INT 106
6293: PUSH
6294: LD_INT 107
6296: PUSH
6297: LD_INT 108
6299: PUSH
6300: LD_INT 109
6302: PUSH
6303: LD_INT 110
6305: PUSH
6306: LD_INT 111
6308: PUSH
6309: LD_INT 112
6311: PUSH
6312: LD_INT 113
6314: PUSH
6315: LD_INT 114
6317: PUSH
6318: LD_INT 115
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: ST_TO_ADDR
6342: GO 6345
6344: POP
// end else
6345: GO 6564
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6347: LD_ADDR_VAR 0 1
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 4
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: LD_INT 6
6369: PUSH
6370: LD_INT 7
6372: PUSH
6373: LD_INT 8
6375: PUSH
6376: LD_INT 9
6378: PUSH
6379: LD_INT 10
6381: PUSH
6382: LD_INT 11
6384: PUSH
6385: LD_INT 12
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 15
6396: PUSH
6397: LD_INT 16
6399: PUSH
6400: LD_INT 17
6402: PUSH
6403: LD_INT 18
6405: PUSH
6406: LD_INT 19
6408: PUSH
6409: LD_INT 20
6411: PUSH
6412: LD_INT 21
6414: PUSH
6415: LD_INT 22
6417: PUSH
6418: LD_INT 23
6420: PUSH
6421: LD_INT 24
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 26
6429: PUSH
6430: LD_INT 27
6432: PUSH
6433: LD_INT 28
6435: PUSH
6436: LD_INT 29
6438: PUSH
6439: LD_INT 30
6441: PUSH
6442: LD_INT 31
6444: PUSH
6445: LD_INT 32
6447: PUSH
6448: LD_INT 33
6450: PUSH
6451: LD_INT 34
6453: PUSH
6454: LD_INT 35
6456: PUSH
6457: LD_INT 36
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 101
6500: PUSH
6501: LD_INT 102
6503: PUSH
6504: LD_INT 103
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 105
6512: PUSH
6513: LD_INT 106
6515: PUSH
6516: LD_INT 107
6518: PUSH
6519: LD_INT 108
6521: PUSH
6522: LD_INT 109
6524: PUSH
6525: LD_INT 110
6527: PUSH
6528: LD_INT 111
6530: PUSH
6531: LD_INT 112
6533: PUSH
6534: LD_INT 113
6536: PUSH
6537: LD_INT 114
6539: PUSH
6540: LD_INT 115
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: ST_TO_ADDR
// if result then
6564: LD_VAR 0 1
6568: IFFALSE 6857
// begin normal :=  ;
6570: LD_ADDR_VAR 0 3
6574: PUSH
6575: LD_STRING 
6577: ST_TO_ADDR
// hardcore :=  ;
6578: LD_ADDR_VAR 0 4
6582: PUSH
6583: LD_STRING 
6585: ST_TO_ADDR
// for i = 1 to normalCounter do
6586: LD_ADDR_VAR 0 5
6590: PUSH
6591: DOUBLE
6592: LD_INT 1
6594: DEC
6595: ST_TO_ADDR
6596: LD_EXP 37
6600: PUSH
6601: FOR_TO
6602: IFFALSE 6703
// begin tmp := 0 ;
6604: LD_ADDR_VAR 0 2
6608: PUSH
6609: LD_STRING 0
6611: ST_TO_ADDR
// if result [ 1 ] then
6612: LD_VAR 0 1
6616: PUSH
6617: LD_INT 1
6619: ARRAY
6620: IFFALSE 6685
// if result [ 1 ] [ 1 ] = i then
6622: LD_VAR 0 1
6626: PUSH
6627: LD_INT 1
6629: ARRAY
6630: PUSH
6631: LD_INT 1
6633: ARRAY
6634: PUSH
6635: LD_VAR 0 5
6639: EQUAL
6640: IFFALSE 6685
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6642: LD_ADDR_VAR 0 1
6646: PUSH
6647: LD_VAR 0 1
6651: PPUSH
6652: LD_INT 1
6654: PPUSH
6655: LD_VAR 0 1
6659: PUSH
6660: LD_INT 1
6662: ARRAY
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 3
6671: PPUSH
6672: CALL_OW 1
6676: ST_TO_ADDR
// tmp := 1 ;
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: LD_STRING 1
6684: ST_TO_ADDR
// end ; normal := normal & tmp ;
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_VAR 0 3
6694: PUSH
6695: LD_VAR 0 2
6699: STR
6700: ST_TO_ADDR
// end ;
6701: GO 6601
6703: POP
6704: POP
// for i = 1 to hardcoreCounter do
6705: LD_ADDR_VAR 0 5
6709: PUSH
6710: DOUBLE
6711: LD_INT 1
6713: DEC
6714: ST_TO_ADDR
6715: LD_EXP 38
6719: PUSH
6720: FOR_TO
6721: IFFALSE 6826
// begin tmp := 0 ;
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_STRING 0
6730: ST_TO_ADDR
// if result [ 2 ] then
6731: LD_VAR 0 1
6735: PUSH
6736: LD_INT 2
6738: ARRAY
6739: IFFALSE 6808
// if result [ 2 ] [ 1 ] = 100 + i then
6741: LD_VAR 0 1
6745: PUSH
6746: LD_INT 2
6748: ARRAY
6749: PUSH
6750: LD_INT 1
6752: ARRAY
6753: PUSH
6754: LD_INT 100
6756: PUSH
6757: LD_VAR 0 5
6761: PLUS
6762: EQUAL
6763: IFFALSE 6808
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_VAR 0 1
6774: PPUSH
6775: LD_INT 2
6777: PPUSH
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 2
6785: ARRAY
6786: PPUSH
6787: LD_INT 1
6789: PPUSH
6790: CALL_OW 3
6794: PPUSH
6795: CALL_OW 1
6799: ST_TO_ADDR
// tmp := 1 ;
6800: LD_ADDR_VAR 0 2
6804: PUSH
6805: LD_STRING 1
6807: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6808: LD_ADDR_VAR 0 4
6812: PUSH
6813: LD_VAR 0 4
6817: PUSH
6818: LD_VAR 0 2
6822: STR
6823: ST_TO_ADDR
// end ;
6824: GO 6720
6826: POP
6827: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6828: LD_STRING getStreamItemsFromMission("
6830: PUSH
6831: LD_VAR 0 3
6835: STR
6836: PUSH
6837: LD_STRING ","
6839: STR
6840: PUSH
6841: LD_VAR 0 4
6845: STR
6846: PUSH
6847: LD_STRING ")
6849: STR
6850: PPUSH
6851: CALL_OW 559
// end else
6855: GO 6864
// ToLua ( getStreamItemsFromMission("","") ) ;
6857: LD_STRING getStreamItemsFromMission("","")
6859: PPUSH
6860: CALL_OW 559
// end ;
6864: LD_VAR 0 1
6868: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6869: LD_VAR 0 2
6873: PUSH
6874: LD_INT 100
6876: EQUAL
6877: IFFALSE 7826
// begin if not StreamModeActive then
6879: LD_EXP 36
6883: NOT
6884: IFFALSE 6894
// StreamModeActive := true ;
6886: LD_ADDR_EXP 36
6890: PUSH
6891: LD_INT 1
6893: ST_TO_ADDR
// if p3 = 0 then
6894: LD_VAR 0 3
6898: PUSH
6899: LD_INT 0
6901: EQUAL
6902: IFFALSE 6908
// InitStreamMode ;
6904: CALL 2947 0 0
// if p3 = 1 then
6908: LD_VAR 0 3
6912: PUSH
6913: LD_INT 1
6915: EQUAL
6916: IFFALSE 6926
// sRocket := true ;
6918: LD_ADDR_EXP 41
6922: PUSH
6923: LD_INT 1
6925: ST_TO_ADDR
// if p3 = 2 then
6926: LD_VAR 0 3
6930: PUSH
6931: LD_INT 2
6933: EQUAL
6934: IFFALSE 6944
// sSpeed := true ;
6936: LD_ADDR_EXP 40
6940: PUSH
6941: LD_INT 1
6943: ST_TO_ADDR
// if p3 = 3 then
6944: LD_VAR 0 3
6948: PUSH
6949: LD_INT 3
6951: EQUAL
6952: IFFALSE 6962
// sEngine := true ;
6954: LD_ADDR_EXP 42
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// if p3 = 4 then
6962: LD_VAR 0 3
6966: PUSH
6967: LD_INT 4
6969: EQUAL
6970: IFFALSE 6980
// sSpec := true ;
6972: LD_ADDR_EXP 39
6976: PUSH
6977: LD_INT 1
6979: ST_TO_ADDR
// if p3 = 5 then
6980: LD_VAR 0 3
6984: PUSH
6985: LD_INT 5
6987: EQUAL
6988: IFFALSE 6998
// sLevel := true ;
6990: LD_ADDR_EXP 43
6994: PUSH
6995: LD_INT 1
6997: ST_TO_ADDR
// if p3 = 6 then
6998: LD_VAR 0 3
7002: PUSH
7003: LD_INT 6
7005: EQUAL
7006: IFFALSE 7016
// sArmoury := true ;
7008: LD_ADDR_EXP 44
7012: PUSH
7013: LD_INT 1
7015: ST_TO_ADDR
// if p3 = 7 then
7016: LD_VAR 0 3
7020: PUSH
7021: LD_INT 7
7023: EQUAL
7024: IFFALSE 7034
// sRadar := true ;
7026: LD_ADDR_EXP 45
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// if p3 = 8 then
7034: LD_VAR 0 3
7038: PUSH
7039: LD_INT 8
7041: EQUAL
7042: IFFALSE 7052
// sBunker := true ;
7044: LD_ADDR_EXP 46
7048: PUSH
7049: LD_INT 1
7051: ST_TO_ADDR
// if p3 = 9 then
7052: LD_VAR 0 3
7056: PUSH
7057: LD_INT 9
7059: EQUAL
7060: IFFALSE 7070
// sHack := true ;
7062: LD_ADDR_EXP 47
7066: PUSH
7067: LD_INT 1
7069: ST_TO_ADDR
// if p3 = 10 then
7070: LD_VAR 0 3
7074: PUSH
7075: LD_INT 10
7077: EQUAL
7078: IFFALSE 7088
// sFire := true ;
7080: LD_ADDR_EXP 48
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// if p3 = 11 then
7088: LD_VAR 0 3
7092: PUSH
7093: LD_INT 11
7095: EQUAL
7096: IFFALSE 7106
// sRefresh := true ;
7098: LD_ADDR_EXP 49
7102: PUSH
7103: LD_INT 1
7105: ST_TO_ADDR
// if p3 = 12 then
7106: LD_VAR 0 3
7110: PUSH
7111: LD_INT 12
7113: EQUAL
7114: IFFALSE 7124
// sExp := true ;
7116: LD_ADDR_EXP 50
7120: PUSH
7121: LD_INT 1
7123: ST_TO_ADDR
// if p3 = 13 then
7124: LD_VAR 0 3
7128: PUSH
7129: LD_INT 13
7131: EQUAL
7132: IFFALSE 7142
// sDepot := true ;
7134: LD_ADDR_EXP 51
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// if p3 = 14 then
7142: LD_VAR 0 3
7146: PUSH
7147: LD_INT 14
7149: EQUAL
7150: IFFALSE 7160
// sFlag := true ;
7152: LD_ADDR_EXP 52
7156: PUSH
7157: LD_INT 1
7159: ST_TO_ADDR
// if p3 = 15 then
7160: LD_VAR 0 3
7164: PUSH
7165: LD_INT 15
7167: EQUAL
7168: IFFALSE 7178
// sKamikadze := true ;
7170: LD_ADDR_EXP 60
7174: PUSH
7175: LD_INT 1
7177: ST_TO_ADDR
// if p3 = 16 then
7178: LD_VAR 0 3
7182: PUSH
7183: LD_INT 16
7185: EQUAL
7186: IFFALSE 7196
// sTroll := true ;
7188: LD_ADDR_EXP 61
7192: PUSH
7193: LD_INT 1
7195: ST_TO_ADDR
// if p3 = 17 then
7196: LD_VAR 0 3
7200: PUSH
7201: LD_INT 17
7203: EQUAL
7204: IFFALSE 7214
// sSlow := true ;
7206: LD_ADDR_EXP 62
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// if p3 = 18 then
7214: LD_VAR 0 3
7218: PUSH
7219: LD_INT 18
7221: EQUAL
7222: IFFALSE 7232
// sLack := true ;
7224: LD_ADDR_EXP 63
7228: PUSH
7229: LD_INT 1
7231: ST_TO_ADDR
// if p3 = 19 then
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 19
7239: EQUAL
7240: IFFALSE 7250
// sTank := true ;
7242: LD_ADDR_EXP 65
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// if p3 = 20 then
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 20
7257: EQUAL
7258: IFFALSE 7268
// sRemote := true ;
7260: LD_ADDR_EXP 66
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// if p3 = 21 then
7268: LD_VAR 0 3
7272: PUSH
7273: LD_INT 21
7275: EQUAL
7276: IFFALSE 7286
// sPowell := true ;
7278: LD_ADDR_EXP 67
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// if p3 = 22 then
7286: LD_VAR 0 3
7290: PUSH
7291: LD_INT 22
7293: EQUAL
7294: IFFALSE 7304
// sTeleport := true ;
7296: LD_ADDR_EXP 70
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// if p3 = 23 then
7304: LD_VAR 0 3
7308: PUSH
7309: LD_INT 23
7311: EQUAL
7312: IFFALSE 7322
// sOilTower := true ;
7314: LD_ADDR_EXP 72
7318: PUSH
7319: LD_INT 1
7321: ST_TO_ADDR
// if p3 = 24 then
7322: LD_VAR 0 3
7326: PUSH
7327: LD_INT 24
7329: EQUAL
7330: IFFALSE 7340
// sShovel := true ;
7332: LD_ADDR_EXP 73
7336: PUSH
7337: LD_INT 1
7339: ST_TO_ADDR
// if p3 = 25 then
7340: LD_VAR 0 3
7344: PUSH
7345: LD_INT 25
7347: EQUAL
7348: IFFALSE 7358
// sSheik := true ;
7350: LD_ADDR_EXP 74
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// if p3 = 26 then
7358: LD_VAR 0 3
7362: PUSH
7363: LD_INT 26
7365: EQUAL
7366: IFFALSE 7376
// sEarthquake := true ;
7368: LD_ADDR_EXP 76
7372: PUSH
7373: LD_INT 1
7375: ST_TO_ADDR
// if p3 = 27 then
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 27
7383: EQUAL
7384: IFFALSE 7394
// sAI := true ;
7386: LD_ADDR_EXP 77
7390: PUSH
7391: LD_INT 1
7393: ST_TO_ADDR
// if p3 = 28 then
7394: LD_VAR 0 3
7398: PUSH
7399: LD_INT 28
7401: EQUAL
7402: IFFALSE 7412
// sCargo := true ;
7404: LD_ADDR_EXP 80
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// if p3 = 29 then
7412: LD_VAR 0 3
7416: PUSH
7417: LD_INT 29
7419: EQUAL
7420: IFFALSE 7430
// sDLaser := true ;
7422: LD_ADDR_EXP 81
7426: PUSH
7427: LD_INT 1
7429: ST_TO_ADDR
// if p3 = 30 then
7430: LD_VAR 0 3
7434: PUSH
7435: LD_INT 30
7437: EQUAL
7438: IFFALSE 7448
// sExchange := true ;
7440: LD_ADDR_EXP 82
7444: PUSH
7445: LD_INT 1
7447: ST_TO_ADDR
// if p3 = 31 then
7448: LD_VAR 0 3
7452: PUSH
7453: LD_INT 31
7455: EQUAL
7456: IFFALSE 7466
// sFac := true ;
7458: LD_ADDR_EXP 83
7462: PUSH
7463: LD_INT 1
7465: ST_TO_ADDR
// if p3 = 32 then
7466: LD_VAR 0 3
7470: PUSH
7471: LD_INT 32
7473: EQUAL
7474: IFFALSE 7484
// sPower := true ;
7476: LD_ADDR_EXP 84
7480: PUSH
7481: LD_INT 1
7483: ST_TO_ADDR
// if p3 = 33 then
7484: LD_VAR 0 3
7488: PUSH
7489: LD_INT 33
7491: EQUAL
7492: IFFALSE 7502
// sRandom := true ;
7494: LD_ADDR_EXP 85
7498: PUSH
7499: LD_INT 1
7501: ST_TO_ADDR
// if p3 = 34 then
7502: LD_VAR 0 3
7506: PUSH
7507: LD_INT 34
7509: EQUAL
7510: IFFALSE 7520
// sShield := true ;
7512: LD_ADDR_EXP 86
7516: PUSH
7517: LD_INT 1
7519: ST_TO_ADDR
// if p3 = 35 then
7520: LD_VAR 0 3
7524: PUSH
7525: LD_INT 35
7527: EQUAL
7528: IFFALSE 7538
// sTime := true ;
7530: LD_ADDR_EXP 87
7534: PUSH
7535: LD_INT 1
7537: ST_TO_ADDR
// if p3 = 36 then
7538: LD_VAR 0 3
7542: PUSH
7543: LD_INT 36
7545: EQUAL
7546: IFFALSE 7556
// sTools := true ;
7548: LD_ADDR_EXP 88
7552: PUSH
7553: LD_INT 1
7555: ST_TO_ADDR
// if p3 = 101 then
7556: LD_VAR 0 3
7560: PUSH
7561: LD_INT 101
7563: EQUAL
7564: IFFALSE 7574
// sSold := true ;
7566: LD_ADDR_EXP 53
7570: PUSH
7571: LD_INT 1
7573: ST_TO_ADDR
// if p3 = 102 then
7574: LD_VAR 0 3
7578: PUSH
7579: LD_INT 102
7581: EQUAL
7582: IFFALSE 7592
// sDiff := true ;
7584: LD_ADDR_EXP 54
7588: PUSH
7589: LD_INT 1
7591: ST_TO_ADDR
// if p3 = 103 then
7592: LD_VAR 0 3
7596: PUSH
7597: LD_INT 103
7599: EQUAL
7600: IFFALSE 7610
// sFog := true ;
7602: LD_ADDR_EXP 57
7606: PUSH
7607: LD_INT 1
7609: ST_TO_ADDR
// if p3 = 104 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 104
7617: EQUAL
7618: IFFALSE 7628
// sReset := true ;
7620: LD_ADDR_EXP 58
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// if p3 = 105 then
7628: LD_VAR 0 3
7632: PUSH
7633: LD_INT 105
7635: EQUAL
7636: IFFALSE 7646
// sSun := true ;
7638: LD_ADDR_EXP 59
7642: PUSH
7643: LD_INT 1
7645: ST_TO_ADDR
// if p3 = 106 then
7646: LD_VAR 0 3
7650: PUSH
7651: LD_INT 106
7653: EQUAL
7654: IFFALSE 7664
// sTiger := true ;
7656: LD_ADDR_EXP 55
7660: PUSH
7661: LD_INT 1
7663: ST_TO_ADDR
// if p3 = 107 then
7664: LD_VAR 0 3
7668: PUSH
7669: LD_INT 107
7671: EQUAL
7672: IFFALSE 7682
// sBomb := true ;
7674: LD_ADDR_EXP 56
7678: PUSH
7679: LD_INT 1
7681: ST_TO_ADDR
// if p3 = 108 then
7682: LD_VAR 0 3
7686: PUSH
7687: LD_INT 108
7689: EQUAL
7690: IFFALSE 7700
// sWound := true ;
7692: LD_ADDR_EXP 64
7696: PUSH
7697: LD_INT 1
7699: ST_TO_ADDR
// if p3 = 109 then
7700: LD_VAR 0 3
7704: PUSH
7705: LD_INT 109
7707: EQUAL
7708: IFFALSE 7718
// sBetray := true ;
7710: LD_ADDR_EXP 68
7714: PUSH
7715: LD_INT 1
7717: ST_TO_ADDR
// if p3 = 110 then
7718: LD_VAR 0 3
7722: PUSH
7723: LD_INT 110
7725: EQUAL
7726: IFFALSE 7736
// sContamin := true ;
7728: LD_ADDR_EXP 69
7732: PUSH
7733: LD_INT 1
7735: ST_TO_ADDR
// if p3 = 111 then
7736: LD_VAR 0 3
7740: PUSH
7741: LD_INT 111
7743: EQUAL
7744: IFFALSE 7754
// sOil := true ;
7746: LD_ADDR_EXP 71
7750: PUSH
7751: LD_INT 1
7753: ST_TO_ADDR
// if p3 = 112 then
7754: LD_VAR 0 3
7758: PUSH
7759: LD_INT 112
7761: EQUAL
7762: IFFALSE 7772
// sStu := true ;
7764: LD_ADDR_EXP 75
7768: PUSH
7769: LD_INT 1
7771: ST_TO_ADDR
// if p3 = 113 then
7772: LD_VAR 0 3
7776: PUSH
7777: LD_INT 113
7779: EQUAL
7780: IFFALSE 7790
// sBazooka := true ;
7782: LD_ADDR_EXP 78
7786: PUSH
7787: LD_INT 1
7789: ST_TO_ADDR
// if p3 = 114 then
7790: LD_VAR 0 3
7794: PUSH
7795: LD_INT 114
7797: EQUAL
7798: IFFALSE 7808
// sMortar := true ;
7800: LD_ADDR_EXP 79
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// if p3 = 115 then
7808: LD_VAR 0 3
7812: PUSH
7813: LD_INT 115
7815: EQUAL
7816: IFFALSE 7826
// sRanger := true ;
7818: LD_ADDR_EXP 89
7822: PUSH
7823: LD_INT 1
7825: ST_TO_ADDR
// end ; end ;
7826: PPOPN 6
7828: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7829: LD_EXP 36
7833: PUSH
7834: LD_EXP 41
7838: AND
7839: IFFALSE 7963
7841: GO 7843
7843: DISABLE
7844: LD_INT 0
7846: PPUSH
7847: PPUSH
// begin enable ;
7848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: LD_INT 22
7856: PUSH
7857: LD_OWVAR 2
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: LD_INT 34
7871: PUSH
7872: LD_INT 7
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 34
7881: PUSH
7882: LD_INT 45
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 34
7891: PUSH
7892: LD_INT 28
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 34
7901: PUSH
7902: LD_INT 47
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 69
7924: ST_TO_ADDR
// if not tmp then
7925: LD_VAR 0 2
7929: NOT
7930: IFFALSE 7934
// exit ;
7932: GO 7963
// for i in tmp do
7934: LD_ADDR_VAR 0 1
7938: PUSH
7939: LD_VAR 0 2
7943: PUSH
7944: FOR_IN
7945: IFFALSE 7961
// begin SetLives ( i , 0 ) ;
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_INT 0
7954: PPUSH
7955: CALL_OW 234
// end ;
7959: GO 7944
7961: POP
7962: POP
// end ;
7963: PPOPN 2
7965: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7966: LD_EXP 36
7970: PUSH
7971: LD_EXP 42
7975: AND
7976: IFFALSE 8060
7978: GO 7980
7980: DISABLE
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
// begin enable ;
7985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7986: LD_ADDR_VAR 0 2
7990: PUSH
7991: LD_INT 22
7993: PUSH
7994: LD_OWVAR 2
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PUSH
8003: LD_INT 32
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: ST_TO_ADDR
// if not tmp then
8022: LD_VAR 0 2
8026: NOT
8027: IFFALSE 8031
// exit ;
8029: GO 8060
// for i in tmp do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_VAR 0 2
8040: PUSH
8041: FOR_IN
8042: IFFALSE 8058
// begin SetLives ( i , 0 ) ;
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 234
// end ;
8056: GO 8041
8058: POP
8059: POP
// end ;
8060: PPOPN 2
8062: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8063: LD_EXP 36
8067: PUSH
8068: LD_EXP 39
8072: AND
8073: IFFALSE 8166
8075: GO 8077
8077: DISABLE
8078: LD_INT 0
8080: PPUSH
// begin enable ;
8081: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_OWVAR 2
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 2
8101: PUSH
8102: LD_INT 25
8104: PUSH
8105: LD_INT 5
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 25
8114: PUSH
8115: LD_INT 9
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 25
8124: PUSH
8125: LD_INT 8
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PPUSH
8142: CALL_OW 69
8146: PUSH
8147: FOR_IN
8148: IFFALSE 8164
// begin SetClass ( i , 1 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 1
8157: PPUSH
8158: CALL_OW 336
// end ;
8162: GO 8147
8164: POP
8165: POP
// end ;
8166: PPOPN 1
8168: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8169: LD_EXP 36
8173: PUSH
8174: LD_EXP 40
8178: AND
8179: PUSH
8180: LD_OWVAR 65
8184: PUSH
8185: LD_INT 7
8187: LESS
8188: AND
8189: IFFALSE 8203
8191: GO 8193
8193: DISABLE
// begin enable ;
8194: ENABLE
// game_speed := 7 ;
8195: LD_ADDR_OWVAR 65
8199: PUSH
8200: LD_INT 7
8202: ST_TO_ADDR
// end ;
8203: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8204: LD_EXP 36
8208: PUSH
8209: LD_EXP 43
8213: AND
8214: IFFALSE 8416
8216: GO 8218
8218: DISABLE
8219: LD_INT 0
8221: PPUSH
8222: PPUSH
8223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8224: LD_ADDR_VAR 0 3
8228: PUSH
8229: LD_INT 81
8231: PUSH
8232: LD_OWVAR 2
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 21
8243: PUSH
8244: LD_INT 1
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 69
8259: ST_TO_ADDR
// if not tmp then
8260: LD_VAR 0 3
8264: NOT
8265: IFFALSE 8269
// exit ;
8267: GO 8416
// if tmp > 5 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 5
8276: GREATER
8277: IFFALSE 8289
// k := 5 else
8279: LD_ADDR_VAR 0 2
8283: PUSH
8284: LD_INT 5
8286: ST_TO_ADDR
8287: GO 8299
// k := tmp ;
8289: LD_ADDR_VAR 0 2
8293: PUSH
8294: LD_VAR 0 3
8298: ST_TO_ADDR
// for i := 1 to k do
8299: LD_ADDR_VAR 0 1
8303: PUSH
8304: DOUBLE
8305: LD_INT 1
8307: DEC
8308: ST_TO_ADDR
8309: LD_VAR 0 2
8313: PUSH
8314: FOR_TO
8315: IFFALSE 8414
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8317: LD_VAR 0 3
8321: PUSH
8322: LD_VAR 0 1
8326: ARRAY
8327: PPUSH
8328: LD_VAR 0 1
8332: PUSH
8333: LD_INT 4
8335: MOD
8336: PUSH
8337: LD_INT 1
8339: PLUS
8340: PPUSH
8341: CALL_OW 259
8345: PUSH
8346: LD_INT 10
8348: LESS
8349: IFFALSE 8412
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8351: LD_VAR 0 3
8355: PUSH
8356: LD_VAR 0 1
8360: ARRAY
8361: PPUSH
8362: LD_VAR 0 1
8366: PUSH
8367: LD_INT 4
8369: MOD
8370: PUSH
8371: LD_INT 1
8373: PLUS
8374: PPUSH
8375: LD_VAR 0 3
8379: PUSH
8380: LD_VAR 0 1
8384: ARRAY
8385: PPUSH
8386: LD_VAR 0 1
8390: PUSH
8391: LD_INT 4
8393: MOD
8394: PUSH
8395: LD_INT 1
8397: PLUS
8398: PPUSH
8399: CALL_OW 259
8403: PUSH
8404: LD_INT 1
8406: PLUS
8407: PPUSH
8408: CALL_OW 237
8412: GO 8314
8414: POP
8415: POP
// end ;
8416: PPOPN 3
8418: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8419: LD_EXP 36
8423: PUSH
8424: LD_EXP 44
8428: AND
8429: IFFALSE 8449
8431: GO 8433
8433: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8434: LD_INT 4
8436: PPUSH
8437: LD_OWVAR 2
8441: PPUSH
8442: LD_INT 0
8444: PPUSH
8445: CALL_OW 324
8449: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8450: LD_EXP 36
8454: PUSH
8455: LD_EXP 73
8459: AND
8460: IFFALSE 8480
8462: GO 8464
8464: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8465: LD_INT 19
8467: PPUSH
8468: LD_OWVAR 2
8472: PPUSH
8473: LD_INT 0
8475: PPUSH
8476: CALL_OW 324
8480: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8481: LD_EXP 36
8485: PUSH
8486: LD_EXP 45
8490: AND
8491: IFFALSE 8593
8493: GO 8495
8495: DISABLE
8496: LD_INT 0
8498: PPUSH
8499: PPUSH
// begin enable ;
8500: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8501: LD_ADDR_VAR 0 2
8505: PUSH
8506: LD_INT 22
8508: PUSH
8509: LD_OWVAR 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 2
8520: PUSH
8521: LD_INT 34
8523: PUSH
8524: LD_INT 11
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 34
8533: PUSH
8534: LD_INT 30
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PPUSH
8550: CALL_OW 69
8554: ST_TO_ADDR
// if not tmp then
8555: LD_VAR 0 2
8559: NOT
8560: IFFALSE 8564
// exit ;
8562: GO 8593
// for i in tmp do
8564: LD_ADDR_VAR 0 1
8568: PUSH
8569: LD_VAR 0 2
8573: PUSH
8574: FOR_IN
8575: IFFALSE 8591
// begin SetLives ( i , 0 ) ;
8577: LD_VAR 0 1
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 234
// end ;
8589: GO 8574
8591: POP
8592: POP
// end ;
8593: PPOPN 2
8595: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8596: LD_EXP 36
8600: PUSH
8601: LD_EXP 46
8605: AND
8606: IFFALSE 8626
8608: GO 8610
8610: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8611: LD_INT 32
8613: PPUSH
8614: LD_OWVAR 2
8618: PPUSH
8619: LD_INT 0
8621: PPUSH
8622: CALL_OW 324
8626: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8627: LD_EXP 36
8631: PUSH
8632: LD_EXP 47
8636: AND
8637: IFFALSE 8818
8639: GO 8641
8641: DISABLE
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8647: LD_ADDR_VAR 0 2
8651: PUSH
8652: LD_INT 22
8654: PUSH
8655: LD_OWVAR 2
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 33
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PPUSH
8678: CALL_OW 69
8682: ST_TO_ADDR
// if not tmp then
8683: LD_VAR 0 2
8687: NOT
8688: IFFALSE 8692
// exit ;
8690: GO 8818
// side := 0 ;
8692: LD_ADDR_VAR 0 3
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// for i := 1 to 8 do
8700: LD_ADDR_VAR 0 1
8704: PUSH
8705: DOUBLE
8706: LD_INT 1
8708: DEC
8709: ST_TO_ADDR
8710: LD_INT 8
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8762
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8716: LD_OWVAR 2
8720: PUSH
8721: LD_VAR 0 1
8725: NONEQUAL
8726: PUSH
8727: LD_OWVAR 2
8731: PPUSH
8732: LD_VAR 0 1
8736: PPUSH
8737: CALL_OW 81
8741: PUSH
8742: LD_INT 2
8744: EQUAL
8745: AND
8746: IFFALSE 8760
// begin side := i ;
8748: LD_ADDR_VAR 0 3
8752: PUSH
8753: LD_VAR 0 1
8757: ST_TO_ADDR
// break ;
8758: GO 8762
// end ;
8760: GO 8713
8762: POP
8763: POP
// if not side then
8764: LD_VAR 0 3
8768: NOT
8769: IFFALSE 8773
// exit ;
8771: GO 8818
// for i := 1 to tmp do
8773: LD_ADDR_VAR 0 1
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_VAR 0 2
8787: PUSH
8788: FOR_TO
8789: IFFALSE 8816
// if Prob ( 60 ) then
8791: LD_INT 60
8793: PPUSH
8794: CALL_OW 13
8798: IFFALSE 8814
// SetSide ( i , side ) ;
8800: LD_VAR 0 1
8804: PPUSH
8805: LD_VAR 0 3
8809: PPUSH
8810: CALL_OW 235
8814: GO 8788
8816: POP
8817: POP
// end ;
8818: PPOPN 3
8820: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8821: LD_EXP 36
8825: PUSH
8826: LD_EXP 49
8830: AND
8831: IFFALSE 8950
8833: GO 8835
8835: DISABLE
8836: LD_INT 0
8838: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_INT 22
8846: PUSH
8847: LD_OWVAR 2
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 21
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 3
8868: PUSH
8869: LD_INT 23
8871: PUSH
8872: LD_INT 0
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: PPUSH
8888: CALL_OW 69
8892: PUSH
8893: FOR_IN
8894: IFFALSE 8948
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 257
8905: PUSH
8906: LD_INT 1
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: LD_INT 4
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: IN
8924: IFFALSE 8946
// SetClass ( un , rand ( 1 , 4 ) ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: LD_INT 4
8936: PPUSH
8937: CALL_OW 12
8941: PPUSH
8942: CALL_OW 336
8946: GO 8893
8948: POP
8949: POP
// end ;
8950: PPOPN 1
8952: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8953: LD_EXP 36
8957: PUSH
8958: LD_EXP 48
8962: AND
8963: IFFALSE 9042
8965: GO 8967
8967: DISABLE
8968: LD_INT 0
8970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8971: LD_ADDR_VAR 0 1
8975: PUSH
8976: LD_INT 22
8978: PUSH
8979: LD_OWVAR 2
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 21
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 69
9006: ST_TO_ADDR
// if not tmp then
9007: LD_VAR 0 1
9011: NOT
9012: IFFALSE 9016
// exit ;
9014: GO 9042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9016: LD_VAR 0 1
9020: PUSH
9021: LD_INT 1
9023: PPUSH
9024: LD_VAR 0 1
9028: PPUSH
9029: CALL_OW 12
9033: ARRAY
9034: PPUSH
9035: LD_INT 100
9037: PPUSH
9038: CALL_OW 234
// end ;
9042: PPOPN 1
9044: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9045: LD_EXP 36
9049: PUSH
9050: LD_EXP 50
9054: AND
9055: IFFALSE 9153
9057: GO 9059
9059: DISABLE
9060: LD_INT 0
9062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9063: LD_ADDR_VAR 0 1
9067: PUSH
9068: LD_INT 22
9070: PUSH
9071: LD_OWVAR 2
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 21
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: ST_TO_ADDR
// if not tmp then
9099: LD_VAR 0 1
9103: NOT
9104: IFFALSE 9108
// exit ;
9106: GO 9153
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9108: LD_VAR 0 1
9112: PUSH
9113: LD_INT 1
9115: PPUSH
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 12
9125: ARRAY
9126: PPUSH
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 4
9132: PPUSH
9133: CALL_OW 12
9137: PPUSH
9138: LD_INT 3000
9140: PPUSH
9141: LD_INT 9000
9143: PPUSH
9144: CALL_OW 12
9148: PPUSH
9149: CALL_OW 492
// end ;
9153: PPOPN 1
9155: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9156: LD_EXP 36
9160: PUSH
9161: LD_EXP 51
9165: AND
9166: IFFALSE 9186
9168: GO 9170
9170: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9171: LD_INT 1
9173: PPUSH
9174: LD_OWVAR 2
9178: PPUSH
9179: LD_INT 0
9181: PPUSH
9182: CALL_OW 324
9186: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9187: LD_EXP 36
9191: PUSH
9192: LD_EXP 52
9196: AND
9197: IFFALSE 9280
9199: GO 9201
9201: DISABLE
9202: LD_INT 0
9204: PPUSH
9205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9206: LD_ADDR_VAR 0 2
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_OWVAR 2
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 21
9225: PUSH
9226: LD_INT 3
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PPUSH
9237: CALL_OW 69
9241: ST_TO_ADDR
// if not tmp then
9242: LD_VAR 0 2
9246: NOT
9247: IFFALSE 9251
// exit ;
9249: GO 9280
// for i in tmp do
9251: LD_ADDR_VAR 0 1
9255: PUSH
9256: LD_VAR 0 2
9260: PUSH
9261: FOR_IN
9262: IFFALSE 9278
// SetBLevel ( i , 10 ) ;
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 241
9276: GO 9261
9278: POP
9279: POP
// end ;
9280: PPOPN 2
9282: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9283: LD_EXP 36
9287: PUSH
9288: LD_EXP 53
9292: AND
9293: IFFALSE 9404
9295: GO 9297
9297: DISABLE
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9303: LD_ADDR_VAR 0 3
9307: PUSH
9308: LD_INT 22
9310: PUSH
9311: LD_OWVAR 2
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PPUSH
9334: CALL_OW 69
9338: ST_TO_ADDR
// if not tmp then
9339: LD_VAR 0 3
9343: NOT
9344: IFFALSE 9348
// exit ;
9346: GO 9404
// un := tmp [ rand ( 1 , tmp ) ] ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 1
9360: PPUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: CALL_OW 12
9370: ARRAY
9371: ST_TO_ADDR
// if Crawls ( un ) then
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 318
9381: IFFALSE 9392
// ComWalk ( un ) ;
9383: LD_VAR 0 2
9387: PPUSH
9388: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9392: LD_VAR 0 2
9396: PPUSH
9397: LD_INT 5
9399: PPUSH
9400: CALL_OW 336
// end ;
9404: PPOPN 3
9406: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
9407: LD_EXP 36
9411: PUSH
9412: LD_EXP 54
9416: AND
9417: PUSH
9418: LD_OWVAR 67
9422: PUSH
9423: LD_INT 3
9425: LESS
9426: AND
9427: IFFALSE 9446
9429: GO 9431
9431: DISABLE
// Difficulty := Difficulty + 1 ;
9432: LD_ADDR_OWVAR 67
9436: PUSH
9437: LD_OWVAR 67
9441: PUSH
9442: LD_INT 1
9444: PLUS
9445: ST_TO_ADDR
9446: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9447: LD_EXP 36
9451: PUSH
9452: LD_EXP 55
9456: AND
9457: IFFALSE 9560
9459: GO 9461
9461: DISABLE
9462: LD_INT 0
9464: PPUSH
// begin for i := 1 to 5 do
9465: LD_ADDR_VAR 0 1
9469: PUSH
9470: DOUBLE
9471: LD_INT 1
9473: DEC
9474: ST_TO_ADDR
9475: LD_INT 5
9477: PUSH
9478: FOR_TO
9479: IFFALSE 9558
// begin uc_nation := nation_nature ;
9481: LD_ADDR_OWVAR 21
9485: PUSH
9486: LD_INT 0
9488: ST_TO_ADDR
// uc_side := 0 ;
9489: LD_ADDR_OWVAR 20
9493: PUSH
9494: LD_INT 0
9496: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9497: LD_ADDR_OWVAR 29
9501: PUSH
9502: LD_INT 12
9504: PUSH
9505: LD_INT 12
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: ST_TO_ADDR
// hc_agressivity := 20 ;
9512: LD_ADDR_OWVAR 35
9516: PUSH
9517: LD_INT 20
9519: ST_TO_ADDR
// hc_class := class_tiger ;
9520: LD_ADDR_OWVAR 28
9524: PUSH
9525: LD_INT 14
9527: ST_TO_ADDR
// hc_gallery :=  ;
9528: LD_ADDR_OWVAR 33
9532: PUSH
9533: LD_STRING 
9535: ST_TO_ADDR
// hc_name :=  ;
9536: LD_ADDR_OWVAR 26
9540: PUSH
9541: LD_STRING 
9543: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9544: CALL_OW 44
9548: PPUSH
9549: LD_INT 0
9551: PPUSH
9552: CALL_OW 51
// end ;
9556: GO 9478
9558: POP
9559: POP
// end ;
9560: PPOPN 1
9562: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9563: LD_EXP 36
9567: PUSH
9568: LD_EXP 56
9572: AND
9573: IFFALSE 9582
9575: GO 9577
9577: DISABLE
// StreamSibBomb ;
9578: CALL 9583 0 0
9582: END
// export function StreamSibBomb ; var i , x , y ; begin
9583: LD_INT 0
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
// result := false ;
9589: LD_ADDR_VAR 0 1
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// for i := 1 to 16 do
9597: LD_ADDR_VAR 0 2
9601: PUSH
9602: DOUBLE
9603: LD_INT 1
9605: DEC
9606: ST_TO_ADDR
9607: LD_INT 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9810
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9613: LD_ADDR_VAR 0 3
9617: PUSH
9618: LD_INT 10
9620: PUSH
9621: LD_INT 20
9623: PUSH
9624: LD_INT 30
9626: PUSH
9627: LD_INT 40
9629: PUSH
9630: LD_INT 50
9632: PUSH
9633: LD_INT 60
9635: PUSH
9636: LD_INT 70
9638: PUSH
9639: LD_INT 80
9641: PUSH
9642: LD_INT 90
9644: PUSH
9645: LD_INT 100
9647: PUSH
9648: LD_INT 110
9650: PUSH
9651: LD_INT 120
9653: PUSH
9654: LD_INT 130
9656: PUSH
9657: LD_INT 140
9659: PUSH
9660: LD_INT 150
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 1
9682: PPUSH
9683: LD_INT 15
9685: PPUSH
9686: CALL_OW 12
9690: ARRAY
9691: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9692: LD_ADDR_VAR 0 4
9696: PUSH
9697: LD_INT 10
9699: PUSH
9700: LD_INT 20
9702: PUSH
9703: LD_INT 30
9705: PUSH
9706: LD_INT 40
9708: PUSH
9709: LD_INT 50
9711: PUSH
9712: LD_INT 60
9714: PUSH
9715: LD_INT 70
9717: PUSH
9718: LD_INT 80
9720: PUSH
9721: LD_INT 90
9723: PUSH
9724: LD_INT 100
9726: PUSH
9727: LD_INT 110
9729: PUSH
9730: LD_INT 120
9732: PUSH
9733: LD_INT 130
9735: PUSH
9736: LD_INT 140
9738: PUSH
9739: LD_INT 150
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 1
9761: PPUSH
9762: LD_INT 15
9764: PPUSH
9765: CALL_OW 12
9769: ARRAY
9770: ST_TO_ADDR
// if ValidHex ( x , y ) then
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_VAR 0 4
9780: PPUSH
9781: CALL_OW 488
9785: IFFALSE 9808
// begin result := [ x , y ] ;
9787: LD_ADDR_VAR 0 1
9791: PUSH
9792: LD_VAR 0 3
9796: PUSH
9797: LD_VAR 0 4
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: ST_TO_ADDR
// break ;
9806: GO 9810
// end ; end ;
9808: GO 9610
9810: POP
9811: POP
// if result then
9812: LD_VAR 0 1
9816: IFFALSE 9876
// begin ToLua ( playSibBomb() ) ;
9818: LD_STRING playSibBomb()
9820: PPUSH
9821: CALL_OW 559
// wait ( 0 0$14 ) ;
9825: LD_INT 490
9827: PPUSH
9828: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9832: LD_VAR 0 1
9836: PUSH
9837: LD_INT 1
9839: ARRAY
9840: PPUSH
9841: LD_VAR 0 1
9845: PUSH
9846: LD_INT 2
9848: ARRAY
9849: PPUSH
9850: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9854: LD_VAR 0 1
9858: PUSH
9859: LD_INT 1
9861: ARRAY
9862: PPUSH
9863: LD_VAR 0 1
9867: PUSH
9868: LD_INT 2
9870: ARRAY
9871: PPUSH
9872: CALL_OW 429
// end ; end ;
9876: LD_VAR 0 1
9880: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9881: LD_EXP 36
9885: PUSH
9886: LD_EXP 58
9890: AND
9891: IFFALSE 9903
9893: GO 9895
9895: DISABLE
// YouLost (  ) ;
9896: LD_STRING 
9898: PPUSH
9899: CALL_OW 104
9903: END
// every 0 0$1 trigger StreamModeActive and sFog do
9904: LD_EXP 36
9908: PUSH
9909: LD_EXP 57
9913: AND
9914: IFFALSE 9928
9916: GO 9918
9918: DISABLE
// FogOff ( your_side ) ;
9919: LD_OWVAR 2
9923: PPUSH
9924: CALL_OW 344
9928: END
// every 0 0$1 trigger StreamModeActive and sSun do
9929: LD_EXP 36
9933: PUSH
9934: LD_EXP 59
9938: AND
9939: IFFALSE 9967
9941: GO 9943
9943: DISABLE
// begin solar_recharge_percent := 0 ;
9944: LD_ADDR_OWVAR 79
9948: PUSH
9949: LD_INT 0
9951: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9952: LD_INT 10500
9954: PPUSH
9955: CALL_OW 67
// solar_recharge_percent := 100 ;
9959: LD_ADDR_OWVAR 79
9963: PUSH
9964: LD_INT 100
9966: ST_TO_ADDR
// end ;
9967: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9968: LD_EXP 36
9972: PUSH
9973: LD_EXP 60
9977: AND
9978: IFFALSE 10217
9980: GO 9982
9982: DISABLE
9983: LD_INT 0
9985: PPUSH
9986: PPUSH
9987: PPUSH
// begin tmp := [ ] ;
9988: LD_ADDR_VAR 0 3
9992: PUSH
9993: EMPTY
9994: ST_TO_ADDR
// for i := 1 to 6 do
9995: LD_ADDR_VAR 0 1
9999: PUSH
10000: DOUBLE
10001: LD_INT 1
10003: DEC
10004: ST_TO_ADDR
10005: LD_INT 6
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10114
// begin uc_nation := nation_nature ;
10011: LD_ADDR_OWVAR 21
10015: PUSH
10016: LD_INT 0
10018: ST_TO_ADDR
// uc_side := 0 ;
10019: LD_ADDR_OWVAR 20
10023: PUSH
10024: LD_INT 0
10026: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10027: LD_ADDR_OWVAR 29
10031: PUSH
10032: LD_INT 12
10034: PUSH
10035: LD_INT 12
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: ST_TO_ADDR
// hc_agressivity := 20 ;
10042: LD_ADDR_OWVAR 35
10046: PUSH
10047: LD_INT 20
10049: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10050: LD_ADDR_OWVAR 28
10054: PUSH
10055: LD_INT 17
10057: ST_TO_ADDR
// hc_gallery :=  ;
10058: LD_ADDR_OWVAR 33
10062: PUSH
10063: LD_STRING 
10065: ST_TO_ADDR
// hc_name :=  ;
10066: LD_ADDR_OWVAR 26
10070: PUSH
10071: LD_STRING 
10073: ST_TO_ADDR
// un := CreateHuman ;
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: CALL_OW 44
10083: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10084: LD_VAR 0 2
10088: PPUSH
10089: LD_INT 1
10091: PPUSH
10092: CALL_OW 51
// tmp := tmp ^ un ;
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: LD_VAR 0 3
10105: PUSH
10106: LD_VAR 0 2
10110: ADD
10111: ST_TO_ADDR
// end ;
10112: GO 10008
10114: POP
10115: POP
// repeat wait ( 0 0$1 ) ;
10116: LD_INT 35
10118: PPUSH
10119: CALL_OW 67
// for un in tmp do
10123: LD_ADDR_VAR 0 2
10127: PUSH
10128: LD_VAR 0 3
10132: PUSH
10133: FOR_IN
10134: IFFALSE 10208
// begin if IsDead ( un ) then
10136: LD_VAR 0 2
10140: PPUSH
10141: CALL_OW 301
10145: IFFALSE 10165
// begin tmp := tmp diff un ;
10147: LD_ADDR_VAR 0 3
10151: PUSH
10152: LD_VAR 0 3
10156: PUSH
10157: LD_VAR 0 2
10161: DIFF
10162: ST_TO_ADDR
// continue ;
10163: GO 10133
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10165: LD_VAR 0 2
10169: PPUSH
10170: LD_INT 3
10172: PUSH
10173: LD_INT 22
10175: PUSH
10176: LD_INT 0
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PPUSH
10187: CALL_OW 69
10191: PPUSH
10192: LD_VAR 0 2
10196: PPUSH
10197: CALL_OW 74
10201: PPUSH
10202: CALL_OW 115
// end ;
10206: GO 10133
10208: POP
10209: POP
// until not tmp ;
10210: LD_VAR 0 3
10214: NOT
10215: IFFALSE 10116
// end ;
10217: PPOPN 3
10219: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10220: LD_EXP 36
10224: PUSH
10225: LD_EXP 61
10229: AND
10230: IFFALSE 10284
10232: GO 10234
10234: DISABLE
// begin ToLua ( displayTroll(); ) ;
10235: LD_STRING displayTroll();
10237: PPUSH
10238: CALL_OW 559
// wait ( 3 3$00 ) ;
10242: LD_INT 6300
10244: PPUSH
10245: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10249: LD_STRING hideTroll();
10251: PPUSH
10252: CALL_OW 559
// wait ( 1 1$00 ) ;
10256: LD_INT 2100
10258: PPUSH
10259: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10263: LD_STRING displayTroll();
10265: PPUSH
10266: CALL_OW 559
// wait ( 1 1$00 ) ;
10270: LD_INT 2100
10272: PPUSH
10273: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10277: LD_STRING hideTroll();
10279: PPUSH
10280: CALL_OW 559
// end ;
10284: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10285: LD_EXP 36
10289: PUSH
10290: LD_EXP 62
10294: AND
10295: IFFALSE 10358
10297: GO 10299
10299: DISABLE
10300: LD_INT 0
10302: PPUSH
// begin p := 0 ;
10303: LD_ADDR_VAR 0 1
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// repeat game_speed := 1 ;
10311: LD_ADDR_OWVAR 65
10315: PUSH
10316: LD_INT 1
10318: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10319: LD_INT 35
10321: PPUSH
10322: CALL_OW 67
// p := p + 1 ;
10326: LD_ADDR_VAR 0 1
10330: PUSH
10331: LD_VAR 0 1
10335: PUSH
10336: LD_INT 1
10338: PLUS
10339: ST_TO_ADDR
// until p >= 60 ;
10340: LD_VAR 0 1
10344: PUSH
10345: LD_INT 60
10347: GREATEREQUAL
10348: IFFALSE 10311
// game_speed := 4 ;
10350: LD_ADDR_OWVAR 65
10354: PUSH
10355: LD_INT 4
10357: ST_TO_ADDR
// end ;
10358: PPOPN 1
10360: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10361: LD_EXP 36
10365: PUSH
10366: LD_EXP 63
10370: AND
10371: IFFALSE 10517
10373: GO 10375
10375: DISABLE
10376: LD_INT 0
10378: PPUSH
10379: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10380: LD_ADDR_VAR 0 1
10384: PUSH
10385: LD_INT 22
10387: PUSH
10388: LD_OWVAR 2
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 2
10399: PUSH
10400: LD_INT 30
10402: PUSH
10403: LD_INT 0
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 30
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 69
10433: ST_TO_ADDR
// if not depot then
10434: LD_VAR 0 1
10438: NOT
10439: IFFALSE 10443
// exit ;
10441: GO 10517
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10443: LD_ADDR_VAR 0 2
10447: PUSH
10448: LD_VAR 0 1
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 12
10465: ARRAY
10466: PPUSH
10467: CALL_OW 274
10471: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10472: LD_VAR 0 2
10476: PPUSH
10477: LD_INT 1
10479: PPUSH
10480: LD_INT 0
10482: PPUSH
10483: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10487: LD_VAR 0 2
10491: PPUSH
10492: LD_INT 2
10494: PPUSH
10495: LD_INT 0
10497: PPUSH
10498: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10502: LD_VAR 0 2
10506: PPUSH
10507: LD_INT 3
10509: PPUSH
10510: LD_INT 0
10512: PPUSH
10513: CALL_OW 277
// end ;
10517: PPOPN 2
10519: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10520: LD_EXP 36
10524: PUSH
10525: LD_EXP 64
10529: AND
10530: IFFALSE 10627
10532: GO 10534
10534: DISABLE
10535: LD_INT 0
10537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10538: LD_ADDR_VAR 0 1
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_OWVAR 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 21
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 3
10567: PUSH
10568: LD_INT 23
10570: PUSH
10571: LD_INT 0
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: PPUSH
10587: CALL_OW 69
10591: ST_TO_ADDR
// if not tmp then
10592: LD_VAR 0 1
10596: NOT
10597: IFFALSE 10601
// exit ;
10599: GO 10627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10601: LD_VAR 0 1
10605: PUSH
10606: LD_INT 1
10608: PPUSH
10609: LD_VAR 0 1
10613: PPUSH
10614: CALL_OW 12
10618: ARRAY
10619: PPUSH
10620: LD_INT 200
10622: PPUSH
10623: CALL_OW 234
// end ;
10627: PPOPN 1
10629: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10630: LD_EXP 36
10634: PUSH
10635: LD_EXP 65
10639: AND
10640: IFFALSE 10719
10642: GO 10644
10644: DISABLE
10645: LD_INT 0
10647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10648: LD_ADDR_VAR 0 1
10652: PUSH
10653: LD_INT 22
10655: PUSH
10656: LD_OWVAR 2
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 69
10683: ST_TO_ADDR
// if not tmp then
10684: LD_VAR 0 1
10688: NOT
10689: IFFALSE 10693
// exit ;
10691: GO 10719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10693: LD_VAR 0 1
10697: PUSH
10698: LD_INT 1
10700: PPUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: CALL_OW 12
10710: ARRAY
10711: PPUSH
10712: LD_INT 60
10714: PPUSH
10715: CALL_OW 234
// end ;
10719: PPOPN 1
10721: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10722: LD_EXP 36
10726: PUSH
10727: LD_EXP 66
10731: AND
10732: IFFALSE 10831
10734: GO 10736
10736: DISABLE
10737: LD_INT 0
10739: PPUSH
10740: PPUSH
// begin enable ;
10741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10742: LD_ADDR_VAR 0 1
10746: PUSH
10747: LD_INT 22
10749: PUSH
10750: LD_OWVAR 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 61
10761: PUSH
10762: EMPTY
10763: LIST
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: PPUSH
10780: CALL_OW 69
10784: ST_TO_ADDR
// if not tmp then
10785: LD_VAR 0 1
10789: NOT
10790: IFFALSE 10794
// exit ;
10792: GO 10831
// for i in tmp do
10794: LD_ADDR_VAR 0 2
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: FOR_IN
10805: IFFALSE 10829
// if IsControledBy ( i ) then
10807: LD_VAR 0 2
10811: PPUSH
10812: CALL_OW 312
10816: IFFALSE 10827
// ComUnlink ( i ) ;
10818: LD_VAR 0 2
10822: PPUSH
10823: CALL_OW 136
10827: GO 10804
10829: POP
10830: POP
// end ;
10831: PPOPN 2
10833: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10834: LD_EXP 36
10838: PUSH
10839: LD_EXP 67
10843: AND
10844: IFFALSE 10984
10846: GO 10848
10848: DISABLE
10849: LD_INT 0
10851: PPUSH
10852: PPUSH
// begin ToLua ( displayPowell(); ) ;
10853: LD_STRING displayPowell();
10855: PPUSH
10856: CALL_OW 559
// uc_side := 0 ;
10860: LD_ADDR_OWVAR 20
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// uc_nation := 2 ;
10868: LD_ADDR_OWVAR 21
10872: PUSH
10873: LD_INT 2
10875: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10876: LD_ADDR_OWVAR 37
10880: PUSH
10881: LD_INT 14
10883: ST_TO_ADDR
// vc_engine := engine_siberite ;
10884: LD_ADDR_OWVAR 39
10888: PUSH
10889: LD_INT 3
10891: ST_TO_ADDR
// vc_control := control_apeman ;
10892: LD_ADDR_OWVAR 38
10896: PUSH
10897: LD_INT 5
10899: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10900: LD_ADDR_OWVAR 40
10904: PUSH
10905: LD_INT 29
10907: ST_TO_ADDR
// un := CreateVehicle ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: CALL_OW 45
10917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10918: LD_VAR 0 2
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10930: LD_INT 35
10932: PPUSH
10933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10937: LD_VAR 0 2
10941: PPUSH
10942: LD_INT 22
10944: PUSH
10945: LD_OWVAR 2
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: PPUSH
10959: LD_VAR 0 2
10963: PPUSH
10964: CALL_OW 74
10968: PPUSH
10969: CALL_OW 115
// until IsDead ( un ) ;
10973: LD_VAR 0 2
10977: PPUSH
10978: CALL_OW 301
10982: IFFALSE 10930
// end ;
10984: PPOPN 2
10986: END
// every 0 0$1 trigger StreamModeActive and sStu do
10987: LD_EXP 36
10991: PUSH
10992: LD_EXP 75
10996: AND
10997: IFFALSE 11013
10999: GO 11001
11001: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11002: LD_STRING displayStucuk();
11004: PPUSH
11005: CALL_OW 559
// ResetFog ;
11009: CALL_OW 335
// end ;
11013: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11014: LD_EXP 36
11018: PUSH
11019: LD_EXP 68
11023: AND
11024: IFFALSE 11165
11026: GO 11028
11028: DISABLE
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11033: LD_ADDR_VAR 0 2
11037: PUSH
11038: LD_INT 22
11040: PUSH
11041: LD_OWVAR 2
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 21
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: ST_TO_ADDR
// if not tmp then
11069: LD_VAR 0 2
11073: NOT
11074: IFFALSE 11078
// exit ;
11076: GO 11165
// un := tmp [ rand ( 1 , tmp ) ] ;
11078: LD_ADDR_VAR 0 1
11082: PUSH
11083: LD_VAR 0 2
11087: PUSH
11088: LD_INT 1
11090: PPUSH
11091: LD_VAR 0 2
11095: PPUSH
11096: CALL_OW 12
11100: ARRAY
11101: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11102: LD_VAR 0 1
11106: PPUSH
11107: LD_INT 0
11109: PPUSH
11110: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11114: LD_VAR 0 1
11118: PPUSH
11119: LD_OWVAR 3
11123: PUSH
11124: LD_VAR 0 1
11128: DIFF
11129: PPUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 74
11139: PPUSH
11140: CALL_OW 115
// wait ( 0 0$20 ) ;
11144: LD_INT 700
11146: PPUSH
11147: CALL_OW 67
// SetSide ( un , your_side ) ;
11151: LD_VAR 0 1
11155: PPUSH
11156: LD_OWVAR 2
11160: PPUSH
11161: CALL_OW 235
// end ;
11165: PPOPN 2
11167: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11168: LD_EXP 36
11172: PUSH
11173: LD_EXP 69
11177: AND
11178: IFFALSE 11284
11180: GO 11182
11182: DISABLE
11183: LD_INT 0
11185: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11186: LD_ADDR_VAR 0 1
11190: PUSH
11191: LD_INT 22
11193: PUSH
11194: LD_OWVAR 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 2
11205: PUSH
11206: LD_INT 30
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 30
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: ST_TO_ADDR
// if not depot then
11240: LD_VAR 0 1
11244: NOT
11245: IFFALSE 11249
// exit ;
11247: GO 11284
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11249: LD_VAR 0 1
11253: PUSH
11254: LD_INT 1
11256: ARRAY
11257: PPUSH
11258: CALL_OW 250
11262: PPUSH
11263: LD_VAR 0 1
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: PPUSH
11272: CALL_OW 251
11276: PPUSH
11277: LD_INT 70
11279: PPUSH
11280: CALL_OW 495
// end ;
11284: PPOPN 1
11286: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11287: LD_EXP 36
11291: PUSH
11292: LD_EXP 70
11296: AND
11297: IFFALSE 11508
11299: GO 11301
11301: DISABLE
11302: LD_INT 0
11304: PPUSH
11305: PPUSH
11306: PPUSH
11307: PPUSH
11308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11309: LD_ADDR_VAR 0 5
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_OWVAR 2
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 21
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: ST_TO_ADDR
// if not tmp then
11345: LD_VAR 0 5
11349: NOT
11350: IFFALSE 11354
// exit ;
11352: GO 11508
// for i in tmp do
11354: LD_ADDR_VAR 0 1
11358: PUSH
11359: LD_VAR 0 5
11363: PUSH
11364: FOR_IN
11365: IFFALSE 11506
// begin d := rand ( 0 , 5 ) ;
11367: LD_ADDR_VAR 0 4
11371: PUSH
11372: LD_INT 0
11374: PPUSH
11375: LD_INT 5
11377: PPUSH
11378: CALL_OW 12
11382: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11383: LD_ADDR_VAR 0 2
11387: PUSH
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 250
11397: PPUSH
11398: LD_VAR 0 4
11402: PPUSH
11403: LD_INT 3
11405: PPUSH
11406: LD_INT 12
11408: PPUSH
11409: CALL_OW 12
11413: PPUSH
11414: CALL_OW 272
11418: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11419: LD_ADDR_VAR 0 3
11423: PUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 251
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_INT 3
11441: PPUSH
11442: LD_INT 12
11444: PPUSH
11445: CALL_OW 12
11449: PPUSH
11450: CALL_OW 273
11454: ST_TO_ADDR
// if ValidHex ( x , y ) then
11455: LD_VAR 0 2
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: CALL_OW 488
11469: IFFALSE 11504
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11471: LD_VAR 0 1
11475: PPUSH
11476: LD_VAR 0 2
11480: PPUSH
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 3
11488: PPUSH
11489: LD_INT 6
11491: PPUSH
11492: CALL_OW 12
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 483
// end ;
11504: GO 11364
11506: POP
11507: POP
// end ;
11508: PPOPN 5
11510: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11511: LD_EXP 36
11515: PUSH
11516: LD_EXP 71
11520: AND
11521: IFFALSE 11615
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11530: LD_ADDR_VAR 0 2
11534: PUSH
11535: LD_INT 22
11537: PUSH
11538: LD_OWVAR 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 32
11549: PUSH
11550: LD_INT 1
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 21
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL_OW 69
11576: ST_TO_ADDR
// if not tmp then
11577: LD_VAR 0 2
11581: NOT
11582: IFFALSE 11586
// exit ;
11584: GO 11615
// for i in tmp do
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: LD_VAR 0 2
11595: PUSH
11596: FOR_IN
11597: IFFALSE 11613
// SetFuel ( i , 0 ) ;
11599: LD_VAR 0 1
11603: PPUSH
11604: LD_INT 0
11606: PPUSH
11607: CALL_OW 240
11611: GO 11596
11613: POP
11614: POP
// end ;
11615: PPOPN 2
11617: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11618: LD_EXP 36
11622: PUSH
11623: LD_EXP 72
11627: AND
11628: IFFALSE 11694
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_OWVAR 2
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 30
11655: PUSH
11656: LD_INT 29
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 1
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11694
// DestroyUnit ( tmp [ 1 ] ) ;
11681: LD_VAR 0 1
11685: PUSH
11686: LD_INT 1
11688: ARRAY
11689: PPUSH
11690: CALL_OW 65
// end ;
11694: PPOPN 1
11696: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11697: LD_EXP 36
11701: PUSH
11702: LD_EXP 74
11706: AND
11707: IFFALSE 11836
11709: GO 11711
11711: DISABLE
11712: LD_INT 0
11714: PPUSH
// begin uc_side := 0 ;
11715: LD_ADDR_OWVAR 20
11719: PUSH
11720: LD_INT 0
11722: ST_TO_ADDR
// uc_nation := nation_arabian ;
11723: LD_ADDR_OWVAR 21
11727: PUSH
11728: LD_INT 2
11730: ST_TO_ADDR
// hc_gallery :=  ;
11731: LD_ADDR_OWVAR 33
11735: PUSH
11736: LD_STRING 
11738: ST_TO_ADDR
// hc_name :=  ;
11739: LD_ADDR_OWVAR 26
11743: PUSH
11744: LD_STRING 
11746: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 11
11752: PPUSH
11753: LD_INT 10
11755: PPUSH
11756: CALL_OW 380
// un := CreateHuman ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: CALL_OW 44
11769: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11770: LD_VAR 0 1
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11782: LD_INT 35
11784: PPUSH
11785: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: LD_INT 22
11796: PUSH
11797: LD_OWVAR 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: PPUSH
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 74
11820: PPUSH
11821: CALL_OW 115
// until IsDead ( un ) ;
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 301
11834: IFFALSE 11782
// end ;
11836: PPOPN 1
11838: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11839: LD_EXP 36
11843: PUSH
11844: LD_EXP 76
11848: AND
11849: IFFALSE 11861
11851: GO 11853
11853: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11854: LD_STRING earthquake(getX(game), 0, 32)
11856: PPUSH
11857: CALL_OW 559
11861: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11862: LD_EXP 36
11866: PUSH
11867: LD_EXP 77
11871: AND
11872: IFFALSE 11963
11874: GO 11876
11876: DISABLE
11877: LD_INT 0
11879: PPUSH
// begin enable ;
11880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11881: LD_ADDR_VAR 0 1
11885: PUSH
11886: LD_INT 22
11888: PUSH
11889: LD_OWVAR 2
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 21
11900: PUSH
11901: LD_INT 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 33
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: ST_TO_ADDR
// if not tmp then
11928: LD_VAR 0 1
11932: NOT
11933: IFFALSE 11937
// exit ;
11935: GO 11963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11937: LD_VAR 0 1
11941: PUSH
11942: LD_INT 1
11944: PPUSH
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 12
11954: ARRAY
11955: PPUSH
11956: LD_INT 1
11958: PPUSH
11959: CALL_OW 234
// end ;
11963: PPOPN 1
11965: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11966: LD_EXP 36
11970: PUSH
11971: LD_EXP 78
11975: AND
11976: IFFALSE 12117
11978: GO 11980
11980: DISABLE
11981: LD_INT 0
11983: PPUSH
11984: PPUSH
11985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11986: LD_ADDR_VAR 0 3
11990: PUSH
11991: LD_INT 22
11993: PUSH
11994: LD_OWVAR 2
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 25
12005: PUSH
12006: LD_INT 1
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 69
12021: ST_TO_ADDR
// if not tmp then
12022: LD_VAR 0 3
12026: NOT
12027: IFFALSE 12031
// exit ;
12029: GO 12117
// un := tmp [ rand ( 1 , tmp ) ] ;
12031: LD_ADDR_VAR 0 2
12035: PUSH
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 1
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: CALL_OW 12
12053: ARRAY
12054: ST_TO_ADDR
// if Crawls ( un ) then
12055: LD_VAR 0 2
12059: PPUSH
12060: CALL_OW 318
12064: IFFALSE 12075
// ComWalk ( un ) ;
12066: LD_VAR 0 2
12070: PPUSH
12071: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12075: LD_VAR 0 2
12079: PPUSH
12080: LD_INT 9
12082: PPUSH
12083: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12087: LD_INT 28
12089: PPUSH
12090: LD_OWVAR 2
12094: PPUSH
12095: LD_INT 2
12097: PPUSH
12098: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12102: LD_INT 29
12104: PPUSH
12105: LD_OWVAR 2
12109: PPUSH
12110: LD_INT 2
12112: PPUSH
12113: CALL_OW 322
// end ;
12117: PPOPN 3
12119: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12120: LD_EXP 36
12124: PUSH
12125: LD_EXP 79
12129: AND
12130: IFFALSE 12241
12132: GO 12134
12134: DISABLE
12135: LD_INT 0
12137: PPUSH
12138: PPUSH
12139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_OWVAR 2
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 1
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PPUSH
12171: CALL_OW 69
12175: ST_TO_ADDR
// if not tmp then
12176: LD_VAR 0 3
12180: NOT
12181: IFFALSE 12185
// exit ;
12183: GO 12241
// un := tmp [ rand ( 1 , tmp ) ] ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_VAR 0 3
12194: PUSH
12195: LD_INT 1
12197: PPUSH
12198: LD_VAR 0 3
12202: PPUSH
12203: CALL_OW 12
12207: ARRAY
12208: ST_TO_ADDR
// if Crawls ( un ) then
12209: LD_VAR 0 2
12213: PPUSH
12214: CALL_OW 318
12218: IFFALSE 12229
// ComWalk ( un ) ;
12220: LD_VAR 0 2
12224: PPUSH
12225: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_INT 8
12236: PPUSH
12237: CALL_OW 336
// end ;
12241: PPOPN 3
12243: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12244: LD_EXP 36
12248: PUSH
12249: LD_EXP 80
12253: AND
12254: IFFALSE 12398
12256: GO 12258
12258: DISABLE
12259: LD_INT 0
12261: PPUSH
12262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12263: LD_ADDR_VAR 0 2
12267: PUSH
12268: LD_INT 22
12270: PUSH
12271: LD_OWVAR 2
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 2
12292: PUSH
12293: LD_INT 34
12295: PUSH
12296: LD_INT 12
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 34
12305: PUSH
12306: LD_INT 51
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 34
12315: PUSH
12316: LD_INT 32
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 69
12338: ST_TO_ADDR
// if not tmp then
12339: LD_VAR 0 2
12343: NOT
12344: IFFALSE 12348
// exit ;
12346: GO 12398
// for i in tmp do
12348: LD_ADDR_VAR 0 1
12352: PUSH
12353: LD_VAR 0 2
12357: PUSH
12358: FOR_IN
12359: IFFALSE 12396
// if GetCargo ( i , mat_artifact ) = 0 then
12361: LD_VAR 0 1
12365: PPUSH
12366: LD_INT 4
12368: PPUSH
12369: CALL_OW 289
12373: PUSH
12374: LD_INT 0
12376: EQUAL
12377: IFFALSE 12394
// SetCargo ( i , mat_siberit , 100 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: LD_INT 100
12389: PPUSH
12390: CALL_OW 290
12394: GO 12358
12396: POP
12397: POP
// end ;
12398: PPOPN 2
12400: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12401: LD_EXP 36
12405: PUSH
12406: LD_EXP 81
12410: AND
12411: IFFALSE 12564
12413: GO 12415
12415: DISABLE
12416: LD_INT 0
12418: PPUSH
12419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12420: LD_ADDR_VAR 0 2
12424: PUSH
12425: LD_INT 22
12427: PUSH
12428: LD_OWVAR 2
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PPUSH
12437: CALL_OW 69
12441: ST_TO_ADDR
// if not tmp then
12442: LD_VAR 0 2
12446: NOT
12447: IFFALSE 12451
// exit ;
12449: GO 12564
// for i := 1 to 2 do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: DOUBLE
12457: LD_INT 1
12459: DEC
12460: ST_TO_ADDR
12461: LD_INT 2
12463: PUSH
12464: FOR_TO
12465: IFFALSE 12562
// begin uc_side := your_side ;
12467: LD_ADDR_OWVAR 20
12471: PUSH
12472: LD_OWVAR 2
12476: ST_TO_ADDR
// uc_nation := nation_american ;
12477: LD_ADDR_OWVAR 21
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// vc_chassis := us_morphling ;
12485: LD_ADDR_OWVAR 37
12489: PUSH
12490: LD_INT 5
12492: ST_TO_ADDR
// vc_engine := engine_siberite ;
12493: LD_ADDR_OWVAR 39
12497: PUSH
12498: LD_INT 3
12500: ST_TO_ADDR
// vc_control := control_computer ;
12501: LD_ADDR_OWVAR 38
12505: PUSH
12506: LD_INT 3
12508: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12509: LD_ADDR_OWVAR 40
12513: PUSH
12514: LD_INT 10
12516: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
12517: CALL_OW 45
12521: PPUSH
12522: LD_VAR 0 2
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PPUSH
12531: CALL_OW 250
12535: PPUSH
12536: LD_VAR 0 2
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: CALL_OW 251
12549: PPUSH
12550: LD_INT 12
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 50
// end ;
12560: GO 12464
12562: POP
12563: POP
// end ;
12564: PPOPN 2
12566: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12567: LD_EXP 36
12571: PUSH
12572: LD_EXP 82
12576: AND
12577: IFFALSE 12799
12579: GO 12581
12581: DISABLE
12582: LD_INT 0
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
12588: PPUSH
12589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12590: LD_ADDR_VAR 0 6
12594: PUSH
12595: LD_INT 22
12597: PUSH
12598: LD_OWVAR 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 21
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 3
12619: PUSH
12620: LD_INT 23
12622: PUSH
12623: LD_INT 0
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 69
12643: ST_TO_ADDR
// if not tmp then
12644: LD_VAR 0 6
12648: NOT
12649: IFFALSE 12653
// exit ;
12651: GO 12799
// s1 := rand ( 1 , 4 ) ;
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 1
12660: PPUSH
12661: LD_INT 4
12663: PPUSH
12664: CALL_OW 12
12668: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12669: LD_ADDR_VAR 0 4
12673: PUSH
12674: LD_VAR 0 6
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: PPUSH
12683: LD_VAR 0 2
12687: PPUSH
12688: CALL_OW 259
12692: ST_TO_ADDR
// if s1 = 1 then
12693: LD_VAR 0 2
12697: PUSH
12698: LD_INT 1
12700: EQUAL
12701: IFFALSE 12721
// s2 := rand ( 2 , 4 ) else
12703: LD_ADDR_VAR 0 3
12707: PUSH
12708: LD_INT 2
12710: PPUSH
12711: LD_INT 4
12713: PPUSH
12714: CALL_OW 12
12718: ST_TO_ADDR
12719: GO 12729
// s2 := 1 ;
12721: LD_ADDR_VAR 0 3
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12729: LD_ADDR_VAR 0 5
12733: PUSH
12734: LD_VAR 0 6
12738: PUSH
12739: LD_INT 1
12741: ARRAY
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 259
12752: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12753: LD_VAR 0 6
12757: PUSH
12758: LD_INT 1
12760: ARRAY
12761: PPUSH
12762: LD_VAR 0 2
12766: PPUSH
12767: LD_VAR 0 5
12771: PPUSH
12772: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12776: LD_VAR 0 6
12780: PUSH
12781: LD_INT 1
12783: ARRAY
12784: PPUSH
12785: LD_VAR 0 3
12789: PPUSH
12790: LD_VAR 0 4
12794: PPUSH
12795: CALL_OW 237
// end ;
12799: PPOPN 6
12801: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12802: LD_EXP 36
12806: PUSH
12807: LD_EXP 83
12811: AND
12812: IFFALSE 12891
12814: GO 12816
12816: DISABLE
12817: LD_INT 0
12819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_INT 22
12827: PUSH
12828: LD_OWVAR 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 30
12839: PUSH
12840: LD_INT 3
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 69
12855: ST_TO_ADDR
// if not tmp then
12856: LD_VAR 0 1
12860: NOT
12861: IFFALSE 12865
// exit ;
12863: GO 12891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 12
12882: ARRAY
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 234
// end ;
12891: PPOPN 1
12893: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12894: LD_EXP 36
12898: PUSH
12899: LD_EXP 84
12903: AND
12904: IFFALSE 13016
12906: GO 12908
12908: DISABLE
12909: LD_INT 0
12911: PPUSH
12912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12913: LD_ADDR_VAR 0 2
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 2
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 27
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 30
12945: PUSH
12946: LD_INT 26
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 30
12955: PUSH
12956: LD_INT 28
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: ST_TO_ADDR
// if not tmp then
12978: LD_VAR 0 2
12982: NOT
12983: IFFALSE 12987
// exit ;
12985: GO 13016
// for i in tmp do
12987: LD_ADDR_VAR 0 1
12991: PUSH
12992: LD_VAR 0 2
12996: PUSH
12997: FOR_IN
12998: IFFALSE 13014
// SetLives ( i , 1 ) ;
13000: LD_VAR 0 1
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 234
13012: GO 12997
13014: POP
13015: POP
// end ;
13016: PPOPN 2
13018: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13019: LD_EXP 36
13023: PUSH
13024: LD_EXP 85
13028: AND
13029: IFFALSE 13303
13031: GO 13033
13033: DISABLE
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
// begin i := rand ( 1 , 7 ) ;
13039: LD_ADDR_VAR 0 1
13043: PUSH
13044: LD_INT 1
13046: PPUSH
13047: LD_INT 7
13049: PPUSH
13050: CALL_OW 12
13054: ST_TO_ADDR
// case i of 1 :
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 1
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13078
13068: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13069: LD_STRING earthquake(getX(game), 0, 32)
13071: PPUSH
13072: CALL_OW 559
13076: GO 13303
13078: LD_INT 2
13080: DOUBLE
13081: EQUAL
13082: IFTRUE 13086
13084: GO 13100
13086: POP
// begin ToLua ( displayStucuk(); ) ;
13087: LD_STRING displayStucuk();
13089: PPUSH
13090: CALL_OW 559
// ResetFog ;
13094: CALL_OW 335
// end ; 3 :
13098: GO 13303
13100: LD_INT 3
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13212
13108: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13109: LD_ADDR_VAR 0 2
13113: PUSH
13114: LD_INT 22
13116: PUSH
13117: LD_OWVAR 2
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 25
13128: PUSH
13129: LD_INT 1
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PPUSH
13140: CALL_OW 69
13144: ST_TO_ADDR
// if not tmp then
13145: LD_VAR 0 2
13149: NOT
13150: IFFALSE 13154
// exit ;
13152: GO 13303
// un := tmp [ rand ( 1 , tmp ) ] ;
13154: LD_ADDR_VAR 0 3
13158: PUSH
13159: LD_VAR 0 2
13163: PUSH
13164: LD_INT 1
13166: PPUSH
13167: LD_VAR 0 2
13171: PPUSH
13172: CALL_OW 12
13176: ARRAY
13177: ST_TO_ADDR
// if Crawls ( un ) then
13178: LD_VAR 0 3
13182: PPUSH
13183: CALL_OW 318
13187: IFFALSE 13198
// ComWalk ( un ) ;
13189: LD_VAR 0 3
13193: PPUSH
13194: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 8
13205: PPUSH
13206: CALL_OW 336
// end ; 4 :
13210: GO 13303
13212: LD_INT 4
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13281
13220: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13221: LD_ADDR_VAR 0 2
13225: PUSH
13226: LD_INT 22
13228: PUSH
13229: LD_OWVAR 2
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 29
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PPUSH
13252: CALL_OW 69
13256: ST_TO_ADDR
// if not tmp then
13257: LD_VAR 0 2
13261: NOT
13262: IFFALSE 13266
// exit ;
13264: GO 13303
// DestroyUnit ( tmp [ 1 ] ) ;
13266: LD_VAR 0 2
13270: PUSH
13271: LD_INT 1
13273: ARRAY
13274: PPUSH
13275: CALL_OW 65
// end ; 5 .. 7 :
13279: GO 13303
13281: LD_INT 5
13283: DOUBLE
13284: GREATEREQUAL
13285: IFFALSE 13293
13287: LD_INT 7
13289: DOUBLE
13290: LESSEQUAL
13291: IFTRUE 13295
13293: GO 13302
13295: POP
// StreamSibBomb ; end ;
13296: CALL 9583 0 0
13300: GO 13303
13302: POP
// end ;
13303: PPOPN 3
13305: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13306: LD_EXP 36
13310: PUSH
13311: LD_EXP 86
13315: AND
13316: IFFALSE 13472
13318: GO 13320
13320: DISABLE
13321: LD_INT 0
13323: PPUSH
13324: PPUSH
13325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_INT 81
13333: PUSH
13334: LD_OWVAR 2
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 2
13345: PUSH
13346: LD_INT 21
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 21
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 2
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13472
// p := 0 ;
13389: LD_ADDR_VAR 0 3
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13397: LD_INT 35
13399: PPUSH
13400: CALL_OW 67
// p := p + 1 ;
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: LD_VAR 0 3
13413: PUSH
13414: LD_INT 1
13416: PLUS
13417: ST_TO_ADDR
// for i in tmp do
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_VAR 0 2
13427: PUSH
13428: FOR_IN
13429: IFFALSE 13460
// if GetLives ( i ) < 1000 then
13431: LD_VAR 0 1
13435: PPUSH
13436: CALL_OW 256
13440: PUSH
13441: LD_INT 1000
13443: LESS
13444: IFFALSE 13458
// SetLives ( i , 1000 ) ;
13446: LD_VAR 0 1
13450: PPUSH
13451: LD_INT 1000
13453: PPUSH
13454: CALL_OW 234
13458: GO 13428
13460: POP
13461: POP
// until p > 20 ;
13462: LD_VAR 0 3
13466: PUSH
13467: LD_INT 20
13469: GREATER
13470: IFFALSE 13397
// end ;
13472: PPOPN 3
13474: END
// every 0 0$1 trigger StreamModeActive and sTime do
13475: LD_EXP 36
13479: PUSH
13480: LD_EXP 87
13484: AND
13485: IFFALSE 13520
13487: GO 13489
13489: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13490: LD_INT 28
13492: PPUSH
13493: LD_OWVAR 2
13497: PPUSH
13498: LD_INT 2
13500: PPUSH
13501: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13505: LD_INT 30
13507: PPUSH
13508: LD_OWVAR 2
13512: PPUSH
13513: LD_INT 2
13515: PPUSH
13516: CALL_OW 322
// end ;
13520: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13521: LD_EXP 36
13525: PUSH
13526: LD_EXP 88
13530: AND
13531: IFFALSE 13652
13533: GO 13535
13535: DISABLE
13536: LD_INT 0
13538: PPUSH
13539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_OWVAR 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 21
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 3
13569: PUSH
13570: LD_INT 23
13572: PUSH
13573: LD_INT 0
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: PPUSH
13589: CALL_OW 69
13593: ST_TO_ADDR
// if not tmp then
13594: LD_VAR 0 2
13598: NOT
13599: IFFALSE 13603
// exit ;
13601: GO 13652
// for i in tmp do
13603: LD_ADDR_VAR 0 1
13607: PUSH
13608: LD_VAR 0 2
13612: PUSH
13613: FOR_IN
13614: IFFALSE 13650
// begin if Crawls ( i ) then
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 318
13625: IFFALSE 13636
// ComWalk ( i ) ;
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 138
// SetClass ( i , 2 ) ;
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 336
// end ;
13648: GO 13613
13650: POP
13651: POP
// end ;
13652: PPOPN 2
13654: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13655: LD_EXP 36
13659: PUSH
13660: LD_EXP 89
13664: AND
13665: IFFALSE 13946
13667: GO 13669
13669: DISABLE
13670: LD_INT 0
13672: PPUSH
13673: PPUSH
13674: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13675: LD_OWVAR 2
13679: PPUSH
13680: LD_INT 9
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: LD_INT 1
13688: PPUSH
13689: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13693: LD_INT 9
13695: PPUSH
13696: LD_OWVAR 2
13700: PPUSH
13701: CALL_OW 343
// uc_side := 9 ;
13705: LD_ADDR_OWVAR 20
13709: PUSH
13710: LD_INT 9
13712: ST_TO_ADDR
// uc_nation := 2 ;
13713: LD_ADDR_OWVAR 21
13717: PUSH
13718: LD_INT 2
13720: ST_TO_ADDR
// hc_name := Dark Warrior ;
13721: LD_ADDR_OWVAR 26
13725: PUSH
13726: LD_STRING Dark Warrior
13728: ST_TO_ADDR
// hc_gallery :=  ;
13729: LD_ADDR_OWVAR 33
13733: PUSH
13734: LD_STRING 
13736: ST_TO_ADDR
// hc_noskilllimit := true ;
13737: LD_ADDR_OWVAR 76
13741: PUSH
13742: LD_INT 1
13744: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13745: LD_ADDR_OWVAR 31
13749: PUSH
13750: LD_INT 30
13752: PUSH
13753: LD_INT 30
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 30
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: ST_TO_ADDR
// un := CreateHuman ;
13768: LD_ADDR_VAR 0 3
13772: PUSH
13773: CALL_OW 44
13777: ST_TO_ADDR
// hc_noskilllimit := false ;
13778: LD_ADDR_OWVAR 76
13782: PUSH
13783: LD_INT 0
13785: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13786: LD_VAR 0 3
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: CALL_OW 51
// p := 0 ;
13798: LD_ADDR_VAR 0 2
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13806: LD_INT 35
13808: PPUSH
13809: CALL_OW 67
// p := p + 1 ;
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: LD_VAR 0 2
13822: PUSH
13823: LD_INT 1
13825: PLUS
13826: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13827: LD_VAR 0 3
13831: PPUSH
13832: CALL_OW 256
13836: PUSH
13837: LD_INT 1000
13839: LESS
13840: IFFALSE 13854
// SetLives ( un , 1000 ) ;
13842: LD_VAR 0 3
13846: PPUSH
13847: LD_INT 1000
13849: PPUSH
13850: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_INT 81
13861: PUSH
13862: LD_OWVAR 2
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 91
13873: PUSH
13874: LD_VAR 0 3
13878: PUSH
13879: LD_INT 30
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PPUSH
13891: CALL_OW 69
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: CALL_OW 74
13905: PPUSH
13906: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13910: LD_VAR 0 2
13914: PUSH
13915: LD_INT 60
13917: GREATER
13918: PUSH
13919: LD_VAR 0 3
13923: PPUSH
13924: CALL_OW 301
13928: OR
13929: IFFALSE 13806
// if un then
13931: LD_VAR 0 3
13935: IFFALSE 13946
// RemoveUnit ( un ) ;
13937: LD_VAR 0 3
13941: PPUSH
13942: CALL_OW 64
// end ;
13946: PPOPN 3
13948: END
