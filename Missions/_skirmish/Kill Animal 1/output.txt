// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1216
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1214
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1214
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: PUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 428
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1214
// ComMoveXY ( hunters [ i ] , x , y ) ;
1189: LD_EXP 6
1193: PUSH
1194: LD_VAR 0 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 111
// end ; end ; end ;
1214: GO 876
1216: POP
1217: POP
// end ; end_of_file
1218: PPOPN 5
1220: END
// on UnitGoesToRed ( un ) do var i ;
1221: LD_INT 0
1223: PPUSH
// begin if GetSide ( un ) = 1 then
1224: LD_VAR 0 1
1228: PPUSH
1229: CALL_OW 255
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1246
// YouLost ( hunt2 ) ;
1239: LD_STRING hunt2
1241: PPUSH
1242: CALL_OW 104
// if GetSide ( un ) > 1 then
1246: LD_VAR 0 1
1250: PPUSH
1251: CALL_OW 255
1255: PUSH
1256: LD_INT 1
1258: GREATER
1259: IFFALSE 1312
// begin for i := 1 to 6 do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_INT 6
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1298
// begin wait ( 0 0$1 ) ;
1277: LD_INT 35
1279: PPUSH
1280: CALL_OW 67
// SetLives ( un , 249 ) ;
1284: LD_VAR 0 1
1288: PPUSH
1289: LD_INT 249
1291: PPUSH
1292: CALL_OW 234
// end ;
1296: GO 1274
1298: POP
1299: POP
// SetLives ( un , 1000 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 1000
1307: PPUSH
1308: CALL_OW 234
// end ; end ;
1312: PPOPN 2
1314: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1315: LD_VAR 0 1
1319: PUSH
1320: LD_INT 1
1322: EQUAL
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: GREATER
1332: AND
1333: IFFALSE 1342
// YouLost ( hunt1 ) ;
1335: LD_STRING hunt1
1337: PPUSH
1338: CALL_OW 104
// end ;
1342: PPOPN 2
1344: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1345: LD_INT 0
1347: PPUSH
// begin point := 0 ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1356: LD_VAR 0 1
1360: PPUSH
1361: CALL_OW 257
1365: PUSH
1366: LD_INT 20
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1385
1374: POP
// point := 10 ; class_horse :
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_INT 10
1382: ST_TO_ADDR
1383: GO 1519
1385: LD_INT 21
1387: DOUBLE
1388: EQUAL
1389: IFTRUE 1393
1391: GO 1404
1393: POP
// point := 10 ; class_baggie :
1394: LD_ADDR_VAR 0 4
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
1402: GO 1519
1404: LD_INT 13
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1423
1412: POP
// point := 5 ; class_phororhacos :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 5
1420: ST_TO_ADDR
1421: GO 1519
1423: LD_INT 18
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1442
1431: POP
// point := 10 ; class_tiger :
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: LD_INT 10
1439: ST_TO_ADDR
1440: GO 1519
1442: LD_INT 14
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1461
1450: POP
// point := 20 ; class_apeman :
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_INT 20
1458: ST_TO_ADDR
1459: GO 1519
1461: LD_INT 12
1463: DOUBLE
1464: EQUAL
1465: IFTRUE 1469
1467: GO 1480
1469: POP
// point := 30 ; class_apeman_soldier :
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 30
1477: ST_TO_ADDR
1478: GO 1519
1480: LD_INT 15
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// point := 50 ; class_frog :
1489: LD_ADDR_VAR 0 4
1493: PUSH
1494: LD_INT 50
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 19
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// point := 10 ; end ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_INT 10
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// if point then
1519: LD_VAR 0 4
1523: IFFALSE 1562
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1525: LD_ADDR_EXP 5
1529: PUSH
1530: LD_EXP 5
1534: PPUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_EXP 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_VAR 0 4
1555: PLUS
1556: PPUSH
1557: CALL_OW 1
1561: ST_TO_ADDR
// end ;
1562: PPOPN 4
1564: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1565: LD_INT 22
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: PUSH
1580: LD_INT 10
1582: LESS
1583: IFFALSE 1685
1585: GO 1587
1587: DISABLE
// begin enable ;
1588: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1589: LD_INT 2
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 12
1605: PUSH
1606: LD_INT 0
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: PUSH
1617: LD_INT 0
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: CALL_OW 12
1627: PUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: PUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 12
1649: PUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 12
1660: PUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL 387 0 3
// end ;
1685: END
// every 0 0$1 do var i ;
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
// begin enable ;
1692: ENABLE
// display_strings := [ ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// for i := 1 to huntersAmount do
1700: LD_ADDR_VAR 0 1
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_EXP 3
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1850
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_OWVAR 47
1727: PUSH
1728: LD_STRING #player
1730: PUSH
1731: LD_VAR 0 1
1735: STR
1736: PUSH
1737: LD_VAR 0 1
1741: PUSH
1742: LD_EXP 5
1746: PUSH
1747: LD_VAR 0 1
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: ADD
1758: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1759: LD_EXP 5
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PUSH
1770: LD_INT 750
1772: PUSH
1773: LD_INT 1250
1775: PUSH
1776: LD_INT 2000
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_OWVAR 67
1788: ARRAY
1789: GREATEREQUAL
1790: IFFALSE 1848
// begin if i = 1 then
1792: LD_VAR 0 1
1796: PUSH
1797: LD_INT 1
1799: EQUAL
1800: IFFALSE 1841
// begin DialogueOn ;
1802: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1806: LD_STRING ACH_HUNT
1808: PPUSH
1809: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1813: LD_ADDR_OWVAR 47
1817: PUSH
1818: LD_STRING #hunting-win
1820: PUSH
1821: EMPTY
1822: LIST
1823: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1824: LD_INT 175
1826: PPUSH
1827: CALL_OW 68
// YouWin ;
1831: CALL_OW 103
// DialogueOff ;
1835: CALL_OW 7
// end else
1839: GO 1848
// YouLost ( hunt3 ) ;
1841: LD_STRING hunt3
1843: PPUSH
1844: CALL_OW 104
// end ; end ;
1848: GO 1715
1850: POP
1851: POP
// end ; end_of_file end_of_file
1852: PPOPN 1
1854: END
// export globalGameSaveCounter ; every 0 0$1 do
1855: GO 1857
1857: DISABLE
// begin enable ;
1858: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1859: LD_STRING updateTimer(
1861: PUSH
1862: LD_OWVAR 1
1866: STR
1867: PUSH
1868: LD_STRING );
1870: STR
1871: PPUSH
1872: CALL_OW 559
// end ;
1876: END
// every 0 0$1 do
1877: GO 1879
1879: DISABLE
// begin globalGameSaveCounter := 0 ;
1880: LD_ADDR_EXP 7
1884: PUSH
1885: LD_INT 0
1887: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1888: LD_STRING setGameSaveCounter(0)
1890: PPUSH
1891: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1895: LD_STRING initStreamRollete();
1897: PPUSH
1898: CALL_OW 559
// InitStreamMode ;
1902: CALL 3228 0 0
// DefineStreamItems ( false ) ;
1906: LD_INT 0
1908: PPUSH
1909: CALL 3692 0 1
// end ;
1913: END
// export function SOS_MapStart ( ) ; begin
1914: LD_INT 0
1916: PPUSH
// if streamModeActive then
1917: LD_EXP 8
1921: IFFALSE 1930
// DefineStreamItems ( true ) ;
1923: LD_INT 1
1925: PPUSH
1926: CALL 3692 0 1
// UpdateLuaVariables ( ) ;
1930: CALL 1947 0 0
// UpdateFactoryWaypoints ( ) ;
1934: CALL 16561 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1938: CALL 16818 0 0
// end ;
1942: LD_VAR 0 1
1946: RET
// function UpdateLuaVariables ( ) ; begin
1947: LD_INT 0
1949: PPUSH
// if globalGameSaveCounter then
1950: LD_EXP 7
1954: IFFALSE 1988
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1956: LD_ADDR_EXP 7
1960: PUSH
1961: LD_EXP 7
1965: PPUSH
1966: CALL 61611 0 1
1970: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1971: LD_STRING setGameSaveCounter(
1973: PUSH
1974: LD_EXP 7
1978: STR
1979: PUSH
1980: LD_STRING )
1982: STR
1983: PPUSH
1984: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1988: LD_STRING setGameDifficulty(
1990: PUSH
1991: LD_OWVAR 67
1995: STR
1996: PUSH
1997: LD_STRING )
1999: STR
2000: PPUSH
2001: CALL_OW 559
// end ;
2005: LD_VAR 0 1
2009: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2010: LD_INT 0
2012: PPUSH
// if p2 = stream_mode then
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 100
2020: EQUAL
2021: IFFALSE 3024
// begin if not StreamModeActive then
2023: LD_EXP 8
2027: NOT
2028: IFFALSE 2038
// StreamModeActive := true ;
2030: LD_ADDR_EXP 8
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// if p3 = 0 then
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 0
2045: EQUAL
2046: IFFALSE 2052
// InitStreamMode ;
2048: CALL 3228 0 0
// if p3 = 1 then
2052: LD_VAR 0 3
2056: PUSH
2057: LD_INT 1
2059: EQUAL
2060: IFFALSE 2070
// sRocket := true ;
2062: LD_ADDR_EXP 13
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// if p3 = 2 then
2070: LD_VAR 0 3
2074: PUSH
2075: LD_INT 2
2077: EQUAL
2078: IFFALSE 2088
// sSpeed := true ;
2080: LD_ADDR_EXP 12
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// if p3 = 3 then
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 3
2095: EQUAL
2096: IFFALSE 2106
// sEngine := true ;
2098: LD_ADDR_EXP 14
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// if p3 = 4 then
2106: LD_VAR 0 3
2110: PUSH
2111: LD_INT 4
2113: EQUAL
2114: IFFALSE 2124
// sSpec := true ;
2116: LD_ADDR_EXP 11
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// if p3 = 5 then
2124: LD_VAR 0 3
2128: PUSH
2129: LD_INT 5
2131: EQUAL
2132: IFFALSE 2142
// sLevel := true ;
2134: LD_ADDR_EXP 15
2138: PUSH
2139: LD_INT 1
2141: ST_TO_ADDR
// if p3 = 6 then
2142: LD_VAR 0 3
2146: PUSH
2147: LD_INT 6
2149: EQUAL
2150: IFFALSE 2160
// sArmoury := true ;
2152: LD_ADDR_EXP 16
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// if p3 = 7 then
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 7
2167: EQUAL
2168: IFFALSE 2178
// sRadar := true ;
2170: LD_ADDR_EXP 17
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// if p3 = 8 then
2178: LD_VAR 0 3
2182: PUSH
2183: LD_INT 8
2185: EQUAL
2186: IFFALSE 2196
// sBunker := true ;
2188: LD_ADDR_EXP 18
2192: PUSH
2193: LD_INT 1
2195: ST_TO_ADDR
// if p3 = 9 then
2196: LD_VAR 0 3
2200: PUSH
2201: LD_INT 9
2203: EQUAL
2204: IFFALSE 2214
// sHack := true ;
2206: LD_ADDR_EXP 19
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// if p3 = 10 then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 10
2221: EQUAL
2222: IFFALSE 2232
// sFire := true ;
2224: LD_ADDR_EXP 20
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// if p3 = 11 then
2232: LD_VAR 0 3
2236: PUSH
2237: LD_INT 11
2239: EQUAL
2240: IFFALSE 2250
// sRefresh := true ;
2242: LD_ADDR_EXP 21
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// if p3 = 12 then
2250: LD_VAR 0 3
2254: PUSH
2255: LD_INT 12
2257: EQUAL
2258: IFFALSE 2268
// sExp := true ;
2260: LD_ADDR_EXP 22
2264: PUSH
2265: LD_INT 1
2267: ST_TO_ADDR
// if p3 = 13 then
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 13
2275: EQUAL
2276: IFFALSE 2286
// sDepot := true ;
2278: LD_ADDR_EXP 23
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// if p3 = 14 then
2286: LD_VAR 0 3
2290: PUSH
2291: LD_INT 14
2293: EQUAL
2294: IFFALSE 2304
// sFlag := true ;
2296: LD_ADDR_EXP 24
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// if p3 = 15 then
2304: LD_VAR 0 3
2308: PUSH
2309: LD_INT 15
2311: EQUAL
2312: IFFALSE 2322
// sKamikadze := true ;
2314: LD_ADDR_EXP 32
2318: PUSH
2319: LD_INT 1
2321: ST_TO_ADDR
// if p3 = 16 then
2322: LD_VAR 0 3
2326: PUSH
2327: LD_INT 16
2329: EQUAL
2330: IFFALSE 2340
// sTroll := true ;
2332: LD_ADDR_EXP 33
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// if p3 = 17 then
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 17
2347: EQUAL
2348: IFFALSE 2358
// sSlow := true ;
2350: LD_ADDR_EXP 34
2354: PUSH
2355: LD_INT 1
2357: ST_TO_ADDR
// if p3 = 18 then
2358: LD_VAR 0 3
2362: PUSH
2363: LD_INT 18
2365: EQUAL
2366: IFFALSE 2376
// sLack := true ;
2368: LD_ADDR_EXP 35
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// if p3 = 19 then
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 19
2383: EQUAL
2384: IFFALSE 2394
// sTank := true ;
2386: LD_ADDR_EXP 37
2390: PUSH
2391: LD_INT 1
2393: ST_TO_ADDR
// if p3 = 20 then
2394: LD_VAR 0 3
2398: PUSH
2399: LD_INT 20
2401: EQUAL
2402: IFFALSE 2412
// sRemote := true ;
2404: LD_ADDR_EXP 38
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// if p3 = 21 then
2412: LD_VAR 0 3
2416: PUSH
2417: LD_INT 21
2419: EQUAL
2420: IFFALSE 2430
// sPowell := true ;
2422: LD_ADDR_EXP 39
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// if p3 = 22 then
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 22
2437: EQUAL
2438: IFFALSE 2448
// sTeleport := true ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// if p3 = 23 then
2448: LD_VAR 0 3
2452: PUSH
2453: LD_INT 23
2455: EQUAL
2456: IFFALSE 2466
// sOilTower := true ;
2458: LD_ADDR_EXP 44
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// if p3 = 24 then
2466: LD_VAR 0 3
2470: PUSH
2471: LD_INT 24
2473: EQUAL
2474: IFFALSE 2484
// sShovel := true ;
2476: LD_ADDR_EXP 45
2480: PUSH
2481: LD_INT 1
2483: ST_TO_ADDR
// if p3 = 25 then
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 25
2491: EQUAL
2492: IFFALSE 2502
// sSheik := true ;
2494: LD_ADDR_EXP 46
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// if p3 = 26 then
2502: LD_VAR 0 3
2506: PUSH
2507: LD_INT 26
2509: EQUAL
2510: IFFALSE 2520
// sEarthquake := true ;
2512: LD_ADDR_EXP 48
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// if p3 = 27 then
2520: LD_VAR 0 3
2524: PUSH
2525: LD_INT 27
2527: EQUAL
2528: IFFALSE 2538
// sAI := true ;
2530: LD_ADDR_EXP 49
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// if p3 = 28 then
2538: LD_VAR 0 3
2542: PUSH
2543: LD_INT 28
2545: EQUAL
2546: IFFALSE 2556
// sCargo := true ;
2548: LD_ADDR_EXP 52
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// if p3 = 29 then
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 29
2563: EQUAL
2564: IFFALSE 2574
// sDLaser := true ;
2566: LD_ADDR_EXP 53
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if p3 = 30 then
2574: LD_VAR 0 3
2578: PUSH
2579: LD_INT 30
2581: EQUAL
2582: IFFALSE 2592
// sExchange := true ;
2584: LD_ADDR_EXP 54
2588: PUSH
2589: LD_INT 1
2591: ST_TO_ADDR
// if p3 = 31 then
2592: LD_VAR 0 3
2596: PUSH
2597: LD_INT 31
2599: EQUAL
2600: IFFALSE 2610
// sFac := true ;
2602: LD_ADDR_EXP 55
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// if p3 = 32 then
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 32
2617: EQUAL
2618: IFFALSE 2628
// sPower := true ;
2620: LD_ADDR_EXP 56
2624: PUSH
2625: LD_INT 1
2627: ST_TO_ADDR
// if p3 = 33 then
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 33
2635: EQUAL
2636: IFFALSE 2646
// sRandom := true ;
2638: LD_ADDR_EXP 57
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// if p3 = 34 then
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 34
2653: EQUAL
2654: IFFALSE 2664
// sShield := true ;
2656: LD_ADDR_EXP 58
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// if p3 = 35 then
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 35
2671: EQUAL
2672: IFFALSE 2682
// sTime := true ;
2674: LD_ADDR_EXP 59
2678: PUSH
2679: LD_INT 1
2681: ST_TO_ADDR
// if p3 = 36 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 36
2689: EQUAL
2690: IFFALSE 2700
// sTools := true ;
2692: LD_ADDR_EXP 60
2696: PUSH
2697: LD_INT 1
2699: ST_TO_ADDR
// if p3 = 101 then
2700: LD_VAR 0 3
2704: PUSH
2705: LD_INT 101
2707: EQUAL
2708: IFFALSE 2718
// sSold := true ;
2710: LD_ADDR_EXP 25
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// if p3 = 102 then
2718: LD_VAR 0 3
2722: PUSH
2723: LD_INT 102
2725: EQUAL
2726: IFFALSE 2736
// sDiff := true ;
2728: LD_ADDR_EXP 26
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// if p3 = 103 then
2736: LD_VAR 0 3
2740: PUSH
2741: LD_INT 103
2743: EQUAL
2744: IFFALSE 2754
// sFog := true ;
2746: LD_ADDR_EXP 29
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// if p3 = 104 then
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 104
2761: EQUAL
2762: IFFALSE 2772
// sReset := true ;
2764: LD_ADDR_EXP 30
2768: PUSH
2769: LD_INT 1
2771: ST_TO_ADDR
// if p3 = 105 then
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 105
2779: EQUAL
2780: IFFALSE 2790
// sSun := true ;
2782: LD_ADDR_EXP 31
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// if p3 = 106 then
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 106
2797: EQUAL
2798: IFFALSE 2808
// sTiger := true ;
2800: LD_ADDR_EXP 27
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// if p3 = 107 then
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 107
2815: EQUAL
2816: IFFALSE 2826
// sBomb := true ;
2818: LD_ADDR_EXP 28
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// if p3 = 108 then
2826: LD_VAR 0 3
2830: PUSH
2831: LD_INT 108
2833: EQUAL
2834: IFFALSE 2844
// sWound := true ;
2836: LD_ADDR_EXP 36
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// if p3 = 109 then
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 109
2851: EQUAL
2852: IFFALSE 2862
// sBetray := true ;
2854: LD_ADDR_EXP 40
2858: PUSH
2859: LD_INT 1
2861: ST_TO_ADDR
// if p3 = 110 then
2862: LD_VAR 0 3
2866: PUSH
2867: LD_INT 110
2869: EQUAL
2870: IFFALSE 2880
// sContamin := true ;
2872: LD_ADDR_EXP 41
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// if p3 = 111 then
2880: LD_VAR 0 3
2884: PUSH
2885: LD_INT 111
2887: EQUAL
2888: IFFALSE 2898
// sOil := true ;
2890: LD_ADDR_EXP 43
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// if p3 = 112 then
2898: LD_VAR 0 3
2902: PUSH
2903: LD_INT 112
2905: EQUAL
2906: IFFALSE 2916
// sStu := true ;
2908: LD_ADDR_EXP 47
2912: PUSH
2913: LD_INT 1
2915: ST_TO_ADDR
// if p3 = 113 then
2916: LD_VAR 0 3
2920: PUSH
2921: LD_INT 113
2923: EQUAL
2924: IFFALSE 2934
// sBazooka := true ;
2926: LD_ADDR_EXP 50
2930: PUSH
2931: LD_INT 1
2933: ST_TO_ADDR
// if p3 = 114 then
2934: LD_VAR 0 3
2938: PUSH
2939: LD_INT 114
2941: EQUAL
2942: IFFALSE 2952
// sMortar := true ;
2944: LD_ADDR_EXP 51
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// if p3 = 115 then
2952: LD_VAR 0 3
2956: PUSH
2957: LD_INT 115
2959: EQUAL
2960: IFFALSE 2970
// sRanger := true ;
2962: LD_ADDR_EXP 61
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// if p3 = 116 then
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 116
2977: EQUAL
2978: IFFALSE 2988
// sComputer := true ;
2980: LD_ADDR_EXP 62
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// if p3 = 117 then
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 117
2995: EQUAL
2996: IFFALSE 3006
// s30 := true ;
2998: LD_ADDR_EXP 63
3002: PUSH
3003: LD_INT 1
3005: ST_TO_ADDR
// if p3 = 118 then
3006: LD_VAR 0 3
3010: PUSH
3011: LD_INT 118
3013: EQUAL
3014: IFFALSE 3024
// s60 := true ;
3016: LD_ADDR_EXP 64
3020: PUSH
3021: LD_INT 1
3023: ST_TO_ADDR
// end ; if p2 = hack_mode then
3024: LD_VAR 0 2
3028: PUSH
3029: LD_INT 101
3031: EQUAL
3032: IFFALSE 3160
// begin case p3 of 1 :
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 1
3041: DOUBLE
3042: EQUAL
3043: IFTRUE 3047
3045: GO 3054
3047: POP
// hHackUnlimitedResources ; 2 :
3048: CALL 15307 0 0
3052: GO 3160
3054: LD_INT 2
3056: DOUBLE
3057: EQUAL
3058: IFTRUE 3062
3060: GO 3069
3062: POP
// hHackSetLevel10 ; 3 :
3063: CALL 15440 0 0
3067: GO 3160
3069: LD_INT 3
3071: DOUBLE
3072: EQUAL
3073: IFTRUE 3077
3075: GO 3084
3077: POP
// hHackSetLevel10YourUnits ; 4 :
3078: CALL 15525 0 0
3082: GO 3160
3084: LD_INT 4
3086: DOUBLE
3087: EQUAL
3088: IFTRUE 3092
3090: GO 3099
3092: POP
// hHackInvincible ; 5 :
3093: CALL 15973 0 0
3097: GO 3160
3099: LD_INT 5
3101: DOUBLE
3102: EQUAL
3103: IFTRUE 3107
3105: GO 3114
3107: POP
// hHackInvisible ; 6 :
3108: CALL 16084 0 0
3112: GO 3160
3114: LD_INT 6
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3129
3122: POP
// hHackChangeYourSide ; 7 :
3123: CALL 16141 0 0
3127: GO 3160
3129: LD_INT 7
3131: DOUBLE
3132: EQUAL
3133: IFTRUE 3137
3135: GO 3144
3137: POP
// hHackChangeUnitSide ; 8 :
3138: CALL 16183 0 0
3142: GO 3160
3144: LD_INT 8
3146: DOUBLE
3147: EQUAL
3148: IFTRUE 3152
3150: GO 3159
3152: POP
// hHackFog ; end ;
3153: CALL 16284 0 0
3157: GO 3160
3159: POP
// end ; if p2 = game_save_mode then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 102
3167: EQUAL
3168: IFFALSE 3223
// begin if p3 = 1 then
3170: LD_VAR 0 3
3174: PUSH
3175: LD_INT 1
3177: EQUAL
3178: IFFALSE 3190
// globalGameSaveCounter := p4 ;
3180: LD_ADDR_EXP 7
3184: PUSH
3185: LD_VAR 0 4
3189: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3190: LD_VAR 0 3
3194: PUSH
3195: LD_INT 2
3197: EQUAL
3198: PUSH
3199: LD_EXP 7
3203: AND
3204: IFFALSE 3223
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3206: LD_STRING setGameSaveCounter(
3208: PUSH
3209: LD_EXP 7
3213: STR
3214: PUSH
3215: LD_STRING )
3217: STR
3218: PPUSH
3219: CALL_OW 559
// end ; end ;
3223: LD_VAR 0 7
3227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3228: LD_INT 0
3230: PPUSH
// streamModeActive := false ;
3231: LD_ADDR_EXP 8
3235: PUSH
3236: LD_INT 0
3238: ST_TO_ADDR
// normalCounter := 36 ;
3239: LD_ADDR_EXP 9
3243: PUSH
3244: LD_INT 36
3246: ST_TO_ADDR
// hardcoreCounter := 18 ;
3247: LD_ADDR_EXP 10
3251: PUSH
3252: LD_INT 18
3254: ST_TO_ADDR
// sRocket := false ;
3255: LD_ADDR_EXP 13
3259: PUSH
3260: LD_INT 0
3262: ST_TO_ADDR
// sSpeed := false ;
3263: LD_ADDR_EXP 12
3267: PUSH
3268: LD_INT 0
3270: ST_TO_ADDR
// sEngine := false ;
3271: LD_ADDR_EXP 14
3275: PUSH
3276: LD_INT 0
3278: ST_TO_ADDR
// sSpec := false ;
3279: LD_ADDR_EXP 11
3283: PUSH
3284: LD_INT 0
3286: ST_TO_ADDR
// sLevel := false ;
3287: LD_ADDR_EXP 15
3291: PUSH
3292: LD_INT 0
3294: ST_TO_ADDR
// sArmoury := false ;
3295: LD_ADDR_EXP 16
3299: PUSH
3300: LD_INT 0
3302: ST_TO_ADDR
// sRadar := false ;
3303: LD_ADDR_EXP 17
3307: PUSH
3308: LD_INT 0
3310: ST_TO_ADDR
// sBunker := false ;
3311: LD_ADDR_EXP 18
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// sHack := false ;
3319: LD_ADDR_EXP 19
3323: PUSH
3324: LD_INT 0
3326: ST_TO_ADDR
// sFire := false ;
3327: LD_ADDR_EXP 20
3331: PUSH
3332: LD_INT 0
3334: ST_TO_ADDR
// sRefresh := false ;
3335: LD_ADDR_EXP 21
3339: PUSH
3340: LD_INT 0
3342: ST_TO_ADDR
// sExp := false ;
3343: LD_ADDR_EXP 22
3347: PUSH
3348: LD_INT 0
3350: ST_TO_ADDR
// sDepot := false ;
3351: LD_ADDR_EXP 23
3355: PUSH
3356: LD_INT 0
3358: ST_TO_ADDR
// sFlag := false ;
3359: LD_ADDR_EXP 24
3363: PUSH
3364: LD_INT 0
3366: ST_TO_ADDR
// sKamikadze := false ;
3367: LD_ADDR_EXP 32
3371: PUSH
3372: LD_INT 0
3374: ST_TO_ADDR
// sTroll := false ;
3375: LD_ADDR_EXP 33
3379: PUSH
3380: LD_INT 0
3382: ST_TO_ADDR
// sSlow := false ;
3383: LD_ADDR_EXP 34
3387: PUSH
3388: LD_INT 0
3390: ST_TO_ADDR
// sLack := false ;
3391: LD_ADDR_EXP 35
3395: PUSH
3396: LD_INT 0
3398: ST_TO_ADDR
// sTank := false ;
3399: LD_ADDR_EXP 37
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// sRemote := false ;
3407: LD_ADDR_EXP 38
3411: PUSH
3412: LD_INT 0
3414: ST_TO_ADDR
// sPowell := false ;
3415: LD_ADDR_EXP 39
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// sTeleport := false ;
3423: LD_ADDR_EXP 42
3427: PUSH
3428: LD_INT 0
3430: ST_TO_ADDR
// sOilTower := false ;
3431: LD_ADDR_EXP 44
3435: PUSH
3436: LD_INT 0
3438: ST_TO_ADDR
// sShovel := false ;
3439: LD_ADDR_EXP 45
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// sSheik := false ;
3447: LD_ADDR_EXP 46
3451: PUSH
3452: LD_INT 0
3454: ST_TO_ADDR
// sEarthquake := false ;
3455: LD_ADDR_EXP 48
3459: PUSH
3460: LD_INT 0
3462: ST_TO_ADDR
// sAI := false ;
3463: LD_ADDR_EXP 49
3467: PUSH
3468: LD_INT 0
3470: ST_TO_ADDR
// sCargo := false ;
3471: LD_ADDR_EXP 52
3475: PUSH
3476: LD_INT 0
3478: ST_TO_ADDR
// sDLaser := false ;
3479: LD_ADDR_EXP 53
3483: PUSH
3484: LD_INT 0
3486: ST_TO_ADDR
// sExchange := false ;
3487: LD_ADDR_EXP 54
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// sFac := false ;
3495: LD_ADDR_EXP 55
3499: PUSH
3500: LD_INT 0
3502: ST_TO_ADDR
// sPower := false ;
3503: LD_ADDR_EXP 56
3507: PUSH
3508: LD_INT 0
3510: ST_TO_ADDR
// sRandom := false ;
3511: LD_ADDR_EXP 57
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// sShield := false ;
3519: LD_ADDR_EXP 58
3523: PUSH
3524: LD_INT 0
3526: ST_TO_ADDR
// sTime := false ;
3527: LD_ADDR_EXP 59
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// sTools := false ;
3535: LD_ADDR_EXP 60
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// sSold := false ;
3543: LD_ADDR_EXP 25
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// sDiff := false ;
3551: LD_ADDR_EXP 26
3555: PUSH
3556: LD_INT 0
3558: ST_TO_ADDR
// sFog := false ;
3559: LD_ADDR_EXP 29
3563: PUSH
3564: LD_INT 0
3566: ST_TO_ADDR
// sReset := false ;
3567: LD_ADDR_EXP 30
3571: PUSH
3572: LD_INT 0
3574: ST_TO_ADDR
// sSun := false ;
3575: LD_ADDR_EXP 31
3579: PUSH
3580: LD_INT 0
3582: ST_TO_ADDR
// sTiger := false ;
3583: LD_ADDR_EXP 27
3587: PUSH
3588: LD_INT 0
3590: ST_TO_ADDR
// sBomb := false ;
3591: LD_ADDR_EXP 28
3595: PUSH
3596: LD_INT 0
3598: ST_TO_ADDR
// sWound := false ;
3599: LD_ADDR_EXP 36
3603: PUSH
3604: LD_INT 0
3606: ST_TO_ADDR
// sBetray := false ;
3607: LD_ADDR_EXP 40
3611: PUSH
3612: LD_INT 0
3614: ST_TO_ADDR
// sContamin := false ;
3615: LD_ADDR_EXP 41
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// sOil := false ;
3623: LD_ADDR_EXP 43
3627: PUSH
3628: LD_INT 0
3630: ST_TO_ADDR
// sStu := false ;
3631: LD_ADDR_EXP 47
3635: PUSH
3636: LD_INT 0
3638: ST_TO_ADDR
// sBazooka := false ;
3639: LD_ADDR_EXP 50
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// sMortar := false ;
3647: LD_ADDR_EXP 51
3651: PUSH
3652: LD_INT 0
3654: ST_TO_ADDR
// sRanger := false ;
3655: LD_ADDR_EXP 61
3659: PUSH
3660: LD_INT 0
3662: ST_TO_ADDR
// sComputer := false ;
3663: LD_ADDR_EXP 62
3667: PUSH
3668: LD_INT 0
3670: ST_TO_ADDR
// s30 := false ;
3671: LD_ADDR_EXP 63
3675: PUSH
3676: LD_INT 0
3678: ST_TO_ADDR
// s60 := false ;
3679: LD_ADDR_EXP 64
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
3696: PPUSH
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
// result := [ ] ;
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: EMPTY
3707: ST_TO_ADDR
// if campaign_id = 1 then
3708: LD_OWVAR 69
3712: PUSH
3713: LD_INT 1
3715: EQUAL
3716: IFFALSE 6882
// begin case mission_number of 1 :
3718: LD_OWVAR 70
3722: PUSH
3723: LD_INT 1
3725: DOUBLE
3726: EQUAL
3727: IFTRUE 3731
3729: GO 3807
3731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 4
3742: PUSH
3743: LD_INT 11
3745: PUSH
3746: LD_INT 12
3748: PUSH
3749: LD_INT 15
3751: PUSH
3752: LD_INT 16
3754: PUSH
3755: LD_INT 22
3757: PUSH
3758: LD_INT 23
3760: PUSH
3761: LD_INT 26
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 101
3777: PUSH
3778: LD_INT 102
3780: PUSH
3781: LD_INT 106
3783: PUSH
3784: LD_INT 116
3786: PUSH
3787: LD_INT 117
3789: PUSH
3790: LD_INT 118
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: ST_TO_ADDR
3805: GO 6880
3807: LD_INT 2
3809: DOUBLE
3810: EQUAL
3811: IFTRUE 3815
3813: GO 3899
3815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3816: LD_ADDR_VAR 0 2
3820: PUSH
3821: LD_INT 2
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 11
3829: PUSH
3830: LD_INT 12
3832: PUSH
3833: LD_INT 15
3835: PUSH
3836: LD_INT 16
3838: PUSH
3839: LD_INT 22
3841: PUSH
3842: LD_INT 23
3844: PUSH
3845: LD_INT 26
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: LD_INT 101
3861: PUSH
3862: LD_INT 102
3864: PUSH
3865: LD_INT 105
3867: PUSH
3868: LD_INT 106
3870: PUSH
3871: LD_INT 108
3873: PUSH
3874: LD_INT 116
3876: PUSH
3877: LD_INT 117
3879: PUSH
3880: LD_INT 118
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: ST_TO_ADDR
3897: GO 6880
3899: LD_INT 3
3901: DOUBLE
3902: EQUAL
3903: IFTRUE 3907
3905: GO 3995
3907: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 4
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 11
3924: PUSH
3925: LD_INT 12
3927: PUSH
3928: LD_INT 15
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 26
3939: PUSH
3940: LD_INT 36
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PUSH
3955: LD_INT 101
3957: PUSH
3958: LD_INT 102
3960: PUSH
3961: LD_INT 105
3963: PUSH
3964: LD_INT 106
3966: PUSH
3967: LD_INT 108
3969: PUSH
3970: LD_INT 116
3972: PUSH
3973: LD_INT 117
3975: PUSH
3976: LD_INT 118
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: ST_TO_ADDR
3993: GO 6880
3995: LD_INT 4
3997: DOUBLE
3998: EQUAL
3999: IFTRUE 4003
4001: GO 4099
4003: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4004: LD_ADDR_VAR 0 2
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: LD_INT 8
4020: PUSH
4021: LD_INT 11
4023: PUSH
4024: LD_INT 12
4026: PUSH
4027: LD_INT 15
4029: PUSH
4030: LD_INT 16
4032: PUSH
4033: LD_INT 22
4035: PUSH
4036: LD_INT 23
4038: PUSH
4039: LD_INT 26
4041: PUSH
4042: LD_INT 36
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 101
4061: PUSH
4062: LD_INT 102
4064: PUSH
4065: LD_INT 105
4067: PUSH
4068: LD_INT 106
4070: PUSH
4071: LD_INT 108
4073: PUSH
4074: LD_INT 116
4076: PUSH
4077: LD_INT 117
4079: PUSH
4080: LD_INT 118
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: ST_TO_ADDR
4097: GO 6880
4099: LD_INT 5
4101: DOUBLE
4102: EQUAL
4103: IFTRUE 4107
4105: GO 4219
4107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 6
4124: PUSH
4125: LD_INT 8
4127: PUSH
4128: LD_INT 11
4130: PUSH
4131: LD_INT 12
4133: PUSH
4134: LD_INT 15
4136: PUSH
4137: LD_INT 16
4139: PUSH
4140: LD_INT 22
4142: PUSH
4143: LD_INT 23
4145: PUSH
4146: LD_INT 25
4148: PUSH
4149: LD_INT 26
4151: PUSH
4152: LD_INT 36
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 101
4173: PUSH
4174: LD_INT 102
4176: PUSH
4177: LD_INT 105
4179: PUSH
4180: LD_INT 106
4182: PUSH
4183: LD_INT 108
4185: PUSH
4186: LD_INT 109
4188: PUSH
4189: LD_INT 112
4191: PUSH
4192: LD_INT 116
4194: PUSH
4195: LD_INT 117
4197: PUSH
4198: LD_INT 118
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: ST_TO_ADDR
4217: GO 6880
4219: LD_INT 6
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4359
4227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: LD_INT 6
4244: PUSH
4245: LD_INT 8
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 15
4256: PUSH
4257: LD_INT 16
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 26
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 31
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 36
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 101
4313: PUSH
4314: LD_INT 102
4316: PUSH
4317: LD_INT 105
4319: PUSH
4320: LD_INT 106
4322: PUSH
4323: LD_INT 108
4325: PUSH
4326: LD_INT 109
4328: PUSH
4329: LD_INT 112
4331: PUSH
4332: LD_INT 116
4334: PUSH
4335: LD_INT 117
4337: PUSH
4338: LD_INT 118
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: ST_TO_ADDR
4357: GO 6880
4359: LD_INT 7
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4367
4365: GO 4479
4367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: LD_INT 5
4381: PUSH
4382: LD_INT 7
4384: PUSH
4385: LD_INT 11
4387: PUSH
4388: LD_INT 12
4390: PUSH
4391: LD_INT 15
4393: PUSH
4394: LD_INT 16
4396: PUSH
4397: LD_INT 20
4399: PUSH
4400: LD_INT 21
4402: PUSH
4403: LD_INT 22
4405: PUSH
4406: LD_INT 23
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 26
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 101
4433: PUSH
4434: LD_INT 102
4436: PUSH
4437: LD_INT 103
4439: PUSH
4440: LD_INT 105
4442: PUSH
4443: LD_INT 106
4445: PUSH
4446: LD_INT 108
4448: PUSH
4449: LD_INT 112
4451: PUSH
4452: LD_INT 116
4454: PUSH
4455: LD_INT 117
4457: PUSH
4458: LD_INT 118
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: ST_TO_ADDR
4477: GO 6880
4479: LD_INT 8
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4627
4487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4488: LD_ADDR_VAR 0 2
4492: PUSH
4493: LD_INT 2
4495: PUSH
4496: LD_INT 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 6
4504: PUSH
4505: LD_INT 7
4507: PUSH
4508: LD_INT 8
4510: PUSH
4511: LD_INT 11
4513: PUSH
4514: LD_INT 12
4516: PUSH
4517: LD_INT 15
4519: PUSH
4520: LD_INT 16
4522: PUSH
4523: LD_INT 20
4525: PUSH
4526: LD_INT 21
4528: PUSH
4529: LD_INT 22
4531: PUSH
4532: LD_INT 23
4534: PUSH
4535: LD_INT 25
4537: PUSH
4538: LD_INT 26
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 31
4546: PUSH
4547: LD_INT 32
4549: PUSH
4550: LD_INT 36
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 101
4577: PUSH
4578: LD_INT 102
4580: PUSH
4581: LD_INT 103
4583: PUSH
4584: LD_INT 105
4586: PUSH
4587: LD_INT 106
4589: PUSH
4590: LD_INT 108
4592: PUSH
4593: LD_INT 109
4595: PUSH
4596: LD_INT 112
4598: PUSH
4599: LD_INT 116
4601: PUSH
4602: LD_INT 117
4604: PUSH
4605: LD_INT 118
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: ST_TO_ADDR
4625: GO 6880
4627: LD_INT 9
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4635
4633: GO 4783
4635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: LD_INT 2
4643: PUSH
4644: LD_INT 4
4646: PUSH
4647: LD_INT 5
4649: PUSH
4650: LD_INT 6
4652: PUSH
4653: LD_INT 7
4655: PUSH
4656: LD_INT 8
4658: PUSH
4659: LD_INT 11
4661: PUSH
4662: LD_INT 12
4664: PUSH
4665: LD_INT 15
4667: PUSH
4668: LD_INT 16
4670: PUSH
4671: LD_INT 20
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 26
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 30
4694: PUSH
4695: LD_INT 31
4697: PUSH
4698: LD_INT 32
4700: PUSH
4701: LD_INT 36
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 101
4729: PUSH
4730: LD_INT 102
4732: PUSH
4733: LD_INT 103
4735: PUSH
4736: LD_INT 105
4738: PUSH
4739: LD_INT 106
4741: PUSH
4742: LD_INT 108
4744: PUSH
4745: LD_INT 109
4747: PUSH
4748: LD_INT 112
4750: PUSH
4751: LD_INT 114
4753: PUSH
4754: LD_INT 116
4756: PUSH
4757: LD_INT 117
4759: PUSH
4760: LD_INT 118
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 6880
4783: LD_INT 10
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4987
4791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 6
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: LD_INT 8
4814: PUSH
4815: LD_INT 9
4817: PUSH
4818: LD_INT 10
4820: PUSH
4821: LD_INT 11
4823: PUSH
4824: LD_INT 12
4826: PUSH
4827: LD_INT 13
4829: PUSH
4830: LD_INT 14
4832: PUSH
4833: LD_INT 15
4835: PUSH
4836: LD_INT 16
4838: PUSH
4839: LD_INT 17
4841: PUSH
4842: LD_INT 18
4844: PUSH
4845: LD_INT 19
4847: PUSH
4848: LD_INT 20
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 23
4859: PUSH
4860: LD_INT 24
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 26
4868: PUSH
4869: LD_INT 28
4871: PUSH
4872: LD_INT 30
4874: PUSH
4875: LD_INT 31
4877: PUSH
4878: LD_INT 32
4880: PUSH
4881: LD_INT 36
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 101
4917: PUSH
4918: LD_INT 102
4920: PUSH
4921: LD_INT 103
4923: PUSH
4924: LD_INT 104
4926: PUSH
4927: LD_INT 105
4929: PUSH
4930: LD_INT 106
4932: PUSH
4933: LD_INT 107
4935: PUSH
4936: LD_INT 108
4938: PUSH
4939: LD_INT 109
4941: PUSH
4942: LD_INT 110
4944: PUSH
4945: LD_INT 111
4947: PUSH
4948: LD_INT 112
4950: PUSH
4951: LD_INT 114
4953: PUSH
4954: LD_INT 116
4956: PUSH
4957: LD_INT 117
4959: PUSH
4960: LD_INT 118
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: ST_TO_ADDR
4985: GO 6880
4987: LD_INT 11
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 4995
4993: GO 5199
4995: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: LD_INT 4
5009: PUSH
5010: LD_INT 5
5012: PUSH
5013: LD_INT 6
5015: PUSH
5016: LD_INT 7
5018: PUSH
5019: LD_INT 8
5021: PUSH
5022: LD_INT 9
5024: PUSH
5025: LD_INT 10
5027: PUSH
5028: LD_INT 11
5030: PUSH
5031: LD_INT 12
5033: PUSH
5034: LD_INT 13
5036: PUSH
5037: LD_INT 14
5039: PUSH
5040: LD_INT 15
5042: PUSH
5043: LD_INT 16
5045: PUSH
5046: LD_INT 17
5048: PUSH
5049: LD_INT 18
5051: PUSH
5052: LD_INT 19
5054: PUSH
5055: LD_INT 20
5057: PUSH
5058: LD_INT 21
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 23
5066: PUSH
5067: LD_INT 24
5069: PUSH
5070: LD_INT 25
5072: PUSH
5073: LD_INT 26
5075: PUSH
5076: LD_INT 28
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 31
5084: PUSH
5085: LD_INT 32
5087: PUSH
5088: LD_INT 34
5090: PUSH
5091: LD_INT 36
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 101
5129: PUSH
5130: LD_INT 102
5132: PUSH
5133: LD_INT 103
5135: PUSH
5136: LD_INT 104
5138: PUSH
5139: LD_INT 105
5141: PUSH
5142: LD_INT 106
5144: PUSH
5145: LD_INT 107
5147: PUSH
5148: LD_INT 108
5150: PUSH
5151: LD_INT 109
5153: PUSH
5154: LD_INT 110
5156: PUSH
5157: LD_INT 111
5159: PUSH
5160: LD_INT 112
5162: PUSH
5163: LD_INT 114
5165: PUSH
5166: LD_INT 116
5168: PUSH
5169: LD_INT 117
5171: PUSH
5172: LD_INT 118
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: ST_TO_ADDR
5197: GO 6880
5199: LD_INT 12
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5427
5207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5208: LD_ADDR_VAR 0 2
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: LD_INT 2
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: LD_INT 4
5224: PUSH
5225: LD_INT 5
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 7
5233: PUSH
5234: LD_INT 8
5236: PUSH
5237: LD_INT 9
5239: PUSH
5240: LD_INT 10
5242: PUSH
5243: LD_INT 11
5245: PUSH
5246: LD_INT 12
5248: PUSH
5249: LD_INT 13
5251: PUSH
5252: LD_INT 14
5254: PUSH
5255: LD_INT 15
5257: PUSH
5258: LD_INT 16
5260: PUSH
5261: LD_INT 17
5263: PUSH
5264: LD_INT 18
5266: PUSH
5267: LD_INT 19
5269: PUSH
5270: LD_INT 20
5272: PUSH
5273: LD_INT 21
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 23
5281: PUSH
5282: LD_INT 24
5284: PUSH
5285: LD_INT 25
5287: PUSH
5288: LD_INT 26
5290: PUSH
5291: LD_INT 27
5293: PUSH
5294: LD_INT 28
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 31
5302: PUSH
5303: LD_INT 32
5305: PUSH
5306: LD_INT 33
5308: PUSH
5309: LD_INT 34
5311: PUSH
5312: LD_INT 36
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 101
5353: PUSH
5354: LD_INT 102
5356: PUSH
5357: LD_INT 103
5359: PUSH
5360: LD_INT 104
5362: PUSH
5363: LD_INT 105
5365: PUSH
5366: LD_INT 106
5368: PUSH
5369: LD_INT 107
5371: PUSH
5372: LD_INT 108
5374: PUSH
5375: LD_INT 109
5377: PUSH
5378: LD_INT 110
5380: PUSH
5381: LD_INT 111
5383: PUSH
5384: LD_INT 112
5386: PUSH
5387: LD_INT 113
5389: PUSH
5390: LD_INT 114
5392: PUSH
5393: LD_INT 116
5395: PUSH
5396: LD_INT 117
5398: PUSH
5399: LD_INT 118
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: ST_TO_ADDR
5425: GO 6880
5427: LD_INT 13
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5435
5433: GO 5643
5435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 4
5452: PUSH
5453: LD_INT 5
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: LD_INT 9
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: LD_INT 11
5467: PUSH
5468: LD_INT 12
5470: PUSH
5471: LD_INT 14
5473: PUSH
5474: LD_INT 15
5476: PUSH
5477: LD_INT 16
5479: PUSH
5480: LD_INT 17
5482: PUSH
5483: LD_INT 18
5485: PUSH
5486: LD_INT 19
5488: PUSH
5489: LD_INT 20
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 22
5497: PUSH
5498: LD_INT 23
5500: PUSH
5501: LD_INT 24
5503: PUSH
5504: LD_INT 25
5506: PUSH
5507: LD_INT 26
5509: PUSH
5510: LD_INT 27
5512: PUSH
5513: LD_INT 28
5515: PUSH
5516: LD_INT 30
5518: PUSH
5519: LD_INT 31
5521: PUSH
5522: LD_INT 32
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: LD_INT 34
5530: PUSH
5531: LD_INT 36
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 101
5569: PUSH
5570: LD_INT 102
5572: PUSH
5573: LD_INT 103
5575: PUSH
5576: LD_INT 104
5578: PUSH
5579: LD_INT 105
5581: PUSH
5582: LD_INT 106
5584: PUSH
5585: LD_INT 107
5587: PUSH
5588: LD_INT 108
5590: PUSH
5591: LD_INT 109
5593: PUSH
5594: LD_INT 110
5596: PUSH
5597: LD_INT 111
5599: PUSH
5600: LD_INT 112
5602: PUSH
5603: LD_INT 113
5605: PUSH
5606: LD_INT 114
5608: PUSH
5609: LD_INT 116
5611: PUSH
5612: LD_INT 117
5614: PUSH
5615: LD_INT 118
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: ST_TO_ADDR
5641: GO 6880
5643: LD_INT 14
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5651
5649: GO 5875
5651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5652: LD_ADDR_VAR 0 2
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: LD_INT 2
5662: PUSH
5663: LD_INT 3
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: LD_INT 6
5674: PUSH
5675: LD_INT 7
5677: PUSH
5678: LD_INT 8
5680: PUSH
5681: LD_INT 9
5683: PUSH
5684: LD_INT 10
5686: PUSH
5687: LD_INT 11
5689: PUSH
5690: LD_INT 12
5692: PUSH
5693: LD_INT 13
5695: PUSH
5696: LD_INT 14
5698: PUSH
5699: LD_INT 15
5701: PUSH
5702: LD_INT 16
5704: PUSH
5705: LD_INT 17
5707: PUSH
5708: LD_INT 18
5710: PUSH
5711: LD_INT 19
5713: PUSH
5714: LD_INT 20
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 23
5725: PUSH
5726: LD_INT 24
5728: PUSH
5729: LD_INT 25
5731: PUSH
5732: LD_INT 26
5734: PUSH
5735: LD_INT 27
5737: PUSH
5738: LD_INT 28
5740: PUSH
5741: LD_INT 29
5743: PUSH
5744: LD_INT 30
5746: PUSH
5747: LD_INT 31
5749: PUSH
5750: LD_INT 32
5752: PUSH
5753: LD_INT 33
5755: PUSH
5756: LD_INT 34
5758: PUSH
5759: LD_INT 36
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 101
5801: PUSH
5802: LD_INT 102
5804: PUSH
5805: LD_INT 103
5807: PUSH
5808: LD_INT 104
5810: PUSH
5811: LD_INT 105
5813: PUSH
5814: LD_INT 106
5816: PUSH
5817: LD_INT 107
5819: PUSH
5820: LD_INT 108
5822: PUSH
5823: LD_INT 109
5825: PUSH
5826: LD_INT 110
5828: PUSH
5829: LD_INT 111
5831: PUSH
5832: LD_INT 112
5834: PUSH
5835: LD_INT 113
5837: PUSH
5838: LD_INT 114
5840: PUSH
5841: LD_INT 116
5843: PUSH
5844: LD_INT 117
5846: PUSH
5847: LD_INT 118
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: ST_TO_ADDR
5873: GO 6880
5875: LD_INT 15
5877: DOUBLE
5878: EQUAL
5879: IFTRUE 5883
5881: GO 6107
5883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5884: LD_ADDR_VAR 0 2
5888: PUSH
5889: LD_INT 1
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: LD_INT 4
5900: PUSH
5901: LD_INT 5
5903: PUSH
5904: LD_INT 6
5906: PUSH
5907: LD_INT 7
5909: PUSH
5910: LD_INT 8
5912: PUSH
5913: LD_INT 9
5915: PUSH
5916: LD_INT 10
5918: PUSH
5919: LD_INT 11
5921: PUSH
5922: LD_INT 12
5924: PUSH
5925: LD_INT 13
5927: PUSH
5928: LD_INT 14
5930: PUSH
5931: LD_INT 15
5933: PUSH
5934: LD_INT 16
5936: PUSH
5937: LD_INT 17
5939: PUSH
5940: LD_INT 18
5942: PUSH
5943: LD_INT 19
5945: PUSH
5946: LD_INT 20
5948: PUSH
5949: LD_INT 21
5951: PUSH
5952: LD_INT 22
5954: PUSH
5955: LD_INT 23
5957: PUSH
5958: LD_INT 24
5960: PUSH
5961: LD_INT 25
5963: PUSH
5964: LD_INT 26
5966: PUSH
5967: LD_INT 27
5969: PUSH
5970: LD_INT 28
5972: PUSH
5973: LD_INT 29
5975: PUSH
5976: LD_INT 30
5978: PUSH
5979: LD_INT 31
5981: PUSH
5982: LD_INT 32
5984: PUSH
5985: LD_INT 33
5987: PUSH
5988: LD_INT 34
5990: PUSH
5991: LD_INT 36
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 101
6033: PUSH
6034: LD_INT 102
6036: PUSH
6037: LD_INT 103
6039: PUSH
6040: LD_INT 104
6042: PUSH
6043: LD_INT 105
6045: PUSH
6046: LD_INT 106
6048: PUSH
6049: LD_INT 107
6051: PUSH
6052: LD_INT 108
6054: PUSH
6055: LD_INT 109
6057: PUSH
6058: LD_INT 110
6060: PUSH
6061: LD_INT 111
6063: PUSH
6064: LD_INT 112
6066: PUSH
6067: LD_INT 113
6069: PUSH
6070: LD_INT 114
6072: PUSH
6073: LD_INT 116
6075: PUSH
6076: LD_INT 117
6078: PUSH
6079: LD_INT 118
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: ST_TO_ADDR
6105: GO 6880
6107: LD_INT 16
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6251
6115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 7
6132: PUSH
6133: LD_INT 11
6135: PUSH
6136: LD_INT 12
6138: PUSH
6139: LD_INT 15
6141: PUSH
6142: LD_INT 16
6144: PUSH
6145: LD_INT 20
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 23
6156: PUSH
6157: LD_INT 25
6159: PUSH
6160: LD_INT 26
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 31
6168: PUSH
6169: LD_INT 32
6171: PUSH
6172: LD_INT 33
6174: PUSH
6175: LD_INT 34
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 101
6201: PUSH
6202: LD_INT 102
6204: PUSH
6205: LD_INT 103
6207: PUSH
6208: LD_INT 106
6210: PUSH
6211: LD_INT 108
6213: PUSH
6214: LD_INT 112
6216: PUSH
6217: LD_INT 113
6219: PUSH
6220: LD_INT 114
6222: PUSH
6223: LD_INT 116
6225: PUSH
6226: LD_INT 117
6228: PUSH
6229: LD_INT 118
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: ST_TO_ADDR
6249: GO 6880
6251: LD_INT 17
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6483
6259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: LD_INT 1
6267: PUSH
6268: LD_INT 2
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: LD_INT 5
6279: PUSH
6280: LD_INT 6
6282: PUSH
6283: LD_INT 7
6285: PUSH
6286: LD_INT 8
6288: PUSH
6289: LD_INT 9
6291: PUSH
6292: LD_INT 10
6294: PUSH
6295: LD_INT 11
6297: PUSH
6298: LD_INT 12
6300: PUSH
6301: LD_INT 13
6303: PUSH
6304: LD_INT 14
6306: PUSH
6307: LD_INT 15
6309: PUSH
6310: LD_INT 16
6312: PUSH
6313: LD_INT 17
6315: PUSH
6316: LD_INT 18
6318: PUSH
6319: LD_INT 19
6321: PUSH
6322: LD_INT 20
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_INT 23
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 25
6339: PUSH
6340: LD_INT 26
6342: PUSH
6343: LD_INT 27
6345: PUSH
6346: LD_INT 28
6348: PUSH
6349: LD_INT 29
6351: PUSH
6352: LD_INT 30
6354: PUSH
6355: LD_INT 31
6357: PUSH
6358: LD_INT 32
6360: PUSH
6361: LD_INT 33
6363: PUSH
6364: LD_INT 34
6366: PUSH
6367: LD_INT 36
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 101
6409: PUSH
6410: LD_INT 102
6412: PUSH
6413: LD_INT 103
6415: PUSH
6416: LD_INT 104
6418: PUSH
6419: LD_INT 105
6421: PUSH
6422: LD_INT 106
6424: PUSH
6425: LD_INT 107
6427: PUSH
6428: LD_INT 108
6430: PUSH
6431: LD_INT 109
6433: PUSH
6434: LD_INT 110
6436: PUSH
6437: LD_INT 111
6439: PUSH
6440: LD_INT 112
6442: PUSH
6443: LD_INT 113
6445: PUSH
6446: LD_INT 114
6448: PUSH
6449: LD_INT 116
6451: PUSH
6452: LD_INT 117
6454: PUSH
6455: LD_INT 118
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: ST_TO_ADDR
6481: GO 6880
6483: LD_INT 18
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6639
6491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6492: LD_ADDR_VAR 0 2
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: LD_INT 4
6502: PUSH
6503: LD_INT 5
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 33
6550: PUSH
6551: LD_INT 34
6553: PUSH
6554: LD_INT 35
6556: PUSH
6557: LD_INT 36
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 101
6585: PUSH
6586: LD_INT 102
6588: PUSH
6589: LD_INT 103
6591: PUSH
6592: LD_INT 106
6594: PUSH
6595: LD_INT 108
6597: PUSH
6598: LD_INT 112
6600: PUSH
6601: LD_INT 113
6603: PUSH
6604: LD_INT 114
6606: PUSH
6607: LD_INT 115
6609: PUSH
6610: LD_INT 116
6612: PUSH
6613: LD_INT 117
6615: PUSH
6616: LD_INT 118
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 6880
6639: LD_INT 19
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6879
6647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6648: LD_ADDR_VAR 0 2
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: LD_INT 6
6670: PUSH
6671: LD_INT 7
6673: PUSH
6674: LD_INT 8
6676: PUSH
6677: LD_INT 9
6679: PUSH
6680: LD_INT 10
6682: PUSH
6683: LD_INT 11
6685: PUSH
6686: LD_INT 12
6688: PUSH
6689: LD_INT 13
6691: PUSH
6692: LD_INT 14
6694: PUSH
6695: LD_INT 15
6697: PUSH
6698: LD_INT 16
6700: PUSH
6701: LD_INT 17
6703: PUSH
6704: LD_INT 18
6706: PUSH
6707: LD_INT 19
6709: PUSH
6710: LD_INT 20
6712: PUSH
6713: LD_INT 21
6715: PUSH
6716: LD_INT 22
6718: PUSH
6719: LD_INT 23
6721: PUSH
6722: LD_INT 24
6724: PUSH
6725: LD_INT 25
6727: PUSH
6728: LD_INT 26
6730: PUSH
6731: LD_INT 27
6733: PUSH
6734: LD_INT 28
6736: PUSH
6737: LD_INT 29
6739: PUSH
6740: LD_INT 30
6742: PUSH
6743: LD_INT 31
6745: PUSH
6746: LD_INT 32
6748: PUSH
6749: LD_INT 33
6751: PUSH
6752: LD_INT 34
6754: PUSH
6755: LD_INT 35
6757: PUSH
6758: LD_INT 36
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 101
6801: PUSH
6802: LD_INT 102
6804: PUSH
6805: LD_INT 103
6807: PUSH
6808: LD_INT 104
6810: PUSH
6811: LD_INT 105
6813: PUSH
6814: LD_INT 106
6816: PUSH
6817: LD_INT 107
6819: PUSH
6820: LD_INT 108
6822: PUSH
6823: LD_INT 109
6825: PUSH
6826: LD_INT 110
6828: PUSH
6829: LD_INT 111
6831: PUSH
6832: LD_INT 112
6834: PUSH
6835: LD_INT 113
6837: PUSH
6838: LD_INT 114
6840: PUSH
6841: LD_INT 115
6843: PUSH
6844: LD_INT 116
6846: PUSH
6847: LD_INT 117
6849: PUSH
6850: LD_INT 118
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 6880
6879: POP
// end else
6880: GO 7111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: LD_INT 6
6904: PUSH
6905: LD_INT 7
6907: PUSH
6908: LD_INT 8
6910: PUSH
6911: LD_INT 9
6913: PUSH
6914: LD_INT 10
6916: PUSH
6917: LD_INT 11
6919: PUSH
6920: LD_INT 12
6922: PUSH
6923: LD_INT 13
6925: PUSH
6926: LD_INT 14
6928: PUSH
6929: LD_INT 15
6931: PUSH
6932: LD_INT 16
6934: PUSH
6935: LD_INT 17
6937: PUSH
6938: LD_INT 18
6940: PUSH
6941: LD_INT 19
6943: PUSH
6944: LD_INT 20
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 22
6952: PUSH
6953: LD_INT 23
6955: PUSH
6956: LD_INT 24
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 26
6964: PUSH
6965: LD_INT 27
6967: PUSH
6968: LD_INT 28
6970: PUSH
6971: LD_INT 29
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: LD_INT 32
6982: PUSH
6983: LD_INT 33
6985: PUSH
6986: LD_INT 34
6988: PUSH
6989: LD_INT 35
6991: PUSH
6992: LD_INT 36
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 101
7035: PUSH
7036: LD_INT 102
7038: PUSH
7039: LD_INT 103
7041: PUSH
7042: LD_INT 104
7044: PUSH
7045: LD_INT 105
7047: PUSH
7048: LD_INT 106
7050: PUSH
7051: LD_INT 107
7053: PUSH
7054: LD_INT 108
7056: PUSH
7057: LD_INT 109
7059: PUSH
7060: LD_INT 110
7062: PUSH
7063: LD_INT 111
7065: PUSH
7066: LD_INT 112
7068: PUSH
7069: LD_INT 113
7071: PUSH
7072: LD_INT 114
7074: PUSH
7075: LD_INT 115
7077: PUSH
7078: LD_INT 116
7080: PUSH
7081: LD_INT 117
7083: PUSH
7084: LD_INT 118
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: ST_TO_ADDR
// if result then
7111: LD_VAR 0 2
7115: IFFALSE 7901
// begin normal :=  ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_STRING 
7124: ST_TO_ADDR
// hardcore :=  ;
7125: LD_ADDR_VAR 0 6
7129: PUSH
7130: LD_STRING 
7132: ST_TO_ADDR
// active :=  ;
7133: LD_ADDR_VAR 0 7
7137: PUSH
7138: LD_STRING 
7140: ST_TO_ADDR
// for i = 1 to normalCounter do
7141: LD_ADDR_VAR 0 8
7145: PUSH
7146: DOUBLE
7147: LD_INT 1
7149: DEC
7150: ST_TO_ADDR
7151: LD_EXP 9
7155: PUSH
7156: FOR_TO
7157: IFFALSE 7258
// begin tmp := 0 ;
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_STRING 0
7166: ST_TO_ADDR
// if result [ 1 ] then
7167: LD_VAR 0 2
7171: PUSH
7172: LD_INT 1
7174: ARRAY
7175: IFFALSE 7240
// if result [ 1 ] [ 1 ] = i then
7177: LD_VAR 0 2
7181: PUSH
7182: LD_INT 1
7184: ARRAY
7185: PUSH
7186: LD_INT 1
7188: ARRAY
7189: PUSH
7190: LD_VAR 0 8
7194: EQUAL
7195: IFFALSE 7240
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_VAR 0 2
7214: PUSH
7215: LD_INT 1
7217: ARRAY
7218: PPUSH
7219: LD_INT 1
7221: PPUSH
7222: CALL_OW 3
7226: PPUSH
7227: CALL_OW 1
7231: ST_TO_ADDR
// tmp := 1 ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 1
7239: ST_TO_ADDR
// end ; normal := normal & tmp ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_VAR 0 5
7249: PUSH
7250: LD_VAR 0 3
7254: STR
7255: ST_TO_ADDR
// end ;
7256: GO 7156
7258: POP
7259: POP
// for i = 1 to hardcoreCounter do
7260: LD_ADDR_VAR 0 8
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_EXP 10
7274: PUSH
7275: FOR_TO
7276: IFFALSE 7381
// begin tmp := 0 ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_STRING 0
7285: ST_TO_ADDR
// if result [ 2 ] then
7286: LD_VAR 0 2
7290: PUSH
7291: LD_INT 2
7293: ARRAY
7294: IFFALSE 7363
// if result [ 2 ] [ 1 ] = 100 + i then
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 2
7303: ARRAY
7304: PUSH
7305: LD_INT 1
7307: ARRAY
7308: PUSH
7309: LD_INT 100
7311: PUSH
7312: LD_VAR 0 8
7316: PLUS
7317: EQUAL
7318: IFFALSE 7363
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: LD_VAR 0 2
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: PPUSH
7342: LD_INT 1
7344: PPUSH
7345: CALL_OW 3
7349: PPUSH
7350: CALL_OW 1
7354: ST_TO_ADDR
// tmp := 1 ;
7355: LD_ADDR_VAR 0 3
7359: PUSH
7360: LD_STRING 1
7362: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7363: LD_ADDR_VAR 0 6
7367: PUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_VAR 0 3
7377: STR
7378: ST_TO_ADDR
// end ;
7379: GO 7275
7381: POP
7382: POP
// if isGameLoad then
7383: LD_VAR 0 1
7387: IFFALSE 7862
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_EXP 13
7398: PUSH
7399: LD_EXP 12
7403: PUSH
7404: LD_EXP 14
7408: PUSH
7409: LD_EXP 11
7413: PUSH
7414: LD_EXP 15
7418: PUSH
7419: LD_EXP 16
7423: PUSH
7424: LD_EXP 17
7428: PUSH
7429: LD_EXP 18
7433: PUSH
7434: LD_EXP 19
7438: PUSH
7439: LD_EXP 20
7443: PUSH
7444: LD_EXP 21
7448: PUSH
7449: LD_EXP 22
7453: PUSH
7454: LD_EXP 23
7458: PUSH
7459: LD_EXP 24
7463: PUSH
7464: LD_EXP 32
7468: PUSH
7469: LD_EXP 33
7473: PUSH
7474: LD_EXP 34
7478: PUSH
7479: LD_EXP 35
7483: PUSH
7484: LD_EXP 37
7488: PUSH
7489: LD_EXP 38
7493: PUSH
7494: LD_EXP 39
7498: PUSH
7499: LD_EXP 42
7503: PUSH
7504: LD_EXP 44
7508: PUSH
7509: LD_EXP 45
7513: PUSH
7514: LD_EXP 46
7518: PUSH
7519: LD_EXP 48
7523: PUSH
7524: LD_EXP 49
7528: PUSH
7529: LD_EXP 52
7533: PUSH
7534: LD_EXP 53
7538: PUSH
7539: LD_EXP 54
7543: PUSH
7544: LD_EXP 55
7548: PUSH
7549: LD_EXP 56
7553: PUSH
7554: LD_EXP 57
7558: PUSH
7559: LD_EXP 58
7563: PUSH
7564: LD_EXP 59
7568: PUSH
7569: LD_EXP 60
7573: PUSH
7574: LD_EXP 25
7578: PUSH
7579: LD_EXP 26
7583: PUSH
7584: LD_EXP 29
7588: PUSH
7589: LD_EXP 30
7593: PUSH
7594: LD_EXP 31
7598: PUSH
7599: LD_EXP 27
7603: PUSH
7604: LD_EXP 28
7608: PUSH
7609: LD_EXP 36
7613: PUSH
7614: LD_EXP 40
7618: PUSH
7619: LD_EXP 41
7623: PUSH
7624: LD_EXP 43
7628: PUSH
7629: LD_EXP 47
7633: PUSH
7634: LD_EXP 50
7638: PUSH
7639: LD_EXP 51
7643: PUSH
7644: LD_EXP 61
7648: PUSH
7649: LD_EXP 62
7653: PUSH
7654: LD_EXP 63
7658: PUSH
7659: LD_EXP 64
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// tmp :=  ;
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// for i = 1 to normalCounter do
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: DOUBLE
7734: LD_INT 1
7736: DEC
7737: ST_TO_ADDR
7738: LD_EXP 9
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7780
// begin if flags [ i ] then
7746: LD_VAR 0 4
7750: PUSH
7751: LD_VAR 0 8
7755: ARRAY
7756: IFFALSE 7778
// tmp := tmp & i & ; ;
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_VAR 0 3
7767: PUSH
7768: LD_VAR 0 8
7772: STR
7773: PUSH
7774: LD_STRING ;
7776: STR
7777: ST_TO_ADDR
// end ;
7778: GO 7743
7780: POP
7781: POP
// for i = 1 to hardcoreCounter do
7782: LD_ADDR_VAR 0 8
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_EXP 10
7796: PUSH
7797: FOR_TO
7798: IFFALSE 7844
// begin if flags [ normalCounter + i ] then
7800: LD_VAR 0 4
7804: PUSH
7805: LD_EXP 9
7809: PUSH
7810: LD_VAR 0 8
7814: PLUS
7815: ARRAY
7816: IFFALSE 7842
// tmp := tmp & ( 100 + i ) & ; ;
7818: LD_ADDR_VAR 0 3
7822: PUSH
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 100
7830: PUSH
7831: LD_VAR 0 8
7835: PLUS
7836: STR
7837: PUSH
7838: LD_STRING ;
7840: STR
7841: ST_TO_ADDR
// end ;
7842: GO 7797
7844: POP
7845: POP
// if tmp then
7846: LD_VAR 0 3
7850: IFFALSE 7862
// active := tmp ;
7852: LD_ADDR_VAR 0 7
7856: PUSH
7857: LD_VAR 0 3
7861: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7862: LD_STRING getStreamItemsFromMission("
7864: PUSH
7865: LD_VAR 0 5
7869: STR
7870: PUSH
7871: LD_STRING ","
7873: STR
7874: PUSH
7875: LD_VAR 0 6
7879: STR
7880: PUSH
7881: LD_STRING ","
7883: STR
7884: PUSH
7885: LD_VAR 0 7
7889: STR
7890: PUSH
7891: LD_STRING ")
7893: STR
7894: PPUSH
7895: CALL_OW 559
// end else
7899: GO 7908
// ToLua ( getStreamItemsFromMission("","","") ) ;
7901: LD_STRING getStreamItemsFromMission("","","")
7903: PPUSH
7904: CALL_OW 559
// end ;
7908: LD_VAR 0 2
7912: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7913: LD_EXP 8
7917: PUSH
7918: LD_EXP 13
7922: AND
7923: IFFALSE 8047
7925: GO 7927
7927: DISABLE
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
// begin enable ;
7932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_INT 22
7940: PUSH
7941: LD_OWVAR 2
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 34
7955: PUSH
7956: LD_INT 7
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 34
7965: PUSH
7966: LD_INT 45
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 34
7975: PUSH
7976: LD_INT 28
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 34
7985: PUSH
7986: LD_INT 47
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 69
8008: ST_TO_ADDR
// if not tmp then
8009: LD_VAR 0 2
8013: NOT
8014: IFFALSE 8018
// exit ;
8016: GO 8047
// for i in tmp do
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8045
// begin SetLives ( i , 0 ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 0
8038: PPUSH
8039: CALL_OW 234
// end ;
8043: GO 8028
8045: POP
8046: POP
// end ;
8047: PPOPN 2
8049: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8050: LD_EXP 8
8054: PUSH
8055: LD_EXP 14
8059: AND
8060: IFFALSE 8144
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
// begin enable ;
8069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8070: LD_ADDR_VAR 0 2
8074: PUSH
8075: LD_INT 22
8077: PUSH
8078: LD_OWVAR 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 32
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: ST_TO_ADDR
// if not tmp then
8106: LD_VAR 0 2
8110: NOT
8111: IFFALSE 8115
// exit ;
8113: GO 8144
// for i in tmp do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 2
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8142
// begin SetLives ( i , 0 ) ;
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 0
8135: PPUSH
8136: CALL_OW 234
// end ;
8140: GO 8125
8142: POP
8143: POP
// end ;
8144: PPOPN 2
8146: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8147: LD_EXP 8
8151: PUSH
8152: LD_EXP 11
8156: AND
8157: IFFALSE 8250
8159: GO 8161
8161: DISABLE
8162: LD_INT 0
8164: PPUSH
// begin enable ;
8165: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8166: LD_ADDR_VAR 0 1
8170: PUSH
8171: LD_INT 22
8173: PUSH
8174: LD_OWVAR 2
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 5
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 25
8198: PUSH
8199: LD_INT 9
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 25
8208: PUSH
8209: LD_INT 8
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8248
// begin SetClass ( i , 1 ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: CALL_OW 336
// end ;
8246: GO 8231
8248: POP
8249: POP
// end ;
8250: PPOPN 1
8252: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8253: LD_EXP 8
8257: PUSH
8258: LD_EXP 12
8262: AND
8263: PUSH
8264: LD_OWVAR 65
8268: PUSH
8269: LD_INT 7
8271: LESS
8272: AND
8273: IFFALSE 8287
8275: GO 8277
8277: DISABLE
// begin enable ;
8278: ENABLE
// game_speed := 7 ;
8279: LD_ADDR_OWVAR 65
8283: PUSH
8284: LD_INT 7
8286: ST_TO_ADDR
// end ;
8287: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8288: LD_EXP 8
8292: PUSH
8293: LD_EXP 15
8297: AND
8298: IFFALSE 8500
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_INT 81
8315: PUSH
8316: LD_OWVAR 2
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 21
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 3
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8500
// if tmp > 5 then
8353: LD_VAR 0 3
8357: PUSH
8358: LD_INT 5
8360: GREATER
8361: IFFALSE 8373
// k := 5 else
8363: LD_ADDR_VAR 0 2
8367: PUSH
8368: LD_INT 5
8370: ST_TO_ADDR
8371: GO 8383
// k := tmp ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_VAR 0 3
8382: ST_TO_ADDR
// for i := 1 to k do
8383: LD_ADDR_VAR 0 1
8387: PUSH
8388: DOUBLE
8389: LD_INT 1
8391: DEC
8392: ST_TO_ADDR
8393: LD_VAR 0 2
8397: PUSH
8398: FOR_TO
8399: IFFALSE 8498
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_VAR 0 1
8410: ARRAY
8411: PPUSH
8412: LD_VAR 0 1
8416: PUSH
8417: LD_INT 4
8419: MOD
8420: PUSH
8421: LD_INT 1
8423: PLUS
8424: PPUSH
8425: CALL_OW 259
8429: PUSH
8430: LD_INT 10
8432: LESS
8433: IFFALSE 8496
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8435: LD_VAR 0 3
8439: PUSH
8440: LD_VAR 0 1
8444: ARRAY
8445: PPUSH
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 4
8453: MOD
8454: PUSH
8455: LD_INT 1
8457: PLUS
8458: PPUSH
8459: LD_VAR 0 3
8463: PUSH
8464: LD_VAR 0 1
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 1
8474: PUSH
8475: LD_INT 4
8477: MOD
8478: PUSH
8479: LD_INT 1
8481: PLUS
8482: PPUSH
8483: CALL_OW 259
8487: PUSH
8488: LD_INT 1
8490: PLUS
8491: PPUSH
8492: CALL_OW 237
8496: GO 8398
8498: POP
8499: POP
// end ;
8500: PPOPN 3
8502: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8503: LD_EXP 8
8507: PUSH
8508: LD_EXP 16
8512: AND
8513: IFFALSE 8533
8515: GO 8517
8517: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8518: LD_INT 4
8520: PPUSH
8521: LD_OWVAR 2
8525: PPUSH
8526: LD_INT 0
8528: PPUSH
8529: CALL_OW 324
8533: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8534: LD_EXP 8
8538: PUSH
8539: LD_EXP 45
8543: AND
8544: IFFALSE 8564
8546: GO 8548
8548: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8549: LD_INT 19
8551: PPUSH
8552: LD_OWVAR 2
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL_OW 324
8564: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8565: LD_EXP 8
8569: PUSH
8570: LD_EXP 17
8574: AND
8575: IFFALSE 8677
8577: GO 8579
8579: DISABLE
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
// begin enable ;
8584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_OWVAR 2
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 2
8604: PUSH
8605: LD_INT 34
8607: PUSH
8608: LD_INT 11
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 34
8617: PUSH
8618: LD_INT 30
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 69
8638: ST_TO_ADDR
// if not tmp then
8639: LD_VAR 0 2
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8677
// for i in tmp do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: LD_VAR 0 2
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8675
// begin SetLives ( i , 0 ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: LD_INT 0
8668: PPUSH
8669: CALL_OW 234
// end ;
8673: GO 8658
8675: POP
8676: POP
// end ;
8677: PPOPN 2
8679: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8680: LD_EXP 8
8684: PUSH
8685: LD_EXP 18
8689: AND
8690: IFFALSE 8710
8692: GO 8694
8694: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8695: LD_INT 32
8697: PPUSH
8698: LD_OWVAR 2
8702: PPUSH
8703: LD_INT 0
8705: PPUSH
8706: CALL_OW 324
8710: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8711: LD_EXP 8
8715: PUSH
8716: LD_EXP 19
8720: AND
8721: IFFALSE 8902
8723: GO 8725
8725: DISABLE
8726: LD_INT 0
8728: PPUSH
8729: PPUSH
8730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: LD_INT 22
8738: PUSH
8739: LD_OWVAR 2
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 33
8750: PUSH
8751: LD_INT 3
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: ST_TO_ADDR
// if not tmp then
8767: LD_VAR 0 2
8771: NOT
8772: IFFALSE 8776
// exit ;
8774: GO 8902
// side := 0 ;
8776: LD_ADDR_VAR 0 3
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// for i := 1 to 8 do
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: DOUBLE
8790: LD_INT 1
8792: DEC
8793: ST_TO_ADDR
8794: LD_INT 8
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8846
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8800: LD_OWVAR 2
8804: PUSH
8805: LD_VAR 0 1
8809: NONEQUAL
8810: PUSH
8811: LD_OWVAR 2
8815: PPUSH
8816: LD_VAR 0 1
8820: PPUSH
8821: CALL_OW 81
8825: PUSH
8826: LD_INT 2
8828: EQUAL
8829: AND
8830: IFFALSE 8844
// begin side := i ;
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_VAR 0 1
8841: ST_TO_ADDR
// break ;
8842: GO 8846
// end ;
8844: GO 8797
8846: POP
8847: POP
// if not side then
8848: LD_VAR 0 3
8852: NOT
8853: IFFALSE 8857
// exit ;
8855: GO 8902
// for i := 1 to tmp do
8857: LD_ADDR_VAR 0 1
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_VAR 0 2
8871: PUSH
8872: FOR_TO
8873: IFFALSE 8900
// if Prob ( 60 ) then
8875: LD_INT 60
8877: PPUSH
8878: CALL_OW 13
8882: IFFALSE 8898
// SetSide ( i , side ) ;
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_VAR 0 3
8893: PPUSH
8894: CALL_OW 235
8898: GO 8872
8900: POP
8901: POP
// end ;
8902: PPOPN 3
8904: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8905: LD_EXP 8
8909: PUSH
8910: LD_EXP 21
8914: AND
8915: IFFALSE 9034
8917: GO 8919
8919: DISABLE
8920: LD_INT 0
8922: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_OWVAR 2
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 21
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: LD_INT 23
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 69
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9032
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 257
8989: PUSH
8990: LD_INT 1
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: LD_INT 4
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: IN
9008: IFFALSE 9030
// SetClass ( un , rand ( 1 , 4 ) ) ;
9010: LD_VAR 0 1
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_INT 4
9020: PPUSH
9021: CALL_OW 12
9025: PPUSH
9026: CALL_OW 336
9030: GO 8977
9032: POP
9033: POP
// end ;
9034: PPOPN 1
9036: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9037: LD_EXP 8
9041: PUSH
9042: LD_EXP 20
9046: AND
9047: IFFALSE 9126
9049: GO 9051
9051: DISABLE
9052: LD_INT 0
9054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9055: LD_ADDR_VAR 0 1
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_OWVAR 2
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 21
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PPUSH
9086: CALL_OW 69
9090: ST_TO_ADDR
// if not tmp then
9091: LD_VAR 0 1
9095: NOT
9096: IFFALSE 9100
// exit ;
9098: GO 9126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9100: LD_VAR 0 1
9104: PUSH
9105: LD_INT 1
9107: PPUSH
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 12
9117: ARRAY
9118: PPUSH
9119: LD_INT 100
9121: PPUSH
9122: CALL_OW 234
// end ;
9126: PPOPN 1
9128: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9129: LD_EXP 8
9133: PUSH
9134: LD_EXP 22
9138: AND
9139: IFFALSE 9237
9141: GO 9143
9143: DISABLE
9144: LD_INT 0
9146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9147: LD_ADDR_VAR 0 1
9151: PUSH
9152: LD_INT 22
9154: PUSH
9155: LD_OWVAR 2
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 21
9166: PUSH
9167: LD_INT 1
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PPUSH
9178: CALL_OW 69
9182: ST_TO_ADDR
// if not tmp then
9183: LD_VAR 0 1
9187: NOT
9188: IFFALSE 9192
// exit ;
9190: GO 9237
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9192: LD_VAR 0 1
9196: PUSH
9197: LD_INT 1
9199: PPUSH
9200: LD_VAR 0 1
9204: PPUSH
9205: CALL_OW 12
9209: ARRAY
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: LD_INT 4
9216: PPUSH
9217: CALL_OW 12
9221: PPUSH
9222: LD_INT 3000
9224: PPUSH
9225: LD_INT 9000
9227: PPUSH
9228: CALL_OW 12
9232: PPUSH
9233: CALL_OW 492
// end ;
9237: PPOPN 1
9239: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9240: LD_EXP 8
9244: PUSH
9245: LD_EXP 23
9249: AND
9250: IFFALSE 9270
9252: GO 9254
9254: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9255: LD_INT 1
9257: PPUSH
9258: LD_OWVAR 2
9262: PPUSH
9263: LD_INT 0
9265: PPUSH
9266: CALL_OW 324
9270: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9271: LD_EXP 8
9275: PUSH
9276: LD_EXP 24
9280: AND
9281: IFFALSE 9364
9283: GO 9285
9285: DISABLE
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9290: LD_ADDR_VAR 0 2
9294: PUSH
9295: LD_INT 22
9297: PUSH
9298: LD_OWVAR 2
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PPUSH
9321: CALL_OW 69
9325: ST_TO_ADDR
// if not tmp then
9326: LD_VAR 0 2
9330: NOT
9331: IFFALSE 9335
// exit ;
9333: GO 9364
// for i in tmp do
9335: LD_ADDR_VAR 0 1
9339: PUSH
9340: LD_VAR 0 2
9344: PUSH
9345: FOR_IN
9346: IFFALSE 9362
// SetBLevel ( i , 10 ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 10
9355: PPUSH
9356: CALL_OW 241
9360: GO 9345
9362: POP
9363: POP
// end ;
9364: PPOPN 2
9366: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9367: LD_EXP 8
9371: PUSH
9372: LD_EXP 25
9376: AND
9377: IFFALSE 9488
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_OWVAR 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 25
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 69
9422: ST_TO_ADDR
// if not tmp then
9423: LD_VAR 0 3
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9488
// un := tmp [ rand ( 1 , tmp ) ] ;
9432: LD_ADDR_VAR 0 2
9436: PUSH
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 1
9444: PPUSH
9445: LD_VAR 0 3
9449: PPUSH
9450: CALL_OW 12
9454: ARRAY
9455: ST_TO_ADDR
// if Crawls ( un ) then
9456: LD_VAR 0 2
9460: PPUSH
9461: CALL_OW 318
9465: IFFALSE 9476
// ComWalk ( un ) ;
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9476: LD_VAR 0 2
9480: PPUSH
9481: LD_INT 5
9483: PPUSH
9484: CALL_OW 336
// end ;
9488: PPOPN 3
9490: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9491: LD_EXP 8
9495: PUSH
9496: LD_EXP 26
9500: AND
9501: PUSH
9502: LD_OWVAR 67
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: AND
9511: IFFALSE 9530
9513: GO 9515
9515: DISABLE
// begin Difficulty := Difficulty + 1 ;
9516: LD_ADDR_OWVAR 67
9520: PUSH
9521: LD_OWVAR 67
9525: PUSH
9526: LD_INT 1
9528: PLUS
9529: ST_TO_ADDR
// end ;
9530: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9531: LD_EXP 8
9535: PUSH
9536: LD_EXP 27
9540: AND
9541: IFFALSE 9644
9543: GO 9545
9545: DISABLE
9546: LD_INT 0
9548: PPUSH
// begin for i := 1 to 5 do
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: DOUBLE
9555: LD_INT 1
9557: DEC
9558: ST_TO_ADDR
9559: LD_INT 5
9561: PUSH
9562: FOR_TO
9563: IFFALSE 9642
// begin uc_nation := nation_nature ;
9565: LD_ADDR_OWVAR 21
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// uc_side := 0 ;
9573: LD_ADDR_OWVAR 20
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9581: LD_ADDR_OWVAR 29
9585: PUSH
9586: LD_INT 12
9588: PUSH
9589: LD_INT 12
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: ST_TO_ADDR
// hc_agressivity := 20 ;
9596: LD_ADDR_OWVAR 35
9600: PUSH
9601: LD_INT 20
9603: ST_TO_ADDR
// hc_class := class_tiger ;
9604: LD_ADDR_OWVAR 28
9608: PUSH
9609: LD_INT 14
9611: ST_TO_ADDR
// hc_gallery :=  ;
9612: LD_ADDR_OWVAR 33
9616: PUSH
9617: LD_STRING 
9619: ST_TO_ADDR
// hc_name :=  ;
9620: LD_ADDR_OWVAR 26
9624: PUSH
9625: LD_STRING 
9627: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9628: CALL_OW 44
9632: PPUSH
9633: LD_INT 0
9635: PPUSH
9636: CALL_OW 51
// end ;
9640: GO 9562
9642: POP
9643: POP
// end ;
9644: PPOPN 1
9646: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9647: LD_EXP 8
9651: PUSH
9652: LD_EXP 28
9656: AND
9657: IFFALSE 9666
9659: GO 9661
9661: DISABLE
// StreamSibBomb ;
9662: CALL 9667 0 0
9666: END
// export function StreamSibBomb ; var i , x , y ; begin
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
// result := false ;
9673: LD_ADDR_VAR 0 1
9677: PUSH
9678: LD_INT 0
9680: ST_TO_ADDR
// for i := 1 to 16 do
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: DOUBLE
9687: LD_INT 1
9689: DEC
9690: ST_TO_ADDR
9691: LD_INT 16
9693: PUSH
9694: FOR_TO
9695: IFFALSE 9894
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: LD_INT 10
9704: PUSH
9705: LD_INT 20
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 40
9713: PUSH
9714: LD_INT 50
9716: PUSH
9717: LD_INT 60
9719: PUSH
9720: LD_INT 70
9722: PUSH
9723: LD_INT 80
9725: PUSH
9726: LD_INT 90
9728: PUSH
9729: LD_INT 100
9731: PUSH
9732: LD_INT 110
9734: PUSH
9735: LD_INT 120
9737: PUSH
9738: LD_INT 130
9740: PUSH
9741: LD_INT 140
9743: PUSH
9744: LD_INT 150
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 1
9766: PPUSH
9767: LD_INT 15
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9776: LD_ADDR_VAR 0 4
9780: PUSH
9781: LD_INT 10
9783: PUSH
9784: LD_INT 20
9786: PUSH
9787: LD_INT 30
9789: PUSH
9790: LD_INT 40
9792: PUSH
9793: LD_INT 50
9795: PUSH
9796: LD_INT 60
9798: PUSH
9799: LD_INT 70
9801: PUSH
9802: LD_INT 80
9804: PUSH
9805: LD_INT 90
9807: PUSH
9808: LD_INT 100
9810: PUSH
9811: LD_INT 110
9813: PUSH
9814: LD_INT 120
9816: PUSH
9817: LD_INT 130
9819: PUSH
9820: LD_INT 140
9822: PUSH
9823: LD_INT 150
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 1
9845: PPUSH
9846: LD_INT 15
9848: PPUSH
9849: CALL_OW 12
9853: ARRAY
9854: ST_TO_ADDR
// if ValidHex ( x , y ) then
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 488
9869: IFFALSE 9892
// begin result := [ x , y ] ;
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_VAR 0 3
9880: PUSH
9881: LD_VAR 0 4
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: ST_TO_ADDR
// break ;
9890: GO 9894
// end ; end ;
9892: GO 9694
9894: POP
9895: POP
// if result then
9896: LD_VAR 0 1
9900: IFFALSE 9960
// begin ToLua ( playSibBomb() ) ;
9902: LD_STRING playSibBomb()
9904: PPUSH
9905: CALL_OW 559
// wait ( 0 0$14 ) ;
9909: LD_INT 490
9911: PPUSH
9912: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9916: LD_VAR 0 1
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PPUSH
9925: LD_VAR 0 1
9929: PUSH
9930: LD_INT 2
9932: ARRAY
9933: PPUSH
9934: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 1
9945: ARRAY
9946: PPUSH
9947: LD_VAR 0 1
9951: PUSH
9952: LD_INT 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 429
// end ; end ;
9960: LD_VAR 0 1
9964: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9965: LD_EXP 8
9969: PUSH
9970: LD_EXP 30
9974: AND
9975: IFFALSE 9987
9977: GO 9979
9979: DISABLE
// YouLost (  ) ;
9980: LD_STRING 
9982: PPUSH
9983: CALL_OW 104
9987: END
// every 0 0$1 trigger StreamModeActive and sFog do
9988: LD_EXP 8
9992: PUSH
9993: LD_EXP 29
9997: AND
9998: IFFALSE 10012
10000: GO 10002
10002: DISABLE
// FogOff ( your_side ) ;
10003: LD_OWVAR 2
10007: PPUSH
10008: CALL_OW 344
10012: END
// every 0 0$1 trigger StreamModeActive and sSun do
10013: LD_EXP 8
10017: PUSH
10018: LD_EXP 31
10022: AND
10023: IFFALSE 10051
10025: GO 10027
10027: DISABLE
// begin solar_recharge_percent := 0 ;
10028: LD_ADDR_OWVAR 79
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10036: LD_INT 10500
10038: PPUSH
10039: CALL_OW 67
// solar_recharge_percent := 100 ;
10043: LD_ADDR_OWVAR 79
10047: PUSH
10048: LD_INT 100
10050: ST_TO_ADDR
// end ;
10051: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10052: LD_EXP 8
10056: PUSH
10057: LD_EXP 32
10061: AND
10062: IFFALSE 10301
10064: GO 10066
10066: DISABLE
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
// begin tmp := [ ] ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: EMPTY
10078: ST_TO_ADDR
// for i := 1 to 6 do
10079: LD_ADDR_VAR 0 1
10083: PUSH
10084: DOUBLE
10085: LD_INT 1
10087: DEC
10088: ST_TO_ADDR
10089: LD_INT 6
10091: PUSH
10092: FOR_TO
10093: IFFALSE 10198
// begin uc_nation := nation_nature ;
10095: LD_ADDR_OWVAR 21
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_side := 0 ;
10103: LD_ADDR_OWVAR 20
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10111: LD_ADDR_OWVAR 29
10115: PUSH
10116: LD_INT 12
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: ST_TO_ADDR
// hc_agressivity := 20 ;
10126: LD_ADDR_OWVAR 35
10130: PUSH
10131: LD_INT 20
10133: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10134: LD_ADDR_OWVAR 28
10138: PUSH
10139: LD_INT 17
10141: ST_TO_ADDR
// hc_gallery :=  ;
10142: LD_ADDR_OWVAR 33
10146: PUSH
10147: LD_STRING 
10149: ST_TO_ADDR
// hc_name :=  ;
10150: LD_ADDR_OWVAR 26
10154: PUSH
10155: LD_STRING 
10157: ST_TO_ADDR
// un := CreateHuman ;
10158: LD_ADDR_VAR 0 2
10162: PUSH
10163: CALL_OW 44
10167: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10168: LD_VAR 0 2
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 51
// tmp := tmp ^ un ;
10180: LD_ADDR_VAR 0 3
10184: PUSH
10185: LD_VAR 0 3
10189: PUSH
10190: LD_VAR 0 2
10194: ADD
10195: ST_TO_ADDR
// end ;
10196: GO 10092
10198: POP
10199: POP
// repeat wait ( 0 0$1 ) ;
10200: LD_INT 35
10202: PPUSH
10203: CALL_OW 67
// for un in tmp do
10207: LD_ADDR_VAR 0 2
10211: PUSH
10212: LD_VAR 0 3
10216: PUSH
10217: FOR_IN
10218: IFFALSE 10292
// begin if IsDead ( un ) then
10220: LD_VAR 0 2
10224: PPUSH
10225: CALL_OW 301
10229: IFFALSE 10249
// begin tmp := tmp diff un ;
10231: LD_ADDR_VAR 0 3
10235: PUSH
10236: LD_VAR 0 3
10240: PUSH
10241: LD_VAR 0 2
10245: DIFF
10246: ST_TO_ADDR
// continue ;
10247: GO 10217
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_INT 3
10256: PUSH
10257: LD_INT 22
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 69
10275: PPUSH
10276: LD_VAR 0 2
10280: PPUSH
10281: CALL_OW 74
10285: PPUSH
10286: CALL_OW 115
// end ;
10290: GO 10217
10292: POP
10293: POP
// until not tmp ;
10294: LD_VAR 0 3
10298: NOT
10299: IFFALSE 10200
// end ;
10301: PPOPN 3
10303: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10304: LD_EXP 8
10308: PUSH
10309: LD_EXP 33
10313: AND
10314: IFFALSE 10368
10316: GO 10318
10318: DISABLE
// begin ToLua ( displayTroll(); ) ;
10319: LD_STRING displayTroll();
10321: PPUSH
10322: CALL_OW 559
// wait ( 3 3$00 ) ;
10326: LD_INT 6300
10328: PPUSH
10329: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10333: LD_STRING hideTroll();
10335: PPUSH
10336: CALL_OW 559
// wait ( 1 1$00 ) ;
10340: LD_INT 2100
10342: PPUSH
10343: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10347: LD_STRING displayTroll();
10349: PPUSH
10350: CALL_OW 559
// wait ( 1 1$00 ) ;
10354: LD_INT 2100
10356: PPUSH
10357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10361: LD_STRING hideTroll();
10363: PPUSH
10364: CALL_OW 559
// end ;
10368: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10369: LD_EXP 8
10373: PUSH
10374: LD_EXP 34
10378: AND
10379: IFFALSE 10442
10381: GO 10383
10383: DISABLE
10384: LD_INT 0
10386: PPUSH
// begin p := 0 ;
10387: LD_ADDR_VAR 0 1
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
// repeat game_speed := 1 ;
10395: LD_ADDR_OWVAR 65
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10403: LD_INT 35
10405: PPUSH
10406: CALL_OW 67
// p := p + 1 ;
10410: LD_ADDR_VAR 0 1
10414: PUSH
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 1
10422: PLUS
10423: ST_TO_ADDR
// until p >= 60 ;
10424: LD_VAR 0 1
10428: PUSH
10429: LD_INT 60
10431: GREATEREQUAL
10432: IFFALSE 10395
// game_speed := 4 ;
10434: LD_ADDR_OWVAR 65
10438: PUSH
10439: LD_INT 4
10441: ST_TO_ADDR
// end ;
10442: PPOPN 1
10444: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10445: LD_EXP 8
10449: PUSH
10450: LD_EXP 35
10454: AND
10455: IFFALSE 10601
10457: GO 10459
10459: DISABLE
10460: LD_INT 0
10462: PPUSH
10463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_OWVAR 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: LD_INT 30
10486: PUSH
10487: LD_INT 0
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 69
10517: ST_TO_ADDR
// if not depot then
10518: LD_VAR 0 1
10522: NOT
10523: IFFALSE 10527
// exit ;
10525: GO 10601
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10527: LD_ADDR_VAR 0 2
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: LD_INT 1
10539: PPUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL_OW 12
10549: ARRAY
10550: PPUSH
10551: CALL_OW 274
10555: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10556: LD_VAR 0 2
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: LD_INT 0
10566: PPUSH
10567: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10571: LD_VAR 0 2
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: LD_INT 3
10593: PPUSH
10594: LD_INT 0
10596: PPUSH
10597: CALL_OW 277
// end ;
10601: PPOPN 2
10603: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10604: LD_EXP 8
10608: PUSH
10609: LD_EXP 36
10613: AND
10614: IFFALSE 10711
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10622: LD_ADDR_VAR 0 1
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_OWVAR 2
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 21
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 3
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: PPUSH
10671: CALL_OW 69
10675: ST_TO_ADDR
// if not tmp then
10676: LD_VAR 0 1
10680: NOT
10681: IFFALSE 10685
// exit ;
10683: GO 10711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10685: LD_VAR 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_VAR 0 1
10697: PPUSH
10698: CALL_OW 12
10702: ARRAY
10703: PPUSH
10704: LD_INT 200
10706: PPUSH
10707: CALL_OW 234
// end ;
10711: PPOPN 1
10713: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10714: LD_EXP 8
10718: PUSH
10719: LD_EXP 37
10723: AND
10724: IFFALSE 10803
10726: GO 10728
10728: DISABLE
10729: LD_INT 0
10731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_OWVAR 2
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 21
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PPUSH
10763: CALL_OW 69
10767: ST_TO_ADDR
// if not tmp then
10768: LD_VAR 0 1
10772: NOT
10773: IFFALSE 10777
// exit ;
10775: GO 10803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10777: LD_VAR 0 1
10781: PUSH
10782: LD_INT 1
10784: PPUSH
10785: LD_VAR 0 1
10789: PPUSH
10790: CALL_OW 12
10794: ARRAY
10795: PPUSH
10796: LD_INT 60
10798: PPUSH
10799: CALL_OW 234
// end ;
10803: PPOPN 1
10805: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10806: LD_EXP 8
10810: PUSH
10811: LD_EXP 38
10815: AND
10816: IFFALSE 10915
10818: GO 10820
10820: DISABLE
10821: LD_INT 0
10823: PPUSH
10824: PPUSH
// begin enable ;
10825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10826: LD_ADDR_VAR 0 1
10830: PUSH
10831: LD_INT 22
10833: PUSH
10834: LD_OWVAR 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 61
10845: PUSH
10846: EMPTY
10847: LIST
10848: PUSH
10849: LD_INT 33
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: ST_TO_ADDR
// if not tmp then
10869: LD_VAR 0 1
10873: NOT
10874: IFFALSE 10878
// exit ;
10876: GO 10915
// for i in tmp do
10878: LD_ADDR_VAR 0 2
10882: PUSH
10883: LD_VAR 0 1
10887: PUSH
10888: FOR_IN
10889: IFFALSE 10913
// if IsControledBy ( i ) then
10891: LD_VAR 0 2
10895: PPUSH
10896: CALL_OW 312
10900: IFFALSE 10911
// ComUnlink ( i ) ;
10902: LD_VAR 0 2
10906: PPUSH
10907: CALL_OW 136
10911: GO 10888
10913: POP
10914: POP
// end ;
10915: PPOPN 2
10917: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10918: LD_EXP 8
10922: PUSH
10923: LD_EXP 39
10927: AND
10928: IFFALSE 11068
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
// begin ToLua ( displayPowell(); ) ;
10937: LD_STRING displayPowell();
10939: PPUSH
10940: CALL_OW 559
// uc_side := 0 ;
10944: LD_ADDR_OWVAR 20
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// uc_nation := 2 ;
10952: LD_ADDR_OWVAR 21
10956: PUSH
10957: LD_INT 2
10959: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10960: LD_ADDR_OWVAR 37
10964: PUSH
10965: LD_INT 14
10967: ST_TO_ADDR
// vc_engine := engine_siberite ;
10968: LD_ADDR_OWVAR 39
10972: PUSH
10973: LD_INT 3
10975: ST_TO_ADDR
// vc_control := control_apeman ;
10976: LD_ADDR_OWVAR 38
10980: PUSH
10981: LD_INT 5
10983: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10984: LD_ADDR_OWVAR 40
10988: PUSH
10989: LD_INT 29
10991: ST_TO_ADDR
// un := CreateVehicle ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: CALL_OW 45
11001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11014: LD_INT 35
11016: PPUSH
11017: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11021: LD_VAR 0 2
11025: PPUSH
11026: LD_INT 22
11028: PUSH
11029: LD_OWVAR 2
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 69
11042: PPUSH
11043: LD_VAR 0 2
11047: PPUSH
11048: CALL_OW 74
11052: PPUSH
11053: CALL_OW 115
// until IsDead ( un ) ;
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 301
11066: IFFALSE 11014
// end ;
11068: PPOPN 2
11070: END
// every 0 0$1 trigger StreamModeActive and sStu do
11071: LD_EXP 8
11075: PUSH
11076: LD_EXP 47
11080: AND
11081: IFFALSE 11097
11083: GO 11085
11085: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11086: LD_STRING displayStucuk();
11088: PPUSH
11089: CALL_OW 559
// ResetFog ;
11093: CALL_OW 335
// end ;
11097: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11098: LD_EXP 8
11102: PUSH
11103: LD_EXP 40
11107: AND
11108: IFFALSE 11249
11110: GO 11112
11112: DISABLE
11113: LD_INT 0
11115: PPUSH
11116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_OWVAR 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 21
11136: PUSH
11137: LD_INT 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 69
11152: ST_TO_ADDR
// if not tmp then
11153: LD_VAR 0 2
11157: NOT
11158: IFFALSE 11162
// exit ;
11160: GO 11249
// un := tmp [ rand ( 1 , tmp ) ] ;
11162: LD_ADDR_VAR 0 1
11166: PUSH
11167: LD_VAR 0 2
11171: PUSH
11172: LD_INT 1
11174: PPUSH
11175: LD_VAR 0 2
11179: PPUSH
11180: CALL_OW 12
11184: ARRAY
11185: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11186: LD_VAR 0 1
11190: PPUSH
11191: LD_INT 0
11193: PPUSH
11194: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11198: LD_VAR 0 1
11202: PPUSH
11203: LD_OWVAR 3
11207: PUSH
11208: LD_VAR 0 1
11212: DIFF
11213: PPUSH
11214: LD_VAR 0 1
11218: PPUSH
11219: CALL_OW 74
11223: PPUSH
11224: CALL_OW 115
// wait ( 0 0$20 ) ;
11228: LD_INT 700
11230: PPUSH
11231: CALL_OW 67
// SetSide ( un , your_side ) ;
11235: LD_VAR 0 1
11239: PPUSH
11240: LD_OWVAR 2
11244: PPUSH
11245: CALL_OW 235
// end ;
11249: PPOPN 2
11251: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11252: LD_EXP 8
11256: PUSH
11257: LD_EXP 41
11261: AND
11262: IFFALSE 11368
11264: GO 11266
11266: DISABLE
11267: LD_INT 0
11269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11270: LD_ADDR_VAR 0 1
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_OWVAR 2
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 0
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 30
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 69
11323: ST_TO_ADDR
// if not depot then
11324: LD_VAR 0 1
11328: NOT
11329: IFFALSE 11333
// exit ;
11331: GO 11368
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11333: LD_VAR 0 1
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PPUSH
11342: CALL_OW 250
11346: PPUSH
11347: LD_VAR 0 1
11351: PUSH
11352: LD_INT 1
11354: ARRAY
11355: PPUSH
11356: CALL_OW 251
11360: PPUSH
11361: LD_INT 70
11363: PPUSH
11364: CALL_OW 495
// end ;
11368: PPOPN 1
11370: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11371: LD_EXP 8
11375: PUSH
11376: LD_EXP 42
11380: AND
11381: IFFALSE 11592
11383: GO 11385
11385: DISABLE
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_INT 22
11400: PUSH
11401: LD_OWVAR 2
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 21
11412: PUSH
11413: LD_INT 1
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if not tmp then
11429: LD_VAR 0 5
11433: NOT
11434: IFFALSE 11438
// exit ;
11436: GO 11592
// for i in tmp do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: LD_VAR 0 5
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11590
// begin d := rand ( 0 , 5 ) ;
11451: LD_ADDR_VAR 0 4
11455: PUSH
11456: LD_INT 0
11458: PPUSH
11459: LD_INT 5
11461: PPUSH
11462: CALL_OW 12
11466: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11467: LD_ADDR_VAR 0 2
11471: PUSH
11472: LD_VAR 0 1
11476: PPUSH
11477: CALL_OW 250
11481: PPUSH
11482: LD_VAR 0 4
11486: PPUSH
11487: LD_INT 3
11489: PPUSH
11490: LD_INT 12
11492: PPUSH
11493: CALL_OW 12
11497: PPUSH
11498: CALL_OW 272
11502: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 251
11517: PPUSH
11518: LD_VAR 0 4
11522: PPUSH
11523: LD_INT 3
11525: PPUSH
11526: LD_INT 12
11528: PPUSH
11529: CALL_OW 12
11533: PPUSH
11534: CALL_OW 273
11538: ST_TO_ADDR
// if ValidHex ( x , y ) then
11539: LD_VAR 0 2
11543: PPUSH
11544: LD_VAR 0 3
11548: PPUSH
11549: CALL_OW 488
11553: IFFALSE 11588
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_VAR 0 2
11564: PPUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 3
11572: PPUSH
11573: LD_INT 6
11575: PPUSH
11576: CALL_OW 12
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 483
// end ;
11588: GO 11448
11590: POP
11591: POP
// end ;
11592: PPOPN 5
11594: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11595: LD_EXP 8
11599: PUSH
11600: LD_EXP 43
11604: AND
11605: IFFALSE 11699
11607: GO 11609
11609: DISABLE
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11614: LD_ADDR_VAR 0 2
11618: PUSH
11619: LD_INT 22
11621: PUSH
11622: LD_OWVAR 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 32
11633: PUSH
11634: LD_INT 1
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 21
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 69
11660: ST_TO_ADDR
// if not tmp then
11661: LD_VAR 0 2
11665: NOT
11666: IFFALSE 11670
// exit ;
11668: GO 11699
// for i in tmp do
11670: LD_ADDR_VAR 0 1
11674: PUSH
11675: LD_VAR 0 2
11679: PUSH
11680: FOR_IN
11681: IFFALSE 11697
// SetFuel ( i , 0 ) ;
11683: LD_VAR 0 1
11687: PPUSH
11688: LD_INT 0
11690: PPUSH
11691: CALL_OW 240
11695: GO 11680
11697: POP
11698: POP
// end ;
11699: PPOPN 2
11701: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11702: LD_EXP 8
11706: PUSH
11707: LD_EXP 44
11711: AND
11712: IFFALSE 11778
11714: GO 11716
11716: DISABLE
11717: LD_INT 0
11719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11720: LD_ADDR_VAR 0 1
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_OWVAR 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 30
11739: PUSH
11740: LD_INT 29
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: ST_TO_ADDR
// if not tmp then
11756: LD_VAR 0 1
11760: NOT
11761: IFFALSE 11765
// exit ;
11763: GO 11778
// DestroyUnit ( tmp [ 1 ] ) ;
11765: LD_VAR 0 1
11769: PUSH
11770: LD_INT 1
11772: ARRAY
11773: PPUSH
11774: CALL_OW 65
// end ;
11778: PPOPN 1
11780: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11781: LD_EXP 8
11785: PUSH
11786: LD_EXP 46
11790: AND
11791: IFFALSE 11920
11793: GO 11795
11795: DISABLE
11796: LD_INT 0
11798: PPUSH
// begin uc_side := 0 ;
11799: LD_ADDR_OWVAR 20
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// uc_nation := nation_arabian ;
11807: LD_ADDR_OWVAR 21
11811: PUSH
11812: LD_INT 2
11814: ST_TO_ADDR
// hc_gallery :=  ;
11815: LD_ADDR_OWVAR 33
11819: PUSH
11820: LD_STRING 
11822: ST_TO_ADDR
// hc_name :=  ;
11823: LD_ADDR_OWVAR 26
11827: PUSH
11828: LD_STRING 
11830: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 11
11836: PPUSH
11837: LD_INT 10
11839: PPUSH
11840: CALL_OW 380
// un := CreateHuman ;
11844: LD_ADDR_VAR 0 1
11848: PUSH
11849: CALL_OW 44
11853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11854: LD_VAR 0 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11866: LD_INT 35
11868: PPUSH
11869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 22
11880: PUSH
11881: LD_OWVAR 2
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PPUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 74
11904: PPUSH
11905: CALL_OW 115
// until IsDead ( un ) ;
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 301
11918: IFFALSE 11866
// end ;
11920: PPOPN 1
11922: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11923: LD_EXP 8
11927: PUSH
11928: LD_EXP 48
11932: AND
11933: IFFALSE 11945
11935: GO 11937
11937: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11938: LD_STRING earthquake(getX(game), 0, 32)
11940: PPUSH
11941: CALL_OW 559
11945: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11946: LD_EXP 8
11950: PUSH
11951: LD_EXP 49
11955: AND
11956: IFFALSE 12047
11958: GO 11960
11960: DISABLE
11961: LD_INT 0
11963: PPUSH
// begin enable ;
11964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: LD_OWVAR 2
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 21
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 33
11994: PUSH
11995: LD_INT 3
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: ST_TO_ADDR
// if not tmp then
12012: LD_VAR 0 1
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12021: LD_VAR 0 1
12025: PUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_VAR 0 1
12033: PPUSH
12034: CALL_OW 12
12038: ARRAY
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 234
// end ;
12047: PPOPN 1
12049: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12050: LD_EXP 8
12054: PUSH
12055: LD_EXP 50
12059: AND
12060: IFFALSE 12201
12062: GO 12064
12064: DISABLE
12065: LD_INT 0
12067: PPUSH
12068: PPUSH
12069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12070: LD_ADDR_VAR 0 3
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_OWVAR 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 25
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PPUSH
12101: CALL_OW 69
12105: ST_TO_ADDR
// if not tmp then
12106: LD_VAR 0 3
12110: NOT
12111: IFFALSE 12115
// exit ;
12113: GO 12201
// un := tmp [ rand ( 1 , tmp ) ] ;
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_VAR 0 3
12132: PPUSH
12133: CALL_OW 12
12137: ARRAY
12138: ST_TO_ADDR
// if Crawls ( un ) then
12139: LD_VAR 0 2
12143: PPUSH
12144: CALL_OW 318
12148: IFFALSE 12159
// ComWalk ( un ) ;
12150: LD_VAR 0 2
12154: PPUSH
12155: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12159: LD_VAR 0 2
12163: PPUSH
12164: LD_INT 9
12166: PPUSH
12167: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12171: LD_INT 28
12173: PPUSH
12174: LD_OWVAR 2
12178: PPUSH
12179: LD_INT 2
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12186: LD_INT 29
12188: PPUSH
12189: LD_OWVAR 2
12193: PPUSH
12194: LD_INT 2
12196: PPUSH
12197: CALL_OW 322
// end ;
12201: PPOPN 3
12203: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12204: LD_EXP 8
12208: PUSH
12209: LD_EXP 51
12213: AND
12214: IFFALSE 12325
12216: GO 12218
12218: DISABLE
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12224: LD_ADDR_VAR 0 3
12228: PUSH
12229: LD_INT 22
12231: PUSH
12232: LD_OWVAR 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// if not tmp then
12260: LD_VAR 0 3
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 12325
// un := tmp [ rand ( 1 , tmp ) ] ;
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 1
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: CALL_OW 12
12291: ARRAY
12292: ST_TO_ADDR
// if Crawls ( un ) then
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 318
12302: IFFALSE 12313
// ComWalk ( un ) ;
12304: LD_VAR 0 2
12308: PPUSH
12309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12313: LD_VAR 0 2
12317: PPUSH
12318: LD_INT 8
12320: PPUSH
12321: CALL_OW 336
// end ;
12325: PPOPN 3
12327: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12328: LD_EXP 8
12332: PUSH
12333: LD_EXP 52
12337: AND
12338: IFFALSE 12482
12340: GO 12342
12342: DISABLE
12343: LD_INT 0
12345: PPUSH
12346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12347: LD_ADDR_VAR 0 2
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_OWVAR 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: LD_INT 34
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 34
12389: PUSH
12390: LD_INT 51
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 34
12399: PUSH
12400: LD_INT 32
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: PPUSH
12418: CALL_OW 69
12422: ST_TO_ADDR
// if not tmp then
12423: LD_VAR 0 2
12427: NOT
12428: IFFALSE 12432
// exit ;
12430: GO 12482
// for i in tmp do
12432: LD_ADDR_VAR 0 1
12436: PUSH
12437: LD_VAR 0 2
12441: PUSH
12442: FOR_IN
12443: IFFALSE 12480
// if GetCargo ( i , mat_artifact ) = 0 then
12445: LD_VAR 0 1
12449: PPUSH
12450: LD_INT 4
12452: PPUSH
12453: CALL_OW 289
12457: PUSH
12458: LD_INT 0
12460: EQUAL
12461: IFFALSE 12478
// SetCargo ( i , mat_siberit , 100 ) ;
12463: LD_VAR 0 1
12467: PPUSH
12468: LD_INT 3
12470: PPUSH
12471: LD_INT 100
12473: PPUSH
12474: CALL_OW 290
12478: GO 12442
12480: POP
12481: POP
// end ;
12482: PPOPN 2
12484: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12485: LD_EXP 8
12489: PUSH
12490: LD_EXP 53
12494: AND
12495: IFFALSE 12678
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12504: LD_ADDR_VAR 0 2
12508: PUSH
12509: LD_INT 22
12511: PUSH
12512: LD_OWVAR 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 69
12525: ST_TO_ADDR
// if not tmp then
12526: LD_VAR 0 2
12530: NOT
12531: IFFALSE 12535
// exit ;
12533: GO 12678
// for i := 1 to 2 do
12535: LD_ADDR_VAR 0 1
12539: PUSH
12540: DOUBLE
12541: LD_INT 1
12543: DEC
12544: ST_TO_ADDR
12545: LD_INT 2
12547: PUSH
12548: FOR_TO
12549: IFFALSE 12676
// begin uc_side := your_side ;
12551: LD_ADDR_OWVAR 20
12555: PUSH
12556: LD_OWVAR 2
12560: ST_TO_ADDR
// uc_nation := nation_american ;
12561: LD_ADDR_OWVAR 21
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// vc_chassis := us_morphling ;
12569: LD_ADDR_OWVAR 37
12573: PUSH
12574: LD_INT 5
12576: ST_TO_ADDR
// vc_engine := engine_siberite ;
12577: LD_ADDR_OWVAR 39
12581: PUSH
12582: LD_INT 3
12584: ST_TO_ADDR
// vc_control := control_computer ;
12585: LD_ADDR_OWVAR 38
12589: PUSH
12590: LD_INT 3
12592: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12593: LD_ADDR_OWVAR 40
12597: PUSH
12598: LD_INT 10
12600: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12601: LD_VAR 0 2
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 310
12614: NOT
12615: IFFALSE 12662
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12617: CALL_OW 45
12621: PPUSH
12622: LD_VAR 0 2
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: CALL_OW 250
12635: PPUSH
12636: LD_VAR 0 2
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PPUSH
12645: CALL_OW 251
12649: PPUSH
12650: LD_INT 12
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 50
12660: GO 12674
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12662: CALL_OW 45
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 51
// end ;
12674: GO 12548
12676: POP
12677: POP
// end ;
12678: PPOPN 2
12680: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12681: LD_EXP 8
12685: PUSH
12686: LD_EXP 54
12690: AND
12691: IFFALSE 12913
12693: GO 12695
12695: DISABLE
12696: LD_INT 0
12698: PPUSH
12699: PPUSH
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12704: LD_ADDR_VAR 0 6
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_OWVAR 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 1
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 3
12733: PUSH
12734: LD_INT 23
12736: PUSH
12737: LD_INT 0
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 69
12757: ST_TO_ADDR
// if not tmp then
12758: LD_VAR 0 6
12762: NOT
12763: IFFALSE 12767
// exit ;
12765: GO 12913
// s1 := rand ( 1 , 4 ) ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 1
12774: PPUSH
12775: LD_INT 4
12777: PPUSH
12778: CALL_OW 12
12782: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12783: LD_ADDR_VAR 0 4
12787: PUSH
12788: LD_VAR 0 6
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PPUSH
12797: LD_VAR 0 2
12801: PPUSH
12802: CALL_OW 259
12806: ST_TO_ADDR
// if s1 = 1 then
12807: LD_VAR 0 2
12811: PUSH
12812: LD_INT 1
12814: EQUAL
12815: IFFALSE 12835
// s2 := rand ( 2 , 4 ) else
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: LD_INT 2
12824: PPUSH
12825: LD_INT 4
12827: PPUSH
12828: CALL_OW 12
12832: ST_TO_ADDR
12833: GO 12843
// s2 := 1 ;
12835: LD_ADDR_VAR 0 3
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_VAR 0 6
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 259
12866: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12867: LD_VAR 0 6
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 2
12880: PPUSH
12881: LD_VAR 0 5
12885: PPUSH
12886: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12890: LD_VAR 0 6
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_VAR 0 4
12908: PPUSH
12909: CALL_OW 237
// end ;
12913: PPOPN 6
12915: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12916: LD_EXP 8
12920: PUSH
12921: LD_EXP 55
12925: AND
12926: IFFALSE 13005
12928: GO 12930
12930: DISABLE
12931: LD_INT 0
12933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_OWVAR 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: ST_TO_ADDR
// if not tmp then
12970: LD_VAR 0 1
12974: NOT
12975: IFFALSE 12979
// exit ;
12977: GO 13005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: PPUSH
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 12
12996: ARRAY
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 234
// end ;
13005: PPOPN 1
13007: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13008: LD_EXP 8
13012: PUSH
13013: LD_EXP 56
13017: AND
13018: IFFALSE 13130
13020: GO 13022
13022: DISABLE
13023: LD_INT 0
13025: PPUSH
13026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_OWVAR 2
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 27
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 26
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 28
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PPUSH
13087: CALL_OW 69
13091: ST_TO_ADDR
// if not tmp then
13092: LD_VAR 0 2
13096: NOT
13097: IFFALSE 13101
// exit ;
13099: GO 13130
// for i in tmp do
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_VAR 0 2
13110: PUSH
13111: FOR_IN
13112: IFFALSE 13128
// SetLives ( i , 1 ) ;
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 234
13126: GO 13111
13128: POP
13129: POP
// end ;
13130: PPOPN 2
13132: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13133: LD_EXP 8
13137: PUSH
13138: LD_EXP 57
13142: AND
13143: IFFALSE 13430
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
13151: PPUSH
13152: PPUSH
// begin i := rand ( 1 , 7 ) ;
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_INT 1
13160: PPUSH
13161: LD_INT 7
13163: PPUSH
13164: CALL_OW 12
13168: ST_TO_ADDR
// case i of 1 :
13169: LD_VAR 0 1
13173: PUSH
13174: LD_INT 1
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13192
13182: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13183: LD_STRING earthquake(getX(game), 0, 32)
13185: PPUSH
13186: CALL_OW 559
13190: GO 13430
13192: LD_INT 2
13194: DOUBLE
13195: EQUAL
13196: IFTRUE 13200
13198: GO 13214
13200: POP
// begin ToLua ( displayStucuk(); ) ;
13201: LD_STRING displayStucuk();
13203: PPUSH
13204: CALL_OW 559
// ResetFog ;
13208: CALL_OW 335
// end ; 3 :
13212: GO 13430
13214: LD_INT 3
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13326
13222: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13223: LD_ADDR_VAR 0 2
13227: PUSH
13228: LD_INT 22
13230: PUSH
13231: LD_OWVAR 2
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 25
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 69
13258: ST_TO_ADDR
// if not tmp then
13259: LD_VAR 0 2
13263: NOT
13264: IFFALSE 13268
// exit ;
13266: GO 13430
// un := tmp [ rand ( 1 , tmp ) ] ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_VAR 0 2
13277: PUSH
13278: LD_INT 1
13280: PPUSH
13281: LD_VAR 0 2
13285: PPUSH
13286: CALL_OW 12
13290: ARRAY
13291: ST_TO_ADDR
// if Crawls ( un ) then
13292: LD_VAR 0 3
13296: PPUSH
13297: CALL_OW 318
13301: IFFALSE 13312
// ComWalk ( un ) ;
13303: LD_VAR 0 3
13307: PPUSH
13308: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 8
13319: PPUSH
13320: CALL_OW 336
// end ; 4 :
13324: GO 13430
13326: LD_INT 4
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13408
13334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_INT 22
13342: PUSH
13343: LD_OWVAR 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 30
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: ST_TO_ADDR
// if not tmp then
13371: LD_VAR 0 2
13375: NOT
13376: IFFALSE 13380
// exit ;
13378: GO 13430
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13393: LD_VAR 0 2
13397: PUSH
13398: LD_INT 1
13400: ARRAY
13401: PPUSH
13402: CALL_OW 65
// end ; 5 .. 7 :
13406: GO 13430
13408: LD_INT 5
13410: DOUBLE
13411: GREATEREQUAL
13412: IFFALSE 13420
13414: LD_INT 7
13416: DOUBLE
13417: LESSEQUAL
13418: IFTRUE 13422
13420: GO 13429
13422: POP
// StreamSibBomb ; end ;
13423: CALL 9667 0 0
13427: GO 13430
13429: POP
// end ;
13430: PPOPN 3
13432: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13433: LD_EXP 8
13437: PUSH
13438: LD_EXP 58
13442: AND
13443: IFFALSE 13599
13445: GO 13447
13447: DISABLE
13448: LD_INT 0
13450: PPUSH
13451: PPUSH
13452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 81
13460: PUSH
13461: LD_OWVAR 2
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 2
13472: PUSH
13473: LD_INT 21
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: ST_TO_ADDR
// if not tmp then
13507: LD_VAR 0 2
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13599
// p := 0 ;
13516: LD_ADDR_VAR 0 3
13520: PUSH
13521: LD_INT 0
13523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13524: LD_INT 35
13526: PPUSH
13527: CALL_OW 67
// p := p + 1 ;
13531: LD_ADDR_VAR 0 3
13535: PUSH
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 1
13543: PLUS
13544: ST_TO_ADDR
// for i in tmp do
13545: LD_ADDR_VAR 0 1
13549: PUSH
13550: LD_VAR 0 2
13554: PUSH
13555: FOR_IN
13556: IFFALSE 13587
// if GetLives ( i ) < 1000 then
13558: LD_VAR 0 1
13562: PPUSH
13563: CALL_OW 256
13567: PUSH
13568: LD_INT 1000
13570: LESS
13571: IFFALSE 13585
// SetLives ( i , 1000 ) ;
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_INT 1000
13580: PPUSH
13581: CALL_OW 234
13585: GO 13555
13587: POP
13588: POP
// until p > 20 ;
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 20
13596: GREATER
13597: IFFALSE 13524
// end ;
13599: PPOPN 3
13601: END
// every 0 0$1 trigger StreamModeActive and sTime do
13602: LD_EXP 8
13606: PUSH
13607: LD_EXP 59
13611: AND
13612: IFFALSE 13647
13614: GO 13616
13616: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13617: LD_INT 28
13619: PPUSH
13620: LD_OWVAR 2
13624: PPUSH
13625: LD_INT 2
13627: PPUSH
13628: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13632: LD_INT 30
13634: PPUSH
13635: LD_OWVAR 2
13639: PPUSH
13640: LD_INT 2
13642: PPUSH
13643: CALL_OW 322
// end ;
13647: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13648: LD_EXP 8
13652: PUSH
13653: LD_EXP 60
13657: AND
13658: IFFALSE 13779
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13667: LD_ADDR_VAR 0 2
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_OWVAR 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: LD_INT 23
13699: PUSH
13700: LD_INT 0
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if not tmp then
13721: LD_VAR 0 2
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13779
// for i in tmp do
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13777
// begin if Crawls ( i ) then
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 318
13752: IFFALSE 13763
// ComWalk ( i ) ;
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 138
// SetClass ( i , 2 ) ;
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: CALL_OW 336
// end ;
13775: GO 13740
13777: POP
13778: POP
// end ;
13779: PPOPN 2
13781: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13782: LD_EXP 8
13786: PUSH
13787: LD_EXP 61
13791: AND
13792: IFFALSE 14080
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13802: LD_OWVAR 2
13806: PPUSH
13807: LD_INT 9
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13820: LD_INT 9
13822: PPUSH
13823: LD_OWVAR 2
13827: PPUSH
13828: CALL_OW 343
// uc_side := 9 ;
13832: LD_ADDR_OWVAR 20
13836: PUSH
13837: LD_INT 9
13839: ST_TO_ADDR
// uc_nation := 2 ;
13840: LD_ADDR_OWVAR 21
13844: PUSH
13845: LD_INT 2
13847: ST_TO_ADDR
// hc_name := Dark Warrior ;
13848: LD_ADDR_OWVAR 26
13852: PUSH
13853: LD_STRING Dark Warrior
13855: ST_TO_ADDR
// hc_gallery :=  ;
13856: LD_ADDR_OWVAR 33
13860: PUSH
13861: LD_STRING 
13863: ST_TO_ADDR
// hc_noskilllimit := true ;
13864: LD_ADDR_OWVAR 76
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13872: LD_ADDR_OWVAR 31
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: ST_TO_ADDR
// un := CreateHuman ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: CALL_OW 44
13904: ST_TO_ADDR
// hc_noskilllimit := false ;
13905: LD_ADDR_OWVAR 76
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13913: LD_VAR 0 3
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 51
// ToLua ( playRanger() ) ;
13925: LD_STRING playRanger()
13927: PPUSH
13928: CALL_OW 559
// p := 0 ;
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 0
13939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13940: LD_INT 35
13942: PPUSH
13943: CALL_OW 67
// p := p + 1 ;
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_VAR 0 2
13956: PUSH
13957: LD_INT 1
13959: PLUS
13960: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13961: LD_VAR 0 3
13965: PPUSH
13966: CALL_OW 256
13970: PUSH
13971: LD_INT 1000
13973: LESS
13974: IFFALSE 13988
// SetLives ( un , 1000 ) ;
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 1000
13983: PPUSH
13984: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13988: LD_VAR 0 3
13992: PPUSH
13993: LD_INT 81
13995: PUSH
13996: LD_OWVAR 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 91
14007: PUSH
14008: LD_VAR 0 3
14012: PUSH
14013: LD_INT 30
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: CALL_OW 74
14039: PPUSH
14040: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14044: LD_VAR 0 2
14048: PUSH
14049: LD_INT 80
14051: GREATER
14052: PUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: CALL_OW 301
14062: OR
14063: IFFALSE 13940
// if un then
14065: LD_VAR 0 3
14069: IFFALSE 14080
// RemoveUnit ( un ) ;
14071: LD_VAR 0 3
14075: PPUSH
14076: CALL_OW 64
// end ;
14080: PPOPN 3
14082: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14083: LD_EXP 62
14087: IFFALSE 14203
14089: GO 14091
14091: DISABLE
14092: LD_INT 0
14094: PPUSH
14095: PPUSH
14096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14097: LD_ADDR_VAR 0 2
14101: PUSH
14102: LD_INT 81
14104: PUSH
14105: LD_OWVAR 2
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 69
14132: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14133: LD_STRING playComputer()
14135: PPUSH
14136: CALL_OW 559
// if not tmp then
14140: LD_VAR 0 2
14144: NOT
14145: IFFALSE 14149
// exit ;
14147: GO 14203
// for i in tmp do
14149: LD_ADDR_VAR 0 1
14153: PUSH
14154: LD_VAR 0 2
14158: PUSH
14159: FOR_IN
14160: IFFALSE 14201
// for j := 1 to 4 do
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: DOUBLE
14168: LD_INT 1
14170: DEC
14171: ST_TO_ADDR
14172: LD_INT 4
14174: PUSH
14175: FOR_TO
14176: IFFALSE 14197
// SetSkill ( i , j , 10 ) ;
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 10
14190: PPUSH
14191: CALL_OW 237
14195: GO 14175
14197: POP
14198: POP
14199: GO 14159
14201: POP
14202: POP
// end ;
14203: PPOPN 3
14205: END
// every 0 0$1 trigger s30 do var i , tmp ;
14206: LD_EXP 63
14210: IFFALSE 14279
14212: GO 14214
14214: DISABLE
14215: LD_INT 0
14217: PPUSH
14218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14219: LD_ADDR_VAR 0 2
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: ST_TO_ADDR
// if not tmp then
14241: LD_VAR 0 2
14245: NOT
14246: IFFALSE 14250
// exit ;
14248: GO 14279
// for i in tmp do
14250: LD_ADDR_VAR 0 1
14254: PUSH
14255: LD_VAR 0 2
14259: PUSH
14260: FOR_IN
14261: IFFALSE 14277
// SetLives ( i , 300 ) ;
14263: LD_VAR 0 1
14267: PPUSH
14268: LD_INT 300
14270: PPUSH
14271: CALL_OW 234
14275: GO 14260
14277: POP
14278: POP
// end ;
14279: PPOPN 2
14281: END
// every 0 0$1 trigger s60 do var i , tmp ;
14282: LD_EXP 64
14286: IFFALSE 14355
14288: GO 14290
14290: DISABLE
14291: LD_INT 0
14293: PPUSH
14294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14295: LD_ADDR_VAR 0 2
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_OWVAR 2
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: ST_TO_ADDR
// if not tmp then
14317: LD_VAR 0 2
14321: NOT
14322: IFFALSE 14326
// exit ;
14324: GO 14355
// for i in tmp do
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_VAR 0 2
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14353
// SetLives ( i , 600 ) ;
14339: LD_VAR 0 1
14343: PPUSH
14344: LD_INT 600
14346: PPUSH
14347: CALL_OW 234
14351: GO 14336
14353: POP
14354: POP
// end ;
14355: PPOPN 2
14357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14358: LD_INT 0
14360: PPUSH
// case cmd of 301 :
14361: LD_VAR 0 1
14365: PUSH
14366: LD_INT 301
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14406
14374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14375: LD_VAR 0 6
14379: PPUSH
14380: LD_VAR 0 7
14384: PPUSH
14385: LD_VAR 0 8
14389: PPUSH
14390: LD_VAR 0 4
14394: PPUSH
14395: LD_VAR 0 5
14399: PPUSH
14400: CALL 15615 0 5
14404: GO 14527
14406: LD_INT 302
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14451
14414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14415: LD_VAR 0 6
14419: PPUSH
14420: LD_VAR 0 7
14424: PPUSH
14425: LD_VAR 0 8
14429: PPUSH
14430: LD_VAR 0 9
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: LD_VAR 0 5
14444: PPUSH
14445: CALL 15706 0 6
14449: GO 14527
14451: LD_INT 303
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14496
14459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14460: LD_VAR 0 6
14464: PPUSH
14465: LD_VAR 0 7
14469: PPUSH
14470: LD_VAR 0 8
14474: PPUSH
14475: LD_VAR 0 9
14479: PPUSH
14480: LD_VAR 0 4
14484: PPUSH
14485: LD_VAR 0 5
14489: PPUSH
14490: CALL 14532 0 6
14494: GO 14527
14496: LD_INT 304
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14526
14504: POP
// hHackTeleport ( unit , x , y ) ; end ;
14505: LD_VAR 0 2
14509: PPUSH
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_VAR 0 5
14519: PPUSH
14520: CALL 16299 0 3
14524: GO 14527
14526: POP
// end ;
14527: LD_VAR 0 12
14531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14536: LD_VAR 0 1
14540: PUSH
14541: LD_INT 1
14543: LESS
14544: PUSH
14545: LD_VAR 0 1
14549: PUSH
14550: LD_INT 3
14552: GREATER
14553: OR
14554: PUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: LD_VAR 0 6
14564: PPUSH
14565: CALL_OW 428
14569: OR
14570: IFFALSE 14574
// exit ;
14572: GO 15302
// uc_side := your_side ;
14574: LD_ADDR_OWVAR 20
14578: PUSH
14579: LD_OWVAR 2
14583: ST_TO_ADDR
// uc_nation := nation ;
14584: LD_ADDR_OWVAR 21
14588: PUSH
14589: LD_VAR 0 1
14593: ST_TO_ADDR
// bc_level = 1 ;
14594: LD_ADDR_OWVAR 43
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// case btype of 1 :
14602: LD_VAR 0 2
14606: PUSH
14607: LD_INT 1
14609: DOUBLE
14610: EQUAL
14611: IFTRUE 14615
14613: GO 14626
14615: POP
// bc_type := b_depot ; 2 :
14616: LD_ADDR_OWVAR 42
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
14624: GO 15246
14626: LD_INT 2
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14645
14634: POP
// bc_type := b_warehouse ; 3 :
14635: LD_ADDR_OWVAR 42
14639: PUSH
14640: LD_INT 1
14642: ST_TO_ADDR
14643: GO 15246
14645: LD_INT 3
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14664
14653: POP
// bc_type := b_lab ; 4 .. 9 :
14654: LD_ADDR_OWVAR 42
14658: PUSH
14659: LD_INT 6
14661: ST_TO_ADDR
14662: GO 15246
14664: LD_INT 4
14666: DOUBLE
14667: GREATEREQUAL
14668: IFFALSE 14676
14670: LD_INT 9
14672: DOUBLE
14673: LESSEQUAL
14674: IFTRUE 14678
14676: GO 14738
14678: POP
// begin bc_type := b_lab_half ;
14679: LD_ADDR_OWVAR 42
14683: PUSH
14684: LD_INT 7
14686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14687: LD_ADDR_OWVAR 44
14691: PUSH
14692: LD_INT 10
14694: PUSH
14695: LD_INT 11
14697: PUSH
14698: LD_INT 12
14700: PUSH
14701: LD_INT 15
14703: PUSH
14704: LD_INT 14
14706: PUSH
14707: LD_INT 13
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 3
14725: MINUS
14726: ARRAY
14727: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14728: LD_ADDR_OWVAR 45
14732: PUSH
14733: LD_INT 9
14735: ST_TO_ADDR
// end ; 10 .. 13 :
14736: GO 15246
14738: LD_INT 10
14740: DOUBLE
14741: GREATEREQUAL
14742: IFFALSE 14750
14744: LD_INT 13
14746: DOUBLE
14747: LESSEQUAL
14748: IFTRUE 14752
14750: GO 14829
14752: POP
// begin bc_type := b_lab_full ;
14753: LD_ADDR_OWVAR 42
14757: PUSH
14758: LD_INT 8
14760: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14761: LD_ADDR_OWVAR 44
14765: PUSH
14766: LD_INT 10
14768: PUSH
14769: LD_INT 12
14771: PUSH
14772: LD_INT 14
14774: PUSH
14775: LD_INT 13
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: LD_VAR 0 2
14788: PUSH
14789: LD_INT 9
14791: MINUS
14792: ARRAY
14793: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14794: LD_ADDR_OWVAR 45
14798: PUSH
14799: LD_INT 11
14801: PUSH
14802: LD_INT 15
14804: PUSH
14805: LD_INT 12
14807: PUSH
14808: LD_INT 15
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 9
14824: MINUS
14825: ARRAY
14826: ST_TO_ADDR
// end ; 14 :
14827: GO 15246
14829: LD_INT 14
14831: DOUBLE
14832: EQUAL
14833: IFTRUE 14837
14835: GO 14848
14837: POP
// bc_type := b_workshop ; 15 :
14838: LD_ADDR_OWVAR 42
14842: PUSH
14843: LD_INT 2
14845: ST_TO_ADDR
14846: GO 15246
14848: LD_INT 15
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14856
14854: GO 14867
14856: POP
// bc_type := b_factory ; 16 :
14857: LD_ADDR_OWVAR 42
14861: PUSH
14862: LD_INT 3
14864: ST_TO_ADDR
14865: GO 15246
14867: LD_INT 16
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 14886
14875: POP
// bc_type := b_ext_gun ; 17 :
14876: LD_ADDR_OWVAR 42
14880: PUSH
14881: LD_INT 17
14883: ST_TO_ADDR
14884: GO 15246
14886: LD_INT 17
14888: DOUBLE
14889: EQUAL
14890: IFTRUE 14894
14892: GO 14922
14894: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14895: LD_ADDR_OWVAR 42
14899: PUSH
14900: LD_INT 19
14902: PUSH
14903: LD_INT 23
14905: PUSH
14906: LD_INT 19
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_VAR 0 1
14918: ARRAY
14919: ST_TO_ADDR
14920: GO 15246
14922: LD_INT 18
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14930
14928: GO 14941
14930: POP
// bc_type := b_ext_radar ; 19 :
14931: LD_ADDR_OWVAR 42
14935: PUSH
14936: LD_INT 20
14938: ST_TO_ADDR
14939: GO 15246
14941: LD_INT 19
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14949
14947: GO 14960
14949: POP
// bc_type := b_ext_radio ; 20 :
14950: LD_ADDR_OWVAR 42
14954: PUSH
14955: LD_INT 22
14957: ST_TO_ADDR
14958: GO 15246
14960: LD_INT 20
14962: DOUBLE
14963: EQUAL
14964: IFTRUE 14968
14966: GO 14979
14968: POP
// bc_type := b_ext_siberium ; 21 :
14969: LD_ADDR_OWVAR 42
14973: PUSH
14974: LD_INT 21
14976: ST_TO_ADDR
14977: GO 15246
14979: LD_INT 21
14981: DOUBLE
14982: EQUAL
14983: IFTRUE 14987
14985: GO 14998
14987: POP
// bc_type := b_ext_computer ; 22 :
14988: LD_ADDR_OWVAR 42
14992: PUSH
14993: LD_INT 24
14995: ST_TO_ADDR
14996: GO 15246
14998: LD_INT 22
15000: DOUBLE
15001: EQUAL
15002: IFTRUE 15006
15004: GO 15017
15006: POP
// bc_type := b_ext_track ; 23 :
15007: LD_ADDR_OWVAR 42
15011: PUSH
15012: LD_INT 16
15014: ST_TO_ADDR
15015: GO 15246
15017: LD_INT 23
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15036
15025: POP
// bc_type := b_ext_laser ; 24 :
15026: LD_ADDR_OWVAR 42
15030: PUSH
15031: LD_INT 25
15033: ST_TO_ADDR
15034: GO 15246
15036: LD_INT 24
15038: DOUBLE
15039: EQUAL
15040: IFTRUE 15044
15042: GO 15055
15044: POP
// bc_type := b_control_tower ; 25 :
15045: LD_ADDR_OWVAR 42
15049: PUSH
15050: LD_INT 36
15052: ST_TO_ADDR
15053: GO 15246
15055: LD_INT 25
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15074
15063: POP
// bc_type := b_breastwork ; 26 :
15064: LD_ADDR_OWVAR 42
15068: PUSH
15069: LD_INT 31
15071: ST_TO_ADDR
15072: GO 15246
15074: LD_INT 26
15076: DOUBLE
15077: EQUAL
15078: IFTRUE 15082
15080: GO 15093
15082: POP
// bc_type := b_bunker ; 27 :
15083: LD_ADDR_OWVAR 42
15087: PUSH
15088: LD_INT 32
15090: ST_TO_ADDR
15091: GO 15246
15093: LD_INT 27
15095: DOUBLE
15096: EQUAL
15097: IFTRUE 15101
15099: GO 15112
15101: POP
// bc_type := b_turret ; 28 :
15102: LD_ADDR_OWVAR 42
15106: PUSH
15107: LD_INT 33
15109: ST_TO_ADDR
15110: GO 15246
15112: LD_INT 28
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15131
15120: POP
// bc_type := b_armoury ; 29 :
15121: LD_ADDR_OWVAR 42
15125: PUSH
15126: LD_INT 4
15128: ST_TO_ADDR
15129: GO 15246
15131: LD_INT 29
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15150
15139: POP
// bc_type := b_barracks ; 30 :
15140: LD_ADDR_OWVAR 42
15144: PUSH
15145: LD_INT 5
15147: ST_TO_ADDR
15148: GO 15246
15150: LD_INT 30
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15169
15158: POP
// bc_type := b_solar_power ; 31 :
15159: LD_ADDR_OWVAR 42
15163: PUSH
15164: LD_INT 27
15166: ST_TO_ADDR
15167: GO 15246
15169: LD_INT 31
15171: DOUBLE
15172: EQUAL
15173: IFTRUE 15177
15175: GO 15188
15177: POP
// bc_type := b_oil_power ; 32 :
15178: LD_ADDR_OWVAR 42
15182: PUSH
15183: LD_INT 26
15185: ST_TO_ADDR
15186: GO 15246
15188: LD_INT 32
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15207
15196: POP
// bc_type := b_siberite_power ; 33 :
15197: LD_ADDR_OWVAR 42
15201: PUSH
15202: LD_INT 28
15204: ST_TO_ADDR
15205: GO 15246
15207: LD_INT 33
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15226
15215: POP
// bc_type := b_oil_mine ; 34 :
15216: LD_ADDR_OWVAR 42
15220: PUSH
15221: LD_INT 29
15223: ST_TO_ADDR
15224: GO 15246
15226: LD_INT 34
15228: DOUBLE
15229: EQUAL
15230: IFTRUE 15234
15232: GO 15245
15234: POP
// bc_type := b_siberite_mine ; end ;
15235: LD_ADDR_OWVAR 42
15239: PUSH
15240: LD_INT 30
15242: ST_TO_ADDR
15243: GO 15246
15245: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15246: LD_ADDR_VAR 0 8
15250: PUSH
15251: LD_VAR 0 5
15255: PPUSH
15256: LD_VAR 0 6
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: CALL_OW 47
15270: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15271: LD_OWVAR 42
15275: PUSH
15276: LD_INT 32
15278: PUSH
15279: LD_INT 33
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: IN
15286: IFFALSE 15302
// PlaceWeaponTurret ( b , weapon ) ;
15288: LD_VAR 0 8
15292: PPUSH
15293: LD_VAR 0 4
15297: PPUSH
15298: CALL_OW 431
// end ;
15302: LD_VAR 0 7
15306: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15307: LD_INT 0
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15313: LD_ADDR_VAR 0 4
15317: PUSH
15318: LD_INT 22
15320: PUSH
15321: LD_OWVAR 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: LD_INT 30
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 1
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 69
15366: ST_TO_ADDR
// if not tmp then
15367: LD_VAR 0 4
15371: NOT
15372: IFFALSE 15376
// exit ;
15374: GO 15435
// for i in tmp do
15376: LD_ADDR_VAR 0 2
15380: PUSH
15381: LD_VAR 0 4
15385: PUSH
15386: FOR_IN
15387: IFFALSE 15433
// for j = 1 to 3 do
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_INT 3
15401: PUSH
15402: FOR_TO
15403: IFFALSE 15429
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15405: LD_VAR 0 2
15409: PPUSH
15410: CALL_OW 274
15414: PPUSH
15415: LD_VAR 0 3
15419: PPUSH
15420: LD_INT 99999
15422: PPUSH
15423: CALL_OW 277
15427: GO 15402
15429: POP
15430: POP
15431: GO 15386
15433: POP
15434: POP
// end ;
15435: LD_VAR 0 1
15439: RET
// export function hHackSetLevel10 ; var i , j ; begin
15440: LD_INT 0
15442: PPUSH
15443: PPUSH
15444: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 69
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15518
// if IsSelected ( i ) then
15468: LD_VAR 0 2
15472: PPUSH
15473: CALL_OW 306
15477: IFFALSE 15516
// begin for j := 1 to 4 do
15479: LD_ADDR_VAR 0 3
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_INT 4
15491: PUSH
15492: FOR_TO
15493: IFFALSE 15514
// SetSkill ( i , j , 10 ) ;
15495: LD_VAR 0 2
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_INT 10
15507: PPUSH
15508: CALL_OW 237
15512: GO 15492
15514: POP
15515: POP
// end ;
15516: GO 15465
15518: POP
15519: POP
// end ;
15520: LD_VAR 0 1
15524: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15525: LD_INT 0
15527: PPUSH
15528: PPUSH
15529: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15530: LD_ADDR_VAR 0 2
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_OWVAR 2
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: PUSH
15566: FOR_IN
15567: IFFALSE 15608
// begin for j := 1 to 4 do
15569: LD_ADDR_VAR 0 3
15573: PUSH
15574: DOUBLE
15575: LD_INT 1
15577: DEC
15578: ST_TO_ADDR
15579: LD_INT 4
15581: PUSH
15582: FOR_TO
15583: IFFALSE 15604
// SetSkill ( i , j , 10 ) ;
15585: LD_VAR 0 2
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 10
15597: PPUSH
15598: CALL_OW 237
15602: GO 15582
15604: POP
15605: POP
// end ;
15606: GO 15566
15608: POP
15609: POP
// end ;
15610: LD_VAR 0 1
15614: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15615: LD_INT 0
15617: PPUSH
// uc_side := your_side ;
15618: LD_ADDR_OWVAR 20
15622: PUSH
15623: LD_OWVAR 2
15627: ST_TO_ADDR
// uc_nation := nation ;
15628: LD_ADDR_OWVAR 21
15632: PUSH
15633: LD_VAR 0 1
15637: ST_TO_ADDR
// InitHc ;
15638: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15642: LD_INT 0
15644: PPUSH
15645: LD_VAR 0 2
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15659: LD_VAR 0 4
15663: PPUSH
15664: LD_VAR 0 5
15668: PPUSH
15669: CALL_OW 428
15673: PUSH
15674: LD_INT 0
15676: EQUAL
15677: IFFALSE 15701
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15679: CALL_OW 44
15683: PPUSH
15684: LD_VAR 0 4
15688: PPUSH
15689: LD_VAR 0 5
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 48
// end ;
15701: LD_VAR 0 6
15705: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
// uc_side := your_side ;
15710: LD_ADDR_OWVAR 20
15714: PUSH
15715: LD_OWVAR 2
15719: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: LD_INT 4
15736: PUSH
15737: LD_INT 5
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: IN
15747: IFFALSE 15759
// uc_nation := nation_american else
15749: LD_ADDR_OWVAR 21
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
15757: GO 15802
// if chassis in [ 11 , 12 , 13 , 14 ] then
15759: LD_VAR 0 1
15763: PUSH
15764: LD_INT 11
15766: PUSH
15767: LD_INT 12
15769: PUSH
15770: LD_INT 13
15772: PUSH
15773: LD_INT 14
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: IN
15782: IFFALSE 15794
// uc_nation := nation_arabian else
15784: LD_ADDR_OWVAR 21
15788: PUSH
15789: LD_INT 2
15791: ST_TO_ADDR
15792: GO 15802
// uc_nation := nation_russian ;
15794: LD_ADDR_OWVAR 21
15798: PUSH
15799: LD_INT 3
15801: ST_TO_ADDR
// vc_chassis := chassis ;
15802: LD_ADDR_OWVAR 37
15806: PUSH
15807: LD_VAR 0 1
15811: ST_TO_ADDR
// vc_engine := engine ;
15812: LD_ADDR_OWVAR 39
15816: PUSH
15817: LD_VAR 0 2
15821: ST_TO_ADDR
// vc_control := control ;
15822: LD_ADDR_OWVAR 38
15826: PUSH
15827: LD_VAR 0 3
15831: ST_TO_ADDR
// vc_weapon := weapon ;
15832: LD_ADDR_OWVAR 40
15836: PUSH
15837: LD_VAR 0 4
15841: ST_TO_ADDR
// un := CreateVehicle ;
15842: LD_ADDR_VAR 0 8
15846: PUSH
15847: CALL_OW 45
15851: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15852: LD_VAR 0 8
15856: PPUSH
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 5
15862: PPUSH
15863: CALL_OW 12
15867: PPUSH
15868: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15872: LD_VAR 0 8
15876: PPUSH
15877: LD_VAR 0 5
15881: PPUSH
15882: LD_VAR 0 6
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 48
// end ;
15894: LD_VAR 0 7
15898: RET
// export hInvincible ; every 1 do
15899: GO 15901
15901: DISABLE
// hInvincible := [ ] ;
15902: LD_ADDR_EXP 65
15906: PUSH
15907: EMPTY
15908: ST_TO_ADDR
15909: END
// every 10 do var i ;
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
// begin enable ;
15916: ENABLE
// if not hInvincible then
15917: LD_EXP 65
15921: NOT
15922: IFFALSE 15926
// exit ;
15924: GO 15970
// for i in hInvincible do
15926: LD_ADDR_VAR 0 1
15930: PUSH
15931: LD_EXP 65
15935: PUSH
15936: FOR_IN
15937: IFFALSE 15968
// if GetLives ( i ) < 1000 then
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 256
15948: PUSH
15949: LD_INT 1000
15951: LESS
15952: IFFALSE 15966
// SetLives ( i , 1000 ) ;
15954: LD_VAR 0 1
15958: PPUSH
15959: LD_INT 1000
15961: PPUSH
15962: CALL_OW 234
15966: GO 15936
15968: POP
15969: POP
// end ;
15970: PPOPN 1
15972: END
// export function hHackInvincible ; var i ; begin
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: LD_INT 21
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 21
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: PPUSH
16010: CALL_OW 69
16014: PUSH
16015: FOR_IN
16016: IFFALSE 16077
// if IsSelected ( i ) then
16018: LD_VAR 0 2
16022: PPUSH
16023: CALL_OW 306
16027: IFFALSE 16075
// begin if i in hInvincible then
16029: LD_VAR 0 2
16033: PUSH
16034: LD_EXP 65
16038: IN
16039: IFFALSE 16059
// hInvincible := hInvincible diff i else
16041: LD_ADDR_EXP 65
16045: PUSH
16046: LD_EXP 65
16050: PUSH
16051: LD_VAR 0 2
16055: DIFF
16056: ST_TO_ADDR
16057: GO 16075
// hInvincible := hInvincible union i ;
16059: LD_ADDR_EXP 65
16063: PUSH
16064: LD_EXP 65
16068: PUSH
16069: LD_VAR 0 2
16073: UNION
16074: ST_TO_ADDR
// end ;
16075: GO 16015
16077: POP
16078: POP
// end ;
16079: LD_VAR 0 1
16083: RET
// export function hHackInvisible ; var i , j ; begin
16084: LD_INT 0
16086: PPUSH
16087: PPUSH
16088: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: PUSH
16109: FOR_IN
16110: IFFALSE 16134
// if IsSelected ( i ) then
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 306
16121: IFFALSE 16132
// ComForceInvisible ( i ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 496
16132: GO 16109
16134: POP
16135: POP
// end ;
16136: LD_VAR 0 1
16140: RET
// export function hHackChangeYourSide ; begin
16141: LD_INT 0
16143: PPUSH
// if your_side = 8 then
16144: LD_OWVAR 2
16148: PUSH
16149: LD_INT 8
16151: EQUAL
16152: IFFALSE 16164
// your_side := 0 else
16154: LD_ADDR_OWVAR 2
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
16162: GO 16178
// your_side := your_side + 1 ;
16164: LD_ADDR_OWVAR 2
16168: PUSH
16169: LD_OWVAR 2
16173: PUSH
16174: LD_INT 1
16176: PLUS
16177: ST_TO_ADDR
// end ;
16178: LD_VAR 0 1
16182: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16183: LD_INT 0
16185: PPUSH
16186: PPUSH
16187: PPUSH
// for i in all_units do
16188: LD_ADDR_VAR 0 2
16192: PUSH
16193: LD_OWVAR 3
16197: PUSH
16198: FOR_IN
16199: IFFALSE 16277
// if IsSelected ( i ) then
16201: LD_VAR 0 2
16205: PPUSH
16206: CALL_OW 306
16210: IFFALSE 16275
// begin j := GetSide ( i ) ;
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_VAR 0 2
16221: PPUSH
16222: CALL_OW 255
16226: ST_TO_ADDR
// if j = 8 then
16227: LD_VAR 0 3
16231: PUSH
16232: LD_INT 8
16234: EQUAL
16235: IFFALSE 16247
// j := 0 else
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 0
16244: ST_TO_ADDR
16245: GO 16261
// j := j + 1 ;
16247: LD_ADDR_VAR 0 3
16251: PUSH
16252: LD_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: PLUS
16260: ST_TO_ADDR
// SetSide ( i , j ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_VAR 0 3
16270: PPUSH
16271: CALL_OW 235
// end ;
16275: GO 16198
16277: POP
16278: POP
// end ;
16279: LD_VAR 0 1
16283: RET
// export function hHackFog ; begin
16284: LD_INT 0
16286: PPUSH
// FogOff ( true ) ;
16287: LD_INT 1
16289: PPUSH
16290: CALL_OW 344
// end ;
16294: LD_VAR 0 1
16298: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16299: LD_INT 0
16301: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_VAR 0 2
16311: PPUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: LD_INT 1
16322: PPUSH
16323: CALL_OW 483
// CenterOnXY ( x , y ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 84
// end ;
16341: LD_VAR 0 4
16345: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16350: LD_VAR 0 1
16354: NOT
16355: PUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: CALL_OW 488
16370: NOT
16371: OR
16372: PUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 266
16382: PUSH
16383: LD_INT 3
16385: NONEQUAL
16386: PUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 247
16396: PUSH
16397: LD_INT 1
16399: EQUAL
16400: NOT
16401: AND
16402: OR
16403: IFFALSE 16407
// exit ;
16405: GO 16556
// if GetType ( factory ) = unit_human then
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 247
16416: PUSH
16417: LD_INT 1
16419: EQUAL
16420: IFFALSE 16437
// factory := IsInUnit ( factory ) ;
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 310
16436: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 266
16446: PUSH
16447: LD_INT 3
16449: NONEQUAL
16450: IFFALSE 16454
// exit ;
16452: GO 16556
// if HexInfo ( x , y ) = factory then
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: CALL_OW 428
16468: PUSH
16469: LD_VAR 0 1
16473: EQUAL
16474: IFFALSE 16501
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16476: LD_ADDR_EXP 66
16480: PUSH
16481: LD_EXP 66
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: LD_INT 0
16493: PPUSH
16494: CALL_OW 1
16498: ST_TO_ADDR
16499: GO 16552
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16501: LD_ADDR_EXP 66
16505: PUSH
16506: LD_EXP 66
16510: PPUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 255
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: LD_VAR 0 2
16535: PUSH
16536: LD_VAR 0 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 1
16551: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16552: CALL 16561 0 0
// end ;
16556: LD_VAR 0 4
16560: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
16565: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16566: LD_STRING resetFactoryWaypoint();
16568: PPUSH
16569: CALL_OW 559
// if factoryWaypoints then
16573: LD_EXP 66
16577: IFFALSE 16703
// begin list := PrepareArray ( factoryWaypoints ) ;
16579: LD_ADDR_VAR 0 3
16583: PUSH
16584: LD_EXP 66
16588: PPUSH
16589: CALL 64008 0 1
16593: ST_TO_ADDR
// for i := 1 to list do
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: DOUBLE
16600: LD_INT 1
16602: DEC
16603: ST_TO_ADDR
16604: LD_VAR 0 3
16608: PUSH
16609: FOR_TO
16610: IFFALSE 16701
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16612: LD_STRING setFactoryWaypointXY(
16614: PUSH
16615: LD_VAR 0 3
16619: PUSH
16620: LD_VAR 0 2
16624: ARRAY
16625: PUSH
16626: LD_INT 1
16628: ARRAY
16629: STR
16630: PUSH
16631: LD_STRING ,
16633: STR
16634: PUSH
16635: LD_VAR 0 3
16639: PUSH
16640: LD_VAR 0 2
16644: ARRAY
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: STR
16650: PUSH
16651: LD_STRING ,
16653: STR
16654: PUSH
16655: LD_VAR 0 3
16659: PUSH
16660: LD_VAR 0 2
16664: ARRAY
16665: PUSH
16666: LD_INT 3
16668: ARRAY
16669: STR
16670: PUSH
16671: LD_STRING ,
16673: STR
16674: PUSH
16675: LD_VAR 0 3
16679: PUSH
16680: LD_VAR 0 2
16684: ARRAY
16685: PUSH
16686: LD_INT 4
16688: ARRAY
16689: STR
16690: PUSH
16691: LD_STRING )
16693: STR
16694: PPUSH
16695: CALL_OW 559
16699: GO 16609
16701: POP
16702: POP
// end ; end ;
16703: LD_VAR 0 1
16707: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16708: LD_INT 0
16710: PPUSH
// if HexInfo ( x , y ) = warehouse then
16711: LD_VAR 0 2
16715: PPUSH
16716: LD_VAR 0 3
16720: PPUSH
16721: CALL_OW 428
16725: PUSH
16726: LD_VAR 0 1
16730: EQUAL
16731: IFFALSE 16758
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16733: LD_ADDR_EXP 67
16737: PUSH
16738: LD_EXP 67
16742: PPUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: LD_INT 0
16750: PPUSH
16751: CALL_OW 1
16755: ST_TO_ADDR
16756: GO 16809
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16758: LD_ADDR_EXP 67
16762: PUSH
16763: LD_EXP 67
16767: PPUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 255
16782: PUSH
16783: LD_VAR 0 1
16787: PUSH
16788: LD_VAR 0 2
16792: PUSH
16793: LD_VAR 0 3
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 1
16808: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16809: CALL 16818 0 0
// end ;
16813: LD_VAR 0 4
16817: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
16822: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16823: LD_STRING resetWarehouseGatheringPoints();
16825: PPUSH
16826: CALL_OW 559
// if warehouseGatheringPoints then
16830: LD_EXP 67
16834: IFFALSE 16960
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: LD_EXP 67
16845: PPUSH
16846: CALL 64008 0 1
16850: ST_TO_ADDR
// for i := 1 to list do
16851: LD_ADDR_VAR 0 2
16855: PUSH
16856: DOUBLE
16857: LD_INT 1
16859: DEC
16860: ST_TO_ADDR
16861: LD_VAR 0 3
16865: PUSH
16866: FOR_TO
16867: IFFALSE 16958
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16869: LD_STRING setWarehouseGatheringPointXY(
16871: PUSH
16872: LD_VAR 0 3
16876: PUSH
16877: LD_VAR 0 2
16881: ARRAY
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: STR
16887: PUSH
16888: LD_STRING ,
16890: STR
16891: PUSH
16892: LD_VAR 0 3
16896: PUSH
16897: LD_VAR 0 2
16901: ARRAY
16902: PUSH
16903: LD_INT 2
16905: ARRAY
16906: STR
16907: PUSH
16908: LD_STRING ,
16910: STR
16911: PUSH
16912: LD_VAR 0 3
16916: PUSH
16917: LD_VAR 0 2
16921: ARRAY
16922: PUSH
16923: LD_INT 3
16925: ARRAY
16926: STR
16927: PUSH
16928: LD_STRING ,
16930: STR
16931: PUSH
16932: LD_VAR 0 3
16936: PUSH
16937: LD_VAR 0 2
16941: ARRAY
16942: PUSH
16943: LD_INT 4
16945: ARRAY
16946: STR
16947: PUSH
16948: LD_STRING )
16950: STR
16951: PPUSH
16952: CALL_OW 559
16956: GO 16866
16958: POP
16959: POP
// end ; end ;
16960: LD_VAR 0 1
16964: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16965: LD_EXP 67
16969: IFFALSE 17654
16971: GO 16973
16973: DISABLE
16974: LD_INT 0
16976: PPUSH
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
16983: PPUSH
16984: PPUSH
// begin enable ;
16985: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16986: LD_ADDR_VAR 0 3
16990: PUSH
16991: LD_EXP 67
16995: PPUSH
16996: CALL 64008 0 1
17000: ST_TO_ADDR
// if not list then
17001: LD_VAR 0 3
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17654
// for i := 1 to list do
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: DOUBLE
17016: LD_INT 1
17018: DEC
17019: ST_TO_ADDR
17020: LD_VAR 0 3
17024: PUSH
17025: FOR_TO
17026: IFFALSE 17652
// begin depot := list [ i ] [ 2 ] ;
17028: LD_ADDR_VAR 0 8
17032: PUSH
17033: LD_VAR 0 3
17037: PUSH
17038: LD_VAR 0 1
17042: ARRAY
17043: PUSH
17044: LD_INT 2
17046: ARRAY
17047: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17048: LD_ADDR_VAR 0 5
17052: PUSH
17053: LD_VAR 0 3
17057: PUSH
17058: LD_VAR 0 1
17062: ARRAY
17063: PUSH
17064: LD_INT 1
17066: ARRAY
17067: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17068: LD_VAR 0 8
17072: PPUSH
17073: CALL_OW 301
17077: PUSH
17078: LD_VAR 0 5
17082: PUSH
17083: LD_VAR 0 8
17087: PPUSH
17088: CALL_OW 255
17092: NONEQUAL
17093: OR
17094: IFFALSE 17123
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17096: LD_ADDR_EXP 67
17100: PUSH
17101: LD_EXP 67
17105: PPUSH
17106: LD_VAR 0 8
17110: PPUSH
17111: LD_INT 0
17113: PPUSH
17114: CALL_OW 1
17118: ST_TO_ADDR
// exit ;
17119: POP
17120: POP
17121: GO 17654
// end ; x := list [ i ] [ 3 ] ;
17123: LD_ADDR_VAR 0 6
17127: PUSH
17128: LD_VAR 0 3
17132: PUSH
17133: LD_VAR 0 1
17137: ARRAY
17138: PUSH
17139: LD_INT 3
17141: ARRAY
17142: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17143: LD_ADDR_VAR 0 7
17147: PUSH
17148: LD_VAR 0 3
17152: PUSH
17153: LD_VAR 0 1
17157: ARRAY
17158: PUSH
17159: LD_INT 4
17161: ARRAY
17162: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17163: LD_ADDR_VAR 0 9
17167: PUSH
17168: LD_VAR 0 6
17172: PPUSH
17173: LD_VAR 0 7
17177: PPUSH
17178: LD_INT 16
17180: PPUSH
17181: CALL 62596 0 3
17185: ST_TO_ADDR
// if not cratesNearbyPoint then
17186: LD_VAR 0 9
17190: NOT
17191: IFFALSE 17197
// exit ;
17193: POP
17194: POP
17195: GO 17654
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17197: LD_ADDR_VAR 0 4
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_VAR 0 5
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: LD_INT 60
17219: PUSH
17220: EMPTY
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 91
17229: PUSH
17230: LD_VAR 0 8
17234: PUSH
17235: LD_INT 6
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 25
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 25
17258: PUSH
17259: LD_INT 16
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: PUSH
17282: LD_VAR 0 8
17286: PPUSH
17287: CALL_OW 313
17291: PPUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 60
17297: PUSH
17298: EMPTY
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: LD_INT 25
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 25
17320: PUSH
17321: LD_INT 16
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 72
17341: UNION
17342: ST_TO_ADDR
// if tmp then
17343: LD_VAR 0 4
17347: IFFALSE 17427
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17349: LD_ADDR_VAR 0 4
17353: PUSH
17354: LD_VAR 0 4
17358: PPUSH
17359: LD_INT 3
17361: PPUSH
17362: CALL 60565 0 2
17366: ST_TO_ADDR
// for j in tmp do
17367: LD_ADDR_VAR 0 2
17371: PUSH
17372: LD_VAR 0 4
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17421
// begin if IsInUnit ( j ) then
17380: LD_VAR 0 2
17384: PPUSH
17385: CALL_OW 310
17389: IFFALSE 17400
// ComExit ( j ) ;
17391: LD_VAR 0 2
17395: PPUSH
17396: CALL 60648 0 1
// AddComCollect ( j , x , y ) ;
17400: LD_VAR 0 2
17404: PPUSH
17405: LD_VAR 0 6
17409: PPUSH
17410: LD_VAR 0 7
17414: PPUSH
17415: CALL_OW 177
// end ;
17419: GO 17377
17421: POP
17422: POP
// exit ;
17423: POP
17424: POP
17425: GO 17654
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17427: LD_ADDR_VAR 0 4
17431: PUSH
17432: LD_INT 22
17434: PUSH
17435: LD_VAR 0 5
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 91
17446: PUSH
17447: LD_VAR 0 8
17451: PUSH
17452: LD_INT 8
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 2
17462: PUSH
17463: LD_INT 34
17465: PUSH
17466: LD_INT 12
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 34
17475: PUSH
17476: LD_INT 51
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 34
17485: PUSH
17486: LD_INT 32
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 34
17495: PUSH
17496: LD_INT 89
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PPUSH
17515: CALL_OW 69
17519: ST_TO_ADDR
// if tmp then
17520: LD_VAR 0 4
17524: IFFALSE 17650
// begin for j in tmp do
17526: LD_ADDR_VAR 0 2
17530: PUSH
17531: LD_VAR 0 4
17535: PUSH
17536: FOR_IN
17537: IFFALSE 17648
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17539: LD_VAR 0 2
17543: PPUSH
17544: CALL_OW 262
17548: PUSH
17549: LD_INT 3
17551: EQUAL
17552: PUSH
17553: LD_VAR 0 2
17557: PPUSH
17558: CALL_OW 261
17562: PUSH
17563: LD_INT 20
17565: GREATER
17566: OR
17567: PUSH
17568: LD_VAR 0 2
17572: PPUSH
17573: CALL_OW 314
17577: NOT
17578: AND
17579: PUSH
17580: LD_VAR 0 2
17584: PPUSH
17585: CALL_OW 263
17589: PUSH
17590: LD_INT 1
17592: NONEQUAL
17593: PUSH
17594: LD_VAR 0 2
17598: PPUSH
17599: CALL_OW 311
17603: OR
17604: AND
17605: IFFALSE 17646
// begin ComCollect ( j , x , y ) ;
17607: LD_VAR 0 2
17611: PPUSH
17612: LD_VAR 0 6
17616: PPUSH
17617: LD_VAR 0 7
17621: PPUSH
17622: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17626: LD_VAR 0 2
17630: PPUSH
17631: LD_VAR 0 8
17635: PPUSH
17636: CALL_OW 172
// exit ;
17640: POP
17641: POP
17642: POP
17643: POP
17644: GO 17654
// end ;
17646: GO 17536
17648: POP
17649: POP
// end ; end ;
17650: GO 17025
17652: POP
17653: POP
// end ; end_of_file
17654: PPOPN 9
17656: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 200
17664: DOUBLE
17665: GREATEREQUAL
17666: IFFALSE 17674
17668: LD_INT 299
17670: DOUBLE
17671: LESSEQUAL
17672: IFTRUE 17676
17674: GO 17708
17676: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_VAR 0 2
17686: PPUSH
17687: LD_VAR 0 3
17691: PPUSH
17692: LD_VAR 0 4
17696: PPUSH
17697: LD_VAR 0 5
17701: PPUSH
17702: CALL 18196 0 5
17706: GO 17785
17708: LD_INT 300
17710: DOUBLE
17711: GREATEREQUAL
17712: IFFALSE 17720
17714: LD_INT 399
17716: DOUBLE
17717: LESSEQUAL
17718: IFTRUE 17722
17720: GO 17784
17722: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_VAR 0 2
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_VAR 0 4
17742: PPUSH
17743: LD_VAR 0 5
17747: PPUSH
17748: LD_VAR 0 6
17752: PPUSH
17753: LD_VAR 0 7
17757: PPUSH
17758: LD_VAR 0 8
17762: PPUSH
17763: LD_VAR 0 9
17767: PPUSH
17768: LD_VAR 0 10
17772: PPUSH
17773: LD_VAR 0 11
17777: PPUSH
17778: CALL 14358 0 11
17782: GO 17785
17784: POP
// end ;
17785: PPOPN 11
17787: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17788: LD_VAR 0 1
17792: PPUSH
17793: LD_VAR 0 2
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: LD_VAR 0 4
17807: PPUSH
17808: LD_VAR 0 5
17812: PPUSH
17813: CALL 17932 0 5
// end ; end_of_file
17817: PPOPN 5
17819: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17820: LD_INT 0
17822: PPUSH
17823: PPUSH
17824: PPUSH
17825: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 264
17835: PUSH
17836: LD_INT 91
17838: EQUAL
17839: IFFALSE 17911
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17841: LD_INT 68
17843: PPUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 255
17853: PPUSH
17854: CALL_OW 321
17858: PUSH
17859: LD_INT 2
17861: EQUAL
17862: IFFALSE 17874
// eff := 70 else
17864: LD_ADDR_VAR 0 4
17868: PUSH
17869: LD_INT 70
17871: ST_TO_ADDR
17872: GO 17882
// eff := 30 ;
17874: LD_ADDR_VAR 0 4
17878: PUSH
17879: LD_INT 30
17881: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 250
17891: PPUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 251
17901: PPUSH
17902: LD_VAR 0 4
17906: PPUSH
17907: CALL_OW 495
// end ; end ;
17911: LD_VAR 0 2
17915: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17916: LD_INT 0
17918: PPUSH
// end ;
17919: LD_VAR 0 4
17923: RET
// export function SOS_Command ( cmd ) ; begin
17924: LD_INT 0
17926: PPUSH
// end ;
17927: LD_VAR 0 2
17931: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17932: LD_INT 0
17934: PPUSH
// end ;
17935: LD_VAR 0 6
17939: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
// if not vehicle or not factory then
17944: LD_VAR 0 1
17948: NOT
17949: PUSH
17950: LD_VAR 0 2
17954: NOT
17955: OR
17956: IFFALSE 17960
// exit ;
17958: GO 18191
// if factoryWaypoints >= factory then
17960: LD_EXP 66
17964: PUSH
17965: LD_VAR 0 2
17969: GREATEREQUAL
17970: IFFALSE 18191
// if factoryWaypoints [ factory ] then
17972: LD_EXP 66
17976: PUSH
17977: LD_VAR 0 2
17981: ARRAY
17982: IFFALSE 18191
// begin if GetControl ( vehicle ) = control_manual then
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 263
17993: PUSH
17994: LD_INT 1
17996: EQUAL
17997: IFFALSE 18078
// begin driver := IsDrivenBy ( vehicle ) ;
17999: LD_ADDR_VAR 0 4
18003: PUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 311
18013: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18014: LD_VAR 0 4
18018: PPUSH
18019: LD_EXP 66
18023: PUSH
18024: LD_VAR 0 2
18028: ARRAY
18029: PUSH
18030: LD_INT 3
18032: ARRAY
18033: PPUSH
18034: LD_EXP 66
18038: PUSH
18039: LD_VAR 0 2
18043: ARRAY
18044: PUSH
18045: LD_INT 4
18047: ARRAY
18048: PPUSH
18049: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18053: LD_VAR 0 4
18057: PPUSH
18058: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18062: LD_VAR 0 4
18066: PPUSH
18067: LD_VAR 0 2
18071: PPUSH
18072: CALL_OW 180
// end else
18076: GO 18191
// if GetControl ( vehicle ) = control_remote then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 263
18087: PUSH
18088: LD_INT 2
18090: EQUAL
18091: IFFALSE 18152
// begin wait ( 0 0$2 ) ;
18093: LD_INT 70
18095: PPUSH
18096: CALL_OW 67
// if Connect ( vehicle ) then
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL 30856 0 1
18109: IFFALSE 18150
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_EXP 66
18120: PUSH
18121: LD_VAR 0 2
18125: ARRAY
18126: PUSH
18127: LD_INT 3
18129: ARRAY
18130: PPUSH
18131: LD_EXP 66
18135: PUSH
18136: LD_VAR 0 2
18140: ARRAY
18141: PUSH
18142: LD_INT 4
18144: ARRAY
18145: PPUSH
18146: CALL_OW 171
// end else
18150: GO 18191
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18152: LD_VAR 0 1
18156: PPUSH
18157: LD_EXP 66
18161: PUSH
18162: LD_VAR 0 2
18166: ARRAY
18167: PUSH
18168: LD_INT 3
18170: ARRAY
18171: PPUSH
18172: LD_EXP 66
18176: PUSH
18177: LD_VAR 0 2
18181: ARRAY
18182: PUSH
18183: LD_INT 4
18185: ARRAY
18186: PPUSH
18187: CALL_OW 171
// end ; end ;
18191: LD_VAR 0 3
18195: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18196: LD_INT 0
18198: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18199: LD_VAR 0 1
18203: PUSH
18204: LD_INT 250
18206: EQUAL
18207: PUSH
18208: LD_VAR 0 2
18212: PPUSH
18213: CALL_OW 264
18217: PUSH
18218: LD_INT 81
18220: EQUAL
18221: AND
18222: IFFALSE 18243
// MinerPlaceMine ( unit , x , y ) ;
18224: LD_VAR 0 2
18228: PPUSH
18229: LD_VAR 0 4
18233: PPUSH
18234: LD_VAR 0 5
18238: PPUSH
18239: CALL 21067 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 251
18250: EQUAL
18251: PUSH
18252: LD_VAR 0 2
18256: PPUSH
18257: CALL_OW 264
18261: PUSH
18262: LD_INT 81
18264: EQUAL
18265: AND
18266: IFFALSE 18287
// MinerDetonateMine ( unit , x , y ) ;
18268: LD_VAR 0 2
18272: PPUSH
18273: LD_VAR 0 4
18277: PPUSH
18278: LD_VAR 0 5
18282: PPUSH
18283: CALL 21342 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18287: LD_VAR 0 1
18291: PUSH
18292: LD_INT 252
18294: EQUAL
18295: PUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL_OW 264
18305: PUSH
18306: LD_INT 81
18308: EQUAL
18309: AND
18310: IFFALSE 18331
// MinerCreateMinefield ( unit , x , y ) ;
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_VAR 0 4
18321: PPUSH
18322: LD_VAR 0 5
18326: PPUSH
18327: CALL 21759 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_INT 253
18338: EQUAL
18339: PUSH
18340: LD_VAR 0 2
18344: PPUSH
18345: CALL_OW 257
18349: PUSH
18350: LD_INT 5
18352: EQUAL
18353: AND
18354: IFFALSE 18375
// ComBinocular ( unit , x , y ) ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: CALL 22128 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18375: LD_VAR 0 1
18379: PUSH
18380: LD_INT 254
18382: EQUAL
18383: PUSH
18384: LD_VAR 0 2
18388: PPUSH
18389: CALL_OW 264
18393: PUSH
18394: LD_INT 99
18396: EQUAL
18397: AND
18398: PUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: CALL_OW 263
18408: PUSH
18409: LD_INT 3
18411: EQUAL
18412: AND
18413: IFFALSE 18429
// HackDestroyVehicle ( unit , selectedUnit ) ;
18415: LD_VAR 0 2
18419: PPUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: CALL 20431 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18429: LD_VAR 0 1
18433: PUSH
18434: LD_INT 255
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: CALL_OW 264
18447: PUSH
18448: LD_INT 14
18450: PUSH
18451: LD_INT 53
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: IN
18458: AND
18459: PUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: CALL_OW 488
18474: AND
18475: IFFALSE 18499
// CutTreeXYR ( unit , x , y , 12 ) ;
18477: LD_VAR 0 2
18481: PPUSH
18482: LD_VAR 0 4
18486: PPUSH
18487: LD_VAR 0 5
18491: PPUSH
18492: LD_INT 12
18494: PPUSH
18495: CALL 18594 0 4
// if cmd = 256 then
18499: LD_VAR 0 1
18503: PUSH
18504: LD_INT 256
18506: EQUAL
18507: IFFALSE 18528
// SetFactoryWaypoint ( unit , x , y ) ;
18509: LD_VAR 0 2
18513: PPUSH
18514: LD_VAR 0 4
18518: PPUSH
18519: LD_VAR 0 5
18523: PPUSH
18524: CALL 16346 0 3
// if cmd = 257 then
18528: LD_VAR 0 1
18532: PUSH
18533: LD_INT 257
18535: EQUAL
18536: IFFALSE 18557
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18538: LD_VAR 0 2
18542: PPUSH
18543: LD_VAR 0 4
18547: PPUSH
18548: LD_VAR 0 5
18552: PPUSH
18553: CALL 16708 0 3
// if cmd = 258 then
18557: LD_VAR 0 1
18561: PUSH
18562: LD_INT 258
18564: EQUAL
18565: IFFALSE 18589
// BurnTreeXYR ( unit , x , y , 8 ) ;
18567: LD_VAR 0 2
18571: PPUSH
18572: LD_VAR 0 4
18576: PPUSH
18577: LD_VAR 0 5
18581: PPUSH
18582: LD_INT 8
18584: PPUSH
18585: CALL 18988 0 4
// end ;
18589: LD_VAR 0 6
18593: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18594: LD_INT 0
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18605: LD_VAR 0 1
18609: PPUSH
18610: CALL_OW 302
18614: NOT
18615: PUSH
18616: LD_VAR 0 2
18620: PPUSH
18621: LD_VAR 0 3
18625: PPUSH
18626: CALL_OW 488
18630: NOT
18631: OR
18632: PUSH
18633: LD_VAR 0 4
18637: NOT
18638: OR
18639: IFFALSE 18643
// exit ;
18641: GO 18983
// list := [ ] ;
18643: LD_ADDR_VAR 0 13
18647: PUSH
18648: EMPTY
18649: ST_TO_ADDR
// if x - r < 0 then
18650: LD_VAR 0 2
18654: PUSH
18655: LD_VAR 0 4
18659: MINUS
18660: PUSH
18661: LD_INT 0
18663: LESS
18664: IFFALSE 18676
// min_x := 0 else
18666: LD_ADDR_VAR 0 7
18670: PUSH
18671: LD_INT 0
18673: ST_TO_ADDR
18674: GO 18692
// min_x := x - r ;
18676: LD_ADDR_VAR 0 7
18680: PUSH
18681: LD_VAR 0 2
18685: PUSH
18686: LD_VAR 0 4
18690: MINUS
18691: ST_TO_ADDR
// if y - r < 0 then
18692: LD_VAR 0 3
18696: PUSH
18697: LD_VAR 0 4
18701: MINUS
18702: PUSH
18703: LD_INT 0
18705: LESS
18706: IFFALSE 18718
// min_y := 0 else
18708: LD_ADDR_VAR 0 8
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
18716: GO 18734
// min_y := y - r ;
18718: LD_ADDR_VAR 0 8
18722: PUSH
18723: LD_VAR 0 3
18727: PUSH
18728: LD_VAR 0 4
18732: MINUS
18733: ST_TO_ADDR
// max_x := x + r ;
18734: LD_ADDR_VAR 0 9
18738: PUSH
18739: LD_VAR 0 2
18743: PUSH
18744: LD_VAR 0 4
18748: PLUS
18749: ST_TO_ADDR
// max_y := y + r ;
18750: LD_ADDR_VAR 0 10
18754: PUSH
18755: LD_VAR 0 3
18759: PUSH
18760: LD_VAR 0 4
18764: PLUS
18765: ST_TO_ADDR
// for _x = min_x to max_x do
18766: LD_ADDR_VAR 0 11
18770: PUSH
18771: DOUBLE
18772: LD_VAR 0 7
18776: DEC
18777: ST_TO_ADDR
18778: LD_VAR 0 9
18782: PUSH
18783: FOR_TO
18784: IFFALSE 18901
// for _y = min_y to max_y do
18786: LD_ADDR_VAR 0 12
18790: PUSH
18791: DOUBLE
18792: LD_VAR 0 8
18796: DEC
18797: ST_TO_ADDR
18798: LD_VAR 0 10
18802: PUSH
18803: FOR_TO
18804: IFFALSE 18897
// begin if not ValidHex ( _x , _y ) then
18806: LD_VAR 0 11
18810: PPUSH
18811: LD_VAR 0 12
18815: PPUSH
18816: CALL_OW 488
18820: NOT
18821: IFFALSE 18825
// continue ;
18823: GO 18803
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18825: LD_VAR 0 11
18829: PPUSH
18830: LD_VAR 0 12
18834: PPUSH
18835: CALL_OW 351
18839: PUSH
18840: LD_VAR 0 11
18844: PPUSH
18845: LD_VAR 0 12
18849: PPUSH
18850: CALL_OW 554
18854: AND
18855: IFFALSE 18895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18857: LD_ADDR_VAR 0 13
18861: PUSH
18862: LD_VAR 0 13
18866: PPUSH
18867: LD_VAR 0 13
18871: PUSH
18872: LD_INT 1
18874: PLUS
18875: PPUSH
18876: LD_VAR 0 11
18880: PUSH
18881: LD_VAR 0 12
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 2
18894: ST_TO_ADDR
// end ;
18895: GO 18803
18897: POP
18898: POP
18899: GO 18783
18901: POP
18902: POP
// if not list then
18903: LD_VAR 0 13
18907: NOT
18908: IFFALSE 18912
// exit ;
18910: GO 18983
// for i in list do
18912: LD_ADDR_VAR 0 6
18916: PUSH
18917: LD_VAR 0 13
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_STRING M
18932: PUSH
18933: LD_VAR 0 6
18937: PUSH
18938: LD_INT 1
18940: ARRAY
18941: PUSH
18942: LD_VAR 0 6
18946: PUSH
18947: LD_INT 2
18949: ARRAY
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: LD_INT 0
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: PPUSH
18975: CALL_OW 447
18979: GO 18922
18981: POP
18982: POP
// end ;
18983: LD_VAR 0 5
18987: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18988: LD_INT 0
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
18995: PPUSH
18996: PPUSH
18997: PPUSH
18998: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18999: LD_VAR 0 1
19003: PPUSH
19004: CALL_OW 302
19008: NOT
19009: PUSH
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: CALL_OW 488
19024: NOT
19025: OR
19026: PUSH
19027: LD_VAR 0 4
19031: NOT
19032: OR
19033: IFFALSE 19037
// exit ;
19035: GO 19385
// list := [ ] ;
19037: LD_ADDR_VAR 0 13
19041: PUSH
19042: EMPTY
19043: ST_TO_ADDR
// if x - r < 0 then
19044: LD_VAR 0 2
19048: PUSH
19049: LD_VAR 0 4
19053: MINUS
19054: PUSH
19055: LD_INT 0
19057: LESS
19058: IFFALSE 19070
// min_x := 0 else
19060: LD_ADDR_VAR 0 7
19064: PUSH
19065: LD_INT 0
19067: ST_TO_ADDR
19068: GO 19086
// min_x := x - r ;
19070: LD_ADDR_VAR 0 7
19074: PUSH
19075: LD_VAR 0 2
19079: PUSH
19080: LD_VAR 0 4
19084: MINUS
19085: ST_TO_ADDR
// if y - r < 0 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_VAR 0 4
19095: MINUS
19096: PUSH
19097: LD_INT 0
19099: LESS
19100: IFFALSE 19112
// min_y := 0 else
19102: LD_ADDR_VAR 0 8
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
19110: GO 19128
// min_y := y - r ;
19112: LD_ADDR_VAR 0 8
19116: PUSH
19117: LD_VAR 0 3
19121: PUSH
19122: LD_VAR 0 4
19126: MINUS
19127: ST_TO_ADDR
// max_x := x + r ;
19128: LD_ADDR_VAR 0 9
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_VAR 0 4
19142: PLUS
19143: ST_TO_ADDR
// max_y := y + r ;
19144: LD_ADDR_VAR 0 10
19148: PUSH
19149: LD_VAR 0 3
19153: PUSH
19154: LD_VAR 0 4
19158: PLUS
19159: ST_TO_ADDR
// for _x = min_x to max_x do
19160: LD_ADDR_VAR 0 11
19164: PUSH
19165: DOUBLE
19166: LD_VAR 0 7
19170: DEC
19171: ST_TO_ADDR
19172: LD_VAR 0 9
19176: PUSH
19177: FOR_TO
19178: IFFALSE 19295
// for _y = min_y to max_y do
19180: LD_ADDR_VAR 0 12
19184: PUSH
19185: DOUBLE
19186: LD_VAR 0 8
19190: DEC
19191: ST_TO_ADDR
19192: LD_VAR 0 10
19196: PUSH
19197: FOR_TO
19198: IFFALSE 19291
// begin if not ValidHex ( _x , _y ) then
19200: LD_VAR 0 11
19204: PPUSH
19205: LD_VAR 0 12
19209: PPUSH
19210: CALL_OW 488
19214: NOT
19215: IFFALSE 19219
// continue ;
19217: GO 19197
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19219: LD_VAR 0 11
19223: PPUSH
19224: LD_VAR 0 12
19228: PPUSH
19229: CALL_OW 351
19233: PUSH
19234: LD_VAR 0 11
19238: PPUSH
19239: LD_VAR 0 12
19243: PPUSH
19244: CALL_OW 554
19248: AND
19249: IFFALSE 19289
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19251: LD_ADDR_VAR 0 13
19255: PUSH
19256: LD_VAR 0 13
19260: PPUSH
19261: LD_VAR 0 13
19265: PUSH
19266: LD_INT 1
19268: PLUS
19269: PPUSH
19270: LD_VAR 0 11
19274: PUSH
19275: LD_VAR 0 12
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 2
19288: ST_TO_ADDR
// end ;
19289: GO 19197
19291: POP
19292: POP
19293: GO 19177
19295: POP
19296: POP
// if not list then
19297: LD_VAR 0 13
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19385
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19306: LD_ADDR_VAR 0 13
19310: PUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: LD_VAR 0 13
19320: PPUSH
19321: LD_INT 1
19323: PPUSH
19324: LD_INT 1
19326: PPUSH
19327: CALL 27998 0 4
19331: ST_TO_ADDR
// ComStop ( flame ) ;
19332: LD_VAR 0 1
19336: PPUSH
19337: CALL_OW 141
// for i in list do
19341: LD_ADDR_VAR 0 6
19345: PUSH
19346: LD_VAR 0 13
19350: PUSH
19351: FOR_IN
19352: IFFALSE 19383
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_VAR 0 6
19363: PUSH
19364: LD_INT 1
19366: ARRAY
19367: PPUSH
19368: LD_VAR 0 6
19372: PUSH
19373: LD_INT 2
19375: ARRAY
19376: PPUSH
19377: CALL_OW 176
19381: GO 19351
19383: POP
19384: POP
// end ;
19385: LD_VAR 0 5
19389: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19390: LD_EXP 69
19394: NOT
19395: IFFALSE 19445
19397: GO 19399
19399: DISABLE
// begin initHack := true ;
19400: LD_ADDR_EXP 69
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// hackTanks := [ ] ;
19408: LD_ADDR_EXP 70
19412: PUSH
19413: EMPTY
19414: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19415: LD_ADDR_EXP 71
19419: PUSH
19420: EMPTY
19421: ST_TO_ADDR
// hackLimit := 3 ;
19422: LD_ADDR_EXP 72
19426: PUSH
19427: LD_INT 3
19429: ST_TO_ADDR
// hackDist := 12 ;
19430: LD_ADDR_EXP 73
19434: PUSH
19435: LD_INT 12
19437: ST_TO_ADDR
// hackCounter := [ ] ;
19438: LD_ADDR_EXP 74
19442: PUSH
19443: EMPTY
19444: ST_TO_ADDR
// end ;
19445: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19446: LD_EXP 69
19450: PUSH
19451: LD_INT 34
19453: PUSH
19454: LD_INT 99
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 69
19465: AND
19466: IFFALSE 19719
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// begin enable ;
19475: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19476: LD_ADDR_VAR 0 1
19480: PUSH
19481: LD_INT 34
19483: PUSH
19484: LD_INT 99
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PPUSH
19491: CALL_OW 69
19495: PUSH
19496: FOR_IN
19497: IFFALSE 19717
// begin if not i in hackTanks then
19499: LD_VAR 0 1
19503: PUSH
19504: LD_EXP 70
19508: IN
19509: NOT
19510: IFFALSE 19593
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19512: LD_ADDR_EXP 70
19516: PUSH
19517: LD_EXP 70
19521: PPUSH
19522: LD_EXP 70
19526: PUSH
19527: LD_INT 1
19529: PLUS
19530: PPUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 1
19540: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19541: LD_ADDR_EXP 71
19545: PUSH
19546: LD_EXP 71
19550: PPUSH
19551: LD_EXP 71
19555: PUSH
19556: LD_INT 1
19558: PLUS
19559: PPUSH
19560: EMPTY
19561: PPUSH
19562: CALL_OW 1
19566: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19567: LD_ADDR_EXP 74
19571: PUSH
19572: LD_EXP 74
19576: PPUSH
19577: LD_EXP 74
19581: PUSH
19582: LD_INT 1
19584: PLUS
19585: PPUSH
19586: EMPTY
19587: PPUSH
19588: CALL_OW 1
19592: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 302
19602: NOT
19603: IFFALSE 19616
// begin HackUnlinkAll ( i ) ;
19605: LD_VAR 0 1
19609: PPUSH
19610: CALL 19722 0 1
// continue ;
19614: GO 19496
// end ; HackCheckCapturedStatus ( i ) ;
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL 20165 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_INT 81
19632: PUSH
19633: LD_VAR 0 1
19637: PPUSH
19638: CALL_OW 255
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 33
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 91
19659: PUSH
19660: LD_VAR 0 1
19664: PUSH
19665: LD_EXP 73
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 50
19677: PUSH
19678: EMPTY
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: PPUSH
19687: CALL_OW 69
19691: ST_TO_ADDR
// if not tmp then
19692: LD_VAR 0 2
19696: NOT
19697: IFFALSE 19701
// continue ;
19699: GO 19496
// HackLink ( i , tmp ) ;
19701: LD_VAR 0 1
19705: PPUSH
19706: LD_VAR 0 2
19710: PPUSH
19711: CALL 19858 0 2
// end ;
19715: GO 19496
19717: POP
19718: POP
// end ;
19719: PPOPN 2
19721: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19722: LD_INT 0
19724: PPUSH
19725: PPUSH
19726: PPUSH
// if not hack in hackTanks then
19727: LD_VAR 0 1
19731: PUSH
19732: LD_EXP 70
19736: IN
19737: NOT
19738: IFFALSE 19742
// exit ;
19740: GO 19853
// index := GetElementIndex ( hackTanks , hack ) ;
19742: LD_ADDR_VAR 0 4
19746: PUSH
19747: LD_EXP 70
19751: PPUSH
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL 27295 0 2
19761: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19762: LD_EXP 71
19766: PUSH
19767: LD_VAR 0 4
19771: ARRAY
19772: IFFALSE 19853
// begin for i in hackTanksCaptured [ index ] do
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_EXP 71
19783: PUSH
19784: LD_VAR 0 4
19788: ARRAY
19789: PUSH
19790: FOR_IN
19791: IFFALSE 19817
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 1
19800: ARRAY
19801: PPUSH
19802: LD_VAR 0 3
19806: PUSH
19807: LD_INT 2
19809: ARRAY
19810: PPUSH
19811: CALL_OW 235
19815: GO 19790
19817: POP
19818: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19819: LD_ADDR_EXP 71
19823: PUSH
19824: LD_EXP 71
19828: PPUSH
19829: LD_VAR 0 4
19833: PPUSH
19834: EMPTY
19835: PPUSH
19836: CALL_OW 1
19840: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_INT 0
19848: PPUSH
19849: CALL_OW 505
// end ; end ;
19853: LD_VAR 0 2
19857: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19858: LD_INT 0
19860: PPUSH
19861: PPUSH
19862: PPUSH
// if not hack in hackTanks or not vehicles then
19863: LD_VAR 0 1
19867: PUSH
19868: LD_EXP 70
19872: IN
19873: NOT
19874: PUSH
19875: LD_VAR 0 2
19879: NOT
19880: OR
19881: IFFALSE 19885
// exit ;
19883: GO 20160
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: LD_VAR 0 2
19899: PPUSH
19900: LD_INT 1
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: CALL 27945 0 4
19910: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19911: LD_ADDR_VAR 0 5
19915: PUSH
19916: LD_EXP 70
19920: PPUSH
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL 27295 0 2
19930: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19931: LD_EXP 71
19935: PUSH
19936: LD_VAR 0 5
19940: ARRAY
19941: PUSH
19942: LD_EXP 72
19946: LESS
19947: IFFALSE 20136
// begin for i := 1 to vehicles do
19949: LD_ADDR_VAR 0 4
19953: PUSH
19954: DOUBLE
19955: LD_INT 1
19957: DEC
19958: ST_TO_ADDR
19959: LD_VAR 0 2
19963: PUSH
19964: FOR_TO
19965: IFFALSE 20134
// begin if hackTanksCaptured [ index ] = hackLimit then
19967: LD_EXP 71
19971: PUSH
19972: LD_VAR 0 5
19976: ARRAY
19977: PUSH
19978: LD_EXP 72
19982: EQUAL
19983: IFFALSE 19987
// break ;
19985: GO 20134
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19987: LD_ADDR_EXP 74
19991: PUSH
19992: LD_EXP 74
19996: PPUSH
19997: LD_VAR 0 5
20001: PPUSH
20002: LD_EXP 74
20006: PUSH
20007: LD_VAR 0 5
20011: ARRAY
20012: PUSH
20013: LD_INT 1
20015: PLUS
20016: PPUSH
20017: CALL_OW 1
20021: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20022: LD_ADDR_EXP 71
20026: PUSH
20027: LD_EXP 71
20031: PPUSH
20032: LD_VAR 0 5
20036: PUSH
20037: LD_EXP 71
20041: PUSH
20042: LD_VAR 0 5
20046: ARRAY
20047: PUSH
20048: LD_INT 1
20050: PLUS
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PPUSH
20056: LD_VAR 0 2
20060: PUSH
20061: LD_VAR 0 4
20065: ARRAY
20066: PUSH
20067: LD_VAR 0 2
20071: PUSH
20072: LD_VAR 0 4
20076: ARRAY
20077: PPUSH
20078: CALL_OW 255
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PPUSH
20087: CALL 27510 0 3
20091: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20092: LD_VAR 0 2
20096: PUSH
20097: LD_VAR 0 4
20101: ARRAY
20102: PPUSH
20103: LD_VAR 0 1
20107: PPUSH
20108: CALL_OW 255
20112: PPUSH
20113: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20117: LD_VAR 0 2
20121: PUSH
20122: LD_VAR 0 4
20126: ARRAY
20127: PPUSH
20128: CALL_OW 141
// end ;
20132: GO 19964
20134: POP
20135: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20136: LD_VAR 0 1
20140: PPUSH
20141: LD_EXP 71
20145: PUSH
20146: LD_VAR 0 5
20150: ARRAY
20151: PUSH
20152: LD_INT 0
20154: PLUS
20155: PPUSH
20156: CALL_OW 505
// end ;
20160: LD_VAR 0 3
20164: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20165: LD_INT 0
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
// if not hack in hackTanks then
20171: LD_VAR 0 1
20175: PUSH
20176: LD_EXP 70
20180: IN
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20426
// index := GetElementIndex ( hackTanks , hack ) ;
20186: LD_ADDR_VAR 0 4
20190: PUSH
20191: LD_EXP 70
20195: PPUSH
20196: LD_VAR 0 1
20200: PPUSH
20201: CALL 27295 0 2
20205: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20206: LD_ADDR_VAR 0 3
20210: PUSH
20211: DOUBLE
20212: LD_EXP 71
20216: PUSH
20217: LD_VAR 0 4
20221: ARRAY
20222: INC
20223: ST_TO_ADDR
20224: LD_INT 1
20226: PUSH
20227: FOR_DOWNTO
20228: IFFALSE 20400
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20230: LD_ADDR_VAR 0 5
20234: PUSH
20235: LD_EXP 71
20239: PUSH
20240: LD_VAR 0 4
20244: ARRAY
20245: PUSH
20246: LD_VAR 0 3
20250: ARRAY
20251: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20252: LD_VAR 0 5
20256: PUSH
20257: LD_INT 1
20259: ARRAY
20260: PPUSH
20261: CALL_OW 302
20265: NOT
20266: PUSH
20267: LD_VAR 0 5
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: CALL_OW 255
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 255
20290: NONEQUAL
20291: OR
20292: IFFALSE 20398
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20294: LD_VAR 0 5
20298: PUSH
20299: LD_INT 1
20301: ARRAY
20302: PPUSH
20303: CALL_OW 305
20307: PUSH
20308: LD_VAR 0 5
20312: PUSH
20313: LD_INT 1
20315: ARRAY
20316: PPUSH
20317: CALL_OW 255
20321: PUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 255
20331: EQUAL
20332: AND
20333: IFFALSE 20357
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20335: LD_VAR 0 5
20339: PUSH
20340: LD_INT 1
20342: ARRAY
20343: PPUSH
20344: LD_VAR 0 5
20348: PUSH
20349: LD_INT 2
20351: ARRAY
20352: PPUSH
20353: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20357: LD_ADDR_EXP 71
20361: PUSH
20362: LD_EXP 71
20366: PPUSH
20367: LD_VAR 0 4
20371: PPUSH
20372: LD_EXP 71
20376: PUSH
20377: LD_VAR 0 4
20381: ARRAY
20382: PPUSH
20383: LD_VAR 0 3
20387: PPUSH
20388: CALL_OW 3
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
// end ; end ;
20398: GO 20227
20400: POP
20401: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20402: LD_VAR 0 1
20406: PPUSH
20407: LD_EXP 71
20411: PUSH
20412: LD_VAR 0 4
20416: ARRAY
20417: PUSH
20418: LD_INT 0
20420: PLUS
20421: PPUSH
20422: CALL_OW 505
// end ;
20426: LD_VAR 0 2
20430: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20431: LD_INT 0
20433: PPUSH
20434: PPUSH
20435: PPUSH
20436: PPUSH
// if not hack in hackTanks then
20437: LD_VAR 0 1
20441: PUSH
20442: LD_EXP 70
20446: IN
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20537
// index := GetElementIndex ( hackTanks , hack ) ;
20452: LD_ADDR_VAR 0 5
20456: PUSH
20457: LD_EXP 70
20461: PPUSH
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL 27295 0 2
20471: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20472: LD_ADDR_VAR 0 4
20476: PUSH
20477: DOUBLE
20478: LD_INT 1
20480: DEC
20481: ST_TO_ADDR
20482: LD_EXP 71
20486: PUSH
20487: LD_VAR 0 5
20491: ARRAY
20492: PUSH
20493: FOR_TO
20494: IFFALSE 20535
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20496: LD_EXP 71
20500: PUSH
20501: LD_VAR 0 5
20505: ARRAY
20506: PUSH
20507: LD_VAR 0 4
20511: ARRAY
20512: PUSH
20513: LD_INT 1
20515: ARRAY
20516: PUSH
20517: LD_VAR 0 2
20521: EQUAL
20522: IFFALSE 20533
// KillUnit ( vehicle ) ;
20524: LD_VAR 0 2
20528: PPUSH
20529: CALL_OW 66
20533: GO 20493
20535: POP
20536: POP
// end ;
20537: LD_VAR 0 3
20541: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20542: LD_EXP 75
20546: NOT
20547: IFFALSE 20582
20549: GO 20551
20551: DISABLE
// begin initMiner := true ;
20552: LD_ADDR_EXP 75
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// minersList := [ ] ;
20560: LD_ADDR_EXP 76
20564: PUSH
20565: EMPTY
20566: ST_TO_ADDR
// minerMinesList := [ ] ;
20567: LD_ADDR_EXP 77
20571: PUSH
20572: EMPTY
20573: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20574: LD_ADDR_EXP 78
20578: PUSH
20579: LD_INT 5
20581: ST_TO_ADDR
// end ;
20582: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20583: LD_EXP 75
20587: PUSH
20588: LD_INT 34
20590: PUSH
20591: LD_INT 81
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PPUSH
20598: CALL_OW 69
20602: AND
20603: IFFALSE 21064
20605: GO 20607
20607: DISABLE
20608: LD_INT 0
20610: PPUSH
20611: PPUSH
20612: PPUSH
20613: PPUSH
// begin enable ;
20614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_INT 34
20622: PUSH
20623: LD_INT 81
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: PUSH
20635: FOR_IN
20636: IFFALSE 20708
// begin if not i in minersList then
20638: LD_VAR 0 1
20642: PUSH
20643: LD_EXP 76
20647: IN
20648: NOT
20649: IFFALSE 20706
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20651: LD_ADDR_EXP 76
20655: PUSH
20656: LD_EXP 76
20660: PPUSH
20661: LD_EXP 76
20665: PUSH
20666: LD_INT 1
20668: PLUS
20669: PPUSH
20670: LD_VAR 0 1
20674: PPUSH
20675: CALL_OW 1
20679: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20680: LD_ADDR_EXP 77
20684: PUSH
20685: LD_EXP 77
20689: PPUSH
20690: LD_EXP 77
20694: PUSH
20695: LD_INT 1
20697: PLUS
20698: PPUSH
20699: EMPTY
20700: PPUSH
20701: CALL_OW 1
20705: ST_TO_ADDR
// end end ;
20706: GO 20635
20708: POP
20709: POP
// for i := minerMinesList downto 1 do
20710: LD_ADDR_VAR 0 1
20714: PUSH
20715: DOUBLE
20716: LD_EXP 77
20720: INC
20721: ST_TO_ADDR
20722: LD_INT 1
20724: PUSH
20725: FOR_DOWNTO
20726: IFFALSE 21062
// begin if IsLive ( minersList [ i ] ) then
20728: LD_EXP 76
20732: PUSH
20733: LD_VAR 0 1
20737: ARRAY
20738: PPUSH
20739: CALL_OW 300
20743: IFFALSE 20771
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20745: LD_EXP 76
20749: PUSH
20750: LD_VAR 0 1
20754: ARRAY
20755: PPUSH
20756: LD_EXP 77
20760: PUSH
20761: LD_VAR 0 1
20765: ARRAY
20766: PPUSH
20767: CALL_OW 505
// if not minerMinesList [ i ] then
20771: LD_EXP 77
20775: PUSH
20776: LD_VAR 0 1
20780: ARRAY
20781: NOT
20782: IFFALSE 20786
// continue ;
20784: GO 20725
// for j := minerMinesList [ i ] downto 1 do
20786: LD_ADDR_VAR 0 2
20790: PUSH
20791: DOUBLE
20792: LD_EXP 77
20796: PUSH
20797: LD_VAR 0 1
20801: ARRAY
20802: INC
20803: ST_TO_ADDR
20804: LD_INT 1
20806: PUSH
20807: FOR_DOWNTO
20808: IFFALSE 21058
// begin side := GetSide ( minersList [ i ] ) ;
20810: LD_ADDR_VAR 0 3
20814: PUSH
20815: LD_EXP 76
20819: PUSH
20820: LD_VAR 0 1
20824: ARRAY
20825: PPUSH
20826: CALL_OW 255
20830: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20831: LD_ADDR_VAR 0 4
20835: PUSH
20836: LD_EXP 77
20840: PUSH
20841: LD_VAR 0 1
20845: ARRAY
20846: PUSH
20847: LD_VAR 0 2
20851: ARRAY
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: PPUSH
20857: LD_EXP 77
20861: PUSH
20862: LD_VAR 0 1
20866: ARRAY
20867: PUSH
20868: LD_VAR 0 2
20872: ARRAY
20873: PUSH
20874: LD_INT 2
20876: ARRAY
20877: PPUSH
20878: CALL_OW 428
20882: ST_TO_ADDR
// if not tmp then
20883: LD_VAR 0 4
20887: NOT
20888: IFFALSE 20892
// continue ;
20890: GO 20807
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20892: LD_VAR 0 4
20896: PUSH
20897: LD_INT 81
20899: PUSH
20900: LD_VAR 0 3
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PPUSH
20909: CALL_OW 69
20913: IN
20914: PUSH
20915: LD_EXP 77
20919: PUSH
20920: LD_VAR 0 1
20924: ARRAY
20925: PUSH
20926: LD_VAR 0 2
20930: ARRAY
20931: PUSH
20932: LD_INT 1
20934: ARRAY
20935: PPUSH
20936: LD_EXP 77
20940: PUSH
20941: LD_VAR 0 1
20945: ARRAY
20946: PUSH
20947: LD_VAR 0 2
20951: ARRAY
20952: PUSH
20953: LD_INT 2
20955: ARRAY
20956: PPUSH
20957: CALL_OW 458
20961: AND
20962: IFFALSE 21056
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20964: LD_EXP 77
20968: PUSH
20969: LD_VAR 0 1
20973: ARRAY
20974: PUSH
20975: LD_VAR 0 2
20979: ARRAY
20980: PUSH
20981: LD_INT 1
20983: ARRAY
20984: PPUSH
20985: LD_EXP 77
20989: PUSH
20990: LD_VAR 0 1
20994: ARRAY
20995: PUSH
20996: LD_VAR 0 2
21000: ARRAY
21001: PUSH
21002: LD_INT 2
21004: ARRAY
21005: PPUSH
21006: LD_VAR 0 3
21010: PPUSH
21011: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21015: LD_ADDR_EXP 77
21019: PUSH
21020: LD_EXP 77
21024: PPUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: LD_EXP 77
21034: PUSH
21035: LD_VAR 0 1
21039: ARRAY
21040: PPUSH
21041: LD_VAR 0 2
21045: PPUSH
21046: CALL_OW 3
21050: PPUSH
21051: CALL_OW 1
21055: ST_TO_ADDR
// end ; end ;
21056: GO 20807
21058: POP
21059: POP
// end ;
21060: GO 20725
21062: POP
21063: POP
// end ;
21064: PPOPN 4
21066: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21067: LD_INT 0
21069: PPUSH
21070: PPUSH
// result := false ;
21071: LD_ADDR_VAR 0 4
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 264
21088: PUSH
21089: LD_INT 81
21091: EQUAL
21092: NOT
21093: IFFALSE 21097
// exit ;
21095: GO 21337
// index := GetElementIndex ( minersList , unit ) ;
21097: LD_ADDR_VAR 0 5
21101: PUSH
21102: LD_EXP 76
21106: PPUSH
21107: LD_VAR 0 1
21111: PPUSH
21112: CALL 27295 0 2
21116: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21117: LD_EXP 77
21121: PUSH
21122: LD_VAR 0 5
21126: ARRAY
21127: PUSH
21128: LD_EXP 78
21132: GREATEREQUAL
21133: IFFALSE 21137
// exit ;
21135: GO 21337
// ComMoveXY ( unit , x , y ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21156: LD_INT 35
21158: PPUSH
21159: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21163: LD_VAR 0 1
21167: PPUSH
21168: LD_VAR 0 2
21172: PPUSH
21173: LD_VAR 0 3
21177: PPUSH
21178: CALL 59047 0 3
21182: NOT
21183: PUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 314
21193: AND
21194: IFFALSE 21198
// exit ;
21196: GO 21337
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21198: LD_VAR 0 2
21202: PPUSH
21203: LD_VAR 0 3
21207: PPUSH
21208: CALL_OW 428
21212: PUSH
21213: LD_VAR 0 1
21217: EQUAL
21218: PUSH
21219: LD_VAR 0 1
21223: PPUSH
21224: CALL_OW 314
21228: NOT
21229: AND
21230: IFFALSE 21156
// PlaySoundXY ( x , y , PlantMine ) ;
21232: LD_VAR 0 2
21236: PPUSH
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_STRING PlantMine
21244: PPUSH
21245: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21249: LD_VAR 0 2
21253: PPUSH
21254: LD_VAR 0 3
21258: PPUSH
21259: LD_VAR 0 1
21263: PPUSH
21264: CALL_OW 255
21268: PPUSH
21269: LD_INT 0
21271: PPUSH
21272: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21276: LD_ADDR_EXP 77
21280: PUSH
21281: LD_EXP 77
21285: PPUSH
21286: LD_VAR 0 5
21290: PUSH
21291: LD_EXP 77
21295: PUSH
21296: LD_VAR 0 5
21300: ARRAY
21301: PUSH
21302: LD_INT 1
21304: PLUS
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_VAR 0 3
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PPUSH
21324: CALL 27510 0 3
21328: ST_TO_ADDR
// result := true ;
21329: LD_ADDR_VAR 0 4
21333: PUSH
21334: LD_INT 1
21336: ST_TO_ADDR
// end ;
21337: LD_VAR 0 4
21341: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21342: LD_INT 0
21344: PPUSH
21345: PPUSH
21346: PPUSH
// if not unit in minersList then
21347: LD_VAR 0 1
21351: PUSH
21352: LD_EXP 76
21356: IN
21357: NOT
21358: IFFALSE 21362
// exit ;
21360: GO 21754
// index := GetElementIndex ( minersList , unit ) ;
21362: LD_ADDR_VAR 0 6
21366: PUSH
21367: LD_EXP 76
21371: PPUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL 27295 0 2
21381: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21382: LD_ADDR_VAR 0 5
21386: PUSH
21387: DOUBLE
21388: LD_EXP 77
21392: PUSH
21393: LD_VAR 0 6
21397: ARRAY
21398: INC
21399: ST_TO_ADDR
21400: LD_INT 1
21402: PUSH
21403: FOR_DOWNTO
21404: IFFALSE 21565
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21406: LD_EXP 77
21410: PUSH
21411: LD_VAR 0 6
21415: ARRAY
21416: PUSH
21417: LD_VAR 0 5
21421: ARRAY
21422: PUSH
21423: LD_INT 1
21425: ARRAY
21426: PUSH
21427: LD_VAR 0 2
21431: EQUAL
21432: PUSH
21433: LD_EXP 77
21437: PUSH
21438: LD_VAR 0 6
21442: ARRAY
21443: PUSH
21444: LD_VAR 0 5
21448: ARRAY
21449: PUSH
21450: LD_INT 2
21452: ARRAY
21453: PUSH
21454: LD_VAR 0 3
21458: EQUAL
21459: AND
21460: IFFALSE 21563
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21462: LD_EXP 77
21466: PUSH
21467: LD_VAR 0 6
21471: ARRAY
21472: PUSH
21473: LD_VAR 0 5
21477: ARRAY
21478: PUSH
21479: LD_INT 1
21481: ARRAY
21482: PPUSH
21483: LD_EXP 77
21487: PUSH
21488: LD_VAR 0 6
21492: ARRAY
21493: PUSH
21494: LD_VAR 0 5
21498: ARRAY
21499: PUSH
21500: LD_INT 2
21502: ARRAY
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 255
21513: PPUSH
21514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21518: LD_ADDR_EXP 77
21522: PUSH
21523: LD_EXP 77
21527: PPUSH
21528: LD_VAR 0 6
21532: PPUSH
21533: LD_EXP 77
21537: PUSH
21538: LD_VAR 0 6
21542: ARRAY
21543: PPUSH
21544: LD_VAR 0 5
21548: PPUSH
21549: CALL_OW 3
21553: PPUSH
21554: CALL_OW 1
21558: ST_TO_ADDR
// exit ;
21559: POP
21560: POP
21561: GO 21754
// end ; end ;
21563: GO 21403
21565: POP
21566: POP
// for i := minerMinesList [ index ] downto 1 do
21567: LD_ADDR_VAR 0 5
21571: PUSH
21572: DOUBLE
21573: LD_EXP 77
21577: PUSH
21578: LD_VAR 0 6
21582: ARRAY
21583: INC
21584: ST_TO_ADDR
21585: LD_INT 1
21587: PUSH
21588: FOR_DOWNTO
21589: IFFALSE 21752
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21591: LD_EXP 77
21595: PUSH
21596: LD_VAR 0 6
21600: ARRAY
21601: PUSH
21602: LD_VAR 0 5
21606: ARRAY
21607: PUSH
21608: LD_INT 1
21610: ARRAY
21611: PPUSH
21612: LD_EXP 77
21616: PUSH
21617: LD_VAR 0 6
21621: ARRAY
21622: PUSH
21623: LD_VAR 0 5
21627: ARRAY
21628: PUSH
21629: LD_INT 2
21631: ARRAY
21632: PPUSH
21633: LD_VAR 0 2
21637: PPUSH
21638: LD_VAR 0 3
21642: PPUSH
21643: CALL_OW 298
21647: PUSH
21648: LD_INT 6
21650: LESS
21651: IFFALSE 21750
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21653: LD_EXP 77
21657: PUSH
21658: LD_VAR 0 6
21662: ARRAY
21663: PUSH
21664: LD_VAR 0 5
21668: ARRAY
21669: PUSH
21670: LD_INT 1
21672: ARRAY
21673: PPUSH
21674: LD_EXP 77
21678: PUSH
21679: LD_VAR 0 6
21683: ARRAY
21684: PUSH
21685: LD_VAR 0 5
21689: ARRAY
21690: PUSH
21691: LD_INT 2
21693: ARRAY
21694: PPUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 255
21704: PPUSH
21705: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21709: LD_ADDR_EXP 77
21713: PUSH
21714: LD_EXP 77
21718: PPUSH
21719: LD_VAR 0 6
21723: PPUSH
21724: LD_EXP 77
21728: PUSH
21729: LD_VAR 0 6
21733: ARRAY
21734: PPUSH
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL_OW 3
21744: PPUSH
21745: CALL_OW 1
21749: ST_TO_ADDR
// end ; end ;
21750: GO 21588
21752: POP
21753: POP
// end ;
21754: LD_VAR 0 4
21758: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
21763: PPUSH
21764: PPUSH
21765: PPUSH
21766: PPUSH
21767: PPUSH
21768: PPUSH
21769: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21770: LD_VAR 0 1
21774: PPUSH
21775: CALL_OW 264
21779: PUSH
21780: LD_INT 81
21782: EQUAL
21783: NOT
21784: PUSH
21785: LD_VAR 0 1
21789: PUSH
21790: LD_EXP 76
21794: IN
21795: NOT
21796: OR
21797: IFFALSE 21801
// exit ;
21799: GO 22123
// index := GetElementIndex ( minersList , unit ) ;
21801: LD_ADDR_VAR 0 6
21805: PUSH
21806: LD_EXP 76
21810: PPUSH
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL 27295 0 2
21820: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21821: LD_ADDR_VAR 0 8
21825: PUSH
21826: LD_EXP 78
21830: PUSH
21831: LD_EXP 77
21835: PUSH
21836: LD_VAR 0 6
21840: ARRAY
21841: MINUS
21842: ST_TO_ADDR
// if not minesFreeAmount then
21843: LD_VAR 0 8
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 22123
// tmp := [ ] ;
21852: LD_ADDR_VAR 0 7
21856: PUSH
21857: EMPTY
21858: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21859: LD_ADDR_VAR 0 5
21863: PUSH
21864: DOUBLE
21865: LD_INT 1
21867: DEC
21868: ST_TO_ADDR
21869: LD_VAR 0 8
21873: PUSH
21874: FOR_TO
21875: IFFALSE 22070
// begin _d := rand ( 0 , 5 ) ;
21877: LD_ADDR_VAR 0 11
21881: PUSH
21882: LD_INT 0
21884: PPUSH
21885: LD_INT 5
21887: PPUSH
21888: CALL_OW 12
21892: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21893: LD_ADDR_VAR 0 12
21897: PUSH
21898: LD_INT 2
21900: PPUSH
21901: LD_INT 6
21903: PPUSH
21904: CALL_OW 12
21908: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21909: LD_ADDR_VAR 0 9
21913: PUSH
21914: LD_VAR 0 2
21918: PPUSH
21919: LD_VAR 0 11
21923: PPUSH
21924: LD_VAR 0 12
21928: PPUSH
21929: CALL_OW 272
21933: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21934: LD_ADDR_VAR 0 10
21938: PUSH
21939: LD_VAR 0 3
21943: PPUSH
21944: LD_VAR 0 11
21948: PPUSH
21949: LD_VAR 0 12
21953: PPUSH
21954: CALL_OW 273
21958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21959: LD_VAR 0 9
21963: PPUSH
21964: LD_VAR 0 10
21968: PPUSH
21969: CALL_OW 488
21973: PUSH
21974: LD_VAR 0 9
21978: PUSH
21979: LD_VAR 0 10
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_VAR 0 7
21992: IN
21993: NOT
21994: AND
21995: PUSH
21996: LD_VAR 0 9
22000: PPUSH
22001: LD_VAR 0 10
22005: PPUSH
22006: CALL_OW 458
22010: NOT
22011: AND
22012: IFFALSE 22054
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22014: LD_ADDR_VAR 0 7
22018: PUSH
22019: LD_VAR 0 7
22023: PPUSH
22024: LD_VAR 0 7
22028: PUSH
22029: LD_INT 1
22031: PLUS
22032: PPUSH
22033: LD_VAR 0 9
22037: PUSH
22038: LD_VAR 0 10
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PPUSH
22047: CALL_OW 1
22051: ST_TO_ADDR
22052: GO 22068
// i := i - 1 ;
22054: LD_ADDR_VAR 0 5
22058: PUSH
22059: LD_VAR 0 5
22063: PUSH
22064: LD_INT 1
22066: MINUS
22067: ST_TO_ADDR
// end ;
22068: GO 21874
22070: POP
22071: POP
// for i in tmp do
22072: LD_ADDR_VAR 0 5
22076: PUSH
22077: LD_VAR 0 7
22081: PUSH
22082: FOR_IN
22083: IFFALSE 22121
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_VAR 0 5
22094: PUSH
22095: LD_INT 1
22097: ARRAY
22098: PPUSH
22099: LD_VAR 0 5
22103: PUSH
22104: LD_INT 2
22106: ARRAY
22107: PPUSH
22108: CALL 21067 0 3
22112: NOT
22113: IFFALSE 22119
// exit ;
22115: POP
22116: POP
22117: GO 22123
22119: GO 22082
22121: POP
22122: POP
// end ;
22123: LD_VAR 0 4
22127: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
22136: PPUSH
// if not GetClass ( unit ) = class_sniper then
22137: LD_VAR 0 1
22141: PPUSH
22142: CALL_OW 257
22146: PUSH
22147: LD_INT 5
22149: EQUAL
22150: NOT
22151: IFFALSE 22155
// exit ;
22153: GO 22543
// dist := 8 ;
22155: LD_ADDR_VAR 0 5
22159: PUSH
22160: LD_INT 8
22162: ST_TO_ADDR
// viewRange := 12 ;
22163: LD_ADDR_VAR 0 7
22167: PUSH
22168: LD_INT 12
22170: ST_TO_ADDR
// side := GetSide ( unit ) ;
22171: LD_ADDR_VAR 0 6
22175: PUSH
22176: LD_VAR 0 1
22180: PPUSH
22181: CALL_OW 255
22185: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22186: LD_INT 61
22188: PPUSH
22189: LD_VAR 0 6
22193: PPUSH
22194: CALL_OW 321
22198: PUSH
22199: LD_INT 2
22201: EQUAL
22202: IFFALSE 22212
// viewRange := 16 ;
22204: LD_ADDR_VAR 0 7
22208: PUSH
22209: LD_INT 16
22211: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_VAR 0 2
22221: PPUSH
22222: LD_VAR 0 3
22226: PPUSH
22227: CALL_OW 297
22231: PUSH
22232: LD_VAR 0 5
22236: GREATER
22237: IFFALSE 22316
// begin ComMoveXY ( unit , x , y ) ;
22239: LD_VAR 0 1
22243: PPUSH
22244: LD_VAR 0 2
22248: PPUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22258: LD_INT 35
22260: PPUSH
22261: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22265: LD_VAR 0 1
22269: PPUSH
22270: LD_VAR 0 2
22274: PPUSH
22275: LD_VAR 0 3
22279: PPUSH
22280: CALL 59047 0 3
22284: NOT
22285: IFFALSE 22289
// exit ;
22287: GO 22543
// until GetDistUnitXY ( unit , x , y ) < dist ;
22289: LD_VAR 0 1
22293: PPUSH
22294: LD_VAR 0 2
22298: PPUSH
22299: LD_VAR 0 3
22303: PPUSH
22304: CALL_OW 297
22308: PUSH
22309: LD_VAR 0 5
22313: LESS
22314: IFFALSE 22258
// end ; ComTurnXY ( unit , x , y ) ;
22316: LD_VAR 0 1
22320: PPUSH
22321: LD_VAR 0 2
22325: PPUSH
22326: LD_VAR 0 3
22330: PPUSH
22331: CALL_OW 118
// wait ( 5 ) ;
22335: LD_INT 5
22337: PPUSH
22338: CALL_OW 67
// _d := GetDir ( unit ) ;
22342: LD_ADDR_VAR 0 10
22346: PUSH
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 254
22356: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22357: LD_ADDR_VAR 0 8
22361: PUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: CALL_OW 250
22371: PPUSH
22372: LD_VAR 0 10
22376: PPUSH
22377: LD_VAR 0 5
22381: PPUSH
22382: CALL_OW 272
22386: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22387: LD_ADDR_VAR 0 9
22391: PUSH
22392: LD_VAR 0 1
22396: PPUSH
22397: CALL_OW 251
22401: PPUSH
22402: LD_VAR 0 10
22406: PPUSH
22407: LD_VAR 0 5
22411: PPUSH
22412: CALL_OW 273
22416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22417: LD_VAR 0 8
22421: PPUSH
22422: LD_VAR 0 9
22426: PPUSH
22427: CALL_OW 488
22431: NOT
22432: IFFALSE 22436
// exit ;
22434: GO 22543
// ComAnimCustom ( unit , 1 ) ;
22436: LD_VAR 0 1
22440: PPUSH
22441: LD_INT 1
22443: PPUSH
22444: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22448: LD_VAR 0 8
22452: PPUSH
22453: LD_VAR 0 9
22457: PPUSH
22458: LD_VAR 0 6
22462: PPUSH
22463: LD_VAR 0 7
22467: PPUSH
22468: CALL_OW 330
// repeat wait ( 1 ) ;
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 316
22488: PUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 314
22498: OR
22499: PUSH
22500: LD_VAR 0 1
22504: PPUSH
22505: CALL_OW 302
22509: NOT
22510: OR
22511: PUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: CALL_OW 301
22521: OR
22522: IFFALSE 22472
// RemoveSeeing ( _x , _y , side ) ;
22524: LD_VAR 0 8
22528: PPUSH
22529: LD_VAR 0 9
22533: PPUSH
22534: LD_VAR 0 6
22538: PPUSH
22539: CALL_OW 331
// end ; end_of_file
22543: LD_VAR 0 4
22547: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22548: LD_INT 0
22550: PPUSH
22551: PPUSH
// if exist_mode then
22552: LD_VAR 0 2
22556: IFFALSE 22581
// unit := CreateCharacter ( prefix & ident ) else
22558: LD_ADDR_VAR 0 5
22562: PUSH
22563: LD_VAR 0 3
22567: PUSH
22568: LD_VAR 0 1
22572: STR
22573: PPUSH
22574: CALL_OW 34
22578: ST_TO_ADDR
22579: GO 22596
// unit := NewCharacter ( ident ) ;
22581: LD_ADDR_VAR 0 5
22585: PUSH
22586: LD_VAR 0 1
22590: PPUSH
22591: CALL_OW 25
22595: ST_TO_ADDR
// result := unit ;
22596: LD_ADDR_VAR 0 4
22600: PUSH
22601: LD_VAR 0 5
22605: ST_TO_ADDR
// end ;
22606: LD_VAR 0 4
22610: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22611: LD_INT 0
22613: PPUSH
22614: PPUSH
// if not side or not nation then
22615: LD_VAR 0 1
22619: NOT
22620: PUSH
22621: LD_VAR 0 2
22625: NOT
22626: OR
22627: IFFALSE 22631
// exit ;
22629: GO 23399
// case nation of nation_american :
22631: LD_VAR 0 2
22635: PUSH
22636: LD_INT 1
22638: DOUBLE
22639: EQUAL
22640: IFTRUE 22644
22642: GO 22858
22644: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22645: LD_ADDR_VAR 0 4
22649: PUSH
22650: LD_INT 35
22652: PUSH
22653: LD_INT 45
22655: PUSH
22656: LD_INT 46
22658: PUSH
22659: LD_INT 47
22661: PUSH
22662: LD_INT 82
22664: PUSH
22665: LD_INT 83
22667: PUSH
22668: LD_INT 84
22670: PUSH
22671: LD_INT 85
22673: PUSH
22674: LD_INT 86
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: LD_INT 6
22685: PUSH
22686: LD_INT 15
22688: PUSH
22689: LD_INT 16
22691: PUSH
22692: LD_INT 7
22694: PUSH
22695: LD_INT 12
22697: PUSH
22698: LD_INT 13
22700: PUSH
22701: LD_INT 10
22703: PUSH
22704: LD_INT 14
22706: PUSH
22707: LD_INT 20
22709: PUSH
22710: LD_INT 21
22712: PUSH
22713: LD_INT 22
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 32
22721: PUSH
22722: LD_INT 27
22724: PUSH
22725: LD_INT 36
22727: PUSH
22728: LD_INT 69
22730: PUSH
22731: LD_INT 39
22733: PUSH
22734: LD_INT 34
22736: PUSH
22737: LD_INT 40
22739: PUSH
22740: LD_INT 48
22742: PUSH
22743: LD_INT 49
22745: PUSH
22746: LD_INT 50
22748: PUSH
22749: LD_INT 51
22751: PUSH
22752: LD_INT 52
22754: PUSH
22755: LD_INT 53
22757: PUSH
22758: LD_INT 54
22760: PUSH
22761: LD_INT 55
22763: PUSH
22764: LD_INT 56
22766: PUSH
22767: LD_INT 57
22769: PUSH
22770: LD_INT 58
22772: PUSH
22773: LD_INT 59
22775: PUSH
22776: LD_INT 60
22778: PUSH
22779: LD_INT 61
22781: PUSH
22782: LD_INT 62
22784: PUSH
22785: LD_INT 80
22787: PUSH
22788: LD_INT 82
22790: PUSH
22791: LD_INT 83
22793: PUSH
22794: LD_INT 84
22796: PUSH
22797: LD_INT 85
22799: PUSH
22800: LD_INT 86
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: ST_TO_ADDR
22856: GO 23323
22858: LD_INT 2
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 23092
22866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22867: LD_ADDR_VAR 0 4
22871: PUSH
22872: LD_INT 35
22874: PUSH
22875: LD_INT 45
22877: PUSH
22878: LD_INT 46
22880: PUSH
22881: LD_INT 47
22883: PUSH
22884: LD_INT 82
22886: PUSH
22887: LD_INT 83
22889: PUSH
22890: LD_INT 84
22892: PUSH
22893: LD_INT 85
22895: PUSH
22896: LD_INT 87
22898: PUSH
22899: LD_INT 70
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: LD_INT 11
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: LD_INT 4
22913: PUSH
22914: LD_INT 5
22916: PUSH
22917: LD_INT 6
22919: PUSH
22920: LD_INT 15
22922: PUSH
22923: LD_INT 18
22925: PUSH
22926: LD_INT 7
22928: PUSH
22929: LD_INT 17
22931: PUSH
22932: LD_INT 8
22934: PUSH
22935: LD_INT 20
22937: PUSH
22938: LD_INT 21
22940: PUSH
22941: LD_INT 22
22943: PUSH
22944: LD_INT 72
22946: PUSH
22947: LD_INT 26
22949: PUSH
22950: LD_INT 69
22952: PUSH
22953: LD_INT 39
22955: PUSH
22956: LD_INT 40
22958: PUSH
22959: LD_INT 41
22961: PUSH
22962: LD_INT 42
22964: PUSH
22965: LD_INT 43
22967: PUSH
22968: LD_INT 48
22970: PUSH
22971: LD_INT 49
22973: PUSH
22974: LD_INT 50
22976: PUSH
22977: LD_INT 51
22979: PUSH
22980: LD_INT 52
22982: PUSH
22983: LD_INT 53
22985: PUSH
22986: LD_INT 54
22988: PUSH
22989: LD_INT 55
22991: PUSH
22992: LD_INT 56
22994: PUSH
22995: LD_INT 60
22997: PUSH
22998: LD_INT 61
23000: PUSH
23001: LD_INT 62
23003: PUSH
23004: LD_INT 66
23006: PUSH
23007: LD_INT 67
23009: PUSH
23010: LD_INT 68
23012: PUSH
23013: LD_INT 81
23015: PUSH
23016: LD_INT 82
23018: PUSH
23019: LD_INT 83
23021: PUSH
23022: LD_INT 84
23024: PUSH
23025: LD_INT 85
23027: PUSH
23028: LD_INT 87
23030: PUSH
23031: LD_INT 88
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: ST_TO_ADDR
23090: GO 23323
23092: LD_INT 3
23094: DOUBLE
23095: EQUAL
23096: IFTRUE 23100
23098: GO 23322
23100: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23101: LD_ADDR_VAR 0 4
23105: PUSH
23106: LD_INT 46
23108: PUSH
23109: LD_INT 47
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: LD_INT 82
23120: PUSH
23121: LD_INT 83
23123: PUSH
23124: LD_INT 84
23126: PUSH
23127: LD_INT 85
23129: PUSH
23130: LD_INT 86
23132: PUSH
23133: LD_INT 11
23135: PUSH
23136: LD_INT 9
23138: PUSH
23139: LD_INT 20
23141: PUSH
23142: LD_INT 19
23144: PUSH
23145: LD_INT 21
23147: PUSH
23148: LD_INT 24
23150: PUSH
23151: LD_INT 22
23153: PUSH
23154: LD_INT 25
23156: PUSH
23157: LD_INT 28
23159: PUSH
23160: LD_INT 29
23162: PUSH
23163: LD_INT 30
23165: PUSH
23166: LD_INT 31
23168: PUSH
23169: LD_INT 37
23171: PUSH
23172: LD_INT 38
23174: PUSH
23175: LD_INT 32
23177: PUSH
23178: LD_INT 27
23180: PUSH
23181: LD_INT 33
23183: PUSH
23184: LD_INT 69
23186: PUSH
23187: LD_INT 39
23189: PUSH
23190: LD_INT 34
23192: PUSH
23193: LD_INT 40
23195: PUSH
23196: LD_INT 71
23198: PUSH
23199: LD_INT 23
23201: PUSH
23202: LD_INT 44
23204: PUSH
23205: LD_INT 48
23207: PUSH
23208: LD_INT 49
23210: PUSH
23211: LD_INT 50
23213: PUSH
23214: LD_INT 51
23216: PUSH
23217: LD_INT 52
23219: PUSH
23220: LD_INT 53
23222: PUSH
23223: LD_INT 54
23225: PUSH
23226: LD_INT 55
23228: PUSH
23229: LD_INT 56
23231: PUSH
23232: LD_INT 57
23234: PUSH
23235: LD_INT 58
23237: PUSH
23238: LD_INT 59
23240: PUSH
23241: LD_INT 63
23243: PUSH
23244: LD_INT 64
23246: PUSH
23247: LD_INT 65
23249: PUSH
23250: LD_INT 82
23252: PUSH
23253: LD_INT 83
23255: PUSH
23256: LD_INT 84
23258: PUSH
23259: LD_INT 85
23261: PUSH
23262: LD_INT 86
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: ST_TO_ADDR
23320: GO 23323
23322: POP
// if state > - 1 and state < 3 then
23323: LD_VAR 0 3
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: GREATER
23332: PUSH
23333: LD_VAR 0 3
23337: PUSH
23338: LD_INT 3
23340: LESS
23341: AND
23342: IFFALSE 23399
// for i in result do
23344: LD_ADDR_VAR 0 5
23348: PUSH
23349: LD_VAR 0 4
23353: PUSH
23354: FOR_IN
23355: IFFALSE 23397
// if GetTech ( i , side ) <> state then
23357: LD_VAR 0 5
23361: PPUSH
23362: LD_VAR 0 1
23366: PPUSH
23367: CALL_OW 321
23371: PUSH
23372: LD_VAR 0 3
23376: NONEQUAL
23377: IFFALSE 23395
// result := result diff i ;
23379: LD_ADDR_VAR 0 4
23383: PUSH
23384: LD_VAR 0 4
23388: PUSH
23389: LD_VAR 0 5
23393: DIFF
23394: ST_TO_ADDR
23395: GO 23354
23397: POP
23398: POP
// end ;
23399: LD_VAR 0 4
23403: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
// result := true ;
23409: LD_ADDR_VAR 0 3
23413: PUSH
23414: LD_INT 1
23416: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23417: LD_ADDR_VAR 0 5
23421: PUSH
23422: LD_VAR 0 2
23426: PPUSH
23427: CALL_OW 480
23431: ST_TO_ADDR
// if not tmp then
23432: LD_VAR 0 5
23436: NOT
23437: IFFALSE 23441
// exit ;
23439: GO 23490
// for i in tmp do
23441: LD_ADDR_VAR 0 4
23445: PUSH
23446: LD_VAR 0 5
23450: PUSH
23451: FOR_IN
23452: IFFALSE 23488
// if GetTech ( i , side ) <> state_researched then
23454: LD_VAR 0 4
23458: PPUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 321
23468: PUSH
23469: LD_INT 2
23471: NONEQUAL
23472: IFFALSE 23486
// begin result := false ;
23474: LD_ADDR_VAR 0 3
23478: PUSH
23479: LD_INT 0
23481: ST_TO_ADDR
// exit ;
23482: POP
23483: POP
23484: GO 23490
// end ;
23486: GO 23451
23488: POP
23489: POP
// end ;
23490: LD_VAR 0 3
23494: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23495: LD_INT 0
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23510: LD_VAR 0 1
23514: NOT
23515: PUSH
23516: LD_VAR 0 1
23520: PPUSH
23521: CALL_OW 257
23525: PUSH
23526: LD_INT 9
23528: NONEQUAL
23529: OR
23530: IFFALSE 23534
// exit ;
23532: GO 24107
// side := GetSide ( unit ) ;
23534: LD_ADDR_VAR 0 9
23538: PUSH
23539: LD_VAR 0 1
23543: PPUSH
23544: CALL_OW 255
23548: ST_TO_ADDR
// tech_space := tech_spacanom ;
23549: LD_ADDR_VAR 0 12
23553: PUSH
23554: LD_INT 29
23556: ST_TO_ADDR
// tech_time := tech_taurad ;
23557: LD_ADDR_VAR 0 13
23561: PUSH
23562: LD_INT 28
23564: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23565: LD_ADDR_VAR 0 11
23569: PUSH
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 310
23579: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23580: LD_VAR 0 11
23584: PPUSH
23585: CALL_OW 247
23589: PUSH
23590: LD_INT 2
23592: EQUAL
23593: IFFALSE 23597
// exit ;
23595: GO 24107
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23597: LD_ADDR_VAR 0 8
23601: PUSH
23602: LD_INT 81
23604: PUSH
23605: LD_VAR 0 9
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 3
23616: PUSH
23617: LD_INT 21
23619: PUSH
23620: LD_INT 3
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PPUSH
23635: CALL_OW 69
23639: ST_TO_ADDR
// if not tmp then
23640: LD_VAR 0 8
23644: NOT
23645: IFFALSE 23649
// exit ;
23647: GO 24107
// if in_unit then
23649: LD_VAR 0 11
23653: IFFALSE 23677
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23655: LD_ADDR_VAR 0 10
23659: PUSH
23660: LD_VAR 0 8
23664: PPUSH
23665: LD_VAR 0 11
23669: PPUSH
23670: CALL_OW 74
23674: ST_TO_ADDR
23675: GO 23697
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23677: LD_ADDR_VAR 0 10
23681: PUSH
23682: LD_VAR 0 8
23686: PPUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: CALL_OW 74
23696: ST_TO_ADDR
// if not enemy then
23697: LD_VAR 0 10
23701: NOT
23702: IFFALSE 23706
// exit ;
23704: GO 24107
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23706: LD_VAR 0 11
23710: PUSH
23711: LD_VAR 0 11
23715: PPUSH
23716: LD_VAR 0 10
23720: PPUSH
23721: CALL_OW 296
23725: PUSH
23726: LD_INT 13
23728: GREATER
23729: AND
23730: PUSH
23731: LD_VAR 0 1
23735: PPUSH
23736: LD_VAR 0 10
23740: PPUSH
23741: CALL_OW 296
23745: PUSH
23746: LD_INT 12
23748: GREATER
23749: OR
23750: IFFALSE 23754
// exit ;
23752: GO 24107
// missile := [ 1 ] ;
23754: LD_ADDR_VAR 0 14
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23765: LD_VAR 0 9
23769: PPUSH
23770: LD_VAR 0 12
23774: PPUSH
23775: CALL_OW 325
23779: IFFALSE 23808
// missile := Replace ( missile , missile + 1 , 2 ) ;
23781: LD_ADDR_VAR 0 14
23785: PUSH
23786: LD_VAR 0 14
23790: PPUSH
23791: LD_VAR 0 14
23795: PUSH
23796: LD_INT 1
23798: PLUS
23799: PPUSH
23800: LD_INT 2
23802: PPUSH
23803: CALL_OW 1
23807: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23808: LD_VAR 0 9
23812: PPUSH
23813: LD_VAR 0 13
23817: PPUSH
23818: CALL_OW 325
23822: PUSH
23823: LD_VAR 0 10
23827: PPUSH
23828: CALL_OW 255
23832: PPUSH
23833: LD_VAR 0 13
23837: PPUSH
23838: CALL_OW 325
23842: NOT
23843: AND
23844: IFFALSE 23873
// missile := Replace ( missile , missile + 1 , 3 ) ;
23846: LD_ADDR_VAR 0 14
23850: PUSH
23851: LD_VAR 0 14
23855: PPUSH
23856: LD_VAR 0 14
23860: PUSH
23861: LD_INT 1
23863: PLUS
23864: PPUSH
23865: LD_INT 3
23867: PPUSH
23868: CALL_OW 1
23872: ST_TO_ADDR
// if missile < 2 then
23873: LD_VAR 0 14
23877: PUSH
23878: LD_INT 2
23880: LESS
23881: IFFALSE 23885
// exit ;
23883: GO 24107
// x := GetX ( enemy ) ;
23885: LD_ADDR_VAR 0 4
23889: PUSH
23890: LD_VAR 0 10
23894: PPUSH
23895: CALL_OW 250
23899: ST_TO_ADDR
// y := GetY ( enemy ) ;
23900: LD_ADDR_VAR 0 5
23904: PUSH
23905: LD_VAR 0 10
23909: PPUSH
23910: CALL_OW 251
23914: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23915: LD_ADDR_VAR 0 6
23919: PUSH
23920: LD_VAR 0 4
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PPUSH
23929: LD_INT 1
23931: PPUSH
23932: CALL_OW 12
23936: PLUS
23937: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23938: LD_ADDR_VAR 0 7
23942: PUSH
23943: LD_VAR 0 5
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 12
23959: PLUS
23960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23961: LD_VAR 0 6
23965: PPUSH
23966: LD_VAR 0 7
23970: PPUSH
23971: CALL_OW 488
23975: NOT
23976: IFFALSE 23998
// begin _x := x ;
23978: LD_ADDR_VAR 0 6
23982: PUSH
23983: LD_VAR 0 4
23987: ST_TO_ADDR
// _y := y ;
23988: LD_ADDR_VAR 0 7
23992: PUSH
23993: LD_VAR 0 5
23997: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: LD_INT 1
24005: PPUSH
24006: LD_VAR 0 14
24010: PPUSH
24011: CALL_OW 12
24015: ST_TO_ADDR
// case i of 1 :
24016: LD_VAR 0 3
24020: PUSH
24021: LD_INT 1
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24046
24029: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_VAR 0 10
24039: PPUSH
24040: CALL_OW 115
24044: GO 24107
24046: LD_INT 2
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24076
24054: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24055: LD_VAR 0 1
24059: PPUSH
24060: LD_VAR 0 6
24064: PPUSH
24065: LD_VAR 0 7
24069: PPUSH
24070: CALL_OW 153
24074: GO 24107
24076: LD_INT 3
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24106
24084: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24085: LD_VAR 0 1
24089: PPUSH
24090: LD_VAR 0 6
24094: PPUSH
24095: LD_VAR 0 7
24099: PPUSH
24100: CALL_OW 154
24104: GO 24107
24106: POP
// end ;
24107: LD_VAR 0 2
24111: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
24116: PPUSH
24117: PPUSH
24118: PPUSH
24119: PPUSH
// if not unit or not building then
24120: LD_VAR 0 1
24124: NOT
24125: PUSH
24126: LD_VAR 0 2
24130: NOT
24131: OR
24132: IFFALSE 24136
// exit ;
24134: GO 24294
// x := GetX ( building ) ;
24136: LD_ADDR_VAR 0 5
24140: PUSH
24141: LD_VAR 0 2
24145: PPUSH
24146: CALL_OW 250
24150: ST_TO_ADDR
// y := GetY ( building ) ;
24151: LD_ADDR_VAR 0 6
24155: PUSH
24156: LD_VAR 0 2
24160: PPUSH
24161: CALL_OW 251
24165: ST_TO_ADDR
// for i = 0 to 5 do
24166: LD_ADDR_VAR 0 4
24170: PUSH
24171: DOUBLE
24172: LD_INT 0
24174: DEC
24175: ST_TO_ADDR
24176: LD_INT 5
24178: PUSH
24179: FOR_TO
24180: IFFALSE 24292
// begin _x := ShiftX ( x , i , 3 ) ;
24182: LD_ADDR_VAR 0 7
24186: PUSH
24187: LD_VAR 0 5
24191: PPUSH
24192: LD_VAR 0 4
24196: PPUSH
24197: LD_INT 3
24199: PPUSH
24200: CALL_OW 272
24204: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24205: LD_ADDR_VAR 0 8
24209: PUSH
24210: LD_VAR 0 6
24214: PPUSH
24215: LD_VAR 0 4
24219: PPUSH
24220: LD_INT 3
24222: PPUSH
24223: CALL_OW 273
24227: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24228: LD_VAR 0 7
24232: PPUSH
24233: LD_VAR 0 8
24237: PPUSH
24238: CALL_OW 488
24242: NOT
24243: IFFALSE 24247
// continue ;
24245: GO 24179
// if HexInfo ( _x , _y ) = 0 then
24247: LD_VAR 0 7
24251: PPUSH
24252: LD_VAR 0 8
24256: PPUSH
24257: CALL_OW 428
24261: PUSH
24262: LD_INT 0
24264: EQUAL
24265: IFFALSE 24290
// begin ComMoveXY ( unit , _x , _y ) ;
24267: LD_VAR 0 1
24271: PPUSH
24272: LD_VAR 0 7
24276: PPUSH
24277: LD_VAR 0 8
24281: PPUSH
24282: CALL_OW 111
// exit ;
24286: POP
24287: POP
24288: GO 24294
// end ; end ;
24290: GO 24179
24292: POP
24293: POP
// end ;
24294: LD_VAR 0 3
24298: RET
// export function ScanBase ( side , base_area ) ; begin
24299: LD_INT 0
24301: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24302: LD_ADDR_VAR 0 3
24306: PUSH
24307: LD_VAR 0 2
24311: PPUSH
24312: LD_INT 81
24314: PUSH
24315: LD_VAR 0 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PPUSH
24324: CALL_OW 70
24328: ST_TO_ADDR
// end ;
24329: LD_VAR 0 3
24333: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24334: LD_INT 0
24336: PPUSH
24337: PPUSH
24338: PPUSH
24339: PPUSH
// result := false ;
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_INT 0
24347: ST_TO_ADDR
// side := GetSide ( unit ) ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_VAR 0 1
24357: PPUSH
24358: CALL_OW 255
24362: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24363: LD_ADDR_VAR 0 4
24367: PUSH
24368: LD_VAR 0 1
24372: PPUSH
24373: CALL_OW 248
24377: ST_TO_ADDR
// case nat of 1 :
24378: LD_VAR 0 4
24382: PUSH
24383: LD_INT 1
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 24402
24391: POP
// tech := tech_lassight ; 2 :
24392: LD_ADDR_VAR 0 5
24396: PUSH
24397: LD_INT 12
24399: ST_TO_ADDR
24400: GO 24441
24402: LD_INT 2
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24421
24410: POP
// tech := tech_mortar ; 3 :
24411: LD_ADDR_VAR 0 5
24415: PUSH
24416: LD_INT 41
24418: ST_TO_ADDR
24419: GO 24441
24421: LD_INT 3
24423: DOUBLE
24424: EQUAL
24425: IFTRUE 24429
24427: GO 24440
24429: POP
// tech := tech_bazooka ; end ;
24430: LD_ADDR_VAR 0 5
24434: PUSH
24435: LD_INT 44
24437: ST_TO_ADDR
24438: GO 24441
24440: POP
// if Researched ( side , tech ) then
24441: LD_VAR 0 3
24445: PPUSH
24446: LD_VAR 0 5
24450: PPUSH
24451: CALL_OW 325
24455: IFFALSE 24482
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24457: LD_ADDR_VAR 0 2
24461: PUSH
24462: LD_INT 5
24464: PUSH
24465: LD_INT 8
24467: PUSH
24468: LD_INT 9
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: PUSH
24476: LD_VAR 0 4
24480: ARRAY
24481: ST_TO_ADDR
// end ;
24482: LD_VAR 0 2
24486: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24487: LD_INT 0
24489: PPUSH
24490: PPUSH
24491: PPUSH
// if not mines then
24492: LD_VAR 0 2
24496: NOT
24497: IFFALSE 24501
// exit ;
24499: GO 24645
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24501: LD_ADDR_VAR 0 5
24505: PUSH
24506: LD_INT 81
24508: PUSH
24509: LD_VAR 0 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 3
24520: PUSH
24521: LD_INT 21
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PPUSH
24539: CALL_OW 69
24543: ST_TO_ADDR
// for i in mines do
24544: LD_ADDR_VAR 0 4
24548: PUSH
24549: LD_VAR 0 2
24553: PUSH
24554: FOR_IN
24555: IFFALSE 24643
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24557: LD_VAR 0 4
24561: PUSH
24562: LD_INT 1
24564: ARRAY
24565: PPUSH
24566: LD_VAR 0 4
24570: PUSH
24571: LD_INT 2
24573: ARRAY
24574: PPUSH
24575: CALL_OW 458
24579: NOT
24580: IFFALSE 24584
// continue ;
24582: GO 24554
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24584: LD_VAR 0 4
24588: PUSH
24589: LD_INT 1
24591: ARRAY
24592: PPUSH
24593: LD_VAR 0 4
24597: PUSH
24598: LD_INT 2
24600: ARRAY
24601: PPUSH
24602: CALL_OW 428
24606: PUSH
24607: LD_VAR 0 5
24611: IN
24612: IFFALSE 24641
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24614: LD_VAR 0 4
24618: PUSH
24619: LD_INT 1
24621: ARRAY
24622: PPUSH
24623: LD_VAR 0 4
24627: PUSH
24628: LD_INT 2
24630: ARRAY
24631: PPUSH
24632: LD_VAR 0 1
24636: PPUSH
24637: CALL_OW 456
// end ;
24641: GO 24554
24643: POP
24644: POP
// end ;
24645: LD_VAR 0 3
24649: RET
// export function Count ( array ) ; begin
24650: LD_INT 0
24652: PPUSH
// result := array + 0 ;
24653: LD_ADDR_VAR 0 2
24657: PUSH
24658: LD_VAR 0 1
24662: PUSH
24663: LD_INT 0
24665: PLUS
24666: ST_TO_ADDR
// end ;
24667: LD_VAR 0 2
24671: RET
// export function IsEmpty ( building ) ; begin
24672: LD_INT 0
24674: PPUSH
// if not building then
24675: LD_VAR 0 1
24679: NOT
24680: IFFALSE 24684
// exit ;
24682: GO 24727
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24684: LD_ADDR_VAR 0 2
24688: PUSH
24689: LD_VAR 0 1
24693: PUSH
24694: LD_INT 22
24696: PUSH
24697: LD_VAR 0 1
24701: PPUSH
24702: CALL_OW 255
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 58
24713: PUSH
24714: EMPTY
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: IN
24726: ST_TO_ADDR
// end ;
24727: LD_VAR 0 2
24731: RET
// export function IsNotFull ( building ) ; var places ; begin
24732: LD_INT 0
24734: PPUSH
24735: PPUSH
// if not building then
24736: LD_VAR 0 1
24740: NOT
24741: IFFALSE 24745
// exit ;
24743: GO 24773
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24745: LD_ADDR_VAR 0 2
24749: PUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_INT 3
24757: PUSH
24758: LD_INT 62
24760: PUSH
24761: EMPTY
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PPUSH
24768: CALL_OW 72
24772: ST_TO_ADDR
// end ;
24773: LD_VAR 0 2
24777: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24778: LD_INT 0
24780: PPUSH
24781: PPUSH
24782: PPUSH
24783: PPUSH
// tmp := [ ] ;
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: EMPTY
24790: ST_TO_ADDR
// list := [ ] ;
24791: LD_ADDR_VAR 0 5
24795: PUSH
24796: EMPTY
24797: ST_TO_ADDR
// for i = 16 to 25 do
24798: LD_ADDR_VAR 0 4
24802: PUSH
24803: DOUBLE
24804: LD_INT 16
24806: DEC
24807: ST_TO_ADDR
24808: LD_INT 25
24810: PUSH
24811: FOR_TO
24812: IFFALSE 24885
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24814: LD_ADDR_VAR 0 3
24818: PUSH
24819: LD_VAR 0 3
24823: PUSH
24824: LD_INT 22
24826: PUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: CALL_OW 255
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 91
24843: PUSH
24844: LD_VAR 0 1
24848: PUSH
24849: LD_INT 6
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 30
24859: PUSH
24860: LD_VAR 0 4
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: PPUSH
24877: CALL_OW 69
24881: ADD
24882: ST_TO_ADDR
24883: GO 24811
24885: POP
24886: POP
// for i = 1 to tmp do
24887: LD_ADDR_VAR 0 4
24891: PUSH
24892: DOUBLE
24893: LD_INT 1
24895: DEC
24896: ST_TO_ADDR
24897: LD_VAR 0 3
24901: PUSH
24902: FOR_TO
24903: IFFALSE 24991
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24905: LD_ADDR_VAR 0 5
24909: PUSH
24910: LD_VAR 0 5
24914: PUSH
24915: LD_VAR 0 3
24919: PUSH
24920: LD_VAR 0 4
24924: ARRAY
24925: PPUSH
24926: CALL_OW 266
24930: PUSH
24931: LD_VAR 0 3
24935: PUSH
24936: LD_VAR 0 4
24940: ARRAY
24941: PPUSH
24942: CALL_OW 250
24946: PUSH
24947: LD_VAR 0 3
24951: PUSH
24952: LD_VAR 0 4
24956: ARRAY
24957: PPUSH
24958: CALL_OW 251
24962: PUSH
24963: LD_VAR 0 3
24967: PUSH
24968: LD_VAR 0 4
24972: ARRAY
24973: PPUSH
24974: CALL_OW 254
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: ADD
24988: ST_TO_ADDR
24989: GO 24902
24991: POP
24992: POP
// result := list ;
24993: LD_ADDR_VAR 0 2
24997: PUSH
24998: LD_VAR 0 5
25002: ST_TO_ADDR
// end ;
25003: LD_VAR 0 2
25007: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25008: LD_INT 0
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
// if not factory then
25017: LD_VAR 0 1
25021: NOT
25022: IFFALSE 25026
// exit ;
25024: GO 25619
// if control = control_apeman then
25026: LD_VAR 0 4
25030: PUSH
25031: LD_INT 5
25033: EQUAL
25034: IFFALSE 25143
// begin tmp := UnitsInside ( factory ) ;
25036: LD_ADDR_VAR 0 8
25040: PUSH
25041: LD_VAR 0 1
25045: PPUSH
25046: CALL_OW 313
25050: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25051: LD_VAR 0 8
25055: PPUSH
25056: LD_INT 25
25058: PUSH
25059: LD_INT 12
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 72
25070: NOT
25071: IFFALSE 25081
// control := control_manual ;
25073: LD_ADDR_VAR 0 4
25077: PUSH
25078: LD_INT 1
25080: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25081: LD_ADDR_VAR 0 8
25085: PUSH
25086: LD_VAR 0 1
25090: PPUSH
25091: CALL 24778 0 1
25095: ST_TO_ADDR
// if tmp then
25096: LD_VAR 0 8
25100: IFFALSE 25143
// begin for i in tmp do
25102: LD_ADDR_VAR 0 7
25106: PUSH
25107: LD_VAR 0 8
25111: PUSH
25112: FOR_IN
25113: IFFALSE 25141
// if i [ 1 ] = b_ext_radio then
25115: LD_VAR 0 7
25119: PUSH
25120: LD_INT 1
25122: ARRAY
25123: PUSH
25124: LD_INT 22
25126: EQUAL
25127: IFFALSE 25139
// begin control := control_remote ;
25129: LD_ADDR_VAR 0 4
25133: PUSH
25134: LD_INT 2
25136: ST_TO_ADDR
// break ;
25137: GO 25141
// end ;
25139: GO 25112
25141: POP
25142: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25143: LD_VAR 0 1
25147: PPUSH
25148: LD_VAR 0 2
25152: PPUSH
25153: LD_VAR 0 3
25157: PPUSH
25158: LD_VAR 0 4
25162: PPUSH
25163: LD_VAR 0 5
25167: PPUSH
25168: CALL_OW 448
25172: IFFALSE 25207
// begin result := [ chassis , engine , control , weapon ] ;
25174: LD_ADDR_VAR 0 6
25178: PUSH
25179: LD_VAR 0 2
25183: PUSH
25184: LD_VAR 0 3
25188: PUSH
25189: LD_VAR 0 4
25193: PUSH
25194: LD_VAR 0 5
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: ST_TO_ADDR
// exit ;
25205: GO 25619
// end ; _chassis := AvailableChassisList ( factory ) ;
25207: LD_ADDR_VAR 0 9
25211: PUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 475
25221: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25222: LD_ADDR_VAR 0 11
25226: PUSH
25227: LD_VAR 0 1
25231: PPUSH
25232: CALL_OW 476
25236: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25237: LD_ADDR_VAR 0 12
25241: PUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 477
25251: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25252: LD_ADDR_VAR 0 10
25256: PUSH
25257: LD_VAR 0 1
25261: PPUSH
25262: CALL_OW 478
25266: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25267: LD_VAR 0 9
25271: NOT
25272: PUSH
25273: LD_VAR 0 11
25277: NOT
25278: OR
25279: PUSH
25280: LD_VAR 0 12
25284: NOT
25285: OR
25286: PUSH
25287: LD_VAR 0 10
25291: NOT
25292: OR
25293: IFFALSE 25328
// begin result := [ chassis , engine , control , weapon ] ;
25295: LD_ADDR_VAR 0 6
25299: PUSH
25300: LD_VAR 0 2
25304: PUSH
25305: LD_VAR 0 3
25309: PUSH
25310: LD_VAR 0 4
25314: PUSH
25315: LD_VAR 0 5
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: ST_TO_ADDR
// exit ;
25326: GO 25619
// end ; if not chassis in _chassis then
25328: LD_VAR 0 2
25332: PUSH
25333: LD_VAR 0 9
25337: IN
25338: NOT
25339: IFFALSE 25365
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25341: LD_ADDR_VAR 0 2
25345: PUSH
25346: LD_VAR 0 9
25350: PUSH
25351: LD_INT 1
25353: PPUSH
25354: LD_VAR 0 9
25358: PPUSH
25359: CALL_OW 12
25363: ARRAY
25364: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25365: LD_VAR 0 2
25369: PPUSH
25370: LD_VAR 0 3
25374: PPUSH
25375: CALL 25624 0 2
25379: NOT
25380: IFFALSE 25439
// repeat engine := _engine [ 1 ] ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_VAR 0 11
25391: PUSH
25392: LD_INT 1
25394: ARRAY
25395: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25396: LD_ADDR_VAR 0 11
25400: PUSH
25401: LD_VAR 0 11
25405: PPUSH
25406: LD_INT 1
25408: PPUSH
25409: CALL_OW 3
25413: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25414: LD_VAR 0 2
25418: PPUSH
25419: LD_VAR 0 3
25423: PPUSH
25424: CALL 25624 0 2
25428: PUSH
25429: LD_VAR 0 11
25433: PUSH
25434: EMPTY
25435: EQUAL
25436: OR
25437: IFFALSE 25382
// if not control in _control then
25439: LD_VAR 0 4
25443: PUSH
25444: LD_VAR 0 12
25448: IN
25449: NOT
25450: IFFALSE 25476
// control := _control [ rand ( 1 , _control ) ] ;
25452: LD_ADDR_VAR 0 4
25456: PUSH
25457: LD_VAR 0 12
25461: PUSH
25462: LD_INT 1
25464: PPUSH
25465: LD_VAR 0 12
25469: PPUSH
25470: CALL_OW 12
25474: ARRAY
25475: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25476: LD_VAR 0 2
25480: PPUSH
25481: LD_VAR 0 5
25485: PPUSH
25486: CALL 25844 0 2
25490: NOT
25491: IFFALSE 25550
// repeat weapon := _weapon [ 1 ] ;
25493: LD_ADDR_VAR 0 5
25497: PUSH
25498: LD_VAR 0 10
25502: PUSH
25503: LD_INT 1
25505: ARRAY
25506: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25507: LD_ADDR_VAR 0 10
25511: PUSH
25512: LD_VAR 0 10
25516: PPUSH
25517: LD_INT 1
25519: PPUSH
25520: CALL_OW 3
25524: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25525: LD_VAR 0 2
25529: PPUSH
25530: LD_VAR 0 5
25534: PPUSH
25535: CALL 25844 0 2
25539: PUSH
25540: LD_VAR 0 10
25544: PUSH
25545: EMPTY
25546: EQUAL
25547: OR
25548: IFFALSE 25493
// result := [ ] ;
25550: LD_ADDR_VAR 0 6
25554: PUSH
25555: EMPTY
25556: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25557: LD_VAR 0 1
25561: PPUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: LD_VAR 0 3
25571: PPUSH
25572: LD_VAR 0 4
25576: PPUSH
25577: LD_VAR 0 5
25581: PPUSH
25582: CALL_OW 448
25586: IFFALSE 25619
// result := [ chassis , engine , control , weapon ] ;
25588: LD_ADDR_VAR 0 6
25592: PUSH
25593: LD_VAR 0 2
25597: PUSH
25598: LD_VAR 0 3
25602: PUSH
25603: LD_VAR 0 4
25607: PUSH
25608: LD_VAR 0 5
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
// end ;
25619: LD_VAR 0 6
25623: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25624: LD_INT 0
25626: PPUSH
// if not chassis or not engine then
25627: LD_VAR 0 1
25631: NOT
25632: PUSH
25633: LD_VAR 0 2
25637: NOT
25638: OR
25639: IFFALSE 25643
// exit ;
25641: GO 25839
// case engine of engine_solar :
25643: LD_VAR 0 2
25647: PUSH
25648: LD_INT 2
25650: DOUBLE
25651: EQUAL
25652: IFTRUE 25656
25654: GO 25694
25656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 11
25664: PUSH
25665: LD_INT 12
25667: PUSH
25668: LD_INT 13
25670: PUSH
25671: LD_INT 14
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 3
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: ST_TO_ADDR
25692: GO 25823
25694: LD_INT 1
25696: DOUBLE
25697: EQUAL
25698: IFTRUE 25702
25700: GO 25764
25702: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25703: LD_ADDR_VAR 0 3
25707: PUSH
25708: LD_INT 11
25710: PUSH
25711: LD_INT 12
25713: PUSH
25714: LD_INT 13
25716: PUSH
25717: LD_INT 14
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: LD_INT 4
25731: PUSH
25732: LD_INT 5
25734: PUSH
25735: LD_INT 21
25737: PUSH
25738: LD_INT 23
25740: PUSH
25741: LD_INT 22
25743: PUSH
25744: LD_INT 24
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: ST_TO_ADDR
25762: GO 25823
25764: LD_INT 3
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25822
25772: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25773: LD_ADDR_VAR 0 3
25777: PUSH
25778: LD_INT 13
25780: PUSH
25781: LD_INT 14
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: LD_INT 4
25792: PUSH
25793: LD_INT 5
25795: PUSH
25796: LD_INT 21
25798: PUSH
25799: LD_INT 22
25801: PUSH
25802: LD_INT 23
25804: PUSH
25805: LD_INT 24
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: ST_TO_ADDR
25820: GO 25823
25822: POP
// result := ( chassis in result ) ;
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: LD_VAR 0 1
25832: PUSH
25833: LD_VAR 0 3
25837: IN
25838: ST_TO_ADDR
// end ;
25839: LD_VAR 0 3
25843: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25844: LD_INT 0
25846: PPUSH
// if not chassis or not weapon then
25847: LD_VAR 0 1
25851: NOT
25852: PUSH
25853: LD_VAR 0 2
25857: NOT
25858: OR
25859: IFFALSE 25863
// exit ;
25861: GO 26923
// case weapon of us_machine_gun :
25863: LD_VAR 0 2
25867: PUSH
25868: LD_INT 2
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 25906
25876: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25877: LD_ADDR_VAR 0 3
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: LD_INT 4
25893: PUSH
25894: LD_INT 5
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: ST_TO_ADDR
25904: GO 26907
25906: LD_INT 3
25908: DOUBLE
25909: EQUAL
25910: IFTRUE 25914
25912: GO 25944
25914: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25915: LD_ADDR_VAR 0 3
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 3
25928: PUSH
25929: LD_INT 4
25931: PUSH
25932: LD_INT 5
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: ST_TO_ADDR
25942: GO 26907
25944: LD_INT 11
25946: DOUBLE
25947: EQUAL
25948: IFTRUE 25952
25950: GO 25982
25952: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25953: LD_ADDR_VAR 0 3
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: LD_INT 4
25969: PUSH
25970: LD_INT 5
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: ST_TO_ADDR
25980: GO 26907
25982: LD_INT 4
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26016
25990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25991: LD_ADDR_VAR 0 3
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 3
26001: PUSH
26002: LD_INT 4
26004: PUSH
26005: LD_INT 5
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: ST_TO_ADDR
26014: GO 26907
26016: LD_INT 5
26018: DOUBLE
26019: EQUAL
26020: IFTRUE 26024
26022: GO 26050
26024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26025: LD_ADDR_VAR 0 3
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: LD_INT 5
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: ST_TO_ADDR
26048: GO 26907
26050: LD_INT 9
26052: DOUBLE
26053: EQUAL
26054: IFTRUE 26058
26056: GO 26084
26058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26059: LD_ADDR_VAR 0 3
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: LD_INT 3
26069: PUSH
26070: LD_INT 4
26072: PUSH
26073: LD_INT 5
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: ST_TO_ADDR
26082: GO 26907
26084: LD_INT 7
26086: DOUBLE
26087: EQUAL
26088: IFTRUE 26092
26090: GO 26118
26092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: LD_INT 3
26103: PUSH
26104: LD_INT 4
26106: PUSH
26107: LD_INT 5
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: ST_TO_ADDR
26116: GO 26907
26118: LD_INT 12
26120: DOUBLE
26121: EQUAL
26122: IFTRUE 26126
26124: GO 26152
26126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26127: LD_ADDR_VAR 0 3
26131: PUSH
26132: LD_INT 2
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: LD_INT 4
26140: PUSH
26141: LD_INT 5
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
26150: GO 26907
26152: LD_INT 13
26154: DOUBLE
26155: EQUAL
26156: IFTRUE 26160
26158: GO 26186
26160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26161: LD_ADDR_VAR 0 3
26165: PUSH
26166: LD_INT 2
26168: PUSH
26169: LD_INT 3
26171: PUSH
26172: LD_INT 4
26174: PUSH
26175: LD_INT 5
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: ST_TO_ADDR
26184: GO 26907
26186: LD_INT 14
26188: DOUBLE
26189: EQUAL
26190: IFTRUE 26194
26192: GO 26212
26194: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26195: LD_ADDR_VAR 0 3
26199: PUSH
26200: LD_INT 4
26202: PUSH
26203: LD_INT 5
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: ST_TO_ADDR
26210: GO 26907
26212: LD_INT 6
26214: DOUBLE
26215: EQUAL
26216: IFTRUE 26220
26218: GO 26238
26220: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26221: LD_ADDR_VAR 0 3
26225: PUSH
26226: LD_INT 4
26228: PUSH
26229: LD_INT 5
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: ST_TO_ADDR
26236: GO 26907
26238: LD_INT 10
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26264
26246: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26247: LD_ADDR_VAR 0 3
26251: PUSH
26252: LD_INT 4
26254: PUSH
26255: LD_INT 5
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: ST_TO_ADDR
26262: GO 26907
26264: LD_INT 22
26266: DOUBLE
26267: EQUAL
26268: IFTRUE 26272
26270: GO 26298
26272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_INT 11
26280: PUSH
26281: LD_INT 12
26283: PUSH
26284: LD_INT 13
26286: PUSH
26287: LD_INT 14
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
26296: GO 26907
26298: LD_INT 23
26300: DOUBLE
26301: EQUAL
26302: IFTRUE 26306
26304: GO 26332
26306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26307: LD_ADDR_VAR 0 3
26311: PUSH
26312: LD_INT 11
26314: PUSH
26315: LD_INT 12
26317: PUSH
26318: LD_INT 13
26320: PUSH
26321: LD_INT 14
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: ST_TO_ADDR
26330: GO 26907
26332: LD_INT 24
26334: DOUBLE
26335: EQUAL
26336: IFTRUE 26340
26338: GO 26366
26340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26341: LD_ADDR_VAR 0 3
26345: PUSH
26346: LD_INT 11
26348: PUSH
26349: LD_INT 12
26351: PUSH
26352: LD_INT 13
26354: PUSH
26355: LD_INT 14
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: ST_TO_ADDR
26364: GO 26907
26366: LD_INT 30
26368: DOUBLE
26369: EQUAL
26370: IFTRUE 26374
26372: GO 26400
26374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_INT 11
26382: PUSH
26383: LD_INT 12
26385: PUSH
26386: LD_INT 13
26388: PUSH
26389: LD_INT 14
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: ST_TO_ADDR
26398: GO 26907
26400: LD_INT 25
26402: DOUBLE
26403: EQUAL
26404: IFTRUE 26408
26406: GO 26426
26408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26409: LD_ADDR_VAR 0 3
26413: PUSH
26414: LD_INT 13
26416: PUSH
26417: LD_INT 14
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: ST_TO_ADDR
26424: GO 26907
26426: LD_INT 27
26428: DOUBLE
26429: EQUAL
26430: IFTRUE 26434
26432: GO 26452
26434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26435: LD_ADDR_VAR 0 3
26439: PUSH
26440: LD_INT 13
26442: PUSH
26443: LD_INT 14
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: ST_TO_ADDR
26450: GO 26907
26452: LD_INT 92
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26486
26460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26461: LD_ADDR_VAR 0 3
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: LD_INT 12
26471: PUSH
26472: LD_INT 13
26474: PUSH
26475: LD_INT 14
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
26484: GO 26907
26486: LD_INT 28
26488: DOUBLE
26489: EQUAL
26490: IFTRUE 26494
26492: GO 26512
26494: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 13
26502: PUSH
26503: LD_INT 14
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: ST_TO_ADDR
26510: GO 26907
26512: LD_INT 29
26514: DOUBLE
26515: EQUAL
26516: IFTRUE 26520
26518: GO 26538
26520: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26521: LD_ADDR_VAR 0 3
26525: PUSH
26526: LD_INT 13
26528: PUSH
26529: LD_INT 14
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: ST_TO_ADDR
26536: GO 26907
26538: LD_INT 31
26540: DOUBLE
26541: EQUAL
26542: IFTRUE 26546
26544: GO 26564
26546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26547: LD_ADDR_VAR 0 3
26551: PUSH
26552: LD_INT 13
26554: PUSH
26555: LD_INT 14
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: ST_TO_ADDR
26562: GO 26907
26564: LD_INT 26
26566: DOUBLE
26567: EQUAL
26568: IFTRUE 26572
26570: GO 26590
26572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26573: LD_ADDR_VAR 0 3
26577: PUSH
26578: LD_INT 13
26580: PUSH
26581: LD_INT 14
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: ST_TO_ADDR
26588: GO 26907
26590: LD_INT 42
26592: DOUBLE
26593: EQUAL
26594: IFTRUE 26598
26596: GO 26624
26598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_INT 21
26606: PUSH
26607: LD_INT 22
26609: PUSH
26610: LD_INT 23
26612: PUSH
26613: LD_INT 24
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
26622: GO 26907
26624: LD_INT 43
26626: DOUBLE
26627: EQUAL
26628: IFTRUE 26632
26630: GO 26658
26632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_INT 21
26640: PUSH
26641: LD_INT 22
26643: PUSH
26644: LD_INT 23
26646: PUSH
26647: LD_INT 24
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: ST_TO_ADDR
26656: GO 26907
26658: LD_INT 44
26660: DOUBLE
26661: EQUAL
26662: IFTRUE 26666
26664: GO 26692
26666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_INT 21
26674: PUSH
26675: LD_INT 22
26677: PUSH
26678: LD_INT 23
26680: PUSH
26681: LD_INT 24
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: ST_TO_ADDR
26690: GO 26907
26692: LD_INT 45
26694: DOUBLE
26695: EQUAL
26696: IFTRUE 26700
26698: GO 26726
26700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26701: LD_ADDR_VAR 0 3
26705: PUSH
26706: LD_INT 21
26708: PUSH
26709: LD_INT 22
26711: PUSH
26712: LD_INT 23
26714: PUSH
26715: LD_INT 24
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: ST_TO_ADDR
26724: GO 26907
26726: LD_INT 49
26728: DOUBLE
26729: EQUAL
26730: IFTRUE 26734
26732: GO 26760
26734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_INT 21
26742: PUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 23
26748: PUSH
26749: LD_INT 24
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: ST_TO_ADDR
26758: GO 26907
26760: LD_INT 51
26762: DOUBLE
26763: EQUAL
26764: IFTRUE 26768
26766: GO 26794
26768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26769: LD_ADDR_VAR 0 3
26773: PUSH
26774: LD_INT 21
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_INT 23
26782: PUSH
26783: LD_INT 24
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: ST_TO_ADDR
26792: GO 26907
26794: LD_INT 52
26796: DOUBLE
26797: EQUAL
26798: IFTRUE 26802
26800: GO 26828
26802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_INT 21
26810: PUSH
26811: LD_INT 22
26813: PUSH
26814: LD_INT 23
26816: PUSH
26817: LD_INT 24
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
26826: GO 26907
26828: LD_INT 53
26830: DOUBLE
26831: EQUAL
26832: IFTRUE 26836
26834: GO 26854
26836: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26837: LD_ADDR_VAR 0 3
26841: PUSH
26842: LD_INT 23
26844: PUSH
26845: LD_INT 24
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: ST_TO_ADDR
26852: GO 26907
26854: LD_INT 46
26856: DOUBLE
26857: EQUAL
26858: IFTRUE 26862
26860: GO 26880
26862: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26863: LD_ADDR_VAR 0 3
26867: PUSH
26868: LD_INT 23
26870: PUSH
26871: LD_INT 24
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: ST_TO_ADDR
26878: GO 26907
26880: LD_INT 47
26882: DOUBLE
26883: EQUAL
26884: IFTRUE 26888
26886: GO 26906
26888: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: LD_INT 23
26896: PUSH
26897: LD_INT 24
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: ST_TO_ADDR
26904: GO 26907
26906: POP
// result := ( chassis in result ) ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_VAR 0 1
26916: PUSH
26917: LD_VAR 0 3
26921: IN
26922: ST_TO_ADDR
// end ;
26923: LD_VAR 0 3
26927: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26928: LD_INT 0
26930: PPUSH
26931: PPUSH
26932: PPUSH
26933: PPUSH
26934: PPUSH
26935: PPUSH
26936: PPUSH
// result := array ;
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_VAR 0 1
26946: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26947: LD_VAR 0 1
26951: NOT
26952: PUSH
26953: LD_VAR 0 2
26957: NOT
26958: OR
26959: PUSH
26960: LD_VAR 0 3
26964: NOT
26965: OR
26966: PUSH
26967: LD_VAR 0 2
26971: PUSH
26972: LD_VAR 0 1
26976: GREATER
26977: OR
26978: PUSH
26979: LD_VAR 0 3
26983: PUSH
26984: LD_VAR 0 1
26988: GREATER
26989: OR
26990: IFFALSE 26994
// exit ;
26992: GO 27290
// if direction then
26994: LD_VAR 0 4
26998: IFFALSE 27062
// begin d := 1 ;
27000: LD_ADDR_VAR 0 9
27004: PUSH
27005: LD_INT 1
27007: ST_TO_ADDR
// if i_from > i_to then
27008: LD_VAR 0 2
27012: PUSH
27013: LD_VAR 0 3
27017: GREATER
27018: IFFALSE 27044
// length := ( array - i_from ) + i_to else
27020: LD_ADDR_VAR 0 11
27024: PUSH
27025: LD_VAR 0 1
27029: PUSH
27030: LD_VAR 0 2
27034: MINUS
27035: PUSH
27036: LD_VAR 0 3
27040: PLUS
27041: ST_TO_ADDR
27042: GO 27060
// length := i_to - i_from ;
27044: LD_ADDR_VAR 0 11
27048: PUSH
27049: LD_VAR 0 3
27053: PUSH
27054: LD_VAR 0 2
27058: MINUS
27059: ST_TO_ADDR
// end else
27060: GO 27123
// begin d := - 1 ;
27062: LD_ADDR_VAR 0 9
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: ST_TO_ADDR
// if i_from > i_to then
27071: LD_VAR 0 2
27075: PUSH
27076: LD_VAR 0 3
27080: GREATER
27081: IFFALSE 27101
// length := i_from - i_to else
27083: LD_ADDR_VAR 0 11
27087: PUSH
27088: LD_VAR 0 2
27092: PUSH
27093: LD_VAR 0 3
27097: MINUS
27098: ST_TO_ADDR
27099: GO 27123
// length := ( array - i_to ) + i_from ;
27101: LD_ADDR_VAR 0 11
27105: PUSH
27106: LD_VAR 0 1
27110: PUSH
27111: LD_VAR 0 3
27115: MINUS
27116: PUSH
27117: LD_VAR 0 2
27121: PLUS
27122: ST_TO_ADDR
// end ; if not length then
27123: LD_VAR 0 11
27127: NOT
27128: IFFALSE 27132
// exit ;
27130: GO 27290
// tmp := array ;
27132: LD_ADDR_VAR 0 10
27136: PUSH
27137: LD_VAR 0 1
27141: ST_TO_ADDR
// for i = 1 to length do
27142: LD_ADDR_VAR 0 6
27146: PUSH
27147: DOUBLE
27148: LD_INT 1
27150: DEC
27151: ST_TO_ADDR
27152: LD_VAR 0 11
27156: PUSH
27157: FOR_TO
27158: IFFALSE 27278
// begin for j = 1 to array do
27160: LD_ADDR_VAR 0 7
27164: PUSH
27165: DOUBLE
27166: LD_INT 1
27168: DEC
27169: ST_TO_ADDR
27170: LD_VAR 0 1
27174: PUSH
27175: FOR_TO
27176: IFFALSE 27264
// begin k := j + d ;
27178: LD_ADDR_VAR 0 8
27182: PUSH
27183: LD_VAR 0 7
27187: PUSH
27188: LD_VAR 0 9
27192: PLUS
27193: ST_TO_ADDR
// if k > array then
27194: LD_VAR 0 8
27198: PUSH
27199: LD_VAR 0 1
27203: GREATER
27204: IFFALSE 27214
// k := 1 ;
27206: LD_ADDR_VAR 0 8
27210: PUSH
27211: LD_INT 1
27213: ST_TO_ADDR
// if not k then
27214: LD_VAR 0 8
27218: NOT
27219: IFFALSE 27231
// k := array ;
27221: LD_ADDR_VAR 0 8
27225: PUSH
27226: LD_VAR 0 1
27230: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27231: LD_ADDR_VAR 0 10
27235: PUSH
27236: LD_VAR 0 10
27240: PPUSH
27241: LD_VAR 0 8
27245: PPUSH
27246: LD_VAR 0 1
27250: PUSH
27251: LD_VAR 0 7
27255: ARRAY
27256: PPUSH
27257: CALL_OW 1
27261: ST_TO_ADDR
// end ;
27262: GO 27175
27264: POP
27265: POP
// array := tmp ;
27266: LD_ADDR_VAR 0 1
27270: PUSH
27271: LD_VAR 0 10
27275: ST_TO_ADDR
// end ;
27276: GO 27157
27278: POP
27279: POP
// result := array ;
27280: LD_ADDR_VAR 0 5
27284: PUSH
27285: LD_VAR 0 1
27289: ST_TO_ADDR
// end ;
27290: LD_VAR 0 5
27294: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27295: LD_INT 0
27297: PPUSH
27298: PPUSH
// result := 0 ;
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_INT 0
27306: ST_TO_ADDR
// if not array or not value in array then
27307: LD_VAR 0 1
27311: NOT
27312: PUSH
27313: LD_VAR 0 2
27317: PUSH
27318: LD_VAR 0 1
27322: IN
27323: NOT
27324: OR
27325: IFFALSE 27329
// exit ;
27327: GO 27383
// for i = 1 to array do
27329: LD_ADDR_VAR 0 4
27333: PUSH
27334: DOUBLE
27335: LD_INT 1
27337: DEC
27338: ST_TO_ADDR
27339: LD_VAR 0 1
27343: PUSH
27344: FOR_TO
27345: IFFALSE 27381
// if value = array [ i ] then
27347: LD_VAR 0 2
27351: PUSH
27352: LD_VAR 0 1
27356: PUSH
27357: LD_VAR 0 4
27361: ARRAY
27362: EQUAL
27363: IFFALSE 27379
// begin result := i ;
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: LD_VAR 0 4
27374: ST_TO_ADDR
// exit ;
27375: POP
27376: POP
27377: GO 27383
// end ;
27379: GO 27344
27381: POP
27382: POP
// end ;
27383: LD_VAR 0 3
27387: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27388: LD_INT 0
27390: PPUSH
// vc_chassis := chassis ;
27391: LD_ADDR_OWVAR 37
27395: PUSH
27396: LD_VAR 0 1
27400: ST_TO_ADDR
// vc_engine := engine ;
27401: LD_ADDR_OWVAR 39
27405: PUSH
27406: LD_VAR 0 2
27410: ST_TO_ADDR
// vc_control := control ;
27411: LD_ADDR_OWVAR 38
27415: PUSH
27416: LD_VAR 0 3
27420: ST_TO_ADDR
// vc_weapon := weapon ;
27421: LD_ADDR_OWVAR 40
27425: PUSH
27426: LD_VAR 0 4
27430: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27431: LD_ADDR_OWVAR 41
27435: PUSH
27436: LD_VAR 0 5
27440: ST_TO_ADDR
// end ;
27441: LD_VAR 0 6
27445: RET
// export function WantPlant ( unit ) ; var task ; begin
27446: LD_INT 0
27448: PPUSH
27449: PPUSH
// result := false ;
27450: LD_ADDR_VAR 0 2
27454: PUSH
27455: LD_INT 0
27457: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27458: LD_ADDR_VAR 0 3
27462: PUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 437
27472: ST_TO_ADDR
// if task then
27473: LD_VAR 0 3
27477: IFFALSE 27505
// if task [ 1 ] [ 1 ] = p then
27479: LD_VAR 0 3
27483: PUSH
27484: LD_INT 1
27486: ARRAY
27487: PUSH
27488: LD_INT 1
27490: ARRAY
27491: PUSH
27492: LD_STRING p
27494: EQUAL
27495: IFFALSE 27505
// result := true ;
27497: LD_ADDR_VAR 0 2
27501: PUSH
27502: LD_INT 1
27504: ST_TO_ADDR
// end ;
27505: LD_VAR 0 2
27509: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
// if pos < 1 then
27516: LD_VAR 0 2
27520: PUSH
27521: LD_INT 1
27523: LESS
27524: IFFALSE 27528
// exit ;
27526: GO 27831
// if pos = 1 then
27528: LD_VAR 0 2
27532: PUSH
27533: LD_INT 1
27535: EQUAL
27536: IFFALSE 27569
// result := Replace ( arr , pos [ 1 ] , value ) else
27538: LD_ADDR_VAR 0 4
27542: PUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: LD_VAR 0 2
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: LD_VAR 0 3
27561: PPUSH
27562: CALL_OW 1
27566: ST_TO_ADDR
27567: GO 27831
// begin tmp := arr ;
27569: LD_ADDR_VAR 0 6
27573: PUSH
27574: LD_VAR 0 1
27578: ST_TO_ADDR
// s_arr := [ tmp ] ;
27579: LD_ADDR_VAR 0 7
27583: PUSH
27584: LD_VAR 0 6
27588: PUSH
27589: EMPTY
27590: LIST
27591: ST_TO_ADDR
// for i = 1 to pos - 1 do
27592: LD_ADDR_VAR 0 5
27596: PUSH
27597: DOUBLE
27598: LD_INT 1
27600: DEC
27601: ST_TO_ADDR
27602: LD_VAR 0 2
27606: PUSH
27607: LD_INT 1
27609: MINUS
27610: PUSH
27611: FOR_TO
27612: IFFALSE 27657
// begin tmp := tmp [ pos [ i ] ] ;
27614: LD_ADDR_VAR 0 6
27618: PUSH
27619: LD_VAR 0 6
27623: PUSH
27624: LD_VAR 0 2
27628: PUSH
27629: LD_VAR 0 5
27633: ARRAY
27634: ARRAY
27635: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27636: LD_ADDR_VAR 0 7
27640: PUSH
27641: LD_VAR 0 7
27645: PUSH
27646: LD_VAR 0 6
27650: PUSH
27651: EMPTY
27652: LIST
27653: ADD
27654: ST_TO_ADDR
// end ;
27655: GO 27611
27657: POP
27658: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27659: LD_ADDR_VAR 0 6
27663: PUSH
27664: LD_VAR 0 6
27668: PPUSH
27669: LD_VAR 0 2
27673: PUSH
27674: LD_VAR 0 2
27678: ARRAY
27679: PPUSH
27680: LD_VAR 0 3
27684: PPUSH
27685: CALL_OW 1
27689: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27690: LD_ADDR_VAR 0 7
27694: PUSH
27695: LD_VAR 0 7
27699: PPUSH
27700: LD_VAR 0 7
27704: PPUSH
27705: LD_VAR 0 6
27709: PPUSH
27710: CALL_OW 1
27714: ST_TO_ADDR
// for i = s_arr downto 2 do
27715: LD_ADDR_VAR 0 5
27719: PUSH
27720: DOUBLE
27721: LD_VAR 0 7
27725: INC
27726: ST_TO_ADDR
27727: LD_INT 2
27729: PUSH
27730: FOR_DOWNTO
27731: IFFALSE 27815
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27733: LD_ADDR_VAR 0 6
27737: PUSH
27738: LD_VAR 0 7
27742: PUSH
27743: LD_VAR 0 5
27747: PUSH
27748: LD_INT 1
27750: MINUS
27751: ARRAY
27752: PPUSH
27753: LD_VAR 0 2
27757: PUSH
27758: LD_VAR 0 5
27762: PUSH
27763: LD_INT 1
27765: MINUS
27766: ARRAY
27767: PPUSH
27768: LD_VAR 0 7
27772: PUSH
27773: LD_VAR 0 5
27777: ARRAY
27778: PPUSH
27779: CALL_OW 1
27783: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27784: LD_ADDR_VAR 0 7
27788: PUSH
27789: LD_VAR 0 7
27793: PPUSH
27794: LD_VAR 0 5
27798: PUSH
27799: LD_INT 1
27801: MINUS
27802: PPUSH
27803: LD_VAR 0 6
27807: PPUSH
27808: CALL_OW 1
27812: ST_TO_ADDR
// end ;
27813: GO 27730
27815: POP
27816: POP
// result := s_arr [ 1 ] ;
27817: LD_ADDR_VAR 0 4
27821: PUSH
27822: LD_VAR 0 7
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: ST_TO_ADDR
// end ; end ;
27831: LD_VAR 0 4
27835: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27836: LD_INT 0
27838: PPUSH
27839: PPUSH
// if not list then
27840: LD_VAR 0 1
27844: NOT
27845: IFFALSE 27849
// exit ;
27847: GO 27940
// i := list [ pos1 ] ;
27849: LD_ADDR_VAR 0 5
27853: PUSH
27854: LD_VAR 0 1
27858: PUSH
27859: LD_VAR 0 2
27863: ARRAY
27864: ST_TO_ADDR
// if not i then
27865: LD_VAR 0 5
27869: NOT
27870: IFFALSE 27874
// exit ;
27872: GO 27940
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27874: LD_ADDR_VAR 0 1
27878: PUSH
27879: LD_VAR 0 1
27883: PPUSH
27884: LD_VAR 0 2
27888: PPUSH
27889: LD_VAR 0 1
27893: PUSH
27894: LD_VAR 0 3
27898: ARRAY
27899: PPUSH
27900: CALL_OW 1
27904: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27905: LD_ADDR_VAR 0 1
27909: PUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: LD_VAR 0 3
27919: PPUSH
27920: LD_VAR 0 5
27924: PPUSH
27925: CALL_OW 1
27929: ST_TO_ADDR
// result := list ;
27930: LD_ADDR_VAR 0 4
27934: PUSH
27935: LD_VAR 0 1
27939: ST_TO_ADDR
// end ;
27940: LD_VAR 0 4
27944: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27945: LD_INT 0
27947: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27948: LD_ADDR_VAR 0 5
27952: PUSH
27953: LD_VAR 0 1
27957: PPUSH
27958: CALL_OW 250
27962: PPUSH
27963: LD_VAR 0 1
27967: PPUSH
27968: CALL_OW 251
27972: PPUSH
27973: LD_VAR 0 2
27977: PPUSH
27978: LD_VAR 0 3
27982: PPUSH
27983: LD_VAR 0 4
27987: PPUSH
27988: CALL 28366 0 5
27992: ST_TO_ADDR
// end ;
27993: LD_VAR 0 5
27997: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27998: LD_INT 0
28000: PPUSH
28001: PPUSH
28002: PPUSH
28003: PPUSH
// if not list or not unit then
28004: LD_VAR 0 2
28008: NOT
28009: PUSH
28010: LD_VAR 0 1
28014: NOT
28015: OR
28016: IFFALSE 28020
// exit ;
28018: GO 28361
// result := [ ] ;
28020: LD_ADDR_VAR 0 5
28024: PUSH
28025: EMPTY
28026: ST_TO_ADDR
// for i in list do
28027: LD_ADDR_VAR 0 6
28031: PUSH
28032: LD_VAR 0 2
28036: PUSH
28037: FOR_IN
28038: IFFALSE 28256
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28040: LD_ADDR_VAR 0 8
28044: PUSH
28045: LD_VAR 0 1
28049: PPUSH
28050: LD_VAR 0 6
28054: PUSH
28055: LD_INT 1
28057: ARRAY
28058: PPUSH
28059: LD_VAR 0 6
28063: PUSH
28064: LD_INT 2
28066: ARRAY
28067: PPUSH
28068: CALL_OW 297
28072: ST_TO_ADDR
// if not Count ( result ) then
28073: LD_VAR 0 5
28077: PPUSH
28078: CALL 24650 0 1
28082: NOT
28083: IFFALSE 28116
// begin result := Join ( result , [ i , tmp ] ) ;
28085: LD_ADDR_VAR 0 5
28089: PUSH
28090: LD_VAR 0 5
28094: PPUSH
28095: LD_VAR 0 6
28099: PUSH
28100: LD_VAR 0 8
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PPUSH
28109: CALL 60250 0 2
28113: ST_TO_ADDR
// continue ;
28114: GO 28037
// end ; if result [ result ] [ 2 ] <= tmp then
28116: LD_VAR 0 5
28120: PUSH
28121: LD_VAR 0 5
28125: ARRAY
28126: PUSH
28127: LD_INT 2
28129: ARRAY
28130: PUSH
28131: LD_VAR 0 8
28135: LESSEQUAL
28136: IFFALSE 28169
// result := Join ( result , [ i , tmp ] ) else
28138: LD_ADDR_VAR 0 5
28142: PUSH
28143: LD_VAR 0 5
28147: PPUSH
28148: LD_VAR 0 6
28152: PUSH
28153: LD_VAR 0 8
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL 60250 0 2
28166: ST_TO_ADDR
28167: GO 28254
// begin for j := 1 to Count ( result ) do
28169: LD_ADDR_VAR 0 7
28173: PUSH
28174: DOUBLE
28175: LD_INT 1
28177: DEC
28178: ST_TO_ADDR
28179: LD_VAR 0 5
28183: PPUSH
28184: CALL 24650 0 1
28188: PUSH
28189: FOR_TO
28190: IFFALSE 28252
// begin if tmp < result [ j ] [ 2 ] then
28192: LD_VAR 0 8
28196: PUSH
28197: LD_VAR 0 5
28201: PUSH
28202: LD_VAR 0 7
28206: ARRAY
28207: PUSH
28208: LD_INT 2
28210: ARRAY
28211: LESS
28212: IFFALSE 28250
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28214: LD_ADDR_VAR 0 5
28218: PUSH
28219: LD_VAR 0 5
28223: PPUSH
28224: LD_VAR 0 7
28228: PPUSH
28229: LD_VAR 0 6
28233: PUSH
28234: LD_VAR 0 8
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 2
28247: ST_TO_ADDR
// break ;
28248: GO 28252
// end ; end ;
28250: GO 28189
28252: POP
28253: POP
// end ; end ;
28254: GO 28037
28256: POP
28257: POP
// if result and not asc then
28258: LD_VAR 0 5
28262: PUSH
28263: LD_VAR 0 3
28267: NOT
28268: AND
28269: IFFALSE 28286
// result := ReverseArray ( result ) ;
28271: LD_ADDR_VAR 0 5
28275: PUSH
28276: LD_VAR 0 5
28280: PPUSH
28281: CALL 55526 0 1
28285: ST_TO_ADDR
// tmp := [ ] ;
28286: LD_ADDR_VAR 0 8
28290: PUSH
28291: EMPTY
28292: ST_TO_ADDR
// if mode then
28293: LD_VAR 0 4
28297: IFFALSE 28361
// begin for i := 1 to result do
28299: LD_ADDR_VAR 0 6
28303: PUSH
28304: DOUBLE
28305: LD_INT 1
28307: DEC
28308: ST_TO_ADDR
28309: LD_VAR 0 5
28313: PUSH
28314: FOR_TO
28315: IFFALSE 28349
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28317: LD_ADDR_VAR 0 8
28321: PUSH
28322: LD_VAR 0 8
28326: PPUSH
28327: LD_VAR 0 5
28331: PUSH
28332: LD_VAR 0 6
28336: ARRAY
28337: PUSH
28338: LD_INT 1
28340: ARRAY
28341: PPUSH
28342: CALL 60250 0 2
28346: ST_TO_ADDR
28347: GO 28314
28349: POP
28350: POP
// result := tmp ;
28351: LD_ADDR_VAR 0 5
28355: PUSH
28356: LD_VAR 0 8
28360: ST_TO_ADDR
// end ; end ;
28361: LD_VAR 0 5
28365: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
28370: PPUSH
28371: PPUSH
// if not list then
28372: LD_VAR 0 3
28376: NOT
28377: IFFALSE 28381
// exit ;
28379: GO 28769
// result := [ ] ;
28381: LD_ADDR_VAR 0 6
28385: PUSH
28386: EMPTY
28387: ST_TO_ADDR
// for i in list do
28388: LD_ADDR_VAR 0 7
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: FOR_IN
28399: IFFALSE 28601
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28401: LD_ADDR_VAR 0 9
28405: PUSH
28406: LD_VAR 0 7
28410: PPUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: LD_VAR 0 2
28420: PPUSH
28421: CALL_OW 297
28425: ST_TO_ADDR
// if not result then
28426: LD_VAR 0 6
28430: NOT
28431: IFFALSE 28457
// result := [ [ i , tmp ] ] else
28433: LD_ADDR_VAR 0 6
28437: PUSH
28438: LD_VAR 0 7
28442: PUSH
28443: LD_VAR 0 9
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: ST_TO_ADDR
28455: GO 28599
// begin if result [ result ] [ 2 ] < tmp then
28457: LD_VAR 0 6
28461: PUSH
28462: LD_VAR 0 6
28466: ARRAY
28467: PUSH
28468: LD_INT 2
28470: ARRAY
28471: PUSH
28472: LD_VAR 0 9
28476: LESS
28477: IFFALSE 28519
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28479: LD_ADDR_VAR 0 6
28483: PUSH
28484: LD_VAR 0 6
28488: PPUSH
28489: LD_VAR 0 6
28493: PUSH
28494: LD_INT 1
28496: PLUS
28497: PPUSH
28498: LD_VAR 0 7
28502: PUSH
28503: LD_VAR 0 9
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PPUSH
28512: CALL_OW 2
28516: ST_TO_ADDR
28517: GO 28599
// for j = 1 to result do
28519: LD_ADDR_VAR 0 8
28523: PUSH
28524: DOUBLE
28525: LD_INT 1
28527: DEC
28528: ST_TO_ADDR
28529: LD_VAR 0 6
28533: PUSH
28534: FOR_TO
28535: IFFALSE 28597
// begin if tmp < result [ j ] [ 2 ] then
28537: LD_VAR 0 9
28541: PUSH
28542: LD_VAR 0 6
28546: PUSH
28547: LD_VAR 0 8
28551: ARRAY
28552: PUSH
28553: LD_INT 2
28555: ARRAY
28556: LESS
28557: IFFALSE 28595
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28559: LD_ADDR_VAR 0 6
28563: PUSH
28564: LD_VAR 0 6
28568: PPUSH
28569: LD_VAR 0 8
28573: PPUSH
28574: LD_VAR 0 7
28578: PUSH
28579: LD_VAR 0 9
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PPUSH
28588: CALL_OW 2
28592: ST_TO_ADDR
// break ;
28593: GO 28597
// end ; end ;
28595: GO 28534
28597: POP
28598: POP
// end ; end ;
28599: GO 28398
28601: POP
28602: POP
// if result and not asc then
28603: LD_VAR 0 6
28607: PUSH
28608: LD_VAR 0 4
28612: NOT
28613: AND
28614: IFFALSE 28689
// begin tmp := result ;
28616: LD_ADDR_VAR 0 9
28620: PUSH
28621: LD_VAR 0 6
28625: ST_TO_ADDR
// for i = tmp downto 1 do
28626: LD_ADDR_VAR 0 7
28630: PUSH
28631: DOUBLE
28632: LD_VAR 0 9
28636: INC
28637: ST_TO_ADDR
28638: LD_INT 1
28640: PUSH
28641: FOR_DOWNTO
28642: IFFALSE 28687
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28644: LD_ADDR_VAR 0 6
28648: PUSH
28649: LD_VAR 0 6
28653: PPUSH
28654: LD_VAR 0 9
28658: PUSH
28659: LD_VAR 0 7
28663: MINUS
28664: PUSH
28665: LD_INT 1
28667: PLUS
28668: PPUSH
28669: LD_VAR 0 9
28673: PUSH
28674: LD_VAR 0 7
28678: ARRAY
28679: PPUSH
28680: CALL_OW 1
28684: ST_TO_ADDR
28685: GO 28641
28687: POP
28688: POP
// end ; tmp := [ ] ;
28689: LD_ADDR_VAR 0 9
28693: PUSH
28694: EMPTY
28695: ST_TO_ADDR
// if mode then
28696: LD_VAR 0 5
28700: IFFALSE 28769
// begin for i = 1 to result do
28702: LD_ADDR_VAR 0 7
28706: PUSH
28707: DOUBLE
28708: LD_INT 1
28710: DEC
28711: ST_TO_ADDR
28712: LD_VAR 0 6
28716: PUSH
28717: FOR_TO
28718: IFFALSE 28757
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28720: LD_ADDR_VAR 0 9
28724: PUSH
28725: LD_VAR 0 9
28729: PPUSH
28730: LD_VAR 0 7
28734: PPUSH
28735: LD_VAR 0 6
28739: PUSH
28740: LD_VAR 0 7
28744: ARRAY
28745: PUSH
28746: LD_INT 1
28748: ARRAY
28749: PPUSH
28750: CALL_OW 1
28754: ST_TO_ADDR
28755: GO 28717
28757: POP
28758: POP
// result := tmp ;
28759: LD_ADDR_VAR 0 6
28763: PUSH
28764: LD_VAR 0 9
28768: ST_TO_ADDR
// end ; end ;
28769: LD_VAR 0 6
28773: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28774: LD_INT 0
28776: PPUSH
28777: PPUSH
28778: PPUSH
28779: PPUSH
28780: PPUSH
28781: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: EMPTY
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
// if not x or not y then
28804: LD_VAR 0 2
28808: NOT
28809: PUSH
28810: LD_VAR 0 3
28814: NOT
28815: OR
28816: IFFALSE 28820
// exit ;
28818: GO 30470
// if not range then
28820: LD_VAR 0 4
28824: NOT
28825: IFFALSE 28835
// range := 10 ;
28827: LD_ADDR_VAR 0 4
28831: PUSH
28832: LD_INT 10
28834: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28835: LD_ADDR_VAR 0 8
28839: PUSH
28840: LD_INT 81
28842: PUSH
28843: LD_VAR 0 1
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 92
28854: PUSH
28855: LD_VAR 0 2
28859: PUSH
28860: LD_VAR 0 3
28864: PUSH
28865: LD_VAR 0 4
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: LD_INT 21
28881: PUSH
28882: LD_INT 3
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 69
28902: ST_TO_ADDR
// if not tmp then
28903: LD_VAR 0 8
28907: NOT
28908: IFFALSE 28912
// exit ;
28910: GO 30470
// for i in tmp do
28912: LD_ADDR_VAR 0 6
28916: PUSH
28917: LD_VAR 0 8
28921: PUSH
28922: FOR_IN
28923: IFFALSE 30445
// begin points := [ 0 , 0 , 0 ] ;
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// bpoints := 1 ;
28944: LD_ADDR_VAR 0 10
28948: PUSH
28949: LD_INT 1
28951: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28952: LD_VAR 0 6
28956: PPUSH
28957: CALL_OW 247
28961: PUSH
28962: LD_INT 1
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 29548
28970: POP
// begin if GetClass ( i ) = 1 then
28971: LD_VAR 0 6
28975: PPUSH
28976: CALL_OW 257
28980: PUSH
28981: LD_INT 1
28983: EQUAL
28984: IFFALSE 29005
// points := [ 10 , 5 , 3 ] ;
28986: LD_ADDR_VAR 0 9
28990: PUSH
28991: LD_INT 10
28993: PUSH
28994: LD_INT 5
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29005: LD_VAR 0 6
29009: PPUSH
29010: CALL_OW 257
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: LD_INT 4
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: IN
29029: IFFALSE 29050
// points := [ 3 , 2 , 1 ] ;
29031: LD_ADDR_VAR 0 9
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29050: LD_VAR 0 6
29054: PPUSH
29055: CALL_OW 257
29059: PUSH
29060: LD_INT 5
29062: EQUAL
29063: IFFALSE 29084
// points := [ 130 , 5 , 2 ] ;
29065: LD_ADDR_VAR 0 9
29069: PUSH
29070: LD_INT 130
29072: PUSH
29073: LD_INT 5
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29084: LD_VAR 0 6
29088: PPUSH
29089: CALL_OW 257
29093: PUSH
29094: LD_INT 8
29096: EQUAL
29097: IFFALSE 29118
// points := [ 35 , 35 , 30 ] ;
29099: LD_ADDR_VAR 0 9
29103: PUSH
29104: LD_INT 35
29106: PUSH
29107: LD_INT 35
29109: PUSH
29110: LD_INT 30
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29118: LD_VAR 0 6
29122: PPUSH
29123: CALL_OW 257
29127: PUSH
29128: LD_INT 9
29130: EQUAL
29131: IFFALSE 29152
// points := [ 20 , 55 , 40 ] ;
29133: LD_ADDR_VAR 0 9
29137: PUSH
29138: LD_INT 20
29140: PUSH
29141: LD_INT 55
29143: PUSH
29144: LD_INT 40
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29152: LD_VAR 0 6
29156: PPUSH
29157: CALL_OW 257
29161: PUSH
29162: LD_INT 12
29164: PUSH
29165: LD_INT 16
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: IN
29172: IFFALSE 29193
// points := [ 5 , 3 , 2 ] ;
29174: LD_ADDR_VAR 0 9
29178: PUSH
29179: LD_INT 5
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29193: LD_VAR 0 6
29197: PPUSH
29198: CALL_OW 257
29202: PUSH
29203: LD_INT 17
29205: EQUAL
29206: IFFALSE 29227
// points := [ 100 , 50 , 75 ] ;
29208: LD_ADDR_VAR 0 9
29212: PUSH
29213: LD_INT 100
29215: PUSH
29216: LD_INT 50
29218: PUSH
29219: LD_INT 75
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29227: LD_VAR 0 6
29231: PPUSH
29232: CALL_OW 257
29236: PUSH
29237: LD_INT 15
29239: EQUAL
29240: IFFALSE 29261
// points := [ 10 , 5 , 3 ] ;
29242: LD_ADDR_VAR 0 9
29246: PUSH
29247: LD_INT 10
29249: PUSH
29250: LD_INT 5
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29261: LD_VAR 0 6
29265: PPUSH
29266: CALL_OW 257
29270: PUSH
29271: LD_INT 14
29273: EQUAL
29274: IFFALSE 29295
// points := [ 10 , 0 , 0 ] ;
29276: LD_ADDR_VAR 0 9
29280: PUSH
29281: LD_INT 10
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29295: LD_VAR 0 6
29299: PPUSH
29300: CALL_OW 257
29304: PUSH
29305: LD_INT 11
29307: EQUAL
29308: IFFALSE 29329
// points := [ 30 , 10 , 5 ] ;
29310: LD_ADDR_VAR 0 9
29314: PUSH
29315: LD_INT 30
29317: PUSH
29318: LD_INT 10
29320: PUSH
29321: LD_INT 5
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29329: LD_VAR 0 1
29333: PPUSH
29334: LD_INT 5
29336: PPUSH
29337: CALL_OW 321
29341: PUSH
29342: LD_INT 2
29344: EQUAL
29345: IFFALSE 29362
// bpoints := bpoints * 1.8 ;
29347: LD_ADDR_VAR 0 10
29351: PUSH
29352: LD_VAR 0 10
29356: PUSH
29357: LD_REAL  1.80000000000000E+0000
29360: MUL
29361: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29362: LD_VAR 0 6
29366: PPUSH
29367: CALL_OW 257
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 4
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: IN
29390: PUSH
29391: LD_VAR 0 1
29395: PPUSH
29396: LD_INT 51
29398: PPUSH
29399: CALL_OW 321
29403: PUSH
29404: LD_INT 2
29406: EQUAL
29407: AND
29408: IFFALSE 29425
// bpoints := bpoints * 1.2 ;
29410: LD_ADDR_VAR 0 10
29414: PUSH
29415: LD_VAR 0 10
29419: PUSH
29420: LD_REAL  1.20000000000000E+0000
29423: MUL
29424: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29425: LD_VAR 0 6
29429: PPUSH
29430: CALL_OW 257
29434: PUSH
29435: LD_INT 5
29437: PUSH
29438: LD_INT 7
29440: PUSH
29441: LD_INT 9
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: IN
29449: PUSH
29450: LD_VAR 0 1
29454: PPUSH
29455: LD_INT 52
29457: PPUSH
29458: CALL_OW 321
29462: PUSH
29463: LD_INT 2
29465: EQUAL
29466: AND
29467: IFFALSE 29484
// bpoints := bpoints * 1.5 ;
29469: LD_ADDR_VAR 0 10
29473: PUSH
29474: LD_VAR 0 10
29478: PUSH
29479: LD_REAL  1.50000000000000E+0000
29482: MUL
29483: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29484: LD_VAR 0 1
29488: PPUSH
29489: LD_INT 66
29491: PPUSH
29492: CALL_OW 321
29496: PUSH
29497: LD_INT 2
29499: EQUAL
29500: IFFALSE 29517
// bpoints := bpoints * 1.1 ;
29502: LD_ADDR_VAR 0 10
29506: PUSH
29507: LD_VAR 0 10
29511: PUSH
29512: LD_REAL  1.10000000000000E+0000
29515: MUL
29516: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29517: LD_ADDR_VAR 0 10
29521: PUSH
29522: LD_VAR 0 10
29526: PUSH
29527: LD_VAR 0 6
29531: PPUSH
29532: LD_INT 1
29534: PPUSH
29535: CALL_OW 259
29539: PUSH
29540: LD_REAL  1.15000000000000E+0000
29543: MUL
29544: MUL
29545: ST_TO_ADDR
// end ; unit_vehicle :
29546: GO 30374
29548: LD_INT 2
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 30362
29556: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29557: LD_VAR 0 6
29561: PPUSH
29562: CALL_OW 264
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 42
29572: PUSH
29573: LD_INT 24
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: IN
29581: IFFALSE 29602
// points := [ 25 , 5 , 3 ] ;
29583: LD_ADDR_VAR 0 9
29587: PUSH
29588: LD_INT 25
29590: PUSH
29591: LD_INT 5
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29602: LD_VAR 0 6
29606: PPUSH
29607: CALL_OW 264
29611: PUSH
29612: LD_INT 4
29614: PUSH
29615: LD_INT 43
29617: PUSH
29618: LD_INT 25
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: IN
29626: IFFALSE 29647
// points := [ 40 , 15 , 5 ] ;
29628: LD_ADDR_VAR 0 9
29632: PUSH
29633: LD_INT 40
29635: PUSH
29636: LD_INT 15
29638: PUSH
29639: LD_INT 5
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: LIST
29646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29647: LD_VAR 0 6
29651: PPUSH
29652: CALL_OW 264
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: LD_INT 23
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: IN
29667: IFFALSE 29688
// points := [ 7 , 25 , 8 ] ;
29669: LD_ADDR_VAR 0 9
29673: PUSH
29674: LD_INT 7
29676: PUSH
29677: LD_INT 25
29679: PUSH
29680: LD_INT 8
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29688: LD_VAR 0 6
29692: PPUSH
29693: CALL_OW 264
29697: PUSH
29698: LD_INT 5
29700: PUSH
29701: LD_INT 27
29703: PUSH
29704: LD_INT 44
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: IN
29712: IFFALSE 29733
// points := [ 14 , 50 , 16 ] ;
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_INT 14
29721: PUSH
29722: LD_INT 50
29724: PUSH
29725: LD_INT 16
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29733: LD_VAR 0 6
29737: PPUSH
29738: CALL_OW 264
29742: PUSH
29743: LD_INT 6
29745: PUSH
29746: LD_INT 46
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: IN
29753: IFFALSE 29774
// points := [ 32 , 120 , 70 ] ;
29755: LD_ADDR_VAR 0 9
29759: PUSH
29760: LD_INT 32
29762: PUSH
29763: LD_INT 120
29765: PUSH
29766: LD_INT 70
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29774: LD_VAR 0 6
29778: PPUSH
29779: CALL_OW 264
29783: PUSH
29784: LD_INT 7
29786: PUSH
29787: LD_INT 28
29789: PUSH
29790: LD_INT 45
29792: PUSH
29793: LD_INT 92
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: IN
29802: IFFALSE 29823
// points := [ 35 , 20 , 45 ] ;
29804: LD_ADDR_VAR 0 9
29808: PUSH
29809: LD_INT 35
29811: PUSH
29812: LD_INT 20
29814: PUSH
29815: LD_INT 45
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29823: LD_VAR 0 6
29827: PPUSH
29828: CALL_OW 264
29832: PUSH
29833: LD_INT 47
29835: PUSH
29836: EMPTY
29837: LIST
29838: IN
29839: IFFALSE 29860
// points := [ 67 , 45 , 75 ] ;
29841: LD_ADDR_VAR 0 9
29845: PUSH
29846: LD_INT 67
29848: PUSH
29849: LD_INT 45
29851: PUSH
29852: LD_INT 75
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29860: LD_VAR 0 6
29864: PPUSH
29865: CALL_OW 264
29869: PUSH
29870: LD_INT 26
29872: PUSH
29873: EMPTY
29874: LIST
29875: IN
29876: IFFALSE 29897
// points := [ 120 , 30 , 80 ] ;
29878: LD_ADDR_VAR 0 9
29882: PUSH
29883: LD_INT 120
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 80
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29897: LD_VAR 0 6
29901: PPUSH
29902: CALL_OW 264
29906: PUSH
29907: LD_INT 22
29909: PUSH
29910: EMPTY
29911: LIST
29912: IN
29913: IFFALSE 29934
// points := [ 40 , 1 , 1 ] ;
29915: LD_ADDR_VAR 0 9
29919: PUSH
29920: LD_INT 40
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29934: LD_VAR 0 6
29938: PPUSH
29939: CALL_OW 264
29943: PUSH
29944: LD_INT 29
29946: PUSH
29947: EMPTY
29948: LIST
29949: IN
29950: IFFALSE 29971
// points := [ 70 , 200 , 400 ] ;
29952: LD_ADDR_VAR 0 9
29956: PUSH
29957: LD_INT 70
29959: PUSH
29960: LD_INT 200
29962: PUSH
29963: LD_INT 400
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29971: LD_VAR 0 6
29975: PPUSH
29976: CALL_OW 264
29980: PUSH
29981: LD_INT 14
29983: PUSH
29984: LD_INT 53
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: IN
29991: IFFALSE 30012
// points := [ 40 , 10 , 20 ] ;
29993: LD_ADDR_VAR 0 9
29997: PUSH
29998: LD_INT 40
30000: PUSH
30001: LD_INT 10
30003: PUSH
30004: LD_INT 20
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30012: LD_VAR 0 6
30016: PPUSH
30017: CALL_OW 264
30021: PUSH
30022: LD_INT 9
30024: PUSH
30025: EMPTY
30026: LIST
30027: IN
30028: IFFALSE 30049
// points := [ 5 , 70 , 20 ] ;
30030: LD_ADDR_VAR 0 9
30034: PUSH
30035: LD_INT 5
30037: PUSH
30038: LD_INT 70
30040: PUSH
30041: LD_INT 20
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30049: LD_VAR 0 6
30053: PPUSH
30054: CALL_OW 264
30058: PUSH
30059: LD_INT 10
30061: PUSH
30062: EMPTY
30063: LIST
30064: IN
30065: IFFALSE 30086
// points := [ 35 , 110 , 70 ] ;
30067: LD_ADDR_VAR 0 9
30071: PUSH
30072: LD_INT 35
30074: PUSH
30075: LD_INT 110
30077: PUSH
30078: LD_INT 70
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30086: LD_VAR 0 6
30090: PPUSH
30091: CALL_OW 265
30095: PUSH
30096: LD_INT 25
30098: EQUAL
30099: IFFALSE 30120
// points := [ 80 , 65 , 100 ] ;
30101: LD_ADDR_VAR 0 9
30105: PUSH
30106: LD_INT 80
30108: PUSH
30109: LD_INT 65
30111: PUSH
30112: LD_INT 100
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30120: LD_VAR 0 6
30124: PPUSH
30125: CALL_OW 263
30129: PUSH
30130: LD_INT 1
30132: EQUAL
30133: IFFALSE 30168
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30135: LD_ADDR_VAR 0 10
30139: PUSH
30140: LD_VAR 0 10
30144: PUSH
30145: LD_VAR 0 6
30149: PPUSH
30150: CALL_OW 311
30154: PPUSH
30155: LD_INT 3
30157: PPUSH
30158: CALL_OW 259
30162: PUSH
30163: LD_INT 4
30165: MUL
30166: MUL
30167: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30168: LD_VAR 0 6
30172: PPUSH
30173: CALL_OW 263
30177: PUSH
30178: LD_INT 2
30180: EQUAL
30181: IFFALSE 30232
// begin j := IsControledBy ( i ) ;
30183: LD_ADDR_VAR 0 7
30187: PUSH
30188: LD_VAR 0 6
30192: PPUSH
30193: CALL_OW 312
30197: ST_TO_ADDR
// if j then
30198: LD_VAR 0 7
30202: IFFALSE 30232
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30204: LD_ADDR_VAR 0 10
30208: PUSH
30209: LD_VAR 0 10
30213: PUSH
30214: LD_VAR 0 7
30218: PPUSH
30219: LD_INT 3
30221: PPUSH
30222: CALL_OW 259
30226: PUSH
30227: LD_INT 3
30229: MUL
30230: MUL
30231: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30232: LD_VAR 0 6
30236: PPUSH
30237: CALL_OW 264
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: LD_INT 6
30247: PUSH
30248: LD_INT 46
30250: PUSH
30251: LD_INT 44
30253: PUSH
30254: LD_INT 47
30256: PUSH
30257: LD_INT 45
30259: PUSH
30260: LD_INT 28
30262: PUSH
30263: LD_INT 7
30265: PUSH
30266: LD_INT 27
30268: PUSH
30269: LD_INT 29
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: IN
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: LD_INT 52
30292: PPUSH
30293: CALL_OW 321
30297: PUSH
30298: LD_INT 2
30300: EQUAL
30301: AND
30302: IFFALSE 30319
// bpoints := bpoints * 1.2 ;
30304: LD_ADDR_VAR 0 10
30308: PUSH
30309: LD_VAR 0 10
30313: PUSH
30314: LD_REAL  1.20000000000000E+0000
30317: MUL
30318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30319: LD_VAR 0 6
30323: PPUSH
30324: CALL_OW 264
30328: PUSH
30329: LD_INT 6
30331: PUSH
30332: LD_INT 46
30334: PUSH
30335: LD_INT 47
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: IN
30343: IFFALSE 30360
// bpoints := bpoints * 1.2 ;
30345: LD_ADDR_VAR 0 10
30349: PUSH
30350: LD_VAR 0 10
30354: PUSH
30355: LD_REAL  1.20000000000000E+0000
30358: MUL
30359: ST_TO_ADDR
// end ; unit_building :
30360: GO 30374
30362: LD_INT 3
30364: DOUBLE
30365: EQUAL
30366: IFTRUE 30370
30368: GO 30373
30370: POP
// ; end ;
30371: GO 30374
30373: POP
// for j = 1 to 3 do
30374: LD_ADDR_VAR 0 7
30378: PUSH
30379: DOUBLE
30380: LD_INT 1
30382: DEC
30383: ST_TO_ADDR
30384: LD_INT 3
30386: PUSH
30387: FOR_TO
30388: IFFALSE 30441
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30390: LD_ADDR_VAR 0 5
30394: PUSH
30395: LD_VAR 0 5
30399: PPUSH
30400: LD_VAR 0 7
30404: PPUSH
30405: LD_VAR 0 5
30409: PUSH
30410: LD_VAR 0 7
30414: ARRAY
30415: PUSH
30416: LD_VAR 0 9
30420: PUSH
30421: LD_VAR 0 7
30425: ARRAY
30426: PUSH
30427: LD_VAR 0 10
30431: MUL
30432: PLUS
30433: PPUSH
30434: CALL_OW 1
30438: ST_TO_ADDR
30439: GO 30387
30441: POP
30442: POP
// end ;
30443: GO 28922
30445: POP
30446: POP
// result := Replace ( result , 4 , tmp ) ;
30447: LD_ADDR_VAR 0 5
30451: PUSH
30452: LD_VAR 0 5
30456: PPUSH
30457: LD_INT 4
30459: PPUSH
30460: LD_VAR 0 8
30464: PPUSH
30465: CALL_OW 1
30469: ST_TO_ADDR
// end ;
30470: LD_VAR 0 5
30474: RET
// export function DangerAtRange ( unit , range ) ; begin
30475: LD_INT 0
30477: PPUSH
// if not unit then
30478: LD_VAR 0 1
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30532
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30487: LD_ADDR_VAR 0 3
30491: PUSH
30492: LD_VAR 0 1
30496: PPUSH
30497: CALL_OW 255
30501: PPUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: CALL_OW 250
30511: PPUSH
30512: LD_VAR 0 1
30516: PPUSH
30517: CALL_OW 251
30521: PPUSH
30522: LD_VAR 0 2
30526: PPUSH
30527: CALL 28774 0 4
30531: ST_TO_ADDR
// end ;
30532: LD_VAR 0 3
30536: RET
// export function DangerInArea ( side , area ) ; begin
30537: LD_INT 0
30539: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30540: LD_ADDR_VAR 0 3
30544: PUSH
30545: LD_VAR 0 2
30549: PPUSH
30550: LD_INT 81
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PPUSH
30562: CALL_OW 70
30566: ST_TO_ADDR
// end ;
30567: LD_VAR 0 3
30571: RET
// export function IsExtension ( b ) ; begin
30572: LD_INT 0
30574: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30575: LD_ADDR_VAR 0 2
30579: PUSH
30580: LD_VAR 0 1
30584: PUSH
30585: LD_INT 23
30587: PUSH
30588: LD_INT 20
30590: PUSH
30591: LD_INT 22
30593: PUSH
30594: LD_INT 17
30596: PUSH
30597: LD_INT 24
30599: PUSH
30600: LD_INT 21
30602: PUSH
30603: LD_INT 19
30605: PUSH
30606: LD_INT 16
30608: PUSH
30609: LD_INT 25
30611: PUSH
30612: LD_INT 18
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: IN
30627: ST_TO_ADDR
// end ;
30628: LD_VAR 0 2
30632: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30633: LD_INT 0
30635: PPUSH
30636: PPUSH
30637: PPUSH
// result := [ ] ;
30638: LD_ADDR_VAR 0 4
30642: PUSH
30643: EMPTY
30644: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30645: LD_ADDR_VAR 0 5
30649: PUSH
30650: LD_VAR 0 2
30654: PPUSH
30655: LD_INT 21
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 70
30669: ST_TO_ADDR
// if not tmp then
30670: LD_VAR 0 5
30674: NOT
30675: IFFALSE 30679
// exit ;
30677: GO 30743
// if checkLink then
30679: LD_VAR 0 3
30683: IFFALSE 30733
// begin for i in tmp do
30685: LD_ADDR_VAR 0 6
30689: PUSH
30690: LD_VAR 0 5
30694: PUSH
30695: FOR_IN
30696: IFFALSE 30731
// if GetBase ( i ) <> base then
30698: LD_VAR 0 6
30702: PPUSH
30703: CALL_OW 274
30707: PUSH
30708: LD_VAR 0 1
30712: NONEQUAL
30713: IFFALSE 30729
// ComLinkToBase ( base , i ) ;
30715: LD_VAR 0 1
30719: PPUSH
30720: LD_VAR 0 6
30724: PPUSH
30725: CALL_OW 169
30729: GO 30695
30731: POP
30732: POP
// end ; result := tmp ;
30733: LD_ADDR_VAR 0 4
30737: PUSH
30738: LD_VAR 0 5
30742: ST_TO_ADDR
// end ;
30743: LD_VAR 0 4
30747: RET
// export function ComComplete ( units , b ) ; var i ; begin
30748: LD_INT 0
30750: PPUSH
30751: PPUSH
// if not units then
30752: LD_VAR 0 1
30756: NOT
30757: IFFALSE 30761
// exit ;
30759: GO 30851
// for i in units do
30761: LD_ADDR_VAR 0 4
30765: PUSH
30766: LD_VAR 0 1
30770: PUSH
30771: FOR_IN
30772: IFFALSE 30849
// if BuildingStatus ( b ) = bs_build then
30774: LD_VAR 0 2
30778: PPUSH
30779: CALL_OW 461
30783: PUSH
30784: LD_INT 1
30786: EQUAL
30787: IFFALSE 30847
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30789: LD_VAR 0 4
30793: PPUSH
30794: LD_STRING h
30796: PUSH
30797: LD_VAR 0 2
30801: PPUSH
30802: CALL_OW 250
30806: PUSH
30807: LD_VAR 0 2
30811: PPUSH
30812: CALL_OW 251
30816: PUSH
30817: LD_VAR 0 2
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: PUSH
30840: EMPTY
30841: LIST
30842: PPUSH
30843: CALL_OW 446
30847: GO 30771
30849: POP
30850: POP
// end ;
30851: LD_VAR 0 3
30855: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30864: LD_VAR 0 1
30868: NOT
30869: PUSH
30870: LD_VAR 0 1
30874: PPUSH
30875: CALL_OW 263
30879: PUSH
30880: LD_INT 2
30882: NONEQUAL
30883: OR
30884: IFFALSE 30888
// exit ;
30886: GO 31204
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30888: LD_ADDR_VAR 0 6
30892: PUSH
30893: LD_INT 22
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 255
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 30
30915: PUSH
30916: LD_INT 36
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 34
30925: PUSH
30926: LD_INT 31
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PPUSH
30942: CALL_OW 69
30946: ST_TO_ADDR
// if not tmp then
30947: LD_VAR 0 6
30951: NOT
30952: IFFALSE 30956
// exit ;
30954: GO 31204
// result := [ ] ;
30956: LD_ADDR_VAR 0 2
30960: PUSH
30961: EMPTY
30962: ST_TO_ADDR
// for i in tmp do
30963: LD_ADDR_VAR 0 3
30967: PUSH
30968: LD_VAR 0 6
30972: PUSH
30973: FOR_IN
30974: IFFALSE 31045
// begin t := UnitsInside ( i ) ;
30976: LD_ADDR_VAR 0 4
30980: PUSH
30981: LD_VAR 0 3
30985: PPUSH
30986: CALL_OW 313
30990: ST_TO_ADDR
// if t then
30991: LD_VAR 0 4
30995: IFFALSE 31043
// for j in t do
30997: LD_ADDR_VAR 0 7
31001: PUSH
31002: LD_VAR 0 4
31006: PUSH
31007: FOR_IN
31008: IFFALSE 31041
// result := Replace ( result , result + 1 , j ) ;
31010: LD_ADDR_VAR 0 2
31014: PUSH
31015: LD_VAR 0 2
31019: PPUSH
31020: LD_VAR 0 2
31024: PUSH
31025: LD_INT 1
31027: PLUS
31028: PPUSH
31029: LD_VAR 0 7
31033: PPUSH
31034: CALL_OW 1
31038: ST_TO_ADDR
31039: GO 31007
31041: POP
31042: POP
// end ;
31043: GO 30973
31045: POP
31046: POP
// if not result then
31047: LD_VAR 0 2
31051: NOT
31052: IFFALSE 31056
// exit ;
31054: GO 31204
// mech := result [ 1 ] ;
31056: LD_ADDR_VAR 0 5
31060: PUSH
31061: LD_VAR 0 2
31065: PUSH
31066: LD_INT 1
31068: ARRAY
31069: ST_TO_ADDR
// if result > 1 then
31070: LD_VAR 0 2
31074: PUSH
31075: LD_INT 1
31077: GREATER
31078: IFFALSE 31190
// begin for i = 2 to result do
31080: LD_ADDR_VAR 0 3
31084: PUSH
31085: DOUBLE
31086: LD_INT 2
31088: DEC
31089: ST_TO_ADDR
31090: LD_VAR 0 2
31094: PUSH
31095: FOR_TO
31096: IFFALSE 31188
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31098: LD_ADDR_VAR 0 4
31102: PUSH
31103: LD_VAR 0 2
31107: PUSH
31108: LD_VAR 0 3
31112: ARRAY
31113: PPUSH
31114: LD_INT 3
31116: PPUSH
31117: CALL_OW 259
31121: PUSH
31122: LD_VAR 0 2
31126: PUSH
31127: LD_VAR 0 3
31131: ARRAY
31132: PPUSH
31133: CALL_OW 432
31137: MINUS
31138: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31139: LD_VAR 0 4
31143: PUSH
31144: LD_VAR 0 5
31148: PPUSH
31149: LD_INT 3
31151: PPUSH
31152: CALL_OW 259
31156: PUSH
31157: LD_VAR 0 5
31161: PPUSH
31162: CALL_OW 432
31166: MINUS
31167: GREATEREQUAL
31168: IFFALSE 31186
// mech := result [ i ] ;
31170: LD_ADDR_VAR 0 5
31174: PUSH
31175: LD_VAR 0 2
31179: PUSH
31180: LD_VAR 0 3
31184: ARRAY
31185: ST_TO_ADDR
// end ;
31186: GO 31095
31188: POP
31189: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31190: LD_VAR 0 1
31194: PPUSH
31195: LD_VAR 0 5
31199: PPUSH
31200: CALL_OW 135
// end ;
31204: LD_VAR 0 2
31208: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31209: LD_INT 0
31211: PPUSH
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
31223: PPUSH
// result := [ ] ;
31224: LD_ADDR_VAR 0 7
31228: PUSH
31229: EMPTY
31230: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 266
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: IN
31251: NOT
31252: IFFALSE 31256
// exit ;
31254: GO 32890
// if name then
31256: LD_VAR 0 3
31260: IFFALSE 31276
// SetBName ( base_dep , name ) ;
31262: LD_VAR 0 1
31266: PPUSH
31267: LD_VAR 0 3
31271: PPUSH
31272: CALL_OW 500
// base := GetBase ( base_dep ) ;
31276: LD_ADDR_VAR 0 15
31280: PUSH
31281: LD_VAR 0 1
31285: PPUSH
31286: CALL_OW 274
31290: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31291: LD_ADDR_VAR 0 16
31295: PUSH
31296: LD_VAR 0 1
31300: PPUSH
31301: CALL_OW 255
31305: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31306: LD_ADDR_VAR 0 17
31310: PUSH
31311: LD_VAR 0 1
31315: PPUSH
31316: CALL_OW 248
31320: ST_TO_ADDR
// if sources then
31321: LD_VAR 0 5
31325: IFFALSE 31372
// for i = 1 to 3 do
31327: LD_ADDR_VAR 0 8
31331: PUSH
31332: DOUBLE
31333: LD_INT 1
31335: DEC
31336: ST_TO_ADDR
31337: LD_INT 3
31339: PUSH
31340: FOR_TO
31341: IFFALSE 31370
// AddResourceType ( base , i , sources [ i ] ) ;
31343: LD_VAR 0 15
31347: PPUSH
31348: LD_VAR 0 8
31352: PPUSH
31353: LD_VAR 0 5
31357: PUSH
31358: LD_VAR 0 8
31362: ARRAY
31363: PPUSH
31364: CALL_OW 276
31368: GO 31340
31370: POP
31371: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31372: LD_ADDR_VAR 0 18
31376: PUSH
31377: LD_VAR 0 15
31381: PPUSH
31382: LD_VAR 0 2
31386: PPUSH
31387: LD_INT 1
31389: PPUSH
31390: CALL 30633 0 3
31394: ST_TO_ADDR
// InitHc ;
31395: CALL_OW 19
// InitUc ;
31399: CALL_OW 18
// uc_side := side ;
31403: LD_ADDR_OWVAR 20
31407: PUSH
31408: LD_VAR 0 16
31412: ST_TO_ADDR
// uc_nation := nation ;
31413: LD_ADDR_OWVAR 21
31417: PUSH
31418: LD_VAR 0 17
31422: ST_TO_ADDR
// if buildings then
31423: LD_VAR 0 18
31427: IFFALSE 32749
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31429: LD_ADDR_VAR 0 19
31433: PUSH
31434: LD_VAR 0 18
31438: PPUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: LD_INT 29
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 30
31454: PUSH
31455: LD_INT 30
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: PPUSH
31467: CALL_OW 72
31471: ST_TO_ADDR
// if tmp then
31472: LD_VAR 0 19
31476: IFFALSE 31524
// for i in tmp do
31478: LD_ADDR_VAR 0 8
31482: PUSH
31483: LD_VAR 0 19
31487: PUSH
31488: FOR_IN
31489: IFFALSE 31522
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31491: LD_VAR 0 8
31495: PPUSH
31496: CALL_OW 250
31500: PPUSH
31501: LD_VAR 0 8
31505: PPUSH
31506: CALL_OW 251
31510: PPUSH
31511: LD_VAR 0 16
31515: PPUSH
31516: CALL_OW 441
31520: GO 31488
31522: POP
31523: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31524: LD_VAR 0 18
31528: PPUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 30
31534: PUSH
31535: LD_INT 32
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 30
31544: PUSH
31545: LD_INT 33
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 72
31561: IFFALSE 31649
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31563: LD_ADDR_VAR 0 8
31567: PUSH
31568: LD_VAR 0 18
31572: PPUSH
31573: LD_INT 2
31575: PUSH
31576: LD_INT 30
31578: PUSH
31579: LD_INT 32
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 30
31588: PUSH
31589: LD_INT 33
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: PPUSH
31601: CALL_OW 72
31605: PUSH
31606: FOR_IN
31607: IFFALSE 31647
// begin if not GetBWeapon ( i ) then
31609: LD_VAR 0 8
31613: PPUSH
31614: CALL_OW 269
31618: NOT
31619: IFFALSE 31645
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31621: LD_VAR 0 8
31625: PPUSH
31626: LD_VAR 0 8
31630: PPUSH
31631: LD_VAR 0 2
31635: PPUSH
31636: CALL 32895 0 2
31640: PPUSH
31641: CALL_OW 431
// end ;
31645: GO 31606
31647: POP
31648: POP
// end ; for i = 1 to personel do
31649: LD_ADDR_VAR 0 8
31653: PUSH
31654: DOUBLE
31655: LD_INT 1
31657: DEC
31658: ST_TO_ADDR
31659: LD_VAR 0 6
31663: PUSH
31664: FOR_TO
31665: IFFALSE 32729
// begin if i > 4 then
31667: LD_VAR 0 8
31671: PUSH
31672: LD_INT 4
31674: GREATER
31675: IFFALSE 31679
// break ;
31677: GO 32729
// case i of 1 :
31679: LD_VAR 0 8
31683: PUSH
31684: LD_INT 1
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31772
31692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31693: LD_ADDR_VAR 0 12
31697: PUSH
31698: LD_VAR 0 18
31702: PPUSH
31703: LD_INT 22
31705: PUSH
31706: LD_VAR 0 16
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 58
31717: PUSH
31718: EMPTY
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 30
31726: PUSH
31727: LD_INT 32
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 30
31736: PUSH
31737: LD_INT 4
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 30
31746: PUSH
31747: LD_INT 5
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: PPUSH
31765: CALL_OW 72
31769: ST_TO_ADDR
31770: GO 31994
31772: LD_INT 2
31774: DOUBLE
31775: EQUAL
31776: IFTRUE 31780
31778: GO 31842
31780: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31781: LD_ADDR_VAR 0 12
31785: PUSH
31786: LD_VAR 0 18
31790: PPUSH
31791: LD_INT 22
31793: PUSH
31794: LD_VAR 0 16
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 2
31805: PUSH
31806: LD_INT 30
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 30
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PPUSH
31835: CALL_OW 72
31839: ST_TO_ADDR
31840: GO 31994
31842: LD_INT 3
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31912
31850: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31851: LD_ADDR_VAR 0 12
31855: PUSH
31856: LD_VAR 0 18
31860: PPUSH
31861: LD_INT 22
31863: PUSH
31864: LD_VAR 0 16
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: PUSH
31876: LD_INT 30
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 30
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PPUSH
31905: CALL_OW 72
31909: ST_TO_ADDR
31910: GO 31994
31912: LD_INT 4
31914: DOUBLE
31915: EQUAL
31916: IFTRUE 31920
31918: GO 31993
31920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31921: LD_ADDR_VAR 0 12
31925: PUSH
31926: LD_VAR 0 18
31930: PPUSH
31931: LD_INT 22
31933: PUSH
31934: LD_VAR 0 16
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 30
31948: PUSH
31949: LD_INT 6
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 30
31958: PUSH
31959: LD_INT 7
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 30
31968: PUSH
31969: LD_INT 8
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PPUSH
31986: CALL_OW 72
31990: ST_TO_ADDR
31991: GO 31994
31993: POP
// if i = 1 then
31994: LD_VAR 0 8
31998: PUSH
31999: LD_INT 1
32001: EQUAL
32002: IFFALSE 32113
// begin tmp := [ ] ;
32004: LD_ADDR_VAR 0 19
32008: PUSH
32009: EMPTY
32010: ST_TO_ADDR
// for j in f do
32011: LD_ADDR_VAR 0 9
32015: PUSH
32016: LD_VAR 0 12
32020: PUSH
32021: FOR_IN
32022: IFFALSE 32095
// if GetBType ( j ) = b_bunker then
32024: LD_VAR 0 9
32028: PPUSH
32029: CALL_OW 266
32033: PUSH
32034: LD_INT 32
32036: EQUAL
32037: IFFALSE 32064
// tmp := Insert ( tmp , 1 , j ) else
32039: LD_ADDR_VAR 0 19
32043: PUSH
32044: LD_VAR 0 19
32048: PPUSH
32049: LD_INT 1
32051: PPUSH
32052: LD_VAR 0 9
32056: PPUSH
32057: CALL_OW 2
32061: ST_TO_ADDR
32062: GO 32093
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32064: LD_ADDR_VAR 0 19
32068: PUSH
32069: LD_VAR 0 19
32073: PPUSH
32074: LD_VAR 0 19
32078: PUSH
32079: LD_INT 1
32081: PLUS
32082: PPUSH
32083: LD_VAR 0 9
32087: PPUSH
32088: CALL_OW 2
32092: ST_TO_ADDR
32093: GO 32021
32095: POP
32096: POP
// if tmp then
32097: LD_VAR 0 19
32101: IFFALSE 32113
// f := tmp ;
32103: LD_ADDR_VAR 0 12
32107: PUSH
32108: LD_VAR 0 19
32112: ST_TO_ADDR
// end ; x := personel [ i ] ;
32113: LD_ADDR_VAR 0 13
32117: PUSH
32118: LD_VAR 0 6
32122: PUSH
32123: LD_VAR 0 8
32127: ARRAY
32128: ST_TO_ADDR
// if x = - 1 then
32129: LD_VAR 0 13
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: EQUAL
32138: IFFALSE 32347
// begin for j in f do
32140: LD_ADDR_VAR 0 9
32144: PUSH
32145: LD_VAR 0 12
32149: PUSH
32150: FOR_IN
32151: IFFALSE 32343
// repeat InitHc ;
32153: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32157: LD_VAR 0 9
32161: PPUSH
32162: CALL_OW 266
32166: PUSH
32167: LD_INT 5
32169: EQUAL
32170: IFFALSE 32240
// begin if UnitsInside ( j ) < 3 then
32172: LD_VAR 0 9
32176: PPUSH
32177: CALL_OW 313
32181: PUSH
32182: LD_INT 3
32184: LESS
32185: IFFALSE 32221
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32187: LD_INT 0
32189: PPUSH
32190: LD_INT 5
32192: PUSH
32193: LD_INT 8
32195: PUSH
32196: LD_INT 9
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PUSH
32204: LD_VAR 0 17
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 4
32214: PPUSH
32215: CALL_OW 380
32219: GO 32238
// PrepareHuman ( false , i , skill ) ;
32221: LD_INT 0
32223: PPUSH
32224: LD_VAR 0 8
32228: PPUSH
32229: LD_VAR 0 4
32233: PPUSH
32234: CALL_OW 380
// end else
32238: GO 32257
// PrepareHuman ( false , i , skill ) ;
32240: LD_INT 0
32242: PPUSH
32243: LD_VAR 0 8
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: CALL_OW 380
// un := CreateHuman ;
32257: LD_ADDR_VAR 0 14
32261: PUSH
32262: CALL_OW 44
32266: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32267: LD_ADDR_VAR 0 7
32271: PUSH
32272: LD_VAR 0 7
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_VAR 0 14
32284: PPUSH
32285: CALL_OW 2
32289: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32290: LD_VAR 0 14
32294: PPUSH
32295: LD_VAR 0 9
32299: PPUSH
32300: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32304: LD_VAR 0 9
32308: PPUSH
32309: CALL_OW 313
32313: PUSH
32314: LD_INT 6
32316: EQUAL
32317: PUSH
32318: LD_VAR 0 9
32322: PPUSH
32323: CALL_OW 266
32327: PUSH
32328: LD_INT 32
32330: PUSH
32331: LD_INT 31
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: IN
32338: OR
32339: IFFALSE 32153
32341: GO 32150
32343: POP
32344: POP
// end else
32345: GO 32727
// for j = 1 to x do
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: DOUBLE
32353: LD_INT 1
32355: DEC
32356: ST_TO_ADDR
32357: LD_VAR 0 13
32361: PUSH
32362: FOR_TO
32363: IFFALSE 32725
// begin InitHc ;
32365: CALL_OW 19
// if not f then
32369: LD_VAR 0 12
32373: NOT
32374: IFFALSE 32463
// begin PrepareHuman ( false , i , skill ) ;
32376: LD_INT 0
32378: PPUSH
32379: LD_VAR 0 8
32383: PPUSH
32384: LD_VAR 0 4
32388: PPUSH
32389: CALL_OW 380
// un := CreateHuman ;
32393: LD_ADDR_VAR 0 14
32397: PUSH
32398: CALL_OW 44
32402: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32403: LD_ADDR_VAR 0 7
32407: PUSH
32408: LD_VAR 0 7
32412: PPUSH
32413: LD_INT 1
32415: PPUSH
32416: LD_VAR 0 14
32420: PPUSH
32421: CALL_OW 2
32425: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32426: LD_VAR 0 14
32430: PPUSH
32431: LD_VAR 0 1
32435: PPUSH
32436: CALL_OW 250
32440: PPUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: CALL_OW 251
32450: PPUSH
32451: LD_INT 10
32453: PPUSH
32454: LD_INT 0
32456: PPUSH
32457: CALL_OW 50
// continue ;
32461: GO 32362
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32463: LD_VAR 0 12
32467: PUSH
32468: LD_INT 1
32470: ARRAY
32471: PPUSH
32472: CALL_OW 313
32476: PUSH
32477: LD_VAR 0 12
32481: PUSH
32482: LD_INT 1
32484: ARRAY
32485: PPUSH
32486: CALL_OW 266
32490: PUSH
32491: LD_INT 32
32493: PUSH
32494: LD_INT 31
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: IN
32501: AND
32502: PUSH
32503: LD_VAR 0 12
32507: PUSH
32508: LD_INT 1
32510: ARRAY
32511: PPUSH
32512: CALL_OW 313
32516: PUSH
32517: LD_INT 6
32519: EQUAL
32520: OR
32521: IFFALSE 32541
// f := Delete ( f , 1 ) ;
32523: LD_ADDR_VAR 0 12
32527: PUSH
32528: LD_VAR 0 12
32532: PPUSH
32533: LD_INT 1
32535: PPUSH
32536: CALL_OW 3
32540: ST_TO_ADDR
// if not f then
32541: LD_VAR 0 12
32545: NOT
32546: IFFALSE 32564
// begin x := x + 2 ;
32548: LD_ADDR_VAR 0 13
32552: PUSH
32553: LD_VAR 0 13
32557: PUSH
32558: LD_INT 2
32560: PLUS
32561: ST_TO_ADDR
// continue ;
32562: GO 32362
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32564: LD_VAR 0 12
32568: PUSH
32569: LD_INT 1
32571: ARRAY
32572: PPUSH
32573: CALL_OW 266
32577: PUSH
32578: LD_INT 5
32580: EQUAL
32581: IFFALSE 32655
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32583: LD_VAR 0 12
32587: PUSH
32588: LD_INT 1
32590: ARRAY
32591: PPUSH
32592: CALL_OW 313
32596: PUSH
32597: LD_INT 3
32599: LESS
32600: IFFALSE 32636
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32602: LD_INT 0
32604: PPUSH
32605: LD_INT 5
32607: PUSH
32608: LD_INT 8
32610: PUSH
32611: LD_INT 9
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: PUSH
32619: LD_VAR 0 17
32623: ARRAY
32624: PPUSH
32625: LD_VAR 0 4
32629: PPUSH
32630: CALL_OW 380
32634: GO 32653
// PrepareHuman ( false , i , skill ) ;
32636: LD_INT 0
32638: PPUSH
32639: LD_VAR 0 8
32643: PPUSH
32644: LD_VAR 0 4
32648: PPUSH
32649: CALL_OW 380
// end else
32653: GO 32672
// PrepareHuman ( false , i , skill ) ;
32655: LD_INT 0
32657: PPUSH
32658: LD_VAR 0 8
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: CALL_OW 380
// un := CreateHuman ;
32672: LD_ADDR_VAR 0 14
32676: PUSH
32677: CALL_OW 44
32681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32682: LD_ADDR_VAR 0 7
32686: PUSH
32687: LD_VAR 0 7
32691: PPUSH
32692: LD_INT 1
32694: PPUSH
32695: LD_VAR 0 14
32699: PPUSH
32700: CALL_OW 2
32704: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32705: LD_VAR 0 14
32709: PPUSH
32710: LD_VAR 0 12
32714: PUSH
32715: LD_INT 1
32717: ARRAY
32718: PPUSH
32719: CALL_OW 52
// end ;
32723: GO 32362
32725: POP
32726: POP
// end ;
32727: GO 31664
32729: POP
32730: POP
// result := result ^ buildings ;
32731: LD_ADDR_VAR 0 7
32735: PUSH
32736: LD_VAR 0 7
32740: PUSH
32741: LD_VAR 0 18
32745: ADD
32746: ST_TO_ADDR
// end else
32747: GO 32890
// begin for i = 1 to personel do
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: DOUBLE
32755: LD_INT 1
32757: DEC
32758: ST_TO_ADDR
32759: LD_VAR 0 6
32763: PUSH
32764: FOR_TO
32765: IFFALSE 32888
// begin if i > 4 then
32767: LD_VAR 0 8
32771: PUSH
32772: LD_INT 4
32774: GREATER
32775: IFFALSE 32779
// break ;
32777: GO 32888
// x := personel [ i ] ;
32779: LD_ADDR_VAR 0 13
32783: PUSH
32784: LD_VAR 0 6
32788: PUSH
32789: LD_VAR 0 8
32793: ARRAY
32794: ST_TO_ADDR
// if x = - 1 then
32795: LD_VAR 0 13
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: EQUAL
32804: IFFALSE 32808
// continue ;
32806: GO 32764
// PrepareHuman ( false , i , skill ) ;
32808: LD_INT 0
32810: PPUSH
32811: LD_VAR 0 8
32815: PPUSH
32816: LD_VAR 0 4
32820: PPUSH
32821: CALL_OW 380
// un := CreateHuman ;
32825: LD_ADDR_VAR 0 14
32829: PUSH
32830: CALL_OW 44
32834: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32835: LD_VAR 0 14
32839: PPUSH
32840: LD_VAR 0 1
32844: PPUSH
32845: CALL_OW 250
32849: PPUSH
32850: LD_VAR 0 1
32854: PPUSH
32855: CALL_OW 251
32859: PPUSH
32860: LD_INT 10
32862: PPUSH
32863: LD_INT 0
32865: PPUSH
32866: CALL_OW 50
// result := result ^ un ;
32870: LD_ADDR_VAR 0 7
32874: PUSH
32875: LD_VAR 0 7
32879: PUSH
32880: LD_VAR 0 14
32884: ADD
32885: ST_TO_ADDR
// end ;
32886: GO 32764
32888: POP
32889: POP
// end ; end ;
32890: LD_VAR 0 7
32894: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
32907: PPUSH
32908: PPUSH
32909: PPUSH
32910: PPUSH
32911: PPUSH
32912: PPUSH
// result := false ;
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_INT 0
32920: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32921: LD_VAR 0 1
32925: NOT
32926: PUSH
32927: LD_VAR 0 1
32931: PPUSH
32932: CALL_OW 266
32936: PUSH
32937: LD_INT 32
32939: PUSH
32940: LD_INT 33
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: IN
32947: NOT
32948: OR
32949: IFFALSE 32953
// exit ;
32951: GO 34062
// nat := GetNation ( tower ) ;
32953: LD_ADDR_VAR 0 12
32957: PUSH
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL_OW 248
32967: ST_TO_ADDR
// side := GetSide ( tower ) ;
32968: LD_ADDR_VAR 0 16
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 255
32982: ST_TO_ADDR
// x := GetX ( tower ) ;
32983: LD_ADDR_VAR 0 10
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 250
32997: ST_TO_ADDR
// y := GetY ( tower ) ;
32998: LD_ADDR_VAR 0 11
33002: PUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 251
33012: ST_TO_ADDR
// if not x or not y then
33013: LD_VAR 0 10
33017: NOT
33018: PUSH
33019: LD_VAR 0 11
33023: NOT
33024: OR
33025: IFFALSE 33029
// exit ;
33027: GO 34062
// weapon := 0 ;
33029: LD_ADDR_VAR 0 18
33033: PUSH
33034: LD_INT 0
33036: ST_TO_ADDR
// fac_list := [ ] ;
33037: LD_ADDR_VAR 0 17
33041: PUSH
33042: EMPTY
33043: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33044: LD_ADDR_VAR 0 6
33048: PUSH
33049: LD_VAR 0 1
33053: PPUSH
33054: CALL_OW 274
33058: PPUSH
33059: LD_VAR 0 2
33063: PPUSH
33064: LD_INT 0
33066: PPUSH
33067: CALL 30633 0 3
33071: PPUSH
33072: LD_INT 30
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 72
33086: ST_TO_ADDR
// if not factories then
33087: LD_VAR 0 6
33091: NOT
33092: IFFALSE 33096
// exit ;
33094: GO 34062
// for i in factories do
33096: LD_ADDR_VAR 0 8
33100: PUSH
33101: LD_VAR 0 6
33105: PUSH
33106: FOR_IN
33107: IFFALSE 33132
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33109: LD_ADDR_VAR 0 17
33113: PUSH
33114: LD_VAR 0 17
33118: PUSH
33119: LD_VAR 0 8
33123: PPUSH
33124: CALL_OW 478
33128: UNION
33129: ST_TO_ADDR
33130: GO 33106
33132: POP
33133: POP
// if not fac_list then
33134: LD_VAR 0 17
33138: NOT
33139: IFFALSE 33143
// exit ;
33141: GO 34062
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33143: LD_ADDR_VAR 0 5
33147: PUSH
33148: LD_INT 4
33150: PUSH
33151: LD_INT 5
33153: PUSH
33154: LD_INT 9
33156: PUSH
33157: LD_INT 10
33159: PUSH
33160: LD_INT 6
33162: PUSH
33163: LD_INT 7
33165: PUSH
33166: LD_INT 11
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 27
33180: PUSH
33181: LD_INT 28
33183: PUSH
33184: LD_INT 26
33186: PUSH
33187: LD_INT 30
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 43
33198: PUSH
33199: LD_INT 44
33201: PUSH
33202: LD_INT 46
33204: PUSH
33205: LD_INT 45
33207: PUSH
33208: LD_INT 47
33210: PUSH
33211: LD_INT 49
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: LIST
33226: PUSH
33227: LD_VAR 0 12
33231: ARRAY
33232: ST_TO_ADDR
// list := list isect fac_list ;
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: LD_VAR 0 5
33242: PUSH
33243: LD_VAR 0 17
33247: ISECT
33248: ST_TO_ADDR
// if not list then
33249: LD_VAR 0 5
33253: NOT
33254: IFFALSE 33258
// exit ;
33256: GO 34062
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33258: LD_VAR 0 12
33262: PUSH
33263: LD_INT 3
33265: EQUAL
33266: PUSH
33267: LD_INT 49
33269: PUSH
33270: LD_VAR 0 5
33274: IN
33275: AND
33276: PUSH
33277: LD_INT 31
33279: PPUSH
33280: LD_VAR 0 16
33284: PPUSH
33285: CALL_OW 321
33289: PUSH
33290: LD_INT 2
33292: EQUAL
33293: AND
33294: IFFALSE 33354
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33296: LD_INT 22
33298: PUSH
33299: LD_VAR 0 16
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 35
33310: PUSH
33311: LD_INT 49
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 91
33320: PUSH
33321: LD_VAR 0 1
33325: PUSH
33326: LD_INT 10
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: LIST
33338: PPUSH
33339: CALL_OW 69
33343: NOT
33344: IFFALSE 33354
// weapon := ru_time_lapser ;
33346: LD_ADDR_VAR 0 18
33350: PUSH
33351: LD_INT 49
33353: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33354: LD_VAR 0 12
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: IN
33369: PUSH
33370: LD_INT 11
33372: PUSH
33373: LD_VAR 0 5
33377: IN
33378: PUSH
33379: LD_INT 30
33381: PUSH
33382: LD_VAR 0 5
33386: IN
33387: OR
33388: AND
33389: PUSH
33390: LD_INT 6
33392: PPUSH
33393: LD_VAR 0 16
33397: PPUSH
33398: CALL_OW 321
33402: PUSH
33403: LD_INT 2
33405: EQUAL
33406: AND
33407: IFFALSE 33572
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33409: LD_INT 22
33411: PUSH
33412: LD_VAR 0 16
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: LD_INT 35
33426: PUSH
33427: LD_INT 11
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 35
33436: PUSH
33437: LD_INT 30
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 91
33451: PUSH
33452: LD_VAR 0 1
33456: PUSH
33457: LD_INT 18
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: LIST
33469: PPUSH
33470: CALL_OW 69
33474: NOT
33475: PUSH
33476: LD_INT 22
33478: PUSH
33479: LD_VAR 0 16
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: LD_INT 30
33493: PUSH
33494: LD_INT 32
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 30
33503: PUSH
33504: LD_INT 33
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 91
33518: PUSH
33519: LD_VAR 0 1
33523: PUSH
33524: LD_INT 12
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: PPUSH
33540: CALL_OW 69
33544: PUSH
33545: LD_INT 2
33547: GREATER
33548: AND
33549: IFFALSE 33572
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33551: LD_ADDR_VAR 0 18
33555: PUSH
33556: LD_INT 11
33558: PUSH
33559: LD_INT 30
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_VAR 0 12
33570: ARRAY
33571: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33572: LD_VAR 0 18
33576: NOT
33577: PUSH
33578: LD_INT 40
33580: PPUSH
33581: LD_VAR 0 16
33585: PPUSH
33586: CALL_OW 321
33590: PUSH
33591: LD_INT 2
33593: EQUAL
33594: AND
33595: PUSH
33596: LD_INT 7
33598: PUSH
33599: LD_VAR 0 5
33603: IN
33604: PUSH
33605: LD_INT 28
33607: PUSH
33608: LD_VAR 0 5
33612: IN
33613: OR
33614: PUSH
33615: LD_INT 45
33617: PUSH
33618: LD_VAR 0 5
33622: IN
33623: OR
33624: AND
33625: IFFALSE 33879
// begin hex := GetHexInfo ( x , y ) ;
33627: LD_ADDR_VAR 0 4
33631: PUSH
33632: LD_VAR 0 10
33636: PPUSH
33637: LD_VAR 0 11
33641: PPUSH
33642: CALL_OW 546
33646: ST_TO_ADDR
// if hex [ 1 ] then
33647: LD_VAR 0 4
33651: PUSH
33652: LD_INT 1
33654: ARRAY
33655: IFFALSE 33659
// exit ;
33657: GO 34062
// height := hex [ 2 ] ;
33659: LD_ADDR_VAR 0 15
33663: PUSH
33664: LD_VAR 0 4
33668: PUSH
33669: LD_INT 2
33671: ARRAY
33672: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33673: LD_ADDR_VAR 0 14
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 3
33686: PUSH
33687: LD_INT 5
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// for i in tmp do
33696: LD_ADDR_VAR 0 8
33700: PUSH
33701: LD_VAR 0 14
33705: PUSH
33706: FOR_IN
33707: IFFALSE 33877
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33709: LD_ADDR_VAR 0 9
33713: PUSH
33714: LD_VAR 0 10
33718: PPUSH
33719: LD_VAR 0 8
33723: PPUSH
33724: LD_INT 5
33726: PPUSH
33727: CALL_OW 272
33731: PUSH
33732: LD_VAR 0 11
33736: PPUSH
33737: LD_VAR 0 8
33741: PPUSH
33742: LD_INT 5
33744: PPUSH
33745: CALL_OW 273
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33754: LD_VAR 0 9
33758: PUSH
33759: LD_INT 1
33761: ARRAY
33762: PPUSH
33763: LD_VAR 0 9
33767: PUSH
33768: LD_INT 2
33770: ARRAY
33771: PPUSH
33772: CALL_OW 488
33776: IFFALSE 33875
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33778: LD_ADDR_VAR 0 4
33782: PUSH
33783: LD_VAR 0 9
33787: PUSH
33788: LD_INT 1
33790: ARRAY
33791: PPUSH
33792: LD_VAR 0 9
33796: PUSH
33797: LD_INT 2
33799: ARRAY
33800: PPUSH
33801: CALL_OW 546
33805: ST_TO_ADDR
// if hex [ 1 ] then
33806: LD_VAR 0 4
33810: PUSH
33811: LD_INT 1
33813: ARRAY
33814: IFFALSE 33818
// continue ;
33816: GO 33706
// h := hex [ 2 ] ;
33818: LD_ADDR_VAR 0 13
33822: PUSH
33823: LD_VAR 0 4
33827: PUSH
33828: LD_INT 2
33830: ARRAY
33831: ST_TO_ADDR
// if h + 7 < height then
33832: LD_VAR 0 13
33836: PUSH
33837: LD_INT 7
33839: PLUS
33840: PUSH
33841: LD_VAR 0 15
33845: LESS
33846: IFFALSE 33875
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33848: LD_ADDR_VAR 0 18
33852: PUSH
33853: LD_INT 7
33855: PUSH
33856: LD_INT 28
33858: PUSH
33859: LD_INT 45
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: PUSH
33867: LD_VAR 0 12
33871: ARRAY
33872: ST_TO_ADDR
// break ;
33873: GO 33877
// end ; end ; end ;
33875: GO 33706
33877: POP
33878: POP
// end ; if not weapon then
33879: LD_VAR 0 18
33883: NOT
33884: IFFALSE 33944
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33886: LD_ADDR_VAR 0 5
33890: PUSH
33891: LD_VAR 0 5
33895: PUSH
33896: LD_INT 11
33898: PUSH
33899: LD_INT 30
33901: PUSH
33902: LD_INT 49
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: DIFF
33910: ST_TO_ADDR
// if not list then
33911: LD_VAR 0 5
33915: NOT
33916: IFFALSE 33920
// exit ;
33918: GO 34062
// weapon := list [ rand ( 1 , list ) ] ;
33920: LD_ADDR_VAR 0 18
33924: PUSH
33925: LD_VAR 0 5
33929: PUSH
33930: LD_INT 1
33932: PPUSH
33933: LD_VAR 0 5
33937: PPUSH
33938: CALL_OW 12
33942: ARRAY
33943: ST_TO_ADDR
// end ; if weapon then
33944: LD_VAR 0 18
33948: IFFALSE 34062
// begin tmp := CostOfWeapon ( weapon ) ;
33950: LD_ADDR_VAR 0 14
33954: PUSH
33955: LD_VAR 0 18
33959: PPUSH
33960: CALL_OW 451
33964: ST_TO_ADDR
// j := GetBase ( tower ) ;
33965: LD_ADDR_VAR 0 9
33969: PUSH
33970: LD_VAR 0 1
33974: PPUSH
33975: CALL_OW 274
33979: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33980: LD_VAR 0 9
33984: PPUSH
33985: LD_INT 1
33987: PPUSH
33988: CALL_OW 275
33992: PUSH
33993: LD_VAR 0 14
33997: PUSH
33998: LD_INT 1
34000: ARRAY
34001: GREATEREQUAL
34002: PUSH
34003: LD_VAR 0 9
34007: PPUSH
34008: LD_INT 2
34010: PPUSH
34011: CALL_OW 275
34015: PUSH
34016: LD_VAR 0 14
34020: PUSH
34021: LD_INT 2
34023: ARRAY
34024: GREATEREQUAL
34025: AND
34026: PUSH
34027: LD_VAR 0 9
34031: PPUSH
34032: LD_INT 3
34034: PPUSH
34035: CALL_OW 275
34039: PUSH
34040: LD_VAR 0 14
34044: PUSH
34045: LD_INT 3
34047: ARRAY
34048: GREATEREQUAL
34049: AND
34050: IFFALSE 34062
// result := weapon ;
34052: LD_ADDR_VAR 0 3
34056: PUSH
34057: LD_VAR 0 18
34061: ST_TO_ADDR
// end ; end ;
34062: LD_VAR 0 3
34066: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34067: LD_INT 0
34069: PPUSH
34070: PPUSH
// result := true ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_INT 1
34078: ST_TO_ADDR
// if array1 = array2 then
34079: LD_VAR 0 1
34083: PUSH
34084: LD_VAR 0 2
34088: EQUAL
34089: IFFALSE 34149
// begin for i = 1 to array1 do
34091: LD_ADDR_VAR 0 4
34095: PUSH
34096: DOUBLE
34097: LD_INT 1
34099: DEC
34100: ST_TO_ADDR
34101: LD_VAR 0 1
34105: PUSH
34106: FOR_TO
34107: IFFALSE 34145
// if array1 [ i ] <> array2 [ i ] then
34109: LD_VAR 0 1
34113: PUSH
34114: LD_VAR 0 4
34118: ARRAY
34119: PUSH
34120: LD_VAR 0 2
34124: PUSH
34125: LD_VAR 0 4
34129: ARRAY
34130: NONEQUAL
34131: IFFALSE 34143
// begin result := false ;
34133: LD_ADDR_VAR 0 3
34137: PUSH
34138: LD_INT 0
34140: ST_TO_ADDR
// break ;
34141: GO 34145
// end ;
34143: GO 34106
34145: POP
34146: POP
// end else
34147: GO 34157
// result := false ;
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_INT 0
34156: ST_TO_ADDR
// end ;
34157: LD_VAR 0 3
34161: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34162: LD_INT 0
34164: PPUSH
34165: PPUSH
// if not array1 or not array2 then
34166: LD_VAR 0 1
34170: NOT
34171: PUSH
34172: LD_VAR 0 2
34176: NOT
34177: OR
34178: IFFALSE 34182
// exit ;
34180: GO 34246
// result := true ;
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_INT 1
34189: ST_TO_ADDR
// for i = 1 to array1 do
34190: LD_ADDR_VAR 0 4
34194: PUSH
34195: DOUBLE
34196: LD_INT 1
34198: DEC
34199: ST_TO_ADDR
34200: LD_VAR 0 1
34204: PUSH
34205: FOR_TO
34206: IFFALSE 34244
// if array1 [ i ] <> array2 [ i ] then
34208: LD_VAR 0 1
34212: PUSH
34213: LD_VAR 0 4
34217: ARRAY
34218: PUSH
34219: LD_VAR 0 2
34223: PUSH
34224: LD_VAR 0 4
34228: ARRAY
34229: NONEQUAL
34230: IFFALSE 34242
// begin result := false ;
34232: LD_ADDR_VAR 0 3
34236: PUSH
34237: LD_INT 0
34239: ST_TO_ADDR
// break ;
34240: GO 34244
// end ;
34242: GO 34205
34244: POP
34245: POP
// end ;
34246: LD_VAR 0 3
34250: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
// pom := GetBase ( fac ) ;
34256: LD_ADDR_VAR 0 5
34260: PUSH
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 274
34270: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34271: LD_ADDR_VAR 0 4
34275: PUSH
34276: LD_VAR 0 2
34280: PUSH
34281: LD_INT 1
34283: ARRAY
34284: PPUSH
34285: LD_VAR 0 2
34289: PUSH
34290: LD_INT 2
34292: ARRAY
34293: PPUSH
34294: LD_VAR 0 2
34298: PUSH
34299: LD_INT 3
34301: ARRAY
34302: PPUSH
34303: LD_VAR 0 2
34307: PUSH
34308: LD_INT 4
34310: ARRAY
34311: PPUSH
34312: CALL_OW 449
34316: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34317: LD_ADDR_VAR 0 3
34321: PUSH
34322: LD_VAR 0 5
34326: PPUSH
34327: LD_INT 1
34329: PPUSH
34330: CALL_OW 275
34334: PUSH
34335: LD_VAR 0 4
34339: PUSH
34340: LD_INT 1
34342: ARRAY
34343: GREATEREQUAL
34344: PUSH
34345: LD_VAR 0 5
34349: PPUSH
34350: LD_INT 2
34352: PPUSH
34353: CALL_OW 275
34357: PUSH
34358: LD_VAR 0 4
34362: PUSH
34363: LD_INT 2
34365: ARRAY
34366: GREATEREQUAL
34367: AND
34368: PUSH
34369: LD_VAR 0 5
34373: PPUSH
34374: LD_INT 3
34376: PPUSH
34377: CALL_OW 275
34381: PUSH
34382: LD_VAR 0 4
34386: PUSH
34387: LD_INT 3
34389: ARRAY
34390: GREATEREQUAL
34391: AND
34392: ST_TO_ADDR
// end ;
34393: LD_VAR 0 3
34397: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34398: LD_INT 0
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
// pom := GetBase ( building ) ;
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 274
34418: ST_TO_ADDR
// if not pom then
34419: LD_VAR 0 3
34423: NOT
34424: IFFALSE 34428
// exit ;
34426: GO 34598
// btype := GetBType ( building ) ;
34428: LD_ADDR_VAR 0 5
34432: PUSH
34433: LD_VAR 0 1
34437: PPUSH
34438: CALL_OW 266
34442: ST_TO_ADDR
// if btype = b_armoury then
34443: LD_VAR 0 5
34447: PUSH
34448: LD_INT 4
34450: EQUAL
34451: IFFALSE 34461
// btype := b_barracks ;
34453: LD_ADDR_VAR 0 5
34457: PUSH
34458: LD_INT 5
34460: ST_TO_ADDR
// if btype = b_depot then
34461: LD_VAR 0 5
34465: PUSH
34466: LD_INT 0
34468: EQUAL
34469: IFFALSE 34479
// btype := b_warehouse ;
34471: LD_ADDR_VAR 0 5
34475: PUSH
34476: LD_INT 1
34478: ST_TO_ADDR
// if btype = b_workshop then
34479: LD_VAR 0 5
34483: PUSH
34484: LD_INT 2
34486: EQUAL
34487: IFFALSE 34497
// btype := b_factory ;
34489: LD_ADDR_VAR 0 5
34493: PUSH
34494: LD_INT 3
34496: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34497: LD_ADDR_VAR 0 4
34501: PUSH
34502: LD_VAR 0 5
34506: PPUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 248
34516: PPUSH
34517: CALL_OW 450
34521: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34522: LD_ADDR_VAR 0 2
34526: PUSH
34527: LD_VAR 0 3
34531: PPUSH
34532: LD_INT 1
34534: PPUSH
34535: CALL_OW 275
34539: PUSH
34540: LD_VAR 0 4
34544: PUSH
34545: LD_INT 1
34547: ARRAY
34548: GREATEREQUAL
34549: PUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: LD_INT 2
34557: PPUSH
34558: CALL_OW 275
34562: PUSH
34563: LD_VAR 0 4
34567: PUSH
34568: LD_INT 2
34570: ARRAY
34571: GREATEREQUAL
34572: AND
34573: PUSH
34574: LD_VAR 0 3
34578: PPUSH
34579: LD_INT 3
34581: PPUSH
34582: CALL_OW 275
34586: PUSH
34587: LD_VAR 0 4
34591: PUSH
34592: LD_INT 3
34594: ARRAY
34595: GREATEREQUAL
34596: AND
34597: ST_TO_ADDR
// end ;
34598: LD_VAR 0 2
34602: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34603: LD_INT 0
34605: PPUSH
34606: PPUSH
34607: PPUSH
// pom := GetBase ( building ) ;
34608: LD_ADDR_VAR 0 4
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 274
34622: ST_TO_ADDR
// if not pom then
34623: LD_VAR 0 4
34627: NOT
34628: IFFALSE 34632
// exit ;
34630: GO 34733
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34632: LD_ADDR_VAR 0 5
34636: PUSH
34637: LD_VAR 0 2
34641: PPUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 248
34651: PPUSH
34652: CALL_OW 450
34656: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_VAR 0 4
34666: PPUSH
34667: LD_INT 1
34669: PPUSH
34670: CALL_OW 275
34674: PUSH
34675: LD_VAR 0 5
34679: PUSH
34680: LD_INT 1
34682: ARRAY
34683: GREATEREQUAL
34684: PUSH
34685: LD_VAR 0 4
34689: PPUSH
34690: LD_INT 2
34692: PPUSH
34693: CALL_OW 275
34697: PUSH
34698: LD_VAR 0 5
34702: PUSH
34703: LD_INT 2
34705: ARRAY
34706: GREATEREQUAL
34707: AND
34708: PUSH
34709: LD_VAR 0 4
34713: PPUSH
34714: LD_INT 3
34716: PPUSH
34717: CALL_OW 275
34721: PUSH
34722: LD_VAR 0 5
34726: PUSH
34727: LD_INT 3
34729: ARRAY
34730: GREATEREQUAL
34731: AND
34732: ST_TO_ADDR
// end ;
34733: LD_VAR 0 3
34737: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34738: LD_INT 0
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
// result := false ;
34751: LD_ADDR_VAR 0 8
34755: PUSH
34756: LD_INT 0
34758: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34759: LD_VAR 0 5
34763: NOT
34764: PUSH
34765: LD_VAR 0 1
34769: NOT
34770: OR
34771: PUSH
34772: LD_VAR 0 2
34776: NOT
34777: OR
34778: PUSH
34779: LD_VAR 0 3
34783: NOT
34784: OR
34785: IFFALSE 34789
// exit ;
34787: GO 35603
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34789: LD_ADDR_VAR 0 14
34793: PUSH
34794: LD_VAR 0 1
34798: PPUSH
34799: LD_VAR 0 2
34803: PPUSH
34804: LD_VAR 0 3
34808: PPUSH
34809: LD_VAR 0 4
34813: PPUSH
34814: LD_VAR 0 5
34818: PUSH
34819: LD_INT 1
34821: ARRAY
34822: PPUSH
34823: CALL_OW 248
34827: PPUSH
34828: LD_INT 0
34830: PPUSH
34831: CALL 36856 0 6
34835: ST_TO_ADDR
// if not hexes then
34836: LD_VAR 0 14
34840: NOT
34841: IFFALSE 34845
// exit ;
34843: GO 35603
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34845: LD_ADDR_VAR 0 17
34849: PUSH
34850: LD_VAR 0 5
34854: PPUSH
34855: LD_INT 22
34857: PUSH
34858: LD_VAR 0 13
34862: PPUSH
34863: CALL_OW 255
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 30
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 30
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PPUSH
34904: CALL_OW 72
34908: ST_TO_ADDR
// for i = 1 to hexes do
34909: LD_ADDR_VAR 0 9
34913: PUSH
34914: DOUBLE
34915: LD_INT 1
34917: DEC
34918: ST_TO_ADDR
34919: LD_VAR 0 14
34923: PUSH
34924: FOR_TO
34925: IFFALSE 35601
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34927: LD_ADDR_VAR 0 13
34931: PUSH
34932: LD_VAR 0 14
34936: PUSH
34937: LD_VAR 0 9
34941: ARRAY
34942: PUSH
34943: LD_INT 1
34945: ARRAY
34946: PPUSH
34947: LD_VAR 0 14
34951: PUSH
34952: LD_VAR 0 9
34956: ARRAY
34957: PUSH
34958: LD_INT 2
34960: ARRAY
34961: PPUSH
34962: CALL_OW 428
34966: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34967: LD_VAR 0 14
34971: PUSH
34972: LD_VAR 0 9
34976: ARRAY
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: PPUSH
34982: LD_VAR 0 14
34986: PUSH
34987: LD_VAR 0 9
34991: ARRAY
34992: PUSH
34993: LD_INT 2
34995: ARRAY
34996: PPUSH
34997: CALL_OW 351
35001: PUSH
35002: LD_VAR 0 14
35006: PUSH
35007: LD_VAR 0 9
35011: ARRAY
35012: PUSH
35013: LD_INT 1
35015: ARRAY
35016: PPUSH
35017: LD_VAR 0 14
35021: PUSH
35022: LD_VAR 0 9
35026: ARRAY
35027: PUSH
35028: LD_INT 2
35030: ARRAY
35031: PPUSH
35032: CALL_OW 488
35036: NOT
35037: OR
35038: PUSH
35039: LD_VAR 0 13
35043: PPUSH
35044: CALL_OW 247
35048: PUSH
35049: LD_INT 3
35051: EQUAL
35052: OR
35053: IFFALSE 35059
// exit ;
35055: POP
35056: POP
35057: GO 35603
// if not tmp then
35059: LD_VAR 0 13
35063: NOT
35064: IFFALSE 35068
// continue ;
35066: GO 34924
// result := true ;
35068: LD_ADDR_VAR 0 8
35072: PUSH
35073: LD_INT 1
35075: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35076: LD_VAR 0 6
35080: PUSH
35081: LD_VAR 0 13
35085: PPUSH
35086: CALL_OW 247
35090: PUSH
35091: LD_INT 2
35093: EQUAL
35094: AND
35095: PUSH
35096: LD_VAR 0 13
35100: PPUSH
35101: CALL_OW 263
35105: PUSH
35106: LD_INT 1
35108: EQUAL
35109: AND
35110: IFFALSE 35274
// begin if IsDrivenBy ( tmp ) then
35112: LD_VAR 0 13
35116: PPUSH
35117: CALL_OW 311
35121: IFFALSE 35125
// continue ;
35123: GO 34924
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35125: LD_VAR 0 6
35129: PPUSH
35130: LD_INT 3
35132: PUSH
35133: LD_INT 60
35135: PUSH
35136: EMPTY
35137: LIST
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 55
35148: PUSH
35149: EMPTY
35150: LIST
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PPUSH
35160: CALL_OW 72
35164: IFFALSE 35272
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35166: LD_ADDR_VAR 0 18
35170: PUSH
35171: LD_VAR 0 6
35175: PPUSH
35176: LD_INT 3
35178: PUSH
35179: LD_INT 60
35181: PUSH
35182: EMPTY
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: LD_INT 55
35194: PUSH
35195: EMPTY
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PPUSH
35206: CALL_OW 72
35210: PUSH
35211: LD_INT 1
35213: ARRAY
35214: ST_TO_ADDR
// if IsInUnit ( driver ) then
35215: LD_VAR 0 18
35219: PPUSH
35220: CALL_OW 310
35224: IFFALSE 35235
// ComExit ( driver ) ;
35226: LD_VAR 0 18
35230: PPUSH
35231: CALL 60648 0 1
// AddComEnterUnit ( driver , tmp ) ;
35235: LD_VAR 0 18
35239: PPUSH
35240: LD_VAR 0 13
35244: PPUSH
35245: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35249: LD_VAR 0 18
35253: PPUSH
35254: LD_VAR 0 7
35258: PPUSH
35259: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35263: LD_VAR 0 18
35267: PPUSH
35268: CALL_OW 181
// end ; continue ;
35272: GO 34924
// end ; if not cleaners or not tmp in cleaners then
35274: LD_VAR 0 6
35278: NOT
35279: PUSH
35280: LD_VAR 0 13
35284: PUSH
35285: LD_VAR 0 6
35289: IN
35290: NOT
35291: OR
35292: IFFALSE 35599
// begin if dep then
35294: LD_VAR 0 17
35298: IFFALSE 35434
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35300: LD_ADDR_VAR 0 16
35304: PUSH
35305: LD_VAR 0 17
35309: PUSH
35310: LD_INT 1
35312: ARRAY
35313: PPUSH
35314: CALL_OW 250
35318: PPUSH
35319: LD_VAR 0 17
35323: PUSH
35324: LD_INT 1
35326: ARRAY
35327: PPUSH
35328: CALL_OW 254
35332: PPUSH
35333: LD_INT 5
35335: PPUSH
35336: CALL_OW 272
35340: PUSH
35341: LD_VAR 0 17
35345: PUSH
35346: LD_INT 1
35348: ARRAY
35349: PPUSH
35350: CALL_OW 251
35354: PPUSH
35355: LD_VAR 0 17
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PPUSH
35364: CALL_OW 254
35368: PPUSH
35369: LD_INT 5
35371: PPUSH
35372: CALL_OW 273
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35381: LD_VAR 0 16
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: PPUSH
35390: LD_VAR 0 16
35394: PUSH
35395: LD_INT 2
35397: ARRAY
35398: PPUSH
35399: CALL_OW 488
35403: IFFALSE 35434
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35405: LD_VAR 0 13
35409: PPUSH
35410: LD_VAR 0 16
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: PPUSH
35419: LD_VAR 0 16
35423: PUSH
35424: LD_INT 2
35426: ARRAY
35427: PPUSH
35428: CALL_OW 111
// continue ;
35432: GO 34924
// end ; end ; r := GetDir ( tmp ) ;
35434: LD_ADDR_VAR 0 15
35438: PUSH
35439: LD_VAR 0 13
35443: PPUSH
35444: CALL_OW 254
35448: ST_TO_ADDR
// if r = 5 then
35449: LD_VAR 0 15
35453: PUSH
35454: LD_INT 5
35456: EQUAL
35457: IFFALSE 35467
// r := 0 ;
35459: LD_ADDR_VAR 0 15
35463: PUSH
35464: LD_INT 0
35466: ST_TO_ADDR
// for j = r to 5 do
35467: LD_ADDR_VAR 0 10
35471: PUSH
35472: DOUBLE
35473: LD_VAR 0 15
35477: DEC
35478: ST_TO_ADDR
35479: LD_INT 5
35481: PUSH
35482: FOR_TO
35483: IFFALSE 35597
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35485: LD_ADDR_VAR 0 11
35489: PUSH
35490: LD_VAR 0 13
35494: PPUSH
35495: CALL_OW 250
35499: PPUSH
35500: LD_VAR 0 10
35504: PPUSH
35505: LD_INT 2
35507: PPUSH
35508: CALL_OW 272
35512: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35513: LD_ADDR_VAR 0 12
35517: PUSH
35518: LD_VAR 0 13
35522: PPUSH
35523: CALL_OW 251
35527: PPUSH
35528: LD_VAR 0 10
35532: PPUSH
35533: LD_INT 2
35535: PPUSH
35536: CALL_OW 273
35540: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35541: LD_VAR 0 11
35545: PPUSH
35546: LD_VAR 0 12
35550: PPUSH
35551: CALL_OW 488
35555: PUSH
35556: LD_VAR 0 11
35560: PPUSH
35561: LD_VAR 0 12
35565: PPUSH
35566: CALL_OW 428
35570: NOT
35571: AND
35572: IFFALSE 35595
// begin ComMoveXY ( tmp , _x , _y ) ;
35574: LD_VAR 0 13
35578: PPUSH
35579: LD_VAR 0 11
35583: PPUSH
35584: LD_VAR 0 12
35588: PPUSH
35589: CALL_OW 111
// break ;
35593: GO 35597
// end ; end ;
35595: GO 35482
35597: POP
35598: POP
// end ; end ;
35599: GO 34924
35601: POP
35602: POP
// end ;
35603: LD_VAR 0 8
35607: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35608: LD_INT 0
35610: PPUSH
// result := true ;
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: LD_INT 1
35618: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35619: LD_VAR 0 2
35623: PUSH
35624: LD_INT 24
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35638
35630: LD_INT 33
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35663
35638: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: LD_INT 32
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 321
35656: PUSH
35657: LD_INT 2
35659: EQUAL
35660: ST_TO_ADDR
35661: GO 35979
35663: LD_INT 20
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35696
35671: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_INT 6
35679: PPUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 321
35689: PUSH
35690: LD_INT 2
35692: EQUAL
35693: ST_TO_ADDR
35694: GO 35979
35696: LD_INT 22
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35710
35702: LD_INT 36
35704: DOUBLE
35705: EQUAL
35706: IFTRUE 35710
35708: GO 35735
35710: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35711: LD_ADDR_VAR 0 3
35715: PUSH
35716: LD_INT 15
35718: PPUSH
35719: LD_VAR 0 1
35723: PPUSH
35724: CALL_OW 321
35728: PUSH
35729: LD_INT 2
35731: EQUAL
35732: ST_TO_ADDR
35733: GO 35979
35735: LD_INT 30
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35743
35741: GO 35768
35743: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_INT 20
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 321
35761: PUSH
35762: LD_INT 2
35764: EQUAL
35765: ST_TO_ADDR
35766: GO 35979
35768: LD_INT 28
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35782
35774: LD_INT 21
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35782
35780: GO 35807
35782: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35783: LD_ADDR_VAR 0 3
35787: PUSH
35788: LD_INT 21
35790: PPUSH
35791: LD_VAR 0 1
35795: PPUSH
35796: CALL_OW 321
35800: PUSH
35801: LD_INT 2
35803: EQUAL
35804: ST_TO_ADDR
35805: GO 35979
35807: LD_INT 16
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35840
35815: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35816: LD_ADDR_VAR 0 3
35820: PUSH
35821: LD_INT 84
35823: PPUSH
35824: LD_VAR 0 1
35828: PPUSH
35829: CALL_OW 321
35833: PUSH
35834: LD_INT 2
35836: EQUAL
35837: ST_TO_ADDR
35838: GO 35979
35840: LD_INT 19
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35854
35846: LD_INT 23
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35854
35852: GO 35879
35854: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_INT 83
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 321
35872: PUSH
35873: LD_INT 2
35875: EQUAL
35876: ST_TO_ADDR
35877: GO 35979
35879: LD_INT 17
35881: DOUBLE
35882: EQUAL
35883: IFTRUE 35887
35885: GO 35912
35887: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35888: LD_ADDR_VAR 0 3
35892: PUSH
35893: LD_INT 39
35895: PPUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 321
35905: PUSH
35906: LD_INT 2
35908: EQUAL
35909: ST_TO_ADDR
35910: GO 35979
35912: LD_INT 18
35914: DOUBLE
35915: EQUAL
35916: IFTRUE 35920
35918: GO 35945
35920: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35921: LD_ADDR_VAR 0 3
35925: PUSH
35926: LD_INT 40
35928: PPUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 321
35938: PUSH
35939: LD_INT 2
35941: EQUAL
35942: ST_TO_ADDR
35943: GO 35979
35945: LD_INT 27
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35953
35951: GO 35978
35953: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35954: LD_ADDR_VAR 0 3
35958: PUSH
35959: LD_INT 35
35961: PPUSH
35962: LD_VAR 0 1
35966: PPUSH
35967: CALL_OW 321
35971: PUSH
35972: LD_INT 2
35974: EQUAL
35975: ST_TO_ADDR
35976: GO 35979
35978: POP
// end ;
35979: LD_VAR 0 3
35983: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
// result := false ;
35997: LD_ADDR_VAR 0 6
36001: PUSH
36002: LD_INT 0
36004: ST_TO_ADDR
// if btype = b_depot then
36005: LD_VAR 0 2
36009: PUSH
36010: LD_INT 0
36012: EQUAL
36013: IFFALSE 36025
// begin result := true ;
36015: LD_ADDR_VAR 0 6
36019: PUSH
36020: LD_INT 1
36022: ST_TO_ADDR
// exit ;
36023: GO 36851
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36025: LD_VAR 0 1
36029: NOT
36030: PUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 266
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: IN
36051: NOT
36052: OR
36053: PUSH
36054: LD_VAR 0 2
36058: NOT
36059: OR
36060: PUSH
36061: LD_VAR 0 5
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 3
36077: PUSH
36078: LD_INT 4
36080: PUSH
36081: LD_INT 5
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: IN
36092: NOT
36093: OR
36094: PUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: LD_VAR 0 4
36104: PPUSH
36105: CALL_OW 488
36109: NOT
36110: OR
36111: IFFALSE 36115
// exit ;
36113: GO 36851
// side := GetSide ( depot ) ;
36115: LD_ADDR_VAR 0 9
36119: PUSH
36120: LD_VAR 0 1
36124: PPUSH
36125: CALL_OW 255
36129: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36130: LD_VAR 0 9
36134: PPUSH
36135: LD_VAR 0 2
36139: PPUSH
36140: CALL 35608 0 2
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 36851
// pom := GetBase ( depot ) ;
36149: LD_ADDR_VAR 0 10
36153: PUSH
36154: LD_VAR 0 1
36158: PPUSH
36159: CALL_OW 274
36163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36164: LD_ADDR_VAR 0 11
36168: PUSH
36169: LD_VAR 0 2
36173: PPUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 248
36183: PPUSH
36184: CALL_OW 450
36188: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36189: LD_VAR 0 10
36193: PPUSH
36194: LD_INT 1
36196: PPUSH
36197: CALL_OW 275
36201: PUSH
36202: LD_VAR 0 11
36206: PUSH
36207: LD_INT 1
36209: ARRAY
36210: GREATEREQUAL
36211: PUSH
36212: LD_VAR 0 10
36216: PPUSH
36217: LD_INT 2
36219: PPUSH
36220: CALL_OW 275
36224: PUSH
36225: LD_VAR 0 11
36229: PUSH
36230: LD_INT 2
36232: ARRAY
36233: GREATEREQUAL
36234: AND
36235: PUSH
36236: LD_VAR 0 10
36240: PPUSH
36241: LD_INT 3
36243: PPUSH
36244: CALL_OW 275
36248: PUSH
36249: LD_VAR 0 11
36253: PUSH
36254: LD_INT 3
36256: ARRAY
36257: GREATEREQUAL
36258: AND
36259: NOT
36260: IFFALSE 36264
// exit ;
36262: GO 36851
// if GetBType ( depot ) = b_depot then
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 266
36273: PUSH
36274: LD_INT 0
36276: EQUAL
36277: IFFALSE 36289
// dist := 28 else
36279: LD_ADDR_VAR 0 14
36283: PUSH
36284: LD_INT 28
36286: ST_TO_ADDR
36287: GO 36297
// dist := 36 ;
36289: LD_ADDR_VAR 0 14
36293: PUSH
36294: LD_INT 36
36296: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36297: LD_VAR 0 1
36301: PPUSH
36302: LD_VAR 0 3
36306: PPUSH
36307: LD_VAR 0 4
36311: PPUSH
36312: CALL_OW 297
36316: PUSH
36317: LD_VAR 0 14
36321: GREATER
36322: IFFALSE 36326
// exit ;
36324: GO 36851
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36326: LD_ADDR_VAR 0 12
36330: PUSH
36331: LD_VAR 0 2
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: LD_VAR 0 4
36345: PPUSH
36346: LD_VAR 0 5
36350: PPUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 248
36360: PPUSH
36361: LD_INT 0
36363: PPUSH
36364: CALL 36856 0 6
36368: ST_TO_ADDR
// if not hexes then
36369: LD_VAR 0 12
36373: NOT
36374: IFFALSE 36378
// exit ;
36376: GO 36851
// hex := GetHexInfo ( x , y ) ;
36378: LD_ADDR_VAR 0 15
36382: PUSH
36383: LD_VAR 0 3
36387: PPUSH
36388: LD_VAR 0 4
36392: PPUSH
36393: CALL_OW 546
36397: ST_TO_ADDR
// if hex [ 1 ] then
36398: LD_VAR 0 15
36402: PUSH
36403: LD_INT 1
36405: ARRAY
36406: IFFALSE 36410
// exit ;
36408: GO 36851
// height := hex [ 2 ] ;
36410: LD_ADDR_VAR 0 13
36414: PUSH
36415: LD_VAR 0 15
36419: PUSH
36420: LD_INT 2
36422: ARRAY
36423: ST_TO_ADDR
// for i = 1 to hexes do
36424: LD_ADDR_VAR 0 7
36428: PUSH
36429: DOUBLE
36430: LD_INT 1
36432: DEC
36433: ST_TO_ADDR
36434: LD_VAR 0 12
36438: PUSH
36439: FOR_TO
36440: IFFALSE 36770
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36442: LD_VAR 0 12
36446: PUSH
36447: LD_VAR 0 7
36451: ARRAY
36452: PUSH
36453: LD_INT 1
36455: ARRAY
36456: PPUSH
36457: LD_VAR 0 12
36461: PUSH
36462: LD_VAR 0 7
36466: ARRAY
36467: PUSH
36468: LD_INT 2
36470: ARRAY
36471: PPUSH
36472: CALL_OW 488
36476: NOT
36477: PUSH
36478: LD_VAR 0 12
36482: PUSH
36483: LD_VAR 0 7
36487: ARRAY
36488: PUSH
36489: LD_INT 1
36491: ARRAY
36492: PPUSH
36493: LD_VAR 0 12
36497: PUSH
36498: LD_VAR 0 7
36502: ARRAY
36503: PUSH
36504: LD_INT 2
36506: ARRAY
36507: PPUSH
36508: CALL_OW 428
36512: PUSH
36513: LD_INT 0
36515: GREATER
36516: OR
36517: PUSH
36518: LD_VAR 0 12
36522: PUSH
36523: LD_VAR 0 7
36527: ARRAY
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: PPUSH
36533: LD_VAR 0 12
36537: PUSH
36538: LD_VAR 0 7
36542: ARRAY
36543: PUSH
36544: LD_INT 2
36546: ARRAY
36547: PPUSH
36548: CALL_OW 351
36552: OR
36553: IFFALSE 36559
// exit ;
36555: POP
36556: POP
36557: GO 36851
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36559: LD_ADDR_VAR 0 8
36563: PUSH
36564: LD_VAR 0 12
36568: PUSH
36569: LD_VAR 0 7
36573: ARRAY
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: PPUSH
36579: LD_VAR 0 12
36583: PUSH
36584: LD_VAR 0 7
36588: ARRAY
36589: PUSH
36590: LD_INT 2
36592: ARRAY
36593: PPUSH
36594: CALL_OW 546
36598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36599: LD_VAR 0 8
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: PUSH
36608: LD_VAR 0 8
36612: PUSH
36613: LD_INT 2
36615: ARRAY
36616: PUSH
36617: LD_VAR 0 13
36621: PUSH
36622: LD_INT 2
36624: PLUS
36625: GREATER
36626: OR
36627: PUSH
36628: LD_VAR 0 8
36632: PUSH
36633: LD_INT 2
36635: ARRAY
36636: PUSH
36637: LD_VAR 0 13
36641: PUSH
36642: LD_INT 2
36644: MINUS
36645: LESS
36646: OR
36647: PUSH
36648: LD_VAR 0 8
36652: PUSH
36653: LD_INT 3
36655: ARRAY
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 8
36662: PUSH
36663: LD_INT 9
36665: PUSH
36666: LD_INT 10
36668: PUSH
36669: LD_INT 11
36671: PUSH
36672: LD_INT 12
36674: PUSH
36675: LD_INT 13
36677: PUSH
36678: LD_INT 16
36680: PUSH
36681: LD_INT 17
36683: PUSH
36684: LD_INT 18
36686: PUSH
36687: LD_INT 19
36689: PUSH
36690: LD_INT 20
36692: PUSH
36693: LD_INT 21
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: IN
36711: NOT
36712: OR
36713: PUSH
36714: LD_VAR 0 8
36718: PUSH
36719: LD_INT 5
36721: ARRAY
36722: NOT
36723: OR
36724: PUSH
36725: LD_VAR 0 8
36729: PUSH
36730: LD_INT 6
36732: ARRAY
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 7
36742: PUSH
36743: LD_INT 9
36745: PUSH
36746: LD_INT 10
36748: PUSH
36749: LD_INT 11
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: IN
36760: NOT
36761: OR
36762: IFFALSE 36768
// exit ;
36764: POP
36765: POP
36766: GO 36851
// end ;
36768: GO 36439
36770: POP
36771: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36772: LD_VAR 0 9
36776: PPUSH
36777: LD_VAR 0 3
36781: PPUSH
36782: LD_VAR 0 4
36786: PPUSH
36787: LD_INT 20
36789: PPUSH
36790: CALL 28774 0 4
36794: PUSH
36795: LD_INT 4
36797: ARRAY
36798: IFFALSE 36802
// exit ;
36800: GO 36851
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36802: LD_VAR 0 2
36806: PUSH
36807: LD_INT 29
36809: PUSH
36810: LD_INT 30
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: IN
36817: PUSH
36818: LD_VAR 0 3
36822: PPUSH
36823: LD_VAR 0 4
36827: PPUSH
36828: LD_VAR 0 9
36832: PPUSH
36833: CALL_OW 440
36837: NOT
36838: AND
36839: IFFALSE 36843
// exit ;
36841: GO 36851
// result := true ;
36843: LD_ADDR_VAR 0 6
36847: PUSH
36848: LD_INT 1
36850: ST_TO_ADDR
// end ;
36851: LD_VAR 0 6
36855: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36856: LD_INT 0
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
36874: PPUSH
36875: PPUSH
36876: PPUSH
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
// result = [ ] ;
36916: LD_ADDR_VAR 0 7
36920: PUSH
36921: EMPTY
36922: ST_TO_ADDR
// temp_list = [ ] ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: EMPTY
36929: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36930: LD_VAR 0 4
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: LD_INT 4
36949: PUSH
36950: LD_INT 5
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: IN
36961: NOT
36962: PUSH
36963: LD_VAR 0 1
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: IN
36978: PUSH
36979: LD_VAR 0 5
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 3
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: IN
36998: NOT
36999: AND
37000: OR
37001: IFFALSE 37005
// exit ;
37003: GO 55396
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37005: LD_VAR 0 1
37009: PUSH
37010: LD_INT 6
37012: PUSH
37013: LD_INT 7
37015: PUSH
37016: LD_INT 8
37018: PUSH
37019: LD_INT 13
37021: PUSH
37022: LD_INT 12
37024: PUSH
37025: LD_INT 15
37027: PUSH
37028: LD_INT 11
37030: PUSH
37031: LD_INT 14
37033: PUSH
37034: LD_INT 10
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: IN
37048: IFFALSE 37058
// btype = b_lab ;
37050: LD_ADDR_VAR 0 1
37054: PUSH
37055: LD_INT 6
37057: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37058: LD_VAR 0 6
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: IN
37077: NOT
37078: PUSH
37079: LD_VAR 0 1
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: LD_INT 3
37095: PUSH
37096: LD_INT 6
37098: PUSH
37099: LD_INT 36
37101: PUSH
37102: LD_INT 4
37104: PUSH
37105: LD_INT 5
37107: PUSH
37108: LD_INT 31
37110: PUSH
37111: LD_INT 32
37113: PUSH
37114: LD_INT 33
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: IN
37130: NOT
37131: PUSH
37132: LD_VAR 0 6
37136: PUSH
37137: LD_INT 1
37139: EQUAL
37140: AND
37141: OR
37142: PUSH
37143: LD_VAR 0 1
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: IN
37158: NOT
37159: PUSH
37160: LD_VAR 0 6
37164: PUSH
37165: LD_INT 2
37167: EQUAL
37168: AND
37169: OR
37170: IFFALSE 37180
// mode = 0 ;
37172: LD_ADDR_VAR 0 6
37176: PUSH
37177: LD_INT 0
37179: ST_TO_ADDR
// case mode of 0 :
37180: LD_VAR 0 6
37184: PUSH
37185: LD_INT 0
37187: DOUBLE
37188: EQUAL
37189: IFTRUE 37193
37191: GO 48646
37193: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37194: LD_ADDR_VAR 0 11
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 3
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 3
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37387: LD_ADDR_VAR 0 12
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 3
37544: NEG
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 3
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37583: LD_ADDR_VAR 0 13
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 3
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 3
37754: NEG
37755: PUSH
37756: LD_INT 3
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37782: LD_ADDR_VAR 0 14
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 3
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 3
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37978: LD_ADDR_VAR 0 15
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: LD_INT 1
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 3
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 3
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38171: LD_ADDR_VAR 0 16
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: LD_INT 3
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38364: LD_ADDR_VAR 0 17
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 2
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38594: LD_ADDR_VAR 0 18
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: LD_INT 2
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38824: LD_ADDR_VAR 0 19
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 2
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39054: LD_ADDR_VAR 0 20
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39284: LD_ADDR_VAR 0 21
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: NEG
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39514: LD_ADDR_VAR 0 22
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: LD_INT 2
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39744: LD_ADDR_VAR 0 23
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: LD_INT 3
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 3
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40024: LD_ADDR_VAR 0 24
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 3
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40300: LD_ADDR_VAR 0 25
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 3
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40574: LD_ADDR_VAR 0 26
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40850: LD_ADDR_VAR 0 27
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 3
41095: NEG
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41130: LD_ADDR_VAR 0 28
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 3
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 3
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 3
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41412: LD_ADDR_VAR 0 29
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41691: LD_ADDR_VAR 0 30
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 3
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 3
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41969: LD_ADDR_VAR 0 31
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42247: LD_ADDR_VAR 0 32
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42525: LD_ADDR_VAR 0 33
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42804: LD_ADDR_VAR 0 34
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 3
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 3
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43084: LD_ADDR_VAR 0 35
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43196: LD_ADDR_VAR 0 36
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43308: LD_ADDR_VAR 0 37
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43420: LD_ADDR_VAR 0 38
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43532: LD_ADDR_VAR 0 39
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43644: LD_ADDR_VAR 0 40
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43756: LD_ADDR_VAR 0 41
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 3
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: LD_INT 3
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 3
44030: NEG
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 3
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 3
44053: NEG
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: LD_INT 3
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44106: LD_ADDR_VAR 0 42
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 3
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 3
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 3
44403: NEG
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 3
44415: NEG
44416: PUSH
44417: LD_INT 3
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44456: LD_ADDR_VAR 0 43
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 3
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44804: LD_ADDR_VAR 0 44
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: LD_INT 3
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 3
45101: NEG
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45154: LD_ADDR_VAR 0 45
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 3
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 3
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: LD_INT 3
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45504: LD_ADDR_VAR 0 46
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 3
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: NEG
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 3
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45852: LD_ADDR_VAR 0 47
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46003: LD_ADDR_VAR 0 48
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46150: LD_ADDR_VAR 0 49
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46294: LD_ADDR_VAR 0 50
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46438: LD_ADDR_VAR 0 51
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46585: LD_ADDR_VAR 0 52
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46736: LD_ADDR_VAR 0 53
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46966: LD_ADDR_VAR 0 54
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47196: LD_ADDR_VAR 0 55
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47426: LD_ADDR_VAR 0 56
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47656: LD_ADDR_VAR 0 57
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47886: LD_ADDR_VAR 0 58
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48116: LD_ADDR_VAR 0 59
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48204: LD_ADDR_VAR 0 60
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48292: LD_ADDR_VAR 0 61
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48380: LD_ADDR_VAR 0 62
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48468: LD_ADDR_VAR 0 63
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48556: LD_ADDR_VAR 0 64
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// end ; 1 :
48644: GO 54541
48646: LD_INT 1
48648: DOUBLE
48649: EQUAL
48650: IFTRUE 48654
48652: GO 51277
48654: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48655: LD_ADDR_VAR 0 11
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48699: LD_ADDR_VAR 0 12
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48740: LD_ADDR_VAR 0 13
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48780: LD_ADDR_VAR 0 14
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48821: LD_ADDR_VAR 0 15
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48865: LD_ADDR_VAR 0 16
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48911: LD_ADDR_VAR 0 17
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48955: LD_ADDR_VAR 0 18
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48996: LD_ADDR_VAR 0 19
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49036: LD_ADDR_VAR 0 20
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 3
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49077: LD_ADDR_VAR 0 21
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49121: LD_ADDR_VAR 0 22
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 3
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 3
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 3
49152: NEG
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49167: LD_ADDR_VAR 0 23
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 4
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49211: LD_ADDR_VAR 0 24
49215: PUSH
49216: LD_INT 3
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 3
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 4
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49252: LD_ADDR_VAR 0 25
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 4
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: LIST
49291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49292: LD_ADDR_VAR 0 26
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 4
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49333: LD_ADDR_VAR 0 27
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 4
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49377: LD_ADDR_VAR 0 28
49381: PUSH
49382: LD_INT 3
49384: NEG
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: NEG
49397: PUSH
49398: LD_INT 4
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 4
49408: NEG
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49423: LD_ADDR_VAR 0 29
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 4
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 4
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 5
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 5
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 4
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 6
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 6
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 5
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49578: LD_ADDR_VAR 0 30
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 4
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 4
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 4
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 5
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 5
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 5
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 6
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 6
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49721: LD_ADDR_VAR 0 31
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 4
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 4
49768: PUSH
49769: LD_INT 4
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: LD_INT 4
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 5
49798: PUSH
49799: LD_INT 5
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 4
49808: PUSH
49809: LD_INT 5
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 6
49818: PUSH
49819: LD_INT 5
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 6
49828: PUSH
49829: LD_INT 6
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 5
49838: PUSH
49839: LD_INT 6
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49860: LD_ADDR_VAR 0 32
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 4
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 4
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 5
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 5
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 6
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 6
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 5
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50003: LD_ADDR_VAR 0 33
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 3
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 4
50055: NEG
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 4
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 4
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 5
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 5
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 5
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 6
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 6
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50158: LD_ADDR_VAR 0 34
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: LD_INT 4
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 4
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 4
50225: NEG
50226: PUSH
50227: LD_INT 4
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 4
50237: NEG
50238: PUSH
50239: LD_INT 5
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 5
50249: NEG
50250: PUSH
50251: LD_INT 4
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: NEG
50262: PUSH
50263: LD_INT 5
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 5
50273: NEG
50274: PUSH
50275: LD_INT 6
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 6
50285: NEG
50286: PUSH
50287: LD_INT 5
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 6
50297: NEG
50298: PUSH
50299: LD_INT 6
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50321: LD_ADDR_VAR 0 41
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 3
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50365: LD_ADDR_VAR 0 42
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50406: LD_ADDR_VAR 0 43
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50446: LD_ADDR_VAR 0 44
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50487: LD_ADDR_VAR 0 45
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50531: LD_ADDR_VAR 0 46
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50577: LD_ADDR_VAR 0 47
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50610: LD_ADDR_VAR 0 48
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50641: LD_ADDR_VAR 0 49
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50670: LD_ADDR_VAR 0 50
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 3
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50699: LD_ADDR_VAR 0 51
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50730: LD_ADDR_VAR 0 52
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50763: LD_ADDR_VAR 0 53
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50807: LD_ADDR_VAR 0 54
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50848: LD_ADDR_VAR 0 55
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50888: LD_ADDR_VAR 0 56
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 3
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50929: LD_ADDR_VAR 0 57
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50973: LD_ADDR_VAR 0 58
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51019: LD_ADDR_VAR 0 59
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51063: LD_ADDR_VAR 0 60
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51104: LD_ADDR_VAR 0 61
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51144: LD_ADDR_VAR 0 62
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51185: LD_ADDR_VAR 0 63
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51229: LD_ADDR_VAR 0 64
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// end ; 2 :
51275: GO 54541
51277: LD_INT 2
51279: DOUBLE
51280: EQUAL
51281: IFTRUE 51285
51283: GO 54540
51285: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51286: LD_ADDR_VAR 0 29
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 5
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 4
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 5
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 4
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: LD_INT 4
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: LD_INT 4
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 4
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 4
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 4
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 4
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 5
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 5
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 5
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 3
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 4
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 4
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 4
51671: NEG
51672: PUSH
51673: LD_INT 4
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 4
51683: NEG
51684: PUSH
51685: LD_INT 5
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: LD_INT 4
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: NEG
51732: PUSH
51733: LD_INT 4
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 5
51743: NEG
51744: PUSH
51745: LD_INT 5
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: LD_INT 5
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 5
51767: NEG
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51824: LD_ADDR_VAR 0 30
51828: PUSH
51829: LD_INT 4
51831: PUSH
51832: LD_INT 4
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 4
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 5
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 5
51861: PUSH
51862: LD_INT 5
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 4
51871: PUSH
51872: LD_INT 5
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 4
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 5
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: LD_INT 5
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 4
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 4
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 4
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 4
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 5
52070: NEG
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 5
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 5
52093: NEG
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 3
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: LD_INT 4
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 4
52176: NEG
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 4
52188: NEG
52189: PUSH
52190: LD_INT 4
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 4
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 4
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 4
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 5
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 4
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 5
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 5
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52371: LD_ADDR_VAR 0 31
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 4
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 4
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 5
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 5
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 4
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 5
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 4
52527: NEG
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 4
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 4
52573: NEG
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 4
52585: NEG
52586: PUSH
52587: LD_INT 5
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 4
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 4
52621: NEG
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 5
52633: NEG
52634: PUSH
52635: LD_INT 4
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 5
52645: NEG
52646: PUSH
52647: LD_INT 5
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 5
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 5
52669: NEG
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 4
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 4
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: LD_INT 4
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 4
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 5
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 5
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 4
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 5
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52921: LD_ADDR_VAR 0 32
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 4
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 5
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 5
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 5
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 3
53042: NEG
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 4
53090: NEG
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 4
53102: NEG
53103: PUSH
53104: LD_INT 4
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 4
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 4
53126: NEG
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 4
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 5
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 4
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 5
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 5
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 4
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 4
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 4
53333: PUSH
53334: LD_INT 4
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 4
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 5
53353: PUSH
53354: LD_INT 4
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 5
53363: PUSH
53364: LD_INT 5
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 4
53373: PUSH
53374: LD_INT 5
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: LD_INT 4
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 5
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: LD_INT 5
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53468: LD_ADDR_VAR 0 33
53472: PUSH
53473: LD_INT 4
53475: NEG
53476: PUSH
53477: LD_INT 4
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 4
53487: NEG
53488: PUSH
53489: LD_INT 5
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: LD_INT 4
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 4
53523: NEG
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 5
53535: NEG
53536: PUSH
53537: LD_INT 4
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 5
53547: NEG
53548: PUSH
53549: LD_INT 5
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: LD_INT 5
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 5
53571: NEG
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 4
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 4
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 4
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 4
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 5
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 4
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 5
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 4
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: LD_INT 4
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 4
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: LD_INT 4
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 4
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 3
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 5
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54006: LD_ADDR_VAR 0 34
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 4
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 5
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 4
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 5
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 3
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 5
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 4
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 4
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 4
54208: PUSH
54209: LD_INT 4
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 5
54228: PUSH
54229: LD_INT 4
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 5
54238: PUSH
54239: LD_INT 5
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: LD_INT 5
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: LD_INT 4
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 5
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: LD_INT 5
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 4
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 4
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 4
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 4
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 5
54447: NEG
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 5
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 5
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// end ; end ;
54538: GO 54541
54540: POP
// case btype of b_depot , b_warehouse :
54541: LD_VAR 0 1
54545: PUSH
54546: LD_INT 0
54548: DOUBLE
54549: EQUAL
54550: IFTRUE 54560
54552: LD_INT 1
54554: DOUBLE
54555: EQUAL
54556: IFTRUE 54560
54558: GO 54761
54560: POP
// case nation of nation_american :
54561: LD_VAR 0 5
54565: PUSH
54566: LD_INT 1
54568: DOUBLE
54569: EQUAL
54570: IFTRUE 54574
54572: GO 54630
54574: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54575: LD_ADDR_VAR 0 9
54579: PUSH
54580: LD_VAR 0 11
54584: PUSH
54585: LD_VAR 0 12
54589: PUSH
54590: LD_VAR 0 13
54594: PUSH
54595: LD_VAR 0 14
54599: PUSH
54600: LD_VAR 0 15
54604: PUSH
54605: LD_VAR 0 16
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: PUSH
54618: LD_VAR 0 4
54622: PUSH
54623: LD_INT 1
54625: PLUS
54626: ARRAY
54627: ST_TO_ADDR
54628: GO 54759
54630: LD_INT 2
54632: DOUBLE
54633: EQUAL
54634: IFTRUE 54638
54636: GO 54694
54638: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54639: LD_ADDR_VAR 0 9
54643: PUSH
54644: LD_VAR 0 17
54648: PUSH
54649: LD_VAR 0 18
54653: PUSH
54654: LD_VAR 0 19
54658: PUSH
54659: LD_VAR 0 20
54663: PUSH
54664: LD_VAR 0 21
54668: PUSH
54669: LD_VAR 0 22
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: PUSH
54682: LD_VAR 0 4
54686: PUSH
54687: LD_INT 1
54689: PLUS
54690: ARRAY
54691: ST_TO_ADDR
54692: GO 54759
54694: LD_INT 3
54696: DOUBLE
54697: EQUAL
54698: IFTRUE 54702
54700: GO 54758
54702: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54703: LD_ADDR_VAR 0 9
54707: PUSH
54708: LD_VAR 0 23
54712: PUSH
54713: LD_VAR 0 24
54717: PUSH
54718: LD_VAR 0 25
54722: PUSH
54723: LD_VAR 0 26
54727: PUSH
54728: LD_VAR 0 27
54732: PUSH
54733: LD_VAR 0 28
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: PUSH
54746: LD_VAR 0 4
54750: PUSH
54751: LD_INT 1
54753: PLUS
54754: ARRAY
54755: ST_TO_ADDR
54756: GO 54759
54758: POP
54759: GO 55314
54761: LD_INT 2
54763: DOUBLE
54764: EQUAL
54765: IFTRUE 54775
54767: LD_INT 3
54769: DOUBLE
54770: EQUAL
54771: IFTRUE 54775
54773: GO 54831
54775: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54776: LD_ADDR_VAR 0 9
54780: PUSH
54781: LD_VAR 0 29
54785: PUSH
54786: LD_VAR 0 30
54790: PUSH
54791: LD_VAR 0 31
54795: PUSH
54796: LD_VAR 0 32
54800: PUSH
54801: LD_VAR 0 33
54805: PUSH
54806: LD_VAR 0 34
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: PUSH
54819: LD_VAR 0 4
54823: PUSH
54824: LD_INT 1
54826: PLUS
54827: ARRAY
54828: ST_TO_ADDR
54829: GO 55314
54831: LD_INT 16
54833: DOUBLE
54834: EQUAL
54835: IFTRUE 54893
54837: LD_INT 17
54839: DOUBLE
54840: EQUAL
54841: IFTRUE 54893
54843: LD_INT 18
54845: DOUBLE
54846: EQUAL
54847: IFTRUE 54893
54849: LD_INT 19
54851: DOUBLE
54852: EQUAL
54853: IFTRUE 54893
54855: LD_INT 22
54857: DOUBLE
54858: EQUAL
54859: IFTRUE 54893
54861: LD_INT 20
54863: DOUBLE
54864: EQUAL
54865: IFTRUE 54893
54867: LD_INT 21
54869: DOUBLE
54870: EQUAL
54871: IFTRUE 54893
54873: LD_INT 23
54875: DOUBLE
54876: EQUAL
54877: IFTRUE 54893
54879: LD_INT 24
54881: DOUBLE
54882: EQUAL
54883: IFTRUE 54893
54885: LD_INT 25
54887: DOUBLE
54888: EQUAL
54889: IFTRUE 54893
54891: GO 54949
54893: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54894: LD_ADDR_VAR 0 9
54898: PUSH
54899: LD_VAR 0 35
54903: PUSH
54904: LD_VAR 0 36
54908: PUSH
54909: LD_VAR 0 37
54913: PUSH
54914: LD_VAR 0 38
54918: PUSH
54919: LD_VAR 0 39
54923: PUSH
54924: LD_VAR 0 40
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: PUSH
54937: LD_VAR 0 4
54941: PUSH
54942: LD_INT 1
54944: PLUS
54945: ARRAY
54946: ST_TO_ADDR
54947: GO 55314
54949: LD_INT 6
54951: DOUBLE
54952: EQUAL
54953: IFTRUE 55005
54955: LD_INT 7
54957: DOUBLE
54958: EQUAL
54959: IFTRUE 55005
54961: LD_INT 8
54963: DOUBLE
54964: EQUAL
54965: IFTRUE 55005
54967: LD_INT 13
54969: DOUBLE
54970: EQUAL
54971: IFTRUE 55005
54973: LD_INT 12
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 55005
54979: LD_INT 15
54981: DOUBLE
54982: EQUAL
54983: IFTRUE 55005
54985: LD_INT 11
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 55005
54991: LD_INT 14
54993: DOUBLE
54994: EQUAL
54995: IFTRUE 55005
54997: LD_INT 10
54999: DOUBLE
55000: EQUAL
55001: IFTRUE 55005
55003: GO 55061
55005: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55006: LD_ADDR_VAR 0 9
55010: PUSH
55011: LD_VAR 0 41
55015: PUSH
55016: LD_VAR 0 42
55020: PUSH
55021: LD_VAR 0 43
55025: PUSH
55026: LD_VAR 0 44
55030: PUSH
55031: LD_VAR 0 45
55035: PUSH
55036: LD_VAR 0 46
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: PUSH
55049: LD_VAR 0 4
55053: PUSH
55054: LD_INT 1
55056: PLUS
55057: ARRAY
55058: ST_TO_ADDR
55059: GO 55314
55061: LD_INT 36
55063: DOUBLE
55064: EQUAL
55065: IFTRUE 55069
55067: GO 55125
55069: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55070: LD_ADDR_VAR 0 9
55074: PUSH
55075: LD_VAR 0 47
55079: PUSH
55080: LD_VAR 0 48
55084: PUSH
55085: LD_VAR 0 49
55089: PUSH
55090: LD_VAR 0 50
55094: PUSH
55095: LD_VAR 0 51
55099: PUSH
55100: LD_VAR 0 52
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: PUSH
55113: LD_VAR 0 4
55117: PUSH
55118: LD_INT 1
55120: PLUS
55121: ARRAY
55122: ST_TO_ADDR
55123: GO 55314
55125: LD_INT 4
55127: DOUBLE
55128: EQUAL
55129: IFTRUE 55151
55131: LD_INT 5
55133: DOUBLE
55134: EQUAL
55135: IFTRUE 55151
55137: LD_INT 34
55139: DOUBLE
55140: EQUAL
55141: IFTRUE 55151
55143: LD_INT 37
55145: DOUBLE
55146: EQUAL
55147: IFTRUE 55151
55149: GO 55207
55151: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55152: LD_ADDR_VAR 0 9
55156: PUSH
55157: LD_VAR 0 53
55161: PUSH
55162: LD_VAR 0 54
55166: PUSH
55167: LD_VAR 0 55
55171: PUSH
55172: LD_VAR 0 56
55176: PUSH
55177: LD_VAR 0 57
55181: PUSH
55182: LD_VAR 0 58
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: PUSH
55195: LD_VAR 0 4
55199: PUSH
55200: LD_INT 1
55202: PLUS
55203: ARRAY
55204: ST_TO_ADDR
55205: GO 55314
55207: LD_INT 31
55209: DOUBLE
55210: EQUAL
55211: IFTRUE 55257
55213: LD_INT 32
55215: DOUBLE
55216: EQUAL
55217: IFTRUE 55257
55219: LD_INT 33
55221: DOUBLE
55222: EQUAL
55223: IFTRUE 55257
55225: LD_INT 27
55227: DOUBLE
55228: EQUAL
55229: IFTRUE 55257
55231: LD_INT 26
55233: DOUBLE
55234: EQUAL
55235: IFTRUE 55257
55237: LD_INT 28
55239: DOUBLE
55240: EQUAL
55241: IFTRUE 55257
55243: LD_INT 29
55245: DOUBLE
55246: EQUAL
55247: IFTRUE 55257
55249: LD_INT 30
55251: DOUBLE
55252: EQUAL
55253: IFTRUE 55257
55255: GO 55313
55257: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55258: LD_ADDR_VAR 0 9
55262: PUSH
55263: LD_VAR 0 59
55267: PUSH
55268: LD_VAR 0 60
55272: PUSH
55273: LD_VAR 0 61
55277: PUSH
55278: LD_VAR 0 62
55282: PUSH
55283: LD_VAR 0 63
55287: PUSH
55288: LD_VAR 0 64
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: PUSH
55301: LD_VAR 0 4
55305: PUSH
55306: LD_INT 1
55308: PLUS
55309: ARRAY
55310: ST_TO_ADDR
55311: GO 55314
55313: POP
// temp_list2 = [ ] ;
55314: LD_ADDR_VAR 0 10
55318: PUSH
55319: EMPTY
55320: ST_TO_ADDR
// for i in temp_list do
55321: LD_ADDR_VAR 0 8
55325: PUSH
55326: LD_VAR 0 9
55330: PUSH
55331: FOR_IN
55332: IFFALSE 55384
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55334: LD_ADDR_VAR 0 10
55338: PUSH
55339: LD_VAR 0 10
55343: PUSH
55344: LD_VAR 0 8
55348: PUSH
55349: LD_INT 1
55351: ARRAY
55352: PUSH
55353: LD_VAR 0 2
55357: PLUS
55358: PUSH
55359: LD_VAR 0 8
55363: PUSH
55364: LD_INT 2
55366: ARRAY
55367: PUSH
55368: LD_VAR 0 3
55372: PLUS
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: ADD
55381: ST_TO_ADDR
55382: GO 55331
55384: POP
55385: POP
// result = temp_list2 ;
55386: LD_ADDR_VAR 0 7
55390: PUSH
55391: LD_VAR 0 10
55395: ST_TO_ADDR
// end ;
55396: LD_VAR 0 7
55400: RET
// export function EnemyInRange ( unit , dist ) ; begin
55401: LD_INT 0
55403: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55404: LD_ADDR_VAR 0 3
55408: PUSH
55409: LD_VAR 0 1
55413: PPUSH
55414: CALL_OW 255
55418: PPUSH
55419: LD_VAR 0 1
55423: PPUSH
55424: CALL_OW 250
55428: PPUSH
55429: LD_VAR 0 1
55433: PPUSH
55434: CALL_OW 251
55438: PPUSH
55439: LD_VAR 0 2
55443: PPUSH
55444: CALL 28774 0 4
55448: PUSH
55449: LD_INT 4
55451: ARRAY
55452: ST_TO_ADDR
// end ;
55453: LD_VAR 0 3
55457: RET
// export function PlayerSeeMe ( unit ) ; begin
55458: LD_INT 0
55460: PPUSH
// result := See ( your_side , unit ) ;
55461: LD_ADDR_VAR 0 2
55465: PUSH
55466: LD_OWVAR 2
55470: PPUSH
55471: LD_VAR 0 1
55475: PPUSH
55476: CALL_OW 292
55480: ST_TO_ADDR
// end ;
55481: LD_VAR 0 2
55485: RET
// export function ReverseDir ( unit ) ; begin
55486: LD_INT 0
55488: PPUSH
// if not unit then
55489: LD_VAR 0 1
55493: NOT
55494: IFFALSE 55498
// exit ;
55496: GO 55521
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55498: LD_ADDR_VAR 0 2
55502: PUSH
55503: LD_VAR 0 1
55507: PPUSH
55508: CALL_OW 254
55512: PUSH
55513: LD_INT 3
55515: PLUS
55516: PUSH
55517: LD_INT 6
55519: MOD
55520: ST_TO_ADDR
// end ;
55521: LD_VAR 0 2
55525: RET
// export function ReverseArray ( array ) ; var i ; begin
55526: LD_INT 0
55528: PPUSH
55529: PPUSH
// if not array then
55530: LD_VAR 0 1
55534: NOT
55535: IFFALSE 55539
// exit ;
55537: GO 55594
// result := [ ] ;
55539: LD_ADDR_VAR 0 2
55543: PUSH
55544: EMPTY
55545: ST_TO_ADDR
// for i := array downto 1 do
55546: LD_ADDR_VAR 0 3
55550: PUSH
55551: DOUBLE
55552: LD_VAR 0 1
55556: INC
55557: ST_TO_ADDR
55558: LD_INT 1
55560: PUSH
55561: FOR_DOWNTO
55562: IFFALSE 55592
// result := Join ( result , array [ i ] ) ;
55564: LD_ADDR_VAR 0 2
55568: PUSH
55569: LD_VAR 0 2
55573: PPUSH
55574: LD_VAR 0 1
55578: PUSH
55579: LD_VAR 0 3
55583: ARRAY
55584: PPUSH
55585: CALL 60250 0 2
55589: ST_TO_ADDR
55590: GO 55561
55592: POP
55593: POP
// end ;
55594: LD_VAR 0 2
55598: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55599: LD_INT 0
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
// if not unit or not hexes then
55607: LD_VAR 0 1
55611: NOT
55612: PUSH
55613: LD_VAR 0 2
55617: NOT
55618: OR
55619: IFFALSE 55623
// exit ;
55621: GO 55746
// dist := 9999 ;
55623: LD_ADDR_VAR 0 5
55627: PUSH
55628: LD_INT 9999
55630: ST_TO_ADDR
// for i = 1 to hexes do
55631: LD_ADDR_VAR 0 4
55635: PUSH
55636: DOUBLE
55637: LD_INT 1
55639: DEC
55640: ST_TO_ADDR
55641: LD_VAR 0 2
55645: PUSH
55646: FOR_TO
55647: IFFALSE 55734
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55649: LD_ADDR_VAR 0 6
55653: PUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: LD_VAR 0 2
55663: PUSH
55664: LD_VAR 0 4
55668: ARRAY
55669: PUSH
55670: LD_INT 1
55672: ARRAY
55673: PPUSH
55674: LD_VAR 0 2
55678: PUSH
55679: LD_VAR 0 4
55683: ARRAY
55684: PUSH
55685: LD_INT 2
55687: ARRAY
55688: PPUSH
55689: CALL_OW 297
55693: ST_TO_ADDR
// if tdist < dist then
55694: LD_VAR 0 6
55698: PUSH
55699: LD_VAR 0 5
55703: LESS
55704: IFFALSE 55732
// begin hex := hexes [ i ] ;
55706: LD_ADDR_VAR 0 8
55710: PUSH
55711: LD_VAR 0 2
55715: PUSH
55716: LD_VAR 0 4
55720: ARRAY
55721: ST_TO_ADDR
// dist := tdist ;
55722: LD_ADDR_VAR 0 5
55726: PUSH
55727: LD_VAR 0 6
55731: ST_TO_ADDR
// end ; end ;
55732: GO 55646
55734: POP
55735: POP
// result := hex ;
55736: LD_ADDR_VAR 0 3
55740: PUSH
55741: LD_VAR 0 8
55745: ST_TO_ADDR
// end ;
55746: LD_VAR 0 3
55750: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55751: LD_INT 0
55753: PPUSH
55754: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55755: LD_VAR 0 1
55759: NOT
55760: PUSH
55761: LD_VAR 0 1
55765: PUSH
55766: LD_INT 21
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 23
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PPUSH
55790: CALL_OW 69
55794: IN
55795: NOT
55796: OR
55797: IFFALSE 55801
// exit ;
55799: GO 55848
// for i = 1 to 3 do
55801: LD_ADDR_VAR 0 3
55805: PUSH
55806: DOUBLE
55807: LD_INT 1
55809: DEC
55810: ST_TO_ADDR
55811: LD_INT 3
55813: PUSH
55814: FOR_TO
55815: IFFALSE 55846
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55817: LD_VAR 0 1
55821: PPUSH
55822: CALL_OW 250
55826: PPUSH
55827: LD_VAR 0 1
55831: PPUSH
55832: CALL_OW 251
55836: PPUSH
55837: LD_INT 1
55839: PPUSH
55840: CALL_OW 453
55844: GO 55814
55846: POP
55847: POP
// end ;
55848: LD_VAR 0 2
55852: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55853: LD_INT 0
55855: PPUSH
55856: PPUSH
55857: PPUSH
55858: PPUSH
55859: PPUSH
55860: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55861: LD_VAR 0 1
55865: NOT
55866: PUSH
55867: LD_VAR 0 2
55871: NOT
55872: OR
55873: PUSH
55874: LD_VAR 0 1
55878: PPUSH
55879: CALL_OW 314
55883: OR
55884: IFFALSE 55888
// exit ;
55886: GO 56355
// if GetLives ( i ) < 250 then
55888: LD_VAR 0 4
55892: PPUSH
55893: CALL_OW 256
55897: PUSH
55898: LD_INT 250
55900: LESS
55901: IFFALSE 55914
// begin ComAutodestruct ( i ) ;
55903: LD_VAR 0 4
55907: PPUSH
55908: CALL 55751 0 1
// exit ;
55912: GO 56355
// end ; x := GetX ( enemy_unit ) ;
55914: LD_ADDR_VAR 0 7
55918: PUSH
55919: LD_VAR 0 2
55923: PPUSH
55924: CALL_OW 250
55928: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55929: LD_ADDR_VAR 0 8
55933: PUSH
55934: LD_VAR 0 2
55938: PPUSH
55939: CALL_OW 251
55943: ST_TO_ADDR
// if not x or not y then
55944: LD_VAR 0 7
55948: NOT
55949: PUSH
55950: LD_VAR 0 8
55954: NOT
55955: OR
55956: IFFALSE 55960
// exit ;
55958: GO 56355
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55960: LD_ADDR_VAR 0 6
55964: PUSH
55965: LD_VAR 0 7
55969: PPUSH
55970: LD_INT 0
55972: PPUSH
55973: LD_INT 4
55975: PPUSH
55976: CALL_OW 272
55980: PUSH
55981: LD_VAR 0 8
55985: PPUSH
55986: LD_INT 0
55988: PPUSH
55989: LD_INT 4
55991: PPUSH
55992: CALL_OW 273
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_VAR 0 7
56005: PPUSH
56006: LD_INT 1
56008: PPUSH
56009: LD_INT 4
56011: PPUSH
56012: CALL_OW 272
56016: PUSH
56017: LD_VAR 0 8
56021: PPUSH
56022: LD_INT 1
56024: PPUSH
56025: LD_INT 4
56027: PPUSH
56028: CALL_OW 273
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_VAR 0 7
56041: PPUSH
56042: LD_INT 2
56044: PPUSH
56045: LD_INT 4
56047: PPUSH
56048: CALL_OW 272
56052: PUSH
56053: LD_VAR 0 8
56057: PPUSH
56058: LD_INT 2
56060: PPUSH
56061: LD_INT 4
56063: PPUSH
56064: CALL_OW 273
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_VAR 0 7
56077: PPUSH
56078: LD_INT 3
56080: PPUSH
56081: LD_INT 4
56083: PPUSH
56084: CALL_OW 272
56088: PUSH
56089: LD_VAR 0 8
56093: PPUSH
56094: LD_INT 3
56096: PPUSH
56097: LD_INT 4
56099: PPUSH
56100: CALL_OW 273
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_VAR 0 7
56113: PPUSH
56114: LD_INT 4
56116: PPUSH
56117: LD_INT 4
56119: PPUSH
56120: CALL_OW 272
56124: PUSH
56125: LD_VAR 0 8
56129: PPUSH
56130: LD_INT 4
56132: PPUSH
56133: LD_INT 4
56135: PPUSH
56136: CALL_OW 273
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_VAR 0 7
56149: PPUSH
56150: LD_INT 5
56152: PPUSH
56153: LD_INT 4
56155: PPUSH
56156: CALL_OW 272
56160: PUSH
56161: LD_VAR 0 8
56165: PPUSH
56166: LD_INT 5
56168: PPUSH
56169: LD_INT 4
56171: PPUSH
56172: CALL_OW 273
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: ST_TO_ADDR
// for i = tmp downto 1 do
56189: LD_ADDR_VAR 0 4
56193: PUSH
56194: DOUBLE
56195: LD_VAR 0 6
56199: INC
56200: ST_TO_ADDR
56201: LD_INT 1
56203: PUSH
56204: FOR_DOWNTO
56205: IFFALSE 56306
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56207: LD_VAR 0 6
56211: PUSH
56212: LD_VAR 0 4
56216: ARRAY
56217: PUSH
56218: LD_INT 1
56220: ARRAY
56221: PPUSH
56222: LD_VAR 0 6
56226: PUSH
56227: LD_VAR 0 4
56231: ARRAY
56232: PUSH
56233: LD_INT 2
56235: ARRAY
56236: PPUSH
56237: CALL_OW 488
56241: NOT
56242: PUSH
56243: LD_VAR 0 6
56247: PUSH
56248: LD_VAR 0 4
56252: ARRAY
56253: PUSH
56254: LD_INT 1
56256: ARRAY
56257: PPUSH
56258: LD_VAR 0 6
56262: PUSH
56263: LD_VAR 0 4
56267: ARRAY
56268: PUSH
56269: LD_INT 2
56271: ARRAY
56272: PPUSH
56273: CALL_OW 428
56277: PUSH
56278: LD_INT 0
56280: NONEQUAL
56281: OR
56282: IFFALSE 56304
// tmp := Delete ( tmp , i ) ;
56284: LD_ADDR_VAR 0 6
56288: PUSH
56289: LD_VAR 0 6
56293: PPUSH
56294: LD_VAR 0 4
56298: PPUSH
56299: CALL_OW 3
56303: ST_TO_ADDR
56304: GO 56204
56306: POP
56307: POP
// j := GetClosestHex ( unit , tmp ) ;
56308: LD_ADDR_VAR 0 5
56312: PUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: LD_VAR 0 6
56322: PPUSH
56323: CALL 55599 0 2
56327: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56328: LD_VAR 0 1
56332: PPUSH
56333: LD_VAR 0 5
56337: PUSH
56338: LD_INT 1
56340: ARRAY
56341: PPUSH
56342: LD_VAR 0 5
56346: PUSH
56347: LD_INT 2
56349: ARRAY
56350: PPUSH
56351: CALL_OW 111
// end ;
56355: LD_VAR 0 3
56359: RET
// export function PrepareApemanSoldier ( ) ; begin
56360: LD_INT 0
56362: PPUSH
// uc_nation := 0 ;
56363: LD_ADDR_OWVAR 21
56367: PUSH
56368: LD_INT 0
56370: ST_TO_ADDR
// hc_sex := sex_male ;
56371: LD_ADDR_OWVAR 27
56375: PUSH
56376: LD_INT 1
56378: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56379: LD_ADDR_OWVAR 28
56383: PUSH
56384: LD_INT 15
56386: ST_TO_ADDR
// hc_gallery :=  ;
56387: LD_ADDR_OWVAR 33
56391: PUSH
56392: LD_STRING 
56394: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56395: LD_ADDR_OWVAR 31
56399: PUSH
56400: LD_INT 0
56402: PPUSH
56403: LD_INT 3
56405: PPUSH
56406: CALL_OW 12
56410: PUSH
56411: LD_INT 0
56413: PPUSH
56414: LD_INT 3
56416: PPUSH
56417: CALL_OW 12
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// end ;
56434: LD_VAR 0 1
56438: RET
// export function PrepareApemanEngineer ( ) ; begin
56439: LD_INT 0
56441: PPUSH
// uc_nation := 0 ;
56442: LD_ADDR_OWVAR 21
56446: PUSH
56447: LD_INT 0
56449: ST_TO_ADDR
// hc_sex := sex_male ;
56450: LD_ADDR_OWVAR 27
56454: PUSH
56455: LD_INT 1
56457: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56458: LD_ADDR_OWVAR 28
56462: PUSH
56463: LD_INT 16
56465: ST_TO_ADDR
// hc_gallery :=  ;
56466: LD_ADDR_OWVAR 33
56470: PUSH
56471: LD_STRING 
56473: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56474: LD_ADDR_OWVAR 31
56478: PUSH
56479: LD_INT 0
56481: PPUSH
56482: LD_INT 3
56484: PPUSH
56485: CALL_OW 12
56489: PUSH
56490: LD_INT 0
56492: PPUSH
56493: LD_INT 3
56495: PPUSH
56496: CALL_OW 12
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// end ;
56513: LD_VAR 0 1
56517: RET
// export function PrepareApeman ( agressivity ) ; begin
56518: LD_INT 0
56520: PPUSH
// uc_side := 0 ;
56521: LD_ADDR_OWVAR 20
56525: PUSH
56526: LD_INT 0
56528: ST_TO_ADDR
// uc_nation := 0 ;
56529: LD_ADDR_OWVAR 21
56533: PUSH
56534: LD_INT 0
56536: ST_TO_ADDR
// hc_sex := sex_male ;
56537: LD_ADDR_OWVAR 27
56541: PUSH
56542: LD_INT 1
56544: ST_TO_ADDR
// hc_class := class_apeman ;
56545: LD_ADDR_OWVAR 28
56549: PUSH
56550: LD_INT 12
56552: ST_TO_ADDR
// hc_gallery :=  ;
56553: LD_ADDR_OWVAR 33
56557: PUSH
56558: LD_STRING 
56560: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56561: LD_ADDR_OWVAR 35
56565: PUSH
56566: LD_VAR 0 1
56570: NEG
56571: PPUSH
56572: LD_VAR 0 1
56576: PPUSH
56577: CALL_OW 12
56581: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56582: LD_ADDR_OWVAR 31
56586: PUSH
56587: LD_INT 0
56589: PPUSH
56590: LD_INT 3
56592: PPUSH
56593: CALL_OW 12
56597: PUSH
56598: LD_INT 0
56600: PPUSH
56601: LD_INT 3
56603: PPUSH
56604: CALL_OW 12
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// end ;
56621: LD_VAR 0 2
56625: RET
// export function PrepareTiger ( agressivity ) ; begin
56626: LD_INT 0
56628: PPUSH
// uc_side := 0 ;
56629: LD_ADDR_OWVAR 20
56633: PUSH
56634: LD_INT 0
56636: ST_TO_ADDR
// uc_nation := 0 ;
56637: LD_ADDR_OWVAR 21
56641: PUSH
56642: LD_INT 0
56644: ST_TO_ADDR
// hc_class := class_tiger ;
56645: LD_ADDR_OWVAR 28
56649: PUSH
56650: LD_INT 14
56652: ST_TO_ADDR
// hc_gallery :=  ;
56653: LD_ADDR_OWVAR 33
56657: PUSH
56658: LD_STRING 
56660: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56661: LD_ADDR_OWVAR 35
56665: PUSH
56666: LD_VAR 0 1
56670: NEG
56671: PPUSH
56672: LD_VAR 0 1
56676: PPUSH
56677: CALL_OW 12
56681: ST_TO_ADDR
// end ;
56682: LD_VAR 0 2
56686: RET
// export function PrepareEnchidna ( ) ; begin
56687: LD_INT 0
56689: PPUSH
// uc_side := 0 ;
56690: LD_ADDR_OWVAR 20
56694: PUSH
56695: LD_INT 0
56697: ST_TO_ADDR
// uc_nation := 0 ;
56698: LD_ADDR_OWVAR 21
56702: PUSH
56703: LD_INT 0
56705: ST_TO_ADDR
// hc_class := class_baggie ;
56706: LD_ADDR_OWVAR 28
56710: PUSH
56711: LD_INT 13
56713: ST_TO_ADDR
// hc_gallery :=  ;
56714: LD_ADDR_OWVAR 33
56718: PUSH
56719: LD_STRING 
56721: ST_TO_ADDR
// end ;
56722: LD_VAR 0 1
56726: RET
// export function PrepareFrog ( ) ; begin
56727: LD_INT 0
56729: PPUSH
// uc_side := 0 ;
56730: LD_ADDR_OWVAR 20
56734: PUSH
56735: LD_INT 0
56737: ST_TO_ADDR
// uc_nation := 0 ;
56738: LD_ADDR_OWVAR 21
56742: PUSH
56743: LD_INT 0
56745: ST_TO_ADDR
// hc_class := class_frog ;
56746: LD_ADDR_OWVAR 28
56750: PUSH
56751: LD_INT 19
56753: ST_TO_ADDR
// hc_gallery :=  ;
56754: LD_ADDR_OWVAR 33
56758: PUSH
56759: LD_STRING 
56761: ST_TO_ADDR
// end ;
56762: LD_VAR 0 1
56766: RET
// export function PrepareFish ( ) ; begin
56767: LD_INT 0
56769: PPUSH
// uc_side := 0 ;
56770: LD_ADDR_OWVAR 20
56774: PUSH
56775: LD_INT 0
56777: ST_TO_ADDR
// uc_nation := 0 ;
56778: LD_ADDR_OWVAR 21
56782: PUSH
56783: LD_INT 0
56785: ST_TO_ADDR
// hc_class := class_fish ;
56786: LD_ADDR_OWVAR 28
56790: PUSH
56791: LD_INT 20
56793: ST_TO_ADDR
// hc_gallery :=  ;
56794: LD_ADDR_OWVAR 33
56798: PUSH
56799: LD_STRING 
56801: ST_TO_ADDR
// end ;
56802: LD_VAR 0 1
56806: RET
// export function PrepareBird ( ) ; begin
56807: LD_INT 0
56809: PPUSH
// uc_side := 0 ;
56810: LD_ADDR_OWVAR 20
56814: PUSH
56815: LD_INT 0
56817: ST_TO_ADDR
// uc_nation := 0 ;
56818: LD_ADDR_OWVAR 21
56822: PUSH
56823: LD_INT 0
56825: ST_TO_ADDR
// hc_class := class_phororhacos ;
56826: LD_ADDR_OWVAR 28
56830: PUSH
56831: LD_INT 18
56833: ST_TO_ADDR
// hc_gallery :=  ;
56834: LD_ADDR_OWVAR 33
56838: PUSH
56839: LD_STRING 
56841: ST_TO_ADDR
// end ;
56842: LD_VAR 0 1
56846: RET
// export function PrepareHorse ( ) ; begin
56847: LD_INT 0
56849: PPUSH
// uc_side := 0 ;
56850: LD_ADDR_OWVAR 20
56854: PUSH
56855: LD_INT 0
56857: ST_TO_ADDR
// uc_nation := 0 ;
56858: LD_ADDR_OWVAR 21
56862: PUSH
56863: LD_INT 0
56865: ST_TO_ADDR
// hc_class := class_horse ;
56866: LD_ADDR_OWVAR 28
56870: PUSH
56871: LD_INT 21
56873: ST_TO_ADDR
// hc_gallery :=  ;
56874: LD_ADDR_OWVAR 33
56878: PUSH
56879: LD_STRING 
56881: ST_TO_ADDR
// end ;
56882: LD_VAR 0 1
56886: RET
// export function PrepareMastodont ( ) ; begin
56887: LD_INT 0
56889: PPUSH
// uc_side := 0 ;
56890: LD_ADDR_OWVAR 20
56894: PUSH
56895: LD_INT 0
56897: ST_TO_ADDR
// uc_nation := 0 ;
56898: LD_ADDR_OWVAR 21
56902: PUSH
56903: LD_INT 0
56905: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56906: LD_ADDR_OWVAR 37
56910: PUSH
56911: LD_INT 31
56913: ST_TO_ADDR
// vc_control := control_rider ;
56914: LD_ADDR_OWVAR 38
56918: PUSH
56919: LD_INT 4
56921: ST_TO_ADDR
// end ;
56922: LD_VAR 0 1
56926: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56927: LD_INT 0
56929: PPUSH
56930: PPUSH
56931: PPUSH
// uc_side = 0 ;
56932: LD_ADDR_OWVAR 20
56936: PUSH
56937: LD_INT 0
56939: ST_TO_ADDR
// uc_nation = 0 ;
56940: LD_ADDR_OWVAR 21
56944: PUSH
56945: LD_INT 0
56947: ST_TO_ADDR
// InitHc_All ( ) ;
56948: CALL_OW 584
// InitVc ;
56952: CALL_OW 20
// if mastodonts then
56956: LD_VAR 0 6
56960: IFFALSE 57027
// for i = 1 to mastodonts do
56962: LD_ADDR_VAR 0 11
56966: PUSH
56967: DOUBLE
56968: LD_INT 1
56970: DEC
56971: ST_TO_ADDR
56972: LD_VAR 0 6
56976: PUSH
56977: FOR_TO
56978: IFFALSE 57025
// begin vc_chassis := 31 ;
56980: LD_ADDR_OWVAR 37
56984: PUSH
56985: LD_INT 31
56987: ST_TO_ADDR
// vc_control := control_rider ;
56988: LD_ADDR_OWVAR 38
56992: PUSH
56993: LD_INT 4
56995: ST_TO_ADDR
// animal := CreateVehicle ;
56996: LD_ADDR_VAR 0 12
57000: PUSH
57001: CALL_OW 45
57005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57006: LD_VAR 0 12
57010: PPUSH
57011: LD_VAR 0 8
57015: PPUSH
57016: LD_INT 0
57018: PPUSH
57019: CALL 59155 0 3
// end ;
57023: GO 56977
57025: POP
57026: POP
// if horses then
57027: LD_VAR 0 5
57031: IFFALSE 57098
// for i = 1 to horses do
57033: LD_ADDR_VAR 0 11
57037: PUSH
57038: DOUBLE
57039: LD_INT 1
57041: DEC
57042: ST_TO_ADDR
57043: LD_VAR 0 5
57047: PUSH
57048: FOR_TO
57049: IFFALSE 57096
// begin hc_class := 21 ;
57051: LD_ADDR_OWVAR 28
57055: PUSH
57056: LD_INT 21
57058: ST_TO_ADDR
// hc_gallery :=  ;
57059: LD_ADDR_OWVAR 33
57063: PUSH
57064: LD_STRING 
57066: ST_TO_ADDR
// animal := CreateHuman ;
57067: LD_ADDR_VAR 0 12
57071: PUSH
57072: CALL_OW 44
57076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57077: LD_VAR 0 12
57081: PPUSH
57082: LD_VAR 0 8
57086: PPUSH
57087: LD_INT 0
57089: PPUSH
57090: CALL 59155 0 3
// end ;
57094: GO 57048
57096: POP
57097: POP
// if birds then
57098: LD_VAR 0 1
57102: IFFALSE 57169
// for i = 1 to birds do
57104: LD_ADDR_VAR 0 11
57108: PUSH
57109: DOUBLE
57110: LD_INT 1
57112: DEC
57113: ST_TO_ADDR
57114: LD_VAR 0 1
57118: PUSH
57119: FOR_TO
57120: IFFALSE 57167
// begin hc_class := 18 ;
57122: LD_ADDR_OWVAR 28
57126: PUSH
57127: LD_INT 18
57129: ST_TO_ADDR
// hc_gallery =  ;
57130: LD_ADDR_OWVAR 33
57134: PUSH
57135: LD_STRING 
57137: ST_TO_ADDR
// animal := CreateHuman ;
57138: LD_ADDR_VAR 0 12
57142: PUSH
57143: CALL_OW 44
57147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57148: LD_VAR 0 12
57152: PPUSH
57153: LD_VAR 0 8
57157: PPUSH
57158: LD_INT 0
57160: PPUSH
57161: CALL 59155 0 3
// end ;
57165: GO 57119
57167: POP
57168: POP
// if tigers then
57169: LD_VAR 0 2
57173: IFFALSE 57257
// for i = 1 to tigers do
57175: LD_ADDR_VAR 0 11
57179: PUSH
57180: DOUBLE
57181: LD_INT 1
57183: DEC
57184: ST_TO_ADDR
57185: LD_VAR 0 2
57189: PUSH
57190: FOR_TO
57191: IFFALSE 57255
// begin hc_class = class_tiger ;
57193: LD_ADDR_OWVAR 28
57197: PUSH
57198: LD_INT 14
57200: ST_TO_ADDR
// hc_gallery =  ;
57201: LD_ADDR_OWVAR 33
57205: PUSH
57206: LD_STRING 
57208: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57209: LD_ADDR_OWVAR 35
57213: PUSH
57214: LD_INT 7
57216: NEG
57217: PPUSH
57218: LD_INT 7
57220: PPUSH
57221: CALL_OW 12
57225: ST_TO_ADDR
// animal := CreateHuman ;
57226: LD_ADDR_VAR 0 12
57230: PUSH
57231: CALL_OW 44
57235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57236: LD_VAR 0 12
57240: PPUSH
57241: LD_VAR 0 8
57245: PPUSH
57246: LD_INT 0
57248: PPUSH
57249: CALL 59155 0 3
// end ;
57253: GO 57190
57255: POP
57256: POP
// if apemans then
57257: LD_VAR 0 3
57261: IFFALSE 57384
// for i = 1 to apemans do
57263: LD_ADDR_VAR 0 11
57267: PUSH
57268: DOUBLE
57269: LD_INT 1
57271: DEC
57272: ST_TO_ADDR
57273: LD_VAR 0 3
57277: PUSH
57278: FOR_TO
57279: IFFALSE 57382
// begin hc_class = class_apeman ;
57281: LD_ADDR_OWVAR 28
57285: PUSH
57286: LD_INT 12
57288: ST_TO_ADDR
// hc_gallery =  ;
57289: LD_ADDR_OWVAR 33
57293: PUSH
57294: LD_STRING 
57296: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57297: LD_ADDR_OWVAR 35
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PPUSH
57306: LD_INT 2
57308: PPUSH
57309: CALL_OW 12
57313: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57314: LD_ADDR_OWVAR 31
57318: PUSH
57319: LD_INT 1
57321: PPUSH
57322: LD_INT 3
57324: PPUSH
57325: CALL_OW 12
57329: PUSH
57330: LD_INT 1
57332: PPUSH
57333: LD_INT 3
57335: PPUSH
57336: CALL_OW 12
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// animal := CreateHuman ;
57353: LD_ADDR_VAR 0 12
57357: PUSH
57358: CALL_OW 44
57362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57363: LD_VAR 0 12
57367: PPUSH
57368: LD_VAR 0 8
57372: PPUSH
57373: LD_INT 0
57375: PPUSH
57376: CALL 59155 0 3
// end ;
57380: GO 57278
57382: POP
57383: POP
// if enchidnas then
57384: LD_VAR 0 4
57388: IFFALSE 57455
// for i = 1 to enchidnas do
57390: LD_ADDR_VAR 0 11
57394: PUSH
57395: DOUBLE
57396: LD_INT 1
57398: DEC
57399: ST_TO_ADDR
57400: LD_VAR 0 4
57404: PUSH
57405: FOR_TO
57406: IFFALSE 57453
// begin hc_class = 13 ;
57408: LD_ADDR_OWVAR 28
57412: PUSH
57413: LD_INT 13
57415: ST_TO_ADDR
// hc_gallery =  ;
57416: LD_ADDR_OWVAR 33
57420: PUSH
57421: LD_STRING 
57423: ST_TO_ADDR
// animal := CreateHuman ;
57424: LD_ADDR_VAR 0 12
57428: PUSH
57429: CALL_OW 44
57433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57434: LD_VAR 0 12
57438: PPUSH
57439: LD_VAR 0 8
57443: PPUSH
57444: LD_INT 0
57446: PPUSH
57447: CALL 59155 0 3
// end ;
57451: GO 57405
57453: POP
57454: POP
// if fishes then
57455: LD_VAR 0 7
57459: IFFALSE 57526
// for i = 1 to fishes do
57461: LD_ADDR_VAR 0 11
57465: PUSH
57466: DOUBLE
57467: LD_INT 1
57469: DEC
57470: ST_TO_ADDR
57471: LD_VAR 0 7
57475: PUSH
57476: FOR_TO
57477: IFFALSE 57524
// begin hc_class = 20 ;
57479: LD_ADDR_OWVAR 28
57483: PUSH
57484: LD_INT 20
57486: ST_TO_ADDR
// hc_gallery =  ;
57487: LD_ADDR_OWVAR 33
57491: PUSH
57492: LD_STRING 
57494: ST_TO_ADDR
// animal := CreateHuman ;
57495: LD_ADDR_VAR 0 12
57499: PUSH
57500: CALL_OW 44
57504: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57505: LD_VAR 0 12
57509: PPUSH
57510: LD_VAR 0 9
57514: PPUSH
57515: LD_INT 0
57517: PPUSH
57518: CALL 59155 0 3
// end ;
57522: GO 57476
57524: POP
57525: POP
// end ;
57526: LD_VAR 0 10
57530: RET
// export function WantHeal ( sci , unit ) ; begin
57531: LD_INT 0
57533: PPUSH
// if GetTaskList ( sci ) > 0 then
57534: LD_VAR 0 1
57538: PPUSH
57539: CALL_OW 437
57543: PUSH
57544: LD_INT 0
57546: GREATER
57547: IFFALSE 57617
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57549: LD_VAR 0 1
57553: PPUSH
57554: CALL_OW 437
57558: PUSH
57559: LD_INT 1
57561: ARRAY
57562: PUSH
57563: LD_INT 1
57565: ARRAY
57566: PUSH
57567: LD_STRING l
57569: EQUAL
57570: PUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 437
57580: PUSH
57581: LD_INT 1
57583: ARRAY
57584: PUSH
57585: LD_INT 4
57587: ARRAY
57588: PUSH
57589: LD_VAR 0 2
57593: EQUAL
57594: AND
57595: IFFALSE 57607
// result := true else
57597: LD_ADDR_VAR 0 3
57601: PUSH
57602: LD_INT 1
57604: ST_TO_ADDR
57605: GO 57615
// result := false ;
57607: LD_ADDR_VAR 0 3
57611: PUSH
57612: LD_INT 0
57614: ST_TO_ADDR
// end else
57615: GO 57625
// result := false ;
57617: LD_ADDR_VAR 0 3
57621: PUSH
57622: LD_INT 0
57624: ST_TO_ADDR
// end ;
57625: LD_VAR 0 3
57629: RET
// export function HealTarget ( sci ) ; begin
57630: LD_INT 0
57632: PPUSH
// if not sci then
57633: LD_VAR 0 1
57637: NOT
57638: IFFALSE 57642
// exit ;
57640: GO 57707
// result := 0 ;
57642: LD_ADDR_VAR 0 2
57646: PUSH
57647: LD_INT 0
57649: ST_TO_ADDR
// if GetTaskList ( sci ) then
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 437
57659: IFFALSE 57707
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57661: LD_VAR 0 1
57665: PPUSH
57666: CALL_OW 437
57670: PUSH
57671: LD_INT 1
57673: ARRAY
57674: PUSH
57675: LD_INT 1
57677: ARRAY
57678: PUSH
57679: LD_STRING l
57681: EQUAL
57682: IFFALSE 57707
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57684: LD_ADDR_VAR 0 2
57688: PUSH
57689: LD_VAR 0 1
57693: PPUSH
57694: CALL_OW 437
57698: PUSH
57699: LD_INT 1
57701: ARRAY
57702: PUSH
57703: LD_INT 4
57705: ARRAY
57706: ST_TO_ADDR
// end ;
57707: LD_VAR 0 2
57711: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57712: LD_INT 0
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
// if not base_units then
57718: LD_VAR 0 1
57722: NOT
57723: IFFALSE 57727
// exit ;
57725: GO 57814
// result := false ;
57727: LD_ADDR_VAR 0 2
57731: PUSH
57732: LD_INT 0
57734: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57735: LD_ADDR_VAR 0 5
57739: PUSH
57740: LD_VAR 0 1
57744: PPUSH
57745: LD_INT 21
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PPUSH
57755: CALL_OW 72
57759: ST_TO_ADDR
// if not tmp then
57760: LD_VAR 0 5
57764: NOT
57765: IFFALSE 57769
// exit ;
57767: GO 57814
// for i in tmp do
57769: LD_ADDR_VAR 0 3
57773: PUSH
57774: LD_VAR 0 5
57778: PUSH
57779: FOR_IN
57780: IFFALSE 57812
// begin result := EnemyInRange ( i , 22 ) ;
57782: LD_ADDR_VAR 0 2
57786: PUSH
57787: LD_VAR 0 3
57791: PPUSH
57792: LD_INT 22
57794: PPUSH
57795: CALL 55401 0 2
57799: ST_TO_ADDR
// if result then
57800: LD_VAR 0 2
57804: IFFALSE 57810
// exit ;
57806: POP
57807: POP
57808: GO 57814
// end ;
57810: GO 57779
57812: POP
57813: POP
// end ;
57814: LD_VAR 0 2
57818: RET
// export function FilterByTag ( units , tag ) ; begin
57819: LD_INT 0
57821: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57822: LD_ADDR_VAR 0 3
57826: PUSH
57827: LD_VAR 0 1
57831: PPUSH
57832: LD_INT 120
57834: PUSH
57835: LD_VAR 0 2
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PPUSH
57844: CALL_OW 72
57848: ST_TO_ADDR
// end ;
57849: LD_VAR 0 3
57853: RET
// export function IsDriver ( un ) ; begin
57854: LD_INT 0
57856: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57857: LD_ADDR_VAR 0 2
57861: PUSH
57862: LD_VAR 0 1
57866: PUSH
57867: LD_INT 55
57869: PUSH
57870: EMPTY
57871: LIST
57872: PPUSH
57873: CALL_OW 69
57877: IN
57878: ST_TO_ADDR
// end ;
57879: LD_VAR 0 2
57883: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57884: LD_INT 0
57886: PPUSH
57887: PPUSH
// list := [ ] ;
57888: LD_ADDR_VAR 0 5
57892: PUSH
57893: EMPTY
57894: ST_TO_ADDR
// case d of 0 :
57895: LD_VAR 0 3
57899: PUSH
57900: LD_INT 0
57902: DOUBLE
57903: EQUAL
57904: IFTRUE 57908
57906: GO 58041
57908: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57909: LD_ADDR_VAR 0 5
57913: PUSH
57914: LD_VAR 0 1
57918: PUSH
57919: LD_INT 4
57921: MINUS
57922: PUSH
57923: LD_VAR 0 2
57927: PUSH
57928: LD_INT 4
57930: MINUS
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: PUSH
57940: LD_VAR 0 1
57944: PUSH
57945: LD_INT 3
57947: MINUS
57948: PUSH
57949: LD_VAR 0 2
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: PUSH
57962: LD_VAR 0 1
57966: PUSH
57967: LD_INT 4
57969: PLUS
57970: PUSH
57971: LD_VAR 0 2
57975: PUSH
57976: LD_INT 4
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: LIST
57983: PUSH
57984: LD_VAR 0 1
57988: PUSH
57989: LD_INT 3
57991: PLUS
57992: PUSH
57993: LD_VAR 0 2
57997: PUSH
57998: LD_INT 3
58000: PLUS
58001: PUSH
58002: LD_INT 5
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: PUSH
58010: LD_VAR 0 1
58014: PUSH
58015: LD_VAR 0 2
58019: PUSH
58020: LD_INT 4
58022: PLUS
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: ST_TO_ADDR
// end ; 1 :
58039: GO 58739
58041: LD_INT 1
58043: DOUBLE
58044: EQUAL
58045: IFTRUE 58049
58047: GO 58182
58049: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58050: LD_ADDR_VAR 0 5
58054: PUSH
58055: LD_VAR 0 1
58059: PUSH
58060: LD_VAR 0 2
58064: PUSH
58065: LD_INT 4
58067: MINUS
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: LIST
58076: PUSH
58077: LD_VAR 0 1
58081: PUSH
58082: LD_INT 3
58084: MINUS
58085: PUSH
58086: LD_VAR 0 2
58090: PUSH
58091: LD_INT 3
58093: MINUS
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: PUSH
58103: LD_VAR 0 1
58107: PUSH
58108: LD_INT 4
58110: MINUS
58111: PUSH
58112: LD_VAR 0 2
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: PUSH
58125: LD_VAR 0 1
58129: PUSH
58130: LD_VAR 0 2
58134: PUSH
58135: LD_INT 3
58137: PLUS
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: PUSH
58147: LD_VAR 0 1
58151: PUSH
58152: LD_INT 4
58154: PLUS
58155: PUSH
58156: LD_VAR 0 2
58160: PUSH
58161: LD_INT 4
58163: PLUS
58164: PUSH
58165: LD_INT 5
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// end ; 2 :
58180: GO 58739
58182: LD_INT 2
58184: DOUBLE
58185: EQUAL
58186: IFTRUE 58190
58188: GO 58319
58190: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58191: LD_ADDR_VAR 0 5
58195: PUSH
58196: LD_VAR 0 1
58200: PUSH
58201: LD_VAR 0 2
58205: PUSH
58206: LD_INT 3
58208: MINUS
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: PUSH
58218: LD_VAR 0 1
58222: PUSH
58223: LD_INT 4
58225: PLUS
58226: PUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: PUSH
58240: LD_VAR 0 1
58244: PUSH
58245: LD_VAR 0 2
58249: PUSH
58250: LD_INT 4
58252: PLUS
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: PUSH
58262: LD_VAR 0 1
58266: PUSH
58267: LD_INT 3
58269: MINUS
58270: PUSH
58271: LD_VAR 0 2
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: PUSH
58284: LD_VAR 0 1
58288: PUSH
58289: LD_INT 4
58291: MINUS
58292: PUSH
58293: LD_VAR 0 2
58297: PUSH
58298: LD_INT 4
58300: MINUS
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// end ; 3 :
58317: GO 58739
58319: LD_INT 3
58321: DOUBLE
58322: EQUAL
58323: IFTRUE 58327
58325: GO 58460
58327: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58328: LD_ADDR_VAR 0 5
58332: PUSH
58333: LD_VAR 0 1
58337: PUSH
58338: LD_INT 3
58340: PLUS
58341: PUSH
58342: LD_VAR 0 2
58346: PUSH
58347: LD_INT 4
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: PUSH
58355: LD_VAR 0 1
58359: PUSH
58360: LD_INT 4
58362: PLUS
58363: PUSH
58364: LD_VAR 0 2
58368: PUSH
58369: LD_INT 4
58371: PLUS
58372: PUSH
58373: LD_INT 5
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: PUSH
58381: LD_VAR 0 1
58385: PUSH
58386: LD_INT 4
58388: MINUS
58389: PUSH
58390: LD_VAR 0 2
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: PUSH
58403: LD_VAR 0 1
58407: PUSH
58408: LD_VAR 0 2
58412: PUSH
58413: LD_INT 4
58415: MINUS
58416: PUSH
58417: LD_INT 3
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: PUSH
58425: LD_VAR 0 1
58429: PUSH
58430: LD_INT 3
58432: MINUS
58433: PUSH
58434: LD_VAR 0 2
58438: PUSH
58439: LD_INT 3
58441: MINUS
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// end ; 4 :
58458: GO 58739
58460: LD_INT 4
58462: DOUBLE
58463: EQUAL
58464: IFTRUE 58468
58466: GO 58601
58468: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58469: LD_ADDR_VAR 0 5
58473: PUSH
58474: LD_VAR 0 1
58478: PUSH
58479: LD_VAR 0 2
58483: PUSH
58484: LD_INT 4
58486: PLUS
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: PUSH
58496: LD_VAR 0 1
58500: PUSH
58501: LD_INT 3
58503: PLUS
58504: PUSH
58505: LD_VAR 0 2
58509: PUSH
58510: LD_INT 3
58512: PLUS
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: PUSH
58522: LD_VAR 0 1
58526: PUSH
58527: LD_INT 4
58529: PLUS
58530: PUSH
58531: LD_VAR 0 2
58535: PUSH
58536: LD_INT 4
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: PUSH
58544: LD_VAR 0 1
58548: PUSH
58549: LD_VAR 0 2
58553: PUSH
58554: LD_INT 3
58556: MINUS
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: PUSH
58566: LD_VAR 0 1
58570: PUSH
58571: LD_INT 4
58573: MINUS
58574: PUSH
58575: LD_VAR 0 2
58579: PUSH
58580: LD_INT 4
58582: MINUS
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: ST_TO_ADDR
// end ; 5 :
58599: GO 58739
58601: LD_INT 5
58603: DOUBLE
58604: EQUAL
58605: IFTRUE 58609
58607: GO 58738
58609: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58610: LD_ADDR_VAR 0 5
58614: PUSH
58615: LD_VAR 0 1
58619: PUSH
58620: LD_INT 4
58622: MINUS
58623: PUSH
58624: LD_VAR 0 2
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: PUSH
58637: LD_VAR 0 1
58641: PUSH
58642: LD_VAR 0 2
58646: PUSH
58647: LD_INT 4
58649: MINUS
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: PUSH
58659: LD_VAR 0 1
58663: PUSH
58664: LD_INT 4
58666: PLUS
58667: PUSH
58668: LD_VAR 0 2
58672: PUSH
58673: LD_INT 4
58675: PLUS
58676: PUSH
58677: LD_INT 5
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: LIST
58684: PUSH
58685: LD_VAR 0 1
58689: PUSH
58690: LD_INT 3
58692: PLUS
58693: PUSH
58694: LD_VAR 0 2
58698: PUSH
58699: LD_INT 4
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: PUSH
58707: LD_VAR 0 1
58711: PUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_INT 3
58719: PLUS
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// end ; end ;
58736: GO 58739
58738: POP
// result := list ;
58739: LD_ADDR_VAR 0 4
58743: PUSH
58744: LD_VAR 0 5
58748: ST_TO_ADDR
// end ;
58749: LD_VAR 0 4
58753: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58754: LD_INT 0
58756: PPUSH
58757: PPUSH
58758: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58759: LD_VAR 0 1
58763: NOT
58764: PUSH
58765: LD_VAR 0 2
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 4
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: IN
58788: NOT
58789: OR
58790: IFFALSE 58794
// exit ;
58792: GO 58877
// tmp := [ ] ;
58794: LD_ADDR_VAR 0 5
58798: PUSH
58799: EMPTY
58800: ST_TO_ADDR
// for i in units do
58801: LD_ADDR_VAR 0 4
58805: PUSH
58806: LD_VAR 0 1
58810: PUSH
58811: FOR_IN
58812: IFFALSE 58846
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58814: LD_ADDR_VAR 0 5
58818: PUSH
58819: LD_VAR 0 5
58823: PPUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: LD_VAR 0 2
58833: PPUSH
58834: CALL_OW 259
58838: PPUSH
58839: CALL 60250 0 2
58843: ST_TO_ADDR
58844: GO 58811
58846: POP
58847: POP
// if not tmp then
58848: LD_VAR 0 5
58852: NOT
58853: IFFALSE 58857
// exit ;
58855: GO 58877
// result := SortListByListDesc ( units , tmp ) ;
58857: LD_ADDR_VAR 0 3
58861: PUSH
58862: LD_VAR 0 1
58866: PPUSH
58867: LD_VAR 0 5
58871: PPUSH
58872: CALL_OW 77
58876: ST_TO_ADDR
// end ;
58877: LD_VAR 0 3
58881: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58882: LD_INT 0
58884: PPUSH
58885: PPUSH
58886: PPUSH
// result := false ;
58887: LD_ADDR_VAR 0 3
58891: PUSH
58892: LD_INT 0
58894: ST_TO_ADDR
// if not building then
58895: LD_VAR 0 2
58899: NOT
58900: IFFALSE 58904
// exit ;
58902: GO 59042
// x := GetX ( building ) ;
58904: LD_ADDR_VAR 0 4
58908: PUSH
58909: LD_VAR 0 2
58913: PPUSH
58914: CALL_OW 250
58918: ST_TO_ADDR
// y := GetY ( building ) ;
58919: LD_ADDR_VAR 0 5
58923: PUSH
58924: LD_VAR 0 2
58928: PPUSH
58929: CALL_OW 251
58933: ST_TO_ADDR
// if not x or not y then
58934: LD_VAR 0 4
58938: NOT
58939: PUSH
58940: LD_VAR 0 5
58944: NOT
58945: OR
58946: IFFALSE 58950
// exit ;
58948: GO 59042
// if GetTaskList ( unit ) then
58950: LD_VAR 0 1
58954: PPUSH
58955: CALL_OW 437
58959: IFFALSE 59042
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58961: LD_STRING e
58963: PUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: CALL_OW 437
58973: PUSH
58974: LD_INT 1
58976: ARRAY
58977: PUSH
58978: LD_INT 1
58980: ARRAY
58981: EQUAL
58982: PUSH
58983: LD_VAR 0 4
58987: PUSH
58988: LD_VAR 0 1
58992: PPUSH
58993: CALL_OW 437
58997: PUSH
58998: LD_INT 1
59000: ARRAY
59001: PUSH
59002: LD_INT 2
59004: ARRAY
59005: EQUAL
59006: AND
59007: PUSH
59008: LD_VAR 0 5
59012: PUSH
59013: LD_VAR 0 1
59017: PPUSH
59018: CALL_OW 437
59022: PUSH
59023: LD_INT 1
59025: ARRAY
59026: PUSH
59027: LD_INT 3
59029: ARRAY
59030: EQUAL
59031: AND
59032: IFFALSE 59042
// result := true end ;
59034: LD_ADDR_VAR 0 3
59038: PUSH
59039: LD_INT 1
59041: ST_TO_ADDR
// end ;
59042: LD_VAR 0 3
59046: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59047: LD_INT 0
59049: PPUSH
// result := false ;
59050: LD_ADDR_VAR 0 4
59054: PUSH
59055: LD_INT 0
59057: ST_TO_ADDR
// if GetTaskList ( unit ) then
59058: LD_VAR 0 1
59062: PPUSH
59063: CALL_OW 437
59067: IFFALSE 59150
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59069: LD_STRING M
59071: PUSH
59072: LD_VAR 0 1
59076: PPUSH
59077: CALL_OW 437
59081: PUSH
59082: LD_INT 1
59084: ARRAY
59085: PUSH
59086: LD_INT 1
59088: ARRAY
59089: EQUAL
59090: PUSH
59091: LD_VAR 0 2
59095: PUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: CALL_OW 437
59105: PUSH
59106: LD_INT 1
59108: ARRAY
59109: PUSH
59110: LD_INT 2
59112: ARRAY
59113: EQUAL
59114: AND
59115: PUSH
59116: LD_VAR 0 3
59120: PUSH
59121: LD_VAR 0 1
59125: PPUSH
59126: CALL_OW 437
59130: PUSH
59131: LD_INT 1
59133: ARRAY
59134: PUSH
59135: LD_INT 3
59137: ARRAY
59138: EQUAL
59139: AND
59140: IFFALSE 59150
// result := true ;
59142: LD_ADDR_VAR 0 4
59146: PUSH
59147: LD_INT 1
59149: ST_TO_ADDR
// end ; end ;
59150: LD_VAR 0 4
59154: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59155: LD_INT 0
59157: PPUSH
59158: PPUSH
59159: PPUSH
59160: PPUSH
// if not unit or not area then
59161: LD_VAR 0 1
59165: NOT
59166: PUSH
59167: LD_VAR 0 2
59171: NOT
59172: OR
59173: IFFALSE 59177
// exit ;
59175: GO 59353
// tmp := AreaToList ( area , i ) ;
59177: LD_ADDR_VAR 0 6
59181: PUSH
59182: LD_VAR 0 2
59186: PPUSH
59187: LD_VAR 0 5
59191: PPUSH
59192: CALL_OW 517
59196: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59197: LD_ADDR_VAR 0 5
59201: PUSH
59202: DOUBLE
59203: LD_INT 1
59205: DEC
59206: ST_TO_ADDR
59207: LD_VAR 0 6
59211: PUSH
59212: LD_INT 1
59214: ARRAY
59215: PUSH
59216: FOR_TO
59217: IFFALSE 59351
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59219: LD_ADDR_VAR 0 7
59223: PUSH
59224: LD_VAR 0 6
59228: PUSH
59229: LD_INT 1
59231: ARRAY
59232: PUSH
59233: LD_VAR 0 5
59237: ARRAY
59238: PUSH
59239: LD_VAR 0 6
59243: PUSH
59244: LD_INT 2
59246: ARRAY
59247: PUSH
59248: LD_VAR 0 5
59252: ARRAY
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59258: LD_INT 92
59260: PUSH
59261: LD_VAR 0 7
59265: PUSH
59266: LD_INT 1
59268: ARRAY
59269: PUSH
59270: LD_VAR 0 7
59274: PUSH
59275: LD_INT 2
59277: ARRAY
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: PPUSH
59288: CALL_OW 69
59292: PUSH
59293: LD_INT 0
59295: EQUAL
59296: IFFALSE 59349
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59298: LD_VAR 0 1
59302: PPUSH
59303: LD_VAR 0 7
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PPUSH
59312: LD_VAR 0 7
59316: PUSH
59317: LD_INT 2
59319: ARRAY
59320: PPUSH
59321: LD_VAR 0 3
59325: PPUSH
59326: CALL_OW 48
// result := IsPlaced ( unit ) ;
59330: LD_ADDR_VAR 0 4
59334: PUSH
59335: LD_VAR 0 1
59339: PPUSH
59340: CALL_OW 305
59344: ST_TO_ADDR
// exit ;
59345: POP
59346: POP
59347: GO 59353
// end ; end ;
59349: GO 59216
59351: POP
59352: POP
// end ;
59353: LD_VAR 0 4
59357: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59358: LD_INT 0
59360: PPUSH
59361: PPUSH
59362: PPUSH
// if not side or side > 8 then
59363: LD_VAR 0 1
59367: NOT
59368: PUSH
59369: LD_VAR 0 1
59373: PUSH
59374: LD_INT 8
59376: GREATER
59377: OR
59378: IFFALSE 59382
// exit ;
59380: GO 59569
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59382: LD_ADDR_VAR 0 4
59386: PUSH
59387: LD_INT 22
59389: PUSH
59390: LD_VAR 0 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 21
59401: PUSH
59402: LD_INT 3
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PPUSH
59413: CALL_OW 69
59417: ST_TO_ADDR
// if not tmp then
59418: LD_VAR 0 4
59422: NOT
59423: IFFALSE 59427
// exit ;
59425: GO 59569
// enable_addtolog := true ;
59427: LD_ADDR_OWVAR 81
59431: PUSH
59432: LD_INT 1
59434: ST_TO_ADDR
// AddToLog ( [ ) ;
59435: LD_STRING [
59437: PPUSH
59438: CALL_OW 561
// for i in tmp do
59442: LD_ADDR_VAR 0 3
59446: PUSH
59447: LD_VAR 0 4
59451: PUSH
59452: FOR_IN
59453: IFFALSE 59560
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59455: LD_STRING [
59457: PUSH
59458: LD_VAR 0 3
59462: PPUSH
59463: CALL_OW 266
59467: STR
59468: PUSH
59469: LD_STRING , 
59471: STR
59472: PUSH
59473: LD_VAR 0 3
59477: PPUSH
59478: CALL_OW 250
59482: STR
59483: PUSH
59484: LD_STRING , 
59486: STR
59487: PUSH
59488: LD_VAR 0 3
59492: PPUSH
59493: CALL_OW 251
59497: STR
59498: PUSH
59499: LD_STRING , 
59501: STR
59502: PUSH
59503: LD_VAR 0 3
59507: PPUSH
59508: CALL_OW 254
59512: STR
59513: PUSH
59514: LD_STRING , 
59516: STR
59517: PUSH
59518: LD_VAR 0 3
59522: PPUSH
59523: LD_INT 1
59525: PPUSH
59526: CALL_OW 268
59530: STR
59531: PUSH
59532: LD_STRING , 
59534: STR
59535: PUSH
59536: LD_VAR 0 3
59540: PPUSH
59541: LD_INT 2
59543: PPUSH
59544: CALL_OW 268
59548: STR
59549: PUSH
59550: LD_STRING ],
59552: STR
59553: PPUSH
59554: CALL_OW 561
// end ;
59558: GO 59452
59560: POP
59561: POP
// AddToLog ( ]; ) ;
59562: LD_STRING ];
59564: PPUSH
59565: CALL_OW 561
// end ;
59569: LD_VAR 0 2
59573: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59574: LD_INT 0
59576: PPUSH
59577: PPUSH
59578: PPUSH
59579: PPUSH
59580: PPUSH
// if not area or not rate or not max then
59581: LD_VAR 0 1
59585: NOT
59586: PUSH
59587: LD_VAR 0 2
59591: NOT
59592: OR
59593: PUSH
59594: LD_VAR 0 4
59598: NOT
59599: OR
59600: IFFALSE 59604
// exit ;
59602: GO 59793
// while 1 do
59604: LD_INT 1
59606: IFFALSE 59793
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59608: LD_ADDR_VAR 0 9
59612: PUSH
59613: LD_VAR 0 1
59617: PPUSH
59618: LD_INT 1
59620: PPUSH
59621: CALL_OW 287
59625: PUSH
59626: LD_INT 10
59628: MUL
59629: ST_TO_ADDR
// r := rate / 10 ;
59630: LD_ADDR_VAR 0 7
59634: PUSH
59635: LD_VAR 0 2
59639: PUSH
59640: LD_INT 10
59642: DIVREAL
59643: ST_TO_ADDR
// time := 1 1$00 ;
59644: LD_ADDR_VAR 0 8
59648: PUSH
59649: LD_INT 2100
59651: ST_TO_ADDR
// if amount < min then
59652: LD_VAR 0 9
59656: PUSH
59657: LD_VAR 0 3
59661: LESS
59662: IFFALSE 59680
// r := r * 2 else
59664: LD_ADDR_VAR 0 7
59668: PUSH
59669: LD_VAR 0 7
59673: PUSH
59674: LD_INT 2
59676: MUL
59677: ST_TO_ADDR
59678: GO 59706
// if amount > max then
59680: LD_VAR 0 9
59684: PUSH
59685: LD_VAR 0 4
59689: GREATER
59690: IFFALSE 59706
// r := r / 2 ;
59692: LD_ADDR_VAR 0 7
59696: PUSH
59697: LD_VAR 0 7
59701: PUSH
59702: LD_INT 2
59704: DIVREAL
59705: ST_TO_ADDR
// time := time / r ;
59706: LD_ADDR_VAR 0 8
59710: PUSH
59711: LD_VAR 0 8
59715: PUSH
59716: LD_VAR 0 7
59720: DIVREAL
59721: ST_TO_ADDR
// if time < 0 then
59722: LD_VAR 0 8
59726: PUSH
59727: LD_INT 0
59729: LESS
59730: IFFALSE 59747
// time := time * - 1 ;
59732: LD_ADDR_VAR 0 8
59736: PUSH
59737: LD_VAR 0 8
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: MUL
59746: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59747: LD_VAR 0 8
59751: PUSH
59752: LD_INT 35
59754: PPUSH
59755: LD_INT 875
59757: PPUSH
59758: CALL_OW 12
59762: PLUS
59763: PPUSH
59764: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59768: LD_INT 1
59770: PPUSH
59771: LD_INT 5
59773: PPUSH
59774: CALL_OW 12
59778: PPUSH
59779: LD_VAR 0 1
59783: PPUSH
59784: LD_INT 1
59786: PPUSH
59787: CALL_OW 55
// end ;
59791: GO 59604
// end ;
59793: LD_VAR 0 5
59797: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59798: LD_INT 0
59800: PPUSH
59801: PPUSH
59802: PPUSH
59803: PPUSH
59804: PPUSH
59805: PPUSH
59806: PPUSH
59807: PPUSH
// if not turrets or not factories then
59808: LD_VAR 0 1
59812: NOT
59813: PUSH
59814: LD_VAR 0 2
59818: NOT
59819: OR
59820: IFFALSE 59824
// exit ;
59822: GO 60131
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59824: LD_ADDR_VAR 0 10
59828: PUSH
59829: LD_INT 5
59831: PUSH
59832: LD_INT 6
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 5
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 24
59866: PUSH
59867: LD_INT 25
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 23
59876: PUSH
59877: LD_INT 27
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 42
59890: PUSH
59891: LD_INT 43
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 44
59900: PUSH
59901: LD_INT 46
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 45
59910: PUSH
59911: LD_INT 47
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: ST_TO_ADDR
// result := [ ] ;
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: EMPTY
59934: ST_TO_ADDR
// for i in turrets do
59935: LD_ADDR_VAR 0 4
59939: PUSH
59940: LD_VAR 0 1
59944: PUSH
59945: FOR_IN
59946: IFFALSE 60129
// begin nat := GetNation ( i ) ;
59948: LD_ADDR_VAR 0 7
59952: PUSH
59953: LD_VAR 0 4
59957: PPUSH
59958: CALL_OW 248
59962: ST_TO_ADDR
// weapon := 0 ;
59963: LD_ADDR_VAR 0 8
59967: PUSH
59968: LD_INT 0
59970: ST_TO_ADDR
// if not nat then
59971: LD_VAR 0 7
59975: NOT
59976: IFFALSE 59980
// continue ;
59978: GO 59945
// for j in list [ nat ] do
59980: LD_ADDR_VAR 0 5
59984: PUSH
59985: LD_VAR 0 10
59989: PUSH
59990: LD_VAR 0 7
59994: ARRAY
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60038
// if GetBWeapon ( i ) = j [ 1 ] then
59999: LD_VAR 0 4
60003: PPUSH
60004: CALL_OW 269
60008: PUSH
60009: LD_VAR 0 5
60013: PUSH
60014: LD_INT 1
60016: ARRAY
60017: EQUAL
60018: IFFALSE 60036
// begin weapon := j [ 2 ] ;
60020: LD_ADDR_VAR 0 8
60024: PUSH
60025: LD_VAR 0 5
60029: PUSH
60030: LD_INT 2
60032: ARRAY
60033: ST_TO_ADDR
// break ;
60034: GO 60038
// end ;
60036: GO 59996
60038: POP
60039: POP
// if not weapon then
60040: LD_VAR 0 8
60044: NOT
60045: IFFALSE 60049
// continue ;
60047: GO 59945
// for k in factories do
60049: LD_ADDR_VAR 0 6
60053: PUSH
60054: LD_VAR 0 2
60058: PUSH
60059: FOR_IN
60060: IFFALSE 60125
// begin weapons := AvailableWeaponList ( k ) ;
60062: LD_ADDR_VAR 0 9
60066: PUSH
60067: LD_VAR 0 6
60071: PPUSH
60072: CALL_OW 478
60076: ST_TO_ADDR
// if not weapons then
60077: LD_VAR 0 9
60081: NOT
60082: IFFALSE 60086
// continue ;
60084: GO 60059
// if weapon in weapons then
60086: LD_VAR 0 8
60090: PUSH
60091: LD_VAR 0 9
60095: IN
60096: IFFALSE 60123
// begin result := [ i , weapon ] ;
60098: LD_ADDR_VAR 0 3
60102: PUSH
60103: LD_VAR 0 4
60107: PUSH
60108: LD_VAR 0 8
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: ST_TO_ADDR
// exit ;
60117: POP
60118: POP
60119: POP
60120: POP
60121: GO 60131
// end ; end ;
60123: GO 60059
60125: POP
60126: POP
// end ;
60127: GO 59945
60129: POP
60130: POP
// end ;
60131: LD_VAR 0 3
60135: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60136: LD_INT 0
60138: PPUSH
// if not side or side > 8 then
60139: LD_VAR 0 3
60143: NOT
60144: PUSH
60145: LD_VAR 0 3
60149: PUSH
60150: LD_INT 8
60152: GREATER
60153: OR
60154: IFFALSE 60158
// exit ;
60156: GO 60217
// if not range then
60158: LD_VAR 0 4
60162: NOT
60163: IFFALSE 60174
// range := - 12 ;
60165: LD_ADDR_VAR 0 4
60169: PUSH
60170: LD_INT 12
60172: NEG
60173: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60174: LD_VAR 0 1
60178: PPUSH
60179: LD_VAR 0 2
60183: PPUSH
60184: LD_VAR 0 3
60188: PPUSH
60189: LD_VAR 0 4
60193: PPUSH
60194: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60198: LD_VAR 0 1
60202: PPUSH
60203: LD_VAR 0 2
60207: PPUSH
60208: LD_VAR 0 3
60212: PPUSH
60213: CALL_OW 331
// end ;
60217: LD_VAR 0 5
60221: RET
// export function Video ( mode ) ; begin
60222: LD_INT 0
60224: PPUSH
// ingame_video = mode ;
60225: LD_ADDR_OWVAR 52
60229: PUSH
60230: LD_VAR 0 1
60234: ST_TO_ADDR
// interface_hidden = mode ;
60235: LD_ADDR_OWVAR 54
60239: PUSH
60240: LD_VAR 0 1
60244: ST_TO_ADDR
// end ;
60245: LD_VAR 0 2
60249: RET
// export function Join ( array , element ) ; begin
60250: LD_INT 0
60252: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60253: LD_ADDR_VAR 0 3
60257: PUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: LD_VAR 0 1
60267: PUSH
60268: LD_INT 1
60270: PLUS
60271: PPUSH
60272: LD_VAR 0 2
60276: PPUSH
60277: CALL_OW 1
60281: ST_TO_ADDR
// end ;
60282: LD_VAR 0 3
60286: RET
// export function JoinUnion ( array , element ) ; begin
60287: LD_INT 0
60289: PPUSH
// result := array union element ;
60290: LD_ADDR_VAR 0 3
60294: PUSH
60295: LD_VAR 0 1
60299: PUSH
60300: LD_VAR 0 2
60304: UNION
60305: ST_TO_ADDR
// end ;
60306: LD_VAR 0 3
60310: RET
// export function GetBehemoths ( side ) ; begin
60311: LD_INT 0
60313: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60314: LD_ADDR_VAR 0 2
60318: PUSH
60319: LD_INT 22
60321: PUSH
60322: LD_VAR 0 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 31
60333: PUSH
60334: LD_INT 25
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PPUSH
60345: CALL_OW 69
60349: ST_TO_ADDR
// end ;
60350: LD_VAR 0 2
60354: RET
// export function Shuffle ( array ) ; var i , index ; begin
60355: LD_INT 0
60357: PPUSH
60358: PPUSH
60359: PPUSH
// result := [ ] ;
60360: LD_ADDR_VAR 0 2
60364: PUSH
60365: EMPTY
60366: ST_TO_ADDR
// if not array then
60367: LD_VAR 0 1
60371: NOT
60372: IFFALSE 60376
// exit ;
60374: GO 60475
// Randomize ;
60376: CALL_OW 10
// for i = array downto 1 do
60380: LD_ADDR_VAR 0 3
60384: PUSH
60385: DOUBLE
60386: LD_VAR 0 1
60390: INC
60391: ST_TO_ADDR
60392: LD_INT 1
60394: PUSH
60395: FOR_DOWNTO
60396: IFFALSE 60473
// begin index := rand ( 1 , array ) ;
60398: LD_ADDR_VAR 0 4
60402: PUSH
60403: LD_INT 1
60405: PPUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 12
60415: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60416: LD_ADDR_VAR 0 2
60420: PUSH
60421: LD_VAR 0 2
60425: PPUSH
60426: LD_VAR 0 2
60430: PUSH
60431: LD_INT 1
60433: PLUS
60434: PPUSH
60435: LD_VAR 0 1
60439: PUSH
60440: LD_VAR 0 4
60444: ARRAY
60445: PPUSH
60446: CALL_OW 2
60450: ST_TO_ADDR
// array := Delete ( array , index ) ;
60451: LD_ADDR_VAR 0 1
60455: PUSH
60456: LD_VAR 0 1
60460: PPUSH
60461: LD_VAR 0 4
60465: PPUSH
60466: CALL_OW 3
60470: ST_TO_ADDR
// end ;
60471: GO 60395
60473: POP
60474: POP
// end ;
60475: LD_VAR 0 2
60479: RET
// export function GetBaseMaterials ( base ) ; begin
60480: LD_INT 0
60482: PPUSH
// result := [ 0 , 0 , 0 ] ;
60483: LD_ADDR_VAR 0 2
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: ST_TO_ADDR
// if not base then
60502: LD_VAR 0 1
60506: NOT
60507: IFFALSE 60511
// exit ;
60509: GO 60560
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60511: LD_ADDR_VAR 0 2
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_INT 1
60523: PPUSH
60524: CALL_OW 275
60528: PUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: LD_INT 2
60536: PPUSH
60537: CALL_OW 275
60541: PUSH
60542: LD_VAR 0 1
60546: PPUSH
60547: LD_INT 3
60549: PPUSH
60550: CALL_OW 275
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// end ;
60560: LD_VAR 0 2
60564: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60565: LD_INT 0
60567: PPUSH
60568: PPUSH
// result := array ;
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_VAR 0 1
60578: ST_TO_ADDR
// if size >= result then
60579: LD_VAR 0 2
60583: PUSH
60584: LD_VAR 0 3
60588: GREATEREQUAL
60589: IFFALSE 60593
// exit ;
60591: GO 60643
// if size then
60593: LD_VAR 0 2
60597: IFFALSE 60643
// for i := array downto size do
60599: LD_ADDR_VAR 0 4
60603: PUSH
60604: DOUBLE
60605: LD_VAR 0 1
60609: INC
60610: ST_TO_ADDR
60611: LD_VAR 0 2
60615: PUSH
60616: FOR_DOWNTO
60617: IFFALSE 60641
// result := Delete ( result , result ) ;
60619: LD_ADDR_VAR 0 3
60623: PUSH
60624: LD_VAR 0 3
60628: PPUSH
60629: LD_VAR 0 3
60633: PPUSH
60634: CALL_OW 3
60638: ST_TO_ADDR
60639: GO 60616
60641: POP
60642: POP
// end ;
60643: LD_VAR 0 3
60647: RET
// export function ComExit ( unit ) ; var tmp ; begin
60648: LD_INT 0
60650: PPUSH
60651: PPUSH
// if not IsInUnit ( unit ) then
60652: LD_VAR 0 1
60656: PPUSH
60657: CALL_OW 310
60661: NOT
60662: IFFALSE 60666
// exit ;
60664: GO 60726
// tmp := IsInUnit ( unit ) ;
60666: LD_ADDR_VAR 0 3
60670: PUSH
60671: LD_VAR 0 1
60675: PPUSH
60676: CALL_OW 310
60680: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60681: LD_VAR 0 3
60685: PPUSH
60686: CALL_OW 247
60690: PUSH
60691: LD_INT 2
60693: EQUAL
60694: IFFALSE 60707
// ComExitVehicle ( unit ) else
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 121
60705: GO 60716
// ComExitBuilding ( unit ) ;
60707: LD_VAR 0 1
60711: PPUSH
60712: CALL_OW 122
// result := tmp ;
60716: LD_ADDR_VAR 0 2
60720: PUSH
60721: LD_VAR 0 3
60725: ST_TO_ADDR
// end ;
60726: LD_VAR 0 2
60730: RET
// export function ComExitAll ( units ) ; var i ; begin
60731: LD_INT 0
60733: PPUSH
60734: PPUSH
// if not units then
60735: LD_VAR 0 1
60739: NOT
60740: IFFALSE 60744
// exit ;
60742: GO 60770
// for i in units do
60744: LD_ADDR_VAR 0 3
60748: PUSH
60749: LD_VAR 0 1
60753: PUSH
60754: FOR_IN
60755: IFFALSE 60768
// ComExit ( i ) ;
60757: LD_VAR 0 3
60761: PPUSH
60762: CALL 60648 0 1
60766: GO 60754
60768: POP
60769: POP
// end ;
60770: LD_VAR 0 2
60774: RET
// export function ResetHc ; begin
60775: LD_INT 0
60777: PPUSH
// InitHc ;
60778: CALL_OW 19
// hc_importance := 0 ;
60782: LD_ADDR_OWVAR 32
60786: PUSH
60787: LD_INT 0
60789: ST_TO_ADDR
// end ;
60790: LD_VAR 0 1
60794: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
60799: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: LD_VAR 0 1
60809: PUSH
60810: LD_VAR 0 3
60814: PLUS
60815: PUSH
60816: LD_INT 2
60818: DIV
60819: ST_TO_ADDR
// if _x < 0 then
60820: LD_VAR 0 6
60824: PUSH
60825: LD_INT 0
60827: LESS
60828: IFFALSE 60845
// _x := _x * - 1 ;
60830: LD_ADDR_VAR 0 6
60834: PUSH
60835: LD_VAR 0 6
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: MUL
60844: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60845: LD_ADDR_VAR 0 7
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_VAR 0 4
60859: PLUS
60860: PUSH
60861: LD_INT 2
60863: DIV
60864: ST_TO_ADDR
// if _y < 0 then
60865: LD_VAR 0 7
60869: PUSH
60870: LD_INT 0
60872: LESS
60873: IFFALSE 60890
// _y := _y * - 1 ;
60875: LD_ADDR_VAR 0 7
60879: PUSH
60880: LD_VAR 0 7
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: MUL
60889: ST_TO_ADDR
// result := [ _x , _y ] ;
60890: LD_ADDR_VAR 0 5
60894: PUSH
60895: LD_VAR 0 6
60899: PUSH
60900: LD_VAR 0 7
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: ST_TO_ADDR
// end ;
60909: LD_VAR 0 5
60913: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60914: LD_INT 0
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
// task := GetTaskList ( unit ) ;
60920: LD_ADDR_VAR 0 7
60924: PUSH
60925: LD_VAR 0 1
60929: PPUSH
60930: CALL_OW 437
60934: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60935: LD_VAR 0 7
60939: NOT
60940: PUSH
60941: LD_VAR 0 1
60945: PPUSH
60946: LD_VAR 0 2
60950: PPUSH
60951: CALL_OW 308
60955: NOT
60956: AND
60957: IFFALSE 60961
// exit ;
60959: GO 61079
// if IsInArea ( unit , area ) then
60961: LD_VAR 0 1
60965: PPUSH
60966: LD_VAR 0 2
60970: PPUSH
60971: CALL_OW 308
60975: IFFALSE 60993
// begin ComMoveToArea ( unit , goAway ) ;
60977: LD_VAR 0 1
60981: PPUSH
60982: LD_VAR 0 3
60986: PPUSH
60987: CALL_OW 113
// exit ;
60991: GO 61079
// end ; if task [ 1 ] [ 1 ] <> M then
60993: LD_VAR 0 7
60997: PUSH
60998: LD_INT 1
61000: ARRAY
61001: PUSH
61002: LD_INT 1
61004: ARRAY
61005: PUSH
61006: LD_STRING M
61008: NONEQUAL
61009: IFFALSE 61013
// exit ;
61011: GO 61079
// x := task [ 1 ] [ 2 ] ;
61013: LD_ADDR_VAR 0 5
61017: PUSH
61018: LD_VAR 0 7
61022: PUSH
61023: LD_INT 1
61025: ARRAY
61026: PUSH
61027: LD_INT 2
61029: ARRAY
61030: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61031: LD_ADDR_VAR 0 6
61035: PUSH
61036: LD_VAR 0 7
61040: PUSH
61041: LD_INT 1
61043: ARRAY
61044: PUSH
61045: LD_INT 3
61047: ARRAY
61048: ST_TO_ADDR
// if InArea ( x , y , area ) then
61049: LD_VAR 0 5
61053: PPUSH
61054: LD_VAR 0 6
61058: PPUSH
61059: LD_VAR 0 2
61063: PPUSH
61064: CALL_OW 309
61068: IFFALSE 61079
// ComStop ( unit ) ;
61070: LD_VAR 0 1
61074: PPUSH
61075: CALL_OW 141
// end ;
61079: LD_VAR 0 4
61083: RET
// export function Abs ( value ) ; begin
61084: LD_INT 0
61086: PPUSH
// result := value ;
61087: LD_ADDR_VAR 0 2
61091: PUSH
61092: LD_VAR 0 1
61096: ST_TO_ADDR
// if value < 0 then
61097: LD_VAR 0 1
61101: PUSH
61102: LD_INT 0
61104: LESS
61105: IFFALSE 61122
// result := value * - 1 ;
61107: LD_ADDR_VAR 0 2
61111: PUSH
61112: LD_VAR 0 1
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: MUL
61121: ST_TO_ADDR
// end ;
61122: LD_VAR 0 2
61126: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61127: LD_INT 0
61129: PPUSH
61130: PPUSH
61131: PPUSH
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
61136: PPUSH
// if not unit or not building then
61137: LD_VAR 0 1
61141: NOT
61142: PUSH
61143: LD_VAR 0 2
61147: NOT
61148: OR
61149: IFFALSE 61153
// exit ;
61151: GO 61379
// x := GetX ( building ) ;
61153: LD_ADDR_VAR 0 4
61157: PUSH
61158: LD_VAR 0 2
61162: PPUSH
61163: CALL_OW 250
61167: ST_TO_ADDR
// y := GetY ( building ) ;
61168: LD_ADDR_VAR 0 6
61172: PUSH
61173: LD_VAR 0 2
61177: PPUSH
61178: CALL_OW 251
61182: ST_TO_ADDR
// d := GetDir ( building ) ;
61183: LD_ADDR_VAR 0 8
61187: PUSH
61188: LD_VAR 0 2
61192: PPUSH
61193: CALL_OW 254
61197: ST_TO_ADDR
// r := 4 ;
61198: LD_ADDR_VAR 0 9
61202: PUSH
61203: LD_INT 4
61205: ST_TO_ADDR
// for i := 1 to 5 do
61206: LD_ADDR_VAR 0 10
61210: PUSH
61211: DOUBLE
61212: LD_INT 1
61214: DEC
61215: ST_TO_ADDR
61216: LD_INT 5
61218: PUSH
61219: FOR_TO
61220: IFFALSE 61377
// begin _x := ShiftX ( x , d , r + i ) ;
61222: LD_ADDR_VAR 0 5
61226: PUSH
61227: LD_VAR 0 4
61231: PPUSH
61232: LD_VAR 0 8
61236: PPUSH
61237: LD_VAR 0 9
61241: PUSH
61242: LD_VAR 0 10
61246: PLUS
61247: PPUSH
61248: CALL_OW 272
61252: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61253: LD_ADDR_VAR 0 7
61257: PUSH
61258: LD_VAR 0 6
61262: PPUSH
61263: LD_VAR 0 8
61267: PPUSH
61268: LD_VAR 0 9
61272: PUSH
61273: LD_VAR 0 10
61277: PLUS
61278: PPUSH
61279: CALL_OW 273
61283: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61284: LD_VAR 0 5
61288: PPUSH
61289: LD_VAR 0 7
61293: PPUSH
61294: CALL_OW 488
61298: PUSH
61299: LD_VAR 0 5
61303: PPUSH
61304: LD_VAR 0 7
61308: PPUSH
61309: CALL_OW 428
61313: PPUSH
61314: CALL_OW 247
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: IN
61329: NOT
61330: AND
61331: IFFALSE 61375
// begin ComMoveXY ( unit , _x , _y ) ;
61333: LD_VAR 0 1
61337: PPUSH
61338: LD_VAR 0 5
61342: PPUSH
61343: LD_VAR 0 7
61347: PPUSH
61348: CALL_OW 111
// result := [ _x , _y ] ;
61352: LD_ADDR_VAR 0 3
61356: PUSH
61357: LD_VAR 0 5
61361: PUSH
61362: LD_VAR 0 7
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: ST_TO_ADDR
// exit ;
61371: POP
61372: POP
61373: GO 61379
// end ; end ;
61375: GO 61219
61377: POP
61378: POP
// end ;
61379: LD_VAR 0 3
61383: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61384: LD_INT 0
61386: PPUSH
61387: PPUSH
61388: PPUSH
// result := 0 ;
61389: LD_ADDR_VAR 0 3
61393: PUSH
61394: LD_INT 0
61396: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61397: LD_VAR 0 1
61401: PUSH
61402: LD_INT 0
61404: LESS
61405: PUSH
61406: LD_VAR 0 1
61410: PUSH
61411: LD_INT 8
61413: GREATER
61414: OR
61415: PUSH
61416: LD_VAR 0 2
61420: PUSH
61421: LD_INT 0
61423: LESS
61424: OR
61425: PUSH
61426: LD_VAR 0 2
61430: PUSH
61431: LD_INT 8
61433: GREATER
61434: OR
61435: IFFALSE 61439
// exit ;
61437: GO 61514
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61439: LD_ADDR_VAR 0 4
61443: PUSH
61444: LD_INT 22
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PPUSH
61456: CALL_OW 69
61460: PUSH
61461: FOR_IN
61462: IFFALSE 61512
// begin un := UnitShoot ( i ) ;
61464: LD_ADDR_VAR 0 5
61468: PUSH
61469: LD_VAR 0 4
61473: PPUSH
61474: CALL_OW 504
61478: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61479: LD_VAR 0 5
61483: PPUSH
61484: CALL_OW 255
61488: PUSH
61489: LD_VAR 0 1
61493: EQUAL
61494: IFFALSE 61510
// begin result := un ;
61496: LD_ADDR_VAR 0 3
61500: PUSH
61501: LD_VAR 0 5
61505: ST_TO_ADDR
// exit ;
61506: POP
61507: POP
61508: GO 61514
// end ; end ;
61510: GO 61461
61512: POP
61513: POP
// end ;
61514: LD_VAR 0 3
61518: RET
// export function GetCargoBay ( units ) ; begin
61519: LD_INT 0
61521: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61522: LD_ADDR_VAR 0 2
61526: PUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 34
61537: PUSH
61538: LD_INT 12
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 34
61547: PUSH
61548: LD_INT 51
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 34
61557: PUSH
61558: LD_INT 32
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 34
61567: PUSH
61568: LD_INT 89
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: PPUSH
61582: CALL_OW 72
61586: ST_TO_ADDR
// end ;
61587: LD_VAR 0 2
61591: RET
// export function Negate ( value ) ; begin
61592: LD_INT 0
61594: PPUSH
// result := not value ;
61595: LD_ADDR_VAR 0 2
61599: PUSH
61600: LD_VAR 0 1
61604: NOT
61605: ST_TO_ADDR
// end ;
61606: LD_VAR 0 2
61610: RET
// export function Inc ( value ) ; begin
61611: LD_INT 0
61613: PPUSH
// result := value + 1 ;
61614: LD_ADDR_VAR 0 2
61618: PUSH
61619: LD_VAR 0 1
61623: PUSH
61624: LD_INT 1
61626: PLUS
61627: ST_TO_ADDR
// end ;
61628: LD_VAR 0 2
61632: RET
// export function Dec ( value ) ; begin
61633: LD_INT 0
61635: PPUSH
// result := value - 1 ;
61636: LD_ADDR_VAR 0 2
61640: PUSH
61641: LD_VAR 0 1
61645: PUSH
61646: LD_INT 1
61648: MINUS
61649: ST_TO_ADDR
// end ;
61650: LD_VAR 0 2
61654: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61655: LD_INT 0
61657: PPUSH
61658: PPUSH
61659: PPUSH
61660: PPUSH
61661: PPUSH
61662: PPUSH
61663: PPUSH
61664: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61665: LD_VAR 0 1
61669: PPUSH
61670: LD_VAR 0 2
61674: PPUSH
61675: CALL_OW 488
61679: NOT
61680: PUSH
61681: LD_VAR 0 3
61685: PPUSH
61686: LD_VAR 0 4
61690: PPUSH
61691: CALL_OW 488
61695: NOT
61696: OR
61697: IFFALSE 61710
// begin result := - 1 ;
61699: LD_ADDR_VAR 0 5
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: ST_TO_ADDR
// exit ;
61708: GO 61945
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61710: LD_ADDR_VAR 0 12
61714: PUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: LD_VAR 0 2
61724: PPUSH
61725: LD_VAR 0 3
61729: PPUSH
61730: LD_VAR 0 4
61734: PPUSH
61735: CALL 60795 0 4
61739: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61740: LD_ADDR_VAR 0 11
61744: PUSH
61745: LD_VAR 0 1
61749: PPUSH
61750: LD_VAR 0 2
61754: PPUSH
61755: LD_VAR 0 12
61759: PUSH
61760: LD_INT 1
61762: ARRAY
61763: PPUSH
61764: LD_VAR 0 12
61768: PUSH
61769: LD_INT 2
61771: ARRAY
61772: PPUSH
61773: CALL_OW 298
61777: ST_TO_ADDR
// distance := 9999 ;
61778: LD_ADDR_VAR 0 10
61782: PUSH
61783: LD_INT 9999
61785: ST_TO_ADDR
// for i := 0 to 5 do
61786: LD_ADDR_VAR 0 6
61790: PUSH
61791: DOUBLE
61792: LD_INT 0
61794: DEC
61795: ST_TO_ADDR
61796: LD_INT 5
61798: PUSH
61799: FOR_TO
61800: IFFALSE 61943
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61802: LD_ADDR_VAR 0 7
61806: PUSH
61807: LD_VAR 0 1
61811: PPUSH
61812: LD_VAR 0 6
61816: PPUSH
61817: LD_VAR 0 11
61821: PPUSH
61822: CALL_OW 272
61826: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61827: LD_ADDR_VAR 0 8
61831: PUSH
61832: LD_VAR 0 2
61836: PPUSH
61837: LD_VAR 0 6
61841: PPUSH
61842: LD_VAR 0 11
61846: PPUSH
61847: CALL_OW 273
61851: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61852: LD_VAR 0 7
61856: PPUSH
61857: LD_VAR 0 8
61861: PPUSH
61862: CALL_OW 488
61866: NOT
61867: IFFALSE 61871
// continue ;
61869: GO 61799
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61871: LD_ADDR_VAR 0 9
61875: PUSH
61876: LD_VAR 0 12
61880: PUSH
61881: LD_INT 1
61883: ARRAY
61884: PPUSH
61885: LD_VAR 0 12
61889: PUSH
61890: LD_INT 2
61892: ARRAY
61893: PPUSH
61894: LD_VAR 0 7
61898: PPUSH
61899: LD_VAR 0 8
61903: PPUSH
61904: CALL_OW 298
61908: ST_TO_ADDR
// if tmp < distance then
61909: LD_VAR 0 9
61913: PUSH
61914: LD_VAR 0 10
61918: LESS
61919: IFFALSE 61941
// begin result := i ;
61921: LD_ADDR_VAR 0 5
61925: PUSH
61926: LD_VAR 0 6
61930: ST_TO_ADDR
// distance := tmp ;
61931: LD_ADDR_VAR 0 10
61935: PUSH
61936: LD_VAR 0 9
61940: ST_TO_ADDR
// end ; end ;
61941: GO 61799
61943: POP
61944: POP
// end ;
61945: LD_VAR 0 5
61949: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61950: LD_INT 0
61952: PPUSH
61953: PPUSH
// if not driver or not IsInUnit ( driver ) then
61954: LD_VAR 0 1
61958: NOT
61959: PUSH
61960: LD_VAR 0 1
61964: PPUSH
61965: CALL_OW 310
61969: NOT
61970: OR
61971: IFFALSE 61975
// exit ;
61973: GO 62065
// vehicle := IsInUnit ( driver ) ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_VAR 0 1
61984: PPUSH
61985: CALL_OW 310
61989: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61990: LD_VAR 0 1
61994: PPUSH
61995: LD_STRING \
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: LD_STRING E
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_VAR 0 3
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PPUSH
62061: CALL_OW 446
// end ;
62065: LD_VAR 0 2
62069: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62070: LD_INT 0
62072: PPUSH
62073: PPUSH
// if not driver or not IsInUnit ( driver ) then
62074: LD_VAR 0 1
62078: NOT
62079: PUSH
62080: LD_VAR 0 1
62084: PPUSH
62085: CALL_OW 310
62089: NOT
62090: OR
62091: IFFALSE 62095
// exit ;
62093: GO 62185
// vehicle := IsInUnit ( driver ) ;
62095: LD_ADDR_VAR 0 3
62099: PUSH
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL_OW 310
62109: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62110: LD_VAR 0 1
62114: PPUSH
62115: LD_STRING \
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: PUSH
62145: LD_STRING E
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_VAR 0 3
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PPUSH
62181: CALL_OW 447
// end ;
62185: LD_VAR 0 2
62189: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62190: LD_INT 0
62192: PPUSH
62193: PPUSH
62194: PPUSH
// tmp := [ ] ;
62195: LD_ADDR_VAR 0 5
62199: PUSH
62200: EMPTY
62201: ST_TO_ADDR
// for i in units do
62202: LD_ADDR_VAR 0 4
62206: PUSH
62207: LD_VAR 0 1
62211: PUSH
62212: FOR_IN
62213: IFFALSE 62251
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62215: LD_ADDR_VAR 0 5
62219: PUSH
62220: LD_VAR 0 5
62224: PPUSH
62225: LD_VAR 0 5
62229: PUSH
62230: LD_INT 1
62232: PLUS
62233: PPUSH
62234: LD_VAR 0 4
62238: PPUSH
62239: CALL_OW 256
62243: PPUSH
62244: CALL_OW 2
62248: ST_TO_ADDR
62249: GO 62212
62251: POP
62252: POP
// if not tmp then
62253: LD_VAR 0 5
62257: NOT
62258: IFFALSE 62262
// exit ;
62260: GO 62310
// if asc then
62262: LD_VAR 0 2
62266: IFFALSE 62290
// result := SortListByListAsc ( units , tmp ) else
62268: LD_ADDR_VAR 0 3
62272: PUSH
62273: LD_VAR 0 1
62277: PPUSH
62278: LD_VAR 0 5
62282: PPUSH
62283: CALL_OW 76
62287: ST_TO_ADDR
62288: GO 62310
// result := SortListByListDesc ( units , tmp ) ;
62290: LD_ADDR_VAR 0 3
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: LD_VAR 0 5
62304: PPUSH
62305: CALL_OW 77
62309: ST_TO_ADDR
// end ;
62310: LD_VAR 0 3
62314: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62315: LD_INT 0
62317: PPUSH
62318: PPUSH
// task := GetTaskList ( mech ) ;
62319: LD_ADDR_VAR 0 4
62323: PUSH
62324: LD_VAR 0 1
62328: PPUSH
62329: CALL_OW 437
62333: ST_TO_ADDR
// if not task then
62334: LD_VAR 0 4
62338: NOT
62339: IFFALSE 62343
// exit ;
62341: GO 62385
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62343: LD_ADDR_VAR 0 3
62347: PUSH
62348: LD_VAR 0 4
62352: PUSH
62353: LD_INT 1
62355: ARRAY
62356: PUSH
62357: LD_INT 1
62359: ARRAY
62360: PUSH
62361: LD_STRING r
62363: EQUAL
62364: PUSH
62365: LD_VAR 0 4
62369: PUSH
62370: LD_INT 1
62372: ARRAY
62373: PUSH
62374: LD_INT 4
62376: ARRAY
62377: PUSH
62378: LD_VAR 0 2
62382: EQUAL
62383: AND
62384: ST_TO_ADDR
// end ;
62385: LD_VAR 0 3
62389: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62390: LD_INT 0
62392: PPUSH
// SetDir ( unit , d ) ;
62393: LD_VAR 0 1
62397: PPUSH
62398: LD_VAR 0 4
62402: PPUSH
62403: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62407: LD_VAR 0 1
62411: PPUSH
62412: LD_VAR 0 2
62416: PPUSH
62417: LD_VAR 0 3
62421: PPUSH
62422: LD_VAR 0 5
62426: PPUSH
62427: CALL_OW 48
// end ;
62431: LD_VAR 0 6
62435: RET
// export function ToNaturalNumber ( number ) ; begin
62436: LD_INT 0
62438: PPUSH
// result := number div 1 ;
62439: LD_ADDR_VAR 0 2
62443: PUSH
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 1
62451: DIV
62452: ST_TO_ADDR
// if number < 0 then
62453: LD_VAR 0 1
62457: PUSH
62458: LD_INT 0
62460: LESS
62461: IFFALSE 62471
// result := 0 ;
62463: LD_ADDR_VAR 0 2
62467: PUSH
62468: LD_INT 0
62470: ST_TO_ADDR
// end ;
62471: LD_VAR 0 2
62475: RET
// export function SortByClass ( units , class ) ; var un ; begin
62476: LD_INT 0
62478: PPUSH
62479: PPUSH
// if not units or not class then
62480: LD_VAR 0 1
62484: NOT
62485: PUSH
62486: LD_VAR 0 2
62490: NOT
62491: OR
62492: IFFALSE 62496
// exit ;
62494: GO 62591
// result := [ ] ;
62496: LD_ADDR_VAR 0 3
62500: PUSH
62501: EMPTY
62502: ST_TO_ADDR
// for un in units do
62503: LD_ADDR_VAR 0 4
62507: PUSH
62508: LD_VAR 0 1
62512: PUSH
62513: FOR_IN
62514: IFFALSE 62589
// if GetClass ( un ) = class then
62516: LD_VAR 0 4
62520: PPUSH
62521: CALL_OW 257
62525: PUSH
62526: LD_VAR 0 2
62530: EQUAL
62531: IFFALSE 62558
// result := Insert ( result , 1 , un ) else
62533: LD_ADDR_VAR 0 3
62537: PUSH
62538: LD_VAR 0 3
62542: PPUSH
62543: LD_INT 1
62545: PPUSH
62546: LD_VAR 0 4
62550: PPUSH
62551: CALL_OW 2
62555: ST_TO_ADDR
62556: GO 62587
// result := Replace ( result , result + 1 , un ) ;
62558: LD_ADDR_VAR 0 3
62562: PUSH
62563: LD_VAR 0 3
62567: PPUSH
62568: LD_VAR 0 3
62572: PUSH
62573: LD_INT 1
62575: PLUS
62576: PPUSH
62577: LD_VAR 0 4
62581: PPUSH
62582: CALL_OW 1
62586: ST_TO_ADDR
62587: GO 62513
62589: POP
62590: POP
// end ;
62591: LD_VAR 0 3
62595: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62596: LD_INT 0
62598: PPUSH
62599: PPUSH
62600: PPUSH
62601: PPUSH
62602: PPUSH
62603: PPUSH
62604: PPUSH
// result := [ ] ;
62605: LD_ADDR_VAR 0 4
62609: PUSH
62610: EMPTY
62611: ST_TO_ADDR
// if x - r < 0 then
62612: LD_VAR 0 1
62616: PUSH
62617: LD_VAR 0 3
62621: MINUS
62622: PUSH
62623: LD_INT 0
62625: LESS
62626: IFFALSE 62638
// min_x := 0 else
62628: LD_ADDR_VAR 0 8
62632: PUSH
62633: LD_INT 0
62635: ST_TO_ADDR
62636: GO 62654
// min_x := x - r ;
62638: LD_ADDR_VAR 0 8
62642: PUSH
62643: LD_VAR 0 1
62647: PUSH
62648: LD_VAR 0 3
62652: MINUS
62653: ST_TO_ADDR
// if y - r < 0 then
62654: LD_VAR 0 2
62658: PUSH
62659: LD_VAR 0 3
62663: MINUS
62664: PUSH
62665: LD_INT 0
62667: LESS
62668: IFFALSE 62680
// min_y := 0 else
62670: LD_ADDR_VAR 0 7
62674: PUSH
62675: LD_INT 0
62677: ST_TO_ADDR
62678: GO 62696
// min_y := y - r ;
62680: LD_ADDR_VAR 0 7
62684: PUSH
62685: LD_VAR 0 2
62689: PUSH
62690: LD_VAR 0 3
62694: MINUS
62695: ST_TO_ADDR
// max_x := x + r ;
62696: LD_ADDR_VAR 0 9
62700: PUSH
62701: LD_VAR 0 1
62705: PUSH
62706: LD_VAR 0 3
62710: PLUS
62711: ST_TO_ADDR
// max_y := y + r ;
62712: LD_ADDR_VAR 0 10
62716: PUSH
62717: LD_VAR 0 2
62721: PUSH
62722: LD_VAR 0 3
62726: PLUS
62727: ST_TO_ADDR
// for _x = min_x to max_x do
62728: LD_ADDR_VAR 0 5
62732: PUSH
62733: DOUBLE
62734: LD_VAR 0 8
62738: DEC
62739: ST_TO_ADDR
62740: LD_VAR 0 9
62744: PUSH
62745: FOR_TO
62746: IFFALSE 62847
// for _y = min_y to max_y do
62748: LD_ADDR_VAR 0 6
62752: PUSH
62753: DOUBLE
62754: LD_VAR 0 7
62758: DEC
62759: ST_TO_ADDR
62760: LD_VAR 0 10
62764: PUSH
62765: FOR_TO
62766: IFFALSE 62843
// begin if not ValidHex ( _x , _y ) then
62768: LD_VAR 0 5
62772: PPUSH
62773: LD_VAR 0 6
62777: PPUSH
62778: CALL_OW 488
62782: NOT
62783: IFFALSE 62787
// continue ;
62785: GO 62765
// if GetResourceTypeXY ( _x , _y ) then
62787: LD_VAR 0 5
62791: PPUSH
62792: LD_VAR 0 6
62796: PPUSH
62797: CALL_OW 283
62801: IFFALSE 62841
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62803: LD_ADDR_VAR 0 4
62807: PUSH
62808: LD_VAR 0 4
62812: PPUSH
62813: LD_VAR 0 4
62817: PUSH
62818: LD_INT 1
62820: PLUS
62821: PPUSH
62822: LD_VAR 0 5
62826: PUSH
62827: LD_VAR 0 6
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PPUSH
62836: CALL_OW 1
62840: ST_TO_ADDR
// end ;
62841: GO 62765
62843: POP
62844: POP
62845: GO 62745
62847: POP
62848: POP
// end ;
62849: LD_VAR 0 4
62853: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62854: LD_INT 0
62856: PPUSH
62857: PPUSH
62858: PPUSH
62859: PPUSH
62860: PPUSH
62861: PPUSH
62862: PPUSH
62863: PPUSH
// if not units then
62864: LD_VAR 0 1
62868: NOT
62869: IFFALSE 62873
// exit ;
62871: GO 63397
// result := UnitFilter ( units , [ f_ok ] ) ;
62873: LD_ADDR_VAR 0 3
62877: PUSH
62878: LD_VAR 0 1
62882: PPUSH
62883: LD_INT 50
62885: PUSH
62886: EMPTY
62887: LIST
62888: PPUSH
62889: CALL_OW 72
62893: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62894: LD_ADDR_VAR 0 8
62898: PUSH
62899: LD_VAR 0 1
62903: PUSH
62904: LD_INT 1
62906: ARRAY
62907: PPUSH
62908: CALL_OW 255
62912: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62913: LD_ADDR_VAR 0 10
62917: PUSH
62918: LD_INT 29
62920: PUSH
62921: LD_INT 91
62923: PUSH
62924: LD_INT 49
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: ST_TO_ADDR
// if not result then
62932: LD_VAR 0 3
62936: NOT
62937: IFFALSE 62941
// exit ;
62939: GO 63397
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62941: LD_ADDR_VAR 0 5
62945: PUSH
62946: LD_INT 81
62948: PUSH
62949: LD_VAR 0 8
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PPUSH
62958: CALL_OW 69
62962: ST_TO_ADDR
// for i in result do
62963: LD_ADDR_VAR 0 4
62967: PUSH
62968: LD_VAR 0 3
62972: PUSH
62973: FOR_IN
62974: IFFALSE 63395
// begin tag := GetTag ( i ) + 1 ;
62976: LD_ADDR_VAR 0 9
62980: PUSH
62981: LD_VAR 0 4
62985: PPUSH
62986: CALL_OW 110
62990: PUSH
62991: LD_INT 1
62993: PLUS
62994: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62995: LD_ADDR_VAR 0 7
62999: PUSH
63000: LD_VAR 0 4
63004: PPUSH
63005: CALL_OW 250
63009: PPUSH
63010: LD_VAR 0 4
63014: PPUSH
63015: CALL_OW 251
63019: PPUSH
63020: LD_INT 6
63022: PPUSH
63023: CALL 62596 0 3
63027: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63028: LD_VAR 0 4
63032: PPUSH
63033: CALL_OW 247
63037: PUSH
63038: LD_INT 2
63040: EQUAL
63041: PUSH
63042: LD_VAR 0 7
63046: AND
63047: PUSH
63048: LD_VAR 0 4
63052: PPUSH
63053: CALL_OW 264
63057: PUSH
63058: LD_VAR 0 10
63062: IN
63063: NOT
63064: AND
63065: IFFALSE 63104
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63067: LD_VAR 0 4
63071: PPUSH
63072: LD_VAR 0 7
63076: PUSH
63077: LD_INT 1
63079: ARRAY
63080: PUSH
63081: LD_INT 1
63083: ARRAY
63084: PPUSH
63085: LD_VAR 0 7
63089: PUSH
63090: LD_INT 1
63092: ARRAY
63093: PUSH
63094: LD_INT 2
63096: ARRAY
63097: PPUSH
63098: CALL_OW 116
63102: GO 63393
// if path > tag then
63104: LD_VAR 0 2
63108: PUSH
63109: LD_VAR 0 9
63113: GREATER
63114: IFFALSE 63322
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63116: LD_ADDR_VAR 0 6
63120: PUSH
63121: LD_VAR 0 5
63125: PPUSH
63126: LD_INT 91
63128: PUSH
63129: LD_VAR 0 4
63133: PUSH
63134: LD_INT 8
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: PPUSH
63142: CALL_OW 72
63146: ST_TO_ADDR
// if nearEnemy then
63147: LD_VAR 0 6
63151: IFFALSE 63220
// begin if GetWeapon ( i ) = ru_time_lapser then
63153: LD_VAR 0 4
63157: PPUSH
63158: CALL_OW 264
63162: PUSH
63163: LD_INT 49
63165: EQUAL
63166: IFFALSE 63194
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63168: LD_VAR 0 4
63172: PPUSH
63173: LD_VAR 0 6
63177: PPUSH
63178: LD_VAR 0 4
63182: PPUSH
63183: CALL_OW 74
63187: PPUSH
63188: CALL_OW 112
63192: GO 63218
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63194: LD_VAR 0 4
63198: PPUSH
63199: LD_VAR 0 6
63203: PPUSH
63204: LD_VAR 0 4
63208: PPUSH
63209: CALL_OW 74
63213: PPUSH
63214: CALL 64322 0 2
// end else
63218: GO 63320
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63220: LD_VAR 0 4
63224: PPUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_VAR 0 9
63234: ARRAY
63235: PUSH
63236: LD_INT 1
63238: ARRAY
63239: PPUSH
63240: LD_VAR 0 2
63244: PUSH
63245: LD_VAR 0 9
63249: ARRAY
63250: PUSH
63251: LD_INT 2
63253: ARRAY
63254: PPUSH
63255: CALL_OW 297
63259: PUSH
63260: LD_INT 6
63262: GREATER
63263: IFFALSE 63306
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63265: LD_VAR 0 4
63269: PPUSH
63270: LD_VAR 0 2
63274: PUSH
63275: LD_VAR 0 9
63279: ARRAY
63280: PUSH
63281: LD_INT 1
63283: ARRAY
63284: PPUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_VAR 0 9
63294: ARRAY
63295: PUSH
63296: LD_INT 2
63298: ARRAY
63299: PPUSH
63300: CALL_OW 114
63304: GO 63320
// SetTag ( i , tag ) ;
63306: LD_VAR 0 4
63310: PPUSH
63311: LD_VAR 0 9
63315: PPUSH
63316: CALL_OW 109
// end else
63320: GO 63393
// if enemy then
63322: LD_VAR 0 5
63326: IFFALSE 63393
// begin if GetWeapon ( i ) = ru_time_lapser then
63328: LD_VAR 0 4
63332: PPUSH
63333: CALL_OW 264
63337: PUSH
63338: LD_INT 49
63340: EQUAL
63341: IFFALSE 63369
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63343: LD_VAR 0 4
63347: PPUSH
63348: LD_VAR 0 5
63352: PPUSH
63353: LD_VAR 0 4
63357: PPUSH
63358: CALL_OW 74
63362: PPUSH
63363: CALL_OW 112
63367: GO 63393
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63369: LD_VAR 0 4
63373: PPUSH
63374: LD_VAR 0 5
63378: PPUSH
63379: LD_VAR 0 4
63383: PPUSH
63384: CALL_OW 74
63388: PPUSH
63389: CALL 64322 0 2
// end ; end ;
63393: GO 62973
63395: POP
63396: POP
// end ;
63397: LD_VAR 0 3
63401: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63402: LD_INT 0
63404: PPUSH
63405: PPUSH
63406: PPUSH
// if not unit or IsInUnit ( unit ) then
63407: LD_VAR 0 1
63411: NOT
63412: PUSH
63413: LD_VAR 0 1
63417: PPUSH
63418: CALL_OW 310
63422: OR
63423: IFFALSE 63427
// exit ;
63425: GO 63518
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63427: LD_ADDR_VAR 0 4
63431: PUSH
63432: LD_VAR 0 1
63436: PPUSH
63437: CALL_OW 250
63441: PPUSH
63442: LD_VAR 0 2
63446: PPUSH
63447: LD_INT 1
63449: PPUSH
63450: CALL_OW 272
63454: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63455: LD_ADDR_VAR 0 5
63459: PUSH
63460: LD_VAR 0 1
63464: PPUSH
63465: CALL_OW 251
63469: PPUSH
63470: LD_VAR 0 2
63474: PPUSH
63475: LD_INT 1
63477: PPUSH
63478: CALL_OW 273
63482: ST_TO_ADDR
// if ValidHex ( x , y ) then
63483: LD_VAR 0 4
63487: PPUSH
63488: LD_VAR 0 5
63492: PPUSH
63493: CALL_OW 488
63497: IFFALSE 63518
// ComTurnXY ( unit , x , y ) ;
63499: LD_VAR 0 1
63503: PPUSH
63504: LD_VAR 0 4
63508: PPUSH
63509: LD_VAR 0 5
63513: PPUSH
63514: CALL_OW 118
// end ;
63518: LD_VAR 0 3
63522: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63523: LD_INT 0
63525: PPUSH
63526: PPUSH
// result := false ;
63527: LD_ADDR_VAR 0 3
63531: PUSH
63532: LD_INT 0
63534: ST_TO_ADDR
// if not units then
63535: LD_VAR 0 2
63539: NOT
63540: IFFALSE 63544
// exit ;
63542: GO 63589
// for i in units do
63544: LD_ADDR_VAR 0 4
63548: PUSH
63549: LD_VAR 0 2
63553: PUSH
63554: FOR_IN
63555: IFFALSE 63587
// if See ( side , i ) then
63557: LD_VAR 0 1
63561: PPUSH
63562: LD_VAR 0 4
63566: PPUSH
63567: CALL_OW 292
63571: IFFALSE 63585
// begin result := true ;
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: LD_INT 1
63580: ST_TO_ADDR
// exit ;
63581: POP
63582: POP
63583: GO 63589
// end ;
63585: GO 63554
63587: POP
63588: POP
// end ;
63589: LD_VAR 0 3
63593: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63594: LD_INT 0
63596: PPUSH
63597: PPUSH
63598: PPUSH
63599: PPUSH
// if not unit or not points then
63600: LD_VAR 0 1
63604: NOT
63605: PUSH
63606: LD_VAR 0 2
63610: NOT
63611: OR
63612: IFFALSE 63616
// exit ;
63614: GO 63706
// dist := 99999 ;
63616: LD_ADDR_VAR 0 5
63620: PUSH
63621: LD_INT 99999
63623: ST_TO_ADDR
// for i in points do
63624: LD_ADDR_VAR 0 4
63628: PUSH
63629: LD_VAR 0 2
63633: PUSH
63634: FOR_IN
63635: IFFALSE 63704
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63637: LD_ADDR_VAR 0 6
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: LD_VAR 0 4
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PPUSH
63656: LD_VAR 0 4
63660: PUSH
63661: LD_INT 2
63663: ARRAY
63664: PPUSH
63665: CALL_OW 297
63669: ST_TO_ADDR
// if tmpDist < dist then
63670: LD_VAR 0 6
63674: PUSH
63675: LD_VAR 0 5
63679: LESS
63680: IFFALSE 63702
// begin result := i ;
63682: LD_ADDR_VAR 0 3
63686: PUSH
63687: LD_VAR 0 4
63691: ST_TO_ADDR
// dist := tmpDist ;
63692: LD_ADDR_VAR 0 5
63696: PUSH
63697: LD_VAR 0 6
63701: ST_TO_ADDR
// end ; end ;
63702: GO 63634
63704: POP
63705: POP
// end ;
63706: LD_VAR 0 3
63710: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63711: LD_INT 0
63713: PPUSH
// uc_side := side ;
63714: LD_ADDR_OWVAR 20
63718: PUSH
63719: LD_VAR 0 1
63723: ST_TO_ADDR
// uc_nation := 3 ;
63724: LD_ADDR_OWVAR 21
63728: PUSH
63729: LD_INT 3
63731: ST_TO_ADDR
// vc_chassis := 25 ;
63732: LD_ADDR_OWVAR 37
63736: PUSH
63737: LD_INT 25
63739: ST_TO_ADDR
// vc_engine := engine_siberite ;
63740: LD_ADDR_OWVAR 39
63744: PUSH
63745: LD_INT 3
63747: ST_TO_ADDR
// vc_control := control_computer ;
63748: LD_ADDR_OWVAR 38
63752: PUSH
63753: LD_INT 3
63755: ST_TO_ADDR
// vc_weapon := 59 ;
63756: LD_ADDR_OWVAR 40
63760: PUSH
63761: LD_INT 59
63763: ST_TO_ADDR
// result := CreateVehicle ;
63764: LD_ADDR_VAR 0 5
63768: PUSH
63769: CALL_OW 45
63773: ST_TO_ADDR
// SetDir ( result , d ) ;
63774: LD_VAR 0 5
63778: PPUSH
63779: LD_VAR 0 4
63783: PPUSH
63784: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63788: LD_VAR 0 5
63792: PPUSH
63793: LD_VAR 0 2
63797: PPUSH
63798: LD_VAR 0 3
63802: PPUSH
63803: LD_INT 0
63805: PPUSH
63806: CALL_OW 48
// end ;
63810: LD_VAR 0 5
63814: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63815: LD_INT 0
63817: PPUSH
63818: PPUSH
63819: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63820: LD_ADDR_VAR 0 2
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63843: LD_VAR 0 1
63847: NOT
63848: PUSH
63849: LD_VAR 0 1
63853: PPUSH
63854: CALL_OW 264
63858: PUSH
63859: LD_INT 12
63861: PUSH
63862: LD_INT 51
63864: PUSH
63865: LD_INT 32
63867: PUSH
63868: LD_INT 89
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: IN
63877: NOT
63878: OR
63879: IFFALSE 63883
// exit ;
63881: GO 63981
// for i := 1 to 3 do
63883: LD_ADDR_VAR 0 3
63887: PUSH
63888: DOUBLE
63889: LD_INT 1
63891: DEC
63892: ST_TO_ADDR
63893: LD_INT 3
63895: PUSH
63896: FOR_TO
63897: IFFALSE 63979
// begin tmp := GetCargo ( cargo , i ) ;
63899: LD_ADDR_VAR 0 4
63903: PUSH
63904: LD_VAR 0 1
63908: PPUSH
63909: LD_VAR 0 3
63913: PPUSH
63914: CALL_OW 289
63918: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63919: LD_ADDR_VAR 0 2
63923: PUSH
63924: LD_VAR 0 2
63928: PPUSH
63929: LD_VAR 0 3
63933: PPUSH
63934: LD_VAR 0 4
63938: PPUSH
63939: CALL_OW 1
63943: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63944: LD_ADDR_VAR 0 2
63948: PUSH
63949: LD_VAR 0 2
63953: PPUSH
63954: LD_INT 4
63956: PPUSH
63957: LD_VAR 0 2
63961: PUSH
63962: LD_INT 4
63964: ARRAY
63965: PUSH
63966: LD_VAR 0 4
63970: PLUS
63971: PPUSH
63972: CALL_OW 1
63976: ST_TO_ADDR
// end ;
63977: GO 63896
63979: POP
63980: POP
// end ;
63981: LD_VAR 0 2
63985: RET
// export function Length ( array ) ; begin
63986: LD_INT 0
63988: PPUSH
// result := array + 0 ;
63989: LD_ADDR_VAR 0 2
63993: PUSH
63994: LD_VAR 0 1
63998: PUSH
63999: LD_INT 0
64001: PLUS
64002: ST_TO_ADDR
// end ;
64003: LD_VAR 0 2
64007: RET
// export function PrepareArray ( array ) ; begin
64008: LD_INT 0
64010: PPUSH
// result := array diff 0 ;
64011: LD_ADDR_VAR 0 2
64015: PUSH
64016: LD_VAR 0 1
64020: PUSH
64021: LD_INT 0
64023: DIFF
64024: ST_TO_ADDR
// if not result [ 1 ] then
64025: LD_VAR 0 2
64029: PUSH
64030: LD_INT 1
64032: ARRAY
64033: NOT
64034: IFFALSE 64054
// result := Delete ( result , 1 ) ;
64036: LD_ADDR_VAR 0 2
64040: PUSH
64041: LD_VAR 0 2
64045: PPUSH
64046: LD_INT 1
64048: PPUSH
64049: CALL_OW 3
64053: ST_TO_ADDR
// end ;
64054: LD_VAR 0 2
64058: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64059: LD_INT 0
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
// sibRocketRange := 25 ;
64065: LD_ADDR_VAR 0 6
64069: PUSH
64070: LD_INT 25
64072: ST_TO_ADDR
// result := false ;
64073: LD_ADDR_VAR 0 4
64077: PUSH
64078: LD_INT 0
64080: ST_TO_ADDR
// for i := 0 to 5 do
64081: LD_ADDR_VAR 0 5
64085: PUSH
64086: DOUBLE
64087: LD_INT 0
64089: DEC
64090: ST_TO_ADDR
64091: LD_INT 5
64093: PUSH
64094: FOR_TO
64095: IFFALSE 64162
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64097: LD_VAR 0 1
64101: PPUSH
64102: LD_VAR 0 5
64106: PPUSH
64107: LD_VAR 0 6
64111: PPUSH
64112: CALL_OW 272
64116: PPUSH
64117: LD_VAR 0 2
64121: PPUSH
64122: LD_VAR 0 5
64126: PPUSH
64127: LD_VAR 0 6
64131: PPUSH
64132: CALL_OW 273
64136: PPUSH
64137: LD_VAR 0 3
64141: PPUSH
64142: CALL_OW 309
64146: IFFALSE 64160
// begin result := true ;
64148: LD_ADDR_VAR 0 4
64152: PUSH
64153: LD_INT 1
64155: ST_TO_ADDR
// exit ;
64156: POP
64157: POP
64158: GO 64164
// end ;
64160: GO 64094
64162: POP
64163: POP
// end ;
64164: LD_VAR 0 4
64168: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64169: LD_INT 0
64171: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64172: LD_VAR 0 1
64176: PPUSH
64177: LD_VAR 0 2
64181: PPUSH
64182: LD_INT 0
64184: PPUSH
64185: LD_INT 0
64187: PPUSH
64188: LD_INT 1
64190: PPUSH
64191: LD_INT 0
64193: PPUSH
64194: CALL_OW 587
// end ;
64198: LD_VAR 0 3
64202: RET
// export function CenterOnNow ( unit ) ; begin
64203: LD_INT 0
64205: PPUSH
// result := IsInUnit ( unit ) ;
64206: LD_ADDR_VAR 0 2
64210: PUSH
64211: LD_VAR 0 1
64215: PPUSH
64216: CALL_OW 310
64220: ST_TO_ADDR
// if not result then
64221: LD_VAR 0 2
64225: NOT
64226: IFFALSE 64238
// result := unit ;
64228: LD_ADDR_VAR 0 2
64232: PUSH
64233: LD_VAR 0 1
64237: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64238: LD_VAR 0 1
64242: PPUSH
64243: CALL_OW 87
// end ;
64247: LD_VAR 0 2
64251: RET
// export function ComMoveHex ( unit , hex ) ; begin
64252: LD_INT 0
64254: PPUSH
// if not hex then
64255: LD_VAR 0 2
64259: NOT
64260: IFFALSE 64264
// exit ;
64262: GO 64317
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64264: LD_VAR 0 2
64268: PUSH
64269: LD_INT 1
64271: ARRAY
64272: PPUSH
64273: LD_VAR 0 2
64277: PUSH
64278: LD_INT 2
64280: ARRAY
64281: PPUSH
64282: CALL_OW 428
64286: IFFALSE 64290
// exit ;
64288: GO 64317
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64290: LD_VAR 0 1
64294: PPUSH
64295: LD_VAR 0 2
64299: PUSH
64300: LD_INT 1
64302: ARRAY
64303: PPUSH
64304: LD_VAR 0 2
64308: PUSH
64309: LD_INT 2
64311: ARRAY
64312: PPUSH
64313: CALL_OW 111
// end ;
64317: LD_VAR 0 3
64321: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64322: LD_INT 0
64324: PPUSH
64325: PPUSH
64326: PPUSH
// if not unit or not enemy then
64327: LD_VAR 0 1
64331: NOT
64332: PUSH
64333: LD_VAR 0 2
64337: NOT
64338: OR
64339: IFFALSE 64343
// exit ;
64341: GO 64467
// x := GetX ( enemy ) ;
64343: LD_ADDR_VAR 0 4
64347: PUSH
64348: LD_VAR 0 2
64352: PPUSH
64353: CALL_OW 250
64357: ST_TO_ADDR
// y := GetY ( enemy ) ;
64358: LD_ADDR_VAR 0 5
64362: PUSH
64363: LD_VAR 0 2
64367: PPUSH
64368: CALL_OW 251
64372: ST_TO_ADDR
// if ValidHex ( x , y ) then
64373: LD_VAR 0 4
64377: PPUSH
64378: LD_VAR 0 5
64382: PPUSH
64383: CALL_OW 488
64387: IFFALSE 64467
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
64389: LD_VAR 0 2
64393: PPUSH
64394: CALL_OW 247
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: IN
64409: PUSH
64410: LD_VAR 0 1
64414: PPUSH
64415: CALL_OW 255
64419: PPUSH
64420: LD_VAR 0 2
64424: PPUSH
64425: CALL_OW 292
64429: AND
64430: IFFALSE 64448
// ComAttackUnit ( unit , enemy ) else
64432: LD_VAR 0 1
64436: PPUSH
64437: LD_VAR 0 2
64441: PPUSH
64442: CALL_OW 115
64446: GO 64467
// ComAgressiveMove ( unit , x , y ) ;
64448: LD_VAR 0 1
64452: PPUSH
64453: LD_VAR 0 4
64457: PPUSH
64458: LD_VAR 0 5
64462: PPUSH
64463: CALL_OW 114
// end ; end_of_file
64467: LD_VAR 0 3
64471: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64472: LD_VAR 0 1
64476: PPUSH
64477: LD_VAR 0 2
64481: PPUSH
64482: LD_VAR 0 3
64486: PPUSH
64487: LD_VAR 0 4
64491: PPUSH
64492: LD_VAR 0 5
64496: PPUSH
64497: LD_VAR 0 6
64501: PPUSH
64502: CALL 2010 0 6
// end ;
64506: PPOPN 6
64508: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64509: LD_INT 0
64511: PPUSH
// begin if not units then
64512: LD_VAR 0 1
64516: NOT
64517: IFFALSE 64521
// exit ;
64519: GO 64521
// end ;
64521: PPOPN 7
64523: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64524: CALL 1914 0 0
// end ;
64528: PPOPN 1
64530: END
