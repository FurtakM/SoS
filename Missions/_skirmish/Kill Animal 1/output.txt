// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// InitGlobalVariables ;
  18: CALL 21984 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := 0 ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 4
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: EMPTY
 454: LIST
 455: ST_TO_ADDR
// InitHc_All ( ) ;
 456: CALL_OW 584
// for i := 1 to numbers - 2 do
 460: LD_ADDR_VAR 0 5
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_VAR 0 3
 474: PUSH
 475: LD_INT 2
 477: MINUS
 478: PUSH
 479: FOR_TO
 480: IFFALSE 621
// begin if numbers [ i ] = 0 then
 482: LD_VAR 0 3
 486: PUSH
 487: LD_VAR 0 5
 491: ARRAY
 492: PUSH
 493: LD_INT 0
 495: EQUAL
 496: IFFALSE 500
// continue ;
 498: GO 479
// hc_class := classes [ i ] ;
 500: LD_ADDR_OWVAR 28
 504: PUSH
 505: LD_VAR 0 7
 509: PUSH
 510: LD_VAR 0 5
 514: ARRAY
 515: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 516: LD_ADDR_OWVAR 29
 520: PUSH
 521: LD_INT 8
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: CALL_OW 12
 531: PUSH
 532: LD_INT 8
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 547: LD_ADDR_OWVAR 35
 551: PUSH
 552: LD_INT 5
 554: NEG
 555: PPUSH
 556: LD_INT 5
 558: PPUSH
 559: CALL_OW 12
 563: PUSH
 564: LD_OWVAR 67
 568: PUSH
 569: LD_INT 5
 571: MUL
 572: PLUS
 573: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 574: LD_ADDR_VAR 0 6
 578: PUSH
 579: DOUBLE
 580: LD_INT 1
 582: DEC
 583: ST_TO_ADDR
 584: LD_VAR 0 3
 588: PUSH
 589: LD_VAR 0 5
 593: ARRAY
 594: PUSH
 595: FOR_TO
 596: IFFALSE 617
// PlaceUnitArea ( CreateHuman , area , false ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_VAR 0 1
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 49
 615: GO 595
 617: POP
 618: POP
// end ;
 619: GO 479
 621: POP
 622: POP
// if not waterArea then
 623: LD_VAR 0 2
 627: NOT
 628: IFFALSE 632
// exit ;
 630: GO 712
// hc_class := waterClass [ 1 ] ;
 632: LD_ADDR_OWVAR 28
 636: PUSH
 637: LD_VAR 0 8
 641: PUSH
 642: LD_INT 1
 644: ARRAY
 645: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 646: LD_ADDR_OWVAR 29
 650: PUSH
 651: LD_INT 10
 653: PUSH
 654: LD_INT 10
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: ST_TO_ADDR
// hc_agressivity := 0 ;
 661: LD_ADDR_OWVAR 35
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 669: LD_ADDR_VAR 0 6
 673: PUSH
 674: DOUBLE
 675: LD_INT 1
 677: DEC
 678: ST_TO_ADDR
 679: LD_VAR 0 3
 683: PUSH
 684: LD_INT 7
 686: ARRAY
 687: PUSH
 688: FOR_TO
 689: IFFALSE 710
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 691: CALL_OW 44
 695: PPUSH
 696: LD_VAR 0 2
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
 708: GO 688
 710: POP
 711: POP
// end ; end_of_file
 712: LD_VAR 0 4
 716: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 717: LD_INT 22
 719: PUSH
 720: LD_INT 0
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PUSH
 727: LD_INT 25
 729: PUSH
 730: LD_INT 15
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 851
 747: GO 749
 749: DISABLE
 750: LD_INT 0
 752: PPUSH
// begin enable ;
 753: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 25
 771: PUSH
 772: LD_INT 15
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: PUSH
 788: FOR_IN
 789: IFFALSE 849
// if GetLives ( i ) < 1000 then
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 256
 800: PUSH
 801: LD_INT 1000
 803: LESS
 804: IFFALSE 847
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_INT 3
 813: PUSH
 814: LD_INT 22
 816: PUSH
 817: LD_INT 0
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PPUSH
 828: CALL_OW 69
 832: PPUSH
 833: LD_VAR 0 1
 837: PPUSH
 838: CALL_OW 74
 842: PPUSH
 843: CALL_OW 115
 847: GO 788
 849: POP
 850: POP
// end ;
 851: PPOPN 1
 853: END
// every 3 do var i , enemy , x , y , d ;
 854: GO 856
 856: DISABLE
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
 861: PPUSH
 862: PPUSH
 863: PPUSH
// begin enable ;
 864: ENABLE
// for i := 2 to huntersAmount do
 865: LD_ADDR_VAR 0 1
 869: PUSH
 870: DOUBLE
 871: LD_INT 2
 873: DEC
 874: ST_TO_ADDR
 875: LD_EXP 3
 879: PUSH
 880: FOR_TO
 881: IFFALSE 1220
// begin if not HasTask ( hunters [ i ] ) then
 883: LD_EXP 6
 887: PUSH
 888: LD_VAR 0 1
 892: ARRAY
 893: PPUSH
 894: CALL_OW 314
 898: NOT
 899: IFFALSE 1218
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_INT 22
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PPUSH
 921: LD_EXP 6
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: CALL_OW 74
 936: ST_TO_ADDR
// if not enemy then
 937: LD_VAR 0 2
 941: NOT
 942: IFFALSE 946
// continue ;
 944: GO 880
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 946: LD_EXP 6
 950: PUSH
 951: LD_VAR 0 1
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: CALL_OW 296
 966: PUSH
 967: LD_INT 17
 969: LESS
 970: IFFALSE 1073
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 972: LD_EXP 6
 976: PUSH
 977: LD_VAR 0 1
 981: ARRAY
 982: PPUSH
 983: CALL_OW 257
 987: PUSH
 988: LD_INT 11
 990: EQUAL
 991: IFFALSE 1051
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 993: LD_VAR 0 2
 997: PPUSH
 998: CALL_OW 257
1002: PUSH
1003: LD_INT 19
1005: PUSH
1006: LD_INT 20
1008: PUSH
1009: LD_INT 13
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: IN
1017: IFFALSE 1036
// ComCarabine ( hunters [ i ] ) else
1019: LD_EXP 6
1023: PUSH
1024: LD_VAR 0 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 162
1034: GO 1051
// ComSabre ( hunters [ i ] ) ;
1036: LD_EXP 6
1040: PUSH
1041: LD_VAR 0 1
1045: ARRAY
1046: PPUSH
1047: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1051: LD_EXP 6
1055: PUSH
1056: LD_VAR 0 1
1060: ARRAY
1061: PPUSH
1062: LD_VAR 0 2
1066: PPUSH
1067: CALL_OW 115
// end else
1071: GO 1218
// begin d := rand ( 0 , 5 ) ;
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_INT 0
1080: PPUSH
1081: LD_INT 5
1083: PPUSH
1084: CALL_OW 12
1088: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1089: LD_ADDR_VAR 0 3
1093: PUSH
1094: LD_EXP 6
1098: PUSH
1099: LD_VAR 0 1
1103: ARRAY
1104: PPUSH
1105: CALL_OW 250
1109: PPUSH
1110: LD_VAR 0 5
1114: PPUSH
1115: LD_INT 8
1117: PPUSH
1118: CALL_OW 272
1122: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1123: LD_ADDR_VAR 0 4
1127: PUSH
1128: LD_EXP 6
1132: PUSH
1133: LD_VAR 0 1
1137: ARRAY
1138: PPUSH
1139: CALL_OW 251
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 8
1151: PPUSH
1152: CALL_OW 273
1156: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1157: LD_VAR 0 3
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 488
1171: PUSH
1172: LD_VAR 0 3
1176: PPUSH
1177: LD_VAR 0 4
1181: PPUSH
1182: CALL_OW 428
1186: PUSH
1187: LD_INT 0
1189: EQUAL
1190: AND
1191: IFFALSE 1218
// ComMoveXY ( hunters [ i ] , x , y ) ;
1193: LD_EXP 6
1197: PUSH
1198: LD_VAR 0 1
1202: ARRAY
1203: PPUSH
1204: LD_VAR 0 3
1208: PPUSH
1209: LD_VAR 0 4
1213: PPUSH
1214: CALL_OW 111
// end ; end ; end ;
1218: GO 880
1220: POP
1221: POP
// end ; end_of_file
1222: PPOPN 5
1224: END
// on UnitGoesToRed ( un ) do var i ;
1225: LD_INT 0
1227: PPUSH
// begin if GetSide ( un ) = 1 then
1228: LD_VAR 0 1
1232: PPUSH
1233: CALL_OW 255
1237: PUSH
1238: LD_INT 1
1240: EQUAL
1241: IFFALSE 1250
// YouLost ( hunt2 ) ;
1243: LD_STRING hunt2
1245: PPUSH
1246: CALL_OW 104
// if GetSide ( un ) > 1 then
1250: LD_VAR 0 1
1254: PPUSH
1255: CALL_OW 255
1259: PUSH
1260: LD_INT 1
1262: GREATER
1263: IFFALSE 1316
// begin for i := 1 to 6 do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: DOUBLE
1271: LD_INT 1
1273: DEC
1274: ST_TO_ADDR
1275: LD_INT 6
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1302
// begin wait ( 0 0$1 ) ;
1281: LD_INT 35
1283: PPUSH
1284: CALL_OW 67
// SetLives ( un , 249 ) ;
1288: LD_VAR 0 1
1292: PPUSH
1293: LD_INT 249
1295: PPUSH
1296: CALL_OW 234
// end ;
1300: GO 1278
1302: POP
1303: POP
// SetLives ( un , 1000 ) ;
1304: LD_VAR 0 1
1308: PPUSH
1309: LD_INT 1000
1311: PPUSH
1312: CALL_OW 234
// end ; end ;
1316: PPOPN 2
1318: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1319: LD_VAR 0 1
1323: PUSH
1324: LD_INT 1
1326: EQUAL
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: GREATER
1336: AND
1337: IFFALSE 1346
// YouLost ( hunt1 ) ;
1339: LD_STRING hunt1
1341: PPUSH
1342: CALL_OW 104
// end ;
1346: PPOPN 2
1348: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1349: LD_INT 0
1351: PPUSH
// begin point := 0 ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: LD_INT 0
1359: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1360: LD_VAR 0 1
1364: PPUSH
1365: CALL_OW 257
1369: PUSH
1370: LD_INT 20
1372: DOUBLE
1373: EQUAL
1374: IFTRUE 1378
1376: GO 1389
1378: POP
// point := 10 ; class_horse :
1379: LD_ADDR_VAR 0 4
1383: PUSH
1384: LD_INT 10
1386: ST_TO_ADDR
1387: GO 1523
1389: LD_INT 21
1391: DOUBLE
1392: EQUAL
1393: IFTRUE 1397
1395: GO 1408
1397: POP
// point := 10 ; class_baggie :
1398: LD_ADDR_VAR 0 4
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
1406: GO 1523
1408: LD_INT 13
1410: DOUBLE
1411: EQUAL
1412: IFTRUE 1416
1414: GO 1427
1416: POP
// point := 5 ; class_phororhacos :
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: LD_INT 5
1424: ST_TO_ADDR
1425: GO 1523
1427: LD_INT 18
1429: DOUBLE
1430: EQUAL
1431: IFTRUE 1435
1433: GO 1446
1435: POP
// point := 10 ; class_tiger :
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 10
1443: ST_TO_ADDR
1444: GO 1523
1446: LD_INT 14
1448: DOUBLE
1449: EQUAL
1450: IFTRUE 1454
1452: GO 1465
1454: POP
// point := 20 ; class_apeman :
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 20
1462: ST_TO_ADDR
1463: GO 1523
1465: LD_INT 12
1467: DOUBLE
1468: EQUAL
1469: IFTRUE 1473
1471: GO 1484
1473: POP
// point := 30 ; class_apeman_soldier :
1474: LD_ADDR_VAR 0 4
1478: PUSH
1479: LD_INT 30
1481: ST_TO_ADDR
1482: GO 1523
1484: LD_INT 15
1486: DOUBLE
1487: EQUAL
1488: IFTRUE 1492
1490: GO 1503
1492: POP
// point := 50 ; class_frog :
1493: LD_ADDR_VAR 0 4
1497: PUSH
1498: LD_INT 50
1500: ST_TO_ADDR
1501: GO 1523
1503: LD_INT 19
1505: DOUBLE
1506: EQUAL
1507: IFTRUE 1511
1509: GO 1522
1511: POP
// point := 10 ; end ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 10
1519: ST_TO_ADDR
1520: GO 1523
1522: POP
// if point then
1523: LD_VAR 0 4
1527: IFFALSE 1566
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1529: LD_ADDR_EXP 5
1533: PUSH
1534: LD_EXP 5
1538: PPUSH
1539: LD_VAR 0 2
1543: PPUSH
1544: LD_EXP 5
1548: PUSH
1549: LD_VAR 0 2
1553: ARRAY
1554: PUSH
1555: LD_VAR 0 4
1559: PLUS
1560: PPUSH
1561: CALL_OW 1
1565: ST_TO_ADDR
// end ;
1566: PPOPN 4
1568: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1569: LD_INT 22
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 69
1583: PUSH
1584: LD_INT 10
1586: LESS
1587: IFFALSE 1689
1589: GO 1591
1591: DISABLE
// begin enable ;
1592: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1593: LD_INT 2
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: LD_INT 4
1604: PPUSH
1605: CALL_OW 12
1609: PUSH
1610: LD_INT 0
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: CALL_OW 12
1620: PUSH
1621: LD_INT 0
1623: PPUSH
1624: LD_INT 4
1626: PPUSH
1627: CALL_OW 12
1631: PUSH
1632: LD_INT 2
1634: PPUSH
1635: LD_INT 4
1637: PPUSH
1638: CALL_OW 12
1642: PUSH
1643: LD_INT 2
1645: PPUSH
1646: LD_INT 4
1648: PPUSH
1649: CALL_OW 12
1653: PUSH
1654: LD_INT 0
1656: PPUSH
1657: LD_INT 2
1659: PPUSH
1660: CALL_OW 12
1664: PUSH
1665: LD_INT 0
1667: PPUSH
1668: LD_INT 4
1670: PPUSH
1671: CALL_OW 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL 391 0 3
// end ;
1689: END
// every 0 0$1 do var i ;
1690: GO 1692
1692: DISABLE
1693: LD_INT 0
1695: PPUSH
// begin enable ;
1696: ENABLE
// display_strings := [ ] ;
1697: LD_ADDR_OWVAR 47
1701: PUSH
1702: EMPTY
1703: ST_TO_ADDR
// for i := 1 to huntersAmount do
1704: LD_ADDR_VAR 0 1
1708: PUSH
1709: DOUBLE
1710: LD_INT 1
1712: DEC
1713: ST_TO_ADDR
1714: LD_EXP 3
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1854
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1722: LD_ADDR_OWVAR 47
1726: PUSH
1727: LD_OWVAR 47
1731: PUSH
1732: LD_STRING #player
1734: PUSH
1735: LD_VAR 0 1
1739: STR
1740: PUSH
1741: LD_VAR 0 1
1745: PUSH
1746: LD_EXP 5
1750: PUSH
1751: LD_VAR 0 1
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: ADD
1762: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1763: LD_EXP 5
1767: PUSH
1768: LD_VAR 0 1
1772: ARRAY
1773: PUSH
1774: LD_INT 750
1776: PUSH
1777: LD_INT 1250
1779: PUSH
1780: LD_INT 2000
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_OWVAR 67
1792: ARRAY
1793: GREATEREQUAL
1794: IFFALSE 1852
// begin if i = 1 then
1796: LD_VAR 0 1
1800: PUSH
1801: LD_INT 1
1803: EQUAL
1804: IFFALSE 1845
// begin DialogueOn ;
1806: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1810: LD_STRING ACH_HUNT
1812: PPUSH
1813: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1817: LD_ADDR_OWVAR 47
1821: PUSH
1822: LD_STRING #hunting-win
1824: PUSH
1825: EMPTY
1826: LIST
1827: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1828: LD_INT 175
1830: PPUSH
1831: CALL_OW 68
// YouWin ;
1835: CALL_OW 103
// DialogueOff ;
1839: CALL_OW 7
// end else
1843: GO 1852
// YouLost ( hunt3 ) ;
1845: LD_STRING hunt3
1847: PPUSH
1848: CALL_OW 104
// end ; end ;
1852: GO 1719
1854: POP
1855: POP
// end ; end_of_file end_of_file
1856: PPOPN 1
1858: END
// every 0 0$1 do
1859: GO 1861
1861: DISABLE
// begin enable ;
1862: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1863: LD_STRING updateTimer(
1865: PUSH
1866: LD_OWVAR 1
1870: STR
1871: PUSH
1872: LD_STRING );
1874: STR
1875: PPUSH
1876: CALL_OW 559
// end ;
1880: END
// export function SOS_MapStart ( ) ; begin
1881: LD_INT 0
1883: PPUSH
// if streamModeActive then
1884: LD_EXP 7
1888: IFFALSE 1897
// DefineStreamItems ( true ) ;
1890: LD_INT 1
1892: PPUSH
1893: CALL 3551 0 1
// UpdateFactoryWaypoints ( ) ;
1897: CALL 16412 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1901: CALL 16669 0 0
// end ;
1905: LD_VAR 0 1
1909: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1910: LD_INT 0
1912: PPUSH
// if p2 = 100 then
1913: LD_VAR 0 2
1917: PUSH
1918: LD_INT 100
1920: EQUAL
1921: IFFALSE 2924
// begin if not StreamModeActive then
1923: LD_EXP 7
1927: NOT
1928: IFFALSE 1938
// StreamModeActive := true ;
1930: LD_ADDR_EXP 7
1934: PUSH
1935: LD_INT 1
1937: ST_TO_ADDR
// if p3 = 0 then
1938: LD_VAR 0 3
1942: PUSH
1943: LD_INT 0
1945: EQUAL
1946: IFFALSE 1952
// InitStreamMode ;
1948: CALL 3087 0 0
// if p3 = 1 then
1952: LD_VAR 0 3
1956: PUSH
1957: LD_INT 1
1959: EQUAL
1960: IFFALSE 1970
// sRocket := true ;
1962: LD_ADDR_EXP 12
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// if p3 = 2 then
1970: LD_VAR 0 3
1974: PUSH
1975: LD_INT 2
1977: EQUAL
1978: IFFALSE 1988
// sSpeed := true ;
1980: LD_ADDR_EXP 11
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// if p3 = 3 then
1988: LD_VAR 0 3
1992: PUSH
1993: LD_INT 3
1995: EQUAL
1996: IFFALSE 2006
// sEngine := true ;
1998: LD_ADDR_EXP 13
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if p3 = 4 then
2006: LD_VAR 0 3
2010: PUSH
2011: LD_INT 4
2013: EQUAL
2014: IFFALSE 2024
// sSpec := true ;
2016: LD_ADDR_EXP 10
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// if p3 = 5 then
2024: LD_VAR 0 3
2028: PUSH
2029: LD_INT 5
2031: EQUAL
2032: IFFALSE 2042
// sLevel := true ;
2034: LD_ADDR_EXP 14
2038: PUSH
2039: LD_INT 1
2041: ST_TO_ADDR
// if p3 = 6 then
2042: LD_VAR 0 3
2046: PUSH
2047: LD_INT 6
2049: EQUAL
2050: IFFALSE 2060
// sArmoury := true ;
2052: LD_ADDR_EXP 15
2056: PUSH
2057: LD_INT 1
2059: ST_TO_ADDR
// if p3 = 7 then
2060: LD_VAR 0 3
2064: PUSH
2065: LD_INT 7
2067: EQUAL
2068: IFFALSE 2078
// sRadar := true ;
2070: LD_ADDR_EXP 16
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// if p3 = 8 then
2078: LD_VAR 0 3
2082: PUSH
2083: LD_INT 8
2085: EQUAL
2086: IFFALSE 2096
// sBunker := true ;
2088: LD_ADDR_EXP 17
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// if p3 = 9 then
2096: LD_VAR 0 3
2100: PUSH
2101: LD_INT 9
2103: EQUAL
2104: IFFALSE 2114
// sHack := true ;
2106: LD_ADDR_EXP 18
2110: PUSH
2111: LD_INT 1
2113: ST_TO_ADDR
// if p3 = 10 then
2114: LD_VAR 0 3
2118: PUSH
2119: LD_INT 10
2121: EQUAL
2122: IFFALSE 2132
// sFire := true ;
2124: LD_ADDR_EXP 19
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// if p3 = 11 then
2132: LD_VAR 0 3
2136: PUSH
2137: LD_INT 11
2139: EQUAL
2140: IFFALSE 2150
// sRefresh := true ;
2142: LD_ADDR_EXP 20
2146: PUSH
2147: LD_INT 1
2149: ST_TO_ADDR
// if p3 = 12 then
2150: LD_VAR 0 3
2154: PUSH
2155: LD_INT 12
2157: EQUAL
2158: IFFALSE 2168
// sExp := true ;
2160: LD_ADDR_EXP 21
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// if p3 = 13 then
2168: LD_VAR 0 3
2172: PUSH
2173: LD_INT 13
2175: EQUAL
2176: IFFALSE 2186
// sDepot := true ;
2178: LD_ADDR_EXP 22
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// if p3 = 14 then
2186: LD_VAR 0 3
2190: PUSH
2191: LD_INT 14
2193: EQUAL
2194: IFFALSE 2204
// sFlag := true ;
2196: LD_ADDR_EXP 23
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// if p3 = 15 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 15
2211: EQUAL
2212: IFFALSE 2222
// sKamikadze := true ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if p3 = 16 then
2222: LD_VAR 0 3
2226: PUSH
2227: LD_INT 16
2229: EQUAL
2230: IFFALSE 2240
// sTroll := true ;
2232: LD_ADDR_EXP 32
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// if p3 = 17 then
2240: LD_VAR 0 3
2244: PUSH
2245: LD_INT 17
2247: EQUAL
2248: IFFALSE 2258
// sSlow := true ;
2250: LD_ADDR_EXP 33
2254: PUSH
2255: LD_INT 1
2257: ST_TO_ADDR
// if p3 = 18 then
2258: LD_VAR 0 3
2262: PUSH
2263: LD_INT 18
2265: EQUAL
2266: IFFALSE 2276
// sLack := true ;
2268: LD_ADDR_EXP 34
2272: PUSH
2273: LD_INT 1
2275: ST_TO_ADDR
// if p3 = 19 then
2276: LD_VAR 0 3
2280: PUSH
2281: LD_INT 19
2283: EQUAL
2284: IFFALSE 2294
// sTank := true ;
2286: LD_ADDR_EXP 36
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// if p3 = 20 then
2294: LD_VAR 0 3
2298: PUSH
2299: LD_INT 20
2301: EQUAL
2302: IFFALSE 2312
// sRemote := true ;
2304: LD_ADDR_EXP 37
2308: PUSH
2309: LD_INT 1
2311: ST_TO_ADDR
// if p3 = 21 then
2312: LD_VAR 0 3
2316: PUSH
2317: LD_INT 21
2319: EQUAL
2320: IFFALSE 2330
// sPowell := true ;
2322: LD_ADDR_EXP 38
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// if p3 = 22 then
2330: LD_VAR 0 3
2334: PUSH
2335: LD_INT 22
2337: EQUAL
2338: IFFALSE 2348
// sTeleport := true ;
2340: LD_ADDR_EXP 41
2344: PUSH
2345: LD_INT 1
2347: ST_TO_ADDR
// if p3 = 23 then
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 23
2355: EQUAL
2356: IFFALSE 2366
// sOilTower := true ;
2358: LD_ADDR_EXP 43
2362: PUSH
2363: LD_INT 1
2365: ST_TO_ADDR
// if p3 = 24 then
2366: LD_VAR 0 3
2370: PUSH
2371: LD_INT 24
2373: EQUAL
2374: IFFALSE 2384
// sShovel := true ;
2376: LD_ADDR_EXP 44
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if p3 = 25 then
2384: LD_VAR 0 3
2388: PUSH
2389: LD_INT 25
2391: EQUAL
2392: IFFALSE 2402
// sSheik := true ;
2394: LD_ADDR_EXP 45
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// if p3 = 26 then
2402: LD_VAR 0 3
2406: PUSH
2407: LD_INT 26
2409: EQUAL
2410: IFFALSE 2420
// sEarthquake := true ;
2412: LD_ADDR_EXP 47
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// if p3 = 27 then
2420: LD_VAR 0 3
2424: PUSH
2425: LD_INT 27
2427: EQUAL
2428: IFFALSE 2438
// sAI := true ;
2430: LD_ADDR_EXP 48
2434: PUSH
2435: LD_INT 1
2437: ST_TO_ADDR
// if p3 = 28 then
2438: LD_VAR 0 3
2442: PUSH
2443: LD_INT 28
2445: EQUAL
2446: IFFALSE 2456
// sCargo := true ;
2448: LD_ADDR_EXP 51
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// if p3 = 29 then
2456: LD_VAR 0 3
2460: PUSH
2461: LD_INT 29
2463: EQUAL
2464: IFFALSE 2474
// sDLaser := true ;
2466: LD_ADDR_EXP 52
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// if p3 = 30 then
2474: LD_VAR 0 3
2478: PUSH
2479: LD_INT 30
2481: EQUAL
2482: IFFALSE 2492
// sExchange := true ;
2484: LD_ADDR_EXP 53
2488: PUSH
2489: LD_INT 1
2491: ST_TO_ADDR
// if p3 = 31 then
2492: LD_VAR 0 3
2496: PUSH
2497: LD_INT 31
2499: EQUAL
2500: IFFALSE 2510
// sFac := true ;
2502: LD_ADDR_EXP 54
2506: PUSH
2507: LD_INT 1
2509: ST_TO_ADDR
// if p3 = 32 then
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 32
2517: EQUAL
2518: IFFALSE 2528
// sPower := true ;
2520: LD_ADDR_EXP 55
2524: PUSH
2525: LD_INT 1
2527: ST_TO_ADDR
// if p3 = 33 then
2528: LD_VAR 0 3
2532: PUSH
2533: LD_INT 33
2535: EQUAL
2536: IFFALSE 2546
// sRandom := true ;
2538: LD_ADDR_EXP 56
2542: PUSH
2543: LD_INT 1
2545: ST_TO_ADDR
// if p3 = 34 then
2546: LD_VAR 0 3
2550: PUSH
2551: LD_INT 34
2553: EQUAL
2554: IFFALSE 2564
// sShield := true ;
2556: LD_ADDR_EXP 57
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// if p3 = 35 then
2564: LD_VAR 0 3
2568: PUSH
2569: LD_INT 35
2571: EQUAL
2572: IFFALSE 2582
// sTime := true ;
2574: LD_ADDR_EXP 58
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// if p3 = 36 then
2582: LD_VAR 0 3
2586: PUSH
2587: LD_INT 36
2589: EQUAL
2590: IFFALSE 2600
// sTools := true ;
2592: LD_ADDR_EXP 59
2596: PUSH
2597: LD_INT 1
2599: ST_TO_ADDR
// if p3 = 101 then
2600: LD_VAR 0 3
2604: PUSH
2605: LD_INT 101
2607: EQUAL
2608: IFFALSE 2618
// sSold := true ;
2610: LD_ADDR_EXP 24
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// if p3 = 102 then
2618: LD_VAR 0 3
2622: PUSH
2623: LD_INT 102
2625: EQUAL
2626: IFFALSE 2636
// sDiff := true ;
2628: LD_ADDR_EXP 25
2632: PUSH
2633: LD_INT 1
2635: ST_TO_ADDR
// if p3 = 103 then
2636: LD_VAR 0 3
2640: PUSH
2641: LD_INT 103
2643: EQUAL
2644: IFFALSE 2654
// sFog := true ;
2646: LD_ADDR_EXP 28
2650: PUSH
2651: LD_INT 1
2653: ST_TO_ADDR
// if p3 = 104 then
2654: LD_VAR 0 3
2658: PUSH
2659: LD_INT 104
2661: EQUAL
2662: IFFALSE 2672
// sReset := true ;
2664: LD_ADDR_EXP 29
2668: PUSH
2669: LD_INT 1
2671: ST_TO_ADDR
// if p3 = 105 then
2672: LD_VAR 0 3
2676: PUSH
2677: LD_INT 105
2679: EQUAL
2680: IFFALSE 2690
// sSun := true ;
2682: LD_ADDR_EXP 30
2686: PUSH
2687: LD_INT 1
2689: ST_TO_ADDR
// if p3 = 106 then
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 106
2697: EQUAL
2698: IFFALSE 2708
// sTiger := true ;
2700: LD_ADDR_EXP 26
2704: PUSH
2705: LD_INT 1
2707: ST_TO_ADDR
// if p3 = 107 then
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 107
2715: EQUAL
2716: IFFALSE 2726
// sBomb := true ;
2718: LD_ADDR_EXP 27
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// if p3 = 108 then
2726: LD_VAR 0 3
2730: PUSH
2731: LD_INT 108
2733: EQUAL
2734: IFFALSE 2744
// sWound := true ;
2736: LD_ADDR_EXP 35
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// if p3 = 109 then
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 109
2751: EQUAL
2752: IFFALSE 2762
// sBetray := true ;
2754: LD_ADDR_EXP 39
2758: PUSH
2759: LD_INT 1
2761: ST_TO_ADDR
// if p3 = 110 then
2762: LD_VAR 0 3
2766: PUSH
2767: LD_INT 110
2769: EQUAL
2770: IFFALSE 2780
// sContamin := true ;
2772: LD_ADDR_EXP 40
2776: PUSH
2777: LD_INT 1
2779: ST_TO_ADDR
// if p3 = 111 then
2780: LD_VAR 0 3
2784: PUSH
2785: LD_INT 111
2787: EQUAL
2788: IFFALSE 2798
// sOil := true ;
2790: LD_ADDR_EXP 42
2794: PUSH
2795: LD_INT 1
2797: ST_TO_ADDR
// if p3 = 112 then
2798: LD_VAR 0 3
2802: PUSH
2803: LD_INT 112
2805: EQUAL
2806: IFFALSE 2816
// sStu := true ;
2808: LD_ADDR_EXP 46
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// if p3 = 113 then
2816: LD_VAR 0 3
2820: PUSH
2821: LD_INT 113
2823: EQUAL
2824: IFFALSE 2834
// sBazooka := true ;
2826: LD_ADDR_EXP 49
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// if p3 = 114 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 114
2841: EQUAL
2842: IFFALSE 2852
// sMortar := true ;
2844: LD_ADDR_EXP 50
2848: PUSH
2849: LD_INT 1
2851: ST_TO_ADDR
// if p3 = 115 then
2852: LD_VAR 0 3
2856: PUSH
2857: LD_INT 115
2859: EQUAL
2860: IFFALSE 2870
// sRanger := true ;
2862: LD_ADDR_EXP 60
2866: PUSH
2867: LD_INT 1
2869: ST_TO_ADDR
// if p3 = 116 then
2870: LD_VAR 0 3
2874: PUSH
2875: LD_INT 116
2877: EQUAL
2878: IFFALSE 2888
// sComputer := true ;
2880: LD_ADDR_EXP 61
2884: PUSH
2885: LD_INT 1
2887: ST_TO_ADDR
// if p3 = 117 then
2888: LD_VAR 0 3
2892: PUSH
2893: LD_INT 117
2895: EQUAL
2896: IFFALSE 2906
// s30 := true ;
2898: LD_ADDR_EXP 62
2902: PUSH
2903: LD_INT 1
2905: ST_TO_ADDR
// if p3 = 118 then
2906: LD_VAR 0 3
2910: PUSH
2911: LD_INT 118
2913: EQUAL
2914: IFFALSE 2924
// s60 := true ;
2916: LD_ADDR_EXP 63
2920: PUSH
2921: LD_INT 1
2923: ST_TO_ADDR
// end ; if p2 = 101 then
2924: LD_VAR 0 2
2928: PUSH
2929: LD_INT 101
2931: EQUAL
2932: IFFALSE 3060
// begin case p3 of 1 :
2934: LD_VAR 0 3
2938: PUSH
2939: LD_INT 1
2941: DOUBLE
2942: EQUAL
2943: IFTRUE 2947
2945: GO 2954
2947: POP
// hHackUnlimitedResources ; 2 :
2948: CALL 15158 0 0
2952: GO 3060
2954: LD_INT 2
2956: DOUBLE
2957: EQUAL
2958: IFTRUE 2962
2960: GO 2969
2962: POP
// hHackSetLevel10 ; 3 :
2963: CALL 15291 0 0
2967: GO 3060
2969: LD_INT 3
2971: DOUBLE
2972: EQUAL
2973: IFTRUE 2977
2975: GO 2984
2977: POP
// hHackSetLevel10YourUnits ; 4 :
2978: CALL 15376 0 0
2982: GO 3060
2984: LD_INT 4
2986: DOUBLE
2987: EQUAL
2988: IFTRUE 2992
2990: GO 2999
2992: POP
// hHackInvincible ; 5 :
2993: CALL 15824 0 0
2997: GO 3060
2999: LD_INT 5
3001: DOUBLE
3002: EQUAL
3003: IFTRUE 3007
3005: GO 3014
3007: POP
// hHackInvisible ; 6 :
3008: CALL 15935 0 0
3012: GO 3060
3014: LD_INT 6
3016: DOUBLE
3017: EQUAL
3018: IFTRUE 3022
3020: GO 3029
3022: POP
// hHackChangeYourSide ; 7 :
3023: CALL 15992 0 0
3027: GO 3060
3029: LD_INT 7
3031: DOUBLE
3032: EQUAL
3033: IFTRUE 3037
3035: GO 3044
3037: POP
// hHackChangeUnitSide ; 8 :
3038: CALL 16034 0 0
3042: GO 3060
3044: LD_INT 8
3046: DOUBLE
3047: EQUAL
3048: IFTRUE 3052
3050: GO 3059
3052: POP
// hHackFog ; end ;
3053: CALL 16135 0 0
3057: GO 3060
3059: POP
// end ; end ;
3060: LD_VAR 0 7
3064: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3065: GO 3067
3067: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3068: LD_STRING initStreamRollete();
3070: PPUSH
3071: CALL_OW 559
// InitStreamMode ;
3075: CALL 3087 0 0
// DefineStreamItems ( false ) ;
3079: LD_INT 0
3081: PPUSH
3082: CALL 3551 0 1
// end ;
3086: END
// function InitStreamMode ; begin
3087: LD_INT 0
3089: PPUSH
// streamModeActive := false ;
3090: LD_ADDR_EXP 7
3094: PUSH
3095: LD_INT 0
3097: ST_TO_ADDR
// normalCounter := 36 ;
3098: LD_ADDR_EXP 8
3102: PUSH
3103: LD_INT 36
3105: ST_TO_ADDR
// hardcoreCounter := 18 ;
3106: LD_ADDR_EXP 9
3110: PUSH
3111: LD_INT 18
3113: ST_TO_ADDR
// sRocket := false ;
3114: LD_ADDR_EXP 12
3118: PUSH
3119: LD_INT 0
3121: ST_TO_ADDR
// sSpeed := false ;
3122: LD_ADDR_EXP 11
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// sEngine := false ;
3130: LD_ADDR_EXP 13
3134: PUSH
3135: LD_INT 0
3137: ST_TO_ADDR
// sSpec := false ;
3138: LD_ADDR_EXP 10
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// sLevel := false ;
3146: LD_ADDR_EXP 14
3150: PUSH
3151: LD_INT 0
3153: ST_TO_ADDR
// sArmoury := false ;
3154: LD_ADDR_EXP 15
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// sRadar := false ;
3162: LD_ADDR_EXP 16
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// sBunker := false ;
3170: LD_ADDR_EXP 17
3174: PUSH
3175: LD_INT 0
3177: ST_TO_ADDR
// sHack := false ;
3178: LD_ADDR_EXP 18
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// sFire := false ;
3186: LD_ADDR_EXP 19
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// sRefresh := false ;
3194: LD_ADDR_EXP 20
3198: PUSH
3199: LD_INT 0
3201: ST_TO_ADDR
// sExp := false ;
3202: LD_ADDR_EXP 21
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// sDepot := false ;
3210: LD_ADDR_EXP 22
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// sFlag := false ;
3218: LD_ADDR_EXP 23
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// sKamikadze := false ;
3226: LD_ADDR_EXP 31
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// sTroll := false ;
3234: LD_ADDR_EXP 32
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// sSlow := false ;
3242: LD_ADDR_EXP 33
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// sLack := false ;
3250: LD_ADDR_EXP 34
3254: PUSH
3255: LD_INT 0
3257: ST_TO_ADDR
// sTank := false ;
3258: LD_ADDR_EXP 36
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// sRemote := false ;
3266: LD_ADDR_EXP 37
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// sPowell := false ;
3274: LD_ADDR_EXP 38
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// sTeleport := false ;
3282: LD_ADDR_EXP 41
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// sOilTower := false ;
3290: LD_ADDR_EXP 43
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// sShovel := false ;
3298: LD_ADDR_EXP 44
3302: PUSH
3303: LD_INT 0
3305: ST_TO_ADDR
// sSheik := false ;
3306: LD_ADDR_EXP 45
3310: PUSH
3311: LD_INT 0
3313: ST_TO_ADDR
// sEarthquake := false ;
3314: LD_ADDR_EXP 47
3318: PUSH
3319: LD_INT 0
3321: ST_TO_ADDR
// sAI := false ;
3322: LD_ADDR_EXP 48
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// sCargo := false ;
3330: LD_ADDR_EXP 51
3334: PUSH
3335: LD_INT 0
3337: ST_TO_ADDR
// sDLaser := false ;
3338: LD_ADDR_EXP 52
3342: PUSH
3343: LD_INT 0
3345: ST_TO_ADDR
// sExchange := false ;
3346: LD_ADDR_EXP 53
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// sFac := false ;
3354: LD_ADDR_EXP 54
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// sPower := false ;
3362: LD_ADDR_EXP 55
3366: PUSH
3367: LD_INT 0
3369: ST_TO_ADDR
// sRandom := false ;
3370: LD_ADDR_EXP 56
3374: PUSH
3375: LD_INT 0
3377: ST_TO_ADDR
// sShield := false ;
3378: LD_ADDR_EXP 57
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sTime := false ;
3386: LD_ADDR_EXP 58
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sTools := false ;
3394: LD_ADDR_EXP 59
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// sSold := false ;
3402: LD_ADDR_EXP 24
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// sDiff := false ;
3410: LD_ADDR_EXP 25
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// sFog := false ;
3418: LD_ADDR_EXP 28
3422: PUSH
3423: LD_INT 0
3425: ST_TO_ADDR
// sReset := false ;
3426: LD_ADDR_EXP 29
3430: PUSH
3431: LD_INT 0
3433: ST_TO_ADDR
// sSun := false ;
3434: LD_ADDR_EXP 30
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// sTiger := false ;
3442: LD_ADDR_EXP 26
3446: PUSH
3447: LD_INT 0
3449: ST_TO_ADDR
// sBomb := false ;
3450: LD_ADDR_EXP 27
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// sWound := false ;
3458: LD_ADDR_EXP 35
3462: PUSH
3463: LD_INT 0
3465: ST_TO_ADDR
// sBetray := false ;
3466: LD_ADDR_EXP 39
3470: PUSH
3471: LD_INT 0
3473: ST_TO_ADDR
// sContamin := false ;
3474: LD_ADDR_EXP 40
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
// sOil := false ;
3482: LD_ADDR_EXP 42
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
// sStu := false ;
3490: LD_ADDR_EXP 46
3494: PUSH
3495: LD_INT 0
3497: ST_TO_ADDR
// sBazooka := false ;
3498: LD_ADDR_EXP 49
3502: PUSH
3503: LD_INT 0
3505: ST_TO_ADDR
// sMortar := false ;
3506: LD_ADDR_EXP 50
3510: PUSH
3511: LD_INT 0
3513: ST_TO_ADDR
// sRanger := false ;
3514: LD_ADDR_EXP 60
3518: PUSH
3519: LD_INT 0
3521: ST_TO_ADDR
// sComputer := false ;
3522: LD_ADDR_EXP 61
3526: PUSH
3527: LD_INT 0
3529: ST_TO_ADDR
// s30 := false ;
3530: LD_ADDR_EXP 62
3534: PUSH
3535: LD_INT 0
3537: ST_TO_ADDR
// s60 := false ;
3538: LD_ADDR_EXP 63
3542: PUSH
3543: LD_INT 0
3545: ST_TO_ADDR
// end ;
3546: LD_VAR 0 1
3550: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3551: LD_INT 0
3553: PPUSH
3554: PPUSH
3555: PPUSH
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
// result := [ ] ;
3560: LD_ADDR_VAR 0 2
3564: PUSH
3565: EMPTY
3566: ST_TO_ADDR
// if campaign_id = 1 then
3567: LD_OWVAR 69
3571: PUSH
3572: LD_INT 1
3574: EQUAL
3575: IFFALSE 6741
// begin case mission_number of 1 :
3577: LD_OWVAR 70
3581: PUSH
3582: LD_INT 1
3584: DOUBLE
3585: EQUAL
3586: IFTRUE 3590
3588: GO 3666
3590: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: LD_INT 4
3601: PUSH
3602: LD_INT 11
3604: PUSH
3605: LD_INT 12
3607: PUSH
3608: LD_INT 15
3610: PUSH
3611: LD_INT 16
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 23
3619: PUSH
3620: LD_INT 26
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 101
3636: PUSH
3637: LD_INT 102
3639: PUSH
3640: LD_INT 106
3642: PUSH
3643: LD_INT 116
3645: PUSH
3646: LD_INT 117
3648: PUSH
3649: LD_INT 118
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
3664: GO 6739
3666: LD_INT 2
3668: DOUBLE
3669: EQUAL
3670: IFTRUE 3674
3672: GO 3758
3674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: LD_INT 4
3685: PUSH
3686: LD_INT 11
3688: PUSH
3689: LD_INT 12
3691: PUSH
3692: LD_INT 15
3694: PUSH
3695: LD_INT 16
3697: PUSH
3698: LD_INT 22
3700: PUSH
3701: LD_INT 23
3703: PUSH
3704: LD_INT 26
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 101
3720: PUSH
3721: LD_INT 102
3723: PUSH
3724: LD_INT 105
3726: PUSH
3727: LD_INT 106
3729: PUSH
3730: LD_INT 108
3732: PUSH
3733: LD_INT 116
3735: PUSH
3736: LD_INT 117
3738: PUSH
3739: LD_INT 118
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: ST_TO_ADDR
3756: GO 6739
3758: LD_INT 3
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3766
3764: GO 3854
3766: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3767: LD_ADDR_VAR 0 2
3771: PUSH
3772: LD_INT 2
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: LD_INT 5
3780: PUSH
3781: LD_INT 11
3783: PUSH
3784: LD_INT 12
3786: PUSH
3787: LD_INT 15
3789: PUSH
3790: LD_INT 16
3792: PUSH
3793: LD_INT 22
3795: PUSH
3796: LD_INT 26
3798: PUSH
3799: LD_INT 36
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 101
3816: PUSH
3817: LD_INT 102
3819: PUSH
3820: LD_INT 105
3822: PUSH
3823: LD_INT 106
3825: PUSH
3826: LD_INT 108
3828: PUSH
3829: LD_INT 116
3831: PUSH
3832: LD_INT 117
3834: PUSH
3835: LD_INT 118
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: ST_TO_ADDR
3852: GO 6739
3854: LD_INT 4
3856: DOUBLE
3857: EQUAL
3858: IFTRUE 3862
3860: GO 3958
3862: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: LD_INT 2
3870: PUSH
3871: LD_INT 4
3873: PUSH
3874: LD_INT 5
3876: PUSH
3877: LD_INT 8
3879: PUSH
3880: LD_INT 11
3882: PUSH
3883: LD_INT 12
3885: PUSH
3886: LD_INT 15
3888: PUSH
3889: LD_INT 16
3891: PUSH
3892: LD_INT 22
3894: PUSH
3895: LD_INT 23
3897: PUSH
3898: LD_INT 26
3900: PUSH
3901: LD_INT 36
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_INT 101
3920: PUSH
3921: LD_INT 102
3923: PUSH
3924: LD_INT 105
3926: PUSH
3927: LD_INT 106
3929: PUSH
3930: LD_INT 108
3932: PUSH
3933: LD_INT 116
3935: PUSH
3936: LD_INT 117
3938: PUSH
3939: LD_INT 118
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: ST_TO_ADDR
3956: GO 6739
3958: LD_INT 5
3960: DOUBLE
3961: EQUAL
3962: IFTRUE 3966
3964: GO 4078
3966: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3967: LD_ADDR_VAR 0 2
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: LD_INT 4
3977: PUSH
3978: LD_INT 5
3980: PUSH
3981: LD_INT 6
3983: PUSH
3984: LD_INT 8
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 12
3992: PUSH
3993: LD_INT 15
3995: PUSH
3996: LD_INT 16
3998: PUSH
3999: LD_INT 22
4001: PUSH
4002: LD_INT 23
4004: PUSH
4005: LD_INT 25
4007: PUSH
4008: LD_INT 26
4010: PUSH
4011: LD_INT 36
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 101
4032: PUSH
4033: LD_INT 102
4035: PUSH
4036: LD_INT 105
4038: PUSH
4039: LD_INT 106
4041: PUSH
4042: LD_INT 108
4044: PUSH
4045: LD_INT 109
4047: PUSH
4048: LD_INT 112
4050: PUSH
4051: LD_INT 116
4053: PUSH
4054: LD_INT 117
4056: PUSH
4057: LD_INT 118
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: ST_TO_ADDR
4076: GO 6739
4078: LD_INT 6
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4218
4086: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: LD_INT 8
4106: PUSH
4107: LD_INT 11
4109: PUSH
4110: LD_INT 12
4112: PUSH
4113: LD_INT 15
4115: PUSH
4116: LD_INT 16
4118: PUSH
4119: LD_INT 20
4121: PUSH
4122: LD_INT 21
4124: PUSH
4125: LD_INT 22
4127: PUSH
4128: LD_INT 23
4130: PUSH
4131: LD_INT 25
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 31
4142: PUSH
4143: LD_INT 32
4145: PUSH
4146: LD_INT 36
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 101
4172: PUSH
4173: LD_INT 102
4175: PUSH
4176: LD_INT 105
4178: PUSH
4179: LD_INT 106
4181: PUSH
4182: LD_INT 108
4184: PUSH
4185: LD_INT 109
4187: PUSH
4188: LD_INT 112
4190: PUSH
4191: LD_INT 116
4193: PUSH
4194: LD_INT 117
4196: PUSH
4197: LD_INT 118
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: ST_TO_ADDR
4216: GO 6739
4218: LD_INT 7
4220: DOUBLE
4221: EQUAL
4222: IFTRUE 4226
4224: GO 4338
4226: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4227: LD_ADDR_VAR 0 2
4231: PUSH
4232: LD_INT 2
4234: PUSH
4235: LD_INT 4
4237: PUSH
4238: LD_INT 5
4240: PUSH
4241: LD_INT 7
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 12
4249: PUSH
4250: LD_INT 15
4252: PUSH
4253: LD_INT 16
4255: PUSH
4256: LD_INT 20
4258: PUSH
4259: LD_INT 21
4261: PUSH
4262: LD_INT 22
4264: PUSH
4265: LD_INT 23
4267: PUSH
4268: LD_INT 25
4270: PUSH
4271: LD_INT 26
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 101
4292: PUSH
4293: LD_INT 102
4295: PUSH
4296: LD_INT 103
4298: PUSH
4299: LD_INT 105
4301: PUSH
4302: LD_INT 106
4304: PUSH
4305: LD_INT 108
4307: PUSH
4308: LD_INT 112
4310: PUSH
4311: LD_INT 116
4313: PUSH
4314: LD_INT 117
4316: PUSH
4317: LD_INT 118
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: ST_TO_ADDR
4336: GO 6739
4338: LD_INT 8
4340: DOUBLE
4341: EQUAL
4342: IFTRUE 4346
4344: GO 4486
4346: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4347: LD_ADDR_VAR 0 2
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 4
4357: PUSH
4358: LD_INT 5
4360: PUSH
4361: LD_INT 6
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 8
4369: PUSH
4370: LD_INT 11
4372: PUSH
4373: LD_INT 12
4375: PUSH
4376: LD_INT 15
4378: PUSH
4379: LD_INT 16
4381: PUSH
4382: LD_INT 20
4384: PUSH
4385: LD_INT 21
4387: PUSH
4388: LD_INT 22
4390: PUSH
4391: LD_INT 23
4393: PUSH
4394: LD_INT 25
4396: PUSH
4397: LD_INT 26
4399: PUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 32
4408: PUSH
4409: LD_INT 36
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 101
4436: PUSH
4437: LD_INT 102
4439: PUSH
4440: LD_INT 103
4442: PUSH
4443: LD_INT 105
4445: PUSH
4446: LD_INT 106
4448: PUSH
4449: LD_INT 108
4451: PUSH
4452: LD_INT 109
4454: PUSH
4455: LD_INT 112
4457: PUSH
4458: LD_INT 116
4460: PUSH
4461: LD_INT 117
4463: PUSH
4464: LD_INT 118
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: ST_TO_ADDR
4484: GO 6739
4486: LD_INT 9
4488: DOUBLE
4489: EQUAL
4490: IFTRUE 4494
4492: GO 4642
4494: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 4
4505: PUSH
4506: LD_INT 5
4508: PUSH
4509: LD_INT 6
4511: PUSH
4512: LD_INT 7
4514: PUSH
4515: LD_INT 8
4517: PUSH
4518: LD_INT 11
4520: PUSH
4521: LD_INT 12
4523: PUSH
4524: LD_INT 15
4526: PUSH
4527: LD_INT 16
4529: PUSH
4530: LD_INT 20
4532: PUSH
4533: LD_INT 21
4535: PUSH
4536: LD_INT 22
4538: PUSH
4539: LD_INT 23
4541: PUSH
4542: LD_INT 25
4544: PUSH
4545: LD_INT 26
4547: PUSH
4548: LD_INT 28
4550: PUSH
4551: LD_INT 30
4553: PUSH
4554: LD_INT 31
4556: PUSH
4557: LD_INT 32
4559: PUSH
4560: LD_INT 36
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 101
4588: PUSH
4589: LD_INT 102
4591: PUSH
4592: LD_INT 103
4594: PUSH
4595: LD_INT 105
4597: PUSH
4598: LD_INT 106
4600: PUSH
4601: LD_INT 108
4603: PUSH
4604: LD_INT 109
4606: PUSH
4607: LD_INT 112
4609: PUSH
4610: LD_INT 114
4612: PUSH
4613: LD_INT 116
4615: PUSH
4616: LD_INT 117
4618: PUSH
4619: LD_INT 118
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: ST_TO_ADDR
4640: GO 6739
4642: LD_INT 10
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4650
4648: GO 4846
4650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: LD_INT 2
4658: PUSH
4659: LD_INT 4
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: LD_INT 6
4667: PUSH
4668: LD_INT 7
4670: PUSH
4671: LD_INT 8
4673: PUSH
4674: LD_INT 9
4676: PUSH
4677: LD_INT 10
4679: PUSH
4680: LD_INT 11
4682: PUSH
4683: LD_INT 12
4685: PUSH
4686: LD_INT 13
4688: PUSH
4689: LD_INT 14
4691: PUSH
4692: LD_INT 15
4694: PUSH
4695: LD_INT 16
4697: PUSH
4698: LD_INT 17
4700: PUSH
4701: LD_INT 18
4703: PUSH
4704: LD_INT 19
4706: PUSH
4707: LD_INT 20
4709: PUSH
4710: LD_INT 21
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 23
4718: PUSH
4719: LD_INT 24
4721: PUSH
4722: LD_INT 25
4724: PUSH
4725: LD_INT 26
4727: PUSH
4728: LD_INT 28
4730: PUSH
4731: LD_INT 30
4733: PUSH
4734: LD_INT 31
4736: PUSH
4737: LD_INT 32
4739: PUSH
4740: LD_INT 36
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 101
4776: PUSH
4777: LD_INT 102
4779: PUSH
4780: LD_INT 103
4782: PUSH
4783: LD_INT 104
4785: PUSH
4786: LD_INT 105
4788: PUSH
4789: LD_INT 106
4791: PUSH
4792: LD_INT 107
4794: PUSH
4795: LD_INT 108
4797: PUSH
4798: LD_INT 109
4800: PUSH
4801: LD_INT 110
4803: PUSH
4804: LD_INT 111
4806: PUSH
4807: LD_INT 112
4809: PUSH
4810: LD_INT 114
4812: PUSH
4813: LD_INT 116
4815: PUSH
4816: LD_INT 117
4818: PUSH
4819: LD_INT 118
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 6739
4846: LD_INT 11
4848: DOUBLE
4849: EQUAL
4850: IFTRUE 4854
4852: GO 5058
4854: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: LD_INT 2
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: LD_INT 4
4868: PUSH
4869: LD_INT 5
4871: PUSH
4872: LD_INT 6
4874: PUSH
4875: LD_INT 7
4877: PUSH
4878: LD_INT 8
4880: PUSH
4881: LD_INT 9
4883: PUSH
4884: LD_INT 10
4886: PUSH
4887: LD_INT 11
4889: PUSH
4890: LD_INT 12
4892: PUSH
4893: LD_INT 13
4895: PUSH
4896: LD_INT 14
4898: PUSH
4899: LD_INT 15
4901: PUSH
4902: LD_INT 16
4904: PUSH
4905: LD_INT 17
4907: PUSH
4908: LD_INT 18
4910: PUSH
4911: LD_INT 19
4913: PUSH
4914: LD_INT 20
4916: PUSH
4917: LD_INT 21
4919: PUSH
4920: LD_INT 22
4922: PUSH
4923: LD_INT 23
4925: PUSH
4926: LD_INT 24
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 26
4934: PUSH
4935: LD_INT 28
4937: PUSH
4938: LD_INT 30
4940: PUSH
4941: LD_INT 31
4943: PUSH
4944: LD_INT 32
4946: PUSH
4947: LD_INT 34
4949: PUSH
4950: LD_INT 36
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 101
4988: PUSH
4989: LD_INT 102
4991: PUSH
4992: LD_INT 103
4994: PUSH
4995: LD_INT 104
4997: PUSH
4998: LD_INT 105
5000: PUSH
5001: LD_INT 106
5003: PUSH
5004: LD_INT 107
5006: PUSH
5007: LD_INT 108
5009: PUSH
5010: LD_INT 109
5012: PUSH
5013: LD_INT 110
5015: PUSH
5016: LD_INT 111
5018: PUSH
5019: LD_INT 112
5021: PUSH
5022: LD_INT 114
5024: PUSH
5025: LD_INT 116
5027: PUSH
5028: LD_INT 117
5030: PUSH
5031: LD_INT 118
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: ST_TO_ADDR
5056: GO 6739
5058: LD_INT 12
5060: DOUBLE
5061: EQUAL
5062: IFTRUE 5066
5064: GO 5286
5066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5067: LD_ADDR_VAR 0 2
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: LD_INT 2
5077: PUSH
5078: LD_INT 3
5080: PUSH
5081: LD_INT 4
5083: PUSH
5084: LD_INT 5
5086: PUSH
5087: LD_INT 6
5089: PUSH
5090: LD_INT 7
5092: PUSH
5093: LD_INT 8
5095: PUSH
5096: LD_INT 9
5098: PUSH
5099: LD_INT 10
5101: PUSH
5102: LD_INT 11
5104: PUSH
5105: LD_INT 12
5107: PUSH
5108: LD_INT 13
5110: PUSH
5111: LD_INT 14
5113: PUSH
5114: LD_INT 15
5116: PUSH
5117: LD_INT 16
5119: PUSH
5120: LD_INT 17
5122: PUSH
5123: LD_INT 18
5125: PUSH
5126: LD_INT 19
5128: PUSH
5129: LD_INT 20
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 22
5137: PUSH
5138: LD_INT 23
5140: PUSH
5141: LD_INT 24
5143: PUSH
5144: LD_INT 25
5146: PUSH
5147: LD_INT 26
5149: PUSH
5150: LD_INT 27
5152: PUSH
5153: LD_INT 28
5155: PUSH
5156: LD_INT 30
5158: PUSH
5159: LD_INT 31
5161: PUSH
5162: LD_INT 32
5164: PUSH
5165: LD_INT 33
5167: PUSH
5168: LD_INT 34
5170: PUSH
5171: LD_INT 36
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 101
5212: PUSH
5213: LD_INT 102
5215: PUSH
5216: LD_INT 103
5218: PUSH
5219: LD_INT 104
5221: PUSH
5222: LD_INT 105
5224: PUSH
5225: LD_INT 106
5227: PUSH
5228: LD_INT 107
5230: PUSH
5231: LD_INT 108
5233: PUSH
5234: LD_INT 109
5236: PUSH
5237: LD_INT 110
5239: PUSH
5240: LD_INT 111
5242: PUSH
5243: LD_INT 112
5245: PUSH
5246: LD_INT 113
5248: PUSH
5249: LD_INT 114
5251: PUSH
5252: LD_INT 116
5254: PUSH
5255: LD_INT 117
5257: PUSH
5258: LD_INT 118
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: ST_TO_ADDR
5284: GO 6739
5286: LD_INT 13
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5294
5292: GO 5502
5294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5295: LD_ADDR_VAR 0 2
5299: PUSH
5300: LD_INT 1
5302: PUSH
5303: LD_INT 2
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: LD_INT 8
5317: PUSH
5318: LD_INT 9
5320: PUSH
5321: LD_INT 10
5323: PUSH
5324: LD_INT 11
5326: PUSH
5327: LD_INT 12
5329: PUSH
5330: LD_INT 14
5332: PUSH
5333: LD_INT 15
5335: PUSH
5336: LD_INT 16
5338: PUSH
5339: LD_INT 17
5341: PUSH
5342: LD_INT 18
5344: PUSH
5345: LD_INT 19
5347: PUSH
5348: LD_INT 20
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 22
5356: PUSH
5357: LD_INT 23
5359: PUSH
5360: LD_INT 24
5362: PUSH
5363: LD_INT 25
5365: PUSH
5366: LD_INT 26
5368: PUSH
5369: LD_INT 27
5371: PUSH
5372: LD_INT 28
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 31
5380: PUSH
5381: LD_INT 32
5383: PUSH
5384: LD_INT 33
5386: PUSH
5387: LD_INT 34
5389: PUSH
5390: LD_INT 36
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 101
5428: PUSH
5429: LD_INT 102
5431: PUSH
5432: LD_INT 103
5434: PUSH
5435: LD_INT 104
5437: PUSH
5438: LD_INT 105
5440: PUSH
5441: LD_INT 106
5443: PUSH
5444: LD_INT 107
5446: PUSH
5447: LD_INT 108
5449: PUSH
5450: LD_INT 109
5452: PUSH
5453: LD_INT 110
5455: PUSH
5456: LD_INT 111
5458: PUSH
5459: LD_INT 112
5461: PUSH
5462: LD_INT 113
5464: PUSH
5465: LD_INT 114
5467: PUSH
5468: LD_INT 116
5470: PUSH
5471: LD_INT 117
5473: PUSH
5474: LD_INT 118
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
5500: GO 6739
5502: LD_INT 14
5504: DOUBLE
5505: EQUAL
5506: IFTRUE 5510
5508: GO 5734
5510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5511: LD_ADDR_VAR 0 2
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: LD_INT 2
5521: PUSH
5522: LD_INT 3
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: LD_INT 5
5530: PUSH
5531: LD_INT 6
5533: PUSH
5534: LD_INT 7
5536: PUSH
5537: LD_INT 8
5539: PUSH
5540: LD_INT 9
5542: PUSH
5543: LD_INT 10
5545: PUSH
5546: LD_INT 11
5548: PUSH
5549: LD_INT 12
5551: PUSH
5552: LD_INT 13
5554: PUSH
5555: LD_INT 14
5557: PUSH
5558: LD_INT 15
5560: PUSH
5561: LD_INT 16
5563: PUSH
5564: LD_INT 17
5566: PUSH
5567: LD_INT 18
5569: PUSH
5570: LD_INT 19
5572: PUSH
5573: LD_INT 20
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 23
5584: PUSH
5585: LD_INT 24
5587: PUSH
5588: LD_INT 25
5590: PUSH
5591: LD_INT 26
5593: PUSH
5594: LD_INT 27
5596: PUSH
5597: LD_INT 28
5599: PUSH
5600: LD_INT 29
5602: PUSH
5603: LD_INT 30
5605: PUSH
5606: LD_INT 31
5608: PUSH
5609: LD_INT 32
5611: PUSH
5612: LD_INT 33
5614: PUSH
5615: LD_INT 34
5617: PUSH
5618: LD_INT 36
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_INT 101
5660: PUSH
5661: LD_INT 102
5663: PUSH
5664: LD_INT 103
5666: PUSH
5667: LD_INT 104
5669: PUSH
5670: LD_INT 105
5672: PUSH
5673: LD_INT 106
5675: PUSH
5676: LD_INT 107
5678: PUSH
5679: LD_INT 108
5681: PUSH
5682: LD_INT 109
5684: PUSH
5685: LD_INT 110
5687: PUSH
5688: LD_INT 111
5690: PUSH
5691: LD_INT 112
5693: PUSH
5694: LD_INT 113
5696: PUSH
5697: LD_INT 114
5699: PUSH
5700: LD_INT 116
5702: PUSH
5703: LD_INT 117
5705: PUSH
5706: LD_INT 118
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: ST_TO_ADDR
5732: GO 6739
5734: LD_INT 15
5736: DOUBLE
5737: EQUAL
5738: IFTRUE 5742
5740: GO 5966
5742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5743: LD_ADDR_VAR 0 2
5747: PUSH
5748: LD_INT 1
5750: PUSH
5751: LD_INT 2
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: LD_INT 4
5759: PUSH
5760: LD_INT 5
5762: PUSH
5763: LD_INT 6
5765: PUSH
5766: LD_INT 7
5768: PUSH
5769: LD_INT 8
5771: PUSH
5772: LD_INT 9
5774: PUSH
5775: LD_INT 10
5777: PUSH
5778: LD_INT 11
5780: PUSH
5781: LD_INT 12
5783: PUSH
5784: LD_INT 13
5786: PUSH
5787: LD_INT 14
5789: PUSH
5790: LD_INT 15
5792: PUSH
5793: LD_INT 16
5795: PUSH
5796: LD_INT 17
5798: PUSH
5799: LD_INT 18
5801: PUSH
5802: LD_INT 19
5804: PUSH
5805: LD_INT 20
5807: PUSH
5808: LD_INT 21
5810: PUSH
5811: LD_INT 22
5813: PUSH
5814: LD_INT 23
5816: PUSH
5817: LD_INT 24
5819: PUSH
5820: LD_INT 25
5822: PUSH
5823: LD_INT 26
5825: PUSH
5826: LD_INT 27
5828: PUSH
5829: LD_INT 28
5831: PUSH
5832: LD_INT 29
5834: PUSH
5835: LD_INT 30
5837: PUSH
5838: LD_INT 31
5840: PUSH
5841: LD_INT 32
5843: PUSH
5844: LD_INT 33
5846: PUSH
5847: LD_INT 34
5849: PUSH
5850: LD_INT 36
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 101
5892: PUSH
5893: LD_INT 102
5895: PUSH
5896: LD_INT 103
5898: PUSH
5899: LD_INT 104
5901: PUSH
5902: LD_INT 105
5904: PUSH
5905: LD_INT 106
5907: PUSH
5908: LD_INT 107
5910: PUSH
5911: LD_INT 108
5913: PUSH
5914: LD_INT 109
5916: PUSH
5917: LD_INT 110
5919: PUSH
5920: LD_INT 111
5922: PUSH
5923: LD_INT 112
5925: PUSH
5926: LD_INT 113
5928: PUSH
5929: LD_INT 114
5931: PUSH
5932: LD_INT 116
5934: PUSH
5935: LD_INT 117
5937: PUSH
5938: LD_INT 118
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: ST_TO_ADDR
5964: GO 6739
5966: LD_INT 16
5968: DOUBLE
5969: EQUAL
5970: IFTRUE 5974
5972: GO 6110
5974: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: LD_INT 2
5982: PUSH
5983: LD_INT 4
5985: PUSH
5986: LD_INT 5
5988: PUSH
5989: LD_INT 7
5991: PUSH
5992: LD_INT 11
5994: PUSH
5995: LD_INT 12
5997: PUSH
5998: LD_INT 15
6000: PUSH
6001: LD_INT 16
6003: PUSH
6004: LD_INT 20
6006: PUSH
6007: LD_INT 21
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_INT 23
6015: PUSH
6016: LD_INT 25
6018: PUSH
6019: LD_INT 26
6021: PUSH
6022: LD_INT 30
6024: PUSH
6025: LD_INT 31
6027: PUSH
6028: LD_INT 32
6030: PUSH
6031: LD_INT 33
6033: PUSH
6034: LD_INT 34
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: LD_INT 101
6060: PUSH
6061: LD_INT 102
6063: PUSH
6064: LD_INT 103
6066: PUSH
6067: LD_INT 106
6069: PUSH
6070: LD_INT 108
6072: PUSH
6073: LD_INT 112
6075: PUSH
6076: LD_INT 113
6078: PUSH
6079: LD_INT 114
6081: PUSH
6082: LD_INT 116
6084: PUSH
6085: LD_INT 117
6087: PUSH
6088: LD_INT 118
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: ST_TO_ADDR
6108: GO 6739
6110: LD_INT 17
6112: DOUBLE
6113: EQUAL
6114: IFTRUE 6118
6116: GO 6342
6118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_INT 1
6126: PUSH
6127: LD_INT 2
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 4
6135: PUSH
6136: LD_INT 5
6138: PUSH
6139: LD_INT 6
6141: PUSH
6142: LD_INT 7
6144: PUSH
6145: LD_INT 8
6147: PUSH
6148: LD_INT 9
6150: PUSH
6151: LD_INT 10
6153: PUSH
6154: LD_INT 11
6156: PUSH
6157: LD_INT 12
6159: PUSH
6160: LD_INT 13
6162: PUSH
6163: LD_INT 14
6165: PUSH
6166: LD_INT 15
6168: PUSH
6169: LD_INT 16
6171: PUSH
6172: LD_INT 17
6174: PUSH
6175: LD_INT 18
6177: PUSH
6178: LD_INT 19
6180: PUSH
6181: LD_INT 20
6183: PUSH
6184: LD_INT 21
6186: PUSH
6187: LD_INT 22
6189: PUSH
6190: LD_INT 23
6192: PUSH
6193: LD_INT 24
6195: PUSH
6196: LD_INT 25
6198: PUSH
6199: LD_INT 26
6201: PUSH
6202: LD_INT 27
6204: PUSH
6205: LD_INT 28
6207: PUSH
6208: LD_INT 29
6210: PUSH
6211: LD_INT 30
6213: PUSH
6214: LD_INT 31
6216: PUSH
6217: LD_INT 32
6219: PUSH
6220: LD_INT 33
6222: PUSH
6223: LD_INT 34
6225: PUSH
6226: LD_INT 36
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 101
6268: PUSH
6269: LD_INT 102
6271: PUSH
6272: LD_INT 103
6274: PUSH
6275: LD_INT 104
6277: PUSH
6278: LD_INT 105
6280: PUSH
6281: LD_INT 106
6283: PUSH
6284: LD_INT 107
6286: PUSH
6287: LD_INT 108
6289: PUSH
6290: LD_INT 109
6292: PUSH
6293: LD_INT 110
6295: PUSH
6296: LD_INT 111
6298: PUSH
6299: LD_INT 112
6301: PUSH
6302: LD_INT 113
6304: PUSH
6305: LD_INT 114
6307: PUSH
6308: LD_INT 116
6310: PUSH
6311: LD_INT 117
6313: PUSH
6314: LD_INT 118
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: ST_TO_ADDR
6340: GO 6739
6342: LD_INT 18
6344: DOUBLE
6345: EQUAL
6346: IFTRUE 6350
6348: GO 6498
6350: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: LD_INT 5
6364: PUSH
6365: LD_INT 7
6367: PUSH
6368: LD_INT 11
6370: PUSH
6371: LD_INT 12
6373: PUSH
6374: LD_INT 15
6376: PUSH
6377: LD_INT 16
6379: PUSH
6380: LD_INT 20
6382: PUSH
6383: LD_INT 21
6385: PUSH
6386: LD_INT 22
6388: PUSH
6389: LD_INT 23
6391: PUSH
6392: LD_INT 25
6394: PUSH
6395: LD_INT 26
6397: PUSH
6398: LD_INT 30
6400: PUSH
6401: LD_INT 31
6403: PUSH
6404: LD_INT 32
6406: PUSH
6407: LD_INT 33
6409: PUSH
6410: LD_INT 34
6412: PUSH
6413: LD_INT 35
6415: PUSH
6416: LD_INT 36
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 101
6444: PUSH
6445: LD_INT 102
6447: PUSH
6448: LD_INT 103
6450: PUSH
6451: LD_INT 106
6453: PUSH
6454: LD_INT 108
6456: PUSH
6457: LD_INT 112
6459: PUSH
6460: LD_INT 113
6462: PUSH
6463: LD_INT 114
6465: PUSH
6466: LD_INT 115
6468: PUSH
6469: LD_INT 116
6471: PUSH
6472: LD_INT 117
6474: PUSH
6475: LD_INT 118
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: ST_TO_ADDR
6496: GO 6739
6498: LD_INT 19
6500: DOUBLE
6501: EQUAL
6502: IFTRUE 6506
6504: GO 6738
6506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6507: LD_ADDR_VAR 0 2
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: LD_INT 4
6523: PUSH
6524: LD_INT 5
6526: PUSH
6527: LD_INT 6
6529: PUSH
6530: LD_INT 7
6532: PUSH
6533: LD_INT 8
6535: PUSH
6536: LD_INT 9
6538: PUSH
6539: LD_INT 10
6541: PUSH
6542: LD_INT 11
6544: PUSH
6545: LD_INT 12
6547: PUSH
6548: LD_INT 13
6550: PUSH
6551: LD_INT 14
6553: PUSH
6554: LD_INT 15
6556: PUSH
6557: LD_INT 16
6559: PUSH
6560: LD_INT 17
6562: PUSH
6563: LD_INT 18
6565: PUSH
6566: LD_INT 19
6568: PUSH
6569: LD_INT 20
6571: PUSH
6572: LD_INT 21
6574: PUSH
6575: LD_INT 22
6577: PUSH
6578: LD_INT 23
6580: PUSH
6581: LD_INT 24
6583: PUSH
6584: LD_INT 25
6586: PUSH
6587: LD_INT 26
6589: PUSH
6590: LD_INT 27
6592: PUSH
6593: LD_INT 28
6595: PUSH
6596: LD_INT 29
6598: PUSH
6599: LD_INT 30
6601: PUSH
6602: LD_INT 31
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 33
6610: PUSH
6611: LD_INT 34
6613: PUSH
6614: LD_INT 35
6616: PUSH
6617: LD_INT 36
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 101
6660: PUSH
6661: LD_INT 102
6663: PUSH
6664: LD_INT 103
6666: PUSH
6667: LD_INT 104
6669: PUSH
6670: LD_INT 105
6672: PUSH
6673: LD_INT 106
6675: PUSH
6676: LD_INT 107
6678: PUSH
6679: LD_INT 108
6681: PUSH
6682: LD_INT 109
6684: PUSH
6685: LD_INT 110
6687: PUSH
6688: LD_INT 111
6690: PUSH
6691: LD_INT 112
6693: PUSH
6694: LD_INT 113
6696: PUSH
6697: LD_INT 114
6699: PUSH
6700: LD_INT 115
6702: PUSH
6703: LD_INT 116
6705: PUSH
6706: LD_INT 117
6708: PUSH
6709: LD_INT 118
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: ST_TO_ADDR
6736: GO 6739
6738: POP
// end else
6739: GO 6970
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6741: LD_ADDR_VAR 0 2
6745: PUSH
6746: LD_INT 1
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: LD_INT 4
6757: PUSH
6758: LD_INT 5
6760: PUSH
6761: LD_INT 6
6763: PUSH
6764: LD_INT 7
6766: PUSH
6767: LD_INT 8
6769: PUSH
6770: LD_INT 9
6772: PUSH
6773: LD_INT 10
6775: PUSH
6776: LD_INT 11
6778: PUSH
6779: LD_INT 12
6781: PUSH
6782: LD_INT 13
6784: PUSH
6785: LD_INT 14
6787: PUSH
6788: LD_INT 15
6790: PUSH
6791: LD_INT 16
6793: PUSH
6794: LD_INT 17
6796: PUSH
6797: LD_INT 18
6799: PUSH
6800: LD_INT 19
6802: PUSH
6803: LD_INT 20
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 23
6814: PUSH
6815: LD_INT 24
6817: PUSH
6818: LD_INT 25
6820: PUSH
6821: LD_INT 26
6823: PUSH
6824: LD_INT 27
6826: PUSH
6827: LD_INT 28
6829: PUSH
6830: LD_INT 29
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 31
6838: PUSH
6839: LD_INT 32
6841: PUSH
6842: LD_INT 33
6844: PUSH
6845: LD_INT 34
6847: PUSH
6848: LD_INT 35
6850: PUSH
6851: LD_INT 36
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 101
6894: PUSH
6895: LD_INT 102
6897: PUSH
6898: LD_INT 103
6900: PUSH
6901: LD_INT 104
6903: PUSH
6904: LD_INT 105
6906: PUSH
6907: LD_INT 106
6909: PUSH
6910: LD_INT 107
6912: PUSH
6913: LD_INT 108
6915: PUSH
6916: LD_INT 109
6918: PUSH
6919: LD_INT 110
6921: PUSH
6922: LD_INT 111
6924: PUSH
6925: LD_INT 112
6927: PUSH
6928: LD_INT 113
6930: PUSH
6931: LD_INT 114
6933: PUSH
6934: LD_INT 115
6936: PUSH
6937: LD_INT 116
6939: PUSH
6940: LD_INT 117
6942: PUSH
6943: LD_INT 118
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: ST_TO_ADDR
// if result then
6970: LD_VAR 0 2
6974: IFFALSE 7760
// begin normal :=  ;
6976: LD_ADDR_VAR 0 5
6980: PUSH
6981: LD_STRING 
6983: ST_TO_ADDR
// hardcore :=  ;
6984: LD_ADDR_VAR 0 6
6988: PUSH
6989: LD_STRING 
6991: ST_TO_ADDR
// active :=  ;
6992: LD_ADDR_VAR 0 7
6996: PUSH
6997: LD_STRING 
6999: ST_TO_ADDR
// for i = 1 to normalCounter do
7000: LD_ADDR_VAR 0 8
7004: PUSH
7005: DOUBLE
7006: LD_INT 1
7008: DEC
7009: ST_TO_ADDR
7010: LD_EXP 8
7014: PUSH
7015: FOR_TO
7016: IFFALSE 7117
// begin tmp := 0 ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: LD_STRING 0
7025: ST_TO_ADDR
// if result [ 1 ] then
7026: LD_VAR 0 2
7030: PUSH
7031: LD_INT 1
7033: ARRAY
7034: IFFALSE 7099
// if result [ 1 ] [ 1 ] = i then
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PUSH
7045: LD_INT 1
7047: ARRAY
7048: PUSH
7049: LD_VAR 0 8
7053: EQUAL
7054: IFFALSE 7099
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7056: LD_ADDR_VAR 0 2
7060: PUSH
7061: LD_VAR 0 2
7065: PPUSH
7066: LD_INT 1
7068: PPUSH
7069: LD_VAR 0 2
7073: PUSH
7074: LD_INT 1
7076: ARRAY
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: CALL_OW 3
7085: PPUSH
7086: CALL_OW 1
7090: ST_TO_ADDR
// tmp := 1 ;
7091: LD_ADDR_VAR 0 3
7095: PUSH
7096: LD_STRING 1
7098: ST_TO_ADDR
// end ; normal := normal & tmp ;
7099: LD_ADDR_VAR 0 5
7103: PUSH
7104: LD_VAR 0 5
7108: PUSH
7109: LD_VAR 0 3
7113: STR
7114: ST_TO_ADDR
// end ;
7115: GO 7015
7117: POP
7118: POP
// for i = 1 to hardcoreCounter do
7119: LD_ADDR_VAR 0 8
7123: PUSH
7124: DOUBLE
7125: LD_INT 1
7127: DEC
7128: ST_TO_ADDR
7129: LD_EXP 9
7133: PUSH
7134: FOR_TO
7135: IFFALSE 7240
// begin tmp := 0 ;
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_STRING 0
7144: ST_TO_ADDR
// if result [ 2 ] then
7145: LD_VAR 0 2
7149: PUSH
7150: LD_INT 2
7152: ARRAY
7153: IFFALSE 7222
// if result [ 2 ] [ 1 ] = 100 + i then
7155: LD_VAR 0 2
7159: PUSH
7160: LD_INT 2
7162: ARRAY
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: PUSH
7168: LD_INT 100
7170: PUSH
7171: LD_VAR 0 8
7175: PLUS
7176: EQUAL
7177: IFFALSE 7222
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7179: LD_ADDR_VAR 0 2
7183: PUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: LD_INT 2
7191: PPUSH
7192: LD_VAR 0 2
7196: PUSH
7197: LD_INT 2
7199: ARRAY
7200: PPUSH
7201: LD_INT 1
7203: PPUSH
7204: CALL_OW 3
7208: PPUSH
7209: CALL_OW 1
7213: ST_TO_ADDR
// tmp := 1 ;
7214: LD_ADDR_VAR 0 3
7218: PUSH
7219: LD_STRING 1
7221: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7222: LD_ADDR_VAR 0 6
7226: PUSH
7227: LD_VAR 0 6
7231: PUSH
7232: LD_VAR 0 3
7236: STR
7237: ST_TO_ADDR
// end ;
7238: GO 7134
7240: POP
7241: POP
// if isGameLoad then
7242: LD_VAR 0 1
7246: IFFALSE 7721
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7248: LD_ADDR_VAR 0 4
7252: PUSH
7253: LD_EXP 12
7257: PUSH
7258: LD_EXP 11
7262: PUSH
7263: LD_EXP 13
7267: PUSH
7268: LD_EXP 10
7272: PUSH
7273: LD_EXP 14
7277: PUSH
7278: LD_EXP 15
7282: PUSH
7283: LD_EXP 16
7287: PUSH
7288: LD_EXP 17
7292: PUSH
7293: LD_EXP 18
7297: PUSH
7298: LD_EXP 19
7302: PUSH
7303: LD_EXP 20
7307: PUSH
7308: LD_EXP 21
7312: PUSH
7313: LD_EXP 22
7317: PUSH
7318: LD_EXP 23
7322: PUSH
7323: LD_EXP 31
7327: PUSH
7328: LD_EXP 32
7332: PUSH
7333: LD_EXP 33
7337: PUSH
7338: LD_EXP 34
7342: PUSH
7343: LD_EXP 36
7347: PUSH
7348: LD_EXP 37
7352: PUSH
7353: LD_EXP 38
7357: PUSH
7358: LD_EXP 41
7362: PUSH
7363: LD_EXP 43
7367: PUSH
7368: LD_EXP 44
7372: PUSH
7373: LD_EXP 45
7377: PUSH
7378: LD_EXP 47
7382: PUSH
7383: LD_EXP 48
7387: PUSH
7388: LD_EXP 51
7392: PUSH
7393: LD_EXP 52
7397: PUSH
7398: LD_EXP 53
7402: PUSH
7403: LD_EXP 54
7407: PUSH
7408: LD_EXP 55
7412: PUSH
7413: LD_EXP 56
7417: PUSH
7418: LD_EXP 57
7422: PUSH
7423: LD_EXP 58
7427: PUSH
7428: LD_EXP 59
7432: PUSH
7433: LD_EXP 24
7437: PUSH
7438: LD_EXP 25
7442: PUSH
7443: LD_EXP 28
7447: PUSH
7448: LD_EXP 29
7452: PUSH
7453: LD_EXP 30
7457: PUSH
7458: LD_EXP 26
7462: PUSH
7463: LD_EXP 27
7467: PUSH
7468: LD_EXP 35
7472: PUSH
7473: LD_EXP 39
7477: PUSH
7478: LD_EXP 40
7482: PUSH
7483: LD_EXP 42
7487: PUSH
7488: LD_EXP 46
7492: PUSH
7493: LD_EXP 49
7497: PUSH
7498: LD_EXP 50
7502: PUSH
7503: LD_EXP 60
7507: PUSH
7508: LD_EXP 61
7512: PUSH
7513: LD_EXP 62
7517: PUSH
7518: LD_EXP 63
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: ST_TO_ADDR
// tmp :=  ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_STRING 
7586: ST_TO_ADDR
// for i = 1 to normalCounter do
7587: LD_ADDR_VAR 0 8
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_EXP 8
7601: PUSH
7602: FOR_TO
7603: IFFALSE 7639
// begin if flags [ i ] then
7605: LD_VAR 0 4
7609: PUSH
7610: LD_VAR 0 8
7614: ARRAY
7615: IFFALSE 7637
// tmp := tmp & i & ; ;
7617: LD_ADDR_VAR 0 3
7621: PUSH
7622: LD_VAR 0 3
7626: PUSH
7627: LD_VAR 0 8
7631: STR
7632: PUSH
7633: LD_STRING ;
7635: STR
7636: ST_TO_ADDR
// end ;
7637: GO 7602
7639: POP
7640: POP
// for i = 1 to hardcoreCounter do
7641: LD_ADDR_VAR 0 8
7645: PUSH
7646: DOUBLE
7647: LD_INT 1
7649: DEC
7650: ST_TO_ADDR
7651: LD_EXP 9
7655: PUSH
7656: FOR_TO
7657: IFFALSE 7703
// begin if flags [ normalCounter + i ] then
7659: LD_VAR 0 4
7663: PUSH
7664: LD_EXP 8
7668: PUSH
7669: LD_VAR 0 8
7673: PLUS
7674: ARRAY
7675: IFFALSE 7701
// tmp := tmp & ( 100 + i ) & ; ;
7677: LD_ADDR_VAR 0 3
7681: PUSH
7682: LD_VAR 0 3
7686: PUSH
7687: LD_INT 100
7689: PUSH
7690: LD_VAR 0 8
7694: PLUS
7695: STR
7696: PUSH
7697: LD_STRING ;
7699: STR
7700: ST_TO_ADDR
// end ;
7701: GO 7656
7703: POP
7704: POP
// if tmp then
7705: LD_VAR 0 3
7709: IFFALSE 7721
// active := tmp ;
7711: LD_ADDR_VAR 0 7
7715: PUSH
7716: LD_VAR 0 3
7720: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7721: LD_STRING getStreamItemsFromMission("
7723: PUSH
7724: LD_VAR 0 5
7728: STR
7729: PUSH
7730: LD_STRING ","
7732: STR
7733: PUSH
7734: LD_VAR 0 6
7738: STR
7739: PUSH
7740: LD_STRING ","
7742: STR
7743: PUSH
7744: LD_VAR 0 7
7748: STR
7749: PUSH
7750: LD_STRING ")
7752: STR
7753: PPUSH
7754: CALL_OW 559
// end else
7758: GO 7767
// ToLua ( getStreamItemsFromMission("","","") ) ;
7760: LD_STRING getStreamItemsFromMission("","","")
7762: PPUSH
7763: CALL_OW 559
// end ;
7767: LD_VAR 0 2
7771: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7772: LD_EXP 7
7776: PUSH
7777: LD_EXP 12
7781: AND
7782: IFFALSE 7906
7784: GO 7786
7786: DISABLE
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
// begin enable ;
7791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7792: LD_ADDR_VAR 0 2
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_OWVAR 2
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 2
7811: PUSH
7812: LD_INT 34
7814: PUSH
7815: LD_INT 7
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 34
7824: PUSH
7825: LD_INT 45
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 34
7834: PUSH
7835: LD_INT 28
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 34
7844: PUSH
7845: LD_INT 47
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PPUSH
7863: CALL_OW 69
7867: ST_TO_ADDR
// if not tmp then
7868: LD_VAR 0 2
7872: NOT
7873: IFFALSE 7877
// exit ;
7875: GO 7906
// for i in tmp do
7877: LD_ADDR_VAR 0 1
7881: PUSH
7882: LD_VAR 0 2
7886: PUSH
7887: FOR_IN
7888: IFFALSE 7904
// begin SetLives ( i , 0 ) ;
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_INT 0
7897: PPUSH
7898: CALL_OW 234
// end ;
7902: GO 7887
7904: POP
7905: POP
// end ;
7906: PPOPN 2
7908: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7909: LD_EXP 7
7913: PUSH
7914: LD_EXP 13
7918: AND
7919: IFFALSE 8003
7921: GO 7923
7923: DISABLE
7924: LD_INT 0
7926: PPUSH
7927: PPUSH
// begin enable ;
7928: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7929: LD_ADDR_VAR 0 2
7933: PUSH
7934: LD_INT 22
7936: PUSH
7937: LD_OWVAR 2
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 32
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PPUSH
7960: CALL_OW 69
7964: ST_TO_ADDR
// if not tmp then
7965: LD_VAR 0 2
7969: NOT
7970: IFFALSE 7974
// exit ;
7972: GO 8003
// for i in tmp do
7974: LD_ADDR_VAR 0 1
7978: PUSH
7979: LD_VAR 0 2
7983: PUSH
7984: FOR_IN
7985: IFFALSE 8001
// begin SetLives ( i , 0 ) ;
7987: LD_VAR 0 1
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 234
// end ;
7999: GO 7984
8001: POP
8002: POP
// end ;
8003: PPOPN 2
8005: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8006: LD_EXP 7
8010: PUSH
8011: LD_EXP 10
8015: AND
8016: IFFALSE 8109
8018: GO 8020
8020: DISABLE
8021: LD_INT 0
8023: PPUSH
// begin enable ;
8024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8025: LD_ADDR_VAR 0 1
8029: PUSH
8030: LD_INT 22
8032: PUSH
8033: LD_OWVAR 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 2
8044: PUSH
8045: LD_INT 25
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 25
8057: PUSH
8058: LD_INT 9
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 25
8067: PUSH
8068: LD_INT 8
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 69
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8107
// begin SetClass ( i , 1 ) ;
8093: LD_VAR 0 1
8097: PPUSH
8098: LD_INT 1
8100: PPUSH
8101: CALL_OW 336
// end ;
8105: GO 8090
8107: POP
8108: POP
// end ;
8109: PPOPN 1
8111: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8112: LD_EXP 7
8116: PUSH
8117: LD_EXP 11
8121: AND
8122: PUSH
8123: LD_OWVAR 65
8127: PUSH
8128: LD_INT 7
8130: LESS
8131: AND
8132: IFFALSE 8146
8134: GO 8136
8136: DISABLE
// begin enable ;
8137: ENABLE
// game_speed := 7 ;
8138: LD_ADDR_OWVAR 65
8142: PUSH
8143: LD_INT 7
8145: ST_TO_ADDR
// end ;
8146: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8147: LD_EXP 7
8151: PUSH
8152: LD_EXP 14
8156: AND
8157: IFFALSE 8359
8159: GO 8161
8161: DISABLE
8162: LD_INT 0
8164: PPUSH
8165: PPUSH
8166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8167: LD_ADDR_VAR 0 3
8171: PUSH
8172: LD_INT 81
8174: PUSH
8175: LD_OWVAR 2
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 21
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 69
8202: ST_TO_ADDR
// if not tmp then
8203: LD_VAR 0 3
8207: NOT
8208: IFFALSE 8212
// exit ;
8210: GO 8359
// if tmp > 5 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 5
8219: GREATER
8220: IFFALSE 8232
// k := 5 else
8222: LD_ADDR_VAR 0 2
8226: PUSH
8227: LD_INT 5
8229: ST_TO_ADDR
8230: GO 8242
// k := tmp ;
8232: LD_ADDR_VAR 0 2
8236: PUSH
8237: LD_VAR 0 3
8241: ST_TO_ADDR
// for i := 1 to k do
8242: LD_ADDR_VAR 0 1
8246: PUSH
8247: DOUBLE
8248: LD_INT 1
8250: DEC
8251: ST_TO_ADDR
8252: LD_VAR 0 2
8256: PUSH
8257: FOR_TO
8258: IFFALSE 8357
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_VAR 0 1
8269: ARRAY
8270: PPUSH
8271: LD_VAR 0 1
8275: PUSH
8276: LD_INT 4
8278: MOD
8279: PUSH
8280: LD_INT 1
8282: PLUS
8283: PPUSH
8284: CALL_OW 259
8288: PUSH
8289: LD_INT 10
8291: LESS
8292: IFFALSE 8355
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8294: LD_VAR 0 3
8298: PUSH
8299: LD_VAR 0 1
8303: ARRAY
8304: PPUSH
8305: LD_VAR 0 1
8309: PUSH
8310: LD_INT 4
8312: MOD
8313: PUSH
8314: LD_INT 1
8316: PLUS
8317: PPUSH
8318: LD_VAR 0 3
8322: PUSH
8323: LD_VAR 0 1
8327: ARRAY
8328: PPUSH
8329: LD_VAR 0 1
8333: PUSH
8334: LD_INT 4
8336: MOD
8337: PUSH
8338: LD_INT 1
8340: PLUS
8341: PPUSH
8342: CALL_OW 259
8346: PUSH
8347: LD_INT 1
8349: PLUS
8350: PPUSH
8351: CALL_OW 237
8355: GO 8257
8357: POP
8358: POP
// end ;
8359: PPOPN 3
8361: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8362: LD_EXP 7
8366: PUSH
8367: LD_EXP 15
8371: AND
8372: IFFALSE 8392
8374: GO 8376
8376: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8377: LD_INT 4
8379: PPUSH
8380: LD_OWVAR 2
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 324
8392: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8393: LD_EXP 7
8397: PUSH
8398: LD_EXP 44
8402: AND
8403: IFFALSE 8423
8405: GO 8407
8407: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8408: LD_INT 19
8410: PPUSH
8411: LD_OWVAR 2
8415: PPUSH
8416: LD_INT 0
8418: PPUSH
8419: CALL_OW 324
8423: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8424: LD_EXP 7
8428: PUSH
8429: LD_EXP 16
8433: AND
8434: IFFALSE 8536
8436: GO 8438
8438: DISABLE
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin enable ;
8443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_INT 22
8451: PUSH
8452: LD_OWVAR 2
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: LD_INT 34
8466: PUSH
8467: LD_INT 11
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 34
8476: PUSH
8477: LD_INT 30
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 69
8497: ST_TO_ADDR
// if not tmp then
8498: LD_VAR 0 2
8502: NOT
8503: IFFALSE 8507
// exit ;
8505: GO 8536
// for i in tmp do
8507: LD_ADDR_VAR 0 1
8511: PUSH
8512: LD_VAR 0 2
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8534
// begin SetLives ( i , 0 ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_INT 0
8527: PPUSH
8528: CALL_OW 234
// end ;
8532: GO 8517
8534: POP
8535: POP
// end ;
8536: PPOPN 2
8538: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8539: LD_EXP 7
8543: PUSH
8544: LD_EXP 17
8548: AND
8549: IFFALSE 8569
8551: GO 8553
8553: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8554: LD_INT 32
8556: PPUSH
8557: LD_OWVAR 2
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 324
8569: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8570: LD_EXP 7
8574: PUSH
8575: LD_EXP 18
8579: AND
8580: IFFALSE 8761
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
8589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_OWVAR 2
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 33
8609: PUSH
8610: LD_INT 3
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PPUSH
8621: CALL_OW 69
8625: ST_TO_ADDR
// if not tmp then
8626: LD_VAR 0 2
8630: NOT
8631: IFFALSE 8635
// exit ;
8633: GO 8761
// side := 0 ;
8635: LD_ADDR_VAR 0 3
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// for i := 1 to 8 do
8643: LD_ADDR_VAR 0 1
8647: PUSH
8648: DOUBLE
8649: LD_INT 1
8651: DEC
8652: ST_TO_ADDR
8653: LD_INT 8
8655: PUSH
8656: FOR_TO
8657: IFFALSE 8705
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8659: LD_OWVAR 2
8663: PUSH
8664: LD_VAR 0 1
8668: NONEQUAL
8669: PUSH
8670: LD_OWVAR 2
8674: PPUSH
8675: LD_VAR 0 1
8679: PPUSH
8680: CALL_OW 81
8684: PUSH
8685: LD_INT 2
8687: EQUAL
8688: AND
8689: IFFALSE 8703
// begin side := i ;
8691: LD_ADDR_VAR 0 3
8695: PUSH
8696: LD_VAR 0 1
8700: ST_TO_ADDR
// break ;
8701: GO 8705
// end ;
8703: GO 8656
8705: POP
8706: POP
// if not side then
8707: LD_VAR 0 3
8711: NOT
8712: IFFALSE 8716
// exit ;
8714: GO 8761
// for i := 1 to tmp do
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: DOUBLE
8722: LD_INT 1
8724: DEC
8725: ST_TO_ADDR
8726: LD_VAR 0 2
8730: PUSH
8731: FOR_TO
8732: IFFALSE 8759
// if Prob ( 60 ) then
8734: LD_INT 60
8736: PPUSH
8737: CALL_OW 13
8741: IFFALSE 8757
// SetSide ( i , side ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_VAR 0 3
8752: PPUSH
8753: CALL_OW 235
8757: GO 8731
8759: POP
8760: POP
// end ;
8761: PPOPN 3
8763: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8764: LD_EXP 7
8768: PUSH
8769: LD_EXP 20
8773: AND
8774: IFFALSE 8893
8776: GO 8778
8778: DISABLE
8779: LD_INT 0
8781: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_INT 22
8789: PUSH
8790: LD_OWVAR 2
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 21
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 3
8811: PUSH
8812: LD_INT 23
8814: PUSH
8815: LD_INT 0
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: PUSH
8836: FOR_IN
8837: IFFALSE 8891
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 257
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: LD_INT 3
8857: PUSH
8858: LD_INT 4
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: IN
8867: IFFALSE 8889
// SetClass ( un , rand ( 1 , 4 ) ) ;
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_INT 4
8879: PPUSH
8880: CALL_OW 12
8884: PPUSH
8885: CALL_OW 336
8889: GO 8836
8891: POP
8892: POP
// end ;
8893: PPOPN 1
8895: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8896: LD_EXP 7
8900: PUSH
8901: LD_EXP 19
8905: AND
8906: IFFALSE 8985
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_OWVAR 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 21
8933: PUSH
8934: LD_INT 3
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// if not tmp then
8950: LD_VAR 0 1
8954: NOT
8955: IFFALSE 8959
// exit ;
8957: GO 8985
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8959: LD_VAR 0 1
8963: PUSH
8964: LD_INT 1
8966: PPUSH
8967: LD_VAR 0 1
8971: PPUSH
8972: CALL_OW 12
8976: ARRAY
8977: PPUSH
8978: LD_INT 100
8980: PPUSH
8981: CALL_OW 234
// end ;
8985: PPOPN 1
8987: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8988: LD_EXP 7
8992: PUSH
8993: LD_EXP 21
8997: AND
8998: IFFALSE 9096
9000: GO 9002
9002: DISABLE
9003: LD_INT 0
9005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9006: LD_ADDR_VAR 0 1
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_OWVAR 2
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 21
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PPUSH
9037: CALL_OW 69
9041: ST_TO_ADDR
// if not tmp then
9042: LD_VAR 0 1
9046: NOT
9047: IFFALSE 9051
// exit ;
9049: GO 9096
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9051: LD_VAR 0 1
9055: PUSH
9056: LD_INT 1
9058: PPUSH
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 12
9068: ARRAY
9069: PPUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 12
9080: PPUSH
9081: LD_INT 3000
9083: PPUSH
9084: LD_INT 9000
9086: PPUSH
9087: CALL_OW 12
9091: PPUSH
9092: CALL_OW 492
// end ;
9096: PPOPN 1
9098: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9099: LD_EXP 7
9103: PUSH
9104: LD_EXP 22
9108: AND
9109: IFFALSE 9129
9111: GO 9113
9113: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9114: LD_INT 1
9116: PPUSH
9117: LD_OWVAR 2
9121: PPUSH
9122: LD_INT 0
9124: PPUSH
9125: CALL_OW 324
9129: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9130: LD_EXP 7
9134: PUSH
9135: LD_EXP 23
9139: AND
9140: IFFALSE 9223
9142: GO 9144
9144: DISABLE
9145: LD_INT 0
9147: PPUSH
9148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_OWVAR 2
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: LD_INT 3
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: ST_TO_ADDR
// if not tmp then
9185: LD_VAR 0 2
9189: NOT
9190: IFFALSE 9194
// exit ;
9192: GO 9223
// for i in tmp do
9194: LD_ADDR_VAR 0 1
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: FOR_IN
9205: IFFALSE 9221
// SetBLevel ( i , 10 ) ;
9207: LD_VAR 0 1
9211: PPUSH
9212: LD_INT 10
9214: PPUSH
9215: CALL_OW 241
9219: GO 9204
9221: POP
9222: POP
// end ;
9223: PPOPN 2
9225: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9226: LD_EXP 7
9230: PUSH
9231: LD_EXP 24
9235: AND
9236: IFFALSE 9347
9238: GO 9240
9240: DISABLE
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
9245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9246: LD_ADDR_VAR 0 3
9250: PUSH
9251: LD_INT 22
9253: PUSH
9254: LD_OWVAR 2
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PPUSH
9277: CALL_OW 69
9281: ST_TO_ADDR
// if not tmp then
9282: LD_VAR 0 3
9286: NOT
9287: IFFALSE 9291
// exit ;
9289: GO 9347
// un := tmp [ rand ( 1 , tmp ) ] ;
9291: LD_ADDR_VAR 0 2
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: LD_INT 1
9303: PPUSH
9304: LD_VAR 0 3
9308: PPUSH
9309: CALL_OW 12
9313: ARRAY
9314: ST_TO_ADDR
// if Crawls ( un ) then
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 318
9324: IFFALSE 9335
// ComWalk ( un ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9335: LD_VAR 0 2
9339: PPUSH
9340: LD_INT 5
9342: PPUSH
9343: CALL_OW 336
// end ;
9347: PPOPN 3
9349: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9350: LD_EXP 7
9354: PUSH
9355: LD_EXP 25
9359: AND
9360: PUSH
9361: LD_OWVAR 67
9365: PUSH
9366: LD_INT 4
9368: LESS
9369: AND
9370: IFFALSE 9389
9372: GO 9374
9374: DISABLE
// begin Difficulty := Difficulty + 1 ;
9375: LD_ADDR_OWVAR 67
9379: PUSH
9380: LD_OWVAR 67
9384: PUSH
9385: LD_INT 1
9387: PLUS
9388: ST_TO_ADDR
// end ;
9389: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9390: LD_EXP 7
9394: PUSH
9395: LD_EXP 26
9399: AND
9400: IFFALSE 9503
9402: GO 9404
9404: DISABLE
9405: LD_INT 0
9407: PPUSH
// begin for i := 1 to 5 do
9408: LD_ADDR_VAR 0 1
9412: PUSH
9413: DOUBLE
9414: LD_INT 1
9416: DEC
9417: ST_TO_ADDR
9418: LD_INT 5
9420: PUSH
9421: FOR_TO
9422: IFFALSE 9501
// begin uc_nation := nation_nature ;
9424: LD_ADDR_OWVAR 21
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// uc_side := 0 ;
9432: LD_ADDR_OWVAR 20
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9440: LD_ADDR_OWVAR 29
9444: PUSH
9445: LD_INT 12
9447: PUSH
9448: LD_INT 12
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: ST_TO_ADDR
// hc_agressivity := 20 ;
9455: LD_ADDR_OWVAR 35
9459: PUSH
9460: LD_INT 20
9462: ST_TO_ADDR
// hc_class := class_tiger ;
9463: LD_ADDR_OWVAR 28
9467: PUSH
9468: LD_INT 14
9470: ST_TO_ADDR
// hc_gallery :=  ;
9471: LD_ADDR_OWVAR 33
9475: PUSH
9476: LD_STRING 
9478: ST_TO_ADDR
// hc_name :=  ;
9479: LD_ADDR_OWVAR 26
9483: PUSH
9484: LD_STRING 
9486: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9487: CALL_OW 44
9491: PPUSH
9492: LD_INT 0
9494: PPUSH
9495: CALL_OW 51
// end ;
9499: GO 9421
9501: POP
9502: POP
// end ;
9503: PPOPN 1
9505: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9506: LD_EXP 7
9510: PUSH
9511: LD_EXP 27
9515: AND
9516: IFFALSE 9525
9518: GO 9520
9520: DISABLE
// StreamSibBomb ;
9521: CALL 9526 0 0
9525: END
// export function StreamSibBomb ; var i , x , y ; begin
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
// result := false ;
9532: LD_ADDR_VAR 0 1
9536: PUSH
9537: LD_INT 0
9539: ST_TO_ADDR
// for i := 1 to 16 do
9540: LD_ADDR_VAR 0 2
9544: PUSH
9545: DOUBLE
9546: LD_INT 1
9548: DEC
9549: ST_TO_ADDR
9550: LD_INT 16
9552: PUSH
9553: FOR_TO
9554: IFFALSE 9753
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: LD_INT 10
9563: PUSH
9564: LD_INT 20
9566: PUSH
9567: LD_INT 30
9569: PUSH
9570: LD_INT 40
9572: PUSH
9573: LD_INT 50
9575: PUSH
9576: LD_INT 60
9578: PUSH
9579: LD_INT 70
9581: PUSH
9582: LD_INT 80
9584: PUSH
9585: LD_INT 90
9587: PUSH
9588: LD_INT 100
9590: PUSH
9591: LD_INT 110
9593: PUSH
9594: LD_INT 120
9596: PUSH
9597: LD_INT 130
9599: PUSH
9600: LD_INT 140
9602: PUSH
9603: LD_INT 150
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_INT 15
9628: PPUSH
9629: CALL_OW 12
9633: ARRAY
9634: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9635: LD_ADDR_VAR 0 4
9639: PUSH
9640: LD_INT 10
9642: PUSH
9643: LD_INT 20
9645: PUSH
9646: LD_INT 30
9648: PUSH
9649: LD_INT 40
9651: PUSH
9652: LD_INT 50
9654: PUSH
9655: LD_INT 60
9657: PUSH
9658: LD_INT 70
9660: PUSH
9661: LD_INT 80
9663: PUSH
9664: LD_INT 90
9666: PUSH
9667: LD_INT 100
9669: PUSH
9670: LD_INT 110
9672: PUSH
9673: LD_INT 120
9675: PUSH
9676: LD_INT 130
9678: PUSH
9679: LD_INT 140
9681: PUSH
9682: LD_INT 150
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 1
9704: PPUSH
9705: LD_INT 15
9707: PPUSH
9708: CALL_OW 12
9712: ARRAY
9713: ST_TO_ADDR
// if ValidHex ( x , y ) then
9714: LD_VAR 0 3
9718: PPUSH
9719: LD_VAR 0 4
9723: PPUSH
9724: CALL_OW 488
9728: IFFALSE 9751
// begin result := [ x , y ] ;
9730: LD_ADDR_VAR 0 1
9734: PUSH
9735: LD_VAR 0 3
9739: PUSH
9740: LD_VAR 0 4
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: ST_TO_ADDR
// break ;
9749: GO 9753
// end ; end ;
9751: GO 9553
9753: POP
9754: POP
// if result then
9755: LD_VAR 0 1
9759: IFFALSE 9819
// begin ToLua ( playSibBomb() ) ;
9761: LD_STRING playSibBomb()
9763: PPUSH
9764: CALL_OW 559
// wait ( 0 0$14 ) ;
9768: LD_INT 490
9770: PPUSH
9771: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9775: LD_VAR 0 1
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: PPUSH
9784: LD_VAR 0 1
9788: PUSH
9789: LD_INT 2
9791: ARRAY
9792: PPUSH
9793: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9797: LD_VAR 0 1
9801: PUSH
9802: LD_INT 1
9804: ARRAY
9805: PPUSH
9806: LD_VAR 0 1
9810: PUSH
9811: LD_INT 2
9813: ARRAY
9814: PPUSH
9815: CALL_OW 429
// end ; end ;
9819: LD_VAR 0 1
9823: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9824: LD_EXP 7
9828: PUSH
9829: LD_EXP 29
9833: AND
9834: IFFALSE 9846
9836: GO 9838
9838: DISABLE
// YouLost (  ) ;
9839: LD_STRING 
9841: PPUSH
9842: CALL_OW 104
9846: END
// every 0 0$1 trigger StreamModeActive and sFog do
9847: LD_EXP 7
9851: PUSH
9852: LD_EXP 28
9856: AND
9857: IFFALSE 9871
9859: GO 9861
9861: DISABLE
// FogOff ( your_side ) ;
9862: LD_OWVAR 2
9866: PPUSH
9867: CALL_OW 344
9871: END
// every 0 0$1 trigger StreamModeActive and sSun do
9872: LD_EXP 7
9876: PUSH
9877: LD_EXP 30
9881: AND
9882: IFFALSE 9910
9884: GO 9886
9886: DISABLE
// begin solar_recharge_percent := 0 ;
9887: LD_ADDR_OWVAR 79
9891: PUSH
9892: LD_INT 0
9894: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9895: LD_INT 10500
9897: PPUSH
9898: CALL_OW 67
// solar_recharge_percent := 100 ;
9902: LD_ADDR_OWVAR 79
9906: PUSH
9907: LD_INT 100
9909: ST_TO_ADDR
// end ;
9910: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9911: LD_EXP 7
9915: PUSH
9916: LD_EXP 31
9920: AND
9921: IFFALSE 10160
9923: GO 9925
9925: DISABLE
9926: LD_INT 0
9928: PPUSH
9929: PPUSH
9930: PPUSH
// begin tmp := [ ] ;
9931: LD_ADDR_VAR 0 3
9935: PUSH
9936: EMPTY
9937: ST_TO_ADDR
// for i := 1 to 6 do
9938: LD_ADDR_VAR 0 1
9942: PUSH
9943: DOUBLE
9944: LD_INT 1
9946: DEC
9947: ST_TO_ADDR
9948: LD_INT 6
9950: PUSH
9951: FOR_TO
9952: IFFALSE 10057
// begin uc_nation := nation_nature ;
9954: LD_ADDR_OWVAR 21
9958: PUSH
9959: LD_INT 0
9961: ST_TO_ADDR
// uc_side := 0 ;
9962: LD_ADDR_OWVAR 20
9966: PUSH
9967: LD_INT 0
9969: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9970: LD_ADDR_OWVAR 29
9974: PUSH
9975: LD_INT 12
9977: PUSH
9978: LD_INT 12
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: ST_TO_ADDR
// hc_agressivity := 20 ;
9985: LD_ADDR_OWVAR 35
9989: PUSH
9990: LD_INT 20
9992: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9993: LD_ADDR_OWVAR 28
9997: PUSH
9998: LD_INT 17
10000: ST_TO_ADDR
// hc_gallery :=  ;
10001: LD_ADDR_OWVAR 33
10005: PUSH
10006: LD_STRING 
10008: ST_TO_ADDR
// hc_name :=  ;
10009: LD_ADDR_OWVAR 26
10013: PUSH
10014: LD_STRING 
10016: ST_TO_ADDR
// un := CreateHuman ;
10017: LD_ADDR_VAR 0 2
10021: PUSH
10022: CALL_OW 44
10026: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10027: LD_VAR 0 2
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: CALL_OW 51
// tmp := tmp ^ un ;
10039: LD_ADDR_VAR 0 3
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 2
10053: ADD
10054: ST_TO_ADDR
// end ;
10055: GO 9951
10057: POP
10058: POP
// repeat wait ( 0 0$1 ) ;
10059: LD_INT 35
10061: PPUSH
10062: CALL_OW 67
// for un in tmp do
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: LD_VAR 0 3
10075: PUSH
10076: FOR_IN
10077: IFFALSE 10151
// begin if IsDead ( un ) then
10079: LD_VAR 0 2
10083: PPUSH
10084: CALL_OW 301
10088: IFFALSE 10108
// begin tmp := tmp diff un ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 3
10099: PUSH
10100: LD_VAR 0 2
10104: DIFF
10105: ST_TO_ADDR
// continue ;
10106: GO 10076
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10108: LD_VAR 0 2
10112: PPUSH
10113: LD_INT 3
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_INT 0
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: PPUSH
10135: LD_VAR 0 2
10139: PPUSH
10140: CALL_OW 74
10144: PPUSH
10145: CALL_OW 115
// end ;
10149: GO 10076
10151: POP
10152: POP
// until not tmp ;
10153: LD_VAR 0 3
10157: NOT
10158: IFFALSE 10059
// end ;
10160: PPOPN 3
10162: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10163: LD_EXP 7
10167: PUSH
10168: LD_EXP 32
10172: AND
10173: IFFALSE 10227
10175: GO 10177
10177: DISABLE
// begin ToLua ( displayTroll(); ) ;
10178: LD_STRING displayTroll();
10180: PPUSH
10181: CALL_OW 559
// wait ( 3 3$00 ) ;
10185: LD_INT 6300
10187: PPUSH
10188: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10192: LD_STRING hideTroll();
10194: PPUSH
10195: CALL_OW 559
// wait ( 1 1$00 ) ;
10199: LD_INT 2100
10201: PPUSH
10202: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10206: LD_STRING displayTroll();
10208: PPUSH
10209: CALL_OW 559
// wait ( 1 1$00 ) ;
10213: LD_INT 2100
10215: PPUSH
10216: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10220: LD_STRING hideTroll();
10222: PPUSH
10223: CALL_OW 559
// end ;
10227: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10228: LD_EXP 7
10232: PUSH
10233: LD_EXP 33
10237: AND
10238: IFFALSE 10301
10240: GO 10242
10242: DISABLE
10243: LD_INT 0
10245: PPUSH
// begin p := 0 ;
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// repeat game_speed := 1 ;
10254: LD_ADDR_OWVAR 65
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10262: LD_INT 35
10264: PPUSH
10265: CALL_OW 67
// p := p + 1 ;
10269: LD_ADDR_VAR 0 1
10273: PUSH
10274: LD_VAR 0 1
10278: PUSH
10279: LD_INT 1
10281: PLUS
10282: ST_TO_ADDR
// until p >= 60 ;
10283: LD_VAR 0 1
10287: PUSH
10288: LD_INT 60
10290: GREATEREQUAL
10291: IFFALSE 10254
// game_speed := 4 ;
10293: LD_ADDR_OWVAR 65
10297: PUSH
10298: LD_INT 4
10300: ST_TO_ADDR
// end ;
10301: PPOPN 1
10303: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10304: LD_EXP 7
10308: PUSH
10309: LD_EXP 34
10313: AND
10314: IFFALSE 10460
10316: GO 10318
10318: DISABLE
10319: LD_INT 0
10321: PPUSH
10322: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10323: LD_ADDR_VAR 0 1
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_OWVAR 2
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 2
10342: PUSH
10343: LD_INT 30
10345: PUSH
10346: LD_INT 0
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 30
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: ST_TO_ADDR
// if not depot then
10377: LD_VAR 0 1
10381: NOT
10382: IFFALSE 10386
// exit ;
10384: GO 10460
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10386: LD_ADDR_VAR 0 2
10390: PUSH
10391: LD_VAR 0 1
10395: PUSH
10396: LD_INT 1
10398: PPUSH
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 12
10408: ARRAY
10409: PPUSH
10410: CALL_OW 274
10414: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10415: LD_VAR 0 2
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: LD_INT 0
10425: PPUSH
10426: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10430: LD_VAR 0 2
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 0
10440: PPUSH
10441: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10445: LD_VAR 0 2
10449: PPUSH
10450: LD_INT 3
10452: PPUSH
10453: LD_INT 0
10455: PPUSH
10456: CALL_OW 277
// end ;
10460: PPOPN 2
10462: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10463: LD_EXP 7
10467: PUSH
10468: LD_EXP 35
10472: AND
10473: IFFALSE 10570
10475: GO 10477
10477: DISABLE
10478: LD_INT 0
10480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_OWVAR 2
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: LD_INT 23
10513: PUSH
10514: LD_INT 0
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: ST_TO_ADDR
// if not tmp then
10535: LD_VAR 0 1
10539: NOT
10540: IFFALSE 10544
// exit ;
10542: GO 10570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10544: LD_VAR 0 1
10548: PUSH
10549: LD_INT 1
10551: PPUSH
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 12
10561: ARRAY
10562: PPUSH
10563: LD_INT 200
10565: PPUSH
10566: CALL_OW 234
// end ;
10570: PPOPN 1
10572: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10573: LD_EXP 7
10577: PUSH
10578: LD_EXP 36
10582: AND
10583: IFFALSE 10662
10585: GO 10587
10587: DISABLE
10588: LD_INT 0
10590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10591: LD_ADDR_VAR 0 1
10595: PUSH
10596: LD_INT 22
10598: PUSH
10599: LD_OWVAR 2
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 21
10610: PUSH
10611: LD_INT 2
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: ST_TO_ADDR
// if not tmp then
10627: LD_VAR 0 1
10631: NOT
10632: IFFALSE 10636
// exit ;
10634: GO 10662
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10636: LD_VAR 0 1
10640: PUSH
10641: LD_INT 1
10643: PPUSH
10644: LD_VAR 0 1
10648: PPUSH
10649: CALL_OW 12
10653: ARRAY
10654: PPUSH
10655: LD_INT 60
10657: PPUSH
10658: CALL_OW 234
// end ;
10662: PPOPN 1
10664: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10665: LD_EXP 7
10669: PUSH
10670: LD_EXP 37
10674: AND
10675: IFFALSE 10774
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
10683: PPUSH
// begin enable ;
10684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10685: LD_ADDR_VAR 0 1
10689: PUSH
10690: LD_INT 22
10692: PUSH
10693: LD_OWVAR 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 61
10704: PUSH
10705: EMPTY
10706: LIST
10707: PUSH
10708: LD_INT 33
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 69
10727: ST_TO_ADDR
// if not tmp then
10728: LD_VAR 0 1
10732: NOT
10733: IFFALSE 10737
// exit ;
10735: GO 10774
// for i in tmp do
10737: LD_ADDR_VAR 0 2
10741: PUSH
10742: LD_VAR 0 1
10746: PUSH
10747: FOR_IN
10748: IFFALSE 10772
// if IsControledBy ( i ) then
10750: LD_VAR 0 2
10754: PPUSH
10755: CALL_OW 312
10759: IFFALSE 10770
// ComUnlink ( i ) ;
10761: LD_VAR 0 2
10765: PPUSH
10766: CALL_OW 136
10770: GO 10747
10772: POP
10773: POP
// end ;
10774: PPOPN 2
10776: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10777: LD_EXP 7
10781: PUSH
10782: LD_EXP 38
10786: AND
10787: IFFALSE 10927
10789: GO 10791
10791: DISABLE
10792: LD_INT 0
10794: PPUSH
10795: PPUSH
// begin ToLua ( displayPowell(); ) ;
10796: LD_STRING displayPowell();
10798: PPUSH
10799: CALL_OW 559
// uc_side := 0 ;
10803: LD_ADDR_OWVAR 20
10807: PUSH
10808: LD_INT 0
10810: ST_TO_ADDR
// uc_nation := 2 ;
10811: LD_ADDR_OWVAR 21
10815: PUSH
10816: LD_INT 2
10818: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10819: LD_ADDR_OWVAR 37
10823: PUSH
10824: LD_INT 14
10826: ST_TO_ADDR
// vc_engine := engine_siberite ;
10827: LD_ADDR_OWVAR 39
10831: PUSH
10832: LD_INT 3
10834: ST_TO_ADDR
// vc_control := control_apeman ;
10835: LD_ADDR_OWVAR 38
10839: PUSH
10840: LD_INT 5
10842: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10843: LD_ADDR_OWVAR 40
10847: PUSH
10848: LD_INT 29
10850: ST_TO_ADDR
// un := CreateVehicle ;
10851: LD_ADDR_VAR 0 2
10855: PUSH
10856: CALL_OW 45
10860: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10861: LD_VAR 0 2
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10873: LD_INT 35
10875: PPUSH
10876: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10880: LD_VAR 0 2
10884: PPUSH
10885: LD_INT 22
10887: PUSH
10888: LD_OWVAR 2
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PPUSH
10897: CALL_OW 69
10901: PPUSH
10902: LD_VAR 0 2
10906: PPUSH
10907: CALL_OW 74
10911: PPUSH
10912: CALL_OW 115
// until IsDead ( un ) ;
10916: LD_VAR 0 2
10920: PPUSH
10921: CALL_OW 301
10925: IFFALSE 10873
// end ;
10927: PPOPN 2
10929: END
// every 0 0$1 trigger StreamModeActive and sStu do
10930: LD_EXP 7
10934: PUSH
10935: LD_EXP 46
10939: AND
10940: IFFALSE 10956
10942: GO 10944
10944: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10945: LD_STRING displayStucuk();
10947: PPUSH
10948: CALL_OW 559
// ResetFog ;
10952: CALL_OW 335
// end ;
10956: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10957: LD_EXP 7
10961: PUSH
10962: LD_EXP 39
10966: AND
10967: IFFALSE 11108
10969: GO 10971
10971: DISABLE
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10976: LD_ADDR_VAR 0 2
10980: PUSH
10981: LD_INT 22
10983: PUSH
10984: LD_OWVAR 2
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 21
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PPUSH
11007: CALL_OW 69
11011: ST_TO_ADDR
// if not tmp then
11012: LD_VAR 0 2
11016: NOT
11017: IFFALSE 11021
// exit ;
11019: GO 11108
// un := tmp [ rand ( 1 , tmp ) ] ;
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_VAR 0 2
11030: PUSH
11031: LD_INT 1
11033: PPUSH
11034: LD_VAR 0 2
11038: PPUSH
11039: CALL_OW 12
11043: ARRAY
11044: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11057: LD_VAR 0 1
11061: PPUSH
11062: LD_OWVAR 3
11066: PUSH
11067: LD_VAR 0 1
11071: DIFF
11072: PPUSH
11073: LD_VAR 0 1
11077: PPUSH
11078: CALL_OW 74
11082: PPUSH
11083: CALL_OW 115
// wait ( 0 0$20 ) ;
11087: LD_INT 700
11089: PPUSH
11090: CALL_OW 67
// SetSide ( un , your_side ) ;
11094: LD_VAR 0 1
11098: PPUSH
11099: LD_OWVAR 2
11103: PPUSH
11104: CALL_OW 235
// end ;
11108: PPOPN 2
11110: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11111: LD_EXP 7
11115: PUSH
11116: LD_EXP 40
11120: AND
11121: IFFALSE 11227
11123: GO 11125
11125: DISABLE
11126: LD_INT 0
11128: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11129: LD_ADDR_VAR 0 1
11133: PUSH
11134: LD_INT 22
11136: PUSH
11137: LD_OWVAR 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 2
11148: PUSH
11149: LD_INT 30
11151: PUSH
11152: LD_INT 0
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 30
11161: PUSH
11162: LD_INT 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: ST_TO_ADDR
// if not depot then
11183: LD_VAR 0 1
11187: NOT
11188: IFFALSE 11192
// exit ;
11190: GO 11227
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11192: LD_VAR 0 1
11196: PUSH
11197: LD_INT 1
11199: ARRAY
11200: PPUSH
11201: CALL_OW 250
11205: PPUSH
11206: LD_VAR 0 1
11210: PUSH
11211: LD_INT 1
11213: ARRAY
11214: PPUSH
11215: CALL_OW 251
11219: PPUSH
11220: LD_INT 70
11222: PPUSH
11223: CALL_OW 495
// end ;
11227: PPOPN 1
11229: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11230: LD_EXP 7
11234: PUSH
11235: LD_EXP 41
11239: AND
11240: IFFALSE 11451
11242: GO 11244
11244: DISABLE
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
11249: PPUSH
11250: PPUSH
11251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11252: LD_ADDR_VAR 0 5
11256: PUSH
11257: LD_INT 22
11259: PUSH
11260: LD_OWVAR 2
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 21
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 69
11287: ST_TO_ADDR
// if not tmp then
11288: LD_VAR 0 5
11292: NOT
11293: IFFALSE 11297
// exit ;
11295: GO 11451
// for i in tmp do
11297: LD_ADDR_VAR 0 1
11301: PUSH
11302: LD_VAR 0 5
11306: PUSH
11307: FOR_IN
11308: IFFALSE 11449
// begin d := rand ( 0 , 5 ) ;
11310: LD_ADDR_VAR 0 4
11314: PUSH
11315: LD_INT 0
11317: PPUSH
11318: LD_INT 5
11320: PPUSH
11321: CALL_OW 12
11325: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL_OW 250
11340: PPUSH
11341: LD_VAR 0 4
11345: PPUSH
11346: LD_INT 3
11348: PPUSH
11349: LD_INT 12
11351: PPUSH
11352: CALL_OW 12
11356: PPUSH
11357: CALL_OW 272
11361: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11362: LD_ADDR_VAR 0 3
11366: PUSH
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 251
11376: PPUSH
11377: LD_VAR 0 4
11381: PPUSH
11382: LD_INT 3
11384: PPUSH
11385: LD_INT 12
11387: PPUSH
11388: CALL_OW 12
11392: PPUSH
11393: CALL_OW 273
11397: ST_TO_ADDR
// if ValidHex ( x , y ) then
11398: LD_VAR 0 2
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: CALL_OW 488
11412: IFFALSE 11447
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_VAR 0 2
11423: PPUSH
11424: LD_VAR 0 3
11428: PPUSH
11429: LD_INT 3
11431: PPUSH
11432: LD_INT 6
11434: PPUSH
11435: CALL_OW 12
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 483
// end ;
11447: GO 11307
11449: POP
11450: POP
// end ;
11451: PPOPN 5
11453: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11454: LD_EXP 7
11458: PUSH
11459: LD_EXP 42
11463: AND
11464: IFFALSE 11558
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11473: LD_ADDR_VAR 0 2
11477: PUSH
11478: LD_INT 22
11480: PUSH
11481: LD_OWVAR 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 32
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 21
11502: PUSH
11503: LD_INT 2
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// if not tmp then
11520: LD_VAR 0 2
11524: NOT
11525: IFFALSE 11529
// exit ;
11527: GO 11558
// for i in tmp do
11529: LD_ADDR_VAR 0 1
11533: PUSH
11534: LD_VAR 0 2
11538: PUSH
11539: FOR_IN
11540: IFFALSE 11556
// SetFuel ( i , 0 ) ;
11542: LD_VAR 0 1
11546: PPUSH
11547: LD_INT 0
11549: PPUSH
11550: CALL_OW 240
11554: GO 11539
11556: POP
11557: POP
// end ;
11558: PPOPN 2
11560: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11561: LD_EXP 7
11565: PUSH
11566: LD_EXP 43
11570: AND
11571: IFFALSE 11637
11573: GO 11575
11575: DISABLE
11576: LD_INT 0
11578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11579: LD_ADDR_VAR 0 1
11583: PUSH
11584: LD_INT 22
11586: PUSH
11587: LD_OWVAR 2
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 30
11598: PUSH
11599: LD_INT 29
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: ST_TO_ADDR
// if not tmp then
11615: LD_VAR 0 1
11619: NOT
11620: IFFALSE 11624
// exit ;
11622: GO 11637
// DestroyUnit ( tmp [ 1 ] ) ;
11624: LD_VAR 0 1
11628: PUSH
11629: LD_INT 1
11631: ARRAY
11632: PPUSH
11633: CALL_OW 65
// end ;
11637: PPOPN 1
11639: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11640: LD_EXP 7
11644: PUSH
11645: LD_EXP 45
11649: AND
11650: IFFALSE 11779
11652: GO 11654
11654: DISABLE
11655: LD_INT 0
11657: PPUSH
// begin uc_side := 0 ;
11658: LD_ADDR_OWVAR 20
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// uc_nation := nation_arabian ;
11666: LD_ADDR_OWVAR 21
11670: PUSH
11671: LD_INT 2
11673: ST_TO_ADDR
// hc_gallery :=  ;
11674: LD_ADDR_OWVAR 33
11678: PUSH
11679: LD_STRING 
11681: ST_TO_ADDR
// hc_name :=  ;
11682: LD_ADDR_OWVAR 26
11686: PUSH
11687: LD_STRING 
11689: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11690: LD_INT 1
11692: PPUSH
11693: LD_INT 11
11695: PPUSH
11696: LD_INT 10
11698: PPUSH
11699: CALL_OW 380
// un := CreateHuman ;
11703: LD_ADDR_VAR 0 1
11707: PUSH
11708: CALL_OW 44
11712: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11713: LD_VAR 0 1
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11725: LD_INT 35
11727: PPUSH
11728: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11732: LD_VAR 0 1
11736: PPUSH
11737: LD_INT 22
11739: PUSH
11740: LD_OWVAR 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: PPUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL_OW 74
11763: PPUSH
11764: CALL_OW 115
// until IsDead ( un ) ;
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 301
11777: IFFALSE 11725
// end ;
11779: PPOPN 1
11781: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11782: LD_EXP 7
11786: PUSH
11787: LD_EXP 47
11791: AND
11792: IFFALSE 11804
11794: GO 11796
11796: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11797: LD_STRING earthquake(getX(game), 0, 32)
11799: PPUSH
11800: CALL_OW 559
11804: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11805: LD_EXP 7
11809: PUSH
11810: LD_EXP 48
11814: AND
11815: IFFALSE 11906
11817: GO 11819
11819: DISABLE
11820: LD_INT 0
11822: PPUSH
// begin enable ;
11823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: LD_INT 22
11831: PUSH
11832: LD_OWVAR 2
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 2
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 33
11853: PUSH
11854: LD_INT 3
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 69
11870: ST_TO_ADDR
// if not tmp then
11871: LD_VAR 0 1
11875: NOT
11876: IFFALSE 11880
// exit ;
11878: GO 11906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11880: LD_VAR 0 1
11884: PUSH
11885: LD_INT 1
11887: PPUSH
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL_OW 12
11897: ARRAY
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 234
// end ;
11906: PPOPN 1
11908: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11909: LD_EXP 7
11913: PUSH
11914: LD_EXP 49
11918: AND
11919: IFFALSE 12060
11921: GO 11923
11923: DISABLE
11924: LD_INT 0
11926: PPUSH
11927: PPUSH
11928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11929: LD_ADDR_VAR 0 3
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_OWVAR 2
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 25
11948: PUSH
11949: LD_INT 1
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PPUSH
11960: CALL_OW 69
11964: ST_TO_ADDR
// if not tmp then
11965: LD_VAR 0 3
11969: NOT
11970: IFFALSE 11974
// exit ;
11972: GO 12060
// un := tmp [ rand ( 1 , tmp ) ] ;
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_VAR 0 3
11983: PUSH
11984: LD_INT 1
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: CALL_OW 12
11996: ARRAY
11997: ST_TO_ADDR
// if Crawls ( un ) then
11998: LD_VAR 0 2
12002: PPUSH
12003: CALL_OW 318
12007: IFFALSE 12018
// ComWalk ( un ) ;
12009: LD_VAR 0 2
12013: PPUSH
12014: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12018: LD_VAR 0 2
12022: PPUSH
12023: LD_INT 9
12025: PPUSH
12026: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12030: LD_INT 28
12032: PPUSH
12033: LD_OWVAR 2
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12045: LD_INT 29
12047: PPUSH
12048: LD_OWVAR 2
12052: PPUSH
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 322
// end ;
12060: PPOPN 3
12062: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12063: LD_EXP 7
12067: PUSH
12068: LD_EXP 50
12072: AND
12073: IFFALSE 12184
12075: GO 12077
12077: DISABLE
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
12082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12083: LD_ADDR_VAR 0 3
12087: PUSH
12088: LD_INT 22
12090: PUSH
12091: LD_OWVAR 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 69
12118: ST_TO_ADDR
// if not tmp then
12119: LD_VAR 0 3
12123: NOT
12124: IFFALSE 12128
// exit ;
12126: GO 12184
// un := tmp [ rand ( 1 , tmp ) ] ;
12128: LD_ADDR_VAR 0 2
12132: PUSH
12133: LD_VAR 0 3
12137: PUSH
12138: LD_INT 1
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: CALL_OW 12
12150: ARRAY
12151: ST_TO_ADDR
// if Crawls ( un ) then
12152: LD_VAR 0 2
12156: PPUSH
12157: CALL_OW 318
12161: IFFALSE 12172
// ComWalk ( un ) ;
12163: LD_VAR 0 2
12167: PPUSH
12168: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12172: LD_VAR 0 2
12176: PPUSH
12177: LD_INT 8
12179: PPUSH
12180: CALL_OW 336
// end ;
12184: PPOPN 3
12186: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12187: LD_EXP 7
12191: PUSH
12192: LD_EXP 51
12196: AND
12197: IFFALSE 12341
12199: GO 12201
12201: DISABLE
12202: LD_INT 0
12204: PPUSH
12205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: LD_INT 22
12213: PUSH
12214: LD_OWVAR 2
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 2
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 2
12235: PUSH
12236: LD_INT 34
12238: PUSH
12239: LD_INT 12
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 34
12248: PUSH
12249: LD_INT 51
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 34
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: ST_TO_ADDR
// if not tmp then
12282: LD_VAR 0 2
12286: NOT
12287: IFFALSE 12291
// exit ;
12289: GO 12341
// for i in tmp do
12291: LD_ADDR_VAR 0 1
12295: PUSH
12296: LD_VAR 0 2
12300: PUSH
12301: FOR_IN
12302: IFFALSE 12339
// if GetCargo ( i , mat_artifact ) = 0 then
12304: LD_VAR 0 1
12308: PPUSH
12309: LD_INT 4
12311: PPUSH
12312: CALL_OW 289
12316: PUSH
12317: LD_INT 0
12319: EQUAL
12320: IFFALSE 12337
// SetCargo ( i , mat_siberit , 100 ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_INT 100
12332: PPUSH
12333: CALL_OW 290
12337: GO 12301
12339: POP
12340: POP
// end ;
12341: PPOPN 2
12343: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12344: LD_EXP 7
12348: PUSH
12349: LD_EXP 52
12353: AND
12354: IFFALSE 12537
12356: GO 12358
12358: DISABLE
12359: LD_INT 0
12361: PPUSH
12362: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12363: LD_ADDR_VAR 0 2
12367: PUSH
12368: LD_INT 22
12370: PUSH
12371: LD_OWVAR 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PPUSH
12380: CALL_OW 69
12384: ST_TO_ADDR
// if not tmp then
12385: LD_VAR 0 2
12389: NOT
12390: IFFALSE 12394
// exit ;
12392: GO 12537
// for i := 1 to 2 do
12394: LD_ADDR_VAR 0 1
12398: PUSH
12399: DOUBLE
12400: LD_INT 1
12402: DEC
12403: ST_TO_ADDR
12404: LD_INT 2
12406: PUSH
12407: FOR_TO
12408: IFFALSE 12535
// begin uc_side := your_side ;
12410: LD_ADDR_OWVAR 20
12414: PUSH
12415: LD_OWVAR 2
12419: ST_TO_ADDR
// uc_nation := nation_american ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 1
12427: ST_TO_ADDR
// vc_chassis := us_morphling ;
12428: LD_ADDR_OWVAR 37
12432: PUSH
12433: LD_INT 5
12435: ST_TO_ADDR
// vc_engine := engine_siberite ;
12436: LD_ADDR_OWVAR 39
12440: PUSH
12441: LD_INT 3
12443: ST_TO_ADDR
// vc_control := control_computer ;
12444: LD_ADDR_OWVAR 38
12448: PUSH
12449: LD_INT 3
12451: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12452: LD_ADDR_OWVAR 40
12456: PUSH
12457: LD_INT 10
12459: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12460: LD_VAR 0 2
12464: PUSH
12465: LD_INT 1
12467: ARRAY
12468: PPUSH
12469: CALL_OW 310
12473: NOT
12474: IFFALSE 12521
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12476: CALL_OW 45
12480: PPUSH
12481: LD_VAR 0 2
12485: PUSH
12486: LD_INT 1
12488: ARRAY
12489: PPUSH
12490: CALL_OW 250
12494: PPUSH
12495: LD_VAR 0 2
12499: PUSH
12500: LD_INT 1
12502: ARRAY
12503: PPUSH
12504: CALL_OW 251
12508: PPUSH
12509: LD_INT 12
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 50
12519: GO 12533
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12521: CALL_OW 45
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 51
// end ;
12533: GO 12407
12535: POP
12536: POP
// end ;
12537: PPOPN 2
12539: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12540: LD_EXP 7
12544: PUSH
12545: LD_EXP 53
12549: AND
12550: IFFALSE 12772
12552: GO 12554
12554: DISABLE
12555: LD_INT 0
12557: PPUSH
12558: PPUSH
12559: PPUSH
12560: PPUSH
12561: PPUSH
12562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12563: LD_ADDR_VAR 0 6
12567: PUSH
12568: LD_INT 22
12570: PUSH
12571: LD_OWVAR 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 21
12582: PUSH
12583: LD_INT 1
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 3
12592: PUSH
12593: LD_INT 23
12595: PUSH
12596: LD_INT 0
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if not tmp then
12617: LD_VAR 0 6
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 12772
// s1 := rand ( 1 , 4 ) ;
12626: LD_ADDR_VAR 0 2
12630: PUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_INT 4
12636: PPUSH
12637: CALL_OW 12
12641: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12642: LD_ADDR_VAR 0 4
12646: PUSH
12647: LD_VAR 0 6
12651: PUSH
12652: LD_INT 1
12654: ARRAY
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: CALL_OW 259
12665: ST_TO_ADDR
// if s1 = 1 then
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: EQUAL
12674: IFFALSE 12694
// s2 := rand ( 2 , 4 ) else
12676: LD_ADDR_VAR 0 3
12680: PUSH
12681: LD_INT 2
12683: PPUSH
12684: LD_INT 4
12686: PPUSH
12687: CALL_OW 12
12691: ST_TO_ADDR
12692: GO 12702
// s2 := 1 ;
12694: LD_ADDR_VAR 0 3
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12702: LD_ADDR_VAR 0 5
12706: PUSH
12707: LD_VAR 0 6
12711: PUSH
12712: LD_INT 1
12714: ARRAY
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL_OW 259
12725: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12726: LD_VAR 0 6
12730: PUSH
12731: LD_INT 1
12733: ARRAY
12734: PPUSH
12735: LD_VAR 0 2
12739: PPUSH
12740: LD_VAR 0 5
12744: PPUSH
12745: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12749: LD_VAR 0 6
12753: PUSH
12754: LD_INT 1
12756: ARRAY
12757: PPUSH
12758: LD_VAR 0 3
12762: PPUSH
12763: LD_VAR 0 4
12767: PPUSH
12768: CALL_OW 237
// end ;
12772: PPOPN 6
12774: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12775: LD_EXP 7
12779: PUSH
12780: LD_EXP 54
12784: AND
12785: IFFALSE 12864
12787: GO 12789
12789: DISABLE
12790: LD_INT 0
12792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12793: LD_ADDR_VAR 0 1
12797: PUSH
12798: LD_INT 22
12800: PUSH
12801: LD_OWVAR 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 3
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: ST_TO_ADDR
// if not tmp then
12829: LD_VAR 0 1
12833: NOT
12834: IFFALSE 12838
// exit ;
12836: GO 12864
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12838: LD_VAR 0 1
12842: PUSH
12843: LD_INT 1
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 12
12855: ARRAY
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 234
// end ;
12864: PPOPN 1
12866: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12867: LD_EXP 7
12871: PUSH
12872: LD_EXP 55
12876: AND
12877: IFFALSE 12989
12879: GO 12881
12881: DISABLE
12882: LD_INT 0
12884: PPUSH
12885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: LD_INT 22
12893: PUSH
12894: LD_OWVAR 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: LD_INT 27
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 26
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 28
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: ST_TO_ADDR
// if not tmp then
12951: LD_VAR 0 2
12955: NOT
12956: IFFALSE 12960
// exit ;
12958: GO 12989
// for i in tmp do
12960: LD_ADDR_VAR 0 1
12964: PUSH
12965: LD_VAR 0 2
12969: PUSH
12970: FOR_IN
12971: IFFALSE 12987
// SetLives ( i , 1 ) ;
12973: LD_VAR 0 1
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: CALL_OW 234
12985: GO 12970
12987: POP
12988: POP
// end ;
12989: PPOPN 2
12991: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12992: LD_EXP 7
12996: PUSH
12997: LD_EXP 56
13001: AND
13002: IFFALSE 13289
13004: GO 13006
13006: DISABLE
13007: LD_INT 0
13009: PPUSH
13010: PPUSH
13011: PPUSH
// begin i := rand ( 1 , 7 ) ;
13012: LD_ADDR_VAR 0 1
13016: PUSH
13017: LD_INT 1
13019: PPUSH
13020: LD_INT 7
13022: PPUSH
13023: CALL_OW 12
13027: ST_TO_ADDR
// case i of 1 :
13028: LD_VAR 0 1
13032: PUSH
13033: LD_INT 1
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13051
13041: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13042: LD_STRING earthquake(getX(game), 0, 32)
13044: PPUSH
13045: CALL_OW 559
13049: GO 13289
13051: LD_INT 2
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13073
13059: POP
// begin ToLua ( displayStucuk(); ) ;
13060: LD_STRING displayStucuk();
13062: PPUSH
13063: CALL_OW 559
// ResetFog ;
13067: CALL_OW 335
// end ; 3 :
13071: GO 13289
13073: LD_INT 3
13075: DOUBLE
13076: EQUAL
13077: IFTRUE 13081
13079: GO 13185
13081: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13082: LD_ADDR_VAR 0 2
13086: PUSH
13087: LD_INT 22
13089: PUSH
13090: LD_OWVAR 2
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PPUSH
13113: CALL_OW 69
13117: ST_TO_ADDR
// if not tmp then
13118: LD_VAR 0 2
13122: NOT
13123: IFFALSE 13127
// exit ;
13125: GO 13289
// un := tmp [ rand ( 1 , tmp ) ] ;
13127: LD_ADDR_VAR 0 3
13131: PUSH
13132: LD_VAR 0 2
13136: PUSH
13137: LD_INT 1
13139: PPUSH
13140: LD_VAR 0 2
13144: PPUSH
13145: CALL_OW 12
13149: ARRAY
13150: ST_TO_ADDR
// if Crawls ( un ) then
13151: LD_VAR 0 3
13155: PPUSH
13156: CALL_OW 318
13160: IFFALSE 13171
// ComWalk ( un ) ;
13162: LD_VAR 0 3
13166: PPUSH
13167: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 8
13178: PPUSH
13179: CALL_OW 336
// end ; 4 :
13183: GO 13289
13185: LD_INT 4
13187: DOUBLE
13188: EQUAL
13189: IFTRUE 13193
13191: GO 13267
13193: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: LD_INT 22
13201: PUSH
13202: LD_OWVAR 2
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 30
13213: PUSH
13214: LD_INT 29
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: ST_TO_ADDR
// if not tmp then
13230: LD_VAR 0 2
13234: NOT
13235: IFFALSE 13239
// exit ;
13237: GO 13289
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13239: LD_VAR 0 2
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: PPUSH
13248: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13252: LD_VAR 0 2
13256: PUSH
13257: LD_INT 1
13259: ARRAY
13260: PPUSH
13261: CALL_OW 65
// end ; 5 .. 7 :
13265: GO 13289
13267: LD_INT 5
13269: DOUBLE
13270: GREATEREQUAL
13271: IFFALSE 13279
13273: LD_INT 7
13275: DOUBLE
13276: LESSEQUAL
13277: IFTRUE 13281
13279: GO 13288
13281: POP
// StreamSibBomb ; end ;
13282: CALL 9526 0 0
13286: GO 13289
13288: POP
// end ;
13289: PPOPN 3
13291: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13292: LD_EXP 7
13296: PUSH
13297: LD_EXP 57
13301: AND
13302: IFFALSE 13458
13304: GO 13306
13306: DISABLE
13307: LD_INT 0
13309: PPUSH
13310: PPUSH
13311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13312: LD_ADDR_VAR 0 2
13316: PUSH
13317: LD_INT 81
13319: PUSH
13320: LD_OWVAR 2
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: LD_INT 21
13334: PUSH
13335: LD_INT 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 21
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: ST_TO_ADDR
// if not tmp then
13366: LD_VAR 0 2
13370: NOT
13371: IFFALSE 13375
// exit ;
13373: GO 13458
// p := 0 ;
13375: LD_ADDR_VAR 0 3
13379: PUSH
13380: LD_INT 0
13382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13383: LD_INT 35
13385: PPUSH
13386: CALL_OW 67
// p := p + 1 ;
13390: LD_ADDR_VAR 0 3
13394: PUSH
13395: LD_VAR 0 3
13399: PUSH
13400: LD_INT 1
13402: PLUS
13403: ST_TO_ADDR
// for i in tmp do
13404: LD_ADDR_VAR 0 1
13408: PUSH
13409: LD_VAR 0 2
13413: PUSH
13414: FOR_IN
13415: IFFALSE 13446
// if GetLives ( i ) < 1000 then
13417: LD_VAR 0 1
13421: PPUSH
13422: CALL_OW 256
13426: PUSH
13427: LD_INT 1000
13429: LESS
13430: IFFALSE 13444
// SetLives ( i , 1000 ) ;
13432: LD_VAR 0 1
13436: PPUSH
13437: LD_INT 1000
13439: PPUSH
13440: CALL_OW 234
13444: GO 13414
13446: POP
13447: POP
// until p > 20 ;
13448: LD_VAR 0 3
13452: PUSH
13453: LD_INT 20
13455: GREATER
13456: IFFALSE 13383
// end ;
13458: PPOPN 3
13460: END
// every 0 0$1 trigger StreamModeActive and sTime do
13461: LD_EXP 7
13465: PUSH
13466: LD_EXP 58
13470: AND
13471: IFFALSE 13506
13473: GO 13475
13475: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13476: LD_INT 28
13478: PPUSH
13479: LD_OWVAR 2
13483: PPUSH
13484: LD_INT 2
13486: PPUSH
13487: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13491: LD_INT 30
13493: PPUSH
13494: LD_OWVAR 2
13498: PPUSH
13499: LD_INT 2
13501: PPUSH
13502: CALL_OW 322
// end ;
13506: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13507: LD_EXP 7
13511: PUSH
13512: LD_EXP 59
13516: AND
13517: IFFALSE 13638
13519: GO 13521
13521: DISABLE
13522: LD_INT 0
13524: PPUSH
13525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13526: LD_ADDR_VAR 0 2
13530: PUSH
13531: LD_INT 22
13533: PUSH
13534: LD_OWVAR 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 21
13545: PUSH
13546: LD_INT 1
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: LD_INT 23
13558: PUSH
13559: LD_INT 0
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 69
13579: ST_TO_ADDR
// if not tmp then
13580: LD_VAR 0 2
13584: NOT
13585: IFFALSE 13589
// exit ;
13587: GO 13638
// for i in tmp do
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_VAR 0 2
13598: PUSH
13599: FOR_IN
13600: IFFALSE 13636
// begin if Crawls ( i ) then
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 318
13611: IFFALSE 13622
// ComWalk ( i ) ;
13613: LD_VAR 0 1
13617: PPUSH
13618: CALL_OW 138
// SetClass ( i , 2 ) ;
13622: LD_VAR 0 1
13626: PPUSH
13627: LD_INT 2
13629: PPUSH
13630: CALL_OW 336
// end ;
13634: GO 13599
13636: POP
13637: POP
// end ;
13638: PPOPN 2
13640: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13641: LD_EXP 7
13645: PUSH
13646: LD_EXP 60
13650: AND
13651: IFFALSE 13939
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13661: LD_OWVAR 2
13665: PPUSH
13666: LD_INT 9
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13679: LD_INT 9
13681: PPUSH
13682: LD_OWVAR 2
13686: PPUSH
13687: CALL_OW 343
// uc_side := 9 ;
13691: LD_ADDR_OWVAR 20
13695: PUSH
13696: LD_INT 9
13698: ST_TO_ADDR
// uc_nation := 2 ;
13699: LD_ADDR_OWVAR 21
13703: PUSH
13704: LD_INT 2
13706: ST_TO_ADDR
// hc_name := Dark Warrior ;
13707: LD_ADDR_OWVAR 26
13711: PUSH
13712: LD_STRING Dark Warrior
13714: ST_TO_ADDR
// hc_gallery :=  ;
13715: LD_ADDR_OWVAR 33
13719: PUSH
13720: LD_STRING 
13722: ST_TO_ADDR
// hc_noskilllimit := true ;
13723: LD_ADDR_OWVAR 76
13727: PUSH
13728: LD_INT 1
13730: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13731: LD_ADDR_OWVAR 31
13735: PUSH
13736: LD_INT 30
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 30
13744: PUSH
13745: LD_INT 30
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: ST_TO_ADDR
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 3
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// hc_noskilllimit := false ;
13764: LD_ADDR_OWVAR 76
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 51
// ToLua ( playRanger() ) ;
13784: LD_STRING playRanger()
13786: PPUSH
13787: CALL_OW 559
// p := 0 ;
13791: LD_ADDR_VAR 0 2
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13799: LD_INT 35
13801: PPUSH
13802: CALL_OW 67
// p := p + 1 ;
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_VAR 0 2
13815: PUSH
13816: LD_INT 1
13818: PLUS
13819: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13820: LD_VAR 0 3
13824: PPUSH
13825: CALL_OW 256
13829: PUSH
13830: LD_INT 1000
13832: LESS
13833: IFFALSE 13847
// SetLives ( un , 1000 ) ;
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1000
13842: PPUSH
13843: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13847: LD_VAR 0 3
13851: PPUSH
13852: LD_INT 81
13854: PUSH
13855: LD_OWVAR 2
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 91
13866: PUSH
13867: LD_VAR 0 3
13871: PUSH
13872: LD_INT 30
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PPUSH
13884: CALL_OW 69
13888: PPUSH
13889: LD_VAR 0 3
13893: PPUSH
13894: CALL_OW 74
13898: PPUSH
13899: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13903: LD_VAR 0 2
13907: PUSH
13908: LD_INT 80
13910: GREATER
13911: PUSH
13912: LD_VAR 0 3
13916: PPUSH
13917: CALL_OW 301
13921: OR
13922: IFFALSE 13799
// if un then
13924: LD_VAR 0 3
13928: IFFALSE 13939
// RemoveUnit ( un ) ;
13930: LD_VAR 0 3
13934: PPUSH
13935: CALL_OW 64
// end ;
13939: PPOPN 3
13941: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13942: LD_EXP 61
13946: IFFALSE 14062
13948: GO 13950
13950: DISABLE
13951: LD_INT 0
13953: PPUSH
13954: PPUSH
13955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13956: LD_ADDR_VAR 0 2
13960: PUSH
13961: LD_INT 81
13963: PUSH
13964: LD_OWVAR 2
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 1
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PPUSH
13987: CALL_OW 69
13991: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13992: LD_STRING playComputer()
13994: PPUSH
13995: CALL_OW 559
// if not tmp then
13999: LD_VAR 0 2
14003: NOT
14004: IFFALSE 14008
// exit ;
14006: GO 14062
// for i in tmp do
14008: LD_ADDR_VAR 0 1
14012: PUSH
14013: LD_VAR 0 2
14017: PUSH
14018: FOR_IN
14019: IFFALSE 14060
// for j := 1 to 4 do
14021: LD_ADDR_VAR 0 3
14025: PUSH
14026: DOUBLE
14027: LD_INT 1
14029: DEC
14030: ST_TO_ADDR
14031: LD_INT 4
14033: PUSH
14034: FOR_TO
14035: IFFALSE 14056
// SetSkill ( i , j , 10 ) ;
14037: LD_VAR 0 1
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 10
14049: PPUSH
14050: CALL_OW 237
14054: GO 14034
14056: POP
14057: POP
14058: GO 14018
14060: POP
14061: POP
// end ;
14062: PPOPN 3
14064: END
// every 0 0$1 trigger s30 do var i , tmp ;
14065: LD_EXP 62
14069: IFFALSE 14138
14071: GO 14073
14073: DISABLE
14074: LD_INT 0
14076: PPUSH
14077: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_INT 22
14085: PUSH
14086: LD_OWVAR 2
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// if not tmp then
14100: LD_VAR 0 2
14104: NOT
14105: IFFALSE 14109
// exit ;
14107: GO 14138
// for i in tmp do
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: LD_VAR 0 2
14118: PUSH
14119: FOR_IN
14120: IFFALSE 14136
// SetLives ( i , 300 ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_INT 300
14129: PPUSH
14130: CALL_OW 234
14134: GO 14119
14136: POP
14137: POP
// end ;
14138: PPOPN 2
14140: END
// every 0 0$1 trigger s60 do var i , tmp ;
14141: LD_EXP 63
14145: IFFALSE 14214
14147: GO 14149
14149: DISABLE
14150: LD_INT 0
14152: PPUSH
14153: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14154: LD_ADDR_VAR 0 2
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_OWVAR 2
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 69
14175: ST_TO_ADDR
// if not tmp then
14176: LD_VAR 0 2
14180: NOT
14181: IFFALSE 14185
// exit ;
14183: GO 14214
// for i in tmp do
14185: LD_ADDR_VAR 0 1
14189: PUSH
14190: LD_VAR 0 2
14194: PUSH
14195: FOR_IN
14196: IFFALSE 14212
// SetLives ( i , 600 ) ;
14198: LD_VAR 0 1
14202: PPUSH
14203: LD_INT 600
14205: PPUSH
14206: CALL_OW 234
14210: GO 14195
14212: POP
14213: POP
// end ;
14214: PPOPN 2
14216: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14217: LD_INT 0
14219: PPUSH
// case cmd of 301 :
14220: LD_VAR 0 1
14224: PUSH
14225: LD_INT 301
14227: DOUBLE
14228: EQUAL
14229: IFTRUE 14233
14231: GO 14265
14233: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14234: LD_VAR 0 6
14238: PPUSH
14239: LD_VAR 0 7
14243: PPUSH
14244: LD_VAR 0 8
14248: PPUSH
14249: LD_VAR 0 4
14253: PPUSH
14254: LD_VAR 0 5
14258: PPUSH
14259: CALL 15466 0 5
14263: GO 14386
14265: LD_INT 302
14267: DOUBLE
14268: EQUAL
14269: IFTRUE 14273
14271: GO 14310
14273: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14274: LD_VAR 0 6
14278: PPUSH
14279: LD_VAR 0 7
14283: PPUSH
14284: LD_VAR 0 8
14288: PPUSH
14289: LD_VAR 0 9
14293: PPUSH
14294: LD_VAR 0 4
14298: PPUSH
14299: LD_VAR 0 5
14303: PPUSH
14304: CALL 15557 0 6
14308: GO 14386
14310: LD_INT 303
14312: DOUBLE
14313: EQUAL
14314: IFTRUE 14318
14316: GO 14355
14318: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14319: LD_VAR 0 6
14323: PPUSH
14324: LD_VAR 0 7
14328: PPUSH
14329: LD_VAR 0 8
14333: PPUSH
14334: LD_VAR 0 9
14338: PPUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: CALL 14391 0 6
14353: GO 14386
14355: LD_INT 304
14357: DOUBLE
14358: EQUAL
14359: IFTRUE 14363
14361: GO 14385
14363: POP
// hHackTeleport ( unit , x , y ) ; end ;
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_VAR 0 4
14373: PPUSH
14374: LD_VAR 0 5
14378: PPUSH
14379: CALL 16150 0 3
14383: GO 14386
14385: POP
// end ;
14386: LD_VAR 0 12
14390: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14395: LD_VAR 0 1
14399: PUSH
14400: LD_INT 1
14402: LESS
14403: PUSH
14404: LD_VAR 0 1
14408: PUSH
14409: LD_INT 3
14411: GREATER
14412: OR
14413: PUSH
14414: LD_VAR 0 5
14418: PPUSH
14419: LD_VAR 0 6
14423: PPUSH
14424: CALL_OW 428
14428: OR
14429: IFFALSE 14433
// exit ;
14431: GO 15153
// uc_side := your_side ;
14433: LD_ADDR_OWVAR 20
14437: PUSH
14438: LD_OWVAR 2
14442: ST_TO_ADDR
// uc_nation := nation ;
14443: LD_ADDR_OWVAR 21
14447: PUSH
14448: LD_VAR 0 1
14452: ST_TO_ADDR
// bc_level = 1 ;
14453: LD_ADDR_OWVAR 43
14457: PUSH
14458: LD_INT 1
14460: ST_TO_ADDR
// case btype of 1 :
14461: LD_VAR 0 2
14465: PUSH
14466: LD_INT 1
14468: DOUBLE
14469: EQUAL
14470: IFTRUE 14474
14472: GO 14485
14474: POP
// bc_type := b_depot ; 2 :
14475: LD_ADDR_OWVAR 42
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
14483: GO 15097
14485: LD_INT 2
14487: DOUBLE
14488: EQUAL
14489: IFTRUE 14493
14491: GO 14504
14493: POP
// bc_type := b_warehouse ; 3 :
14494: LD_ADDR_OWVAR 42
14498: PUSH
14499: LD_INT 1
14501: ST_TO_ADDR
14502: GO 15097
14504: LD_INT 3
14506: DOUBLE
14507: EQUAL
14508: IFTRUE 14512
14510: GO 14523
14512: POP
// bc_type := b_lab ; 4 .. 9 :
14513: LD_ADDR_OWVAR 42
14517: PUSH
14518: LD_INT 6
14520: ST_TO_ADDR
14521: GO 15097
14523: LD_INT 4
14525: DOUBLE
14526: GREATEREQUAL
14527: IFFALSE 14535
14529: LD_INT 9
14531: DOUBLE
14532: LESSEQUAL
14533: IFTRUE 14537
14535: GO 14589
14537: POP
// begin bc_type := b_lab_half ;
14538: LD_ADDR_OWVAR 42
14542: PUSH
14543: LD_INT 7
14545: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14546: LD_ADDR_OWVAR 44
14550: PUSH
14551: LD_INT 10
14553: PUSH
14554: LD_INT 11
14556: PUSH
14557: LD_INT 12
14559: PUSH
14560: LD_INT 15
14562: PUSH
14563: LD_INT 14
14565: PUSH
14566: LD_INT 13
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_VAR 0 2
14581: PUSH
14582: LD_INT 3
14584: MINUS
14585: ARRAY
14586: ST_TO_ADDR
// end ; 10 .. 13 :
14587: GO 15097
14589: LD_INT 10
14591: DOUBLE
14592: GREATEREQUAL
14593: IFFALSE 14601
14595: LD_INT 13
14597: DOUBLE
14598: LESSEQUAL
14599: IFTRUE 14603
14601: GO 14680
14603: POP
// begin bc_type := b_lab_full ;
14604: LD_ADDR_OWVAR 42
14608: PUSH
14609: LD_INT 8
14611: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14612: LD_ADDR_OWVAR 44
14616: PUSH
14617: LD_INT 10
14619: PUSH
14620: LD_INT 12
14622: PUSH
14623: LD_INT 14
14625: PUSH
14626: LD_INT 13
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: LD_VAR 0 2
14639: PUSH
14640: LD_INT 9
14642: MINUS
14643: ARRAY
14644: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14645: LD_ADDR_OWVAR 45
14649: PUSH
14650: LD_INT 11
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 12
14658: PUSH
14659: LD_INT 15
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: PUSH
14668: LD_VAR 0 2
14672: PUSH
14673: LD_INT 9
14675: MINUS
14676: ARRAY
14677: ST_TO_ADDR
// end ; 14 :
14678: GO 15097
14680: LD_INT 14
14682: DOUBLE
14683: EQUAL
14684: IFTRUE 14688
14686: GO 14699
14688: POP
// bc_type := b_workshop ; 15 :
14689: LD_ADDR_OWVAR 42
14693: PUSH
14694: LD_INT 2
14696: ST_TO_ADDR
14697: GO 15097
14699: LD_INT 15
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14718
14707: POP
// bc_type := b_factory ; 16 :
14708: LD_ADDR_OWVAR 42
14712: PUSH
14713: LD_INT 3
14715: ST_TO_ADDR
14716: GO 15097
14718: LD_INT 16
14720: DOUBLE
14721: EQUAL
14722: IFTRUE 14726
14724: GO 14737
14726: POP
// bc_type := b_ext_gun ; 17 :
14727: LD_ADDR_OWVAR 42
14731: PUSH
14732: LD_INT 17
14734: ST_TO_ADDR
14735: GO 15097
14737: LD_INT 17
14739: DOUBLE
14740: EQUAL
14741: IFTRUE 14745
14743: GO 14773
14745: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14746: LD_ADDR_OWVAR 42
14750: PUSH
14751: LD_INT 19
14753: PUSH
14754: LD_INT 23
14756: PUSH
14757: LD_INT 19
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: PUSH
14765: LD_VAR 0 1
14769: ARRAY
14770: ST_TO_ADDR
14771: GO 15097
14773: LD_INT 18
14775: DOUBLE
14776: EQUAL
14777: IFTRUE 14781
14779: GO 14792
14781: POP
// bc_type := b_ext_radar ; 19 :
14782: LD_ADDR_OWVAR 42
14786: PUSH
14787: LD_INT 20
14789: ST_TO_ADDR
14790: GO 15097
14792: LD_INT 19
14794: DOUBLE
14795: EQUAL
14796: IFTRUE 14800
14798: GO 14811
14800: POP
// bc_type := b_ext_radio ; 20 :
14801: LD_ADDR_OWVAR 42
14805: PUSH
14806: LD_INT 22
14808: ST_TO_ADDR
14809: GO 15097
14811: LD_INT 20
14813: DOUBLE
14814: EQUAL
14815: IFTRUE 14819
14817: GO 14830
14819: POP
// bc_type := b_ext_siberium ; 21 :
14820: LD_ADDR_OWVAR 42
14824: PUSH
14825: LD_INT 21
14827: ST_TO_ADDR
14828: GO 15097
14830: LD_INT 21
14832: DOUBLE
14833: EQUAL
14834: IFTRUE 14838
14836: GO 14849
14838: POP
// bc_type := b_ext_computer ; 22 :
14839: LD_ADDR_OWVAR 42
14843: PUSH
14844: LD_INT 24
14846: ST_TO_ADDR
14847: GO 15097
14849: LD_INT 22
14851: DOUBLE
14852: EQUAL
14853: IFTRUE 14857
14855: GO 14868
14857: POP
// bc_type := b_ext_track ; 23 :
14858: LD_ADDR_OWVAR 42
14862: PUSH
14863: LD_INT 16
14865: ST_TO_ADDR
14866: GO 15097
14868: LD_INT 23
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 14887
14876: POP
// bc_type := b_ext_laser ; 24 :
14877: LD_ADDR_OWVAR 42
14881: PUSH
14882: LD_INT 25
14884: ST_TO_ADDR
14885: GO 15097
14887: LD_INT 24
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14906
14895: POP
// bc_type := b_control_tower ; 25 :
14896: LD_ADDR_OWVAR 42
14900: PUSH
14901: LD_INT 36
14903: ST_TO_ADDR
14904: GO 15097
14906: LD_INT 25
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14925
14914: POP
// bc_type := b_breastwork ; 26 :
14915: LD_ADDR_OWVAR 42
14919: PUSH
14920: LD_INT 31
14922: ST_TO_ADDR
14923: GO 15097
14925: LD_INT 26
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 14944
14933: POP
// bc_type := b_bunker ; 27 :
14934: LD_ADDR_OWVAR 42
14938: PUSH
14939: LD_INT 32
14941: ST_TO_ADDR
14942: GO 15097
14944: LD_INT 27
14946: DOUBLE
14947: EQUAL
14948: IFTRUE 14952
14950: GO 14963
14952: POP
// bc_type := b_turret ; 28 :
14953: LD_ADDR_OWVAR 42
14957: PUSH
14958: LD_INT 33
14960: ST_TO_ADDR
14961: GO 15097
14963: LD_INT 28
14965: DOUBLE
14966: EQUAL
14967: IFTRUE 14971
14969: GO 14982
14971: POP
// bc_type := b_armoury ; 29 :
14972: LD_ADDR_OWVAR 42
14976: PUSH
14977: LD_INT 4
14979: ST_TO_ADDR
14980: GO 15097
14982: LD_INT 29
14984: DOUBLE
14985: EQUAL
14986: IFTRUE 14990
14988: GO 15001
14990: POP
// bc_type := b_barracks ; 30 :
14991: LD_ADDR_OWVAR 42
14995: PUSH
14996: LD_INT 5
14998: ST_TO_ADDR
14999: GO 15097
15001: LD_INT 30
15003: DOUBLE
15004: EQUAL
15005: IFTRUE 15009
15007: GO 15020
15009: POP
// bc_type := b_solar_power ; 31 :
15010: LD_ADDR_OWVAR 42
15014: PUSH
15015: LD_INT 27
15017: ST_TO_ADDR
15018: GO 15097
15020: LD_INT 31
15022: DOUBLE
15023: EQUAL
15024: IFTRUE 15028
15026: GO 15039
15028: POP
// bc_type := b_oil_power ; 32 :
15029: LD_ADDR_OWVAR 42
15033: PUSH
15034: LD_INT 26
15036: ST_TO_ADDR
15037: GO 15097
15039: LD_INT 32
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15058
15047: POP
// bc_type := b_siberite_power ; 33 :
15048: LD_ADDR_OWVAR 42
15052: PUSH
15053: LD_INT 28
15055: ST_TO_ADDR
15056: GO 15097
15058: LD_INT 33
15060: DOUBLE
15061: EQUAL
15062: IFTRUE 15066
15064: GO 15077
15066: POP
// bc_type := b_oil_mine ; 34 :
15067: LD_ADDR_OWVAR 42
15071: PUSH
15072: LD_INT 29
15074: ST_TO_ADDR
15075: GO 15097
15077: LD_INT 34
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15096
15085: POP
// bc_type := b_siberite_mine ; end ;
15086: LD_ADDR_OWVAR 42
15090: PUSH
15091: LD_INT 30
15093: ST_TO_ADDR
15094: GO 15097
15096: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15097: LD_ADDR_VAR 0 8
15101: PUSH
15102: LD_VAR 0 5
15106: PPUSH
15107: LD_VAR 0 6
15111: PPUSH
15112: LD_VAR 0 3
15116: PPUSH
15117: CALL_OW 47
15121: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15122: LD_OWVAR 42
15126: PUSH
15127: LD_INT 32
15129: PUSH
15130: LD_INT 33
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: IN
15137: IFFALSE 15153
// PlaceWeaponTurret ( b , weapon ) ;
15139: LD_VAR 0 8
15143: PPUSH
15144: LD_VAR 0 4
15148: PPUSH
15149: CALL_OW 431
// end ;
15153: LD_VAR 0 7
15157: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15158: LD_INT 0
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15164: LD_ADDR_VAR 0 4
15168: PUSH
15169: LD_INT 22
15171: PUSH
15172: LD_OWVAR 2
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 2
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 0
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 30
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 69
15217: ST_TO_ADDR
// if not tmp then
15218: LD_VAR 0 4
15222: NOT
15223: IFFALSE 15227
// exit ;
15225: GO 15286
// for i in tmp do
15227: LD_ADDR_VAR 0 2
15231: PUSH
15232: LD_VAR 0 4
15236: PUSH
15237: FOR_IN
15238: IFFALSE 15284
// for j = 1 to 3 do
15240: LD_ADDR_VAR 0 3
15244: PUSH
15245: DOUBLE
15246: LD_INT 1
15248: DEC
15249: ST_TO_ADDR
15250: LD_INT 3
15252: PUSH
15253: FOR_TO
15254: IFFALSE 15280
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15256: LD_VAR 0 2
15260: PPUSH
15261: CALL_OW 274
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_INT 99999
15273: PPUSH
15274: CALL_OW 277
15278: GO 15253
15280: POP
15281: POP
15282: GO 15237
15284: POP
15285: POP
// end ;
15286: LD_VAR 0 1
15290: RET
// export function hHackSetLevel10 ; var i , j ; begin
15291: LD_INT 0
15293: PPUSH
15294: PPUSH
15295: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15296: LD_ADDR_VAR 0 2
15300: PUSH
15301: LD_INT 21
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: PUSH
15316: FOR_IN
15317: IFFALSE 15369
// if IsSelected ( i ) then
15319: LD_VAR 0 2
15323: PPUSH
15324: CALL_OW 306
15328: IFFALSE 15367
// begin for j := 1 to 4 do
15330: LD_ADDR_VAR 0 3
15334: PUSH
15335: DOUBLE
15336: LD_INT 1
15338: DEC
15339: ST_TO_ADDR
15340: LD_INT 4
15342: PUSH
15343: FOR_TO
15344: IFFALSE 15365
// SetSkill ( i , j , 10 ) ;
15346: LD_VAR 0 2
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 10
15358: PPUSH
15359: CALL_OW 237
15363: GO 15343
15365: POP
15366: POP
// end ;
15367: GO 15316
15369: POP
15370: POP
// end ;
15371: LD_VAR 0 1
15375: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15381: LD_ADDR_VAR 0 2
15385: PUSH
15386: LD_INT 22
15388: PUSH
15389: LD_OWVAR 2
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 21
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: PUSH
15417: FOR_IN
15418: IFFALSE 15459
// begin for j := 1 to 4 do
15420: LD_ADDR_VAR 0 3
15424: PUSH
15425: DOUBLE
15426: LD_INT 1
15428: DEC
15429: ST_TO_ADDR
15430: LD_INT 4
15432: PUSH
15433: FOR_TO
15434: IFFALSE 15455
// SetSkill ( i , j , 10 ) ;
15436: LD_VAR 0 2
15440: PPUSH
15441: LD_VAR 0 3
15445: PPUSH
15446: LD_INT 10
15448: PPUSH
15449: CALL_OW 237
15453: GO 15433
15455: POP
15456: POP
// end ;
15457: GO 15417
15459: POP
15460: POP
// end ;
15461: LD_VAR 0 1
15465: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15466: LD_INT 0
15468: PPUSH
// uc_side := your_side ;
15469: LD_ADDR_OWVAR 20
15473: PUSH
15474: LD_OWVAR 2
15478: ST_TO_ADDR
// uc_nation := nation ;
15479: LD_ADDR_OWVAR 21
15483: PUSH
15484: LD_VAR 0 1
15488: ST_TO_ADDR
// InitHc ;
15489: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15493: LD_INT 0
15495: PPUSH
15496: LD_VAR 0 2
15500: PPUSH
15501: LD_VAR 0 3
15505: PPUSH
15506: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15510: LD_VAR 0 4
15514: PPUSH
15515: LD_VAR 0 5
15519: PPUSH
15520: CALL_OW 428
15524: PUSH
15525: LD_INT 0
15527: EQUAL
15528: IFFALSE 15552
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15530: CALL_OW 44
15534: PPUSH
15535: LD_VAR 0 4
15539: PPUSH
15540: LD_VAR 0 5
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 48
// end ;
15552: LD_VAR 0 6
15556: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
// uc_side := your_side ;
15561: LD_ADDR_OWVAR 20
15565: PUSH
15566: LD_OWVAR 2
15570: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: LD_INT 3
15584: PUSH
15585: LD_INT 4
15587: PUSH
15588: LD_INT 5
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: IN
15598: IFFALSE 15610
// uc_nation := nation_american else
15600: LD_ADDR_OWVAR 21
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
15608: GO 15653
// if chassis in [ 11 , 12 , 13 , 14 ] then
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 11
15617: PUSH
15618: LD_INT 12
15620: PUSH
15621: LD_INT 13
15623: PUSH
15624: LD_INT 14
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: IN
15633: IFFALSE 15645
// uc_nation := nation_arabian else
15635: LD_ADDR_OWVAR 21
15639: PUSH
15640: LD_INT 2
15642: ST_TO_ADDR
15643: GO 15653
// uc_nation := nation_russian ;
15645: LD_ADDR_OWVAR 21
15649: PUSH
15650: LD_INT 3
15652: ST_TO_ADDR
// vc_chassis := chassis ;
15653: LD_ADDR_OWVAR 37
15657: PUSH
15658: LD_VAR 0 1
15662: ST_TO_ADDR
// vc_engine := engine ;
15663: LD_ADDR_OWVAR 39
15667: PUSH
15668: LD_VAR 0 2
15672: ST_TO_ADDR
// vc_control := control ;
15673: LD_ADDR_OWVAR 38
15677: PUSH
15678: LD_VAR 0 3
15682: ST_TO_ADDR
// vc_weapon := weapon ;
15683: LD_ADDR_OWVAR 40
15687: PUSH
15688: LD_VAR 0 4
15692: ST_TO_ADDR
// un := CreateVehicle ;
15693: LD_ADDR_VAR 0 8
15697: PUSH
15698: CALL_OW 45
15702: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15703: LD_VAR 0 8
15707: PPUSH
15708: LD_INT 0
15710: PPUSH
15711: LD_INT 5
15713: PPUSH
15714: CALL_OW 12
15718: PPUSH
15719: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15723: LD_VAR 0 8
15727: PPUSH
15728: LD_VAR 0 5
15732: PPUSH
15733: LD_VAR 0 6
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 48
// end ;
15745: LD_VAR 0 7
15749: RET
// export hInvincible ; every 1 do
15750: GO 15752
15752: DISABLE
// hInvincible := [ ] ;
15753: LD_ADDR_EXP 64
15757: PUSH
15758: EMPTY
15759: ST_TO_ADDR
15760: END
// every 10 do var i ;
15761: GO 15763
15763: DISABLE
15764: LD_INT 0
15766: PPUSH
// begin enable ;
15767: ENABLE
// if not hInvincible then
15768: LD_EXP 64
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15821
// for i in hInvincible do
15777: LD_ADDR_VAR 0 1
15781: PUSH
15782: LD_EXP 64
15786: PUSH
15787: FOR_IN
15788: IFFALSE 15819
// if GetLives ( i ) < 1000 then
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 256
15799: PUSH
15800: LD_INT 1000
15802: LESS
15803: IFFALSE 15817
// SetLives ( i , 1000 ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: LD_INT 1000
15812: PPUSH
15813: CALL_OW 234
15817: GO 15787
15819: POP
15820: POP
// end ;
15821: PPOPN 1
15823: END
// export function hHackInvincible ; var i ; begin
15824: LD_INT 0
15826: PPUSH
15827: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15828: LD_ADDR_VAR 0 2
15832: PUSH
15833: LD_INT 2
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: PUSH
15866: FOR_IN
15867: IFFALSE 15928
// if IsSelected ( i ) then
15869: LD_VAR 0 2
15873: PPUSH
15874: CALL_OW 306
15878: IFFALSE 15926
// begin if i in hInvincible then
15880: LD_VAR 0 2
15884: PUSH
15885: LD_EXP 64
15889: IN
15890: IFFALSE 15910
// hInvincible := hInvincible diff i else
15892: LD_ADDR_EXP 64
15896: PUSH
15897: LD_EXP 64
15901: PUSH
15902: LD_VAR 0 2
15906: DIFF
15907: ST_TO_ADDR
15908: GO 15926
// hInvincible := hInvincible union i ;
15910: LD_ADDR_EXP 64
15914: PUSH
15915: LD_EXP 64
15919: PUSH
15920: LD_VAR 0 2
15924: UNION
15925: ST_TO_ADDR
// end ;
15926: GO 15866
15928: POP
15929: POP
// end ;
15930: LD_VAR 0 1
15934: RET
// export function hHackInvisible ; var i , j ; begin
15935: LD_INT 0
15937: PPUSH
15938: PPUSH
15939: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15940: LD_ADDR_VAR 0 2
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PPUSH
15955: CALL_OW 69
15959: PUSH
15960: FOR_IN
15961: IFFALSE 15985
// if IsSelected ( i ) then
15963: LD_VAR 0 2
15967: PPUSH
15968: CALL_OW 306
15972: IFFALSE 15983
// ComForceInvisible ( i ) ;
15974: LD_VAR 0 2
15978: PPUSH
15979: CALL_OW 496
15983: GO 15960
15985: POP
15986: POP
// end ;
15987: LD_VAR 0 1
15991: RET
// export function hHackChangeYourSide ; begin
15992: LD_INT 0
15994: PPUSH
// if your_side = 8 then
15995: LD_OWVAR 2
15999: PUSH
16000: LD_INT 8
16002: EQUAL
16003: IFFALSE 16015
// your_side := 0 else
16005: LD_ADDR_OWVAR 2
16009: PUSH
16010: LD_INT 0
16012: ST_TO_ADDR
16013: GO 16029
// your_side := your_side + 1 ;
16015: LD_ADDR_OWVAR 2
16019: PUSH
16020: LD_OWVAR 2
16024: PUSH
16025: LD_INT 1
16027: PLUS
16028: ST_TO_ADDR
// end ;
16029: LD_VAR 0 1
16033: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16034: LD_INT 0
16036: PPUSH
16037: PPUSH
16038: PPUSH
// for i in all_units do
16039: LD_ADDR_VAR 0 2
16043: PUSH
16044: LD_OWVAR 3
16048: PUSH
16049: FOR_IN
16050: IFFALSE 16128
// if IsSelected ( i ) then
16052: LD_VAR 0 2
16056: PPUSH
16057: CALL_OW 306
16061: IFFALSE 16126
// begin j := GetSide ( i ) ;
16063: LD_ADDR_VAR 0 3
16067: PUSH
16068: LD_VAR 0 2
16072: PPUSH
16073: CALL_OW 255
16077: ST_TO_ADDR
// if j = 8 then
16078: LD_VAR 0 3
16082: PUSH
16083: LD_INT 8
16085: EQUAL
16086: IFFALSE 16098
// j := 0 else
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_INT 0
16095: ST_TO_ADDR
16096: GO 16112
// j := j + 1 ;
16098: LD_ADDR_VAR 0 3
16102: PUSH
16103: LD_VAR 0 3
16107: PUSH
16108: LD_INT 1
16110: PLUS
16111: ST_TO_ADDR
// SetSide ( i , j ) ;
16112: LD_VAR 0 2
16116: PPUSH
16117: LD_VAR 0 3
16121: PPUSH
16122: CALL_OW 235
// end ;
16126: GO 16049
16128: POP
16129: POP
// end ;
16130: LD_VAR 0 1
16134: RET
// export function hHackFog ; begin
16135: LD_INT 0
16137: PPUSH
// FogOff ( true ) ;
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 344
// end ;
16145: LD_VAR 0 1
16149: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16150: LD_INT 0
16152: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16153: LD_VAR 0 1
16157: PPUSH
16158: LD_VAR 0 2
16162: PPUSH
16163: LD_VAR 0 3
16167: PPUSH
16168: LD_INT 1
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 483
// CenterOnXY ( x , y ) ;
16178: LD_VAR 0 2
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: CALL_OW 84
// end ;
16192: LD_VAR 0 4
16196: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16201: LD_VAR 0 1
16205: NOT
16206: PUSH
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_VAR 0 3
16216: PPUSH
16217: CALL_OW 488
16221: NOT
16222: OR
16223: PUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 266
16233: PUSH
16234: LD_INT 3
16236: NONEQUAL
16237: PUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: CALL_OW 247
16247: PUSH
16248: LD_INT 1
16250: EQUAL
16251: NOT
16252: AND
16253: OR
16254: IFFALSE 16258
// exit ;
16256: GO 16407
// if GetType ( factory ) = unit_human then
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 247
16267: PUSH
16268: LD_INT 1
16270: EQUAL
16271: IFFALSE 16288
// factory := IsInUnit ( factory ) ;
16273: LD_ADDR_VAR 0 1
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 310
16287: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 266
16297: PUSH
16298: LD_INT 3
16300: NONEQUAL
16301: IFFALSE 16305
// exit ;
16303: GO 16407
// if HexInfo ( x , y ) = factory then
16305: LD_VAR 0 2
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: CALL_OW 428
16319: PUSH
16320: LD_VAR 0 1
16324: EQUAL
16325: IFFALSE 16352
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16327: LD_ADDR_EXP 65
16331: PUSH
16332: LD_EXP 65
16336: PPUSH
16337: LD_VAR 0 1
16341: PPUSH
16342: LD_INT 0
16344: PPUSH
16345: CALL_OW 1
16349: ST_TO_ADDR
16350: GO 16403
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16352: LD_ADDR_EXP 65
16356: PUSH
16357: LD_EXP 65
16361: PPUSH
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 255
16376: PUSH
16377: LD_VAR 0 1
16381: PUSH
16382: LD_VAR 0 2
16386: PUSH
16387: LD_VAR 0 3
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 1
16402: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16403: CALL 16412 0 0
// end ;
16407: LD_VAR 0 4
16411: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16412: LD_INT 0
16414: PPUSH
16415: PPUSH
16416: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16417: LD_STRING resetFactoryWaypoint();
16419: PPUSH
16420: CALL_OW 559
// if factoryWaypoints then
16424: LD_EXP 65
16428: IFFALSE 16554
// begin list := PrepareArray ( factoryWaypoints ) ;
16430: LD_ADDR_VAR 0 3
16434: PUSH
16435: LD_EXP 65
16439: PPUSH
16440: CALL 63309 0 1
16444: ST_TO_ADDR
// for i := 1 to list do
16445: LD_ADDR_VAR 0 2
16449: PUSH
16450: DOUBLE
16451: LD_INT 1
16453: DEC
16454: ST_TO_ADDR
16455: LD_VAR 0 3
16459: PUSH
16460: FOR_TO
16461: IFFALSE 16552
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16463: LD_STRING setFactoryWaypointXY(
16465: PUSH
16466: LD_VAR 0 3
16470: PUSH
16471: LD_VAR 0 2
16475: ARRAY
16476: PUSH
16477: LD_INT 1
16479: ARRAY
16480: STR
16481: PUSH
16482: LD_STRING ,
16484: STR
16485: PUSH
16486: LD_VAR 0 3
16490: PUSH
16491: LD_VAR 0 2
16495: ARRAY
16496: PUSH
16497: LD_INT 2
16499: ARRAY
16500: STR
16501: PUSH
16502: LD_STRING ,
16504: STR
16505: PUSH
16506: LD_VAR 0 3
16510: PUSH
16511: LD_VAR 0 2
16515: ARRAY
16516: PUSH
16517: LD_INT 3
16519: ARRAY
16520: STR
16521: PUSH
16522: LD_STRING ,
16524: STR
16525: PUSH
16526: LD_VAR 0 3
16530: PUSH
16531: LD_VAR 0 2
16535: ARRAY
16536: PUSH
16537: LD_INT 4
16539: ARRAY
16540: STR
16541: PUSH
16542: LD_STRING )
16544: STR
16545: PPUSH
16546: CALL_OW 559
16550: GO 16460
16552: POP
16553: POP
// end ; end ;
16554: LD_VAR 0 1
16558: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16559: LD_INT 0
16561: PPUSH
// if HexInfo ( x , y ) = warehouse then
16562: LD_VAR 0 2
16566: PPUSH
16567: LD_VAR 0 3
16571: PPUSH
16572: CALL_OW 428
16576: PUSH
16577: LD_VAR 0 1
16581: EQUAL
16582: IFFALSE 16609
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16584: LD_ADDR_EXP 66
16588: PUSH
16589: LD_EXP 66
16593: PPUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 0
16601: PPUSH
16602: CALL_OW 1
16606: ST_TO_ADDR
16607: GO 16660
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16609: LD_ADDR_EXP 66
16613: PUSH
16614: LD_EXP 66
16618: PPUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 255
16633: PUSH
16634: LD_VAR 0 1
16638: PUSH
16639: LD_VAR 0 2
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 1
16659: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16660: CALL 16669 0 0
// end ;
16664: LD_VAR 0 4
16668: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16669: LD_INT 0
16671: PPUSH
16672: PPUSH
16673: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16674: LD_STRING resetWarehouseGatheringPoints();
16676: PPUSH
16677: CALL_OW 559
// if warehouseGatheringPoints then
16681: LD_EXP 66
16685: IFFALSE 16811
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_EXP 66
16696: PPUSH
16697: CALL 63309 0 1
16701: ST_TO_ADDR
// for i := 1 to list do
16702: LD_ADDR_VAR 0 2
16706: PUSH
16707: DOUBLE
16708: LD_INT 1
16710: DEC
16711: ST_TO_ADDR
16712: LD_VAR 0 3
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16809
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16720: LD_STRING setWarehouseGatheringPointXY(
16722: PUSH
16723: LD_VAR 0 3
16727: PUSH
16728: LD_VAR 0 2
16732: ARRAY
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: STR
16738: PUSH
16739: LD_STRING ,
16741: STR
16742: PUSH
16743: LD_VAR 0 3
16747: PUSH
16748: LD_VAR 0 2
16752: ARRAY
16753: PUSH
16754: LD_INT 2
16756: ARRAY
16757: STR
16758: PUSH
16759: LD_STRING ,
16761: STR
16762: PUSH
16763: LD_VAR 0 3
16767: PUSH
16768: LD_VAR 0 2
16772: ARRAY
16773: PUSH
16774: LD_INT 3
16776: ARRAY
16777: STR
16778: PUSH
16779: LD_STRING ,
16781: STR
16782: PUSH
16783: LD_VAR 0 3
16787: PUSH
16788: LD_VAR 0 2
16792: ARRAY
16793: PUSH
16794: LD_INT 4
16796: ARRAY
16797: STR
16798: PUSH
16799: LD_STRING )
16801: STR
16802: PPUSH
16803: CALL_OW 559
16807: GO 16717
16809: POP
16810: POP
// end ; end ;
16811: LD_VAR 0 1
16815: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16816: LD_EXP 66
16820: IFFALSE 17507
16822: GO 16824
16824: DISABLE
16825: LD_INT 0
16827: PPUSH
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
16832: PPUSH
16833: PPUSH
16834: PPUSH
16835: PPUSH
// begin enable ;
16836: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16837: LD_ADDR_VAR 0 3
16841: PUSH
16842: LD_EXP 66
16846: PPUSH
16847: CALL 63309 0 1
16851: ST_TO_ADDR
// if not list then
16852: LD_VAR 0 3
16856: NOT
16857: IFFALSE 16861
// exit ;
16859: GO 17507
// for i := 1 to list do
16861: LD_ADDR_VAR 0 1
16865: PUSH
16866: DOUBLE
16867: LD_INT 1
16869: DEC
16870: ST_TO_ADDR
16871: LD_VAR 0 3
16875: PUSH
16876: FOR_TO
16877: IFFALSE 17505
// begin depot := list [ i ] [ 2 ] ;
16879: LD_ADDR_VAR 0 8
16883: PUSH
16884: LD_VAR 0 3
16888: PUSH
16889: LD_VAR 0 1
16893: ARRAY
16894: PUSH
16895: LD_INT 2
16897: ARRAY
16898: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16899: LD_ADDR_VAR 0 5
16903: PUSH
16904: LD_VAR 0 3
16908: PUSH
16909: LD_VAR 0 1
16913: ARRAY
16914: PUSH
16915: LD_INT 1
16917: ARRAY
16918: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16919: LD_VAR 0 8
16923: PPUSH
16924: CALL_OW 301
16928: PUSH
16929: LD_VAR 0 5
16933: PUSH
16934: LD_VAR 0 8
16938: PPUSH
16939: CALL_OW 255
16943: NONEQUAL
16944: OR
16945: IFFALSE 16974
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16947: LD_ADDR_EXP 66
16951: PUSH
16952: LD_EXP 66
16956: PPUSH
16957: LD_VAR 0 8
16961: PPUSH
16962: LD_INT 0
16964: PPUSH
16965: CALL_OW 1
16969: ST_TO_ADDR
// exit ;
16970: POP
16971: POP
16972: GO 17507
// end ; x := list [ i ] [ 3 ] ;
16974: LD_ADDR_VAR 0 6
16978: PUSH
16979: LD_VAR 0 3
16983: PUSH
16984: LD_VAR 0 1
16988: ARRAY
16989: PUSH
16990: LD_INT 3
16992: ARRAY
16993: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16994: LD_ADDR_VAR 0 7
16998: PUSH
16999: LD_VAR 0 3
17003: PUSH
17004: LD_VAR 0 1
17008: ARRAY
17009: PUSH
17010: LD_INT 4
17012: ARRAY
17013: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17014: LD_ADDR_VAR 0 9
17018: PUSH
17019: LD_VAR 0 6
17023: PPUSH
17024: LD_VAR 0 7
17028: PPUSH
17029: LD_INT 16
17031: PPUSH
17032: CALL 61893 0 3
17036: ST_TO_ADDR
// if not cratesNearbyPoint then
17037: LD_VAR 0 9
17041: NOT
17042: IFFALSE 17048
// exit ;
17044: POP
17045: POP
17046: GO 17507
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17048: LD_ADDR_VAR 0 4
17052: PUSH
17053: LD_INT 22
17055: PUSH
17056: LD_VAR 0 5
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 3
17067: PUSH
17068: LD_INT 60
17070: PUSH
17071: EMPTY
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 91
17080: PUSH
17081: LD_VAR 0 8
17085: PUSH
17086: LD_INT 6
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: LD_INT 25
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 25
17109: PUSH
17110: LD_INT 16
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: PPUSH
17128: CALL_OW 69
17132: PUSH
17133: LD_VAR 0 8
17137: PPUSH
17138: CALL_OW 313
17142: PPUSH
17143: LD_INT 3
17145: PUSH
17146: LD_INT 60
17148: PUSH
17149: EMPTY
17150: LIST
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: PUSH
17159: LD_INT 25
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 25
17171: PUSH
17172: LD_INT 16
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PPUSH
17188: CALL_OW 72
17192: UNION
17193: ST_TO_ADDR
// if tmp then
17194: LD_VAR 0 4
17198: IFFALSE 17278
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17200: LD_ADDR_VAR 0 4
17204: PUSH
17205: LD_VAR 0 4
17209: PPUSH
17210: LD_INT 3
17212: PPUSH
17213: CALL 59860 0 2
17217: ST_TO_ADDR
// for j in tmp do
17218: LD_ADDR_VAR 0 2
17222: PUSH
17223: LD_VAR 0 4
17227: PUSH
17228: FOR_IN
17229: IFFALSE 17272
// begin if IsInUnit ( j ) then
17231: LD_VAR 0 2
17235: PPUSH
17236: CALL_OW 310
17240: IFFALSE 17251
// ComExit ( j ) ;
17242: LD_VAR 0 2
17246: PPUSH
17247: CALL 59943 0 1
// AddComCollect ( j , x , y ) ;
17251: LD_VAR 0 2
17255: PPUSH
17256: LD_VAR 0 6
17260: PPUSH
17261: LD_VAR 0 7
17265: PPUSH
17266: CALL_OW 177
// end ;
17270: GO 17228
17272: POP
17273: POP
// exit ;
17274: POP
17275: POP
17276: GO 17507
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17278: LD_ADDR_VAR 0 4
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_VAR 0 5
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 91
17297: PUSH
17298: LD_VAR 0 8
17302: PUSH
17303: LD_INT 8
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: LD_INT 34
17316: PUSH
17317: LD_INT 12
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 34
17326: PUSH
17327: LD_INT 51
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 34
17336: PUSH
17337: LD_INT 32
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 34
17346: PUSH
17347: LD_EXP 79
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PPUSH
17368: CALL_OW 69
17372: ST_TO_ADDR
// if tmp then
17373: LD_VAR 0 4
17377: IFFALSE 17503
// begin for j in tmp do
17379: LD_ADDR_VAR 0 2
17383: PUSH
17384: LD_VAR 0 4
17388: PUSH
17389: FOR_IN
17390: IFFALSE 17501
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17392: LD_VAR 0 2
17396: PPUSH
17397: CALL_OW 262
17401: PUSH
17402: LD_INT 3
17404: EQUAL
17405: PUSH
17406: LD_VAR 0 2
17410: PPUSH
17411: CALL_OW 261
17415: PUSH
17416: LD_INT 20
17418: GREATER
17419: OR
17420: PUSH
17421: LD_VAR 0 2
17425: PPUSH
17426: CALL_OW 314
17430: NOT
17431: AND
17432: PUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: CALL_OW 263
17442: PUSH
17443: LD_INT 1
17445: NONEQUAL
17446: PUSH
17447: LD_VAR 0 2
17451: PPUSH
17452: CALL_OW 311
17456: OR
17457: AND
17458: IFFALSE 17499
// begin ComCollect ( j , x , y ) ;
17460: LD_VAR 0 2
17464: PPUSH
17465: LD_VAR 0 6
17469: PPUSH
17470: LD_VAR 0 7
17474: PPUSH
17475: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17479: LD_VAR 0 2
17483: PPUSH
17484: LD_VAR 0 8
17488: PPUSH
17489: CALL_OW 172
// exit ;
17493: POP
17494: POP
17495: POP
17496: POP
17497: GO 17507
// end ;
17499: GO 17389
17501: POP
17502: POP
// end ; end ;
17503: GO 16876
17505: POP
17506: POP
// end ; end_of_file
17507: PPOPN 9
17509: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17510: LD_VAR 0 1
17514: PUSH
17515: LD_INT 200
17517: DOUBLE
17518: GREATEREQUAL
17519: IFFALSE 17527
17521: LD_INT 299
17523: DOUBLE
17524: LESSEQUAL
17525: IFTRUE 17529
17527: GO 17561
17529: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17530: LD_VAR 0 1
17534: PPUSH
17535: LD_VAR 0 2
17539: PPUSH
17540: LD_VAR 0 3
17544: PPUSH
17545: LD_VAR 0 4
17549: PPUSH
17550: LD_VAR 0 5
17554: PPUSH
17555: CALL 18051 0 5
17559: GO 17638
17561: LD_INT 300
17563: DOUBLE
17564: GREATEREQUAL
17565: IFFALSE 17573
17567: LD_INT 399
17569: DOUBLE
17570: LESSEQUAL
17571: IFTRUE 17575
17573: GO 17637
17575: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17576: LD_VAR 0 1
17580: PPUSH
17581: LD_VAR 0 2
17585: PPUSH
17586: LD_VAR 0 3
17590: PPUSH
17591: LD_VAR 0 4
17595: PPUSH
17596: LD_VAR 0 5
17600: PPUSH
17601: LD_VAR 0 6
17605: PPUSH
17606: LD_VAR 0 7
17610: PPUSH
17611: LD_VAR 0 8
17615: PPUSH
17616: LD_VAR 0 9
17620: PPUSH
17621: LD_VAR 0 10
17625: PPUSH
17626: LD_VAR 0 11
17630: PPUSH
17631: CALL 14217 0 11
17635: GO 17638
17637: POP
// end ;
17638: PPOPN 11
17640: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17641: LD_VAR 0 1
17645: PPUSH
17646: LD_VAR 0 2
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_VAR 0 4
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: CALL 17787 0 5
// end ; end_of_file
17670: PPOPN 5
17672: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17673: LD_INT 0
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 264
17688: PUSH
17689: LD_EXP 82
17693: EQUAL
17694: IFFALSE 17766
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17696: LD_INT 68
17698: PPUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 255
17708: PPUSH
17709: CALL_OW 321
17713: PUSH
17714: LD_INT 2
17716: EQUAL
17717: IFFALSE 17729
// eff := 70 else
17719: LD_ADDR_VAR 0 4
17723: PUSH
17724: LD_INT 70
17726: ST_TO_ADDR
17727: GO 17737
// eff := 30 ;
17729: LD_ADDR_VAR 0 4
17733: PUSH
17734: LD_INT 30
17736: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 250
17746: PPUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 251
17756: PPUSH
17757: LD_VAR 0 4
17761: PPUSH
17762: CALL_OW 495
// end ; end ;
17766: LD_VAR 0 2
17770: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17771: LD_INT 0
17773: PPUSH
// end ;
17774: LD_VAR 0 4
17778: RET
// export function SOS_Command ( cmd ) ; begin
17779: LD_INT 0
17781: PPUSH
// end ;
17782: LD_VAR 0 2
17786: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17787: LD_INT 0
17789: PPUSH
// end ;
17790: LD_VAR 0 6
17794: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17795: LD_INT 0
17797: PPUSH
17798: PPUSH
// if not vehicle or not factory then
17799: LD_VAR 0 1
17803: NOT
17804: PUSH
17805: LD_VAR 0 2
17809: NOT
17810: OR
17811: IFFALSE 17815
// exit ;
17813: GO 18046
// if factoryWaypoints >= factory then
17815: LD_EXP 65
17819: PUSH
17820: LD_VAR 0 2
17824: GREATEREQUAL
17825: IFFALSE 18046
// if factoryWaypoints [ factory ] then
17827: LD_EXP 65
17831: PUSH
17832: LD_VAR 0 2
17836: ARRAY
17837: IFFALSE 18046
// begin if GetControl ( vehicle ) = control_manual then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 263
17848: PUSH
17849: LD_INT 1
17851: EQUAL
17852: IFFALSE 17933
// begin driver := IsDrivenBy ( vehicle ) ;
17854: LD_ADDR_VAR 0 4
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 311
17868: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17869: LD_VAR 0 4
17873: PPUSH
17874: LD_EXP 65
17878: PUSH
17879: LD_VAR 0 2
17883: ARRAY
17884: PUSH
17885: LD_INT 3
17887: ARRAY
17888: PPUSH
17889: LD_EXP 65
17893: PUSH
17894: LD_VAR 0 2
17898: ARRAY
17899: PUSH
17900: LD_INT 4
17902: ARRAY
17903: PPUSH
17904: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17908: LD_VAR 0 4
17912: PPUSH
17913: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17917: LD_VAR 0 4
17921: PPUSH
17922: LD_VAR 0 2
17926: PPUSH
17927: CALL_OW 180
// end else
17931: GO 18046
// if GetControl ( vehicle ) = control_remote then
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 263
17942: PUSH
17943: LD_INT 2
17945: EQUAL
17946: IFFALSE 18007
// begin wait ( 0 0$2 ) ;
17948: LD_INT 70
17950: PPUSH
17951: CALL_OW 67
// if Connect ( vehicle ) then
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL 30254 0 1
17964: IFFALSE 18005
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17966: LD_VAR 0 1
17970: PPUSH
17971: LD_EXP 65
17975: PUSH
17976: LD_VAR 0 2
17980: ARRAY
17981: PUSH
17982: LD_INT 3
17984: ARRAY
17985: PPUSH
17986: LD_EXP 65
17990: PUSH
17991: LD_VAR 0 2
17995: ARRAY
17996: PUSH
17997: LD_INT 4
17999: ARRAY
18000: PPUSH
18001: CALL_OW 171
// end else
18005: GO 18046
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18007: LD_VAR 0 1
18011: PPUSH
18012: LD_EXP 65
18016: PUSH
18017: LD_VAR 0 2
18021: ARRAY
18022: PUSH
18023: LD_INT 3
18025: ARRAY
18026: PPUSH
18027: LD_EXP 65
18031: PUSH
18032: LD_VAR 0 2
18036: ARRAY
18037: PUSH
18038: LD_INT 4
18040: ARRAY
18041: PPUSH
18042: CALL_OW 171
// end ; end ;
18046: LD_VAR 0 3
18050: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18051: LD_INT 0
18053: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 250
18061: EQUAL
18062: PUSH
18063: LD_VAR 0 2
18067: PPUSH
18068: CALL_OW 264
18072: PUSH
18073: LD_EXP 85
18077: EQUAL
18078: AND
18079: IFFALSE 18100
// MinerPlaceMine ( unit , x , y ) ;
18081: LD_VAR 0 2
18085: PPUSH
18086: LD_VAR 0 4
18090: PPUSH
18091: LD_VAR 0 5
18095: PPUSH
18096: CALL 20499 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18100: LD_VAR 0 1
18104: PUSH
18105: LD_INT 251
18107: EQUAL
18108: PUSH
18109: LD_VAR 0 2
18113: PPUSH
18114: CALL_OW 264
18118: PUSH
18119: LD_EXP 85
18123: EQUAL
18124: AND
18125: IFFALSE 18146
// MinerDetonateMine ( unit , x , y ) ;
18127: LD_VAR 0 2
18131: PPUSH
18132: LD_VAR 0 4
18136: PPUSH
18137: LD_VAR 0 5
18141: PPUSH
18142: CALL 20776 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18146: LD_VAR 0 1
18150: PUSH
18151: LD_INT 252
18153: EQUAL
18154: PUSH
18155: LD_VAR 0 2
18159: PPUSH
18160: CALL_OW 264
18164: PUSH
18165: LD_EXP 85
18169: EQUAL
18170: AND
18171: IFFALSE 18192
// MinerCreateMinefield ( unit , x , y ) ;
18173: LD_VAR 0 2
18177: PPUSH
18178: LD_VAR 0 4
18182: PPUSH
18183: LD_VAR 0 5
18187: PPUSH
18188: CALL 21193 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18192: LD_VAR 0 1
18196: PUSH
18197: LD_INT 253
18199: EQUAL
18200: PUSH
18201: LD_VAR 0 2
18205: PPUSH
18206: CALL_OW 257
18210: PUSH
18211: LD_INT 5
18213: EQUAL
18214: AND
18215: IFFALSE 18236
// ComBinocular ( unit , x , y ) ;
18217: LD_VAR 0 2
18221: PPUSH
18222: LD_VAR 0 4
18226: PPUSH
18227: LD_VAR 0 5
18231: PPUSH
18232: CALL 21564 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18236: LD_VAR 0 1
18240: PUSH
18241: LD_INT 254
18243: EQUAL
18244: PUSH
18245: LD_VAR 0 2
18249: PPUSH
18250: CALL_OW 264
18254: PUSH
18255: LD_EXP 80
18259: EQUAL
18260: AND
18261: PUSH
18262: LD_VAR 0 3
18266: PPUSH
18267: CALL_OW 263
18271: PUSH
18272: LD_INT 3
18274: EQUAL
18275: AND
18276: IFFALSE 18292
// HackDestroyVehicle ( unit , selectedUnit ) ;
18278: LD_VAR 0 2
18282: PPUSH
18283: LD_VAR 0 3
18287: PPUSH
18288: CALL 19859 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18292: LD_VAR 0 1
18296: PUSH
18297: LD_INT 255
18299: EQUAL
18300: PUSH
18301: LD_VAR 0 2
18305: PPUSH
18306: CALL_OW 264
18310: PUSH
18311: LD_INT 14
18313: PUSH
18314: LD_INT 53
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: IN
18321: AND
18322: PUSH
18323: LD_VAR 0 4
18327: PPUSH
18328: LD_VAR 0 5
18332: PPUSH
18333: CALL_OW 488
18337: AND
18338: IFFALSE 18362
// CutTreeXYR ( unit , x , y , 12 ) ;
18340: LD_VAR 0 2
18344: PPUSH
18345: LD_VAR 0 4
18349: PPUSH
18350: LD_VAR 0 5
18354: PPUSH
18355: LD_INT 12
18357: PPUSH
18358: CALL 18425 0 4
// if cmd = 256 then
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 256
18369: EQUAL
18370: IFFALSE 18391
// SetFactoryWaypoint ( unit , x , y ) ;
18372: LD_VAR 0 2
18376: PPUSH
18377: LD_VAR 0 4
18381: PPUSH
18382: LD_VAR 0 5
18386: PPUSH
18387: CALL 16197 0 3
// if cmd = 257 then
18391: LD_VAR 0 1
18395: PUSH
18396: LD_INT 257
18398: EQUAL
18399: IFFALSE 18420
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18401: LD_VAR 0 2
18405: PPUSH
18406: LD_VAR 0 4
18410: PPUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: CALL 16559 0 3
// end ;
18420: LD_VAR 0 6
18424: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
18430: PPUSH
18431: PPUSH
18432: PPUSH
18433: PPUSH
18434: PPUSH
18435: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18436: LD_VAR 0 1
18440: NOT
18441: PUSH
18442: LD_VAR 0 2
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: CALL_OW 488
18456: NOT
18457: OR
18458: PUSH
18459: LD_VAR 0 4
18463: NOT
18464: OR
18465: IFFALSE 18469
// exit ;
18467: GO 18809
// list := [ ] ;
18469: LD_ADDR_VAR 0 13
18473: PUSH
18474: EMPTY
18475: ST_TO_ADDR
// if x - r < 0 then
18476: LD_VAR 0 2
18480: PUSH
18481: LD_VAR 0 4
18485: MINUS
18486: PUSH
18487: LD_INT 0
18489: LESS
18490: IFFALSE 18502
// min_x := 0 else
18492: LD_ADDR_VAR 0 7
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
18500: GO 18518
// min_x := x - r ;
18502: LD_ADDR_VAR 0 7
18506: PUSH
18507: LD_VAR 0 2
18511: PUSH
18512: LD_VAR 0 4
18516: MINUS
18517: ST_TO_ADDR
// if y - r < 0 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_VAR 0 4
18527: MINUS
18528: PUSH
18529: LD_INT 0
18531: LESS
18532: IFFALSE 18544
// min_y := 0 else
18534: LD_ADDR_VAR 0 8
18538: PUSH
18539: LD_INT 0
18541: ST_TO_ADDR
18542: GO 18560
// min_y := y - r ;
18544: LD_ADDR_VAR 0 8
18548: PUSH
18549: LD_VAR 0 3
18553: PUSH
18554: LD_VAR 0 4
18558: MINUS
18559: ST_TO_ADDR
// max_x := x + r ;
18560: LD_ADDR_VAR 0 9
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: LD_VAR 0 4
18574: PLUS
18575: ST_TO_ADDR
// max_y := y + r ;
18576: LD_ADDR_VAR 0 10
18580: PUSH
18581: LD_VAR 0 3
18585: PUSH
18586: LD_VAR 0 4
18590: PLUS
18591: ST_TO_ADDR
// for _x = min_x to max_x do
18592: LD_ADDR_VAR 0 11
18596: PUSH
18597: DOUBLE
18598: LD_VAR 0 7
18602: DEC
18603: ST_TO_ADDR
18604: LD_VAR 0 9
18608: PUSH
18609: FOR_TO
18610: IFFALSE 18727
// for _y = min_y to max_y do
18612: LD_ADDR_VAR 0 12
18616: PUSH
18617: DOUBLE
18618: LD_VAR 0 8
18622: DEC
18623: ST_TO_ADDR
18624: LD_VAR 0 10
18628: PUSH
18629: FOR_TO
18630: IFFALSE 18723
// begin if not ValidHex ( _x , _y ) then
18632: LD_VAR 0 11
18636: PPUSH
18637: LD_VAR 0 12
18641: PPUSH
18642: CALL_OW 488
18646: NOT
18647: IFFALSE 18651
// continue ;
18649: GO 18629
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18651: LD_VAR 0 11
18655: PPUSH
18656: LD_VAR 0 12
18660: PPUSH
18661: CALL_OW 351
18665: PUSH
18666: LD_VAR 0 11
18670: PPUSH
18671: LD_VAR 0 12
18675: PPUSH
18676: CALL_OW 554
18680: AND
18681: IFFALSE 18721
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18683: LD_ADDR_VAR 0 13
18687: PUSH
18688: LD_VAR 0 13
18692: PPUSH
18693: LD_VAR 0 13
18697: PUSH
18698: LD_INT 1
18700: PLUS
18701: PPUSH
18702: LD_VAR 0 11
18706: PUSH
18707: LD_VAR 0 12
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 2
18720: ST_TO_ADDR
// end ;
18721: GO 18629
18723: POP
18724: POP
18725: GO 18609
18727: POP
18728: POP
// if not list then
18729: LD_VAR 0 13
18733: NOT
18734: IFFALSE 18738
// exit ;
18736: GO 18809
// for i in list do
18738: LD_ADDR_VAR 0 6
18742: PUSH
18743: LD_VAR 0 13
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18807
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18751: LD_VAR 0 1
18755: PPUSH
18756: LD_STRING M
18758: PUSH
18759: LD_VAR 0 6
18763: PUSH
18764: LD_INT 1
18766: ARRAY
18767: PUSH
18768: LD_VAR 0 6
18772: PUSH
18773: LD_INT 2
18775: ARRAY
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: PPUSH
18801: CALL_OW 447
18805: GO 18748
18807: POP
18808: POP
// end ;
18809: LD_VAR 0 5
18813: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18814: LD_EXP 68
18818: NOT
18819: IFFALSE 18869
18821: GO 18823
18823: DISABLE
// begin initHack := true ;
18824: LD_ADDR_EXP 68
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// hackTanks := [ ] ;
18832: LD_ADDR_EXP 69
18836: PUSH
18837: EMPTY
18838: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18839: LD_ADDR_EXP 70
18843: PUSH
18844: EMPTY
18845: ST_TO_ADDR
// hackLimit := 3 ;
18846: LD_ADDR_EXP 71
18850: PUSH
18851: LD_INT 3
18853: ST_TO_ADDR
// hackDist := 12 ;
18854: LD_ADDR_EXP 72
18858: PUSH
18859: LD_INT 12
18861: ST_TO_ADDR
// hackCounter := [ ] ;
18862: LD_ADDR_EXP 73
18866: PUSH
18867: EMPTY
18868: ST_TO_ADDR
// end ;
18869: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18870: LD_EXP 68
18874: PUSH
18875: LD_INT 34
18877: PUSH
18878: LD_EXP 80
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PPUSH
18887: CALL_OW 69
18891: AND
18892: IFFALSE 19147
18894: GO 18896
18896: DISABLE
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
// begin enable ;
18901: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18902: LD_ADDR_VAR 0 1
18906: PUSH
18907: LD_INT 34
18909: PUSH
18910: LD_EXP 80
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: PUSH
18924: FOR_IN
18925: IFFALSE 19145
// begin if not i in hackTanks then
18927: LD_VAR 0 1
18931: PUSH
18932: LD_EXP 69
18936: IN
18937: NOT
18938: IFFALSE 19021
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18940: LD_ADDR_EXP 69
18944: PUSH
18945: LD_EXP 69
18949: PPUSH
18950: LD_EXP 69
18954: PUSH
18955: LD_INT 1
18957: PLUS
18958: PPUSH
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 1
18968: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18969: LD_ADDR_EXP 70
18973: PUSH
18974: LD_EXP 70
18978: PPUSH
18979: LD_EXP 70
18983: PUSH
18984: LD_INT 1
18986: PLUS
18987: PPUSH
18988: EMPTY
18989: PPUSH
18990: CALL_OW 1
18994: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18995: LD_ADDR_EXP 73
18999: PUSH
19000: LD_EXP 73
19004: PPUSH
19005: LD_EXP 73
19009: PUSH
19010: LD_INT 1
19012: PLUS
19013: PPUSH
19014: EMPTY
19015: PPUSH
19016: CALL_OW 1
19020: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 302
19030: NOT
19031: IFFALSE 19044
// begin HackUnlinkAll ( i ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL 19150 0 1
// continue ;
19042: GO 18924
// end ; HackCheckCapturedStatus ( i ) ;
19044: LD_VAR 0 1
19048: PPUSH
19049: CALL 19593 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19053: LD_ADDR_VAR 0 2
19057: PUSH
19058: LD_INT 81
19060: PUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 255
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 33
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 91
19087: PUSH
19088: LD_VAR 0 1
19092: PUSH
19093: LD_EXP 72
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 50
19105: PUSH
19106: EMPTY
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: ST_TO_ADDR
// if not tmp then
19120: LD_VAR 0 2
19124: NOT
19125: IFFALSE 19129
// continue ;
19127: GO 18924
// HackLink ( i , tmp ) ;
19129: LD_VAR 0 1
19133: PPUSH
19134: LD_VAR 0 2
19138: PPUSH
19139: CALL 19286 0 2
// end ;
19143: GO 18924
19145: POP
19146: POP
// end ;
19147: PPOPN 2
19149: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19150: LD_INT 0
19152: PPUSH
19153: PPUSH
19154: PPUSH
// if not hack in hackTanks then
19155: LD_VAR 0 1
19159: PUSH
19160: LD_EXP 69
19164: IN
19165: NOT
19166: IFFALSE 19170
// exit ;
19168: GO 19281
// index := GetElementIndex ( hackTanks , hack ) ;
19170: LD_ADDR_VAR 0 4
19174: PUSH
19175: LD_EXP 69
19179: PPUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL 27068 0 2
19189: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19190: LD_EXP 70
19194: PUSH
19195: LD_VAR 0 4
19199: ARRAY
19200: IFFALSE 19281
// begin for i in hackTanksCaptured [ index ] do
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: LD_EXP 70
19211: PUSH
19212: LD_VAR 0 4
19216: ARRAY
19217: PUSH
19218: FOR_IN
19219: IFFALSE 19245
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 1
19228: ARRAY
19229: PPUSH
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 2
19237: ARRAY
19238: PPUSH
19239: CALL_OW 235
19243: GO 19218
19245: POP
19246: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19247: LD_ADDR_EXP 70
19251: PUSH
19252: LD_EXP 70
19256: PPUSH
19257: LD_VAR 0 4
19261: PPUSH
19262: EMPTY
19263: PPUSH
19264: CALL_OW 1
19268: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 0
19276: PPUSH
19277: CALL_OW 505
// end ; end ;
19281: LD_VAR 0 2
19285: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
19290: PPUSH
// if not hack in hackTanks or not vehicles then
19291: LD_VAR 0 1
19295: PUSH
19296: LD_EXP 69
19300: IN
19301: NOT
19302: PUSH
19303: LD_VAR 0 2
19307: NOT
19308: OR
19309: IFFALSE 19313
// exit ;
19311: GO 19588
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_VAR 0 1
19322: PPUSH
19323: LD_VAR 0 2
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: LD_INT 1
19333: PPUSH
19334: CALL 27718 0 4
19338: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19339: LD_ADDR_VAR 0 5
19343: PUSH
19344: LD_EXP 69
19348: PPUSH
19349: LD_VAR 0 1
19353: PPUSH
19354: CALL 27068 0 2
19358: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19359: LD_EXP 70
19363: PUSH
19364: LD_VAR 0 5
19368: ARRAY
19369: PUSH
19370: LD_EXP 71
19374: LESS
19375: IFFALSE 19564
// begin for i := 1 to vehicles do
19377: LD_ADDR_VAR 0 4
19381: PUSH
19382: DOUBLE
19383: LD_INT 1
19385: DEC
19386: ST_TO_ADDR
19387: LD_VAR 0 2
19391: PUSH
19392: FOR_TO
19393: IFFALSE 19562
// begin if hackTanksCaptured [ index ] = hackLimit then
19395: LD_EXP 70
19399: PUSH
19400: LD_VAR 0 5
19404: ARRAY
19405: PUSH
19406: LD_EXP 71
19410: EQUAL
19411: IFFALSE 19415
// break ;
19413: GO 19562
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19415: LD_ADDR_EXP 73
19419: PUSH
19420: LD_EXP 73
19424: PPUSH
19425: LD_VAR 0 5
19429: PPUSH
19430: LD_EXP 73
19434: PUSH
19435: LD_VAR 0 5
19439: ARRAY
19440: PUSH
19441: LD_INT 1
19443: PLUS
19444: PPUSH
19445: CALL_OW 1
19449: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19450: LD_ADDR_EXP 70
19454: PUSH
19455: LD_EXP 70
19459: PPUSH
19460: LD_VAR 0 5
19464: PUSH
19465: LD_EXP 70
19469: PUSH
19470: LD_VAR 0 5
19474: ARRAY
19475: PUSH
19476: LD_INT 1
19478: PLUS
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: LD_VAR 0 2
19488: PUSH
19489: LD_VAR 0 4
19493: ARRAY
19494: PUSH
19495: LD_VAR 0 2
19499: PUSH
19500: LD_VAR 0 4
19504: ARRAY
19505: PPUSH
19506: CALL_OW 255
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL 27283 0 3
19519: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19520: LD_VAR 0 2
19524: PUSH
19525: LD_VAR 0 4
19529: ARRAY
19530: PPUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 255
19540: PPUSH
19541: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19545: LD_VAR 0 2
19549: PUSH
19550: LD_VAR 0 4
19554: ARRAY
19555: PPUSH
19556: CALL_OW 141
// end ;
19560: GO 19392
19562: POP
19563: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19564: LD_VAR 0 1
19568: PPUSH
19569: LD_EXP 70
19573: PUSH
19574: LD_VAR 0 5
19578: ARRAY
19579: PUSH
19580: LD_INT 0
19582: PLUS
19583: PPUSH
19584: CALL_OW 505
// end ;
19588: LD_VAR 0 3
19592: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19593: LD_INT 0
19595: PPUSH
19596: PPUSH
19597: PPUSH
19598: PPUSH
// if not hack in hackTanks then
19599: LD_VAR 0 1
19603: PUSH
19604: LD_EXP 69
19608: IN
19609: NOT
19610: IFFALSE 19614
// exit ;
19612: GO 19854
// index := GetElementIndex ( hackTanks , hack ) ;
19614: LD_ADDR_VAR 0 4
19618: PUSH
19619: LD_EXP 69
19623: PPUSH
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL 27068 0 2
19633: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19634: LD_ADDR_VAR 0 3
19638: PUSH
19639: DOUBLE
19640: LD_EXP 70
19644: PUSH
19645: LD_VAR 0 4
19649: ARRAY
19650: INC
19651: ST_TO_ADDR
19652: LD_INT 1
19654: PUSH
19655: FOR_DOWNTO
19656: IFFALSE 19828
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19658: LD_ADDR_VAR 0 5
19662: PUSH
19663: LD_EXP 70
19667: PUSH
19668: LD_VAR 0 4
19672: ARRAY
19673: PUSH
19674: LD_VAR 0 3
19678: ARRAY
19679: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19680: LD_VAR 0 5
19684: PUSH
19685: LD_INT 1
19687: ARRAY
19688: PPUSH
19689: CALL_OW 302
19693: NOT
19694: PUSH
19695: LD_VAR 0 5
19699: PUSH
19700: LD_INT 1
19702: ARRAY
19703: PPUSH
19704: CALL_OW 255
19708: PUSH
19709: LD_VAR 0 1
19713: PPUSH
19714: CALL_OW 255
19718: NONEQUAL
19719: OR
19720: IFFALSE 19826
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19722: LD_VAR 0 5
19726: PUSH
19727: LD_INT 1
19729: ARRAY
19730: PPUSH
19731: CALL_OW 305
19735: PUSH
19736: LD_VAR 0 5
19740: PUSH
19741: LD_INT 1
19743: ARRAY
19744: PPUSH
19745: CALL_OW 255
19749: PUSH
19750: LD_VAR 0 1
19754: PPUSH
19755: CALL_OW 255
19759: EQUAL
19760: AND
19761: IFFALSE 19785
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19763: LD_VAR 0 5
19767: PUSH
19768: LD_INT 1
19770: ARRAY
19771: PPUSH
19772: LD_VAR 0 5
19776: PUSH
19777: LD_INT 2
19779: ARRAY
19780: PPUSH
19781: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19785: LD_ADDR_EXP 70
19789: PUSH
19790: LD_EXP 70
19794: PPUSH
19795: LD_VAR 0 4
19799: PPUSH
19800: LD_EXP 70
19804: PUSH
19805: LD_VAR 0 4
19809: ARRAY
19810: PPUSH
19811: LD_VAR 0 3
19815: PPUSH
19816: CALL_OW 3
19820: PPUSH
19821: CALL_OW 1
19825: ST_TO_ADDR
// end ; end ;
19826: GO 19655
19828: POP
19829: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19830: LD_VAR 0 1
19834: PPUSH
19835: LD_EXP 70
19839: PUSH
19840: LD_VAR 0 4
19844: ARRAY
19845: PUSH
19846: LD_INT 0
19848: PLUS
19849: PPUSH
19850: CALL_OW 505
// end ;
19854: LD_VAR 0 2
19858: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19859: LD_INT 0
19861: PPUSH
19862: PPUSH
19863: PPUSH
19864: PPUSH
// if not hack in hackTanks then
19865: LD_VAR 0 1
19869: PUSH
19870: LD_EXP 69
19874: IN
19875: NOT
19876: IFFALSE 19880
// exit ;
19878: GO 19965
// index := GetElementIndex ( hackTanks , hack ) ;
19880: LD_ADDR_VAR 0 5
19884: PUSH
19885: LD_EXP 69
19889: PPUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: CALL 27068 0 2
19899: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19900: LD_ADDR_VAR 0 4
19904: PUSH
19905: DOUBLE
19906: LD_INT 1
19908: DEC
19909: ST_TO_ADDR
19910: LD_EXP 70
19914: PUSH
19915: LD_VAR 0 5
19919: ARRAY
19920: PUSH
19921: FOR_TO
19922: IFFALSE 19963
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19924: LD_EXP 70
19928: PUSH
19929: LD_VAR 0 5
19933: ARRAY
19934: PUSH
19935: LD_VAR 0 4
19939: ARRAY
19940: PUSH
19941: LD_INT 1
19943: ARRAY
19944: PUSH
19945: LD_VAR 0 2
19949: EQUAL
19950: IFFALSE 19961
// KillUnit ( vehicle ) ;
19952: LD_VAR 0 2
19956: PPUSH
19957: CALL_OW 66
19961: GO 19921
19963: POP
19964: POP
// end ;
19965: LD_VAR 0 3
19969: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19970: LD_EXP 74
19974: NOT
19975: IFFALSE 20010
19977: GO 19979
19979: DISABLE
// begin initMiner := true ;
19980: LD_ADDR_EXP 74
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// minersList := [ ] ;
19988: LD_ADDR_EXP 75
19992: PUSH
19993: EMPTY
19994: ST_TO_ADDR
// minerMinesList := [ ] ;
19995: LD_ADDR_EXP 76
19999: PUSH
20000: EMPTY
20001: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20002: LD_ADDR_EXP 77
20006: PUSH
20007: LD_INT 5
20009: ST_TO_ADDR
// end ;
20010: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20011: LD_EXP 74
20015: PUSH
20016: LD_INT 34
20018: PUSH
20019: LD_EXP 85
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PPUSH
20028: CALL_OW 69
20032: AND
20033: IFFALSE 20496
20035: GO 20037
20037: DISABLE
20038: LD_INT 0
20040: PPUSH
20041: PPUSH
20042: PPUSH
20043: PPUSH
// begin enable ;
20044: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20045: LD_ADDR_VAR 0 1
20049: PUSH
20050: LD_INT 34
20052: PUSH
20053: LD_EXP 85
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: PUSH
20067: FOR_IN
20068: IFFALSE 20140
// begin if not i in minersList then
20070: LD_VAR 0 1
20074: PUSH
20075: LD_EXP 75
20079: IN
20080: NOT
20081: IFFALSE 20138
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20083: LD_ADDR_EXP 75
20087: PUSH
20088: LD_EXP 75
20092: PPUSH
20093: LD_EXP 75
20097: PUSH
20098: LD_INT 1
20100: PLUS
20101: PPUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 1
20111: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20112: LD_ADDR_EXP 76
20116: PUSH
20117: LD_EXP 76
20121: PPUSH
20122: LD_EXP 76
20126: PUSH
20127: LD_INT 1
20129: PLUS
20130: PPUSH
20131: EMPTY
20132: PPUSH
20133: CALL_OW 1
20137: ST_TO_ADDR
// end end ;
20138: GO 20067
20140: POP
20141: POP
// for i := minerMinesList downto 1 do
20142: LD_ADDR_VAR 0 1
20146: PUSH
20147: DOUBLE
20148: LD_EXP 76
20152: INC
20153: ST_TO_ADDR
20154: LD_INT 1
20156: PUSH
20157: FOR_DOWNTO
20158: IFFALSE 20494
// begin if IsLive ( minersList [ i ] ) then
20160: LD_EXP 75
20164: PUSH
20165: LD_VAR 0 1
20169: ARRAY
20170: PPUSH
20171: CALL_OW 300
20175: IFFALSE 20203
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20177: LD_EXP 75
20181: PUSH
20182: LD_VAR 0 1
20186: ARRAY
20187: PPUSH
20188: LD_EXP 76
20192: PUSH
20193: LD_VAR 0 1
20197: ARRAY
20198: PPUSH
20199: CALL_OW 505
// if not minerMinesList [ i ] then
20203: LD_EXP 76
20207: PUSH
20208: LD_VAR 0 1
20212: ARRAY
20213: NOT
20214: IFFALSE 20218
// continue ;
20216: GO 20157
// for j := minerMinesList [ i ] downto 1 do
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: DOUBLE
20224: LD_EXP 76
20228: PUSH
20229: LD_VAR 0 1
20233: ARRAY
20234: INC
20235: ST_TO_ADDR
20236: LD_INT 1
20238: PUSH
20239: FOR_DOWNTO
20240: IFFALSE 20490
// begin side := GetSide ( minersList [ i ] ) ;
20242: LD_ADDR_VAR 0 3
20246: PUSH
20247: LD_EXP 75
20251: PUSH
20252: LD_VAR 0 1
20256: ARRAY
20257: PPUSH
20258: CALL_OW 255
20262: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20263: LD_ADDR_VAR 0 4
20267: PUSH
20268: LD_EXP 76
20272: PUSH
20273: LD_VAR 0 1
20277: ARRAY
20278: PUSH
20279: LD_VAR 0 2
20283: ARRAY
20284: PUSH
20285: LD_INT 1
20287: ARRAY
20288: PPUSH
20289: LD_EXP 76
20293: PUSH
20294: LD_VAR 0 1
20298: ARRAY
20299: PUSH
20300: LD_VAR 0 2
20304: ARRAY
20305: PUSH
20306: LD_INT 2
20308: ARRAY
20309: PPUSH
20310: CALL_OW 428
20314: ST_TO_ADDR
// if not tmp then
20315: LD_VAR 0 4
20319: NOT
20320: IFFALSE 20324
// continue ;
20322: GO 20239
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20324: LD_VAR 0 4
20328: PUSH
20329: LD_INT 81
20331: PUSH
20332: LD_VAR 0 3
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PPUSH
20341: CALL_OW 69
20345: IN
20346: PUSH
20347: LD_EXP 76
20351: PUSH
20352: LD_VAR 0 1
20356: ARRAY
20357: PUSH
20358: LD_VAR 0 2
20362: ARRAY
20363: PUSH
20364: LD_INT 1
20366: ARRAY
20367: PPUSH
20368: LD_EXP 76
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: PUSH
20379: LD_VAR 0 2
20383: ARRAY
20384: PUSH
20385: LD_INT 2
20387: ARRAY
20388: PPUSH
20389: CALL_OW 458
20393: AND
20394: IFFALSE 20488
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20396: LD_EXP 76
20400: PUSH
20401: LD_VAR 0 1
20405: ARRAY
20406: PUSH
20407: LD_VAR 0 2
20411: ARRAY
20412: PUSH
20413: LD_INT 1
20415: ARRAY
20416: PPUSH
20417: LD_EXP 76
20421: PUSH
20422: LD_VAR 0 1
20426: ARRAY
20427: PUSH
20428: LD_VAR 0 2
20432: ARRAY
20433: PUSH
20434: LD_INT 2
20436: ARRAY
20437: PPUSH
20438: LD_VAR 0 3
20442: PPUSH
20443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20447: LD_ADDR_EXP 76
20451: PUSH
20452: LD_EXP 76
20456: PPUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: LD_EXP 76
20466: PUSH
20467: LD_VAR 0 1
20471: ARRAY
20472: PPUSH
20473: LD_VAR 0 2
20477: PPUSH
20478: CALL_OW 3
20482: PPUSH
20483: CALL_OW 1
20487: ST_TO_ADDR
// end ; end ;
20488: GO 20239
20490: POP
20491: POP
// end ;
20492: GO 20157
20494: POP
20495: POP
// end ;
20496: PPOPN 4
20498: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20499: LD_INT 0
20501: PPUSH
20502: PPUSH
// result := false ;
20503: LD_ADDR_VAR 0 4
20507: PUSH
20508: LD_INT 0
20510: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20511: LD_VAR 0 1
20515: PPUSH
20516: CALL_OW 264
20520: PUSH
20521: LD_EXP 85
20525: EQUAL
20526: NOT
20527: IFFALSE 20531
// exit ;
20529: GO 20771
// index := GetElementIndex ( minersList , unit ) ;
20531: LD_ADDR_VAR 0 5
20535: PUSH
20536: LD_EXP 75
20540: PPUSH
20541: LD_VAR 0 1
20545: PPUSH
20546: CALL 27068 0 2
20550: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20551: LD_EXP 76
20555: PUSH
20556: LD_VAR 0 5
20560: ARRAY
20561: PUSH
20562: LD_EXP 77
20566: GREATEREQUAL
20567: IFFALSE 20571
// exit ;
20569: GO 20771
// ComMoveXY ( unit , x , y ) ;
20571: LD_VAR 0 1
20575: PPUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20590: LD_INT 35
20592: PPUSH
20593: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20597: LD_VAR 0 1
20601: PPUSH
20602: LD_VAR 0 2
20606: PPUSH
20607: LD_VAR 0 3
20611: PPUSH
20612: CALL 58354 0 3
20616: NOT
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 314
20627: AND
20628: IFFALSE 20632
// exit ;
20630: GO 20771
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20632: LD_VAR 0 2
20636: PPUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: CALL_OW 428
20646: PUSH
20647: LD_VAR 0 1
20651: EQUAL
20652: PUSH
20653: LD_VAR 0 1
20657: PPUSH
20658: CALL_OW 314
20662: NOT
20663: AND
20664: IFFALSE 20590
// PlaySoundXY ( x , y , PlantMine ) ;
20666: LD_VAR 0 2
20670: PPUSH
20671: LD_VAR 0 3
20675: PPUSH
20676: LD_STRING PlantMine
20678: PPUSH
20679: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20683: LD_VAR 0 2
20687: PPUSH
20688: LD_VAR 0 3
20692: PPUSH
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL_OW 255
20702: PPUSH
20703: LD_INT 0
20705: PPUSH
20706: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20710: LD_ADDR_EXP 76
20714: PUSH
20715: LD_EXP 76
20719: PPUSH
20720: LD_VAR 0 5
20724: PUSH
20725: LD_EXP 76
20729: PUSH
20730: LD_VAR 0 5
20734: ARRAY
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PPUSH
20744: LD_VAR 0 2
20748: PUSH
20749: LD_VAR 0 3
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PPUSH
20758: CALL 27283 0 3
20762: ST_TO_ADDR
// result := true ;
20763: LD_ADDR_VAR 0 4
20767: PUSH
20768: LD_INT 1
20770: ST_TO_ADDR
// end ;
20771: LD_VAR 0 4
20775: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20776: LD_INT 0
20778: PPUSH
20779: PPUSH
20780: PPUSH
// if not unit in minersList then
20781: LD_VAR 0 1
20785: PUSH
20786: LD_EXP 75
20790: IN
20791: NOT
20792: IFFALSE 20796
// exit ;
20794: GO 21188
// index := GetElementIndex ( minersList , unit ) ;
20796: LD_ADDR_VAR 0 6
20800: PUSH
20801: LD_EXP 75
20805: PPUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL 27068 0 2
20815: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20816: LD_ADDR_VAR 0 5
20820: PUSH
20821: DOUBLE
20822: LD_EXP 76
20826: PUSH
20827: LD_VAR 0 6
20831: ARRAY
20832: INC
20833: ST_TO_ADDR
20834: LD_INT 1
20836: PUSH
20837: FOR_DOWNTO
20838: IFFALSE 20999
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20840: LD_EXP 76
20844: PUSH
20845: LD_VAR 0 6
20849: ARRAY
20850: PUSH
20851: LD_VAR 0 5
20855: ARRAY
20856: PUSH
20857: LD_INT 1
20859: ARRAY
20860: PUSH
20861: LD_VAR 0 2
20865: EQUAL
20866: PUSH
20867: LD_EXP 76
20871: PUSH
20872: LD_VAR 0 6
20876: ARRAY
20877: PUSH
20878: LD_VAR 0 5
20882: ARRAY
20883: PUSH
20884: LD_INT 2
20886: ARRAY
20887: PUSH
20888: LD_VAR 0 3
20892: EQUAL
20893: AND
20894: IFFALSE 20997
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20896: LD_EXP 76
20900: PUSH
20901: LD_VAR 0 6
20905: ARRAY
20906: PUSH
20907: LD_VAR 0 5
20911: ARRAY
20912: PUSH
20913: LD_INT 1
20915: ARRAY
20916: PPUSH
20917: LD_EXP 76
20921: PUSH
20922: LD_VAR 0 6
20926: ARRAY
20927: PUSH
20928: LD_VAR 0 5
20932: ARRAY
20933: PUSH
20934: LD_INT 2
20936: ARRAY
20937: PPUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 255
20947: PPUSH
20948: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20952: LD_ADDR_EXP 76
20956: PUSH
20957: LD_EXP 76
20961: PPUSH
20962: LD_VAR 0 6
20966: PPUSH
20967: LD_EXP 76
20971: PUSH
20972: LD_VAR 0 6
20976: ARRAY
20977: PPUSH
20978: LD_VAR 0 5
20982: PPUSH
20983: CALL_OW 3
20987: PPUSH
20988: CALL_OW 1
20992: ST_TO_ADDR
// exit ;
20993: POP
20994: POP
20995: GO 21188
// end ; end ;
20997: GO 20837
20999: POP
21000: POP
// for i := minerMinesList [ index ] downto 1 do
21001: LD_ADDR_VAR 0 5
21005: PUSH
21006: DOUBLE
21007: LD_EXP 76
21011: PUSH
21012: LD_VAR 0 6
21016: ARRAY
21017: INC
21018: ST_TO_ADDR
21019: LD_INT 1
21021: PUSH
21022: FOR_DOWNTO
21023: IFFALSE 21186
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21025: LD_EXP 76
21029: PUSH
21030: LD_VAR 0 6
21034: ARRAY
21035: PUSH
21036: LD_VAR 0 5
21040: ARRAY
21041: PUSH
21042: LD_INT 1
21044: ARRAY
21045: PPUSH
21046: LD_EXP 76
21050: PUSH
21051: LD_VAR 0 6
21055: ARRAY
21056: PUSH
21057: LD_VAR 0 5
21061: ARRAY
21062: PUSH
21063: LD_INT 2
21065: ARRAY
21066: PPUSH
21067: LD_VAR 0 2
21071: PPUSH
21072: LD_VAR 0 3
21076: PPUSH
21077: CALL_OW 298
21081: PUSH
21082: LD_INT 6
21084: LESS
21085: IFFALSE 21184
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21087: LD_EXP 76
21091: PUSH
21092: LD_VAR 0 6
21096: ARRAY
21097: PUSH
21098: LD_VAR 0 5
21102: ARRAY
21103: PUSH
21104: LD_INT 1
21106: ARRAY
21107: PPUSH
21108: LD_EXP 76
21112: PUSH
21113: LD_VAR 0 6
21117: ARRAY
21118: PUSH
21119: LD_VAR 0 5
21123: ARRAY
21124: PUSH
21125: LD_INT 2
21127: ARRAY
21128: PPUSH
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL_OW 255
21138: PPUSH
21139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21143: LD_ADDR_EXP 76
21147: PUSH
21148: LD_EXP 76
21152: PPUSH
21153: LD_VAR 0 6
21157: PPUSH
21158: LD_EXP 76
21162: PUSH
21163: LD_VAR 0 6
21167: ARRAY
21168: PPUSH
21169: LD_VAR 0 5
21173: PPUSH
21174: CALL_OW 3
21178: PPUSH
21179: CALL_OW 1
21183: ST_TO_ADDR
// end ; end ;
21184: GO 21022
21186: POP
21187: POP
// end ;
21188: LD_VAR 0 4
21192: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21193: LD_INT 0
21195: PPUSH
21196: PPUSH
21197: PPUSH
21198: PPUSH
21199: PPUSH
21200: PPUSH
21201: PPUSH
21202: PPUSH
21203: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 264
21213: PUSH
21214: LD_EXP 85
21218: EQUAL
21219: NOT
21220: PUSH
21221: LD_VAR 0 1
21225: PUSH
21226: LD_EXP 75
21230: IN
21231: NOT
21232: OR
21233: IFFALSE 21237
// exit ;
21235: GO 21559
// index := GetElementIndex ( minersList , unit ) ;
21237: LD_ADDR_VAR 0 6
21241: PUSH
21242: LD_EXP 75
21246: PPUSH
21247: LD_VAR 0 1
21251: PPUSH
21252: CALL 27068 0 2
21256: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21257: LD_ADDR_VAR 0 8
21261: PUSH
21262: LD_EXP 77
21266: PUSH
21267: LD_EXP 76
21271: PUSH
21272: LD_VAR 0 6
21276: ARRAY
21277: MINUS
21278: ST_TO_ADDR
// if not minesFreeAmount then
21279: LD_VAR 0 8
21283: NOT
21284: IFFALSE 21288
// exit ;
21286: GO 21559
// tmp := [ ] ;
21288: LD_ADDR_VAR 0 7
21292: PUSH
21293: EMPTY
21294: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21295: LD_ADDR_VAR 0 5
21299: PUSH
21300: DOUBLE
21301: LD_INT 1
21303: DEC
21304: ST_TO_ADDR
21305: LD_VAR 0 8
21309: PUSH
21310: FOR_TO
21311: IFFALSE 21506
// begin _d := rand ( 0 , 5 ) ;
21313: LD_ADDR_VAR 0 11
21317: PUSH
21318: LD_INT 0
21320: PPUSH
21321: LD_INT 5
21323: PPUSH
21324: CALL_OW 12
21328: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21329: LD_ADDR_VAR 0 12
21333: PUSH
21334: LD_INT 2
21336: PPUSH
21337: LD_INT 6
21339: PPUSH
21340: CALL_OW 12
21344: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21345: LD_ADDR_VAR 0 9
21349: PUSH
21350: LD_VAR 0 2
21354: PPUSH
21355: LD_VAR 0 11
21359: PPUSH
21360: LD_VAR 0 12
21364: PPUSH
21365: CALL_OW 272
21369: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21370: LD_ADDR_VAR 0 10
21374: PUSH
21375: LD_VAR 0 3
21379: PPUSH
21380: LD_VAR 0 11
21384: PPUSH
21385: LD_VAR 0 12
21389: PPUSH
21390: CALL_OW 273
21394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21395: LD_VAR 0 9
21399: PPUSH
21400: LD_VAR 0 10
21404: PPUSH
21405: CALL_OW 488
21409: PUSH
21410: LD_VAR 0 9
21414: PUSH
21415: LD_VAR 0 10
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_VAR 0 7
21428: IN
21429: NOT
21430: AND
21431: PUSH
21432: LD_VAR 0 9
21436: PPUSH
21437: LD_VAR 0 10
21441: PPUSH
21442: CALL_OW 458
21446: NOT
21447: AND
21448: IFFALSE 21490
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21450: LD_ADDR_VAR 0 7
21454: PUSH
21455: LD_VAR 0 7
21459: PPUSH
21460: LD_VAR 0 7
21464: PUSH
21465: LD_INT 1
21467: PLUS
21468: PPUSH
21469: LD_VAR 0 9
21473: PUSH
21474: LD_VAR 0 10
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PPUSH
21483: CALL_OW 1
21487: ST_TO_ADDR
21488: GO 21504
// i := i - 1 ;
21490: LD_ADDR_VAR 0 5
21494: PUSH
21495: LD_VAR 0 5
21499: PUSH
21500: LD_INT 1
21502: MINUS
21503: ST_TO_ADDR
// end ;
21504: GO 21310
21506: POP
21507: POP
// for i in tmp do
21508: LD_ADDR_VAR 0 5
21512: PUSH
21513: LD_VAR 0 7
21517: PUSH
21518: FOR_IN
21519: IFFALSE 21557
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_VAR 0 5
21530: PUSH
21531: LD_INT 1
21533: ARRAY
21534: PPUSH
21535: LD_VAR 0 5
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PPUSH
21544: CALL 20499 0 3
21548: NOT
21549: IFFALSE 21555
// exit ;
21551: POP
21552: POP
21553: GO 21559
21555: GO 21518
21557: POP
21558: POP
// end ;
21559: LD_VAR 0 4
21563: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
// if not GetClass ( unit ) = class_sniper then
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 257
21582: PUSH
21583: LD_INT 5
21585: EQUAL
21586: NOT
21587: IFFALSE 21591
// exit ;
21589: GO 21979
// dist := 8 ;
21591: LD_ADDR_VAR 0 5
21595: PUSH
21596: LD_INT 8
21598: ST_TO_ADDR
// viewRange := 12 ;
21599: LD_ADDR_VAR 0 7
21603: PUSH
21604: LD_INT 12
21606: ST_TO_ADDR
// side := GetSide ( unit ) ;
21607: LD_ADDR_VAR 0 6
21611: PUSH
21612: LD_VAR 0 1
21616: PPUSH
21617: CALL_OW 255
21621: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21622: LD_INT 61
21624: PPUSH
21625: LD_VAR 0 6
21629: PPUSH
21630: CALL_OW 321
21634: PUSH
21635: LD_INT 2
21637: EQUAL
21638: IFFALSE 21648
// viewRange := 16 ;
21640: LD_ADDR_VAR 0 7
21644: PUSH
21645: LD_INT 16
21647: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21648: LD_VAR 0 1
21652: PPUSH
21653: LD_VAR 0 2
21657: PPUSH
21658: LD_VAR 0 3
21662: PPUSH
21663: CALL_OW 297
21667: PUSH
21668: LD_VAR 0 5
21672: GREATER
21673: IFFALSE 21752
// begin ComMoveXY ( unit , x , y ) ;
21675: LD_VAR 0 1
21679: PPUSH
21680: LD_VAR 0 2
21684: PPUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21694: LD_INT 35
21696: PPUSH
21697: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21701: LD_VAR 0 1
21705: PPUSH
21706: LD_VAR 0 2
21710: PPUSH
21711: LD_VAR 0 3
21715: PPUSH
21716: CALL 58354 0 3
21720: NOT
21721: IFFALSE 21725
// exit ;
21723: GO 21979
// until GetDistUnitXY ( unit , x , y ) < dist ;
21725: LD_VAR 0 1
21729: PPUSH
21730: LD_VAR 0 2
21734: PPUSH
21735: LD_VAR 0 3
21739: PPUSH
21740: CALL_OW 297
21744: PUSH
21745: LD_VAR 0 5
21749: LESS
21750: IFFALSE 21694
// end ; ComTurnXY ( unit , x , y ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_VAR 0 2
21761: PPUSH
21762: LD_VAR 0 3
21766: PPUSH
21767: CALL_OW 118
// wait ( 5 ) ;
21771: LD_INT 5
21773: PPUSH
21774: CALL_OW 67
// _d := GetDir ( unit ) ;
21778: LD_ADDR_VAR 0 10
21782: PUSH
21783: LD_VAR 0 1
21787: PPUSH
21788: CALL_OW 254
21792: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21793: LD_ADDR_VAR 0 8
21797: PUSH
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 250
21807: PPUSH
21808: LD_VAR 0 10
21812: PPUSH
21813: LD_VAR 0 5
21817: PPUSH
21818: CALL_OW 272
21822: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21823: LD_ADDR_VAR 0 9
21827: PUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 251
21837: PPUSH
21838: LD_VAR 0 10
21842: PPUSH
21843: LD_VAR 0 5
21847: PPUSH
21848: CALL_OW 273
21852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21853: LD_VAR 0 8
21857: PPUSH
21858: LD_VAR 0 9
21862: PPUSH
21863: CALL_OW 488
21867: NOT
21868: IFFALSE 21872
// exit ;
21870: GO 21979
// ComAnimCustom ( unit , 1 ) ;
21872: LD_VAR 0 1
21876: PPUSH
21877: LD_INT 1
21879: PPUSH
21880: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21884: LD_VAR 0 8
21888: PPUSH
21889: LD_VAR 0 9
21893: PPUSH
21894: LD_VAR 0 6
21898: PPUSH
21899: LD_VAR 0 7
21903: PPUSH
21904: CALL_OW 330
// repeat wait ( 1 ) ;
21908: LD_INT 1
21910: PPUSH
21911: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 316
21924: PUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: CALL_OW 314
21934: OR
21935: PUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 302
21945: NOT
21946: OR
21947: PUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 301
21957: OR
21958: IFFALSE 21908
// RemoveSeeing ( _x , _y , side ) ;
21960: LD_VAR 0 8
21964: PPUSH
21965: LD_VAR 0 9
21969: PPUSH
21970: LD_VAR 0 6
21974: PPUSH
21975: CALL_OW 331
// end ; end_of_file
21979: LD_VAR 0 4
21983: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
21984: LD_INT 0
21986: PPUSH
// ar_miner := 81 ;
21987: LD_ADDR_EXP 85
21991: PUSH
21992: LD_INT 81
21994: ST_TO_ADDR
// ar_crane := 88 ;
21995: LD_ADDR_EXP 84
21999: PUSH
22000: LD_INT 88
22002: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22003: LD_ADDR_EXP 79
22007: PUSH
22008: LD_INT 89
22010: ST_TO_ADDR
// us_hack := 99 ;
22011: LD_ADDR_EXP 80
22015: PUSH
22016: LD_INT 99
22018: ST_TO_ADDR
// us_artillery := 97 ;
22019: LD_ADDR_EXP 81
22023: PUSH
22024: LD_INT 97
22026: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22027: LD_ADDR_EXP 82
22031: PUSH
22032: LD_INT 91
22034: ST_TO_ADDR
// ar_mortar := 92 ;
22035: LD_ADDR_EXP 83
22039: PUSH
22040: LD_INT 92
22042: ST_TO_ADDR
// ru_flamethrower := 93 ;
22043: LD_ADDR_EXP 86
22047: PUSH
22048: LD_INT 93
22050: ST_TO_ADDR
// ru_radar := 98 ;
22051: LD_ADDR_EXP 78
22055: PUSH
22056: LD_INT 98
22058: ST_TO_ADDR
// tech_Artillery := 80 ;
22059: LD_ADDR_EXP 87
22063: PUSH
22064: LD_INT 80
22066: ST_TO_ADDR
// tech_RadMat := 81 ;
22067: LD_ADDR_EXP 88
22071: PUSH
22072: LD_INT 81
22074: ST_TO_ADDR
// tech_BasicTools := 82 ;
22075: LD_ADDR_EXP 89
22079: PUSH
22080: LD_INT 82
22082: ST_TO_ADDR
// tech_Cargo := 83 ;
22083: LD_ADDR_EXP 90
22087: PUSH
22088: LD_INT 83
22090: ST_TO_ADDR
// tech_Track := 84 ;
22091: LD_ADDR_EXP 91
22095: PUSH
22096: LD_INT 84
22098: ST_TO_ADDR
// tech_Crane := 85 ;
22099: LD_ADDR_EXP 92
22103: PUSH
22104: LD_INT 85
22106: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22107: LD_ADDR_EXP 93
22111: PUSH
22112: LD_INT 86
22114: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22115: LD_ADDR_EXP 94
22119: PUSH
22120: LD_INT 87
22122: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22123: LD_ADDR_EXP 95
22127: PUSH
22128: LD_INT 88
22130: ST_TO_ADDR
// end ;
22131: LD_VAR 0 1
22135: RET
// every 1 do
22136: GO 22138
22138: DISABLE
// InitGlobalVariables ; end_of_file
22139: CALL 21984 0 0
22143: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22144: LD_INT 0
22146: PPUSH
22147: PPUSH
// if exist_mode then
22148: LD_VAR 0 2
22152: IFFALSE 22177
// unit := CreateCharacter ( prefix & ident ) else
22154: LD_ADDR_VAR 0 5
22158: PUSH
22159: LD_VAR 0 3
22163: PUSH
22164: LD_VAR 0 1
22168: STR
22169: PPUSH
22170: CALL_OW 34
22174: ST_TO_ADDR
22175: GO 22192
// unit := NewCharacter ( ident ) ;
22177: LD_ADDR_VAR 0 5
22181: PUSH
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL_OW 25
22191: ST_TO_ADDR
// result := unit ;
22192: LD_ADDR_VAR 0 4
22196: PUSH
22197: LD_VAR 0 5
22201: ST_TO_ADDR
// end ;
22202: LD_VAR 0 4
22206: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22207: LD_INT 0
22209: PPUSH
22210: PPUSH
// if not side or not nation then
22211: LD_VAR 0 1
22215: NOT
22216: PUSH
22217: LD_VAR 0 2
22221: NOT
22222: OR
22223: IFFALSE 22227
// exit ;
22225: GO 22995
// case nation of nation_american :
22227: LD_VAR 0 2
22231: PUSH
22232: LD_INT 1
22234: DOUBLE
22235: EQUAL
22236: IFTRUE 22240
22238: GO 22454
22240: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22241: LD_ADDR_VAR 0 4
22245: PUSH
22246: LD_INT 35
22248: PUSH
22249: LD_INT 45
22251: PUSH
22252: LD_INT 46
22254: PUSH
22255: LD_INT 47
22257: PUSH
22258: LD_INT 82
22260: PUSH
22261: LD_INT 83
22263: PUSH
22264: LD_INT 84
22266: PUSH
22267: LD_INT 85
22269: PUSH
22270: LD_INT 86
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 6
22281: PUSH
22282: LD_INT 15
22284: PUSH
22285: LD_INT 16
22287: PUSH
22288: LD_INT 7
22290: PUSH
22291: LD_INT 12
22293: PUSH
22294: LD_INT 13
22296: PUSH
22297: LD_INT 10
22299: PUSH
22300: LD_INT 14
22302: PUSH
22303: LD_INT 20
22305: PUSH
22306: LD_INT 21
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_INT 25
22314: PUSH
22315: LD_INT 32
22317: PUSH
22318: LD_INT 27
22320: PUSH
22321: LD_INT 36
22323: PUSH
22324: LD_INT 69
22326: PUSH
22327: LD_INT 39
22329: PUSH
22330: LD_INT 34
22332: PUSH
22333: LD_INT 40
22335: PUSH
22336: LD_INT 48
22338: PUSH
22339: LD_INT 49
22341: PUSH
22342: LD_INT 50
22344: PUSH
22345: LD_INT 51
22347: PUSH
22348: LD_INT 52
22350: PUSH
22351: LD_INT 53
22353: PUSH
22354: LD_INT 54
22356: PUSH
22357: LD_INT 55
22359: PUSH
22360: LD_INT 56
22362: PUSH
22363: LD_INT 57
22365: PUSH
22366: LD_INT 58
22368: PUSH
22369: LD_INT 59
22371: PUSH
22372: LD_INT 60
22374: PUSH
22375: LD_INT 61
22377: PUSH
22378: LD_INT 62
22380: PUSH
22381: LD_INT 80
22383: PUSH
22384: LD_INT 82
22386: PUSH
22387: LD_INT 83
22389: PUSH
22390: LD_INT 84
22392: PUSH
22393: LD_INT 85
22395: PUSH
22396: LD_INT 86
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: ST_TO_ADDR
22452: GO 22919
22454: LD_INT 2
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22688
22462: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22463: LD_ADDR_VAR 0 4
22467: PUSH
22468: LD_INT 35
22470: PUSH
22471: LD_INT 45
22473: PUSH
22474: LD_INT 46
22476: PUSH
22477: LD_INT 47
22479: PUSH
22480: LD_INT 82
22482: PUSH
22483: LD_INT 83
22485: PUSH
22486: LD_INT 84
22488: PUSH
22489: LD_INT 85
22491: PUSH
22492: LD_INT 87
22494: PUSH
22495: LD_INT 70
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 11
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: LD_INT 4
22509: PUSH
22510: LD_INT 5
22512: PUSH
22513: LD_INT 6
22515: PUSH
22516: LD_INT 15
22518: PUSH
22519: LD_INT 18
22521: PUSH
22522: LD_INT 7
22524: PUSH
22525: LD_INT 17
22527: PUSH
22528: LD_INT 8
22530: PUSH
22531: LD_INT 20
22533: PUSH
22534: LD_INT 21
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_INT 72
22542: PUSH
22543: LD_INT 26
22545: PUSH
22546: LD_INT 69
22548: PUSH
22549: LD_INT 39
22551: PUSH
22552: LD_INT 40
22554: PUSH
22555: LD_INT 41
22557: PUSH
22558: LD_INT 42
22560: PUSH
22561: LD_INT 43
22563: PUSH
22564: LD_INT 48
22566: PUSH
22567: LD_INT 49
22569: PUSH
22570: LD_INT 50
22572: PUSH
22573: LD_INT 51
22575: PUSH
22576: LD_INT 52
22578: PUSH
22579: LD_INT 53
22581: PUSH
22582: LD_INT 54
22584: PUSH
22585: LD_INT 55
22587: PUSH
22588: LD_INT 56
22590: PUSH
22591: LD_INT 60
22593: PUSH
22594: LD_INT 61
22596: PUSH
22597: LD_INT 62
22599: PUSH
22600: LD_INT 66
22602: PUSH
22603: LD_INT 67
22605: PUSH
22606: LD_INT 68
22608: PUSH
22609: LD_INT 81
22611: PUSH
22612: LD_INT 82
22614: PUSH
22615: LD_INT 83
22617: PUSH
22618: LD_INT 84
22620: PUSH
22621: LD_INT 85
22623: PUSH
22624: LD_INT 87
22626: PUSH
22627: LD_INT 88
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
22686: GO 22919
22688: LD_INT 3
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22918
22696: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22697: LD_ADDR_VAR 0 4
22701: PUSH
22702: LD_INT 46
22704: PUSH
22705: LD_INT 47
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 82
22716: PUSH
22717: LD_INT 83
22719: PUSH
22720: LD_INT 84
22722: PUSH
22723: LD_INT 85
22725: PUSH
22726: LD_INT 86
22728: PUSH
22729: LD_INT 11
22731: PUSH
22732: LD_INT 9
22734: PUSH
22735: LD_INT 20
22737: PUSH
22738: LD_INT 19
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 24
22746: PUSH
22747: LD_INT 22
22749: PUSH
22750: LD_INT 25
22752: PUSH
22753: LD_INT 28
22755: PUSH
22756: LD_INT 29
22758: PUSH
22759: LD_INT 30
22761: PUSH
22762: LD_INT 31
22764: PUSH
22765: LD_INT 37
22767: PUSH
22768: LD_INT 38
22770: PUSH
22771: LD_INT 32
22773: PUSH
22774: LD_INT 27
22776: PUSH
22777: LD_INT 33
22779: PUSH
22780: LD_INT 69
22782: PUSH
22783: LD_INT 39
22785: PUSH
22786: LD_INT 34
22788: PUSH
22789: LD_INT 40
22791: PUSH
22792: LD_INT 71
22794: PUSH
22795: LD_INT 23
22797: PUSH
22798: LD_INT 44
22800: PUSH
22801: LD_INT 48
22803: PUSH
22804: LD_INT 49
22806: PUSH
22807: LD_INT 50
22809: PUSH
22810: LD_INT 51
22812: PUSH
22813: LD_INT 52
22815: PUSH
22816: LD_INT 53
22818: PUSH
22819: LD_INT 54
22821: PUSH
22822: LD_INT 55
22824: PUSH
22825: LD_INT 56
22827: PUSH
22828: LD_INT 57
22830: PUSH
22831: LD_INT 58
22833: PUSH
22834: LD_INT 59
22836: PUSH
22837: LD_INT 63
22839: PUSH
22840: LD_INT 64
22842: PUSH
22843: LD_INT 65
22845: PUSH
22846: LD_INT 82
22848: PUSH
22849: LD_INT 83
22851: PUSH
22852: LD_INT 84
22854: PUSH
22855: LD_INT 85
22857: PUSH
22858: LD_INT 86
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: ST_TO_ADDR
22916: GO 22919
22918: POP
// if state > - 1 and state < 3 then
22919: LD_VAR 0 3
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: GREATER
22928: PUSH
22929: LD_VAR 0 3
22933: PUSH
22934: LD_INT 3
22936: LESS
22937: AND
22938: IFFALSE 22995
// for i in result do
22940: LD_ADDR_VAR 0 5
22944: PUSH
22945: LD_VAR 0 4
22949: PUSH
22950: FOR_IN
22951: IFFALSE 22993
// if GetTech ( i , side ) <> state then
22953: LD_VAR 0 5
22957: PPUSH
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 321
22967: PUSH
22968: LD_VAR 0 3
22972: NONEQUAL
22973: IFFALSE 22991
// result := result diff i ;
22975: LD_ADDR_VAR 0 4
22979: PUSH
22980: LD_VAR 0 4
22984: PUSH
22985: LD_VAR 0 5
22989: DIFF
22990: ST_TO_ADDR
22991: GO 22950
22993: POP
22994: POP
// end ;
22995: LD_VAR 0 4
22999: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23000: LD_INT 0
23002: PPUSH
23003: PPUSH
23004: PPUSH
// result := true ;
23005: LD_ADDR_VAR 0 3
23009: PUSH
23010: LD_INT 1
23012: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23013: LD_ADDR_VAR 0 5
23017: PUSH
23018: LD_VAR 0 2
23022: PPUSH
23023: CALL_OW 480
23027: ST_TO_ADDR
// if not tmp then
23028: LD_VAR 0 5
23032: NOT
23033: IFFALSE 23037
// exit ;
23035: GO 23086
// for i in tmp do
23037: LD_ADDR_VAR 0 4
23041: PUSH
23042: LD_VAR 0 5
23046: PUSH
23047: FOR_IN
23048: IFFALSE 23084
// if GetTech ( i , side ) <> state_researched then
23050: LD_VAR 0 4
23054: PPUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 321
23064: PUSH
23065: LD_INT 2
23067: NONEQUAL
23068: IFFALSE 23082
// begin result := false ;
23070: LD_ADDR_VAR 0 3
23074: PUSH
23075: LD_INT 0
23077: ST_TO_ADDR
// exit ;
23078: POP
23079: POP
23080: GO 23086
// end ;
23082: GO 23047
23084: POP
23085: POP
// end ;
23086: LD_VAR 0 3
23090: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23091: LD_INT 0
23093: PPUSH
23094: PPUSH
23095: PPUSH
23096: PPUSH
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
23103: PPUSH
23104: PPUSH
23105: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23106: LD_VAR 0 1
23110: NOT
23111: PUSH
23112: LD_VAR 0 1
23116: PPUSH
23117: CALL_OW 257
23121: PUSH
23122: LD_INT 9
23124: NONEQUAL
23125: OR
23126: IFFALSE 23130
// exit ;
23128: GO 23703
// side := GetSide ( unit ) ;
23130: LD_ADDR_VAR 0 9
23134: PUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 255
23144: ST_TO_ADDR
// tech_space := tech_spacanom ;
23145: LD_ADDR_VAR 0 12
23149: PUSH
23150: LD_INT 29
23152: ST_TO_ADDR
// tech_time := tech_taurad ;
23153: LD_ADDR_VAR 0 13
23157: PUSH
23158: LD_INT 28
23160: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23161: LD_ADDR_VAR 0 11
23165: PUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 310
23175: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23176: LD_VAR 0 11
23180: PPUSH
23181: CALL_OW 247
23185: PUSH
23186: LD_INT 2
23188: EQUAL
23189: IFFALSE 23193
// exit ;
23191: GO 23703
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23193: LD_ADDR_VAR 0 8
23197: PUSH
23198: LD_INT 81
23200: PUSH
23201: LD_VAR 0 9
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: LD_INT 21
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PPUSH
23231: CALL_OW 69
23235: ST_TO_ADDR
// if not tmp then
23236: LD_VAR 0 8
23240: NOT
23241: IFFALSE 23245
// exit ;
23243: GO 23703
// if in_unit then
23245: LD_VAR 0 11
23249: IFFALSE 23273
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23251: LD_ADDR_VAR 0 10
23255: PUSH
23256: LD_VAR 0 8
23260: PPUSH
23261: LD_VAR 0 11
23265: PPUSH
23266: CALL_OW 74
23270: ST_TO_ADDR
23271: GO 23293
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23273: LD_ADDR_VAR 0 10
23277: PUSH
23278: LD_VAR 0 8
23282: PPUSH
23283: LD_VAR 0 1
23287: PPUSH
23288: CALL_OW 74
23292: ST_TO_ADDR
// if not enemy then
23293: LD_VAR 0 10
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23703
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23302: LD_VAR 0 11
23306: PUSH
23307: LD_VAR 0 11
23311: PPUSH
23312: LD_VAR 0 10
23316: PPUSH
23317: CALL_OW 296
23321: PUSH
23322: LD_INT 13
23324: GREATER
23325: AND
23326: PUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: LD_VAR 0 10
23336: PPUSH
23337: CALL_OW 296
23341: PUSH
23342: LD_INT 12
23344: GREATER
23345: OR
23346: IFFALSE 23350
// exit ;
23348: GO 23703
// missile := [ 1 ] ;
23350: LD_ADDR_VAR 0 14
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: EMPTY
23359: LIST
23360: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23361: LD_VAR 0 9
23365: PPUSH
23366: LD_VAR 0 12
23370: PPUSH
23371: CALL_OW 325
23375: IFFALSE 23404
// missile := Replace ( missile , missile + 1 , 2 ) ;
23377: LD_ADDR_VAR 0 14
23381: PUSH
23382: LD_VAR 0 14
23386: PPUSH
23387: LD_VAR 0 14
23391: PUSH
23392: LD_INT 1
23394: PLUS
23395: PPUSH
23396: LD_INT 2
23398: PPUSH
23399: CALL_OW 1
23403: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23404: LD_VAR 0 9
23408: PPUSH
23409: LD_VAR 0 13
23413: PPUSH
23414: CALL_OW 325
23418: PUSH
23419: LD_VAR 0 10
23423: PPUSH
23424: CALL_OW 255
23428: PPUSH
23429: LD_VAR 0 13
23433: PPUSH
23434: CALL_OW 325
23438: NOT
23439: AND
23440: IFFALSE 23469
// missile := Replace ( missile , missile + 1 , 3 ) ;
23442: LD_ADDR_VAR 0 14
23446: PUSH
23447: LD_VAR 0 14
23451: PPUSH
23452: LD_VAR 0 14
23456: PUSH
23457: LD_INT 1
23459: PLUS
23460: PPUSH
23461: LD_INT 3
23463: PPUSH
23464: CALL_OW 1
23468: ST_TO_ADDR
// if missile < 2 then
23469: LD_VAR 0 14
23473: PUSH
23474: LD_INT 2
23476: LESS
23477: IFFALSE 23481
// exit ;
23479: GO 23703
// x := GetX ( enemy ) ;
23481: LD_ADDR_VAR 0 4
23485: PUSH
23486: LD_VAR 0 10
23490: PPUSH
23491: CALL_OW 250
23495: ST_TO_ADDR
// y := GetY ( enemy ) ;
23496: LD_ADDR_VAR 0 5
23500: PUSH
23501: LD_VAR 0 10
23505: PPUSH
23506: CALL_OW 251
23510: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23511: LD_ADDR_VAR 0 6
23515: PUSH
23516: LD_VAR 0 4
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PPUSH
23525: LD_INT 1
23527: PPUSH
23528: CALL_OW 12
23532: PLUS
23533: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23534: LD_ADDR_VAR 0 7
23538: PUSH
23539: LD_VAR 0 5
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PPUSH
23548: LD_INT 1
23550: PPUSH
23551: CALL_OW 12
23555: PLUS
23556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23557: LD_VAR 0 6
23561: PPUSH
23562: LD_VAR 0 7
23566: PPUSH
23567: CALL_OW 488
23571: NOT
23572: IFFALSE 23594
// begin _x := x ;
23574: LD_ADDR_VAR 0 6
23578: PUSH
23579: LD_VAR 0 4
23583: ST_TO_ADDR
// _y := y ;
23584: LD_ADDR_VAR 0 7
23588: PUSH
23589: LD_VAR 0 5
23593: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 1
23601: PPUSH
23602: LD_VAR 0 14
23606: PPUSH
23607: CALL_OW 12
23611: ST_TO_ADDR
// case i of 1 :
23612: LD_VAR 0 3
23616: PUSH
23617: LD_INT 1
23619: DOUBLE
23620: EQUAL
23621: IFTRUE 23625
23623: GO 23642
23625: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23626: LD_VAR 0 1
23630: PPUSH
23631: LD_VAR 0 10
23635: PPUSH
23636: CALL_OW 115
23640: GO 23703
23642: LD_INT 2
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23672
23650: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23651: LD_VAR 0 1
23655: PPUSH
23656: LD_VAR 0 6
23660: PPUSH
23661: LD_VAR 0 7
23665: PPUSH
23666: CALL_OW 153
23670: GO 23703
23672: LD_INT 3
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23702
23680: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23681: LD_VAR 0 1
23685: PPUSH
23686: LD_VAR 0 6
23690: PPUSH
23691: LD_VAR 0 7
23695: PPUSH
23696: CALL_OW 154
23700: GO 23703
23702: POP
// end ;
23703: LD_VAR 0 2
23707: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23708: LD_INT 0
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
// if not unit or not building then
23716: LD_VAR 0 1
23720: NOT
23721: PUSH
23722: LD_VAR 0 2
23726: NOT
23727: OR
23728: IFFALSE 23732
// exit ;
23730: GO 23890
// x := GetX ( building ) ;
23732: LD_ADDR_VAR 0 5
23736: PUSH
23737: LD_VAR 0 2
23741: PPUSH
23742: CALL_OW 250
23746: ST_TO_ADDR
// y := GetY ( building ) ;
23747: LD_ADDR_VAR 0 6
23751: PUSH
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 251
23761: ST_TO_ADDR
// for i = 0 to 5 do
23762: LD_ADDR_VAR 0 4
23766: PUSH
23767: DOUBLE
23768: LD_INT 0
23770: DEC
23771: ST_TO_ADDR
23772: LD_INT 5
23774: PUSH
23775: FOR_TO
23776: IFFALSE 23888
// begin _x := ShiftX ( x , i , 3 ) ;
23778: LD_ADDR_VAR 0 7
23782: PUSH
23783: LD_VAR 0 5
23787: PPUSH
23788: LD_VAR 0 4
23792: PPUSH
23793: LD_INT 3
23795: PPUSH
23796: CALL_OW 272
23800: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23801: LD_ADDR_VAR 0 8
23805: PUSH
23806: LD_VAR 0 6
23810: PPUSH
23811: LD_VAR 0 4
23815: PPUSH
23816: LD_INT 3
23818: PPUSH
23819: CALL_OW 273
23823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23824: LD_VAR 0 7
23828: PPUSH
23829: LD_VAR 0 8
23833: PPUSH
23834: CALL_OW 488
23838: NOT
23839: IFFALSE 23843
// continue ;
23841: GO 23775
// if HexInfo ( _x , _y ) = 0 then
23843: LD_VAR 0 7
23847: PPUSH
23848: LD_VAR 0 8
23852: PPUSH
23853: CALL_OW 428
23857: PUSH
23858: LD_INT 0
23860: EQUAL
23861: IFFALSE 23886
// begin ComMoveXY ( unit , _x , _y ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_VAR 0 7
23872: PPUSH
23873: LD_VAR 0 8
23877: PPUSH
23878: CALL_OW 111
// exit ;
23882: POP
23883: POP
23884: GO 23890
// end ; end ;
23886: GO 23775
23888: POP
23889: POP
// end ;
23890: LD_VAR 0 3
23894: RET
// export function ScanBase ( side , base_area ) ; begin
23895: LD_INT 0
23897: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23898: LD_ADDR_VAR 0 3
23902: PUSH
23903: LD_VAR 0 2
23907: PPUSH
23908: LD_INT 81
23910: PUSH
23911: LD_VAR 0 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PPUSH
23920: CALL_OW 70
23924: ST_TO_ADDR
// end ;
23925: LD_VAR 0 3
23929: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23930: LD_INT 0
23932: PPUSH
23933: PPUSH
23934: PPUSH
23935: PPUSH
// result := false ;
23936: LD_ADDR_VAR 0 2
23940: PUSH
23941: LD_INT 0
23943: ST_TO_ADDR
// side := GetSide ( unit ) ;
23944: LD_ADDR_VAR 0 3
23948: PUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 255
23958: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23959: LD_ADDR_VAR 0 4
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 248
23973: ST_TO_ADDR
// case nat of 1 :
23974: LD_VAR 0 4
23978: PUSH
23979: LD_INT 1
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 23998
23987: POP
// tech := tech_lassight ; 2 :
23988: LD_ADDR_VAR 0 5
23992: PUSH
23993: LD_INT 12
23995: ST_TO_ADDR
23996: GO 24037
23998: LD_INT 2
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24017
24006: POP
// tech := tech_mortar ; 3 :
24007: LD_ADDR_VAR 0 5
24011: PUSH
24012: LD_INT 41
24014: ST_TO_ADDR
24015: GO 24037
24017: LD_INT 3
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24036
24025: POP
// tech := tech_bazooka ; end ;
24026: LD_ADDR_VAR 0 5
24030: PUSH
24031: LD_INT 44
24033: ST_TO_ADDR
24034: GO 24037
24036: POP
// if Researched ( side , tech ) then
24037: LD_VAR 0 3
24041: PPUSH
24042: LD_VAR 0 5
24046: PPUSH
24047: CALL_OW 325
24051: IFFALSE 24078
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24053: LD_ADDR_VAR 0 2
24057: PUSH
24058: LD_INT 5
24060: PUSH
24061: LD_INT 8
24063: PUSH
24064: LD_INT 9
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: PUSH
24072: LD_VAR 0 4
24076: ARRAY
24077: ST_TO_ADDR
// end ;
24078: LD_VAR 0 2
24082: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24083: LD_INT 0
24085: PPUSH
24086: PPUSH
24087: PPUSH
// if not mines then
24088: LD_VAR 0 2
24092: NOT
24093: IFFALSE 24097
// exit ;
24095: GO 24241
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24097: LD_ADDR_VAR 0 5
24101: PUSH
24102: LD_INT 81
24104: PUSH
24105: LD_VAR 0 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 3
24116: PUSH
24117: LD_INT 21
24119: PUSH
24120: LD_INT 3
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PPUSH
24135: CALL_OW 69
24139: ST_TO_ADDR
// for i in mines do
24140: LD_ADDR_VAR 0 4
24144: PUSH
24145: LD_VAR 0 2
24149: PUSH
24150: FOR_IN
24151: IFFALSE 24239
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24153: LD_VAR 0 4
24157: PUSH
24158: LD_INT 1
24160: ARRAY
24161: PPUSH
24162: LD_VAR 0 4
24166: PUSH
24167: LD_INT 2
24169: ARRAY
24170: PPUSH
24171: CALL_OW 458
24175: NOT
24176: IFFALSE 24180
// continue ;
24178: GO 24150
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24180: LD_VAR 0 4
24184: PUSH
24185: LD_INT 1
24187: ARRAY
24188: PPUSH
24189: LD_VAR 0 4
24193: PUSH
24194: LD_INT 2
24196: ARRAY
24197: PPUSH
24198: CALL_OW 428
24202: PUSH
24203: LD_VAR 0 5
24207: IN
24208: IFFALSE 24237
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24210: LD_VAR 0 4
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PPUSH
24219: LD_VAR 0 4
24223: PUSH
24224: LD_INT 2
24226: ARRAY
24227: PPUSH
24228: LD_VAR 0 1
24232: PPUSH
24233: CALL_OW 456
// end ;
24237: GO 24150
24239: POP
24240: POP
// end ;
24241: LD_VAR 0 3
24245: RET
// export function Count ( array ) ; var i ; begin
24246: LD_INT 0
24248: PPUSH
24249: PPUSH
// result := 0 ;
24250: LD_ADDR_VAR 0 2
24254: PUSH
24255: LD_INT 0
24257: ST_TO_ADDR
// for i in array do
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_VAR 0 1
24267: PUSH
24268: FOR_IN
24269: IFFALSE 24293
// if i then
24271: LD_VAR 0 3
24275: IFFALSE 24291
// result := result + 1 ;
24277: LD_ADDR_VAR 0 2
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 1
24289: PLUS
24290: ST_TO_ADDR
24291: GO 24268
24293: POP
24294: POP
// end ;
24295: LD_VAR 0 2
24299: RET
// export function IsEmpty ( building ) ; begin
24300: LD_INT 0
24302: PPUSH
// if not building then
24303: LD_VAR 0 1
24307: NOT
24308: IFFALSE 24312
// exit ;
24310: GO 24355
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24312: LD_ADDR_VAR 0 2
24316: PUSH
24317: LD_VAR 0 1
24321: PUSH
24322: LD_INT 22
24324: PUSH
24325: LD_VAR 0 1
24329: PPUSH
24330: CALL_OW 255
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 58
24341: PUSH
24342: EMPTY
24343: LIST
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PPUSH
24349: CALL_OW 69
24353: IN
24354: ST_TO_ADDR
// end ;
24355: LD_VAR 0 2
24359: RET
// export function IsNotFull ( building ) ; var places ; begin
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
// if not building then
24364: LD_VAR 0 1
24368: NOT
24369: IFFALSE 24373
// exit ;
24371: GO 24544
// result := false ;
24373: LD_ADDR_VAR 0 2
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
// places := 0 ;
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: LD_INT 0
24388: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24389: LD_VAR 0 1
24393: PPUSH
24394: CALL_OW 266
24398: PUSH
24399: LD_INT 0
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24461
24405: LD_INT 1
24407: DOUBLE
24408: EQUAL
24409: IFTRUE 24461
24411: LD_INT 6
24413: DOUBLE
24414: EQUAL
24415: IFTRUE 24461
24417: LD_INT 7
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24461
24423: LD_INT 8
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24461
24429: LD_INT 4
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24461
24435: LD_INT 5
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24461
24441: LD_INT 2
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24461
24447: LD_INT 3
24449: DOUBLE
24450: EQUAL
24451: IFTRUE 24461
24453: LD_INT 35
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24472
24461: POP
// places := 6 ; b_bunker , b_breastwork :
24462: LD_ADDR_VAR 0 3
24466: PUSH
24467: LD_INT 6
24469: ST_TO_ADDR
24470: GO 24517
24472: LD_INT 32
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24486
24478: LD_INT 31
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24497
24486: POP
// places := 1 ; b_control_tower :
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: LD_INT 1
24494: ST_TO_ADDR
24495: GO 24517
24497: LD_INT 36
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24516
24505: POP
// places := 3 ; end ;
24506: LD_ADDR_VAR 0 3
24510: PUSH
24511: LD_INT 3
24513: ST_TO_ADDR
24514: GO 24517
24516: POP
// if places then
24517: LD_VAR 0 3
24521: IFFALSE 24544
// result := UnitsInside ( building ) < places ;
24523: LD_ADDR_VAR 0 2
24527: PUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 313
24537: PUSH
24538: LD_VAR 0 3
24542: LESS
24543: ST_TO_ADDR
// end ;
24544: LD_VAR 0 2
24548: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24549: LD_INT 0
24551: PPUSH
24552: PPUSH
24553: PPUSH
24554: PPUSH
// tmp := [ ] ;
24555: LD_ADDR_VAR 0 3
24559: PUSH
24560: EMPTY
24561: ST_TO_ADDR
// list := [ ] ;
24562: LD_ADDR_VAR 0 5
24566: PUSH
24567: EMPTY
24568: ST_TO_ADDR
// for i = 16 to 25 do
24569: LD_ADDR_VAR 0 4
24573: PUSH
24574: DOUBLE
24575: LD_INT 16
24577: DEC
24578: ST_TO_ADDR
24579: LD_INT 25
24581: PUSH
24582: FOR_TO
24583: IFFALSE 24656
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_VAR 0 3
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 255
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 91
24614: PUSH
24615: LD_VAR 0 1
24619: PUSH
24620: LD_INT 6
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 30
24630: PUSH
24631: LD_VAR 0 4
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: PPUSH
24648: CALL_OW 69
24652: ADD
24653: ST_TO_ADDR
24654: GO 24582
24656: POP
24657: POP
// for i = 1 to tmp do
24658: LD_ADDR_VAR 0 4
24662: PUSH
24663: DOUBLE
24664: LD_INT 1
24666: DEC
24667: ST_TO_ADDR
24668: LD_VAR 0 3
24672: PUSH
24673: FOR_TO
24674: IFFALSE 24762
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24676: LD_ADDR_VAR 0 5
24680: PUSH
24681: LD_VAR 0 5
24685: PUSH
24686: LD_VAR 0 3
24690: PUSH
24691: LD_VAR 0 4
24695: ARRAY
24696: PPUSH
24697: CALL_OW 266
24701: PUSH
24702: LD_VAR 0 3
24706: PUSH
24707: LD_VAR 0 4
24711: ARRAY
24712: PPUSH
24713: CALL_OW 250
24717: PUSH
24718: LD_VAR 0 3
24722: PUSH
24723: LD_VAR 0 4
24727: ARRAY
24728: PPUSH
24729: CALL_OW 251
24733: PUSH
24734: LD_VAR 0 3
24738: PUSH
24739: LD_VAR 0 4
24743: ARRAY
24744: PPUSH
24745: CALL_OW 254
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: ADD
24759: ST_TO_ADDR
24760: GO 24673
24762: POP
24763: POP
// result := list ;
24764: LD_ADDR_VAR 0 2
24768: PUSH
24769: LD_VAR 0 5
24773: ST_TO_ADDR
// end ;
24774: LD_VAR 0 2
24778: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24779: LD_INT 0
24781: PPUSH
24782: PPUSH
24783: PPUSH
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
// if not factory then
24788: LD_VAR 0 1
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 25390
// if control = control_apeman then
24797: LD_VAR 0 4
24801: PUSH
24802: LD_INT 5
24804: EQUAL
24805: IFFALSE 24914
// begin tmp := UnitsInside ( factory ) ;
24807: LD_ADDR_VAR 0 8
24811: PUSH
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL_OW 313
24821: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24822: LD_VAR 0 8
24826: PPUSH
24827: LD_INT 25
24829: PUSH
24830: LD_INT 12
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 72
24841: NOT
24842: IFFALSE 24852
// control := control_manual ;
24844: LD_ADDR_VAR 0 4
24848: PUSH
24849: LD_INT 1
24851: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24852: LD_ADDR_VAR 0 8
24856: PUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL 24549 0 1
24866: ST_TO_ADDR
// if tmp then
24867: LD_VAR 0 8
24871: IFFALSE 24914
// begin for i in tmp do
24873: LD_ADDR_VAR 0 7
24877: PUSH
24878: LD_VAR 0 8
24882: PUSH
24883: FOR_IN
24884: IFFALSE 24912
// if i [ 1 ] = b_ext_radio then
24886: LD_VAR 0 7
24890: PUSH
24891: LD_INT 1
24893: ARRAY
24894: PUSH
24895: LD_INT 22
24897: EQUAL
24898: IFFALSE 24910
// begin control := control_remote ;
24900: LD_ADDR_VAR 0 4
24904: PUSH
24905: LD_INT 2
24907: ST_TO_ADDR
// break ;
24908: GO 24912
// end ;
24910: GO 24883
24912: POP
24913: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24914: LD_VAR 0 1
24918: PPUSH
24919: LD_VAR 0 2
24923: PPUSH
24924: LD_VAR 0 3
24928: PPUSH
24929: LD_VAR 0 4
24933: PPUSH
24934: LD_VAR 0 5
24938: PPUSH
24939: CALL_OW 448
24943: IFFALSE 24978
// begin result := [ chassis , engine , control , weapon ] ;
24945: LD_ADDR_VAR 0 6
24949: PUSH
24950: LD_VAR 0 2
24954: PUSH
24955: LD_VAR 0 3
24959: PUSH
24960: LD_VAR 0 4
24964: PUSH
24965: LD_VAR 0 5
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
// exit ;
24976: GO 25390
// end ; _chassis := AvailableChassisList ( factory ) ;
24978: LD_ADDR_VAR 0 9
24982: PUSH
24983: LD_VAR 0 1
24987: PPUSH
24988: CALL_OW 475
24992: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24993: LD_ADDR_VAR 0 11
24997: PUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: CALL_OW 476
25007: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25008: LD_ADDR_VAR 0 12
25012: PUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 477
25022: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25023: LD_ADDR_VAR 0 10
25027: PUSH
25028: LD_VAR 0 1
25032: PPUSH
25033: CALL_OW 478
25037: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25038: LD_VAR 0 9
25042: NOT
25043: PUSH
25044: LD_VAR 0 11
25048: NOT
25049: OR
25050: PUSH
25051: LD_VAR 0 12
25055: NOT
25056: OR
25057: PUSH
25058: LD_VAR 0 10
25062: NOT
25063: OR
25064: IFFALSE 25099
// begin result := [ chassis , engine , control , weapon ] ;
25066: LD_ADDR_VAR 0 6
25070: PUSH
25071: LD_VAR 0 2
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_VAR 0 4
25085: PUSH
25086: LD_VAR 0 5
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: ST_TO_ADDR
// exit ;
25097: GO 25390
// end ; if not chassis in _chassis then
25099: LD_VAR 0 2
25103: PUSH
25104: LD_VAR 0 9
25108: IN
25109: NOT
25110: IFFALSE 25136
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25112: LD_ADDR_VAR 0 2
25116: PUSH
25117: LD_VAR 0 9
25121: PUSH
25122: LD_INT 1
25124: PPUSH
25125: LD_VAR 0 9
25129: PPUSH
25130: CALL_OW 12
25134: ARRAY
25135: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25136: LD_VAR 0 2
25140: PPUSH
25141: LD_VAR 0 3
25145: PPUSH
25146: CALL 25395 0 2
25150: NOT
25151: IFFALSE 25210
// repeat engine := _engine [ 1 ] ;
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_VAR 0 11
25162: PUSH
25163: LD_INT 1
25165: ARRAY
25166: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25167: LD_ADDR_VAR 0 11
25171: PUSH
25172: LD_VAR 0 11
25176: PPUSH
25177: LD_INT 1
25179: PPUSH
25180: CALL_OW 3
25184: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25185: LD_VAR 0 2
25189: PPUSH
25190: LD_VAR 0 3
25194: PPUSH
25195: CALL 25395 0 2
25199: PUSH
25200: LD_VAR 0 11
25204: PUSH
25205: EMPTY
25206: EQUAL
25207: OR
25208: IFFALSE 25153
// if not control in _control then
25210: LD_VAR 0 4
25214: PUSH
25215: LD_VAR 0 12
25219: IN
25220: NOT
25221: IFFALSE 25247
// control := _control [ rand ( 1 , _control ) ] ;
25223: LD_ADDR_VAR 0 4
25227: PUSH
25228: LD_VAR 0 12
25232: PUSH
25233: LD_INT 1
25235: PPUSH
25236: LD_VAR 0 12
25240: PPUSH
25241: CALL_OW 12
25245: ARRAY
25246: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25247: LD_VAR 0 2
25251: PPUSH
25252: LD_VAR 0 5
25256: PPUSH
25257: CALL 25615 0 2
25261: NOT
25262: IFFALSE 25321
// repeat weapon := _weapon [ 1 ] ;
25264: LD_ADDR_VAR 0 5
25268: PUSH
25269: LD_VAR 0 10
25273: PUSH
25274: LD_INT 1
25276: ARRAY
25277: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25278: LD_ADDR_VAR 0 10
25282: PUSH
25283: LD_VAR 0 10
25287: PPUSH
25288: LD_INT 1
25290: PPUSH
25291: CALL_OW 3
25295: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25296: LD_VAR 0 2
25300: PPUSH
25301: LD_VAR 0 5
25305: PPUSH
25306: CALL 25615 0 2
25310: PUSH
25311: LD_VAR 0 10
25315: PUSH
25316: EMPTY
25317: EQUAL
25318: OR
25319: IFFALSE 25264
// result := [ ] ;
25321: LD_ADDR_VAR 0 6
25325: PUSH
25326: EMPTY
25327: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25328: LD_VAR 0 1
25332: PPUSH
25333: LD_VAR 0 2
25337: PPUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: LD_VAR 0 4
25347: PPUSH
25348: LD_VAR 0 5
25352: PPUSH
25353: CALL_OW 448
25357: IFFALSE 25390
// result := [ chassis , engine , control , weapon ] ;
25359: LD_ADDR_VAR 0 6
25363: PUSH
25364: LD_VAR 0 2
25368: PUSH
25369: LD_VAR 0 3
25373: PUSH
25374: LD_VAR 0 4
25378: PUSH
25379: LD_VAR 0 5
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: ST_TO_ADDR
// end ;
25390: LD_VAR 0 6
25394: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25395: LD_INT 0
25397: PPUSH
// if not chassis or not engine then
25398: LD_VAR 0 1
25402: NOT
25403: PUSH
25404: LD_VAR 0 2
25408: NOT
25409: OR
25410: IFFALSE 25414
// exit ;
25412: GO 25610
// case engine of engine_solar :
25414: LD_VAR 0 2
25418: PUSH
25419: LD_INT 2
25421: DOUBLE
25422: EQUAL
25423: IFTRUE 25427
25425: GO 25465
25427: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25428: LD_ADDR_VAR 0 3
25432: PUSH
25433: LD_INT 11
25435: PUSH
25436: LD_INT 12
25438: PUSH
25439: LD_INT 13
25441: PUSH
25442: LD_INT 14
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: LD_INT 3
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: ST_TO_ADDR
25463: GO 25594
25465: LD_INT 1
25467: DOUBLE
25468: EQUAL
25469: IFTRUE 25473
25471: GO 25535
25473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25474: LD_ADDR_VAR 0 3
25478: PUSH
25479: LD_INT 11
25481: PUSH
25482: LD_INT 12
25484: PUSH
25485: LD_INT 13
25487: PUSH
25488: LD_INT 14
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 4
25502: PUSH
25503: LD_INT 5
25505: PUSH
25506: LD_INT 21
25508: PUSH
25509: LD_INT 23
25511: PUSH
25512: LD_INT 22
25514: PUSH
25515: LD_INT 24
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: ST_TO_ADDR
25533: GO 25594
25535: LD_INT 3
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25593
25543: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25544: LD_ADDR_VAR 0 3
25548: PUSH
25549: LD_INT 13
25551: PUSH
25552: LD_INT 14
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: LD_INT 3
25560: PUSH
25561: LD_INT 4
25563: PUSH
25564: LD_INT 5
25566: PUSH
25567: LD_INT 21
25569: PUSH
25570: LD_INT 22
25572: PUSH
25573: LD_INT 23
25575: PUSH
25576: LD_INT 24
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: ST_TO_ADDR
25591: GO 25594
25593: POP
// result := ( chassis in result ) ;
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_VAR 0 1
25603: PUSH
25604: LD_VAR 0 3
25608: IN
25609: ST_TO_ADDR
// end ;
25610: LD_VAR 0 3
25614: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25615: LD_INT 0
25617: PPUSH
// if not chassis or not weapon then
25618: LD_VAR 0 1
25622: NOT
25623: PUSH
25624: LD_VAR 0 2
25628: NOT
25629: OR
25630: IFFALSE 25634
// exit ;
25632: GO 26696
// case weapon of us_machine_gun :
25634: LD_VAR 0 2
25638: PUSH
25639: LD_INT 2
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25677
25647: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25648: LD_ADDR_VAR 0 3
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: LD_INT 4
25664: PUSH
25665: LD_INT 5
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: ST_TO_ADDR
25675: GO 26680
25677: LD_INT 3
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25715
25685: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25686: LD_ADDR_VAR 0 3
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: LD_INT 4
25702: PUSH
25703: LD_INT 5
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
25713: GO 26680
25715: LD_INT 11
25717: DOUBLE
25718: EQUAL
25719: IFTRUE 25723
25721: GO 25753
25723: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25724: LD_ADDR_VAR 0 3
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: LD_INT 4
25740: PUSH
25741: LD_INT 5
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: ST_TO_ADDR
25751: GO 26680
25753: LD_INT 4
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25761
25759: GO 25787
25761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25762: LD_ADDR_VAR 0 3
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 3
25772: PUSH
25773: LD_INT 4
25775: PUSH
25776: LD_INT 5
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: ST_TO_ADDR
25785: GO 26680
25787: LD_INT 5
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25821
25795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25796: LD_ADDR_VAR 0 3
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: LD_INT 4
25809: PUSH
25810: LD_INT 5
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: ST_TO_ADDR
25819: GO 26680
25821: LD_INT 9
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25855
25829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25830: LD_ADDR_VAR 0 3
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: LD_INT 4
25843: PUSH
25844: LD_INT 5
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: ST_TO_ADDR
25853: GO 26680
25855: LD_INT 7
25857: DOUBLE
25858: EQUAL
25859: IFTRUE 25863
25861: GO 25889
25863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25864: LD_ADDR_VAR 0 3
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: LD_INT 3
25874: PUSH
25875: LD_INT 4
25877: PUSH
25878: LD_INT 5
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: ST_TO_ADDR
25887: GO 26680
25889: LD_INT 12
25891: DOUBLE
25892: EQUAL
25893: IFTRUE 25897
25895: GO 25923
25897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25898: LD_ADDR_VAR 0 3
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
25921: GO 26680
25923: LD_INT 13
25925: DOUBLE
25926: EQUAL
25927: IFTRUE 25931
25929: GO 25957
25931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25932: LD_ADDR_VAR 0 3
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: LD_INT 3
25942: PUSH
25943: LD_INT 4
25945: PUSH
25946: LD_INT 5
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: ST_TO_ADDR
25955: GO 26680
25957: LD_INT 14
25959: DOUBLE
25960: EQUAL
25961: IFTRUE 25965
25963: GO 25983
25965: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25966: LD_ADDR_VAR 0 3
25970: PUSH
25971: LD_INT 4
25973: PUSH
25974: LD_INT 5
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: ST_TO_ADDR
25981: GO 26680
25983: LD_INT 6
25985: DOUBLE
25986: EQUAL
25987: IFTRUE 25991
25989: GO 26009
25991: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_INT 4
25999: PUSH
26000: LD_INT 5
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: ST_TO_ADDR
26007: GO 26680
26009: LD_INT 10
26011: DOUBLE
26012: EQUAL
26013: IFTRUE 26017
26015: GO 26035
26017: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: LD_INT 4
26025: PUSH
26026: LD_INT 5
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: ST_TO_ADDR
26033: GO 26680
26035: LD_INT 22
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26069
26043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_INT 11
26051: PUSH
26052: LD_INT 12
26054: PUSH
26055: LD_INT 13
26057: PUSH
26058: LD_INT 14
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: ST_TO_ADDR
26067: GO 26680
26069: LD_INT 23
26071: DOUBLE
26072: EQUAL
26073: IFTRUE 26077
26075: GO 26103
26077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26078: LD_ADDR_VAR 0 3
26082: PUSH
26083: LD_INT 11
26085: PUSH
26086: LD_INT 12
26088: PUSH
26089: LD_INT 13
26091: PUSH
26092: LD_INT 14
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: ST_TO_ADDR
26101: GO 26680
26103: LD_INT 24
26105: DOUBLE
26106: EQUAL
26107: IFTRUE 26111
26109: GO 26137
26111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: LD_INT 11
26119: PUSH
26120: LD_INT 12
26122: PUSH
26123: LD_INT 13
26125: PUSH
26126: LD_INT 14
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: ST_TO_ADDR
26135: GO 26680
26137: LD_INT 30
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26171
26145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 11
26153: PUSH
26154: LD_INT 12
26156: PUSH
26157: LD_INT 13
26159: PUSH
26160: LD_INT 14
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: ST_TO_ADDR
26169: GO 26680
26171: LD_INT 25
26173: DOUBLE
26174: EQUAL
26175: IFTRUE 26179
26177: GO 26197
26179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26180: LD_ADDR_VAR 0 3
26184: PUSH
26185: LD_INT 13
26187: PUSH
26188: LD_INT 14
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: ST_TO_ADDR
26195: GO 26680
26197: LD_INT 27
26199: DOUBLE
26200: EQUAL
26201: IFTRUE 26205
26203: GO 26223
26205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26206: LD_ADDR_VAR 0 3
26210: PUSH
26211: LD_INT 13
26213: PUSH
26214: LD_INT 14
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: ST_TO_ADDR
26221: GO 26680
26223: LD_EXP 83
26227: DOUBLE
26228: EQUAL
26229: IFTRUE 26233
26231: GO 26259
26233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26234: LD_ADDR_VAR 0 3
26238: PUSH
26239: LD_INT 11
26241: PUSH
26242: LD_INT 12
26244: PUSH
26245: LD_INT 13
26247: PUSH
26248: LD_INT 14
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: ST_TO_ADDR
26257: GO 26680
26259: LD_INT 28
26261: DOUBLE
26262: EQUAL
26263: IFTRUE 26267
26265: GO 26285
26267: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26268: LD_ADDR_VAR 0 3
26272: PUSH
26273: LD_INT 13
26275: PUSH
26276: LD_INT 14
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 26680
26285: LD_INT 29
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26311
26293: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 13
26301: PUSH
26302: LD_INT 14
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: ST_TO_ADDR
26309: GO 26680
26311: LD_INT 31
26313: DOUBLE
26314: EQUAL
26315: IFTRUE 26319
26317: GO 26337
26319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26320: LD_ADDR_VAR 0 3
26324: PUSH
26325: LD_INT 13
26327: PUSH
26328: LD_INT 14
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: ST_TO_ADDR
26335: GO 26680
26337: LD_INT 26
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26363
26345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26346: LD_ADDR_VAR 0 3
26350: PUSH
26351: LD_INT 13
26353: PUSH
26354: LD_INT 14
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: ST_TO_ADDR
26361: GO 26680
26363: LD_INT 42
26365: DOUBLE
26366: EQUAL
26367: IFTRUE 26371
26369: GO 26397
26371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26372: LD_ADDR_VAR 0 3
26376: PUSH
26377: LD_INT 21
26379: PUSH
26380: LD_INT 22
26382: PUSH
26383: LD_INT 23
26385: PUSH
26386: LD_INT 24
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: ST_TO_ADDR
26395: GO 26680
26397: LD_INT 43
26399: DOUBLE
26400: EQUAL
26401: IFTRUE 26405
26403: GO 26431
26405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26406: LD_ADDR_VAR 0 3
26410: PUSH
26411: LD_INT 21
26413: PUSH
26414: LD_INT 22
26416: PUSH
26417: LD_INT 23
26419: PUSH
26420: LD_INT 24
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: ST_TO_ADDR
26429: GO 26680
26431: LD_INT 44
26433: DOUBLE
26434: EQUAL
26435: IFTRUE 26439
26437: GO 26465
26439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26440: LD_ADDR_VAR 0 3
26444: PUSH
26445: LD_INT 21
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_INT 23
26453: PUSH
26454: LD_INT 24
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: ST_TO_ADDR
26463: GO 26680
26465: LD_INT 45
26467: DOUBLE
26468: EQUAL
26469: IFTRUE 26473
26471: GO 26499
26473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_INT 21
26481: PUSH
26482: LD_INT 22
26484: PUSH
26485: LD_INT 23
26487: PUSH
26488: LD_INT 24
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: ST_TO_ADDR
26497: GO 26680
26499: LD_INT 49
26501: DOUBLE
26502: EQUAL
26503: IFTRUE 26507
26505: GO 26533
26507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 21
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_INT 23
26521: PUSH
26522: LD_INT 24
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: ST_TO_ADDR
26531: GO 26680
26533: LD_INT 51
26535: DOUBLE
26536: EQUAL
26537: IFTRUE 26541
26539: GO 26567
26541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_INT 21
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_INT 23
26555: PUSH
26556: LD_INT 24
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: ST_TO_ADDR
26565: GO 26680
26567: LD_INT 52
26569: DOUBLE
26570: EQUAL
26571: IFTRUE 26575
26573: GO 26601
26575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: LD_INT 21
26583: PUSH
26584: LD_INT 22
26586: PUSH
26587: LD_INT 23
26589: PUSH
26590: LD_INT 24
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: ST_TO_ADDR
26599: GO 26680
26601: LD_INT 53
26603: DOUBLE
26604: EQUAL
26605: IFTRUE 26609
26607: GO 26627
26609: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_INT 23
26617: PUSH
26618: LD_INT 24
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: ST_TO_ADDR
26625: GO 26680
26627: LD_INT 46
26629: DOUBLE
26630: EQUAL
26631: IFTRUE 26635
26633: GO 26653
26635: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 23
26643: PUSH
26644: LD_INT 24
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: ST_TO_ADDR
26651: GO 26680
26653: LD_INT 47
26655: DOUBLE
26656: EQUAL
26657: IFTRUE 26661
26659: GO 26679
26661: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26662: LD_ADDR_VAR 0 3
26666: PUSH
26667: LD_INT 23
26669: PUSH
26670: LD_INT 24
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: ST_TO_ADDR
26677: GO 26680
26679: POP
// result := ( chassis in result ) ;
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_VAR 0 1
26689: PUSH
26690: LD_VAR 0 3
26694: IN
26695: ST_TO_ADDR
// end ;
26696: LD_VAR 0 3
26700: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26701: LD_INT 0
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
// result := array ;
26710: LD_ADDR_VAR 0 5
26714: PUSH
26715: LD_VAR 0 1
26719: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26720: LD_VAR 0 1
26724: NOT
26725: PUSH
26726: LD_VAR 0 2
26730: NOT
26731: OR
26732: PUSH
26733: LD_VAR 0 3
26737: NOT
26738: OR
26739: PUSH
26740: LD_VAR 0 2
26744: PUSH
26745: LD_VAR 0 1
26749: GREATER
26750: OR
26751: PUSH
26752: LD_VAR 0 3
26756: PUSH
26757: LD_VAR 0 1
26761: GREATER
26762: OR
26763: IFFALSE 26767
// exit ;
26765: GO 27063
// if direction then
26767: LD_VAR 0 4
26771: IFFALSE 26835
// begin d := 1 ;
26773: LD_ADDR_VAR 0 9
26777: PUSH
26778: LD_INT 1
26780: ST_TO_ADDR
// if i_from > i_to then
26781: LD_VAR 0 2
26785: PUSH
26786: LD_VAR 0 3
26790: GREATER
26791: IFFALSE 26817
// length := ( array - i_from ) + i_to else
26793: LD_ADDR_VAR 0 11
26797: PUSH
26798: LD_VAR 0 1
26802: PUSH
26803: LD_VAR 0 2
26807: MINUS
26808: PUSH
26809: LD_VAR 0 3
26813: PLUS
26814: ST_TO_ADDR
26815: GO 26833
// length := i_to - i_from ;
26817: LD_ADDR_VAR 0 11
26821: PUSH
26822: LD_VAR 0 3
26826: PUSH
26827: LD_VAR 0 2
26831: MINUS
26832: ST_TO_ADDR
// end else
26833: GO 26896
// begin d := - 1 ;
26835: LD_ADDR_VAR 0 9
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: ST_TO_ADDR
// if i_from > i_to then
26844: LD_VAR 0 2
26848: PUSH
26849: LD_VAR 0 3
26853: GREATER
26854: IFFALSE 26874
// length := i_from - i_to else
26856: LD_ADDR_VAR 0 11
26860: PUSH
26861: LD_VAR 0 2
26865: PUSH
26866: LD_VAR 0 3
26870: MINUS
26871: ST_TO_ADDR
26872: GO 26896
// length := ( array - i_to ) + i_from ;
26874: LD_ADDR_VAR 0 11
26878: PUSH
26879: LD_VAR 0 1
26883: PUSH
26884: LD_VAR 0 3
26888: MINUS
26889: PUSH
26890: LD_VAR 0 2
26894: PLUS
26895: ST_TO_ADDR
// end ; if not length then
26896: LD_VAR 0 11
26900: NOT
26901: IFFALSE 26905
// exit ;
26903: GO 27063
// tmp := array ;
26905: LD_ADDR_VAR 0 10
26909: PUSH
26910: LD_VAR 0 1
26914: ST_TO_ADDR
// for i = 1 to length do
26915: LD_ADDR_VAR 0 6
26919: PUSH
26920: DOUBLE
26921: LD_INT 1
26923: DEC
26924: ST_TO_ADDR
26925: LD_VAR 0 11
26929: PUSH
26930: FOR_TO
26931: IFFALSE 27051
// begin for j = 1 to array do
26933: LD_ADDR_VAR 0 7
26937: PUSH
26938: DOUBLE
26939: LD_INT 1
26941: DEC
26942: ST_TO_ADDR
26943: LD_VAR 0 1
26947: PUSH
26948: FOR_TO
26949: IFFALSE 27037
// begin k := j + d ;
26951: LD_ADDR_VAR 0 8
26955: PUSH
26956: LD_VAR 0 7
26960: PUSH
26961: LD_VAR 0 9
26965: PLUS
26966: ST_TO_ADDR
// if k > array then
26967: LD_VAR 0 8
26971: PUSH
26972: LD_VAR 0 1
26976: GREATER
26977: IFFALSE 26987
// k := 1 ;
26979: LD_ADDR_VAR 0 8
26983: PUSH
26984: LD_INT 1
26986: ST_TO_ADDR
// if not k then
26987: LD_VAR 0 8
26991: NOT
26992: IFFALSE 27004
// k := array ;
26994: LD_ADDR_VAR 0 8
26998: PUSH
26999: LD_VAR 0 1
27003: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27004: LD_ADDR_VAR 0 10
27008: PUSH
27009: LD_VAR 0 10
27013: PPUSH
27014: LD_VAR 0 8
27018: PPUSH
27019: LD_VAR 0 1
27023: PUSH
27024: LD_VAR 0 7
27028: ARRAY
27029: PPUSH
27030: CALL_OW 1
27034: ST_TO_ADDR
// end ;
27035: GO 26948
27037: POP
27038: POP
// array := tmp ;
27039: LD_ADDR_VAR 0 1
27043: PUSH
27044: LD_VAR 0 10
27048: ST_TO_ADDR
// end ;
27049: GO 26930
27051: POP
27052: POP
// result := array ;
27053: LD_ADDR_VAR 0 5
27057: PUSH
27058: LD_VAR 0 1
27062: ST_TO_ADDR
// end ;
27063: LD_VAR 0 5
27067: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27068: LD_INT 0
27070: PPUSH
27071: PPUSH
// result := 0 ;
27072: LD_ADDR_VAR 0 3
27076: PUSH
27077: LD_INT 0
27079: ST_TO_ADDR
// if not array or not value in array then
27080: LD_VAR 0 1
27084: NOT
27085: PUSH
27086: LD_VAR 0 2
27090: PUSH
27091: LD_VAR 0 1
27095: IN
27096: NOT
27097: OR
27098: IFFALSE 27102
// exit ;
27100: GO 27156
// for i = 1 to array do
27102: LD_ADDR_VAR 0 4
27106: PUSH
27107: DOUBLE
27108: LD_INT 1
27110: DEC
27111: ST_TO_ADDR
27112: LD_VAR 0 1
27116: PUSH
27117: FOR_TO
27118: IFFALSE 27154
// if value = array [ i ] then
27120: LD_VAR 0 2
27124: PUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_VAR 0 4
27134: ARRAY
27135: EQUAL
27136: IFFALSE 27152
// begin result := i ;
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_VAR 0 4
27147: ST_TO_ADDR
// exit ;
27148: POP
27149: POP
27150: GO 27156
// end ;
27152: GO 27117
27154: POP
27155: POP
// end ;
27156: LD_VAR 0 3
27160: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27161: LD_INT 0
27163: PPUSH
// vc_chassis := chassis ;
27164: LD_ADDR_OWVAR 37
27168: PUSH
27169: LD_VAR 0 1
27173: ST_TO_ADDR
// vc_engine := engine ;
27174: LD_ADDR_OWVAR 39
27178: PUSH
27179: LD_VAR 0 2
27183: ST_TO_ADDR
// vc_control := control ;
27184: LD_ADDR_OWVAR 38
27188: PUSH
27189: LD_VAR 0 3
27193: ST_TO_ADDR
// vc_weapon := weapon ;
27194: LD_ADDR_OWVAR 40
27198: PUSH
27199: LD_VAR 0 4
27203: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27204: LD_ADDR_OWVAR 41
27208: PUSH
27209: LD_VAR 0 5
27213: ST_TO_ADDR
// end ;
27214: LD_VAR 0 6
27218: RET
// export function WantPlant ( unit ) ; var task ; begin
27219: LD_INT 0
27221: PPUSH
27222: PPUSH
// result := false ;
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_INT 0
27230: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: LD_VAR 0 1
27240: PPUSH
27241: CALL_OW 437
27245: ST_TO_ADDR
// if task then
27246: LD_VAR 0 3
27250: IFFALSE 27278
// if task [ 1 ] [ 1 ] = p then
27252: LD_VAR 0 3
27256: PUSH
27257: LD_INT 1
27259: ARRAY
27260: PUSH
27261: LD_INT 1
27263: ARRAY
27264: PUSH
27265: LD_STRING p
27267: EQUAL
27268: IFFALSE 27278
// result := true ;
27270: LD_ADDR_VAR 0 2
27274: PUSH
27275: LD_INT 1
27277: ST_TO_ADDR
// end ;
27278: LD_VAR 0 2
27282: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27283: LD_INT 0
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
// if pos < 1 then
27289: LD_VAR 0 2
27293: PUSH
27294: LD_INT 1
27296: LESS
27297: IFFALSE 27301
// exit ;
27299: GO 27604
// if pos = 1 then
27301: LD_VAR 0 2
27305: PUSH
27306: LD_INT 1
27308: EQUAL
27309: IFFALSE 27342
// result := Replace ( arr , pos [ 1 ] , value ) else
27311: LD_ADDR_VAR 0 4
27315: PUSH
27316: LD_VAR 0 1
27320: PPUSH
27321: LD_VAR 0 2
27325: PUSH
27326: LD_INT 1
27328: ARRAY
27329: PPUSH
27330: LD_VAR 0 3
27334: PPUSH
27335: CALL_OW 1
27339: ST_TO_ADDR
27340: GO 27604
// begin tmp := arr ;
27342: LD_ADDR_VAR 0 6
27346: PUSH
27347: LD_VAR 0 1
27351: ST_TO_ADDR
// s_arr := [ tmp ] ;
27352: LD_ADDR_VAR 0 7
27356: PUSH
27357: LD_VAR 0 6
27361: PUSH
27362: EMPTY
27363: LIST
27364: ST_TO_ADDR
// for i = 1 to pos - 1 do
27365: LD_ADDR_VAR 0 5
27369: PUSH
27370: DOUBLE
27371: LD_INT 1
27373: DEC
27374: ST_TO_ADDR
27375: LD_VAR 0 2
27379: PUSH
27380: LD_INT 1
27382: MINUS
27383: PUSH
27384: FOR_TO
27385: IFFALSE 27430
// begin tmp := tmp [ pos [ i ] ] ;
27387: LD_ADDR_VAR 0 6
27391: PUSH
27392: LD_VAR 0 6
27396: PUSH
27397: LD_VAR 0 2
27401: PUSH
27402: LD_VAR 0 5
27406: ARRAY
27407: ARRAY
27408: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27409: LD_ADDR_VAR 0 7
27413: PUSH
27414: LD_VAR 0 7
27418: PUSH
27419: LD_VAR 0 6
27423: PUSH
27424: EMPTY
27425: LIST
27426: ADD
27427: ST_TO_ADDR
// end ;
27428: GO 27384
27430: POP
27431: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27432: LD_ADDR_VAR 0 6
27436: PUSH
27437: LD_VAR 0 6
27441: PPUSH
27442: LD_VAR 0 2
27446: PUSH
27447: LD_VAR 0 2
27451: ARRAY
27452: PPUSH
27453: LD_VAR 0 3
27457: PPUSH
27458: CALL_OW 1
27462: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27463: LD_ADDR_VAR 0 7
27467: PUSH
27468: LD_VAR 0 7
27472: PPUSH
27473: LD_VAR 0 7
27477: PPUSH
27478: LD_VAR 0 6
27482: PPUSH
27483: CALL_OW 1
27487: ST_TO_ADDR
// for i = s_arr downto 2 do
27488: LD_ADDR_VAR 0 5
27492: PUSH
27493: DOUBLE
27494: LD_VAR 0 7
27498: INC
27499: ST_TO_ADDR
27500: LD_INT 2
27502: PUSH
27503: FOR_DOWNTO
27504: IFFALSE 27588
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27506: LD_ADDR_VAR 0 6
27510: PUSH
27511: LD_VAR 0 7
27515: PUSH
27516: LD_VAR 0 5
27520: PUSH
27521: LD_INT 1
27523: MINUS
27524: ARRAY
27525: PPUSH
27526: LD_VAR 0 2
27530: PUSH
27531: LD_VAR 0 5
27535: PUSH
27536: LD_INT 1
27538: MINUS
27539: ARRAY
27540: PPUSH
27541: LD_VAR 0 7
27545: PUSH
27546: LD_VAR 0 5
27550: ARRAY
27551: PPUSH
27552: CALL_OW 1
27556: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27557: LD_ADDR_VAR 0 7
27561: PUSH
27562: LD_VAR 0 7
27566: PPUSH
27567: LD_VAR 0 5
27571: PUSH
27572: LD_INT 1
27574: MINUS
27575: PPUSH
27576: LD_VAR 0 6
27580: PPUSH
27581: CALL_OW 1
27585: ST_TO_ADDR
// end ;
27586: GO 27503
27588: POP
27589: POP
// result := s_arr [ 1 ] ;
27590: LD_ADDR_VAR 0 4
27594: PUSH
27595: LD_VAR 0 7
27599: PUSH
27600: LD_INT 1
27602: ARRAY
27603: ST_TO_ADDR
// end ; end ;
27604: LD_VAR 0 4
27608: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27609: LD_INT 0
27611: PPUSH
27612: PPUSH
// if not list then
27613: LD_VAR 0 1
27617: NOT
27618: IFFALSE 27622
// exit ;
27620: GO 27713
// i := list [ pos1 ] ;
27622: LD_ADDR_VAR 0 5
27626: PUSH
27627: LD_VAR 0 1
27631: PUSH
27632: LD_VAR 0 2
27636: ARRAY
27637: ST_TO_ADDR
// if not i then
27638: LD_VAR 0 5
27642: NOT
27643: IFFALSE 27647
// exit ;
27645: GO 27713
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27647: LD_ADDR_VAR 0 1
27651: PUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: LD_VAR 0 2
27661: PPUSH
27662: LD_VAR 0 1
27666: PUSH
27667: LD_VAR 0 3
27671: ARRAY
27672: PPUSH
27673: CALL_OW 1
27677: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27678: LD_ADDR_VAR 0 1
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: LD_VAR 0 3
27692: PPUSH
27693: LD_VAR 0 5
27697: PPUSH
27698: CALL_OW 1
27702: ST_TO_ADDR
// result := list ;
27703: LD_ADDR_VAR 0 4
27707: PUSH
27708: LD_VAR 0 1
27712: ST_TO_ADDR
// end ;
27713: LD_VAR 0 4
27717: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27718: LD_INT 0
27720: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27721: LD_ADDR_VAR 0 5
27725: PUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: CALL_OW 250
27735: PPUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: CALL_OW 251
27745: PPUSH
27746: LD_VAR 0 2
27750: PPUSH
27751: LD_VAR 0 3
27755: PPUSH
27756: LD_VAR 0 4
27760: PPUSH
27761: CALL 27771 0 5
27765: ST_TO_ADDR
// end ;
27766: LD_VAR 0 5
27770: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27771: LD_INT 0
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
// if not list then
27777: LD_VAR 0 3
27781: NOT
27782: IFFALSE 27786
// exit ;
27784: GO 28174
// result := [ ] ;
27786: LD_ADDR_VAR 0 6
27790: PUSH
27791: EMPTY
27792: ST_TO_ADDR
// for i in list do
27793: LD_ADDR_VAR 0 7
27797: PUSH
27798: LD_VAR 0 3
27802: PUSH
27803: FOR_IN
27804: IFFALSE 28006
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27806: LD_ADDR_VAR 0 9
27810: PUSH
27811: LD_VAR 0 7
27815: PPUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: LD_VAR 0 2
27825: PPUSH
27826: CALL_OW 297
27830: ST_TO_ADDR
// if not result then
27831: LD_VAR 0 6
27835: NOT
27836: IFFALSE 27862
// result := [ [ i , tmp ] ] else
27838: LD_ADDR_VAR 0 6
27842: PUSH
27843: LD_VAR 0 7
27847: PUSH
27848: LD_VAR 0 9
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: ST_TO_ADDR
27860: GO 28004
// begin if result [ result ] [ 2 ] < tmp then
27862: LD_VAR 0 6
27866: PUSH
27867: LD_VAR 0 6
27871: ARRAY
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PUSH
27877: LD_VAR 0 9
27881: LESS
27882: IFFALSE 27924
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27884: LD_ADDR_VAR 0 6
27888: PUSH
27889: LD_VAR 0 6
27893: PPUSH
27894: LD_VAR 0 6
27898: PUSH
27899: LD_INT 1
27901: PLUS
27902: PPUSH
27903: LD_VAR 0 7
27907: PUSH
27908: LD_VAR 0 9
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PPUSH
27917: CALL_OW 2
27921: ST_TO_ADDR
27922: GO 28004
// for j = 1 to result do
27924: LD_ADDR_VAR 0 8
27928: PUSH
27929: DOUBLE
27930: LD_INT 1
27932: DEC
27933: ST_TO_ADDR
27934: LD_VAR 0 6
27938: PUSH
27939: FOR_TO
27940: IFFALSE 28002
// begin if tmp < result [ j ] [ 2 ] then
27942: LD_VAR 0 9
27946: PUSH
27947: LD_VAR 0 6
27951: PUSH
27952: LD_VAR 0 8
27956: ARRAY
27957: PUSH
27958: LD_INT 2
27960: ARRAY
27961: LESS
27962: IFFALSE 28000
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27964: LD_ADDR_VAR 0 6
27968: PUSH
27969: LD_VAR 0 6
27973: PPUSH
27974: LD_VAR 0 8
27978: PPUSH
27979: LD_VAR 0 7
27983: PUSH
27984: LD_VAR 0 9
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PPUSH
27993: CALL_OW 2
27997: ST_TO_ADDR
// break ;
27998: GO 28002
// end ; end ;
28000: GO 27939
28002: POP
28003: POP
// end ; end ;
28004: GO 27803
28006: POP
28007: POP
// if result and not asc then
28008: LD_VAR 0 6
28012: PUSH
28013: LD_VAR 0 4
28017: NOT
28018: AND
28019: IFFALSE 28094
// begin tmp := result ;
28021: LD_ADDR_VAR 0 9
28025: PUSH
28026: LD_VAR 0 6
28030: ST_TO_ADDR
// for i = tmp downto 1 do
28031: LD_ADDR_VAR 0 7
28035: PUSH
28036: DOUBLE
28037: LD_VAR 0 9
28041: INC
28042: ST_TO_ADDR
28043: LD_INT 1
28045: PUSH
28046: FOR_DOWNTO
28047: IFFALSE 28092
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28049: LD_ADDR_VAR 0 6
28053: PUSH
28054: LD_VAR 0 6
28058: PPUSH
28059: LD_VAR 0 9
28063: PUSH
28064: LD_VAR 0 7
28068: MINUS
28069: PUSH
28070: LD_INT 1
28072: PLUS
28073: PPUSH
28074: LD_VAR 0 9
28078: PUSH
28079: LD_VAR 0 7
28083: ARRAY
28084: PPUSH
28085: CALL_OW 1
28089: ST_TO_ADDR
28090: GO 28046
28092: POP
28093: POP
// end ; tmp := [ ] ;
28094: LD_ADDR_VAR 0 9
28098: PUSH
28099: EMPTY
28100: ST_TO_ADDR
// if mode then
28101: LD_VAR 0 5
28105: IFFALSE 28174
// begin for i = 1 to result do
28107: LD_ADDR_VAR 0 7
28111: PUSH
28112: DOUBLE
28113: LD_INT 1
28115: DEC
28116: ST_TO_ADDR
28117: LD_VAR 0 6
28121: PUSH
28122: FOR_TO
28123: IFFALSE 28162
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28125: LD_ADDR_VAR 0 9
28129: PUSH
28130: LD_VAR 0 9
28134: PPUSH
28135: LD_VAR 0 7
28139: PPUSH
28140: LD_VAR 0 6
28144: PUSH
28145: LD_VAR 0 7
28149: ARRAY
28150: PUSH
28151: LD_INT 1
28153: ARRAY
28154: PPUSH
28155: CALL_OW 1
28159: ST_TO_ADDR
28160: GO 28122
28162: POP
28163: POP
// result := tmp ;
28164: LD_ADDR_VAR 0 6
28168: PUSH
28169: LD_VAR 0 9
28173: ST_TO_ADDR
// end ; end ;
28174: LD_VAR 0 6
28178: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28179: LD_INT 0
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
28186: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28187: LD_ADDR_VAR 0 5
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// if not x or not y then
28209: LD_VAR 0 2
28213: NOT
28214: PUSH
28215: LD_VAR 0 3
28219: NOT
28220: OR
28221: IFFALSE 28225
// exit ;
28223: GO 29877
// if not range then
28225: LD_VAR 0 4
28229: NOT
28230: IFFALSE 28240
// range := 10 ;
28232: LD_ADDR_VAR 0 4
28236: PUSH
28237: LD_INT 10
28239: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28240: LD_ADDR_VAR 0 8
28244: PUSH
28245: LD_INT 81
28247: PUSH
28248: LD_VAR 0 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 92
28259: PUSH
28260: LD_VAR 0 2
28264: PUSH
28265: LD_VAR 0 3
28269: PUSH
28270: LD_VAR 0 4
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: LD_INT 21
28286: PUSH
28287: LD_INT 3
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: PPUSH
28303: CALL_OW 69
28307: ST_TO_ADDR
// if not tmp then
28308: LD_VAR 0 8
28312: NOT
28313: IFFALSE 28317
// exit ;
28315: GO 29877
// for i in tmp do
28317: LD_ADDR_VAR 0 6
28321: PUSH
28322: LD_VAR 0 8
28326: PUSH
28327: FOR_IN
28328: IFFALSE 29852
// begin points := [ 0 , 0 , 0 ] ;
28330: LD_ADDR_VAR 0 9
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
// bpoints := 1 ;
28349: LD_ADDR_VAR 0 10
28353: PUSH
28354: LD_INT 1
28356: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28357: LD_VAR 0 6
28361: PPUSH
28362: CALL_OW 247
28366: PUSH
28367: LD_INT 1
28369: DOUBLE
28370: EQUAL
28371: IFTRUE 28375
28373: GO 28953
28375: POP
// begin if GetClass ( i ) = 1 then
28376: LD_VAR 0 6
28380: PPUSH
28381: CALL_OW 257
28385: PUSH
28386: LD_INT 1
28388: EQUAL
28389: IFFALSE 28410
// points := [ 10 , 5 , 3 ] ;
28391: LD_ADDR_VAR 0 9
28395: PUSH
28396: LD_INT 10
28398: PUSH
28399: LD_INT 5
28401: PUSH
28402: LD_INT 3
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28410: LD_VAR 0 6
28414: PPUSH
28415: CALL_OW 257
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: LD_INT 4
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: IN
28434: IFFALSE 28455
// points := [ 3 , 2 , 1 ] ;
28436: LD_ADDR_VAR 0 9
28440: PUSH
28441: LD_INT 3
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28455: LD_VAR 0 6
28459: PPUSH
28460: CALL_OW 257
28464: PUSH
28465: LD_INT 5
28467: EQUAL
28468: IFFALSE 28489
// points := [ 130 , 5 , 2 ] ;
28470: LD_ADDR_VAR 0 9
28474: PUSH
28475: LD_INT 130
28477: PUSH
28478: LD_INT 5
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28489: LD_VAR 0 6
28493: PPUSH
28494: CALL_OW 257
28498: PUSH
28499: LD_INT 8
28501: EQUAL
28502: IFFALSE 28523
// points := [ 35 , 35 , 30 ] ;
28504: LD_ADDR_VAR 0 9
28508: PUSH
28509: LD_INT 35
28511: PUSH
28512: LD_INT 35
28514: PUSH
28515: LD_INT 30
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28523: LD_VAR 0 6
28527: PPUSH
28528: CALL_OW 257
28532: PUSH
28533: LD_INT 9
28535: EQUAL
28536: IFFALSE 28557
// points := [ 20 , 55 , 40 ] ;
28538: LD_ADDR_VAR 0 9
28542: PUSH
28543: LD_INT 20
28545: PUSH
28546: LD_INT 55
28548: PUSH
28549: LD_INT 40
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28557: LD_VAR 0 6
28561: PPUSH
28562: CALL_OW 257
28566: PUSH
28567: LD_INT 12
28569: PUSH
28570: LD_INT 16
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: IN
28577: IFFALSE 28598
// points := [ 5 , 3 , 2 ] ;
28579: LD_ADDR_VAR 0 9
28583: PUSH
28584: LD_INT 5
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28598: LD_VAR 0 6
28602: PPUSH
28603: CALL_OW 257
28607: PUSH
28608: LD_INT 17
28610: EQUAL
28611: IFFALSE 28632
// points := [ 100 , 50 , 75 ] ;
28613: LD_ADDR_VAR 0 9
28617: PUSH
28618: LD_INT 100
28620: PUSH
28621: LD_INT 50
28623: PUSH
28624: LD_INT 75
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28632: LD_VAR 0 6
28636: PPUSH
28637: CALL_OW 257
28641: PUSH
28642: LD_INT 15
28644: EQUAL
28645: IFFALSE 28666
// points := [ 10 , 5 , 3 ] ;
28647: LD_ADDR_VAR 0 9
28651: PUSH
28652: LD_INT 10
28654: PUSH
28655: LD_INT 5
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28666: LD_VAR 0 6
28670: PPUSH
28671: CALL_OW 257
28675: PUSH
28676: LD_INT 14
28678: EQUAL
28679: IFFALSE 28700
// points := [ 10 , 0 , 0 ] ;
28681: LD_ADDR_VAR 0 9
28685: PUSH
28686: LD_INT 10
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28700: LD_VAR 0 6
28704: PPUSH
28705: CALL_OW 257
28709: PUSH
28710: LD_INT 11
28712: EQUAL
28713: IFFALSE 28734
// points := [ 30 , 10 , 5 ] ;
28715: LD_ADDR_VAR 0 9
28719: PUSH
28720: LD_INT 30
28722: PUSH
28723: LD_INT 10
28725: PUSH
28726: LD_INT 5
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28734: LD_VAR 0 1
28738: PPUSH
28739: LD_INT 5
28741: PPUSH
28742: CALL_OW 321
28746: PUSH
28747: LD_INT 2
28749: EQUAL
28750: IFFALSE 28767
// bpoints := bpoints * 1.8 ;
28752: LD_ADDR_VAR 0 10
28756: PUSH
28757: LD_VAR 0 10
28761: PUSH
28762: LD_REAL  1.80000000000000E+0000
28765: MUL
28766: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28767: LD_VAR 0 6
28771: PPUSH
28772: CALL_OW 257
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: LD_INT 3
28785: PUSH
28786: LD_INT 4
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: IN
28795: PUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: LD_INT 51
28803: PPUSH
28804: CALL_OW 321
28808: PUSH
28809: LD_INT 2
28811: EQUAL
28812: AND
28813: IFFALSE 28830
// bpoints := bpoints * 1.2 ;
28815: LD_ADDR_VAR 0 10
28819: PUSH
28820: LD_VAR 0 10
28824: PUSH
28825: LD_REAL  1.20000000000000E+0000
28828: MUL
28829: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28830: LD_VAR 0 6
28834: PPUSH
28835: CALL_OW 257
28839: PUSH
28840: LD_INT 5
28842: PUSH
28843: LD_INT 7
28845: PUSH
28846: LD_INT 9
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: IN
28854: PUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: LD_INT 52
28862: PPUSH
28863: CALL_OW 321
28867: PUSH
28868: LD_INT 2
28870: EQUAL
28871: AND
28872: IFFALSE 28889
// bpoints := bpoints * 1.5 ;
28874: LD_ADDR_VAR 0 10
28878: PUSH
28879: LD_VAR 0 10
28883: PUSH
28884: LD_REAL  1.50000000000000E+0000
28887: MUL
28888: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_INT 66
28896: PPUSH
28897: CALL_OW 321
28901: PUSH
28902: LD_INT 2
28904: EQUAL
28905: IFFALSE 28922
// bpoints := bpoints * 1.1 ;
28907: LD_ADDR_VAR 0 10
28911: PUSH
28912: LD_VAR 0 10
28916: PUSH
28917: LD_REAL  1.10000000000000E+0000
28920: MUL
28921: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28922: LD_ADDR_VAR 0 10
28926: PUSH
28927: LD_VAR 0 10
28931: PUSH
28932: LD_VAR 0 6
28936: PPUSH
28937: LD_INT 1
28939: PPUSH
28940: CALL_OW 259
28944: PUSH
28945: LD_REAL  1.15000000000000E+0000
28948: MUL
28949: MUL
28950: ST_TO_ADDR
// end ; unit_vehicle :
28951: GO 29781
28953: LD_INT 2
28955: DOUBLE
28956: EQUAL
28957: IFTRUE 28961
28959: GO 29769
28961: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28962: LD_VAR 0 6
28966: PPUSH
28967: CALL_OW 264
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 42
28977: PUSH
28978: LD_INT 24
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: IN
28986: IFFALSE 29007
// points := [ 25 , 5 , 3 ] ;
28988: LD_ADDR_VAR 0 9
28992: PUSH
28993: LD_INT 25
28995: PUSH
28996: LD_INT 5
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29007: LD_VAR 0 6
29011: PPUSH
29012: CALL_OW 264
29016: PUSH
29017: LD_INT 4
29019: PUSH
29020: LD_INT 43
29022: PUSH
29023: LD_INT 25
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: IN
29031: IFFALSE 29052
// points := [ 40 , 15 , 5 ] ;
29033: LD_ADDR_VAR 0 9
29037: PUSH
29038: LD_INT 40
29040: PUSH
29041: LD_INT 15
29043: PUSH
29044: LD_INT 5
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29052: LD_VAR 0 6
29056: PPUSH
29057: CALL_OW 264
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: LD_INT 23
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: IN
29072: IFFALSE 29093
// points := [ 7 , 25 , 8 ] ;
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: LD_INT 7
29081: PUSH
29082: LD_INT 25
29084: PUSH
29085: LD_INT 8
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29093: LD_VAR 0 6
29097: PPUSH
29098: CALL_OW 264
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: LD_INT 27
29108: PUSH
29109: LD_INT 44
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: IN
29117: IFFALSE 29138
// points := [ 14 , 50 , 16 ] ;
29119: LD_ADDR_VAR 0 9
29123: PUSH
29124: LD_INT 14
29126: PUSH
29127: LD_INT 50
29129: PUSH
29130: LD_INT 16
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29138: LD_VAR 0 6
29142: PPUSH
29143: CALL_OW 264
29147: PUSH
29148: LD_INT 6
29150: PUSH
29151: LD_INT 46
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: IN
29158: IFFALSE 29179
// points := [ 32 , 120 , 70 ] ;
29160: LD_ADDR_VAR 0 9
29164: PUSH
29165: LD_INT 32
29167: PUSH
29168: LD_INT 120
29170: PUSH
29171: LD_INT 70
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29179: LD_VAR 0 6
29183: PPUSH
29184: CALL_OW 264
29188: PUSH
29189: LD_INT 7
29191: PUSH
29192: LD_INT 28
29194: PUSH
29195: LD_INT 45
29197: PUSH
29198: LD_EXP 83
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: IN
29209: IFFALSE 29230
// points := [ 35 , 20 , 45 ] ;
29211: LD_ADDR_VAR 0 9
29215: PUSH
29216: LD_INT 35
29218: PUSH
29219: LD_INT 20
29221: PUSH
29222: LD_INT 45
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29230: LD_VAR 0 6
29234: PPUSH
29235: CALL_OW 264
29239: PUSH
29240: LD_INT 47
29242: PUSH
29243: EMPTY
29244: LIST
29245: IN
29246: IFFALSE 29267
// points := [ 67 , 45 , 75 ] ;
29248: LD_ADDR_VAR 0 9
29252: PUSH
29253: LD_INT 67
29255: PUSH
29256: LD_INT 45
29258: PUSH
29259: LD_INT 75
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29267: LD_VAR 0 6
29271: PPUSH
29272: CALL_OW 264
29276: PUSH
29277: LD_INT 26
29279: PUSH
29280: EMPTY
29281: LIST
29282: IN
29283: IFFALSE 29304
// points := [ 120 , 30 , 80 ] ;
29285: LD_ADDR_VAR 0 9
29289: PUSH
29290: LD_INT 120
29292: PUSH
29293: LD_INT 30
29295: PUSH
29296: LD_INT 80
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29304: LD_VAR 0 6
29308: PPUSH
29309: CALL_OW 264
29313: PUSH
29314: LD_INT 22
29316: PUSH
29317: EMPTY
29318: LIST
29319: IN
29320: IFFALSE 29341
// points := [ 40 , 1 , 1 ] ;
29322: LD_ADDR_VAR 0 9
29326: PUSH
29327: LD_INT 40
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29341: LD_VAR 0 6
29345: PPUSH
29346: CALL_OW 264
29350: PUSH
29351: LD_INT 29
29353: PUSH
29354: EMPTY
29355: LIST
29356: IN
29357: IFFALSE 29378
// points := [ 70 , 200 , 400 ] ;
29359: LD_ADDR_VAR 0 9
29363: PUSH
29364: LD_INT 70
29366: PUSH
29367: LD_INT 200
29369: PUSH
29370: LD_INT 400
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29378: LD_VAR 0 6
29382: PPUSH
29383: CALL_OW 264
29387: PUSH
29388: LD_INT 14
29390: PUSH
29391: LD_INT 53
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: IN
29398: IFFALSE 29419
// points := [ 40 , 10 , 20 ] ;
29400: LD_ADDR_VAR 0 9
29404: PUSH
29405: LD_INT 40
29407: PUSH
29408: LD_INT 10
29410: PUSH
29411: LD_INT 20
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29419: LD_VAR 0 6
29423: PPUSH
29424: CALL_OW 264
29428: PUSH
29429: LD_INT 9
29431: PUSH
29432: EMPTY
29433: LIST
29434: IN
29435: IFFALSE 29456
// points := [ 5 , 70 , 20 ] ;
29437: LD_ADDR_VAR 0 9
29441: PUSH
29442: LD_INT 5
29444: PUSH
29445: LD_INT 70
29447: PUSH
29448: LD_INT 20
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29456: LD_VAR 0 6
29460: PPUSH
29461: CALL_OW 264
29465: PUSH
29466: LD_INT 10
29468: PUSH
29469: EMPTY
29470: LIST
29471: IN
29472: IFFALSE 29493
// points := [ 35 , 110 , 70 ] ;
29474: LD_ADDR_VAR 0 9
29478: PUSH
29479: LD_INT 35
29481: PUSH
29482: LD_INT 110
29484: PUSH
29485: LD_INT 70
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29493: LD_VAR 0 6
29497: PPUSH
29498: CALL_OW 265
29502: PUSH
29503: LD_INT 25
29505: EQUAL
29506: IFFALSE 29527
// points := [ 80 , 65 , 100 ] ;
29508: LD_ADDR_VAR 0 9
29512: PUSH
29513: LD_INT 80
29515: PUSH
29516: LD_INT 65
29518: PUSH
29519: LD_INT 100
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29527: LD_VAR 0 6
29531: PPUSH
29532: CALL_OW 263
29536: PUSH
29537: LD_INT 1
29539: EQUAL
29540: IFFALSE 29575
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29542: LD_ADDR_VAR 0 10
29546: PUSH
29547: LD_VAR 0 10
29551: PUSH
29552: LD_VAR 0 6
29556: PPUSH
29557: CALL_OW 311
29561: PPUSH
29562: LD_INT 3
29564: PPUSH
29565: CALL_OW 259
29569: PUSH
29570: LD_INT 4
29572: MUL
29573: MUL
29574: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29575: LD_VAR 0 6
29579: PPUSH
29580: CALL_OW 263
29584: PUSH
29585: LD_INT 2
29587: EQUAL
29588: IFFALSE 29639
// begin j := IsControledBy ( i ) ;
29590: LD_ADDR_VAR 0 7
29594: PUSH
29595: LD_VAR 0 6
29599: PPUSH
29600: CALL_OW 312
29604: ST_TO_ADDR
// if j then
29605: LD_VAR 0 7
29609: IFFALSE 29639
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29611: LD_ADDR_VAR 0 10
29615: PUSH
29616: LD_VAR 0 10
29620: PUSH
29621: LD_VAR 0 7
29625: PPUSH
29626: LD_INT 3
29628: PPUSH
29629: CALL_OW 259
29633: PUSH
29634: LD_INT 3
29636: MUL
29637: MUL
29638: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29639: LD_VAR 0 6
29643: PPUSH
29644: CALL_OW 264
29648: PUSH
29649: LD_INT 5
29651: PUSH
29652: LD_INT 6
29654: PUSH
29655: LD_INT 46
29657: PUSH
29658: LD_INT 44
29660: PUSH
29661: LD_INT 47
29663: PUSH
29664: LD_INT 45
29666: PUSH
29667: LD_INT 28
29669: PUSH
29670: LD_INT 7
29672: PUSH
29673: LD_INT 27
29675: PUSH
29676: LD_INT 29
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: IN
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: LD_INT 52
29699: PPUSH
29700: CALL_OW 321
29704: PUSH
29705: LD_INT 2
29707: EQUAL
29708: AND
29709: IFFALSE 29726
// bpoints := bpoints * 1.2 ;
29711: LD_ADDR_VAR 0 10
29715: PUSH
29716: LD_VAR 0 10
29720: PUSH
29721: LD_REAL  1.20000000000000E+0000
29724: MUL
29725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29726: LD_VAR 0 6
29730: PPUSH
29731: CALL_OW 264
29735: PUSH
29736: LD_INT 6
29738: PUSH
29739: LD_INT 46
29741: PUSH
29742: LD_INT 47
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: IN
29750: IFFALSE 29767
// bpoints := bpoints * 1.2 ;
29752: LD_ADDR_VAR 0 10
29756: PUSH
29757: LD_VAR 0 10
29761: PUSH
29762: LD_REAL  1.20000000000000E+0000
29765: MUL
29766: ST_TO_ADDR
// end ; unit_building :
29767: GO 29781
29769: LD_INT 3
29771: DOUBLE
29772: EQUAL
29773: IFTRUE 29777
29775: GO 29780
29777: POP
// ; end ;
29778: GO 29781
29780: POP
// for j = 1 to 3 do
29781: LD_ADDR_VAR 0 7
29785: PUSH
29786: DOUBLE
29787: LD_INT 1
29789: DEC
29790: ST_TO_ADDR
29791: LD_INT 3
29793: PUSH
29794: FOR_TO
29795: IFFALSE 29848
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29797: LD_ADDR_VAR 0 5
29801: PUSH
29802: LD_VAR 0 5
29806: PPUSH
29807: LD_VAR 0 7
29811: PPUSH
29812: LD_VAR 0 5
29816: PUSH
29817: LD_VAR 0 7
29821: ARRAY
29822: PUSH
29823: LD_VAR 0 9
29827: PUSH
29828: LD_VAR 0 7
29832: ARRAY
29833: PUSH
29834: LD_VAR 0 10
29838: MUL
29839: PLUS
29840: PPUSH
29841: CALL_OW 1
29845: ST_TO_ADDR
29846: GO 29794
29848: POP
29849: POP
// end ;
29850: GO 28327
29852: POP
29853: POP
// result := Replace ( result , 4 , tmp ) ;
29854: LD_ADDR_VAR 0 5
29858: PUSH
29859: LD_VAR 0 5
29863: PPUSH
29864: LD_INT 4
29866: PPUSH
29867: LD_VAR 0 8
29871: PPUSH
29872: CALL_OW 1
29876: ST_TO_ADDR
// end ;
29877: LD_VAR 0 5
29881: RET
// export function DangerAtRange ( unit , range ) ; begin
29882: LD_INT 0
29884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: CALL_OW 255
29899: PPUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 250
29909: PPUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 251
29919: PPUSH
29920: LD_VAR 0 2
29924: PPUSH
29925: CALL 28179 0 4
29929: ST_TO_ADDR
// end ;
29930: LD_VAR 0 3
29934: RET
// export function DangerInArea ( side , area ) ; begin
29935: LD_INT 0
29937: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29938: LD_ADDR_VAR 0 3
29942: PUSH
29943: LD_VAR 0 2
29947: PPUSH
29948: LD_INT 81
29950: PUSH
29951: LD_VAR 0 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PPUSH
29960: CALL_OW 70
29964: ST_TO_ADDR
// end ;
29965: LD_VAR 0 3
29969: RET
// export function IsExtension ( b ) ; begin
29970: LD_INT 0
29972: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29973: LD_ADDR_VAR 0 2
29977: PUSH
29978: LD_VAR 0 1
29982: PUSH
29983: LD_INT 23
29985: PUSH
29986: LD_INT 20
29988: PUSH
29989: LD_INT 22
29991: PUSH
29992: LD_INT 17
29994: PUSH
29995: LD_INT 24
29997: PUSH
29998: LD_INT 21
30000: PUSH
30001: LD_INT 19
30003: PUSH
30004: LD_INT 16
30006: PUSH
30007: LD_INT 25
30009: PUSH
30010: LD_INT 18
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: IN
30025: ST_TO_ADDR
// end ;
30026: LD_VAR 0 2
30030: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
30035: PPUSH
// result := [ ] ;
30036: LD_ADDR_VAR 0 4
30040: PUSH
30041: EMPTY
30042: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30043: LD_ADDR_VAR 0 5
30047: PUSH
30048: LD_VAR 0 2
30052: PPUSH
30053: LD_INT 21
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PPUSH
30063: CALL_OW 70
30067: ST_TO_ADDR
// if not tmp then
30068: LD_VAR 0 5
30072: NOT
30073: IFFALSE 30077
// exit ;
30075: GO 30141
// if checkLink then
30077: LD_VAR 0 3
30081: IFFALSE 30131
// begin for i in tmp do
30083: LD_ADDR_VAR 0 6
30087: PUSH
30088: LD_VAR 0 5
30092: PUSH
30093: FOR_IN
30094: IFFALSE 30129
// if GetBase ( i ) <> base then
30096: LD_VAR 0 6
30100: PPUSH
30101: CALL_OW 274
30105: PUSH
30106: LD_VAR 0 1
30110: NONEQUAL
30111: IFFALSE 30127
// ComLinkToBase ( base , i ) ;
30113: LD_VAR 0 1
30117: PPUSH
30118: LD_VAR 0 6
30122: PPUSH
30123: CALL_OW 169
30127: GO 30093
30129: POP
30130: POP
// end ; result := tmp ;
30131: LD_ADDR_VAR 0 4
30135: PUSH
30136: LD_VAR 0 5
30140: ST_TO_ADDR
// end ;
30141: LD_VAR 0 4
30145: RET
// export function ComComplete ( units , b ) ; var i ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
// if not units then
30150: LD_VAR 0 1
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 30249
// for i in units do
30159: LD_ADDR_VAR 0 4
30163: PUSH
30164: LD_VAR 0 1
30168: PUSH
30169: FOR_IN
30170: IFFALSE 30247
// if BuildingStatus ( b ) = bs_build then
30172: LD_VAR 0 2
30176: PPUSH
30177: CALL_OW 461
30181: PUSH
30182: LD_INT 1
30184: EQUAL
30185: IFFALSE 30245
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30187: LD_VAR 0 4
30191: PPUSH
30192: LD_STRING h
30194: PUSH
30195: LD_VAR 0 2
30199: PPUSH
30200: CALL_OW 250
30204: PUSH
30205: LD_VAR 0 2
30209: PPUSH
30210: CALL_OW 251
30214: PUSH
30215: LD_VAR 0 2
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: PPUSH
30241: CALL_OW 446
30245: GO 30169
30247: POP
30248: POP
// end ;
30249: LD_VAR 0 3
30253: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30254: LD_INT 0
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30262: LD_VAR 0 1
30266: NOT
30267: PUSH
30268: LD_VAR 0 1
30272: PPUSH
30273: CALL_OW 263
30277: PUSH
30278: LD_INT 2
30280: NONEQUAL
30281: OR
30282: IFFALSE 30286
// exit ;
30284: GO 30602
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30286: LD_ADDR_VAR 0 6
30290: PUSH
30291: LD_INT 22
30293: PUSH
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 255
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 30
30313: PUSH
30314: LD_INT 36
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 34
30323: PUSH
30324: LD_INT 31
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: ST_TO_ADDR
// if not tmp then
30345: LD_VAR 0 6
30349: NOT
30350: IFFALSE 30354
// exit ;
30352: GO 30602
// result := [ ] ;
30354: LD_ADDR_VAR 0 2
30358: PUSH
30359: EMPTY
30360: ST_TO_ADDR
// for i in tmp do
30361: LD_ADDR_VAR 0 3
30365: PUSH
30366: LD_VAR 0 6
30370: PUSH
30371: FOR_IN
30372: IFFALSE 30443
// begin t := UnitsInside ( i ) ;
30374: LD_ADDR_VAR 0 4
30378: PUSH
30379: LD_VAR 0 3
30383: PPUSH
30384: CALL_OW 313
30388: ST_TO_ADDR
// if t then
30389: LD_VAR 0 4
30393: IFFALSE 30441
// for j in t do
30395: LD_ADDR_VAR 0 7
30399: PUSH
30400: LD_VAR 0 4
30404: PUSH
30405: FOR_IN
30406: IFFALSE 30439
// result := Replace ( result , result + 1 , j ) ;
30408: LD_ADDR_VAR 0 2
30412: PUSH
30413: LD_VAR 0 2
30417: PPUSH
30418: LD_VAR 0 2
30422: PUSH
30423: LD_INT 1
30425: PLUS
30426: PPUSH
30427: LD_VAR 0 7
30431: PPUSH
30432: CALL_OW 1
30436: ST_TO_ADDR
30437: GO 30405
30439: POP
30440: POP
// end ;
30441: GO 30371
30443: POP
30444: POP
// if not result then
30445: LD_VAR 0 2
30449: NOT
30450: IFFALSE 30454
// exit ;
30452: GO 30602
// mech := result [ 1 ] ;
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: LD_VAR 0 2
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: ST_TO_ADDR
// if result > 1 then
30468: LD_VAR 0 2
30472: PUSH
30473: LD_INT 1
30475: GREATER
30476: IFFALSE 30588
// begin for i = 2 to result do
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: DOUBLE
30484: LD_INT 2
30486: DEC
30487: ST_TO_ADDR
30488: LD_VAR 0 2
30492: PUSH
30493: FOR_TO
30494: IFFALSE 30586
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30496: LD_ADDR_VAR 0 4
30500: PUSH
30501: LD_VAR 0 2
30505: PUSH
30506: LD_VAR 0 3
30510: ARRAY
30511: PPUSH
30512: LD_INT 3
30514: PPUSH
30515: CALL_OW 259
30519: PUSH
30520: LD_VAR 0 2
30524: PUSH
30525: LD_VAR 0 3
30529: ARRAY
30530: PPUSH
30531: CALL_OW 432
30535: MINUS
30536: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30537: LD_VAR 0 4
30541: PUSH
30542: LD_VAR 0 5
30546: PPUSH
30547: LD_INT 3
30549: PPUSH
30550: CALL_OW 259
30554: PUSH
30555: LD_VAR 0 5
30559: PPUSH
30560: CALL_OW 432
30564: MINUS
30565: GREATEREQUAL
30566: IFFALSE 30584
// mech := result [ i ] ;
30568: LD_ADDR_VAR 0 5
30572: PUSH
30573: LD_VAR 0 2
30577: PUSH
30578: LD_VAR 0 3
30582: ARRAY
30583: ST_TO_ADDR
// end ;
30584: GO 30493
30586: POP
30587: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30588: LD_VAR 0 1
30592: PPUSH
30593: LD_VAR 0 5
30597: PPUSH
30598: CALL_OW 135
// end ;
30602: LD_VAR 0 2
30606: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30607: LD_INT 0
30609: PPUSH
30610: PPUSH
30611: PPUSH
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
// result := [ ] ;
30622: LD_ADDR_VAR 0 7
30626: PUSH
30627: EMPTY
30628: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 266
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: IN
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 32288
// if name then
30654: LD_VAR 0 3
30658: IFFALSE 30674
// SetBName ( base_dep , name ) ;
30660: LD_VAR 0 1
30664: PPUSH
30665: LD_VAR 0 3
30669: PPUSH
30670: CALL_OW 500
// base := GetBase ( base_dep ) ;
30674: LD_ADDR_VAR 0 15
30678: PUSH
30679: LD_VAR 0 1
30683: PPUSH
30684: CALL_OW 274
30688: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30689: LD_ADDR_VAR 0 16
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 255
30703: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30704: LD_ADDR_VAR 0 17
30708: PUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 248
30718: ST_TO_ADDR
// if sources then
30719: LD_VAR 0 5
30723: IFFALSE 30770
// for i = 1 to 3 do
30725: LD_ADDR_VAR 0 8
30729: PUSH
30730: DOUBLE
30731: LD_INT 1
30733: DEC
30734: ST_TO_ADDR
30735: LD_INT 3
30737: PUSH
30738: FOR_TO
30739: IFFALSE 30768
// AddResourceType ( base , i , sources [ i ] ) ;
30741: LD_VAR 0 15
30745: PPUSH
30746: LD_VAR 0 8
30750: PPUSH
30751: LD_VAR 0 5
30755: PUSH
30756: LD_VAR 0 8
30760: ARRAY
30761: PPUSH
30762: CALL_OW 276
30766: GO 30738
30768: POP
30769: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30770: LD_ADDR_VAR 0 18
30774: PUSH
30775: LD_VAR 0 15
30779: PPUSH
30780: LD_VAR 0 2
30784: PPUSH
30785: LD_INT 1
30787: PPUSH
30788: CALL 30031 0 3
30792: ST_TO_ADDR
// InitHc ;
30793: CALL_OW 19
// InitUc ;
30797: CALL_OW 18
// uc_side := side ;
30801: LD_ADDR_OWVAR 20
30805: PUSH
30806: LD_VAR 0 16
30810: ST_TO_ADDR
// uc_nation := nation ;
30811: LD_ADDR_OWVAR 21
30815: PUSH
30816: LD_VAR 0 17
30820: ST_TO_ADDR
// if buildings then
30821: LD_VAR 0 18
30825: IFFALSE 32147
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30827: LD_ADDR_VAR 0 19
30831: PUSH
30832: LD_VAR 0 18
30836: PPUSH
30837: LD_INT 2
30839: PUSH
30840: LD_INT 30
30842: PUSH
30843: LD_INT 29
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 30
30852: PUSH
30853: LD_INT 30
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: PPUSH
30865: CALL_OW 72
30869: ST_TO_ADDR
// if tmp then
30870: LD_VAR 0 19
30874: IFFALSE 30922
// for i in tmp do
30876: LD_ADDR_VAR 0 8
30880: PUSH
30881: LD_VAR 0 19
30885: PUSH
30886: FOR_IN
30887: IFFALSE 30920
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30889: LD_VAR 0 8
30893: PPUSH
30894: CALL_OW 250
30898: PPUSH
30899: LD_VAR 0 8
30903: PPUSH
30904: CALL_OW 251
30908: PPUSH
30909: LD_VAR 0 16
30913: PPUSH
30914: CALL_OW 441
30918: GO 30886
30920: POP
30921: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30922: LD_VAR 0 18
30926: PPUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 32
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 33
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: PPUSH
30955: CALL_OW 72
30959: IFFALSE 31047
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30961: LD_ADDR_VAR 0 8
30965: PUSH
30966: LD_VAR 0 18
30970: PPUSH
30971: LD_INT 2
30973: PUSH
30974: LD_INT 30
30976: PUSH
30977: LD_INT 32
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 33
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL_OW 72
31003: PUSH
31004: FOR_IN
31005: IFFALSE 31045
// begin if not GetBWeapon ( i ) then
31007: LD_VAR 0 8
31011: PPUSH
31012: CALL_OW 269
31016: NOT
31017: IFFALSE 31043
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31019: LD_VAR 0 8
31023: PPUSH
31024: LD_VAR 0 8
31028: PPUSH
31029: LD_VAR 0 2
31033: PPUSH
31034: CALL 32293 0 2
31038: PPUSH
31039: CALL_OW 431
// end ;
31043: GO 31004
31045: POP
31046: POP
// end ; for i = 1 to personel do
31047: LD_ADDR_VAR 0 8
31051: PUSH
31052: DOUBLE
31053: LD_INT 1
31055: DEC
31056: ST_TO_ADDR
31057: LD_VAR 0 6
31061: PUSH
31062: FOR_TO
31063: IFFALSE 32127
// begin if i > 4 then
31065: LD_VAR 0 8
31069: PUSH
31070: LD_INT 4
31072: GREATER
31073: IFFALSE 31077
// break ;
31075: GO 32127
// case i of 1 :
31077: LD_VAR 0 8
31081: PUSH
31082: LD_INT 1
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31170
31090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31091: LD_ADDR_VAR 0 12
31095: PUSH
31096: LD_VAR 0 18
31100: PPUSH
31101: LD_INT 22
31103: PUSH
31104: LD_VAR 0 16
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 58
31115: PUSH
31116: EMPTY
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 30
31124: PUSH
31125: LD_INT 32
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 30
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 30
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: PPUSH
31163: CALL_OW 72
31167: ST_TO_ADDR
31168: GO 31392
31170: LD_INT 2
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31240
31178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31179: LD_ADDR_VAR 0 12
31183: PUSH
31184: LD_VAR 0 18
31188: PPUSH
31189: LD_INT 22
31191: PUSH
31192: LD_VAR 0 16
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: LD_INT 30
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PPUSH
31233: CALL_OW 72
31237: ST_TO_ADDR
31238: GO 31392
31240: LD_INT 3
31242: DOUBLE
31243: EQUAL
31244: IFTRUE 31248
31246: GO 31310
31248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31249: LD_ADDR_VAR 0 12
31253: PUSH
31254: LD_VAR 0 18
31258: PPUSH
31259: LD_INT 22
31261: PUSH
31262: LD_VAR 0 16
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 72
31307: ST_TO_ADDR
31308: GO 31392
31310: LD_INT 4
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31391
31318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31319: LD_ADDR_VAR 0 12
31323: PUSH
31324: LD_VAR 0 18
31328: PPUSH
31329: LD_INT 22
31331: PUSH
31332: LD_VAR 0 16
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 30
31346: PUSH
31347: LD_INT 6
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 30
31356: PUSH
31357: LD_INT 7
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 30
31366: PUSH
31367: LD_INT 8
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PPUSH
31384: CALL_OW 72
31388: ST_TO_ADDR
31389: GO 31392
31391: POP
// if i = 1 then
31392: LD_VAR 0 8
31396: PUSH
31397: LD_INT 1
31399: EQUAL
31400: IFFALSE 31511
// begin tmp := [ ] ;
31402: LD_ADDR_VAR 0 19
31406: PUSH
31407: EMPTY
31408: ST_TO_ADDR
// for j in f do
31409: LD_ADDR_VAR 0 9
31413: PUSH
31414: LD_VAR 0 12
31418: PUSH
31419: FOR_IN
31420: IFFALSE 31493
// if GetBType ( j ) = b_bunker then
31422: LD_VAR 0 9
31426: PPUSH
31427: CALL_OW 266
31431: PUSH
31432: LD_INT 32
31434: EQUAL
31435: IFFALSE 31462
// tmp := Insert ( tmp , 1 , j ) else
31437: LD_ADDR_VAR 0 19
31441: PUSH
31442: LD_VAR 0 19
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: LD_VAR 0 9
31454: PPUSH
31455: CALL_OW 2
31459: ST_TO_ADDR
31460: GO 31491
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31462: LD_ADDR_VAR 0 19
31466: PUSH
31467: LD_VAR 0 19
31471: PPUSH
31472: LD_VAR 0 19
31476: PUSH
31477: LD_INT 1
31479: PLUS
31480: PPUSH
31481: LD_VAR 0 9
31485: PPUSH
31486: CALL_OW 2
31490: ST_TO_ADDR
31491: GO 31419
31493: POP
31494: POP
// if tmp then
31495: LD_VAR 0 19
31499: IFFALSE 31511
// f := tmp ;
31501: LD_ADDR_VAR 0 12
31505: PUSH
31506: LD_VAR 0 19
31510: ST_TO_ADDR
// end ; x := personel [ i ] ;
31511: LD_ADDR_VAR 0 13
31515: PUSH
31516: LD_VAR 0 6
31520: PUSH
31521: LD_VAR 0 8
31525: ARRAY
31526: ST_TO_ADDR
// if x = - 1 then
31527: LD_VAR 0 13
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: EQUAL
31536: IFFALSE 31745
// begin for j in f do
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_VAR 0 12
31547: PUSH
31548: FOR_IN
31549: IFFALSE 31741
// repeat InitHc ;
31551: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31555: LD_VAR 0 9
31559: PPUSH
31560: CALL_OW 266
31564: PUSH
31565: LD_INT 5
31567: EQUAL
31568: IFFALSE 31638
// begin if UnitsInside ( j ) < 3 then
31570: LD_VAR 0 9
31574: PPUSH
31575: CALL_OW 313
31579: PUSH
31580: LD_INT 3
31582: LESS
31583: IFFALSE 31619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31585: LD_INT 0
31587: PPUSH
31588: LD_INT 5
31590: PUSH
31591: LD_INT 8
31593: PUSH
31594: LD_INT 9
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: LD_VAR 0 17
31606: ARRAY
31607: PPUSH
31608: LD_VAR 0 4
31612: PPUSH
31613: CALL_OW 380
31617: GO 31636
// PrepareHuman ( false , i , skill ) ;
31619: LD_INT 0
31621: PPUSH
31622: LD_VAR 0 8
31626: PPUSH
31627: LD_VAR 0 4
31631: PPUSH
31632: CALL_OW 380
// end else
31636: GO 31655
// PrepareHuman ( false , i , skill ) ;
31638: LD_INT 0
31640: PPUSH
31641: LD_VAR 0 8
31645: PPUSH
31646: LD_VAR 0 4
31650: PPUSH
31651: CALL_OW 380
// un := CreateHuman ;
31655: LD_ADDR_VAR 0 14
31659: PUSH
31660: CALL_OW 44
31664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31665: LD_ADDR_VAR 0 7
31669: PUSH
31670: LD_VAR 0 7
31674: PPUSH
31675: LD_INT 1
31677: PPUSH
31678: LD_VAR 0 14
31682: PPUSH
31683: CALL_OW 2
31687: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31688: LD_VAR 0 14
31692: PPUSH
31693: LD_VAR 0 9
31697: PPUSH
31698: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31702: LD_VAR 0 9
31706: PPUSH
31707: CALL_OW 313
31711: PUSH
31712: LD_INT 6
31714: EQUAL
31715: PUSH
31716: LD_VAR 0 9
31720: PPUSH
31721: CALL_OW 266
31725: PUSH
31726: LD_INT 32
31728: PUSH
31729: LD_INT 31
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: IN
31736: OR
31737: IFFALSE 31551
31739: GO 31548
31741: POP
31742: POP
// end else
31743: GO 32125
// for j = 1 to x do
31745: LD_ADDR_VAR 0 9
31749: PUSH
31750: DOUBLE
31751: LD_INT 1
31753: DEC
31754: ST_TO_ADDR
31755: LD_VAR 0 13
31759: PUSH
31760: FOR_TO
31761: IFFALSE 32123
// begin InitHc ;
31763: CALL_OW 19
// if not f then
31767: LD_VAR 0 12
31771: NOT
31772: IFFALSE 31861
// begin PrepareHuman ( false , i , skill ) ;
31774: LD_INT 0
31776: PPUSH
31777: LD_VAR 0 8
31781: PPUSH
31782: LD_VAR 0 4
31786: PPUSH
31787: CALL_OW 380
// un := CreateHuman ;
31791: LD_ADDR_VAR 0 14
31795: PUSH
31796: CALL_OW 44
31800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31801: LD_ADDR_VAR 0 7
31805: PUSH
31806: LD_VAR 0 7
31810: PPUSH
31811: LD_INT 1
31813: PPUSH
31814: LD_VAR 0 14
31818: PPUSH
31819: CALL_OW 2
31823: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31824: LD_VAR 0 14
31828: PPUSH
31829: LD_VAR 0 1
31833: PPUSH
31834: CALL_OW 250
31838: PPUSH
31839: LD_VAR 0 1
31843: PPUSH
31844: CALL_OW 251
31848: PPUSH
31849: LD_INT 10
31851: PPUSH
31852: LD_INT 0
31854: PPUSH
31855: CALL_OW 50
// continue ;
31859: GO 31760
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31861: LD_VAR 0 12
31865: PUSH
31866: LD_INT 1
31868: ARRAY
31869: PPUSH
31870: CALL_OW 313
31874: PUSH
31875: LD_VAR 0 12
31879: PUSH
31880: LD_INT 1
31882: ARRAY
31883: PPUSH
31884: CALL_OW 266
31888: PUSH
31889: LD_INT 32
31891: PUSH
31892: LD_INT 31
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: IN
31899: AND
31900: PUSH
31901: LD_VAR 0 12
31905: PUSH
31906: LD_INT 1
31908: ARRAY
31909: PPUSH
31910: CALL_OW 313
31914: PUSH
31915: LD_INT 6
31917: EQUAL
31918: OR
31919: IFFALSE 31939
// f := Delete ( f , 1 ) ;
31921: LD_ADDR_VAR 0 12
31925: PUSH
31926: LD_VAR 0 12
31930: PPUSH
31931: LD_INT 1
31933: PPUSH
31934: CALL_OW 3
31938: ST_TO_ADDR
// if not f then
31939: LD_VAR 0 12
31943: NOT
31944: IFFALSE 31962
// begin x := x + 2 ;
31946: LD_ADDR_VAR 0 13
31950: PUSH
31951: LD_VAR 0 13
31955: PUSH
31956: LD_INT 2
31958: PLUS
31959: ST_TO_ADDR
// continue ;
31960: GO 31760
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31962: LD_VAR 0 12
31966: PUSH
31967: LD_INT 1
31969: ARRAY
31970: PPUSH
31971: CALL_OW 266
31975: PUSH
31976: LD_INT 5
31978: EQUAL
31979: IFFALSE 32053
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31981: LD_VAR 0 12
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PPUSH
31990: CALL_OW 313
31994: PUSH
31995: LD_INT 3
31997: LESS
31998: IFFALSE 32034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32000: LD_INT 0
32002: PPUSH
32003: LD_INT 5
32005: PUSH
32006: LD_INT 8
32008: PUSH
32009: LD_INT 9
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: PUSH
32017: LD_VAR 0 17
32021: ARRAY
32022: PPUSH
32023: LD_VAR 0 4
32027: PPUSH
32028: CALL_OW 380
32032: GO 32051
// PrepareHuman ( false , i , skill ) ;
32034: LD_INT 0
32036: PPUSH
32037: LD_VAR 0 8
32041: PPUSH
32042: LD_VAR 0 4
32046: PPUSH
32047: CALL_OW 380
// end else
32051: GO 32070
// PrepareHuman ( false , i , skill ) ;
32053: LD_INT 0
32055: PPUSH
32056: LD_VAR 0 8
32060: PPUSH
32061: LD_VAR 0 4
32065: PPUSH
32066: CALL_OW 380
// un := CreateHuman ;
32070: LD_ADDR_VAR 0 14
32074: PUSH
32075: CALL_OW 44
32079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32080: LD_ADDR_VAR 0 7
32084: PUSH
32085: LD_VAR 0 7
32089: PPUSH
32090: LD_INT 1
32092: PPUSH
32093: LD_VAR 0 14
32097: PPUSH
32098: CALL_OW 2
32102: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32103: LD_VAR 0 14
32107: PPUSH
32108: LD_VAR 0 12
32112: PUSH
32113: LD_INT 1
32115: ARRAY
32116: PPUSH
32117: CALL_OW 52
// end ;
32121: GO 31760
32123: POP
32124: POP
// end ;
32125: GO 31062
32127: POP
32128: POP
// result := result ^ buildings ;
32129: LD_ADDR_VAR 0 7
32133: PUSH
32134: LD_VAR 0 7
32138: PUSH
32139: LD_VAR 0 18
32143: ADD
32144: ST_TO_ADDR
// end else
32145: GO 32288
// begin for i = 1 to personel do
32147: LD_ADDR_VAR 0 8
32151: PUSH
32152: DOUBLE
32153: LD_INT 1
32155: DEC
32156: ST_TO_ADDR
32157: LD_VAR 0 6
32161: PUSH
32162: FOR_TO
32163: IFFALSE 32286
// begin if i > 4 then
32165: LD_VAR 0 8
32169: PUSH
32170: LD_INT 4
32172: GREATER
32173: IFFALSE 32177
// break ;
32175: GO 32286
// x := personel [ i ] ;
32177: LD_ADDR_VAR 0 13
32181: PUSH
32182: LD_VAR 0 6
32186: PUSH
32187: LD_VAR 0 8
32191: ARRAY
32192: ST_TO_ADDR
// if x = - 1 then
32193: LD_VAR 0 13
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: EQUAL
32202: IFFALSE 32206
// continue ;
32204: GO 32162
// PrepareHuman ( false , i , skill ) ;
32206: LD_INT 0
32208: PPUSH
32209: LD_VAR 0 8
32213: PPUSH
32214: LD_VAR 0 4
32218: PPUSH
32219: CALL_OW 380
// un := CreateHuman ;
32223: LD_ADDR_VAR 0 14
32227: PUSH
32228: CALL_OW 44
32232: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32233: LD_VAR 0 14
32237: PPUSH
32238: LD_VAR 0 1
32242: PPUSH
32243: CALL_OW 250
32247: PPUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 251
32257: PPUSH
32258: LD_INT 10
32260: PPUSH
32261: LD_INT 0
32263: PPUSH
32264: CALL_OW 50
// result := result ^ un ;
32268: LD_ADDR_VAR 0 7
32272: PUSH
32273: LD_VAR 0 7
32277: PUSH
32278: LD_VAR 0 14
32282: ADD
32283: ST_TO_ADDR
// end ;
32284: GO 32162
32286: POP
32287: POP
// end ; end ;
32288: LD_VAR 0 7
32292: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32293: LD_INT 0
32295: PPUSH
32296: PPUSH
32297: PPUSH
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
// result := false ;
32311: LD_ADDR_VAR 0 3
32315: PUSH
32316: LD_INT 0
32318: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32319: LD_VAR 0 1
32323: NOT
32324: PUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 266
32334: PUSH
32335: LD_INT 32
32337: PUSH
32338: LD_INT 33
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: IN
32345: NOT
32346: OR
32347: IFFALSE 32351
// exit ;
32349: GO 33460
// nat := GetNation ( tower ) ;
32351: LD_ADDR_VAR 0 12
32355: PUSH
32356: LD_VAR 0 1
32360: PPUSH
32361: CALL_OW 248
32365: ST_TO_ADDR
// side := GetSide ( tower ) ;
32366: LD_ADDR_VAR 0 16
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 255
32380: ST_TO_ADDR
// x := GetX ( tower ) ;
32381: LD_ADDR_VAR 0 10
32385: PUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 250
32395: ST_TO_ADDR
// y := GetY ( tower ) ;
32396: LD_ADDR_VAR 0 11
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 251
32410: ST_TO_ADDR
// if not x or not y then
32411: LD_VAR 0 10
32415: NOT
32416: PUSH
32417: LD_VAR 0 11
32421: NOT
32422: OR
32423: IFFALSE 32427
// exit ;
32425: GO 33460
// weapon := 0 ;
32427: LD_ADDR_VAR 0 18
32431: PUSH
32432: LD_INT 0
32434: ST_TO_ADDR
// fac_list := [ ] ;
32435: LD_ADDR_VAR 0 17
32439: PUSH
32440: EMPTY
32441: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32442: LD_ADDR_VAR 0 6
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 274
32456: PPUSH
32457: LD_VAR 0 2
32461: PPUSH
32462: LD_INT 0
32464: PPUSH
32465: CALL 30031 0 3
32469: PPUSH
32470: LD_INT 30
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 72
32484: ST_TO_ADDR
// if not factories then
32485: LD_VAR 0 6
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 33460
// for i in factories do
32494: LD_ADDR_VAR 0 8
32498: PUSH
32499: LD_VAR 0 6
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32530
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32507: LD_ADDR_VAR 0 17
32511: PUSH
32512: LD_VAR 0 17
32516: PUSH
32517: LD_VAR 0 8
32521: PPUSH
32522: CALL_OW 478
32526: UNION
32527: ST_TO_ADDR
32528: GO 32504
32530: POP
32531: POP
// if not fac_list then
32532: LD_VAR 0 17
32536: NOT
32537: IFFALSE 32541
// exit ;
32539: GO 33460
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32541: LD_ADDR_VAR 0 5
32545: PUSH
32546: LD_INT 4
32548: PUSH
32549: LD_INT 5
32551: PUSH
32552: LD_INT 9
32554: PUSH
32555: LD_INT 10
32557: PUSH
32558: LD_INT 6
32560: PUSH
32561: LD_INT 7
32563: PUSH
32564: LD_INT 11
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 27
32578: PUSH
32579: LD_INT 28
32581: PUSH
32582: LD_INT 26
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 43
32596: PUSH
32597: LD_INT 44
32599: PUSH
32600: LD_INT 46
32602: PUSH
32603: LD_INT 45
32605: PUSH
32606: LD_INT 47
32608: PUSH
32609: LD_INT 49
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: PUSH
32625: LD_VAR 0 12
32629: ARRAY
32630: ST_TO_ADDR
// list := list isect fac_list ;
32631: LD_ADDR_VAR 0 5
32635: PUSH
32636: LD_VAR 0 5
32640: PUSH
32641: LD_VAR 0 17
32645: ISECT
32646: ST_TO_ADDR
// if not list then
32647: LD_VAR 0 5
32651: NOT
32652: IFFALSE 32656
// exit ;
32654: GO 33460
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32656: LD_VAR 0 12
32660: PUSH
32661: LD_INT 3
32663: EQUAL
32664: PUSH
32665: LD_INT 49
32667: PUSH
32668: LD_VAR 0 5
32672: IN
32673: AND
32674: PUSH
32675: LD_INT 31
32677: PPUSH
32678: LD_VAR 0 16
32682: PPUSH
32683: CALL_OW 321
32687: PUSH
32688: LD_INT 2
32690: EQUAL
32691: AND
32692: IFFALSE 32752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32694: LD_INT 22
32696: PUSH
32697: LD_VAR 0 16
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 35
32708: PUSH
32709: LD_INT 49
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 91
32718: PUSH
32719: LD_VAR 0 1
32723: PUSH
32724: LD_INT 10
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: PPUSH
32737: CALL_OW 69
32741: NOT
32742: IFFALSE 32752
// weapon := ru_time_lapser ;
32744: LD_ADDR_VAR 0 18
32748: PUSH
32749: LD_INT 49
32751: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32752: LD_VAR 0 12
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: IN
32767: PUSH
32768: LD_INT 11
32770: PUSH
32771: LD_VAR 0 5
32775: IN
32776: PUSH
32777: LD_INT 30
32779: PUSH
32780: LD_VAR 0 5
32784: IN
32785: OR
32786: AND
32787: PUSH
32788: LD_INT 6
32790: PPUSH
32791: LD_VAR 0 16
32795: PPUSH
32796: CALL_OW 321
32800: PUSH
32801: LD_INT 2
32803: EQUAL
32804: AND
32805: IFFALSE 32970
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32807: LD_INT 22
32809: PUSH
32810: LD_VAR 0 16
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 35
32824: PUSH
32825: LD_INT 11
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 35
32834: PUSH
32835: LD_INT 30
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 91
32849: PUSH
32850: LD_VAR 0 1
32854: PUSH
32855: LD_INT 18
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: PPUSH
32868: CALL_OW 69
32872: NOT
32873: PUSH
32874: LD_INT 22
32876: PUSH
32877: LD_VAR 0 16
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 30
32891: PUSH
32892: LD_INT 32
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 30
32901: PUSH
32902: LD_INT 33
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 91
32916: PUSH
32917: LD_VAR 0 1
32921: PUSH
32922: LD_INT 12
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: PUSH
32935: EMPTY
32936: LIST
32937: PPUSH
32938: CALL_OW 69
32942: PUSH
32943: LD_INT 2
32945: GREATER
32946: AND
32947: IFFALSE 32970
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32949: LD_ADDR_VAR 0 18
32953: PUSH
32954: LD_INT 11
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_VAR 0 12
32968: ARRAY
32969: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32970: LD_VAR 0 18
32974: NOT
32975: PUSH
32976: LD_INT 40
32978: PPUSH
32979: LD_VAR 0 16
32983: PPUSH
32984: CALL_OW 321
32988: PUSH
32989: LD_INT 2
32991: EQUAL
32992: AND
32993: PUSH
32994: LD_INT 7
32996: PUSH
32997: LD_VAR 0 5
33001: IN
33002: PUSH
33003: LD_INT 28
33005: PUSH
33006: LD_VAR 0 5
33010: IN
33011: OR
33012: PUSH
33013: LD_INT 45
33015: PUSH
33016: LD_VAR 0 5
33020: IN
33021: OR
33022: AND
33023: IFFALSE 33277
// begin hex := GetHexInfo ( x , y ) ;
33025: LD_ADDR_VAR 0 4
33029: PUSH
33030: LD_VAR 0 10
33034: PPUSH
33035: LD_VAR 0 11
33039: PPUSH
33040: CALL_OW 546
33044: ST_TO_ADDR
// if hex [ 1 ] then
33045: LD_VAR 0 4
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: IFFALSE 33057
// exit ;
33055: GO 33460
// height := hex [ 2 ] ;
33057: LD_ADDR_VAR 0 15
33061: PUSH
33062: LD_VAR 0 4
33066: PUSH
33067: LD_INT 2
33069: ARRAY
33070: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33071: LD_ADDR_VAR 0 14
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
// for i in tmp do
33094: LD_ADDR_VAR 0 8
33098: PUSH
33099: LD_VAR 0 14
33103: PUSH
33104: FOR_IN
33105: IFFALSE 33275
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33107: LD_ADDR_VAR 0 9
33111: PUSH
33112: LD_VAR 0 10
33116: PPUSH
33117: LD_VAR 0 8
33121: PPUSH
33122: LD_INT 5
33124: PPUSH
33125: CALL_OW 272
33129: PUSH
33130: LD_VAR 0 11
33134: PPUSH
33135: LD_VAR 0 8
33139: PPUSH
33140: LD_INT 5
33142: PPUSH
33143: CALL_OW 273
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33152: LD_VAR 0 9
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: PPUSH
33161: LD_VAR 0 9
33165: PUSH
33166: LD_INT 2
33168: ARRAY
33169: PPUSH
33170: CALL_OW 488
33174: IFFALSE 33273
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33176: LD_ADDR_VAR 0 4
33180: PUSH
33181: LD_VAR 0 9
33185: PUSH
33186: LD_INT 1
33188: ARRAY
33189: PPUSH
33190: LD_VAR 0 9
33194: PUSH
33195: LD_INT 2
33197: ARRAY
33198: PPUSH
33199: CALL_OW 546
33203: ST_TO_ADDR
// if hex [ 1 ] then
33204: LD_VAR 0 4
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: IFFALSE 33216
// continue ;
33214: GO 33104
// h := hex [ 2 ] ;
33216: LD_ADDR_VAR 0 13
33220: PUSH
33221: LD_VAR 0 4
33225: PUSH
33226: LD_INT 2
33228: ARRAY
33229: ST_TO_ADDR
// if h + 7 < height then
33230: LD_VAR 0 13
33234: PUSH
33235: LD_INT 7
33237: PLUS
33238: PUSH
33239: LD_VAR 0 15
33243: LESS
33244: IFFALSE 33273
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33246: LD_ADDR_VAR 0 18
33250: PUSH
33251: LD_INT 7
33253: PUSH
33254: LD_INT 28
33256: PUSH
33257: LD_INT 45
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PUSH
33265: LD_VAR 0 12
33269: ARRAY
33270: ST_TO_ADDR
// break ;
33271: GO 33275
// end ; end ; end ;
33273: GO 33104
33275: POP
33276: POP
// end ; if not weapon then
33277: LD_VAR 0 18
33281: NOT
33282: IFFALSE 33342
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33284: LD_ADDR_VAR 0 5
33288: PUSH
33289: LD_VAR 0 5
33293: PUSH
33294: LD_INT 11
33296: PUSH
33297: LD_INT 30
33299: PUSH
33300: LD_INT 49
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: DIFF
33308: ST_TO_ADDR
// if not list then
33309: LD_VAR 0 5
33313: NOT
33314: IFFALSE 33318
// exit ;
33316: GO 33460
// weapon := list [ rand ( 1 , list ) ] ;
33318: LD_ADDR_VAR 0 18
33322: PUSH
33323: LD_VAR 0 5
33327: PUSH
33328: LD_INT 1
33330: PPUSH
33331: LD_VAR 0 5
33335: PPUSH
33336: CALL_OW 12
33340: ARRAY
33341: ST_TO_ADDR
// end ; if weapon then
33342: LD_VAR 0 18
33346: IFFALSE 33460
// begin tmp := CostOfWeapon ( weapon ) ;
33348: LD_ADDR_VAR 0 14
33352: PUSH
33353: LD_VAR 0 18
33357: PPUSH
33358: CALL_OW 451
33362: ST_TO_ADDR
// j := GetBase ( tower ) ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 274
33377: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33378: LD_VAR 0 9
33382: PPUSH
33383: LD_INT 1
33385: PPUSH
33386: CALL_OW 275
33390: PUSH
33391: LD_VAR 0 14
33395: PUSH
33396: LD_INT 1
33398: ARRAY
33399: GREATEREQUAL
33400: PUSH
33401: LD_VAR 0 9
33405: PPUSH
33406: LD_INT 2
33408: PPUSH
33409: CALL_OW 275
33413: PUSH
33414: LD_VAR 0 14
33418: PUSH
33419: LD_INT 2
33421: ARRAY
33422: GREATEREQUAL
33423: AND
33424: PUSH
33425: LD_VAR 0 9
33429: PPUSH
33430: LD_INT 3
33432: PPUSH
33433: CALL_OW 275
33437: PUSH
33438: LD_VAR 0 14
33442: PUSH
33443: LD_INT 3
33445: ARRAY
33446: GREATEREQUAL
33447: AND
33448: IFFALSE 33460
// result := weapon ;
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_VAR 0 18
33459: ST_TO_ADDR
// end ; end ;
33460: LD_VAR 0 3
33464: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33465: LD_INT 0
33467: PPUSH
33468: PPUSH
// result := true ;
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 1
33476: ST_TO_ADDR
// if array1 = array2 then
33477: LD_VAR 0 1
33481: PUSH
33482: LD_VAR 0 2
33486: EQUAL
33487: IFFALSE 33547
// begin for i = 1 to array1 do
33489: LD_ADDR_VAR 0 4
33493: PUSH
33494: DOUBLE
33495: LD_INT 1
33497: DEC
33498: ST_TO_ADDR
33499: LD_VAR 0 1
33503: PUSH
33504: FOR_TO
33505: IFFALSE 33543
// if array1 [ i ] <> array2 [ i ] then
33507: LD_VAR 0 1
33511: PUSH
33512: LD_VAR 0 4
33516: ARRAY
33517: PUSH
33518: LD_VAR 0 2
33522: PUSH
33523: LD_VAR 0 4
33527: ARRAY
33528: NONEQUAL
33529: IFFALSE 33541
// begin result := false ;
33531: LD_ADDR_VAR 0 3
33535: PUSH
33536: LD_INT 0
33538: ST_TO_ADDR
// break ;
33539: GO 33543
// end ;
33541: GO 33504
33543: POP
33544: POP
// end else
33545: GO 33555
// result := false ;
33547: LD_ADDR_VAR 0 3
33551: PUSH
33552: LD_INT 0
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 3
33559: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33560: LD_INT 0
33562: PPUSH
33563: PPUSH
// if not array1 or not array2 then
33564: LD_VAR 0 1
33568: NOT
33569: PUSH
33570: LD_VAR 0 2
33574: NOT
33575: OR
33576: IFFALSE 33580
// exit ;
33578: GO 33644
// result := true ;
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 1
33587: ST_TO_ADDR
// for i = 1 to array1 do
33588: LD_ADDR_VAR 0 4
33592: PUSH
33593: DOUBLE
33594: LD_INT 1
33596: DEC
33597: ST_TO_ADDR
33598: LD_VAR 0 1
33602: PUSH
33603: FOR_TO
33604: IFFALSE 33642
// if array1 [ i ] <> array2 [ i ] then
33606: LD_VAR 0 1
33610: PUSH
33611: LD_VAR 0 4
33615: ARRAY
33616: PUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_VAR 0 4
33626: ARRAY
33627: NONEQUAL
33628: IFFALSE 33640
// begin result := false ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 0
33637: ST_TO_ADDR
// break ;
33638: GO 33642
// end ;
33640: GO 33603
33642: POP
33643: POP
// end ;
33644: LD_VAR 0 3
33648: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33649: LD_INT 0
33651: PPUSH
33652: PPUSH
33653: PPUSH
// pom := GetBase ( fac ) ;
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 274
33668: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: LD_VAR 0 2
33678: PUSH
33679: LD_INT 1
33681: ARRAY
33682: PPUSH
33683: LD_VAR 0 2
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: PPUSH
33692: LD_VAR 0 2
33696: PUSH
33697: LD_INT 3
33699: ARRAY
33700: PPUSH
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 4
33708: ARRAY
33709: PPUSH
33710: CALL_OW 449
33714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_VAR 0 5
33724: PPUSH
33725: LD_INT 1
33727: PPUSH
33728: CALL_OW 275
33732: PUSH
33733: LD_VAR 0 4
33737: PUSH
33738: LD_INT 1
33740: ARRAY
33741: GREATEREQUAL
33742: PUSH
33743: LD_VAR 0 5
33747: PPUSH
33748: LD_INT 2
33750: PPUSH
33751: CALL_OW 275
33755: PUSH
33756: LD_VAR 0 4
33760: PUSH
33761: LD_INT 2
33763: ARRAY
33764: GREATEREQUAL
33765: AND
33766: PUSH
33767: LD_VAR 0 5
33771: PPUSH
33772: LD_INT 3
33774: PPUSH
33775: CALL_OW 275
33779: PUSH
33780: LD_VAR 0 4
33784: PUSH
33785: LD_INT 3
33787: ARRAY
33788: GREATEREQUAL
33789: AND
33790: ST_TO_ADDR
// end ;
33791: LD_VAR 0 3
33795: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
// pom := GetBase ( building ) ;
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 274
33816: ST_TO_ADDR
// if not pom then
33817: LD_VAR 0 3
33821: NOT
33822: IFFALSE 33826
// exit ;
33824: GO 33996
// btype := GetBType ( building ) ;
33826: LD_ADDR_VAR 0 5
33830: PUSH
33831: LD_VAR 0 1
33835: PPUSH
33836: CALL_OW 266
33840: ST_TO_ADDR
// if btype = b_armoury then
33841: LD_VAR 0 5
33845: PUSH
33846: LD_INT 4
33848: EQUAL
33849: IFFALSE 33859
// btype := b_barracks ;
33851: LD_ADDR_VAR 0 5
33855: PUSH
33856: LD_INT 5
33858: ST_TO_ADDR
// if btype = b_depot then
33859: LD_VAR 0 5
33863: PUSH
33864: LD_INT 0
33866: EQUAL
33867: IFFALSE 33877
// btype := b_warehouse ;
33869: LD_ADDR_VAR 0 5
33873: PUSH
33874: LD_INT 1
33876: ST_TO_ADDR
// if btype = b_workshop then
33877: LD_VAR 0 5
33881: PUSH
33882: LD_INT 2
33884: EQUAL
33885: IFFALSE 33895
// btype := b_factory ;
33887: LD_ADDR_VAR 0 5
33891: PUSH
33892: LD_INT 3
33894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33895: LD_ADDR_VAR 0 4
33899: PUSH
33900: LD_VAR 0 5
33904: PPUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 248
33914: PPUSH
33915: CALL_OW 450
33919: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_VAR 0 3
33929: PPUSH
33930: LD_INT 1
33932: PPUSH
33933: CALL_OW 275
33937: PUSH
33938: LD_VAR 0 4
33942: PUSH
33943: LD_INT 1
33945: ARRAY
33946: GREATEREQUAL
33947: PUSH
33948: LD_VAR 0 3
33952: PPUSH
33953: LD_INT 2
33955: PPUSH
33956: CALL_OW 275
33960: PUSH
33961: LD_VAR 0 4
33965: PUSH
33966: LD_INT 2
33968: ARRAY
33969: GREATEREQUAL
33970: AND
33971: PUSH
33972: LD_VAR 0 3
33976: PPUSH
33977: LD_INT 3
33979: PPUSH
33980: CALL_OW 275
33984: PUSH
33985: LD_VAR 0 4
33989: PUSH
33990: LD_INT 3
33992: ARRAY
33993: GREATEREQUAL
33994: AND
33995: ST_TO_ADDR
// end ;
33996: LD_VAR 0 2
34000: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34001: LD_INT 0
34003: PPUSH
34004: PPUSH
34005: PPUSH
// pom := GetBase ( building ) ;
34006: LD_ADDR_VAR 0 4
34010: PUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 274
34020: ST_TO_ADDR
// if not pom then
34021: LD_VAR 0 4
34025: NOT
34026: IFFALSE 34030
// exit ;
34028: GO 34131
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34030: LD_ADDR_VAR 0 5
34034: PUSH
34035: LD_VAR 0 2
34039: PPUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 248
34049: PPUSH
34050: CALL_OW 450
34054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: LD_VAR 0 4
34064: PPUSH
34065: LD_INT 1
34067: PPUSH
34068: CALL_OW 275
34072: PUSH
34073: LD_VAR 0 5
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: GREATEREQUAL
34082: PUSH
34083: LD_VAR 0 4
34087: PPUSH
34088: LD_INT 2
34090: PPUSH
34091: CALL_OW 275
34095: PUSH
34096: LD_VAR 0 5
34100: PUSH
34101: LD_INT 2
34103: ARRAY
34104: GREATEREQUAL
34105: AND
34106: PUSH
34107: LD_VAR 0 4
34111: PPUSH
34112: LD_INT 3
34114: PPUSH
34115: CALL_OW 275
34119: PUSH
34120: LD_VAR 0 5
34124: PUSH
34125: LD_INT 3
34127: ARRAY
34128: GREATEREQUAL
34129: AND
34130: ST_TO_ADDR
// end ;
34131: LD_VAR 0 3
34135: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34136: LD_INT 0
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
// result := false ;
34149: LD_ADDR_VAR 0 8
34153: PUSH
34154: LD_INT 0
34156: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34157: LD_VAR 0 5
34161: NOT
34162: PUSH
34163: LD_VAR 0 1
34167: NOT
34168: OR
34169: PUSH
34170: LD_VAR 0 2
34174: NOT
34175: OR
34176: PUSH
34177: LD_VAR 0 3
34181: NOT
34182: OR
34183: IFFALSE 34187
// exit ;
34185: GO 35001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34187: LD_ADDR_VAR 0 14
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 3
34206: PPUSH
34207: LD_VAR 0 4
34211: PPUSH
34212: LD_VAR 0 5
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: PPUSH
34221: CALL_OW 248
34225: PPUSH
34226: LD_INT 0
34228: PPUSH
34229: CALL 36238 0 6
34233: ST_TO_ADDR
// if not hexes then
34234: LD_VAR 0 14
34238: NOT
34239: IFFALSE 34243
// exit ;
34241: GO 35001
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34243: LD_ADDR_VAR 0 17
34247: PUSH
34248: LD_VAR 0 5
34252: PPUSH
34253: LD_INT 22
34255: PUSH
34256: LD_VAR 0 13
34260: PPUSH
34261: CALL_OW 255
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: LD_INT 30
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PPUSH
34302: CALL_OW 72
34306: ST_TO_ADDR
// for i = 1 to hexes do
34307: LD_ADDR_VAR 0 9
34311: PUSH
34312: DOUBLE
34313: LD_INT 1
34315: DEC
34316: ST_TO_ADDR
34317: LD_VAR 0 14
34321: PUSH
34322: FOR_TO
34323: IFFALSE 34999
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34325: LD_ADDR_VAR 0 13
34329: PUSH
34330: LD_VAR 0 14
34334: PUSH
34335: LD_VAR 0 9
34339: ARRAY
34340: PUSH
34341: LD_INT 1
34343: ARRAY
34344: PPUSH
34345: LD_VAR 0 14
34349: PUSH
34350: LD_VAR 0 9
34354: ARRAY
34355: PUSH
34356: LD_INT 2
34358: ARRAY
34359: PPUSH
34360: CALL_OW 428
34364: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34365: LD_VAR 0 14
34369: PUSH
34370: LD_VAR 0 9
34374: ARRAY
34375: PUSH
34376: LD_INT 1
34378: ARRAY
34379: PPUSH
34380: LD_VAR 0 14
34384: PUSH
34385: LD_VAR 0 9
34389: ARRAY
34390: PUSH
34391: LD_INT 2
34393: ARRAY
34394: PPUSH
34395: CALL_OW 351
34399: PUSH
34400: LD_VAR 0 14
34404: PUSH
34405: LD_VAR 0 9
34409: ARRAY
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PPUSH
34415: LD_VAR 0 14
34419: PUSH
34420: LD_VAR 0 9
34424: ARRAY
34425: PUSH
34426: LD_INT 2
34428: ARRAY
34429: PPUSH
34430: CALL_OW 488
34434: NOT
34435: OR
34436: PUSH
34437: LD_VAR 0 13
34441: PPUSH
34442: CALL_OW 247
34446: PUSH
34447: LD_INT 3
34449: EQUAL
34450: OR
34451: IFFALSE 34457
// exit ;
34453: POP
34454: POP
34455: GO 35001
// if not tmp then
34457: LD_VAR 0 13
34461: NOT
34462: IFFALSE 34466
// continue ;
34464: GO 34322
// result := true ;
34466: LD_ADDR_VAR 0 8
34470: PUSH
34471: LD_INT 1
34473: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34474: LD_VAR 0 6
34478: PUSH
34479: LD_VAR 0 13
34483: PPUSH
34484: CALL_OW 247
34488: PUSH
34489: LD_INT 2
34491: EQUAL
34492: AND
34493: PUSH
34494: LD_VAR 0 13
34498: PPUSH
34499: CALL_OW 263
34503: PUSH
34504: LD_INT 1
34506: EQUAL
34507: AND
34508: IFFALSE 34672
// begin if IsDrivenBy ( tmp ) then
34510: LD_VAR 0 13
34514: PPUSH
34515: CALL_OW 311
34519: IFFALSE 34523
// continue ;
34521: GO 34322
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34523: LD_VAR 0 6
34527: PPUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 60
34533: PUSH
34534: EMPTY
34535: LIST
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 55
34546: PUSH
34547: EMPTY
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PPUSH
34558: CALL_OW 72
34562: IFFALSE 34670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34564: LD_ADDR_VAR 0 18
34568: PUSH
34569: LD_VAR 0 6
34573: PPUSH
34574: LD_INT 3
34576: PUSH
34577: LD_INT 60
34579: PUSH
34580: EMPTY
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 55
34592: PUSH
34593: EMPTY
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 72
34608: PUSH
34609: LD_INT 1
34611: ARRAY
34612: ST_TO_ADDR
// if IsInUnit ( driver ) then
34613: LD_VAR 0 18
34617: PPUSH
34618: CALL_OW 310
34622: IFFALSE 34633
// ComExit ( driver ) ;
34624: LD_VAR 0 18
34628: PPUSH
34629: CALL 59943 0 1
// AddComEnterUnit ( driver , tmp ) ;
34633: LD_VAR 0 18
34637: PPUSH
34638: LD_VAR 0 13
34642: PPUSH
34643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34647: LD_VAR 0 18
34651: PPUSH
34652: LD_VAR 0 7
34656: PPUSH
34657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34661: LD_VAR 0 18
34665: PPUSH
34666: CALL_OW 181
// end ; continue ;
34670: GO 34322
// end ; if not cleaners or not tmp in cleaners then
34672: LD_VAR 0 6
34676: NOT
34677: PUSH
34678: LD_VAR 0 13
34682: PUSH
34683: LD_VAR 0 6
34687: IN
34688: NOT
34689: OR
34690: IFFALSE 34997
// begin if dep then
34692: LD_VAR 0 17
34696: IFFALSE 34832
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34698: LD_ADDR_VAR 0 16
34702: PUSH
34703: LD_VAR 0 17
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: PPUSH
34712: CALL_OW 250
34716: PPUSH
34717: LD_VAR 0 17
34721: PUSH
34722: LD_INT 1
34724: ARRAY
34725: PPUSH
34726: CALL_OW 254
34730: PPUSH
34731: LD_INT 5
34733: PPUSH
34734: CALL_OW 272
34738: PUSH
34739: LD_VAR 0 17
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: PPUSH
34748: CALL_OW 251
34752: PPUSH
34753: LD_VAR 0 17
34757: PUSH
34758: LD_INT 1
34760: ARRAY
34761: PPUSH
34762: CALL_OW 254
34766: PPUSH
34767: LD_INT 5
34769: PPUSH
34770: CALL_OW 273
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34779: LD_VAR 0 16
34783: PUSH
34784: LD_INT 1
34786: ARRAY
34787: PPUSH
34788: LD_VAR 0 16
34792: PUSH
34793: LD_INT 2
34795: ARRAY
34796: PPUSH
34797: CALL_OW 488
34801: IFFALSE 34832
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34803: LD_VAR 0 13
34807: PPUSH
34808: LD_VAR 0 16
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: PPUSH
34817: LD_VAR 0 16
34821: PUSH
34822: LD_INT 2
34824: ARRAY
34825: PPUSH
34826: CALL_OW 111
// continue ;
34830: GO 34322
// end ; end ; r := GetDir ( tmp ) ;
34832: LD_ADDR_VAR 0 15
34836: PUSH
34837: LD_VAR 0 13
34841: PPUSH
34842: CALL_OW 254
34846: ST_TO_ADDR
// if r = 5 then
34847: LD_VAR 0 15
34851: PUSH
34852: LD_INT 5
34854: EQUAL
34855: IFFALSE 34865
// r := 0 ;
34857: LD_ADDR_VAR 0 15
34861: PUSH
34862: LD_INT 0
34864: ST_TO_ADDR
// for j = r to 5 do
34865: LD_ADDR_VAR 0 10
34869: PUSH
34870: DOUBLE
34871: LD_VAR 0 15
34875: DEC
34876: ST_TO_ADDR
34877: LD_INT 5
34879: PUSH
34880: FOR_TO
34881: IFFALSE 34995
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34883: LD_ADDR_VAR 0 11
34887: PUSH
34888: LD_VAR 0 13
34892: PPUSH
34893: CALL_OW 250
34897: PPUSH
34898: LD_VAR 0 10
34902: PPUSH
34903: LD_INT 2
34905: PPUSH
34906: CALL_OW 272
34910: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34911: LD_ADDR_VAR 0 12
34915: PUSH
34916: LD_VAR 0 13
34920: PPUSH
34921: CALL_OW 251
34925: PPUSH
34926: LD_VAR 0 10
34930: PPUSH
34931: LD_INT 2
34933: PPUSH
34934: CALL_OW 273
34938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34939: LD_VAR 0 11
34943: PPUSH
34944: LD_VAR 0 12
34948: PPUSH
34949: CALL_OW 488
34953: PUSH
34954: LD_VAR 0 11
34958: PPUSH
34959: LD_VAR 0 12
34963: PPUSH
34964: CALL_OW 428
34968: NOT
34969: AND
34970: IFFALSE 34993
// begin ComMoveXY ( tmp , _x , _y ) ;
34972: LD_VAR 0 13
34976: PPUSH
34977: LD_VAR 0 11
34981: PPUSH
34982: LD_VAR 0 12
34986: PPUSH
34987: CALL_OW 111
// break ;
34991: GO 34995
// end ; end ;
34993: GO 34880
34995: POP
34996: POP
// end ; end ;
34997: GO 34322
34999: POP
35000: POP
// end ;
35001: LD_VAR 0 8
35005: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35006: LD_INT 0
35008: PPUSH
// result := true ;
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 1
35016: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35017: LD_VAR 0 2
35021: PUSH
35022: LD_INT 24
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35036
35028: LD_INT 33
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35061
35036: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 32
35044: PPUSH
35045: LD_VAR 0 1
35049: PPUSH
35050: CALL_OW 321
35054: PUSH
35055: LD_INT 2
35057: EQUAL
35058: ST_TO_ADDR
35059: GO 35381
35061: LD_INT 20
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35094
35069: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 6
35077: PPUSH
35078: LD_VAR 0 1
35082: PPUSH
35083: CALL_OW 321
35087: PUSH
35088: LD_INT 2
35090: EQUAL
35091: ST_TO_ADDR
35092: GO 35381
35094: LD_INT 22
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35108
35100: LD_INT 36
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35133
35108: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 15
35116: PPUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 321
35126: PUSH
35127: LD_INT 2
35129: EQUAL
35130: ST_TO_ADDR
35131: GO 35381
35133: LD_INT 30
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35166
35141: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 20
35149: PPUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 321
35159: PUSH
35160: LD_INT 2
35162: EQUAL
35163: ST_TO_ADDR
35164: GO 35381
35166: LD_INT 28
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35180
35172: LD_INT 21
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35180
35178: GO 35205
35180: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_INT 21
35188: PPUSH
35189: LD_VAR 0 1
35193: PPUSH
35194: CALL_OW 321
35198: PUSH
35199: LD_INT 2
35201: EQUAL
35202: ST_TO_ADDR
35203: GO 35381
35205: LD_INT 16
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35240
35213: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_EXP 91
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 321
35233: PUSH
35234: LD_INT 2
35236: EQUAL
35237: ST_TO_ADDR
35238: GO 35381
35240: LD_INT 19
35242: DOUBLE
35243: EQUAL
35244: IFTRUE 35254
35246: LD_INT 23
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35254
35252: GO 35281
35254: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_EXP 90
35264: PPUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 321
35274: PUSH
35275: LD_INT 2
35277: EQUAL
35278: ST_TO_ADDR
35279: GO 35381
35281: LD_INT 17
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35314
35289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35290: LD_ADDR_VAR 0 3
35294: PUSH
35295: LD_INT 39
35297: PPUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: CALL_OW 321
35307: PUSH
35308: LD_INT 2
35310: EQUAL
35311: ST_TO_ADDR
35312: GO 35381
35314: LD_INT 18
35316: DOUBLE
35317: EQUAL
35318: IFTRUE 35322
35320: GO 35347
35322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 40
35330: PPUSH
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: ST_TO_ADDR
35345: GO 35381
35347: LD_INT 27
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35380
35355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_INT 35
35363: PPUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 321
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: ST_TO_ADDR
35378: GO 35381
35380: POP
// end ;
35381: LD_VAR 0 3
35385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35386: LD_INT 0
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
// result := false ;
35399: LD_ADDR_VAR 0 6
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35407: LD_VAR 0 1
35411: NOT
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 266
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: IN
35433: NOT
35434: OR
35435: PUSH
35436: LD_VAR 0 2
35440: NOT
35441: OR
35442: PUSH
35443: LD_VAR 0 5
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 4
35462: PUSH
35463: LD_INT 5
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: IN
35474: NOT
35475: OR
35476: PUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: LD_VAR 0 4
35486: PPUSH
35487: CALL_OW 488
35491: NOT
35492: OR
35493: IFFALSE 35497
// exit ;
35495: GO 36233
// side := GetSide ( depot ) ;
35497: LD_ADDR_VAR 0 9
35501: PUSH
35502: LD_VAR 0 1
35506: PPUSH
35507: CALL_OW 255
35511: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35512: LD_VAR 0 9
35516: PPUSH
35517: LD_VAR 0 2
35521: PPUSH
35522: CALL 35006 0 2
35526: NOT
35527: IFFALSE 35531
// exit ;
35529: GO 36233
// pom := GetBase ( depot ) ;
35531: LD_ADDR_VAR 0 10
35535: PUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: CALL_OW 274
35545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35546: LD_ADDR_VAR 0 11
35550: PUSH
35551: LD_VAR 0 2
35555: PPUSH
35556: LD_VAR 0 1
35560: PPUSH
35561: CALL_OW 248
35565: PPUSH
35566: CALL_OW 450
35570: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35571: LD_VAR 0 10
35575: PPUSH
35576: LD_INT 1
35578: PPUSH
35579: CALL_OW 275
35583: PUSH
35584: LD_VAR 0 11
35588: PUSH
35589: LD_INT 1
35591: ARRAY
35592: GREATEREQUAL
35593: PUSH
35594: LD_VAR 0 10
35598: PPUSH
35599: LD_INT 2
35601: PPUSH
35602: CALL_OW 275
35606: PUSH
35607: LD_VAR 0 11
35611: PUSH
35612: LD_INT 2
35614: ARRAY
35615: GREATEREQUAL
35616: AND
35617: PUSH
35618: LD_VAR 0 10
35622: PPUSH
35623: LD_INT 3
35625: PPUSH
35626: CALL_OW 275
35630: PUSH
35631: LD_VAR 0 11
35635: PUSH
35636: LD_INT 3
35638: ARRAY
35639: GREATEREQUAL
35640: AND
35641: NOT
35642: IFFALSE 35646
// exit ;
35644: GO 36233
// if GetBType ( depot ) = b_depot then
35646: LD_VAR 0 1
35650: PPUSH
35651: CALL_OW 266
35655: PUSH
35656: LD_INT 0
35658: EQUAL
35659: IFFALSE 35671
// dist := 28 else
35661: LD_ADDR_VAR 0 14
35665: PUSH
35666: LD_INT 28
35668: ST_TO_ADDR
35669: GO 35679
// dist := 36 ;
35671: LD_ADDR_VAR 0 14
35675: PUSH
35676: LD_INT 36
35678: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35679: LD_VAR 0 1
35683: PPUSH
35684: LD_VAR 0 3
35688: PPUSH
35689: LD_VAR 0 4
35693: PPUSH
35694: CALL_OW 297
35698: PUSH
35699: LD_VAR 0 14
35703: GREATER
35704: IFFALSE 35708
// exit ;
35706: GO 36233
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35708: LD_ADDR_VAR 0 12
35712: PUSH
35713: LD_VAR 0 2
35717: PPUSH
35718: LD_VAR 0 3
35722: PPUSH
35723: LD_VAR 0 4
35727: PPUSH
35728: LD_VAR 0 5
35732: PPUSH
35733: LD_VAR 0 1
35737: PPUSH
35738: CALL_OW 248
35742: PPUSH
35743: LD_INT 0
35745: PPUSH
35746: CALL 36238 0 6
35750: ST_TO_ADDR
// if not hexes then
35751: LD_VAR 0 12
35755: NOT
35756: IFFALSE 35760
// exit ;
35758: GO 36233
// hex := GetHexInfo ( x , y ) ;
35760: LD_ADDR_VAR 0 15
35764: PUSH
35765: LD_VAR 0 3
35769: PPUSH
35770: LD_VAR 0 4
35774: PPUSH
35775: CALL_OW 546
35779: ST_TO_ADDR
// if hex [ 1 ] then
35780: LD_VAR 0 15
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: IFFALSE 35792
// exit ;
35790: GO 36233
// height := hex [ 2 ] ;
35792: LD_ADDR_VAR 0 13
35796: PUSH
35797: LD_VAR 0 15
35801: PUSH
35802: LD_INT 2
35804: ARRAY
35805: ST_TO_ADDR
// for i = 1 to hexes do
35806: LD_ADDR_VAR 0 7
35810: PUSH
35811: DOUBLE
35812: LD_INT 1
35814: DEC
35815: ST_TO_ADDR
35816: LD_VAR 0 12
35820: PUSH
35821: FOR_TO
35822: IFFALSE 36152
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35824: LD_VAR 0 12
35828: PUSH
35829: LD_VAR 0 7
35833: ARRAY
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: LD_VAR 0 12
35843: PUSH
35844: LD_VAR 0 7
35848: ARRAY
35849: PUSH
35850: LD_INT 2
35852: ARRAY
35853: PPUSH
35854: CALL_OW 488
35858: NOT
35859: PUSH
35860: LD_VAR 0 12
35864: PUSH
35865: LD_VAR 0 7
35869: ARRAY
35870: PUSH
35871: LD_INT 1
35873: ARRAY
35874: PPUSH
35875: LD_VAR 0 12
35879: PUSH
35880: LD_VAR 0 7
35884: ARRAY
35885: PUSH
35886: LD_INT 2
35888: ARRAY
35889: PPUSH
35890: CALL_OW 428
35894: PUSH
35895: LD_INT 0
35897: GREATER
35898: OR
35899: PUSH
35900: LD_VAR 0 12
35904: PUSH
35905: LD_VAR 0 7
35909: ARRAY
35910: PUSH
35911: LD_INT 1
35913: ARRAY
35914: PPUSH
35915: LD_VAR 0 12
35919: PUSH
35920: LD_VAR 0 7
35924: ARRAY
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: PPUSH
35930: CALL_OW 351
35934: OR
35935: IFFALSE 35941
// exit ;
35937: POP
35938: POP
35939: GO 36233
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35941: LD_ADDR_VAR 0 8
35945: PUSH
35946: LD_VAR 0 12
35950: PUSH
35951: LD_VAR 0 7
35955: ARRAY
35956: PUSH
35957: LD_INT 1
35959: ARRAY
35960: PPUSH
35961: LD_VAR 0 12
35965: PUSH
35966: LD_VAR 0 7
35970: ARRAY
35971: PUSH
35972: LD_INT 2
35974: ARRAY
35975: PPUSH
35976: CALL_OW 546
35980: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35981: LD_VAR 0 8
35985: PUSH
35986: LD_INT 1
35988: ARRAY
35989: PUSH
35990: LD_VAR 0 8
35994: PUSH
35995: LD_INT 2
35997: ARRAY
35998: PUSH
35999: LD_VAR 0 13
36003: PUSH
36004: LD_INT 2
36006: PLUS
36007: GREATER
36008: OR
36009: PUSH
36010: LD_VAR 0 8
36014: PUSH
36015: LD_INT 2
36017: ARRAY
36018: PUSH
36019: LD_VAR 0 13
36023: PUSH
36024: LD_INT 2
36026: MINUS
36027: LESS
36028: OR
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: LD_INT 3
36037: ARRAY
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 8
36044: PUSH
36045: LD_INT 9
36047: PUSH
36048: LD_INT 10
36050: PUSH
36051: LD_INT 11
36053: PUSH
36054: LD_INT 12
36056: PUSH
36057: LD_INT 13
36059: PUSH
36060: LD_INT 16
36062: PUSH
36063: LD_INT 17
36065: PUSH
36066: LD_INT 18
36068: PUSH
36069: LD_INT 19
36071: PUSH
36072: LD_INT 20
36074: PUSH
36075: LD_INT 21
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: IN
36093: NOT
36094: OR
36095: PUSH
36096: LD_VAR 0 8
36100: PUSH
36101: LD_INT 5
36103: ARRAY
36104: NOT
36105: OR
36106: PUSH
36107: LD_VAR 0 8
36111: PUSH
36112: LD_INT 6
36114: ARRAY
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 7
36124: PUSH
36125: LD_INT 9
36127: PUSH
36128: LD_INT 10
36130: PUSH
36131: LD_INT 11
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: IN
36142: NOT
36143: OR
36144: IFFALSE 36150
// exit ;
36146: POP
36147: POP
36148: GO 36233
// end ;
36150: GO 35821
36152: POP
36153: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36154: LD_VAR 0 9
36158: PPUSH
36159: LD_VAR 0 3
36163: PPUSH
36164: LD_VAR 0 4
36168: PPUSH
36169: LD_INT 20
36171: PPUSH
36172: CALL 28179 0 4
36176: PUSH
36177: LD_INT 4
36179: ARRAY
36180: IFFALSE 36184
// exit ;
36182: GO 36233
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36184: LD_VAR 0 2
36188: PUSH
36189: LD_INT 29
36191: PUSH
36192: LD_INT 30
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: IN
36199: PUSH
36200: LD_VAR 0 3
36204: PPUSH
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_VAR 0 9
36214: PPUSH
36215: CALL_OW 440
36219: NOT
36220: AND
36221: IFFALSE 36225
// exit ;
36223: GO 36233
// result := true ;
36225: LD_ADDR_VAR 0 6
36229: PUSH
36230: LD_INT 1
36232: ST_TO_ADDR
// end ;
36233: LD_VAR 0 6
36237: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36238: LD_INT 0
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
36265: PPUSH
36266: PPUSH
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
// result = [ ] ;
36298: LD_ADDR_VAR 0 7
36302: PUSH
36303: EMPTY
36304: ST_TO_ADDR
// temp_list = [ ] ;
36305: LD_ADDR_VAR 0 9
36309: PUSH
36310: EMPTY
36311: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36312: LD_VAR 0 4
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: LD_INT 4
36331: PUSH
36332: LD_INT 5
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: IN
36343: NOT
36344: PUSH
36345: LD_VAR 0 1
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: IN
36360: PUSH
36361: LD_VAR 0 5
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 3
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: IN
36380: NOT
36381: AND
36382: OR
36383: IFFALSE 36387
// exit ;
36385: GO 54778
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36387: LD_VAR 0 1
36391: PUSH
36392: LD_INT 6
36394: PUSH
36395: LD_INT 7
36397: PUSH
36398: LD_INT 8
36400: PUSH
36401: LD_INT 13
36403: PUSH
36404: LD_INT 12
36406: PUSH
36407: LD_INT 15
36409: PUSH
36410: LD_INT 11
36412: PUSH
36413: LD_INT 14
36415: PUSH
36416: LD_INT 10
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: IN
36430: IFFALSE 36440
// btype = b_lab ;
36432: LD_ADDR_VAR 0 1
36436: PUSH
36437: LD_INT 6
36439: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36440: LD_VAR 0 6
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: IN
36459: NOT
36460: PUSH
36461: LD_VAR 0 1
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: LD_INT 3
36477: PUSH
36478: LD_INT 6
36480: PUSH
36481: LD_INT 36
36483: PUSH
36484: LD_INT 4
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: LD_INT 31
36492: PUSH
36493: LD_INT 32
36495: PUSH
36496: LD_INT 33
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: IN
36512: NOT
36513: PUSH
36514: LD_VAR 0 6
36518: PUSH
36519: LD_INT 1
36521: EQUAL
36522: AND
36523: OR
36524: PUSH
36525: LD_VAR 0 1
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: IN
36540: NOT
36541: PUSH
36542: LD_VAR 0 6
36546: PUSH
36547: LD_INT 2
36549: EQUAL
36550: AND
36551: OR
36552: IFFALSE 36562
// mode = 0 ;
36554: LD_ADDR_VAR 0 6
36558: PUSH
36559: LD_INT 0
36561: ST_TO_ADDR
// case mode of 0 :
36562: LD_VAR 0 6
36566: PUSH
36567: LD_INT 0
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36575
36573: GO 48028
36575: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36576: LD_ADDR_VAR 0 11
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36769: LD_ADDR_VAR 0 12
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 3
36926: NEG
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 3
36937: NEG
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36965: LD_ADDR_VAR 0 13
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 2
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: LD_INT 3
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 3
37124: NEG
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37164: LD_ADDR_VAR 0 14
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 3
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37360: LD_ADDR_VAR 0 15
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37553: LD_ADDR_VAR 0 16
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 2
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37746: LD_ADDR_VAR 0 17
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37976: LD_ADDR_VAR 0 18
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: LD_INT 2
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38206: LD_ADDR_VAR 0 19
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38436: LD_ADDR_VAR 0 20
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38666: LD_ADDR_VAR 0 21
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38896: LD_ADDR_VAR 0 22
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39126: LD_ADDR_VAR 0 23
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: LD_INT 3
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 3
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39406: LD_ADDR_VAR 0 24
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39682: LD_ADDR_VAR 0 25
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39956: LD_ADDR_VAR 0 26
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40232: LD_ADDR_VAR 0 27
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40512: LD_ADDR_VAR 0 28
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 2
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 3
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40794: LD_ADDR_VAR 0 29
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 3
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 3
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41073: LD_ADDR_VAR 0 30
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 3
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41351: LD_ADDR_VAR 0 31
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41629: LD_ADDR_VAR 0 32
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 3
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41907: LD_ADDR_VAR 0 33
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 3
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 3
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42186: LD_ADDR_VAR 0 34
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 3
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42466: LD_ADDR_VAR 0 35
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42578: LD_ADDR_VAR 0 36
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42690: LD_ADDR_VAR 0 37
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42802: LD_ADDR_VAR 0 38
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42914: LD_ADDR_VAR 0 39
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43026: LD_ADDR_VAR 0 40
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43138: LD_ADDR_VAR 0 41
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43488: LD_ADDR_VAR 0 42
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 3
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43838: LD_ADDR_VAR 0 43
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 3
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 3
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 3
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 3
44134: NEG
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44186: LD_ADDR_VAR 0 44
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44536: LD_ADDR_VAR 0 45
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 3
44845: NEG
44846: PUSH
44847: LD_INT 3
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44886: LD_ADDR_VAR 0 46
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 3
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45234: LD_ADDR_VAR 0 47
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45385: LD_ADDR_VAR 0 48
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45532: LD_ADDR_VAR 0 49
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45676: LD_ADDR_VAR 0 50
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45820: LD_ADDR_VAR 0 51
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45967: LD_ADDR_VAR 0 52
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46118: LD_ADDR_VAR 0 53
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46348: LD_ADDR_VAR 0 54
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46578: LD_ADDR_VAR 0 55
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46808: LD_ADDR_VAR 0 56
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47038: LD_ADDR_VAR 0 57
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47268: LD_ADDR_VAR 0 58
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47498: LD_ADDR_VAR 0 59
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47586: LD_ADDR_VAR 0 60
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47674: LD_ADDR_VAR 0 61
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47762: LD_ADDR_VAR 0 62
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47850: LD_ADDR_VAR 0 63
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47938: LD_ADDR_VAR 0 64
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: ST_TO_ADDR
// end ; 1 :
48026: GO 53923
48028: LD_INT 1
48030: DOUBLE
48031: EQUAL
48032: IFTRUE 48036
48034: GO 50659
48036: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48037: LD_ADDR_VAR 0 11
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48081: LD_ADDR_VAR 0 12
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 3
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48122: LD_ADDR_VAR 0 13
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48162: LD_ADDR_VAR 0 14
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48203: LD_ADDR_VAR 0 15
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48247: LD_ADDR_VAR 0 16
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48293: LD_ADDR_VAR 0 17
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48337: LD_ADDR_VAR 0 18
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48378: LD_ADDR_VAR 0 19
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48418: LD_ADDR_VAR 0 20
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48459: LD_ADDR_VAR 0 21
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48503: LD_ADDR_VAR 0 22
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: NEG
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48549: LD_ADDR_VAR 0 23
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 4
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48593: LD_ADDR_VAR 0 24
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48634: LD_ADDR_VAR 0 25
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: LD_INT 3
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 4
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: PUSH
48662: LD_INT 4
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48674: LD_ADDR_VAR 0 26
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 4
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48715: LD_ADDR_VAR 0 27
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 4
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48759: LD_ADDR_VAR 0 28
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 4
48790: NEG
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48805: LD_ADDR_VAR 0 29
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 4
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 4
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 5
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 5
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 4
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 6
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 6
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 5
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48960: LD_ADDR_VAR 0 30
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 4
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 4
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 4
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 5
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 5
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 5
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 6
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 6
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49103: LD_ADDR_VAR 0 31
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 4
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 4
49150: PUSH
49151: LD_INT 4
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 4
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 5
49170: PUSH
49171: LD_INT 4
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 5
49180: PUSH
49181: LD_INT 5
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 4
49190: PUSH
49191: LD_INT 5
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 6
49200: PUSH
49201: LD_INT 5
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 6
49210: PUSH
49211: LD_INT 6
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: PUSH
49221: LD_INT 6
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49242: LD_ADDR_VAR 0 32
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 5
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 5
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 4
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 6
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 6
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 5
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49385: LD_ADDR_VAR 0 33
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 4
49437: NEG
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 4
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 5
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 5
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 5
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 6
49505: NEG
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 6
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49540: LD_ADDR_VAR 0 34
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: LD_INT 4
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 4
49595: NEG
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 4
49607: NEG
49608: PUSH
49609: LD_INT 4
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 4
49619: NEG
49620: PUSH
49621: LD_INT 5
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 5
49631: NEG
49632: PUSH
49633: LD_INT 4
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 5
49643: NEG
49644: PUSH
49645: LD_INT 5
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 5
49655: NEG
49656: PUSH
49657: LD_INT 6
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 6
49667: NEG
49668: PUSH
49669: LD_INT 5
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 6
49679: NEG
49680: PUSH
49681: LD_INT 6
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49703: LD_ADDR_VAR 0 41
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49747: LD_ADDR_VAR 0 42
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49788: LD_ADDR_VAR 0 43
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49828: LD_ADDR_VAR 0 44
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49869: LD_ADDR_VAR 0 45
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49913: LD_ADDR_VAR 0 46
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49959: LD_ADDR_VAR 0 47
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49992: LD_ADDR_VAR 0 48
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50023: LD_ADDR_VAR 0 49
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50052: LD_ADDR_VAR 0 50
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50081: LD_ADDR_VAR 0 51
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50112: LD_ADDR_VAR 0 52
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50145: LD_ADDR_VAR 0 53
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50189: LD_ADDR_VAR 0 54
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50230: LD_ADDR_VAR 0 55
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50270: LD_ADDR_VAR 0 56
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50311: LD_ADDR_VAR 0 57
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50355: LD_ADDR_VAR 0 58
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50401: LD_ADDR_VAR 0 59
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50445: LD_ADDR_VAR 0 60
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50486: LD_ADDR_VAR 0 61
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50526: LD_ADDR_VAR 0 62
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50567: LD_ADDR_VAR 0 63
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50611: LD_ADDR_VAR 0 64
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: ST_TO_ADDR
// end ; 2 :
50657: GO 53923
50659: LD_INT 2
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50667
50665: GO 53922
50667: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50668: LD_ADDR_VAR 0 29
50672: PUSH
50673: LD_INT 4
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 5
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 5
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 4
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: LD_INT 4
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 4
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 4
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 4
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 4
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 4
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 5
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 5
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 5
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 4
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 4
51053: NEG
51054: PUSH
51055: LD_INT 4
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 4
51065: NEG
51066: PUSH
51067: LD_INT 5
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: LD_INT 4
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 5
51113: NEG
51114: PUSH
51115: LD_INT 4
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 5
51125: NEG
51126: PUSH
51127: LD_INT 5
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 5
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 5
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51206: LD_ADDR_VAR 0 30
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: LD_INT 4
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 4
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 5
51233: PUSH
51234: LD_INT 4
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: LD_INT 5
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: LD_INT 5
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 4
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 4
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 4
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 4
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 4
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 4
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 5
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 5
51475: NEG
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: NEG
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 4
51570: NEG
51571: PUSH
51572: LD_INT 4
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 4
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 4
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 5
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 4
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 4
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 5
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 5
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51753: LD_ADDR_VAR 0 31
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 4
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 5
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 4
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 4
51932: NEG
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 4
51955: NEG
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 4
51967: NEG
51968: PUSH
51969: LD_INT 5
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: LD_INT 4
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 5
52015: NEG
52016: PUSH
52017: LD_INT 4
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 5
52027: NEG
52028: PUSH
52029: LD_INT 5
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: LD_INT 5
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 5
52051: NEG
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 4
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 4
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 4
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 4
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 5
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 4
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52303: LD_ADDR_VAR 0 32
52307: PUSH
52308: LD_INT 4
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 4
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 5
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 5
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 5
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: LD_INT 4
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 4
52472: NEG
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 4
52484: NEG
52485: PUSH
52486: LD_INT 4
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 4
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 4
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 5
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 4
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 5
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 5
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 4
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 4
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 4
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 5
52735: PUSH
52736: LD_INT 4
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 5
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 5
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: LD_INT 5
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52850: LD_ADDR_VAR 0 33
52854: PUSH
52855: LD_INT 4
52857: NEG
52858: PUSH
52859: LD_INT 4
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 4
52869: NEG
52870: PUSH
52871: LD_INT 5
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 4
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: NEG
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 5
52917: NEG
52918: PUSH
52919: LD_INT 4
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 5
52929: NEG
52930: PUSH
52931: LD_INT 5
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: LD_INT 5
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 5
52953: NEG
52954: PUSH
52955: LD_INT 3
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 4
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 4
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 4
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 5
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 5
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 4
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 5
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 4
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: LD_INT 4
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 4
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 5
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 4
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 5
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53388: LD_ADDR_VAR 0 34
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 4
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 5
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 5
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 5
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 4
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 4
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 4
53590: PUSH
53591: LD_INT 4
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 4
53600: PUSH
53601: LD_INT 3
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 5
53610: PUSH
53611: LD_INT 4
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 5
53620: PUSH
53621: LD_INT 5
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: LD_INT 5
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: LD_INT 4
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: LD_INT 5
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 4
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 4
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 4
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 5
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 5
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 5
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: ST_TO_ADDR
// end ; end ;
53920: GO 53923
53922: POP
// case btype of b_depot , b_warehouse :
53923: LD_VAR 0 1
53927: PUSH
53928: LD_INT 0
53930: DOUBLE
53931: EQUAL
53932: IFTRUE 53942
53934: LD_INT 1
53936: DOUBLE
53937: EQUAL
53938: IFTRUE 53942
53940: GO 54143
53942: POP
// case nation of nation_american :
53943: LD_VAR 0 5
53947: PUSH
53948: LD_INT 1
53950: DOUBLE
53951: EQUAL
53952: IFTRUE 53956
53954: GO 54012
53956: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53957: LD_ADDR_VAR 0 9
53961: PUSH
53962: LD_VAR 0 11
53966: PUSH
53967: LD_VAR 0 12
53971: PUSH
53972: LD_VAR 0 13
53976: PUSH
53977: LD_VAR 0 14
53981: PUSH
53982: LD_VAR 0 15
53986: PUSH
53987: LD_VAR 0 16
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: LD_VAR 0 4
54004: PUSH
54005: LD_INT 1
54007: PLUS
54008: ARRAY
54009: ST_TO_ADDR
54010: GO 54141
54012: LD_INT 2
54014: DOUBLE
54015: EQUAL
54016: IFTRUE 54020
54018: GO 54076
54020: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54021: LD_ADDR_VAR 0 9
54025: PUSH
54026: LD_VAR 0 17
54030: PUSH
54031: LD_VAR 0 18
54035: PUSH
54036: LD_VAR 0 19
54040: PUSH
54041: LD_VAR 0 20
54045: PUSH
54046: LD_VAR 0 21
54050: PUSH
54051: LD_VAR 0 22
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: PUSH
54064: LD_VAR 0 4
54068: PUSH
54069: LD_INT 1
54071: PLUS
54072: ARRAY
54073: ST_TO_ADDR
54074: GO 54141
54076: LD_INT 3
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54140
54084: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54085: LD_ADDR_VAR 0 9
54089: PUSH
54090: LD_VAR 0 23
54094: PUSH
54095: LD_VAR 0 24
54099: PUSH
54100: LD_VAR 0 25
54104: PUSH
54105: LD_VAR 0 26
54109: PUSH
54110: LD_VAR 0 27
54114: PUSH
54115: LD_VAR 0 28
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: LD_VAR 0 4
54132: PUSH
54133: LD_INT 1
54135: PLUS
54136: ARRAY
54137: ST_TO_ADDR
54138: GO 54141
54140: POP
54141: GO 54696
54143: LD_INT 2
54145: DOUBLE
54146: EQUAL
54147: IFTRUE 54157
54149: LD_INT 3
54151: DOUBLE
54152: EQUAL
54153: IFTRUE 54157
54155: GO 54213
54157: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54158: LD_ADDR_VAR 0 9
54162: PUSH
54163: LD_VAR 0 29
54167: PUSH
54168: LD_VAR 0 30
54172: PUSH
54173: LD_VAR 0 31
54177: PUSH
54178: LD_VAR 0 32
54182: PUSH
54183: LD_VAR 0 33
54187: PUSH
54188: LD_VAR 0 34
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: PUSH
54201: LD_VAR 0 4
54205: PUSH
54206: LD_INT 1
54208: PLUS
54209: ARRAY
54210: ST_TO_ADDR
54211: GO 54696
54213: LD_INT 16
54215: DOUBLE
54216: EQUAL
54217: IFTRUE 54275
54219: LD_INT 17
54221: DOUBLE
54222: EQUAL
54223: IFTRUE 54275
54225: LD_INT 18
54227: DOUBLE
54228: EQUAL
54229: IFTRUE 54275
54231: LD_INT 19
54233: DOUBLE
54234: EQUAL
54235: IFTRUE 54275
54237: LD_INT 22
54239: DOUBLE
54240: EQUAL
54241: IFTRUE 54275
54243: LD_INT 20
54245: DOUBLE
54246: EQUAL
54247: IFTRUE 54275
54249: LD_INT 21
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54275
54255: LD_INT 23
54257: DOUBLE
54258: EQUAL
54259: IFTRUE 54275
54261: LD_INT 24
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54275
54267: LD_INT 25
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54275
54273: GO 54331
54275: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54276: LD_ADDR_VAR 0 9
54280: PUSH
54281: LD_VAR 0 35
54285: PUSH
54286: LD_VAR 0 36
54290: PUSH
54291: LD_VAR 0 37
54295: PUSH
54296: LD_VAR 0 38
54300: PUSH
54301: LD_VAR 0 39
54305: PUSH
54306: LD_VAR 0 40
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: PUSH
54319: LD_VAR 0 4
54323: PUSH
54324: LD_INT 1
54326: PLUS
54327: ARRAY
54328: ST_TO_ADDR
54329: GO 54696
54331: LD_INT 6
54333: DOUBLE
54334: EQUAL
54335: IFTRUE 54387
54337: LD_INT 7
54339: DOUBLE
54340: EQUAL
54341: IFTRUE 54387
54343: LD_INT 8
54345: DOUBLE
54346: EQUAL
54347: IFTRUE 54387
54349: LD_INT 13
54351: DOUBLE
54352: EQUAL
54353: IFTRUE 54387
54355: LD_INT 12
54357: DOUBLE
54358: EQUAL
54359: IFTRUE 54387
54361: LD_INT 15
54363: DOUBLE
54364: EQUAL
54365: IFTRUE 54387
54367: LD_INT 11
54369: DOUBLE
54370: EQUAL
54371: IFTRUE 54387
54373: LD_INT 14
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54387
54379: LD_INT 10
54381: DOUBLE
54382: EQUAL
54383: IFTRUE 54387
54385: GO 54443
54387: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54388: LD_ADDR_VAR 0 9
54392: PUSH
54393: LD_VAR 0 41
54397: PUSH
54398: LD_VAR 0 42
54402: PUSH
54403: LD_VAR 0 43
54407: PUSH
54408: LD_VAR 0 44
54412: PUSH
54413: LD_VAR 0 45
54417: PUSH
54418: LD_VAR 0 46
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: PUSH
54431: LD_VAR 0 4
54435: PUSH
54436: LD_INT 1
54438: PLUS
54439: ARRAY
54440: ST_TO_ADDR
54441: GO 54696
54443: LD_INT 36
54445: DOUBLE
54446: EQUAL
54447: IFTRUE 54451
54449: GO 54507
54451: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54452: LD_ADDR_VAR 0 9
54456: PUSH
54457: LD_VAR 0 47
54461: PUSH
54462: LD_VAR 0 48
54466: PUSH
54467: LD_VAR 0 49
54471: PUSH
54472: LD_VAR 0 50
54476: PUSH
54477: LD_VAR 0 51
54481: PUSH
54482: LD_VAR 0 52
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_VAR 0 4
54499: PUSH
54500: LD_INT 1
54502: PLUS
54503: ARRAY
54504: ST_TO_ADDR
54505: GO 54696
54507: LD_INT 4
54509: DOUBLE
54510: EQUAL
54511: IFTRUE 54533
54513: LD_INT 5
54515: DOUBLE
54516: EQUAL
54517: IFTRUE 54533
54519: LD_INT 34
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54533
54525: LD_INT 37
54527: DOUBLE
54528: EQUAL
54529: IFTRUE 54533
54531: GO 54589
54533: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54534: LD_ADDR_VAR 0 9
54538: PUSH
54539: LD_VAR 0 53
54543: PUSH
54544: LD_VAR 0 54
54548: PUSH
54549: LD_VAR 0 55
54553: PUSH
54554: LD_VAR 0 56
54558: PUSH
54559: LD_VAR 0 57
54563: PUSH
54564: LD_VAR 0 58
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: PUSH
54577: LD_VAR 0 4
54581: PUSH
54582: LD_INT 1
54584: PLUS
54585: ARRAY
54586: ST_TO_ADDR
54587: GO 54696
54589: LD_INT 31
54591: DOUBLE
54592: EQUAL
54593: IFTRUE 54639
54595: LD_INT 32
54597: DOUBLE
54598: EQUAL
54599: IFTRUE 54639
54601: LD_INT 33
54603: DOUBLE
54604: EQUAL
54605: IFTRUE 54639
54607: LD_INT 27
54609: DOUBLE
54610: EQUAL
54611: IFTRUE 54639
54613: LD_INT 26
54615: DOUBLE
54616: EQUAL
54617: IFTRUE 54639
54619: LD_INT 28
54621: DOUBLE
54622: EQUAL
54623: IFTRUE 54639
54625: LD_INT 29
54627: DOUBLE
54628: EQUAL
54629: IFTRUE 54639
54631: LD_INT 30
54633: DOUBLE
54634: EQUAL
54635: IFTRUE 54639
54637: GO 54695
54639: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54640: LD_ADDR_VAR 0 9
54644: PUSH
54645: LD_VAR 0 59
54649: PUSH
54650: LD_VAR 0 60
54654: PUSH
54655: LD_VAR 0 61
54659: PUSH
54660: LD_VAR 0 62
54664: PUSH
54665: LD_VAR 0 63
54669: PUSH
54670: LD_VAR 0 64
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: PUSH
54683: LD_VAR 0 4
54687: PUSH
54688: LD_INT 1
54690: PLUS
54691: ARRAY
54692: ST_TO_ADDR
54693: GO 54696
54695: POP
// temp_list2 = [ ] ;
54696: LD_ADDR_VAR 0 10
54700: PUSH
54701: EMPTY
54702: ST_TO_ADDR
// for i in temp_list do
54703: LD_ADDR_VAR 0 8
54707: PUSH
54708: LD_VAR 0 9
54712: PUSH
54713: FOR_IN
54714: IFFALSE 54766
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54716: LD_ADDR_VAR 0 10
54720: PUSH
54721: LD_VAR 0 10
54725: PUSH
54726: LD_VAR 0 8
54730: PUSH
54731: LD_INT 1
54733: ARRAY
54734: PUSH
54735: LD_VAR 0 2
54739: PLUS
54740: PUSH
54741: LD_VAR 0 8
54745: PUSH
54746: LD_INT 2
54748: ARRAY
54749: PUSH
54750: LD_VAR 0 3
54754: PLUS
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: ADD
54763: ST_TO_ADDR
54764: GO 54713
54766: POP
54767: POP
// result = temp_list2 ;
54768: LD_ADDR_VAR 0 7
54772: PUSH
54773: LD_VAR 0 10
54777: ST_TO_ADDR
// end ;
54778: LD_VAR 0 7
54782: RET
// export function EnemyInRange ( unit , dist ) ; begin
54783: LD_INT 0
54785: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54786: LD_ADDR_VAR 0 3
54790: PUSH
54791: LD_VAR 0 1
54795: PPUSH
54796: CALL_OW 255
54800: PPUSH
54801: LD_VAR 0 1
54805: PPUSH
54806: CALL_OW 250
54810: PPUSH
54811: LD_VAR 0 1
54815: PPUSH
54816: CALL_OW 251
54820: PPUSH
54821: LD_VAR 0 2
54825: PPUSH
54826: CALL 28179 0 4
54830: PUSH
54831: LD_INT 4
54833: ARRAY
54834: ST_TO_ADDR
// end ;
54835: LD_VAR 0 3
54839: RET
// export function PlayerSeeMe ( unit ) ; begin
54840: LD_INT 0
54842: PPUSH
// result := See ( your_side , unit ) ;
54843: LD_ADDR_VAR 0 2
54847: PUSH
54848: LD_OWVAR 2
54852: PPUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: CALL_OW 292
54862: ST_TO_ADDR
// end ;
54863: LD_VAR 0 2
54867: RET
// export function ReverseDir ( unit ) ; begin
54868: LD_INT 0
54870: PPUSH
// if not unit then
54871: LD_VAR 0 1
54875: NOT
54876: IFFALSE 54880
// exit ;
54878: GO 54903
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54880: LD_ADDR_VAR 0 2
54884: PUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 254
54894: PUSH
54895: LD_INT 3
54897: PLUS
54898: PUSH
54899: LD_INT 6
54901: MOD
54902: ST_TO_ADDR
// end ;
54903: LD_VAR 0 2
54907: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54908: LD_INT 0
54910: PPUSH
54911: PPUSH
54912: PPUSH
54913: PPUSH
54914: PPUSH
// if not hexes then
54915: LD_VAR 0 2
54919: NOT
54920: IFFALSE 54924
// exit ;
54922: GO 55072
// dist := 9999 ;
54924: LD_ADDR_VAR 0 5
54928: PUSH
54929: LD_INT 9999
54931: ST_TO_ADDR
// for i = 1 to hexes do
54932: LD_ADDR_VAR 0 4
54936: PUSH
54937: DOUBLE
54938: LD_INT 1
54940: DEC
54941: ST_TO_ADDR
54942: LD_VAR 0 2
54946: PUSH
54947: FOR_TO
54948: IFFALSE 55060
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54950: LD_VAR 0 1
54954: PPUSH
54955: LD_VAR 0 2
54959: PUSH
54960: LD_VAR 0 4
54964: ARRAY
54965: PUSH
54966: LD_INT 1
54968: ARRAY
54969: PPUSH
54970: LD_VAR 0 2
54974: PUSH
54975: LD_VAR 0 4
54979: ARRAY
54980: PUSH
54981: LD_INT 2
54983: ARRAY
54984: PPUSH
54985: CALL_OW 297
54989: PUSH
54990: LD_VAR 0 5
54994: LESS
54995: IFFALSE 55058
// begin hex := hexes [ i ] ;
54997: LD_ADDR_VAR 0 7
55001: PUSH
55002: LD_VAR 0 2
55006: PUSH
55007: LD_VAR 0 4
55011: ARRAY
55012: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55013: LD_ADDR_VAR 0 5
55017: PUSH
55018: LD_VAR 0 1
55022: PPUSH
55023: LD_VAR 0 2
55027: PUSH
55028: LD_VAR 0 4
55032: ARRAY
55033: PUSH
55034: LD_INT 1
55036: ARRAY
55037: PPUSH
55038: LD_VAR 0 2
55042: PUSH
55043: LD_VAR 0 4
55047: ARRAY
55048: PUSH
55049: LD_INT 2
55051: ARRAY
55052: PPUSH
55053: CALL_OW 297
55057: ST_TO_ADDR
// end ; end ;
55058: GO 54947
55060: POP
55061: POP
// result := hex ;
55062: LD_ADDR_VAR 0 3
55066: PUSH
55067: LD_VAR 0 7
55071: ST_TO_ADDR
// end ;
55072: LD_VAR 0 3
55076: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55077: LD_INT 0
55079: PPUSH
55080: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55081: LD_VAR 0 1
55085: NOT
55086: PUSH
55087: LD_VAR 0 1
55091: PUSH
55092: LD_INT 21
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 23
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PPUSH
55116: CALL_OW 69
55120: IN
55121: NOT
55122: OR
55123: IFFALSE 55127
// exit ;
55125: GO 55174
// for i = 1 to 3 do
55127: LD_ADDR_VAR 0 3
55131: PUSH
55132: DOUBLE
55133: LD_INT 1
55135: DEC
55136: ST_TO_ADDR
55137: LD_INT 3
55139: PUSH
55140: FOR_TO
55141: IFFALSE 55172
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55143: LD_VAR 0 1
55147: PPUSH
55148: CALL_OW 250
55152: PPUSH
55153: LD_VAR 0 1
55157: PPUSH
55158: CALL_OW 251
55162: PPUSH
55163: LD_INT 1
55165: PPUSH
55166: CALL_OW 453
55170: GO 55140
55172: POP
55173: POP
// end ;
55174: LD_VAR 0 2
55178: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55179: LD_INT 0
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55187: LD_VAR 0 1
55191: NOT
55192: PUSH
55193: LD_VAR 0 2
55197: NOT
55198: OR
55199: PUSH
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL_OW 314
55209: OR
55210: IFFALSE 55214
// exit ;
55212: GO 55655
// x := GetX ( enemy_unit ) ;
55214: LD_ADDR_VAR 0 7
55218: PUSH
55219: LD_VAR 0 2
55223: PPUSH
55224: CALL_OW 250
55228: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55229: LD_ADDR_VAR 0 8
55233: PUSH
55234: LD_VAR 0 2
55238: PPUSH
55239: CALL_OW 251
55243: ST_TO_ADDR
// if not x or not y then
55244: LD_VAR 0 7
55248: NOT
55249: PUSH
55250: LD_VAR 0 8
55254: NOT
55255: OR
55256: IFFALSE 55260
// exit ;
55258: GO 55655
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55260: LD_ADDR_VAR 0 6
55264: PUSH
55265: LD_VAR 0 7
55269: PPUSH
55270: LD_INT 0
55272: PPUSH
55273: LD_INT 4
55275: PPUSH
55276: CALL_OW 272
55280: PUSH
55281: LD_VAR 0 8
55285: PPUSH
55286: LD_INT 0
55288: PPUSH
55289: LD_INT 4
55291: PPUSH
55292: CALL_OW 273
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_VAR 0 7
55305: PPUSH
55306: LD_INT 1
55308: PPUSH
55309: LD_INT 4
55311: PPUSH
55312: CALL_OW 272
55316: PUSH
55317: LD_VAR 0 8
55321: PPUSH
55322: LD_INT 1
55324: PPUSH
55325: LD_INT 4
55327: PPUSH
55328: CALL_OW 273
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_VAR 0 7
55341: PPUSH
55342: LD_INT 2
55344: PPUSH
55345: LD_INT 4
55347: PPUSH
55348: CALL_OW 272
55352: PUSH
55353: LD_VAR 0 8
55357: PPUSH
55358: LD_INT 2
55360: PPUSH
55361: LD_INT 4
55363: PPUSH
55364: CALL_OW 273
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_VAR 0 7
55377: PPUSH
55378: LD_INT 3
55380: PPUSH
55381: LD_INT 4
55383: PPUSH
55384: CALL_OW 272
55388: PUSH
55389: LD_VAR 0 8
55393: PPUSH
55394: LD_INT 3
55396: PPUSH
55397: LD_INT 4
55399: PPUSH
55400: CALL_OW 273
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_VAR 0 7
55413: PPUSH
55414: LD_INT 4
55416: PPUSH
55417: LD_INT 4
55419: PPUSH
55420: CALL_OW 272
55424: PUSH
55425: LD_VAR 0 8
55429: PPUSH
55430: LD_INT 4
55432: PPUSH
55433: LD_INT 4
55435: PPUSH
55436: CALL_OW 273
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_VAR 0 7
55449: PPUSH
55450: LD_INT 5
55452: PPUSH
55453: LD_INT 4
55455: PPUSH
55456: CALL_OW 272
55460: PUSH
55461: LD_VAR 0 8
55465: PPUSH
55466: LD_INT 5
55468: PPUSH
55469: LD_INT 4
55471: PPUSH
55472: CALL_OW 273
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// for i = tmp downto 1 do
55489: LD_ADDR_VAR 0 4
55493: PUSH
55494: DOUBLE
55495: LD_VAR 0 6
55499: INC
55500: ST_TO_ADDR
55501: LD_INT 1
55503: PUSH
55504: FOR_DOWNTO
55505: IFFALSE 55606
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55507: LD_VAR 0 6
55511: PUSH
55512: LD_VAR 0 4
55516: ARRAY
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PPUSH
55522: LD_VAR 0 6
55526: PUSH
55527: LD_VAR 0 4
55531: ARRAY
55532: PUSH
55533: LD_INT 2
55535: ARRAY
55536: PPUSH
55537: CALL_OW 488
55541: NOT
55542: PUSH
55543: LD_VAR 0 6
55547: PUSH
55548: LD_VAR 0 4
55552: ARRAY
55553: PUSH
55554: LD_INT 1
55556: ARRAY
55557: PPUSH
55558: LD_VAR 0 6
55562: PUSH
55563: LD_VAR 0 4
55567: ARRAY
55568: PUSH
55569: LD_INT 2
55571: ARRAY
55572: PPUSH
55573: CALL_OW 428
55577: PUSH
55578: LD_INT 0
55580: NONEQUAL
55581: OR
55582: IFFALSE 55604
// tmp := Delete ( tmp , i ) ;
55584: LD_ADDR_VAR 0 6
55588: PUSH
55589: LD_VAR 0 6
55593: PPUSH
55594: LD_VAR 0 4
55598: PPUSH
55599: CALL_OW 3
55603: ST_TO_ADDR
55604: GO 55504
55606: POP
55607: POP
// j := GetClosestHex ( unit , tmp ) ;
55608: LD_ADDR_VAR 0 5
55612: PUSH
55613: LD_VAR 0 1
55617: PPUSH
55618: LD_VAR 0 6
55622: PPUSH
55623: CALL 54908 0 2
55627: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55628: LD_VAR 0 1
55632: PPUSH
55633: LD_VAR 0 5
55637: PUSH
55638: LD_INT 1
55640: ARRAY
55641: PPUSH
55642: LD_VAR 0 5
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PPUSH
55651: CALL_OW 111
// end ;
55655: LD_VAR 0 3
55659: RET
// export function PrepareApemanSoldier ( ) ; begin
55660: LD_INT 0
55662: PPUSH
// uc_nation := 0 ;
55663: LD_ADDR_OWVAR 21
55667: PUSH
55668: LD_INT 0
55670: ST_TO_ADDR
// hc_sex := sex_male ;
55671: LD_ADDR_OWVAR 27
55675: PUSH
55676: LD_INT 1
55678: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55679: LD_ADDR_OWVAR 28
55683: PUSH
55684: LD_INT 15
55686: ST_TO_ADDR
// hc_gallery :=  ;
55687: LD_ADDR_OWVAR 33
55691: PUSH
55692: LD_STRING 
55694: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55695: LD_ADDR_OWVAR 31
55699: PUSH
55700: LD_INT 0
55702: PPUSH
55703: LD_INT 3
55705: PPUSH
55706: CALL_OW 12
55710: PUSH
55711: LD_INT 0
55713: PPUSH
55714: LD_INT 3
55716: PPUSH
55717: CALL_OW 12
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// end ;
55734: LD_VAR 0 1
55738: RET
// export function PrepareApemanEngineer ( ) ; begin
55739: LD_INT 0
55741: PPUSH
// uc_nation := 0 ;
55742: LD_ADDR_OWVAR 21
55746: PUSH
55747: LD_INT 0
55749: ST_TO_ADDR
// hc_sex := sex_male ;
55750: LD_ADDR_OWVAR 27
55754: PUSH
55755: LD_INT 1
55757: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55758: LD_ADDR_OWVAR 28
55762: PUSH
55763: LD_INT 16
55765: ST_TO_ADDR
// hc_gallery :=  ;
55766: LD_ADDR_OWVAR 33
55770: PUSH
55771: LD_STRING 
55773: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55774: LD_ADDR_OWVAR 31
55778: PUSH
55779: LD_INT 0
55781: PPUSH
55782: LD_INT 3
55784: PPUSH
55785: CALL_OW 12
55789: PUSH
55790: LD_INT 0
55792: PPUSH
55793: LD_INT 3
55795: PPUSH
55796: CALL_OW 12
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: ST_TO_ADDR
// end ;
55813: LD_VAR 0 1
55817: RET
// export function PrepareApeman ( agressivity ) ; begin
55818: LD_INT 0
55820: PPUSH
// uc_side := 0 ;
55821: LD_ADDR_OWVAR 20
55825: PUSH
55826: LD_INT 0
55828: ST_TO_ADDR
// uc_nation := 0 ;
55829: LD_ADDR_OWVAR 21
55833: PUSH
55834: LD_INT 0
55836: ST_TO_ADDR
// hc_sex := sex_male ;
55837: LD_ADDR_OWVAR 27
55841: PUSH
55842: LD_INT 1
55844: ST_TO_ADDR
// hc_class := class_apeman ;
55845: LD_ADDR_OWVAR 28
55849: PUSH
55850: LD_INT 12
55852: ST_TO_ADDR
// hc_gallery :=  ;
55853: LD_ADDR_OWVAR 33
55857: PUSH
55858: LD_STRING 
55860: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55861: LD_ADDR_OWVAR 35
55865: PUSH
55866: LD_VAR 0 1
55870: NEG
55871: PPUSH
55872: LD_VAR 0 1
55876: PPUSH
55877: CALL_OW 12
55881: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55882: LD_ADDR_OWVAR 31
55886: PUSH
55887: LD_INT 0
55889: PPUSH
55890: LD_INT 3
55892: PPUSH
55893: CALL_OW 12
55897: PUSH
55898: LD_INT 0
55900: PPUSH
55901: LD_INT 3
55903: PPUSH
55904: CALL_OW 12
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// end ;
55921: LD_VAR 0 2
55925: RET
// export function PrepareTiger ( agressivity ) ; begin
55926: LD_INT 0
55928: PPUSH
// uc_side := 0 ;
55929: LD_ADDR_OWVAR 20
55933: PUSH
55934: LD_INT 0
55936: ST_TO_ADDR
// uc_nation := 0 ;
55937: LD_ADDR_OWVAR 21
55941: PUSH
55942: LD_INT 0
55944: ST_TO_ADDR
// hc_class := class_tiger ;
55945: LD_ADDR_OWVAR 28
55949: PUSH
55950: LD_INT 14
55952: ST_TO_ADDR
// hc_gallery :=  ;
55953: LD_ADDR_OWVAR 33
55957: PUSH
55958: LD_STRING 
55960: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55961: LD_ADDR_OWVAR 35
55965: PUSH
55966: LD_VAR 0 1
55970: NEG
55971: PPUSH
55972: LD_VAR 0 1
55976: PPUSH
55977: CALL_OW 12
55981: ST_TO_ADDR
// end ;
55982: LD_VAR 0 2
55986: RET
// export function PrepareEnchidna ( ) ; begin
55987: LD_INT 0
55989: PPUSH
// uc_side := 0 ;
55990: LD_ADDR_OWVAR 20
55994: PUSH
55995: LD_INT 0
55997: ST_TO_ADDR
// uc_nation := 0 ;
55998: LD_ADDR_OWVAR 21
56002: PUSH
56003: LD_INT 0
56005: ST_TO_ADDR
// hc_class := class_baggie ;
56006: LD_ADDR_OWVAR 28
56010: PUSH
56011: LD_INT 13
56013: ST_TO_ADDR
// hc_gallery :=  ;
56014: LD_ADDR_OWVAR 33
56018: PUSH
56019: LD_STRING 
56021: ST_TO_ADDR
// end ;
56022: LD_VAR 0 1
56026: RET
// export function PrepareFrog ( ) ; begin
56027: LD_INT 0
56029: PPUSH
// uc_side := 0 ;
56030: LD_ADDR_OWVAR 20
56034: PUSH
56035: LD_INT 0
56037: ST_TO_ADDR
// uc_nation := 0 ;
56038: LD_ADDR_OWVAR 21
56042: PUSH
56043: LD_INT 0
56045: ST_TO_ADDR
// hc_class := class_frog ;
56046: LD_ADDR_OWVAR 28
56050: PUSH
56051: LD_INT 19
56053: ST_TO_ADDR
// hc_gallery :=  ;
56054: LD_ADDR_OWVAR 33
56058: PUSH
56059: LD_STRING 
56061: ST_TO_ADDR
// end ;
56062: LD_VAR 0 1
56066: RET
// export function PrepareFish ( ) ; begin
56067: LD_INT 0
56069: PPUSH
// uc_side := 0 ;
56070: LD_ADDR_OWVAR 20
56074: PUSH
56075: LD_INT 0
56077: ST_TO_ADDR
// uc_nation := 0 ;
56078: LD_ADDR_OWVAR 21
56082: PUSH
56083: LD_INT 0
56085: ST_TO_ADDR
// hc_class := class_fish ;
56086: LD_ADDR_OWVAR 28
56090: PUSH
56091: LD_INT 20
56093: ST_TO_ADDR
// hc_gallery :=  ;
56094: LD_ADDR_OWVAR 33
56098: PUSH
56099: LD_STRING 
56101: ST_TO_ADDR
// end ;
56102: LD_VAR 0 1
56106: RET
// export function PrepareBird ( ) ; begin
56107: LD_INT 0
56109: PPUSH
// uc_side := 0 ;
56110: LD_ADDR_OWVAR 20
56114: PUSH
56115: LD_INT 0
56117: ST_TO_ADDR
// uc_nation := 0 ;
56118: LD_ADDR_OWVAR 21
56122: PUSH
56123: LD_INT 0
56125: ST_TO_ADDR
// hc_class := class_phororhacos ;
56126: LD_ADDR_OWVAR 28
56130: PUSH
56131: LD_INT 18
56133: ST_TO_ADDR
// hc_gallery :=  ;
56134: LD_ADDR_OWVAR 33
56138: PUSH
56139: LD_STRING 
56141: ST_TO_ADDR
// end ;
56142: LD_VAR 0 1
56146: RET
// export function PrepareHorse ( ) ; begin
56147: LD_INT 0
56149: PPUSH
// uc_side := 0 ;
56150: LD_ADDR_OWVAR 20
56154: PUSH
56155: LD_INT 0
56157: ST_TO_ADDR
// uc_nation := 0 ;
56158: LD_ADDR_OWVAR 21
56162: PUSH
56163: LD_INT 0
56165: ST_TO_ADDR
// hc_class := class_horse ;
56166: LD_ADDR_OWVAR 28
56170: PUSH
56171: LD_INT 21
56173: ST_TO_ADDR
// hc_gallery :=  ;
56174: LD_ADDR_OWVAR 33
56178: PUSH
56179: LD_STRING 
56181: ST_TO_ADDR
// end ;
56182: LD_VAR 0 1
56186: RET
// export function PrepareMastodont ( ) ; begin
56187: LD_INT 0
56189: PPUSH
// uc_side := 0 ;
56190: LD_ADDR_OWVAR 20
56194: PUSH
56195: LD_INT 0
56197: ST_TO_ADDR
// uc_nation := 0 ;
56198: LD_ADDR_OWVAR 21
56202: PUSH
56203: LD_INT 0
56205: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56206: LD_ADDR_OWVAR 37
56210: PUSH
56211: LD_INT 31
56213: ST_TO_ADDR
// vc_control := control_rider ;
56214: LD_ADDR_OWVAR 38
56218: PUSH
56219: LD_INT 4
56221: ST_TO_ADDR
// end ;
56222: LD_VAR 0 1
56226: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56227: LD_INT 0
56229: PPUSH
56230: PPUSH
56231: PPUSH
// uc_side = 0 ;
56232: LD_ADDR_OWVAR 20
56236: PUSH
56237: LD_INT 0
56239: ST_TO_ADDR
// uc_nation = 0 ;
56240: LD_ADDR_OWVAR 21
56244: PUSH
56245: LD_INT 0
56247: ST_TO_ADDR
// InitHc_All ( ) ;
56248: CALL_OW 584
// InitVc ;
56252: CALL_OW 20
// if mastodonts then
56256: LD_VAR 0 6
56260: IFFALSE 56327
// for i = 1 to mastodonts do
56262: LD_ADDR_VAR 0 11
56266: PUSH
56267: DOUBLE
56268: LD_INT 1
56270: DEC
56271: ST_TO_ADDR
56272: LD_VAR 0 6
56276: PUSH
56277: FOR_TO
56278: IFFALSE 56325
// begin vc_chassis := 31 ;
56280: LD_ADDR_OWVAR 37
56284: PUSH
56285: LD_INT 31
56287: ST_TO_ADDR
// vc_control := control_rider ;
56288: LD_ADDR_OWVAR 38
56292: PUSH
56293: LD_INT 4
56295: ST_TO_ADDR
// animal := CreateVehicle ;
56296: LD_ADDR_VAR 0 12
56300: PUSH
56301: CALL_OW 45
56305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56306: LD_VAR 0 12
56310: PPUSH
56311: LD_VAR 0 8
56315: PPUSH
56316: LD_INT 0
56318: PPUSH
56319: CALL 58462 0 3
// end ;
56323: GO 56277
56325: POP
56326: POP
// if horses then
56327: LD_VAR 0 5
56331: IFFALSE 56398
// for i = 1 to horses do
56333: LD_ADDR_VAR 0 11
56337: PUSH
56338: DOUBLE
56339: LD_INT 1
56341: DEC
56342: ST_TO_ADDR
56343: LD_VAR 0 5
56347: PUSH
56348: FOR_TO
56349: IFFALSE 56396
// begin hc_class := 21 ;
56351: LD_ADDR_OWVAR 28
56355: PUSH
56356: LD_INT 21
56358: ST_TO_ADDR
// hc_gallery :=  ;
56359: LD_ADDR_OWVAR 33
56363: PUSH
56364: LD_STRING 
56366: ST_TO_ADDR
// animal := CreateHuman ;
56367: LD_ADDR_VAR 0 12
56371: PUSH
56372: CALL_OW 44
56376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56377: LD_VAR 0 12
56381: PPUSH
56382: LD_VAR 0 8
56386: PPUSH
56387: LD_INT 0
56389: PPUSH
56390: CALL 58462 0 3
// end ;
56394: GO 56348
56396: POP
56397: POP
// if birds then
56398: LD_VAR 0 1
56402: IFFALSE 56469
// for i = 1 to birds do
56404: LD_ADDR_VAR 0 11
56408: PUSH
56409: DOUBLE
56410: LD_INT 1
56412: DEC
56413: ST_TO_ADDR
56414: LD_VAR 0 1
56418: PUSH
56419: FOR_TO
56420: IFFALSE 56467
// begin hc_class = 18 ;
56422: LD_ADDR_OWVAR 28
56426: PUSH
56427: LD_INT 18
56429: ST_TO_ADDR
// hc_gallery =  ;
56430: LD_ADDR_OWVAR 33
56434: PUSH
56435: LD_STRING 
56437: ST_TO_ADDR
// animal := CreateHuman ;
56438: LD_ADDR_VAR 0 12
56442: PUSH
56443: CALL_OW 44
56447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56448: LD_VAR 0 12
56452: PPUSH
56453: LD_VAR 0 8
56457: PPUSH
56458: LD_INT 0
56460: PPUSH
56461: CALL 58462 0 3
// end ;
56465: GO 56419
56467: POP
56468: POP
// if tigers then
56469: LD_VAR 0 2
56473: IFFALSE 56557
// for i = 1 to tigers do
56475: LD_ADDR_VAR 0 11
56479: PUSH
56480: DOUBLE
56481: LD_INT 1
56483: DEC
56484: ST_TO_ADDR
56485: LD_VAR 0 2
56489: PUSH
56490: FOR_TO
56491: IFFALSE 56555
// begin hc_class = class_tiger ;
56493: LD_ADDR_OWVAR 28
56497: PUSH
56498: LD_INT 14
56500: ST_TO_ADDR
// hc_gallery =  ;
56501: LD_ADDR_OWVAR 33
56505: PUSH
56506: LD_STRING 
56508: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56509: LD_ADDR_OWVAR 35
56513: PUSH
56514: LD_INT 7
56516: NEG
56517: PPUSH
56518: LD_INT 7
56520: PPUSH
56521: CALL_OW 12
56525: ST_TO_ADDR
// animal := CreateHuman ;
56526: LD_ADDR_VAR 0 12
56530: PUSH
56531: CALL_OW 44
56535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56536: LD_VAR 0 12
56540: PPUSH
56541: LD_VAR 0 8
56545: PPUSH
56546: LD_INT 0
56548: PPUSH
56549: CALL 58462 0 3
// end ;
56553: GO 56490
56555: POP
56556: POP
// if apemans then
56557: LD_VAR 0 3
56561: IFFALSE 56684
// for i = 1 to apemans do
56563: LD_ADDR_VAR 0 11
56567: PUSH
56568: DOUBLE
56569: LD_INT 1
56571: DEC
56572: ST_TO_ADDR
56573: LD_VAR 0 3
56577: PUSH
56578: FOR_TO
56579: IFFALSE 56682
// begin hc_class = class_apeman ;
56581: LD_ADDR_OWVAR 28
56585: PUSH
56586: LD_INT 12
56588: ST_TO_ADDR
// hc_gallery =  ;
56589: LD_ADDR_OWVAR 33
56593: PUSH
56594: LD_STRING 
56596: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56597: LD_ADDR_OWVAR 35
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PPUSH
56606: LD_INT 2
56608: PPUSH
56609: CALL_OW 12
56613: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56614: LD_ADDR_OWVAR 31
56618: PUSH
56619: LD_INT 1
56621: PPUSH
56622: LD_INT 3
56624: PPUSH
56625: CALL_OW 12
56629: PUSH
56630: LD_INT 1
56632: PPUSH
56633: LD_INT 3
56635: PPUSH
56636: CALL_OW 12
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// animal := CreateHuman ;
56653: LD_ADDR_VAR 0 12
56657: PUSH
56658: CALL_OW 44
56662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56663: LD_VAR 0 12
56667: PPUSH
56668: LD_VAR 0 8
56672: PPUSH
56673: LD_INT 0
56675: PPUSH
56676: CALL 58462 0 3
// end ;
56680: GO 56578
56682: POP
56683: POP
// if enchidnas then
56684: LD_VAR 0 4
56688: IFFALSE 56755
// for i = 1 to enchidnas do
56690: LD_ADDR_VAR 0 11
56694: PUSH
56695: DOUBLE
56696: LD_INT 1
56698: DEC
56699: ST_TO_ADDR
56700: LD_VAR 0 4
56704: PUSH
56705: FOR_TO
56706: IFFALSE 56753
// begin hc_class = 13 ;
56708: LD_ADDR_OWVAR 28
56712: PUSH
56713: LD_INT 13
56715: ST_TO_ADDR
// hc_gallery =  ;
56716: LD_ADDR_OWVAR 33
56720: PUSH
56721: LD_STRING 
56723: ST_TO_ADDR
// animal := CreateHuman ;
56724: LD_ADDR_VAR 0 12
56728: PUSH
56729: CALL_OW 44
56733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56734: LD_VAR 0 12
56738: PPUSH
56739: LD_VAR 0 8
56743: PPUSH
56744: LD_INT 0
56746: PPUSH
56747: CALL 58462 0 3
// end ;
56751: GO 56705
56753: POP
56754: POP
// if fishes then
56755: LD_VAR 0 7
56759: IFFALSE 56826
// for i = 1 to fishes do
56761: LD_ADDR_VAR 0 11
56765: PUSH
56766: DOUBLE
56767: LD_INT 1
56769: DEC
56770: ST_TO_ADDR
56771: LD_VAR 0 7
56775: PUSH
56776: FOR_TO
56777: IFFALSE 56824
// begin hc_class = 20 ;
56779: LD_ADDR_OWVAR 28
56783: PUSH
56784: LD_INT 20
56786: ST_TO_ADDR
// hc_gallery =  ;
56787: LD_ADDR_OWVAR 33
56791: PUSH
56792: LD_STRING 
56794: ST_TO_ADDR
// animal := CreateHuman ;
56795: LD_ADDR_VAR 0 12
56799: PUSH
56800: CALL_OW 44
56804: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56805: LD_VAR 0 12
56809: PPUSH
56810: LD_VAR 0 9
56814: PPUSH
56815: LD_INT 0
56817: PPUSH
56818: CALL 58462 0 3
// end ;
56822: GO 56776
56824: POP
56825: POP
// end ;
56826: LD_VAR 0 10
56830: RET
// export function WantHeal ( sci , unit ) ; begin
56831: LD_INT 0
56833: PPUSH
// if GetTaskList ( sci ) > 0 then
56834: LD_VAR 0 1
56838: PPUSH
56839: CALL_OW 437
56843: PUSH
56844: LD_INT 0
56846: GREATER
56847: IFFALSE 56917
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL_OW 437
56858: PUSH
56859: LD_INT 1
56861: ARRAY
56862: PUSH
56863: LD_INT 1
56865: ARRAY
56866: PUSH
56867: LD_STRING l
56869: EQUAL
56870: PUSH
56871: LD_VAR 0 1
56875: PPUSH
56876: CALL_OW 437
56880: PUSH
56881: LD_INT 1
56883: ARRAY
56884: PUSH
56885: LD_INT 4
56887: ARRAY
56888: PUSH
56889: LD_VAR 0 2
56893: EQUAL
56894: AND
56895: IFFALSE 56907
// result := true else
56897: LD_ADDR_VAR 0 3
56901: PUSH
56902: LD_INT 1
56904: ST_TO_ADDR
56905: GO 56915
// result := false ;
56907: LD_ADDR_VAR 0 3
56911: PUSH
56912: LD_INT 0
56914: ST_TO_ADDR
// end else
56915: GO 56925
// result := false ;
56917: LD_ADDR_VAR 0 3
56921: PUSH
56922: LD_INT 0
56924: ST_TO_ADDR
// end ;
56925: LD_VAR 0 3
56929: RET
// export function HealTarget ( sci ) ; begin
56930: LD_INT 0
56932: PPUSH
// if not sci then
56933: LD_VAR 0 1
56937: NOT
56938: IFFALSE 56942
// exit ;
56940: GO 57007
// result := 0 ;
56942: LD_ADDR_VAR 0 2
56946: PUSH
56947: LD_INT 0
56949: ST_TO_ADDR
// if GetTaskList ( sci ) then
56950: LD_VAR 0 1
56954: PPUSH
56955: CALL_OW 437
56959: IFFALSE 57007
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56961: LD_VAR 0 1
56965: PPUSH
56966: CALL_OW 437
56970: PUSH
56971: LD_INT 1
56973: ARRAY
56974: PUSH
56975: LD_INT 1
56977: ARRAY
56978: PUSH
56979: LD_STRING l
56981: EQUAL
56982: IFFALSE 57007
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56984: LD_ADDR_VAR 0 2
56988: PUSH
56989: LD_VAR 0 1
56993: PPUSH
56994: CALL_OW 437
56998: PUSH
56999: LD_INT 1
57001: ARRAY
57002: PUSH
57003: LD_INT 4
57005: ARRAY
57006: ST_TO_ADDR
// end ;
57007: LD_VAR 0 2
57011: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57012: LD_INT 0
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
// if not base_units then
57018: LD_VAR 0 1
57022: NOT
57023: IFFALSE 57027
// exit ;
57025: GO 57114
// result := false ;
57027: LD_ADDR_VAR 0 2
57031: PUSH
57032: LD_INT 0
57034: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57035: LD_ADDR_VAR 0 5
57039: PUSH
57040: LD_VAR 0 1
57044: PPUSH
57045: LD_INT 21
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PPUSH
57055: CALL_OW 72
57059: ST_TO_ADDR
// if not tmp then
57060: LD_VAR 0 5
57064: NOT
57065: IFFALSE 57069
// exit ;
57067: GO 57114
// for i in tmp do
57069: LD_ADDR_VAR 0 3
57073: PUSH
57074: LD_VAR 0 5
57078: PUSH
57079: FOR_IN
57080: IFFALSE 57112
// begin result := EnemyInRange ( i , 22 ) ;
57082: LD_ADDR_VAR 0 2
57086: PUSH
57087: LD_VAR 0 3
57091: PPUSH
57092: LD_INT 22
57094: PPUSH
57095: CALL 54783 0 2
57099: ST_TO_ADDR
// if result then
57100: LD_VAR 0 2
57104: IFFALSE 57110
// exit ;
57106: POP
57107: POP
57108: GO 57114
// end ;
57110: GO 57079
57112: POP
57113: POP
// end ;
57114: LD_VAR 0 2
57118: RET
// export function FilterByTag ( units , tag ) ; begin
57119: LD_INT 0
57121: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57122: LD_ADDR_VAR 0 3
57126: PUSH
57127: LD_VAR 0 1
57131: PPUSH
57132: LD_INT 120
57134: PUSH
57135: LD_VAR 0 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PPUSH
57144: CALL_OW 72
57148: ST_TO_ADDR
// end ;
57149: LD_VAR 0 3
57153: RET
// export function IsDriver ( un ) ; begin
57154: LD_INT 0
57156: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57157: LD_ADDR_VAR 0 2
57161: PUSH
57162: LD_VAR 0 1
57166: PUSH
57167: LD_INT 55
57169: PUSH
57170: EMPTY
57171: LIST
57172: PPUSH
57173: CALL_OW 69
57177: IN
57178: ST_TO_ADDR
// end ;
57179: LD_VAR 0 2
57183: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57184: LD_INT 0
57186: PPUSH
57187: PPUSH
// list := [ ] ;
57188: LD_ADDR_VAR 0 5
57192: PUSH
57193: EMPTY
57194: ST_TO_ADDR
// case d of 0 :
57195: LD_VAR 0 3
57199: PUSH
57200: LD_INT 0
57202: DOUBLE
57203: EQUAL
57204: IFTRUE 57208
57206: GO 57341
57208: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57209: LD_ADDR_VAR 0 5
57213: PUSH
57214: LD_VAR 0 1
57218: PUSH
57219: LD_INT 4
57221: MINUS
57222: PUSH
57223: LD_VAR 0 2
57227: PUSH
57228: LD_INT 4
57230: MINUS
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: PUSH
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 3
57247: MINUS
57248: PUSH
57249: LD_VAR 0 2
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: PUSH
57262: LD_VAR 0 1
57266: PUSH
57267: LD_INT 4
57269: PLUS
57270: PUSH
57271: LD_VAR 0 2
57275: PUSH
57276: LD_INT 4
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: PUSH
57284: LD_VAR 0 1
57288: PUSH
57289: LD_INT 3
57291: PLUS
57292: PUSH
57293: LD_VAR 0 2
57297: PUSH
57298: LD_INT 3
57300: PLUS
57301: PUSH
57302: LD_INT 5
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: PUSH
57310: LD_VAR 0 1
57314: PUSH
57315: LD_VAR 0 2
57319: PUSH
57320: LD_INT 4
57322: PLUS
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// end ; 1 :
57339: GO 58039
57341: LD_INT 1
57343: DOUBLE
57344: EQUAL
57345: IFTRUE 57349
57347: GO 57482
57349: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57350: LD_ADDR_VAR 0 5
57354: PUSH
57355: LD_VAR 0 1
57359: PUSH
57360: LD_VAR 0 2
57364: PUSH
57365: LD_INT 4
57367: MINUS
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: PUSH
57377: LD_VAR 0 1
57381: PUSH
57382: LD_INT 3
57384: MINUS
57385: PUSH
57386: LD_VAR 0 2
57390: PUSH
57391: LD_INT 3
57393: MINUS
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: PUSH
57403: LD_VAR 0 1
57407: PUSH
57408: LD_INT 4
57410: MINUS
57411: PUSH
57412: LD_VAR 0 2
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: LD_VAR 0 1
57429: PUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_INT 3
57437: PLUS
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: PUSH
57447: LD_VAR 0 1
57451: PUSH
57452: LD_INT 4
57454: PLUS
57455: PUSH
57456: LD_VAR 0 2
57460: PUSH
57461: LD_INT 4
57463: PLUS
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// end ; 2 :
57480: GO 58039
57482: LD_INT 2
57484: DOUBLE
57485: EQUAL
57486: IFTRUE 57490
57488: GO 57619
57490: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57491: LD_ADDR_VAR 0 5
57495: PUSH
57496: LD_VAR 0 1
57500: PUSH
57501: LD_VAR 0 2
57505: PUSH
57506: LD_INT 3
57508: MINUS
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: PUSH
57518: LD_VAR 0 1
57522: PUSH
57523: LD_INT 4
57525: PLUS
57526: PUSH
57527: LD_VAR 0 2
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: PUSH
57540: LD_VAR 0 1
57544: PUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_INT 4
57552: PLUS
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: PUSH
57562: LD_VAR 0 1
57566: PUSH
57567: LD_INT 3
57569: MINUS
57570: PUSH
57571: LD_VAR 0 2
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: PUSH
57584: LD_VAR 0 1
57588: PUSH
57589: LD_INT 4
57591: MINUS
57592: PUSH
57593: LD_VAR 0 2
57597: PUSH
57598: LD_INT 4
57600: MINUS
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: ST_TO_ADDR
// end ; 3 :
57617: GO 58039
57619: LD_INT 3
57621: DOUBLE
57622: EQUAL
57623: IFTRUE 57627
57625: GO 57760
57627: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57628: LD_ADDR_VAR 0 5
57632: PUSH
57633: LD_VAR 0 1
57637: PUSH
57638: LD_INT 3
57640: PLUS
57641: PUSH
57642: LD_VAR 0 2
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: PUSH
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 4
57662: PLUS
57663: PUSH
57664: LD_VAR 0 2
57668: PUSH
57669: LD_INT 4
57671: PLUS
57672: PUSH
57673: LD_INT 5
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: PUSH
57681: LD_VAR 0 1
57685: PUSH
57686: LD_INT 4
57688: MINUS
57689: PUSH
57690: LD_VAR 0 2
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: PUSH
57703: LD_VAR 0 1
57707: PUSH
57708: LD_VAR 0 2
57712: PUSH
57713: LD_INT 4
57715: MINUS
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: PUSH
57725: LD_VAR 0 1
57729: PUSH
57730: LD_INT 3
57732: MINUS
57733: PUSH
57734: LD_VAR 0 2
57738: PUSH
57739: LD_INT 3
57741: MINUS
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// end ; 4 :
57758: GO 58039
57760: LD_INT 4
57762: DOUBLE
57763: EQUAL
57764: IFTRUE 57768
57766: GO 57901
57768: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57769: LD_ADDR_VAR 0 5
57773: PUSH
57774: LD_VAR 0 1
57778: PUSH
57779: LD_VAR 0 2
57783: PUSH
57784: LD_INT 4
57786: PLUS
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: PUSH
57796: LD_VAR 0 1
57800: PUSH
57801: LD_INT 3
57803: PLUS
57804: PUSH
57805: LD_VAR 0 2
57809: PUSH
57810: LD_INT 3
57812: PLUS
57813: PUSH
57814: LD_INT 5
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: PUSH
57822: LD_VAR 0 1
57826: PUSH
57827: LD_INT 4
57829: PLUS
57830: PUSH
57831: LD_VAR 0 2
57835: PUSH
57836: LD_INT 4
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: PUSH
57844: LD_VAR 0 1
57848: PUSH
57849: LD_VAR 0 2
57853: PUSH
57854: LD_INT 3
57856: MINUS
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: PUSH
57866: LD_VAR 0 1
57870: PUSH
57871: LD_INT 4
57873: MINUS
57874: PUSH
57875: LD_VAR 0 2
57879: PUSH
57880: LD_INT 4
57882: MINUS
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: ST_TO_ADDR
// end ; 5 :
57899: GO 58039
57901: LD_INT 5
57903: DOUBLE
57904: EQUAL
57905: IFTRUE 57909
57907: GO 58038
57909: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57910: LD_ADDR_VAR 0 5
57914: PUSH
57915: LD_VAR 0 1
57919: PUSH
57920: LD_INT 4
57922: MINUS
57923: PUSH
57924: LD_VAR 0 2
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: PUSH
57937: LD_VAR 0 1
57941: PUSH
57942: LD_VAR 0 2
57946: PUSH
57947: LD_INT 4
57949: MINUS
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: LIST
57958: PUSH
57959: LD_VAR 0 1
57963: PUSH
57964: LD_INT 4
57966: PLUS
57967: PUSH
57968: LD_VAR 0 2
57972: PUSH
57973: LD_INT 4
57975: PLUS
57976: PUSH
57977: LD_INT 5
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: PUSH
57985: LD_VAR 0 1
57989: PUSH
57990: LD_INT 3
57992: PLUS
57993: PUSH
57994: LD_VAR 0 2
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: PUSH
58007: LD_VAR 0 1
58011: PUSH
58012: LD_VAR 0 2
58016: PUSH
58017: LD_INT 3
58019: PLUS
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// end ; end ;
58036: GO 58039
58038: POP
// result := list ;
58039: LD_ADDR_VAR 0 4
58043: PUSH
58044: LD_VAR 0 5
58048: ST_TO_ADDR
// end ;
58049: LD_VAR 0 4
58053: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58054: LD_INT 0
58056: PPUSH
58057: PPUSH
58058: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58059: LD_VAR 0 1
58063: NOT
58064: PUSH
58065: LD_VAR 0 2
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: LD_INT 4
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: IN
58088: NOT
58089: OR
58090: IFFALSE 58094
// exit ;
58092: GO 58186
// tmp := [ ] ;
58094: LD_ADDR_VAR 0 5
58098: PUSH
58099: EMPTY
58100: ST_TO_ADDR
// for i in units do
58101: LD_ADDR_VAR 0 4
58105: PUSH
58106: LD_VAR 0 1
58110: PUSH
58111: FOR_IN
58112: IFFALSE 58155
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58114: LD_ADDR_VAR 0 5
58118: PUSH
58119: LD_VAR 0 5
58123: PPUSH
58124: LD_VAR 0 5
58128: PUSH
58129: LD_INT 1
58131: PLUS
58132: PPUSH
58133: LD_VAR 0 4
58137: PPUSH
58138: LD_VAR 0 2
58142: PPUSH
58143: CALL_OW 259
58147: PPUSH
58148: CALL_OW 2
58152: ST_TO_ADDR
58153: GO 58111
58155: POP
58156: POP
// if not tmp then
58157: LD_VAR 0 5
58161: NOT
58162: IFFALSE 58166
// exit ;
58164: GO 58186
// result := SortListByListDesc ( units , tmp ) ;
58166: LD_ADDR_VAR 0 3
58170: PUSH
58171: LD_VAR 0 1
58175: PPUSH
58176: LD_VAR 0 5
58180: PPUSH
58181: CALL_OW 77
58185: ST_TO_ADDR
// end ;
58186: LD_VAR 0 3
58190: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58191: LD_INT 0
58193: PPUSH
58194: PPUSH
58195: PPUSH
// result := false ;
58196: LD_ADDR_VAR 0 3
58200: PUSH
58201: LD_INT 0
58203: ST_TO_ADDR
// x := GetX ( building ) ;
58204: LD_ADDR_VAR 0 4
58208: PUSH
58209: LD_VAR 0 2
58213: PPUSH
58214: CALL_OW 250
58218: ST_TO_ADDR
// y := GetY ( building ) ;
58219: LD_ADDR_VAR 0 5
58223: PUSH
58224: LD_VAR 0 2
58228: PPUSH
58229: CALL_OW 251
58233: ST_TO_ADDR
// if not building or not x or not y then
58234: LD_VAR 0 2
58238: NOT
58239: PUSH
58240: LD_VAR 0 4
58244: NOT
58245: OR
58246: PUSH
58247: LD_VAR 0 5
58251: NOT
58252: OR
58253: IFFALSE 58257
// exit ;
58255: GO 58349
// if GetTaskList ( unit ) then
58257: LD_VAR 0 1
58261: PPUSH
58262: CALL_OW 437
58266: IFFALSE 58349
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58268: LD_STRING e
58270: PUSH
58271: LD_VAR 0 1
58275: PPUSH
58276: CALL_OW 437
58280: PUSH
58281: LD_INT 1
58283: ARRAY
58284: PUSH
58285: LD_INT 1
58287: ARRAY
58288: EQUAL
58289: PUSH
58290: LD_VAR 0 4
58294: PUSH
58295: LD_VAR 0 1
58299: PPUSH
58300: CALL_OW 437
58304: PUSH
58305: LD_INT 1
58307: ARRAY
58308: PUSH
58309: LD_INT 2
58311: ARRAY
58312: EQUAL
58313: AND
58314: PUSH
58315: LD_VAR 0 5
58319: PUSH
58320: LD_VAR 0 1
58324: PPUSH
58325: CALL_OW 437
58329: PUSH
58330: LD_INT 1
58332: ARRAY
58333: PUSH
58334: LD_INT 3
58336: ARRAY
58337: EQUAL
58338: AND
58339: IFFALSE 58349
// result := true end ;
58341: LD_ADDR_VAR 0 3
58345: PUSH
58346: LD_INT 1
58348: ST_TO_ADDR
// end ;
58349: LD_VAR 0 3
58353: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58354: LD_INT 0
58356: PPUSH
// result := false ;
58357: LD_ADDR_VAR 0 4
58361: PUSH
58362: LD_INT 0
58364: ST_TO_ADDR
// if GetTaskList ( unit ) then
58365: LD_VAR 0 1
58369: PPUSH
58370: CALL_OW 437
58374: IFFALSE 58457
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58376: LD_STRING M
58378: PUSH
58379: LD_VAR 0 1
58383: PPUSH
58384: CALL_OW 437
58388: PUSH
58389: LD_INT 1
58391: ARRAY
58392: PUSH
58393: LD_INT 1
58395: ARRAY
58396: EQUAL
58397: PUSH
58398: LD_VAR 0 2
58402: PUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 437
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: PUSH
58417: LD_INT 2
58419: ARRAY
58420: EQUAL
58421: AND
58422: PUSH
58423: LD_VAR 0 3
58427: PUSH
58428: LD_VAR 0 1
58432: PPUSH
58433: CALL_OW 437
58437: PUSH
58438: LD_INT 1
58440: ARRAY
58441: PUSH
58442: LD_INT 3
58444: ARRAY
58445: EQUAL
58446: AND
58447: IFFALSE 58457
// result := true ;
58449: LD_ADDR_VAR 0 4
58453: PUSH
58454: LD_INT 1
58456: ST_TO_ADDR
// end ; end ;
58457: LD_VAR 0 4
58461: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58462: LD_INT 0
58464: PPUSH
58465: PPUSH
58466: PPUSH
58467: PPUSH
// if not unit or not area then
58468: LD_VAR 0 1
58472: NOT
58473: PUSH
58474: LD_VAR 0 2
58478: NOT
58479: OR
58480: IFFALSE 58484
// exit ;
58482: GO 58648
// tmp := AreaToList ( area , i ) ;
58484: LD_ADDR_VAR 0 6
58488: PUSH
58489: LD_VAR 0 2
58493: PPUSH
58494: LD_VAR 0 5
58498: PPUSH
58499: CALL_OW 517
58503: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58504: LD_ADDR_VAR 0 5
58508: PUSH
58509: DOUBLE
58510: LD_INT 1
58512: DEC
58513: ST_TO_ADDR
58514: LD_VAR 0 6
58518: PUSH
58519: LD_INT 1
58521: ARRAY
58522: PUSH
58523: FOR_TO
58524: IFFALSE 58646
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58526: LD_ADDR_VAR 0 7
58530: PUSH
58531: LD_VAR 0 6
58535: PUSH
58536: LD_INT 1
58538: ARRAY
58539: PUSH
58540: LD_VAR 0 5
58544: ARRAY
58545: PUSH
58546: LD_VAR 0 6
58550: PUSH
58551: LD_INT 2
58553: ARRAY
58554: PUSH
58555: LD_VAR 0 5
58559: ARRAY
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58565: LD_VAR 0 7
58569: PUSH
58570: LD_INT 1
58572: ARRAY
58573: PPUSH
58574: LD_VAR 0 7
58578: PUSH
58579: LD_INT 2
58581: ARRAY
58582: PPUSH
58583: CALL_OW 428
58587: PUSH
58588: LD_INT 0
58590: EQUAL
58591: IFFALSE 58644
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58593: LD_VAR 0 1
58597: PPUSH
58598: LD_VAR 0 7
58602: PUSH
58603: LD_INT 1
58605: ARRAY
58606: PPUSH
58607: LD_VAR 0 7
58611: PUSH
58612: LD_INT 2
58614: ARRAY
58615: PPUSH
58616: LD_VAR 0 3
58620: PPUSH
58621: CALL_OW 48
// result := IsPlaced ( unit ) ;
58625: LD_ADDR_VAR 0 4
58629: PUSH
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 305
58639: ST_TO_ADDR
// exit ;
58640: POP
58641: POP
58642: GO 58648
// end ; end ;
58644: GO 58523
58646: POP
58647: POP
// end ;
58648: LD_VAR 0 4
58652: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58653: LD_INT 0
58655: PPUSH
58656: PPUSH
58657: PPUSH
// if not side or side > 8 then
58658: LD_VAR 0 1
58662: NOT
58663: PUSH
58664: LD_VAR 0 1
58668: PUSH
58669: LD_INT 8
58671: GREATER
58672: OR
58673: IFFALSE 58677
// exit ;
58675: GO 58864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58677: LD_ADDR_VAR 0 4
58681: PUSH
58682: LD_INT 22
58684: PUSH
58685: LD_VAR 0 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 21
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PPUSH
58708: CALL_OW 69
58712: ST_TO_ADDR
// if not tmp then
58713: LD_VAR 0 4
58717: NOT
58718: IFFALSE 58722
// exit ;
58720: GO 58864
// enable_addtolog := true ;
58722: LD_ADDR_OWVAR 81
58726: PUSH
58727: LD_INT 1
58729: ST_TO_ADDR
// AddToLog ( [ ) ;
58730: LD_STRING [
58732: PPUSH
58733: CALL_OW 561
// for i in tmp do
58737: LD_ADDR_VAR 0 3
58741: PUSH
58742: LD_VAR 0 4
58746: PUSH
58747: FOR_IN
58748: IFFALSE 58855
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58750: LD_STRING [
58752: PUSH
58753: LD_VAR 0 3
58757: PPUSH
58758: CALL_OW 266
58762: STR
58763: PUSH
58764: LD_STRING , 
58766: STR
58767: PUSH
58768: LD_VAR 0 3
58772: PPUSH
58773: CALL_OW 250
58777: STR
58778: PUSH
58779: LD_STRING , 
58781: STR
58782: PUSH
58783: LD_VAR 0 3
58787: PPUSH
58788: CALL_OW 251
58792: STR
58793: PUSH
58794: LD_STRING , 
58796: STR
58797: PUSH
58798: LD_VAR 0 3
58802: PPUSH
58803: CALL_OW 254
58807: STR
58808: PUSH
58809: LD_STRING , 
58811: STR
58812: PUSH
58813: LD_VAR 0 3
58817: PPUSH
58818: LD_INT 1
58820: PPUSH
58821: CALL_OW 268
58825: STR
58826: PUSH
58827: LD_STRING , 
58829: STR
58830: PUSH
58831: LD_VAR 0 3
58835: PPUSH
58836: LD_INT 2
58838: PPUSH
58839: CALL_OW 268
58843: STR
58844: PUSH
58845: LD_STRING ],
58847: STR
58848: PPUSH
58849: CALL_OW 561
// end ;
58853: GO 58747
58855: POP
58856: POP
// AddToLog ( ]; ) ;
58857: LD_STRING ];
58859: PPUSH
58860: CALL_OW 561
// end ;
58864: LD_VAR 0 2
58868: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58869: LD_INT 0
58871: PPUSH
58872: PPUSH
58873: PPUSH
58874: PPUSH
58875: PPUSH
// if not area or not rate or not max then
58876: LD_VAR 0 1
58880: NOT
58881: PUSH
58882: LD_VAR 0 2
58886: NOT
58887: OR
58888: PUSH
58889: LD_VAR 0 4
58893: NOT
58894: OR
58895: IFFALSE 58899
// exit ;
58897: GO 59088
// while 1 do
58899: LD_INT 1
58901: IFFALSE 59088
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58903: LD_ADDR_VAR 0 9
58907: PUSH
58908: LD_VAR 0 1
58912: PPUSH
58913: LD_INT 1
58915: PPUSH
58916: CALL_OW 287
58920: PUSH
58921: LD_INT 10
58923: MUL
58924: ST_TO_ADDR
// r := rate / 10 ;
58925: LD_ADDR_VAR 0 7
58929: PUSH
58930: LD_VAR 0 2
58934: PUSH
58935: LD_INT 10
58937: DIVREAL
58938: ST_TO_ADDR
// time := 1 1$00 ;
58939: LD_ADDR_VAR 0 8
58943: PUSH
58944: LD_INT 2100
58946: ST_TO_ADDR
// if amount < min then
58947: LD_VAR 0 9
58951: PUSH
58952: LD_VAR 0 3
58956: LESS
58957: IFFALSE 58975
// r := r * 2 else
58959: LD_ADDR_VAR 0 7
58963: PUSH
58964: LD_VAR 0 7
58968: PUSH
58969: LD_INT 2
58971: MUL
58972: ST_TO_ADDR
58973: GO 59001
// if amount > max then
58975: LD_VAR 0 9
58979: PUSH
58980: LD_VAR 0 4
58984: GREATER
58985: IFFALSE 59001
// r := r / 2 ;
58987: LD_ADDR_VAR 0 7
58991: PUSH
58992: LD_VAR 0 7
58996: PUSH
58997: LD_INT 2
58999: DIVREAL
59000: ST_TO_ADDR
// time := time / r ;
59001: LD_ADDR_VAR 0 8
59005: PUSH
59006: LD_VAR 0 8
59010: PUSH
59011: LD_VAR 0 7
59015: DIVREAL
59016: ST_TO_ADDR
// if time < 0 then
59017: LD_VAR 0 8
59021: PUSH
59022: LD_INT 0
59024: LESS
59025: IFFALSE 59042
// time := time * - 1 ;
59027: LD_ADDR_VAR 0 8
59031: PUSH
59032: LD_VAR 0 8
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: MUL
59041: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59042: LD_VAR 0 8
59046: PUSH
59047: LD_INT 35
59049: PPUSH
59050: LD_INT 875
59052: PPUSH
59053: CALL_OW 12
59057: PLUS
59058: PPUSH
59059: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59063: LD_INT 1
59065: PPUSH
59066: LD_INT 5
59068: PPUSH
59069: CALL_OW 12
59073: PPUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: LD_INT 1
59081: PPUSH
59082: CALL_OW 55
// end ;
59086: GO 58899
// end ;
59088: LD_VAR 0 5
59092: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59093: LD_INT 0
59095: PPUSH
59096: PPUSH
59097: PPUSH
59098: PPUSH
59099: PPUSH
59100: PPUSH
59101: PPUSH
59102: PPUSH
// if not turrets or not factories then
59103: LD_VAR 0 1
59107: NOT
59108: PUSH
59109: LD_VAR 0 2
59113: NOT
59114: OR
59115: IFFALSE 59119
// exit ;
59117: GO 59426
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59119: LD_ADDR_VAR 0 10
59123: PUSH
59124: LD_INT 5
59126: PUSH
59127: LD_INT 6
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 5
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 24
59161: PUSH
59162: LD_INT 25
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 23
59171: PUSH
59172: LD_INT 27
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 42
59185: PUSH
59186: LD_INT 43
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 44
59195: PUSH
59196: LD_INT 46
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 45
59205: PUSH
59206: LD_INT 47
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// result := [ ] ;
59223: LD_ADDR_VAR 0 3
59227: PUSH
59228: EMPTY
59229: ST_TO_ADDR
// for i in turrets do
59230: LD_ADDR_VAR 0 4
59234: PUSH
59235: LD_VAR 0 1
59239: PUSH
59240: FOR_IN
59241: IFFALSE 59424
// begin nat := GetNation ( i ) ;
59243: LD_ADDR_VAR 0 7
59247: PUSH
59248: LD_VAR 0 4
59252: PPUSH
59253: CALL_OW 248
59257: ST_TO_ADDR
// weapon := 0 ;
59258: LD_ADDR_VAR 0 8
59262: PUSH
59263: LD_INT 0
59265: ST_TO_ADDR
// if not nat then
59266: LD_VAR 0 7
59270: NOT
59271: IFFALSE 59275
// continue ;
59273: GO 59240
// for j in list [ nat ] do
59275: LD_ADDR_VAR 0 5
59279: PUSH
59280: LD_VAR 0 10
59284: PUSH
59285: LD_VAR 0 7
59289: ARRAY
59290: PUSH
59291: FOR_IN
59292: IFFALSE 59333
// if GetBWeapon ( i ) = j [ 1 ] then
59294: LD_VAR 0 4
59298: PPUSH
59299: CALL_OW 269
59303: PUSH
59304: LD_VAR 0 5
59308: PUSH
59309: LD_INT 1
59311: ARRAY
59312: EQUAL
59313: IFFALSE 59331
// begin weapon := j [ 2 ] ;
59315: LD_ADDR_VAR 0 8
59319: PUSH
59320: LD_VAR 0 5
59324: PUSH
59325: LD_INT 2
59327: ARRAY
59328: ST_TO_ADDR
// break ;
59329: GO 59333
// end ;
59331: GO 59291
59333: POP
59334: POP
// if not weapon then
59335: LD_VAR 0 8
59339: NOT
59340: IFFALSE 59344
// continue ;
59342: GO 59240
// for k in factories do
59344: LD_ADDR_VAR 0 6
59348: PUSH
59349: LD_VAR 0 2
59353: PUSH
59354: FOR_IN
59355: IFFALSE 59420
// begin weapons := AvailableWeaponList ( k ) ;
59357: LD_ADDR_VAR 0 9
59361: PUSH
59362: LD_VAR 0 6
59366: PPUSH
59367: CALL_OW 478
59371: ST_TO_ADDR
// if not weapons then
59372: LD_VAR 0 9
59376: NOT
59377: IFFALSE 59381
// continue ;
59379: GO 59354
// if weapon in weapons then
59381: LD_VAR 0 8
59385: PUSH
59386: LD_VAR 0 9
59390: IN
59391: IFFALSE 59418
// begin result := [ i , weapon ] ;
59393: LD_ADDR_VAR 0 3
59397: PUSH
59398: LD_VAR 0 4
59402: PUSH
59403: LD_VAR 0 8
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// exit ;
59412: POP
59413: POP
59414: POP
59415: POP
59416: GO 59426
// end ; end ;
59418: GO 59354
59420: POP
59421: POP
// end ;
59422: GO 59240
59424: POP
59425: POP
// end ;
59426: LD_VAR 0 3
59430: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59431: LD_INT 0
59433: PPUSH
// if not side or side > 8 then
59434: LD_VAR 0 3
59438: NOT
59439: PUSH
59440: LD_VAR 0 3
59444: PUSH
59445: LD_INT 8
59447: GREATER
59448: OR
59449: IFFALSE 59453
// exit ;
59451: GO 59512
// if not range then
59453: LD_VAR 0 4
59457: NOT
59458: IFFALSE 59469
// range := - 12 ;
59460: LD_ADDR_VAR 0 4
59464: PUSH
59465: LD_INT 12
59467: NEG
59468: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59469: LD_VAR 0 1
59473: PPUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: LD_VAR 0 3
59483: PPUSH
59484: LD_VAR 0 4
59488: PPUSH
59489: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59493: LD_VAR 0 1
59497: PPUSH
59498: LD_VAR 0 2
59502: PPUSH
59503: LD_VAR 0 3
59507: PPUSH
59508: CALL_OW 331
// end ;
59512: LD_VAR 0 5
59516: RET
// export function Video ( mode ) ; begin
59517: LD_INT 0
59519: PPUSH
// ingame_video = mode ;
59520: LD_ADDR_OWVAR 52
59524: PUSH
59525: LD_VAR 0 1
59529: ST_TO_ADDR
// interface_hidden = mode ;
59530: LD_ADDR_OWVAR 54
59534: PUSH
59535: LD_VAR 0 1
59539: ST_TO_ADDR
// end ;
59540: LD_VAR 0 2
59544: RET
// export function Join ( array , element ) ; begin
59545: LD_INT 0
59547: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59548: LD_ADDR_VAR 0 3
59552: PUSH
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_VAR 0 1
59562: PUSH
59563: LD_INT 1
59565: PLUS
59566: PPUSH
59567: LD_VAR 0 2
59571: PPUSH
59572: CALL_OW 1
59576: ST_TO_ADDR
// end ;
59577: LD_VAR 0 3
59581: RET
// export function JoinUnion ( array , element ) ; begin
59582: LD_INT 0
59584: PPUSH
// result := array union element ;
59585: LD_ADDR_VAR 0 3
59589: PUSH
59590: LD_VAR 0 1
59594: PUSH
59595: LD_VAR 0 2
59599: UNION
59600: ST_TO_ADDR
// end ;
59601: LD_VAR 0 3
59605: RET
// export function GetBehemoths ( side ) ; begin
59606: LD_INT 0
59608: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59609: LD_ADDR_VAR 0 2
59613: PUSH
59614: LD_INT 22
59616: PUSH
59617: LD_VAR 0 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 31
59628: PUSH
59629: LD_INT 25
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PPUSH
59640: CALL_OW 69
59644: ST_TO_ADDR
// end ;
59645: LD_VAR 0 2
59649: RET
// export function Shuffle ( array ) ; var i , index ; begin
59650: LD_INT 0
59652: PPUSH
59653: PPUSH
59654: PPUSH
// result := [ ] ;
59655: LD_ADDR_VAR 0 2
59659: PUSH
59660: EMPTY
59661: ST_TO_ADDR
// if not array then
59662: LD_VAR 0 1
59666: NOT
59667: IFFALSE 59671
// exit ;
59669: GO 59770
// Randomize ;
59671: CALL_OW 10
// for i = array downto 1 do
59675: LD_ADDR_VAR 0 3
59679: PUSH
59680: DOUBLE
59681: LD_VAR 0 1
59685: INC
59686: ST_TO_ADDR
59687: LD_INT 1
59689: PUSH
59690: FOR_DOWNTO
59691: IFFALSE 59768
// begin index := rand ( 1 , array ) ;
59693: LD_ADDR_VAR 0 4
59697: PUSH
59698: LD_INT 1
59700: PPUSH
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 12
59710: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59711: LD_ADDR_VAR 0 2
59715: PUSH
59716: LD_VAR 0 2
59720: PPUSH
59721: LD_VAR 0 2
59725: PUSH
59726: LD_INT 1
59728: PLUS
59729: PPUSH
59730: LD_VAR 0 1
59734: PUSH
59735: LD_VAR 0 4
59739: ARRAY
59740: PPUSH
59741: CALL_OW 2
59745: ST_TO_ADDR
// array := Delete ( array , index ) ;
59746: LD_ADDR_VAR 0 1
59750: PUSH
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_VAR 0 4
59760: PPUSH
59761: CALL_OW 3
59765: ST_TO_ADDR
// end ;
59766: GO 59690
59768: POP
59769: POP
// end ;
59770: LD_VAR 0 2
59774: RET
// export function GetBaseMaterials ( base ) ; begin
59775: LD_INT 0
59777: PPUSH
// result := [ 0 , 0 , 0 ] ;
59778: LD_ADDR_VAR 0 2
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: ST_TO_ADDR
// if not base then
59797: LD_VAR 0 1
59801: NOT
59802: IFFALSE 59806
// exit ;
59804: GO 59855
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59806: LD_ADDR_VAR 0 2
59810: PUSH
59811: LD_VAR 0 1
59815: PPUSH
59816: LD_INT 1
59818: PPUSH
59819: CALL_OW 275
59823: PUSH
59824: LD_VAR 0 1
59828: PPUSH
59829: LD_INT 2
59831: PPUSH
59832: CALL_OW 275
59836: PUSH
59837: LD_VAR 0 1
59841: PPUSH
59842: LD_INT 3
59844: PPUSH
59845: CALL_OW 275
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// end ;
59855: LD_VAR 0 2
59859: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59860: LD_INT 0
59862: PPUSH
59863: PPUSH
// result := array ;
59864: LD_ADDR_VAR 0 3
59868: PUSH
59869: LD_VAR 0 1
59873: ST_TO_ADDR
// if size >= result then
59874: LD_VAR 0 2
59878: PUSH
59879: LD_VAR 0 3
59883: GREATEREQUAL
59884: IFFALSE 59888
// exit ;
59886: GO 59938
// if size then
59888: LD_VAR 0 2
59892: IFFALSE 59938
// for i := array downto size do
59894: LD_ADDR_VAR 0 4
59898: PUSH
59899: DOUBLE
59900: LD_VAR 0 1
59904: INC
59905: ST_TO_ADDR
59906: LD_VAR 0 2
59910: PUSH
59911: FOR_DOWNTO
59912: IFFALSE 59936
// result := Delete ( result , result ) ;
59914: LD_ADDR_VAR 0 3
59918: PUSH
59919: LD_VAR 0 3
59923: PPUSH
59924: LD_VAR 0 3
59928: PPUSH
59929: CALL_OW 3
59933: ST_TO_ADDR
59934: GO 59911
59936: POP
59937: POP
// end ;
59938: LD_VAR 0 3
59942: RET
// export function ComExit ( unit ) ; var tmp ; begin
59943: LD_INT 0
59945: PPUSH
59946: PPUSH
// if not IsInUnit ( unit ) then
59947: LD_VAR 0 1
59951: PPUSH
59952: CALL_OW 310
59956: NOT
59957: IFFALSE 59961
// exit ;
59959: GO 60021
// tmp := IsInUnit ( unit ) ;
59961: LD_ADDR_VAR 0 3
59965: PUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: CALL_OW 310
59975: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59976: LD_VAR 0 3
59980: PPUSH
59981: CALL_OW 247
59985: PUSH
59986: LD_INT 2
59988: EQUAL
59989: IFFALSE 60002
// ComExitVehicle ( unit ) else
59991: LD_VAR 0 1
59995: PPUSH
59996: CALL_OW 121
60000: GO 60011
// ComExitBuilding ( unit ) ;
60002: LD_VAR 0 1
60006: PPUSH
60007: CALL_OW 122
// result := tmp ;
60011: LD_ADDR_VAR 0 2
60015: PUSH
60016: LD_VAR 0 3
60020: ST_TO_ADDR
// end ;
60021: LD_VAR 0 2
60025: RET
// export function ComExitAll ( units ) ; var i ; begin
60026: LD_INT 0
60028: PPUSH
60029: PPUSH
// if not units then
60030: LD_VAR 0 1
60034: NOT
60035: IFFALSE 60039
// exit ;
60037: GO 60065
// for i in units do
60039: LD_ADDR_VAR 0 3
60043: PUSH
60044: LD_VAR 0 1
60048: PUSH
60049: FOR_IN
60050: IFFALSE 60063
// ComExit ( i ) ;
60052: LD_VAR 0 3
60056: PPUSH
60057: CALL 59943 0 1
60061: GO 60049
60063: POP
60064: POP
// end ;
60065: LD_VAR 0 2
60069: RET
// export function ResetHc ; begin
60070: LD_INT 0
60072: PPUSH
// InitHc ;
60073: CALL_OW 19
// hc_importance := 0 ;
60077: LD_ADDR_OWVAR 32
60081: PUSH
60082: LD_INT 0
60084: ST_TO_ADDR
// end ;
60085: LD_VAR 0 1
60089: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60090: LD_INT 0
60092: PPUSH
60093: PPUSH
60094: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60095: LD_ADDR_VAR 0 6
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_VAR 0 3
60109: PLUS
60110: PUSH
60111: LD_INT 2
60113: DIV
60114: ST_TO_ADDR
// if _x < 0 then
60115: LD_VAR 0 6
60119: PUSH
60120: LD_INT 0
60122: LESS
60123: IFFALSE 60140
// _x := _x * - 1 ;
60125: LD_ADDR_VAR 0 6
60129: PUSH
60130: LD_VAR 0 6
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: MUL
60139: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60140: LD_ADDR_VAR 0 7
60144: PUSH
60145: LD_VAR 0 2
60149: PUSH
60150: LD_VAR 0 4
60154: PLUS
60155: PUSH
60156: LD_INT 2
60158: DIV
60159: ST_TO_ADDR
// if _y < 0 then
60160: LD_VAR 0 7
60164: PUSH
60165: LD_INT 0
60167: LESS
60168: IFFALSE 60185
// _y := _y * - 1 ;
60170: LD_ADDR_VAR 0 7
60174: PUSH
60175: LD_VAR 0 7
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: MUL
60184: ST_TO_ADDR
// result := [ _x , _y ] ;
60185: LD_ADDR_VAR 0 5
60189: PUSH
60190: LD_VAR 0 6
60194: PUSH
60195: LD_VAR 0 7
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: ST_TO_ADDR
// end ;
60204: LD_VAR 0 5
60208: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60209: LD_INT 0
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
// task := GetTaskList ( unit ) ;
60215: LD_ADDR_VAR 0 7
60219: PUSH
60220: LD_VAR 0 1
60224: PPUSH
60225: CALL_OW 437
60229: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60230: LD_VAR 0 7
60234: NOT
60235: PUSH
60236: LD_VAR 0 1
60240: PPUSH
60241: LD_VAR 0 2
60245: PPUSH
60246: CALL_OW 308
60250: NOT
60251: AND
60252: IFFALSE 60256
// exit ;
60254: GO 60374
// if IsInArea ( unit , area ) then
60256: LD_VAR 0 1
60260: PPUSH
60261: LD_VAR 0 2
60265: PPUSH
60266: CALL_OW 308
60270: IFFALSE 60288
// begin ComMoveToArea ( unit , goAway ) ;
60272: LD_VAR 0 1
60276: PPUSH
60277: LD_VAR 0 3
60281: PPUSH
60282: CALL_OW 113
// exit ;
60286: GO 60374
// end ; if task [ 1 ] [ 1 ] <> M then
60288: LD_VAR 0 7
60292: PUSH
60293: LD_INT 1
60295: ARRAY
60296: PUSH
60297: LD_INT 1
60299: ARRAY
60300: PUSH
60301: LD_STRING M
60303: NONEQUAL
60304: IFFALSE 60308
// exit ;
60306: GO 60374
// x := task [ 1 ] [ 2 ] ;
60308: LD_ADDR_VAR 0 5
60312: PUSH
60313: LD_VAR 0 7
60317: PUSH
60318: LD_INT 1
60320: ARRAY
60321: PUSH
60322: LD_INT 2
60324: ARRAY
60325: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60326: LD_ADDR_VAR 0 6
60330: PUSH
60331: LD_VAR 0 7
60335: PUSH
60336: LD_INT 1
60338: ARRAY
60339: PUSH
60340: LD_INT 3
60342: ARRAY
60343: ST_TO_ADDR
// if InArea ( x , y , area ) then
60344: LD_VAR 0 5
60348: PPUSH
60349: LD_VAR 0 6
60353: PPUSH
60354: LD_VAR 0 2
60358: PPUSH
60359: CALL_OW 309
60363: IFFALSE 60374
// ComStop ( unit ) ;
60365: LD_VAR 0 1
60369: PPUSH
60370: CALL_OW 141
// end ;
60374: LD_VAR 0 4
60378: RET
// export function Abs ( value ) ; begin
60379: LD_INT 0
60381: PPUSH
// result := value ;
60382: LD_ADDR_VAR 0 2
60386: PUSH
60387: LD_VAR 0 1
60391: ST_TO_ADDR
// if value < 0 then
60392: LD_VAR 0 1
60396: PUSH
60397: LD_INT 0
60399: LESS
60400: IFFALSE 60417
// result := value * - 1 ;
60402: LD_ADDR_VAR 0 2
60406: PUSH
60407: LD_VAR 0 1
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: MUL
60416: ST_TO_ADDR
// end ;
60417: LD_VAR 0 2
60421: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60422: LD_INT 0
60424: PPUSH
60425: PPUSH
60426: PPUSH
60427: PPUSH
60428: PPUSH
60429: PPUSH
60430: PPUSH
60431: PPUSH
// if not unit or not building then
60432: LD_VAR 0 1
60436: NOT
60437: PUSH
60438: LD_VAR 0 2
60442: NOT
60443: OR
60444: IFFALSE 60448
// exit ;
60446: GO 60674
// x := GetX ( building ) ;
60448: LD_ADDR_VAR 0 4
60452: PUSH
60453: LD_VAR 0 2
60457: PPUSH
60458: CALL_OW 250
60462: ST_TO_ADDR
// y := GetY ( building ) ;
60463: LD_ADDR_VAR 0 6
60467: PUSH
60468: LD_VAR 0 2
60472: PPUSH
60473: CALL_OW 251
60477: ST_TO_ADDR
// d := GetDir ( building ) ;
60478: LD_ADDR_VAR 0 8
60482: PUSH
60483: LD_VAR 0 2
60487: PPUSH
60488: CALL_OW 254
60492: ST_TO_ADDR
// r := 4 ;
60493: LD_ADDR_VAR 0 9
60497: PUSH
60498: LD_INT 4
60500: ST_TO_ADDR
// for i := 1 to 5 do
60501: LD_ADDR_VAR 0 10
60505: PUSH
60506: DOUBLE
60507: LD_INT 1
60509: DEC
60510: ST_TO_ADDR
60511: LD_INT 5
60513: PUSH
60514: FOR_TO
60515: IFFALSE 60672
// begin _x := ShiftX ( x , d , r + i ) ;
60517: LD_ADDR_VAR 0 5
60521: PUSH
60522: LD_VAR 0 4
60526: PPUSH
60527: LD_VAR 0 8
60531: PPUSH
60532: LD_VAR 0 9
60536: PUSH
60537: LD_VAR 0 10
60541: PLUS
60542: PPUSH
60543: CALL_OW 272
60547: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60548: LD_ADDR_VAR 0 7
60552: PUSH
60553: LD_VAR 0 6
60557: PPUSH
60558: LD_VAR 0 8
60562: PPUSH
60563: LD_VAR 0 9
60567: PUSH
60568: LD_VAR 0 10
60572: PLUS
60573: PPUSH
60574: CALL_OW 273
60578: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60579: LD_VAR 0 5
60583: PPUSH
60584: LD_VAR 0 7
60588: PPUSH
60589: CALL_OW 488
60593: PUSH
60594: LD_VAR 0 5
60598: PPUSH
60599: LD_VAR 0 7
60603: PPUSH
60604: CALL_OW 428
60608: PPUSH
60609: CALL_OW 247
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: IN
60624: NOT
60625: AND
60626: IFFALSE 60670
// begin ComMoveXY ( unit , _x , _y ) ;
60628: LD_VAR 0 1
60632: PPUSH
60633: LD_VAR 0 5
60637: PPUSH
60638: LD_VAR 0 7
60642: PPUSH
60643: CALL_OW 111
// result := [ _x , _y ] ;
60647: LD_ADDR_VAR 0 3
60651: PUSH
60652: LD_VAR 0 5
60656: PUSH
60657: LD_VAR 0 7
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// exit ;
60666: POP
60667: POP
60668: GO 60674
// end ; end ;
60670: GO 60514
60672: POP
60673: POP
// end ;
60674: LD_VAR 0 3
60678: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60679: LD_INT 0
60681: PPUSH
60682: PPUSH
60683: PPUSH
// result := 0 ;
60684: LD_ADDR_VAR 0 3
60688: PUSH
60689: LD_INT 0
60691: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60692: LD_VAR 0 1
60696: PUSH
60697: LD_INT 0
60699: LESS
60700: PUSH
60701: LD_VAR 0 1
60705: PUSH
60706: LD_INT 8
60708: GREATER
60709: OR
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_INT 0
60718: LESS
60719: OR
60720: PUSH
60721: LD_VAR 0 2
60725: PUSH
60726: LD_INT 8
60728: GREATER
60729: OR
60730: IFFALSE 60734
// exit ;
60732: GO 60809
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60734: LD_ADDR_VAR 0 4
60738: PUSH
60739: LD_INT 22
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PPUSH
60751: CALL_OW 69
60755: PUSH
60756: FOR_IN
60757: IFFALSE 60807
// begin un := UnitShoot ( i ) ;
60759: LD_ADDR_VAR 0 5
60763: PUSH
60764: LD_VAR 0 4
60768: PPUSH
60769: CALL_OW 504
60773: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60774: LD_VAR 0 5
60778: PPUSH
60779: CALL_OW 255
60783: PUSH
60784: LD_VAR 0 1
60788: EQUAL
60789: IFFALSE 60805
// begin result := un ;
60791: LD_ADDR_VAR 0 3
60795: PUSH
60796: LD_VAR 0 5
60800: ST_TO_ADDR
// exit ;
60801: POP
60802: POP
60803: GO 60809
// end ; end ;
60805: GO 60756
60807: POP
60808: POP
// end ;
60809: LD_VAR 0 3
60813: RET
// export function GetCargoBay ( units ) ; begin
60814: LD_INT 0
60816: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60817: LD_ADDR_VAR 0 2
60821: PUSH
60822: LD_VAR 0 1
60826: PPUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 34
60832: PUSH
60833: LD_INT 12
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 34
60842: PUSH
60843: LD_INT 51
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 34
60852: PUSH
60853: LD_INT 32
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 34
60862: PUSH
60863: LD_EXP 79
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: PPUSH
60879: CALL_OW 72
60883: ST_TO_ADDR
// end ;
60884: LD_VAR 0 2
60888: RET
// export function Negate ( value ) ; begin
60889: LD_INT 0
60891: PPUSH
// result := not value ;
60892: LD_ADDR_VAR 0 2
60896: PUSH
60897: LD_VAR 0 1
60901: NOT
60902: ST_TO_ADDR
// end ;
60903: LD_VAR 0 2
60907: RET
// export function Inc ( value ) ; begin
60908: LD_INT 0
60910: PPUSH
// result := value + 1 ;
60911: LD_ADDR_VAR 0 2
60915: PUSH
60916: LD_VAR 0 1
60920: PUSH
60921: LD_INT 1
60923: PLUS
60924: ST_TO_ADDR
// end ;
60925: LD_VAR 0 2
60929: RET
// export function Dec ( value ) ; begin
60930: LD_INT 0
60932: PPUSH
// result := value - 1 ;
60933: LD_ADDR_VAR 0 2
60937: PUSH
60938: LD_VAR 0 1
60942: PUSH
60943: LD_INT 1
60945: MINUS
60946: ST_TO_ADDR
// end ;
60947: LD_VAR 0 2
60951: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60952: LD_INT 0
60954: PPUSH
60955: PPUSH
60956: PPUSH
60957: PPUSH
60958: PPUSH
60959: PPUSH
60960: PPUSH
60961: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60962: LD_VAR 0 1
60966: PPUSH
60967: LD_VAR 0 2
60971: PPUSH
60972: CALL_OW 488
60976: NOT
60977: PUSH
60978: LD_VAR 0 3
60982: PPUSH
60983: LD_VAR 0 4
60987: PPUSH
60988: CALL_OW 488
60992: NOT
60993: OR
60994: IFFALSE 61007
// begin result := - 1 ;
60996: LD_ADDR_VAR 0 5
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: ST_TO_ADDR
// exit ;
61005: GO 61242
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61007: LD_ADDR_VAR 0 12
61011: PUSH
61012: LD_VAR 0 1
61016: PPUSH
61017: LD_VAR 0 2
61021: PPUSH
61022: LD_VAR 0 3
61026: PPUSH
61027: LD_VAR 0 4
61031: PPUSH
61032: CALL 60090 0 4
61036: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61037: LD_ADDR_VAR 0 11
61041: PUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_VAR 0 2
61051: PPUSH
61052: LD_VAR 0 12
61056: PUSH
61057: LD_INT 1
61059: ARRAY
61060: PPUSH
61061: LD_VAR 0 12
61065: PUSH
61066: LD_INT 2
61068: ARRAY
61069: PPUSH
61070: CALL_OW 298
61074: ST_TO_ADDR
// distance := 9999 ;
61075: LD_ADDR_VAR 0 10
61079: PUSH
61080: LD_INT 9999
61082: ST_TO_ADDR
// for i := 0 to 5 do
61083: LD_ADDR_VAR 0 6
61087: PUSH
61088: DOUBLE
61089: LD_INT 0
61091: DEC
61092: ST_TO_ADDR
61093: LD_INT 5
61095: PUSH
61096: FOR_TO
61097: IFFALSE 61240
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61099: LD_ADDR_VAR 0 7
61103: PUSH
61104: LD_VAR 0 1
61108: PPUSH
61109: LD_VAR 0 6
61113: PPUSH
61114: LD_VAR 0 11
61118: PPUSH
61119: CALL_OW 272
61123: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61124: LD_ADDR_VAR 0 8
61128: PUSH
61129: LD_VAR 0 2
61133: PPUSH
61134: LD_VAR 0 6
61138: PPUSH
61139: LD_VAR 0 11
61143: PPUSH
61144: CALL_OW 273
61148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61149: LD_VAR 0 7
61153: PPUSH
61154: LD_VAR 0 8
61158: PPUSH
61159: CALL_OW 488
61163: NOT
61164: IFFALSE 61168
// continue ;
61166: GO 61096
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61168: LD_ADDR_VAR 0 9
61172: PUSH
61173: LD_VAR 0 12
61177: PUSH
61178: LD_INT 1
61180: ARRAY
61181: PPUSH
61182: LD_VAR 0 12
61186: PUSH
61187: LD_INT 2
61189: ARRAY
61190: PPUSH
61191: LD_VAR 0 7
61195: PPUSH
61196: LD_VAR 0 8
61200: PPUSH
61201: CALL_OW 298
61205: ST_TO_ADDR
// if tmp < distance then
61206: LD_VAR 0 9
61210: PUSH
61211: LD_VAR 0 10
61215: LESS
61216: IFFALSE 61238
// begin result := i ;
61218: LD_ADDR_VAR 0 5
61222: PUSH
61223: LD_VAR 0 6
61227: ST_TO_ADDR
// distance := tmp ;
61228: LD_ADDR_VAR 0 10
61232: PUSH
61233: LD_VAR 0 9
61237: ST_TO_ADDR
// end ; end ;
61238: GO 61096
61240: POP
61241: POP
// end ;
61242: LD_VAR 0 5
61246: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61247: LD_INT 0
61249: PPUSH
61250: PPUSH
// if not driver or not IsInUnit ( driver ) then
61251: LD_VAR 0 1
61255: NOT
61256: PUSH
61257: LD_VAR 0 1
61261: PPUSH
61262: CALL_OW 310
61266: NOT
61267: OR
61268: IFFALSE 61272
// exit ;
61270: GO 61362
// vehicle := IsInUnit ( driver ) ;
61272: LD_ADDR_VAR 0 3
61276: PUSH
61277: LD_VAR 0 1
61281: PPUSH
61282: CALL_OW 310
61286: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61287: LD_VAR 0 1
61291: PPUSH
61292: LD_STRING \
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: PUSH
61322: LD_STRING E
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_VAR 0 3
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PPUSH
61358: CALL_OW 446
// end ;
61362: LD_VAR 0 2
61366: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61367: LD_INT 0
61369: PPUSH
61370: PPUSH
// if not driver or not IsInUnit ( driver ) then
61371: LD_VAR 0 1
61375: NOT
61376: PUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: CALL_OW 310
61386: NOT
61387: OR
61388: IFFALSE 61392
// exit ;
61390: GO 61482
// vehicle := IsInUnit ( driver ) ;
61392: LD_ADDR_VAR 0 3
61396: PUSH
61397: LD_VAR 0 1
61401: PPUSH
61402: CALL_OW 310
61406: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61407: LD_VAR 0 1
61411: PPUSH
61412: LD_STRING \
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: PUSH
61442: LD_STRING E
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_VAR 0 3
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PPUSH
61478: CALL_OW 447
// end ;
61482: LD_VAR 0 2
61486: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61487: LD_INT 0
61489: PPUSH
61490: PPUSH
61491: PPUSH
// tmp := [ ] ;
61492: LD_ADDR_VAR 0 5
61496: PUSH
61497: EMPTY
61498: ST_TO_ADDR
// for i in units do
61499: LD_ADDR_VAR 0 4
61503: PUSH
61504: LD_VAR 0 1
61508: PUSH
61509: FOR_IN
61510: IFFALSE 61548
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61512: LD_ADDR_VAR 0 5
61516: PUSH
61517: LD_VAR 0 5
61521: PPUSH
61522: LD_VAR 0 5
61526: PUSH
61527: LD_INT 1
61529: PLUS
61530: PPUSH
61531: LD_VAR 0 4
61535: PPUSH
61536: CALL_OW 256
61540: PPUSH
61541: CALL_OW 2
61545: ST_TO_ADDR
61546: GO 61509
61548: POP
61549: POP
// if not tmp then
61550: LD_VAR 0 5
61554: NOT
61555: IFFALSE 61559
// exit ;
61557: GO 61607
// if asc then
61559: LD_VAR 0 2
61563: IFFALSE 61587
// result := SortListByListAsc ( units , tmp ) else
61565: LD_ADDR_VAR 0 3
61569: PUSH
61570: LD_VAR 0 1
61574: PPUSH
61575: LD_VAR 0 5
61579: PPUSH
61580: CALL_OW 76
61584: ST_TO_ADDR
61585: GO 61607
// result := SortListByListDesc ( units , tmp ) ;
61587: LD_ADDR_VAR 0 3
61591: PUSH
61592: LD_VAR 0 1
61596: PPUSH
61597: LD_VAR 0 5
61601: PPUSH
61602: CALL_OW 77
61606: ST_TO_ADDR
// end ;
61607: LD_VAR 0 3
61611: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61612: LD_INT 0
61614: PPUSH
61615: PPUSH
// task := GetTaskList ( mech ) ;
61616: LD_ADDR_VAR 0 4
61620: PUSH
61621: LD_VAR 0 1
61625: PPUSH
61626: CALL_OW 437
61630: ST_TO_ADDR
// if not task then
61631: LD_VAR 0 4
61635: NOT
61636: IFFALSE 61640
// exit ;
61638: GO 61682
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61640: LD_ADDR_VAR 0 3
61644: PUSH
61645: LD_VAR 0 4
61649: PUSH
61650: LD_INT 1
61652: ARRAY
61653: PUSH
61654: LD_INT 1
61656: ARRAY
61657: PUSH
61658: LD_STRING r
61660: EQUAL
61661: PUSH
61662: LD_VAR 0 4
61666: PUSH
61667: LD_INT 1
61669: ARRAY
61670: PUSH
61671: LD_INT 4
61673: ARRAY
61674: PUSH
61675: LD_VAR 0 2
61679: EQUAL
61680: AND
61681: ST_TO_ADDR
// end ;
61682: LD_VAR 0 3
61686: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61687: LD_INT 0
61689: PPUSH
// SetDir ( unit , d ) ;
61690: LD_VAR 0 1
61694: PPUSH
61695: LD_VAR 0 4
61699: PPUSH
61700: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61704: LD_VAR 0 1
61708: PPUSH
61709: LD_VAR 0 2
61713: PPUSH
61714: LD_VAR 0 3
61718: PPUSH
61719: LD_VAR 0 5
61723: PPUSH
61724: CALL_OW 48
// end ;
61728: LD_VAR 0 6
61732: RET
// export function ToNaturalNumber ( number ) ; begin
61733: LD_INT 0
61735: PPUSH
// result := number div 1 ;
61736: LD_ADDR_VAR 0 2
61740: PUSH
61741: LD_VAR 0 1
61745: PUSH
61746: LD_INT 1
61748: DIV
61749: ST_TO_ADDR
// if number < 0 then
61750: LD_VAR 0 1
61754: PUSH
61755: LD_INT 0
61757: LESS
61758: IFFALSE 61768
// result := 0 ;
61760: LD_ADDR_VAR 0 2
61764: PUSH
61765: LD_INT 0
61767: ST_TO_ADDR
// end ;
61768: LD_VAR 0 2
61772: RET
// export function SortByClass ( units , class ) ; var un ; begin
61773: LD_INT 0
61775: PPUSH
61776: PPUSH
// if not units or not class then
61777: LD_VAR 0 1
61781: NOT
61782: PUSH
61783: LD_VAR 0 2
61787: NOT
61788: OR
61789: IFFALSE 61793
// exit ;
61791: GO 61888
// result := [ ] ;
61793: LD_ADDR_VAR 0 3
61797: PUSH
61798: EMPTY
61799: ST_TO_ADDR
// for un in units do
61800: LD_ADDR_VAR 0 4
61804: PUSH
61805: LD_VAR 0 1
61809: PUSH
61810: FOR_IN
61811: IFFALSE 61886
// if GetClass ( un ) = class then
61813: LD_VAR 0 4
61817: PPUSH
61818: CALL_OW 257
61822: PUSH
61823: LD_VAR 0 2
61827: EQUAL
61828: IFFALSE 61855
// result := Insert ( result , 1 , un ) else
61830: LD_ADDR_VAR 0 3
61834: PUSH
61835: LD_VAR 0 3
61839: PPUSH
61840: LD_INT 1
61842: PPUSH
61843: LD_VAR 0 4
61847: PPUSH
61848: CALL_OW 2
61852: ST_TO_ADDR
61853: GO 61884
// result := Replace ( result , result + 1 , un ) ;
61855: LD_ADDR_VAR 0 3
61859: PUSH
61860: LD_VAR 0 3
61864: PPUSH
61865: LD_VAR 0 3
61869: PUSH
61870: LD_INT 1
61872: PLUS
61873: PPUSH
61874: LD_VAR 0 4
61878: PPUSH
61879: CALL_OW 1
61883: ST_TO_ADDR
61884: GO 61810
61886: POP
61887: POP
// end ;
61888: LD_VAR 0 3
61892: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61893: LD_INT 0
61895: PPUSH
61896: PPUSH
61897: PPUSH
61898: PPUSH
61899: PPUSH
61900: PPUSH
61901: PPUSH
// result := [ ] ;
61902: LD_ADDR_VAR 0 4
61906: PUSH
61907: EMPTY
61908: ST_TO_ADDR
// if x - r < 0 then
61909: LD_VAR 0 1
61913: PUSH
61914: LD_VAR 0 3
61918: MINUS
61919: PUSH
61920: LD_INT 0
61922: LESS
61923: IFFALSE 61935
// min_x := 0 else
61925: LD_ADDR_VAR 0 8
61929: PUSH
61930: LD_INT 0
61932: ST_TO_ADDR
61933: GO 61951
// min_x := x - r ;
61935: LD_ADDR_VAR 0 8
61939: PUSH
61940: LD_VAR 0 1
61944: PUSH
61945: LD_VAR 0 3
61949: MINUS
61950: ST_TO_ADDR
// if y - r < 0 then
61951: LD_VAR 0 2
61955: PUSH
61956: LD_VAR 0 3
61960: MINUS
61961: PUSH
61962: LD_INT 0
61964: LESS
61965: IFFALSE 61977
// min_y := 0 else
61967: LD_ADDR_VAR 0 7
61971: PUSH
61972: LD_INT 0
61974: ST_TO_ADDR
61975: GO 61993
// min_y := y - r ;
61977: LD_ADDR_VAR 0 7
61981: PUSH
61982: LD_VAR 0 2
61986: PUSH
61987: LD_VAR 0 3
61991: MINUS
61992: ST_TO_ADDR
// max_x := x + r ;
61993: LD_ADDR_VAR 0 9
61997: PUSH
61998: LD_VAR 0 1
62002: PUSH
62003: LD_VAR 0 3
62007: PLUS
62008: ST_TO_ADDR
// max_y := y + r ;
62009: LD_ADDR_VAR 0 10
62013: PUSH
62014: LD_VAR 0 2
62018: PUSH
62019: LD_VAR 0 3
62023: PLUS
62024: ST_TO_ADDR
// for _x = min_x to max_x do
62025: LD_ADDR_VAR 0 5
62029: PUSH
62030: DOUBLE
62031: LD_VAR 0 8
62035: DEC
62036: ST_TO_ADDR
62037: LD_VAR 0 9
62041: PUSH
62042: FOR_TO
62043: IFFALSE 62144
// for _y = min_y to max_y do
62045: LD_ADDR_VAR 0 6
62049: PUSH
62050: DOUBLE
62051: LD_VAR 0 7
62055: DEC
62056: ST_TO_ADDR
62057: LD_VAR 0 10
62061: PUSH
62062: FOR_TO
62063: IFFALSE 62140
// begin if not ValidHex ( _x , _y ) then
62065: LD_VAR 0 5
62069: PPUSH
62070: LD_VAR 0 6
62074: PPUSH
62075: CALL_OW 488
62079: NOT
62080: IFFALSE 62084
// continue ;
62082: GO 62062
// if GetResourceTypeXY ( _x , _y ) then
62084: LD_VAR 0 5
62088: PPUSH
62089: LD_VAR 0 6
62093: PPUSH
62094: CALL_OW 283
62098: IFFALSE 62138
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62100: LD_ADDR_VAR 0 4
62104: PUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: LD_VAR 0 4
62114: PUSH
62115: LD_INT 1
62117: PLUS
62118: PPUSH
62119: LD_VAR 0 5
62123: PUSH
62124: LD_VAR 0 6
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PPUSH
62133: CALL_OW 1
62137: ST_TO_ADDR
// end ;
62138: GO 62062
62140: POP
62141: POP
62142: GO 62042
62144: POP
62145: POP
// end ;
62146: LD_VAR 0 4
62150: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62151: LD_INT 0
62153: PPUSH
62154: PPUSH
62155: PPUSH
62156: PPUSH
62157: PPUSH
62158: PPUSH
62159: PPUSH
62160: PPUSH
// if not units then
62161: LD_VAR 0 1
62165: NOT
62166: IFFALSE 62170
// exit ;
62168: GO 62696
// result := UnitFilter ( units , [ f_ok ] ) ;
62170: LD_ADDR_VAR 0 3
62174: PUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: LD_INT 50
62182: PUSH
62183: EMPTY
62184: LIST
62185: PPUSH
62186: CALL_OW 72
62190: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62191: LD_ADDR_VAR 0 8
62195: PUSH
62196: LD_VAR 0 1
62200: PUSH
62201: LD_INT 1
62203: ARRAY
62204: PPUSH
62205: CALL_OW 255
62209: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62210: LD_ADDR_VAR 0 10
62214: PUSH
62215: LD_INT 29
62217: PUSH
62218: LD_EXP 82
62222: PUSH
62223: LD_INT 49
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// if not result then
62231: LD_VAR 0 3
62235: NOT
62236: IFFALSE 62240
// exit ;
62238: GO 62696
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62240: LD_ADDR_VAR 0 5
62244: PUSH
62245: LD_INT 81
62247: PUSH
62248: LD_VAR 0 8
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PPUSH
62257: CALL_OW 69
62261: ST_TO_ADDR
// for i in result do
62262: LD_ADDR_VAR 0 4
62266: PUSH
62267: LD_VAR 0 3
62271: PUSH
62272: FOR_IN
62273: IFFALSE 62694
// begin tag := GetTag ( i ) + 1 ;
62275: LD_ADDR_VAR 0 9
62279: PUSH
62280: LD_VAR 0 4
62284: PPUSH
62285: CALL_OW 110
62289: PUSH
62290: LD_INT 1
62292: PLUS
62293: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62294: LD_ADDR_VAR 0 7
62298: PUSH
62299: LD_VAR 0 4
62303: PPUSH
62304: CALL_OW 250
62308: PPUSH
62309: LD_VAR 0 4
62313: PPUSH
62314: CALL_OW 251
62318: PPUSH
62319: LD_INT 6
62321: PPUSH
62322: CALL 61893 0 3
62326: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62327: LD_VAR 0 4
62331: PPUSH
62332: CALL_OW 247
62336: PUSH
62337: LD_INT 2
62339: EQUAL
62340: PUSH
62341: LD_VAR 0 7
62345: AND
62346: PUSH
62347: LD_VAR 0 4
62351: PPUSH
62352: CALL_OW 264
62356: PUSH
62357: LD_VAR 0 10
62361: IN
62362: NOT
62363: AND
62364: IFFALSE 62403
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62366: LD_VAR 0 4
62370: PPUSH
62371: LD_VAR 0 7
62375: PUSH
62376: LD_INT 1
62378: ARRAY
62379: PUSH
62380: LD_INT 1
62382: ARRAY
62383: PPUSH
62384: LD_VAR 0 7
62388: PUSH
62389: LD_INT 1
62391: ARRAY
62392: PUSH
62393: LD_INT 2
62395: ARRAY
62396: PPUSH
62397: CALL_OW 116
62401: GO 62692
// if path > tag then
62403: LD_VAR 0 2
62407: PUSH
62408: LD_VAR 0 9
62412: GREATER
62413: IFFALSE 62621
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62415: LD_ADDR_VAR 0 6
62419: PUSH
62420: LD_VAR 0 5
62424: PPUSH
62425: LD_INT 91
62427: PUSH
62428: LD_VAR 0 4
62432: PUSH
62433: LD_INT 8
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: PPUSH
62441: CALL_OW 72
62445: ST_TO_ADDR
// if nearEnemy then
62446: LD_VAR 0 6
62450: IFFALSE 62519
// begin if GetWeapon ( i ) = ru_time_lapser then
62452: LD_VAR 0 4
62456: PPUSH
62457: CALL_OW 264
62461: PUSH
62462: LD_INT 49
62464: EQUAL
62465: IFFALSE 62493
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62467: LD_VAR 0 4
62471: PPUSH
62472: LD_VAR 0 6
62476: PPUSH
62477: LD_VAR 0 4
62481: PPUSH
62482: CALL_OW 74
62486: PPUSH
62487: CALL_OW 112
62491: GO 62517
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62493: LD_VAR 0 4
62497: PPUSH
62498: LD_VAR 0 6
62502: PPUSH
62503: LD_VAR 0 4
62507: PPUSH
62508: CALL_OW 74
62512: PPUSH
62513: CALL_OW 115
// end else
62517: GO 62619
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62519: LD_VAR 0 4
62523: PPUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_VAR 0 9
62533: ARRAY
62534: PUSH
62535: LD_INT 1
62537: ARRAY
62538: PPUSH
62539: LD_VAR 0 2
62543: PUSH
62544: LD_VAR 0 9
62548: ARRAY
62549: PUSH
62550: LD_INT 2
62552: ARRAY
62553: PPUSH
62554: CALL_OW 297
62558: PUSH
62559: LD_INT 6
62561: GREATER
62562: IFFALSE 62605
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62564: LD_VAR 0 4
62568: PPUSH
62569: LD_VAR 0 2
62573: PUSH
62574: LD_VAR 0 9
62578: ARRAY
62579: PUSH
62580: LD_INT 1
62582: ARRAY
62583: PPUSH
62584: LD_VAR 0 2
62588: PUSH
62589: LD_VAR 0 9
62593: ARRAY
62594: PUSH
62595: LD_INT 2
62597: ARRAY
62598: PPUSH
62599: CALL_OW 114
62603: GO 62619
// SetTag ( i , tag ) ;
62605: LD_VAR 0 4
62609: PPUSH
62610: LD_VAR 0 9
62614: PPUSH
62615: CALL_OW 109
// end else
62619: GO 62692
// if enemy then
62621: LD_VAR 0 5
62625: IFFALSE 62692
// begin if GetWeapon ( i ) = ru_time_lapser then
62627: LD_VAR 0 4
62631: PPUSH
62632: CALL_OW 264
62636: PUSH
62637: LD_INT 49
62639: EQUAL
62640: IFFALSE 62668
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62642: LD_VAR 0 4
62646: PPUSH
62647: LD_VAR 0 5
62651: PPUSH
62652: LD_VAR 0 4
62656: PPUSH
62657: CALL_OW 74
62661: PPUSH
62662: CALL_OW 112
62666: GO 62692
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62668: LD_VAR 0 4
62672: PPUSH
62673: LD_VAR 0 5
62677: PPUSH
62678: LD_VAR 0 4
62682: PPUSH
62683: CALL_OW 74
62687: PPUSH
62688: CALL_OW 115
// end ; end ;
62692: GO 62272
62694: POP
62695: POP
// end ;
62696: LD_VAR 0 3
62700: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
62705: PPUSH
// if not unit or IsInUnit ( unit ) then
62706: LD_VAR 0 1
62710: NOT
62711: PUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: CALL_OW 310
62721: OR
62722: IFFALSE 62726
// exit ;
62724: GO 62817
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62726: LD_ADDR_VAR 0 4
62730: PUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 250
62740: PPUSH
62741: LD_VAR 0 2
62745: PPUSH
62746: LD_INT 1
62748: PPUSH
62749: CALL_OW 272
62753: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62754: LD_ADDR_VAR 0 5
62758: PUSH
62759: LD_VAR 0 1
62763: PPUSH
62764: CALL_OW 251
62768: PPUSH
62769: LD_VAR 0 2
62773: PPUSH
62774: LD_INT 1
62776: PPUSH
62777: CALL_OW 273
62781: ST_TO_ADDR
// if ValidHex ( x , y ) then
62782: LD_VAR 0 4
62786: PPUSH
62787: LD_VAR 0 5
62791: PPUSH
62792: CALL_OW 488
62796: IFFALSE 62817
// ComTurnXY ( unit , x , y ) ;
62798: LD_VAR 0 1
62802: PPUSH
62803: LD_VAR 0 4
62807: PPUSH
62808: LD_VAR 0 5
62812: PPUSH
62813: CALL_OW 118
// end ;
62817: LD_VAR 0 3
62821: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62822: LD_INT 0
62824: PPUSH
62825: PPUSH
// result := false ;
62826: LD_ADDR_VAR 0 3
62830: PUSH
62831: LD_INT 0
62833: ST_TO_ADDR
// if not units then
62834: LD_VAR 0 2
62838: NOT
62839: IFFALSE 62843
// exit ;
62841: GO 62888
// for i in units do
62843: LD_ADDR_VAR 0 4
62847: PUSH
62848: LD_VAR 0 2
62852: PUSH
62853: FOR_IN
62854: IFFALSE 62886
// if See ( side , i ) then
62856: LD_VAR 0 1
62860: PPUSH
62861: LD_VAR 0 4
62865: PPUSH
62866: CALL_OW 292
62870: IFFALSE 62884
// begin result := true ;
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: LD_INT 1
62879: ST_TO_ADDR
// exit ;
62880: POP
62881: POP
62882: GO 62888
// end ;
62884: GO 62853
62886: POP
62887: POP
// end ;
62888: LD_VAR 0 3
62892: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62893: LD_INT 0
62895: PPUSH
62896: PPUSH
62897: PPUSH
62898: PPUSH
// if not unit or not points then
62899: LD_VAR 0 1
62903: NOT
62904: PUSH
62905: LD_VAR 0 2
62909: NOT
62910: OR
62911: IFFALSE 62915
// exit ;
62913: GO 63005
// dist := 99999 ;
62915: LD_ADDR_VAR 0 5
62919: PUSH
62920: LD_INT 99999
62922: ST_TO_ADDR
// for i in points do
62923: LD_ADDR_VAR 0 4
62927: PUSH
62928: LD_VAR 0 2
62932: PUSH
62933: FOR_IN
62934: IFFALSE 63003
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62936: LD_ADDR_VAR 0 6
62940: PUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: LD_VAR 0 4
62950: PUSH
62951: LD_INT 1
62953: ARRAY
62954: PPUSH
62955: LD_VAR 0 4
62959: PUSH
62960: LD_INT 2
62962: ARRAY
62963: PPUSH
62964: CALL_OW 297
62968: ST_TO_ADDR
// if tmpDist < dist then
62969: LD_VAR 0 6
62973: PUSH
62974: LD_VAR 0 5
62978: LESS
62979: IFFALSE 63001
// begin result := i ;
62981: LD_ADDR_VAR 0 3
62985: PUSH
62986: LD_VAR 0 4
62990: ST_TO_ADDR
// dist := tmpDist ;
62991: LD_ADDR_VAR 0 5
62995: PUSH
62996: LD_VAR 0 6
63000: ST_TO_ADDR
// end ; end ;
63001: GO 62933
63003: POP
63004: POP
// end ;
63005: LD_VAR 0 3
63009: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63010: LD_INT 0
63012: PPUSH
// uc_side := side ;
63013: LD_ADDR_OWVAR 20
63017: PUSH
63018: LD_VAR 0 1
63022: ST_TO_ADDR
// uc_nation := 3 ;
63023: LD_ADDR_OWVAR 21
63027: PUSH
63028: LD_INT 3
63030: ST_TO_ADDR
// vc_chassis := 25 ;
63031: LD_ADDR_OWVAR 37
63035: PUSH
63036: LD_INT 25
63038: ST_TO_ADDR
// vc_engine := engine_siberite ;
63039: LD_ADDR_OWVAR 39
63043: PUSH
63044: LD_INT 3
63046: ST_TO_ADDR
// vc_control := control_computer ;
63047: LD_ADDR_OWVAR 38
63051: PUSH
63052: LD_INT 3
63054: ST_TO_ADDR
// vc_weapon := 59 ;
63055: LD_ADDR_OWVAR 40
63059: PUSH
63060: LD_INT 59
63062: ST_TO_ADDR
// result := CreateVehicle ;
63063: LD_ADDR_VAR 0 5
63067: PUSH
63068: CALL_OW 45
63072: ST_TO_ADDR
// SetDir ( result , d ) ;
63073: LD_VAR 0 5
63077: PPUSH
63078: LD_VAR 0 4
63082: PPUSH
63083: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63087: LD_VAR 0 5
63091: PPUSH
63092: LD_VAR 0 2
63096: PPUSH
63097: LD_VAR 0 3
63101: PPUSH
63102: LD_INT 0
63104: PPUSH
63105: CALL_OW 48
// end ;
63109: LD_VAR 0 5
63113: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63119: LD_ADDR_VAR 0 2
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63142: LD_VAR 0 1
63146: NOT
63147: PUSH
63148: LD_VAR 0 1
63152: PPUSH
63153: CALL_OW 264
63157: PUSH
63158: LD_INT 12
63160: PUSH
63161: LD_INT 51
63163: PUSH
63164: LD_INT 32
63166: PUSH
63167: LD_EXP 79
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: IN
63178: NOT
63179: OR
63180: IFFALSE 63184
// exit ;
63182: GO 63282
// for i := 1 to 3 do
63184: LD_ADDR_VAR 0 3
63188: PUSH
63189: DOUBLE
63190: LD_INT 1
63192: DEC
63193: ST_TO_ADDR
63194: LD_INT 3
63196: PUSH
63197: FOR_TO
63198: IFFALSE 63280
// begin tmp := GetCargo ( cargo , i ) ;
63200: LD_ADDR_VAR 0 4
63204: PUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: LD_VAR 0 3
63214: PPUSH
63215: CALL_OW 289
63219: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63220: LD_ADDR_VAR 0 2
63224: PUSH
63225: LD_VAR 0 2
63229: PPUSH
63230: LD_VAR 0 3
63234: PPUSH
63235: LD_VAR 0 4
63239: PPUSH
63240: CALL_OW 1
63244: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63245: LD_ADDR_VAR 0 2
63249: PUSH
63250: LD_VAR 0 2
63254: PPUSH
63255: LD_INT 4
63257: PPUSH
63258: LD_VAR 0 2
63262: PUSH
63263: LD_INT 4
63265: ARRAY
63266: PUSH
63267: LD_VAR 0 4
63271: PLUS
63272: PPUSH
63273: CALL_OW 1
63277: ST_TO_ADDR
// end ;
63278: GO 63197
63280: POP
63281: POP
// end ;
63282: LD_VAR 0 2
63286: RET
// export function Length ( array ) ; begin
63287: LD_INT 0
63289: PPUSH
// result := array + 0 ;
63290: LD_ADDR_VAR 0 2
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: LD_INT 0
63302: PLUS
63303: ST_TO_ADDR
// end ;
63304: LD_VAR 0 2
63308: RET
// export function PrepareArray ( array ) ; begin
63309: LD_INT 0
63311: PPUSH
// result := array diff 0 ;
63312: LD_ADDR_VAR 0 2
63316: PUSH
63317: LD_VAR 0 1
63321: PUSH
63322: LD_INT 0
63324: DIFF
63325: ST_TO_ADDR
// if not result [ 1 ] then
63326: LD_VAR 0 2
63330: PUSH
63331: LD_INT 1
63333: ARRAY
63334: NOT
63335: IFFALSE 63355
// result := Delete ( result , 1 ) ;
63337: LD_ADDR_VAR 0 2
63341: PUSH
63342: LD_VAR 0 2
63346: PPUSH
63347: LD_INT 1
63349: PPUSH
63350: CALL_OW 3
63354: ST_TO_ADDR
// end ; end_of_file
63355: LD_VAR 0 2
63359: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63360: LD_VAR 0 1
63364: PPUSH
63365: LD_VAR 0 2
63369: PPUSH
63370: LD_VAR 0 3
63374: PPUSH
63375: LD_VAR 0 4
63379: PPUSH
63380: LD_VAR 0 5
63384: PPUSH
63385: LD_VAR 0 6
63389: PPUSH
63390: CALL 1910 0 6
// end ;
63394: PPOPN 6
63396: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63397: LD_INT 0
63399: PPUSH
// begin if not units then
63400: LD_VAR 0 1
63404: NOT
63405: IFFALSE 63409
// exit ;
63407: GO 63409
// end ;
63409: PPOPN 7
63411: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63412: CALL 1881 0 0
// end ;
63416: PPOPN 1
63418: END
