// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3118 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7115 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7115 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7115 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2820
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2820
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2794: LD_ADDR_EXP 11
2798: PUSH
2799: LD_STRING QConv
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: MINUS
2810: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2811: LD_EXP 4
2815: PPUSH
2816: CALL_OW 491
// end ; end ;
2820: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2821: LD_EXP 11
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: IFFALSE 3041
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// begin enable ;
2839: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 51
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 69
2859: ST_TO_ADDR
// if debug then
2860: LD_EXP 1
2864: IFFALSE 2901
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2866: LD_ADDR_OWVAR 47
2870: PUSH
2871: LD_EXP 13
2875: PUSH
2876: LD_EXP 12
2880: ARRAY
2881: PUSH
2882: LD_EXP 13
2886: PUSH
2887: LD_EXP 12
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ARRAY
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: ST_TO_ADDR
// for i = 1 to car do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 3
2915: PUSH
2916: FOR_TO
2917: IFFALSE 3039
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: PPUSH
2930: LD_EXP 13
2934: PUSH
2935: LD_EXP 12
2939: ARRAY
2940: PPUSH
2941: LD_EXP 13
2945: PUSH
2946: LD_EXP 12
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PPUSH
2956: CALL 7193 0 3
2960: IFFALSE 2978
// conv_am := conv_am + 2 else
2962: LD_ADDR_EXP 12
2966: PUSH
2967: LD_EXP 12
2971: PUSH
2972: LD_INT 2
2974: PLUS
2975: ST_TO_ADDR
2976: GO 3037
// if not HasTask ( car [ i ] ) then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 314
2993: NOT
2994: IFFALSE 3037
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2996: LD_VAR 0 3
3000: PUSH
3001: LD_VAR 0 1
3005: ARRAY
3006: PPUSH
3007: LD_EXP 13
3011: PUSH
3012: LD_EXP 12
3016: ARRAY
3017: PPUSH
3018: LD_EXP 13
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_INT 1
3030: PLUS
3031: ARRAY
3032: PPUSH
3033: CALL_OW 111
// end ;
3037: GO 2916
3039: POP
3040: POP
// end ;
3041: PPOPN 3
3043: END
// every 0 0$01 trigger conv = 0 do var i ;
3044: LD_EXP 11
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3115
3054: GO 3056
3056: DISABLE
3057: LD_INT 0
3059: PPUSH
// begin enable ;
3060: ENABLE
// for i = 1 to cargos do
3061: LD_ADDR_VAR 0 1
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_EXP 4
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3113
// if HasTask ( cargos [ i ] ) then
3079: LD_EXP 4
3083: PUSH
3084: LD_VAR 0 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 314
3094: IFFALSE 3111
// ComStop ( cargos [ i ] ) ;
3096: LD_EXP 4
3100: PUSH
3101: LD_VAR 0 1
3105: ARRAY
3106: PPUSH
3107: CALL_OW 141
3111: GO 3076
3113: POP
3114: POP
// end ; end_of_file
3115: PPOPN 1
3117: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3118: LD_INT 0
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
// uc_side := 2 ;
3136: LD_ADDR_OWVAR 20
3140: PUSH
3141: LD_INT 2
3143: ST_TO_ADDR
// uc_nation := 2 ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// if road = 1 then
3152: LD_EXP 2
3156: PUSH
3157: LD_INT 1
3159: EQUAL
3160: IFFALSE 3922
// begin case Difficulty of 1 :
3162: LD_OWVAR 67
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3482
3175: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 56
3183: PUSH
3184: LD_INT 37
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 81
3192: PUSH
3193: LD_INT 6
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: LD_INT 90
3201: PUSH
3202: LD_INT 25
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 68
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 96
3219: PUSH
3220: LD_INT 82
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 80
3228: PUSH
3229: LD_INT 109
3231: PUSH
3232: LD_INT 4
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 9
3265: PUSH
3266: LD_INT 10
3268: PUSH
3269: LD_INT 11
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 13
3285: PUSH
3286: LD_INT 14
3288: PUSH
3289: LD_INT 15
3291: PUSH
3292: LD_INT 16
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3301: LD_ADDR_VAR 0 15
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3324: LD_ADDR_VAR 0 8
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 96
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 142
3343: PUSH
3344: LD_INT 98
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 100
3394: PUSH
3395: LD_INT 21
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 38
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 41
3422: PUSH
3423: LD_INT 29
3425: PUSH
3426: LD_INT 62
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 65
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: LD_INT 95
3440: PUSH
3441: LD_INT 55
3443: PUSH
3444: LD_INT 98
3446: PUSH
3447: LD_INT 54
3449: PUSH
3450: LD_INT 96
3452: PUSH
3453: LD_INT 111
3455: PUSH
3456: LD_INT 99
3458: PUSH
3459: LD_INT 112
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// end ; 2 , 3 :
3480: GO 3920
3482: LD_INT 2
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3496
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3919
3496: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: LD_INT 37
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 90
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 105
3531: PUSH
3532: LD_INT 68
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 96
3540: PUSH
3541: LD_INT 82
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 80
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 8
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: LD_INT 10
3592: PUSH
3593: LD_INT 11
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 42
3601: PUSH
3602: LD_INT 43
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 13
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 15
3628: PUSH
3629: LD_INT 16
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3638: LD_ADDR_VAR 0 15
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3661: LD_ADDR_VAR 0 8
3665: PUSH
3666: LD_INT 68
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: LD_INT 96
3674: PUSH
3675: LD_INT 53
3677: PUSH
3678: LD_INT 142
3680: PUSH
3681: LD_INT 98
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 82
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3700: LD_ADDR_VAR 0 6
3704: PUSH
3705: LD_INT 17
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3715: LD_ADDR_VAR 0 5
3719: PUSH
3720: LD_INT 104
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 100
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 91
3740: PUSH
3741: LD_INT 28
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_INT 31
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 71
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 71
3767: PUSH
3768: LD_INT 103
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 66
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3806: LD_ADDR_VAR 0 7
3810: PUSH
3811: LD_INT 38
3813: PUSH
3814: LD_INT 28
3816: PUSH
3817: LD_INT 41
3819: PUSH
3820: LD_INT 29
3822: PUSH
3823: LD_INT 62
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 65
3831: PUSH
3832: LD_INT 7
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 55
3840: PUSH
3841: LD_INT 98
3843: PUSH
3844: LD_INT 54
3846: PUSH
3847: LD_INT 96
3849: PUSH
3850: LD_INT 111
3852: PUSH
3853: LD_INT 99
3855: PUSH
3856: LD_INT 112
3858: PUSH
3859: LD_INT 86
3861: PUSH
3862: LD_INT 17
3864: PUSH
3865: LD_INT 89
3867: PUSH
3868: LD_INT 17
3870: PUSH
3871: LD_INT 136
3873: PUSH
3874: LD_INT 91
3876: PUSH
3877: LD_INT 140
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 54
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// end ; end ;
3917: GO 3920
3919: POP
// end else
3920: GO 4862
// if road = 2 then
3922: LD_EXP 2
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 4862
// begin case Difficulty of 1 :
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4356
3945: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: LD_INT 62
3962: PUSH
3963: LD_INT 8
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 68
3974: PUSH
3975: LD_INT 2
3977: PUSH
3978: LD_INT 143
3980: PUSH
3981: LD_INT 96
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 90
3989: PUSH
3990: LD_INT 115
3992: PUSH
3993: LD_INT 4
3995: PUSH
3996: LD_INT 56
3998: PUSH
3999: LD_INT 59
4001: PUSH
4002: LD_INT 5
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 45
4032: PUSH
4033: LD_INT 46
4035: PUSH
4036: LD_INT 47
4038: PUSH
4039: LD_INT 48
4041: PUSH
4042: LD_INT 49
4044: PUSH
4045: LD_INT 50
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4087: LD_ADDR_VAR 0 15
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4118: LD_ADDR_VAR 0 8
4122: PUSH
4123: LD_INT 44
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 62
4131: PUSH
4132: LD_INT 8
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 68
4140: PUSH
4141: LD_INT 143
4143: PUSH
4144: LD_INT 96
4146: PUSH
4147: LD_INT 90
4149: PUSH
4150: LD_INT 115
4152: PUSH
4153: LD_INT 56
4155: PUSH
4156: LD_INT 59
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_INT 17
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 51
4195: PUSH
4196: LD_INT 29
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: LD_INT 55
4204: PUSH
4205: LD_INT 33
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 13
4235: PUSH
4236: LD_INT 35
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 98
4244: PUSH
4245: LD_INT 20
4247: PUSH
4248: LD_INT 102
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 97
4256: PUSH
4257: LD_INT 33
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 54
4265: PUSH
4266: LD_INT 98
4268: PUSH
4269: LD_INT 54
4271: PUSH
4272: LD_INT 96
4274: PUSH
4275: LD_INT 55
4277: PUSH
4278: LD_INT 94
4280: PUSH
4281: LD_INT 56
4283: PUSH
4284: LD_INT 145
4286: PUSH
4287: LD_INT 102
4289: PUSH
4290: LD_INT 146
4292: PUSH
4293: LD_INT 100
4295: PUSH
4296: LD_INT 97
4298: PUSH
4299: LD_INT 114
4301: PUSH
4302: LD_INT 99
4304: PUSH
4305: LD_INT 117
4307: PUSH
4308: LD_INT 54
4310: PUSH
4311: LD_INT 58
4313: PUSH
4314: LD_INT 55
4316: PUSH
4317: LD_INT 56
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ; 2 , 3 :
4354: GO 4862
4356: LD_INT 2
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4370
4362: LD_INT 3
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4861
4370: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 44
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 62
4387: PUSH
4388: LD_INT 8
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 68
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 143
4405: PUSH
4406: LD_INT 96
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 90
4414: PUSH
4415: LD_INT 115
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: LD_INT 56
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 45
4457: PUSH
4458: LD_INT 46
4460: PUSH
4461: LD_INT 47
4463: PUSH
4464: LD_INT 48
4466: PUSH
4467: LD_INT 49
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 45
4488: PUSH
4489: LD_INT 46
4491: PUSH
4492: LD_INT 47
4494: PUSH
4495: LD_INT 48
4497: PUSH
4498: LD_INT 49
4500: PUSH
4501: LD_INT 50
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4512: LD_ADDR_VAR 0 15
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4543: LD_ADDR_VAR 0 8
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 27
4553: PUSH
4554: LD_INT 44
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 62
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 143
4574: PUSH
4575: LD_INT 96
4577: PUSH
4578: LD_INT 90
4580: PUSH
4581: LD_INT 115
4583: PUSH
4584: LD_INT 56
4586: PUSH
4587: LD_INT 59
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4606: LD_ADDR_VAR 0 6
4610: PUSH
4611: LD_INT 17
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 29
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 55
4637: PUSH
4638: LD_INT 33
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 37
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 72
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 120
4664: PUSH
4665: LD_INT 93
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 25
4673: PUSH
4674: LD_INT 45
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: LD_INT 27
4682: PUSH
4683: LD_INT 48
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 51
4694: PUSH
4695: LD_INT 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4724: LD_ADDR_VAR 0 7
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 13
4734: PUSH
4735: LD_INT 33
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 35
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 98
4749: PUSH
4750: LD_INT 20
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 97
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 101
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: LD_INT 98
4773: PUSH
4774: LD_INT 54
4776: PUSH
4777: LD_INT 96
4779: PUSH
4780: LD_INT 55
4782: PUSH
4783: LD_INT 94
4785: PUSH
4786: LD_INT 56
4788: PUSH
4789: LD_INT 145
4791: PUSH
4792: LD_INT 102
4794: PUSH
4795: LD_INT 146
4797: PUSH
4798: LD_INT 100
4800: PUSH
4801: LD_INT 97
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 99
4809: PUSH
4810: LD_INT 117
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: LD_INT 58
4818: PUSH
4819: LD_INT 55
4821: PUSH
4822: LD_INT 56
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// end ; end ;
4859: GO 4862
4861: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4862: LD_ADDR_EXP 3
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: ST_TO_ADDR
// if Difficulty > 1 then
4887: LD_OWVAR 67
4891: PUSH
4892: LD_INT 1
4894: GREATER
4895: IFFALSE 4910
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: CALL_OW 322
// if Difficulty > 1 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 1
4917: GREATER
4918: IFFALSE 4933
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4920: LD_INT 52
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: CALL_OW 322
// miners := [ ] ;
4933: LD_ADDR_EXP 15
4937: PUSH
4938: EMPTY
4939: ST_TO_ADDR
// hovers := [ ] ;
4940: LD_ADDR_EXP 16
4944: PUSH
4945: EMPTY
4946: ST_TO_ADDR
// hovers_driver := [ ] ;
4947: LD_ADDR_EXP 17
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// tanks := [ ] ;
4954: LD_ADDR_EXP 18
4958: PUSH
4959: EMPTY
4960: ST_TO_ADDR
// p := 1 ;
4961: LD_ADDR_VAR 0 10
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4969: LD_ADDR_OWVAR 43
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: LD_INT 7
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: LD_OWVAR 67
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ARRAY
5001: ST_TO_ADDR
// bc_type = b_breastwork ;
5002: LD_ADDR_OWVAR 42
5006: PUSH
5007: LD_INT 31
5009: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 3
5027: DIVREAL
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5207
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 10
5046: ARRAY
5047: PPUSH
5048: LD_VAR 0 2
5052: PUSH
5053: LD_VAR 0 10
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 10
5072: PUSH
5073: LD_INT 2
5075: PLUS
5076: ARRAY
5077: PPUSH
5078: CALL_OW 47
5082: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_EXP 3
5093: PPUSH
5094: CALL_OW 380
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 12
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// dir := GetDir ( b ) ;
5108: LD_ADDR_VAR 0 16
5112: PUSH
5113: LD_VAR 0 13
5117: PPUSH
5118: CALL_OW 254
5122: ST_TO_ADDR
// if dir < 3 then
5123: LD_VAR 0 16
5127: PUSH
5128: LD_INT 3
5130: LESS
5131: IFFALSE 5149
// dir := dir + 3 else
5133: LD_ADDR_VAR 0 16
5137: PUSH
5138: LD_VAR 0 16
5142: PUSH
5143: LD_INT 3
5145: PLUS
5146: ST_TO_ADDR
5147: GO 5163
// dir := dir - 3 ;
5149: LD_ADDR_VAR 0 16
5153: PUSH
5154: LD_VAR 0 16
5158: PUSH
5159: LD_INT 3
5161: MINUS
5162: ST_TO_ADDR
// SetDir ( un , dir ) ;
5163: LD_VAR 0 12
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5177: LD_VAR 0 12
5181: PPUSH
5182: LD_VAR 0 13
5186: PPUSH
5187: CALL_OW 52
// p := p + 3 ;
5191: LD_ADDR_VAR 0 10
5195: PUSH
5196: LD_VAR 0 10
5200: PUSH
5201: LD_INT 3
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: GO 5029
5207: POP
5208: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5209: LD_ADDR_VAR 0 14
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: ST_TO_ADDR
// for i = 1 to sold_stand do
5234: LD_ADDR_VAR 0 9
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5429
// for p = 1 to x do
5252: LD_ADDR_VAR 0 10
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 14
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5425
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 9
5279: ARRAY
5280: PUSH
5281: LD_INT 10
5283: EQUAL
5284: PUSH
5285: LD_EXP 2
5289: PUSH
5290: LD_INT 2
5292: EQUAL
5293: PUSH
5294: LD_OWVAR 67
5298: PUSH
5299: LD_INT 1
5301: GREATER
5302: AND
5303: PUSH
5304: LD_VAR 0 10
5308: PUSH
5309: LD_VAR 0 14
5313: EQUAL
5314: AND
5315: OR
5316: IFFALSE 5335
// PrepareHuman ( false , class_mortar , skill ) else
5318: LD_INT 0
5320: PPUSH
5321: LD_INT 8
5323: PPUSH
5324: LD_EXP 3
5328: PPUSH
5329: CALL_OW 380
5333: GO 5350
// PrepareHuman ( false , 1 , skill ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_EXP 3
5345: PPUSH
5346: CALL_OW 380
// un := CreateHuman ;
5350: LD_ADDR_VAR 0 12
5354: PUSH
5355: CALL_OW 44
5359: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5360: LD_VAR 0 12
5364: PPUSH
5365: CALL_OW 257
5369: PUSH
5370: LD_INT 1
5372: EQUAL
5373: IFFALSE 5391
// miners := miners ^ un ;
5375: LD_ADDR_EXP 15
5379: PUSH
5380: LD_EXP 15
5384: PUSH
5385: LD_VAR 0 12
5389: ADD
5390: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5391: LD_VAR 0 12
5395: PPUSH
5396: LD_VAR 0 3
5400: PUSH
5401: LD_VAR 0 9
5405: ARRAY
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// ComHold ( un ) ;
5414: LD_VAR 0 12
5418: PPUSH
5419: CALL_OW 140
// end ;
5423: GO 5267
5425: POP
5426: POP
5427: GO 5249
5429: POP
5430: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5431: LD_ADDR_VAR 0 14
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 4
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: ST_TO_ADDR
// for i = 1 to sold_crawl do
5456: LD_ADDR_VAR 0 9
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_VAR 0 4
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5584
// for p = 1 to x do
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 14
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5580
// begin PrepareHuman ( false , 1 , skill ) ;
5492: LD_INT 0
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_EXP 3
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 12
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5517: LD_VAR 0 12
5521: PPUSH
5522: LD_VAR 0 15
5526: PUSH
5527: LD_VAR 0 9
5531: ARRAY
5532: PPUSH
5533: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5537: LD_VAR 0 12
5541: PPUSH
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 9
5551: ARRAY
5552: PPUSH
5553: LD_INT 0
5555: PPUSH
5556: CALL_OW 49
// ComCrawl ( un ) ;
5560: LD_VAR 0 12
5564: PPUSH
5565: CALL_OW 137
// AddComHold ( un ) ;
5569: LD_VAR 0 12
5573: PPUSH
5574: CALL_OW 200
// end ;
5578: GO 5489
5580: POP
5581: POP
5582: GO 5471
5584: POP
5585: POP
// p := 1 ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5594: LD_ADDR_VAR 0 9
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 8
5608: PUSH
5609: LD_INT 2
5611: DIVREAL
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5668
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5616: LD_VAR 0 8
5620: PUSH
5621: LD_VAR 0 10
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 8
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_INT 10
5647: PPUSH
5648: CALL_OW 330
// p := p + 2 ;
5652: LD_ADDR_VAR 0 10
5656: PUSH
5657: LD_VAR 0 10
5661: PUSH
5662: LD_INT 2
5664: PLUS
5665: ST_TO_ADDR
// end ;
5666: GO 5613
5668: POP
5669: POP
// for i = 1 to hover_x [ 2 ] do
5670: LD_ADDR_VAR 0 9
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5839
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5692: LD_INT 0
5694: PPUSH
5695: LD_INT 3
5697: PPUSH
5698: LD_EXP 3
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 12
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5721: LD_ADDR_EXP 17
5725: PUSH
5726: LD_EXP 17
5730: PUSH
5731: LD_VAR 0 12
5735: ADD
5736: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 11
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 92
5759: PUSH
5760: LD_INT 24
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_VAR 0 9
5771: PUSH
5772: LD_INT 2
5774: MOD
5775: PUSH
5776: LD_INT 1
5778: PLUS
5779: ARRAY
5780: PPUSH
5781: CALL 7115 0 6
5785: ST_TO_ADDR
// hovers := hovers ^ veh ;
5786: LD_ADDR_EXP 16
5790: PUSH
5791: LD_EXP 16
5795: PUSH
5796: LD_VAR 0 11
5800: ADD
5801: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5802: LD_VAR 0 11
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_INT 0
5818: PPUSH
5819: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5823: LD_VAR 0 12
5827: PPUSH
5828: LD_VAR 0 11
5832: PPUSH
5833: CALL_OW 52
// end ;
5837: GO 5689
5839: POP
5840: POP
// p := 1 ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: DIVREAL
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6043
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 3
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 380
// un := CreateHuman ;
5890: LD_ADDR_VAR 0 12
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5900: LD_ADDR_VAR 0 11
5904: PUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 14
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 27
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: PPUSH
5946: CALL 7115 0 6
5950: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5951: LD_VAR 0 11
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 10
5965: PUSH
5966: LD_INT 2
5968: PLUS
5969: ARRAY
5970: PPUSH
5971: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5975: LD_VAR 0 11
5979: PPUSH
5980: LD_VAR 0 5
5984: PUSH
5985: LD_VAR 0 10
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ARRAY
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_VAR 0 11
6022: PPUSH
6023: CALL_OW 52
// p := p + 3 ;
6027: LD_ADDR_VAR 0 10
6031: PUSH
6032: LD_VAR 0 10
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: GO 5868
6043: POP
6044: POP
// p := 1 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6053: LD_ADDR_VAR 0 9
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_VAR 0 7
6067: PUSH
6068: LD_INT 2
6070: DIVREAL
6071: PUSH
6072: FOR_TO
6073: IFFALSE 6127
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6075: LD_VAR 0 7
6079: PUSH
6080: LD_VAR 0 10
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_VAR 0 10
6095: PUSH
6096: LD_INT 1
6098: PLUS
6099: ARRAY
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 454
// p := p + 2 ;
6111: LD_ADDR_VAR 0 10
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: LD_INT 2
6123: PLUS
6124: ST_TO_ADDR
// end ;
6125: GO 6072
6127: POP
6128: POP
// mines := mines_xy ;
6129: LD_ADDR_EXP 14
6133: PUSH
6134: LD_VAR 0 7
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 1
6143: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin enable ;
6153: ENABLE
// if tanks > 0 then
6154: LD_EXP 18
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: IFFALSE 6270
// begin for i = 1 to tanks do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_EXP 18
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6268
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6182: LD_INT 2
6184: PPUSH
6185: LD_EXP 18
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: PPUSH
6196: CALL_OW 292
6200: PUSH
6201: LD_EXP 18
6205: PUSH
6206: LD_VAR 0 3
6210: ARRAY
6211: PPUSH
6212: CALL_OW 314
6216: NOT
6217: AND
6218: IFFALSE 6266
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6220: LD_EXP 18
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_EXP 18
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PPUSH
6257: CALL_OW 74
6261: PPUSH
6262: CALL_OW 115
6266: GO 6179
6268: POP
6269: POP
// end ; if hovers > 0 then
6270: LD_EXP 16
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: IFFALSE 6603
// begin for i = 1 to hovers do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_EXP 16
6294: PUSH
6295: FOR_TO
6296: IFFALSE 6601
// begin if GetLives ( hovers [ i ] ) < 600 then
6298: LD_EXP 16
6302: PUSH
6303: LD_VAR 0 3
6307: ARRAY
6308: PPUSH
6309: CALL_OW 256
6313: PUSH
6314: LD_INT 600
6316: LESS
6317: IFFALSE 6428
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6319: LD_EXP 16
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PPUSH
6330: LD_INT 18
6332: PPUSH
6333: CALL_OW 308
6337: NOT
6338: IFFALSE 6360
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6340: LD_EXP 16
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: PPUSH
6351: LD_INT 18
6353: PPUSH
6354: CALL_OW 113
6358: GO 6428
// if IsDrivenBy ( hovers [ i ] ) then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 311
6375: IFFALSE 6428
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6377: LD_EXP 16
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 311
6392: PPUSH
6393: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: LD_EXP 16
6417: PUSH
6418: LD_VAR 0 3
6422: ARRAY
6423: PPUSH
6424: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6428: LD_EXP 16
6432: PUSH
6433: LD_VAR 0 3
6437: ARRAY
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 998
6446: GREATER
6447: IFFALSE 6599
// begin if not IsDrivenBy ( hovers [ i ] ) then
6449: LD_EXP 16
6453: PUSH
6454: LD_VAR 0 3
6458: ARRAY
6459: PPUSH
6460: CALL_OW 311
6464: NOT
6465: IFFALSE 6502
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6467: LD_EXP 17
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: LD_EXP 16
6482: PPUSH
6483: LD_INT 58
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 72
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6502: LD_INT 19
6504: PPUSH
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 70
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: IFFALSE 6599
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6525: LD_EXP 16
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PPUSH
6536: CALL_OW 311
6540: PPUSH
6541: CALL_OW 314
6545: NOT
6546: IFFALSE 6599
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6548: LD_EXP 16
6552: PUSH
6553: LD_VAR 0 3
6557: ARRAY
6558: PPUSH
6559: CALL_OW 311
6563: PPUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_EXP 16
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: PPUSH
6590: CALL_OW 74
6594: PPUSH
6595: CALL_OW 115
// end ; end ;
6599: GO 6295
6601: POP
6602: POP
// end ; p := 1 ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_EXP 14
6625: PUSH
6626: LD_INT 2
6628: DIVREAL
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6891
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 14
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PPUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: PLUS
6662: ARRAY
6663: PPUSH
6664: CALL_OW 428
6668: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6669: LD_VAR 0 4
6673: PUSH
6674: LD_EXP 14
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PPUSH
6685: LD_EXP 14
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: ARRAY
6699: PPUSH
6700: CALL_OW 458
6704: AND
6705: IFFALSE 6875
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 14
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: PPUSH
6733: CALL_OW 428
6737: PPUSH
6738: CALL_OW 255
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: PUSH
6754: LD_EXP 15
6758: PPUSH
6759: LD_EXP 14
6763: PUSH
6764: LD_VAR 0 2
6768: ARRAY
6769: PPUSH
6770: LD_EXP 14
6774: PUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ARRAY
6784: PPUSH
6785: CALL_OW 73
6789: PPUSH
6790: LD_EXP 14
6794: PUSH
6795: LD_VAR 0 2
6799: ARRAY
6800: PPUSH
6801: LD_EXP 14
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ARRAY
6815: PPUSH
6816: CALL_OW 297
6820: PUSH
6821: LD_INT 30
6823: LESS
6824: AND
6825: IFFALSE 6875
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6827: LD_EXP 14
6831: PUSH
6832: LD_VAR 0 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 14
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 456
// if not mines_trigger then
6860: LD_EXP 10
6864: NOT
6865: IFFALSE 6875
// mines_trigger := true ;
6867: LD_ADDR_EXP 10
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// end ; p := p + 2 ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: PLUS
6888: ST_TO_ADDR
// end ;
6889: GO 6630
6891: POP
6892: POP
// end ;
6893: PPOPN 4
6895: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6896: LD_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_EXP 6
6909: PPUSH
6910: CALL_OW 296
6914: PUSH
6915: LD_INT 20
6917: GREATER
6918: PUSH
6919: LD_EXP 4
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_EXP 6
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 20
6940: GREATER
6941: OR
6942: IFFALSE 7057
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// begin for i = 1 to Difficulty + 1 do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_OWVAR 67
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7055
// begin uc_side := 2 ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_INT 2
6980: ST_TO_ADDR
// uc_nation := 2 ;
6981: LD_ADDR_OWVAR 21
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6989: LD_INT 0
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 380
// un := CreateHuman ;
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: CALL_OW 44
7013: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 44
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_EXP 4
7038: PPUSH
7039: LD_VAR 0 2
7043: PPUSH
7044: CALL_OW 74
7048: PPUSH
7049: CALL_OW 115
// end ;
7053: GO 6970
7055: POP
7056: POP
// end ;
7057: PPOPN 2
7059: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7060: LD_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: IN
7101: IFFALSE 7112
// ComRetreat ( driver ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL 7244 0 1
// end ; end_of_file
7112: PPOPN 4
7114: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7115: LD_INT 0
7117: PPUSH
// uc_side := side ;
7118: LD_ADDR_OWVAR 20
7122: PUSH
7123: LD_VAR 0 1
7127: ST_TO_ADDR
// uc_nation := nation ;
7128: LD_ADDR_OWVAR 21
7132: PUSH
7133: LD_VAR 0 2
7137: ST_TO_ADDR
// vc_chassis := chassis ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_VAR 0 3
7147: ST_TO_ADDR
// vc_engine := engine ;
7148: LD_ADDR_OWVAR 39
7152: PUSH
7153: LD_VAR 0 4
7157: ST_TO_ADDR
// vc_control := control ;
7158: LD_ADDR_OWVAR 38
7162: PUSH
7163: LD_VAR 0 5
7167: ST_TO_ADDR
// vc_weapon := weapon ;
7168: LD_ADDR_OWVAR 40
7172: PUSH
7173: LD_VAR 0 6
7177: ST_TO_ADDR
// result := CreateVehicle ;
7178: LD_ADDR_VAR 0 7
7182: PUSH
7183: CALL_OW 45
7187: ST_TO_ADDR
// end ;
7188: LD_VAR 0 7
7192: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7193: LD_INT 0
7195: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 3
7210: PPUSH
7211: CALL_OW 297
7215: PUSH
7216: LD_INT 6
7218: LESS
7219: IFFALSE 7231
// result := true else
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
7229: GO 7239
// result := false ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 4
7243: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PPUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 74
7287: PPUSH
7288: CALL_OW 119
// dir := GetDir ( un ) ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 254
7306: ST_TO_ADDR
// dir := dir - 3 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 3
7319: MINUS
7320: ST_TO_ADDR
// if dir < 0 then
7321: LD_VAR 0 4
7325: PUSH
7326: LD_INT 0
7328: LESS
7329: IFFALSE 7345
// dir := dir + 6 ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 6
7343: PLUS
7344: ST_TO_ADDR
// while true do
7345: LD_INT 1
7347: IFFALSE 7718
// begin coord_dist := 3 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 250
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: CALL_OW 272
7386: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 273
7416: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 351
7431: PUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 488
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 6
7461: PPUSH
7462: CALL_OW 428
7466: PUSH
7467: LD_INT 0
7469: NONEQUAL
7470: OR
7471: IFFALSE 7632
// begin repeat begin coord_dist := coord_dist + 1 ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: ST_TO_ADDR
// dir := dir + 1 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// if dir > 5 then
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 5
7508: GREATER
7509: IFFALSE 7519
// dir = 0 ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7519: LD_ADDR_VAR 0 5
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 250
7533: PPUSH
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 272
7548: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 251
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 273
7578: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 351
7593: NOT
7594: PUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 488
7609: AND
7610: PUSH
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_VAR 0 6
7620: PPUSH
7621: CALL_OW 428
7625: PUSH
7626: LD_INT 0
7628: EQUAL
7629: AND
7630: IFFALSE 7473
// end ; ComMoveXY ( un , x , y ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 5
7641: PPUSH
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 111
// Wait ( 0 0$1 ) ;
7651: LD_INT 35
7653: PPUSH
7654: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_INT 81
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PPUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 74
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 10
7702: GREATEREQUAL
7703: IFFALSE 7716
// begin ComStop ( un ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 141
// break ;
7714: GO 7718
// end ; end ;
7716: GO 7345
// end ; end_of_file end_of_file
7718: LD_VAR 0 2
7722: RET
// export globalGameSaveCounter ; every 0 0$1 do
7723: GO 7725
7725: DISABLE
// begin enable ;
7726: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7727: LD_STRING updateTimer(
7729: PUSH
7730: LD_OWVAR 1
7734: STR
7735: PUSH
7736: LD_STRING );
7738: STR
7739: PPUSH
7740: CALL_OW 559
// end ;
7744: END
// every 0 0$1 do
7745: GO 7747
7747: DISABLE
// begin globalGameSaveCounter := 0 ;
7748: LD_ADDR_EXP 19
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7756: LD_STRING setGameSaveCounter(0)
7758: PPUSH
7759: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7763: LD_STRING initStreamRollete();
7765: PPUSH
7766: CALL_OW 559
// InitStreamMode ;
7770: CALL 9113 0 0
// DefineStreamItems ( false ) ;
7774: LD_INT 0
7776: PPUSH
7777: CALL 9577 0 1
// end ;
7781: END
// export function SOS_MapStart ( ) ; begin
7782: LD_INT 0
7784: PPUSH
// if streamModeActive then
7785: LD_EXP 20
7789: IFFALSE 7798
// DefineStreamItems ( true ) ;
7791: LD_INT 1
7793: PPUSH
7794: CALL 9577 0 1
// UpdateLuaVariables ( ) ;
7798: CALL 7815 0 0
// UpdateFactoryWaypoints ( ) ;
7802: CALL 22446 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7806: CALL 22703 0 0
// end ;
7810: LD_VAR 0 1
7814: RET
// function UpdateLuaVariables ( ) ; begin
7815: LD_INT 0
7817: PPUSH
// if globalGameSaveCounter then
7818: LD_EXP 19
7822: IFFALSE 7856
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7824: LD_ADDR_EXP 19
7828: PUSH
7829: LD_EXP 19
7833: PPUSH
7834: CALL 62594 0 1
7838: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7839: LD_STRING setGameSaveCounter(
7841: PUSH
7842: LD_EXP 19
7846: STR
7847: PUSH
7848: LD_STRING )
7850: STR
7851: PPUSH
7852: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7856: LD_STRING setGameDifficulty(
7858: PUSH
7859: LD_OWVAR 67
7863: STR
7864: PUSH
7865: LD_STRING )
7867: STR
7868: PPUSH
7869: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7873: LD_STRING displayDifficulty(
7875: PUSH
7876: LD_OWVAR 67
7880: STR
7881: PUSH
7882: LD_STRING )
7884: STR
7885: PPUSH
7886: CALL_OW 559
// end ;
7890: LD_VAR 0 1
7894: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7895: LD_INT 0
7897: PPUSH
// if p2 = stream_mode then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 100
7905: EQUAL
7906: IFFALSE 8909
// begin if not StreamModeActive then
7908: LD_EXP 20
7912: NOT
7913: IFFALSE 7923
// StreamModeActive := true ;
7915: LD_ADDR_EXP 20
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// if p3 = 0 then
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 0
7930: EQUAL
7931: IFFALSE 7937
// InitStreamMode ;
7933: CALL 9113 0 0
// if p3 = 1 then
7937: LD_VAR 0 3
7941: PUSH
7942: LD_INT 1
7944: EQUAL
7945: IFFALSE 7955
// sRocket := true ;
7947: LD_ADDR_EXP 25
7951: PUSH
7952: LD_INT 1
7954: ST_TO_ADDR
// if p3 = 2 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 2
7962: EQUAL
7963: IFFALSE 7973
// sSpeed := true ;
7965: LD_ADDR_EXP 24
7969: PUSH
7970: LD_INT 1
7972: ST_TO_ADDR
// if p3 = 3 then
7973: LD_VAR 0 3
7977: PUSH
7978: LD_INT 3
7980: EQUAL
7981: IFFALSE 7991
// sEngine := true ;
7983: LD_ADDR_EXP 26
7987: PUSH
7988: LD_INT 1
7990: ST_TO_ADDR
// if p3 = 4 then
7991: LD_VAR 0 3
7995: PUSH
7996: LD_INT 4
7998: EQUAL
7999: IFFALSE 8009
// sSpec := true ;
8001: LD_ADDR_EXP 23
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// if p3 = 5 then
8009: LD_VAR 0 3
8013: PUSH
8014: LD_INT 5
8016: EQUAL
8017: IFFALSE 8027
// sLevel := true ;
8019: LD_ADDR_EXP 27
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// if p3 = 6 then
8027: LD_VAR 0 3
8031: PUSH
8032: LD_INT 6
8034: EQUAL
8035: IFFALSE 8045
// sArmoury := true ;
8037: LD_ADDR_EXP 28
8041: PUSH
8042: LD_INT 1
8044: ST_TO_ADDR
// if p3 = 7 then
8045: LD_VAR 0 3
8049: PUSH
8050: LD_INT 7
8052: EQUAL
8053: IFFALSE 8063
// sRadar := true ;
8055: LD_ADDR_EXP 29
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// if p3 = 8 then
8063: LD_VAR 0 3
8067: PUSH
8068: LD_INT 8
8070: EQUAL
8071: IFFALSE 8081
// sBunker := true ;
8073: LD_ADDR_EXP 30
8077: PUSH
8078: LD_INT 1
8080: ST_TO_ADDR
// if p3 = 9 then
8081: LD_VAR 0 3
8085: PUSH
8086: LD_INT 9
8088: EQUAL
8089: IFFALSE 8099
// sHack := true ;
8091: LD_ADDR_EXP 31
8095: PUSH
8096: LD_INT 1
8098: ST_TO_ADDR
// if p3 = 10 then
8099: LD_VAR 0 3
8103: PUSH
8104: LD_INT 10
8106: EQUAL
8107: IFFALSE 8117
// sFire := true ;
8109: LD_ADDR_EXP 32
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// if p3 = 11 then
8117: LD_VAR 0 3
8121: PUSH
8122: LD_INT 11
8124: EQUAL
8125: IFFALSE 8135
// sRefresh := true ;
8127: LD_ADDR_EXP 33
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
// if p3 = 12 then
8135: LD_VAR 0 3
8139: PUSH
8140: LD_INT 12
8142: EQUAL
8143: IFFALSE 8153
// sExp := true ;
8145: LD_ADDR_EXP 34
8149: PUSH
8150: LD_INT 1
8152: ST_TO_ADDR
// if p3 = 13 then
8153: LD_VAR 0 3
8157: PUSH
8158: LD_INT 13
8160: EQUAL
8161: IFFALSE 8171
// sDepot := true ;
8163: LD_ADDR_EXP 35
8167: PUSH
8168: LD_INT 1
8170: ST_TO_ADDR
// if p3 = 14 then
8171: LD_VAR 0 3
8175: PUSH
8176: LD_INT 14
8178: EQUAL
8179: IFFALSE 8189
// sFlag := true ;
8181: LD_ADDR_EXP 36
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// if p3 = 15 then
8189: LD_VAR 0 3
8193: PUSH
8194: LD_INT 15
8196: EQUAL
8197: IFFALSE 8207
// sKamikadze := true ;
8199: LD_ADDR_EXP 44
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// if p3 = 16 then
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 16
8214: EQUAL
8215: IFFALSE 8225
// sTroll := true ;
8217: LD_ADDR_EXP 45
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// if p3 = 17 then
8225: LD_VAR 0 3
8229: PUSH
8230: LD_INT 17
8232: EQUAL
8233: IFFALSE 8243
// sSlow := true ;
8235: LD_ADDR_EXP 46
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// if p3 = 18 then
8243: LD_VAR 0 3
8247: PUSH
8248: LD_INT 18
8250: EQUAL
8251: IFFALSE 8261
// sLack := true ;
8253: LD_ADDR_EXP 47
8257: PUSH
8258: LD_INT 1
8260: ST_TO_ADDR
// if p3 = 19 then
8261: LD_VAR 0 3
8265: PUSH
8266: LD_INT 19
8268: EQUAL
8269: IFFALSE 8279
// sTank := true ;
8271: LD_ADDR_EXP 49
8275: PUSH
8276: LD_INT 1
8278: ST_TO_ADDR
// if p3 = 20 then
8279: LD_VAR 0 3
8283: PUSH
8284: LD_INT 20
8286: EQUAL
8287: IFFALSE 8297
// sRemote := true ;
8289: LD_ADDR_EXP 50
8293: PUSH
8294: LD_INT 1
8296: ST_TO_ADDR
// if p3 = 21 then
8297: LD_VAR 0 3
8301: PUSH
8302: LD_INT 21
8304: EQUAL
8305: IFFALSE 8315
// sPowell := true ;
8307: LD_ADDR_EXP 51
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// if p3 = 22 then
8315: LD_VAR 0 3
8319: PUSH
8320: LD_INT 22
8322: EQUAL
8323: IFFALSE 8333
// sTeleport := true ;
8325: LD_ADDR_EXP 54
8329: PUSH
8330: LD_INT 1
8332: ST_TO_ADDR
// if p3 = 23 then
8333: LD_VAR 0 3
8337: PUSH
8338: LD_INT 23
8340: EQUAL
8341: IFFALSE 8351
// sOilTower := true ;
8343: LD_ADDR_EXP 56
8347: PUSH
8348: LD_INT 1
8350: ST_TO_ADDR
// if p3 = 24 then
8351: LD_VAR 0 3
8355: PUSH
8356: LD_INT 24
8358: EQUAL
8359: IFFALSE 8369
// sShovel := true ;
8361: LD_ADDR_EXP 57
8365: PUSH
8366: LD_INT 1
8368: ST_TO_ADDR
// if p3 = 25 then
8369: LD_VAR 0 3
8373: PUSH
8374: LD_INT 25
8376: EQUAL
8377: IFFALSE 8387
// sSheik := true ;
8379: LD_ADDR_EXP 58
8383: PUSH
8384: LD_INT 1
8386: ST_TO_ADDR
// if p3 = 26 then
8387: LD_VAR 0 3
8391: PUSH
8392: LD_INT 26
8394: EQUAL
8395: IFFALSE 8405
// sEarthquake := true ;
8397: LD_ADDR_EXP 60
8401: PUSH
8402: LD_INT 1
8404: ST_TO_ADDR
// if p3 = 27 then
8405: LD_VAR 0 3
8409: PUSH
8410: LD_INT 27
8412: EQUAL
8413: IFFALSE 8423
// sAI := true ;
8415: LD_ADDR_EXP 61
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// if p3 = 28 then
8423: LD_VAR 0 3
8427: PUSH
8428: LD_INT 28
8430: EQUAL
8431: IFFALSE 8441
// sCargo := true ;
8433: LD_ADDR_EXP 64
8437: PUSH
8438: LD_INT 1
8440: ST_TO_ADDR
// if p3 = 29 then
8441: LD_VAR 0 3
8445: PUSH
8446: LD_INT 29
8448: EQUAL
8449: IFFALSE 8459
// sDLaser := true ;
8451: LD_ADDR_EXP 65
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// if p3 = 30 then
8459: LD_VAR 0 3
8463: PUSH
8464: LD_INT 30
8466: EQUAL
8467: IFFALSE 8477
// sExchange := true ;
8469: LD_ADDR_EXP 66
8473: PUSH
8474: LD_INT 1
8476: ST_TO_ADDR
// if p3 = 31 then
8477: LD_VAR 0 3
8481: PUSH
8482: LD_INT 31
8484: EQUAL
8485: IFFALSE 8495
// sFac := true ;
8487: LD_ADDR_EXP 67
8491: PUSH
8492: LD_INT 1
8494: ST_TO_ADDR
// if p3 = 32 then
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 32
8502: EQUAL
8503: IFFALSE 8513
// sPower := true ;
8505: LD_ADDR_EXP 68
8509: PUSH
8510: LD_INT 1
8512: ST_TO_ADDR
// if p3 = 33 then
8513: LD_VAR 0 3
8517: PUSH
8518: LD_INT 33
8520: EQUAL
8521: IFFALSE 8531
// sRandom := true ;
8523: LD_ADDR_EXP 69
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// if p3 = 34 then
8531: LD_VAR 0 3
8535: PUSH
8536: LD_INT 34
8538: EQUAL
8539: IFFALSE 8549
// sShield := true ;
8541: LD_ADDR_EXP 70
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// if p3 = 35 then
8549: LD_VAR 0 3
8553: PUSH
8554: LD_INT 35
8556: EQUAL
8557: IFFALSE 8567
// sTime := true ;
8559: LD_ADDR_EXP 71
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// if p3 = 36 then
8567: LD_VAR 0 3
8571: PUSH
8572: LD_INT 36
8574: EQUAL
8575: IFFALSE 8585
// sTools := true ;
8577: LD_ADDR_EXP 72
8581: PUSH
8582: LD_INT 1
8584: ST_TO_ADDR
// if p3 = 101 then
8585: LD_VAR 0 3
8589: PUSH
8590: LD_INT 101
8592: EQUAL
8593: IFFALSE 8603
// sSold := true ;
8595: LD_ADDR_EXP 37
8599: PUSH
8600: LD_INT 1
8602: ST_TO_ADDR
// if p3 = 102 then
8603: LD_VAR 0 3
8607: PUSH
8608: LD_INT 102
8610: EQUAL
8611: IFFALSE 8621
// sDiff := true ;
8613: LD_ADDR_EXP 38
8617: PUSH
8618: LD_INT 1
8620: ST_TO_ADDR
// if p3 = 103 then
8621: LD_VAR 0 3
8625: PUSH
8626: LD_INT 103
8628: EQUAL
8629: IFFALSE 8639
// sFog := true ;
8631: LD_ADDR_EXP 41
8635: PUSH
8636: LD_INT 1
8638: ST_TO_ADDR
// if p3 = 104 then
8639: LD_VAR 0 3
8643: PUSH
8644: LD_INT 104
8646: EQUAL
8647: IFFALSE 8657
// sReset := true ;
8649: LD_ADDR_EXP 42
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// if p3 = 105 then
8657: LD_VAR 0 3
8661: PUSH
8662: LD_INT 105
8664: EQUAL
8665: IFFALSE 8675
// sSun := true ;
8667: LD_ADDR_EXP 43
8671: PUSH
8672: LD_INT 1
8674: ST_TO_ADDR
// if p3 = 106 then
8675: LD_VAR 0 3
8679: PUSH
8680: LD_INT 106
8682: EQUAL
8683: IFFALSE 8693
// sTiger := true ;
8685: LD_ADDR_EXP 39
8689: PUSH
8690: LD_INT 1
8692: ST_TO_ADDR
// if p3 = 107 then
8693: LD_VAR 0 3
8697: PUSH
8698: LD_INT 107
8700: EQUAL
8701: IFFALSE 8711
// sBomb := true ;
8703: LD_ADDR_EXP 40
8707: PUSH
8708: LD_INT 1
8710: ST_TO_ADDR
// if p3 = 108 then
8711: LD_VAR 0 3
8715: PUSH
8716: LD_INT 108
8718: EQUAL
8719: IFFALSE 8729
// sWound := true ;
8721: LD_ADDR_EXP 48
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// if p3 = 109 then
8729: LD_VAR 0 3
8733: PUSH
8734: LD_INT 109
8736: EQUAL
8737: IFFALSE 8747
// sBetray := true ;
8739: LD_ADDR_EXP 52
8743: PUSH
8744: LD_INT 1
8746: ST_TO_ADDR
// if p3 = 110 then
8747: LD_VAR 0 3
8751: PUSH
8752: LD_INT 110
8754: EQUAL
8755: IFFALSE 8765
// sContamin := true ;
8757: LD_ADDR_EXP 53
8761: PUSH
8762: LD_INT 1
8764: ST_TO_ADDR
// if p3 = 111 then
8765: LD_VAR 0 3
8769: PUSH
8770: LD_INT 111
8772: EQUAL
8773: IFFALSE 8783
// sOil := true ;
8775: LD_ADDR_EXP 55
8779: PUSH
8780: LD_INT 1
8782: ST_TO_ADDR
// if p3 = 112 then
8783: LD_VAR 0 3
8787: PUSH
8788: LD_INT 112
8790: EQUAL
8791: IFFALSE 8801
// sStu := true ;
8793: LD_ADDR_EXP 59
8797: PUSH
8798: LD_INT 1
8800: ST_TO_ADDR
// if p3 = 113 then
8801: LD_VAR 0 3
8805: PUSH
8806: LD_INT 113
8808: EQUAL
8809: IFFALSE 8819
// sBazooka := true ;
8811: LD_ADDR_EXP 62
8815: PUSH
8816: LD_INT 1
8818: ST_TO_ADDR
// if p3 = 114 then
8819: LD_VAR 0 3
8823: PUSH
8824: LD_INT 114
8826: EQUAL
8827: IFFALSE 8837
// sMortar := true ;
8829: LD_ADDR_EXP 63
8833: PUSH
8834: LD_INT 1
8836: ST_TO_ADDR
// if p3 = 115 then
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 115
8844: EQUAL
8845: IFFALSE 8855
// sRanger := true ;
8847: LD_ADDR_EXP 73
8851: PUSH
8852: LD_INT 1
8854: ST_TO_ADDR
// if p3 = 116 then
8855: LD_VAR 0 3
8859: PUSH
8860: LD_INT 116
8862: EQUAL
8863: IFFALSE 8873
// sComputer := true ;
8865: LD_ADDR_EXP 74
8869: PUSH
8870: LD_INT 1
8872: ST_TO_ADDR
// if p3 = 117 then
8873: LD_VAR 0 3
8877: PUSH
8878: LD_INT 117
8880: EQUAL
8881: IFFALSE 8891
// s30 := true ;
8883: LD_ADDR_EXP 75
8887: PUSH
8888: LD_INT 1
8890: ST_TO_ADDR
// if p3 = 118 then
8891: LD_VAR 0 3
8895: PUSH
8896: LD_INT 118
8898: EQUAL
8899: IFFALSE 8909
// s60 := true ;
8901: LD_ADDR_EXP 76
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// end ; if p2 = hack_mode then
8909: LD_VAR 0 2
8913: PUSH
8914: LD_INT 101
8916: EQUAL
8917: IFFALSE 9045
// begin case p3 of 1 :
8919: LD_VAR 0 3
8923: PUSH
8924: LD_INT 1
8926: DOUBLE
8927: EQUAL
8928: IFTRUE 8932
8930: GO 8939
8932: POP
// hHackUnlimitedResources ; 2 :
8933: CALL 21192 0 0
8937: GO 9045
8939: LD_INT 2
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 8954
8947: POP
// hHackSetLevel10 ; 3 :
8948: CALL 21325 0 0
8952: GO 9045
8954: LD_INT 3
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8969
8962: POP
// hHackSetLevel10YourUnits ; 4 :
8963: CALL 21410 0 0
8967: GO 9045
8969: LD_INT 4
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8984
8977: POP
// hHackInvincible ; 5 :
8978: CALL 21858 0 0
8982: GO 9045
8984: LD_INT 5
8986: DOUBLE
8987: EQUAL
8988: IFTRUE 8992
8990: GO 8999
8992: POP
// hHackInvisible ; 6 :
8993: CALL 21969 0 0
8997: GO 9045
8999: LD_INT 6
9001: DOUBLE
9002: EQUAL
9003: IFTRUE 9007
9005: GO 9014
9007: POP
// hHackChangeYourSide ; 7 :
9008: CALL 22026 0 0
9012: GO 9045
9014: LD_INT 7
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9029
9022: POP
// hHackChangeUnitSide ; 8 :
9023: CALL 22068 0 0
9027: GO 9045
9029: LD_INT 8
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9044
9037: POP
// hHackFog ; end ;
9038: CALL 22169 0 0
9042: GO 9045
9044: POP
// end ; if p2 = game_save_mode then
9045: LD_VAR 0 2
9049: PUSH
9050: LD_INT 102
9052: EQUAL
9053: IFFALSE 9108
// begin if p3 = 1 then
9055: LD_VAR 0 3
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: IFFALSE 9075
// globalGameSaveCounter := p4 ;
9065: LD_ADDR_EXP 19
9069: PUSH
9070: LD_VAR 0 4
9074: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 2
9082: EQUAL
9083: PUSH
9084: LD_EXP 19
9088: AND
9089: IFFALSE 9108
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9091: LD_STRING setGameSaveCounter(
9093: PUSH
9094: LD_EXP 19
9098: STR
9099: PUSH
9100: LD_STRING )
9102: STR
9103: PPUSH
9104: CALL_OW 559
// end ; end ;
9108: LD_VAR 0 7
9112: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9113: LD_INT 0
9115: PPUSH
// streamModeActive := false ;
9116: LD_ADDR_EXP 20
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// normalCounter := 36 ;
9124: LD_ADDR_EXP 21
9128: PUSH
9129: LD_INT 36
9131: ST_TO_ADDR
// hardcoreCounter := 18 ;
9132: LD_ADDR_EXP 22
9136: PUSH
9137: LD_INT 18
9139: ST_TO_ADDR
// sRocket := false ;
9140: LD_ADDR_EXP 25
9144: PUSH
9145: LD_INT 0
9147: ST_TO_ADDR
// sSpeed := false ;
9148: LD_ADDR_EXP 24
9152: PUSH
9153: LD_INT 0
9155: ST_TO_ADDR
// sEngine := false ;
9156: LD_ADDR_EXP 26
9160: PUSH
9161: LD_INT 0
9163: ST_TO_ADDR
// sSpec := false ;
9164: LD_ADDR_EXP 23
9168: PUSH
9169: LD_INT 0
9171: ST_TO_ADDR
// sLevel := false ;
9172: LD_ADDR_EXP 27
9176: PUSH
9177: LD_INT 0
9179: ST_TO_ADDR
// sArmoury := false ;
9180: LD_ADDR_EXP 28
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// sRadar := false ;
9188: LD_ADDR_EXP 29
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// sBunker := false ;
9196: LD_ADDR_EXP 30
9200: PUSH
9201: LD_INT 0
9203: ST_TO_ADDR
// sHack := false ;
9204: LD_ADDR_EXP 31
9208: PUSH
9209: LD_INT 0
9211: ST_TO_ADDR
// sFire := false ;
9212: LD_ADDR_EXP 32
9216: PUSH
9217: LD_INT 0
9219: ST_TO_ADDR
// sRefresh := false ;
9220: LD_ADDR_EXP 33
9224: PUSH
9225: LD_INT 0
9227: ST_TO_ADDR
// sExp := false ;
9228: LD_ADDR_EXP 34
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// sDepot := false ;
9236: LD_ADDR_EXP 35
9240: PUSH
9241: LD_INT 0
9243: ST_TO_ADDR
// sFlag := false ;
9244: LD_ADDR_EXP 36
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// sKamikadze := false ;
9252: LD_ADDR_EXP 44
9256: PUSH
9257: LD_INT 0
9259: ST_TO_ADDR
// sTroll := false ;
9260: LD_ADDR_EXP 45
9264: PUSH
9265: LD_INT 0
9267: ST_TO_ADDR
// sSlow := false ;
9268: LD_ADDR_EXP 46
9272: PUSH
9273: LD_INT 0
9275: ST_TO_ADDR
// sLack := false ;
9276: LD_ADDR_EXP 47
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// sTank := false ;
9284: LD_ADDR_EXP 49
9288: PUSH
9289: LD_INT 0
9291: ST_TO_ADDR
// sRemote := false ;
9292: LD_ADDR_EXP 50
9296: PUSH
9297: LD_INT 0
9299: ST_TO_ADDR
// sPowell := false ;
9300: LD_ADDR_EXP 51
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// sTeleport := false ;
9308: LD_ADDR_EXP 54
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// sOilTower := false ;
9316: LD_ADDR_EXP 56
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// sShovel := false ;
9324: LD_ADDR_EXP 57
9328: PUSH
9329: LD_INT 0
9331: ST_TO_ADDR
// sSheik := false ;
9332: LD_ADDR_EXP 58
9336: PUSH
9337: LD_INT 0
9339: ST_TO_ADDR
// sEarthquake := false ;
9340: LD_ADDR_EXP 60
9344: PUSH
9345: LD_INT 0
9347: ST_TO_ADDR
// sAI := false ;
9348: LD_ADDR_EXP 61
9352: PUSH
9353: LD_INT 0
9355: ST_TO_ADDR
// sCargo := false ;
9356: LD_ADDR_EXP 64
9360: PUSH
9361: LD_INT 0
9363: ST_TO_ADDR
// sDLaser := false ;
9364: LD_ADDR_EXP 65
9368: PUSH
9369: LD_INT 0
9371: ST_TO_ADDR
// sExchange := false ;
9372: LD_ADDR_EXP 66
9376: PUSH
9377: LD_INT 0
9379: ST_TO_ADDR
// sFac := false ;
9380: LD_ADDR_EXP 67
9384: PUSH
9385: LD_INT 0
9387: ST_TO_ADDR
// sPower := false ;
9388: LD_ADDR_EXP 68
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// sRandom := false ;
9396: LD_ADDR_EXP 69
9400: PUSH
9401: LD_INT 0
9403: ST_TO_ADDR
// sShield := false ;
9404: LD_ADDR_EXP 70
9408: PUSH
9409: LD_INT 0
9411: ST_TO_ADDR
// sTime := false ;
9412: LD_ADDR_EXP 71
9416: PUSH
9417: LD_INT 0
9419: ST_TO_ADDR
// sTools := false ;
9420: LD_ADDR_EXP 72
9424: PUSH
9425: LD_INT 0
9427: ST_TO_ADDR
// sSold := false ;
9428: LD_ADDR_EXP 37
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// sDiff := false ;
9436: LD_ADDR_EXP 38
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// sFog := false ;
9444: LD_ADDR_EXP 41
9448: PUSH
9449: LD_INT 0
9451: ST_TO_ADDR
// sReset := false ;
9452: LD_ADDR_EXP 42
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// sSun := false ;
9460: LD_ADDR_EXP 43
9464: PUSH
9465: LD_INT 0
9467: ST_TO_ADDR
// sTiger := false ;
9468: LD_ADDR_EXP 39
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// sBomb := false ;
9476: LD_ADDR_EXP 40
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// sWound := false ;
9484: LD_ADDR_EXP 48
9488: PUSH
9489: LD_INT 0
9491: ST_TO_ADDR
// sBetray := false ;
9492: LD_ADDR_EXP 52
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// sContamin := false ;
9500: LD_ADDR_EXP 53
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// sOil := false ;
9508: LD_ADDR_EXP 55
9512: PUSH
9513: LD_INT 0
9515: ST_TO_ADDR
// sStu := false ;
9516: LD_ADDR_EXP 59
9520: PUSH
9521: LD_INT 0
9523: ST_TO_ADDR
// sBazooka := false ;
9524: LD_ADDR_EXP 62
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// sMortar := false ;
9532: LD_ADDR_EXP 63
9536: PUSH
9537: LD_INT 0
9539: ST_TO_ADDR
// sRanger := false ;
9540: LD_ADDR_EXP 73
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// sComputer := false ;
9548: LD_ADDR_EXP 74
9552: PUSH
9553: LD_INT 0
9555: ST_TO_ADDR
// s30 := false ;
9556: LD_ADDR_EXP 75
9560: PUSH
9561: LD_INT 0
9563: ST_TO_ADDR
// s60 := false ;
9564: LD_ADDR_EXP 76
9568: PUSH
9569: LD_INT 0
9571: ST_TO_ADDR
// end ;
9572: LD_VAR 0 1
9576: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9577: LD_INT 0
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
// result := [ ] ;
9586: LD_ADDR_VAR 0 2
9590: PUSH
9591: EMPTY
9592: ST_TO_ADDR
// if campaign_id = 1 then
9593: LD_OWVAR 69
9597: PUSH
9598: LD_INT 1
9600: EQUAL
9601: IFFALSE 12767
// begin case mission_number of 1 :
9603: LD_OWVAR 70
9607: PUSH
9608: LD_INT 1
9610: DOUBLE
9611: EQUAL
9612: IFTRUE 9616
9614: GO 9692
9616: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 11
9630: PUSH
9631: LD_INT 12
9633: PUSH
9634: LD_INT 15
9636: PUSH
9637: LD_INT 16
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_INT 23
9645: PUSH
9646: LD_INT 26
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 101
9662: PUSH
9663: LD_INT 102
9665: PUSH
9666: LD_INT 106
9668: PUSH
9669: LD_INT 116
9671: PUSH
9672: LD_INT 117
9674: PUSH
9675: LD_INT 118
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: ST_TO_ADDR
9690: GO 12765
9692: LD_INT 2
9694: DOUBLE
9695: EQUAL
9696: IFTRUE 9700
9698: GO 9784
9700: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_INT 2
9708: PUSH
9709: LD_INT 4
9711: PUSH
9712: LD_INT 11
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: LD_INT 15
9720: PUSH
9721: LD_INT 16
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 26
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 101
9746: PUSH
9747: LD_INT 102
9749: PUSH
9750: LD_INT 105
9752: PUSH
9753: LD_INT 106
9755: PUSH
9756: LD_INT 108
9758: PUSH
9759: LD_INT 116
9761: PUSH
9762: LD_INT 117
9764: PUSH
9765: LD_INT 118
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: ST_TO_ADDR
9782: GO 12765
9784: LD_INT 3
9786: DOUBLE
9787: EQUAL
9788: IFTRUE 9792
9790: GO 9880
9792: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9793: LD_ADDR_VAR 0 2
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: LD_INT 4
9803: PUSH
9804: LD_INT 5
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: LD_INT 12
9812: PUSH
9813: LD_INT 15
9815: PUSH
9816: LD_INT 16
9818: PUSH
9819: LD_INT 22
9821: PUSH
9822: LD_INT 26
9824: PUSH
9825: LD_INT 36
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 101
9842: PUSH
9843: LD_INT 102
9845: PUSH
9846: LD_INT 105
9848: PUSH
9849: LD_INT 106
9851: PUSH
9852: LD_INT 108
9854: PUSH
9855: LD_INT 116
9857: PUSH
9858: LD_INT 117
9860: PUSH
9861: LD_INT 118
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: ST_TO_ADDR
9878: GO 12765
9880: LD_INT 4
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 9984
9888: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9889: LD_ADDR_VAR 0 2
9893: PUSH
9894: LD_INT 2
9896: PUSH
9897: LD_INT 4
9899: PUSH
9900: LD_INT 5
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: LD_INT 11
9908: PUSH
9909: LD_INT 12
9911: PUSH
9912: LD_INT 15
9914: PUSH
9915: LD_INT 16
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_INT 23
9923: PUSH
9924: LD_INT 26
9926: PUSH
9927: LD_INT 36
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 101
9946: PUSH
9947: LD_INT 102
9949: PUSH
9950: LD_INT 105
9952: PUSH
9953: LD_INT 106
9955: PUSH
9956: LD_INT 108
9958: PUSH
9959: LD_INT 116
9961: PUSH
9962: LD_INT 117
9964: PUSH
9965: LD_INT 118
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: ST_TO_ADDR
9982: GO 12765
9984: LD_INT 5
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10104
9992: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 4
10003: PUSH
10004: LD_INT 5
10006: PUSH
10007: LD_INT 6
10009: PUSH
10010: LD_INT 8
10012: PUSH
10013: LD_INT 11
10015: PUSH
10016: LD_INT 12
10018: PUSH
10019: LD_INT 15
10021: PUSH
10022: LD_INT 16
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 23
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 26
10036: PUSH
10037: LD_INT 36
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 101
10058: PUSH
10059: LD_INT 102
10061: PUSH
10062: LD_INT 105
10064: PUSH
10065: LD_INT 106
10067: PUSH
10068: LD_INT 108
10070: PUSH
10071: LD_INT 109
10073: PUSH
10074: LD_INT 112
10076: PUSH
10077: LD_INT 116
10079: PUSH
10080: LD_INT 117
10082: PUSH
10083: LD_INT 118
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: ST_TO_ADDR
10102: GO 12765
10104: LD_INT 6
10106: DOUBLE
10107: EQUAL
10108: IFTRUE 10112
10110: GO 10244
10112: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: LD_INT 8
10132: PUSH
10133: LD_INT 11
10135: PUSH
10136: LD_INT 12
10138: PUSH
10139: LD_INT 15
10141: PUSH
10142: LD_INT 16
10144: PUSH
10145: LD_INT 20
10147: PUSH
10148: LD_INT 21
10150: PUSH
10151: LD_INT 22
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 25
10159: PUSH
10160: LD_INT 26
10162: PUSH
10163: LD_INT 30
10165: PUSH
10166: LD_INT 31
10168: PUSH
10169: LD_INT 32
10171: PUSH
10172: LD_INT 36
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 101
10198: PUSH
10199: LD_INT 102
10201: PUSH
10202: LD_INT 105
10204: PUSH
10205: LD_INT 106
10207: PUSH
10208: LD_INT 108
10210: PUSH
10211: LD_INT 109
10213: PUSH
10214: LD_INT 112
10216: PUSH
10217: LD_INT 116
10219: PUSH
10220: LD_INT 117
10222: PUSH
10223: LD_INT 118
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: ST_TO_ADDR
10242: GO 12765
10244: LD_INT 7
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10252
10250: GO 10364
10252: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10253: LD_ADDR_VAR 0 2
10257: PUSH
10258: LD_INT 2
10260: PUSH
10261: LD_INT 4
10263: PUSH
10264: LD_INT 5
10266: PUSH
10267: LD_INT 7
10269: PUSH
10270: LD_INT 11
10272: PUSH
10273: LD_INT 12
10275: PUSH
10276: LD_INT 15
10278: PUSH
10279: LD_INT 16
10281: PUSH
10282: LD_INT 20
10284: PUSH
10285: LD_INT 21
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 23
10293: PUSH
10294: LD_INT 25
10296: PUSH
10297: LD_INT 26
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 101
10318: PUSH
10319: LD_INT 102
10321: PUSH
10322: LD_INT 103
10324: PUSH
10325: LD_INT 105
10327: PUSH
10328: LD_INT 106
10330: PUSH
10331: LD_INT 108
10333: PUSH
10334: LD_INT 112
10336: PUSH
10337: LD_INT 116
10339: PUSH
10340: LD_INT 117
10342: PUSH
10343: LD_INT 118
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: ST_TO_ADDR
10362: GO 12765
10364: LD_INT 8
10366: DOUBLE
10367: EQUAL
10368: IFTRUE 10372
10370: GO 10512
10372: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 5
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: LD_INT 7
10392: PUSH
10393: LD_INT 8
10395: PUSH
10396: LD_INT 11
10398: PUSH
10399: LD_INT 12
10401: PUSH
10402: LD_INT 15
10404: PUSH
10405: LD_INT 16
10407: PUSH
10408: LD_INT 20
10410: PUSH
10411: LD_INT 21
10413: PUSH
10414: LD_INT 22
10416: PUSH
10417: LD_INT 23
10419: PUSH
10420: LD_INT 25
10422: PUSH
10423: LD_INT 26
10425: PUSH
10426: LD_INT 30
10428: PUSH
10429: LD_INT 31
10431: PUSH
10432: LD_INT 32
10434: PUSH
10435: LD_INT 36
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 101
10462: PUSH
10463: LD_INT 102
10465: PUSH
10466: LD_INT 103
10468: PUSH
10469: LD_INT 105
10471: PUSH
10472: LD_INT 106
10474: PUSH
10475: LD_INT 108
10477: PUSH
10478: LD_INT 109
10480: PUSH
10481: LD_INT 112
10483: PUSH
10484: LD_INT 116
10486: PUSH
10487: LD_INT 117
10489: PUSH
10490: LD_INT 118
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: ST_TO_ADDR
10510: GO 12765
10512: LD_INT 9
10514: DOUBLE
10515: EQUAL
10516: IFTRUE 10520
10518: GO 10668
10520: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: LD_INT 4
10531: PUSH
10532: LD_INT 5
10534: PUSH
10535: LD_INT 6
10537: PUSH
10538: LD_INT 7
10540: PUSH
10541: LD_INT 8
10543: PUSH
10544: LD_INT 11
10546: PUSH
10547: LD_INT 12
10549: PUSH
10550: LD_INT 15
10552: PUSH
10553: LD_INT 16
10555: PUSH
10556: LD_INT 20
10558: PUSH
10559: LD_INT 21
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_INT 23
10567: PUSH
10568: LD_INT 25
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 28
10576: PUSH
10577: LD_INT 30
10579: PUSH
10580: LD_INT 31
10582: PUSH
10583: LD_INT 32
10585: PUSH
10586: LD_INT 36
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 101
10614: PUSH
10615: LD_INT 102
10617: PUSH
10618: LD_INT 103
10620: PUSH
10621: LD_INT 105
10623: PUSH
10624: LD_INT 106
10626: PUSH
10627: LD_INT 108
10629: PUSH
10630: LD_INT 109
10632: PUSH
10633: LD_INT 112
10635: PUSH
10636: LD_INT 114
10638: PUSH
10639: LD_INT 116
10641: PUSH
10642: LD_INT 117
10644: PUSH
10645: LD_INT 118
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: ST_TO_ADDR
10666: GO 12765
10668: LD_INT 10
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10872
10676: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: LD_INT 4
10687: PUSH
10688: LD_INT 5
10690: PUSH
10691: LD_INT 6
10693: PUSH
10694: LD_INT 7
10696: PUSH
10697: LD_INT 8
10699: PUSH
10700: LD_INT 9
10702: PUSH
10703: LD_INT 10
10705: PUSH
10706: LD_INT 11
10708: PUSH
10709: LD_INT 12
10711: PUSH
10712: LD_INT 13
10714: PUSH
10715: LD_INT 14
10717: PUSH
10718: LD_INT 15
10720: PUSH
10721: LD_INT 16
10723: PUSH
10724: LD_INT 17
10726: PUSH
10727: LD_INT 18
10729: PUSH
10730: LD_INT 19
10732: PUSH
10733: LD_INT 20
10735: PUSH
10736: LD_INT 21
10738: PUSH
10739: LD_INT 22
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 24
10747: PUSH
10748: LD_INT 25
10750: PUSH
10751: LD_INT 26
10753: PUSH
10754: LD_INT 28
10756: PUSH
10757: LD_INT 30
10759: PUSH
10760: LD_INT 31
10762: PUSH
10763: LD_INT 32
10765: PUSH
10766: LD_INT 36
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 101
10802: PUSH
10803: LD_INT 102
10805: PUSH
10806: LD_INT 103
10808: PUSH
10809: LD_INT 104
10811: PUSH
10812: LD_INT 105
10814: PUSH
10815: LD_INT 106
10817: PUSH
10818: LD_INT 107
10820: PUSH
10821: LD_INT 108
10823: PUSH
10824: LD_INT 109
10826: PUSH
10827: LD_INT 110
10829: PUSH
10830: LD_INT 111
10832: PUSH
10833: LD_INT 112
10835: PUSH
10836: LD_INT 114
10838: PUSH
10839: LD_INT 116
10841: PUSH
10842: LD_INT 117
10844: PUSH
10845: LD_INT 118
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: ST_TO_ADDR
10870: GO 12765
10872: LD_INT 11
10874: DOUBLE
10875: EQUAL
10876: IFTRUE 10880
10878: GO 11084
10880: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10881: LD_ADDR_VAR 0 2
10885: PUSH
10886: LD_INT 2
10888: PUSH
10889: LD_INT 3
10891: PUSH
10892: LD_INT 4
10894: PUSH
10895: LD_INT 5
10897: PUSH
10898: LD_INT 6
10900: PUSH
10901: LD_INT 7
10903: PUSH
10904: LD_INT 8
10906: PUSH
10907: LD_INT 9
10909: PUSH
10910: LD_INT 10
10912: PUSH
10913: LD_INT 11
10915: PUSH
10916: LD_INT 12
10918: PUSH
10919: LD_INT 13
10921: PUSH
10922: LD_INT 14
10924: PUSH
10925: LD_INT 15
10927: PUSH
10928: LD_INT 16
10930: PUSH
10931: LD_INT 17
10933: PUSH
10934: LD_INT 18
10936: PUSH
10937: LD_INT 19
10939: PUSH
10940: LD_INT 20
10942: PUSH
10943: LD_INT 21
10945: PUSH
10946: LD_INT 22
10948: PUSH
10949: LD_INT 23
10951: PUSH
10952: LD_INT 24
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 26
10960: PUSH
10961: LD_INT 28
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 31
10969: PUSH
10970: LD_INT 32
10972: PUSH
10973: LD_INT 34
10975: PUSH
10976: LD_INT 36
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 101
11014: PUSH
11015: LD_INT 102
11017: PUSH
11018: LD_INT 103
11020: PUSH
11021: LD_INT 104
11023: PUSH
11024: LD_INT 105
11026: PUSH
11027: LD_INT 106
11029: PUSH
11030: LD_INT 107
11032: PUSH
11033: LD_INT 108
11035: PUSH
11036: LD_INT 109
11038: PUSH
11039: LD_INT 110
11041: PUSH
11042: LD_INT 111
11044: PUSH
11045: LD_INT 112
11047: PUSH
11048: LD_INT 114
11050: PUSH
11051: LD_INT 116
11053: PUSH
11054: LD_INT 117
11056: PUSH
11057: LD_INT 118
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: ST_TO_ADDR
11082: GO 12765
11084: LD_INT 12
11086: DOUBLE
11087: EQUAL
11088: IFTRUE 11092
11090: GO 11312
11092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: LD_INT 2
11103: PUSH
11104: LD_INT 3
11106: PUSH
11107: LD_INT 4
11109: PUSH
11110: LD_INT 5
11112: PUSH
11113: LD_INT 6
11115: PUSH
11116: LD_INT 7
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: LD_INT 9
11124: PUSH
11125: LD_INT 10
11127: PUSH
11128: LD_INT 11
11130: PUSH
11131: LD_INT 12
11133: PUSH
11134: LD_INT 13
11136: PUSH
11137: LD_INT 14
11139: PUSH
11140: LD_INT 15
11142: PUSH
11143: LD_INT 16
11145: PUSH
11146: LD_INT 17
11148: PUSH
11149: LD_INT 18
11151: PUSH
11152: LD_INT 19
11154: PUSH
11155: LD_INT 20
11157: PUSH
11158: LD_INT 21
11160: PUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 23
11166: PUSH
11167: LD_INT 24
11169: PUSH
11170: LD_INT 25
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: LD_INT 27
11178: PUSH
11179: LD_INT 28
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_INT 31
11187: PUSH
11188: LD_INT 32
11190: PUSH
11191: LD_INT 33
11193: PUSH
11194: LD_INT 34
11196: PUSH
11197: LD_INT 36
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 101
11238: PUSH
11239: LD_INT 102
11241: PUSH
11242: LD_INT 103
11244: PUSH
11245: LD_INT 104
11247: PUSH
11248: LD_INT 105
11250: PUSH
11251: LD_INT 106
11253: PUSH
11254: LD_INT 107
11256: PUSH
11257: LD_INT 108
11259: PUSH
11260: LD_INT 109
11262: PUSH
11263: LD_INT 110
11265: PUSH
11266: LD_INT 111
11268: PUSH
11269: LD_INT 112
11271: PUSH
11272: LD_INT 113
11274: PUSH
11275: LD_INT 114
11277: PUSH
11278: LD_INT 116
11280: PUSH
11281: LD_INT 117
11283: PUSH
11284: LD_INT 118
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: ST_TO_ADDR
11310: GO 12765
11312: LD_INT 13
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11528
11320: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11321: LD_ADDR_VAR 0 2
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: LD_INT 2
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: LD_INT 4
11337: PUSH
11338: LD_INT 5
11340: PUSH
11341: LD_INT 8
11343: PUSH
11344: LD_INT 9
11346: PUSH
11347: LD_INT 10
11349: PUSH
11350: LD_INT 11
11352: PUSH
11353: LD_INT 12
11355: PUSH
11356: LD_INT 14
11358: PUSH
11359: LD_INT 15
11361: PUSH
11362: LD_INT 16
11364: PUSH
11365: LD_INT 17
11367: PUSH
11368: LD_INT 18
11370: PUSH
11371: LD_INT 19
11373: PUSH
11374: LD_INT 20
11376: PUSH
11377: LD_INT 21
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_INT 23
11385: PUSH
11386: LD_INT 24
11388: PUSH
11389: LD_INT 25
11391: PUSH
11392: LD_INT 26
11394: PUSH
11395: LD_INT 27
11397: PUSH
11398: LD_INT 28
11400: PUSH
11401: LD_INT 30
11403: PUSH
11404: LD_INT 31
11406: PUSH
11407: LD_INT 32
11409: PUSH
11410: LD_INT 33
11412: PUSH
11413: LD_INT 34
11415: PUSH
11416: LD_INT 36
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 101
11454: PUSH
11455: LD_INT 102
11457: PUSH
11458: LD_INT 103
11460: PUSH
11461: LD_INT 104
11463: PUSH
11464: LD_INT 105
11466: PUSH
11467: LD_INT 106
11469: PUSH
11470: LD_INT 107
11472: PUSH
11473: LD_INT 108
11475: PUSH
11476: LD_INT 109
11478: PUSH
11479: LD_INT 110
11481: PUSH
11482: LD_INT 111
11484: PUSH
11485: LD_INT 112
11487: PUSH
11488: LD_INT 113
11490: PUSH
11491: LD_INT 114
11493: PUSH
11494: LD_INT 116
11496: PUSH
11497: LD_INT 117
11499: PUSH
11500: LD_INT 118
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: ST_TO_ADDR
11526: GO 12765
11528: LD_INT 14
11530: DOUBLE
11531: EQUAL
11532: IFTRUE 11536
11534: GO 11760
11536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 1
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 3
11550: PUSH
11551: LD_INT 4
11553: PUSH
11554: LD_INT 5
11556: PUSH
11557: LD_INT 6
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: LD_INT 8
11565: PUSH
11566: LD_INT 9
11568: PUSH
11569: LD_INT 10
11571: PUSH
11572: LD_INT 11
11574: PUSH
11575: LD_INT 12
11577: PUSH
11578: LD_INT 13
11580: PUSH
11581: LD_INT 14
11583: PUSH
11584: LD_INT 15
11586: PUSH
11587: LD_INT 16
11589: PUSH
11590: LD_INT 17
11592: PUSH
11593: LD_INT 18
11595: PUSH
11596: LD_INT 19
11598: PUSH
11599: LD_INT 20
11601: PUSH
11602: LD_INT 21
11604: PUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 23
11610: PUSH
11611: LD_INT 24
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 26
11619: PUSH
11620: LD_INT 27
11622: PUSH
11623: LD_INT 28
11625: PUSH
11626: LD_INT 29
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: LD_INT 31
11634: PUSH
11635: LD_INT 32
11637: PUSH
11638: LD_INT 33
11640: PUSH
11641: LD_INT 34
11643: PUSH
11644: LD_INT 36
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 101
11686: PUSH
11687: LD_INT 102
11689: PUSH
11690: LD_INT 103
11692: PUSH
11693: LD_INT 104
11695: PUSH
11696: LD_INT 105
11698: PUSH
11699: LD_INT 106
11701: PUSH
11702: LD_INT 107
11704: PUSH
11705: LD_INT 108
11707: PUSH
11708: LD_INT 109
11710: PUSH
11711: LD_INT 110
11713: PUSH
11714: LD_INT 111
11716: PUSH
11717: LD_INT 112
11719: PUSH
11720: LD_INT 113
11722: PUSH
11723: LD_INT 114
11725: PUSH
11726: LD_INT 116
11728: PUSH
11729: LD_INT 117
11731: PUSH
11732: LD_INT 118
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: ST_TO_ADDR
11758: GO 12765
11760: LD_INT 15
11762: DOUBLE
11763: EQUAL
11764: IFTRUE 11768
11766: GO 11992
11768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11769: LD_ADDR_VAR 0 2
11773: PUSH
11774: LD_INT 1
11776: PUSH
11777: LD_INT 2
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 4
11785: PUSH
11786: LD_INT 5
11788: PUSH
11789: LD_INT 6
11791: PUSH
11792: LD_INT 7
11794: PUSH
11795: LD_INT 8
11797: PUSH
11798: LD_INT 9
11800: PUSH
11801: LD_INT 10
11803: PUSH
11804: LD_INT 11
11806: PUSH
11807: LD_INT 12
11809: PUSH
11810: LD_INT 13
11812: PUSH
11813: LD_INT 14
11815: PUSH
11816: LD_INT 15
11818: PUSH
11819: LD_INT 16
11821: PUSH
11822: LD_INT 17
11824: PUSH
11825: LD_INT 18
11827: PUSH
11828: LD_INT 19
11830: PUSH
11831: LD_INT 20
11833: PUSH
11834: LD_INT 21
11836: PUSH
11837: LD_INT 22
11839: PUSH
11840: LD_INT 23
11842: PUSH
11843: LD_INT 24
11845: PUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 26
11851: PUSH
11852: LD_INT 27
11854: PUSH
11855: LD_INT 28
11857: PUSH
11858: LD_INT 29
11860: PUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 31
11866: PUSH
11867: LD_INT 32
11869: PUSH
11870: LD_INT 33
11872: PUSH
11873: LD_INT 34
11875: PUSH
11876: LD_INT 36
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 101
11918: PUSH
11919: LD_INT 102
11921: PUSH
11922: LD_INT 103
11924: PUSH
11925: LD_INT 104
11927: PUSH
11928: LD_INT 105
11930: PUSH
11931: LD_INT 106
11933: PUSH
11934: LD_INT 107
11936: PUSH
11937: LD_INT 108
11939: PUSH
11940: LD_INT 109
11942: PUSH
11943: LD_INT 110
11945: PUSH
11946: LD_INT 111
11948: PUSH
11949: LD_INT 112
11951: PUSH
11952: LD_INT 113
11954: PUSH
11955: LD_INT 114
11957: PUSH
11958: LD_INT 116
11960: PUSH
11961: LD_INT 117
11963: PUSH
11964: LD_INT 118
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: ST_TO_ADDR
11990: GO 12765
11992: LD_INT 16
11994: DOUBLE
11995: EQUAL
11996: IFTRUE 12000
11998: GO 12136
12000: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_INT 2
12008: PUSH
12009: LD_INT 4
12011: PUSH
12012: LD_INT 5
12014: PUSH
12015: LD_INT 7
12017: PUSH
12018: LD_INT 11
12020: PUSH
12021: LD_INT 12
12023: PUSH
12024: LD_INT 15
12026: PUSH
12027: LD_INT 16
12029: PUSH
12030: LD_INT 20
12032: PUSH
12033: LD_INT 21
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_INT 23
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 26
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 31
12053: PUSH
12054: LD_INT 32
12056: PUSH
12057: LD_INT 33
12059: PUSH
12060: LD_INT 34
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 101
12086: PUSH
12087: LD_INT 102
12089: PUSH
12090: LD_INT 103
12092: PUSH
12093: LD_INT 106
12095: PUSH
12096: LD_INT 108
12098: PUSH
12099: LD_INT 112
12101: PUSH
12102: LD_INT 113
12104: PUSH
12105: LD_INT 114
12107: PUSH
12108: LD_INT 116
12110: PUSH
12111: LD_INT 117
12113: PUSH
12114: LD_INT 118
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: ST_TO_ADDR
12134: GO 12765
12136: LD_INT 17
12138: DOUBLE
12139: EQUAL
12140: IFTRUE 12144
12142: GO 12368
12144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12145: LD_ADDR_VAR 0 2
12149: PUSH
12150: LD_INT 1
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: LD_INT 3
12158: PUSH
12159: LD_INT 4
12161: PUSH
12162: LD_INT 5
12164: PUSH
12165: LD_INT 6
12167: PUSH
12168: LD_INT 7
12170: PUSH
12171: LD_INT 8
12173: PUSH
12174: LD_INT 9
12176: PUSH
12177: LD_INT 10
12179: PUSH
12180: LD_INT 11
12182: PUSH
12183: LD_INT 12
12185: PUSH
12186: LD_INT 13
12188: PUSH
12189: LD_INT 14
12191: PUSH
12192: LD_INT 15
12194: PUSH
12195: LD_INT 16
12197: PUSH
12198: LD_INT 17
12200: PUSH
12201: LD_INT 18
12203: PUSH
12204: LD_INT 19
12206: PUSH
12207: LD_INT 20
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 24
12221: PUSH
12222: LD_INT 25
12224: PUSH
12225: LD_INT 26
12227: PUSH
12228: LD_INT 27
12230: PUSH
12231: LD_INT 28
12233: PUSH
12234: LD_INT 29
12236: PUSH
12237: LD_INT 30
12239: PUSH
12240: LD_INT 31
12242: PUSH
12243: LD_INT 32
12245: PUSH
12246: LD_INT 33
12248: PUSH
12249: LD_INT 34
12251: PUSH
12252: LD_INT 36
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 101
12294: PUSH
12295: LD_INT 102
12297: PUSH
12298: LD_INT 103
12300: PUSH
12301: LD_INT 104
12303: PUSH
12304: LD_INT 105
12306: PUSH
12307: LD_INT 106
12309: PUSH
12310: LD_INT 107
12312: PUSH
12313: LD_INT 108
12315: PUSH
12316: LD_INT 109
12318: PUSH
12319: LD_INT 110
12321: PUSH
12322: LD_INT 111
12324: PUSH
12325: LD_INT 112
12327: PUSH
12328: LD_INT 113
12330: PUSH
12331: LD_INT 114
12333: PUSH
12334: LD_INT 116
12336: PUSH
12337: LD_INT 117
12339: PUSH
12340: LD_INT 118
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: ST_TO_ADDR
12366: GO 12765
12368: LD_INT 18
12370: DOUBLE
12371: EQUAL
12372: IFTRUE 12376
12374: GO 12524
12376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12377: LD_ADDR_VAR 0 2
12381: PUSH
12382: LD_INT 2
12384: PUSH
12385: LD_INT 4
12387: PUSH
12388: LD_INT 5
12390: PUSH
12391: LD_INT 7
12393: PUSH
12394: LD_INT 11
12396: PUSH
12397: LD_INT 12
12399: PUSH
12400: LD_INT 15
12402: PUSH
12403: LD_INT 16
12405: PUSH
12406: LD_INT 20
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 22
12414: PUSH
12415: LD_INT 23
12417: PUSH
12418: LD_INT 25
12420: PUSH
12421: LD_INT 26
12423: PUSH
12424: LD_INT 30
12426: PUSH
12427: LD_INT 31
12429: PUSH
12430: LD_INT 32
12432: PUSH
12433: LD_INT 33
12435: PUSH
12436: LD_INT 34
12438: PUSH
12439: LD_INT 35
12441: PUSH
12442: LD_INT 36
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 101
12470: PUSH
12471: LD_INT 102
12473: PUSH
12474: LD_INT 103
12476: PUSH
12477: LD_INT 106
12479: PUSH
12480: LD_INT 108
12482: PUSH
12483: LD_INT 112
12485: PUSH
12486: LD_INT 113
12488: PUSH
12489: LD_INT 114
12491: PUSH
12492: LD_INT 115
12494: PUSH
12495: LD_INT 116
12497: PUSH
12498: LD_INT 117
12500: PUSH
12501: LD_INT 118
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: ST_TO_ADDR
12522: GO 12765
12524: LD_INT 19
12526: DOUBLE
12527: EQUAL
12528: IFTRUE 12532
12530: GO 12764
12532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12533: LD_ADDR_VAR 0 2
12537: PUSH
12538: LD_INT 1
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: LD_INT 4
12549: PUSH
12550: LD_INT 5
12552: PUSH
12553: LD_INT 6
12555: PUSH
12556: LD_INT 7
12558: PUSH
12559: LD_INT 8
12561: PUSH
12562: LD_INT 9
12564: PUSH
12565: LD_INT 10
12567: PUSH
12568: LD_INT 11
12570: PUSH
12571: LD_INT 12
12573: PUSH
12574: LD_INT 13
12576: PUSH
12577: LD_INT 14
12579: PUSH
12580: LD_INT 15
12582: PUSH
12583: LD_INT 16
12585: PUSH
12586: LD_INT 17
12588: PUSH
12589: LD_INT 18
12591: PUSH
12592: LD_INT 19
12594: PUSH
12595: LD_INT 20
12597: PUSH
12598: LD_INT 21
12600: PUSH
12601: LD_INT 22
12603: PUSH
12604: LD_INT 23
12606: PUSH
12607: LD_INT 24
12609: PUSH
12610: LD_INT 25
12612: PUSH
12613: LD_INT 26
12615: PUSH
12616: LD_INT 27
12618: PUSH
12619: LD_INT 28
12621: PUSH
12622: LD_INT 29
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 31
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 33
12636: PUSH
12637: LD_INT 34
12639: PUSH
12640: LD_INT 35
12642: PUSH
12643: LD_INT 36
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 101
12686: PUSH
12687: LD_INT 102
12689: PUSH
12690: LD_INT 103
12692: PUSH
12693: LD_INT 104
12695: PUSH
12696: LD_INT 105
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 107
12704: PUSH
12705: LD_INT 108
12707: PUSH
12708: LD_INT 109
12710: PUSH
12711: LD_INT 110
12713: PUSH
12714: LD_INT 111
12716: PUSH
12717: LD_INT 112
12719: PUSH
12720: LD_INT 113
12722: PUSH
12723: LD_INT 114
12725: PUSH
12726: LD_INT 115
12728: PUSH
12729: LD_INT 116
12731: PUSH
12732: LD_INT 117
12734: PUSH
12735: LD_INT 118
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: ST_TO_ADDR
12762: GO 12765
12764: POP
// end else
12765: GO 12996
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: LD_INT 2
12777: PUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 4
12783: PUSH
12784: LD_INT 5
12786: PUSH
12787: LD_INT 6
12789: PUSH
12790: LD_INT 7
12792: PUSH
12793: LD_INT 8
12795: PUSH
12796: LD_INT 9
12798: PUSH
12799: LD_INT 10
12801: PUSH
12802: LD_INT 11
12804: PUSH
12805: LD_INT 12
12807: PUSH
12808: LD_INT 13
12810: PUSH
12811: LD_INT 14
12813: PUSH
12814: LD_INT 15
12816: PUSH
12817: LD_INT 16
12819: PUSH
12820: LD_INT 17
12822: PUSH
12823: LD_INT 18
12825: PUSH
12826: LD_INT 19
12828: PUSH
12829: LD_INT 20
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 22
12837: PUSH
12838: LD_INT 23
12840: PUSH
12841: LD_INT 24
12843: PUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 26
12849: PUSH
12850: LD_INT 27
12852: PUSH
12853: LD_INT 28
12855: PUSH
12856: LD_INT 29
12858: PUSH
12859: LD_INT 30
12861: PUSH
12862: LD_INT 31
12864: PUSH
12865: LD_INT 32
12867: PUSH
12868: LD_INT 33
12870: PUSH
12871: LD_INT 34
12873: PUSH
12874: LD_INT 35
12876: PUSH
12877: LD_INT 36
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 101
12920: PUSH
12921: LD_INT 102
12923: PUSH
12924: LD_INT 103
12926: PUSH
12927: LD_INT 104
12929: PUSH
12930: LD_INT 105
12932: PUSH
12933: LD_INT 106
12935: PUSH
12936: LD_INT 107
12938: PUSH
12939: LD_INT 108
12941: PUSH
12942: LD_INT 109
12944: PUSH
12945: LD_INT 110
12947: PUSH
12948: LD_INT 111
12950: PUSH
12951: LD_INT 112
12953: PUSH
12954: LD_INT 113
12956: PUSH
12957: LD_INT 114
12959: PUSH
12960: LD_INT 115
12962: PUSH
12963: LD_INT 116
12965: PUSH
12966: LD_INT 117
12968: PUSH
12969: LD_INT 118
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: ST_TO_ADDR
// if result then
12996: LD_VAR 0 2
13000: IFFALSE 13786
// begin normal :=  ;
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: LD_STRING 
13009: ST_TO_ADDR
// hardcore :=  ;
13010: LD_ADDR_VAR 0 6
13014: PUSH
13015: LD_STRING 
13017: ST_TO_ADDR
// active :=  ;
13018: LD_ADDR_VAR 0 7
13022: PUSH
13023: LD_STRING 
13025: ST_TO_ADDR
// for i = 1 to normalCounter do
13026: LD_ADDR_VAR 0 8
13030: PUSH
13031: DOUBLE
13032: LD_INT 1
13034: DEC
13035: ST_TO_ADDR
13036: LD_EXP 21
13040: PUSH
13041: FOR_TO
13042: IFFALSE 13143
// begin tmp := 0 ;
13044: LD_ADDR_VAR 0 3
13048: PUSH
13049: LD_STRING 0
13051: ST_TO_ADDR
// if result [ 1 ] then
13052: LD_VAR 0 2
13056: PUSH
13057: LD_INT 1
13059: ARRAY
13060: IFFALSE 13125
// if result [ 1 ] [ 1 ] = i then
13062: LD_VAR 0 2
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PUSH
13071: LD_INT 1
13073: ARRAY
13074: PUSH
13075: LD_VAR 0 8
13079: EQUAL
13080: IFFALSE 13125
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13082: LD_ADDR_VAR 0 2
13086: PUSH
13087: LD_VAR 0 2
13091: PPUSH
13092: LD_INT 1
13094: PPUSH
13095: LD_VAR 0 2
13099: PUSH
13100: LD_INT 1
13102: ARRAY
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 3
13111: PPUSH
13112: CALL_OW 1
13116: ST_TO_ADDR
// tmp := 1 ;
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: LD_STRING 1
13124: ST_TO_ADDR
// end ; normal := normal & tmp ;
13125: LD_ADDR_VAR 0 5
13129: PUSH
13130: LD_VAR 0 5
13134: PUSH
13135: LD_VAR 0 3
13139: STR
13140: ST_TO_ADDR
// end ;
13141: GO 13041
13143: POP
13144: POP
// for i = 1 to hardcoreCounter do
13145: LD_ADDR_VAR 0 8
13149: PUSH
13150: DOUBLE
13151: LD_INT 1
13153: DEC
13154: ST_TO_ADDR
13155: LD_EXP 22
13159: PUSH
13160: FOR_TO
13161: IFFALSE 13266
// begin tmp := 0 ;
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_STRING 0
13170: ST_TO_ADDR
// if result [ 2 ] then
13171: LD_VAR 0 2
13175: PUSH
13176: LD_INT 2
13178: ARRAY
13179: IFFALSE 13248
// if result [ 2 ] [ 1 ] = 100 + i then
13181: LD_VAR 0 2
13185: PUSH
13186: LD_INT 2
13188: ARRAY
13189: PUSH
13190: LD_INT 1
13192: ARRAY
13193: PUSH
13194: LD_INT 100
13196: PUSH
13197: LD_VAR 0 8
13201: PLUS
13202: EQUAL
13203: IFFALSE 13248
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13205: LD_ADDR_VAR 0 2
13209: PUSH
13210: LD_VAR 0 2
13214: PPUSH
13215: LD_INT 2
13217: PPUSH
13218: LD_VAR 0 2
13222: PUSH
13223: LD_INT 2
13225: ARRAY
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 3
13234: PPUSH
13235: CALL_OW 1
13239: ST_TO_ADDR
// tmp := 1 ;
13240: LD_ADDR_VAR 0 3
13244: PUSH
13245: LD_STRING 1
13247: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13248: LD_ADDR_VAR 0 6
13252: PUSH
13253: LD_VAR 0 6
13257: PUSH
13258: LD_VAR 0 3
13262: STR
13263: ST_TO_ADDR
// end ;
13264: GO 13160
13266: POP
13267: POP
// if isGameLoad then
13268: LD_VAR 0 1
13272: IFFALSE 13747
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13274: LD_ADDR_VAR 0 4
13278: PUSH
13279: LD_EXP 25
13283: PUSH
13284: LD_EXP 24
13288: PUSH
13289: LD_EXP 26
13293: PUSH
13294: LD_EXP 23
13298: PUSH
13299: LD_EXP 27
13303: PUSH
13304: LD_EXP 28
13308: PUSH
13309: LD_EXP 29
13313: PUSH
13314: LD_EXP 30
13318: PUSH
13319: LD_EXP 31
13323: PUSH
13324: LD_EXP 32
13328: PUSH
13329: LD_EXP 33
13333: PUSH
13334: LD_EXP 34
13338: PUSH
13339: LD_EXP 35
13343: PUSH
13344: LD_EXP 36
13348: PUSH
13349: LD_EXP 44
13353: PUSH
13354: LD_EXP 45
13358: PUSH
13359: LD_EXP 46
13363: PUSH
13364: LD_EXP 47
13368: PUSH
13369: LD_EXP 49
13373: PUSH
13374: LD_EXP 50
13378: PUSH
13379: LD_EXP 51
13383: PUSH
13384: LD_EXP 54
13388: PUSH
13389: LD_EXP 56
13393: PUSH
13394: LD_EXP 57
13398: PUSH
13399: LD_EXP 58
13403: PUSH
13404: LD_EXP 60
13408: PUSH
13409: LD_EXP 61
13413: PUSH
13414: LD_EXP 64
13418: PUSH
13419: LD_EXP 65
13423: PUSH
13424: LD_EXP 66
13428: PUSH
13429: LD_EXP 67
13433: PUSH
13434: LD_EXP 68
13438: PUSH
13439: LD_EXP 69
13443: PUSH
13444: LD_EXP 70
13448: PUSH
13449: LD_EXP 71
13453: PUSH
13454: LD_EXP 72
13458: PUSH
13459: LD_EXP 37
13463: PUSH
13464: LD_EXP 38
13468: PUSH
13469: LD_EXP 41
13473: PUSH
13474: LD_EXP 42
13478: PUSH
13479: LD_EXP 43
13483: PUSH
13484: LD_EXP 39
13488: PUSH
13489: LD_EXP 40
13493: PUSH
13494: LD_EXP 48
13498: PUSH
13499: LD_EXP 52
13503: PUSH
13504: LD_EXP 53
13508: PUSH
13509: LD_EXP 55
13513: PUSH
13514: LD_EXP 59
13518: PUSH
13519: LD_EXP 62
13523: PUSH
13524: LD_EXP 63
13528: PUSH
13529: LD_EXP 73
13533: PUSH
13534: LD_EXP 74
13538: PUSH
13539: LD_EXP 75
13543: PUSH
13544: LD_EXP 76
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: ST_TO_ADDR
// tmp :=  ;
13605: LD_ADDR_VAR 0 3
13609: PUSH
13610: LD_STRING 
13612: ST_TO_ADDR
// for i = 1 to normalCounter do
13613: LD_ADDR_VAR 0 8
13617: PUSH
13618: DOUBLE
13619: LD_INT 1
13621: DEC
13622: ST_TO_ADDR
13623: LD_EXP 21
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13665
// begin if flags [ i ] then
13631: LD_VAR 0 4
13635: PUSH
13636: LD_VAR 0 8
13640: ARRAY
13641: IFFALSE 13663
// tmp := tmp & i & ; ;
13643: LD_ADDR_VAR 0 3
13647: PUSH
13648: LD_VAR 0 3
13652: PUSH
13653: LD_VAR 0 8
13657: STR
13658: PUSH
13659: LD_STRING ;
13661: STR
13662: ST_TO_ADDR
// end ;
13663: GO 13628
13665: POP
13666: POP
// for i = 1 to hardcoreCounter do
13667: LD_ADDR_VAR 0 8
13671: PUSH
13672: DOUBLE
13673: LD_INT 1
13675: DEC
13676: ST_TO_ADDR
13677: LD_EXP 22
13681: PUSH
13682: FOR_TO
13683: IFFALSE 13729
// begin if flags [ normalCounter + i ] then
13685: LD_VAR 0 4
13689: PUSH
13690: LD_EXP 21
13694: PUSH
13695: LD_VAR 0 8
13699: PLUS
13700: ARRAY
13701: IFFALSE 13727
// tmp := tmp & ( 100 + i ) & ; ;
13703: LD_ADDR_VAR 0 3
13707: PUSH
13708: LD_VAR 0 3
13712: PUSH
13713: LD_INT 100
13715: PUSH
13716: LD_VAR 0 8
13720: PLUS
13721: STR
13722: PUSH
13723: LD_STRING ;
13725: STR
13726: ST_TO_ADDR
// end ;
13727: GO 13682
13729: POP
13730: POP
// if tmp then
13731: LD_VAR 0 3
13735: IFFALSE 13747
// active := tmp ;
13737: LD_ADDR_VAR 0 7
13741: PUSH
13742: LD_VAR 0 3
13746: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13747: LD_STRING getStreamItemsFromMission("
13749: PUSH
13750: LD_VAR 0 5
13754: STR
13755: PUSH
13756: LD_STRING ","
13758: STR
13759: PUSH
13760: LD_VAR 0 6
13764: STR
13765: PUSH
13766: LD_STRING ","
13768: STR
13769: PUSH
13770: LD_VAR 0 7
13774: STR
13775: PUSH
13776: LD_STRING ")
13778: STR
13779: PPUSH
13780: CALL_OW 559
// end else
13784: GO 13793
// ToLua ( getStreamItemsFromMission("","","") ) ;
13786: LD_STRING getStreamItemsFromMission("","","")
13788: PPUSH
13789: CALL_OW 559
// end ;
13793: LD_VAR 0 2
13797: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13798: LD_EXP 20
13802: PUSH
13803: LD_EXP 25
13807: AND
13808: IFFALSE 13932
13810: GO 13812
13812: DISABLE
13813: LD_INT 0
13815: PPUSH
13816: PPUSH
// begin enable ;
13817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13818: LD_ADDR_VAR 0 2
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_OWVAR 2
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 34
13840: PUSH
13841: LD_INT 7
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 34
13850: PUSH
13851: LD_INT 45
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 34
13860: PUSH
13861: LD_INT 28
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 34
13870: PUSH
13871: LD_INT 47
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PPUSH
13889: CALL_OW 69
13893: ST_TO_ADDR
// if not tmp then
13894: LD_VAR 0 2
13898: NOT
13899: IFFALSE 13903
// exit ;
13901: GO 13932
// for i in tmp do
13903: LD_ADDR_VAR 0 1
13907: PUSH
13908: LD_VAR 0 2
13912: PUSH
13913: FOR_IN
13914: IFFALSE 13930
// begin SetLives ( i , 0 ) ;
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_INT 0
13923: PPUSH
13924: CALL_OW 234
// end ;
13928: GO 13913
13930: POP
13931: POP
// end ;
13932: PPOPN 2
13934: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13935: LD_EXP 20
13939: PUSH
13940: LD_EXP 26
13944: AND
13945: IFFALSE 14029
13947: GO 13949
13949: DISABLE
13950: LD_INT 0
13952: PPUSH
13953: PPUSH
// begin enable ;
13954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13955: LD_ADDR_VAR 0 2
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_OWVAR 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: ST_TO_ADDR
// if not tmp then
13991: LD_VAR 0 2
13995: NOT
13996: IFFALSE 14000
// exit ;
13998: GO 14029
// for i in tmp do
14000: LD_ADDR_VAR 0 1
14004: PUSH
14005: LD_VAR 0 2
14009: PUSH
14010: FOR_IN
14011: IFFALSE 14027
// begin SetLives ( i , 0 ) ;
14013: LD_VAR 0 1
14017: PPUSH
14018: LD_INT 0
14020: PPUSH
14021: CALL_OW 234
// end ;
14025: GO 14010
14027: POP
14028: POP
// end ;
14029: PPOPN 2
14031: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14032: LD_EXP 20
14036: PUSH
14037: LD_EXP 23
14041: AND
14042: IFFALSE 14135
14044: GO 14046
14046: DISABLE
14047: LD_INT 0
14049: PPUSH
// begin enable ;
14050: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14051: LD_ADDR_VAR 0 1
14055: PUSH
14056: LD_INT 22
14058: PUSH
14059: LD_OWVAR 2
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 2
14070: PUSH
14071: LD_INT 25
14073: PUSH
14074: LD_INT 5
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 25
14083: PUSH
14084: LD_INT 9
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 25
14093: PUSH
14094: LD_INT 8
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: PUSH
14116: FOR_IN
14117: IFFALSE 14133
// begin SetClass ( i , 1 ) ;
14119: LD_VAR 0 1
14123: PPUSH
14124: LD_INT 1
14126: PPUSH
14127: CALL_OW 336
// end ;
14131: GO 14116
14133: POP
14134: POP
// end ;
14135: PPOPN 1
14137: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14138: LD_EXP 20
14142: PUSH
14143: LD_EXP 24
14147: AND
14148: PUSH
14149: LD_OWVAR 65
14153: PUSH
14154: LD_INT 7
14156: LESS
14157: AND
14158: IFFALSE 14172
14160: GO 14162
14162: DISABLE
// begin enable ;
14163: ENABLE
// game_speed := 7 ;
14164: LD_ADDR_OWVAR 65
14168: PUSH
14169: LD_INT 7
14171: ST_TO_ADDR
// end ;
14172: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14173: LD_EXP 20
14177: PUSH
14178: LD_EXP 27
14182: AND
14183: IFFALSE 14385
14185: GO 14187
14187: DISABLE
14188: LD_INT 0
14190: PPUSH
14191: PPUSH
14192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14193: LD_ADDR_VAR 0 3
14197: PUSH
14198: LD_INT 81
14200: PUSH
14201: LD_OWVAR 2
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 21
14212: PUSH
14213: LD_INT 1
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: ST_TO_ADDR
// if not tmp then
14229: LD_VAR 0 3
14233: NOT
14234: IFFALSE 14238
// exit ;
14236: GO 14385
// if tmp > 5 then
14238: LD_VAR 0 3
14242: PUSH
14243: LD_INT 5
14245: GREATER
14246: IFFALSE 14258
// k := 5 else
14248: LD_ADDR_VAR 0 2
14252: PUSH
14253: LD_INT 5
14255: ST_TO_ADDR
14256: GO 14268
// k := tmp ;
14258: LD_ADDR_VAR 0 2
14262: PUSH
14263: LD_VAR 0 3
14267: ST_TO_ADDR
// for i := 1 to k do
14268: LD_ADDR_VAR 0 1
14272: PUSH
14273: DOUBLE
14274: LD_INT 1
14276: DEC
14277: ST_TO_ADDR
14278: LD_VAR 0 2
14282: PUSH
14283: FOR_TO
14284: IFFALSE 14383
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14286: LD_VAR 0 3
14290: PUSH
14291: LD_VAR 0 1
14295: ARRAY
14296: PPUSH
14297: LD_VAR 0 1
14301: PUSH
14302: LD_INT 4
14304: MOD
14305: PUSH
14306: LD_INT 1
14308: PLUS
14309: PPUSH
14310: CALL_OW 259
14314: PUSH
14315: LD_INT 10
14317: LESS
14318: IFFALSE 14381
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14320: LD_VAR 0 3
14324: PUSH
14325: LD_VAR 0 1
14329: ARRAY
14330: PPUSH
14331: LD_VAR 0 1
14335: PUSH
14336: LD_INT 4
14338: MOD
14339: PUSH
14340: LD_INT 1
14342: PLUS
14343: PPUSH
14344: LD_VAR 0 3
14348: PUSH
14349: LD_VAR 0 1
14353: ARRAY
14354: PPUSH
14355: LD_VAR 0 1
14359: PUSH
14360: LD_INT 4
14362: MOD
14363: PUSH
14364: LD_INT 1
14366: PLUS
14367: PPUSH
14368: CALL_OW 259
14372: PUSH
14373: LD_INT 1
14375: PLUS
14376: PPUSH
14377: CALL_OW 237
14381: GO 14283
14383: POP
14384: POP
// end ;
14385: PPOPN 3
14387: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14388: LD_EXP 20
14392: PUSH
14393: LD_EXP 28
14397: AND
14398: IFFALSE 14418
14400: GO 14402
14402: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14403: LD_INT 4
14405: PPUSH
14406: LD_OWVAR 2
14410: PPUSH
14411: LD_INT 0
14413: PPUSH
14414: CALL_OW 324
14418: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14419: LD_EXP 20
14423: PUSH
14424: LD_EXP 57
14428: AND
14429: IFFALSE 14449
14431: GO 14433
14433: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14434: LD_INT 19
14436: PPUSH
14437: LD_OWVAR 2
14441: PPUSH
14442: LD_INT 0
14444: PPUSH
14445: CALL_OW 324
14449: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14450: LD_EXP 20
14454: PUSH
14455: LD_EXP 29
14459: AND
14460: IFFALSE 14562
14462: GO 14464
14464: DISABLE
14465: LD_INT 0
14467: PPUSH
14468: PPUSH
// begin enable ;
14469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14470: LD_ADDR_VAR 0 2
14474: PUSH
14475: LD_INT 22
14477: PUSH
14478: LD_OWVAR 2
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: LD_INT 34
14492: PUSH
14493: LD_INT 11
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 34
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 69
14523: ST_TO_ADDR
// if not tmp then
14524: LD_VAR 0 2
14528: NOT
14529: IFFALSE 14533
// exit ;
14531: GO 14562
// for i in tmp do
14533: LD_ADDR_VAR 0 1
14537: PUSH
14538: LD_VAR 0 2
14542: PUSH
14543: FOR_IN
14544: IFFALSE 14560
// begin SetLives ( i , 0 ) ;
14546: LD_VAR 0 1
14550: PPUSH
14551: LD_INT 0
14553: PPUSH
14554: CALL_OW 234
// end ;
14558: GO 14543
14560: POP
14561: POP
// end ;
14562: PPOPN 2
14564: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14565: LD_EXP 20
14569: PUSH
14570: LD_EXP 30
14574: AND
14575: IFFALSE 14595
14577: GO 14579
14579: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14580: LD_INT 32
14582: PPUSH
14583: LD_OWVAR 2
14587: PPUSH
14588: LD_INT 0
14590: PPUSH
14591: CALL_OW 324
14595: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14596: LD_EXP 20
14600: PUSH
14601: LD_EXP 31
14605: AND
14606: IFFALSE 14787
14608: GO 14610
14610: DISABLE
14611: LD_INT 0
14613: PPUSH
14614: PPUSH
14615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14616: LD_ADDR_VAR 0 2
14620: PUSH
14621: LD_INT 22
14623: PUSH
14624: LD_OWVAR 2
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 33
14635: PUSH
14636: LD_INT 3
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 69
14651: ST_TO_ADDR
// if not tmp then
14652: LD_VAR 0 2
14656: NOT
14657: IFFALSE 14661
// exit ;
14659: GO 14787
// side := 0 ;
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_INT 0
14668: ST_TO_ADDR
// for i := 1 to 8 do
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: DOUBLE
14675: LD_INT 1
14677: DEC
14678: ST_TO_ADDR
14679: LD_INT 8
14681: PUSH
14682: FOR_TO
14683: IFFALSE 14731
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14685: LD_OWVAR 2
14689: PUSH
14690: LD_VAR 0 1
14694: NONEQUAL
14695: PUSH
14696: LD_OWVAR 2
14700: PPUSH
14701: LD_VAR 0 1
14705: PPUSH
14706: CALL_OW 81
14710: PUSH
14711: LD_INT 2
14713: EQUAL
14714: AND
14715: IFFALSE 14729
// begin side := i ;
14717: LD_ADDR_VAR 0 3
14721: PUSH
14722: LD_VAR 0 1
14726: ST_TO_ADDR
// break ;
14727: GO 14731
// end ;
14729: GO 14682
14731: POP
14732: POP
// if not side then
14733: LD_VAR 0 3
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 14787
// for i := 1 to tmp do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14785
// if Prob ( 60 ) then
14760: LD_INT 60
14762: PPUSH
14763: CALL_OW 13
14767: IFFALSE 14783
// SetSide ( i , side ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_VAR 0 3
14778: PPUSH
14779: CALL_OW 235
14783: GO 14757
14785: POP
14786: POP
// end ;
14787: PPOPN 3
14789: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14790: LD_EXP 20
14794: PUSH
14795: LD_EXP 33
14799: AND
14800: IFFALSE 14919
14802: GO 14804
14804: DISABLE
14805: LD_INT 0
14807: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_OWVAR 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 21
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 3
14837: PUSH
14838: LD_INT 23
14840: PUSH
14841: LD_INT 0
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: PUSH
14862: FOR_IN
14863: IFFALSE 14917
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 257
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: LD_INT 2
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: LD_INT 4
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: IN
14893: IFFALSE 14915
// SetClass ( un , rand ( 1 , 4 ) ) ;
14895: LD_VAR 0 1
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: LD_INT 4
14905: PPUSH
14906: CALL_OW 12
14910: PPUSH
14911: CALL_OW 336
14915: GO 14862
14917: POP
14918: POP
// end ;
14919: PPOPN 1
14921: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14922: LD_EXP 20
14926: PUSH
14927: LD_EXP 32
14931: AND
14932: IFFALSE 15011
14934: GO 14936
14936: DISABLE
14937: LD_INT 0
14939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14940: LD_ADDR_VAR 0 1
14944: PUSH
14945: LD_INT 22
14947: PUSH
14948: LD_OWVAR 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 21
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 69
14975: ST_TO_ADDR
// if not tmp then
14976: LD_VAR 0 1
14980: NOT
14981: IFFALSE 14985
// exit ;
14983: GO 15011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14985: LD_VAR 0 1
14989: PUSH
14990: LD_INT 1
14992: PPUSH
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL_OW 12
15002: ARRAY
15003: PPUSH
15004: LD_INT 100
15006: PPUSH
15007: CALL_OW 234
// end ;
15011: PPOPN 1
15013: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15014: LD_EXP 20
15018: PUSH
15019: LD_EXP 34
15023: AND
15024: IFFALSE 15122
15026: GO 15028
15028: DISABLE
15029: LD_INT 0
15031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15032: LD_ADDR_VAR 0 1
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: LD_OWVAR 2
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 21
15051: PUSH
15052: LD_INT 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: ST_TO_ADDR
// if not tmp then
15068: LD_VAR 0 1
15072: NOT
15073: IFFALSE 15077
// exit ;
15075: GO 15122
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15077: LD_VAR 0 1
15081: PUSH
15082: LD_INT 1
15084: PPUSH
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL_OW 12
15094: ARRAY
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: LD_INT 4
15101: PPUSH
15102: CALL_OW 12
15106: PPUSH
15107: LD_INT 3000
15109: PPUSH
15110: LD_INT 9000
15112: PPUSH
15113: CALL_OW 12
15117: PPUSH
15118: CALL_OW 492
// end ;
15122: PPOPN 1
15124: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15125: LD_EXP 20
15129: PUSH
15130: LD_EXP 35
15134: AND
15135: IFFALSE 15155
15137: GO 15139
15139: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15140: LD_INT 1
15142: PPUSH
15143: LD_OWVAR 2
15147: PPUSH
15148: LD_INT 0
15150: PPUSH
15151: CALL_OW 324
15155: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15156: LD_EXP 20
15160: PUSH
15161: LD_EXP 36
15165: AND
15166: IFFALSE 15249
15168: GO 15170
15170: DISABLE
15171: LD_INT 0
15173: PPUSH
15174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15175: LD_ADDR_VAR 0 2
15179: PUSH
15180: LD_INT 22
15182: PUSH
15183: LD_OWVAR 2
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 3
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 69
15210: ST_TO_ADDR
// if not tmp then
15211: LD_VAR 0 2
15215: NOT
15216: IFFALSE 15220
// exit ;
15218: GO 15249
// for i in tmp do
15220: LD_ADDR_VAR 0 1
15224: PUSH
15225: LD_VAR 0 2
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15247
// SetBLevel ( i , 10 ) ;
15233: LD_VAR 0 1
15237: PPUSH
15238: LD_INT 10
15240: PPUSH
15241: CALL_OW 241
15245: GO 15230
15247: POP
15248: POP
// end ;
15249: PPOPN 2
15251: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15252: LD_EXP 20
15256: PUSH
15257: LD_EXP 37
15261: AND
15262: IFFALSE 15373
15264: GO 15266
15266: DISABLE
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
15271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: LD_INT 22
15279: PUSH
15280: LD_OWVAR 2
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 25
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PPUSH
15303: CALL_OW 69
15307: ST_TO_ADDR
// if not tmp then
15308: LD_VAR 0 3
15312: NOT
15313: IFFALSE 15317
// exit ;
15315: GO 15373
// un := tmp [ rand ( 1 , tmp ) ] ;
15317: LD_ADDR_VAR 0 2
15321: PUSH
15322: LD_VAR 0 3
15326: PUSH
15327: LD_INT 1
15329: PPUSH
15330: LD_VAR 0 3
15334: PPUSH
15335: CALL_OW 12
15339: ARRAY
15340: ST_TO_ADDR
// if Crawls ( un ) then
15341: LD_VAR 0 2
15345: PPUSH
15346: CALL_OW 318
15350: IFFALSE 15361
// ComWalk ( un ) ;
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: LD_INT 5
15368: PPUSH
15369: CALL_OW 336
// end ;
15373: PPOPN 3
15375: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15376: LD_EXP 20
15380: PUSH
15381: LD_EXP 38
15385: AND
15386: PUSH
15387: LD_OWVAR 67
15391: PUSH
15392: LD_INT 4
15394: LESS
15395: AND
15396: IFFALSE 15415
15398: GO 15400
15400: DISABLE
// begin Difficulty := Difficulty + 1 ;
15401: LD_ADDR_OWVAR 67
15405: PUSH
15406: LD_OWVAR 67
15410: PUSH
15411: LD_INT 1
15413: PLUS
15414: ST_TO_ADDR
// end ;
15415: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15416: LD_EXP 20
15420: PUSH
15421: LD_EXP 39
15425: AND
15426: IFFALSE 15529
15428: GO 15430
15430: DISABLE
15431: LD_INT 0
15433: PPUSH
// begin for i := 1 to 5 do
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: DOUBLE
15440: LD_INT 1
15442: DEC
15443: ST_TO_ADDR
15444: LD_INT 5
15446: PUSH
15447: FOR_TO
15448: IFFALSE 15527
// begin uc_nation := nation_nature ;
15450: LD_ADDR_OWVAR 21
15454: PUSH
15455: LD_INT 0
15457: ST_TO_ADDR
// uc_side := 0 ;
15458: LD_ADDR_OWVAR 20
15462: PUSH
15463: LD_INT 0
15465: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15466: LD_ADDR_OWVAR 29
15470: PUSH
15471: LD_INT 12
15473: PUSH
15474: LD_INT 12
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: ST_TO_ADDR
// hc_agressivity := 20 ;
15481: LD_ADDR_OWVAR 35
15485: PUSH
15486: LD_INT 20
15488: ST_TO_ADDR
// hc_class := class_tiger ;
15489: LD_ADDR_OWVAR 28
15493: PUSH
15494: LD_INT 14
15496: ST_TO_ADDR
// hc_gallery :=  ;
15497: LD_ADDR_OWVAR 33
15501: PUSH
15502: LD_STRING 
15504: ST_TO_ADDR
// hc_name :=  ;
15505: LD_ADDR_OWVAR 26
15509: PUSH
15510: LD_STRING 
15512: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15513: CALL_OW 44
15517: PPUSH
15518: LD_INT 0
15520: PPUSH
15521: CALL_OW 51
// end ;
15525: GO 15447
15527: POP
15528: POP
// end ;
15529: PPOPN 1
15531: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15532: LD_EXP 20
15536: PUSH
15537: LD_EXP 40
15541: AND
15542: IFFALSE 15551
15544: GO 15546
15546: DISABLE
// StreamSibBomb ;
15547: CALL 15552 0 0
15551: END
// export function StreamSibBomb ; var i , x , y ; begin
15552: LD_INT 0
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// result := false ;
15558: LD_ADDR_VAR 0 1
15562: PUSH
15563: LD_INT 0
15565: ST_TO_ADDR
// for i := 1 to 16 do
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: DOUBLE
15572: LD_INT 1
15574: DEC
15575: ST_TO_ADDR
15576: LD_INT 16
15578: PUSH
15579: FOR_TO
15580: IFFALSE 15779
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_INT 10
15589: PUSH
15590: LD_INT 20
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 50
15601: PUSH
15602: LD_INT 60
15604: PUSH
15605: LD_INT 70
15607: PUSH
15608: LD_INT 80
15610: PUSH
15611: LD_INT 90
15613: PUSH
15614: LD_INT 100
15616: PUSH
15617: LD_INT 110
15619: PUSH
15620: LD_INT 120
15622: PUSH
15623: LD_INT 130
15625: PUSH
15626: LD_INT 140
15628: PUSH
15629: LD_INT 150
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PPUSH
15652: LD_INT 15
15654: PPUSH
15655: CALL_OW 12
15659: ARRAY
15660: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15661: LD_ADDR_VAR 0 4
15665: PUSH
15666: LD_INT 10
15668: PUSH
15669: LD_INT 20
15671: PUSH
15672: LD_INT 30
15674: PUSH
15675: LD_INT 40
15677: PUSH
15678: LD_INT 50
15680: PUSH
15681: LD_INT 60
15683: PUSH
15684: LD_INT 70
15686: PUSH
15687: LD_INT 80
15689: PUSH
15690: LD_INT 90
15692: PUSH
15693: LD_INT 100
15695: PUSH
15696: LD_INT 110
15698: PUSH
15699: LD_INT 120
15701: PUSH
15702: LD_INT 130
15704: PUSH
15705: LD_INT 140
15707: PUSH
15708: LD_INT 150
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: PPUSH
15731: LD_INT 15
15733: PPUSH
15734: CALL_OW 12
15738: ARRAY
15739: ST_TO_ADDR
// if ValidHex ( x , y ) then
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_VAR 0 4
15749: PPUSH
15750: CALL_OW 488
15754: IFFALSE 15777
// begin result := [ x , y ] ;
15756: LD_ADDR_VAR 0 1
15760: PUSH
15761: LD_VAR 0 3
15765: PUSH
15766: LD_VAR 0 4
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// break ;
15775: GO 15779
// end ; end ;
15777: GO 15579
15779: POP
15780: POP
// if result then
15781: LD_VAR 0 1
15785: IFFALSE 15845
// begin ToLua ( playSibBomb() ) ;
15787: LD_STRING playSibBomb()
15789: PPUSH
15790: CALL_OW 559
// wait ( 0 0$14 ) ;
15794: LD_INT 490
15796: PPUSH
15797: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15801: LD_VAR 0 1
15805: PUSH
15806: LD_INT 1
15808: ARRAY
15809: PPUSH
15810: LD_VAR 0 1
15814: PUSH
15815: LD_INT 2
15817: ARRAY
15818: PPUSH
15819: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15823: LD_VAR 0 1
15827: PUSH
15828: LD_INT 1
15830: ARRAY
15831: PPUSH
15832: LD_VAR 0 1
15836: PUSH
15837: LD_INT 2
15839: ARRAY
15840: PPUSH
15841: CALL_OW 429
// end ; end ;
15845: LD_VAR 0 1
15849: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15850: LD_EXP 20
15854: PUSH
15855: LD_EXP 42
15859: AND
15860: IFFALSE 15872
15862: GO 15864
15864: DISABLE
// YouLost (  ) ;
15865: LD_STRING 
15867: PPUSH
15868: CALL_OW 104
15872: END
// every 0 0$1 trigger StreamModeActive and sFog do
15873: LD_EXP 20
15877: PUSH
15878: LD_EXP 41
15882: AND
15883: IFFALSE 15897
15885: GO 15887
15887: DISABLE
// FogOff ( your_side ) ;
15888: LD_OWVAR 2
15892: PPUSH
15893: CALL_OW 344
15897: END
// every 0 0$1 trigger StreamModeActive and sSun do
15898: LD_EXP 20
15902: PUSH
15903: LD_EXP 43
15907: AND
15908: IFFALSE 15936
15910: GO 15912
15912: DISABLE
// begin solar_recharge_percent := 0 ;
15913: LD_ADDR_OWVAR 79
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15921: LD_INT 10500
15923: PPUSH
15924: CALL_OW 67
// solar_recharge_percent := 100 ;
15928: LD_ADDR_OWVAR 79
15932: PUSH
15933: LD_INT 100
15935: ST_TO_ADDR
// end ;
15936: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15937: LD_EXP 20
15941: PUSH
15942: LD_EXP 44
15946: AND
15947: IFFALSE 16186
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
15955: PPUSH
15956: PPUSH
// begin tmp := [ ] ;
15957: LD_ADDR_VAR 0 3
15961: PUSH
15962: EMPTY
15963: ST_TO_ADDR
// for i := 1 to 6 do
15964: LD_ADDR_VAR 0 1
15968: PUSH
15969: DOUBLE
15970: LD_INT 1
15972: DEC
15973: ST_TO_ADDR
15974: LD_INT 6
15976: PUSH
15977: FOR_TO
15978: IFFALSE 16083
// begin uc_nation := nation_nature ;
15980: LD_ADDR_OWVAR 21
15984: PUSH
15985: LD_INT 0
15987: ST_TO_ADDR
// uc_side := 0 ;
15988: LD_ADDR_OWVAR 20
15992: PUSH
15993: LD_INT 0
15995: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15996: LD_ADDR_OWVAR 29
16000: PUSH
16001: LD_INT 12
16003: PUSH
16004: LD_INT 12
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: ST_TO_ADDR
// hc_agressivity := 20 ;
16011: LD_ADDR_OWVAR 35
16015: PUSH
16016: LD_INT 20
16018: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16019: LD_ADDR_OWVAR 28
16023: PUSH
16024: LD_INT 17
16026: ST_TO_ADDR
// hc_gallery :=  ;
16027: LD_ADDR_OWVAR 33
16031: PUSH
16032: LD_STRING 
16034: ST_TO_ADDR
// hc_name :=  ;
16035: LD_ADDR_OWVAR 26
16039: PUSH
16040: LD_STRING 
16042: ST_TO_ADDR
// un := CreateHuman ;
16043: LD_ADDR_VAR 0 2
16047: PUSH
16048: CALL_OW 44
16052: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16053: LD_VAR 0 2
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 51
// tmp := tmp ^ un ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_VAR 0 3
16074: PUSH
16075: LD_VAR 0 2
16079: ADD
16080: ST_TO_ADDR
// end ;
16081: GO 15977
16083: POP
16084: POP
// repeat wait ( 0 0$1 ) ;
16085: LD_INT 35
16087: PPUSH
16088: CALL_OW 67
// for un in tmp do
16092: LD_ADDR_VAR 0 2
16096: PUSH
16097: LD_VAR 0 3
16101: PUSH
16102: FOR_IN
16103: IFFALSE 16177
// begin if IsDead ( un ) then
16105: LD_VAR 0 2
16109: PPUSH
16110: CALL_OW 301
16114: IFFALSE 16134
// begin tmp := tmp diff un ;
16116: LD_ADDR_VAR 0 3
16120: PUSH
16121: LD_VAR 0 3
16125: PUSH
16126: LD_VAR 0 2
16130: DIFF
16131: ST_TO_ADDR
// continue ;
16132: GO 16102
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16134: LD_VAR 0 2
16138: PPUSH
16139: LD_INT 3
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PPUSH
16156: CALL_OW 69
16160: PPUSH
16161: LD_VAR 0 2
16165: PPUSH
16166: CALL_OW 74
16170: PPUSH
16171: CALL_OW 115
// end ;
16175: GO 16102
16177: POP
16178: POP
// until not tmp ;
16179: LD_VAR 0 3
16183: NOT
16184: IFFALSE 16085
// end ;
16186: PPOPN 3
16188: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16189: LD_EXP 20
16193: PUSH
16194: LD_EXP 45
16198: AND
16199: IFFALSE 16253
16201: GO 16203
16203: DISABLE
// begin ToLua ( displayTroll(); ) ;
16204: LD_STRING displayTroll();
16206: PPUSH
16207: CALL_OW 559
// wait ( 3 3$00 ) ;
16211: LD_INT 6300
16213: PPUSH
16214: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16218: LD_STRING hideTroll();
16220: PPUSH
16221: CALL_OW 559
// wait ( 1 1$00 ) ;
16225: LD_INT 2100
16227: PPUSH
16228: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16232: LD_STRING displayTroll();
16234: PPUSH
16235: CALL_OW 559
// wait ( 1 1$00 ) ;
16239: LD_INT 2100
16241: PPUSH
16242: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16246: LD_STRING hideTroll();
16248: PPUSH
16249: CALL_OW 559
// end ;
16253: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16254: LD_EXP 20
16258: PUSH
16259: LD_EXP 46
16263: AND
16264: IFFALSE 16327
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
// begin p := 0 ;
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// repeat game_speed := 1 ;
16280: LD_ADDR_OWVAR 65
16284: PUSH
16285: LD_INT 1
16287: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16288: LD_INT 35
16290: PPUSH
16291: CALL_OW 67
// p := p + 1 ;
16295: LD_ADDR_VAR 0 1
16299: PUSH
16300: LD_VAR 0 1
16304: PUSH
16305: LD_INT 1
16307: PLUS
16308: ST_TO_ADDR
// until p >= 60 ;
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 60
16316: GREATEREQUAL
16317: IFFALSE 16280
// game_speed := 4 ;
16319: LD_ADDR_OWVAR 65
16323: PUSH
16324: LD_INT 4
16326: ST_TO_ADDR
// end ;
16327: PPOPN 1
16329: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16330: LD_EXP 20
16334: PUSH
16335: LD_EXP 47
16339: AND
16340: IFFALSE 16486
16342: GO 16344
16344: DISABLE
16345: LD_INT 0
16347: PPUSH
16348: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16349: LD_ADDR_VAR 0 1
16353: PUSH
16354: LD_INT 22
16356: PUSH
16357: LD_OWVAR 2
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: LD_INT 30
16371: PUSH
16372: LD_INT 0
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 30
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// if not depot then
16403: LD_VAR 0 1
16407: NOT
16408: IFFALSE 16412
// exit ;
16410: GO 16486
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16412: LD_ADDR_VAR 0 2
16416: PUSH
16417: LD_VAR 0 1
16421: PUSH
16422: LD_INT 1
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 12
16434: ARRAY
16435: PPUSH
16436: CALL_OW 274
16440: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16441: LD_VAR 0 2
16445: PPUSH
16446: LD_INT 1
16448: PPUSH
16449: LD_INT 0
16451: PPUSH
16452: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16456: LD_VAR 0 2
16460: PPUSH
16461: LD_INT 2
16463: PPUSH
16464: LD_INT 0
16466: PPUSH
16467: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_INT 3
16478: PPUSH
16479: LD_INT 0
16481: PPUSH
16482: CALL_OW 277
// end ;
16486: PPOPN 2
16488: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16489: LD_EXP 20
16493: PUSH
16494: LD_EXP 48
16498: AND
16499: IFFALSE 16596
16501: GO 16503
16503: DISABLE
16504: LD_INT 0
16506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16507: LD_ADDR_VAR 0 1
16511: PUSH
16512: LD_INT 22
16514: PUSH
16515: LD_OWVAR 2
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 21
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 3
16536: PUSH
16537: LD_INT 23
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if not tmp then
16561: LD_VAR 0 1
16565: NOT
16566: IFFALSE 16570
// exit ;
16568: GO 16596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16570: LD_VAR 0 1
16574: PUSH
16575: LD_INT 1
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 12
16587: ARRAY
16588: PPUSH
16589: LD_INT 200
16591: PPUSH
16592: CALL_OW 234
// end ;
16596: PPOPN 1
16598: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16599: LD_EXP 20
16603: PUSH
16604: LD_EXP 49
16608: AND
16609: IFFALSE 16688
16611: GO 16613
16613: DISABLE
16614: LD_INT 0
16616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16617: LD_ADDR_VAR 0 1
16621: PUSH
16622: LD_INT 22
16624: PUSH
16625: LD_OWVAR 2
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 21
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PPUSH
16648: CALL_OW 69
16652: ST_TO_ADDR
// if not tmp then
16653: LD_VAR 0 1
16657: NOT
16658: IFFALSE 16662
// exit ;
16660: GO 16688
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16662: LD_VAR 0 1
16666: PUSH
16667: LD_INT 1
16669: PPUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 12
16679: ARRAY
16680: PPUSH
16681: LD_INT 60
16683: PPUSH
16684: CALL_OW 234
// end ;
16688: PPOPN 1
16690: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16691: LD_EXP 20
16695: PUSH
16696: LD_EXP 50
16700: AND
16701: IFFALSE 16800
16703: GO 16705
16705: DISABLE
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// begin enable ;
16710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16711: LD_ADDR_VAR 0 1
16715: PUSH
16716: LD_INT 22
16718: PUSH
16719: LD_OWVAR 2
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 61
16730: PUSH
16731: EMPTY
16732: LIST
16733: PUSH
16734: LD_INT 33
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: PPUSH
16749: CALL_OW 69
16753: ST_TO_ADDR
// if not tmp then
16754: LD_VAR 0 1
16758: NOT
16759: IFFALSE 16763
// exit ;
16761: GO 16800
// for i in tmp do
16763: LD_ADDR_VAR 0 2
16767: PUSH
16768: LD_VAR 0 1
16772: PUSH
16773: FOR_IN
16774: IFFALSE 16798
// if IsControledBy ( i ) then
16776: LD_VAR 0 2
16780: PPUSH
16781: CALL_OW 312
16785: IFFALSE 16796
// ComUnlink ( i ) ;
16787: LD_VAR 0 2
16791: PPUSH
16792: CALL_OW 136
16796: GO 16773
16798: POP
16799: POP
// end ;
16800: PPOPN 2
16802: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16803: LD_EXP 20
16807: PUSH
16808: LD_EXP 51
16812: AND
16813: IFFALSE 16953
16815: GO 16817
16817: DISABLE
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// begin ToLua ( displayPowell(); ) ;
16822: LD_STRING displayPowell();
16824: PPUSH
16825: CALL_OW 559
// uc_side := 0 ;
16829: LD_ADDR_OWVAR 20
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// uc_nation := 2 ;
16837: LD_ADDR_OWVAR 21
16841: PUSH
16842: LD_INT 2
16844: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16845: LD_ADDR_OWVAR 37
16849: PUSH
16850: LD_INT 14
16852: ST_TO_ADDR
// vc_engine := engine_siberite ;
16853: LD_ADDR_OWVAR 39
16857: PUSH
16858: LD_INT 3
16860: ST_TO_ADDR
// vc_control := control_apeman ;
16861: LD_ADDR_OWVAR 38
16865: PUSH
16866: LD_INT 5
16868: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16869: LD_ADDR_OWVAR 40
16873: PUSH
16874: LD_INT 29
16876: ST_TO_ADDR
// un := CreateVehicle ;
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: CALL_OW 45
16886: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16887: LD_VAR 0 2
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16899: LD_INT 35
16901: PPUSH
16902: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16906: LD_VAR 0 2
16910: PPUSH
16911: LD_INT 22
16913: PUSH
16914: LD_OWVAR 2
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PPUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: CALL_OW 74
16937: PPUSH
16938: CALL_OW 115
// until IsDead ( un ) ;
16942: LD_VAR 0 2
16946: PPUSH
16947: CALL_OW 301
16951: IFFALSE 16899
// end ;
16953: PPOPN 2
16955: END
// every 0 0$1 trigger StreamModeActive and sStu do
16956: LD_EXP 20
16960: PUSH
16961: LD_EXP 59
16965: AND
16966: IFFALSE 16982
16968: GO 16970
16970: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16971: LD_STRING displayStucuk();
16973: PPUSH
16974: CALL_OW 559
// ResetFog ;
16978: CALL_OW 335
// end ;
16982: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16983: LD_EXP 20
16987: PUSH
16988: LD_EXP 52
16992: AND
16993: IFFALSE 17134
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_INT 22
17009: PUSH
17010: LD_OWVAR 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 21
17021: PUSH
17022: LD_INT 1
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 69
17037: ST_TO_ADDR
// if not tmp then
17038: LD_VAR 0 2
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17134
// un := tmp [ rand ( 1 , tmp ) ] ;
17047: LD_ADDR_VAR 0 1
17051: PUSH
17052: LD_VAR 0 2
17056: PUSH
17057: LD_INT 1
17059: PPUSH
17060: LD_VAR 0 2
17064: PPUSH
17065: CALL_OW 12
17069: ARRAY
17070: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_INT 0
17078: PPUSH
17079: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17083: LD_VAR 0 1
17087: PPUSH
17088: LD_OWVAR 3
17092: PUSH
17093: LD_VAR 0 1
17097: DIFF
17098: PPUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 74
17108: PPUSH
17109: CALL_OW 115
// wait ( 0 0$20 ) ;
17113: LD_INT 700
17115: PPUSH
17116: CALL_OW 67
// SetSide ( un , your_side ) ;
17120: LD_VAR 0 1
17124: PPUSH
17125: LD_OWVAR 2
17129: PPUSH
17130: CALL_OW 235
// end ;
17134: PPOPN 2
17136: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17137: LD_EXP 20
17141: PUSH
17142: LD_EXP 53
17146: AND
17147: IFFALSE 17253
17149: GO 17151
17151: DISABLE
17152: LD_INT 0
17154: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17155: LD_ADDR_VAR 0 1
17159: PUSH
17160: LD_INT 22
17162: PUSH
17163: LD_OWVAR 2
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: LD_INT 30
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 30
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: ST_TO_ADDR
// if not depot then
17209: LD_VAR 0 1
17213: NOT
17214: IFFALSE 17218
// exit ;
17216: GO 17253
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17218: LD_VAR 0 1
17222: PUSH
17223: LD_INT 1
17225: ARRAY
17226: PPUSH
17227: CALL_OW 250
17231: PPUSH
17232: LD_VAR 0 1
17236: PUSH
17237: LD_INT 1
17239: ARRAY
17240: PPUSH
17241: CALL_OW 251
17245: PPUSH
17246: LD_INT 70
17248: PPUSH
17249: CALL_OW 495
// end ;
17253: PPOPN 1
17255: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17256: LD_EXP 20
17260: PUSH
17261: LD_EXP 54
17265: AND
17266: IFFALSE 17477
17268: GO 17270
17270: DISABLE
17271: LD_INT 0
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17278: LD_ADDR_VAR 0 5
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_OWVAR 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 21
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: ST_TO_ADDR
// if not tmp then
17314: LD_VAR 0 5
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 17477
// for i in tmp do
17323: LD_ADDR_VAR 0 1
17327: PUSH
17328: LD_VAR 0 5
17332: PUSH
17333: FOR_IN
17334: IFFALSE 17475
// begin d := rand ( 0 , 5 ) ;
17336: LD_ADDR_VAR 0 4
17340: PUSH
17341: LD_INT 0
17343: PPUSH
17344: LD_INT 5
17346: PPUSH
17347: CALL_OW 12
17351: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17352: LD_ADDR_VAR 0 2
17356: PUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: CALL_OW 250
17366: PPUSH
17367: LD_VAR 0 4
17371: PPUSH
17372: LD_INT 3
17374: PPUSH
17375: LD_INT 12
17377: PPUSH
17378: CALL_OW 12
17382: PPUSH
17383: CALL_OW 272
17387: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 251
17402: PPUSH
17403: LD_VAR 0 4
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 12
17413: PPUSH
17414: CALL_OW 12
17418: PPUSH
17419: CALL_OW 273
17423: ST_TO_ADDR
// if ValidHex ( x , y ) then
17424: LD_VAR 0 2
17428: PPUSH
17429: LD_VAR 0 3
17433: PPUSH
17434: CALL_OW 488
17438: IFFALSE 17473
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17440: LD_VAR 0 1
17444: PPUSH
17445: LD_VAR 0 2
17449: PPUSH
17450: LD_VAR 0 3
17454: PPUSH
17455: LD_INT 3
17457: PPUSH
17458: LD_INT 6
17460: PPUSH
17461: CALL_OW 12
17465: PPUSH
17466: LD_INT 1
17468: PPUSH
17469: CALL_OW 483
// end ;
17473: GO 17333
17475: POP
17476: POP
// end ;
17477: PPOPN 5
17479: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17480: LD_EXP 20
17484: PUSH
17485: LD_EXP 55
17489: AND
17490: IFFALSE 17584
17492: GO 17494
17494: DISABLE
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_OWVAR 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 32
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 69
17545: ST_TO_ADDR
// if not tmp then
17546: LD_VAR 0 2
17550: NOT
17551: IFFALSE 17555
// exit ;
17553: GO 17584
// for i in tmp do
17555: LD_ADDR_VAR 0 1
17559: PUSH
17560: LD_VAR 0 2
17564: PUSH
17565: FOR_IN
17566: IFFALSE 17582
// SetFuel ( i , 0 ) ;
17568: LD_VAR 0 1
17572: PPUSH
17573: LD_INT 0
17575: PPUSH
17576: CALL_OW 240
17580: GO 17565
17582: POP
17583: POP
// end ;
17584: PPOPN 2
17586: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17587: LD_EXP 20
17591: PUSH
17592: LD_EXP 56
17596: AND
17597: IFFALSE 17663
17599: GO 17601
17601: DISABLE
17602: LD_INT 0
17604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17605: LD_ADDR_VAR 0 1
17609: PUSH
17610: LD_INT 22
17612: PUSH
17613: LD_OWVAR 2
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 30
17624: PUSH
17625: LD_INT 29
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PPUSH
17636: CALL_OW 69
17640: ST_TO_ADDR
// if not tmp then
17641: LD_VAR 0 1
17645: NOT
17646: IFFALSE 17650
// exit ;
17648: GO 17663
// DestroyUnit ( tmp [ 1 ] ) ;
17650: LD_VAR 0 1
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: PPUSH
17659: CALL_OW 65
// end ;
17663: PPOPN 1
17665: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17666: LD_EXP 20
17670: PUSH
17671: LD_EXP 58
17675: AND
17676: IFFALSE 17805
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
// begin uc_side := 0 ;
17684: LD_ADDR_OWVAR 20
17688: PUSH
17689: LD_INT 0
17691: ST_TO_ADDR
// uc_nation := nation_arabian ;
17692: LD_ADDR_OWVAR 21
17696: PUSH
17697: LD_INT 2
17699: ST_TO_ADDR
// hc_gallery :=  ;
17700: LD_ADDR_OWVAR 33
17704: PUSH
17705: LD_STRING 
17707: ST_TO_ADDR
// hc_name :=  ;
17708: LD_ADDR_OWVAR 26
17712: PUSH
17713: LD_STRING 
17715: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17716: LD_INT 1
17718: PPUSH
17719: LD_INT 11
17721: PPUSH
17722: LD_INT 10
17724: PPUSH
17725: CALL_OW 380
// un := CreateHuman ;
17729: LD_ADDR_VAR 0 1
17733: PUSH
17734: CALL_OW 44
17738: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17739: LD_VAR 0 1
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17751: LD_INT 35
17753: PPUSH
17754: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17758: LD_VAR 0 1
17762: PPUSH
17763: LD_INT 22
17765: PUSH
17766: LD_OWVAR 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: PPUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 74
17789: PPUSH
17790: CALL_OW 115
// until IsDead ( un ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: CALL_OW 301
17803: IFFALSE 17751
// end ;
17805: PPOPN 1
17807: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17808: LD_EXP 20
17812: PUSH
17813: LD_EXP 60
17817: AND
17818: IFFALSE 17830
17820: GO 17822
17822: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17823: LD_STRING earthquake(getX(game), 0, 32)
17825: PPUSH
17826: CALL_OW 559
17830: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17831: LD_EXP 20
17835: PUSH
17836: LD_EXP 61
17840: AND
17841: IFFALSE 17932
17843: GO 17845
17845: DISABLE
17846: LD_INT 0
17848: PPUSH
// begin enable ;
17849: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 22
17857: PUSH
17858: LD_OWVAR 2
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 21
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 33
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: PPUSH
17892: CALL_OW 69
17896: ST_TO_ADDR
// if not tmp then
17897: LD_VAR 0 1
17901: NOT
17902: IFFALSE 17906
// exit ;
17904: GO 17932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17906: LD_VAR 0 1
17910: PUSH
17911: LD_INT 1
17913: PPUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 12
17923: ARRAY
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: CALL_OW 234
// end ;
17932: PPOPN 1
17934: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17935: LD_EXP 20
17939: PUSH
17940: LD_EXP 62
17944: AND
17945: IFFALSE 18086
17947: GO 17949
17949: DISABLE
17950: LD_INT 0
17952: PPUSH
17953: PPUSH
17954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17955: LD_ADDR_VAR 0 3
17959: PUSH
17960: LD_INT 22
17962: PUSH
17963: LD_OWVAR 2
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 25
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 69
17990: ST_TO_ADDR
// if not tmp then
17991: LD_VAR 0 3
17995: NOT
17996: IFFALSE 18000
// exit ;
17998: GO 18086
// un := tmp [ rand ( 1 , tmp ) ] ;
18000: LD_ADDR_VAR 0 2
18004: PUSH
18005: LD_VAR 0 3
18009: PUSH
18010: LD_INT 1
18012: PPUSH
18013: LD_VAR 0 3
18017: PPUSH
18018: CALL_OW 12
18022: ARRAY
18023: ST_TO_ADDR
// if Crawls ( un ) then
18024: LD_VAR 0 2
18028: PPUSH
18029: CALL_OW 318
18033: IFFALSE 18044
// ComWalk ( un ) ;
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18044: LD_VAR 0 2
18048: PPUSH
18049: LD_INT 9
18051: PPUSH
18052: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18056: LD_INT 28
18058: PPUSH
18059: LD_OWVAR 2
18063: PPUSH
18064: LD_INT 2
18066: PPUSH
18067: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18071: LD_INT 29
18073: PPUSH
18074: LD_OWVAR 2
18078: PPUSH
18079: LD_INT 2
18081: PPUSH
18082: CALL_OW 322
// end ;
18086: PPOPN 3
18088: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18089: LD_EXP 20
18093: PUSH
18094: LD_EXP 63
18098: AND
18099: IFFALSE 18210
18101: GO 18103
18103: DISABLE
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
18108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18109: LD_ADDR_VAR 0 3
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_OWVAR 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 25
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: ST_TO_ADDR
// if not tmp then
18145: LD_VAR 0 3
18149: NOT
18150: IFFALSE 18154
// exit ;
18152: GO 18210
// un := tmp [ rand ( 1 , tmp ) ] ;
18154: LD_ADDR_VAR 0 2
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_INT 1
18166: PPUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: CALL_OW 12
18176: ARRAY
18177: ST_TO_ADDR
// if Crawls ( un ) then
18178: LD_VAR 0 2
18182: PPUSH
18183: CALL_OW 318
18187: IFFALSE 18198
// ComWalk ( un ) ;
18189: LD_VAR 0 2
18193: PPUSH
18194: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18198: LD_VAR 0 2
18202: PPUSH
18203: LD_INT 8
18205: PPUSH
18206: CALL_OW 336
// end ;
18210: PPOPN 3
18212: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18213: LD_EXP 20
18217: PUSH
18218: LD_EXP 64
18222: AND
18223: IFFALSE 18367
18225: GO 18227
18227: DISABLE
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18232: LD_ADDR_VAR 0 2
18236: PUSH
18237: LD_INT 22
18239: PUSH
18240: LD_OWVAR 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 21
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: LD_INT 34
18264: PUSH
18265: LD_INT 12
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 34
18274: PUSH
18275: LD_INT 51
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 34
18284: PUSH
18285: LD_INT 32
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: ST_TO_ADDR
// if not tmp then
18308: LD_VAR 0 2
18312: NOT
18313: IFFALSE 18317
// exit ;
18315: GO 18367
// for i in tmp do
18317: LD_ADDR_VAR 0 1
18321: PUSH
18322: LD_VAR 0 2
18326: PUSH
18327: FOR_IN
18328: IFFALSE 18365
// if GetCargo ( i , mat_artifact ) = 0 then
18330: LD_VAR 0 1
18334: PPUSH
18335: LD_INT 4
18337: PPUSH
18338: CALL_OW 289
18342: PUSH
18343: LD_INT 0
18345: EQUAL
18346: IFFALSE 18363
// SetCargo ( i , mat_siberit , 100 ) ;
18348: LD_VAR 0 1
18352: PPUSH
18353: LD_INT 3
18355: PPUSH
18356: LD_INT 100
18358: PPUSH
18359: CALL_OW 290
18363: GO 18327
18365: POP
18366: POP
// end ;
18367: PPOPN 2
18369: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18370: LD_EXP 20
18374: PUSH
18375: LD_EXP 65
18379: AND
18380: IFFALSE 18563
18382: GO 18384
18384: DISABLE
18385: LD_INT 0
18387: PPUSH
18388: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18389: LD_ADDR_VAR 0 2
18393: PUSH
18394: LD_INT 22
18396: PUSH
18397: LD_OWVAR 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PPUSH
18406: CALL_OW 69
18410: ST_TO_ADDR
// if not tmp then
18411: LD_VAR 0 2
18415: NOT
18416: IFFALSE 18420
// exit ;
18418: GO 18563
// for i := 1 to 2 do
18420: LD_ADDR_VAR 0 1
18424: PUSH
18425: DOUBLE
18426: LD_INT 1
18428: DEC
18429: ST_TO_ADDR
18430: LD_INT 2
18432: PUSH
18433: FOR_TO
18434: IFFALSE 18561
// begin uc_side := your_side ;
18436: LD_ADDR_OWVAR 20
18440: PUSH
18441: LD_OWVAR 2
18445: ST_TO_ADDR
// uc_nation := nation_american ;
18446: LD_ADDR_OWVAR 21
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// vc_chassis := us_morphling ;
18454: LD_ADDR_OWVAR 37
18458: PUSH
18459: LD_INT 5
18461: ST_TO_ADDR
// vc_engine := engine_siberite ;
18462: LD_ADDR_OWVAR 39
18466: PUSH
18467: LD_INT 3
18469: ST_TO_ADDR
// vc_control := control_computer ;
18470: LD_ADDR_OWVAR 38
18474: PUSH
18475: LD_INT 3
18477: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18478: LD_ADDR_OWVAR 40
18482: PUSH
18483: LD_INT 10
18485: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18486: LD_VAR 0 2
18490: PUSH
18491: LD_INT 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 310
18499: NOT
18500: IFFALSE 18547
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18502: CALL_OW 45
18506: PPUSH
18507: LD_VAR 0 2
18511: PUSH
18512: LD_INT 1
18514: ARRAY
18515: PPUSH
18516: CALL_OW 250
18520: PPUSH
18521: LD_VAR 0 2
18525: PUSH
18526: LD_INT 1
18528: ARRAY
18529: PPUSH
18530: CALL_OW 251
18534: PPUSH
18535: LD_INT 12
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: CALL_OW 50
18545: GO 18559
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18547: CALL_OW 45
18551: PPUSH
18552: LD_INT 1
18554: PPUSH
18555: CALL_OW 51
// end ;
18559: GO 18433
18561: POP
18562: POP
// end ;
18563: PPOPN 2
18565: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18566: LD_EXP 20
18570: PUSH
18571: LD_EXP 66
18575: AND
18576: IFFALSE 18798
18578: GO 18580
18580: DISABLE
18581: LD_INT 0
18583: PPUSH
18584: PPUSH
18585: PPUSH
18586: PPUSH
18587: PPUSH
18588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18589: LD_ADDR_VAR 0 6
18593: PUSH
18594: LD_INT 22
18596: PUSH
18597: LD_OWVAR 2
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 3
18618: PUSH
18619: LD_INT 23
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: ST_TO_ADDR
// if not tmp then
18643: LD_VAR 0 6
18647: NOT
18648: IFFALSE 18652
// exit ;
18650: GO 18798
// s1 := rand ( 1 , 4 ) ;
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_INT 1
18659: PPUSH
18660: LD_INT 4
18662: PPUSH
18663: CALL_OW 12
18667: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18668: LD_ADDR_VAR 0 4
18672: PUSH
18673: LD_VAR 0 6
18677: PUSH
18678: LD_INT 1
18680: ARRAY
18681: PPUSH
18682: LD_VAR 0 2
18686: PPUSH
18687: CALL_OW 259
18691: ST_TO_ADDR
// if s1 = 1 then
18692: LD_VAR 0 2
18696: PUSH
18697: LD_INT 1
18699: EQUAL
18700: IFFALSE 18720
// s2 := rand ( 2 , 4 ) else
18702: LD_ADDR_VAR 0 3
18706: PUSH
18707: LD_INT 2
18709: PPUSH
18710: LD_INT 4
18712: PPUSH
18713: CALL_OW 12
18717: ST_TO_ADDR
18718: GO 18728
// s2 := 1 ;
18720: LD_ADDR_VAR 0 3
18724: PUSH
18725: LD_INT 1
18727: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18728: LD_ADDR_VAR 0 5
18732: PUSH
18733: LD_VAR 0 6
18737: PUSH
18738: LD_INT 1
18740: ARRAY
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: CALL_OW 259
18751: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18752: LD_VAR 0 6
18756: PUSH
18757: LD_INT 1
18759: ARRAY
18760: PPUSH
18761: LD_VAR 0 2
18765: PPUSH
18766: LD_VAR 0 5
18770: PPUSH
18771: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 1
18782: ARRAY
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_VAR 0 4
18793: PPUSH
18794: CALL_OW 237
// end ;
18798: PPOPN 6
18800: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18801: LD_EXP 20
18805: PUSH
18806: LD_EXP 67
18810: AND
18811: IFFALSE 18890
18813: GO 18815
18815: DISABLE
18816: LD_INT 0
18818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18819: LD_ADDR_VAR 0 1
18823: PUSH
18824: LD_INT 22
18826: PUSH
18827: LD_OWVAR 2
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 30
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 69
18854: ST_TO_ADDR
// if not tmp then
18855: LD_VAR 0 1
18859: NOT
18860: IFFALSE 18864
// exit ;
18862: GO 18890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18864: LD_VAR 0 1
18868: PUSH
18869: LD_INT 1
18871: PPUSH
18872: LD_VAR 0 1
18876: PPUSH
18877: CALL_OW 12
18881: ARRAY
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 234
// end ;
18890: PPOPN 1
18892: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18893: LD_EXP 20
18897: PUSH
18898: LD_EXP 68
18902: AND
18903: IFFALSE 19015
18905: GO 18907
18907: DISABLE
18908: LD_INT 0
18910: PPUSH
18911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18912: LD_ADDR_VAR 0 2
18916: PUSH
18917: LD_INT 22
18919: PUSH
18920: LD_OWVAR 2
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 27
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 30
18944: PUSH
18945: LD_INT 26
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 28
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PPUSH
18972: CALL_OW 69
18976: ST_TO_ADDR
// if not tmp then
18977: LD_VAR 0 2
18981: NOT
18982: IFFALSE 18986
// exit ;
18984: GO 19015
// for i in tmp do
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_VAR 0 2
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19013
// SetLives ( i , 1 ) ;
18999: LD_VAR 0 1
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 234
19011: GO 18996
19013: POP
19014: POP
// end ;
19015: PPOPN 2
19017: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19018: LD_EXP 20
19022: PUSH
19023: LD_EXP 69
19027: AND
19028: IFFALSE 19315
19030: GO 19032
19032: DISABLE
19033: LD_INT 0
19035: PPUSH
19036: PPUSH
19037: PPUSH
// begin i := rand ( 1 , 7 ) ;
19038: LD_ADDR_VAR 0 1
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 7
19048: PPUSH
19049: CALL_OW 12
19053: ST_TO_ADDR
// case i of 1 :
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 1
19061: DOUBLE
19062: EQUAL
19063: IFTRUE 19067
19065: GO 19077
19067: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19068: LD_STRING earthquake(getX(game), 0, 32)
19070: PPUSH
19071: CALL_OW 559
19075: GO 19315
19077: LD_INT 2
19079: DOUBLE
19080: EQUAL
19081: IFTRUE 19085
19083: GO 19099
19085: POP
// begin ToLua ( displayStucuk(); ) ;
19086: LD_STRING displayStucuk();
19088: PPUSH
19089: CALL_OW 559
// ResetFog ;
19093: CALL_OW 335
// end ; 3 :
19097: GO 19315
19099: LD_INT 3
19101: DOUBLE
19102: EQUAL
19103: IFTRUE 19107
19105: GO 19211
19107: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: LD_INT 22
19115: PUSH
19116: LD_OWVAR 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 25
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: ST_TO_ADDR
// if not tmp then
19144: LD_VAR 0 2
19148: NOT
19149: IFFALSE 19153
// exit ;
19151: GO 19315
// un := tmp [ rand ( 1 , tmp ) ] ;
19153: LD_ADDR_VAR 0 3
19157: PUSH
19158: LD_VAR 0 2
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_VAR 0 2
19170: PPUSH
19171: CALL_OW 12
19175: ARRAY
19176: ST_TO_ADDR
// if Crawls ( un ) then
19177: LD_VAR 0 3
19181: PPUSH
19182: CALL_OW 318
19186: IFFALSE 19197
// ComWalk ( un ) ;
19188: LD_VAR 0 3
19192: PPUSH
19193: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19197: LD_VAR 0 3
19201: PPUSH
19202: LD_INT 8
19204: PPUSH
19205: CALL_OW 336
// end ; 4 :
19209: GO 19315
19211: LD_INT 4
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19293
19219: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19220: LD_ADDR_VAR 0 2
19224: PUSH
19225: LD_INT 22
19227: PUSH
19228: LD_OWVAR 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 30
19239: PUSH
19240: LD_INT 29
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: ST_TO_ADDR
// if not tmp then
19256: LD_VAR 0 2
19260: NOT
19261: IFFALSE 19265
// exit ;
19263: GO 19315
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19265: LD_VAR 0 2
19269: PUSH
19270: LD_INT 1
19272: ARRAY
19273: PPUSH
19274: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19278: LD_VAR 0 2
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PPUSH
19287: CALL_OW 65
// end ; 5 .. 7 :
19291: GO 19315
19293: LD_INT 5
19295: DOUBLE
19296: GREATEREQUAL
19297: IFFALSE 19305
19299: LD_INT 7
19301: DOUBLE
19302: LESSEQUAL
19303: IFTRUE 19307
19305: GO 19314
19307: POP
// StreamSibBomb ; end ;
19308: CALL 15552 0 0
19312: GO 19315
19314: POP
// end ;
19315: PPOPN 3
19317: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19318: LD_EXP 20
19322: PUSH
19323: LD_EXP 70
19327: AND
19328: IFFALSE 19484
19330: GO 19332
19332: DISABLE
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
19337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19338: LD_ADDR_VAR 0 2
19342: PUSH
19343: LD_INT 81
19345: PUSH
19346: LD_OWVAR 2
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 21
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: ST_TO_ADDR
// if not tmp then
19392: LD_VAR 0 2
19396: NOT
19397: IFFALSE 19401
// exit ;
19399: GO 19484
// p := 0 ;
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 0
19408: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19409: LD_INT 35
19411: PPUSH
19412: CALL_OW 67
// p := p + 1 ;
19416: LD_ADDR_VAR 0 3
19420: PUSH
19421: LD_VAR 0 3
19425: PUSH
19426: LD_INT 1
19428: PLUS
19429: ST_TO_ADDR
// for i in tmp do
19430: LD_ADDR_VAR 0 1
19434: PUSH
19435: LD_VAR 0 2
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19472
// if GetLives ( i ) < 1000 then
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 256
19452: PUSH
19453: LD_INT 1000
19455: LESS
19456: IFFALSE 19470
// SetLives ( i , 1000 ) ;
19458: LD_VAR 0 1
19462: PPUSH
19463: LD_INT 1000
19465: PPUSH
19466: CALL_OW 234
19470: GO 19440
19472: POP
19473: POP
// until p > 20 ;
19474: LD_VAR 0 3
19478: PUSH
19479: LD_INT 20
19481: GREATER
19482: IFFALSE 19409
// end ;
19484: PPOPN 3
19486: END
// every 0 0$1 trigger StreamModeActive and sTime do
19487: LD_EXP 20
19491: PUSH
19492: LD_EXP 71
19496: AND
19497: IFFALSE 19532
19499: GO 19501
19501: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19502: LD_INT 28
19504: PPUSH
19505: LD_OWVAR 2
19509: PPUSH
19510: LD_INT 2
19512: PPUSH
19513: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19517: LD_INT 30
19519: PPUSH
19520: LD_OWVAR 2
19524: PPUSH
19525: LD_INT 2
19527: PPUSH
19528: CALL_OW 322
// end ;
19532: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19533: LD_EXP 20
19537: PUSH
19538: LD_EXP 72
19542: AND
19543: IFFALSE 19664
19545: GO 19547
19547: DISABLE
19548: LD_INT 0
19550: PPUSH
19551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_OWVAR 2
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 3
19581: PUSH
19582: LD_INT 23
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 69
19605: ST_TO_ADDR
// if not tmp then
19606: LD_VAR 0 2
19610: NOT
19611: IFFALSE 19615
// exit ;
19613: GO 19664
// for i in tmp do
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_VAR 0 2
19624: PUSH
19625: FOR_IN
19626: IFFALSE 19662
// begin if Crawls ( i ) then
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 318
19637: IFFALSE 19648
// ComWalk ( i ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: CALL_OW 138
// SetClass ( i , 2 ) ;
19648: LD_VAR 0 1
19652: PPUSH
19653: LD_INT 2
19655: PPUSH
19656: CALL_OW 336
// end ;
19660: GO 19625
19662: POP
19663: POP
// end ;
19664: PPOPN 2
19666: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19667: LD_EXP 20
19671: PUSH
19672: LD_EXP 73
19676: AND
19677: IFFALSE 19965
19679: GO 19681
19681: DISABLE
19682: LD_INT 0
19684: PPUSH
19685: PPUSH
19686: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19687: LD_OWVAR 2
19691: PPUSH
19692: LD_INT 9
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19705: LD_INT 9
19707: PPUSH
19708: LD_OWVAR 2
19712: PPUSH
19713: CALL_OW 343
// uc_side := 9 ;
19717: LD_ADDR_OWVAR 20
19721: PUSH
19722: LD_INT 9
19724: ST_TO_ADDR
// uc_nation := 2 ;
19725: LD_ADDR_OWVAR 21
19729: PUSH
19730: LD_INT 2
19732: ST_TO_ADDR
// hc_name := Dark Warrior ;
19733: LD_ADDR_OWVAR 26
19737: PUSH
19738: LD_STRING Dark Warrior
19740: ST_TO_ADDR
// hc_gallery :=  ;
19741: LD_ADDR_OWVAR 33
19745: PUSH
19746: LD_STRING 
19748: ST_TO_ADDR
// hc_noskilllimit := true ;
19749: LD_ADDR_OWVAR 76
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19757: LD_ADDR_OWVAR 31
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 30
19767: PUSH
19768: LD_INT 30
19770: PUSH
19771: LD_INT 30
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: ST_TO_ADDR
// un := CreateHuman ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: CALL_OW 44
19789: ST_TO_ADDR
// hc_noskilllimit := false ;
19790: LD_ADDR_OWVAR 76
19794: PUSH
19795: LD_INT 0
19797: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19798: LD_VAR 0 3
19802: PPUSH
19803: LD_INT 1
19805: PPUSH
19806: CALL_OW 51
// ToLua ( playRanger() ) ;
19810: LD_STRING playRanger()
19812: PPUSH
19813: CALL_OW 559
// p := 0 ;
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19825: LD_INT 35
19827: PPUSH
19828: CALL_OW 67
// p := p + 1 ;
19832: LD_ADDR_VAR 0 2
19836: PUSH
19837: LD_VAR 0 2
19841: PUSH
19842: LD_INT 1
19844: PLUS
19845: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19846: LD_VAR 0 3
19850: PPUSH
19851: CALL_OW 256
19855: PUSH
19856: LD_INT 1000
19858: LESS
19859: IFFALSE 19873
// SetLives ( un , 1000 ) ;
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 1000
19868: PPUSH
19869: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19873: LD_VAR 0 3
19877: PPUSH
19878: LD_INT 81
19880: PUSH
19881: LD_OWVAR 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 91
19892: PUSH
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 30
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PPUSH
19910: CALL_OW 69
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 74
19924: PPUSH
19925: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19929: LD_VAR 0 2
19933: PUSH
19934: LD_INT 80
19936: GREATER
19937: PUSH
19938: LD_VAR 0 3
19942: PPUSH
19943: CALL_OW 301
19947: OR
19948: IFFALSE 19825
// if un then
19950: LD_VAR 0 3
19954: IFFALSE 19965
// RemoveUnit ( un ) ;
19956: LD_VAR 0 3
19960: PPUSH
19961: CALL_OW 64
// end ;
19965: PPOPN 3
19967: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19968: LD_EXP 74
19972: IFFALSE 20088
19974: GO 19976
19976: DISABLE
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
19981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19982: LD_ADDR_VAR 0 2
19986: PUSH
19987: LD_INT 81
19989: PUSH
19990: LD_OWVAR 2
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 21
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PPUSH
20013: CALL_OW 69
20017: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20018: LD_STRING playComputer()
20020: PPUSH
20021: CALL_OW 559
// if not tmp then
20025: LD_VAR 0 2
20029: NOT
20030: IFFALSE 20034
// exit ;
20032: GO 20088
// for i in tmp do
20034: LD_ADDR_VAR 0 1
20038: PUSH
20039: LD_VAR 0 2
20043: PUSH
20044: FOR_IN
20045: IFFALSE 20086
// for j := 1 to 4 do
20047: LD_ADDR_VAR 0 3
20051: PUSH
20052: DOUBLE
20053: LD_INT 1
20055: DEC
20056: ST_TO_ADDR
20057: LD_INT 4
20059: PUSH
20060: FOR_TO
20061: IFFALSE 20082
// SetSkill ( i , j , 10 ) ;
20063: LD_VAR 0 1
20067: PPUSH
20068: LD_VAR 0 3
20072: PPUSH
20073: LD_INT 10
20075: PPUSH
20076: CALL_OW 237
20080: GO 20060
20082: POP
20083: POP
20084: GO 20044
20086: POP
20087: POP
// end ;
20088: PPOPN 3
20090: END
// every 0 0$1 trigger s30 do var i , tmp ;
20091: LD_EXP 75
20095: IFFALSE 20164
20097: GO 20099
20099: DISABLE
20100: LD_INT 0
20102: PPUSH
20103: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: LD_INT 22
20111: PUSH
20112: LD_OWVAR 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PPUSH
20121: CALL_OW 69
20125: ST_TO_ADDR
// if not tmp then
20126: LD_VAR 0 2
20130: NOT
20131: IFFALSE 20135
// exit ;
20133: GO 20164
// for i in tmp do
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: LD_VAR 0 2
20144: PUSH
20145: FOR_IN
20146: IFFALSE 20162
// SetLives ( i , 300 ) ;
20148: LD_VAR 0 1
20152: PPUSH
20153: LD_INT 300
20155: PPUSH
20156: CALL_OW 234
20160: GO 20145
20162: POP
20163: POP
// end ;
20164: PPOPN 2
20166: END
// every 0 0$1 trigger s60 do var i , tmp ;
20167: LD_EXP 76
20171: IFFALSE 20240
20173: GO 20175
20175: DISABLE
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_INT 22
20187: PUSH
20188: LD_OWVAR 2
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: ST_TO_ADDR
// if not tmp then
20202: LD_VAR 0 2
20206: NOT
20207: IFFALSE 20211
// exit ;
20209: GO 20240
// for i in tmp do
20211: LD_ADDR_VAR 0 1
20215: PUSH
20216: LD_VAR 0 2
20220: PUSH
20221: FOR_IN
20222: IFFALSE 20238
// SetLives ( i , 600 ) ;
20224: LD_VAR 0 1
20228: PPUSH
20229: LD_INT 600
20231: PPUSH
20232: CALL_OW 234
20236: GO 20221
20238: POP
20239: POP
// end ;
20240: PPOPN 2
20242: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20243: LD_INT 0
20245: PPUSH
// case cmd of 301 :
20246: LD_VAR 0 1
20250: PUSH
20251: LD_INT 301
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20291
20259: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20260: LD_VAR 0 6
20264: PPUSH
20265: LD_VAR 0 7
20269: PPUSH
20270: LD_VAR 0 8
20274: PPUSH
20275: LD_VAR 0 4
20279: PPUSH
20280: LD_VAR 0 5
20284: PPUSH
20285: CALL 21500 0 5
20289: GO 20412
20291: LD_INT 302
20293: DOUBLE
20294: EQUAL
20295: IFTRUE 20299
20297: GO 20336
20299: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20300: LD_VAR 0 6
20304: PPUSH
20305: LD_VAR 0 7
20309: PPUSH
20310: LD_VAR 0 8
20314: PPUSH
20315: LD_VAR 0 9
20319: PPUSH
20320: LD_VAR 0 4
20324: PPUSH
20325: LD_VAR 0 5
20329: PPUSH
20330: CALL 21591 0 6
20334: GO 20412
20336: LD_INT 303
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20381
20344: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20345: LD_VAR 0 6
20349: PPUSH
20350: LD_VAR 0 7
20354: PPUSH
20355: LD_VAR 0 8
20359: PPUSH
20360: LD_VAR 0 9
20364: PPUSH
20365: LD_VAR 0 4
20369: PPUSH
20370: LD_VAR 0 5
20374: PPUSH
20375: CALL 20417 0 6
20379: GO 20412
20381: LD_INT 304
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20411
20389: POP
// hHackTeleport ( unit , x , y ) ; end ;
20390: LD_VAR 0 2
20394: PPUSH
20395: LD_VAR 0 4
20399: PPUSH
20400: LD_VAR 0 5
20404: PPUSH
20405: CALL 22184 0 3
20409: GO 20412
20411: POP
// end ;
20412: LD_VAR 0 12
20416: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20417: LD_INT 0
20419: PPUSH
20420: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20421: LD_VAR 0 1
20425: PUSH
20426: LD_INT 1
20428: LESS
20429: PUSH
20430: LD_VAR 0 1
20434: PUSH
20435: LD_INT 3
20437: GREATER
20438: OR
20439: PUSH
20440: LD_VAR 0 5
20444: PPUSH
20445: LD_VAR 0 6
20449: PPUSH
20450: CALL_OW 428
20454: OR
20455: IFFALSE 20459
// exit ;
20457: GO 21187
// uc_side := your_side ;
20459: LD_ADDR_OWVAR 20
20463: PUSH
20464: LD_OWVAR 2
20468: ST_TO_ADDR
// uc_nation := nation ;
20469: LD_ADDR_OWVAR 21
20473: PUSH
20474: LD_VAR 0 1
20478: ST_TO_ADDR
// bc_level = 1 ;
20479: LD_ADDR_OWVAR 43
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// case btype of 1 :
20487: LD_VAR 0 2
20491: PUSH
20492: LD_INT 1
20494: DOUBLE
20495: EQUAL
20496: IFTRUE 20500
20498: GO 20511
20500: POP
// bc_type := b_depot ; 2 :
20501: LD_ADDR_OWVAR 42
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
20509: GO 21131
20511: LD_INT 2
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20530
20519: POP
// bc_type := b_warehouse ; 3 :
20520: LD_ADDR_OWVAR 42
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
20528: GO 21131
20530: LD_INT 3
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20549
20538: POP
// bc_type := b_lab ; 4 .. 9 :
20539: LD_ADDR_OWVAR 42
20543: PUSH
20544: LD_INT 6
20546: ST_TO_ADDR
20547: GO 21131
20549: LD_INT 4
20551: DOUBLE
20552: GREATEREQUAL
20553: IFFALSE 20561
20555: LD_INT 9
20557: DOUBLE
20558: LESSEQUAL
20559: IFTRUE 20563
20561: GO 20623
20563: POP
// begin bc_type := b_lab_half ;
20564: LD_ADDR_OWVAR 42
20568: PUSH
20569: LD_INT 7
20571: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20572: LD_ADDR_OWVAR 44
20576: PUSH
20577: LD_INT 10
20579: PUSH
20580: LD_INT 11
20582: PUSH
20583: LD_INT 12
20585: PUSH
20586: LD_INT 15
20588: PUSH
20589: LD_INT 14
20591: PUSH
20592: LD_INT 13
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: PUSH
20603: LD_VAR 0 2
20607: PUSH
20608: LD_INT 3
20610: MINUS
20611: ARRAY
20612: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20613: LD_ADDR_OWVAR 45
20617: PUSH
20618: LD_INT 9
20620: ST_TO_ADDR
// end ; 10 .. 13 :
20621: GO 21131
20623: LD_INT 10
20625: DOUBLE
20626: GREATEREQUAL
20627: IFFALSE 20635
20629: LD_INT 13
20631: DOUBLE
20632: LESSEQUAL
20633: IFTRUE 20637
20635: GO 20714
20637: POP
// begin bc_type := b_lab_full ;
20638: LD_ADDR_OWVAR 42
20642: PUSH
20643: LD_INT 8
20645: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20646: LD_ADDR_OWVAR 44
20650: PUSH
20651: LD_INT 10
20653: PUSH
20654: LD_INT 12
20656: PUSH
20657: LD_INT 14
20659: PUSH
20660: LD_INT 13
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: PUSH
20669: LD_VAR 0 2
20673: PUSH
20674: LD_INT 9
20676: MINUS
20677: ARRAY
20678: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20679: LD_ADDR_OWVAR 45
20683: PUSH
20684: LD_INT 11
20686: PUSH
20687: LD_INT 15
20689: PUSH
20690: LD_INT 12
20692: PUSH
20693: LD_INT 15
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: PUSH
20702: LD_VAR 0 2
20706: PUSH
20707: LD_INT 9
20709: MINUS
20710: ARRAY
20711: ST_TO_ADDR
// end ; 14 :
20712: GO 21131
20714: LD_INT 14
20716: DOUBLE
20717: EQUAL
20718: IFTRUE 20722
20720: GO 20733
20722: POP
// bc_type := b_workshop ; 15 :
20723: LD_ADDR_OWVAR 42
20727: PUSH
20728: LD_INT 2
20730: ST_TO_ADDR
20731: GO 21131
20733: LD_INT 15
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20752
20741: POP
// bc_type := b_factory ; 16 :
20742: LD_ADDR_OWVAR 42
20746: PUSH
20747: LD_INT 3
20749: ST_TO_ADDR
20750: GO 21131
20752: LD_INT 16
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20771
20760: POP
// bc_type := b_ext_gun ; 17 :
20761: LD_ADDR_OWVAR 42
20765: PUSH
20766: LD_INT 17
20768: ST_TO_ADDR
20769: GO 21131
20771: LD_INT 17
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20807
20779: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20780: LD_ADDR_OWVAR 42
20784: PUSH
20785: LD_INT 19
20787: PUSH
20788: LD_INT 23
20790: PUSH
20791: LD_INT 19
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: LD_VAR 0 1
20803: ARRAY
20804: ST_TO_ADDR
20805: GO 21131
20807: LD_INT 18
20809: DOUBLE
20810: EQUAL
20811: IFTRUE 20815
20813: GO 20826
20815: POP
// bc_type := b_ext_radar ; 19 :
20816: LD_ADDR_OWVAR 42
20820: PUSH
20821: LD_INT 20
20823: ST_TO_ADDR
20824: GO 21131
20826: LD_INT 19
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20845
20834: POP
// bc_type := b_ext_radio ; 20 :
20835: LD_ADDR_OWVAR 42
20839: PUSH
20840: LD_INT 22
20842: ST_TO_ADDR
20843: GO 21131
20845: LD_INT 20
20847: DOUBLE
20848: EQUAL
20849: IFTRUE 20853
20851: GO 20864
20853: POP
// bc_type := b_ext_siberium ; 21 :
20854: LD_ADDR_OWVAR 42
20858: PUSH
20859: LD_INT 21
20861: ST_TO_ADDR
20862: GO 21131
20864: LD_INT 21
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20883
20872: POP
// bc_type := b_ext_computer ; 22 :
20873: LD_ADDR_OWVAR 42
20877: PUSH
20878: LD_INT 24
20880: ST_TO_ADDR
20881: GO 21131
20883: LD_INT 22
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20902
20891: POP
// bc_type := b_ext_track ; 23 :
20892: LD_ADDR_OWVAR 42
20896: PUSH
20897: LD_INT 16
20899: ST_TO_ADDR
20900: GO 21131
20902: LD_INT 23
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20921
20910: POP
// bc_type := b_ext_laser ; 24 :
20911: LD_ADDR_OWVAR 42
20915: PUSH
20916: LD_INT 25
20918: ST_TO_ADDR
20919: GO 21131
20921: LD_INT 24
20923: DOUBLE
20924: EQUAL
20925: IFTRUE 20929
20927: GO 20940
20929: POP
// bc_type := b_control_tower ; 25 :
20930: LD_ADDR_OWVAR 42
20934: PUSH
20935: LD_INT 36
20937: ST_TO_ADDR
20938: GO 21131
20940: LD_INT 25
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 20959
20948: POP
// bc_type := b_breastwork ; 26 :
20949: LD_ADDR_OWVAR 42
20953: PUSH
20954: LD_INT 31
20956: ST_TO_ADDR
20957: GO 21131
20959: LD_INT 26
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20978
20967: POP
// bc_type := b_bunker ; 27 :
20968: LD_ADDR_OWVAR 42
20972: PUSH
20973: LD_INT 32
20975: ST_TO_ADDR
20976: GO 21131
20978: LD_INT 27
20980: DOUBLE
20981: EQUAL
20982: IFTRUE 20986
20984: GO 20997
20986: POP
// bc_type := b_turret ; 28 :
20987: LD_ADDR_OWVAR 42
20991: PUSH
20992: LD_INT 33
20994: ST_TO_ADDR
20995: GO 21131
20997: LD_INT 28
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21016
21005: POP
// bc_type := b_armoury ; 29 :
21006: LD_ADDR_OWVAR 42
21010: PUSH
21011: LD_INT 4
21013: ST_TO_ADDR
21014: GO 21131
21016: LD_INT 29
21018: DOUBLE
21019: EQUAL
21020: IFTRUE 21024
21022: GO 21035
21024: POP
// bc_type := b_barracks ; 30 :
21025: LD_ADDR_OWVAR 42
21029: PUSH
21030: LD_INT 5
21032: ST_TO_ADDR
21033: GO 21131
21035: LD_INT 30
21037: DOUBLE
21038: EQUAL
21039: IFTRUE 21043
21041: GO 21054
21043: POP
// bc_type := b_solar_power ; 31 :
21044: LD_ADDR_OWVAR 42
21048: PUSH
21049: LD_INT 27
21051: ST_TO_ADDR
21052: GO 21131
21054: LD_INT 31
21056: DOUBLE
21057: EQUAL
21058: IFTRUE 21062
21060: GO 21073
21062: POP
// bc_type := b_oil_power ; 32 :
21063: LD_ADDR_OWVAR 42
21067: PUSH
21068: LD_INT 26
21070: ST_TO_ADDR
21071: GO 21131
21073: LD_INT 32
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21092
21081: POP
// bc_type := b_siberite_power ; 33 :
21082: LD_ADDR_OWVAR 42
21086: PUSH
21087: LD_INT 28
21089: ST_TO_ADDR
21090: GO 21131
21092: LD_INT 33
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21111
21100: POP
// bc_type := b_oil_mine ; 34 :
21101: LD_ADDR_OWVAR 42
21105: PUSH
21106: LD_INT 29
21108: ST_TO_ADDR
21109: GO 21131
21111: LD_INT 34
21113: DOUBLE
21114: EQUAL
21115: IFTRUE 21119
21117: GO 21130
21119: POP
// bc_type := b_siberite_mine ; end ;
21120: LD_ADDR_OWVAR 42
21124: PUSH
21125: LD_INT 30
21127: ST_TO_ADDR
21128: GO 21131
21130: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21131: LD_ADDR_VAR 0 8
21135: PUSH
21136: LD_VAR 0 5
21140: PPUSH
21141: LD_VAR 0 6
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: CALL_OW 47
21155: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21156: LD_OWVAR 42
21160: PUSH
21161: LD_INT 32
21163: PUSH
21164: LD_INT 33
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: IN
21171: IFFALSE 21187
// PlaceWeaponTurret ( b , weapon ) ;
21173: LD_VAR 0 8
21177: PPUSH
21178: LD_VAR 0 4
21182: PPUSH
21183: CALL_OW 431
// end ;
21187: LD_VAR 0 7
21191: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
21196: PPUSH
21197: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21198: LD_ADDR_VAR 0 4
21202: PUSH
21203: LD_INT 22
21205: PUSH
21206: LD_OWVAR 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: LD_INT 30
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 30
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 4
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21320
// for i in tmp do
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 4
21270: PUSH
21271: FOR_IN
21272: IFFALSE 21318
// for j = 1 to 3 do
21274: LD_ADDR_VAR 0 3
21278: PUSH
21279: DOUBLE
21280: LD_INT 1
21282: DEC
21283: ST_TO_ADDR
21284: LD_INT 3
21286: PUSH
21287: FOR_TO
21288: IFFALSE 21314
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 274
21299: PPUSH
21300: LD_VAR 0 3
21304: PPUSH
21305: LD_INT 99999
21307: PPUSH
21308: CALL_OW 277
21312: GO 21287
21314: POP
21315: POP
21316: GO 21271
21318: POP
21319: POP
// end ;
21320: LD_VAR 0 1
21324: RET
// export function hHackSetLevel10 ; var i , j ; begin
21325: LD_INT 0
21327: PPUSH
21328: PPUSH
21329: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21330: LD_ADDR_VAR 0 2
21334: PUSH
21335: LD_INT 21
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 69
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21403
// if IsSelected ( i ) then
21353: LD_VAR 0 2
21357: PPUSH
21358: CALL_OW 306
21362: IFFALSE 21401
// begin for j := 1 to 4 do
21364: LD_ADDR_VAR 0 3
21368: PUSH
21369: DOUBLE
21370: LD_INT 1
21372: DEC
21373: ST_TO_ADDR
21374: LD_INT 4
21376: PUSH
21377: FOR_TO
21378: IFFALSE 21399
// SetSkill ( i , j , 10 ) ;
21380: LD_VAR 0 2
21384: PPUSH
21385: LD_VAR 0 3
21389: PPUSH
21390: LD_INT 10
21392: PPUSH
21393: CALL_OW 237
21397: GO 21377
21399: POP
21400: POP
// end ;
21401: GO 21350
21403: POP
21404: POP
// end ;
21405: LD_VAR 0 1
21409: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21410: LD_INT 0
21412: PPUSH
21413: PPUSH
21414: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_OWVAR 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 21
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PPUSH
21446: CALL_OW 69
21450: PUSH
21451: FOR_IN
21452: IFFALSE 21493
// begin for j := 1 to 4 do
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: DOUBLE
21460: LD_INT 1
21462: DEC
21463: ST_TO_ADDR
21464: LD_INT 4
21466: PUSH
21467: FOR_TO
21468: IFFALSE 21489
// SetSkill ( i , j , 10 ) ;
21470: LD_VAR 0 2
21474: PPUSH
21475: LD_VAR 0 3
21479: PPUSH
21480: LD_INT 10
21482: PPUSH
21483: CALL_OW 237
21487: GO 21467
21489: POP
21490: POP
// end ;
21491: GO 21451
21493: POP
21494: POP
// end ;
21495: LD_VAR 0 1
21499: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21500: LD_INT 0
21502: PPUSH
// uc_side := your_side ;
21503: LD_ADDR_OWVAR 20
21507: PUSH
21508: LD_OWVAR 2
21512: ST_TO_ADDR
// uc_nation := nation ;
21513: LD_ADDR_OWVAR 21
21517: PUSH
21518: LD_VAR 0 1
21522: ST_TO_ADDR
// InitHc ;
21523: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21527: LD_INT 0
21529: PPUSH
21530: LD_VAR 0 2
21534: PPUSH
21535: LD_VAR 0 3
21539: PPUSH
21540: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21544: LD_VAR 0 4
21548: PPUSH
21549: LD_VAR 0 5
21553: PPUSH
21554: CALL_OW 428
21558: PUSH
21559: LD_INT 0
21561: EQUAL
21562: IFFALSE 21586
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21564: CALL_OW 44
21568: PPUSH
21569: LD_VAR 0 4
21573: PPUSH
21574: LD_VAR 0 5
21578: PPUSH
21579: LD_INT 1
21581: PPUSH
21582: CALL_OW 48
// end ;
21586: LD_VAR 0 6
21590: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21591: LD_INT 0
21593: PPUSH
21594: PPUSH
// uc_side := your_side ;
21595: LD_ADDR_OWVAR 20
21599: PUSH
21600: LD_OWVAR 2
21604: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21605: LD_VAR 0 1
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 2
21615: PUSH
21616: LD_INT 3
21618: PUSH
21619: LD_INT 4
21621: PUSH
21622: LD_INT 5
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: IN
21632: IFFALSE 21644
// uc_nation := nation_american else
21634: LD_ADDR_OWVAR 21
21638: PUSH
21639: LD_INT 1
21641: ST_TO_ADDR
21642: GO 21687
// if chassis in [ 11 , 12 , 13 , 14 ] then
21644: LD_VAR 0 1
21648: PUSH
21649: LD_INT 11
21651: PUSH
21652: LD_INT 12
21654: PUSH
21655: LD_INT 13
21657: PUSH
21658: LD_INT 14
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: IN
21667: IFFALSE 21679
// uc_nation := nation_arabian else
21669: LD_ADDR_OWVAR 21
21673: PUSH
21674: LD_INT 2
21676: ST_TO_ADDR
21677: GO 21687
// uc_nation := nation_russian ;
21679: LD_ADDR_OWVAR 21
21683: PUSH
21684: LD_INT 3
21686: ST_TO_ADDR
// vc_chassis := chassis ;
21687: LD_ADDR_OWVAR 37
21691: PUSH
21692: LD_VAR 0 1
21696: ST_TO_ADDR
// vc_engine := engine ;
21697: LD_ADDR_OWVAR 39
21701: PUSH
21702: LD_VAR 0 2
21706: ST_TO_ADDR
// vc_control := control ;
21707: LD_ADDR_OWVAR 38
21711: PUSH
21712: LD_VAR 0 3
21716: ST_TO_ADDR
// vc_weapon := weapon ;
21717: LD_ADDR_OWVAR 40
21721: PUSH
21722: LD_VAR 0 4
21726: ST_TO_ADDR
// un := CreateVehicle ;
21727: LD_ADDR_VAR 0 8
21731: PUSH
21732: CALL_OW 45
21736: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21737: LD_VAR 0 8
21741: PPUSH
21742: LD_INT 0
21744: PPUSH
21745: LD_INT 5
21747: PPUSH
21748: CALL_OW 12
21752: PPUSH
21753: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21757: LD_VAR 0 8
21761: PPUSH
21762: LD_VAR 0 5
21766: PPUSH
21767: LD_VAR 0 6
21771: PPUSH
21772: LD_INT 1
21774: PPUSH
21775: CALL_OW 48
// end ;
21779: LD_VAR 0 7
21783: RET
// export hInvincible ; every 1 do
21784: GO 21786
21786: DISABLE
// hInvincible := [ ] ;
21787: LD_ADDR_EXP 77
21791: PUSH
21792: EMPTY
21793: ST_TO_ADDR
21794: END
// every 10 do var i ;
21795: GO 21797
21797: DISABLE
21798: LD_INT 0
21800: PPUSH
// begin enable ;
21801: ENABLE
// if not hInvincible then
21802: LD_EXP 77
21806: NOT
21807: IFFALSE 21811
// exit ;
21809: GO 21855
// for i in hInvincible do
21811: LD_ADDR_VAR 0 1
21815: PUSH
21816: LD_EXP 77
21820: PUSH
21821: FOR_IN
21822: IFFALSE 21853
// if GetLives ( i ) < 1000 then
21824: LD_VAR 0 1
21828: PPUSH
21829: CALL_OW 256
21833: PUSH
21834: LD_INT 1000
21836: LESS
21837: IFFALSE 21851
// SetLives ( i , 1000 ) ;
21839: LD_VAR 0 1
21843: PPUSH
21844: LD_INT 1000
21846: PPUSH
21847: CALL_OW 234
21851: GO 21821
21853: POP
21854: POP
// end ;
21855: PPOPN 1
21857: END
// export function hHackInvincible ; var i ; begin
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21862: LD_ADDR_VAR 0 2
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: PPUSH
21895: CALL_OW 69
21899: PUSH
21900: FOR_IN
21901: IFFALSE 21962
// if IsSelected ( i ) then
21903: LD_VAR 0 2
21907: PPUSH
21908: CALL_OW 306
21912: IFFALSE 21960
// begin if i in hInvincible then
21914: LD_VAR 0 2
21918: PUSH
21919: LD_EXP 77
21923: IN
21924: IFFALSE 21944
// hInvincible := hInvincible diff i else
21926: LD_ADDR_EXP 77
21930: PUSH
21931: LD_EXP 77
21935: PUSH
21936: LD_VAR 0 2
21940: DIFF
21941: ST_TO_ADDR
21942: GO 21960
// hInvincible := hInvincible union i ;
21944: LD_ADDR_EXP 77
21948: PUSH
21949: LD_EXP 77
21953: PUSH
21954: LD_VAR 0 2
21958: UNION
21959: ST_TO_ADDR
// end ;
21960: GO 21900
21962: POP
21963: POP
// end ;
21964: LD_VAR 0 1
21968: RET
// export function hHackInvisible ; var i , j ; begin
21969: LD_INT 0
21971: PPUSH
21972: PPUSH
21973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21974: LD_ADDR_VAR 0 2
21978: PUSH
21979: LD_INT 21
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PPUSH
21989: CALL_OW 69
21993: PUSH
21994: FOR_IN
21995: IFFALSE 22019
// if IsSelected ( i ) then
21997: LD_VAR 0 2
22001: PPUSH
22002: CALL_OW 306
22006: IFFALSE 22017
// ComForceInvisible ( i ) ;
22008: LD_VAR 0 2
22012: PPUSH
22013: CALL_OW 496
22017: GO 21994
22019: POP
22020: POP
// end ;
22021: LD_VAR 0 1
22025: RET
// export function hHackChangeYourSide ; begin
22026: LD_INT 0
22028: PPUSH
// if your_side = 8 then
22029: LD_OWVAR 2
22033: PUSH
22034: LD_INT 8
22036: EQUAL
22037: IFFALSE 22049
// your_side := 0 else
22039: LD_ADDR_OWVAR 2
22043: PUSH
22044: LD_INT 0
22046: ST_TO_ADDR
22047: GO 22063
// your_side := your_side + 1 ;
22049: LD_ADDR_OWVAR 2
22053: PUSH
22054: LD_OWVAR 2
22058: PUSH
22059: LD_INT 1
22061: PLUS
22062: ST_TO_ADDR
// end ;
22063: LD_VAR 0 1
22067: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22068: LD_INT 0
22070: PPUSH
22071: PPUSH
22072: PPUSH
// for i in all_units do
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_OWVAR 3
22082: PUSH
22083: FOR_IN
22084: IFFALSE 22162
// if IsSelected ( i ) then
22086: LD_VAR 0 2
22090: PPUSH
22091: CALL_OW 306
22095: IFFALSE 22160
// begin j := GetSide ( i ) ;
22097: LD_ADDR_VAR 0 3
22101: PUSH
22102: LD_VAR 0 2
22106: PPUSH
22107: CALL_OW 255
22111: ST_TO_ADDR
// if j = 8 then
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 8
22119: EQUAL
22120: IFFALSE 22132
// j := 0 else
22122: LD_ADDR_VAR 0 3
22126: PUSH
22127: LD_INT 0
22129: ST_TO_ADDR
22130: GO 22146
// j := j + 1 ;
22132: LD_ADDR_VAR 0 3
22136: PUSH
22137: LD_VAR 0 3
22141: PUSH
22142: LD_INT 1
22144: PLUS
22145: ST_TO_ADDR
// SetSide ( i , j ) ;
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_VAR 0 3
22155: PPUSH
22156: CALL_OW 235
// end ;
22160: GO 22083
22162: POP
22163: POP
// end ;
22164: LD_VAR 0 1
22168: RET
// export function hHackFog ; begin
22169: LD_INT 0
22171: PPUSH
// FogOff ( true ) ;
22172: LD_INT 1
22174: PPUSH
22175: CALL_OW 344
// end ;
22179: LD_VAR 0 1
22183: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22184: LD_INT 0
22186: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22187: LD_VAR 0 1
22191: PPUSH
22192: LD_VAR 0 2
22196: PPUSH
22197: LD_VAR 0 3
22201: PPUSH
22202: LD_INT 1
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: CALL_OW 483
// CenterOnXY ( x , y ) ;
22212: LD_VAR 0 2
22216: PPUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: CALL_OW 84
// end ;
22226: LD_VAR 0 4
22230: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22235: LD_VAR 0 1
22239: NOT
22240: PUSH
22241: LD_VAR 0 2
22245: PPUSH
22246: LD_VAR 0 3
22250: PPUSH
22251: CALL_OW 488
22255: NOT
22256: OR
22257: PUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL_OW 266
22267: PUSH
22268: LD_INT 3
22270: NONEQUAL
22271: PUSH
22272: LD_VAR 0 1
22276: PPUSH
22277: CALL_OW 247
22281: PUSH
22282: LD_INT 1
22284: EQUAL
22285: NOT
22286: AND
22287: OR
22288: IFFALSE 22292
// exit ;
22290: GO 22441
// if GetType ( factory ) = unit_human then
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 247
22301: PUSH
22302: LD_INT 1
22304: EQUAL
22305: IFFALSE 22322
// factory := IsInUnit ( factory ) ;
22307: LD_ADDR_VAR 0 1
22311: PUSH
22312: LD_VAR 0 1
22316: PPUSH
22317: CALL_OW 310
22321: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22322: LD_VAR 0 1
22326: PPUSH
22327: CALL_OW 266
22331: PUSH
22332: LD_INT 3
22334: NONEQUAL
22335: IFFALSE 22339
// exit ;
22337: GO 22441
// if HexInfo ( x , y ) = factory then
22339: LD_VAR 0 2
22343: PPUSH
22344: LD_VAR 0 3
22348: PPUSH
22349: CALL_OW 428
22353: PUSH
22354: LD_VAR 0 1
22358: EQUAL
22359: IFFALSE 22386
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22361: LD_ADDR_EXP 78
22365: PUSH
22366: LD_EXP 78
22370: PPUSH
22371: LD_VAR 0 1
22375: PPUSH
22376: LD_INT 0
22378: PPUSH
22379: CALL_OW 1
22383: ST_TO_ADDR
22384: GO 22437
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22386: LD_ADDR_EXP 78
22390: PUSH
22391: LD_EXP 78
22395: PPUSH
22396: LD_VAR 0 1
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 255
22410: PUSH
22411: LD_VAR 0 1
22415: PUSH
22416: LD_VAR 0 2
22420: PUSH
22421: LD_VAR 0 3
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 1
22436: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22437: CALL 22446 0 0
// end ;
22441: LD_VAR 0 4
22445: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
22450: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22451: LD_STRING resetFactoryWaypoint();
22453: PPUSH
22454: CALL_OW 559
// if factoryWaypoints then
22458: LD_EXP 78
22462: IFFALSE 22588
// begin list := PrepareArray ( factoryWaypoints ) ;
22464: LD_ADDR_VAR 0 3
22468: PUSH
22469: LD_EXP 78
22473: PPUSH
22474: CALL 64991 0 1
22478: ST_TO_ADDR
// for i := 1 to list do
22479: LD_ADDR_VAR 0 2
22483: PUSH
22484: DOUBLE
22485: LD_INT 1
22487: DEC
22488: ST_TO_ADDR
22489: LD_VAR 0 3
22493: PUSH
22494: FOR_TO
22495: IFFALSE 22586
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22497: LD_STRING setFactoryWaypointXY(
22499: PUSH
22500: LD_VAR 0 3
22504: PUSH
22505: LD_VAR 0 2
22509: ARRAY
22510: PUSH
22511: LD_INT 1
22513: ARRAY
22514: STR
22515: PUSH
22516: LD_STRING ,
22518: STR
22519: PUSH
22520: LD_VAR 0 3
22524: PUSH
22525: LD_VAR 0 2
22529: ARRAY
22530: PUSH
22531: LD_INT 2
22533: ARRAY
22534: STR
22535: PUSH
22536: LD_STRING ,
22538: STR
22539: PUSH
22540: LD_VAR 0 3
22544: PUSH
22545: LD_VAR 0 2
22549: ARRAY
22550: PUSH
22551: LD_INT 3
22553: ARRAY
22554: STR
22555: PUSH
22556: LD_STRING ,
22558: STR
22559: PUSH
22560: LD_VAR 0 3
22564: PUSH
22565: LD_VAR 0 2
22569: ARRAY
22570: PUSH
22571: LD_INT 4
22573: ARRAY
22574: STR
22575: PUSH
22576: LD_STRING )
22578: STR
22579: PPUSH
22580: CALL_OW 559
22584: GO 22494
22586: POP
22587: POP
// end ; end ;
22588: LD_VAR 0 1
22592: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22593: LD_INT 0
22595: PPUSH
// if HexInfo ( x , y ) = warehouse then
22596: LD_VAR 0 2
22600: PPUSH
22601: LD_VAR 0 3
22605: PPUSH
22606: CALL_OW 428
22610: PUSH
22611: LD_VAR 0 1
22615: EQUAL
22616: IFFALSE 22643
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22618: LD_ADDR_EXP 79
22622: PUSH
22623: LD_EXP 79
22627: PPUSH
22628: LD_VAR 0 1
22632: PPUSH
22633: LD_INT 0
22635: PPUSH
22636: CALL_OW 1
22640: ST_TO_ADDR
22641: GO 22694
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22643: LD_ADDR_EXP 79
22647: PUSH
22648: LD_EXP 79
22652: PPUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 255
22667: PUSH
22668: LD_VAR 0 1
22672: PUSH
22673: LD_VAR 0 2
22677: PUSH
22678: LD_VAR 0 3
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PPUSH
22689: CALL_OW 1
22693: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22694: CALL 22703 0 0
// end ;
22698: LD_VAR 0 4
22702: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22703: LD_INT 0
22705: PPUSH
22706: PPUSH
22707: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22708: LD_STRING resetWarehouseGatheringPoints();
22710: PPUSH
22711: CALL_OW 559
// if warehouseGatheringPoints then
22715: LD_EXP 79
22719: IFFALSE 22845
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22721: LD_ADDR_VAR 0 3
22725: PUSH
22726: LD_EXP 79
22730: PPUSH
22731: CALL 64991 0 1
22735: ST_TO_ADDR
// for i := 1 to list do
22736: LD_ADDR_VAR 0 2
22740: PUSH
22741: DOUBLE
22742: LD_INT 1
22744: DEC
22745: ST_TO_ADDR
22746: LD_VAR 0 3
22750: PUSH
22751: FOR_TO
22752: IFFALSE 22843
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22754: LD_STRING setWarehouseGatheringPointXY(
22756: PUSH
22757: LD_VAR 0 3
22761: PUSH
22762: LD_VAR 0 2
22766: ARRAY
22767: PUSH
22768: LD_INT 1
22770: ARRAY
22771: STR
22772: PUSH
22773: LD_STRING ,
22775: STR
22776: PUSH
22777: LD_VAR 0 3
22781: PUSH
22782: LD_VAR 0 2
22786: ARRAY
22787: PUSH
22788: LD_INT 2
22790: ARRAY
22791: STR
22792: PUSH
22793: LD_STRING ,
22795: STR
22796: PUSH
22797: LD_VAR 0 3
22801: PUSH
22802: LD_VAR 0 2
22806: ARRAY
22807: PUSH
22808: LD_INT 3
22810: ARRAY
22811: STR
22812: PUSH
22813: LD_STRING ,
22815: STR
22816: PUSH
22817: LD_VAR 0 3
22821: PUSH
22822: LD_VAR 0 2
22826: ARRAY
22827: PUSH
22828: LD_INT 4
22830: ARRAY
22831: STR
22832: PUSH
22833: LD_STRING )
22835: STR
22836: PPUSH
22837: CALL_OW 559
22841: GO 22751
22843: POP
22844: POP
// end ; end ;
22845: LD_VAR 0 1
22849: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22850: LD_EXP 79
22854: IFFALSE 23539
22856: GO 22858
22858: DISABLE
22859: LD_INT 0
22861: PPUSH
22862: PPUSH
22863: PPUSH
22864: PPUSH
22865: PPUSH
22866: PPUSH
22867: PPUSH
22868: PPUSH
22869: PPUSH
// begin enable ;
22870: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22871: LD_ADDR_VAR 0 3
22875: PUSH
22876: LD_EXP 79
22880: PPUSH
22881: CALL 64991 0 1
22885: ST_TO_ADDR
// if not list then
22886: LD_VAR 0 3
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 23539
// for i := 1 to list do
22895: LD_ADDR_VAR 0 1
22899: PUSH
22900: DOUBLE
22901: LD_INT 1
22903: DEC
22904: ST_TO_ADDR
22905: LD_VAR 0 3
22909: PUSH
22910: FOR_TO
22911: IFFALSE 23537
// begin depot := list [ i ] [ 2 ] ;
22913: LD_ADDR_VAR 0 8
22917: PUSH
22918: LD_VAR 0 3
22922: PUSH
22923: LD_VAR 0 1
22927: ARRAY
22928: PUSH
22929: LD_INT 2
22931: ARRAY
22932: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22933: LD_ADDR_VAR 0 5
22937: PUSH
22938: LD_VAR 0 3
22942: PUSH
22943: LD_VAR 0 1
22947: ARRAY
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22953: LD_VAR 0 8
22957: PPUSH
22958: CALL_OW 301
22962: PUSH
22963: LD_VAR 0 5
22967: PUSH
22968: LD_VAR 0 8
22972: PPUSH
22973: CALL_OW 255
22977: NONEQUAL
22978: OR
22979: IFFALSE 23008
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22981: LD_ADDR_EXP 79
22985: PUSH
22986: LD_EXP 79
22990: PPUSH
22991: LD_VAR 0 8
22995: PPUSH
22996: LD_INT 0
22998: PPUSH
22999: CALL_OW 1
23003: ST_TO_ADDR
// exit ;
23004: POP
23005: POP
23006: GO 23539
// end ; x := list [ i ] [ 3 ] ;
23008: LD_ADDR_VAR 0 6
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_VAR 0 1
23022: ARRAY
23023: PUSH
23024: LD_INT 3
23026: ARRAY
23027: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23028: LD_ADDR_VAR 0 7
23032: PUSH
23033: LD_VAR 0 3
23037: PUSH
23038: LD_VAR 0 1
23042: ARRAY
23043: PUSH
23044: LD_INT 4
23046: ARRAY
23047: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23048: LD_ADDR_VAR 0 9
23052: PUSH
23053: LD_VAR 0 6
23057: PPUSH
23058: LD_VAR 0 7
23062: PPUSH
23063: LD_INT 16
23065: PPUSH
23066: CALL 63579 0 3
23070: ST_TO_ADDR
// if not cratesNearbyPoint then
23071: LD_VAR 0 9
23075: NOT
23076: IFFALSE 23082
// exit ;
23078: POP
23079: POP
23080: GO 23539
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23082: LD_ADDR_VAR 0 4
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_VAR 0 5
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: LD_INT 60
23104: PUSH
23105: EMPTY
23106: LIST
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 91
23114: PUSH
23115: LD_VAR 0 8
23119: PUSH
23120: LD_INT 6
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 25
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 25
23143: PUSH
23144: LD_INT 16
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: PUSH
23167: LD_VAR 0 8
23171: PPUSH
23172: CALL_OW 313
23176: PPUSH
23177: LD_INT 3
23179: PUSH
23180: LD_INT 60
23182: PUSH
23183: EMPTY
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 25
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 25
23205: PUSH
23206: LD_INT 16
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PPUSH
23222: CALL_OW 72
23226: UNION
23227: ST_TO_ADDR
// if tmp then
23228: LD_VAR 0 4
23232: IFFALSE 23312
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23234: LD_ADDR_VAR 0 4
23238: PUSH
23239: LD_VAR 0 4
23243: PPUSH
23244: LD_INT 3
23246: PPUSH
23247: CALL 61548 0 2
23251: ST_TO_ADDR
// for j in tmp do
23252: LD_ADDR_VAR 0 2
23256: PUSH
23257: LD_VAR 0 4
23261: PUSH
23262: FOR_IN
23263: IFFALSE 23306
// begin if IsInUnit ( j ) then
23265: LD_VAR 0 2
23269: PPUSH
23270: CALL_OW 310
23274: IFFALSE 23285
// ComExit ( j ) ;
23276: LD_VAR 0 2
23280: PPUSH
23281: CALL 61631 0 1
// AddComCollect ( j , x , y ) ;
23285: LD_VAR 0 2
23289: PPUSH
23290: LD_VAR 0 6
23294: PPUSH
23295: LD_VAR 0 7
23299: PPUSH
23300: CALL_OW 177
// end ;
23304: GO 23262
23306: POP
23307: POP
// exit ;
23308: POP
23309: POP
23310: GO 23539
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23312: LD_ADDR_VAR 0 4
23316: PUSH
23317: LD_INT 22
23319: PUSH
23320: LD_VAR 0 5
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 91
23331: PUSH
23332: LD_VAR 0 8
23336: PUSH
23337: LD_INT 8
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: LD_INT 34
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: LD_INT 51
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 34
23370: PUSH
23371: LD_INT 32
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 34
23380: PUSH
23381: LD_INT 89
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: PPUSH
23400: CALL_OW 69
23404: ST_TO_ADDR
// if tmp then
23405: LD_VAR 0 4
23409: IFFALSE 23535
// begin for j in tmp do
23411: LD_ADDR_VAR 0 2
23415: PUSH
23416: LD_VAR 0 4
23420: PUSH
23421: FOR_IN
23422: IFFALSE 23533
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23424: LD_VAR 0 2
23428: PPUSH
23429: CALL_OW 262
23433: PUSH
23434: LD_INT 3
23436: EQUAL
23437: PUSH
23438: LD_VAR 0 2
23442: PPUSH
23443: CALL_OW 261
23447: PUSH
23448: LD_INT 20
23450: GREATER
23451: OR
23452: PUSH
23453: LD_VAR 0 2
23457: PPUSH
23458: CALL_OW 314
23462: NOT
23463: AND
23464: PUSH
23465: LD_VAR 0 2
23469: PPUSH
23470: CALL_OW 263
23474: PUSH
23475: LD_INT 1
23477: NONEQUAL
23478: PUSH
23479: LD_VAR 0 2
23483: PPUSH
23484: CALL_OW 311
23488: OR
23489: AND
23490: IFFALSE 23531
// begin ComCollect ( j , x , y ) ;
23492: LD_VAR 0 2
23496: PPUSH
23497: LD_VAR 0 6
23501: PPUSH
23502: LD_VAR 0 7
23506: PPUSH
23507: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23511: LD_VAR 0 2
23515: PPUSH
23516: LD_VAR 0 8
23520: PPUSH
23521: CALL_OW 172
// exit ;
23525: POP
23526: POP
23527: POP
23528: POP
23529: GO 23539
// end ;
23531: GO 23421
23533: POP
23534: POP
// end ; end ;
23535: GO 22910
23537: POP
23538: POP
// end ; end_of_file
23539: PPOPN 9
23541: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23542: LD_INT 0
23544: PPUSH
23545: PPUSH
// if exist_mode then
23546: LD_VAR 0 2
23550: IFFALSE 23575
// unit := CreateCharacter ( prefix & ident ) else
23552: LD_ADDR_VAR 0 5
23556: PUSH
23557: LD_VAR 0 3
23561: PUSH
23562: LD_VAR 0 1
23566: STR
23567: PPUSH
23568: CALL_OW 34
23572: ST_TO_ADDR
23573: GO 23590
// unit := NewCharacter ( ident ) ;
23575: LD_ADDR_VAR 0 5
23579: PUSH
23580: LD_VAR 0 1
23584: PPUSH
23585: CALL_OW 25
23589: ST_TO_ADDR
// result := unit ;
23590: LD_ADDR_VAR 0 4
23594: PUSH
23595: LD_VAR 0 5
23599: ST_TO_ADDR
// end ;
23600: LD_VAR 0 4
23604: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23605: LD_INT 0
23607: PPUSH
23608: PPUSH
// if not side or not nation then
23609: LD_VAR 0 1
23613: NOT
23614: PUSH
23615: LD_VAR 0 2
23619: NOT
23620: OR
23621: IFFALSE 23625
// exit ;
23623: GO 24393
// case nation of nation_american :
23625: LD_VAR 0 2
23629: PUSH
23630: LD_INT 1
23632: DOUBLE
23633: EQUAL
23634: IFTRUE 23638
23636: GO 23852
23638: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23639: LD_ADDR_VAR 0 4
23643: PUSH
23644: LD_INT 35
23646: PUSH
23647: LD_INT 45
23649: PUSH
23650: LD_INT 46
23652: PUSH
23653: LD_INT 47
23655: PUSH
23656: LD_INT 82
23658: PUSH
23659: LD_INT 83
23661: PUSH
23662: LD_INT 84
23664: PUSH
23665: LD_INT 85
23667: PUSH
23668: LD_INT 86
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: LD_INT 6
23679: PUSH
23680: LD_INT 15
23682: PUSH
23683: LD_INT 16
23685: PUSH
23686: LD_INT 7
23688: PUSH
23689: LD_INT 12
23691: PUSH
23692: LD_INT 13
23694: PUSH
23695: LD_INT 10
23697: PUSH
23698: LD_INT 14
23700: PUSH
23701: LD_INT 20
23703: PUSH
23704: LD_INT 21
23706: PUSH
23707: LD_INT 22
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 32
23715: PUSH
23716: LD_INT 27
23718: PUSH
23719: LD_INT 36
23721: PUSH
23722: LD_INT 69
23724: PUSH
23725: LD_INT 39
23727: PUSH
23728: LD_INT 34
23730: PUSH
23731: LD_INT 40
23733: PUSH
23734: LD_INT 48
23736: PUSH
23737: LD_INT 49
23739: PUSH
23740: LD_INT 50
23742: PUSH
23743: LD_INT 51
23745: PUSH
23746: LD_INT 52
23748: PUSH
23749: LD_INT 53
23751: PUSH
23752: LD_INT 54
23754: PUSH
23755: LD_INT 55
23757: PUSH
23758: LD_INT 56
23760: PUSH
23761: LD_INT 57
23763: PUSH
23764: LD_INT 58
23766: PUSH
23767: LD_INT 59
23769: PUSH
23770: LD_INT 60
23772: PUSH
23773: LD_INT 61
23775: PUSH
23776: LD_INT 62
23778: PUSH
23779: LD_INT 80
23781: PUSH
23782: LD_INT 82
23784: PUSH
23785: LD_INT 83
23787: PUSH
23788: LD_INT 84
23790: PUSH
23791: LD_INT 85
23793: PUSH
23794: LD_INT 86
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: ST_TO_ADDR
23850: GO 24317
23852: LD_INT 2
23854: DOUBLE
23855: EQUAL
23856: IFTRUE 23860
23858: GO 24086
23860: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23861: LD_ADDR_VAR 0 4
23865: PUSH
23866: LD_INT 35
23868: PUSH
23869: LD_INT 45
23871: PUSH
23872: LD_INT 46
23874: PUSH
23875: LD_INT 47
23877: PUSH
23878: LD_INT 82
23880: PUSH
23881: LD_INT 83
23883: PUSH
23884: LD_INT 84
23886: PUSH
23887: LD_INT 85
23889: PUSH
23890: LD_INT 87
23892: PUSH
23893: LD_INT 70
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: LD_INT 11
23901: PUSH
23902: LD_INT 3
23904: PUSH
23905: LD_INT 4
23907: PUSH
23908: LD_INT 5
23910: PUSH
23911: LD_INT 6
23913: PUSH
23914: LD_INT 15
23916: PUSH
23917: LD_INT 18
23919: PUSH
23920: LD_INT 7
23922: PUSH
23923: LD_INT 17
23925: PUSH
23926: LD_INT 8
23928: PUSH
23929: LD_INT 20
23931: PUSH
23932: LD_INT 21
23934: PUSH
23935: LD_INT 22
23937: PUSH
23938: LD_INT 72
23940: PUSH
23941: LD_INT 26
23943: PUSH
23944: LD_INT 69
23946: PUSH
23947: LD_INT 39
23949: PUSH
23950: LD_INT 40
23952: PUSH
23953: LD_INT 41
23955: PUSH
23956: LD_INT 42
23958: PUSH
23959: LD_INT 43
23961: PUSH
23962: LD_INT 48
23964: PUSH
23965: LD_INT 49
23967: PUSH
23968: LD_INT 50
23970: PUSH
23971: LD_INT 51
23973: PUSH
23974: LD_INT 52
23976: PUSH
23977: LD_INT 53
23979: PUSH
23980: LD_INT 54
23982: PUSH
23983: LD_INT 55
23985: PUSH
23986: LD_INT 56
23988: PUSH
23989: LD_INT 60
23991: PUSH
23992: LD_INT 61
23994: PUSH
23995: LD_INT 62
23997: PUSH
23998: LD_INT 66
24000: PUSH
24001: LD_INT 67
24003: PUSH
24004: LD_INT 68
24006: PUSH
24007: LD_INT 81
24009: PUSH
24010: LD_INT 82
24012: PUSH
24013: LD_INT 83
24015: PUSH
24016: LD_INT 84
24018: PUSH
24019: LD_INT 85
24021: PUSH
24022: LD_INT 87
24024: PUSH
24025: LD_INT 88
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24317
24086: LD_INT 3
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24316
24094: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24095: LD_ADDR_VAR 0 4
24099: PUSH
24100: LD_INT 46
24102: PUSH
24103: LD_INT 47
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: LD_INT 2
24111: PUSH
24112: LD_INT 82
24114: PUSH
24115: LD_INT 83
24117: PUSH
24118: LD_INT 84
24120: PUSH
24121: LD_INT 85
24123: PUSH
24124: LD_INT 86
24126: PUSH
24127: LD_INT 11
24129: PUSH
24130: LD_INT 9
24132: PUSH
24133: LD_INT 20
24135: PUSH
24136: LD_INT 19
24138: PUSH
24139: LD_INT 21
24141: PUSH
24142: LD_INT 24
24144: PUSH
24145: LD_INT 22
24147: PUSH
24148: LD_INT 25
24150: PUSH
24151: LD_INT 28
24153: PUSH
24154: LD_INT 29
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 31
24162: PUSH
24163: LD_INT 37
24165: PUSH
24166: LD_INT 38
24168: PUSH
24169: LD_INT 32
24171: PUSH
24172: LD_INT 27
24174: PUSH
24175: LD_INT 33
24177: PUSH
24178: LD_INT 69
24180: PUSH
24181: LD_INT 39
24183: PUSH
24184: LD_INT 34
24186: PUSH
24187: LD_INT 40
24189: PUSH
24190: LD_INT 71
24192: PUSH
24193: LD_INT 23
24195: PUSH
24196: LD_INT 44
24198: PUSH
24199: LD_INT 48
24201: PUSH
24202: LD_INT 49
24204: PUSH
24205: LD_INT 50
24207: PUSH
24208: LD_INT 51
24210: PUSH
24211: LD_INT 52
24213: PUSH
24214: LD_INT 53
24216: PUSH
24217: LD_INT 54
24219: PUSH
24220: LD_INT 55
24222: PUSH
24223: LD_INT 56
24225: PUSH
24226: LD_INT 57
24228: PUSH
24229: LD_INT 58
24231: PUSH
24232: LD_INT 59
24234: PUSH
24235: LD_INT 63
24237: PUSH
24238: LD_INT 64
24240: PUSH
24241: LD_INT 65
24243: PUSH
24244: LD_INT 82
24246: PUSH
24247: LD_INT 83
24249: PUSH
24250: LD_INT 84
24252: PUSH
24253: LD_INT 85
24255: PUSH
24256: LD_INT 86
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: ST_TO_ADDR
24314: GO 24317
24316: POP
// if state > - 1 and state < 3 then
24317: LD_VAR 0 3
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: GREATER
24326: PUSH
24327: LD_VAR 0 3
24331: PUSH
24332: LD_INT 3
24334: LESS
24335: AND
24336: IFFALSE 24393
// for i in result do
24338: LD_ADDR_VAR 0 5
24342: PUSH
24343: LD_VAR 0 4
24347: PUSH
24348: FOR_IN
24349: IFFALSE 24391
// if GetTech ( i , side ) <> state then
24351: LD_VAR 0 5
24355: PPUSH
24356: LD_VAR 0 1
24360: PPUSH
24361: CALL_OW 321
24365: PUSH
24366: LD_VAR 0 3
24370: NONEQUAL
24371: IFFALSE 24389
// result := result diff i ;
24373: LD_ADDR_VAR 0 4
24377: PUSH
24378: LD_VAR 0 4
24382: PUSH
24383: LD_VAR 0 5
24387: DIFF
24388: ST_TO_ADDR
24389: GO 24348
24391: POP
24392: POP
// end ;
24393: LD_VAR 0 4
24397: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24398: LD_INT 0
24400: PPUSH
24401: PPUSH
24402: PPUSH
// result := true ;
24403: LD_ADDR_VAR 0 3
24407: PUSH
24408: LD_INT 1
24410: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24411: LD_ADDR_VAR 0 5
24415: PUSH
24416: LD_VAR 0 2
24420: PPUSH
24421: CALL_OW 480
24425: ST_TO_ADDR
// if not tmp then
24426: LD_VAR 0 5
24430: NOT
24431: IFFALSE 24435
// exit ;
24433: GO 24484
// for i in tmp do
24435: LD_ADDR_VAR 0 4
24439: PUSH
24440: LD_VAR 0 5
24444: PUSH
24445: FOR_IN
24446: IFFALSE 24482
// if GetTech ( i , side ) <> state_researched then
24448: LD_VAR 0 4
24452: PPUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 321
24462: PUSH
24463: LD_INT 2
24465: NONEQUAL
24466: IFFALSE 24480
// begin result := false ;
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_INT 0
24475: ST_TO_ADDR
// exit ;
24476: POP
24477: POP
24478: GO 24484
// end ;
24480: GO 24445
24482: POP
24483: POP
// end ;
24484: LD_VAR 0 3
24488: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24489: LD_INT 0
24491: PPUSH
24492: PPUSH
24493: PPUSH
24494: PPUSH
24495: PPUSH
24496: PPUSH
24497: PPUSH
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
24502: PPUSH
24503: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24504: LD_VAR 0 1
24508: NOT
24509: PUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 257
24519: PUSH
24520: LD_INT 9
24522: NONEQUAL
24523: OR
24524: IFFALSE 24528
// exit ;
24526: GO 25101
// side := GetSide ( unit ) ;
24528: LD_ADDR_VAR 0 9
24532: PUSH
24533: LD_VAR 0 1
24537: PPUSH
24538: CALL_OW 255
24542: ST_TO_ADDR
// tech_space := tech_spacanom ;
24543: LD_ADDR_VAR 0 12
24547: PUSH
24548: LD_INT 29
24550: ST_TO_ADDR
// tech_time := tech_taurad ;
24551: LD_ADDR_VAR 0 13
24555: PUSH
24556: LD_INT 28
24558: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24559: LD_ADDR_VAR 0 11
24563: PUSH
24564: LD_VAR 0 1
24568: PPUSH
24569: CALL_OW 310
24573: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24574: LD_VAR 0 11
24578: PPUSH
24579: CALL_OW 247
24583: PUSH
24584: LD_INT 2
24586: EQUAL
24587: IFFALSE 24591
// exit ;
24589: GO 25101
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24591: LD_ADDR_VAR 0 8
24595: PUSH
24596: LD_INT 81
24598: PUSH
24599: LD_VAR 0 9
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 21
24613: PUSH
24614: LD_INT 3
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PPUSH
24629: CALL_OW 69
24633: ST_TO_ADDR
// if not tmp then
24634: LD_VAR 0 8
24638: NOT
24639: IFFALSE 24643
// exit ;
24641: GO 25101
// if in_unit then
24643: LD_VAR 0 11
24647: IFFALSE 24671
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24649: LD_ADDR_VAR 0 10
24653: PUSH
24654: LD_VAR 0 8
24658: PPUSH
24659: LD_VAR 0 11
24663: PPUSH
24664: CALL_OW 74
24668: ST_TO_ADDR
24669: GO 24691
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24671: LD_ADDR_VAR 0 10
24675: PUSH
24676: LD_VAR 0 8
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL_OW 74
24690: ST_TO_ADDR
// if not enemy then
24691: LD_VAR 0 10
24695: NOT
24696: IFFALSE 24700
// exit ;
24698: GO 25101
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24700: LD_VAR 0 11
24704: PUSH
24705: LD_VAR 0 11
24709: PPUSH
24710: LD_VAR 0 10
24714: PPUSH
24715: CALL_OW 296
24719: PUSH
24720: LD_INT 13
24722: GREATER
24723: AND
24724: PUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: LD_VAR 0 10
24734: PPUSH
24735: CALL_OW 296
24739: PUSH
24740: LD_INT 12
24742: GREATER
24743: OR
24744: IFFALSE 24748
// exit ;
24746: GO 25101
// missile := [ 1 ] ;
24748: LD_ADDR_VAR 0 14
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24759: LD_VAR 0 9
24763: PPUSH
24764: LD_VAR 0 12
24768: PPUSH
24769: CALL_OW 325
24773: IFFALSE 24802
// missile := Replace ( missile , missile + 1 , 2 ) ;
24775: LD_ADDR_VAR 0 14
24779: PUSH
24780: LD_VAR 0 14
24784: PPUSH
24785: LD_VAR 0 14
24789: PUSH
24790: LD_INT 1
24792: PLUS
24793: PPUSH
24794: LD_INT 2
24796: PPUSH
24797: CALL_OW 1
24801: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24802: LD_VAR 0 9
24806: PPUSH
24807: LD_VAR 0 13
24811: PPUSH
24812: CALL_OW 325
24816: PUSH
24817: LD_VAR 0 10
24821: PPUSH
24822: CALL_OW 255
24826: PPUSH
24827: LD_VAR 0 13
24831: PPUSH
24832: CALL_OW 325
24836: NOT
24837: AND
24838: IFFALSE 24867
// missile := Replace ( missile , missile + 1 , 3 ) ;
24840: LD_ADDR_VAR 0 14
24844: PUSH
24845: LD_VAR 0 14
24849: PPUSH
24850: LD_VAR 0 14
24854: PUSH
24855: LD_INT 1
24857: PLUS
24858: PPUSH
24859: LD_INT 3
24861: PPUSH
24862: CALL_OW 1
24866: ST_TO_ADDR
// if missile < 2 then
24867: LD_VAR 0 14
24871: PUSH
24872: LD_INT 2
24874: LESS
24875: IFFALSE 24879
// exit ;
24877: GO 25101
// x := GetX ( enemy ) ;
24879: LD_ADDR_VAR 0 4
24883: PUSH
24884: LD_VAR 0 10
24888: PPUSH
24889: CALL_OW 250
24893: ST_TO_ADDR
// y := GetY ( enemy ) ;
24894: LD_ADDR_VAR 0 5
24898: PUSH
24899: LD_VAR 0 10
24903: PPUSH
24904: CALL_OW 251
24908: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24909: LD_ADDR_VAR 0 6
24913: PUSH
24914: LD_VAR 0 4
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PPUSH
24923: LD_INT 1
24925: PPUSH
24926: CALL_OW 12
24930: PLUS
24931: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24932: LD_ADDR_VAR 0 7
24936: PUSH
24937: LD_VAR 0 5
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PPUSH
24946: LD_INT 1
24948: PPUSH
24949: CALL_OW 12
24953: PLUS
24954: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24955: LD_VAR 0 6
24959: PPUSH
24960: LD_VAR 0 7
24964: PPUSH
24965: CALL_OW 488
24969: NOT
24970: IFFALSE 24992
// begin _x := x ;
24972: LD_ADDR_VAR 0 6
24976: PUSH
24977: LD_VAR 0 4
24981: ST_TO_ADDR
// _y := y ;
24982: LD_ADDR_VAR 0 7
24986: PUSH
24987: LD_VAR 0 5
24991: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24992: LD_ADDR_VAR 0 3
24996: PUSH
24997: LD_INT 1
24999: PPUSH
25000: LD_VAR 0 14
25004: PPUSH
25005: CALL_OW 12
25009: ST_TO_ADDR
// case i of 1 :
25010: LD_VAR 0 3
25014: PUSH
25015: LD_INT 1
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25040
25023: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_VAR 0 10
25033: PPUSH
25034: CALL_OW 115
25038: GO 25101
25040: LD_INT 2
25042: DOUBLE
25043: EQUAL
25044: IFTRUE 25048
25046: GO 25070
25048: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25049: LD_VAR 0 1
25053: PPUSH
25054: LD_VAR 0 6
25058: PPUSH
25059: LD_VAR 0 7
25063: PPUSH
25064: CALL_OW 153
25068: GO 25101
25070: LD_INT 3
25072: DOUBLE
25073: EQUAL
25074: IFTRUE 25078
25076: GO 25100
25078: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25079: LD_VAR 0 1
25083: PPUSH
25084: LD_VAR 0 6
25088: PPUSH
25089: LD_VAR 0 7
25093: PPUSH
25094: CALL_OW 154
25098: GO 25101
25100: POP
// end ;
25101: LD_VAR 0 2
25105: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
// if not unit or not building then
25114: LD_VAR 0 1
25118: NOT
25119: PUSH
25120: LD_VAR 0 2
25124: NOT
25125: OR
25126: IFFALSE 25130
// exit ;
25128: GO 25288
// x := GetX ( building ) ;
25130: LD_ADDR_VAR 0 5
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: CALL_OW 250
25144: ST_TO_ADDR
// y := GetY ( building ) ;
25145: LD_ADDR_VAR 0 6
25149: PUSH
25150: LD_VAR 0 2
25154: PPUSH
25155: CALL_OW 251
25159: ST_TO_ADDR
// for i = 0 to 5 do
25160: LD_ADDR_VAR 0 4
25164: PUSH
25165: DOUBLE
25166: LD_INT 0
25168: DEC
25169: ST_TO_ADDR
25170: LD_INT 5
25172: PUSH
25173: FOR_TO
25174: IFFALSE 25286
// begin _x := ShiftX ( x , i , 3 ) ;
25176: LD_ADDR_VAR 0 7
25180: PUSH
25181: LD_VAR 0 5
25185: PPUSH
25186: LD_VAR 0 4
25190: PPUSH
25191: LD_INT 3
25193: PPUSH
25194: CALL_OW 272
25198: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25199: LD_ADDR_VAR 0 8
25203: PUSH
25204: LD_VAR 0 6
25208: PPUSH
25209: LD_VAR 0 4
25213: PPUSH
25214: LD_INT 3
25216: PPUSH
25217: CALL_OW 273
25221: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25222: LD_VAR 0 7
25226: PPUSH
25227: LD_VAR 0 8
25231: PPUSH
25232: CALL_OW 488
25236: NOT
25237: IFFALSE 25241
// continue ;
25239: GO 25173
// if HexInfo ( _x , _y ) = 0 then
25241: LD_VAR 0 7
25245: PPUSH
25246: LD_VAR 0 8
25250: PPUSH
25251: CALL_OW 428
25255: PUSH
25256: LD_INT 0
25258: EQUAL
25259: IFFALSE 25284
// begin ComMoveXY ( unit , _x , _y ) ;
25261: LD_VAR 0 1
25265: PPUSH
25266: LD_VAR 0 7
25270: PPUSH
25271: LD_VAR 0 8
25275: PPUSH
25276: CALL_OW 111
// exit ;
25280: POP
25281: POP
25282: GO 25288
// end ; end ;
25284: GO 25173
25286: POP
25287: POP
// end ;
25288: LD_VAR 0 3
25292: RET
// export function ScanBase ( side , base_area ) ; begin
25293: LD_INT 0
25295: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_VAR 0 2
25305: PPUSH
25306: LD_INT 81
25308: PUSH
25309: LD_VAR 0 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: ST_TO_ADDR
// end ;
25323: LD_VAR 0 3
25327: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25328: LD_INT 0
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
// result := false ;
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_INT 0
25341: ST_TO_ADDR
// side := GetSide ( unit ) ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 255
25356: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25357: LD_ADDR_VAR 0 4
25361: PUSH
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 248
25371: ST_TO_ADDR
// case nat of 1 :
25372: LD_VAR 0 4
25376: PUSH
25377: LD_INT 1
25379: DOUBLE
25380: EQUAL
25381: IFTRUE 25385
25383: GO 25396
25385: POP
// tech := tech_lassight ; 2 :
25386: LD_ADDR_VAR 0 5
25390: PUSH
25391: LD_INT 12
25393: ST_TO_ADDR
25394: GO 25435
25396: LD_INT 2
25398: DOUBLE
25399: EQUAL
25400: IFTRUE 25404
25402: GO 25415
25404: POP
// tech := tech_mortar ; 3 :
25405: LD_ADDR_VAR 0 5
25409: PUSH
25410: LD_INT 41
25412: ST_TO_ADDR
25413: GO 25435
25415: LD_INT 3
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25434
25423: POP
// tech := tech_bazooka ; end ;
25424: LD_ADDR_VAR 0 5
25428: PUSH
25429: LD_INT 44
25431: ST_TO_ADDR
25432: GO 25435
25434: POP
// if Researched ( side , tech ) then
25435: LD_VAR 0 3
25439: PPUSH
25440: LD_VAR 0 5
25444: PPUSH
25445: CALL_OW 325
25449: IFFALSE 25476
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25451: LD_ADDR_VAR 0 2
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: LD_INT 8
25461: PUSH
25462: LD_INT 9
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_VAR 0 4
25474: ARRAY
25475: ST_TO_ADDR
// end ;
25476: LD_VAR 0 2
25480: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25481: LD_INT 0
25483: PPUSH
25484: PPUSH
25485: PPUSH
// if not mines then
25486: LD_VAR 0 2
25490: NOT
25491: IFFALSE 25495
// exit ;
25493: GO 25639
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25495: LD_ADDR_VAR 0 5
25499: PUSH
25500: LD_INT 81
25502: PUSH
25503: LD_VAR 0 1
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 3
25514: PUSH
25515: LD_INT 21
25517: PUSH
25518: LD_INT 3
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 69
25537: ST_TO_ADDR
// for i in mines do
25538: LD_ADDR_VAR 0 4
25542: PUSH
25543: LD_VAR 0 2
25547: PUSH
25548: FOR_IN
25549: IFFALSE 25637
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25551: LD_VAR 0 4
25555: PUSH
25556: LD_INT 1
25558: ARRAY
25559: PPUSH
25560: LD_VAR 0 4
25564: PUSH
25565: LD_INT 2
25567: ARRAY
25568: PPUSH
25569: CALL_OW 458
25573: NOT
25574: IFFALSE 25578
// continue ;
25576: GO 25548
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25578: LD_VAR 0 4
25582: PUSH
25583: LD_INT 1
25585: ARRAY
25586: PPUSH
25587: LD_VAR 0 4
25591: PUSH
25592: LD_INT 2
25594: ARRAY
25595: PPUSH
25596: CALL_OW 428
25600: PUSH
25601: LD_VAR 0 5
25605: IN
25606: IFFALSE 25635
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25608: LD_VAR 0 4
25612: PUSH
25613: LD_INT 1
25615: ARRAY
25616: PPUSH
25617: LD_VAR 0 4
25621: PUSH
25622: LD_INT 2
25624: ARRAY
25625: PPUSH
25626: LD_VAR 0 1
25630: PPUSH
25631: CALL_OW 456
// end ;
25635: GO 25548
25637: POP
25638: POP
// end ;
25639: LD_VAR 0 3
25643: RET
// export function Count ( array ) ; begin
25644: LD_INT 0
25646: PPUSH
// result := array + 0 ;
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: LD_VAR 0 1
25656: PUSH
25657: LD_INT 0
25659: PLUS
25660: ST_TO_ADDR
// end ;
25661: LD_VAR 0 2
25665: RET
// export function IsEmpty ( building ) ; begin
25666: LD_INT 0
25668: PPUSH
// if not building then
25669: LD_VAR 0 1
25673: NOT
25674: IFFALSE 25678
// exit ;
25676: GO 25721
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25678: LD_ADDR_VAR 0 2
25682: PUSH
25683: LD_VAR 0 1
25687: PUSH
25688: LD_INT 22
25690: PUSH
25691: LD_VAR 0 1
25695: PPUSH
25696: CALL_OW 255
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 58
25707: PUSH
25708: EMPTY
25709: LIST
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PPUSH
25715: CALL_OW 69
25719: IN
25720: ST_TO_ADDR
// end ;
25721: LD_VAR 0 2
25725: RET
// export function IsNotFull ( building ) ; var places ; begin
25726: LD_INT 0
25728: PPUSH
25729: PPUSH
// if not building then
25730: LD_VAR 0 1
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 25767
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25739: LD_ADDR_VAR 0 2
25743: PUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: LD_INT 3
25751: PUSH
25752: LD_INT 62
25754: PUSH
25755: EMPTY
25756: LIST
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PPUSH
25762: CALL_OW 72
25766: ST_TO_ADDR
// end ;
25767: LD_VAR 0 2
25771: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
// tmp := [ ] ;
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: EMPTY
25784: ST_TO_ADDR
// list := [ ] ;
25785: LD_ADDR_VAR 0 5
25789: PUSH
25790: EMPTY
25791: ST_TO_ADDR
// for i = 16 to 25 do
25792: LD_ADDR_VAR 0 4
25796: PUSH
25797: DOUBLE
25798: LD_INT 16
25800: DEC
25801: ST_TO_ADDR
25802: LD_INT 25
25804: PUSH
25805: FOR_TO
25806: IFFALSE 25879
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_VAR 0 3
25817: PUSH
25818: LD_INT 22
25820: PUSH
25821: LD_VAR 0 1
25825: PPUSH
25826: CALL_OW 255
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 91
25837: PUSH
25838: LD_VAR 0 1
25842: PUSH
25843: LD_INT 6
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 30
25853: PUSH
25854: LD_VAR 0 4
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: PPUSH
25871: CALL_OW 69
25875: ADD
25876: ST_TO_ADDR
25877: GO 25805
25879: POP
25880: POP
// for i = 1 to tmp do
25881: LD_ADDR_VAR 0 4
25885: PUSH
25886: DOUBLE
25887: LD_INT 1
25889: DEC
25890: ST_TO_ADDR
25891: LD_VAR 0 3
25895: PUSH
25896: FOR_TO
25897: IFFALSE 25985
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25899: LD_ADDR_VAR 0 5
25903: PUSH
25904: LD_VAR 0 5
25908: PUSH
25909: LD_VAR 0 3
25913: PUSH
25914: LD_VAR 0 4
25918: ARRAY
25919: PPUSH
25920: CALL_OW 266
25924: PUSH
25925: LD_VAR 0 3
25929: PUSH
25930: LD_VAR 0 4
25934: ARRAY
25935: PPUSH
25936: CALL_OW 250
25940: PUSH
25941: LD_VAR 0 3
25945: PUSH
25946: LD_VAR 0 4
25950: ARRAY
25951: PPUSH
25952: CALL_OW 251
25956: PUSH
25957: LD_VAR 0 3
25961: PUSH
25962: LD_VAR 0 4
25966: ARRAY
25967: PPUSH
25968: CALL_OW 254
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: ADD
25982: ST_TO_ADDR
25983: GO 25896
25985: POP
25986: POP
// result := list ;
25987: LD_ADDR_VAR 0 2
25991: PUSH
25992: LD_VAR 0 5
25996: ST_TO_ADDR
// end ;
25997: LD_VAR 0 2
26001: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26002: LD_INT 0
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
// if not factory then
26011: LD_VAR 0 1
26015: NOT
26016: IFFALSE 26020
// exit ;
26018: GO 26613
// if control = control_apeman then
26020: LD_VAR 0 4
26024: PUSH
26025: LD_INT 5
26027: EQUAL
26028: IFFALSE 26137
// begin tmp := UnitsInside ( factory ) ;
26030: LD_ADDR_VAR 0 8
26034: PUSH
26035: LD_VAR 0 1
26039: PPUSH
26040: CALL_OW 313
26044: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26045: LD_VAR 0 8
26049: PPUSH
26050: LD_INT 25
26052: PUSH
26053: LD_INT 12
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PPUSH
26060: CALL_OW 72
26064: NOT
26065: IFFALSE 26075
// control := control_manual ;
26067: LD_ADDR_VAR 0 4
26071: PUSH
26072: LD_INT 1
26074: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26075: LD_ADDR_VAR 0 8
26079: PUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL 25772 0 1
26089: ST_TO_ADDR
// if tmp then
26090: LD_VAR 0 8
26094: IFFALSE 26137
// begin for i in tmp do
26096: LD_ADDR_VAR 0 7
26100: PUSH
26101: LD_VAR 0 8
26105: PUSH
26106: FOR_IN
26107: IFFALSE 26135
// if i [ 1 ] = b_ext_radio then
26109: LD_VAR 0 7
26113: PUSH
26114: LD_INT 1
26116: ARRAY
26117: PUSH
26118: LD_INT 22
26120: EQUAL
26121: IFFALSE 26133
// begin control := control_remote ;
26123: LD_ADDR_VAR 0 4
26127: PUSH
26128: LD_INT 2
26130: ST_TO_ADDR
// break ;
26131: GO 26135
// end ;
26133: GO 26106
26135: POP
26136: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26137: LD_VAR 0 1
26141: PPUSH
26142: LD_VAR 0 2
26146: PPUSH
26147: LD_VAR 0 3
26151: PPUSH
26152: LD_VAR 0 4
26156: PPUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: CALL_OW 448
26166: IFFALSE 26201
// begin result := [ chassis , engine , control , weapon ] ;
26168: LD_ADDR_VAR 0 6
26172: PUSH
26173: LD_VAR 0 2
26177: PUSH
26178: LD_VAR 0 3
26182: PUSH
26183: LD_VAR 0 4
26187: PUSH
26188: LD_VAR 0 5
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: ST_TO_ADDR
// exit ;
26199: GO 26613
// end ; _chassis := AvailableChassisList ( factory ) ;
26201: LD_ADDR_VAR 0 9
26205: PUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 475
26215: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26216: LD_ADDR_VAR 0 11
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 476
26230: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26231: LD_ADDR_VAR 0 12
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 477
26245: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26246: LD_ADDR_VAR 0 10
26250: PUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 478
26260: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26261: LD_VAR 0 9
26265: NOT
26266: PUSH
26267: LD_VAR 0 11
26271: NOT
26272: OR
26273: PUSH
26274: LD_VAR 0 12
26278: NOT
26279: OR
26280: PUSH
26281: LD_VAR 0 10
26285: NOT
26286: OR
26287: IFFALSE 26322
// begin result := [ chassis , engine , control , weapon ] ;
26289: LD_ADDR_VAR 0 6
26293: PUSH
26294: LD_VAR 0 2
26298: PUSH
26299: LD_VAR 0 3
26303: PUSH
26304: LD_VAR 0 4
26308: PUSH
26309: LD_VAR 0 5
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: ST_TO_ADDR
// exit ;
26320: GO 26613
// end ; if not chassis in _chassis then
26322: LD_VAR 0 2
26326: PUSH
26327: LD_VAR 0 9
26331: IN
26332: NOT
26333: IFFALSE 26359
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26335: LD_ADDR_VAR 0 2
26339: PUSH
26340: LD_VAR 0 9
26344: PUSH
26345: LD_INT 1
26347: PPUSH
26348: LD_VAR 0 9
26352: PPUSH
26353: CALL_OW 12
26357: ARRAY
26358: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26359: LD_VAR 0 2
26363: PPUSH
26364: LD_VAR 0 3
26368: PPUSH
26369: CALL 26618 0 2
26373: NOT
26374: IFFALSE 26433
// repeat engine := _engine [ 1 ] ;
26376: LD_ADDR_VAR 0 3
26380: PUSH
26381: LD_VAR 0 11
26385: PUSH
26386: LD_INT 1
26388: ARRAY
26389: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26390: LD_ADDR_VAR 0 11
26394: PUSH
26395: LD_VAR 0 11
26399: PPUSH
26400: LD_INT 1
26402: PPUSH
26403: CALL_OW 3
26407: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26408: LD_VAR 0 2
26412: PPUSH
26413: LD_VAR 0 3
26417: PPUSH
26418: CALL 26618 0 2
26422: PUSH
26423: LD_VAR 0 11
26427: PUSH
26428: EMPTY
26429: EQUAL
26430: OR
26431: IFFALSE 26376
// if not control in _control then
26433: LD_VAR 0 4
26437: PUSH
26438: LD_VAR 0 12
26442: IN
26443: NOT
26444: IFFALSE 26470
// control := _control [ rand ( 1 , _control ) ] ;
26446: LD_ADDR_VAR 0 4
26450: PUSH
26451: LD_VAR 0 12
26455: PUSH
26456: LD_INT 1
26458: PPUSH
26459: LD_VAR 0 12
26463: PPUSH
26464: CALL_OW 12
26468: ARRAY
26469: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26470: LD_VAR 0 2
26474: PPUSH
26475: LD_VAR 0 5
26479: PPUSH
26480: CALL 26838 0 2
26484: NOT
26485: IFFALSE 26544
// repeat weapon := _weapon [ 1 ] ;
26487: LD_ADDR_VAR 0 5
26491: PUSH
26492: LD_VAR 0 10
26496: PUSH
26497: LD_INT 1
26499: ARRAY
26500: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26501: LD_ADDR_VAR 0 10
26505: PUSH
26506: LD_VAR 0 10
26510: PPUSH
26511: LD_INT 1
26513: PPUSH
26514: CALL_OW 3
26518: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26519: LD_VAR 0 2
26523: PPUSH
26524: LD_VAR 0 5
26528: PPUSH
26529: CALL 26838 0 2
26533: PUSH
26534: LD_VAR 0 10
26538: PUSH
26539: EMPTY
26540: EQUAL
26541: OR
26542: IFFALSE 26487
// result := [ ] ;
26544: LD_ADDR_VAR 0 6
26548: PUSH
26549: EMPTY
26550: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26551: LD_VAR 0 1
26555: PPUSH
26556: LD_VAR 0 2
26560: PPUSH
26561: LD_VAR 0 3
26565: PPUSH
26566: LD_VAR 0 4
26570: PPUSH
26571: LD_VAR 0 5
26575: PPUSH
26576: CALL_OW 448
26580: IFFALSE 26613
// result := [ chassis , engine , control , weapon ] ;
26582: LD_ADDR_VAR 0 6
26586: PUSH
26587: LD_VAR 0 2
26591: PUSH
26592: LD_VAR 0 3
26596: PUSH
26597: LD_VAR 0 4
26601: PUSH
26602: LD_VAR 0 5
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// end ;
26613: LD_VAR 0 6
26617: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26618: LD_INT 0
26620: PPUSH
// if not chassis or not engine then
26621: LD_VAR 0 1
26625: NOT
26626: PUSH
26627: LD_VAR 0 2
26631: NOT
26632: OR
26633: IFFALSE 26637
// exit ;
26635: GO 26833
// case engine of engine_solar :
26637: LD_VAR 0 2
26641: PUSH
26642: LD_INT 2
26644: DOUBLE
26645: EQUAL
26646: IFTRUE 26650
26648: GO 26688
26650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: LD_INT 11
26658: PUSH
26659: LD_INT 12
26661: PUSH
26662: LD_INT 13
26664: PUSH
26665: LD_INT 14
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 2
26673: PUSH
26674: LD_INT 3
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: ST_TO_ADDR
26686: GO 26817
26688: LD_INT 1
26690: DOUBLE
26691: EQUAL
26692: IFTRUE 26696
26694: GO 26758
26696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26697: LD_ADDR_VAR 0 3
26701: PUSH
26702: LD_INT 11
26704: PUSH
26705: LD_INT 12
26707: PUSH
26708: LD_INT 13
26710: PUSH
26711: LD_INT 14
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: LD_INT 4
26725: PUSH
26726: LD_INT 5
26728: PUSH
26729: LD_INT 21
26731: PUSH
26732: LD_INT 23
26734: PUSH
26735: LD_INT 22
26737: PUSH
26738: LD_INT 24
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
26756: GO 26817
26758: LD_INT 3
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26816
26766: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: LD_INT 13
26774: PUSH
26775: LD_INT 14
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: LD_INT 3
26783: PUSH
26784: LD_INT 4
26786: PUSH
26787: LD_INT 5
26789: PUSH
26790: LD_INT 21
26792: PUSH
26793: LD_INT 22
26795: PUSH
26796: LD_INT 23
26798: PUSH
26799: LD_INT 24
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: ST_TO_ADDR
26814: GO 26817
26816: POP
// result := ( chassis in result ) ;
26817: LD_ADDR_VAR 0 3
26821: PUSH
26822: LD_VAR 0 1
26826: PUSH
26827: LD_VAR 0 3
26831: IN
26832: ST_TO_ADDR
// end ;
26833: LD_VAR 0 3
26837: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26838: LD_INT 0
26840: PPUSH
// if not chassis or not weapon then
26841: LD_VAR 0 1
26845: NOT
26846: PUSH
26847: LD_VAR 0 2
26851: NOT
26852: OR
26853: IFFALSE 26857
// exit ;
26855: GO 27917
// case weapon of us_machine_gun :
26857: LD_VAR 0 2
26861: PUSH
26862: LD_INT 2
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 26900
26870: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 3
26884: PUSH
26885: LD_INT 4
26887: PUSH
26888: LD_INT 5
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
26898: GO 27901
26900: LD_INT 3
26902: DOUBLE
26903: EQUAL
26904: IFTRUE 26908
26906: GO 26938
26908: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26909: LD_ADDR_VAR 0 3
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: LD_INT 3
26922: PUSH
26923: LD_INT 4
26925: PUSH
26926: LD_INT 5
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: ST_TO_ADDR
26936: GO 27901
26938: LD_INT 11
26940: DOUBLE
26941: EQUAL
26942: IFTRUE 26946
26944: GO 26976
26946: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26947: LD_ADDR_VAR 0 3
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 3
26960: PUSH
26961: LD_INT 4
26963: PUSH
26964: LD_INT 5
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: ST_TO_ADDR
26974: GO 27901
26976: LD_INT 4
26978: DOUBLE
26979: EQUAL
26980: IFTRUE 26984
26982: GO 27010
26984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26985: LD_ADDR_VAR 0 3
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: LD_INT 3
26995: PUSH
26996: LD_INT 4
26998: PUSH
26999: LD_INT 5
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
27008: GO 27901
27010: LD_INT 5
27012: DOUBLE
27013: EQUAL
27014: IFTRUE 27018
27016: GO 27044
27018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27019: LD_ADDR_VAR 0 3
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 4
27032: PUSH
27033: LD_INT 5
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: ST_TO_ADDR
27042: GO 27901
27044: LD_INT 9
27046: DOUBLE
27047: EQUAL
27048: IFTRUE 27052
27050: GO 27078
27052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: LD_INT 4
27066: PUSH
27067: LD_INT 5
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: ST_TO_ADDR
27076: GO 27901
27078: LD_INT 7
27080: DOUBLE
27081: EQUAL
27082: IFTRUE 27086
27084: GO 27112
27086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27087: LD_ADDR_VAR 0 3
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: LD_INT 4
27100: PUSH
27101: LD_INT 5
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
27110: GO 27901
27112: LD_INT 12
27114: DOUBLE
27115: EQUAL
27116: IFTRUE 27120
27118: GO 27146
27120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27121: LD_ADDR_VAR 0 3
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: LD_INT 3
27131: PUSH
27132: LD_INT 4
27134: PUSH
27135: LD_INT 5
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: ST_TO_ADDR
27144: GO 27901
27146: LD_INT 13
27148: DOUBLE
27149: EQUAL
27150: IFTRUE 27154
27152: GO 27180
27154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27155: LD_ADDR_VAR 0 3
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: LD_INT 3
27165: PUSH
27166: LD_INT 4
27168: PUSH
27169: LD_INT 5
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: ST_TO_ADDR
27178: GO 27901
27180: LD_INT 14
27182: DOUBLE
27183: EQUAL
27184: IFTRUE 27188
27186: GO 27206
27188: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27189: LD_ADDR_VAR 0 3
27193: PUSH
27194: LD_INT 4
27196: PUSH
27197: LD_INT 5
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: ST_TO_ADDR
27204: GO 27901
27206: LD_INT 6
27208: DOUBLE
27209: EQUAL
27210: IFTRUE 27214
27212: GO 27232
27214: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27215: LD_ADDR_VAR 0 3
27219: PUSH
27220: LD_INT 4
27222: PUSH
27223: LD_INT 5
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: ST_TO_ADDR
27230: GO 27901
27232: LD_INT 10
27234: DOUBLE
27235: EQUAL
27236: IFTRUE 27240
27238: GO 27258
27240: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: LD_INT 4
27248: PUSH
27249: LD_INT 5
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: ST_TO_ADDR
27256: GO 27901
27258: LD_INT 22
27260: DOUBLE
27261: EQUAL
27262: IFTRUE 27266
27264: GO 27292
27266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27267: LD_ADDR_VAR 0 3
27271: PUSH
27272: LD_INT 11
27274: PUSH
27275: LD_INT 12
27277: PUSH
27278: LD_INT 13
27280: PUSH
27281: LD_INT 14
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: ST_TO_ADDR
27290: GO 27901
27292: LD_INT 23
27294: DOUBLE
27295: EQUAL
27296: IFTRUE 27300
27298: GO 27326
27300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27301: LD_ADDR_VAR 0 3
27305: PUSH
27306: LD_INT 11
27308: PUSH
27309: LD_INT 12
27311: PUSH
27312: LD_INT 13
27314: PUSH
27315: LD_INT 14
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
27324: GO 27901
27326: LD_INT 24
27328: DOUBLE
27329: EQUAL
27330: IFTRUE 27334
27332: GO 27360
27334: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27335: LD_ADDR_VAR 0 3
27339: PUSH
27340: LD_INT 11
27342: PUSH
27343: LD_INT 12
27345: PUSH
27346: LD_INT 13
27348: PUSH
27349: LD_INT 14
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: ST_TO_ADDR
27358: GO 27901
27360: LD_INT 30
27362: DOUBLE
27363: EQUAL
27364: IFTRUE 27368
27366: GO 27394
27368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27369: LD_ADDR_VAR 0 3
27373: PUSH
27374: LD_INT 11
27376: PUSH
27377: LD_INT 12
27379: PUSH
27380: LD_INT 13
27382: PUSH
27383: LD_INT 14
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: ST_TO_ADDR
27392: GO 27901
27394: LD_INT 25
27396: DOUBLE
27397: EQUAL
27398: IFTRUE 27402
27400: GO 27420
27402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27403: LD_ADDR_VAR 0 3
27407: PUSH
27408: LD_INT 13
27410: PUSH
27411: LD_INT 14
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: ST_TO_ADDR
27418: GO 27901
27420: LD_INT 27
27422: DOUBLE
27423: EQUAL
27424: IFTRUE 27428
27426: GO 27446
27428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27429: LD_ADDR_VAR 0 3
27433: PUSH
27434: LD_INT 13
27436: PUSH
27437: LD_INT 14
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: ST_TO_ADDR
27444: GO 27901
27446: LD_INT 92
27448: DOUBLE
27449: EQUAL
27450: IFTRUE 27454
27452: GO 27480
27454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27455: LD_ADDR_VAR 0 3
27459: PUSH
27460: LD_INT 11
27462: PUSH
27463: LD_INT 12
27465: PUSH
27466: LD_INT 13
27468: PUSH
27469: LD_INT 14
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
27478: GO 27901
27480: LD_INT 28
27482: DOUBLE
27483: EQUAL
27484: IFTRUE 27488
27486: GO 27506
27488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27489: LD_ADDR_VAR 0 3
27493: PUSH
27494: LD_INT 13
27496: PUSH
27497: LD_INT 14
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: ST_TO_ADDR
27504: GO 27901
27506: LD_INT 29
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27532
27514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_INT 13
27522: PUSH
27523: LD_INT 14
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: ST_TO_ADDR
27530: GO 27901
27532: LD_INT 31
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27540
27538: GO 27558
27540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_INT 13
27548: PUSH
27549: LD_INT 14
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: ST_TO_ADDR
27556: GO 27901
27558: LD_INT 26
27560: DOUBLE
27561: EQUAL
27562: IFTRUE 27566
27564: GO 27584
27566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27567: LD_ADDR_VAR 0 3
27571: PUSH
27572: LD_INT 13
27574: PUSH
27575: LD_INT 14
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 27901
27584: LD_INT 42
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27618
27592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 21
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_INT 23
27606: PUSH
27607: LD_INT 24
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
27616: GO 27901
27618: LD_INT 43
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27652
27626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27627: LD_ADDR_VAR 0 3
27631: PUSH
27632: LD_INT 21
27634: PUSH
27635: LD_INT 22
27637: PUSH
27638: LD_INT 23
27640: PUSH
27641: LD_INT 24
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: ST_TO_ADDR
27650: GO 27901
27652: LD_INT 44
27654: DOUBLE
27655: EQUAL
27656: IFTRUE 27660
27658: GO 27686
27660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_INT 21
27668: PUSH
27669: LD_INT 22
27671: PUSH
27672: LD_INT 23
27674: PUSH
27675: LD_INT 24
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: ST_TO_ADDR
27684: GO 27901
27686: LD_INT 45
27688: DOUBLE
27689: EQUAL
27690: IFTRUE 27694
27692: GO 27720
27694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27695: LD_ADDR_VAR 0 3
27699: PUSH
27700: LD_INT 21
27702: PUSH
27703: LD_INT 22
27705: PUSH
27706: LD_INT 23
27708: PUSH
27709: LD_INT 24
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
27718: GO 27901
27720: LD_INT 49
27722: DOUBLE
27723: EQUAL
27724: IFTRUE 27728
27726: GO 27754
27728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27729: LD_ADDR_VAR 0 3
27733: PUSH
27734: LD_INT 21
27736: PUSH
27737: LD_INT 22
27739: PUSH
27740: LD_INT 23
27742: PUSH
27743: LD_INT 24
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
27752: GO 27901
27754: LD_INT 51
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27762
27760: GO 27788
27762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27763: LD_ADDR_VAR 0 3
27767: PUSH
27768: LD_INT 21
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_INT 23
27776: PUSH
27777: LD_INT 24
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: ST_TO_ADDR
27786: GO 27901
27788: LD_INT 52
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27796
27794: GO 27822
27796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27797: LD_ADDR_VAR 0 3
27801: PUSH
27802: LD_INT 21
27804: PUSH
27805: LD_INT 22
27807: PUSH
27808: LD_INT 23
27810: PUSH
27811: LD_INT 24
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
27820: GO 27901
27822: LD_INT 53
27824: DOUBLE
27825: EQUAL
27826: IFTRUE 27830
27828: GO 27848
27830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27831: LD_ADDR_VAR 0 3
27835: PUSH
27836: LD_INT 23
27838: PUSH
27839: LD_INT 24
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: ST_TO_ADDR
27846: GO 27901
27848: LD_INT 46
27850: DOUBLE
27851: EQUAL
27852: IFTRUE 27856
27854: GO 27874
27856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27857: LD_ADDR_VAR 0 3
27861: PUSH
27862: LD_INT 23
27864: PUSH
27865: LD_INT 24
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: ST_TO_ADDR
27872: GO 27901
27874: LD_INT 47
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27900
27882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 23
27890: PUSH
27891: LD_INT 24
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: ST_TO_ADDR
27898: GO 27901
27900: POP
// result := ( chassis in result ) ;
27901: LD_ADDR_VAR 0 3
27905: PUSH
27906: LD_VAR 0 1
27910: PUSH
27911: LD_VAR 0 3
27915: IN
27916: ST_TO_ADDR
// end ;
27917: LD_VAR 0 3
27921: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27922: LD_INT 0
27924: PPUSH
27925: PPUSH
27926: PPUSH
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
// result := array ;
27931: LD_ADDR_VAR 0 5
27935: PUSH
27936: LD_VAR 0 1
27940: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27941: LD_VAR 0 1
27945: NOT
27946: PUSH
27947: LD_VAR 0 2
27951: NOT
27952: OR
27953: PUSH
27954: LD_VAR 0 3
27958: NOT
27959: OR
27960: PUSH
27961: LD_VAR 0 2
27965: PUSH
27966: LD_VAR 0 1
27970: GREATER
27971: OR
27972: PUSH
27973: LD_VAR 0 3
27977: PUSH
27978: LD_VAR 0 1
27982: GREATER
27983: OR
27984: IFFALSE 27988
// exit ;
27986: GO 28284
// if direction then
27988: LD_VAR 0 4
27992: IFFALSE 28056
// begin d := 1 ;
27994: LD_ADDR_VAR 0 9
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// if i_from > i_to then
28002: LD_VAR 0 2
28006: PUSH
28007: LD_VAR 0 3
28011: GREATER
28012: IFFALSE 28038
// length := ( array - i_from ) + i_to else
28014: LD_ADDR_VAR 0 11
28018: PUSH
28019: LD_VAR 0 1
28023: PUSH
28024: LD_VAR 0 2
28028: MINUS
28029: PUSH
28030: LD_VAR 0 3
28034: PLUS
28035: ST_TO_ADDR
28036: GO 28054
// length := i_to - i_from ;
28038: LD_ADDR_VAR 0 11
28042: PUSH
28043: LD_VAR 0 3
28047: PUSH
28048: LD_VAR 0 2
28052: MINUS
28053: ST_TO_ADDR
// end else
28054: GO 28117
// begin d := - 1 ;
28056: LD_ADDR_VAR 0 9
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: ST_TO_ADDR
// if i_from > i_to then
28065: LD_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: GREATER
28075: IFFALSE 28095
// length := i_from - i_to else
28077: LD_ADDR_VAR 0 11
28081: PUSH
28082: LD_VAR 0 2
28086: PUSH
28087: LD_VAR 0 3
28091: MINUS
28092: ST_TO_ADDR
28093: GO 28117
// length := ( array - i_to ) + i_from ;
28095: LD_ADDR_VAR 0 11
28099: PUSH
28100: LD_VAR 0 1
28104: PUSH
28105: LD_VAR 0 3
28109: MINUS
28110: PUSH
28111: LD_VAR 0 2
28115: PLUS
28116: ST_TO_ADDR
// end ; if not length then
28117: LD_VAR 0 11
28121: NOT
28122: IFFALSE 28126
// exit ;
28124: GO 28284
// tmp := array ;
28126: LD_ADDR_VAR 0 10
28130: PUSH
28131: LD_VAR 0 1
28135: ST_TO_ADDR
// for i = 1 to length do
28136: LD_ADDR_VAR 0 6
28140: PUSH
28141: DOUBLE
28142: LD_INT 1
28144: DEC
28145: ST_TO_ADDR
28146: LD_VAR 0 11
28150: PUSH
28151: FOR_TO
28152: IFFALSE 28272
// begin for j = 1 to array do
28154: LD_ADDR_VAR 0 7
28158: PUSH
28159: DOUBLE
28160: LD_INT 1
28162: DEC
28163: ST_TO_ADDR
28164: LD_VAR 0 1
28168: PUSH
28169: FOR_TO
28170: IFFALSE 28258
// begin k := j + d ;
28172: LD_ADDR_VAR 0 8
28176: PUSH
28177: LD_VAR 0 7
28181: PUSH
28182: LD_VAR 0 9
28186: PLUS
28187: ST_TO_ADDR
// if k > array then
28188: LD_VAR 0 8
28192: PUSH
28193: LD_VAR 0 1
28197: GREATER
28198: IFFALSE 28208
// k := 1 ;
28200: LD_ADDR_VAR 0 8
28204: PUSH
28205: LD_INT 1
28207: ST_TO_ADDR
// if not k then
28208: LD_VAR 0 8
28212: NOT
28213: IFFALSE 28225
// k := array ;
28215: LD_ADDR_VAR 0 8
28219: PUSH
28220: LD_VAR 0 1
28224: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28225: LD_ADDR_VAR 0 10
28229: PUSH
28230: LD_VAR 0 10
28234: PPUSH
28235: LD_VAR 0 8
28239: PPUSH
28240: LD_VAR 0 1
28244: PUSH
28245: LD_VAR 0 7
28249: ARRAY
28250: PPUSH
28251: CALL_OW 1
28255: ST_TO_ADDR
// end ;
28256: GO 28169
28258: POP
28259: POP
// array := tmp ;
28260: LD_ADDR_VAR 0 1
28264: PUSH
28265: LD_VAR 0 10
28269: ST_TO_ADDR
// end ;
28270: GO 28151
28272: POP
28273: POP
// result := array ;
28274: LD_ADDR_VAR 0 5
28278: PUSH
28279: LD_VAR 0 1
28283: ST_TO_ADDR
// end ;
28284: LD_VAR 0 5
28288: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28289: LD_INT 0
28291: PPUSH
28292: PPUSH
// result := 0 ;
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 0
28300: ST_TO_ADDR
// if not array or not value in array then
28301: LD_VAR 0 1
28305: NOT
28306: PUSH
28307: LD_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: IN
28317: NOT
28318: OR
28319: IFFALSE 28323
// exit ;
28321: GO 28377
// for i = 1 to array do
28323: LD_ADDR_VAR 0 4
28327: PUSH
28328: DOUBLE
28329: LD_INT 1
28331: DEC
28332: ST_TO_ADDR
28333: LD_VAR 0 1
28337: PUSH
28338: FOR_TO
28339: IFFALSE 28375
// if value = array [ i ] then
28341: LD_VAR 0 2
28345: PUSH
28346: LD_VAR 0 1
28350: PUSH
28351: LD_VAR 0 4
28355: ARRAY
28356: EQUAL
28357: IFFALSE 28373
// begin result := i ;
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_VAR 0 4
28368: ST_TO_ADDR
// exit ;
28369: POP
28370: POP
28371: GO 28377
// end ;
28373: GO 28338
28375: POP
28376: POP
// end ;
28377: LD_VAR 0 3
28381: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28382: LD_INT 0
28384: PPUSH
// vc_chassis := chassis ;
28385: LD_ADDR_OWVAR 37
28389: PUSH
28390: LD_VAR 0 1
28394: ST_TO_ADDR
// vc_engine := engine ;
28395: LD_ADDR_OWVAR 39
28399: PUSH
28400: LD_VAR 0 2
28404: ST_TO_ADDR
// vc_control := control ;
28405: LD_ADDR_OWVAR 38
28409: PUSH
28410: LD_VAR 0 3
28414: ST_TO_ADDR
// vc_weapon := weapon ;
28415: LD_ADDR_OWVAR 40
28419: PUSH
28420: LD_VAR 0 4
28424: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28425: LD_ADDR_OWVAR 41
28429: PUSH
28430: LD_VAR 0 5
28434: ST_TO_ADDR
// end ;
28435: LD_VAR 0 6
28439: RET
// export function WantPlant ( unit ) ; var task ; begin
28440: LD_INT 0
28442: PPUSH
28443: PPUSH
// result := false ;
28444: LD_ADDR_VAR 0 2
28448: PUSH
28449: LD_INT 0
28451: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28452: LD_ADDR_VAR 0 3
28456: PUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 437
28466: ST_TO_ADDR
// if task then
28467: LD_VAR 0 3
28471: IFFALSE 28499
// if task [ 1 ] [ 1 ] = p then
28473: LD_VAR 0 3
28477: PUSH
28478: LD_INT 1
28480: ARRAY
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PUSH
28486: LD_STRING p
28488: EQUAL
28489: IFFALSE 28499
// result := true ;
28491: LD_ADDR_VAR 0 2
28495: PUSH
28496: LD_INT 1
28498: ST_TO_ADDR
// end ;
28499: LD_VAR 0 2
28503: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28504: LD_INT 0
28506: PPUSH
28507: PPUSH
28508: PPUSH
28509: PPUSH
// if pos < 1 then
28510: LD_VAR 0 2
28514: PUSH
28515: LD_INT 1
28517: LESS
28518: IFFALSE 28522
// exit ;
28520: GO 28825
// if pos = 1 then
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 1
28529: EQUAL
28530: IFFALSE 28563
// result := Replace ( arr , pos [ 1 ] , value ) else
28532: LD_ADDR_VAR 0 4
28536: PUSH
28537: LD_VAR 0 1
28541: PPUSH
28542: LD_VAR 0 2
28546: PUSH
28547: LD_INT 1
28549: ARRAY
28550: PPUSH
28551: LD_VAR 0 3
28555: PPUSH
28556: CALL_OW 1
28560: ST_TO_ADDR
28561: GO 28825
// begin tmp := arr ;
28563: LD_ADDR_VAR 0 6
28567: PUSH
28568: LD_VAR 0 1
28572: ST_TO_ADDR
// s_arr := [ tmp ] ;
28573: LD_ADDR_VAR 0 7
28577: PUSH
28578: LD_VAR 0 6
28582: PUSH
28583: EMPTY
28584: LIST
28585: ST_TO_ADDR
// for i = 1 to pos - 1 do
28586: LD_ADDR_VAR 0 5
28590: PUSH
28591: DOUBLE
28592: LD_INT 1
28594: DEC
28595: ST_TO_ADDR
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: MINUS
28604: PUSH
28605: FOR_TO
28606: IFFALSE 28651
// begin tmp := tmp [ pos [ i ] ] ;
28608: LD_ADDR_VAR 0 6
28612: PUSH
28613: LD_VAR 0 6
28617: PUSH
28618: LD_VAR 0 2
28622: PUSH
28623: LD_VAR 0 5
28627: ARRAY
28628: ARRAY
28629: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28630: LD_ADDR_VAR 0 7
28634: PUSH
28635: LD_VAR 0 7
28639: PUSH
28640: LD_VAR 0 6
28644: PUSH
28645: EMPTY
28646: LIST
28647: ADD
28648: ST_TO_ADDR
// end ;
28649: GO 28605
28651: POP
28652: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28653: LD_ADDR_VAR 0 6
28657: PUSH
28658: LD_VAR 0 6
28662: PPUSH
28663: LD_VAR 0 2
28667: PUSH
28668: LD_VAR 0 2
28672: ARRAY
28673: PPUSH
28674: LD_VAR 0 3
28678: PPUSH
28679: CALL_OW 1
28683: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28684: LD_ADDR_VAR 0 7
28688: PUSH
28689: LD_VAR 0 7
28693: PPUSH
28694: LD_VAR 0 7
28698: PPUSH
28699: LD_VAR 0 6
28703: PPUSH
28704: CALL_OW 1
28708: ST_TO_ADDR
// for i = s_arr downto 2 do
28709: LD_ADDR_VAR 0 5
28713: PUSH
28714: DOUBLE
28715: LD_VAR 0 7
28719: INC
28720: ST_TO_ADDR
28721: LD_INT 2
28723: PUSH
28724: FOR_DOWNTO
28725: IFFALSE 28809
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28727: LD_ADDR_VAR 0 6
28731: PUSH
28732: LD_VAR 0 7
28736: PUSH
28737: LD_VAR 0 5
28741: PUSH
28742: LD_INT 1
28744: MINUS
28745: ARRAY
28746: PPUSH
28747: LD_VAR 0 2
28751: PUSH
28752: LD_VAR 0 5
28756: PUSH
28757: LD_INT 1
28759: MINUS
28760: ARRAY
28761: PPUSH
28762: LD_VAR 0 7
28766: PUSH
28767: LD_VAR 0 5
28771: ARRAY
28772: PPUSH
28773: CALL_OW 1
28777: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28778: LD_ADDR_VAR 0 7
28782: PUSH
28783: LD_VAR 0 7
28787: PPUSH
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 1
28795: MINUS
28796: PPUSH
28797: LD_VAR 0 6
28801: PPUSH
28802: CALL_OW 1
28806: ST_TO_ADDR
// end ;
28807: GO 28724
28809: POP
28810: POP
// result := s_arr [ 1 ] ;
28811: LD_ADDR_VAR 0 4
28815: PUSH
28816: LD_VAR 0 7
28820: PUSH
28821: LD_INT 1
28823: ARRAY
28824: ST_TO_ADDR
// end ; end ;
28825: LD_VAR 0 4
28829: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
// if not list then
28834: LD_VAR 0 1
28838: NOT
28839: IFFALSE 28843
// exit ;
28841: GO 28934
// i := list [ pos1 ] ;
28843: LD_ADDR_VAR 0 5
28847: PUSH
28848: LD_VAR 0 1
28852: PUSH
28853: LD_VAR 0 2
28857: ARRAY
28858: ST_TO_ADDR
// if not i then
28859: LD_VAR 0 5
28863: NOT
28864: IFFALSE 28868
// exit ;
28866: GO 28934
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28868: LD_ADDR_VAR 0 1
28872: PUSH
28873: LD_VAR 0 1
28877: PPUSH
28878: LD_VAR 0 2
28882: PPUSH
28883: LD_VAR 0 1
28887: PUSH
28888: LD_VAR 0 3
28892: ARRAY
28893: PPUSH
28894: CALL_OW 1
28898: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28899: LD_ADDR_VAR 0 1
28903: PUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: LD_VAR 0 3
28913: PPUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: CALL_OW 1
28923: ST_TO_ADDR
// result := list ;
28924: LD_ADDR_VAR 0 4
28928: PUSH
28929: LD_VAR 0 1
28933: ST_TO_ADDR
// end ;
28934: LD_VAR 0 4
28938: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28939: LD_INT 0
28941: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28942: LD_ADDR_VAR 0 5
28946: PUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 250
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 251
28966: PPUSH
28967: LD_VAR 0 2
28971: PPUSH
28972: LD_VAR 0 3
28976: PPUSH
28977: LD_VAR 0 4
28981: PPUSH
28982: CALL 29360 0 5
28986: ST_TO_ADDR
// end ;
28987: LD_VAR 0 5
28991: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28992: LD_INT 0
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
// if not list or not unit then
28998: LD_VAR 0 2
29002: NOT
29003: PUSH
29004: LD_VAR 0 1
29008: NOT
29009: OR
29010: IFFALSE 29014
// exit ;
29012: GO 29355
// result := [ ] ;
29014: LD_ADDR_VAR 0 5
29018: PUSH
29019: EMPTY
29020: ST_TO_ADDR
// for i in list do
29021: LD_ADDR_VAR 0 6
29025: PUSH
29026: LD_VAR 0 2
29030: PUSH
29031: FOR_IN
29032: IFFALSE 29250
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29034: LD_ADDR_VAR 0 8
29038: PUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_VAR 0 6
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PPUSH
29053: LD_VAR 0 6
29057: PUSH
29058: LD_INT 2
29060: ARRAY
29061: PPUSH
29062: CALL_OW 297
29066: ST_TO_ADDR
// if not Count ( result ) then
29067: LD_VAR 0 5
29071: PPUSH
29072: CALL 25644 0 1
29076: NOT
29077: IFFALSE 29110
// begin result := Join ( result , [ i , tmp ] ) ;
29079: LD_ADDR_VAR 0 5
29083: PUSH
29084: LD_VAR 0 5
29088: PPUSH
29089: LD_VAR 0 6
29093: PUSH
29094: LD_VAR 0 8
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL 61233 0 2
29107: ST_TO_ADDR
// continue ;
29108: GO 29031
// end ; if result [ result ] [ 2 ] <= tmp then
29110: LD_VAR 0 5
29114: PUSH
29115: LD_VAR 0 5
29119: ARRAY
29120: PUSH
29121: LD_INT 2
29123: ARRAY
29124: PUSH
29125: LD_VAR 0 8
29129: LESSEQUAL
29130: IFFALSE 29163
// result := Join ( result , [ i , tmp ] ) else
29132: LD_ADDR_VAR 0 5
29136: PUSH
29137: LD_VAR 0 5
29141: PPUSH
29142: LD_VAR 0 6
29146: PUSH
29147: LD_VAR 0 8
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PPUSH
29156: CALL 61233 0 2
29160: ST_TO_ADDR
29161: GO 29248
// begin for j := 1 to Count ( result ) do
29163: LD_ADDR_VAR 0 7
29167: PUSH
29168: DOUBLE
29169: LD_INT 1
29171: DEC
29172: ST_TO_ADDR
29173: LD_VAR 0 5
29177: PPUSH
29178: CALL 25644 0 1
29182: PUSH
29183: FOR_TO
29184: IFFALSE 29246
// begin if tmp < result [ j ] [ 2 ] then
29186: LD_VAR 0 8
29190: PUSH
29191: LD_VAR 0 5
29195: PUSH
29196: LD_VAR 0 7
29200: ARRAY
29201: PUSH
29202: LD_INT 2
29204: ARRAY
29205: LESS
29206: IFFALSE 29244
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29208: LD_ADDR_VAR 0 5
29212: PUSH
29213: LD_VAR 0 5
29217: PPUSH
29218: LD_VAR 0 7
29222: PPUSH
29223: LD_VAR 0 6
29227: PUSH
29228: LD_VAR 0 8
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 2
29241: ST_TO_ADDR
// break ;
29242: GO 29246
// end ; end ;
29244: GO 29183
29246: POP
29247: POP
// end ; end ;
29248: GO 29031
29250: POP
29251: POP
// if result and not asc then
29252: LD_VAR 0 5
29256: PUSH
29257: LD_VAR 0 3
29261: NOT
29262: AND
29263: IFFALSE 29280
// result := ReverseArray ( result ) ;
29265: LD_ADDR_VAR 0 5
29269: PUSH
29270: LD_VAR 0 5
29274: PPUSH
29275: CALL 56520 0 1
29279: ST_TO_ADDR
// tmp := [ ] ;
29280: LD_ADDR_VAR 0 8
29284: PUSH
29285: EMPTY
29286: ST_TO_ADDR
// if mode then
29287: LD_VAR 0 4
29291: IFFALSE 29355
// begin for i := 1 to result do
29293: LD_ADDR_VAR 0 6
29297: PUSH
29298: DOUBLE
29299: LD_INT 1
29301: DEC
29302: ST_TO_ADDR
29303: LD_VAR 0 5
29307: PUSH
29308: FOR_TO
29309: IFFALSE 29343
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29311: LD_ADDR_VAR 0 8
29315: PUSH
29316: LD_VAR 0 8
29320: PPUSH
29321: LD_VAR 0 5
29325: PUSH
29326: LD_VAR 0 6
29330: ARRAY
29331: PUSH
29332: LD_INT 1
29334: ARRAY
29335: PPUSH
29336: CALL 61233 0 2
29340: ST_TO_ADDR
29341: GO 29308
29343: POP
29344: POP
// result := tmp ;
29345: LD_ADDR_VAR 0 5
29349: PUSH
29350: LD_VAR 0 8
29354: ST_TO_ADDR
// end ; end ;
29355: LD_VAR 0 5
29359: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
// if not list then
29366: LD_VAR 0 3
29370: NOT
29371: IFFALSE 29375
// exit ;
29373: GO 29763
// result := [ ] ;
29375: LD_ADDR_VAR 0 6
29379: PUSH
29380: EMPTY
29381: ST_TO_ADDR
// for i in list do
29382: LD_ADDR_VAR 0 7
29386: PUSH
29387: LD_VAR 0 3
29391: PUSH
29392: FOR_IN
29393: IFFALSE 29595
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29395: LD_ADDR_VAR 0 9
29399: PUSH
29400: LD_VAR 0 7
29404: PPUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: LD_VAR 0 2
29414: PPUSH
29415: CALL_OW 297
29419: ST_TO_ADDR
// if not result then
29420: LD_VAR 0 6
29424: NOT
29425: IFFALSE 29451
// result := [ [ i , tmp ] ] else
29427: LD_ADDR_VAR 0 6
29431: PUSH
29432: LD_VAR 0 7
29436: PUSH
29437: LD_VAR 0 9
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: ST_TO_ADDR
29449: GO 29593
// begin if result [ result ] [ 2 ] < tmp then
29451: LD_VAR 0 6
29455: PUSH
29456: LD_VAR 0 6
29460: ARRAY
29461: PUSH
29462: LD_INT 2
29464: ARRAY
29465: PUSH
29466: LD_VAR 0 9
29470: LESS
29471: IFFALSE 29513
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29473: LD_ADDR_VAR 0 6
29477: PUSH
29478: LD_VAR 0 6
29482: PPUSH
29483: LD_VAR 0 6
29487: PUSH
29488: LD_INT 1
29490: PLUS
29491: PPUSH
29492: LD_VAR 0 7
29496: PUSH
29497: LD_VAR 0 9
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PPUSH
29506: CALL_OW 2
29510: ST_TO_ADDR
29511: GO 29593
// for j = 1 to result do
29513: LD_ADDR_VAR 0 8
29517: PUSH
29518: DOUBLE
29519: LD_INT 1
29521: DEC
29522: ST_TO_ADDR
29523: LD_VAR 0 6
29527: PUSH
29528: FOR_TO
29529: IFFALSE 29591
// begin if tmp < result [ j ] [ 2 ] then
29531: LD_VAR 0 9
29535: PUSH
29536: LD_VAR 0 6
29540: PUSH
29541: LD_VAR 0 8
29545: ARRAY
29546: PUSH
29547: LD_INT 2
29549: ARRAY
29550: LESS
29551: IFFALSE 29589
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29553: LD_ADDR_VAR 0 6
29557: PUSH
29558: LD_VAR 0 6
29562: PPUSH
29563: LD_VAR 0 8
29567: PPUSH
29568: LD_VAR 0 7
29572: PUSH
29573: LD_VAR 0 9
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PPUSH
29582: CALL_OW 2
29586: ST_TO_ADDR
// break ;
29587: GO 29591
// end ; end ;
29589: GO 29528
29591: POP
29592: POP
// end ; end ;
29593: GO 29392
29595: POP
29596: POP
// if result and not asc then
29597: LD_VAR 0 6
29601: PUSH
29602: LD_VAR 0 4
29606: NOT
29607: AND
29608: IFFALSE 29683
// begin tmp := result ;
29610: LD_ADDR_VAR 0 9
29614: PUSH
29615: LD_VAR 0 6
29619: ST_TO_ADDR
// for i = tmp downto 1 do
29620: LD_ADDR_VAR 0 7
29624: PUSH
29625: DOUBLE
29626: LD_VAR 0 9
29630: INC
29631: ST_TO_ADDR
29632: LD_INT 1
29634: PUSH
29635: FOR_DOWNTO
29636: IFFALSE 29681
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29638: LD_ADDR_VAR 0 6
29642: PUSH
29643: LD_VAR 0 6
29647: PPUSH
29648: LD_VAR 0 9
29652: PUSH
29653: LD_VAR 0 7
29657: MINUS
29658: PUSH
29659: LD_INT 1
29661: PLUS
29662: PPUSH
29663: LD_VAR 0 9
29667: PUSH
29668: LD_VAR 0 7
29672: ARRAY
29673: PPUSH
29674: CALL_OW 1
29678: ST_TO_ADDR
29679: GO 29635
29681: POP
29682: POP
// end ; tmp := [ ] ;
29683: LD_ADDR_VAR 0 9
29687: PUSH
29688: EMPTY
29689: ST_TO_ADDR
// if mode then
29690: LD_VAR 0 5
29694: IFFALSE 29763
// begin for i = 1 to result do
29696: LD_ADDR_VAR 0 7
29700: PUSH
29701: DOUBLE
29702: LD_INT 1
29704: DEC
29705: ST_TO_ADDR
29706: LD_VAR 0 6
29710: PUSH
29711: FOR_TO
29712: IFFALSE 29751
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_VAR 0 9
29723: PPUSH
29724: LD_VAR 0 7
29728: PPUSH
29729: LD_VAR 0 6
29733: PUSH
29734: LD_VAR 0 7
29738: ARRAY
29739: PUSH
29740: LD_INT 1
29742: ARRAY
29743: PPUSH
29744: CALL_OW 1
29748: ST_TO_ADDR
29749: GO 29711
29751: POP
29752: POP
// result := tmp ;
29753: LD_ADDR_VAR 0 6
29757: PUSH
29758: LD_VAR 0 9
29762: ST_TO_ADDR
// end ; end ;
29763: LD_VAR 0 6
29767: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29768: LD_INT 0
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29776: LD_ADDR_VAR 0 5
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: ST_TO_ADDR
// if not x or not y then
29798: LD_VAR 0 2
29802: NOT
29803: PUSH
29804: LD_VAR 0 3
29808: NOT
29809: OR
29810: IFFALSE 29814
// exit ;
29812: GO 31464
// if not range then
29814: LD_VAR 0 4
29818: NOT
29819: IFFALSE 29829
// range := 10 ;
29821: LD_ADDR_VAR 0 4
29825: PUSH
29826: LD_INT 10
29828: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29829: LD_ADDR_VAR 0 8
29833: PUSH
29834: LD_INT 81
29836: PUSH
29837: LD_VAR 0 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 92
29848: PUSH
29849: LD_VAR 0 2
29853: PUSH
29854: LD_VAR 0 3
29858: PUSH
29859: LD_VAR 0 4
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 3
29872: PUSH
29873: LD_INT 21
29875: PUSH
29876: LD_INT 3
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: PPUSH
29892: CALL_OW 69
29896: ST_TO_ADDR
// if not tmp then
29897: LD_VAR 0 8
29901: NOT
29902: IFFALSE 29906
// exit ;
29904: GO 31464
// for i in tmp do
29906: LD_ADDR_VAR 0 6
29910: PUSH
29911: LD_VAR 0 8
29915: PUSH
29916: FOR_IN
29917: IFFALSE 31439
// begin points := [ 0 , 0 , 0 ] ;
29919: LD_ADDR_VAR 0 9
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// bpoints := 1 ;
29938: LD_ADDR_VAR 0 10
29942: PUSH
29943: LD_INT 1
29945: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29946: LD_VAR 0 6
29950: PPUSH
29951: CALL_OW 247
29955: PUSH
29956: LD_INT 1
29958: DOUBLE
29959: EQUAL
29960: IFTRUE 29964
29962: GO 30542
29964: POP
// begin if GetClass ( i ) = 1 then
29965: LD_VAR 0 6
29969: PPUSH
29970: CALL_OW 257
29974: PUSH
29975: LD_INT 1
29977: EQUAL
29978: IFFALSE 29999
// points := [ 10 , 5 , 3 ] ;
29980: LD_ADDR_VAR 0 9
29984: PUSH
29985: LD_INT 10
29987: PUSH
29988: LD_INT 5
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29999: LD_VAR 0 6
30003: PPUSH
30004: CALL_OW 257
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: IN
30023: IFFALSE 30044
// points := [ 3 , 2 , 1 ] ;
30025: LD_ADDR_VAR 0 9
30029: PUSH
30030: LD_INT 3
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30044: LD_VAR 0 6
30048: PPUSH
30049: CALL_OW 257
30053: PUSH
30054: LD_INT 5
30056: EQUAL
30057: IFFALSE 30078
// points := [ 130 , 5 , 2 ] ;
30059: LD_ADDR_VAR 0 9
30063: PUSH
30064: LD_INT 130
30066: PUSH
30067: LD_INT 5
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30078: LD_VAR 0 6
30082: PPUSH
30083: CALL_OW 257
30087: PUSH
30088: LD_INT 8
30090: EQUAL
30091: IFFALSE 30112
// points := [ 35 , 35 , 30 ] ;
30093: LD_ADDR_VAR 0 9
30097: PUSH
30098: LD_INT 35
30100: PUSH
30101: LD_INT 35
30103: PUSH
30104: LD_INT 30
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30112: LD_VAR 0 6
30116: PPUSH
30117: CALL_OW 257
30121: PUSH
30122: LD_INT 9
30124: EQUAL
30125: IFFALSE 30146
// points := [ 20 , 55 , 40 ] ;
30127: LD_ADDR_VAR 0 9
30131: PUSH
30132: LD_INT 20
30134: PUSH
30135: LD_INT 55
30137: PUSH
30138: LD_INT 40
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30146: LD_VAR 0 6
30150: PPUSH
30151: CALL_OW 257
30155: PUSH
30156: LD_INT 12
30158: PUSH
30159: LD_INT 16
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: IN
30166: IFFALSE 30187
// points := [ 5 , 3 , 2 ] ;
30168: LD_ADDR_VAR 0 9
30172: PUSH
30173: LD_INT 5
30175: PUSH
30176: LD_INT 3
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30187: LD_VAR 0 6
30191: PPUSH
30192: CALL_OW 257
30196: PUSH
30197: LD_INT 17
30199: EQUAL
30200: IFFALSE 30221
// points := [ 100 , 50 , 75 ] ;
30202: LD_ADDR_VAR 0 9
30206: PUSH
30207: LD_INT 100
30209: PUSH
30210: LD_INT 50
30212: PUSH
30213: LD_INT 75
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30221: LD_VAR 0 6
30225: PPUSH
30226: CALL_OW 257
30230: PUSH
30231: LD_INT 15
30233: EQUAL
30234: IFFALSE 30255
// points := [ 10 , 5 , 3 ] ;
30236: LD_ADDR_VAR 0 9
30240: PUSH
30241: LD_INT 10
30243: PUSH
30244: LD_INT 5
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: LIST
30254: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30255: LD_VAR 0 6
30259: PPUSH
30260: CALL_OW 257
30264: PUSH
30265: LD_INT 14
30267: EQUAL
30268: IFFALSE 30289
// points := [ 10 , 0 , 0 ] ;
30270: LD_ADDR_VAR 0 9
30274: PUSH
30275: LD_INT 10
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30289: LD_VAR 0 6
30293: PPUSH
30294: CALL_OW 257
30298: PUSH
30299: LD_INT 11
30301: EQUAL
30302: IFFALSE 30323
// points := [ 30 , 10 , 5 ] ;
30304: LD_ADDR_VAR 0 9
30308: PUSH
30309: LD_INT 30
30311: PUSH
30312: LD_INT 10
30314: PUSH
30315: LD_INT 5
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30323: LD_VAR 0 1
30327: PPUSH
30328: LD_INT 5
30330: PPUSH
30331: CALL_OW 321
30335: PUSH
30336: LD_INT 2
30338: EQUAL
30339: IFFALSE 30356
// bpoints := bpoints * 1.8 ;
30341: LD_ADDR_VAR 0 10
30345: PUSH
30346: LD_VAR 0 10
30350: PUSH
30351: LD_REAL  1.80000000000000E+0000
30354: MUL
30355: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30356: LD_VAR 0 6
30360: PPUSH
30361: CALL_OW 257
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 4
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: IN
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: LD_INT 51
30392: PPUSH
30393: CALL_OW 321
30397: PUSH
30398: LD_INT 2
30400: EQUAL
30401: AND
30402: IFFALSE 30419
// bpoints := bpoints * 1.2 ;
30404: LD_ADDR_VAR 0 10
30408: PUSH
30409: LD_VAR 0 10
30413: PUSH
30414: LD_REAL  1.20000000000000E+0000
30417: MUL
30418: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30419: LD_VAR 0 6
30423: PPUSH
30424: CALL_OW 257
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: LD_INT 7
30434: PUSH
30435: LD_INT 9
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: IN
30443: PUSH
30444: LD_VAR 0 1
30448: PPUSH
30449: LD_INT 52
30451: PPUSH
30452: CALL_OW 321
30456: PUSH
30457: LD_INT 2
30459: EQUAL
30460: AND
30461: IFFALSE 30478
// bpoints := bpoints * 1.5 ;
30463: LD_ADDR_VAR 0 10
30467: PUSH
30468: LD_VAR 0 10
30472: PUSH
30473: LD_REAL  1.50000000000000E+0000
30476: MUL
30477: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30478: LD_VAR 0 1
30482: PPUSH
30483: LD_INT 66
30485: PPUSH
30486: CALL_OW 321
30490: PUSH
30491: LD_INT 2
30493: EQUAL
30494: IFFALSE 30511
// bpoints := bpoints * 1.1 ;
30496: LD_ADDR_VAR 0 10
30500: PUSH
30501: LD_VAR 0 10
30505: PUSH
30506: LD_REAL  1.10000000000000E+0000
30509: MUL
30510: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30511: LD_ADDR_VAR 0 10
30515: PUSH
30516: LD_VAR 0 10
30520: PUSH
30521: LD_VAR 0 6
30525: PPUSH
30526: LD_INT 1
30528: PPUSH
30529: CALL_OW 259
30533: PUSH
30534: LD_REAL  1.15000000000000E+0000
30537: MUL
30538: MUL
30539: ST_TO_ADDR
// end ; unit_vehicle :
30540: GO 31368
30542: LD_INT 2
30544: DOUBLE
30545: EQUAL
30546: IFTRUE 30550
30548: GO 31356
30550: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30551: LD_VAR 0 6
30555: PPUSH
30556: CALL_OW 264
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: LD_INT 42
30566: PUSH
30567: LD_INT 24
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: IN
30575: IFFALSE 30596
// points := [ 25 , 5 , 3 ] ;
30577: LD_ADDR_VAR 0 9
30581: PUSH
30582: LD_INT 25
30584: PUSH
30585: LD_INT 5
30587: PUSH
30588: LD_INT 3
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30596: LD_VAR 0 6
30600: PPUSH
30601: CALL_OW 264
30605: PUSH
30606: LD_INT 4
30608: PUSH
30609: LD_INT 43
30611: PUSH
30612: LD_INT 25
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: IN
30620: IFFALSE 30641
// points := [ 40 , 15 , 5 ] ;
30622: LD_ADDR_VAR 0 9
30626: PUSH
30627: LD_INT 40
30629: PUSH
30630: LD_INT 15
30632: PUSH
30633: LD_INT 5
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30641: LD_VAR 0 6
30645: PPUSH
30646: CALL_OW 264
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: LD_INT 23
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: IN
30661: IFFALSE 30682
// points := [ 7 , 25 , 8 ] ;
30663: LD_ADDR_VAR 0 9
30667: PUSH
30668: LD_INT 7
30670: PUSH
30671: LD_INT 25
30673: PUSH
30674: LD_INT 8
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30682: LD_VAR 0 6
30686: PPUSH
30687: CALL_OW 264
30691: PUSH
30692: LD_INT 5
30694: PUSH
30695: LD_INT 27
30697: PUSH
30698: LD_INT 44
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: IN
30706: IFFALSE 30727
// points := [ 14 , 50 , 16 ] ;
30708: LD_ADDR_VAR 0 9
30712: PUSH
30713: LD_INT 14
30715: PUSH
30716: LD_INT 50
30718: PUSH
30719: LD_INT 16
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30727: LD_VAR 0 6
30731: PPUSH
30732: CALL_OW 264
30736: PUSH
30737: LD_INT 6
30739: PUSH
30740: LD_INT 46
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: IN
30747: IFFALSE 30768
// points := [ 32 , 120 , 70 ] ;
30749: LD_ADDR_VAR 0 9
30753: PUSH
30754: LD_INT 32
30756: PUSH
30757: LD_INT 120
30759: PUSH
30760: LD_INT 70
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30768: LD_VAR 0 6
30772: PPUSH
30773: CALL_OW 264
30777: PUSH
30778: LD_INT 7
30780: PUSH
30781: LD_INT 28
30783: PUSH
30784: LD_INT 45
30786: PUSH
30787: LD_INT 92
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: IN
30796: IFFALSE 30817
// points := [ 35 , 20 , 45 ] ;
30798: LD_ADDR_VAR 0 9
30802: PUSH
30803: LD_INT 35
30805: PUSH
30806: LD_INT 20
30808: PUSH
30809: LD_INT 45
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30817: LD_VAR 0 6
30821: PPUSH
30822: CALL_OW 264
30826: PUSH
30827: LD_INT 47
30829: PUSH
30830: EMPTY
30831: LIST
30832: IN
30833: IFFALSE 30854
// points := [ 67 , 45 , 75 ] ;
30835: LD_ADDR_VAR 0 9
30839: PUSH
30840: LD_INT 67
30842: PUSH
30843: LD_INT 45
30845: PUSH
30846: LD_INT 75
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30854: LD_VAR 0 6
30858: PPUSH
30859: CALL_OW 264
30863: PUSH
30864: LD_INT 26
30866: PUSH
30867: EMPTY
30868: LIST
30869: IN
30870: IFFALSE 30891
// points := [ 120 , 30 , 80 ] ;
30872: LD_ADDR_VAR 0 9
30876: PUSH
30877: LD_INT 120
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 80
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30891: LD_VAR 0 6
30895: PPUSH
30896: CALL_OW 264
30900: PUSH
30901: LD_INT 22
30903: PUSH
30904: EMPTY
30905: LIST
30906: IN
30907: IFFALSE 30928
// points := [ 40 , 1 , 1 ] ;
30909: LD_ADDR_VAR 0 9
30913: PUSH
30914: LD_INT 40
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30928: LD_VAR 0 6
30932: PPUSH
30933: CALL_OW 264
30937: PUSH
30938: LD_INT 29
30940: PUSH
30941: EMPTY
30942: LIST
30943: IN
30944: IFFALSE 30965
// points := [ 70 , 200 , 400 ] ;
30946: LD_ADDR_VAR 0 9
30950: PUSH
30951: LD_INT 70
30953: PUSH
30954: LD_INT 200
30956: PUSH
30957: LD_INT 400
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30965: LD_VAR 0 6
30969: PPUSH
30970: CALL_OW 264
30974: PUSH
30975: LD_INT 14
30977: PUSH
30978: LD_INT 53
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: IN
30985: IFFALSE 31006
// points := [ 40 , 10 , 20 ] ;
30987: LD_ADDR_VAR 0 9
30991: PUSH
30992: LD_INT 40
30994: PUSH
30995: LD_INT 10
30997: PUSH
30998: LD_INT 20
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31006: LD_VAR 0 6
31010: PPUSH
31011: CALL_OW 264
31015: PUSH
31016: LD_INT 9
31018: PUSH
31019: EMPTY
31020: LIST
31021: IN
31022: IFFALSE 31043
// points := [ 5 , 70 , 20 ] ;
31024: LD_ADDR_VAR 0 9
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 70
31034: PUSH
31035: LD_INT 20
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31043: LD_VAR 0 6
31047: PPUSH
31048: CALL_OW 264
31052: PUSH
31053: LD_INT 10
31055: PUSH
31056: EMPTY
31057: LIST
31058: IN
31059: IFFALSE 31080
// points := [ 35 , 110 , 70 ] ;
31061: LD_ADDR_VAR 0 9
31065: PUSH
31066: LD_INT 35
31068: PUSH
31069: LD_INT 110
31071: PUSH
31072: LD_INT 70
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31080: LD_VAR 0 6
31084: PPUSH
31085: CALL_OW 265
31089: PUSH
31090: LD_INT 25
31092: EQUAL
31093: IFFALSE 31114
// points := [ 80 , 65 , 100 ] ;
31095: LD_ADDR_VAR 0 9
31099: PUSH
31100: LD_INT 80
31102: PUSH
31103: LD_INT 65
31105: PUSH
31106: LD_INT 100
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31114: LD_VAR 0 6
31118: PPUSH
31119: CALL_OW 263
31123: PUSH
31124: LD_INT 1
31126: EQUAL
31127: IFFALSE 31162
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31129: LD_ADDR_VAR 0 10
31133: PUSH
31134: LD_VAR 0 10
31138: PUSH
31139: LD_VAR 0 6
31143: PPUSH
31144: CALL_OW 311
31148: PPUSH
31149: LD_INT 3
31151: PPUSH
31152: CALL_OW 259
31156: PUSH
31157: LD_INT 4
31159: MUL
31160: MUL
31161: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31162: LD_VAR 0 6
31166: PPUSH
31167: CALL_OW 263
31171: PUSH
31172: LD_INT 2
31174: EQUAL
31175: IFFALSE 31226
// begin j := IsControledBy ( i ) ;
31177: LD_ADDR_VAR 0 7
31181: PUSH
31182: LD_VAR 0 6
31186: PPUSH
31187: CALL_OW 312
31191: ST_TO_ADDR
// if j then
31192: LD_VAR 0 7
31196: IFFALSE 31226
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31198: LD_ADDR_VAR 0 10
31202: PUSH
31203: LD_VAR 0 10
31207: PUSH
31208: LD_VAR 0 7
31212: PPUSH
31213: LD_INT 3
31215: PPUSH
31216: CALL_OW 259
31220: PUSH
31221: LD_INT 3
31223: MUL
31224: MUL
31225: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31226: LD_VAR 0 6
31230: PPUSH
31231: CALL_OW 264
31235: PUSH
31236: LD_INT 5
31238: PUSH
31239: LD_INT 6
31241: PUSH
31242: LD_INT 46
31244: PUSH
31245: LD_INT 44
31247: PUSH
31248: LD_INT 47
31250: PUSH
31251: LD_INT 45
31253: PUSH
31254: LD_INT 28
31256: PUSH
31257: LD_INT 7
31259: PUSH
31260: LD_INT 27
31262: PUSH
31263: LD_INT 29
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: IN
31278: PUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: LD_INT 52
31286: PPUSH
31287: CALL_OW 321
31291: PUSH
31292: LD_INT 2
31294: EQUAL
31295: AND
31296: IFFALSE 31313
// bpoints := bpoints * 1.2 ;
31298: LD_ADDR_VAR 0 10
31302: PUSH
31303: LD_VAR 0 10
31307: PUSH
31308: LD_REAL  1.20000000000000E+0000
31311: MUL
31312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31313: LD_VAR 0 6
31317: PPUSH
31318: CALL_OW 264
31322: PUSH
31323: LD_INT 6
31325: PUSH
31326: LD_INT 46
31328: PUSH
31329: LD_INT 47
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: IN
31337: IFFALSE 31354
// bpoints := bpoints * 1.2 ;
31339: LD_ADDR_VAR 0 10
31343: PUSH
31344: LD_VAR 0 10
31348: PUSH
31349: LD_REAL  1.20000000000000E+0000
31352: MUL
31353: ST_TO_ADDR
// end ; unit_building :
31354: GO 31368
31356: LD_INT 3
31358: DOUBLE
31359: EQUAL
31360: IFTRUE 31364
31362: GO 31367
31364: POP
// ; end ;
31365: GO 31368
31367: POP
// for j = 1 to 3 do
31368: LD_ADDR_VAR 0 7
31372: PUSH
31373: DOUBLE
31374: LD_INT 1
31376: DEC
31377: ST_TO_ADDR
31378: LD_INT 3
31380: PUSH
31381: FOR_TO
31382: IFFALSE 31435
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31384: LD_ADDR_VAR 0 5
31388: PUSH
31389: LD_VAR 0 5
31393: PPUSH
31394: LD_VAR 0 7
31398: PPUSH
31399: LD_VAR 0 5
31403: PUSH
31404: LD_VAR 0 7
31408: ARRAY
31409: PUSH
31410: LD_VAR 0 9
31414: PUSH
31415: LD_VAR 0 7
31419: ARRAY
31420: PUSH
31421: LD_VAR 0 10
31425: MUL
31426: PLUS
31427: PPUSH
31428: CALL_OW 1
31432: ST_TO_ADDR
31433: GO 31381
31435: POP
31436: POP
// end ;
31437: GO 29916
31439: POP
31440: POP
// result := Replace ( result , 4 , tmp ) ;
31441: LD_ADDR_VAR 0 5
31445: PUSH
31446: LD_VAR 0 5
31450: PPUSH
31451: LD_INT 4
31453: PPUSH
31454: LD_VAR 0 8
31458: PPUSH
31459: CALL_OW 1
31463: ST_TO_ADDR
// end ;
31464: LD_VAR 0 5
31468: RET
// export function DangerAtRange ( unit , range ) ; begin
31469: LD_INT 0
31471: PPUSH
// if not unit then
31472: LD_VAR 0 1
31476: NOT
31477: IFFALSE 31481
// exit ;
31479: GO 31526
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_VAR 0 1
31490: PPUSH
31491: CALL_OW 255
31495: PPUSH
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 250
31505: PPUSH
31506: LD_VAR 0 1
31510: PPUSH
31511: CALL_OW 251
31515: PPUSH
31516: LD_VAR 0 2
31520: PPUSH
31521: CALL 29768 0 4
31525: ST_TO_ADDR
// end ;
31526: LD_VAR 0 3
31530: RET
// export function DangerInArea ( side , area ) ; begin
31531: LD_INT 0
31533: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31534: LD_ADDR_VAR 0 3
31538: PUSH
31539: LD_VAR 0 2
31543: PPUSH
31544: LD_INT 81
31546: PUSH
31547: LD_VAR 0 1
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PPUSH
31556: CALL_OW 70
31560: ST_TO_ADDR
// end ;
31561: LD_VAR 0 3
31565: RET
// export function IsExtension ( b ) ; begin
31566: LD_INT 0
31568: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31569: LD_ADDR_VAR 0 2
31573: PUSH
31574: LD_VAR 0 1
31578: PUSH
31579: LD_INT 23
31581: PUSH
31582: LD_INT 20
31584: PUSH
31585: LD_INT 22
31587: PUSH
31588: LD_INT 17
31590: PUSH
31591: LD_INT 24
31593: PUSH
31594: LD_INT 21
31596: PUSH
31597: LD_INT 19
31599: PUSH
31600: LD_INT 16
31602: PUSH
31603: LD_INT 25
31605: PUSH
31606: LD_INT 18
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: IN
31621: ST_TO_ADDR
// end ;
31622: LD_VAR 0 2
31626: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31627: LD_INT 0
31629: PPUSH
31630: PPUSH
31631: PPUSH
// result := [ ] ;
31632: LD_ADDR_VAR 0 4
31636: PUSH
31637: EMPTY
31638: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31639: LD_ADDR_VAR 0 5
31643: PUSH
31644: LD_VAR 0 2
31648: PPUSH
31649: LD_INT 21
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PPUSH
31659: CALL_OW 70
31663: ST_TO_ADDR
// if not tmp then
31664: LD_VAR 0 5
31668: NOT
31669: IFFALSE 31673
// exit ;
31671: GO 31737
// if checkLink then
31673: LD_VAR 0 3
31677: IFFALSE 31727
// begin for i in tmp do
31679: LD_ADDR_VAR 0 6
31683: PUSH
31684: LD_VAR 0 5
31688: PUSH
31689: FOR_IN
31690: IFFALSE 31725
// if GetBase ( i ) <> base then
31692: LD_VAR 0 6
31696: PPUSH
31697: CALL_OW 274
31701: PUSH
31702: LD_VAR 0 1
31706: NONEQUAL
31707: IFFALSE 31723
// ComLinkToBase ( base , i ) ;
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_VAR 0 6
31718: PPUSH
31719: CALL_OW 169
31723: GO 31689
31725: POP
31726: POP
// end ; result := tmp ;
31727: LD_ADDR_VAR 0 4
31731: PUSH
31732: LD_VAR 0 5
31736: ST_TO_ADDR
// end ;
31737: LD_VAR 0 4
31741: RET
// export function ComComplete ( units , b ) ; var i ; begin
31742: LD_INT 0
31744: PPUSH
31745: PPUSH
// if not units then
31746: LD_VAR 0 1
31750: NOT
31751: IFFALSE 31755
// exit ;
31753: GO 31845
// for i in units do
31755: LD_ADDR_VAR 0 4
31759: PUSH
31760: LD_VAR 0 1
31764: PUSH
31765: FOR_IN
31766: IFFALSE 31843
// if BuildingStatus ( b ) = bs_build then
31768: LD_VAR 0 2
31772: PPUSH
31773: CALL_OW 461
31777: PUSH
31778: LD_INT 1
31780: EQUAL
31781: IFFALSE 31841
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31783: LD_VAR 0 4
31787: PPUSH
31788: LD_STRING h
31790: PUSH
31791: LD_VAR 0 2
31795: PPUSH
31796: CALL_OW 250
31800: PUSH
31801: LD_VAR 0 2
31805: PPUSH
31806: CALL_OW 251
31810: PUSH
31811: LD_VAR 0 2
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: PPUSH
31837: CALL_OW 446
31841: GO 31765
31843: POP
31844: POP
// end ;
31845: LD_VAR 0 3
31849: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31850: LD_INT 0
31852: PPUSH
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
31857: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31858: LD_VAR 0 1
31862: NOT
31863: PUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: CALL_OW 263
31873: PUSH
31874: LD_INT 2
31876: NONEQUAL
31877: OR
31878: IFFALSE 31882
// exit ;
31880: GO 32198
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31882: LD_ADDR_VAR 0 6
31886: PUSH
31887: LD_INT 22
31889: PUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 255
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_INT 36
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 34
31919: PUSH
31920: LD_INT 31
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PPUSH
31936: CALL_OW 69
31940: ST_TO_ADDR
// if not tmp then
31941: LD_VAR 0 6
31945: NOT
31946: IFFALSE 31950
// exit ;
31948: GO 32198
// result := [ ] ;
31950: LD_ADDR_VAR 0 2
31954: PUSH
31955: EMPTY
31956: ST_TO_ADDR
// for i in tmp do
31957: LD_ADDR_VAR 0 3
31961: PUSH
31962: LD_VAR 0 6
31966: PUSH
31967: FOR_IN
31968: IFFALSE 32039
// begin t := UnitsInside ( i ) ;
31970: LD_ADDR_VAR 0 4
31974: PUSH
31975: LD_VAR 0 3
31979: PPUSH
31980: CALL_OW 313
31984: ST_TO_ADDR
// if t then
31985: LD_VAR 0 4
31989: IFFALSE 32037
// for j in t do
31991: LD_ADDR_VAR 0 7
31995: PUSH
31996: LD_VAR 0 4
32000: PUSH
32001: FOR_IN
32002: IFFALSE 32035
// result := Replace ( result , result + 1 , j ) ;
32004: LD_ADDR_VAR 0 2
32008: PUSH
32009: LD_VAR 0 2
32013: PPUSH
32014: LD_VAR 0 2
32018: PUSH
32019: LD_INT 1
32021: PLUS
32022: PPUSH
32023: LD_VAR 0 7
32027: PPUSH
32028: CALL_OW 1
32032: ST_TO_ADDR
32033: GO 32001
32035: POP
32036: POP
// end ;
32037: GO 31967
32039: POP
32040: POP
// if not result then
32041: LD_VAR 0 2
32045: NOT
32046: IFFALSE 32050
// exit ;
32048: GO 32198
// mech := result [ 1 ] ;
32050: LD_ADDR_VAR 0 5
32054: PUSH
32055: LD_VAR 0 2
32059: PUSH
32060: LD_INT 1
32062: ARRAY
32063: ST_TO_ADDR
// if result > 1 then
32064: LD_VAR 0 2
32068: PUSH
32069: LD_INT 1
32071: GREATER
32072: IFFALSE 32184
// begin for i = 2 to result do
32074: LD_ADDR_VAR 0 3
32078: PUSH
32079: DOUBLE
32080: LD_INT 2
32082: DEC
32083: ST_TO_ADDR
32084: LD_VAR 0 2
32088: PUSH
32089: FOR_TO
32090: IFFALSE 32182
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32092: LD_ADDR_VAR 0 4
32096: PUSH
32097: LD_VAR 0 2
32101: PUSH
32102: LD_VAR 0 3
32106: ARRAY
32107: PPUSH
32108: LD_INT 3
32110: PPUSH
32111: CALL_OW 259
32115: PUSH
32116: LD_VAR 0 2
32120: PUSH
32121: LD_VAR 0 3
32125: ARRAY
32126: PPUSH
32127: CALL_OW 432
32131: MINUS
32132: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32133: LD_VAR 0 4
32137: PUSH
32138: LD_VAR 0 5
32142: PPUSH
32143: LD_INT 3
32145: PPUSH
32146: CALL_OW 259
32150: PUSH
32151: LD_VAR 0 5
32155: PPUSH
32156: CALL_OW 432
32160: MINUS
32161: GREATEREQUAL
32162: IFFALSE 32180
// mech := result [ i ] ;
32164: LD_ADDR_VAR 0 5
32168: PUSH
32169: LD_VAR 0 2
32173: PUSH
32174: LD_VAR 0 3
32178: ARRAY
32179: ST_TO_ADDR
// end ;
32180: GO 32089
32182: POP
32183: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32184: LD_VAR 0 1
32188: PPUSH
32189: LD_VAR 0 5
32193: PPUSH
32194: CALL_OW 135
// end ;
32198: LD_VAR 0 2
32202: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32203: LD_INT 0
32205: PPUSH
32206: PPUSH
32207: PPUSH
32208: PPUSH
32209: PPUSH
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
// result := [ ] ;
32218: LD_ADDR_VAR 0 7
32222: PUSH
32223: EMPTY
32224: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 266
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: IN
32245: NOT
32246: IFFALSE 32250
// exit ;
32248: GO 33884
// if name then
32250: LD_VAR 0 3
32254: IFFALSE 32270
// SetBName ( base_dep , name ) ;
32256: LD_VAR 0 1
32260: PPUSH
32261: LD_VAR 0 3
32265: PPUSH
32266: CALL_OW 500
// base := GetBase ( base_dep ) ;
32270: LD_ADDR_VAR 0 15
32274: PUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 274
32284: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32285: LD_ADDR_VAR 0 16
32289: PUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 255
32299: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32300: LD_ADDR_VAR 0 17
32304: PUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 248
32314: ST_TO_ADDR
// if sources then
32315: LD_VAR 0 5
32319: IFFALSE 32366
// for i = 1 to 3 do
32321: LD_ADDR_VAR 0 8
32325: PUSH
32326: DOUBLE
32327: LD_INT 1
32329: DEC
32330: ST_TO_ADDR
32331: LD_INT 3
32333: PUSH
32334: FOR_TO
32335: IFFALSE 32364
// AddResourceType ( base , i , sources [ i ] ) ;
32337: LD_VAR 0 15
32341: PPUSH
32342: LD_VAR 0 8
32346: PPUSH
32347: LD_VAR 0 5
32351: PUSH
32352: LD_VAR 0 8
32356: ARRAY
32357: PPUSH
32358: CALL_OW 276
32362: GO 32334
32364: POP
32365: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32366: LD_ADDR_VAR 0 18
32370: PUSH
32371: LD_VAR 0 15
32375: PPUSH
32376: LD_VAR 0 2
32380: PPUSH
32381: LD_INT 1
32383: PPUSH
32384: CALL 31627 0 3
32388: ST_TO_ADDR
// InitHc ;
32389: CALL_OW 19
// InitUc ;
32393: CALL_OW 18
// uc_side := side ;
32397: LD_ADDR_OWVAR 20
32401: PUSH
32402: LD_VAR 0 16
32406: ST_TO_ADDR
// uc_nation := nation ;
32407: LD_ADDR_OWVAR 21
32411: PUSH
32412: LD_VAR 0 17
32416: ST_TO_ADDR
// if buildings then
32417: LD_VAR 0 18
32421: IFFALSE 33743
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32423: LD_ADDR_VAR 0 19
32427: PUSH
32428: LD_VAR 0 18
32432: PPUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 30
32438: PUSH
32439: LD_INT 29
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 30
32448: PUSH
32449: LD_INT 30
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: PPUSH
32461: CALL_OW 72
32465: ST_TO_ADDR
// if tmp then
32466: LD_VAR 0 19
32470: IFFALSE 32518
// for i in tmp do
32472: LD_ADDR_VAR 0 8
32476: PUSH
32477: LD_VAR 0 19
32481: PUSH
32482: FOR_IN
32483: IFFALSE 32516
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32485: LD_VAR 0 8
32489: PPUSH
32490: CALL_OW 250
32494: PPUSH
32495: LD_VAR 0 8
32499: PPUSH
32500: CALL_OW 251
32504: PPUSH
32505: LD_VAR 0 16
32509: PPUSH
32510: CALL_OW 441
32514: GO 32482
32516: POP
32517: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32518: LD_VAR 0 18
32522: PPUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 30
32528: PUSH
32529: LD_INT 32
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 30
32538: PUSH
32539: LD_INT 33
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: PPUSH
32551: CALL_OW 72
32555: IFFALSE 32643
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32557: LD_ADDR_VAR 0 8
32561: PUSH
32562: LD_VAR 0 18
32566: PPUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 30
32572: PUSH
32573: LD_INT 32
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 30
32582: PUSH
32583: LD_INT 33
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: PPUSH
32595: CALL_OW 72
32599: PUSH
32600: FOR_IN
32601: IFFALSE 32641
// begin if not GetBWeapon ( i ) then
32603: LD_VAR 0 8
32607: PPUSH
32608: CALL_OW 269
32612: NOT
32613: IFFALSE 32639
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32615: LD_VAR 0 8
32619: PPUSH
32620: LD_VAR 0 8
32624: PPUSH
32625: LD_VAR 0 2
32629: PPUSH
32630: CALL 33889 0 2
32634: PPUSH
32635: CALL_OW 431
// end ;
32639: GO 32600
32641: POP
32642: POP
// end ; for i = 1 to personel do
32643: LD_ADDR_VAR 0 8
32647: PUSH
32648: DOUBLE
32649: LD_INT 1
32651: DEC
32652: ST_TO_ADDR
32653: LD_VAR 0 6
32657: PUSH
32658: FOR_TO
32659: IFFALSE 33723
// begin if i > 4 then
32661: LD_VAR 0 8
32665: PUSH
32666: LD_INT 4
32668: GREATER
32669: IFFALSE 32673
// break ;
32671: GO 33723
// case i of 1 :
32673: LD_VAR 0 8
32677: PUSH
32678: LD_INT 1
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32686
32684: GO 32766
32686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32687: LD_ADDR_VAR 0 12
32691: PUSH
32692: LD_VAR 0 18
32696: PPUSH
32697: LD_INT 22
32699: PUSH
32700: LD_VAR 0 16
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 58
32711: PUSH
32712: EMPTY
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: LD_INT 30
32720: PUSH
32721: LD_INT 32
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 30
32730: PUSH
32731: LD_INT 4
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 30
32740: PUSH
32741: LD_INT 5
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: PPUSH
32759: CALL_OW 72
32763: ST_TO_ADDR
32764: GO 32988
32766: LD_INT 2
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32836
32774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32775: LD_ADDR_VAR 0 12
32779: PUSH
32780: LD_VAR 0 18
32784: PPUSH
32785: LD_INT 22
32787: PUSH
32788: LD_VAR 0 16
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 30
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 30
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PPUSH
32829: CALL_OW 72
32833: ST_TO_ADDR
32834: GO 32988
32836: LD_INT 3
32838: DOUBLE
32839: EQUAL
32840: IFTRUE 32844
32842: GO 32906
32844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32845: LD_ADDR_VAR 0 12
32849: PUSH
32850: LD_VAR 0 18
32854: PPUSH
32855: LD_INT 22
32857: PUSH
32858: LD_VAR 0 16
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 30
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 30
32882: PUSH
32883: LD_INT 3
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PPUSH
32899: CALL_OW 72
32903: ST_TO_ADDR
32904: GO 32988
32906: LD_INT 4
32908: DOUBLE
32909: EQUAL
32910: IFTRUE 32914
32912: GO 32987
32914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32915: LD_ADDR_VAR 0 12
32919: PUSH
32920: LD_VAR 0 18
32924: PPUSH
32925: LD_INT 22
32927: PUSH
32928: LD_VAR 0 16
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: LD_INT 30
32942: PUSH
32943: LD_INT 6
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 30
32952: PUSH
32953: LD_INT 7
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 30
32962: PUSH
32963: LD_INT 8
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PPUSH
32980: CALL_OW 72
32984: ST_TO_ADDR
32985: GO 32988
32987: POP
// if i = 1 then
32988: LD_VAR 0 8
32992: PUSH
32993: LD_INT 1
32995: EQUAL
32996: IFFALSE 33107
// begin tmp := [ ] ;
32998: LD_ADDR_VAR 0 19
33002: PUSH
33003: EMPTY
33004: ST_TO_ADDR
// for j in f do
33005: LD_ADDR_VAR 0 9
33009: PUSH
33010: LD_VAR 0 12
33014: PUSH
33015: FOR_IN
33016: IFFALSE 33089
// if GetBType ( j ) = b_bunker then
33018: LD_VAR 0 9
33022: PPUSH
33023: CALL_OW 266
33027: PUSH
33028: LD_INT 32
33030: EQUAL
33031: IFFALSE 33058
// tmp := Insert ( tmp , 1 , j ) else
33033: LD_ADDR_VAR 0 19
33037: PUSH
33038: LD_VAR 0 19
33042: PPUSH
33043: LD_INT 1
33045: PPUSH
33046: LD_VAR 0 9
33050: PPUSH
33051: CALL_OW 2
33055: ST_TO_ADDR
33056: GO 33087
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33058: LD_ADDR_VAR 0 19
33062: PUSH
33063: LD_VAR 0 19
33067: PPUSH
33068: LD_VAR 0 19
33072: PUSH
33073: LD_INT 1
33075: PLUS
33076: PPUSH
33077: LD_VAR 0 9
33081: PPUSH
33082: CALL_OW 2
33086: ST_TO_ADDR
33087: GO 33015
33089: POP
33090: POP
// if tmp then
33091: LD_VAR 0 19
33095: IFFALSE 33107
// f := tmp ;
33097: LD_ADDR_VAR 0 12
33101: PUSH
33102: LD_VAR 0 19
33106: ST_TO_ADDR
// end ; x := personel [ i ] ;
33107: LD_ADDR_VAR 0 13
33111: PUSH
33112: LD_VAR 0 6
33116: PUSH
33117: LD_VAR 0 8
33121: ARRAY
33122: ST_TO_ADDR
// if x = - 1 then
33123: LD_VAR 0 13
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: EQUAL
33132: IFFALSE 33341
// begin for j in f do
33134: LD_ADDR_VAR 0 9
33138: PUSH
33139: LD_VAR 0 12
33143: PUSH
33144: FOR_IN
33145: IFFALSE 33337
// repeat InitHc ;
33147: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33151: LD_VAR 0 9
33155: PPUSH
33156: CALL_OW 266
33160: PUSH
33161: LD_INT 5
33163: EQUAL
33164: IFFALSE 33234
// begin if UnitsInside ( j ) < 3 then
33166: LD_VAR 0 9
33170: PPUSH
33171: CALL_OW 313
33175: PUSH
33176: LD_INT 3
33178: LESS
33179: IFFALSE 33215
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33181: LD_INT 0
33183: PPUSH
33184: LD_INT 5
33186: PUSH
33187: LD_INT 8
33189: PUSH
33190: LD_INT 9
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: PUSH
33198: LD_VAR 0 17
33202: ARRAY
33203: PPUSH
33204: LD_VAR 0 4
33208: PPUSH
33209: CALL_OW 380
33213: GO 33232
// PrepareHuman ( false , i , skill ) ;
33215: LD_INT 0
33217: PPUSH
33218: LD_VAR 0 8
33222: PPUSH
33223: LD_VAR 0 4
33227: PPUSH
33228: CALL_OW 380
// end else
33232: GO 33251
// PrepareHuman ( false , i , skill ) ;
33234: LD_INT 0
33236: PPUSH
33237: LD_VAR 0 8
33241: PPUSH
33242: LD_VAR 0 4
33246: PPUSH
33247: CALL_OW 380
// un := CreateHuman ;
33251: LD_ADDR_VAR 0 14
33255: PUSH
33256: CALL_OW 44
33260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33261: LD_ADDR_VAR 0 7
33265: PUSH
33266: LD_VAR 0 7
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: LD_VAR 0 14
33278: PPUSH
33279: CALL_OW 2
33283: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33284: LD_VAR 0 14
33288: PPUSH
33289: LD_VAR 0 9
33293: PPUSH
33294: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33298: LD_VAR 0 9
33302: PPUSH
33303: CALL_OW 313
33307: PUSH
33308: LD_INT 6
33310: EQUAL
33311: PUSH
33312: LD_VAR 0 9
33316: PPUSH
33317: CALL_OW 266
33321: PUSH
33322: LD_INT 32
33324: PUSH
33325: LD_INT 31
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: IN
33332: OR
33333: IFFALSE 33147
33335: GO 33144
33337: POP
33338: POP
// end else
33339: GO 33721
// for j = 1 to x do
33341: LD_ADDR_VAR 0 9
33345: PUSH
33346: DOUBLE
33347: LD_INT 1
33349: DEC
33350: ST_TO_ADDR
33351: LD_VAR 0 13
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33719
// begin InitHc ;
33359: CALL_OW 19
// if not f then
33363: LD_VAR 0 12
33367: NOT
33368: IFFALSE 33457
// begin PrepareHuman ( false , i , skill ) ;
33370: LD_INT 0
33372: PPUSH
33373: LD_VAR 0 8
33377: PPUSH
33378: LD_VAR 0 4
33382: PPUSH
33383: CALL_OW 380
// un := CreateHuman ;
33387: LD_ADDR_VAR 0 14
33391: PUSH
33392: CALL_OW 44
33396: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33397: LD_ADDR_VAR 0 7
33401: PUSH
33402: LD_VAR 0 7
33406: PPUSH
33407: LD_INT 1
33409: PPUSH
33410: LD_VAR 0 14
33414: PPUSH
33415: CALL_OW 2
33419: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33420: LD_VAR 0 14
33424: PPUSH
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 250
33434: PPUSH
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL_OW 251
33444: PPUSH
33445: LD_INT 10
33447: PPUSH
33448: LD_INT 0
33450: PPUSH
33451: CALL_OW 50
// continue ;
33455: GO 33356
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33457: LD_VAR 0 12
33461: PUSH
33462: LD_INT 1
33464: ARRAY
33465: PPUSH
33466: CALL_OW 313
33470: PUSH
33471: LD_VAR 0 12
33475: PUSH
33476: LD_INT 1
33478: ARRAY
33479: PPUSH
33480: CALL_OW 266
33484: PUSH
33485: LD_INT 32
33487: PUSH
33488: LD_INT 31
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: IN
33495: AND
33496: PUSH
33497: LD_VAR 0 12
33501: PUSH
33502: LD_INT 1
33504: ARRAY
33505: PPUSH
33506: CALL_OW 313
33510: PUSH
33511: LD_INT 6
33513: EQUAL
33514: OR
33515: IFFALSE 33535
// f := Delete ( f , 1 ) ;
33517: LD_ADDR_VAR 0 12
33521: PUSH
33522: LD_VAR 0 12
33526: PPUSH
33527: LD_INT 1
33529: PPUSH
33530: CALL_OW 3
33534: ST_TO_ADDR
// if not f then
33535: LD_VAR 0 12
33539: NOT
33540: IFFALSE 33558
// begin x := x + 2 ;
33542: LD_ADDR_VAR 0 13
33546: PUSH
33547: LD_VAR 0 13
33551: PUSH
33552: LD_INT 2
33554: PLUS
33555: ST_TO_ADDR
// continue ;
33556: GO 33356
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33558: LD_VAR 0 12
33562: PUSH
33563: LD_INT 1
33565: ARRAY
33566: PPUSH
33567: CALL_OW 266
33571: PUSH
33572: LD_INT 5
33574: EQUAL
33575: IFFALSE 33649
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33577: LD_VAR 0 12
33581: PUSH
33582: LD_INT 1
33584: ARRAY
33585: PPUSH
33586: CALL_OW 313
33590: PUSH
33591: LD_INT 3
33593: LESS
33594: IFFALSE 33630
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33596: LD_INT 0
33598: PPUSH
33599: LD_INT 5
33601: PUSH
33602: LD_INT 8
33604: PUSH
33605: LD_INT 9
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: PUSH
33613: LD_VAR 0 17
33617: ARRAY
33618: PPUSH
33619: LD_VAR 0 4
33623: PPUSH
33624: CALL_OW 380
33628: GO 33647
// PrepareHuman ( false , i , skill ) ;
33630: LD_INT 0
33632: PPUSH
33633: LD_VAR 0 8
33637: PPUSH
33638: LD_VAR 0 4
33642: PPUSH
33643: CALL_OW 380
// end else
33647: GO 33666
// PrepareHuman ( false , i , skill ) ;
33649: LD_INT 0
33651: PPUSH
33652: LD_VAR 0 8
33656: PPUSH
33657: LD_VAR 0 4
33661: PPUSH
33662: CALL_OW 380
// un := CreateHuman ;
33666: LD_ADDR_VAR 0 14
33670: PUSH
33671: CALL_OW 44
33675: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33676: LD_ADDR_VAR 0 7
33680: PUSH
33681: LD_VAR 0 7
33685: PPUSH
33686: LD_INT 1
33688: PPUSH
33689: LD_VAR 0 14
33693: PPUSH
33694: CALL_OW 2
33698: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33699: LD_VAR 0 14
33703: PPUSH
33704: LD_VAR 0 12
33708: PUSH
33709: LD_INT 1
33711: ARRAY
33712: PPUSH
33713: CALL_OW 52
// end ;
33717: GO 33356
33719: POP
33720: POP
// end ;
33721: GO 32658
33723: POP
33724: POP
// result := result ^ buildings ;
33725: LD_ADDR_VAR 0 7
33729: PUSH
33730: LD_VAR 0 7
33734: PUSH
33735: LD_VAR 0 18
33739: ADD
33740: ST_TO_ADDR
// end else
33741: GO 33884
// begin for i = 1 to personel do
33743: LD_ADDR_VAR 0 8
33747: PUSH
33748: DOUBLE
33749: LD_INT 1
33751: DEC
33752: ST_TO_ADDR
33753: LD_VAR 0 6
33757: PUSH
33758: FOR_TO
33759: IFFALSE 33882
// begin if i > 4 then
33761: LD_VAR 0 8
33765: PUSH
33766: LD_INT 4
33768: GREATER
33769: IFFALSE 33773
// break ;
33771: GO 33882
// x := personel [ i ] ;
33773: LD_ADDR_VAR 0 13
33777: PUSH
33778: LD_VAR 0 6
33782: PUSH
33783: LD_VAR 0 8
33787: ARRAY
33788: ST_TO_ADDR
// if x = - 1 then
33789: LD_VAR 0 13
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: EQUAL
33798: IFFALSE 33802
// continue ;
33800: GO 33758
// PrepareHuman ( false , i , skill ) ;
33802: LD_INT 0
33804: PPUSH
33805: LD_VAR 0 8
33809: PPUSH
33810: LD_VAR 0 4
33814: PPUSH
33815: CALL_OW 380
// un := CreateHuman ;
33819: LD_ADDR_VAR 0 14
33823: PUSH
33824: CALL_OW 44
33828: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33829: LD_VAR 0 14
33833: PPUSH
33834: LD_VAR 0 1
33838: PPUSH
33839: CALL_OW 250
33843: PPUSH
33844: LD_VAR 0 1
33848: PPUSH
33849: CALL_OW 251
33853: PPUSH
33854: LD_INT 10
33856: PPUSH
33857: LD_INT 0
33859: PPUSH
33860: CALL_OW 50
// result := result ^ un ;
33864: LD_ADDR_VAR 0 7
33868: PUSH
33869: LD_VAR 0 7
33873: PUSH
33874: LD_VAR 0 14
33878: ADD
33879: ST_TO_ADDR
// end ;
33880: GO 33758
33882: POP
33883: POP
// end ; end ;
33884: LD_VAR 0 7
33888: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33889: LD_INT 0
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
// result := false ;
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 0
33914: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33915: LD_VAR 0 1
33919: NOT
33920: PUSH
33921: LD_VAR 0 1
33925: PPUSH
33926: CALL_OW 266
33930: PUSH
33931: LD_INT 32
33933: PUSH
33934: LD_INT 33
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: IN
33941: NOT
33942: OR
33943: IFFALSE 33947
// exit ;
33945: GO 35056
// nat := GetNation ( tower ) ;
33947: LD_ADDR_VAR 0 12
33951: PUSH
33952: LD_VAR 0 1
33956: PPUSH
33957: CALL_OW 248
33961: ST_TO_ADDR
// side := GetSide ( tower ) ;
33962: LD_ADDR_VAR 0 16
33966: PUSH
33967: LD_VAR 0 1
33971: PPUSH
33972: CALL_OW 255
33976: ST_TO_ADDR
// x := GetX ( tower ) ;
33977: LD_ADDR_VAR 0 10
33981: PUSH
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 250
33991: ST_TO_ADDR
// y := GetY ( tower ) ;
33992: LD_ADDR_VAR 0 11
33996: PUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: CALL_OW 251
34006: ST_TO_ADDR
// if not x or not y then
34007: LD_VAR 0 10
34011: NOT
34012: PUSH
34013: LD_VAR 0 11
34017: NOT
34018: OR
34019: IFFALSE 34023
// exit ;
34021: GO 35056
// weapon := 0 ;
34023: LD_ADDR_VAR 0 18
34027: PUSH
34028: LD_INT 0
34030: ST_TO_ADDR
// fac_list := [ ] ;
34031: LD_ADDR_VAR 0 17
34035: PUSH
34036: EMPTY
34037: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34038: LD_ADDR_VAR 0 6
34042: PUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 274
34052: PPUSH
34053: LD_VAR 0 2
34057: PPUSH
34058: LD_INT 0
34060: PPUSH
34061: CALL 31627 0 3
34065: PPUSH
34066: LD_INT 30
34068: PUSH
34069: LD_INT 3
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PPUSH
34076: CALL_OW 72
34080: ST_TO_ADDR
// if not factories then
34081: LD_VAR 0 6
34085: NOT
34086: IFFALSE 34090
// exit ;
34088: GO 35056
// for i in factories do
34090: LD_ADDR_VAR 0 8
34094: PUSH
34095: LD_VAR 0 6
34099: PUSH
34100: FOR_IN
34101: IFFALSE 34126
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34103: LD_ADDR_VAR 0 17
34107: PUSH
34108: LD_VAR 0 17
34112: PUSH
34113: LD_VAR 0 8
34117: PPUSH
34118: CALL_OW 478
34122: UNION
34123: ST_TO_ADDR
34124: GO 34100
34126: POP
34127: POP
// if not fac_list then
34128: LD_VAR 0 17
34132: NOT
34133: IFFALSE 34137
// exit ;
34135: GO 35056
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34137: LD_ADDR_VAR 0 5
34141: PUSH
34142: LD_INT 4
34144: PUSH
34145: LD_INT 5
34147: PUSH
34148: LD_INT 9
34150: PUSH
34151: LD_INT 10
34153: PUSH
34154: LD_INT 6
34156: PUSH
34157: LD_INT 7
34159: PUSH
34160: LD_INT 11
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 27
34174: PUSH
34175: LD_INT 28
34177: PUSH
34178: LD_INT 26
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 43
34192: PUSH
34193: LD_INT 44
34195: PUSH
34196: LD_INT 46
34198: PUSH
34199: LD_INT 45
34201: PUSH
34202: LD_INT 47
34204: PUSH
34205: LD_INT 49
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: PUSH
34221: LD_VAR 0 12
34225: ARRAY
34226: ST_TO_ADDR
// list := list isect fac_list ;
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: LD_VAR 0 5
34236: PUSH
34237: LD_VAR 0 17
34241: ISECT
34242: ST_TO_ADDR
// if not list then
34243: LD_VAR 0 5
34247: NOT
34248: IFFALSE 34252
// exit ;
34250: GO 35056
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34252: LD_VAR 0 12
34256: PUSH
34257: LD_INT 3
34259: EQUAL
34260: PUSH
34261: LD_INT 49
34263: PUSH
34264: LD_VAR 0 5
34268: IN
34269: AND
34270: PUSH
34271: LD_INT 31
34273: PPUSH
34274: LD_VAR 0 16
34278: PPUSH
34279: CALL_OW 321
34283: PUSH
34284: LD_INT 2
34286: EQUAL
34287: AND
34288: IFFALSE 34348
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34290: LD_INT 22
34292: PUSH
34293: LD_VAR 0 16
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 35
34304: PUSH
34305: LD_INT 49
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 91
34314: PUSH
34315: LD_VAR 0 1
34319: PUSH
34320: LD_INT 10
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: PPUSH
34333: CALL_OW 69
34337: NOT
34338: IFFALSE 34348
// weapon := ru_time_lapser ;
34340: LD_ADDR_VAR 0 18
34344: PUSH
34345: LD_INT 49
34347: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34348: LD_VAR 0 12
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: IN
34363: PUSH
34364: LD_INT 11
34366: PUSH
34367: LD_VAR 0 5
34371: IN
34372: PUSH
34373: LD_INT 30
34375: PUSH
34376: LD_VAR 0 5
34380: IN
34381: OR
34382: AND
34383: PUSH
34384: LD_INT 6
34386: PPUSH
34387: LD_VAR 0 16
34391: PPUSH
34392: CALL_OW 321
34396: PUSH
34397: LD_INT 2
34399: EQUAL
34400: AND
34401: IFFALSE 34566
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34403: LD_INT 22
34405: PUSH
34406: LD_VAR 0 16
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 35
34420: PUSH
34421: LD_INT 11
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 35
34430: PUSH
34431: LD_INT 30
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 91
34445: PUSH
34446: LD_VAR 0 1
34450: PUSH
34451: LD_INT 18
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: PPUSH
34464: CALL_OW 69
34468: NOT
34469: PUSH
34470: LD_INT 22
34472: PUSH
34473: LD_VAR 0 16
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: LD_INT 30
34487: PUSH
34488: LD_INT 32
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 30
34497: PUSH
34498: LD_INT 33
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 91
34512: PUSH
34513: LD_VAR 0 1
34517: PUSH
34518: LD_INT 12
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: PPUSH
34534: CALL_OW 69
34538: PUSH
34539: LD_INT 2
34541: GREATER
34542: AND
34543: IFFALSE 34566
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34545: LD_ADDR_VAR 0 18
34549: PUSH
34550: LD_INT 11
34552: PUSH
34553: LD_INT 30
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_VAR 0 12
34564: ARRAY
34565: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34566: LD_VAR 0 18
34570: NOT
34571: PUSH
34572: LD_INT 40
34574: PPUSH
34575: LD_VAR 0 16
34579: PPUSH
34580: CALL_OW 321
34584: PUSH
34585: LD_INT 2
34587: EQUAL
34588: AND
34589: PUSH
34590: LD_INT 7
34592: PUSH
34593: LD_VAR 0 5
34597: IN
34598: PUSH
34599: LD_INT 28
34601: PUSH
34602: LD_VAR 0 5
34606: IN
34607: OR
34608: PUSH
34609: LD_INT 45
34611: PUSH
34612: LD_VAR 0 5
34616: IN
34617: OR
34618: AND
34619: IFFALSE 34873
// begin hex := GetHexInfo ( x , y ) ;
34621: LD_ADDR_VAR 0 4
34625: PUSH
34626: LD_VAR 0 10
34630: PPUSH
34631: LD_VAR 0 11
34635: PPUSH
34636: CALL_OW 546
34640: ST_TO_ADDR
// if hex [ 1 ] then
34641: LD_VAR 0 4
34645: PUSH
34646: LD_INT 1
34648: ARRAY
34649: IFFALSE 34653
// exit ;
34651: GO 35056
// height := hex [ 2 ] ;
34653: LD_ADDR_VAR 0 15
34657: PUSH
34658: LD_VAR 0 4
34662: PUSH
34663: LD_INT 2
34665: ARRAY
34666: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34667: LD_ADDR_VAR 0 14
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 3
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: ST_TO_ADDR
// for i in tmp do
34690: LD_ADDR_VAR 0 8
34694: PUSH
34695: LD_VAR 0 14
34699: PUSH
34700: FOR_IN
34701: IFFALSE 34871
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34703: LD_ADDR_VAR 0 9
34707: PUSH
34708: LD_VAR 0 10
34712: PPUSH
34713: LD_VAR 0 8
34717: PPUSH
34718: LD_INT 5
34720: PPUSH
34721: CALL_OW 272
34725: PUSH
34726: LD_VAR 0 11
34730: PPUSH
34731: LD_VAR 0 8
34735: PPUSH
34736: LD_INT 5
34738: PPUSH
34739: CALL_OW 273
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34748: LD_VAR 0 9
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: PPUSH
34757: LD_VAR 0 9
34761: PUSH
34762: LD_INT 2
34764: ARRAY
34765: PPUSH
34766: CALL_OW 488
34770: IFFALSE 34869
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34772: LD_ADDR_VAR 0 4
34776: PUSH
34777: LD_VAR 0 9
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: PPUSH
34786: LD_VAR 0 9
34790: PUSH
34791: LD_INT 2
34793: ARRAY
34794: PPUSH
34795: CALL_OW 546
34799: ST_TO_ADDR
// if hex [ 1 ] then
34800: LD_VAR 0 4
34804: PUSH
34805: LD_INT 1
34807: ARRAY
34808: IFFALSE 34812
// continue ;
34810: GO 34700
// h := hex [ 2 ] ;
34812: LD_ADDR_VAR 0 13
34816: PUSH
34817: LD_VAR 0 4
34821: PUSH
34822: LD_INT 2
34824: ARRAY
34825: ST_TO_ADDR
// if h + 7 < height then
34826: LD_VAR 0 13
34830: PUSH
34831: LD_INT 7
34833: PLUS
34834: PUSH
34835: LD_VAR 0 15
34839: LESS
34840: IFFALSE 34869
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34842: LD_ADDR_VAR 0 18
34846: PUSH
34847: LD_INT 7
34849: PUSH
34850: LD_INT 28
34852: PUSH
34853: LD_INT 45
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: PUSH
34861: LD_VAR 0 12
34865: ARRAY
34866: ST_TO_ADDR
// break ;
34867: GO 34871
// end ; end ; end ;
34869: GO 34700
34871: POP
34872: POP
// end ; if not weapon then
34873: LD_VAR 0 18
34877: NOT
34878: IFFALSE 34938
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34880: LD_ADDR_VAR 0 5
34884: PUSH
34885: LD_VAR 0 5
34889: PUSH
34890: LD_INT 11
34892: PUSH
34893: LD_INT 30
34895: PUSH
34896: LD_INT 49
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: DIFF
34904: ST_TO_ADDR
// if not list then
34905: LD_VAR 0 5
34909: NOT
34910: IFFALSE 34914
// exit ;
34912: GO 35056
// weapon := list [ rand ( 1 , list ) ] ;
34914: LD_ADDR_VAR 0 18
34918: PUSH
34919: LD_VAR 0 5
34923: PUSH
34924: LD_INT 1
34926: PPUSH
34927: LD_VAR 0 5
34931: PPUSH
34932: CALL_OW 12
34936: ARRAY
34937: ST_TO_ADDR
// end ; if weapon then
34938: LD_VAR 0 18
34942: IFFALSE 35056
// begin tmp := CostOfWeapon ( weapon ) ;
34944: LD_ADDR_VAR 0 14
34948: PUSH
34949: LD_VAR 0 18
34953: PPUSH
34954: CALL_OW 451
34958: ST_TO_ADDR
// j := GetBase ( tower ) ;
34959: LD_ADDR_VAR 0 9
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 274
34973: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34974: LD_VAR 0 9
34978: PPUSH
34979: LD_INT 1
34981: PPUSH
34982: CALL_OW 275
34986: PUSH
34987: LD_VAR 0 14
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: GREATEREQUAL
34996: PUSH
34997: LD_VAR 0 9
35001: PPUSH
35002: LD_INT 2
35004: PPUSH
35005: CALL_OW 275
35009: PUSH
35010: LD_VAR 0 14
35014: PUSH
35015: LD_INT 2
35017: ARRAY
35018: GREATEREQUAL
35019: AND
35020: PUSH
35021: LD_VAR 0 9
35025: PPUSH
35026: LD_INT 3
35028: PPUSH
35029: CALL_OW 275
35033: PUSH
35034: LD_VAR 0 14
35038: PUSH
35039: LD_INT 3
35041: ARRAY
35042: GREATEREQUAL
35043: AND
35044: IFFALSE 35056
// result := weapon ;
35046: LD_ADDR_VAR 0 3
35050: PUSH
35051: LD_VAR 0 18
35055: ST_TO_ADDR
// end ; end ;
35056: LD_VAR 0 3
35060: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35061: LD_INT 0
35063: PPUSH
35064: PPUSH
// result := true ;
35065: LD_ADDR_VAR 0 3
35069: PUSH
35070: LD_INT 1
35072: ST_TO_ADDR
// if array1 = array2 then
35073: LD_VAR 0 1
35077: PUSH
35078: LD_VAR 0 2
35082: EQUAL
35083: IFFALSE 35143
// begin for i = 1 to array1 do
35085: LD_ADDR_VAR 0 4
35089: PUSH
35090: DOUBLE
35091: LD_INT 1
35093: DEC
35094: ST_TO_ADDR
35095: LD_VAR 0 1
35099: PUSH
35100: FOR_TO
35101: IFFALSE 35139
// if array1 [ i ] <> array2 [ i ] then
35103: LD_VAR 0 1
35107: PUSH
35108: LD_VAR 0 4
35112: ARRAY
35113: PUSH
35114: LD_VAR 0 2
35118: PUSH
35119: LD_VAR 0 4
35123: ARRAY
35124: NONEQUAL
35125: IFFALSE 35137
// begin result := false ;
35127: LD_ADDR_VAR 0 3
35131: PUSH
35132: LD_INT 0
35134: ST_TO_ADDR
// break ;
35135: GO 35139
// end ;
35137: GO 35100
35139: POP
35140: POP
// end else
35141: GO 35151
// result := false ;
35143: LD_ADDR_VAR 0 3
35147: PUSH
35148: LD_INT 0
35150: ST_TO_ADDR
// end ;
35151: LD_VAR 0 3
35155: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35156: LD_INT 0
35158: PPUSH
35159: PPUSH
// if not array1 or not array2 then
35160: LD_VAR 0 1
35164: NOT
35165: PUSH
35166: LD_VAR 0 2
35170: NOT
35171: OR
35172: IFFALSE 35176
// exit ;
35174: GO 35240
// result := true ;
35176: LD_ADDR_VAR 0 3
35180: PUSH
35181: LD_INT 1
35183: ST_TO_ADDR
// for i = 1 to array1 do
35184: LD_ADDR_VAR 0 4
35188: PUSH
35189: DOUBLE
35190: LD_INT 1
35192: DEC
35193: ST_TO_ADDR
35194: LD_VAR 0 1
35198: PUSH
35199: FOR_TO
35200: IFFALSE 35238
// if array1 [ i ] <> array2 [ i ] then
35202: LD_VAR 0 1
35206: PUSH
35207: LD_VAR 0 4
35211: ARRAY
35212: PUSH
35213: LD_VAR 0 2
35217: PUSH
35218: LD_VAR 0 4
35222: ARRAY
35223: NONEQUAL
35224: IFFALSE 35236
// begin result := false ;
35226: LD_ADDR_VAR 0 3
35230: PUSH
35231: LD_INT 0
35233: ST_TO_ADDR
// break ;
35234: GO 35238
// end ;
35236: GO 35199
35238: POP
35239: POP
// end ;
35240: LD_VAR 0 3
35244: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35245: LD_INT 0
35247: PPUSH
35248: PPUSH
35249: PPUSH
// pom := GetBase ( fac ) ;
35250: LD_ADDR_VAR 0 5
35254: PUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 274
35264: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35265: LD_ADDR_VAR 0 4
35269: PUSH
35270: LD_VAR 0 2
35274: PUSH
35275: LD_INT 1
35277: ARRAY
35278: PPUSH
35279: LD_VAR 0 2
35283: PUSH
35284: LD_INT 2
35286: ARRAY
35287: PPUSH
35288: LD_VAR 0 2
35292: PUSH
35293: LD_INT 3
35295: ARRAY
35296: PPUSH
35297: LD_VAR 0 2
35301: PUSH
35302: LD_INT 4
35304: ARRAY
35305: PPUSH
35306: CALL_OW 449
35310: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_VAR 0 5
35320: PPUSH
35321: LD_INT 1
35323: PPUSH
35324: CALL_OW 275
35328: PUSH
35329: LD_VAR 0 4
35333: PUSH
35334: LD_INT 1
35336: ARRAY
35337: GREATEREQUAL
35338: PUSH
35339: LD_VAR 0 5
35343: PPUSH
35344: LD_INT 2
35346: PPUSH
35347: CALL_OW 275
35351: PUSH
35352: LD_VAR 0 4
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: GREATEREQUAL
35361: AND
35362: PUSH
35363: LD_VAR 0 5
35367: PPUSH
35368: LD_INT 3
35370: PPUSH
35371: CALL_OW 275
35375: PUSH
35376: LD_VAR 0 4
35380: PUSH
35381: LD_INT 3
35383: ARRAY
35384: GREATEREQUAL
35385: AND
35386: ST_TO_ADDR
// end ;
35387: LD_VAR 0 3
35391: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35392: LD_INT 0
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
// pom := GetBase ( building ) ;
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 274
35412: ST_TO_ADDR
// if not pom then
35413: LD_VAR 0 3
35417: NOT
35418: IFFALSE 35422
// exit ;
35420: GO 35592
// btype := GetBType ( building ) ;
35422: LD_ADDR_VAR 0 5
35426: PUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: CALL_OW 266
35436: ST_TO_ADDR
// if btype = b_armoury then
35437: LD_VAR 0 5
35441: PUSH
35442: LD_INT 4
35444: EQUAL
35445: IFFALSE 35455
// btype := b_barracks ;
35447: LD_ADDR_VAR 0 5
35451: PUSH
35452: LD_INT 5
35454: ST_TO_ADDR
// if btype = b_depot then
35455: LD_VAR 0 5
35459: PUSH
35460: LD_INT 0
35462: EQUAL
35463: IFFALSE 35473
// btype := b_warehouse ;
35465: LD_ADDR_VAR 0 5
35469: PUSH
35470: LD_INT 1
35472: ST_TO_ADDR
// if btype = b_workshop then
35473: LD_VAR 0 5
35477: PUSH
35478: LD_INT 2
35480: EQUAL
35481: IFFALSE 35491
// btype := b_factory ;
35483: LD_ADDR_VAR 0 5
35487: PUSH
35488: LD_INT 3
35490: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35491: LD_ADDR_VAR 0 4
35495: PUSH
35496: LD_VAR 0 5
35500: PPUSH
35501: LD_VAR 0 1
35505: PPUSH
35506: CALL_OW 248
35510: PPUSH
35511: CALL_OW 450
35515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35516: LD_ADDR_VAR 0 2
35520: PUSH
35521: LD_VAR 0 3
35525: PPUSH
35526: LD_INT 1
35528: PPUSH
35529: CALL_OW 275
35533: PUSH
35534: LD_VAR 0 4
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: GREATEREQUAL
35543: PUSH
35544: LD_VAR 0 3
35548: PPUSH
35549: LD_INT 2
35551: PPUSH
35552: CALL_OW 275
35556: PUSH
35557: LD_VAR 0 4
35561: PUSH
35562: LD_INT 2
35564: ARRAY
35565: GREATEREQUAL
35566: AND
35567: PUSH
35568: LD_VAR 0 3
35572: PPUSH
35573: LD_INT 3
35575: PPUSH
35576: CALL_OW 275
35580: PUSH
35581: LD_VAR 0 4
35585: PUSH
35586: LD_INT 3
35588: ARRAY
35589: GREATEREQUAL
35590: AND
35591: ST_TO_ADDR
// end ;
35592: LD_VAR 0 2
35596: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35597: LD_INT 0
35599: PPUSH
35600: PPUSH
35601: PPUSH
// pom := GetBase ( building ) ;
35602: LD_ADDR_VAR 0 4
35606: PUSH
35607: LD_VAR 0 1
35611: PPUSH
35612: CALL_OW 274
35616: ST_TO_ADDR
// if not pom then
35617: LD_VAR 0 4
35621: NOT
35622: IFFALSE 35626
// exit ;
35624: GO 35727
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35626: LD_ADDR_VAR 0 5
35630: PUSH
35631: LD_VAR 0 2
35635: PPUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: CALL_OW 248
35645: PPUSH
35646: CALL_OW 450
35650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35651: LD_ADDR_VAR 0 3
35655: PUSH
35656: LD_VAR 0 4
35660: PPUSH
35661: LD_INT 1
35663: PPUSH
35664: CALL_OW 275
35668: PUSH
35669: LD_VAR 0 5
35673: PUSH
35674: LD_INT 1
35676: ARRAY
35677: GREATEREQUAL
35678: PUSH
35679: LD_VAR 0 4
35683: PPUSH
35684: LD_INT 2
35686: PPUSH
35687: CALL_OW 275
35691: PUSH
35692: LD_VAR 0 5
35696: PUSH
35697: LD_INT 2
35699: ARRAY
35700: GREATEREQUAL
35701: AND
35702: PUSH
35703: LD_VAR 0 4
35707: PPUSH
35708: LD_INT 3
35710: PPUSH
35711: CALL_OW 275
35715: PUSH
35716: LD_VAR 0 5
35720: PUSH
35721: LD_INT 3
35723: ARRAY
35724: GREATEREQUAL
35725: AND
35726: ST_TO_ADDR
// end ;
35727: LD_VAR 0 3
35731: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35732: LD_INT 0
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
// result := false ;
35745: LD_ADDR_VAR 0 8
35749: PUSH
35750: LD_INT 0
35752: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35753: LD_VAR 0 5
35757: NOT
35758: PUSH
35759: LD_VAR 0 1
35763: NOT
35764: OR
35765: PUSH
35766: LD_VAR 0 2
35770: NOT
35771: OR
35772: PUSH
35773: LD_VAR 0 3
35777: NOT
35778: OR
35779: IFFALSE 35783
// exit ;
35781: GO 36597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35783: LD_ADDR_VAR 0 14
35787: PUSH
35788: LD_VAR 0 1
35792: PPUSH
35793: LD_VAR 0 2
35797: PPUSH
35798: LD_VAR 0 3
35802: PPUSH
35803: LD_VAR 0 4
35807: PPUSH
35808: LD_VAR 0 5
35812: PUSH
35813: LD_INT 1
35815: ARRAY
35816: PPUSH
35817: CALL_OW 248
35821: PPUSH
35822: LD_INT 0
35824: PPUSH
35825: CALL 37850 0 6
35829: ST_TO_ADDR
// if not hexes then
35830: LD_VAR 0 14
35834: NOT
35835: IFFALSE 35839
// exit ;
35837: GO 36597
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35839: LD_ADDR_VAR 0 17
35843: PUSH
35844: LD_VAR 0 5
35848: PPUSH
35849: LD_INT 22
35851: PUSH
35852: LD_VAR 0 13
35856: PPUSH
35857: CALL_OW 255
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: LD_INT 30
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 30
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PPUSH
35898: CALL_OW 72
35902: ST_TO_ADDR
// for i = 1 to hexes do
35903: LD_ADDR_VAR 0 9
35907: PUSH
35908: DOUBLE
35909: LD_INT 1
35911: DEC
35912: ST_TO_ADDR
35913: LD_VAR 0 14
35917: PUSH
35918: FOR_TO
35919: IFFALSE 36595
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35921: LD_ADDR_VAR 0 13
35925: PUSH
35926: LD_VAR 0 14
35930: PUSH
35931: LD_VAR 0 9
35935: ARRAY
35936: PUSH
35937: LD_INT 1
35939: ARRAY
35940: PPUSH
35941: LD_VAR 0 14
35945: PUSH
35946: LD_VAR 0 9
35950: ARRAY
35951: PUSH
35952: LD_INT 2
35954: ARRAY
35955: PPUSH
35956: CALL_OW 428
35960: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35961: LD_VAR 0 14
35965: PUSH
35966: LD_VAR 0 9
35970: ARRAY
35971: PUSH
35972: LD_INT 1
35974: ARRAY
35975: PPUSH
35976: LD_VAR 0 14
35980: PUSH
35981: LD_VAR 0 9
35985: ARRAY
35986: PUSH
35987: LD_INT 2
35989: ARRAY
35990: PPUSH
35991: CALL_OW 351
35995: PUSH
35996: LD_VAR 0 14
36000: PUSH
36001: LD_VAR 0 9
36005: ARRAY
36006: PUSH
36007: LD_INT 1
36009: ARRAY
36010: PPUSH
36011: LD_VAR 0 14
36015: PUSH
36016: LD_VAR 0 9
36020: ARRAY
36021: PUSH
36022: LD_INT 2
36024: ARRAY
36025: PPUSH
36026: CALL_OW 488
36030: NOT
36031: OR
36032: PUSH
36033: LD_VAR 0 13
36037: PPUSH
36038: CALL_OW 247
36042: PUSH
36043: LD_INT 3
36045: EQUAL
36046: OR
36047: IFFALSE 36053
// exit ;
36049: POP
36050: POP
36051: GO 36597
// if not tmp then
36053: LD_VAR 0 13
36057: NOT
36058: IFFALSE 36062
// continue ;
36060: GO 35918
// result := true ;
36062: LD_ADDR_VAR 0 8
36066: PUSH
36067: LD_INT 1
36069: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36070: LD_VAR 0 6
36074: PUSH
36075: LD_VAR 0 13
36079: PPUSH
36080: CALL_OW 247
36084: PUSH
36085: LD_INT 2
36087: EQUAL
36088: AND
36089: PUSH
36090: LD_VAR 0 13
36094: PPUSH
36095: CALL_OW 263
36099: PUSH
36100: LD_INT 1
36102: EQUAL
36103: AND
36104: IFFALSE 36268
// begin if IsDrivenBy ( tmp ) then
36106: LD_VAR 0 13
36110: PPUSH
36111: CALL_OW 311
36115: IFFALSE 36119
// continue ;
36117: GO 35918
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36119: LD_VAR 0 6
36123: PPUSH
36124: LD_INT 3
36126: PUSH
36127: LD_INT 60
36129: PUSH
36130: EMPTY
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 3
36139: PUSH
36140: LD_INT 55
36142: PUSH
36143: EMPTY
36144: LIST
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PPUSH
36154: CALL_OW 72
36158: IFFALSE 36266
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36160: LD_ADDR_VAR 0 18
36164: PUSH
36165: LD_VAR 0 6
36169: PPUSH
36170: LD_INT 3
36172: PUSH
36173: LD_INT 60
36175: PUSH
36176: EMPTY
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 3
36185: PUSH
36186: LD_INT 55
36188: PUSH
36189: EMPTY
36190: LIST
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PPUSH
36200: CALL_OW 72
36204: PUSH
36205: LD_INT 1
36207: ARRAY
36208: ST_TO_ADDR
// if IsInUnit ( driver ) then
36209: LD_VAR 0 18
36213: PPUSH
36214: CALL_OW 310
36218: IFFALSE 36229
// ComExit ( driver ) ;
36220: LD_VAR 0 18
36224: PPUSH
36225: CALL 61631 0 1
// AddComEnterUnit ( driver , tmp ) ;
36229: LD_VAR 0 18
36233: PPUSH
36234: LD_VAR 0 13
36238: PPUSH
36239: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36243: LD_VAR 0 18
36247: PPUSH
36248: LD_VAR 0 7
36252: PPUSH
36253: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36257: LD_VAR 0 18
36261: PPUSH
36262: CALL_OW 181
// end ; continue ;
36266: GO 35918
// end ; if not cleaners or not tmp in cleaners then
36268: LD_VAR 0 6
36272: NOT
36273: PUSH
36274: LD_VAR 0 13
36278: PUSH
36279: LD_VAR 0 6
36283: IN
36284: NOT
36285: OR
36286: IFFALSE 36593
// begin if dep then
36288: LD_VAR 0 17
36292: IFFALSE 36428
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36294: LD_ADDR_VAR 0 16
36298: PUSH
36299: LD_VAR 0 17
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PPUSH
36308: CALL_OW 250
36312: PPUSH
36313: LD_VAR 0 17
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: CALL_OW 254
36326: PPUSH
36327: LD_INT 5
36329: PPUSH
36330: CALL_OW 272
36334: PUSH
36335: LD_VAR 0 17
36339: PUSH
36340: LD_INT 1
36342: ARRAY
36343: PPUSH
36344: CALL_OW 251
36348: PPUSH
36349: LD_VAR 0 17
36353: PUSH
36354: LD_INT 1
36356: ARRAY
36357: PPUSH
36358: CALL_OW 254
36362: PPUSH
36363: LD_INT 5
36365: PPUSH
36366: CALL_OW 273
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36375: LD_VAR 0 16
36379: PUSH
36380: LD_INT 1
36382: ARRAY
36383: PPUSH
36384: LD_VAR 0 16
36388: PUSH
36389: LD_INT 2
36391: ARRAY
36392: PPUSH
36393: CALL_OW 488
36397: IFFALSE 36428
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36399: LD_VAR 0 13
36403: PPUSH
36404: LD_VAR 0 16
36408: PUSH
36409: LD_INT 1
36411: ARRAY
36412: PPUSH
36413: LD_VAR 0 16
36417: PUSH
36418: LD_INT 2
36420: ARRAY
36421: PPUSH
36422: CALL_OW 111
// continue ;
36426: GO 35918
// end ; end ; r := GetDir ( tmp ) ;
36428: LD_ADDR_VAR 0 15
36432: PUSH
36433: LD_VAR 0 13
36437: PPUSH
36438: CALL_OW 254
36442: ST_TO_ADDR
// if r = 5 then
36443: LD_VAR 0 15
36447: PUSH
36448: LD_INT 5
36450: EQUAL
36451: IFFALSE 36461
// r := 0 ;
36453: LD_ADDR_VAR 0 15
36457: PUSH
36458: LD_INT 0
36460: ST_TO_ADDR
// for j = r to 5 do
36461: LD_ADDR_VAR 0 10
36465: PUSH
36466: DOUBLE
36467: LD_VAR 0 15
36471: DEC
36472: ST_TO_ADDR
36473: LD_INT 5
36475: PUSH
36476: FOR_TO
36477: IFFALSE 36591
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36479: LD_ADDR_VAR 0 11
36483: PUSH
36484: LD_VAR 0 13
36488: PPUSH
36489: CALL_OW 250
36493: PPUSH
36494: LD_VAR 0 10
36498: PPUSH
36499: LD_INT 2
36501: PPUSH
36502: CALL_OW 272
36506: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36507: LD_ADDR_VAR 0 12
36511: PUSH
36512: LD_VAR 0 13
36516: PPUSH
36517: CALL_OW 251
36521: PPUSH
36522: LD_VAR 0 10
36526: PPUSH
36527: LD_INT 2
36529: PPUSH
36530: CALL_OW 273
36534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36535: LD_VAR 0 11
36539: PPUSH
36540: LD_VAR 0 12
36544: PPUSH
36545: CALL_OW 488
36549: PUSH
36550: LD_VAR 0 11
36554: PPUSH
36555: LD_VAR 0 12
36559: PPUSH
36560: CALL_OW 428
36564: NOT
36565: AND
36566: IFFALSE 36589
// begin ComMoveXY ( tmp , _x , _y ) ;
36568: LD_VAR 0 13
36572: PPUSH
36573: LD_VAR 0 11
36577: PPUSH
36578: LD_VAR 0 12
36582: PPUSH
36583: CALL_OW 111
// break ;
36587: GO 36591
// end ; end ;
36589: GO 36476
36591: POP
36592: POP
// end ; end ;
36593: GO 35918
36595: POP
36596: POP
// end ;
36597: LD_VAR 0 8
36601: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36602: LD_INT 0
36604: PPUSH
// result := true ;
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: LD_INT 1
36612: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36613: LD_VAR 0 2
36617: PUSH
36618: LD_INT 24
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36632
36624: LD_INT 33
36626: DOUBLE
36627: EQUAL
36628: IFTRUE 36632
36630: GO 36657
36632: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36633: LD_ADDR_VAR 0 3
36637: PUSH
36638: LD_INT 32
36640: PPUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 321
36650: PUSH
36651: LD_INT 2
36653: EQUAL
36654: ST_TO_ADDR
36655: GO 36973
36657: LD_INT 20
36659: DOUBLE
36660: EQUAL
36661: IFTRUE 36665
36663: GO 36690
36665: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_INT 6
36673: PPUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 321
36683: PUSH
36684: LD_INT 2
36686: EQUAL
36687: ST_TO_ADDR
36688: GO 36973
36690: LD_INT 22
36692: DOUBLE
36693: EQUAL
36694: IFTRUE 36704
36696: LD_INT 36
36698: DOUBLE
36699: EQUAL
36700: IFTRUE 36704
36702: GO 36729
36704: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36705: LD_ADDR_VAR 0 3
36709: PUSH
36710: LD_INT 15
36712: PPUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 321
36722: PUSH
36723: LD_INT 2
36725: EQUAL
36726: ST_TO_ADDR
36727: GO 36973
36729: LD_INT 30
36731: DOUBLE
36732: EQUAL
36733: IFTRUE 36737
36735: GO 36762
36737: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36738: LD_ADDR_VAR 0 3
36742: PUSH
36743: LD_INT 20
36745: PPUSH
36746: LD_VAR 0 1
36750: PPUSH
36751: CALL_OW 321
36755: PUSH
36756: LD_INT 2
36758: EQUAL
36759: ST_TO_ADDR
36760: GO 36973
36762: LD_INT 28
36764: DOUBLE
36765: EQUAL
36766: IFTRUE 36776
36768: LD_INT 21
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36776
36774: GO 36801
36776: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36777: LD_ADDR_VAR 0 3
36781: PUSH
36782: LD_INT 21
36784: PPUSH
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 321
36794: PUSH
36795: LD_INT 2
36797: EQUAL
36798: ST_TO_ADDR
36799: GO 36973
36801: LD_INT 16
36803: DOUBLE
36804: EQUAL
36805: IFTRUE 36809
36807: GO 36834
36809: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36810: LD_ADDR_VAR 0 3
36814: PUSH
36815: LD_INT 84
36817: PPUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 321
36827: PUSH
36828: LD_INT 2
36830: EQUAL
36831: ST_TO_ADDR
36832: GO 36973
36834: LD_INT 19
36836: DOUBLE
36837: EQUAL
36838: IFTRUE 36848
36840: LD_INT 23
36842: DOUBLE
36843: EQUAL
36844: IFTRUE 36848
36846: GO 36873
36848: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36849: LD_ADDR_VAR 0 3
36853: PUSH
36854: LD_INT 83
36856: PPUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 321
36866: PUSH
36867: LD_INT 2
36869: EQUAL
36870: ST_TO_ADDR
36871: GO 36973
36873: LD_INT 17
36875: DOUBLE
36876: EQUAL
36877: IFTRUE 36881
36879: GO 36906
36881: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36882: LD_ADDR_VAR 0 3
36886: PUSH
36887: LD_INT 39
36889: PPUSH
36890: LD_VAR 0 1
36894: PPUSH
36895: CALL_OW 321
36899: PUSH
36900: LD_INT 2
36902: EQUAL
36903: ST_TO_ADDR
36904: GO 36973
36906: LD_INT 18
36908: DOUBLE
36909: EQUAL
36910: IFTRUE 36914
36912: GO 36939
36914: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36915: LD_ADDR_VAR 0 3
36919: PUSH
36920: LD_INT 40
36922: PPUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 321
36932: PUSH
36933: LD_INT 2
36935: EQUAL
36936: ST_TO_ADDR
36937: GO 36973
36939: LD_INT 27
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 36972
36947: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36948: LD_ADDR_VAR 0 3
36952: PUSH
36953: LD_INT 35
36955: PPUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 321
36965: PUSH
36966: LD_INT 2
36968: EQUAL
36969: ST_TO_ADDR
36970: GO 36973
36972: POP
// end ;
36973: LD_VAR 0 3
36977: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
36982: PPUSH
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
36990: PPUSH
// result := false ;
36991: LD_ADDR_VAR 0 6
36995: PUSH
36996: LD_INT 0
36998: ST_TO_ADDR
// if btype = b_depot then
36999: LD_VAR 0 2
37003: PUSH
37004: LD_INT 0
37006: EQUAL
37007: IFFALSE 37019
// begin result := true ;
37009: LD_ADDR_VAR 0 6
37013: PUSH
37014: LD_INT 1
37016: ST_TO_ADDR
// exit ;
37017: GO 37845
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37019: LD_VAR 0 1
37023: NOT
37024: PUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 266
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: IN
37045: NOT
37046: OR
37047: PUSH
37048: LD_VAR 0 2
37052: NOT
37053: OR
37054: PUSH
37055: LD_VAR 0 5
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 3
37071: PUSH
37072: LD_INT 4
37074: PUSH
37075: LD_INT 5
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: IN
37086: NOT
37087: OR
37088: PUSH
37089: LD_VAR 0 3
37093: PPUSH
37094: LD_VAR 0 4
37098: PPUSH
37099: CALL_OW 488
37103: NOT
37104: OR
37105: IFFALSE 37109
// exit ;
37107: GO 37845
// side := GetSide ( depot ) ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: CALL_OW 255
37123: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37124: LD_VAR 0 9
37128: PPUSH
37129: LD_VAR 0 2
37133: PPUSH
37134: CALL 36602 0 2
37138: NOT
37139: IFFALSE 37143
// exit ;
37141: GO 37845
// pom := GetBase ( depot ) ;
37143: LD_ADDR_VAR 0 10
37147: PUSH
37148: LD_VAR 0 1
37152: PPUSH
37153: CALL_OW 274
37157: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37158: LD_ADDR_VAR 0 11
37162: PUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL_OW 248
37177: PPUSH
37178: CALL_OW 450
37182: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37183: LD_VAR 0 10
37187: PPUSH
37188: LD_INT 1
37190: PPUSH
37191: CALL_OW 275
37195: PUSH
37196: LD_VAR 0 11
37200: PUSH
37201: LD_INT 1
37203: ARRAY
37204: GREATEREQUAL
37205: PUSH
37206: LD_VAR 0 10
37210: PPUSH
37211: LD_INT 2
37213: PPUSH
37214: CALL_OW 275
37218: PUSH
37219: LD_VAR 0 11
37223: PUSH
37224: LD_INT 2
37226: ARRAY
37227: GREATEREQUAL
37228: AND
37229: PUSH
37230: LD_VAR 0 10
37234: PPUSH
37235: LD_INT 3
37237: PPUSH
37238: CALL_OW 275
37242: PUSH
37243: LD_VAR 0 11
37247: PUSH
37248: LD_INT 3
37250: ARRAY
37251: GREATEREQUAL
37252: AND
37253: NOT
37254: IFFALSE 37258
// exit ;
37256: GO 37845
// if GetBType ( depot ) = b_depot then
37258: LD_VAR 0 1
37262: PPUSH
37263: CALL_OW 266
37267: PUSH
37268: LD_INT 0
37270: EQUAL
37271: IFFALSE 37283
// dist := 28 else
37273: LD_ADDR_VAR 0 14
37277: PUSH
37278: LD_INT 28
37280: ST_TO_ADDR
37281: GO 37291
// dist := 36 ;
37283: LD_ADDR_VAR 0 14
37287: PUSH
37288: LD_INT 36
37290: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37291: LD_VAR 0 1
37295: PPUSH
37296: LD_VAR 0 3
37300: PPUSH
37301: LD_VAR 0 4
37305: PPUSH
37306: CALL_OW 297
37310: PUSH
37311: LD_VAR 0 14
37315: GREATER
37316: IFFALSE 37320
// exit ;
37318: GO 37845
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37320: LD_ADDR_VAR 0 12
37324: PUSH
37325: LD_VAR 0 2
37329: PPUSH
37330: LD_VAR 0 3
37334: PPUSH
37335: LD_VAR 0 4
37339: PPUSH
37340: LD_VAR 0 5
37344: PPUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 248
37354: PPUSH
37355: LD_INT 0
37357: PPUSH
37358: CALL 37850 0 6
37362: ST_TO_ADDR
// if not hexes then
37363: LD_VAR 0 12
37367: NOT
37368: IFFALSE 37372
// exit ;
37370: GO 37845
// hex := GetHexInfo ( x , y ) ;
37372: LD_ADDR_VAR 0 15
37376: PUSH
37377: LD_VAR 0 3
37381: PPUSH
37382: LD_VAR 0 4
37386: PPUSH
37387: CALL_OW 546
37391: ST_TO_ADDR
// if hex [ 1 ] then
37392: LD_VAR 0 15
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: IFFALSE 37404
// exit ;
37402: GO 37845
// height := hex [ 2 ] ;
37404: LD_ADDR_VAR 0 13
37408: PUSH
37409: LD_VAR 0 15
37413: PUSH
37414: LD_INT 2
37416: ARRAY
37417: ST_TO_ADDR
// for i = 1 to hexes do
37418: LD_ADDR_VAR 0 7
37422: PUSH
37423: DOUBLE
37424: LD_INT 1
37426: DEC
37427: ST_TO_ADDR
37428: LD_VAR 0 12
37432: PUSH
37433: FOR_TO
37434: IFFALSE 37764
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37436: LD_VAR 0 12
37440: PUSH
37441: LD_VAR 0 7
37445: ARRAY
37446: PUSH
37447: LD_INT 1
37449: ARRAY
37450: PPUSH
37451: LD_VAR 0 12
37455: PUSH
37456: LD_VAR 0 7
37460: ARRAY
37461: PUSH
37462: LD_INT 2
37464: ARRAY
37465: PPUSH
37466: CALL_OW 488
37470: NOT
37471: PUSH
37472: LD_VAR 0 12
37476: PUSH
37477: LD_VAR 0 7
37481: ARRAY
37482: PUSH
37483: LD_INT 1
37485: ARRAY
37486: PPUSH
37487: LD_VAR 0 12
37491: PUSH
37492: LD_VAR 0 7
37496: ARRAY
37497: PUSH
37498: LD_INT 2
37500: ARRAY
37501: PPUSH
37502: CALL_OW 428
37506: PUSH
37507: LD_INT 0
37509: GREATER
37510: OR
37511: PUSH
37512: LD_VAR 0 12
37516: PUSH
37517: LD_VAR 0 7
37521: ARRAY
37522: PUSH
37523: LD_INT 1
37525: ARRAY
37526: PPUSH
37527: LD_VAR 0 12
37531: PUSH
37532: LD_VAR 0 7
37536: ARRAY
37537: PUSH
37538: LD_INT 2
37540: ARRAY
37541: PPUSH
37542: CALL_OW 351
37546: OR
37547: IFFALSE 37553
// exit ;
37549: POP
37550: POP
37551: GO 37845
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37553: LD_ADDR_VAR 0 8
37557: PUSH
37558: LD_VAR 0 12
37562: PUSH
37563: LD_VAR 0 7
37567: ARRAY
37568: PUSH
37569: LD_INT 1
37571: ARRAY
37572: PPUSH
37573: LD_VAR 0 12
37577: PUSH
37578: LD_VAR 0 7
37582: ARRAY
37583: PUSH
37584: LD_INT 2
37586: ARRAY
37587: PPUSH
37588: CALL_OW 546
37592: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37593: LD_VAR 0 8
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: PUSH
37602: LD_VAR 0 8
37606: PUSH
37607: LD_INT 2
37609: ARRAY
37610: PUSH
37611: LD_VAR 0 13
37615: PUSH
37616: LD_INT 2
37618: PLUS
37619: GREATER
37620: OR
37621: PUSH
37622: LD_VAR 0 8
37626: PUSH
37627: LD_INT 2
37629: ARRAY
37630: PUSH
37631: LD_VAR 0 13
37635: PUSH
37636: LD_INT 2
37638: MINUS
37639: LESS
37640: OR
37641: PUSH
37642: LD_VAR 0 8
37646: PUSH
37647: LD_INT 3
37649: ARRAY
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 8
37656: PUSH
37657: LD_INT 9
37659: PUSH
37660: LD_INT 10
37662: PUSH
37663: LD_INT 11
37665: PUSH
37666: LD_INT 12
37668: PUSH
37669: LD_INT 13
37671: PUSH
37672: LD_INT 16
37674: PUSH
37675: LD_INT 17
37677: PUSH
37678: LD_INT 18
37680: PUSH
37681: LD_INT 19
37683: PUSH
37684: LD_INT 20
37686: PUSH
37687: LD_INT 21
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: IN
37705: NOT
37706: OR
37707: PUSH
37708: LD_VAR 0 8
37712: PUSH
37713: LD_INT 5
37715: ARRAY
37716: NOT
37717: OR
37718: PUSH
37719: LD_VAR 0 8
37723: PUSH
37724: LD_INT 6
37726: ARRAY
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 7
37736: PUSH
37737: LD_INT 9
37739: PUSH
37740: LD_INT 10
37742: PUSH
37743: LD_INT 11
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: IN
37754: NOT
37755: OR
37756: IFFALSE 37762
// exit ;
37758: POP
37759: POP
37760: GO 37845
// end ;
37762: GO 37433
37764: POP
37765: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37766: LD_VAR 0 9
37770: PPUSH
37771: LD_VAR 0 3
37775: PPUSH
37776: LD_VAR 0 4
37780: PPUSH
37781: LD_INT 20
37783: PPUSH
37784: CALL 29768 0 4
37788: PUSH
37789: LD_INT 4
37791: ARRAY
37792: IFFALSE 37796
// exit ;
37794: GO 37845
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37796: LD_VAR 0 2
37800: PUSH
37801: LD_INT 29
37803: PUSH
37804: LD_INT 30
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: IN
37811: PUSH
37812: LD_VAR 0 3
37816: PPUSH
37817: LD_VAR 0 4
37821: PPUSH
37822: LD_VAR 0 9
37826: PPUSH
37827: CALL_OW 440
37831: NOT
37832: AND
37833: IFFALSE 37837
// exit ;
37835: GO 37845
// result := true ;
37837: LD_ADDR_VAR 0 6
37841: PUSH
37842: LD_INT 1
37844: ST_TO_ADDR
// end ;
37845: LD_VAR 0 6
37849: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37850: LD_INT 0
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
37905: PPUSH
37906: PPUSH
37907: PPUSH
37908: PPUSH
37909: PPUSH
// result = [ ] ;
37910: LD_ADDR_VAR 0 7
37914: PUSH
37915: EMPTY
37916: ST_TO_ADDR
// temp_list = [ ] ;
37917: LD_ADDR_VAR 0 9
37921: PUSH
37922: EMPTY
37923: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37924: LD_VAR 0 4
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 2
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: LD_INT 4
37943: PUSH
37944: LD_INT 5
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: IN
37955: NOT
37956: PUSH
37957: LD_VAR 0 1
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: IN
37972: PUSH
37973: LD_VAR 0 5
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: IN
37992: NOT
37993: AND
37994: OR
37995: IFFALSE 37999
// exit ;
37997: GO 56390
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37999: LD_VAR 0 1
38003: PUSH
38004: LD_INT 6
38006: PUSH
38007: LD_INT 7
38009: PUSH
38010: LD_INT 8
38012: PUSH
38013: LD_INT 13
38015: PUSH
38016: LD_INT 12
38018: PUSH
38019: LD_INT 15
38021: PUSH
38022: LD_INT 11
38024: PUSH
38025: LD_INT 14
38027: PUSH
38028: LD_INT 10
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: IN
38042: IFFALSE 38052
// btype = b_lab ;
38044: LD_ADDR_VAR 0 1
38048: PUSH
38049: LD_INT 6
38051: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38052: LD_VAR 0 6
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: IN
38071: NOT
38072: PUSH
38073: LD_VAR 0 1
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: LD_INT 6
38092: PUSH
38093: LD_INT 36
38095: PUSH
38096: LD_INT 4
38098: PUSH
38099: LD_INT 5
38101: PUSH
38102: LD_INT 31
38104: PUSH
38105: LD_INT 32
38107: PUSH
38108: LD_INT 33
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: IN
38124: NOT
38125: PUSH
38126: LD_VAR 0 6
38130: PUSH
38131: LD_INT 1
38133: EQUAL
38134: AND
38135: OR
38136: PUSH
38137: LD_VAR 0 1
38141: PUSH
38142: LD_INT 2
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: IN
38152: NOT
38153: PUSH
38154: LD_VAR 0 6
38158: PUSH
38159: LD_INT 2
38161: EQUAL
38162: AND
38163: OR
38164: IFFALSE 38174
// mode = 0 ;
38166: LD_ADDR_VAR 0 6
38170: PUSH
38171: LD_INT 0
38173: ST_TO_ADDR
// case mode of 0 :
38174: LD_VAR 0 6
38178: PUSH
38179: LD_INT 0
38181: DOUBLE
38182: EQUAL
38183: IFTRUE 38187
38185: GO 49640
38187: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38188: LD_ADDR_VAR 0 11
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38381: LD_ADDR_VAR 0 12
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 3
38538: NEG
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 3
38549: NEG
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38577: LD_ADDR_VAR 0 13
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: LD_INT 3
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38776: LD_ADDR_VAR 0 14
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 2
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 2
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: LD_INT 3
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 3
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38972: LD_ADDR_VAR 0 15
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 3
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39165: LD_ADDR_VAR 0 16
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 3
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: LD_INT 3
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 3
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39358: LD_ADDR_VAR 0 17
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39588: LD_ADDR_VAR 0 18
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 2
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39818: LD_ADDR_VAR 0 19
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40048: LD_ADDR_VAR 0 20
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40278: LD_ADDR_VAR 0 21
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40508: LD_ADDR_VAR 0 22
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: NEG
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40738: LD_ADDR_VAR 0 23
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: LD_INT 3
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 3
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41018: LD_ADDR_VAR 0 24
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41294: LD_ADDR_VAR 0 25
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41568: LD_ADDR_VAR 0 26
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41844: LD_ADDR_VAR 0 27
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 2
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 3
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42124: LD_ADDR_VAR 0 28
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 3
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 3
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 3
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 3
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42406: LD_ADDR_VAR 0 29
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 3
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 3
42650: NEG
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42685: LD_ADDR_VAR 0 30
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 3
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42963: LD_ADDR_VAR 0 31
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 3
43206: NEG
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43241: LD_ADDR_VAR 0 32
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43519: LD_ADDR_VAR 0 33
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 2
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: LD_INT 3
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 3
43763: NEG
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43798: LD_ADDR_VAR 0 34
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 3
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44078: LD_ADDR_VAR 0 35
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44190: LD_ADDR_VAR 0 36
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44302: LD_ADDR_VAR 0 37
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44414: LD_ADDR_VAR 0 38
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44526: LD_ADDR_VAR 0 39
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44638: LD_ADDR_VAR 0 40
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44750: LD_ADDR_VAR 0 41
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 3
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 3
45059: NEG
45060: PUSH
45061: LD_INT 3
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45100: LD_ADDR_VAR 0 42
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 3
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 3
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45450: LD_ADDR_VAR 0 43
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 3
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45798: LD_ADDR_VAR 0 44
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: LD_INT 3
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 3
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46148: LD_ADDR_VAR 0 45
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 3
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 3
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: LD_INT 3
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46498: LD_ADDR_VAR 0 46
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 3
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46846: LD_ADDR_VAR 0 47
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46997: LD_ADDR_VAR 0 48
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47144: LD_ADDR_VAR 0 49
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47288: LD_ADDR_VAR 0 50
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47432: LD_ADDR_VAR 0 51
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47579: LD_ADDR_VAR 0 52
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47730: LD_ADDR_VAR 0 53
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47960: LD_ADDR_VAR 0 54
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48190: LD_ADDR_VAR 0 55
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48420: LD_ADDR_VAR 0 56
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48650: LD_ADDR_VAR 0 57
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48880: LD_ADDR_VAR 0 58
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49110: LD_ADDR_VAR 0 59
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49198: LD_ADDR_VAR 0 60
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49286: LD_ADDR_VAR 0 61
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49374: LD_ADDR_VAR 0 62
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49462: LD_ADDR_VAR 0 63
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49550: LD_ADDR_VAR 0 64
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// end ; 1 :
49638: GO 55535
49640: LD_INT 1
49642: DOUBLE
49643: EQUAL
49644: IFTRUE 49648
49646: GO 52271
49648: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49649: LD_ADDR_VAR 0 11
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 3
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49693: LD_ADDR_VAR 0 12
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49734: LD_ADDR_VAR 0 13
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49774: LD_ADDR_VAR 0 14
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49815: LD_ADDR_VAR 0 15
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: NEG
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49859: LD_ADDR_VAR 0 16
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49905: LD_ADDR_VAR 0 17
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 3
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49949: LD_ADDR_VAR 0 18
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49990: LD_ADDR_VAR 0 19
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: LIST
50029: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50030: LD_ADDR_VAR 0 20
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 3
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50071: LD_ADDR_VAR 0 21
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50115: LD_ADDR_VAR 0 22
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50161: LD_ADDR_VAR 0 23
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 4
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50205: LD_ADDR_VAR 0 24
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 4
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50246: LD_ADDR_VAR 0 25
50250: PUSH
50251: LD_INT 3
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 4
50263: PUSH
50264: LD_INT 3
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 4
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50286: LD_ADDR_VAR 0 26
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 4
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50327: LD_ADDR_VAR 0 27
50331: PUSH
50332: LD_INT 3
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50371: LD_ADDR_VAR 0 28
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: LD_INT 4
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: NEG
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50417: LD_ADDR_VAR 0 29
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 3
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 4
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 4
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 5
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 5
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 6
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 6
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 5
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50572: LD_ADDR_VAR 0 30
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 3
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 4
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 4
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 5
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 5
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 5
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 6
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 6
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50715: LD_ADDR_VAR 0 31
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 4
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 4
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 5
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 5
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 4
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 6
50812: PUSH
50813: LD_INT 5
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 6
50822: PUSH
50823: LD_INT 6
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 5
50832: PUSH
50833: LD_INT 6
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50854: LD_ADDR_VAR 0 32
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 4
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 4
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 5
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 5
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 4
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 6
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 6
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 5
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50997: LD_ADDR_VAR 0 33
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 4
51049: NEG
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 4
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 5
51083: NEG
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 5
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 5
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 6
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 6
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51152: LD_ADDR_VAR 0 34
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: NEG
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 4
51219: NEG
51220: PUSH
51221: LD_INT 4
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 4
51231: NEG
51232: PUSH
51233: LD_INT 5
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: NEG
51244: PUSH
51245: LD_INT 4
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 5
51255: NEG
51256: PUSH
51257: LD_INT 5
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 5
51267: NEG
51268: PUSH
51269: LD_INT 6
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 6
51279: NEG
51280: PUSH
51281: LD_INT 5
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 6
51291: NEG
51292: PUSH
51293: LD_INT 6
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51315: LD_ADDR_VAR 0 41
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51359: LD_ADDR_VAR 0 42
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51400: LD_ADDR_VAR 0 43
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51440: LD_ADDR_VAR 0 44
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51481: LD_ADDR_VAR 0 45
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51525: LD_ADDR_VAR 0 46
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51571: LD_ADDR_VAR 0 47
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51604: LD_ADDR_VAR 0 48
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51635: LD_ADDR_VAR 0 49
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51664: LD_ADDR_VAR 0 50
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51693: LD_ADDR_VAR 0 51
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51724: LD_ADDR_VAR 0 52
51728: PUSH
51729: LD_INT 3
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51757: LD_ADDR_VAR 0 53
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51801: LD_ADDR_VAR 0 54
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51842: LD_ADDR_VAR 0 55
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51882: LD_ADDR_VAR 0 56
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51923: LD_ADDR_VAR 0 57
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51967: LD_ADDR_VAR 0 58
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: LD_INT 3
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52013: LD_ADDR_VAR 0 59
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52057: LD_ADDR_VAR 0 60
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52098: LD_ADDR_VAR 0 61
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52138: LD_ADDR_VAR 0 62
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52179: LD_ADDR_VAR 0 63
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52223: LD_ADDR_VAR 0 64
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// end ; 2 :
52269: GO 55535
52271: LD_INT 2
52273: DOUBLE
52274: EQUAL
52275: IFTRUE 52279
52277: GO 55534
52279: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52280: LD_ADDR_VAR 0 29
52284: PUSH
52285: LD_INT 4
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 5
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 5
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 4
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 5
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 4
52410: PUSH
52411: LD_INT 4
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: LD_INT 4
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 4
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 4
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 4
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 4
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 5
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 5
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 4
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 5
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 4
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 4
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 4
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 4
52665: NEG
52666: PUSH
52667: LD_INT 4
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 4
52677: NEG
52678: PUSH
52679: LD_INT 5
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: LD_INT 4
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 4
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 5
52725: NEG
52726: PUSH
52727: LD_INT 4
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 5
52737: NEG
52738: PUSH
52739: LD_INT 5
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: LD_INT 5
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 5
52761: NEG
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52818: LD_ADDR_VAR 0 30
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: LD_INT 4
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 5
52845: PUSH
52846: LD_INT 4
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 5
52855: PUSH
52856: LD_INT 5
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 4
52865: PUSH
52866: LD_INT 5
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 5
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 5
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 4
53008: NEG
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 3
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 4
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 5
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 5
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 5
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: LD_INT 4
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 4
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 4
53182: NEG
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 4
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 4
53206: NEG
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 4
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 5
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 4
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 5
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 5
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53365: LD_ADDR_VAR 0 31
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 4
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 5
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 5
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 5
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 4
53521: NEG
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 4
53532: NEG
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: NEG
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 4
53567: NEG
53568: PUSH
53569: LD_INT 4
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 4
53579: NEG
53580: PUSH
53581: LD_INT 5
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 4
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 4
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 5
53627: NEG
53628: PUSH
53629: LD_INT 4
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 5
53639: NEG
53640: PUSH
53641: LD_INT 5
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: LD_INT 5
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 5
53663: NEG
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 4
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 4
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 4
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 4
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 5
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 5
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 4
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 5
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53915: LD_ADDR_VAR 0 32
53919: PUSH
53920: LD_INT 4
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 4
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 4
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 5
53978: NEG
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 5
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 3
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: LD_INT 4
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 4
54084: NEG
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: LD_INT 4
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 4
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 4
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 5
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 4
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 4
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 5
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 5
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 4
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 4
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 4
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 4
54327: PUSH
54328: LD_INT 4
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 4
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 5
54347: PUSH
54348: LD_INT 4
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 5
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: LD_INT 5
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 5
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: LD_INT 5
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54462: LD_ADDR_VAR 0 33
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: LD_INT 4
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 4
54481: NEG
54482: PUSH
54483: LD_INT 5
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: LD_INT 4
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 4
54517: NEG
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 5
54529: NEG
54530: PUSH
54531: LD_INT 4
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 5
54541: NEG
54542: PUSH
54543: LD_INT 5
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: LD_INT 5
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 5
54565: NEG
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 4
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 3
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 4
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 4
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 4
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 5
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 5
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 4
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 5
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 4
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: LD_INT 4
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: LD_INT 4
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 4
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 4
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 4
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 4
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 5
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 5
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 5
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55000: LD_ADDR_VAR 0 34
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 5
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 4
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 5
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 5
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 4
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 4
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 4
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 4
55202: PUSH
55203: LD_INT 4
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 4
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 5
55222: PUSH
55223: LD_INT 4
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 5
55232: PUSH
55233: LD_INT 5
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: LD_INT 5
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 5
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: LD_INT 5
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 4
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 4
55385: NEG
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 4
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 4
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 5
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 5
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 5
55464: NEG
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: ST_TO_ADDR
// end ; end ;
55532: GO 55535
55534: POP
// case btype of b_depot , b_warehouse :
55535: LD_VAR 0 1
55539: PUSH
55540: LD_INT 0
55542: DOUBLE
55543: EQUAL
55544: IFTRUE 55554
55546: LD_INT 1
55548: DOUBLE
55549: EQUAL
55550: IFTRUE 55554
55552: GO 55755
55554: POP
// case nation of nation_american :
55555: LD_VAR 0 5
55559: PUSH
55560: LD_INT 1
55562: DOUBLE
55563: EQUAL
55564: IFTRUE 55568
55566: GO 55624
55568: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55569: LD_ADDR_VAR 0 9
55573: PUSH
55574: LD_VAR 0 11
55578: PUSH
55579: LD_VAR 0 12
55583: PUSH
55584: LD_VAR 0 13
55588: PUSH
55589: LD_VAR 0 14
55593: PUSH
55594: LD_VAR 0 15
55598: PUSH
55599: LD_VAR 0 16
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: PUSH
55612: LD_VAR 0 4
55616: PUSH
55617: LD_INT 1
55619: PLUS
55620: ARRAY
55621: ST_TO_ADDR
55622: GO 55753
55624: LD_INT 2
55626: DOUBLE
55627: EQUAL
55628: IFTRUE 55632
55630: GO 55688
55632: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55633: LD_ADDR_VAR 0 9
55637: PUSH
55638: LD_VAR 0 17
55642: PUSH
55643: LD_VAR 0 18
55647: PUSH
55648: LD_VAR 0 19
55652: PUSH
55653: LD_VAR 0 20
55657: PUSH
55658: LD_VAR 0 21
55662: PUSH
55663: LD_VAR 0 22
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: LD_VAR 0 4
55680: PUSH
55681: LD_INT 1
55683: PLUS
55684: ARRAY
55685: ST_TO_ADDR
55686: GO 55753
55688: LD_INT 3
55690: DOUBLE
55691: EQUAL
55692: IFTRUE 55696
55694: GO 55752
55696: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55697: LD_ADDR_VAR 0 9
55701: PUSH
55702: LD_VAR 0 23
55706: PUSH
55707: LD_VAR 0 24
55711: PUSH
55712: LD_VAR 0 25
55716: PUSH
55717: LD_VAR 0 26
55721: PUSH
55722: LD_VAR 0 27
55726: PUSH
55727: LD_VAR 0 28
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: PUSH
55740: LD_VAR 0 4
55744: PUSH
55745: LD_INT 1
55747: PLUS
55748: ARRAY
55749: ST_TO_ADDR
55750: GO 55753
55752: POP
55753: GO 56308
55755: LD_INT 2
55757: DOUBLE
55758: EQUAL
55759: IFTRUE 55769
55761: LD_INT 3
55763: DOUBLE
55764: EQUAL
55765: IFTRUE 55769
55767: GO 55825
55769: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55770: LD_ADDR_VAR 0 9
55774: PUSH
55775: LD_VAR 0 29
55779: PUSH
55780: LD_VAR 0 30
55784: PUSH
55785: LD_VAR 0 31
55789: PUSH
55790: LD_VAR 0 32
55794: PUSH
55795: LD_VAR 0 33
55799: PUSH
55800: LD_VAR 0 34
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: PUSH
55813: LD_VAR 0 4
55817: PUSH
55818: LD_INT 1
55820: PLUS
55821: ARRAY
55822: ST_TO_ADDR
55823: GO 56308
55825: LD_INT 16
55827: DOUBLE
55828: EQUAL
55829: IFTRUE 55887
55831: LD_INT 17
55833: DOUBLE
55834: EQUAL
55835: IFTRUE 55887
55837: LD_INT 18
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55887
55843: LD_INT 19
55845: DOUBLE
55846: EQUAL
55847: IFTRUE 55887
55849: LD_INT 22
55851: DOUBLE
55852: EQUAL
55853: IFTRUE 55887
55855: LD_INT 20
55857: DOUBLE
55858: EQUAL
55859: IFTRUE 55887
55861: LD_INT 21
55863: DOUBLE
55864: EQUAL
55865: IFTRUE 55887
55867: LD_INT 23
55869: DOUBLE
55870: EQUAL
55871: IFTRUE 55887
55873: LD_INT 24
55875: DOUBLE
55876: EQUAL
55877: IFTRUE 55887
55879: LD_INT 25
55881: DOUBLE
55882: EQUAL
55883: IFTRUE 55887
55885: GO 55943
55887: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55888: LD_ADDR_VAR 0 9
55892: PUSH
55893: LD_VAR 0 35
55897: PUSH
55898: LD_VAR 0 36
55902: PUSH
55903: LD_VAR 0 37
55907: PUSH
55908: LD_VAR 0 38
55912: PUSH
55913: LD_VAR 0 39
55917: PUSH
55918: LD_VAR 0 40
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: PUSH
55931: LD_VAR 0 4
55935: PUSH
55936: LD_INT 1
55938: PLUS
55939: ARRAY
55940: ST_TO_ADDR
55941: GO 56308
55943: LD_INT 6
55945: DOUBLE
55946: EQUAL
55947: IFTRUE 55999
55949: LD_INT 7
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55999
55955: LD_INT 8
55957: DOUBLE
55958: EQUAL
55959: IFTRUE 55999
55961: LD_INT 13
55963: DOUBLE
55964: EQUAL
55965: IFTRUE 55999
55967: LD_INT 12
55969: DOUBLE
55970: EQUAL
55971: IFTRUE 55999
55973: LD_INT 15
55975: DOUBLE
55976: EQUAL
55977: IFTRUE 55999
55979: LD_INT 11
55981: DOUBLE
55982: EQUAL
55983: IFTRUE 55999
55985: LD_INT 14
55987: DOUBLE
55988: EQUAL
55989: IFTRUE 55999
55991: LD_INT 10
55993: DOUBLE
55994: EQUAL
55995: IFTRUE 55999
55997: GO 56055
55999: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56000: LD_ADDR_VAR 0 9
56004: PUSH
56005: LD_VAR 0 41
56009: PUSH
56010: LD_VAR 0 42
56014: PUSH
56015: LD_VAR 0 43
56019: PUSH
56020: LD_VAR 0 44
56024: PUSH
56025: LD_VAR 0 45
56029: PUSH
56030: LD_VAR 0 46
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: PUSH
56043: LD_VAR 0 4
56047: PUSH
56048: LD_INT 1
56050: PLUS
56051: ARRAY
56052: ST_TO_ADDR
56053: GO 56308
56055: LD_INT 36
56057: DOUBLE
56058: EQUAL
56059: IFTRUE 56063
56061: GO 56119
56063: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56064: LD_ADDR_VAR 0 9
56068: PUSH
56069: LD_VAR 0 47
56073: PUSH
56074: LD_VAR 0 48
56078: PUSH
56079: LD_VAR 0 49
56083: PUSH
56084: LD_VAR 0 50
56088: PUSH
56089: LD_VAR 0 51
56093: PUSH
56094: LD_VAR 0 52
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: PUSH
56107: LD_VAR 0 4
56111: PUSH
56112: LD_INT 1
56114: PLUS
56115: ARRAY
56116: ST_TO_ADDR
56117: GO 56308
56119: LD_INT 4
56121: DOUBLE
56122: EQUAL
56123: IFTRUE 56145
56125: LD_INT 5
56127: DOUBLE
56128: EQUAL
56129: IFTRUE 56145
56131: LD_INT 34
56133: DOUBLE
56134: EQUAL
56135: IFTRUE 56145
56137: LD_INT 37
56139: DOUBLE
56140: EQUAL
56141: IFTRUE 56145
56143: GO 56201
56145: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56146: LD_ADDR_VAR 0 9
56150: PUSH
56151: LD_VAR 0 53
56155: PUSH
56156: LD_VAR 0 54
56160: PUSH
56161: LD_VAR 0 55
56165: PUSH
56166: LD_VAR 0 56
56170: PUSH
56171: LD_VAR 0 57
56175: PUSH
56176: LD_VAR 0 58
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: PUSH
56189: LD_VAR 0 4
56193: PUSH
56194: LD_INT 1
56196: PLUS
56197: ARRAY
56198: ST_TO_ADDR
56199: GO 56308
56201: LD_INT 31
56203: DOUBLE
56204: EQUAL
56205: IFTRUE 56251
56207: LD_INT 32
56209: DOUBLE
56210: EQUAL
56211: IFTRUE 56251
56213: LD_INT 33
56215: DOUBLE
56216: EQUAL
56217: IFTRUE 56251
56219: LD_INT 27
56221: DOUBLE
56222: EQUAL
56223: IFTRUE 56251
56225: LD_INT 26
56227: DOUBLE
56228: EQUAL
56229: IFTRUE 56251
56231: LD_INT 28
56233: DOUBLE
56234: EQUAL
56235: IFTRUE 56251
56237: LD_INT 29
56239: DOUBLE
56240: EQUAL
56241: IFTRUE 56251
56243: LD_INT 30
56245: DOUBLE
56246: EQUAL
56247: IFTRUE 56251
56249: GO 56307
56251: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56252: LD_ADDR_VAR 0 9
56256: PUSH
56257: LD_VAR 0 59
56261: PUSH
56262: LD_VAR 0 60
56266: PUSH
56267: LD_VAR 0 61
56271: PUSH
56272: LD_VAR 0 62
56276: PUSH
56277: LD_VAR 0 63
56281: PUSH
56282: LD_VAR 0 64
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: PUSH
56295: LD_VAR 0 4
56299: PUSH
56300: LD_INT 1
56302: PLUS
56303: ARRAY
56304: ST_TO_ADDR
56305: GO 56308
56307: POP
// temp_list2 = [ ] ;
56308: LD_ADDR_VAR 0 10
56312: PUSH
56313: EMPTY
56314: ST_TO_ADDR
// for i in temp_list do
56315: LD_ADDR_VAR 0 8
56319: PUSH
56320: LD_VAR 0 9
56324: PUSH
56325: FOR_IN
56326: IFFALSE 56378
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56328: LD_ADDR_VAR 0 10
56332: PUSH
56333: LD_VAR 0 10
56337: PUSH
56338: LD_VAR 0 8
56342: PUSH
56343: LD_INT 1
56345: ARRAY
56346: PUSH
56347: LD_VAR 0 2
56351: PLUS
56352: PUSH
56353: LD_VAR 0 8
56357: PUSH
56358: LD_INT 2
56360: ARRAY
56361: PUSH
56362: LD_VAR 0 3
56366: PLUS
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: ADD
56375: ST_TO_ADDR
56376: GO 56325
56378: POP
56379: POP
// result = temp_list2 ;
56380: LD_ADDR_VAR 0 7
56384: PUSH
56385: LD_VAR 0 10
56389: ST_TO_ADDR
// end ;
56390: LD_VAR 0 7
56394: RET
// export function EnemyInRange ( unit , dist ) ; begin
56395: LD_INT 0
56397: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56398: LD_ADDR_VAR 0 3
56402: PUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: CALL_OW 255
56412: PPUSH
56413: LD_VAR 0 1
56417: PPUSH
56418: CALL_OW 250
56422: PPUSH
56423: LD_VAR 0 1
56427: PPUSH
56428: CALL_OW 251
56432: PPUSH
56433: LD_VAR 0 2
56437: PPUSH
56438: CALL 29768 0 4
56442: PUSH
56443: LD_INT 4
56445: ARRAY
56446: ST_TO_ADDR
// end ;
56447: LD_VAR 0 3
56451: RET
// export function PlayerSeeMe ( unit ) ; begin
56452: LD_INT 0
56454: PPUSH
// result := See ( your_side , unit ) ;
56455: LD_ADDR_VAR 0 2
56459: PUSH
56460: LD_OWVAR 2
56464: PPUSH
56465: LD_VAR 0 1
56469: PPUSH
56470: CALL_OW 292
56474: ST_TO_ADDR
// end ;
56475: LD_VAR 0 2
56479: RET
// export function ReverseDir ( unit ) ; begin
56480: LD_INT 0
56482: PPUSH
// if not unit then
56483: LD_VAR 0 1
56487: NOT
56488: IFFALSE 56492
// exit ;
56490: GO 56515
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56492: LD_ADDR_VAR 0 2
56496: PUSH
56497: LD_VAR 0 1
56501: PPUSH
56502: CALL_OW 254
56506: PUSH
56507: LD_INT 3
56509: PLUS
56510: PUSH
56511: LD_INT 6
56513: MOD
56514: ST_TO_ADDR
// end ;
56515: LD_VAR 0 2
56519: RET
// export function ReverseArray ( array ) ; var i ; begin
56520: LD_INT 0
56522: PPUSH
56523: PPUSH
// if not array then
56524: LD_VAR 0 1
56528: NOT
56529: IFFALSE 56533
// exit ;
56531: GO 56588
// result := [ ] ;
56533: LD_ADDR_VAR 0 2
56537: PUSH
56538: EMPTY
56539: ST_TO_ADDR
// for i := array downto 1 do
56540: LD_ADDR_VAR 0 3
56544: PUSH
56545: DOUBLE
56546: LD_VAR 0 1
56550: INC
56551: ST_TO_ADDR
56552: LD_INT 1
56554: PUSH
56555: FOR_DOWNTO
56556: IFFALSE 56586
// result := Join ( result , array [ i ] ) ;
56558: LD_ADDR_VAR 0 2
56562: PUSH
56563: LD_VAR 0 2
56567: PPUSH
56568: LD_VAR 0 1
56572: PUSH
56573: LD_VAR 0 3
56577: ARRAY
56578: PPUSH
56579: CALL 61233 0 2
56583: ST_TO_ADDR
56584: GO 56555
56586: POP
56587: POP
// end ;
56588: LD_VAR 0 2
56592: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56593: LD_INT 0
56595: PPUSH
56596: PPUSH
56597: PPUSH
56598: PPUSH
56599: PPUSH
56600: PPUSH
// if not unit or not hexes then
56601: LD_VAR 0 1
56605: NOT
56606: PUSH
56607: LD_VAR 0 2
56611: NOT
56612: OR
56613: IFFALSE 56617
// exit ;
56615: GO 56740
// dist := 9999 ;
56617: LD_ADDR_VAR 0 5
56621: PUSH
56622: LD_INT 9999
56624: ST_TO_ADDR
// for i = 1 to hexes do
56625: LD_ADDR_VAR 0 4
56629: PUSH
56630: DOUBLE
56631: LD_INT 1
56633: DEC
56634: ST_TO_ADDR
56635: LD_VAR 0 2
56639: PUSH
56640: FOR_TO
56641: IFFALSE 56728
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56643: LD_ADDR_VAR 0 6
56647: PUSH
56648: LD_VAR 0 1
56652: PPUSH
56653: LD_VAR 0 2
56657: PUSH
56658: LD_VAR 0 4
56662: ARRAY
56663: PUSH
56664: LD_INT 1
56666: ARRAY
56667: PPUSH
56668: LD_VAR 0 2
56672: PUSH
56673: LD_VAR 0 4
56677: ARRAY
56678: PUSH
56679: LD_INT 2
56681: ARRAY
56682: PPUSH
56683: CALL_OW 297
56687: ST_TO_ADDR
// if tdist < dist then
56688: LD_VAR 0 6
56692: PUSH
56693: LD_VAR 0 5
56697: LESS
56698: IFFALSE 56726
// begin hex := hexes [ i ] ;
56700: LD_ADDR_VAR 0 8
56704: PUSH
56705: LD_VAR 0 2
56709: PUSH
56710: LD_VAR 0 4
56714: ARRAY
56715: ST_TO_ADDR
// dist := tdist ;
56716: LD_ADDR_VAR 0 5
56720: PUSH
56721: LD_VAR 0 6
56725: ST_TO_ADDR
// end ; end ;
56726: GO 56640
56728: POP
56729: POP
// result := hex ;
56730: LD_ADDR_VAR 0 3
56734: PUSH
56735: LD_VAR 0 8
56739: ST_TO_ADDR
// end ;
56740: LD_VAR 0 3
56744: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56745: LD_INT 0
56747: PPUSH
56748: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56749: LD_VAR 0 1
56753: NOT
56754: PUSH
56755: LD_VAR 0 1
56759: PUSH
56760: LD_INT 21
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 23
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PPUSH
56784: CALL_OW 69
56788: IN
56789: NOT
56790: OR
56791: IFFALSE 56795
// exit ;
56793: GO 56842
// for i = 1 to 3 do
56795: LD_ADDR_VAR 0 3
56799: PUSH
56800: DOUBLE
56801: LD_INT 1
56803: DEC
56804: ST_TO_ADDR
56805: LD_INT 3
56807: PUSH
56808: FOR_TO
56809: IFFALSE 56840
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56811: LD_VAR 0 1
56815: PPUSH
56816: CALL_OW 250
56820: PPUSH
56821: LD_VAR 0 1
56825: PPUSH
56826: CALL_OW 251
56830: PPUSH
56831: LD_INT 1
56833: PPUSH
56834: CALL_OW 453
56838: GO 56808
56840: POP
56841: POP
// end ;
56842: LD_VAR 0 2
56846: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56847: LD_INT 0
56849: PPUSH
56850: PPUSH
56851: PPUSH
56852: PPUSH
56853: PPUSH
56854: PPUSH
// if not unit or not enemy_unit then
56855: LD_VAR 0 1
56859: NOT
56860: PUSH
56861: LD_VAR 0 2
56865: NOT
56866: OR
56867: IFFALSE 56871
// exit ;
56869: GO 57338
// if GetLives ( i ) < 250 then
56871: LD_VAR 0 4
56875: PPUSH
56876: CALL_OW 256
56880: PUSH
56881: LD_INT 250
56883: LESS
56884: IFFALSE 56897
// begin ComAutodestruct ( i ) ;
56886: LD_VAR 0 4
56890: PPUSH
56891: CALL 56745 0 1
// exit ;
56895: GO 57338
// end ; x := GetX ( enemy_unit ) ;
56897: LD_ADDR_VAR 0 7
56901: PUSH
56902: LD_VAR 0 2
56906: PPUSH
56907: CALL_OW 250
56911: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56912: LD_ADDR_VAR 0 8
56916: PUSH
56917: LD_VAR 0 2
56921: PPUSH
56922: CALL_OW 251
56926: ST_TO_ADDR
// if not x or not y then
56927: LD_VAR 0 7
56931: NOT
56932: PUSH
56933: LD_VAR 0 8
56937: NOT
56938: OR
56939: IFFALSE 56943
// exit ;
56941: GO 57338
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56943: LD_ADDR_VAR 0 6
56947: PUSH
56948: LD_VAR 0 7
56952: PPUSH
56953: LD_INT 0
56955: PPUSH
56956: LD_INT 4
56958: PPUSH
56959: CALL_OW 272
56963: PUSH
56964: LD_VAR 0 8
56968: PPUSH
56969: LD_INT 0
56971: PPUSH
56972: LD_INT 4
56974: PPUSH
56975: CALL_OW 273
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_VAR 0 7
56988: PPUSH
56989: LD_INT 1
56991: PPUSH
56992: LD_INT 4
56994: PPUSH
56995: CALL_OW 272
56999: PUSH
57000: LD_VAR 0 8
57004: PPUSH
57005: LD_INT 1
57007: PPUSH
57008: LD_INT 4
57010: PPUSH
57011: CALL_OW 273
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_VAR 0 7
57024: PPUSH
57025: LD_INT 2
57027: PPUSH
57028: LD_INT 4
57030: PPUSH
57031: CALL_OW 272
57035: PUSH
57036: LD_VAR 0 8
57040: PPUSH
57041: LD_INT 2
57043: PPUSH
57044: LD_INT 4
57046: PPUSH
57047: CALL_OW 273
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_VAR 0 7
57060: PPUSH
57061: LD_INT 3
57063: PPUSH
57064: LD_INT 4
57066: PPUSH
57067: CALL_OW 272
57071: PUSH
57072: LD_VAR 0 8
57076: PPUSH
57077: LD_INT 3
57079: PPUSH
57080: LD_INT 4
57082: PPUSH
57083: CALL_OW 273
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_VAR 0 7
57096: PPUSH
57097: LD_INT 4
57099: PPUSH
57100: LD_INT 4
57102: PPUSH
57103: CALL_OW 272
57107: PUSH
57108: LD_VAR 0 8
57112: PPUSH
57113: LD_INT 4
57115: PPUSH
57116: LD_INT 4
57118: PPUSH
57119: CALL_OW 273
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_VAR 0 7
57132: PPUSH
57133: LD_INT 5
57135: PPUSH
57136: LD_INT 4
57138: PPUSH
57139: CALL_OW 272
57143: PUSH
57144: LD_VAR 0 8
57148: PPUSH
57149: LD_INT 5
57151: PPUSH
57152: LD_INT 4
57154: PPUSH
57155: CALL_OW 273
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// for i = tmp downto 1 do
57172: LD_ADDR_VAR 0 4
57176: PUSH
57177: DOUBLE
57178: LD_VAR 0 6
57182: INC
57183: ST_TO_ADDR
57184: LD_INT 1
57186: PUSH
57187: FOR_DOWNTO
57188: IFFALSE 57289
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57190: LD_VAR 0 6
57194: PUSH
57195: LD_VAR 0 4
57199: ARRAY
57200: PUSH
57201: LD_INT 1
57203: ARRAY
57204: PPUSH
57205: LD_VAR 0 6
57209: PUSH
57210: LD_VAR 0 4
57214: ARRAY
57215: PUSH
57216: LD_INT 2
57218: ARRAY
57219: PPUSH
57220: CALL_OW 488
57224: NOT
57225: PUSH
57226: LD_VAR 0 6
57230: PUSH
57231: LD_VAR 0 4
57235: ARRAY
57236: PUSH
57237: LD_INT 1
57239: ARRAY
57240: PPUSH
57241: LD_VAR 0 6
57245: PUSH
57246: LD_VAR 0 4
57250: ARRAY
57251: PUSH
57252: LD_INT 2
57254: ARRAY
57255: PPUSH
57256: CALL_OW 428
57260: PUSH
57261: LD_INT 0
57263: NONEQUAL
57264: OR
57265: IFFALSE 57287
// tmp := Delete ( tmp , i ) ;
57267: LD_ADDR_VAR 0 6
57271: PUSH
57272: LD_VAR 0 6
57276: PPUSH
57277: LD_VAR 0 4
57281: PPUSH
57282: CALL_OW 3
57286: ST_TO_ADDR
57287: GO 57187
57289: POP
57290: POP
// j := GetClosestHex ( unit , tmp ) ;
57291: LD_ADDR_VAR 0 5
57295: PUSH
57296: LD_VAR 0 1
57300: PPUSH
57301: LD_VAR 0 6
57305: PPUSH
57306: CALL 56593 0 2
57310: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57311: LD_VAR 0 1
57315: PPUSH
57316: LD_VAR 0 5
57320: PUSH
57321: LD_INT 1
57323: ARRAY
57324: PPUSH
57325: LD_VAR 0 5
57329: PUSH
57330: LD_INT 2
57332: ARRAY
57333: PPUSH
57334: CALL_OW 111
// end ;
57338: LD_VAR 0 3
57342: RET
// export function PrepareApemanSoldier ( ) ; begin
57343: LD_INT 0
57345: PPUSH
// uc_nation := 0 ;
57346: LD_ADDR_OWVAR 21
57350: PUSH
57351: LD_INT 0
57353: ST_TO_ADDR
// hc_sex := sex_male ;
57354: LD_ADDR_OWVAR 27
57358: PUSH
57359: LD_INT 1
57361: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57362: LD_ADDR_OWVAR 28
57366: PUSH
57367: LD_INT 15
57369: ST_TO_ADDR
// hc_gallery :=  ;
57370: LD_ADDR_OWVAR 33
57374: PUSH
57375: LD_STRING 
57377: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57378: LD_ADDR_OWVAR 31
57382: PUSH
57383: LD_INT 0
57385: PPUSH
57386: LD_INT 3
57388: PPUSH
57389: CALL_OW 12
57393: PUSH
57394: LD_INT 0
57396: PPUSH
57397: LD_INT 3
57399: PPUSH
57400: CALL_OW 12
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// end ;
57417: LD_VAR 0 1
57421: RET
// export function PrepareApemanEngineer ( ) ; begin
57422: LD_INT 0
57424: PPUSH
// uc_nation := 0 ;
57425: LD_ADDR_OWVAR 21
57429: PUSH
57430: LD_INT 0
57432: ST_TO_ADDR
// hc_sex := sex_male ;
57433: LD_ADDR_OWVAR 27
57437: PUSH
57438: LD_INT 1
57440: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57441: LD_ADDR_OWVAR 28
57445: PUSH
57446: LD_INT 16
57448: ST_TO_ADDR
// hc_gallery :=  ;
57449: LD_ADDR_OWVAR 33
57453: PUSH
57454: LD_STRING 
57456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57457: LD_ADDR_OWVAR 31
57461: PUSH
57462: LD_INT 0
57464: PPUSH
57465: LD_INT 3
57467: PPUSH
57468: CALL_OW 12
57472: PUSH
57473: LD_INT 0
57475: PPUSH
57476: LD_INT 3
57478: PPUSH
57479: CALL_OW 12
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: ST_TO_ADDR
// end ;
57496: LD_VAR 0 1
57500: RET
// export function PrepareApeman ( agressivity ) ; begin
57501: LD_INT 0
57503: PPUSH
// uc_side := 0 ;
57504: LD_ADDR_OWVAR 20
57508: PUSH
57509: LD_INT 0
57511: ST_TO_ADDR
// uc_nation := 0 ;
57512: LD_ADDR_OWVAR 21
57516: PUSH
57517: LD_INT 0
57519: ST_TO_ADDR
// hc_sex := sex_male ;
57520: LD_ADDR_OWVAR 27
57524: PUSH
57525: LD_INT 1
57527: ST_TO_ADDR
// hc_class := class_apeman ;
57528: LD_ADDR_OWVAR 28
57532: PUSH
57533: LD_INT 12
57535: ST_TO_ADDR
// hc_gallery :=  ;
57536: LD_ADDR_OWVAR 33
57540: PUSH
57541: LD_STRING 
57543: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57544: LD_ADDR_OWVAR 35
57548: PUSH
57549: LD_VAR 0 1
57553: NEG
57554: PPUSH
57555: LD_VAR 0 1
57559: PPUSH
57560: CALL_OW 12
57564: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57565: LD_ADDR_OWVAR 31
57569: PUSH
57570: LD_INT 0
57572: PPUSH
57573: LD_INT 3
57575: PPUSH
57576: CALL_OW 12
57580: PUSH
57581: LD_INT 0
57583: PPUSH
57584: LD_INT 3
57586: PPUSH
57587: CALL_OW 12
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// end ;
57604: LD_VAR 0 2
57608: RET
// export function PrepareTiger ( agressivity ) ; begin
57609: LD_INT 0
57611: PPUSH
// uc_side := 0 ;
57612: LD_ADDR_OWVAR 20
57616: PUSH
57617: LD_INT 0
57619: ST_TO_ADDR
// uc_nation := 0 ;
57620: LD_ADDR_OWVAR 21
57624: PUSH
57625: LD_INT 0
57627: ST_TO_ADDR
// hc_class := class_tiger ;
57628: LD_ADDR_OWVAR 28
57632: PUSH
57633: LD_INT 14
57635: ST_TO_ADDR
// hc_gallery :=  ;
57636: LD_ADDR_OWVAR 33
57640: PUSH
57641: LD_STRING 
57643: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57644: LD_ADDR_OWVAR 35
57648: PUSH
57649: LD_VAR 0 1
57653: NEG
57654: PPUSH
57655: LD_VAR 0 1
57659: PPUSH
57660: CALL_OW 12
57664: ST_TO_ADDR
// end ;
57665: LD_VAR 0 2
57669: RET
// export function PrepareEnchidna ( ) ; begin
57670: LD_INT 0
57672: PPUSH
// uc_side := 0 ;
57673: LD_ADDR_OWVAR 20
57677: PUSH
57678: LD_INT 0
57680: ST_TO_ADDR
// uc_nation := 0 ;
57681: LD_ADDR_OWVAR 21
57685: PUSH
57686: LD_INT 0
57688: ST_TO_ADDR
// hc_class := class_baggie ;
57689: LD_ADDR_OWVAR 28
57693: PUSH
57694: LD_INT 13
57696: ST_TO_ADDR
// hc_gallery :=  ;
57697: LD_ADDR_OWVAR 33
57701: PUSH
57702: LD_STRING 
57704: ST_TO_ADDR
// end ;
57705: LD_VAR 0 1
57709: RET
// export function PrepareFrog ( ) ; begin
57710: LD_INT 0
57712: PPUSH
// uc_side := 0 ;
57713: LD_ADDR_OWVAR 20
57717: PUSH
57718: LD_INT 0
57720: ST_TO_ADDR
// uc_nation := 0 ;
57721: LD_ADDR_OWVAR 21
57725: PUSH
57726: LD_INT 0
57728: ST_TO_ADDR
// hc_class := class_frog ;
57729: LD_ADDR_OWVAR 28
57733: PUSH
57734: LD_INT 19
57736: ST_TO_ADDR
// hc_gallery :=  ;
57737: LD_ADDR_OWVAR 33
57741: PUSH
57742: LD_STRING 
57744: ST_TO_ADDR
// end ;
57745: LD_VAR 0 1
57749: RET
// export function PrepareFish ( ) ; begin
57750: LD_INT 0
57752: PPUSH
// uc_side := 0 ;
57753: LD_ADDR_OWVAR 20
57757: PUSH
57758: LD_INT 0
57760: ST_TO_ADDR
// uc_nation := 0 ;
57761: LD_ADDR_OWVAR 21
57765: PUSH
57766: LD_INT 0
57768: ST_TO_ADDR
// hc_class := class_fish ;
57769: LD_ADDR_OWVAR 28
57773: PUSH
57774: LD_INT 20
57776: ST_TO_ADDR
// hc_gallery :=  ;
57777: LD_ADDR_OWVAR 33
57781: PUSH
57782: LD_STRING 
57784: ST_TO_ADDR
// end ;
57785: LD_VAR 0 1
57789: RET
// export function PrepareBird ( ) ; begin
57790: LD_INT 0
57792: PPUSH
// uc_side := 0 ;
57793: LD_ADDR_OWVAR 20
57797: PUSH
57798: LD_INT 0
57800: ST_TO_ADDR
// uc_nation := 0 ;
57801: LD_ADDR_OWVAR 21
57805: PUSH
57806: LD_INT 0
57808: ST_TO_ADDR
// hc_class := class_phororhacos ;
57809: LD_ADDR_OWVAR 28
57813: PUSH
57814: LD_INT 18
57816: ST_TO_ADDR
// hc_gallery :=  ;
57817: LD_ADDR_OWVAR 33
57821: PUSH
57822: LD_STRING 
57824: ST_TO_ADDR
// end ;
57825: LD_VAR 0 1
57829: RET
// export function PrepareHorse ( ) ; begin
57830: LD_INT 0
57832: PPUSH
// uc_side := 0 ;
57833: LD_ADDR_OWVAR 20
57837: PUSH
57838: LD_INT 0
57840: ST_TO_ADDR
// uc_nation := 0 ;
57841: LD_ADDR_OWVAR 21
57845: PUSH
57846: LD_INT 0
57848: ST_TO_ADDR
// hc_class := class_horse ;
57849: LD_ADDR_OWVAR 28
57853: PUSH
57854: LD_INT 21
57856: ST_TO_ADDR
// hc_gallery :=  ;
57857: LD_ADDR_OWVAR 33
57861: PUSH
57862: LD_STRING 
57864: ST_TO_ADDR
// end ;
57865: LD_VAR 0 1
57869: RET
// export function PrepareMastodont ( ) ; begin
57870: LD_INT 0
57872: PPUSH
// uc_side := 0 ;
57873: LD_ADDR_OWVAR 20
57877: PUSH
57878: LD_INT 0
57880: ST_TO_ADDR
// uc_nation := 0 ;
57881: LD_ADDR_OWVAR 21
57885: PUSH
57886: LD_INT 0
57888: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57889: LD_ADDR_OWVAR 37
57893: PUSH
57894: LD_INT 31
57896: ST_TO_ADDR
// vc_control := control_rider ;
57897: LD_ADDR_OWVAR 38
57901: PUSH
57902: LD_INT 4
57904: ST_TO_ADDR
// end ;
57905: LD_VAR 0 1
57909: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57910: LD_INT 0
57912: PPUSH
57913: PPUSH
57914: PPUSH
// uc_side = 0 ;
57915: LD_ADDR_OWVAR 20
57919: PUSH
57920: LD_INT 0
57922: ST_TO_ADDR
// uc_nation = 0 ;
57923: LD_ADDR_OWVAR 21
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// InitHc_All ( ) ;
57931: CALL_OW 584
// InitVc ;
57935: CALL_OW 20
// if mastodonts then
57939: LD_VAR 0 6
57943: IFFALSE 58010
// for i = 1 to mastodonts do
57945: LD_ADDR_VAR 0 11
57949: PUSH
57950: DOUBLE
57951: LD_INT 1
57953: DEC
57954: ST_TO_ADDR
57955: LD_VAR 0 6
57959: PUSH
57960: FOR_TO
57961: IFFALSE 58008
// begin vc_chassis := 31 ;
57963: LD_ADDR_OWVAR 37
57967: PUSH
57968: LD_INT 31
57970: ST_TO_ADDR
// vc_control := control_rider ;
57971: LD_ADDR_OWVAR 38
57975: PUSH
57976: LD_INT 4
57978: ST_TO_ADDR
// animal := CreateVehicle ;
57979: LD_ADDR_VAR 0 12
57983: PUSH
57984: CALL_OW 45
57988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57989: LD_VAR 0 12
57993: PPUSH
57994: LD_VAR 0 8
57998: PPUSH
57999: LD_INT 0
58001: PPUSH
58002: CALL 60138 0 3
// end ;
58006: GO 57960
58008: POP
58009: POP
// if horses then
58010: LD_VAR 0 5
58014: IFFALSE 58081
// for i = 1 to horses do
58016: LD_ADDR_VAR 0 11
58020: PUSH
58021: DOUBLE
58022: LD_INT 1
58024: DEC
58025: ST_TO_ADDR
58026: LD_VAR 0 5
58030: PUSH
58031: FOR_TO
58032: IFFALSE 58079
// begin hc_class := 21 ;
58034: LD_ADDR_OWVAR 28
58038: PUSH
58039: LD_INT 21
58041: ST_TO_ADDR
// hc_gallery :=  ;
58042: LD_ADDR_OWVAR 33
58046: PUSH
58047: LD_STRING 
58049: ST_TO_ADDR
// animal := CreateHuman ;
58050: LD_ADDR_VAR 0 12
58054: PUSH
58055: CALL_OW 44
58059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58060: LD_VAR 0 12
58064: PPUSH
58065: LD_VAR 0 8
58069: PPUSH
58070: LD_INT 0
58072: PPUSH
58073: CALL 60138 0 3
// end ;
58077: GO 58031
58079: POP
58080: POP
// if birds then
58081: LD_VAR 0 1
58085: IFFALSE 58152
// for i = 1 to birds do
58087: LD_ADDR_VAR 0 11
58091: PUSH
58092: DOUBLE
58093: LD_INT 1
58095: DEC
58096: ST_TO_ADDR
58097: LD_VAR 0 1
58101: PUSH
58102: FOR_TO
58103: IFFALSE 58150
// begin hc_class := 18 ;
58105: LD_ADDR_OWVAR 28
58109: PUSH
58110: LD_INT 18
58112: ST_TO_ADDR
// hc_gallery =  ;
58113: LD_ADDR_OWVAR 33
58117: PUSH
58118: LD_STRING 
58120: ST_TO_ADDR
// animal := CreateHuman ;
58121: LD_ADDR_VAR 0 12
58125: PUSH
58126: CALL_OW 44
58130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58131: LD_VAR 0 12
58135: PPUSH
58136: LD_VAR 0 8
58140: PPUSH
58141: LD_INT 0
58143: PPUSH
58144: CALL 60138 0 3
// end ;
58148: GO 58102
58150: POP
58151: POP
// if tigers then
58152: LD_VAR 0 2
58156: IFFALSE 58240
// for i = 1 to tigers do
58158: LD_ADDR_VAR 0 11
58162: PUSH
58163: DOUBLE
58164: LD_INT 1
58166: DEC
58167: ST_TO_ADDR
58168: LD_VAR 0 2
58172: PUSH
58173: FOR_TO
58174: IFFALSE 58238
// begin hc_class = class_tiger ;
58176: LD_ADDR_OWVAR 28
58180: PUSH
58181: LD_INT 14
58183: ST_TO_ADDR
// hc_gallery =  ;
58184: LD_ADDR_OWVAR 33
58188: PUSH
58189: LD_STRING 
58191: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58192: LD_ADDR_OWVAR 35
58196: PUSH
58197: LD_INT 7
58199: NEG
58200: PPUSH
58201: LD_INT 7
58203: PPUSH
58204: CALL_OW 12
58208: ST_TO_ADDR
// animal := CreateHuman ;
58209: LD_ADDR_VAR 0 12
58213: PUSH
58214: CALL_OW 44
58218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58219: LD_VAR 0 12
58223: PPUSH
58224: LD_VAR 0 8
58228: PPUSH
58229: LD_INT 0
58231: PPUSH
58232: CALL 60138 0 3
// end ;
58236: GO 58173
58238: POP
58239: POP
// if apemans then
58240: LD_VAR 0 3
58244: IFFALSE 58367
// for i = 1 to apemans do
58246: LD_ADDR_VAR 0 11
58250: PUSH
58251: DOUBLE
58252: LD_INT 1
58254: DEC
58255: ST_TO_ADDR
58256: LD_VAR 0 3
58260: PUSH
58261: FOR_TO
58262: IFFALSE 58365
// begin hc_class = class_apeman ;
58264: LD_ADDR_OWVAR 28
58268: PUSH
58269: LD_INT 12
58271: ST_TO_ADDR
// hc_gallery =  ;
58272: LD_ADDR_OWVAR 33
58276: PUSH
58277: LD_STRING 
58279: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58280: LD_ADDR_OWVAR 35
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PPUSH
58289: LD_INT 2
58291: PPUSH
58292: CALL_OW 12
58296: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58297: LD_ADDR_OWVAR 31
58301: PUSH
58302: LD_INT 1
58304: PPUSH
58305: LD_INT 3
58307: PPUSH
58308: CALL_OW 12
58312: PUSH
58313: LD_INT 1
58315: PPUSH
58316: LD_INT 3
58318: PPUSH
58319: CALL_OW 12
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: ST_TO_ADDR
// animal := CreateHuman ;
58336: LD_ADDR_VAR 0 12
58340: PUSH
58341: CALL_OW 44
58345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58346: LD_VAR 0 12
58350: PPUSH
58351: LD_VAR 0 8
58355: PPUSH
58356: LD_INT 0
58358: PPUSH
58359: CALL 60138 0 3
// end ;
58363: GO 58261
58365: POP
58366: POP
// if enchidnas then
58367: LD_VAR 0 4
58371: IFFALSE 58438
// for i = 1 to enchidnas do
58373: LD_ADDR_VAR 0 11
58377: PUSH
58378: DOUBLE
58379: LD_INT 1
58381: DEC
58382: ST_TO_ADDR
58383: LD_VAR 0 4
58387: PUSH
58388: FOR_TO
58389: IFFALSE 58436
// begin hc_class = 13 ;
58391: LD_ADDR_OWVAR 28
58395: PUSH
58396: LD_INT 13
58398: ST_TO_ADDR
// hc_gallery =  ;
58399: LD_ADDR_OWVAR 33
58403: PUSH
58404: LD_STRING 
58406: ST_TO_ADDR
// animal := CreateHuman ;
58407: LD_ADDR_VAR 0 12
58411: PUSH
58412: CALL_OW 44
58416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58417: LD_VAR 0 12
58421: PPUSH
58422: LD_VAR 0 8
58426: PPUSH
58427: LD_INT 0
58429: PPUSH
58430: CALL 60138 0 3
// end ;
58434: GO 58388
58436: POP
58437: POP
// if fishes then
58438: LD_VAR 0 7
58442: IFFALSE 58509
// for i = 1 to fishes do
58444: LD_ADDR_VAR 0 11
58448: PUSH
58449: DOUBLE
58450: LD_INT 1
58452: DEC
58453: ST_TO_ADDR
58454: LD_VAR 0 7
58458: PUSH
58459: FOR_TO
58460: IFFALSE 58507
// begin hc_class = 20 ;
58462: LD_ADDR_OWVAR 28
58466: PUSH
58467: LD_INT 20
58469: ST_TO_ADDR
// hc_gallery =  ;
58470: LD_ADDR_OWVAR 33
58474: PUSH
58475: LD_STRING 
58477: ST_TO_ADDR
// animal := CreateHuman ;
58478: LD_ADDR_VAR 0 12
58482: PUSH
58483: CALL_OW 44
58487: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58488: LD_VAR 0 12
58492: PPUSH
58493: LD_VAR 0 9
58497: PPUSH
58498: LD_INT 0
58500: PPUSH
58501: CALL 60138 0 3
// end ;
58505: GO 58459
58507: POP
58508: POP
// end ;
58509: LD_VAR 0 10
58513: RET
// export function WantHeal ( sci , unit ) ; begin
58514: LD_INT 0
58516: PPUSH
// if GetTaskList ( sci ) > 0 then
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 437
58526: PUSH
58527: LD_INT 0
58529: GREATER
58530: IFFALSE 58600
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58532: LD_VAR 0 1
58536: PPUSH
58537: CALL_OW 437
58541: PUSH
58542: LD_INT 1
58544: ARRAY
58545: PUSH
58546: LD_INT 1
58548: ARRAY
58549: PUSH
58550: LD_STRING l
58552: EQUAL
58553: PUSH
58554: LD_VAR 0 1
58558: PPUSH
58559: CALL_OW 437
58563: PUSH
58564: LD_INT 1
58566: ARRAY
58567: PUSH
58568: LD_INT 4
58570: ARRAY
58571: PUSH
58572: LD_VAR 0 2
58576: EQUAL
58577: AND
58578: IFFALSE 58590
// result := true else
58580: LD_ADDR_VAR 0 3
58584: PUSH
58585: LD_INT 1
58587: ST_TO_ADDR
58588: GO 58598
// result := false ;
58590: LD_ADDR_VAR 0 3
58594: PUSH
58595: LD_INT 0
58597: ST_TO_ADDR
// end else
58598: GO 58608
// result := false ;
58600: LD_ADDR_VAR 0 3
58604: PUSH
58605: LD_INT 0
58607: ST_TO_ADDR
// end ;
58608: LD_VAR 0 3
58612: RET
// export function HealTarget ( sci ) ; begin
58613: LD_INT 0
58615: PPUSH
// if not sci then
58616: LD_VAR 0 1
58620: NOT
58621: IFFALSE 58625
// exit ;
58623: GO 58690
// result := 0 ;
58625: LD_ADDR_VAR 0 2
58629: PUSH
58630: LD_INT 0
58632: ST_TO_ADDR
// if GetTaskList ( sci ) then
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 437
58642: IFFALSE 58690
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58644: LD_VAR 0 1
58648: PPUSH
58649: CALL_OW 437
58653: PUSH
58654: LD_INT 1
58656: ARRAY
58657: PUSH
58658: LD_INT 1
58660: ARRAY
58661: PUSH
58662: LD_STRING l
58664: EQUAL
58665: IFFALSE 58690
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58667: LD_ADDR_VAR 0 2
58671: PUSH
58672: LD_VAR 0 1
58676: PPUSH
58677: CALL_OW 437
58681: PUSH
58682: LD_INT 1
58684: ARRAY
58685: PUSH
58686: LD_INT 4
58688: ARRAY
58689: ST_TO_ADDR
// end ;
58690: LD_VAR 0 2
58694: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58695: LD_INT 0
58697: PPUSH
58698: PPUSH
58699: PPUSH
58700: PPUSH
// if not base_units then
58701: LD_VAR 0 1
58705: NOT
58706: IFFALSE 58710
// exit ;
58708: GO 58797
// result := false ;
58710: LD_ADDR_VAR 0 2
58714: PUSH
58715: LD_INT 0
58717: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58718: LD_ADDR_VAR 0 5
58722: PUSH
58723: LD_VAR 0 1
58727: PPUSH
58728: LD_INT 21
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PPUSH
58738: CALL_OW 72
58742: ST_TO_ADDR
// if not tmp then
58743: LD_VAR 0 5
58747: NOT
58748: IFFALSE 58752
// exit ;
58750: GO 58797
// for i in tmp do
58752: LD_ADDR_VAR 0 3
58756: PUSH
58757: LD_VAR 0 5
58761: PUSH
58762: FOR_IN
58763: IFFALSE 58795
// begin result := EnemyInRange ( i , 22 ) ;
58765: LD_ADDR_VAR 0 2
58769: PUSH
58770: LD_VAR 0 3
58774: PPUSH
58775: LD_INT 22
58777: PPUSH
58778: CALL 56395 0 2
58782: ST_TO_ADDR
// if result then
58783: LD_VAR 0 2
58787: IFFALSE 58793
// exit ;
58789: POP
58790: POP
58791: GO 58797
// end ;
58793: GO 58762
58795: POP
58796: POP
// end ;
58797: LD_VAR 0 2
58801: RET
// export function FilterByTag ( units , tag ) ; begin
58802: LD_INT 0
58804: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58805: LD_ADDR_VAR 0 3
58809: PUSH
58810: LD_VAR 0 1
58814: PPUSH
58815: LD_INT 120
58817: PUSH
58818: LD_VAR 0 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PPUSH
58827: CALL_OW 72
58831: ST_TO_ADDR
// end ;
58832: LD_VAR 0 3
58836: RET
// export function IsDriver ( un ) ; begin
58837: LD_INT 0
58839: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58840: LD_ADDR_VAR 0 2
58844: PUSH
58845: LD_VAR 0 1
58849: PUSH
58850: LD_INT 55
58852: PUSH
58853: EMPTY
58854: LIST
58855: PPUSH
58856: CALL_OW 69
58860: IN
58861: ST_TO_ADDR
// end ;
58862: LD_VAR 0 2
58866: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58867: LD_INT 0
58869: PPUSH
58870: PPUSH
// list := [ ] ;
58871: LD_ADDR_VAR 0 5
58875: PUSH
58876: EMPTY
58877: ST_TO_ADDR
// case d of 0 :
58878: LD_VAR 0 3
58882: PUSH
58883: LD_INT 0
58885: DOUBLE
58886: EQUAL
58887: IFTRUE 58891
58889: GO 59024
58891: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58892: LD_ADDR_VAR 0 5
58896: PUSH
58897: LD_VAR 0 1
58901: PUSH
58902: LD_INT 4
58904: MINUS
58905: PUSH
58906: LD_VAR 0 2
58910: PUSH
58911: LD_INT 4
58913: MINUS
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: PUSH
58923: LD_VAR 0 1
58927: PUSH
58928: LD_INT 3
58930: MINUS
58931: PUSH
58932: LD_VAR 0 2
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: PUSH
58945: LD_VAR 0 1
58949: PUSH
58950: LD_INT 4
58952: PLUS
58953: PUSH
58954: LD_VAR 0 2
58958: PUSH
58959: LD_INT 4
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: PUSH
58967: LD_VAR 0 1
58971: PUSH
58972: LD_INT 3
58974: PLUS
58975: PUSH
58976: LD_VAR 0 2
58980: PUSH
58981: LD_INT 3
58983: PLUS
58984: PUSH
58985: LD_INT 5
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: PUSH
58993: LD_VAR 0 1
58997: PUSH
58998: LD_VAR 0 2
59002: PUSH
59003: LD_INT 4
59005: PLUS
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// end ; 1 :
59022: GO 59722
59024: LD_INT 1
59026: DOUBLE
59027: EQUAL
59028: IFTRUE 59032
59030: GO 59165
59032: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59033: LD_ADDR_VAR 0 5
59037: PUSH
59038: LD_VAR 0 1
59042: PUSH
59043: LD_VAR 0 2
59047: PUSH
59048: LD_INT 4
59050: MINUS
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: LD_VAR 0 1
59064: PUSH
59065: LD_INT 3
59067: MINUS
59068: PUSH
59069: LD_VAR 0 2
59073: PUSH
59074: LD_INT 3
59076: MINUS
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: PUSH
59086: LD_VAR 0 1
59090: PUSH
59091: LD_INT 4
59093: MINUS
59094: PUSH
59095: LD_VAR 0 2
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: PUSH
59108: LD_VAR 0 1
59112: PUSH
59113: LD_VAR 0 2
59117: PUSH
59118: LD_INT 3
59120: PLUS
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: PUSH
59130: LD_VAR 0 1
59134: PUSH
59135: LD_INT 4
59137: PLUS
59138: PUSH
59139: LD_VAR 0 2
59143: PUSH
59144: LD_INT 4
59146: PLUS
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// end ; 2 :
59163: GO 59722
59165: LD_INT 2
59167: DOUBLE
59168: EQUAL
59169: IFTRUE 59173
59171: GO 59302
59173: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59174: LD_ADDR_VAR 0 5
59178: PUSH
59179: LD_VAR 0 1
59183: PUSH
59184: LD_VAR 0 2
59188: PUSH
59189: LD_INT 3
59191: MINUS
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: PUSH
59201: LD_VAR 0 1
59205: PUSH
59206: LD_INT 4
59208: PLUS
59209: PUSH
59210: LD_VAR 0 2
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: LD_VAR 0 1
59227: PUSH
59228: LD_VAR 0 2
59232: PUSH
59233: LD_INT 4
59235: PLUS
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: PUSH
59245: LD_VAR 0 1
59249: PUSH
59250: LD_INT 3
59252: MINUS
59253: PUSH
59254: LD_VAR 0 2
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: PUSH
59267: LD_VAR 0 1
59271: PUSH
59272: LD_INT 4
59274: MINUS
59275: PUSH
59276: LD_VAR 0 2
59280: PUSH
59281: LD_INT 4
59283: MINUS
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: ST_TO_ADDR
// end ; 3 :
59300: GO 59722
59302: LD_INT 3
59304: DOUBLE
59305: EQUAL
59306: IFTRUE 59310
59308: GO 59443
59310: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59311: LD_ADDR_VAR 0 5
59315: PUSH
59316: LD_VAR 0 1
59320: PUSH
59321: LD_INT 3
59323: PLUS
59324: PUSH
59325: LD_VAR 0 2
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PUSH
59338: LD_VAR 0 1
59342: PUSH
59343: LD_INT 4
59345: PLUS
59346: PUSH
59347: LD_VAR 0 2
59351: PUSH
59352: LD_INT 4
59354: PLUS
59355: PUSH
59356: LD_INT 5
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: PUSH
59364: LD_VAR 0 1
59368: PUSH
59369: LD_INT 4
59371: MINUS
59372: PUSH
59373: LD_VAR 0 2
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: PUSH
59386: LD_VAR 0 1
59390: PUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_INT 4
59398: MINUS
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: PUSH
59408: LD_VAR 0 1
59412: PUSH
59413: LD_INT 3
59415: MINUS
59416: PUSH
59417: LD_VAR 0 2
59421: PUSH
59422: LD_INT 3
59424: MINUS
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: ST_TO_ADDR
// end ; 4 :
59441: GO 59722
59443: LD_INT 4
59445: DOUBLE
59446: EQUAL
59447: IFTRUE 59451
59449: GO 59584
59451: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59452: LD_ADDR_VAR 0 5
59456: PUSH
59457: LD_VAR 0 1
59461: PUSH
59462: LD_VAR 0 2
59466: PUSH
59467: LD_INT 4
59469: PLUS
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 3
59486: PLUS
59487: PUSH
59488: LD_VAR 0 2
59492: PUSH
59493: LD_INT 3
59495: PLUS
59496: PUSH
59497: LD_INT 5
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: LIST
59504: PUSH
59505: LD_VAR 0 1
59509: PUSH
59510: LD_INT 4
59512: PLUS
59513: PUSH
59514: LD_VAR 0 2
59518: PUSH
59519: LD_INT 4
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: PUSH
59527: LD_VAR 0 1
59531: PUSH
59532: LD_VAR 0 2
59536: PUSH
59537: LD_INT 3
59539: MINUS
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: PUSH
59549: LD_VAR 0 1
59553: PUSH
59554: LD_INT 4
59556: MINUS
59557: PUSH
59558: LD_VAR 0 2
59562: PUSH
59563: LD_INT 4
59565: MINUS
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: ST_TO_ADDR
// end ; 5 :
59582: GO 59722
59584: LD_INT 5
59586: DOUBLE
59587: EQUAL
59588: IFTRUE 59592
59590: GO 59721
59592: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59593: LD_ADDR_VAR 0 5
59597: PUSH
59598: LD_VAR 0 1
59602: PUSH
59603: LD_INT 4
59605: MINUS
59606: PUSH
59607: LD_VAR 0 2
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: PUSH
59620: LD_VAR 0 1
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_INT 4
59632: MINUS
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: PUSH
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 4
59649: PLUS
59650: PUSH
59651: LD_VAR 0 2
59655: PUSH
59656: LD_INT 4
59658: PLUS
59659: PUSH
59660: LD_INT 5
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: LD_VAR 0 1
59672: PUSH
59673: LD_INT 3
59675: PLUS
59676: PUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: PUSH
59690: LD_VAR 0 1
59694: PUSH
59695: LD_VAR 0 2
59699: PUSH
59700: LD_INT 3
59702: PLUS
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// end ; end ;
59719: GO 59722
59721: POP
// result := list ;
59722: LD_ADDR_VAR 0 4
59726: PUSH
59727: LD_VAR 0 5
59731: ST_TO_ADDR
// end ;
59732: LD_VAR 0 4
59736: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59737: LD_INT 0
59739: PPUSH
59740: PPUSH
59741: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59742: LD_VAR 0 1
59746: NOT
59747: PUSH
59748: LD_VAR 0 2
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: LD_INT 4
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: IN
59771: NOT
59772: OR
59773: IFFALSE 59777
// exit ;
59775: GO 59860
// tmp := [ ] ;
59777: LD_ADDR_VAR 0 5
59781: PUSH
59782: EMPTY
59783: ST_TO_ADDR
// for i in units do
59784: LD_ADDR_VAR 0 4
59788: PUSH
59789: LD_VAR 0 1
59793: PUSH
59794: FOR_IN
59795: IFFALSE 59829
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59797: LD_ADDR_VAR 0 5
59801: PUSH
59802: LD_VAR 0 5
59806: PPUSH
59807: LD_VAR 0 4
59811: PPUSH
59812: LD_VAR 0 2
59816: PPUSH
59817: CALL_OW 259
59821: PPUSH
59822: CALL 61233 0 2
59826: ST_TO_ADDR
59827: GO 59794
59829: POP
59830: POP
// if not tmp then
59831: LD_VAR 0 5
59835: NOT
59836: IFFALSE 59840
// exit ;
59838: GO 59860
// result := SortListByListDesc ( units , tmp ) ;
59840: LD_ADDR_VAR 0 3
59844: PUSH
59845: LD_VAR 0 1
59849: PPUSH
59850: LD_VAR 0 5
59854: PPUSH
59855: CALL_OW 77
59859: ST_TO_ADDR
// end ;
59860: LD_VAR 0 3
59864: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59865: LD_INT 0
59867: PPUSH
59868: PPUSH
59869: PPUSH
// result := false ;
59870: LD_ADDR_VAR 0 3
59874: PUSH
59875: LD_INT 0
59877: ST_TO_ADDR
// if not building then
59878: LD_VAR 0 2
59882: NOT
59883: IFFALSE 59887
// exit ;
59885: GO 60025
// x := GetX ( building ) ;
59887: LD_ADDR_VAR 0 4
59891: PUSH
59892: LD_VAR 0 2
59896: PPUSH
59897: CALL_OW 250
59901: ST_TO_ADDR
// y := GetY ( building ) ;
59902: LD_ADDR_VAR 0 5
59906: PUSH
59907: LD_VAR 0 2
59911: PPUSH
59912: CALL_OW 251
59916: ST_TO_ADDR
// if not x or not y then
59917: LD_VAR 0 4
59921: NOT
59922: PUSH
59923: LD_VAR 0 5
59927: NOT
59928: OR
59929: IFFALSE 59933
// exit ;
59931: GO 60025
// if GetTaskList ( unit ) then
59933: LD_VAR 0 1
59937: PPUSH
59938: CALL_OW 437
59942: IFFALSE 60025
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59944: LD_STRING e
59946: PUSH
59947: LD_VAR 0 1
59951: PPUSH
59952: CALL_OW 437
59956: PUSH
59957: LD_INT 1
59959: ARRAY
59960: PUSH
59961: LD_INT 1
59963: ARRAY
59964: EQUAL
59965: PUSH
59966: LD_VAR 0 4
59970: PUSH
59971: LD_VAR 0 1
59975: PPUSH
59976: CALL_OW 437
59980: PUSH
59981: LD_INT 1
59983: ARRAY
59984: PUSH
59985: LD_INT 2
59987: ARRAY
59988: EQUAL
59989: AND
59990: PUSH
59991: LD_VAR 0 5
59995: PUSH
59996: LD_VAR 0 1
60000: PPUSH
60001: CALL_OW 437
60005: PUSH
60006: LD_INT 1
60008: ARRAY
60009: PUSH
60010: LD_INT 3
60012: ARRAY
60013: EQUAL
60014: AND
60015: IFFALSE 60025
// result := true end ;
60017: LD_ADDR_VAR 0 3
60021: PUSH
60022: LD_INT 1
60024: ST_TO_ADDR
// end ;
60025: LD_VAR 0 3
60029: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60030: LD_INT 0
60032: PPUSH
// result := false ;
60033: LD_ADDR_VAR 0 4
60037: PUSH
60038: LD_INT 0
60040: ST_TO_ADDR
// if GetTaskList ( unit ) then
60041: LD_VAR 0 1
60045: PPUSH
60046: CALL_OW 437
60050: IFFALSE 60133
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60052: LD_STRING M
60054: PUSH
60055: LD_VAR 0 1
60059: PPUSH
60060: CALL_OW 437
60064: PUSH
60065: LD_INT 1
60067: ARRAY
60068: PUSH
60069: LD_INT 1
60071: ARRAY
60072: EQUAL
60073: PUSH
60074: LD_VAR 0 2
60078: PUSH
60079: LD_VAR 0 1
60083: PPUSH
60084: CALL_OW 437
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PUSH
60093: LD_INT 2
60095: ARRAY
60096: EQUAL
60097: AND
60098: PUSH
60099: LD_VAR 0 3
60103: PUSH
60104: LD_VAR 0 1
60108: PPUSH
60109: CALL_OW 437
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PUSH
60118: LD_INT 3
60120: ARRAY
60121: EQUAL
60122: AND
60123: IFFALSE 60133
// result := true ;
60125: LD_ADDR_VAR 0 4
60129: PUSH
60130: LD_INT 1
60132: ST_TO_ADDR
// end ; end ;
60133: LD_VAR 0 4
60137: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60138: LD_INT 0
60140: PPUSH
60141: PPUSH
60142: PPUSH
60143: PPUSH
// if not unit or not area then
60144: LD_VAR 0 1
60148: NOT
60149: PUSH
60150: LD_VAR 0 2
60154: NOT
60155: OR
60156: IFFALSE 60160
// exit ;
60158: GO 60336
// tmp := AreaToList ( area , i ) ;
60160: LD_ADDR_VAR 0 6
60164: PUSH
60165: LD_VAR 0 2
60169: PPUSH
60170: LD_VAR 0 5
60174: PPUSH
60175: CALL_OW 517
60179: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60180: LD_ADDR_VAR 0 5
60184: PUSH
60185: DOUBLE
60186: LD_INT 1
60188: DEC
60189: ST_TO_ADDR
60190: LD_VAR 0 6
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: PUSH
60199: FOR_TO
60200: IFFALSE 60334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60202: LD_ADDR_VAR 0 7
60206: PUSH
60207: LD_VAR 0 6
60211: PUSH
60212: LD_INT 1
60214: ARRAY
60215: PUSH
60216: LD_VAR 0 5
60220: ARRAY
60221: PUSH
60222: LD_VAR 0 6
60226: PUSH
60227: LD_INT 2
60229: ARRAY
60230: PUSH
60231: LD_VAR 0 5
60235: ARRAY
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
60241: LD_INT 92
60243: PUSH
60244: LD_VAR 0 7
60248: PUSH
60249: LD_INT 1
60251: ARRAY
60252: PUSH
60253: LD_VAR 0 7
60257: PUSH
60258: LD_INT 2
60260: ARRAY
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: PPUSH
60271: CALL_OW 69
60275: PUSH
60276: LD_INT 0
60278: EQUAL
60279: IFFALSE 60332
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60281: LD_VAR 0 1
60285: PPUSH
60286: LD_VAR 0 7
60290: PUSH
60291: LD_INT 1
60293: ARRAY
60294: PPUSH
60295: LD_VAR 0 7
60299: PUSH
60300: LD_INT 2
60302: ARRAY
60303: PPUSH
60304: LD_VAR 0 3
60308: PPUSH
60309: CALL_OW 48
// result := IsPlaced ( unit ) ;
60313: LD_ADDR_VAR 0 4
60317: PUSH
60318: LD_VAR 0 1
60322: PPUSH
60323: CALL_OW 305
60327: ST_TO_ADDR
// exit ;
60328: POP
60329: POP
60330: GO 60336
// end ; end ;
60332: GO 60199
60334: POP
60335: POP
// end ;
60336: LD_VAR 0 4
60340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60341: LD_INT 0
60343: PPUSH
60344: PPUSH
60345: PPUSH
// if not side or side > 8 then
60346: LD_VAR 0 1
60350: NOT
60351: PUSH
60352: LD_VAR 0 1
60356: PUSH
60357: LD_INT 8
60359: GREATER
60360: OR
60361: IFFALSE 60365
// exit ;
60363: GO 60552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60365: LD_ADDR_VAR 0 4
60369: PUSH
60370: LD_INT 22
60372: PUSH
60373: LD_VAR 0 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 21
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PPUSH
60396: CALL_OW 69
60400: ST_TO_ADDR
// if not tmp then
60401: LD_VAR 0 4
60405: NOT
60406: IFFALSE 60410
// exit ;
60408: GO 60552
// enable_addtolog := true ;
60410: LD_ADDR_OWVAR 81
60414: PUSH
60415: LD_INT 1
60417: ST_TO_ADDR
// AddToLog ( [ ) ;
60418: LD_STRING [
60420: PPUSH
60421: CALL_OW 561
// for i in tmp do
60425: LD_ADDR_VAR 0 3
60429: PUSH
60430: LD_VAR 0 4
60434: PUSH
60435: FOR_IN
60436: IFFALSE 60543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60438: LD_STRING [
60440: PUSH
60441: LD_VAR 0 3
60445: PPUSH
60446: CALL_OW 266
60450: STR
60451: PUSH
60452: LD_STRING , 
60454: STR
60455: PUSH
60456: LD_VAR 0 3
60460: PPUSH
60461: CALL_OW 250
60465: STR
60466: PUSH
60467: LD_STRING , 
60469: STR
60470: PUSH
60471: LD_VAR 0 3
60475: PPUSH
60476: CALL_OW 251
60480: STR
60481: PUSH
60482: LD_STRING , 
60484: STR
60485: PUSH
60486: LD_VAR 0 3
60490: PPUSH
60491: CALL_OW 254
60495: STR
60496: PUSH
60497: LD_STRING , 
60499: STR
60500: PUSH
60501: LD_VAR 0 3
60505: PPUSH
60506: LD_INT 1
60508: PPUSH
60509: CALL_OW 268
60513: STR
60514: PUSH
60515: LD_STRING , 
60517: STR
60518: PUSH
60519: LD_VAR 0 3
60523: PPUSH
60524: LD_INT 2
60526: PPUSH
60527: CALL_OW 268
60531: STR
60532: PUSH
60533: LD_STRING ],
60535: STR
60536: PPUSH
60537: CALL_OW 561
// end ;
60541: GO 60435
60543: POP
60544: POP
// AddToLog ( ]; ) ;
60545: LD_STRING ];
60547: PPUSH
60548: CALL_OW 561
// end ;
60552: LD_VAR 0 2
60556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60557: LD_INT 0
60559: PPUSH
60560: PPUSH
60561: PPUSH
60562: PPUSH
60563: PPUSH
// if not area or not rate or not max then
60564: LD_VAR 0 1
60568: NOT
60569: PUSH
60570: LD_VAR 0 2
60574: NOT
60575: OR
60576: PUSH
60577: LD_VAR 0 4
60581: NOT
60582: OR
60583: IFFALSE 60587
// exit ;
60585: GO 60776
// while 1 do
60587: LD_INT 1
60589: IFFALSE 60776
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60591: LD_ADDR_VAR 0 9
60595: PUSH
60596: LD_VAR 0 1
60600: PPUSH
60601: LD_INT 1
60603: PPUSH
60604: CALL_OW 287
60608: PUSH
60609: LD_INT 10
60611: MUL
60612: ST_TO_ADDR
// r := rate / 10 ;
60613: LD_ADDR_VAR 0 7
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_INT 10
60625: DIVREAL
60626: ST_TO_ADDR
// time := 1 1$00 ;
60627: LD_ADDR_VAR 0 8
60631: PUSH
60632: LD_INT 2100
60634: ST_TO_ADDR
// if amount < min then
60635: LD_VAR 0 9
60639: PUSH
60640: LD_VAR 0 3
60644: LESS
60645: IFFALSE 60663
// r := r * 2 else
60647: LD_ADDR_VAR 0 7
60651: PUSH
60652: LD_VAR 0 7
60656: PUSH
60657: LD_INT 2
60659: MUL
60660: ST_TO_ADDR
60661: GO 60689
// if amount > max then
60663: LD_VAR 0 9
60667: PUSH
60668: LD_VAR 0 4
60672: GREATER
60673: IFFALSE 60689
// r := r / 2 ;
60675: LD_ADDR_VAR 0 7
60679: PUSH
60680: LD_VAR 0 7
60684: PUSH
60685: LD_INT 2
60687: DIVREAL
60688: ST_TO_ADDR
// time := time / r ;
60689: LD_ADDR_VAR 0 8
60693: PUSH
60694: LD_VAR 0 8
60698: PUSH
60699: LD_VAR 0 7
60703: DIVREAL
60704: ST_TO_ADDR
// if time < 0 then
60705: LD_VAR 0 8
60709: PUSH
60710: LD_INT 0
60712: LESS
60713: IFFALSE 60730
// time := time * - 1 ;
60715: LD_ADDR_VAR 0 8
60719: PUSH
60720: LD_VAR 0 8
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: MUL
60729: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60730: LD_VAR 0 8
60734: PUSH
60735: LD_INT 35
60737: PPUSH
60738: LD_INT 875
60740: PPUSH
60741: CALL_OW 12
60745: PLUS
60746: PPUSH
60747: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60751: LD_INT 1
60753: PPUSH
60754: LD_INT 5
60756: PPUSH
60757: CALL_OW 12
60761: PPUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: LD_INT 1
60769: PPUSH
60770: CALL_OW 55
// end ;
60774: GO 60587
// end ;
60776: LD_VAR 0 5
60780: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60781: LD_INT 0
60783: PPUSH
60784: PPUSH
60785: PPUSH
60786: PPUSH
60787: PPUSH
60788: PPUSH
60789: PPUSH
60790: PPUSH
// if not turrets or not factories then
60791: LD_VAR 0 1
60795: NOT
60796: PUSH
60797: LD_VAR 0 2
60801: NOT
60802: OR
60803: IFFALSE 60807
// exit ;
60805: GO 61114
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60807: LD_ADDR_VAR 0 10
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: LD_INT 6
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 4
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: LD_INT 5
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 24
60849: PUSH
60850: LD_INT 25
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 23
60859: PUSH
60860: LD_INT 27
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 42
60873: PUSH
60874: LD_INT 43
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 44
60883: PUSH
60884: LD_INT 46
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 45
60893: PUSH
60894: LD_INT 47
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: ST_TO_ADDR
// result := [ ] ;
60911: LD_ADDR_VAR 0 3
60915: PUSH
60916: EMPTY
60917: ST_TO_ADDR
// for i in turrets do
60918: LD_ADDR_VAR 0 4
60922: PUSH
60923: LD_VAR 0 1
60927: PUSH
60928: FOR_IN
60929: IFFALSE 61112
// begin nat := GetNation ( i ) ;
60931: LD_ADDR_VAR 0 7
60935: PUSH
60936: LD_VAR 0 4
60940: PPUSH
60941: CALL_OW 248
60945: ST_TO_ADDR
// weapon := 0 ;
60946: LD_ADDR_VAR 0 8
60950: PUSH
60951: LD_INT 0
60953: ST_TO_ADDR
// if not nat then
60954: LD_VAR 0 7
60958: NOT
60959: IFFALSE 60963
// continue ;
60961: GO 60928
// for j in list [ nat ] do
60963: LD_ADDR_VAR 0 5
60967: PUSH
60968: LD_VAR 0 10
60972: PUSH
60973: LD_VAR 0 7
60977: ARRAY
60978: PUSH
60979: FOR_IN
60980: IFFALSE 61021
// if GetBWeapon ( i ) = j [ 1 ] then
60982: LD_VAR 0 4
60986: PPUSH
60987: CALL_OW 269
60991: PUSH
60992: LD_VAR 0 5
60996: PUSH
60997: LD_INT 1
60999: ARRAY
61000: EQUAL
61001: IFFALSE 61019
// begin weapon := j [ 2 ] ;
61003: LD_ADDR_VAR 0 8
61007: PUSH
61008: LD_VAR 0 5
61012: PUSH
61013: LD_INT 2
61015: ARRAY
61016: ST_TO_ADDR
// break ;
61017: GO 61021
// end ;
61019: GO 60979
61021: POP
61022: POP
// if not weapon then
61023: LD_VAR 0 8
61027: NOT
61028: IFFALSE 61032
// continue ;
61030: GO 60928
// for k in factories do
61032: LD_ADDR_VAR 0 6
61036: PUSH
61037: LD_VAR 0 2
61041: PUSH
61042: FOR_IN
61043: IFFALSE 61108
// begin weapons := AvailableWeaponList ( k ) ;
61045: LD_ADDR_VAR 0 9
61049: PUSH
61050: LD_VAR 0 6
61054: PPUSH
61055: CALL_OW 478
61059: ST_TO_ADDR
// if not weapons then
61060: LD_VAR 0 9
61064: NOT
61065: IFFALSE 61069
// continue ;
61067: GO 61042
// if weapon in weapons then
61069: LD_VAR 0 8
61073: PUSH
61074: LD_VAR 0 9
61078: IN
61079: IFFALSE 61106
// begin result := [ i , weapon ] ;
61081: LD_ADDR_VAR 0 3
61085: PUSH
61086: LD_VAR 0 4
61090: PUSH
61091: LD_VAR 0 8
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// exit ;
61100: POP
61101: POP
61102: POP
61103: POP
61104: GO 61114
// end ; end ;
61106: GO 61042
61108: POP
61109: POP
// end ;
61110: GO 60928
61112: POP
61113: POP
// end ;
61114: LD_VAR 0 3
61118: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61119: LD_INT 0
61121: PPUSH
// if not side or side > 8 then
61122: LD_VAR 0 3
61126: NOT
61127: PUSH
61128: LD_VAR 0 3
61132: PUSH
61133: LD_INT 8
61135: GREATER
61136: OR
61137: IFFALSE 61141
// exit ;
61139: GO 61200
// if not range then
61141: LD_VAR 0 4
61145: NOT
61146: IFFALSE 61157
// range := - 12 ;
61148: LD_ADDR_VAR 0 4
61152: PUSH
61153: LD_INT 12
61155: NEG
61156: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61157: LD_VAR 0 1
61161: PPUSH
61162: LD_VAR 0 2
61166: PPUSH
61167: LD_VAR 0 3
61171: PPUSH
61172: LD_VAR 0 4
61176: PPUSH
61177: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61181: LD_VAR 0 1
61185: PPUSH
61186: LD_VAR 0 2
61190: PPUSH
61191: LD_VAR 0 3
61195: PPUSH
61196: CALL_OW 331
// end ;
61200: LD_VAR 0 5
61204: RET
// export function Video ( mode ) ; begin
61205: LD_INT 0
61207: PPUSH
// ingame_video = mode ;
61208: LD_ADDR_OWVAR 52
61212: PUSH
61213: LD_VAR 0 1
61217: ST_TO_ADDR
// interface_hidden = mode ;
61218: LD_ADDR_OWVAR 54
61222: PUSH
61223: LD_VAR 0 1
61227: ST_TO_ADDR
// end ;
61228: LD_VAR 0 2
61232: RET
// export function Join ( array , element ) ; begin
61233: LD_INT 0
61235: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61236: LD_ADDR_VAR 0 3
61240: PUSH
61241: LD_VAR 0 1
61245: PPUSH
61246: LD_VAR 0 1
61250: PUSH
61251: LD_INT 1
61253: PLUS
61254: PPUSH
61255: LD_VAR 0 2
61259: PPUSH
61260: CALL_OW 1
61264: ST_TO_ADDR
// end ;
61265: LD_VAR 0 3
61269: RET
// export function JoinUnion ( array , element ) ; begin
61270: LD_INT 0
61272: PPUSH
// result := array union element ;
61273: LD_ADDR_VAR 0 3
61277: PUSH
61278: LD_VAR 0 1
61282: PUSH
61283: LD_VAR 0 2
61287: UNION
61288: ST_TO_ADDR
// end ;
61289: LD_VAR 0 3
61293: RET
// export function GetBehemoths ( side ) ; begin
61294: LD_INT 0
61296: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61297: LD_ADDR_VAR 0 2
61301: PUSH
61302: LD_INT 22
61304: PUSH
61305: LD_VAR 0 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 31
61316: PUSH
61317: LD_INT 25
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PPUSH
61328: CALL_OW 69
61332: ST_TO_ADDR
// end ;
61333: LD_VAR 0 2
61337: RET
// export function Shuffle ( array ) ; var i , index ; begin
61338: LD_INT 0
61340: PPUSH
61341: PPUSH
61342: PPUSH
// result := [ ] ;
61343: LD_ADDR_VAR 0 2
61347: PUSH
61348: EMPTY
61349: ST_TO_ADDR
// if not array then
61350: LD_VAR 0 1
61354: NOT
61355: IFFALSE 61359
// exit ;
61357: GO 61458
// Randomize ;
61359: CALL_OW 10
// for i = array downto 1 do
61363: LD_ADDR_VAR 0 3
61367: PUSH
61368: DOUBLE
61369: LD_VAR 0 1
61373: INC
61374: ST_TO_ADDR
61375: LD_INT 1
61377: PUSH
61378: FOR_DOWNTO
61379: IFFALSE 61456
// begin index := rand ( 1 , array ) ;
61381: LD_ADDR_VAR 0 4
61385: PUSH
61386: LD_INT 1
61388: PPUSH
61389: LD_VAR 0 1
61393: PPUSH
61394: CALL_OW 12
61398: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61399: LD_ADDR_VAR 0 2
61403: PUSH
61404: LD_VAR 0 2
61408: PPUSH
61409: LD_VAR 0 2
61413: PUSH
61414: LD_INT 1
61416: PLUS
61417: PPUSH
61418: LD_VAR 0 1
61422: PUSH
61423: LD_VAR 0 4
61427: ARRAY
61428: PPUSH
61429: CALL_OW 2
61433: ST_TO_ADDR
// array := Delete ( array , index ) ;
61434: LD_ADDR_VAR 0 1
61438: PUSH
61439: LD_VAR 0 1
61443: PPUSH
61444: LD_VAR 0 4
61448: PPUSH
61449: CALL_OW 3
61453: ST_TO_ADDR
// end ;
61454: GO 61378
61456: POP
61457: POP
// end ;
61458: LD_VAR 0 2
61462: RET
// export function GetBaseMaterials ( base ) ; begin
61463: LD_INT 0
61465: PPUSH
// result := [ 0 , 0 , 0 ] ;
61466: LD_ADDR_VAR 0 2
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// if not base then
61485: LD_VAR 0 1
61489: NOT
61490: IFFALSE 61494
// exit ;
61492: GO 61543
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61494: LD_ADDR_VAR 0 2
61498: PUSH
61499: LD_VAR 0 1
61503: PPUSH
61504: LD_INT 1
61506: PPUSH
61507: CALL_OW 275
61511: PUSH
61512: LD_VAR 0 1
61516: PPUSH
61517: LD_INT 2
61519: PPUSH
61520: CALL_OW 275
61524: PUSH
61525: LD_VAR 0 1
61529: PPUSH
61530: LD_INT 3
61532: PPUSH
61533: CALL_OW 275
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: ST_TO_ADDR
// end ;
61543: LD_VAR 0 2
61547: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
// result := array ;
61552: LD_ADDR_VAR 0 3
61556: PUSH
61557: LD_VAR 0 1
61561: ST_TO_ADDR
// if size >= result then
61562: LD_VAR 0 2
61566: PUSH
61567: LD_VAR 0 3
61571: GREATEREQUAL
61572: IFFALSE 61576
// exit ;
61574: GO 61626
// if size then
61576: LD_VAR 0 2
61580: IFFALSE 61626
// for i := array downto size do
61582: LD_ADDR_VAR 0 4
61586: PUSH
61587: DOUBLE
61588: LD_VAR 0 1
61592: INC
61593: ST_TO_ADDR
61594: LD_VAR 0 2
61598: PUSH
61599: FOR_DOWNTO
61600: IFFALSE 61624
// result := Delete ( result , result ) ;
61602: LD_ADDR_VAR 0 3
61606: PUSH
61607: LD_VAR 0 3
61611: PPUSH
61612: LD_VAR 0 3
61616: PPUSH
61617: CALL_OW 3
61621: ST_TO_ADDR
61622: GO 61599
61624: POP
61625: POP
// end ;
61626: LD_VAR 0 3
61630: RET
// export function ComExit ( unit ) ; var tmp ; begin
61631: LD_INT 0
61633: PPUSH
61634: PPUSH
// if not IsInUnit ( unit ) then
61635: LD_VAR 0 1
61639: PPUSH
61640: CALL_OW 310
61644: NOT
61645: IFFALSE 61649
// exit ;
61647: GO 61709
// tmp := IsInUnit ( unit ) ;
61649: LD_ADDR_VAR 0 3
61653: PUSH
61654: LD_VAR 0 1
61658: PPUSH
61659: CALL_OW 310
61663: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61664: LD_VAR 0 3
61668: PPUSH
61669: CALL_OW 247
61673: PUSH
61674: LD_INT 2
61676: EQUAL
61677: IFFALSE 61690
// ComExitVehicle ( unit ) else
61679: LD_VAR 0 1
61683: PPUSH
61684: CALL_OW 121
61688: GO 61699
// ComExitBuilding ( unit ) ;
61690: LD_VAR 0 1
61694: PPUSH
61695: CALL_OW 122
// result := tmp ;
61699: LD_ADDR_VAR 0 2
61703: PUSH
61704: LD_VAR 0 3
61708: ST_TO_ADDR
// end ;
61709: LD_VAR 0 2
61713: RET
// export function ComExitAll ( units ) ; var i ; begin
61714: LD_INT 0
61716: PPUSH
61717: PPUSH
// if not units then
61718: LD_VAR 0 1
61722: NOT
61723: IFFALSE 61727
// exit ;
61725: GO 61753
// for i in units do
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: LD_VAR 0 1
61736: PUSH
61737: FOR_IN
61738: IFFALSE 61751
// ComExit ( i ) ;
61740: LD_VAR 0 3
61744: PPUSH
61745: CALL 61631 0 1
61749: GO 61737
61751: POP
61752: POP
// end ;
61753: LD_VAR 0 2
61757: RET
// export function ResetHc ; begin
61758: LD_INT 0
61760: PPUSH
// InitHc ;
61761: CALL_OW 19
// hc_importance := 0 ;
61765: LD_ADDR_OWVAR 32
61769: PUSH
61770: LD_INT 0
61772: ST_TO_ADDR
// end ;
61773: LD_VAR 0 1
61777: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61778: LD_INT 0
61780: PPUSH
61781: PPUSH
61782: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61783: LD_ADDR_VAR 0 6
61787: PUSH
61788: LD_VAR 0 1
61792: PUSH
61793: LD_VAR 0 3
61797: PLUS
61798: PUSH
61799: LD_INT 2
61801: DIV
61802: ST_TO_ADDR
// if _x < 0 then
61803: LD_VAR 0 6
61807: PUSH
61808: LD_INT 0
61810: LESS
61811: IFFALSE 61828
// _x := _x * - 1 ;
61813: LD_ADDR_VAR 0 6
61817: PUSH
61818: LD_VAR 0 6
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: MUL
61827: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61828: LD_ADDR_VAR 0 7
61832: PUSH
61833: LD_VAR 0 2
61837: PUSH
61838: LD_VAR 0 4
61842: PLUS
61843: PUSH
61844: LD_INT 2
61846: DIV
61847: ST_TO_ADDR
// if _y < 0 then
61848: LD_VAR 0 7
61852: PUSH
61853: LD_INT 0
61855: LESS
61856: IFFALSE 61873
// _y := _y * - 1 ;
61858: LD_ADDR_VAR 0 7
61862: PUSH
61863: LD_VAR 0 7
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: MUL
61872: ST_TO_ADDR
// result := [ _x , _y ] ;
61873: LD_ADDR_VAR 0 5
61877: PUSH
61878: LD_VAR 0 6
61882: PUSH
61883: LD_VAR 0 7
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// end ;
61892: LD_VAR 0 5
61896: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61897: LD_INT 0
61899: PPUSH
61900: PPUSH
61901: PPUSH
61902: PPUSH
// task := GetTaskList ( unit ) ;
61903: LD_ADDR_VAR 0 7
61907: PUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: CALL_OW 437
61917: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61918: LD_VAR 0 7
61922: NOT
61923: PUSH
61924: LD_VAR 0 1
61928: PPUSH
61929: LD_VAR 0 2
61933: PPUSH
61934: CALL_OW 308
61938: NOT
61939: AND
61940: IFFALSE 61944
// exit ;
61942: GO 62062
// if IsInArea ( unit , area ) then
61944: LD_VAR 0 1
61948: PPUSH
61949: LD_VAR 0 2
61953: PPUSH
61954: CALL_OW 308
61958: IFFALSE 61976
// begin ComMoveToArea ( unit , goAway ) ;
61960: LD_VAR 0 1
61964: PPUSH
61965: LD_VAR 0 3
61969: PPUSH
61970: CALL_OW 113
// exit ;
61974: GO 62062
// end ; if task [ 1 ] [ 1 ] <> M then
61976: LD_VAR 0 7
61980: PUSH
61981: LD_INT 1
61983: ARRAY
61984: PUSH
61985: LD_INT 1
61987: ARRAY
61988: PUSH
61989: LD_STRING M
61991: NONEQUAL
61992: IFFALSE 61996
// exit ;
61994: GO 62062
// x := task [ 1 ] [ 2 ] ;
61996: LD_ADDR_VAR 0 5
62000: PUSH
62001: LD_VAR 0 7
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PUSH
62010: LD_INT 2
62012: ARRAY
62013: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62014: LD_ADDR_VAR 0 6
62018: PUSH
62019: LD_VAR 0 7
62023: PUSH
62024: LD_INT 1
62026: ARRAY
62027: PUSH
62028: LD_INT 3
62030: ARRAY
62031: ST_TO_ADDR
// if InArea ( x , y , area ) then
62032: LD_VAR 0 5
62036: PPUSH
62037: LD_VAR 0 6
62041: PPUSH
62042: LD_VAR 0 2
62046: PPUSH
62047: CALL_OW 309
62051: IFFALSE 62062
// ComStop ( unit ) ;
62053: LD_VAR 0 1
62057: PPUSH
62058: CALL_OW 141
// end ;
62062: LD_VAR 0 4
62066: RET
// export function Abs ( value ) ; begin
62067: LD_INT 0
62069: PPUSH
// result := value ;
62070: LD_ADDR_VAR 0 2
62074: PUSH
62075: LD_VAR 0 1
62079: ST_TO_ADDR
// if value < 0 then
62080: LD_VAR 0 1
62084: PUSH
62085: LD_INT 0
62087: LESS
62088: IFFALSE 62105
// result := value * - 1 ;
62090: LD_ADDR_VAR 0 2
62094: PUSH
62095: LD_VAR 0 1
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: MUL
62104: ST_TO_ADDR
// end ;
62105: LD_VAR 0 2
62109: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62110: LD_INT 0
62112: PPUSH
62113: PPUSH
62114: PPUSH
62115: PPUSH
62116: PPUSH
62117: PPUSH
62118: PPUSH
62119: PPUSH
// if not unit or not building then
62120: LD_VAR 0 1
62124: NOT
62125: PUSH
62126: LD_VAR 0 2
62130: NOT
62131: OR
62132: IFFALSE 62136
// exit ;
62134: GO 62362
// x := GetX ( building ) ;
62136: LD_ADDR_VAR 0 4
62140: PUSH
62141: LD_VAR 0 2
62145: PPUSH
62146: CALL_OW 250
62150: ST_TO_ADDR
// y := GetY ( building ) ;
62151: LD_ADDR_VAR 0 6
62155: PUSH
62156: LD_VAR 0 2
62160: PPUSH
62161: CALL_OW 251
62165: ST_TO_ADDR
// d := GetDir ( building ) ;
62166: LD_ADDR_VAR 0 8
62170: PUSH
62171: LD_VAR 0 2
62175: PPUSH
62176: CALL_OW 254
62180: ST_TO_ADDR
// r := 4 ;
62181: LD_ADDR_VAR 0 9
62185: PUSH
62186: LD_INT 4
62188: ST_TO_ADDR
// for i := 1 to 5 do
62189: LD_ADDR_VAR 0 10
62193: PUSH
62194: DOUBLE
62195: LD_INT 1
62197: DEC
62198: ST_TO_ADDR
62199: LD_INT 5
62201: PUSH
62202: FOR_TO
62203: IFFALSE 62360
// begin _x := ShiftX ( x , d , r + i ) ;
62205: LD_ADDR_VAR 0 5
62209: PUSH
62210: LD_VAR 0 4
62214: PPUSH
62215: LD_VAR 0 8
62219: PPUSH
62220: LD_VAR 0 9
62224: PUSH
62225: LD_VAR 0 10
62229: PLUS
62230: PPUSH
62231: CALL_OW 272
62235: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62236: LD_ADDR_VAR 0 7
62240: PUSH
62241: LD_VAR 0 6
62245: PPUSH
62246: LD_VAR 0 8
62250: PPUSH
62251: LD_VAR 0 9
62255: PUSH
62256: LD_VAR 0 10
62260: PLUS
62261: PPUSH
62262: CALL_OW 273
62266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62267: LD_VAR 0 5
62271: PPUSH
62272: LD_VAR 0 7
62276: PPUSH
62277: CALL_OW 488
62281: PUSH
62282: LD_VAR 0 5
62286: PPUSH
62287: LD_VAR 0 7
62291: PPUSH
62292: CALL_OW 428
62296: PPUSH
62297: CALL_OW 247
62301: PUSH
62302: LD_INT 3
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: IN
62312: NOT
62313: AND
62314: IFFALSE 62358
// begin ComMoveXY ( unit , _x , _y ) ;
62316: LD_VAR 0 1
62320: PPUSH
62321: LD_VAR 0 5
62325: PPUSH
62326: LD_VAR 0 7
62330: PPUSH
62331: CALL_OW 111
// result := [ _x , _y ] ;
62335: LD_ADDR_VAR 0 3
62339: PUSH
62340: LD_VAR 0 5
62344: PUSH
62345: LD_VAR 0 7
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: ST_TO_ADDR
// exit ;
62354: POP
62355: POP
62356: GO 62362
// end ; end ;
62358: GO 62202
62360: POP
62361: POP
// end ;
62362: LD_VAR 0 3
62366: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62367: LD_INT 0
62369: PPUSH
62370: PPUSH
62371: PPUSH
// result := 0 ;
62372: LD_ADDR_VAR 0 3
62376: PUSH
62377: LD_INT 0
62379: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62380: LD_VAR 0 1
62384: PUSH
62385: LD_INT 0
62387: LESS
62388: PUSH
62389: LD_VAR 0 1
62393: PUSH
62394: LD_INT 8
62396: GREATER
62397: OR
62398: PUSH
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 0
62406: LESS
62407: OR
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: LD_INT 8
62416: GREATER
62417: OR
62418: IFFALSE 62422
// exit ;
62420: GO 62497
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62422: LD_ADDR_VAR 0 4
62426: PUSH
62427: LD_INT 22
62429: PUSH
62430: LD_VAR 0 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PPUSH
62439: CALL_OW 69
62443: PUSH
62444: FOR_IN
62445: IFFALSE 62495
// begin un := UnitShoot ( i ) ;
62447: LD_ADDR_VAR 0 5
62451: PUSH
62452: LD_VAR 0 4
62456: PPUSH
62457: CALL_OW 504
62461: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62462: LD_VAR 0 5
62466: PPUSH
62467: CALL_OW 255
62471: PUSH
62472: LD_VAR 0 1
62476: EQUAL
62477: IFFALSE 62493
// begin result := un ;
62479: LD_ADDR_VAR 0 3
62483: PUSH
62484: LD_VAR 0 5
62488: ST_TO_ADDR
// exit ;
62489: POP
62490: POP
62491: GO 62497
// end ; end ;
62493: GO 62444
62495: POP
62496: POP
// end ;
62497: LD_VAR 0 3
62501: RET
// export function GetCargoBay ( units ) ; begin
62502: LD_INT 0
62504: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62505: LD_ADDR_VAR 0 2
62509: PUSH
62510: LD_VAR 0 1
62514: PPUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 34
62520: PUSH
62521: LD_INT 12
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 34
62530: PUSH
62531: LD_INT 51
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 34
62540: PUSH
62541: LD_INT 32
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 34
62550: PUSH
62551: LD_INT 89
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: PPUSH
62565: CALL_OW 72
62569: ST_TO_ADDR
// end ;
62570: LD_VAR 0 2
62574: RET
// export function Negate ( value ) ; begin
62575: LD_INT 0
62577: PPUSH
// result := not value ;
62578: LD_ADDR_VAR 0 2
62582: PUSH
62583: LD_VAR 0 1
62587: NOT
62588: ST_TO_ADDR
// end ;
62589: LD_VAR 0 2
62593: RET
// export function Inc ( value ) ; begin
62594: LD_INT 0
62596: PPUSH
// result := value + 1 ;
62597: LD_ADDR_VAR 0 2
62601: PUSH
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 1
62609: PLUS
62610: ST_TO_ADDR
// end ;
62611: LD_VAR 0 2
62615: RET
// export function Dec ( value ) ; begin
62616: LD_INT 0
62618: PPUSH
// result := value - 1 ;
62619: LD_ADDR_VAR 0 2
62623: PUSH
62624: LD_VAR 0 1
62628: PUSH
62629: LD_INT 1
62631: MINUS
62632: ST_TO_ADDR
// end ;
62633: LD_VAR 0 2
62637: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62638: LD_INT 0
62640: PPUSH
62641: PPUSH
62642: PPUSH
62643: PPUSH
62644: PPUSH
62645: PPUSH
62646: PPUSH
62647: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62648: LD_VAR 0 1
62652: PPUSH
62653: LD_VAR 0 2
62657: PPUSH
62658: CALL_OW 488
62662: NOT
62663: PUSH
62664: LD_VAR 0 3
62668: PPUSH
62669: LD_VAR 0 4
62673: PPUSH
62674: CALL_OW 488
62678: NOT
62679: OR
62680: IFFALSE 62693
// begin result := - 1 ;
62682: LD_ADDR_VAR 0 5
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: ST_TO_ADDR
// exit ;
62691: GO 62928
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62693: LD_ADDR_VAR 0 12
62697: PUSH
62698: LD_VAR 0 1
62702: PPUSH
62703: LD_VAR 0 2
62707: PPUSH
62708: LD_VAR 0 3
62712: PPUSH
62713: LD_VAR 0 4
62717: PPUSH
62718: CALL 61778 0 4
62722: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62723: LD_ADDR_VAR 0 11
62727: PUSH
62728: LD_VAR 0 1
62732: PPUSH
62733: LD_VAR 0 2
62737: PPUSH
62738: LD_VAR 0 12
62742: PUSH
62743: LD_INT 1
62745: ARRAY
62746: PPUSH
62747: LD_VAR 0 12
62751: PUSH
62752: LD_INT 2
62754: ARRAY
62755: PPUSH
62756: CALL_OW 298
62760: ST_TO_ADDR
// distance := 9999 ;
62761: LD_ADDR_VAR 0 10
62765: PUSH
62766: LD_INT 9999
62768: ST_TO_ADDR
// for i := 0 to 5 do
62769: LD_ADDR_VAR 0 6
62773: PUSH
62774: DOUBLE
62775: LD_INT 0
62777: DEC
62778: ST_TO_ADDR
62779: LD_INT 5
62781: PUSH
62782: FOR_TO
62783: IFFALSE 62926
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62785: LD_ADDR_VAR 0 7
62789: PUSH
62790: LD_VAR 0 1
62794: PPUSH
62795: LD_VAR 0 6
62799: PPUSH
62800: LD_VAR 0 11
62804: PPUSH
62805: CALL_OW 272
62809: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62810: LD_ADDR_VAR 0 8
62814: PUSH
62815: LD_VAR 0 2
62819: PPUSH
62820: LD_VAR 0 6
62824: PPUSH
62825: LD_VAR 0 11
62829: PPUSH
62830: CALL_OW 273
62834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62835: LD_VAR 0 7
62839: PPUSH
62840: LD_VAR 0 8
62844: PPUSH
62845: CALL_OW 488
62849: NOT
62850: IFFALSE 62854
// continue ;
62852: GO 62782
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62854: LD_ADDR_VAR 0 9
62858: PUSH
62859: LD_VAR 0 12
62863: PUSH
62864: LD_INT 1
62866: ARRAY
62867: PPUSH
62868: LD_VAR 0 12
62872: PUSH
62873: LD_INT 2
62875: ARRAY
62876: PPUSH
62877: LD_VAR 0 7
62881: PPUSH
62882: LD_VAR 0 8
62886: PPUSH
62887: CALL_OW 298
62891: ST_TO_ADDR
// if tmp < distance then
62892: LD_VAR 0 9
62896: PUSH
62897: LD_VAR 0 10
62901: LESS
62902: IFFALSE 62924
// begin result := i ;
62904: LD_ADDR_VAR 0 5
62908: PUSH
62909: LD_VAR 0 6
62913: ST_TO_ADDR
// distance := tmp ;
62914: LD_ADDR_VAR 0 10
62918: PUSH
62919: LD_VAR 0 9
62923: ST_TO_ADDR
// end ; end ;
62924: GO 62782
62926: POP
62927: POP
// end ;
62928: LD_VAR 0 5
62932: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62933: LD_INT 0
62935: PPUSH
62936: PPUSH
// if not driver or not IsInUnit ( driver ) then
62937: LD_VAR 0 1
62941: NOT
62942: PUSH
62943: LD_VAR 0 1
62947: PPUSH
62948: CALL_OW 310
62952: NOT
62953: OR
62954: IFFALSE 62958
// exit ;
62956: GO 63048
// vehicle := IsInUnit ( driver ) ;
62958: LD_ADDR_VAR 0 3
62962: PUSH
62963: LD_VAR 0 1
62967: PPUSH
62968: CALL_OW 310
62972: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62973: LD_VAR 0 1
62977: PPUSH
62978: LD_STRING \
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: PUSH
63008: LD_STRING E
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_VAR 0 3
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PPUSH
63044: CALL_OW 446
// end ;
63048: LD_VAR 0 2
63052: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63053: LD_INT 0
63055: PPUSH
63056: PPUSH
// if not driver or not IsInUnit ( driver ) then
63057: LD_VAR 0 1
63061: NOT
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 310
63072: NOT
63073: OR
63074: IFFALSE 63078
// exit ;
63076: GO 63168
// vehicle := IsInUnit ( driver ) ;
63078: LD_ADDR_VAR 0 3
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: CALL_OW 310
63092: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63093: LD_VAR 0 1
63097: PPUSH
63098: LD_STRING \
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: PUSH
63128: LD_STRING E
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_VAR 0 3
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PPUSH
63164: CALL_OW 447
// end ;
63168: LD_VAR 0 2
63172: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63173: LD_INT 0
63175: PPUSH
63176: PPUSH
63177: PPUSH
// tmp := [ ] ;
63178: LD_ADDR_VAR 0 5
63182: PUSH
63183: EMPTY
63184: ST_TO_ADDR
// for i in units do
63185: LD_ADDR_VAR 0 4
63189: PUSH
63190: LD_VAR 0 1
63194: PUSH
63195: FOR_IN
63196: IFFALSE 63234
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63198: LD_ADDR_VAR 0 5
63202: PUSH
63203: LD_VAR 0 5
63207: PPUSH
63208: LD_VAR 0 5
63212: PUSH
63213: LD_INT 1
63215: PLUS
63216: PPUSH
63217: LD_VAR 0 4
63221: PPUSH
63222: CALL_OW 256
63226: PPUSH
63227: CALL_OW 2
63231: ST_TO_ADDR
63232: GO 63195
63234: POP
63235: POP
// if not tmp then
63236: LD_VAR 0 5
63240: NOT
63241: IFFALSE 63245
// exit ;
63243: GO 63293
// if asc then
63245: LD_VAR 0 2
63249: IFFALSE 63273
// result := SortListByListAsc ( units , tmp ) else
63251: LD_ADDR_VAR 0 3
63255: PUSH
63256: LD_VAR 0 1
63260: PPUSH
63261: LD_VAR 0 5
63265: PPUSH
63266: CALL_OW 76
63270: ST_TO_ADDR
63271: GO 63293
// result := SortListByListDesc ( units , tmp ) ;
63273: LD_ADDR_VAR 0 3
63277: PUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: LD_VAR 0 5
63287: PPUSH
63288: CALL_OW 77
63292: ST_TO_ADDR
// end ;
63293: LD_VAR 0 3
63297: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63298: LD_INT 0
63300: PPUSH
63301: PPUSH
// task := GetTaskList ( mech ) ;
63302: LD_ADDR_VAR 0 4
63306: PUSH
63307: LD_VAR 0 1
63311: PPUSH
63312: CALL_OW 437
63316: ST_TO_ADDR
// if not task then
63317: LD_VAR 0 4
63321: NOT
63322: IFFALSE 63326
// exit ;
63324: GO 63368
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63326: LD_ADDR_VAR 0 3
63330: PUSH
63331: LD_VAR 0 4
63335: PUSH
63336: LD_INT 1
63338: ARRAY
63339: PUSH
63340: LD_INT 1
63342: ARRAY
63343: PUSH
63344: LD_STRING r
63346: EQUAL
63347: PUSH
63348: LD_VAR 0 4
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: PUSH
63357: LD_INT 4
63359: ARRAY
63360: PUSH
63361: LD_VAR 0 2
63365: EQUAL
63366: AND
63367: ST_TO_ADDR
// end ;
63368: LD_VAR 0 3
63372: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63373: LD_INT 0
63375: PPUSH
// SetDir ( unit , d ) ;
63376: LD_VAR 0 1
63380: PPUSH
63381: LD_VAR 0 4
63385: PPUSH
63386: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_VAR 0 2
63399: PPUSH
63400: LD_VAR 0 3
63404: PPUSH
63405: LD_VAR 0 5
63409: PPUSH
63410: CALL_OW 48
// end ;
63414: LD_VAR 0 6
63418: RET
// export function ToNaturalNumber ( number ) ; begin
63419: LD_INT 0
63421: PPUSH
// result := number div 1 ;
63422: LD_ADDR_VAR 0 2
63426: PUSH
63427: LD_VAR 0 1
63431: PUSH
63432: LD_INT 1
63434: DIV
63435: ST_TO_ADDR
// if number < 0 then
63436: LD_VAR 0 1
63440: PUSH
63441: LD_INT 0
63443: LESS
63444: IFFALSE 63454
// result := 0 ;
63446: LD_ADDR_VAR 0 2
63450: PUSH
63451: LD_INT 0
63453: ST_TO_ADDR
// end ;
63454: LD_VAR 0 2
63458: RET
// export function SortByClass ( units , class ) ; var un ; begin
63459: LD_INT 0
63461: PPUSH
63462: PPUSH
// if not units or not class then
63463: LD_VAR 0 1
63467: NOT
63468: PUSH
63469: LD_VAR 0 2
63473: NOT
63474: OR
63475: IFFALSE 63479
// exit ;
63477: GO 63574
// result := [ ] ;
63479: LD_ADDR_VAR 0 3
63483: PUSH
63484: EMPTY
63485: ST_TO_ADDR
// for un in units do
63486: LD_ADDR_VAR 0 4
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: FOR_IN
63497: IFFALSE 63572
// if GetClass ( un ) = class then
63499: LD_VAR 0 4
63503: PPUSH
63504: CALL_OW 257
63508: PUSH
63509: LD_VAR 0 2
63513: EQUAL
63514: IFFALSE 63541
// result := Insert ( result , 1 , un ) else
63516: LD_ADDR_VAR 0 3
63520: PUSH
63521: LD_VAR 0 3
63525: PPUSH
63526: LD_INT 1
63528: PPUSH
63529: LD_VAR 0 4
63533: PPUSH
63534: CALL_OW 2
63538: ST_TO_ADDR
63539: GO 63570
// result := Replace ( result , result + 1 , un ) ;
63541: LD_ADDR_VAR 0 3
63545: PUSH
63546: LD_VAR 0 3
63550: PPUSH
63551: LD_VAR 0 3
63555: PUSH
63556: LD_INT 1
63558: PLUS
63559: PPUSH
63560: LD_VAR 0 4
63564: PPUSH
63565: CALL_OW 1
63569: ST_TO_ADDR
63570: GO 63496
63572: POP
63573: POP
// end ;
63574: LD_VAR 0 3
63578: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63579: LD_INT 0
63581: PPUSH
63582: PPUSH
63583: PPUSH
63584: PPUSH
63585: PPUSH
63586: PPUSH
63587: PPUSH
// result := [ ] ;
63588: LD_ADDR_VAR 0 4
63592: PUSH
63593: EMPTY
63594: ST_TO_ADDR
// if x - r < 0 then
63595: LD_VAR 0 1
63599: PUSH
63600: LD_VAR 0 3
63604: MINUS
63605: PUSH
63606: LD_INT 0
63608: LESS
63609: IFFALSE 63621
// min_x := 0 else
63611: LD_ADDR_VAR 0 8
63615: PUSH
63616: LD_INT 0
63618: ST_TO_ADDR
63619: GO 63637
// min_x := x - r ;
63621: LD_ADDR_VAR 0 8
63625: PUSH
63626: LD_VAR 0 1
63630: PUSH
63631: LD_VAR 0 3
63635: MINUS
63636: ST_TO_ADDR
// if y - r < 0 then
63637: LD_VAR 0 2
63641: PUSH
63642: LD_VAR 0 3
63646: MINUS
63647: PUSH
63648: LD_INT 0
63650: LESS
63651: IFFALSE 63663
// min_y := 0 else
63653: LD_ADDR_VAR 0 7
63657: PUSH
63658: LD_INT 0
63660: ST_TO_ADDR
63661: GO 63679
// min_y := y - r ;
63663: LD_ADDR_VAR 0 7
63667: PUSH
63668: LD_VAR 0 2
63672: PUSH
63673: LD_VAR 0 3
63677: MINUS
63678: ST_TO_ADDR
// max_x := x + r ;
63679: LD_ADDR_VAR 0 9
63683: PUSH
63684: LD_VAR 0 1
63688: PUSH
63689: LD_VAR 0 3
63693: PLUS
63694: ST_TO_ADDR
// max_y := y + r ;
63695: LD_ADDR_VAR 0 10
63699: PUSH
63700: LD_VAR 0 2
63704: PUSH
63705: LD_VAR 0 3
63709: PLUS
63710: ST_TO_ADDR
// for _x = min_x to max_x do
63711: LD_ADDR_VAR 0 5
63715: PUSH
63716: DOUBLE
63717: LD_VAR 0 8
63721: DEC
63722: ST_TO_ADDR
63723: LD_VAR 0 9
63727: PUSH
63728: FOR_TO
63729: IFFALSE 63830
// for _y = min_y to max_y do
63731: LD_ADDR_VAR 0 6
63735: PUSH
63736: DOUBLE
63737: LD_VAR 0 7
63741: DEC
63742: ST_TO_ADDR
63743: LD_VAR 0 10
63747: PUSH
63748: FOR_TO
63749: IFFALSE 63826
// begin if not ValidHex ( _x , _y ) then
63751: LD_VAR 0 5
63755: PPUSH
63756: LD_VAR 0 6
63760: PPUSH
63761: CALL_OW 488
63765: NOT
63766: IFFALSE 63770
// continue ;
63768: GO 63748
// if GetResourceTypeXY ( _x , _y ) then
63770: LD_VAR 0 5
63774: PPUSH
63775: LD_VAR 0 6
63779: PPUSH
63780: CALL_OW 283
63784: IFFALSE 63824
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63786: LD_ADDR_VAR 0 4
63790: PUSH
63791: LD_VAR 0 4
63795: PPUSH
63796: LD_VAR 0 4
63800: PUSH
63801: LD_INT 1
63803: PLUS
63804: PPUSH
63805: LD_VAR 0 5
63809: PUSH
63810: LD_VAR 0 6
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PPUSH
63819: CALL_OW 1
63823: ST_TO_ADDR
// end ;
63824: GO 63748
63826: POP
63827: POP
63828: GO 63728
63830: POP
63831: POP
// end ;
63832: LD_VAR 0 4
63836: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63837: LD_INT 0
63839: PPUSH
63840: PPUSH
63841: PPUSH
63842: PPUSH
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
// if not units then
63847: LD_VAR 0 1
63851: NOT
63852: IFFALSE 63856
// exit ;
63854: GO 64380
// result := UnitFilter ( units , [ f_ok ] ) ;
63856: LD_ADDR_VAR 0 3
63860: PUSH
63861: LD_VAR 0 1
63865: PPUSH
63866: LD_INT 50
63868: PUSH
63869: EMPTY
63870: LIST
63871: PPUSH
63872: CALL_OW 72
63876: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63877: LD_ADDR_VAR 0 8
63881: PUSH
63882: LD_VAR 0 1
63886: PUSH
63887: LD_INT 1
63889: ARRAY
63890: PPUSH
63891: CALL_OW 255
63895: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63896: LD_ADDR_VAR 0 10
63900: PUSH
63901: LD_INT 29
63903: PUSH
63904: LD_INT 91
63906: PUSH
63907: LD_INT 49
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// if not result then
63915: LD_VAR 0 3
63919: NOT
63920: IFFALSE 63924
// exit ;
63922: GO 64380
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63924: LD_ADDR_VAR 0 5
63928: PUSH
63929: LD_INT 81
63931: PUSH
63932: LD_VAR 0 8
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PPUSH
63941: CALL_OW 69
63945: ST_TO_ADDR
// for i in result do
63946: LD_ADDR_VAR 0 4
63950: PUSH
63951: LD_VAR 0 3
63955: PUSH
63956: FOR_IN
63957: IFFALSE 64378
// begin tag := GetTag ( i ) + 1 ;
63959: LD_ADDR_VAR 0 9
63963: PUSH
63964: LD_VAR 0 4
63968: PPUSH
63969: CALL_OW 110
63973: PUSH
63974: LD_INT 1
63976: PLUS
63977: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63978: LD_ADDR_VAR 0 7
63982: PUSH
63983: LD_VAR 0 4
63987: PPUSH
63988: CALL_OW 250
63992: PPUSH
63993: LD_VAR 0 4
63997: PPUSH
63998: CALL_OW 251
64002: PPUSH
64003: LD_INT 6
64005: PPUSH
64006: CALL 63579 0 3
64010: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64011: LD_VAR 0 4
64015: PPUSH
64016: CALL_OW 247
64020: PUSH
64021: LD_INT 2
64023: EQUAL
64024: PUSH
64025: LD_VAR 0 7
64029: AND
64030: PUSH
64031: LD_VAR 0 4
64035: PPUSH
64036: CALL_OW 264
64040: PUSH
64041: LD_VAR 0 10
64045: IN
64046: NOT
64047: AND
64048: IFFALSE 64087
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64050: LD_VAR 0 4
64054: PPUSH
64055: LD_VAR 0 7
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: PPUSH
64068: LD_VAR 0 7
64072: PUSH
64073: LD_INT 1
64075: ARRAY
64076: PUSH
64077: LD_INT 2
64079: ARRAY
64080: PPUSH
64081: CALL_OW 116
64085: GO 64376
// if path > tag then
64087: LD_VAR 0 2
64091: PUSH
64092: LD_VAR 0 9
64096: GREATER
64097: IFFALSE 64305
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64099: LD_ADDR_VAR 0 6
64103: PUSH
64104: LD_VAR 0 5
64108: PPUSH
64109: LD_INT 91
64111: PUSH
64112: LD_VAR 0 4
64116: PUSH
64117: LD_INT 8
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: LIST
64124: PPUSH
64125: CALL_OW 72
64129: ST_TO_ADDR
// if nearEnemy then
64130: LD_VAR 0 6
64134: IFFALSE 64203
// begin if GetWeapon ( i ) = ru_time_lapser then
64136: LD_VAR 0 4
64140: PPUSH
64141: CALL_OW 264
64145: PUSH
64146: LD_INT 49
64148: EQUAL
64149: IFFALSE 64177
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64151: LD_VAR 0 4
64155: PPUSH
64156: LD_VAR 0 6
64160: PPUSH
64161: LD_VAR 0 4
64165: PPUSH
64166: CALL_OW 74
64170: PPUSH
64171: CALL_OW 112
64175: GO 64201
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64177: LD_VAR 0 4
64181: PPUSH
64182: LD_VAR 0 6
64186: PPUSH
64187: LD_VAR 0 4
64191: PPUSH
64192: CALL_OW 74
64196: PPUSH
64197: CALL 65305 0 2
// end else
64201: GO 64303
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64203: LD_VAR 0 4
64207: PPUSH
64208: LD_VAR 0 2
64212: PUSH
64213: LD_VAR 0 9
64217: ARRAY
64218: PUSH
64219: LD_INT 1
64221: ARRAY
64222: PPUSH
64223: LD_VAR 0 2
64227: PUSH
64228: LD_VAR 0 9
64232: ARRAY
64233: PUSH
64234: LD_INT 2
64236: ARRAY
64237: PPUSH
64238: CALL_OW 297
64242: PUSH
64243: LD_INT 6
64245: GREATER
64246: IFFALSE 64289
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64248: LD_VAR 0 4
64252: PPUSH
64253: LD_VAR 0 2
64257: PUSH
64258: LD_VAR 0 9
64262: ARRAY
64263: PUSH
64264: LD_INT 1
64266: ARRAY
64267: PPUSH
64268: LD_VAR 0 2
64272: PUSH
64273: LD_VAR 0 9
64277: ARRAY
64278: PUSH
64279: LD_INT 2
64281: ARRAY
64282: PPUSH
64283: CALL_OW 114
64287: GO 64303
// SetTag ( i , tag ) ;
64289: LD_VAR 0 4
64293: PPUSH
64294: LD_VAR 0 9
64298: PPUSH
64299: CALL_OW 109
// end else
64303: GO 64376
// if enemy then
64305: LD_VAR 0 5
64309: IFFALSE 64376
// begin if GetWeapon ( i ) = ru_time_lapser then
64311: LD_VAR 0 4
64315: PPUSH
64316: CALL_OW 264
64320: PUSH
64321: LD_INT 49
64323: EQUAL
64324: IFFALSE 64352
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64326: LD_VAR 0 4
64330: PPUSH
64331: LD_VAR 0 5
64335: PPUSH
64336: LD_VAR 0 4
64340: PPUSH
64341: CALL_OW 74
64345: PPUSH
64346: CALL_OW 112
64350: GO 64376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64352: LD_VAR 0 4
64356: PPUSH
64357: LD_VAR 0 5
64361: PPUSH
64362: LD_VAR 0 4
64366: PPUSH
64367: CALL_OW 74
64371: PPUSH
64372: CALL 65305 0 2
// end ; end ;
64376: GO 63956
64378: POP
64379: POP
// end ;
64380: LD_VAR 0 3
64384: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64385: LD_INT 0
64387: PPUSH
64388: PPUSH
64389: PPUSH
// if not unit or IsInUnit ( unit ) then
64390: LD_VAR 0 1
64394: NOT
64395: PUSH
64396: LD_VAR 0 1
64400: PPUSH
64401: CALL_OW 310
64405: OR
64406: IFFALSE 64410
// exit ;
64408: GO 64501
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64410: LD_ADDR_VAR 0 4
64414: PUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: CALL_OW 250
64424: PPUSH
64425: LD_VAR 0 2
64429: PPUSH
64430: LD_INT 1
64432: PPUSH
64433: CALL_OW 272
64437: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64438: LD_ADDR_VAR 0 5
64442: PUSH
64443: LD_VAR 0 1
64447: PPUSH
64448: CALL_OW 251
64452: PPUSH
64453: LD_VAR 0 2
64457: PPUSH
64458: LD_INT 1
64460: PPUSH
64461: CALL_OW 273
64465: ST_TO_ADDR
// if ValidHex ( x , y ) then
64466: LD_VAR 0 4
64470: PPUSH
64471: LD_VAR 0 5
64475: PPUSH
64476: CALL_OW 488
64480: IFFALSE 64501
// ComTurnXY ( unit , x , y ) ;
64482: LD_VAR 0 1
64486: PPUSH
64487: LD_VAR 0 4
64491: PPUSH
64492: LD_VAR 0 5
64496: PPUSH
64497: CALL_OW 118
// end ;
64501: LD_VAR 0 3
64505: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64506: LD_INT 0
64508: PPUSH
64509: PPUSH
// result := false ;
64510: LD_ADDR_VAR 0 3
64514: PUSH
64515: LD_INT 0
64517: ST_TO_ADDR
// if not units then
64518: LD_VAR 0 2
64522: NOT
64523: IFFALSE 64527
// exit ;
64525: GO 64572
// for i in units do
64527: LD_ADDR_VAR 0 4
64531: PUSH
64532: LD_VAR 0 2
64536: PUSH
64537: FOR_IN
64538: IFFALSE 64570
// if See ( side , i ) then
64540: LD_VAR 0 1
64544: PPUSH
64545: LD_VAR 0 4
64549: PPUSH
64550: CALL_OW 292
64554: IFFALSE 64568
// begin result := true ;
64556: LD_ADDR_VAR 0 3
64560: PUSH
64561: LD_INT 1
64563: ST_TO_ADDR
// exit ;
64564: POP
64565: POP
64566: GO 64572
// end ;
64568: GO 64537
64570: POP
64571: POP
// end ;
64572: LD_VAR 0 3
64576: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64577: LD_INT 0
64579: PPUSH
64580: PPUSH
64581: PPUSH
64582: PPUSH
// if not unit or not points then
64583: LD_VAR 0 1
64587: NOT
64588: PUSH
64589: LD_VAR 0 2
64593: NOT
64594: OR
64595: IFFALSE 64599
// exit ;
64597: GO 64689
// dist := 99999 ;
64599: LD_ADDR_VAR 0 5
64603: PUSH
64604: LD_INT 99999
64606: ST_TO_ADDR
// for i in points do
64607: LD_ADDR_VAR 0 4
64611: PUSH
64612: LD_VAR 0 2
64616: PUSH
64617: FOR_IN
64618: IFFALSE 64687
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64620: LD_ADDR_VAR 0 6
64624: PUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_VAR 0 4
64634: PUSH
64635: LD_INT 1
64637: ARRAY
64638: PPUSH
64639: LD_VAR 0 4
64643: PUSH
64644: LD_INT 2
64646: ARRAY
64647: PPUSH
64648: CALL_OW 297
64652: ST_TO_ADDR
// if tmpDist < dist then
64653: LD_VAR 0 6
64657: PUSH
64658: LD_VAR 0 5
64662: LESS
64663: IFFALSE 64685
// begin result := i ;
64665: LD_ADDR_VAR 0 3
64669: PUSH
64670: LD_VAR 0 4
64674: ST_TO_ADDR
// dist := tmpDist ;
64675: LD_ADDR_VAR 0 5
64679: PUSH
64680: LD_VAR 0 6
64684: ST_TO_ADDR
// end ; end ;
64685: GO 64617
64687: POP
64688: POP
// end ;
64689: LD_VAR 0 3
64693: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64694: LD_INT 0
64696: PPUSH
// uc_side := side ;
64697: LD_ADDR_OWVAR 20
64701: PUSH
64702: LD_VAR 0 1
64706: ST_TO_ADDR
// uc_nation := 3 ;
64707: LD_ADDR_OWVAR 21
64711: PUSH
64712: LD_INT 3
64714: ST_TO_ADDR
// vc_chassis := 25 ;
64715: LD_ADDR_OWVAR 37
64719: PUSH
64720: LD_INT 25
64722: ST_TO_ADDR
// vc_engine := engine_siberite ;
64723: LD_ADDR_OWVAR 39
64727: PUSH
64728: LD_INT 3
64730: ST_TO_ADDR
// vc_control := control_computer ;
64731: LD_ADDR_OWVAR 38
64735: PUSH
64736: LD_INT 3
64738: ST_TO_ADDR
// vc_weapon := 59 ;
64739: LD_ADDR_OWVAR 40
64743: PUSH
64744: LD_INT 59
64746: ST_TO_ADDR
// result := CreateVehicle ;
64747: LD_ADDR_VAR 0 5
64751: PUSH
64752: CALL_OW 45
64756: ST_TO_ADDR
// SetDir ( result , d ) ;
64757: LD_VAR 0 5
64761: PPUSH
64762: LD_VAR 0 4
64766: PPUSH
64767: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64771: LD_VAR 0 5
64775: PPUSH
64776: LD_VAR 0 2
64780: PPUSH
64781: LD_VAR 0 3
64785: PPUSH
64786: LD_INT 0
64788: PPUSH
64789: CALL_OW 48
// end ;
64793: LD_VAR 0 5
64797: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64798: LD_INT 0
64800: PPUSH
64801: PPUSH
64802: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64803: LD_ADDR_VAR 0 2
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64826: LD_VAR 0 1
64830: NOT
64831: PUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL_OW 264
64841: PUSH
64842: LD_INT 12
64844: PUSH
64845: LD_INT 51
64847: PUSH
64848: LD_INT 32
64850: PUSH
64851: LD_INT 89
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: IN
64860: NOT
64861: OR
64862: IFFALSE 64866
// exit ;
64864: GO 64964
// for i := 1 to 3 do
64866: LD_ADDR_VAR 0 3
64870: PUSH
64871: DOUBLE
64872: LD_INT 1
64874: DEC
64875: ST_TO_ADDR
64876: LD_INT 3
64878: PUSH
64879: FOR_TO
64880: IFFALSE 64962
// begin tmp := GetCargo ( cargo , i ) ;
64882: LD_ADDR_VAR 0 4
64886: PUSH
64887: LD_VAR 0 1
64891: PPUSH
64892: LD_VAR 0 3
64896: PPUSH
64897: CALL_OW 289
64901: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64902: LD_ADDR_VAR 0 2
64906: PUSH
64907: LD_VAR 0 2
64911: PPUSH
64912: LD_VAR 0 3
64916: PPUSH
64917: LD_VAR 0 4
64921: PPUSH
64922: CALL_OW 1
64926: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64927: LD_ADDR_VAR 0 2
64931: PUSH
64932: LD_VAR 0 2
64936: PPUSH
64937: LD_INT 4
64939: PPUSH
64940: LD_VAR 0 2
64944: PUSH
64945: LD_INT 4
64947: ARRAY
64948: PUSH
64949: LD_VAR 0 4
64953: PLUS
64954: PPUSH
64955: CALL_OW 1
64959: ST_TO_ADDR
// end ;
64960: GO 64879
64962: POP
64963: POP
// end ;
64964: LD_VAR 0 2
64968: RET
// export function Length ( array ) ; begin
64969: LD_INT 0
64971: PPUSH
// result := array + 0 ;
64972: LD_ADDR_VAR 0 2
64976: PUSH
64977: LD_VAR 0 1
64981: PUSH
64982: LD_INT 0
64984: PLUS
64985: ST_TO_ADDR
// end ;
64986: LD_VAR 0 2
64990: RET
// export function PrepareArray ( array ) ; begin
64991: LD_INT 0
64993: PPUSH
// result := array diff 0 ;
64994: LD_ADDR_VAR 0 2
64998: PUSH
64999: LD_VAR 0 1
65003: PUSH
65004: LD_INT 0
65006: DIFF
65007: ST_TO_ADDR
// if not result [ 1 ] then
65008: LD_VAR 0 2
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: NOT
65017: IFFALSE 65037
// result := Delete ( result , 1 ) ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_VAR 0 2
65028: PPUSH
65029: LD_INT 1
65031: PPUSH
65032: CALL_OW 3
65036: ST_TO_ADDR
// end ;
65037: LD_VAR 0 2
65041: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65042: LD_INT 0
65044: PPUSH
65045: PPUSH
65046: PPUSH
65047: PPUSH
// sibRocketRange := 25 ;
65048: LD_ADDR_VAR 0 6
65052: PUSH
65053: LD_INT 25
65055: ST_TO_ADDR
// result := false ;
65056: LD_ADDR_VAR 0 4
65060: PUSH
65061: LD_INT 0
65063: ST_TO_ADDR
// for i := 0 to 5 do
65064: LD_ADDR_VAR 0 5
65068: PUSH
65069: DOUBLE
65070: LD_INT 0
65072: DEC
65073: ST_TO_ADDR
65074: LD_INT 5
65076: PUSH
65077: FOR_TO
65078: IFFALSE 65145
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65080: LD_VAR 0 1
65084: PPUSH
65085: LD_VAR 0 5
65089: PPUSH
65090: LD_VAR 0 6
65094: PPUSH
65095: CALL_OW 272
65099: PPUSH
65100: LD_VAR 0 2
65104: PPUSH
65105: LD_VAR 0 5
65109: PPUSH
65110: LD_VAR 0 6
65114: PPUSH
65115: CALL_OW 273
65119: PPUSH
65120: LD_VAR 0 3
65124: PPUSH
65125: CALL_OW 309
65129: IFFALSE 65143
// begin result := true ;
65131: LD_ADDR_VAR 0 4
65135: PUSH
65136: LD_INT 1
65138: ST_TO_ADDR
// exit ;
65139: POP
65140: POP
65141: GO 65147
// end ;
65143: GO 65077
65145: POP
65146: POP
// end ;
65147: LD_VAR 0 4
65151: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65152: LD_INT 0
65154: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65155: LD_VAR 0 1
65159: PPUSH
65160: LD_VAR 0 2
65164: PPUSH
65165: LD_INT 0
65167: PPUSH
65168: LD_INT 0
65170: PPUSH
65171: LD_INT 1
65173: PPUSH
65174: LD_INT 0
65176: PPUSH
65177: CALL_OW 587
// end ;
65181: LD_VAR 0 3
65185: RET
// export function CenterOnNow ( unit ) ; begin
65186: LD_INT 0
65188: PPUSH
// result := IsInUnit ( unit ) ;
65189: LD_ADDR_VAR 0 2
65193: PUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: CALL_OW 310
65203: ST_TO_ADDR
// if not result then
65204: LD_VAR 0 2
65208: NOT
65209: IFFALSE 65221
// result := unit ;
65211: LD_ADDR_VAR 0 2
65215: PUSH
65216: LD_VAR 0 1
65220: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65221: LD_VAR 0 1
65225: PPUSH
65226: CALL_OW 87
// end ;
65230: LD_VAR 0 2
65234: RET
// export function ComMoveHex ( unit , hex ) ; begin
65235: LD_INT 0
65237: PPUSH
// if not hex then
65238: LD_VAR 0 2
65242: NOT
65243: IFFALSE 65247
// exit ;
65245: GO 65300
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65247: LD_VAR 0 2
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PPUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_INT 2
65263: ARRAY
65264: PPUSH
65265: CALL_OW 428
65269: IFFALSE 65273
// exit ;
65271: GO 65300
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65273: LD_VAR 0 1
65277: PPUSH
65278: LD_VAR 0 2
65282: PUSH
65283: LD_INT 1
65285: ARRAY
65286: PPUSH
65287: LD_VAR 0 2
65291: PUSH
65292: LD_INT 2
65294: ARRAY
65295: PPUSH
65296: CALL_OW 111
// end ;
65300: LD_VAR 0 3
65304: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65305: LD_INT 0
65307: PPUSH
65308: PPUSH
65309: PPUSH
// if not unit or not enemy then
65310: LD_VAR 0 1
65314: NOT
65315: PUSH
65316: LD_VAR 0 2
65320: NOT
65321: OR
65322: IFFALSE 65326
// exit ;
65324: GO 65450
// x := GetX ( enemy ) ;
65326: LD_ADDR_VAR 0 4
65330: PUSH
65331: LD_VAR 0 2
65335: PPUSH
65336: CALL_OW 250
65340: ST_TO_ADDR
// y := GetY ( enemy ) ;
65341: LD_ADDR_VAR 0 5
65345: PUSH
65346: LD_VAR 0 2
65350: PPUSH
65351: CALL_OW 251
65355: ST_TO_ADDR
// if ValidHex ( x , y ) then
65356: LD_VAR 0 4
65360: PPUSH
65361: LD_VAR 0 5
65365: PPUSH
65366: CALL_OW 488
65370: IFFALSE 65450
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
65372: LD_VAR 0 2
65376: PPUSH
65377: CALL_OW 247
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: IN
65392: PUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: CALL_OW 255
65402: PPUSH
65403: LD_VAR 0 2
65407: PPUSH
65408: CALL_OW 292
65412: OR
65413: IFFALSE 65431
// ComAttackUnit ( unit , enemy ) else
65415: LD_VAR 0 1
65419: PPUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: CALL_OW 115
65429: GO 65450
// ComAgressiveMove ( unit , x , y ) ;
65431: LD_VAR 0 1
65435: PPUSH
65436: LD_VAR 0 4
65440: PPUSH
65441: LD_VAR 0 5
65445: PPUSH
65446: CALL_OW 114
// end ;
65450: LD_VAR 0 3
65454: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
65455: LD_INT 0
65457: PPUSH
65458: PPUSH
65459: PPUSH
// list := AreaToList ( area , 0 ) ;
65460: LD_ADDR_VAR 0 5
65464: PUSH
65465: LD_VAR 0 1
65469: PPUSH
65470: LD_INT 0
65472: PPUSH
65473: CALL_OW 517
65477: ST_TO_ADDR
// if not list then
65478: LD_VAR 0 5
65482: NOT
65483: IFFALSE 65487
// exit ;
65485: GO 65617
// if all then
65487: LD_VAR 0 2
65491: IFFALSE 65579
// begin for i := 1 to list [ 1 ] do
65493: LD_ADDR_VAR 0 4
65497: PUSH
65498: DOUBLE
65499: LD_INT 1
65501: DEC
65502: ST_TO_ADDR
65503: LD_VAR 0 5
65507: PUSH
65508: LD_INT 1
65510: ARRAY
65511: PUSH
65512: FOR_TO
65513: IFFALSE 65575
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
65515: LD_ADDR_VAR 0 3
65519: PUSH
65520: LD_VAR 0 3
65524: PPUSH
65525: LD_VAR 0 3
65529: PUSH
65530: LD_INT 1
65532: PLUS
65533: PPUSH
65534: LD_VAR 0 5
65538: PUSH
65539: LD_INT 1
65541: ARRAY
65542: PUSH
65543: LD_VAR 0 4
65547: ARRAY
65548: PUSH
65549: LD_VAR 0 5
65553: PUSH
65554: LD_INT 2
65556: ARRAY
65557: PUSH
65558: LD_VAR 0 4
65562: ARRAY
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PPUSH
65568: CALL_OW 1
65572: ST_TO_ADDR
65573: GO 65512
65575: POP
65576: POP
// exit ;
65577: GO 65617
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
65579: LD_ADDR_VAR 0 3
65583: PUSH
65584: LD_VAR 0 5
65588: PUSH
65589: LD_INT 1
65591: ARRAY
65592: PUSH
65593: LD_INT 1
65595: ARRAY
65596: PUSH
65597: LD_VAR 0 5
65601: PUSH
65602: LD_INT 2
65604: ARRAY
65605: PUSH
65606: LD_INT 1
65608: ARRAY
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: ST_TO_ADDR
// end ;
65617: LD_VAR 0 3
65621: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
65622: LD_INT 0
65624: PPUSH
65625: PPUSH
// list := AreaToList ( area , 0 ) ;
65626: LD_ADDR_VAR 0 4
65630: PUSH
65631: LD_VAR 0 1
65635: PPUSH
65636: LD_INT 0
65638: PPUSH
65639: CALL_OW 517
65643: ST_TO_ADDR
// if not list then
65644: LD_VAR 0 4
65648: NOT
65649: IFFALSE 65653
// exit ;
65651: GO 65694
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
65653: LD_ADDR_VAR 0 3
65657: PUSH
65658: LD_VAR 0 4
65662: PUSH
65663: LD_INT 1
65665: ARRAY
65666: PUSH
65667: LD_INT 1
65669: ARRAY
65670: PUSH
65671: LD_VAR 0 4
65675: PUSH
65676: LD_INT 2
65678: ARRAY
65679: PUSH
65680: LD_INT 1
65682: ARRAY
65683: PUSH
65684: LD_VAR 0 2
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: ST_TO_ADDR
// end ;
65694: LD_VAR 0 3
65698: RET
// export function First ( array ) ; begin
65699: LD_INT 0
65701: PPUSH
// if not array then
65702: LD_VAR 0 1
65706: NOT
65707: IFFALSE 65711
// exit ;
65709: GO 65725
// result := array [ 1 ] ;
65711: LD_ADDR_VAR 0 2
65715: PUSH
65716: LD_VAR 0 1
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: ST_TO_ADDR
// end ;
65725: LD_VAR 0 2
65729: RET
// export function Last ( array ) ; begin
65730: LD_INT 0
65732: PPUSH
// if not array then
65733: LD_VAR 0 1
65737: NOT
65738: IFFALSE 65742
// exit ;
65740: GO 65758
// result := array [ array ] ;
65742: LD_ADDR_VAR 0 2
65746: PUSH
65747: LD_VAR 0 1
65751: PUSH
65752: LD_VAR 0 1
65756: ARRAY
65757: ST_TO_ADDR
// end ;
65758: LD_VAR 0 2
65762: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65763: LD_INT 0
65765: PPUSH
65766: PPUSH
// result := [ ] ;
65767: LD_ADDR_VAR 0 5
65771: PUSH
65772: EMPTY
65773: ST_TO_ADDR
// if not array then
65774: LD_VAR 0 1
65778: NOT
65779: IFFALSE 65783
// exit ;
65781: GO 65895
// for i := 1 to array do
65783: LD_ADDR_VAR 0 6
65787: PUSH
65788: DOUBLE
65789: LD_INT 1
65791: DEC
65792: ST_TO_ADDR
65793: LD_VAR 0 1
65797: PUSH
65798: FOR_TO
65799: IFFALSE 65893
// if array [ i ] [ index ] = value then
65801: LD_VAR 0 1
65805: PUSH
65806: LD_VAR 0 6
65810: ARRAY
65811: PUSH
65812: LD_VAR 0 2
65816: ARRAY
65817: PUSH
65818: LD_VAR 0 3
65822: EQUAL
65823: IFFALSE 65891
// begin if indexColumn then
65825: LD_VAR 0 4
65829: IFFALSE 65865
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65831: LD_ADDR_VAR 0 5
65835: PUSH
65836: LD_VAR 0 5
65840: PPUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_VAR 0 6
65850: ARRAY
65851: PUSH
65852: LD_VAR 0 4
65856: ARRAY
65857: PPUSH
65858: CALL 61233 0 2
65862: ST_TO_ADDR
65863: GO 65891
// result := Join ( result , array [ i ] ) ;
65865: LD_ADDR_VAR 0 5
65869: PUSH
65870: LD_VAR 0 5
65874: PPUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_VAR 0 6
65884: ARRAY
65885: PPUSH
65886: CALL 61233 0 2
65890: ST_TO_ADDR
// end ;
65891: GO 65798
65893: POP
65894: POP
// end ;
65895: LD_VAR 0 5
65899: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
65900: LD_INT 0
65902: PPUSH
65903: PPUSH
65904: PPUSH
// if btype = b_depot then
65905: LD_VAR 0 2
65909: PUSH
65910: LD_INT 0
65912: EQUAL
65913: IFFALSE 65925
// begin result := true ;
65915: LD_ADDR_VAR 0 3
65919: PUSH
65920: LD_INT 1
65922: ST_TO_ADDR
// exit ;
65923: GO 66041
// end ; pom := GetBase ( depot ) ;
65925: LD_ADDR_VAR 0 4
65929: PUSH
65930: LD_VAR 0 1
65934: PPUSH
65935: CALL_OW 274
65939: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
65940: LD_ADDR_VAR 0 5
65944: PUSH
65945: LD_VAR 0 2
65949: PPUSH
65950: LD_VAR 0 1
65954: PPUSH
65955: CALL_OW 248
65959: PPUSH
65960: CALL_OW 450
65964: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
65965: LD_ADDR_VAR 0 3
65969: PUSH
65970: LD_VAR 0 4
65974: PPUSH
65975: LD_INT 1
65977: PPUSH
65978: CALL_OW 275
65982: PUSH
65983: LD_VAR 0 5
65987: PUSH
65988: LD_INT 1
65990: ARRAY
65991: GREATEREQUAL
65992: PUSH
65993: LD_VAR 0 4
65997: PPUSH
65998: LD_INT 2
66000: PPUSH
66001: CALL_OW 275
66005: PUSH
66006: LD_VAR 0 5
66010: PUSH
66011: LD_INT 2
66013: ARRAY
66014: GREATEREQUAL
66015: AND
66016: PUSH
66017: LD_VAR 0 4
66021: PPUSH
66022: LD_INT 3
66024: PPUSH
66025: CALL_OW 275
66029: PUSH
66030: LD_VAR 0 5
66034: PUSH
66035: LD_INT 3
66037: ARRAY
66038: GREATEREQUAL
66039: AND
66040: ST_TO_ADDR
// end ;
66041: LD_VAR 0 3
66045: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
66046: LD_INT 0
66048: PPUSH
// if not vehicles or not parkingPoint then
66049: LD_VAR 0 1
66053: NOT
66054: PUSH
66055: LD_VAR 0 2
66059: NOT
66060: OR
66061: IFFALSE 66065
// exit ;
66063: GO 66163
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
66065: LD_ADDR_VAR 0 1
66069: PUSH
66070: LD_VAR 0 1
66074: PPUSH
66075: LD_INT 50
66077: PUSH
66078: EMPTY
66079: LIST
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: LD_INT 92
66086: PUSH
66087: LD_VAR 0 2
66091: PUSH
66092: LD_INT 1
66094: ARRAY
66095: PUSH
66096: LD_VAR 0 2
66100: PUSH
66101: LD_INT 2
66103: ARRAY
66104: PUSH
66105: LD_INT 8
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PPUSH
66122: CALL_OW 72
66126: ST_TO_ADDR
// if not vehicles then
66127: LD_VAR 0 1
66131: NOT
66132: IFFALSE 66136
// exit ;
66134: GO 66163
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
66136: LD_VAR 0 1
66140: PPUSH
66141: LD_VAR 0 2
66145: PUSH
66146: LD_INT 1
66148: ARRAY
66149: PPUSH
66150: LD_VAR 0 2
66154: PUSH
66155: LD_INT 2
66157: ARRAY
66158: PPUSH
66159: CALL_OW 111
// end ;
66163: LD_VAR 0 3
66167: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
66172: PPUSH
// if not side or not area then
66173: LD_VAR 0 1
66177: NOT
66178: PUSH
66179: LD_VAR 0 2
66183: NOT
66184: OR
66185: IFFALSE 66189
// exit ;
66187: GO 66308
// tmp := AreaToList ( area , 0 ) ;
66189: LD_ADDR_VAR 0 5
66193: PUSH
66194: LD_VAR 0 2
66198: PPUSH
66199: LD_INT 0
66201: PPUSH
66202: CALL_OW 517
66206: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
66207: LD_ADDR_VAR 0 4
66211: PUSH
66212: DOUBLE
66213: LD_INT 1
66215: DEC
66216: ST_TO_ADDR
66217: LD_VAR 0 5
66221: PUSH
66222: LD_INT 1
66224: ARRAY
66225: PUSH
66226: FOR_TO
66227: IFFALSE 66306
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
66229: LD_VAR 0 5
66233: PUSH
66234: LD_INT 1
66236: ARRAY
66237: PUSH
66238: LD_VAR 0 4
66242: ARRAY
66243: PPUSH
66244: LD_VAR 0 5
66248: PUSH
66249: LD_INT 2
66251: ARRAY
66252: PUSH
66253: LD_VAR 0 4
66257: ARRAY
66258: PPUSH
66259: CALL_OW 351
66263: IFFALSE 66304
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
66265: LD_VAR 0 5
66269: PUSH
66270: LD_INT 1
66272: ARRAY
66273: PUSH
66274: LD_VAR 0 4
66278: ARRAY
66279: PPUSH
66280: LD_VAR 0 5
66284: PUSH
66285: LD_INT 2
66287: ARRAY
66288: PUSH
66289: LD_VAR 0 4
66293: ARRAY
66294: PPUSH
66295: LD_VAR 0 1
66299: PPUSH
66300: CALL_OW 244
// end ;
66304: GO 66226
66306: POP
66307: POP
// end ; end_of_file
66308: LD_VAR 0 3
66312: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66313: LD_VAR 0 1
66317: PUSH
66318: LD_INT 200
66320: DOUBLE
66321: GREATEREQUAL
66322: IFFALSE 66330
66324: LD_INT 299
66326: DOUBLE
66327: LESSEQUAL
66328: IFTRUE 66332
66330: GO 66364
66332: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66333: LD_VAR 0 1
66337: PPUSH
66338: LD_VAR 0 2
66342: PPUSH
66343: LD_VAR 0 3
66347: PPUSH
66348: LD_VAR 0 4
66352: PPUSH
66353: LD_VAR 0 5
66357: PPUSH
66358: CALL 66852 0 5
66362: GO 66441
66364: LD_INT 300
66366: DOUBLE
66367: GREATEREQUAL
66368: IFFALSE 66376
66370: LD_INT 399
66372: DOUBLE
66373: LESSEQUAL
66374: IFTRUE 66378
66376: GO 66440
66378: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66379: LD_VAR 0 1
66383: PPUSH
66384: LD_VAR 0 2
66388: PPUSH
66389: LD_VAR 0 3
66393: PPUSH
66394: LD_VAR 0 4
66398: PPUSH
66399: LD_VAR 0 5
66403: PPUSH
66404: LD_VAR 0 6
66408: PPUSH
66409: LD_VAR 0 7
66413: PPUSH
66414: LD_VAR 0 8
66418: PPUSH
66419: LD_VAR 0 9
66423: PPUSH
66424: LD_VAR 0 10
66428: PPUSH
66429: LD_VAR 0 11
66433: PPUSH
66434: CALL 20243 0 11
66438: GO 66441
66440: POP
// end ;
66441: PPOPN 11
66443: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66444: LD_VAR 0 1
66448: PPUSH
66449: LD_VAR 0 2
66453: PPUSH
66454: LD_VAR 0 3
66458: PPUSH
66459: LD_VAR 0 4
66463: PPUSH
66464: LD_VAR 0 5
66468: PPUSH
66469: CALL 66588 0 5
// end ; end_of_file
66473: PPOPN 5
66475: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66476: LD_INT 0
66478: PPUSH
66479: PPUSH
66480: PPUSH
66481: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66482: LD_VAR 0 1
66486: PPUSH
66487: CALL_OW 264
66491: PUSH
66492: LD_INT 91
66494: EQUAL
66495: IFFALSE 66567
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66497: LD_INT 68
66499: PPUSH
66500: LD_VAR 0 1
66504: PPUSH
66505: CALL_OW 255
66509: PPUSH
66510: CALL_OW 321
66514: PUSH
66515: LD_INT 2
66517: EQUAL
66518: IFFALSE 66530
// eff := 70 else
66520: LD_ADDR_VAR 0 4
66524: PUSH
66525: LD_INT 70
66527: ST_TO_ADDR
66528: GO 66538
// eff := 30 ;
66530: LD_ADDR_VAR 0 4
66534: PUSH
66535: LD_INT 30
66537: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66538: LD_VAR 0 1
66542: PPUSH
66543: CALL_OW 250
66547: PPUSH
66548: LD_VAR 0 1
66552: PPUSH
66553: CALL_OW 251
66557: PPUSH
66558: LD_VAR 0 4
66562: PPUSH
66563: CALL_OW 495
// end ; end ;
66567: LD_VAR 0 2
66571: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66572: LD_INT 0
66574: PPUSH
// end ;
66575: LD_VAR 0 4
66579: RET
// export function SOS_Command ( cmd ) ; begin
66580: LD_INT 0
66582: PPUSH
// end ;
66583: LD_VAR 0 2
66587: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66588: LD_INT 0
66590: PPUSH
// end ;
66591: LD_VAR 0 6
66595: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66596: LD_INT 0
66598: PPUSH
66599: PPUSH
// if not vehicle or not factory then
66600: LD_VAR 0 1
66604: NOT
66605: PUSH
66606: LD_VAR 0 2
66610: NOT
66611: OR
66612: IFFALSE 66616
// exit ;
66614: GO 66847
// if factoryWaypoints >= factory then
66616: LD_EXP 78
66620: PUSH
66621: LD_VAR 0 2
66625: GREATEREQUAL
66626: IFFALSE 66847
// if factoryWaypoints [ factory ] then
66628: LD_EXP 78
66632: PUSH
66633: LD_VAR 0 2
66637: ARRAY
66638: IFFALSE 66847
// begin if GetControl ( vehicle ) = control_manual then
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 263
66649: PUSH
66650: LD_INT 1
66652: EQUAL
66653: IFFALSE 66734
// begin driver := IsDrivenBy ( vehicle ) ;
66655: LD_ADDR_VAR 0 4
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 311
66669: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66670: LD_VAR 0 4
66674: PPUSH
66675: LD_EXP 78
66679: PUSH
66680: LD_VAR 0 2
66684: ARRAY
66685: PUSH
66686: LD_INT 3
66688: ARRAY
66689: PPUSH
66690: LD_EXP 78
66694: PUSH
66695: LD_VAR 0 2
66699: ARRAY
66700: PUSH
66701: LD_INT 4
66703: ARRAY
66704: PPUSH
66705: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66709: LD_VAR 0 4
66713: PPUSH
66714: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66718: LD_VAR 0 4
66722: PPUSH
66723: LD_VAR 0 2
66727: PPUSH
66728: CALL_OW 180
// end else
66732: GO 66847
// if GetControl ( vehicle ) = control_remote then
66734: LD_VAR 0 1
66738: PPUSH
66739: CALL_OW 263
66743: PUSH
66744: LD_INT 2
66746: EQUAL
66747: IFFALSE 66808
// begin wait ( 0 0$2 ) ;
66749: LD_INT 70
66751: PPUSH
66752: CALL_OW 67
// if Connect ( vehicle ) then
66756: LD_VAR 0 1
66760: PPUSH
66761: CALL 31850 0 1
66765: IFFALSE 66806
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66767: LD_VAR 0 1
66771: PPUSH
66772: LD_EXP 78
66776: PUSH
66777: LD_VAR 0 2
66781: ARRAY
66782: PUSH
66783: LD_INT 3
66785: ARRAY
66786: PPUSH
66787: LD_EXP 78
66791: PUSH
66792: LD_VAR 0 2
66796: ARRAY
66797: PUSH
66798: LD_INT 4
66800: ARRAY
66801: PPUSH
66802: CALL_OW 171
// end else
66806: GO 66847
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_EXP 78
66817: PUSH
66818: LD_VAR 0 2
66822: ARRAY
66823: PUSH
66824: LD_INT 3
66826: ARRAY
66827: PPUSH
66828: LD_EXP 78
66832: PUSH
66833: LD_VAR 0 2
66837: ARRAY
66838: PUSH
66839: LD_INT 4
66841: ARRAY
66842: PPUSH
66843: CALL_OW 171
// end ; end ;
66847: LD_VAR 0 3
66851: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66852: LD_INT 0
66854: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66855: LD_VAR 0 1
66859: PUSH
66860: LD_INT 250
66862: EQUAL
66863: PUSH
66864: LD_VAR 0 2
66868: PPUSH
66869: CALL_OW 264
66873: PUSH
66874: LD_INT 81
66876: EQUAL
66877: AND
66878: IFFALSE 66899
// MinerPlaceMine ( unit , x , y ) ;
66880: LD_VAR 0 2
66884: PPUSH
66885: LD_VAR 0 4
66889: PPUSH
66890: LD_VAR 0 5
66894: PPUSH
66895: CALL 69889 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66899: LD_VAR 0 1
66903: PUSH
66904: LD_INT 251
66906: EQUAL
66907: PUSH
66908: LD_VAR 0 2
66912: PPUSH
66913: CALL_OW 264
66917: PUSH
66918: LD_INT 81
66920: EQUAL
66921: AND
66922: IFFALSE 66943
// MinerDetonateMine ( unit , x , y ) ;
66924: LD_VAR 0 2
66928: PPUSH
66929: LD_VAR 0 4
66933: PPUSH
66934: LD_VAR 0 5
66938: PPUSH
66939: CALL 70164 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66943: LD_VAR 0 1
66947: PUSH
66948: LD_INT 252
66950: EQUAL
66951: PUSH
66952: LD_VAR 0 2
66956: PPUSH
66957: CALL_OW 264
66961: PUSH
66962: LD_INT 81
66964: EQUAL
66965: AND
66966: IFFALSE 66987
// MinerCreateMinefield ( unit , x , y ) ;
66968: LD_VAR 0 2
66972: PPUSH
66973: LD_VAR 0 4
66977: PPUSH
66978: LD_VAR 0 5
66982: PPUSH
66983: CALL 70581 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66987: LD_VAR 0 1
66991: PUSH
66992: LD_INT 253
66994: EQUAL
66995: PUSH
66996: LD_VAR 0 2
67000: PPUSH
67001: CALL_OW 257
67005: PUSH
67006: LD_INT 5
67008: EQUAL
67009: AND
67010: IFFALSE 67031
// ComBinocular ( unit , x , y ) ;
67012: LD_VAR 0 2
67016: PPUSH
67017: LD_VAR 0 4
67021: PPUSH
67022: LD_VAR 0 5
67026: PPUSH
67027: CALL 70950 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67031: LD_VAR 0 1
67035: PUSH
67036: LD_INT 254
67038: EQUAL
67039: PUSH
67040: LD_VAR 0 2
67044: PPUSH
67045: CALL_OW 264
67049: PUSH
67050: LD_INT 99
67052: EQUAL
67053: AND
67054: PUSH
67055: LD_VAR 0 3
67059: PPUSH
67060: CALL_OW 263
67064: PUSH
67065: LD_INT 3
67067: EQUAL
67068: AND
67069: IFFALSE 67085
// HackDestroyVehicle ( unit , selectedUnit ) ;
67071: LD_VAR 0 2
67075: PPUSH
67076: LD_VAR 0 3
67080: PPUSH
67081: CALL 69253 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67085: LD_VAR 0 1
67089: PUSH
67090: LD_INT 255
67092: EQUAL
67093: PUSH
67094: LD_VAR 0 2
67098: PPUSH
67099: CALL_OW 264
67103: PUSH
67104: LD_INT 14
67106: PUSH
67107: LD_INT 53
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: IN
67114: AND
67115: PUSH
67116: LD_VAR 0 4
67120: PPUSH
67121: LD_VAR 0 5
67125: PPUSH
67126: CALL_OW 488
67130: AND
67131: IFFALSE 67155
// CutTreeXYR ( unit , x , y , 12 ) ;
67133: LD_VAR 0 2
67137: PPUSH
67138: LD_VAR 0 4
67142: PPUSH
67143: LD_VAR 0 5
67147: PPUSH
67148: LD_INT 12
67150: PPUSH
67151: CALL 67250 0 4
// if cmd = 256 then
67155: LD_VAR 0 1
67159: PUSH
67160: LD_INT 256
67162: EQUAL
67163: IFFALSE 67184
// SetFactoryWaypoint ( unit , x , y ) ;
67165: LD_VAR 0 2
67169: PPUSH
67170: LD_VAR 0 4
67174: PPUSH
67175: LD_VAR 0 5
67179: PPUSH
67180: CALL 22231 0 3
// if cmd = 257 then
67184: LD_VAR 0 1
67188: PUSH
67189: LD_INT 257
67191: EQUAL
67192: IFFALSE 67213
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67194: LD_VAR 0 2
67198: PPUSH
67199: LD_VAR 0 4
67203: PPUSH
67204: LD_VAR 0 5
67208: PPUSH
67209: CALL 22593 0 3
// if cmd = 258 then
67213: LD_VAR 0 1
67217: PUSH
67218: LD_INT 258
67220: EQUAL
67221: IFFALSE 67245
// BurnTreeXYR ( unit , x , y , 8 ) ;
67223: LD_VAR 0 2
67227: PPUSH
67228: LD_VAR 0 4
67232: PPUSH
67233: LD_VAR 0 5
67237: PPUSH
67238: LD_INT 8
67240: PPUSH
67241: CALL 67644 0 4
// end ;
67245: LD_VAR 0 6
67249: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
67254: PPUSH
67255: PPUSH
67256: PPUSH
67257: PPUSH
67258: PPUSH
67259: PPUSH
67260: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67261: LD_VAR 0 1
67265: PPUSH
67266: CALL_OW 302
67270: NOT
67271: PUSH
67272: LD_VAR 0 2
67276: PPUSH
67277: LD_VAR 0 3
67281: PPUSH
67282: CALL_OW 488
67286: NOT
67287: OR
67288: PUSH
67289: LD_VAR 0 4
67293: NOT
67294: OR
67295: IFFALSE 67299
// exit ;
67297: GO 67639
// list := [ ] ;
67299: LD_ADDR_VAR 0 13
67303: PUSH
67304: EMPTY
67305: ST_TO_ADDR
// if x - r < 0 then
67306: LD_VAR 0 2
67310: PUSH
67311: LD_VAR 0 4
67315: MINUS
67316: PUSH
67317: LD_INT 0
67319: LESS
67320: IFFALSE 67332
// min_x := 0 else
67322: LD_ADDR_VAR 0 7
67326: PUSH
67327: LD_INT 0
67329: ST_TO_ADDR
67330: GO 67348
// min_x := x - r ;
67332: LD_ADDR_VAR 0 7
67336: PUSH
67337: LD_VAR 0 2
67341: PUSH
67342: LD_VAR 0 4
67346: MINUS
67347: ST_TO_ADDR
// if y - r < 0 then
67348: LD_VAR 0 3
67352: PUSH
67353: LD_VAR 0 4
67357: MINUS
67358: PUSH
67359: LD_INT 0
67361: LESS
67362: IFFALSE 67374
// min_y := 0 else
67364: LD_ADDR_VAR 0 8
67368: PUSH
67369: LD_INT 0
67371: ST_TO_ADDR
67372: GO 67390
// min_y := y - r ;
67374: LD_ADDR_VAR 0 8
67378: PUSH
67379: LD_VAR 0 3
67383: PUSH
67384: LD_VAR 0 4
67388: MINUS
67389: ST_TO_ADDR
// max_x := x + r ;
67390: LD_ADDR_VAR 0 9
67394: PUSH
67395: LD_VAR 0 2
67399: PUSH
67400: LD_VAR 0 4
67404: PLUS
67405: ST_TO_ADDR
// max_y := y + r ;
67406: LD_ADDR_VAR 0 10
67410: PUSH
67411: LD_VAR 0 3
67415: PUSH
67416: LD_VAR 0 4
67420: PLUS
67421: ST_TO_ADDR
// for _x = min_x to max_x do
67422: LD_ADDR_VAR 0 11
67426: PUSH
67427: DOUBLE
67428: LD_VAR 0 7
67432: DEC
67433: ST_TO_ADDR
67434: LD_VAR 0 9
67438: PUSH
67439: FOR_TO
67440: IFFALSE 67557
// for _y = min_y to max_y do
67442: LD_ADDR_VAR 0 12
67446: PUSH
67447: DOUBLE
67448: LD_VAR 0 8
67452: DEC
67453: ST_TO_ADDR
67454: LD_VAR 0 10
67458: PUSH
67459: FOR_TO
67460: IFFALSE 67553
// begin if not ValidHex ( _x , _y ) then
67462: LD_VAR 0 11
67466: PPUSH
67467: LD_VAR 0 12
67471: PPUSH
67472: CALL_OW 488
67476: NOT
67477: IFFALSE 67481
// continue ;
67479: GO 67459
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67481: LD_VAR 0 11
67485: PPUSH
67486: LD_VAR 0 12
67490: PPUSH
67491: CALL_OW 351
67495: PUSH
67496: LD_VAR 0 11
67500: PPUSH
67501: LD_VAR 0 12
67505: PPUSH
67506: CALL_OW 554
67510: AND
67511: IFFALSE 67551
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67513: LD_ADDR_VAR 0 13
67517: PUSH
67518: LD_VAR 0 13
67522: PPUSH
67523: LD_VAR 0 13
67527: PUSH
67528: LD_INT 1
67530: PLUS
67531: PPUSH
67532: LD_VAR 0 11
67536: PUSH
67537: LD_VAR 0 12
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PPUSH
67546: CALL_OW 2
67550: ST_TO_ADDR
// end ;
67551: GO 67459
67553: POP
67554: POP
67555: GO 67439
67557: POP
67558: POP
// if not list then
67559: LD_VAR 0 13
67563: NOT
67564: IFFALSE 67568
// exit ;
67566: GO 67639
// for i in list do
67568: LD_ADDR_VAR 0 6
67572: PUSH
67573: LD_VAR 0 13
67577: PUSH
67578: FOR_IN
67579: IFFALSE 67637
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67581: LD_VAR 0 1
67585: PPUSH
67586: LD_STRING M
67588: PUSH
67589: LD_VAR 0 6
67593: PUSH
67594: LD_INT 1
67596: ARRAY
67597: PUSH
67598: LD_VAR 0 6
67602: PUSH
67603: LD_INT 2
67605: ARRAY
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: PUSH
67628: EMPTY
67629: LIST
67630: PPUSH
67631: CALL_OW 447
67635: GO 67578
67637: POP
67638: POP
// end ;
67639: LD_VAR 0 5
67643: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
67644: LD_INT 0
67646: PPUSH
67647: PPUSH
67648: PPUSH
67649: PPUSH
67650: PPUSH
67651: PPUSH
67652: PPUSH
67653: PPUSH
67654: PPUSH
67655: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
67656: LD_VAR 0 1
67660: PPUSH
67661: CALL_OW 302
67665: NOT
67666: PUSH
67667: LD_VAR 0 2
67671: PPUSH
67672: LD_VAR 0 3
67676: PPUSH
67677: CALL_OW 488
67681: NOT
67682: OR
67683: PUSH
67684: LD_VAR 0 4
67688: NOT
67689: OR
67690: IFFALSE 67694
// exit ;
67692: GO 68207
// list := [ ] ;
67694: LD_ADDR_VAR 0 13
67698: PUSH
67699: EMPTY
67700: ST_TO_ADDR
// if x - r < 0 then
67701: LD_VAR 0 2
67705: PUSH
67706: LD_VAR 0 4
67710: MINUS
67711: PUSH
67712: LD_INT 0
67714: LESS
67715: IFFALSE 67727
// min_x := 0 else
67717: LD_ADDR_VAR 0 7
67721: PUSH
67722: LD_INT 0
67724: ST_TO_ADDR
67725: GO 67743
// min_x := x - r ;
67727: LD_ADDR_VAR 0 7
67731: PUSH
67732: LD_VAR 0 2
67736: PUSH
67737: LD_VAR 0 4
67741: MINUS
67742: ST_TO_ADDR
// if y - r < 0 then
67743: LD_VAR 0 3
67747: PUSH
67748: LD_VAR 0 4
67752: MINUS
67753: PUSH
67754: LD_INT 0
67756: LESS
67757: IFFALSE 67769
// min_y := 0 else
67759: LD_ADDR_VAR 0 8
67763: PUSH
67764: LD_INT 0
67766: ST_TO_ADDR
67767: GO 67785
// min_y := y - r ;
67769: LD_ADDR_VAR 0 8
67773: PUSH
67774: LD_VAR 0 3
67778: PUSH
67779: LD_VAR 0 4
67783: MINUS
67784: ST_TO_ADDR
// max_x := x + r ;
67785: LD_ADDR_VAR 0 9
67789: PUSH
67790: LD_VAR 0 2
67794: PUSH
67795: LD_VAR 0 4
67799: PLUS
67800: ST_TO_ADDR
// max_y := y + r ;
67801: LD_ADDR_VAR 0 10
67805: PUSH
67806: LD_VAR 0 3
67810: PUSH
67811: LD_VAR 0 4
67815: PLUS
67816: ST_TO_ADDR
// for _x = min_x to max_x do
67817: LD_ADDR_VAR 0 11
67821: PUSH
67822: DOUBLE
67823: LD_VAR 0 7
67827: DEC
67828: ST_TO_ADDR
67829: LD_VAR 0 9
67833: PUSH
67834: FOR_TO
67835: IFFALSE 67952
// for _y = min_y to max_y do
67837: LD_ADDR_VAR 0 12
67841: PUSH
67842: DOUBLE
67843: LD_VAR 0 8
67847: DEC
67848: ST_TO_ADDR
67849: LD_VAR 0 10
67853: PUSH
67854: FOR_TO
67855: IFFALSE 67948
// begin if not ValidHex ( _x , _y ) then
67857: LD_VAR 0 11
67861: PPUSH
67862: LD_VAR 0 12
67866: PPUSH
67867: CALL_OW 488
67871: NOT
67872: IFFALSE 67876
// continue ;
67874: GO 67854
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67876: LD_VAR 0 11
67880: PPUSH
67881: LD_VAR 0 12
67885: PPUSH
67886: CALL_OW 351
67890: PUSH
67891: LD_VAR 0 11
67895: PPUSH
67896: LD_VAR 0 12
67900: PPUSH
67901: CALL_OW 554
67905: AND
67906: IFFALSE 67946
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67908: LD_ADDR_VAR 0 13
67912: PUSH
67913: LD_VAR 0 13
67917: PPUSH
67918: LD_VAR 0 13
67922: PUSH
67923: LD_INT 1
67925: PLUS
67926: PPUSH
67927: LD_VAR 0 11
67931: PUSH
67932: LD_VAR 0 12
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PPUSH
67941: CALL_OW 2
67945: ST_TO_ADDR
// end ;
67946: GO 67854
67948: POP
67949: POP
67950: GO 67834
67952: POP
67953: POP
// if not list then
67954: LD_VAR 0 13
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 68207
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
67963: LD_ADDR_VAR 0 13
67967: PUSH
67968: LD_VAR 0 1
67972: PPUSH
67973: LD_VAR 0 13
67977: PPUSH
67978: LD_INT 1
67980: PPUSH
67981: LD_INT 1
67983: PPUSH
67984: CALL 28992 0 4
67988: ST_TO_ADDR
// ComStop ( flame ) ;
67989: LD_VAR 0 1
67993: PPUSH
67994: CALL_OW 141
// for i in list do
67998: LD_ADDR_VAR 0 6
68002: PUSH
68003: LD_VAR 0 13
68007: PUSH
68008: FOR_IN
68009: IFFALSE 68040
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68011: LD_VAR 0 1
68015: PPUSH
68016: LD_VAR 0 6
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PPUSH
68025: LD_VAR 0 6
68029: PUSH
68030: LD_INT 2
68032: ARRAY
68033: PPUSH
68034: CALL_OW 176
68038: GO 68008
68040: POP
68041: POP
// repeat wait ( 0 0$1 ) ;
68042: LD_INT 35
68044: PPUSH
68045: CALL_OW 67
// task := GetTaskList ( flame ) ;
68049: LD_ADDR_VAR 0 14
68053: PUSH
68054: LD_VAR 0 1
68058: PPUSH
68059: CALL_OW 437
68063: ST_TO_ADDR
// if not task then
68064: LD_VAR 0 14
68068: NOT
68069: IFFALSE 68073
// exit ;
68071: GO 68207
// if task [ 1 ] [ 1 ] <> | then
68073: LD_VAR 0 14
68077: PUSH
68078: LD_INT 1
68080: ARRAY
68081: PUSH
68082: LD_INT 1
68084: ARRAY
68085: PUSH
68086: LD_STRING |
68088: NONEQUAL
68089: IFFALSE 68093
// exit ;
68091: GO 68207
// _x := task [ 1 ] [ 2 ] ;
68093: LD_ADDR_VAR 0 11
68097: PUSH
68098: LD_VAR 0 14
68102: PUSH
68103: LD_INT 1
68105: ARRAY
68106: PUSH
68107: LD_INT 2
68109: ARRAY
68110: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68111: LD_ADDR_VAR 0 12
68115: PUSH
68116: LD_VAR 0 14
68120: PUSH
68121: LD_INT 1
68123: ARRAY
68124: PUSH
68125: LD_INT 3
68127: ARRAY
68128: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68129: LD_VAR 0 11
68133: PPUSH
68134: LD_VAR 0 12
68138: PPUSH
68139: CALL_OW 351
68143: NOT
68144: PUSH
68145: LD_VAR 0 11
68149: PPUSH
68150: LD_VAR 0 12
68154: PPUSH
68155: CALL_OW 554
68159: NOT
68160: OR
68161: IFFALSE 68195
// begin task := Delete ( task , 1 ) ;
68163: LD_ADDR_VAR 0 14
68167: PUSH
68168: LD_VAR 0 14
68172: PPUSH
68173: LD_INT 1
68175: PPUSH
68176: CALL_OW 3
68180: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68181: LD_VAR 0 1
68185: PPUSH
68186: LD_VAR 0 14
68190: PPUSH
68191: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68195: LD_VAR 0 1
68199: PPUSH
68200: CALL_OW 314
68204: NOT
68205: IFFALSE 68042
// end ;
68207: LD_VAR 0 5
68211: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68212: LD_EXP 81
68216: NOT
68217: IFFALSE 68267
68219: GO 68221
68221: DISABLE
// begin initHack := true ;
68222: LD_ADDR_EXP 81
68226: PUSH
68227: LD_INT 1
68229: ST_TO_ADDR
// hackTanks := [ ] ;
68230: LD_ADDR_EXP 82
68234: PUSH
68235: EMPTY
68236: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68237: LD_ADDR_EXP 83
68241: PUSH
68242: EMPTY
68243: ST_TO_ADDR
// hackLimit := 3 ;
68244: LD_ADDR_EXP 84
68248: PUSH
68249: LD_INT 3
68251: ST_TO_ADDR
// hackDist := 12 ;
68252: LD_ADDR_EXP 85
68256: PUSH
68257: LD_INT 12
68259: ST_TO_ADDR
// hackCounter := [ ] ;
68260: LD_ADDR_EXP 86
68264: PUSH
68265: EMPTY
68266: ST_TO_ADDR
// end ;
68267: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68268: LD_EXP 81
68272: PUSH
68273: LD_INT 34
68275: PUSH
68276: LD_INT 99
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PPUSH
68283: CALL_OW 69
68287: AND
68288: IFFALSE 68541
68290: GO 68292
68292: DISABLE
68293: LD_INT 0
68295: PPUSH
68296: PPUSH
// begin enable ;
68297: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68298: LD_ADDR_VAR 0 1
68302: PUSH
68303: LD_INT 34
68305: PUSH
68306: LD_INT 99
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PPUSH
68313: CALL_OW 69
68317: PUSH
68318: FOR_IN
68319: IFFALSE 68539
// begin if not i in hackTanks then
68321: LD_VAR 0 1
68325: PUSH
68326: LD_EXP 82
68330: IN
68331: NOT
68332: IFFALSE 68415
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68334: LD_ADDR_EXP 82
68338: PUSH
68339: LD_EXP 82
68343: PPUSH
68344: LD_EXP 82
68348: PUSH
68349: LD_INT 1
68351: PLUS
68352: PPUSH
68353: LD_VAR 0 1
68357: PPUSH
68358: CALL_OW 1
68362: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68363: LD_ADDR_EXP 83
68367: PUSH
68368: LD_EXP 83
68372: PPUSH
68373: LD_EXP 83
68377: PUSH
68378: LD_INT 1
68380: PLUS
68381: PPUSH
68382: EMPTY
68383: PPUSH
68384: CALL_OW 1
68388: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68389: LD_ADDR_EXP 86
68393: PUSH
68394: LD_EXP 86
68398: PPUSH
68399: LD_EXP 86
68403: PUSH
68404: LD_INT 1
68406: PLUS
68407: PPUSH
68408: EMPTY
68409: PPUSH
68410: CALL_OW 1
68414: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68415: LD_VAR 0 1
68419: PPUSH
68420: CALL_OW 302
68424: NOT
68425: IFFALSE 68438
// begin HackUnlinkAll ( i ) ;
68427: LD_VAR 0 1
68431: PPUSH
68432: CALL 68544 0 1
// continue ;
68436: GO 68318
// end ; HackCheckCapturedStatus ( i ) ;
68438: LD_VAR 0 1
68442: PPUSH
68443: CALL 68987 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_INT 81
68454: PUSH
68455: LD_VAR 0 1
68459: PPUSH
68460: CALL_OW 255
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 33
68471: PUSH
68472: LD_INT 3
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 91
68481: PUSH
68482: LD_VAR 0 1
68486: PUSH
68487: LD_EXP 85
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 50
68499: PUSH
68500: EMPTY
68501: LIST
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: PPUSH
68509: CALL_OW 69
68513: ST_TO_ADDR
// if not tmp then
68514: LD_VAR 0 2
68518: NOT
68519: IFFALSE 68523
// continue ;
68521: GO 68318
// HackLink ( i , tmp ) ;
68523: LD_VAR 0 1
68527: PPUSH
68528: LD_VAR 0 2
68532: PPUSH
68533: CALL 68680 0 2
// end ;
68537: GO 68318
68539: POP
68540: POP
// end ;
68541: PPOPN 2
68543: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
68544: LD_INT 0
68546: PPUSH
68547: PPUSH
68548: PPUSH
// if not hack in hackTanks then
68549: LD_VAR 0 1
68553: PUSH
68554: LD_EXP 82
68558: IN
68559: NOT
68560: IFFALSE 68564
// exit ;
68562: GO 68675
// index := GetElementIndex ( hackTanks , hack ) ;
68564: LD_ADDR_VAR 0 4
68568: PUSH
68569: LD_EXP 82
68573: PPUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: CALL 28289 0 2
68583: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
68584: LD_EXP 83
68588: PUSH
68589: LD_VAR 0 4
68593: ARRAY
68594: IFFALSE 68675
// begin for i in hackTanksCaptured [ index ] do
68596: LD_ADDR_VAR 0 3
68600: PUSH
68601: LD_EXP 83
68605: PUSH
68606: LD_VAR 0 4
68610: ARRAY
68611: PUSH
68612: FOR_IN
68613: IFFALSE 68639
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
68615: LD_VAR 0 3
68619: PUSH
68620: LD_INT 1
68622: ARRAY
68623: PPUSH
68624: LD_VAR 0 3
68628: PUSH
68629: LD_INT 2
68631: ARRAY
68632: PPUSH
68633: CALL_OW 235
68637: GO 68612
68639: POP
68640: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
68641: LD_ADDR_EXP 83
68645: PUSH
68646: LD_EXP 83
68650: PPUSH
68651: LD_VAR 0 4
68655: PPUSH
68656: EMPTY
68657: PPUSH
68658: CALL_OW 1
68662: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
68663: LD_VAR 0 1
68667: PPUSH
68668: LD_INT 0
68670: PPUSH
68671: CALL_OW 505
// end ; end ;
68675: LD_VAR 0 2
68679: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
68680: LD_INT 0
68682: PPUSH
68683: PPUSH
68684: PPUSH
// if not hack in hackTanks or not vehicles then
68685: LD_VAR 0 1
68689: PUSH
68690: LD_EXP 82
68694: IN
68695: NOT
68696: PUSH
68697: LD_VAR 0 2
68701: NOT
68702: OR
68703: IFFALSE 68707
// exit ;
68705: GO 68982
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
68707: LD_ADDR_VAR 0 2
68711: PUSH
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_VAR 0 2
68721: PPUSH
68722: LD_INT 1
68724: PPUSH
68725: LD_INT 1
68727: PPUSH
68728: CALL 28939 0 4
68732: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
68733: LD_ADDR_VAR 0 5
68737: PUSH
68738: LD_EXP 82
68742: PPUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: CALL 28289 0 2
68752: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
68753: LD_EXP 83
68757: PUSH
68758: LD_VAR 0 5
68762: ARRAY
68763: PUSH
68764: LD_EXP 84
68768: LESS
68769: IFFALSE 68958
// begin for i := 1 to vehicles do
68771: LD_ADDR_VAR 0 4
68775: PUSH
68776: DOUBLE
68777: LD_INT 1
68779: DEC
68780: ST_TO_ADDR
68781: LD_VAR 0 2
68785: PUSH
68786: FOR_TO
68787: IFFALSE 68956
// begin if hackTanksCaptured [ index ] = hackLimit then
68789: LD_EXP 83
68793: PUSH
68794: LD_VAR 0 5
68798: ARRAY
68799: PUSH
68800: LD_EXP 84
68804: EQUAL
68805: IFFALSE 68809
// break ;
68807: GO 68956
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
68809: LD_ADDR_EXP 86
68813: PUSH
68814: LD_EXP 86
68818: PPUSH
68819: LD_VAR 0 5
68823: PPUSH
68824: LD_EXP 86
68828: PUSH
68829: LD_VAR 0 5
68833: ARRAY
68834: PUSH
68835: LD_INT 1
68837: PLUS
68838: PPUSH
68839: CALL_OW 1
68843: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
68844: LD_ADDR_EXP 83
68848: PUSH
68849: LD_EXP 83
68853: PPUSH
68854: LD_VAR 0 5
68858: PUSH
68859: LD_EXP 83
68863: PUSH
68864: LD_VAR 0 5
68868: ARRAY
68869: PUSH
68870: LD_INT 1
68872: PLUS
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PPUSH
68878: LD_VAR 0 2
68882: PUSH
68883: LD_VAR 0 4
68887: ARRAY
68888: PUSH
68889: LD_VAR 0 2
68893: PUSH
68894: LD_VAR 0 4
68898: ARRAY
68899: PPUSH
68900: CALL_OW 255
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PPUSH
68909: CALL 28504 0 3
68913: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
68914: LD_VAR 0 2
68918: PUSH
68919: LD_VAR 0 4
68923: ARRAY
68924: PPUSH
68925: LD_VAR 0 1
68929: PPUSH
68930: CALL_OW 255
68934: PPUSH
68935: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
68939: LD_VAR 0 2
68943: PUSH
68944: LD_VAR 0 4
68948: ARRAY
68949: PPUSH
68950: CALL_OW 141
// end ;
68954: GO 68786
68956: POP
68957: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_EXP 83
68967: PUSH
68968: LD_VAR 0 5
68972: ARRAY
68973: PUSH
68974: LD_INT 0
68976: PLUS
68977: PPUSH
68978: CALL_OW 505
// end ;
68982: LD_VAR 0 3
68986: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
68987: LD_INT 0
68989: PPUSH
68990: PPUSH
68991: PPUSH
68992: PPUSH
// if not hack in hackTanks then
68993: LD_VAR 0 1
68997: PUSH
68998: LD_EXP 82
69002: IN
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69248
// index := GetElementIndex ( hackTanks , hack ) ;
69008: LD_ADDR_VAR 0 4
69012: PUSH
69013: LD_EXP 82
69017: PPUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: CALL 28289 0 2
69027: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69028: LD_ADDR_VAR 0 3
69032: PUSH
69033: DOUBLE
69034: LD_EXP 83
69038: PUSH
69039: LD_VAR 0 4
69043: ARRAY
69044: INC
69045: ST_TO_ADDR
69046: LD_INT 1
69048: PUSH
69049: FOR_DOWNTO
69050: IFFALSE 69222
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69052: LD_ADDR_VAR 0 5
69056: PUSH
69057: LD_EXP 83
69061: PUSH
69062: LD_VAR 0 4
69066: ARRAY
69067: PUSH
69068: LD_VAR 0 3
69072: ARRAY
69073: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69074: LD_VAR 0 5
69078: PUSH
69079: LD_INT 1
69081: ARRAY
69082: PPUSH
69083: CALL_OW 302
69087: NOT
69088: PUSH
69089: LD_VAR 0 5
69093: PUSH
69094: LD_INT 1
69096: ARRAY
69097: PPUSH
69098: CALL_OW 255
69102: PUSH
69103: LD_VAR 0 1
69107: PPUSH
69108: CALL_OW 255
69112: NONEQUAL
69113: OR
69114: IFFALSE 69220
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69116: LD_VAR 0 5
69120: PUSH
69121: LD_INT 1
69123: ARRAY
69124: PPUSH
69125: CALL_OW 305
69129: PUSH
69130: LD_VAR 0 5
69134: PUSH
69135: LD_INT 1
69137: ARRAY
69138: PPUSH
69139: CALL_OW 255
69143: PUSH
69144: LD_VAR 0 1
69148: PPUSH
69149: CALL_OW 255
69153: EQUAL
69154: AND
69155: IFFALSE 69179
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69157: LD_VAR 0 5
69161: PUSH
69162: LD_INT 1
69164: ARRAY
69165: PPUSH
69166: LD_VAR 0 5
69170: PUSH
69171: LD_INT 2
69173: ARRAY
69174: PPUSH
69175: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69179: LD_ADDR_EXP 83
69183: PUSH
69184: LD_EXP 83
69188: PPUSH
69189: LD_VAR 0 4
69193: PPUSH
69194: LD_EXP 83
69198: PUSH
69199: LD_VAR 0 4
69203: ARRAY
69204: PPUSH
69205: LD_VAR 0 3
69209: PPUSH
69210: CALL_OW 3
69214: PPUSH
69215: CALL_OW 1
69219: ST_TO_ADDR
// end ; end ;
69220: GO 69049
69222: POP
69223: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69224: LD_VAR 0 1
69228: PPUSH
69229: LD_EXP 83
69233: PUSH
69234: LD_VAR 0 4
69238: ARRAY
69239: PUSH
69240: LD_INT 0
69242: PLUS
69243: PPUSH
69244: CALL_OW 505
// end ;
69248: LD_VAR 0 2
69252: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69253: LD_INT 0
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
// if not hack in hackTanks then
69259: LD_VAR 0 1
69263: PUSH
69264: LD_EXP 82
69268: IN
69269: NOT
69270: IFFALSE 69274
// exit ;
69272: GO 69359
// index := GetElementIndex ( hackTanks , hack ) ;
69274: LD_ADDR_VAR 0 5
69278: PUSH
69279: LD_EXP 82
69283: PPUSH
69284: LD_VAR 0 1
69288: PPUSH
69289: CALL 28289 0 2
69293: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69294: LD_ADDR_VAR 0 4
69298: PUSH
69299: DOUBLE
69300: LD_INT 1
69302: DEC
69303: ST_TO_ADDR
69304: LD_EXP 83
69308: PUSH
69309: LD_VAR 0 5
69313: ARRAY
69314: PUSH
69315: FOR_TO
69316: IFFALSE 69357
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69318: LD_EXP 83
69322: PUSH
69323: LD_VAR 0 5
69327: ARRAY
69328: PUSH
69329: LD_VAR 0 4
69333: ARRAY
69334: PUSH
69335: LD_INT 1
69337: ARRAY
69338: PUSH
69339: LD_VAR 0 2
69343: EQUAL
69344: IFFALSE 69355
// KillUnit ( vehicle ) ;
69346: LD_VAR 0 2
69350: PPUSH
69351: CALL_OW 66
69355: GO 69315
69357: POP
69358: POP
// end ;
69359: LD_VAR 0 3
69363: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69364: LD_EXP 87
69368: NOT
69369: IFFALSE 69404
69371: GO 69373
69373: DISABLE
// begin initMiner := true ;
69374: LD_ADDR_EXP 87
69378: PUSH
69379: LD_INT 1
69381: ST_TO_ADDR
// minersList := [ ] ;
69382: LD_ADDR_EXP 88
69386: PUSH
69387: EMPTY
69388: ST_TO_ADDR
// minerMinesList := [ ] ;
69389: LD_ADDR_EXP 89
69393: PUSH
69394: EMPTY
69395: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69396: LD_ADDR_EXP 90
69400: PUSH
69401: LD_INT 5
69403: ST_TO_ADDR
// end ;
69404: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69405: LD_EXP 87
69409: PUSH
69410: LD_INT 34
69412: PUSH
69413: LD_INT 81
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PPUSH
69420: CALL_OW 69
69424: AND
69425: IFFALSE 69886
69427: GO 69429
69429: DISABLE
69430: LD_INT 0
69432: PPUSH
69433: PPUSH
69434: PPUSH
69435: PPUSH
// begin enable ;
69436: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69437: LD_ADDR_VAR 0 1
69441: PUSH
69442: LD_INT 34
69444: PUSH
69445: LD_INT 81
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PPUSH
69452: CALL_OW 69
69456: PUSH
69457: FOR_IN
69458: IFFALSE 69530
// begin if not i in minersList then
69460: LD_VAR 0 1
69464: PUSH
69465: LD_EXP 88
69469: IN
69470: NOT
69471: IFFALSE 69528
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
69473: LD_ADDR_EXP 88
69477: PUSH
69478: LD_EXP 88
69482: PPUSH
69483: LD_EXP 88
69487: PUSH
69488: LD_INT 1
69490: PLUS
69491: PPUSH
69492: LD_VAR 0 1
69496: PPUSH
69497: CALL_OW 1
69501: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
69502: LD_ADDR_EXP 89
69506: PUSH
69507: LD_EXP 89
69511: PPUSH
69512: LD_EXP 89
69516: PUSH
69517: LD_INT 1
69519: PLUS
69520: PPUSH
69521: EMPTY
69522: PPUSH
69523: CALL_OW 1
69527: ST_TO_ADDR
// end end ;
69528: GO 69457
69530: POP
69531: POP
// for i := minerMinesList downto 1 do
69532: LD_ADDR_VAR 0 1
69536: PUSH
69537: DOUBLE
69538: LD_EXP 89
69542: INC
69543: ST_TO_ADDR
69544: LD_INT 1
69546: PUSH
69547: FOR_DOWNTO
69548: IFFALSE 69884
// begin if IsLive ( minersList [ i ] ) then
69550: LD_EXP 88
69554: PUSH
69555: LD_VAR 0 1
69559: ARRAY
69560: PPUSH
69561: CALL_OW 300
69565: IFFALSE 69593
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
69567: LD_EXP 88
69571: PUSH
69572: LD_VAR 0 1
69576: ARRAY
69577: PPUSH
69578: LD_EXP 89
69582: PUSH
69583: LD_VAR 0 1
69587: ARRAY
69588: PPUSH
69589: CALL_OW 505
// if not minerMinesList [ i ] then
69593: LD_EXP 89
69597: PUSH
69598: LD_VAR 0 1
69602: ARRAY
69603: NOT
69604: IFFALSE 69608
// continue ;
69606: GO 69547
// for j := minerMinesList [ i ] downto 1 do
69608: LD_ADDR_VAR 0 2
69612: PUSH
69613: DOUBLE
69614: LD_EXP 89
69618: PUSH
69619: LD_VAR 0 1
69623: ARRAY
69624: INC
69625: ST_TO_ADDR
69626: LD_INT 1
69628: PUSH
69629: FOR_DOWNTO
69630: IFFALSE 69880
// begin side := GetSide ( minersList [ i ] ) ;
69632: LD_ADDR_VAR 0 3
69636: PUSH
69637: LD_EXP 88
69641: PUSH
69642: LD_VAR 0 1
69646: ARRAY
69647: PPUSH
69648: CALL_OW 255
69652: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
69653: LD_ADDR_VAR 0 4
69657: PUSH
69658: LD_EXP 89
69662: PUSH
69663: LD_VAR 0 1
69667: ARRAY
69668: PUSH
69669: LD_VAR 0 2
69673: ARRAY
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PPUSH
69679: LD_EXP 89
69683: PUSH
69684: LD_VAR 0 1
69688: ARRAY
69689: PUSH
69690: LD_VAR 0 2
69694: ARRAY
69695: PUSH
69696: LD_INT 2
69698: ARRAY
69699: PPUSH
69700: CALL_OW 428
69704: ST_TO_ADDR
// if not tmp then
69705: LD_VAR 0 4
69709: NOT
69710: IFFALSE 69714
// continue ;
69712: GO 69629
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
69714: LD_VAR 0 4
69718: PUSH
69719: LD_INT 81
69721: PUSH
69722: LD_VAR 0 3
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PPUSH
69731: CALL_OW 69
69735: IN
69736: PUSH
69737: LD_EXP 89
69741: PUSH
69742: LD_VAR 0 1
69746: ARRAY
69747: PUSH
69748: LD_VAR 0 2
69752: ARRAY
69753: PUSH
69754: LD_INT 1
69756: ARRAY
69757: PPUSH
69758: LD_EXP 89
69762: PUSH
69763: LD_VAR 0 1
69767: ARRAY
69768: PUSH
69769: LD_VAR 0 2
69773: ARRAY
69774: PUSH
69775: LD_INT 2
69777: ARRAY
69778: PPUSH
69779: CALL_OW 458
69783: AND
69784: IFFALSE 69878
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
69786: LD_EXP 89
69790: PUSH
69791: LD_VAR 0 1
69795: ARRAY
69796: PUSH
69797: LD_VAR 0 2
69801: ARRAY
69802: PUSH
69803: LD_INT 1
69805: ARRAY
69806: PPUSH
69807: LD_EXP 89
69811: PUSH
69812: LD_VAR 0 1
69816: ARRAY
69817: PUSH
69818: LD_VAR 0 2
69822: ARRAY
69823: PUSH
69824: LD_INT 2
69826: ARRAY
69827: PPUSH
69828: LD_VAR 0 3
69832: PPUSH
69833: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
69837: LD_ADDR_EXP 89
69841: PUSH
69842: LD_EXP 89
69846: PPUSH
69847: LD_VAR 0 1
69851: PPUSH
69852: LD_EXP 89
69856: PUSH
69857: LD_VAR 0 1
69861: ARRAY
69862: PPUSH
69863: LD_VAR 0 2
69867: PPUSH
69868: CALL_OW 3
69872: PPUSH
69873: CALL_OW 1
69877: ST_TO_ADDR
// end ; end ;
69878: GO 69629
69880: POP
69881: POP
// end ;
69882: GO 69547
69884: POP
69885: POP
// end ;
69886: PPOPN 4
69888: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
69889: LD_INT 0
69891: PPUSH
69892: PPUSH
// result := false ;
69893: LD_ADDR_VAR 0 4
69897: PUSH
69898: LD_INT 0
69900: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
69901: LD_VAR 0 1
69905: PPUSH
69906: CALL_OW 264
69910: PUSH
69911: LD_INT 81
69913: EQUAL
69914: NOT
69915: IFFALSE 69919
// exit ;
69917: GO 70159
// index := GetElementIndex ( minersList , unit ) ;
69919: LD_ADDR_VAR 0 5
69923: PUSH
69924: LD_EXP 88
69928: PPUSH
69929: LD_VAR 0 1
69933: PPUSH
69934: CALL 28289 0 2
69938: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
69939: LD_EXP 89
69943: PUSH
69944: LD_VAR 0 5
69948: ARRAY
69949: PUSH
69950: LD_EXP 90
69954: GREATEREQUAL
69955: IFFALSE 69959
// exit ;
69957: GO 70159
// ComMoveXY ( unit , x , y ) ;
69959: LD_VAR 0 1
69963: PPUSH
69964: LD_VAR 0 2
69968: PPUSH
69969: LD_VAR 0 3
69973: PPUSH
69974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69978: LD_INT 35
69980: PPUSH
69981: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
69985: LD_VAR 0 1
69989: PPUSH
69990: LD_VAR 0 2
69994: PPUSH
69995: LD_VAR 0 3
69999: PPUSH
70000: CALL 60030 0 3
70004: NOT
70005: PUSH
70006: LD_VAR 0 1
70010: PPUSH
70011: CALL_OW 314
70015: AND
70016: IFFALSE 70020
// exit ;
70018: GO 70159
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70020: LD_VAR 0 2
70024: PPUSH
70025: LD_VAR 0 3
70029: PPUSH
70030: CALL_OW 428
70034: PUSH
70035: LD_VAR 0 1
70039: EQUAL
70040: PUSH
70041: LD_VAR 0 1
70045: PPUSH
70046: CALL_OW 314
70050: NOT
70051: AND
70052: IFFALSE 69978
// PlaySoundXY ( x , y , PlantMine ) ;
70054: LD_VAR 0 2
70058: PPUSH
70059: LD_VAR 0 3
70063: PPUSH
70064: LD_STRING PlantMine
70066: PPUSH
70067: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70071: LD_VAR 0 2
70075: PPUSH
70076: LD_VAR 0 3
70080: PPUSH
70081: LD_VAR 0 1
70085: PPUSH
70086: CALL_OW 255
70090: PPUSH
70091: LD_INT 0
70093: PPUSH
70094: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70098: LD_ADDR_EXP 89
70102: PUSH
70103: LD_EXP 89
70107: PPUSH
70108: LD_VAR 0 5
70112: PUSH
70113: LD_EXP 89
70117: PUSH
70118: LD_VAR 0 5
70122: ARRAY
70123: PUSH
70124: LD_INT 1
70126: PLUS
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PPUSH
70132: LD_VAR 0 2
70136: PUSH
70137: LD_VAR 0 3
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PPUSH
70146: CALL 28504 0 3
70150: ST_TO_ADDR
// result := true ;
70151: LD_ADDR_VAR 0 4
70155: PUSH
70156: LD_INT 1
70158: ST_TO_ADDR
// end ;
70159: LD_VAR 0 4
70163: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70164: LD_INT 0
70166: PPUSH
70167: PPUSH
70168: PPUSH
// if not unit in minersList then
70169: LD_VAR 0 1
70173: PUSH
70174: LD_EXP 88
70178: IN
70179: NOT
70180: IFFALSE 70184
// exit ;
70182: GO 70576
// index := GetElementIndex ( minersList , unit ) ;
70184: LD_ADDR_VAR 0 6
70188: PUSH
70189: LD_EXP 88
70193: PPUSH
70194: LD_VAR 0 1
70198: PPUSH
70199: CALL 28289 0 2
70203: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70204: LD_ADDR_VAR 0 5
70208: PUSH
70209: DOUBLE
70210: LD_EXP 89
70214: PUSH
70215: LD_VAR 0 6
70219: ARRAY
70220: INC
70221: ST_TO_ADDR
70222: LD_INT 1
70224: PUSH
70225: FOR_DOWNTO
70226: IFFALSE 70387
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
70228: LD_EXP 89
70232: PUSH
70233: LD_VAR 0 6
70237: ARRAY
70238: PUSH
70239: LD_VAR 0 5
70243: ARRAY
70244: PUSH
70245: LD_INT 1
70247: ARRAY
70248: PUSH
70249: LD_VAR 0 2
70253: EQUAL
70254: PUSH
70255: LD_EXP 89
70259: PUSH
70260: LD_VAR 0 6
70264: ARRAY
70265: PUSH
70266: LD_VAR 0 5
70270: ARRAY
70271: PUSH
70272: LD_INT 2
70274: ARRAY
70275: PUSH
70276: LD_VAR 0 3
70280: EQUAL
70281: AND
70282: IFFALSE 70385
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70284: LD_EXP 89
70288: PUSH
70289: LD_VAR 0 6
70293: ARRAY
70294: PUSH
70295: LD_VAR 0 5
70299: ARRAY
70300: PUSH
70301: LD_INT 1
70303: ARRAY
70304: PPUSH
70305: LD_EXP 89
70309: PUSH
70310: LD_VAR 0 6
70314: ARRAY
70315: PUSH
70316: LD_VAR 0 5
70320: ARRAY
70321: PUSH
70322: LD_INT 2
70324: ARRAY
70325: PPUSH
70326: LD_VAR 0 1
70330: PPUSH
70331: CALL_OW 255
70335: PPUSH
70336: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70340: LD_ADDR_EXP 89
70344: PUSH
70345: LD_EXP 89
70349: PPUSH
70350: LD_VAR 0 6
70354: PPUSH
70355: LD_EXP 89
70359: PUSH
70360: LD_VAR 0 6
70364: ARRAY
70365: PPUSH
70366: LD_VAR 0 5
70370: PPUSH
70371: CALL_OW 3
70375: PPUSH
70376: CALL_OW 1
70380: ST_TO_ADDR
// exit ;
70381: POP
70382: POP
70383: GO 70576
// end ; end ;
70385: GO 70225
70387: POP
70388: POP
// for i := minerMinesList [ index ] downto 1 do
70389: LD_ADDR_VAR 0 5
70393: PUSH
70394: DOUBLE
70395: LD_EXP 89
70399: PUSH
70400: LD_VAR 0 6
70404: ARRAY
70405: INC
70406: ST_TO_ADDR
70407: LD_INT 1
70409: PUSH
70410: FOR_DOWNTO
70411: IFFALSE 70574
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70413: LD_EXP 89
70417: PUSH
70418: LD_VAR 0 6
70422: ARRAY
70423: PUSH
70424: LD_VAR 0 5
70428: ARRAY
70429: PUSH
70430: LD_INT 1
70432: ARRAY
70433: PPUSH
70434: LD_EXP 89
70438: PUSH
70439: LD_VAR 0 6
70443: ARRAY
70444: PUSH
70445: LD_VAR 0 5
70449: ARRAY
70450: PUSH
70451: LD_INT 2
70453: ARRAY
70454: PPUSH
70455: LD_VAR 0 2
70459: PPUSH
70460: LD_VAR 0 3
70464: PPUSH
70465: CALL_OW 298
70469: PUSH
70470: LD_INT 6
70472: LESS
70473: IFFALSE 70572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70475: LD_EXP 89
70479: PUSH
70480: LD_VAR 0 6
70484: ARRAY
70485: PUSH
70486: LD_VAR 0 5
70490: ARRAY
70491: PUSH
70492: LD_INT 1
70494: ARRAY
70495: PPUSH
70496: LD_EXP 89
70500: PUSH
70501: LD_VAR 0 6
70505: ARRAY
70506: PUSH
70507: LD_VAR 0 5
70511: ARRAY
70512: PUSH
70513: LD_INT 2
70515: ARRAY
70516: PPUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: CALL_OW 255
70526: PPUSH
70527: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70531: LD_ADDR_EXP 89
70535: PUSH
70536: LD_EXP 89
70540: PPUSH
70541: LD_VAR 0 6
70545: PPUSH
70546: LD_EXP 89
70550: PUSH
70551: LD_VAR 0 6
70555: ARRAY
70556: PPUSH
70557: LD_VAR 0 5
70561: PPUSH
70562: CALL_OW 3
70566: PPUSH
70567: CALL_OW 1
70571: ST_TO_ADDR
// end ; end ;
70572: GO 70410
70574: POP
70575: POP
// end ;
70576: LD_VAR 0 4
70580: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
70581: LD_INT 0
70583: PPUSH
70584: PPUSH
70585: PPUSH
70586: PPUSH
70587: PPUSH
70588: PPUSH
70589: PPUSH
70590: PPUSH
70591: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
70592: LD_VAR 0 1
70596: PPUSH
70597: CALL_OW 264
70601: PUSH
70602: LD_INT 81
70604: EQUAL
70605: NOT
70606: PUSH
70607: LD_VAR 0 1
70611: PUSH
70612: LD_EXP 88
70616: IN
70617: NOT
70618: OR
70619: IFFALSE 70623
// exit ;
70621: GO 70945
// index := GetElementIndex ( minersList , unit ) ;
70623: LD_ADDR_VAR 0 6
70627: PUSH
70628: LD_EXP 88
70632: PPUSH
70633: LD_VAR 0 1
70637: PPUSH
70638: CALL 28289 0 2
70642: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
70643: LD_ADDR_VAR 0 8
70647: PUSH
70648: LD_EXP 90
70652: PUSH
70653: LD_EXP 89
70657: PUSH
70658: LD_VAR 0 6
70662: ARRAY
70663: MINUS
70664: ST_TO_ADDR
// if not minesFreeAmount then
70665: LD_VAR 0 8
70669: NOT
70670: IFFALSE 70674
// exit ;
70672: GO 70945
// tmp := [ ] ;
70674: LD_ADDR_VAR 0 7
70678: PUSH
70679: EMPTY
70680: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
70681: LD_ADDR_VAR 0 5
70685: PUSH
70686: DOUBLE
70687: LD_INT 1
70689: DEC
70690: ST_TO_ADDR
70691: LD_VAR 0 8
70695: PUSH
70696: FOR_TO
70697: IFFALSE 70892
// begin _d := rand ( 0 , 5 ) ;
70699: LD_ADDR_VAR 0 11
70703: PUSH
70704: LD_INT 0
70706: PPUSH
70707: LD_INT 5
70709: PPUSH
70710: CALL_OW 12
70714: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
70715: LD_ADDR_VAR 0 12
70719: PUSH
70720: LD_INT 2
70722: PPUSH
70723: LD_INT 6
70725: PPUSH
70726: CALL_OW 12
70730: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
70731: LD_ADDR_VAR 0 9
70735: PUSH
70736: LD_VAR 0 2
70740: PPUSH
70741: LD_VAR 0 11
70745: PPUSH
70746: LD_VAR 0 12
70750: PPUSH
70751: CALL_OW 272
70755: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
70756: LD_ADDR_VAR 0 10
70760: PUSH
70761: LD_VAR 0 3
70765: PPUSH
70766: LD_VAR 0 11
70770: PPUSH
70771: LD_VAR 0 12
70775: PPUSH
70776: CALL_OW 273
70780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
70781: LD_VAR 0 9
70785: PPUSH
70786: LD_VAR 0 10
70790: PPUSH
70791: CALL_OW 488
70795: PUSH
70796: LD_VAR 0 9
70800: PUSH
70801: LD_VAR 0 10
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_VAR 0 7
70814: IN
70815: NOT
70816: AND
70817: PUSH
70818: LD_VAR 0 9
70822: PPUSH
70823: LD_VAR 0 10
70827: PPUSH
70828: CALL_OW 458
70832: NOT
70833: AND
70834: IFFALSE 70876
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
70836: LD_ADDR_VAR 0 7
70840: PUSH
70841: LD_VAR 0 7
70845: PPUSH
70846: LD_VAR 0 7
70850: PUSH
70851: LD_INT 1
70853: PLUS
70854: PPUSH
70855: LD_VAR 0 9
70859: PUSH
70860: LD_VAR 0 10
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PPUSH
70869: CALL_OW 1
70873: ST_TO_ADDR
70874: GO 70890
// i := i - 1 ;
70876: LD_ADDR_VAR 0 5
70880: PUSH
70881: LD_VAR 0 5
70885: PUSH
70886: LD_INT 1
70888: MINUS
70889: ST_TO_ADDR
// end ;
70890: GO 70696
70892: POP
70893: POP
// for i in tmp do
70894: LD_ADDR_VAR 0 5
70898: PUSH
70899: LD_VAR 0 7
70903: PUSH
70904: FOR_IN
70905: IFFALSE 70943
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
70907: LD_VAR 0 1
70911: PPUSH
70912: LD_VAR 0 5
70916: PUSH
70917: LD_INT 1
70919: ARRAY
70920: PPUSH
70921: LD_VAR 0 5
70925: PUSH
70926: LD_INT 2
70928: ARRAY
70929: PPUSH
70930: CALL 69889 0 3
70934: NOT
70935: IFFALSE 70941
// exit ;
70937: POP
70938: POP
70939: GO 70945
70941: GO 70904
70943: POP
70944: POP
// end ;
70945: LD_VAR 0 4
70949: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
70950: LD_INT 0
70952: PPUSH
70953: PPUSH
70954: PPUSH
70955: PPUSH
70956: PPUSH
70957: PPUSH
70958: PPUSH
// if not GetClass ( unit ) = class_sniper then
70959: LD_VAR 0 1
70963: PPUSH
70964: CALL_OW 257
70968: PUSH
70969: LD_INT 5
70971: EQUAL
70972: NOT
70973: IFFALSE 70977
// exit ;
70975: GO 71365
// dist := 8 ;
70977: LD_ADDR_VAR 0 5
70981: PUSH
70982: LD_INT 8
70984: ST_TO_ADDR
// viewRange := 12 ;
70985: LD_ADDR_VAR 0 7
70989: PUSH
70990: LD_INT 12
70992: ST_TO_ADDR
// side := GetSide ( unit ) ;
70993: LD_ADDR_VAR 0 6
70997: PUSH
70998: LD_VAR 0 1
71002: PPUSH
71003: CALL_OW 255
71007: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71008: LD_INT 61
71010: PPUSH
71011: LD_VAR 0 6
71015: PPUSH
71016: CALL_OW 321
71020: PUSH
71021: LD_INT 2
71023: EQUAL
71024: IFFALSE 71034
// viewRange := 16 ;
71026: LD_ADDR_VAR 0 7
71030: PUSH
71031: LD_INT 16
71033: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71034: LD_VAR 0 1
71038: PPUSH
71039: LD_VAR 0 2
71043: PPUSH
71044: LD_VAR 0 3
71048: PPUSH
71049: CALL_OW 297
71053: PUSH
71054: LD_VAR 0 5
71058: GREATER
71059: IFFALSE 71138
// begin ComMoveXY ( unit , x , y ) ;
71061: LD_VAR 0 1
71065: PPUSH
71066: LD_VAR 0 2
71070: PPUSH
71071: LD_VAR 0 3
71075: PPUSH
71076: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71080: LD_INT 35
71082: PPUSH
71083: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71087: LD_VAR 0 1
71091: PPUSH
71092: LD_VAR 0 2
71096: PPUSH
71097: LD_VAR 0 3
71101: PPUSH
71102: CALL 60030 0 3
71106: NOT
71107: IFFALSE 71111
// exit ;
71109: GO 71365
// until GetDistUnitXY ( unit , x , y ) < dist ;
71111: LD_VAR 0 1
71115: PPUSH
71116: LD_VAR 0 2
71120: PPUSH
71121: LD_VAR 0 3
71125: PPUSH
71126: CALL_OW 297
71130: PUSH
71131: LD_VAR 0 5
71135: LESS
71136: IFFALSE 71080
// end ; ComTurnXY ( unit , x , y ) ;
71138: LD_VAR 0 1
71142: PPUSH
71143: LD_VAR 0 2
71147: PPUSH
71148: LD_VAR 0 3
71152: PPUSH
71153: CALL_OW 118
// wait ( 5 ) ;
71157: LD_INT 5
71159: PPUSH
71160: CALL_OW 67
// _d := GetDir ( unit ) ;
71164: LD_ADDR_VAR 0 10
71168: PUSH
71169: LD_VAR 0 1
71173: PPUSH
71174: CALL_OW 254
71178: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
71179: LD_ADDR_VAR 0 8
71183: PUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: CALL_OW 250
71193: PPUSH
71194: LD_VAR 0 10
71198: PPUSH
71199: LD_VAR 0 5
71203: PPUSH
71204: CALL_OW 272
71208: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
71209: LD_ADDR_VAR 0 9
71213: PUSH
71214: LD_VAR 0 1
71218: PPUSH
71219: CALL_OW 251
71223: PPUSH
71224: LD_VAR 0 10
71228: PPUSH
71229: LD_VAR 0 5
71233: PPUSH
71234: CALL_OW 273
71238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71239: LD_VAR 0 8
71243: PPUSH
71244: LD_VAR 0 9
71248: PPUSH
71249: CALL_OW 488
71253: NOT
71254: IFFALSE 71258
// exit ;
71256: GO 71365
// ComAnimCustom ( unit , 1 ) ;
71258: LD_VAR 0 1
71262: PPUSH
71263: LD_INT 1
71265: PPUSH
71266: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71270: LD_VAR 0 8
71274: PPUSH
71275: LD_VAR 0 9
71279: PPUSH
71280: LD_VAR 0 6
71284: PPUSH
71285: LD_VAR 0 7
71289: PPUSH
71290: CALL_OW 330
// repeat wait ( 1 ) ;
71294: LD_INT 1
71296: PPUSH
71297: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
71301: LD_VAR 0 1
71305: PPUSH
71306: CALL_OW 316
71310: PUSH
71311: LD_VAR 0 1
71315: PPUSH
71316: CALL_OW 314
71320: OR
71321: PUSH
71322: LD_VAR 0 1
71326: PPUSH
71327: CALL_OW 302
71331: NOT
71332: OR
71333: PUSH
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 301
71343: OR
71344: IFFALSE 71294
// RemoveSeeing ( _x , _y , side ) ;
71346: LD_VAR 0 8
71350: PPUSH
71351: LD_VAR 0 9
71355: PPUSH
71356: LD_VAR 0 6
71360: PPUSH
71361: CALL_OW 331
// end ; end_of_file
71365: LD_VAR 0 4
71369: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71370: LD_VAR 0 1
71374: PPUSH
71375: LD_VAR 0 2
71379: PPUSH
71380: LD_VAR 0 3
71384: PPUSH
71385: LD_VAR 0 4
71389: PPUSH
71390: LD_VAR 0 5
71394: PPUSH
71395: LD_VAR 0 6
71399: PPUSH
71400: CALL 7895 0 6
// end ;
71404: PPOPN 6
71406: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71407: LD_INT 0
71409: PPUSH
// begin if not units then
71410: LD_VAR 0 1
71414: NOT
71415: IFFALSE 71419
// exit ;
71417: GO 71419
// end ;
71419: PPOPN 7
71421: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71422: CALL 7782 0 0
// end ;
71426: PPOPN 1
71428: END
