// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7714: GO 7716
7716: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7717: LD_STRING initStreamRollete();
7719: PPUSH
7720: CALL_OW 559
// InitStreamMode ;
7724: CALL 7733 0 0
// DefineStreamItems ( ) ;
7728: CALL 8173 0 0
// end ;
7732: END
// function InitStreamMode ; begin
7733: LD_INT 0
7735: PPUSH
// streamModeActive := false ;
7736: LD_ADDR_EXP 19
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// normalCounter := 36 ;
7744: LD_ADDR_EXP 20
7748: PUSH
7749: LD_INT 36
7751: ST_TO_ADDR
// hardcoreCounter := 16 ;
7752: LD_ADDR_EXP 21
7756: PUSH
7757: LD_INT 16
7759: ST_TO_ADDR
// sRocket := false ;
7760: LD_ADDR_EXP 24
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sSpeed := false ;
7768: LD_ADDR_EXP 23
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sEngine := false ;
7776: LD_ADDR_EXP 25
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sSpec := false ;
7784: LD_ADDR_EXP 22
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sLevel := false ;
7792: LD_ADDR_EXP 26
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sArmoury := false ;
7800: LD_ADDR_EXP 27
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sRadar := false ;
7808: LD_ADDR_EXP 28
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sBunker := false ;
7816: LD_ADDR_EXP 29
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sHack := false ;
7824: LD_ADDR_EXP 30
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sFire := false ;
7832: LD_ADDR_EXP 31
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sRefresh := false ;
7840: LD_ADDR_EXP 32
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sExp := false ;
7848: LD_ADDR_EXP 33
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sDepot := false ;
7856: LD_ADDR_EXP 34
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sFlag := false ;
7864: LD_ADDR_EXP 35
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sKamikadze := false ;
7872: LD_ADDR_EXP 43
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sTroll := false ;
7880: LD_ADDR_EXP 44
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sSlow := false ;
7888: LD_ADDR_EXP 45
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sLack := false ;
7896: LD_ADDR_EXP 46
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sTank := false ;
7904: LD_ADDR_EXP 48
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sRemote := false ;
7912: LD_ADDR_EXP 49
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sPowell := false ;
7920: LD_ADDR_EXP 50
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sTeleport := false ;
7928: LD_ADDR_EXP 53
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sOilTower := false ;
7936: LD_ADDR_EXP 55
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sShovel := false ;
7944: LD_ADDR_EXP 56
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sSheik := false ;
7952: LD_ADDR_EXP 57
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sEarthquake := false ;
7960: LD_ADDR_EXP 59
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sAI := false ;
7968: LD_ADDR_EXP 60
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sCargo := false ;
7976: LD_ADDR_EXP 63
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sDLaser := false ;
7984: LD_ADDR_EXP 64
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sExchange := false ;
7992: LD_ADDR_EXP 65
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sFac := false ;
8000: LD_ADDR_EXP 66
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sPower := false ;
8008: LD_ADDR_EXP 67
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sRandom := false ;
8016: LD_ADDR_EXP 68
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sShield := false ;
8024: LD_ADDR_EXP 69
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// sTime := false ;
8032: LD_ADDR_EXP 70
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// sTools := false ;
8040: LD_ADDR_EXP 71
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// sSold := false ;
8048: LD_ADDR_EXP 36
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sDiff := false ;
8056: LD_ADDR_EXP 37
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// sFog := false ;
8064: LD_ADDR_EXP 40
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// sReset := false ;
8072: LD_ADDR_EXP 41
8076: PUSH
8077: LD_INT 0
8079: ST_TO_ADDR
// sSun := false ;
8080: LD_ADDR_EXP 42
8084: PUSH
8085: LD_INT 0
8087: ST_TO_ADDR
// sTiger := false ;
8088: LD_ADDR_EXP 38
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// sBomb := false ;
8096: LD_ADDR_EXP 39
8100: PUSH
8101: LD_INT 0
8103: ST_TO_ADDR
// sWound := false ;
8104: LD_ADDR_EXP 47
8108: PUSH
8109: LD_INT 0
8111: ST_TO_ADDR
// sBetray := false ;
8112: LD_ADDR_EXP 51
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// sContamin := false ;
8120: LD_ADDR_EXP 52
8124: PUSH
8125: LD_INT 0
8127: ST_TO_ADDR
// sOil := false ;
8128: LD_ADDR_EXP 54
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// sStu := false ;
8136: LD_ADDR_EXP 58
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// sBazooka := false ;
8144: LD_ADDR_EXP 61
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// sMortar := false ;
8152: LD_ADDR_EXP 62
8156: PUSH
8157: LD_INT 0
8159: ST_TO_ADDR
// sRanger := false ;
8160: LD_ADDR_EXP 72
8164: PUSH
8165: LD_INT 0
8167: ST_TO_ADDR
// end ;
8168: LD_VAR 0 1
8172: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8173: LD_INT 0
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
// result := [ ] ;
8180: LD_ADDR_VAR 0 1
8184: PUSH
8185: EMPTY
8186: ST_TO_ADDR
// if campaign_id = 1 then
8187: LD_OWVAR 69
8191: PUSH
8192: LD_INT 1
8194: EQUAL
8195: IFFALSE 11133
// begin case mission_number of 1 :
8197: LD_OWVAR 70
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8274
8210: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8211: LD_ADDR_VAR 0 1
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 11
8224: PUSH
8225: LD_INT 12
8227: PUSH
8228: LD_INT 15
8230: PUSH
8231: LD_INT 16
8233: PUSH
8234: LD_INT 22
8236: PUSH
8237: LD_INT 23
8239: PUSH
8240: LD_INT 26
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 101
8256: PUSH
8257: LD_INT 102
8259: PUSH
8260: LD_INT 106
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 11131
8274: LD_INT 2
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8354
8282: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8283: LD_ADDR_VAR 0 1
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 11
8296: PUSH
8297: LD_INT 12
8299: PUSH
8300: LD_INT 15
8302: PUSH
8303: LD_INT 16
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 23
8311: PUSH
8312: LD_INT 26
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 101
8328: PUSH
8329: LD_INT 102
8331: PUSH
8332: LD_INT 105
8334: PUSH
8335: LD_INT 106
8337: PUSH
8338: LD_INT 108
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: ST_TO_ADDR
8352: GO 11131
8354: LD_INT 3
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8438
8362: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: LD_INT 5
8376: PUSH
8377: LD_INT 11
8379: PUSH
8380: LD_INT 12
8382: PUSH
8383: LD_INT 15
8385: PUSH
8386: LD_INT 16
8388: PUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 26
8394: PUSH
8395: LD_INT 36
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 101
8412: PUSH
8413: LD_INT 102
8415: PUSH
8416: LD_INT 105
8418: PUSH
8419: LD_INT 106
8421: PUSH
8422: LD_INT 108
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: ST_TO_ADDR
8436: GO 11131
8438: LD_INT 4
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8530
8446: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8447: LD_ADDR_VAR 0 1
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: LD_INT 4
8457: PUSH
8458: LD_INT 5
8460: PUSH
8461: LD_INT 8
8463: PUSH
8464: LD_INT 11
8466: PUSH
8467: LD_INT 12
8469: PUSH
8470: LD_INT 15
8472: PUSH
8473: LD_INT 16
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_INT 23
8481: PUSH
8482: LD_INT 26
8484: PUSH
8485: LD_INT 36
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 101
8504: PUSH
8505: LD_INT 102
8507: PUSH
8508: LD_INT 105
8510: PUSH
8511: LD_INT 106
8513: PUSH
8514: LD_INT 108
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: ST_TO_ADDR
8528: GO 11131
8530: LD_INT 5
8532: DOUBLE
8533: EQUAL
8534: IFTRUE 8538
8536: GO 8638
8538: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8539: LD_ADDR_VAR 0 1
8543: PUSH
8544: LD_INT 2
8546: PUSH
8547: LD_INT 4
8549: PUSH
8550: LD_INT 5
8552: PUSH
8553: LD_INT 6
8555: PUSH
8556: LD_INT 8
8558: PUSH
8559: LD_INT 11
8561: PUSH
8562: LD_INT 12
8564: PUSH
8565: LD_INT 15
8567: PUSH
8568: LD_INT 16
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_INT 23
8576: PUSH
8577: LD_INT 25
8579: PUSH
8580: LD_INT 26
8582: PUSH
8583: LD_INT 36
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 101
8604: PUSH
8605: LD_INT 102
8607: PUSH
8608: LD_INT 105
8610: PUSH
8611: LD_INT 106
8613: PUSH
8614: LD_INT 108
8616: PUSH
8617: LD_INT 109
8619: PUSH
8620: LD_INT 112
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: ST_TO_ADDR
8636: GO 11131
8638: LD_INT 6
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8646
8644: GO 8766
8646: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8647: LD_ADDR_VAR 0 1
8651: PUSH
8652: LD_INT 2
8654: PUSH
8655: LD_INT 4
8657: PUSH
8658: LD_INT 5
8660: PUSH
8661: LD_INT 6
8663: PUSH
8664: LD_INT 8
8666: PUSH
8667: LD_INT 11
8669: PUSH
8670: LD_INT 12
8672: PUSH
8673: LD_INT 15
8675: PUSH
8676: LD_INT 16
8678: PUSH
8679: LD_INT 20
8681: PUSH
8682: LD_INT 21
8684: PUSH
8685: LD_INT 22
8687: PUSH
8688: LD_INT 23
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 26
8696: PUSH
8697: LD_INT 30
8699: PUSH
8700: LD_INT 31
8702: PUSH
8703: LD_INT 32
8705: PUSH
8706: LD_INT 36
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 101
8732: PUSH
8733: LD_INT 102
8735: PUSH
8736: LD_INT 105
8738: PUSH
8739: LD_INT 106
8741: PUSH
8742: LD_INT 108
8744: PUSH
8745: LD_INT 109
8747: PUSH
8748: LD_INT 112
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: ST_TO_ADDR
8764: GO 11131
8766: LD_INT 7
8768: DOUBLE
8769: EQUAL
8770: IFTRUE 8774
8772: GO 8874
8774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8775: LD_ADDR_VAR 0 1
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 4
8785: PUSH
8786: LD_INT 5
8788: PUSH
8789: LD_INT 7
8791: PUSH
8792: LD_INT 11
8794: PUSH
8795: LD_INT 12
8797: PUSH
8798: LD_INT 15
8800: PUSH
8801: LD_INT 16
8803: PUSH
8804: LD_INT 20
8806: PUSH
8807: LD_INT 21
8809: PUSH
8810: LD_INT 22
8812: PUSH
8813: LD_INT 23
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 101
8840: PUSH
8841: LD_INT 102
8843: PUSH
8844: LD_INT 103
8846: PUSH
8847: LD_INT 105
8849: PUSH
8850: LD_INT 106
8852: PUSH
8853: LD_INT 108
8855: PUSH
8856: LD_INT 112
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: ST_TO_ADDR
8872: GO 11131
8874: LD_INT 8
8876: DOUBLE
8877: EQUAL
8878: IFTRUE 8882
8880: GO 9010
8882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8883: LD_ADDR_VAR 0 1
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 4
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: LD_INT 6
8899: PUSH
8900: LD_INT 7
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: LD_INT 11
8908: PUSH
8909: LD_INT 12
8911: PUSH
8912: LD_INT 15
8914: PUSH
8915: LD_INT 16
8917: PUSH
8918: LD_INT 20
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 25
8932: PUSH
8933: LD_INT 26
8935: PUSH
8936: LD_INT 30
8938: PUSH
8939: LD_INT 31
8941: PUSH
8942: LD_INT 32
8944: PUSH
8945: LD_INT 36
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 101
8972: PUSH
8973: LD_INT 102
8975: PUSH
8976: LD_INT 103
8978: PUSH
8979: LD_INT 105
8981: PUSH
8982: LD_INT 106
8984: PUSH
8985: LD_INT 108
8987: PUSH
8988: LD_INT 109
8990: PUSH
8991: LD_INT 112
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: ST_TO_ADDR
9008: GO 11131
9010: LD_INT 9
9012: DOUBLE
9013: EQUAL
9014: IFTRUE 9018
9016: GO 9154
9018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9019: LD_ADDR_VAR 0 1
9023: PUSH
9024: LD_INT 2
9026: PUSH
9027: LD_INT 4
9029: PUSH
9030: LD_INT 5
9032: PUSH
9033: LD_INT 6
9035: PUSH
9036: LD_INT 7
9038: PUSH
9039: LD_INT 8
9041: PUSH
9042: LD_INT 11
9044: PUSH
9045: LD_INT 12
9047: PUSH
9048: LD_INT 15
9050: PUSH
9051: LD_INT 16
9053: PUSH
9054: LD_INT 20
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 23
9065: PUSH
9066: LD_INT 25
9068: PUSH
9069: LD_INT 26
9071: PUSH
9072: LD_INT 28
9074: PUSH
9075: LD_INT 30
9077: PUSH
9078: LD_INT 31
9080: PUSH
9081: LD_INT 32
9083: PUSH
9084: LD_INT 36
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 101
9112: PUSH
9113: LD_INT 102
9115: PUSH
9116: LD_INT 103
9118: PUSH
9119: LD_INT 105
9121: PUSH
9122: LD_INT 106
9124: PUSH
9125: LD_INT 108
9127: PUSH
9128: LD_INT 109
9130: PUSH
9131: LD_INT 112
9133: PUSH
9134: LD_INT 114
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: ST_TO_ADDR
9152: GO 11131
9154: LD_INT 10
9156: DOUBLE
9157: EQUAL
9158: IFTRUE 9162
9160: GO 9346
9162: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9163: LD_ADDR_VAR 0 1
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 4
9173: PUSH
9174: LD_INT 5
9176: PUSH
9177: LD_INT 6
9179: PUSH
9180: LD_INT 7
9182: PUSH
9183: LD_INT 8
9185: PUSH
9186: LD_INT 9
9188: PUSH
9189: LD_INT 10
9191: PUSH
9192: LD_INT 11
9194: PUSH
9195: LD_INT 12
9197: PUSH
9198: LD_INT 13
9200: PUSH
9201: LD_INT 14
9203: PUSH
9204: LD_INT 15
9206: PUSH
9207: LD_INT 16
9209: PUSH
9210: LD_INT 17
9212: PUSH
9213: LD_INT 18
9215: PUSH
9216: LD_INT 19
9218: PUSH
9219: LD_INT 20
9221: PUSH
9222: LD_INT 21
9224: PUSH
9225: LD_INT 22
9227: PUSH
9228: LD_INT 23
9230: PUSH
9231: LD_INT 24
9233: PUSH
9234: LD_INT 25
9236: PUSH
9237: LD_INT 26
9239: PUSH
9240: LD_INT 28
9242: PUSH
9243: LD_INT 30
9245: PUSH
9246: LD_INT 31
9248: PUSH
9249: LD_INT 32
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 101
9288: PUSH
9289: LD_INT 102
9291: PUSH
9292: LD_INT 103
9294: PUSH
9295: LD_INT 104
9297: PUSH
9298: LD_INT 105
9300: PUSH
9301: LD_INT 106
9303: PUSH
9304: LD_INT 107
9306: PUSH
9307: LD_INT 108
9309: PUSH
9310: LD_INT 109
9312: PUSH
9313: LD_INT 110
9315: PUSH
9316: LD_INT 111
9318: PUSH
9319: LD_INT 112
9321: PUSH
9322: LD_INT 114
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: ST_TO_ADDR
9344: GO 11131
9346: LD_INT 11
9348: DOUBLE
9349: EQUAL
9350: IFTRUE 9354
9352: GO 9546
9354: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9355: LD_ADDR_VAR 0 1
9359: PUSH
9360: LD_INT 2
9362: PUSH
9363: LD_INT 3
9365: PUSH
9366: LD_INT 4
9368: PUSH
9369: LD_INT 5
9371: PUSH
9372: LD_INT 6
9374: PUSH
9375: LD_INT 7
9377: PUSH
9378: LD_INT 8
9380: PUSH
9381: LD_INT 9
9383: PUSH
9384: LD_INT 10
9386: PUSH
9387: LD_INT 11
9389: PUSH
9390: LD_INT 12
9392: PUSH
9393: LD_INT 13
9395: PUSH
9396: LD_INT 14
9398: PUSH
9399: LD_INT 15
9401: PUSH
9402: LD_INT 16
9404: PUSH
9405: LD_INT 17
9407: PUSH
9408: LD_INT 18
9410: PUSH
9411: LD_INT 19
9413: PUSH
9414: LD_INT 20
9416: PUSH
9417: LD_INT 21
9419: PUSH
9420: LD_INT 22
9422: PUSH
9423: LD_INT 23
9425: PUSH
9426: LD_INT 24
9428: PUSH
9429: LD_INT 25
9431: PUSH
9432: LD_INT 26
9434: PUSH
9435: LD_INT 28
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: LD_INT 31
9443: PUSH
9444: LD_INT 32
9446: PUSH
9447: LD_INT 34
9449: PUSH
9450: LD_INT 36
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 101
9488: PUSH
9489: LD_INT 102
9491: PUSH
9492: LD_INT 103
9494: PUSH
9495: LD_INT 104
9497: PUSH
9498: LD_INT 105
9500: PUSH
9501: LD_INT 106
9503: PUSH
9504: LD_INT 107
9506: PUSH
9507: LD_INT 108
9509: PUSH
9510: LD_INT 109
9512: PUSH
9513: LD_INT 110
9515: PUSH
9516: LD_INT 111
9518: PUSH
9519: LD_INT 112
9521: PUSH
9522: LD_INT 114
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: ST_TO_ADDR
9544: GO 11131
9546: LD_INT 12
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9762
9554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_INT 1
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 3
9568: PUSH
9569: LD_INT 4
9571: PUSH
9572: LD_INT 5
9574: PUSH
9575: LD_INT 6
9577: PUSH
9578: LD_INT 7
9580: PUSH
9581: LD_INT 8
9583: PUSH
9584: LD_INT 9
9586: PUSH
9587: LD_INT 10
9589: PUSH
9590: LD_INT 11
9592: PUSH
9593: LD_INT 12
9595: PUSH
9596: LD_INT 13
9598: PUSH
9599: LD_INT 14
9601: PUSH
9602: LD_INT 15
9604: PUSH
9605: LD_INT 16
9607: PUSH
9608: LD_INT 17
9610: PUSH
9611: LD_INT 18
9613: PUSH
9614: LD_INT 19
9616: PUSH
9617: LD_INT 20
9619: PUSH
9620: LD_INT 21
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 26
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 28
9643: PUSH
9644: LD_INT 30
9646: PUSH
9647: LD_INT 31
9649: PUSH
9650: LD_INT 32
9652: PUSH
9653: LD_INT 33
9655: PUSH
9656: LD_INT 34
9658: PUSH
9659: LD_INT 36
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 101
9700: PUSH
9701: LD_INT 102
9703: PUSH
9704: LD_INT 103
9706: PUSH
9707: LD_INT 104
9709: PUSH
9710: LD_INT 105
9712: PUSH
9713: LD_INT 106
9715: PUSH
9716: LD_INT 107
9718: PUSH
9719: LD_INT 108
9721: PUSH
9722: LD_INT 109
9724: PUSH
9725: LD_INT 110
9727: PUSH
9728: LD_INT 111
9730: PUSH
9731: LD_INT 112
9733: PUSH
9734: LD_INT 113
9736: PUSH
9737: LD_INT 114
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: ST_TO_ADDR
9760: GO 11131
9762: LD_INT 13
9764: DOUBLE
9765: EQUAL
9766: IFTRUE 9770
9768: GO 9966
9770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9771: LD_ADDR_VAR 0 1
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: LD_INT 3
9784: PUSH
9785: LD_INT 4
9787: PUSH
9788: LD_INT 5
9790: PUSH
9791: LD_INT 8
9793: PUSH
9794: LD_INT 9
9796: PUSH
9797: LD_INT 10
9799: PUSH
9800: LD_INT 11
9802: PUSH
9803: LD_INT 12
9805: PUSH
9806: LD_INT 14
9808: PUSH
9809: LD_INT 15
9811: PUSH
9812: LD_INT 16
9814: PUSH
9815: LD_INT 17
9817: PUSH
9818: LD_INT 18
9820: PUSH
9821: LD_INT 19
9823: PUSH
9824: LD_INT 20
9826: PUSH
9827: LD_INT 21
9829: PUSH
9830: LD_INT 22
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 24
9838: PUSH
9839: LD_INT 25
9841: PUSH
9842: LD_INT 26
9844: PUSH
9845: LD_INT 27
9847: PUSH
9848: LD_INT 28
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 31
9856: PUSH
9857: LD_INT 32
9859: PUSH
9860: LD_INT 33
9862: PUSH
9863: LD_INT 34
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 101
9904: PUSH
9905: LD_INT 102
9907: PUSH
9908: LD_INT 103
9910: PUSH
9911: LD_INT 104
9913: PUSH
9914: LD_INT 105
9916: PUSH
9917: LD_INT 106
9919: PUSH
9920: LD_INT 107
9922: PUSH
9923: LD_INT 108
9925: PUSH
9926: LD_INT 109
9928: PUSH
9929: LD_INT 110
9931: PUSH
9932: LD_INT 111
9934: PUSH
9935: LD_INT 112
9937: PUSH
9938: LD_INT 113
9940: PUSH
9941: LD_INT 114
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: ST_TO_ADDR
9964: GO 11131
9966: LD_INT 14
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 10186
9974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9975: LD_ADDR_VAR 0 1
9979: PUSH
9980: LD_INT 1
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: LD_INT 4
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: LD_INT 6
9997: PUSH
9998: LD_INT 7
10000: PUSH
10001: LD_INT 8
10003: PUSH
10004: LD_INT 9
10006: PUSH
10007: LD_INT 10
10009: PUSH
10010: LD_INT 11
10012: PUSH
10013: LD_INT 12
10015: PUSH
10016: LD_INT 13
10018: PUSH
10019: LD_INT 14
10021: PUSH
10022: LD_INT 15
10024: PUSH
10025: LD_INT 16
10027: PUSH
10028: LD_INT 17
10030: PUSH
10031: LD_INT 18
10033: PUSH
10034: LD_INT 19
10036: PUSH
10037: LD_INT 20
10039: PUSH
10040: LD_INT 21
10042: PUSH
10043: LD_INT 22
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: LD_INT 24
10051: PUSH
10052: LD_INT 25
10054: PUSH
10055: LD_INT 26
10057: PUSH
10058: LD_INT 27
10060: PUSH
10061: LD_INT 28
10063: PUSH
10064: LD_INT 29
10066: PUSH
10067: LD_INT 30
10069: PUSH
10070: LD_INT 31
10072: PUSH
10073: LD_INT 32
10075: PUSH
10076: LD_INT 33
10078: PUSH
10079: LD_INT 34
10081: PUSH
10082: LD_INT 36
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 101
10124: PUSH
10125: LD_INT 102
10127: PUSH
10128: LD_INT 103
10130: PUSH
10131: LD_INT 104
10133: PUSH
10134: LD_INT 105
10136: PUSH
10137: LD_INT 106
10139: PUSH
10140: LD_INT 107
10142: PUSH
10143: LD_INT 108
10145: PUSH
10146: LD_INT 109
10148: PUSH
10149: LD_INT 110
10151: PUSH
10152: LD_INT 111
10154: PUSH
10155: LD_INT 112
10157: PUSH
10158: LD_INT 113
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: ST_TO_ADDR
10184: GO 11131
10186: LD_INT 15
10188: DOUBLE
10189: EQUAL
10190: IFTRUE 10194
10192: GO 10406
10194: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10195: LD_ADDR_VAR 0 1
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 4
10211: PUSH
10212: LD_INT 5
10214: PUSH
10215: LD_INT 6
10217: PUSH
10218: LD_INT 7
10220: PUSH
10221: LD_INT 8
10223: PUSH
10224: LD_INT 9
10226: PUSH
10227: LD_INT 10
10229: PUSH
10230: LD_INT 11
10232: PUSH
10233: LD_INT 12
10235: PUSH
10236: LD_INT 13
10238: PUSH
10239: LD_INT 14
10241: PUSH
10242: LD_INT 15
10244: PUSH
10245: LD_INT 16
10247: PUSH
10248: LD_INT 17
10250: PUSH
10251: LD_INT 18
10253: PUSH
10254: LD_INT 19
10256: PUSH
10257: LD_INT 20
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 22
10265: PUSH
10266: LD_INT 23
10268: PUSH
10269: LD_INT 24
10271: PUSH
10272: LD_INT 25
10274: PUSH
10275: LD_INT 26
10277: PUSH
10278: LD_INT 27
10280: PUSH
10281: LD_INT 28
10283: PUSH
10284: LD_INT 29
10286: PUSH
10287: LD_INT 30
10289: PUSH
10290: LD_INT 31
10292: PUSH
10293: LD_INT 32
10295: PUSH
10296: LD_INT 33
10298: PUSH
10299: LD_INT 34
10301: PUSH
10302: LD_INT 36
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 101
10344: PUSH
10345: LD_INT 102
10347: PUSH
10348: LD_INT 103
10350: PUSH
10351: LD_INT 104
10353: PUSH
10354: LD_INT 105
10356: PUSH
10357: LD_INT 106
10359: PUSH
10360: LD_INT 107
10362: PUSH
10363: LD_INT 108
10365: PUSH
10366: LD_INT 109
10368: PUSH
10369: LD_INT 110
10371: PUSH
10372: LD_INT 111
10374: PUSH
10375: LD_INT 112
10377: PUSH
10378: LD_INT 113
10380: PUSH
10381: LD_INT 114
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: ST_TO_ADDR
10404: GO 11131
10406: LD_INT 16
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 10538
10414: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10415: LD_ADDR_VAR 0 1
10419: PUSH
10420: LD_INT 2
10422: PUSH
10423: LD_INT 4
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: LD_INT 7
10431: PUSH
10432: LD_INT 11
10434: PUSH
10435: LD_INT 12
10437: PUSH
10438: LD_INT 15
10440: PUSH
10441: LD_INT 16
10443: PUSH
10444: LD_INT 20
10446: PUSH
10447: LD_INT 21
10449: PUSH
10450: LD_INT 22
10452: PUSH
10453: LD_INT 23
10455: PUSH
10456: LD_INT 25
10458: PUSH
10459: LD_INT 26
10461: PUSH
10462: LD_INT 30
10464: PUSH
10465: LD_INT 31
10467: PUSH
10468: LD_INT 32
10470: PUSH
10471: LD_INT 33
10473: PUSH
10474: LD_INT 34
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 102
10503: PUSH
10504: LD_INT 103
10506: PUSH
10507: LD_INT 106
10509: PUSH
10510: LD_INT 108
10512: PUSH
10513: LD_INT 112
10515: PUSH
10516: LD_INT 113
10518: PUSH
10519: LD_INT 114
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
10536: GO 11131
10538: LD_INT 17
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10758
10546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: LD_INT 6
10569: PUSH
10570: LD_INT 7
10572: PUSH
10573: LD_INT 8
10575: PUSH
10576: LD_INT 9
10578: PUSH
10579: LD_INT 10
10581: PUSH
10582: LD_INT 11
10584: PUSH
10585: LD_INT 12
10587: PUSH
10588: LD_INT 13
10590: PUSH
10591: LD_INT 14
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 17
10602: PUSH
10603: LD_INT 18
10605: PUSH
10606: LD_INT 19
10608: PUSH
10609: LD_INT 20
10611: PUSH
10612: LD_INT 21
10614: PUSH
10615: LD_INT 22
10617: PUSH
10618: LD_INT 23
10620: PUSH
10621: LD_INT 24
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 26
10629: PUSH
10630: LD_INT 27
10632: PUSH
10633: LD_INT 28
10635: PUSH
10636: LD_INT 29
10638: PUSH
10639: LD_INT 30
10641: PUSH
10642: LD_INT 31
10644: PUSH
10645: LD_INT 32
10647: PUSH
10648: LD_INT 33
10650: PUSH
10651: LD_INT 34
10653: PUSH
10654: LD_INT 36
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 101
10696: PUSH
10697: LD_INT 102
10699: PUSH
10700: LD_INT 103
10702: PUSH
10703: LD_INT 104
10705: PUSH
10706: LD_INT 105
10708: PUSH
10709: LD_INT 106
10711: PUSH
10712: LD_INT 107
10714: PUSH
10715: LD_INT 108
10717: PUSH
10718: LD_INT 109
10720: PUSH
10721: LD_INT 110
10723: PUSH
10724: LD_INT 111
10726: PUSH
10727: LD_INT 112
10729: PUSH
10730: LD_INT 113
10732: PUSH
10733: LD_INT 114
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: ST_TO_ADDR
10756: GO 11131
10758: LD_INT 18
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10902
10766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10767: LD_ADDR_VAR 0 1
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: LD_INT 5
10780: PUSH
10781: LD_INT 7
10783: PUSH
10784: LD_INT 11
10786: PUSH
10787: LD_INT 12
10789: PUSH
10790: LD_INT 15
10792: PUSH
10793: LD_INT 16
10795: PUSH
10796: LD_INT 20
10798: PUSH
10799: LD_INT 21
10801: PUSH
10802: LD_INT 22
10804: PUSH
10805: LD_INT 23
10807: PUSH
10808: LD_INT 25
10810: PUSH
10811: LD_INT 26
10813: PUSH
10814: LD_INT 30
10816: PUSH
10817: LD_INT 31
10819: PUSH
10820: LD_INT 32
10822: PUSH
10823: LD_INT 33
10825: PUSH
10826: LD_INT 34
10828: PUSH
10829: LD_INT 35
10831: PUSH
10832: LD_INT 36
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 101
10860: PUSH
10861: LD_INT 102
10863: PUSH
10864: LD_INT 103
10866: PUSH
10867: LD_INT 106
10869: PUSH
10870: LD_INT 108
10872: PUSH
10873: LD_INT 112
10875: PUSH
10876: LD_INT 113
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: LD_INT 115
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: ST_TO_ADDR
10900: GO 11131
10902: LD_INT 19
10904: DOUBLE
10905: EQUAL
10906: IFTRUE 10910
10908: GO 11130
10910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10911: LD_ADDR_VAR 0 1
10915: PUSH
10916: LD_INT 1
10918: PUSH
10919: LD_INT 2
10921: PUSH
10922: LD_INT 3
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: LD_INT 5
10930: PUSH
10931: LD_INT 6
10933: PUSH
10934: LD_INT 7
10936: PUSH
10937: LD_INT 8
10939: PUSH
10940: LD_INT 9
10942: PUSH
10943: LD_INT 10
10945: PUSH
10946: LD_INT 11
10948: PUSH
10949: LD_INT 12
10951: PUSH
10952: LD_INT 13
10954: PUSH
10955: LD_INT 14
10957: PUSH
10958: LD_INT 15
10960: PUSH
10961: LD_INT 16
10963: PUSH
10964: LD_INT 17
10966: PUSH
10967: LD_INT 18
10969: PUSH
10970: LD_INT 19
10972: PUSH
10973: LD_INT 20
10975: PUSH
10976: LD_INT 21
10978: PUSH
10979: LD_INT 22
10981: PUSH
10982: LD_INT 23
10984: PUSH
10985: LD_INT 24
10987: PUSH
10988: LD_INT 25
10990: PUSH
10991: LD_INT 26
10993: PUSH
10994: LD_INT 27
10996: PUSH
10997: LD_INT 28
10999: PUSH
11000: LD_INT 29
11002: PUSH
11003: LD_INT 30
11005: PUSH
11006: LD_INT 31
11008: PUSH
11009: LD_INT 32
11011: PUSH
11012: LD_INT 33
11014: PUSH
11015: LD_INT 34
11017: PUSH
11018: LD_INT 35
11020: PUSH
11021: LD_INT 36
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 101
11064: PUSH
11065: LD_INT 102
11067: PUSH
11068: LD_INT 103
11070: PUSH
11071: LD_INT 104
11073: PUSH
11074: LD_INT 105
11076: PUSH
11077: LD_INT 106
11079: PUSH
11080: LD_INT 107
11082: PUSH
11083: LD_INT 108
11085: PUSH
11086: LD_INT 109
11088: PUSH
11089: LD_INT 110
11091: PUSH
11092: LD_INT 111
11094: PUSH
11095: LD_INT 112
11097: PUSH
11098: LD_INT 113
11100: PUSH
11101: LD_INT 114
11103: PUSH
11104: LD_INT 115
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: ST_TO_ADDR
11128: GO 11131
11130: POP
// end else
11131: GO 11350
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: LD_INT 4
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: LD_INT 6
11155: PUSH
11156: LD_INT 7
11158: PUSH
11159: LD_INT 8
11161: PUSH
11162: LD_INT 9
11164: PUSH
11165: LD_INT 10
11167: PUSH
11168: LD_INT 11
11170: PUSH
11171: LD_INT 12
11173: PUSH
11174: LD_INT 13
11176: PUSH
11177: LD_INT 14
11179: PUSH
11180: LD_INT 15
11182: PUSH
11183: LD_INT 16
11185: PUSH
11186: LD_INT 17
11188: PUSH
11189: LD_INT 18
11191: PUSH
11192: LD_INT 19
11194: PUSH
11195: LD_INT 20
11197: PUSH
11198: LD_INT 21
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_INT 23
11206: PUSH
11207: LD_INT 24
11209: PUSH
11210: LD_INT 25
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 27
11218: PUSH
11219: LD_INT 28
11221: PUSH
11222: LD_INT 29
11224: PUSH
11225: LD_INT 30
11227: PUSH
11228: LD_INT 31
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: LD_INT 33
11236: PUSH
11237: LD_INT 34
11239: PUSH
11240: LD_INT 35
11242: PUSH
11243: LD_INT 36
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 101
11286: PUSH
11287: LD_INT 102
11289: PUSH
11290: LD_INT 103
11292: PUSH
11293: LD_INT 104
11295: PUSH
11296: LD_INT 105
11298: PUSH
11299: LD_INT 106
11301: PUSH
11302: LD_INT 107
11304: PUSH
11305: LD_INT 108
11307: PUSH
11308: LD_INT 109
11310: PUSH
11311: LD_INT 110
11313: PUSH
11314: LD_INT 111
11316: PUSH
11317: LD_INT 112
11319: PUSH
11320: LD_INT 113
11322: PUSH
11323: LD_INT 114
11325: PUSH
11326: LD_INT 115
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: ST_TO_ADDR
// if result then
11350: LD_VAR 0 1
11354: IFFALSE 11643
// begin normal :=  ;
11356: LD_ADDR_VAR 0 3
11360: PUSH
11361: LD_STRING 
11363: ST_TO_ADDR
// hardcore :=  ;
11364: LD_ADDR_VAR 0 4
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// for i = 1 to normalCounter do
11372: LD_ADDR_VAR 0 5
11376: PUSH
11377: DOUBLE
11378: LD_INT 1
11380: DEC
11381: ST_TO_ADDR
11382: LD_EXP 20
11386: PUSH
11387: FOR_TO
11388: IFFALSE 11489
// begin tmp := 0 ;
11390: LD_ADDR_VAR 0 2
11394: PUSH
11395: LD_STRING 0
11397: ST_TO_ADDR
// if result [ 1 ] then
11398: LD_VAR 0 1
11402: PUSH
11403: LD_INT 1
11405: ARRAY
11406: IFFALSE 11471
// if result [ 1 ] [ 1 ] = i then
11408: LD_VAR 0 1
11412: PUSH
11413: LD_INT 1
11415: ARRAY
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PUSH
11421: LD_VAR 0 5
11425: EQUAL
11426: IFFALSE 11471
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11428: LD_ADDR_VAR 0 1
11432: PUSH
11433: LD_VAR 0 1
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: LD_VAR 0 1
11445: PUSH
11446: LD_INT 1
11448: ARRAY
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 3
11457: PPUSH
11458: CALL_OW 1
11462: ST_TO_ADDR
// tmp := 1 ;
11463: LD_ADDR_VAR 0 2
11467: PUSH
11468: LD_STRING 1
11470: ST_TO_ADDR
// end ; normal := normal & tmp ;
11471: LD_ADDR_VAR 0 3
11475: PUSH
11476: LD_VAR 0 3
11480: PUSH
11481: LD_VAR 0 2
11485: STR
11486: ST_TO_ADDR
// end ;
11487: GO 11387
11489: POP
11490: POP
// for i = 1 to hardcoreCounter do
11491: LD_ADDR_VAR 0 5
11495: PUSH
11496: DOUBLE
11497: LD_INT 1
11499: DEC
11500: ST_TO_ADDR
11501: LD_EXP 21
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11612
// begin tmp := 0 ;
11509: LD_ADDR_VAR 0 2
11513: PUSH
11514: LD_STRING 0
11516: ST_TO_ADDR
// if result [ 2 ] then
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 2
11524: ARRAY
11525: IFFALSE 11594
// if result [ 2 ] [ 1 ] = 100 + i then
11527: LD_VAR 0 1
11531: PUSH
11532: LD_INT 2
11534: ARRAY
11535: PUSH
11536: LD_INT 1
11538: ARRAY
11539: PUSH
11540: LD_INT 100
11542: PUSH
11543: LD_VAR 0 5
11547: PLUS
11548: EQUAL
11549: IFFALSE 11594
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11551: LD_ADDR_VAR 0 1
11555: PUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: LD_VAR 0 1
11568: PUSH
11569: LD_INT 2
11571: ARRAY
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 3
11580: PPUSH
11581: CALL_OW 1
11585: ST_TO_ADDR
// tmp := 1 ;
11586: LD_ADDR_VAR 0 2
11590: PUSH
11591: LD_STRING 1
11593: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11594: LD_ADDR_VAR 0 4
11598: PUSH
11599: LD_VAR 0 4
11603: PUSH
11604: LD_VAR 0 2
11608: STR
11609: ST_TO_ADDR
// end ;
11610: GO 11506
11612: POP
11613: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11614: LD_STRING getStreamItemsFromMission("
11616: PUSH
11617: LD_VAR 0 3
11621: STR
11622: PUSH
11623: LD_STRING ","
11625: STR
11626: PUSH
11627: LD_VAR 0 4
11631: STR
11632: PUSH
11633: LD_STRING ")
11635: STR
11636: PPUSH
11637: CALL_OW 559
// end else
11641: GO 11650
// ToLua ( getStreamItemsFromMission("","") ) ;
11643: LD_STRING getStreamItemsFromMission("","")
11645: PPUSH
11646: CALL_OW 559
// end ;
11650: LD_VAR 0 1
11654: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11655: LD_VAR 0 2
11659: PUSH
11660: LD_INT 100
11662: EQUAL
11663: IFFALSE 12612
// begin if not StreamModeActive then
11665: LD_EXP 19
11669: NOT
11670: IFFALSE 11680
// StreamModeActive := true ;
11672: LD_ADDR_EXP 19
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if p3 = 0 then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_INT 0
11687: EQUAL
11688: IFFALSE 11694
// InitStreamMode ;
11690: CALL 7733 0 0
// if p3 = 1 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 1
11701: EQUAL
11702: IFFALSE 11712
// sRocket := true ;
11704: LD_ADDR_EXP 24
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 2 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 2
11719: EQUAL
11720: IFFALSE 11730
// sSpeed := true ;
11722: LD_ADDR_EXP 23
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 3 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 3
11737: EQUAL
11738: IFFALSE 11748
// sEngine := true ;
11740: LD_ADDR_EXP 25
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 4 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 4
11755: EQUAL
11756: IFFALSE 11766
// sSpec := true ;
11758: LD_ADDR_EXP 22
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 5 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 5
11773: EQUAL
11774: IFFALSE 11784
// sLevel := true ;
11776: LD_ADDR_EXP 26
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 6 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 6
11791: EQUAL
11792: IFFALSE 11802
// sArmoury := true ;
11794: LD_ADDR_EXP 27
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 7 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 7
11809: EQUAL
11810: IFFALSE 11820
// sRadar := true ;
11812: LD_ADDR_EXP 28
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 8 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 8
11827: EQUAL
11828: IFFALSE 11838
// sBunker := true ;
11830: LD_ADDR_EXP 29
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 9 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 9
11845: EQUAL
11846: IFFALSE 11856
// sHack := true ;
11848: LD_ADDR_EXP 30
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 10 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 10
11863: EQUAL
11864: IFFALSE 11874
// sFire := true ;
11866: LD_ADDR_EXP 31
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 11 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 11
11881: EQUAL
11882: IFFALSE 11892
// sRefresh := true ;
11884: LD_ADDR_EXP 32
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 12 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 12
11899: EQUAL
11900: IFFALSE 11910
// sExp := true ;
11902: LD_ADDR_EXP 33
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 13 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 13
11917: EQUAL
11918: IFFALSE 11928
// sDepot := true ;
11920: LD_ADDR_EXP 34
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 14 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 14
11935: EQUAL
11936: IFFALSE 11946
// sFlag := true ;
11938: LD_ADDR_EXP 35
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 15 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 15
11953: EQUAL
11954: IFFALSE 11964
// sKamikadze := true ;
11956: LD_ADDR_EXP 43
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 16 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 16
11971: EQUAL
11972: IFFALSE 11982
// sTroll := true ;
11974: LD_ADDR_EXP 44
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 17 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 17
11989: EQUAL
11990: IFFALSE 12000
// sSlow := true ;
11992: LD_ADDR_EXP 45
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 18 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 18
12007: EQUAL
12008: IFFALSE 12018
// sLack := true ;
12010: LD_ADDR_EXP 46
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 19 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 19
12025: EQUAL
12026: IFFALSE 12036
// sTank := true ;
12028: LD_ADDR_EXP 48
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 20 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 20
12043: EQUAL
12044: IFFALSE 12054
// sRemote := true ;
12046: LD_ADDR_EXP 49
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 21 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 21
12061: EQUAL
12062: IFFALSE 12072
// sPowell := true ;
12064: LD_ADDR_EXP 50
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 22 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 22
12079: EQUAL
12080: IFFALSE 12090
// sTeleport := true ;
12082: LD_ADDR_EXP 53
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 23 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 23
12097: EQUAL
12098: IFFALSE 12108
// sOilTower := true ;
12100: LD_ADDR_EXP 55
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 24 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 24
12115: EQUAL
12116: IFFALSE 12126
// sShovel := true ;
12118: LD_ADDR_EXP 56
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// if p3 = 25 then
12126: LD_VAR 0 3
12130: PUSH
12131: LD_INT 25
12133: EQUAL
12134: IFFALSE 12144
// sSheik := true ;
12136: LD_ADDR_EXP 57
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if p3 = 26 then
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 26
12151: EQUAL
12152: IFFALSE 12162
// sEarthquake := true ;
12154: LD_ADDR_EXP 59
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// if p3 = 27 then
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 27
12169: EQUAL
12170: IFFALSE 12180
// sAI := true ;
12172: LD_ADDR_EXP 60
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// if p3 = 28 then
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 28
12187: EQUAL
12188: IFFALSE 12198
// sCargo := true ;
12190: LD_ADDR_EXP 63
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// if p3 = 29 then
12198: LD_VAR 0 3
12202: PUSH
12203: LD_INT 29
12205: EQUAL
12206: IFFALSE 12216
// sDLaser := true ;
12208: LD_ADDR_EXP 64
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// if p3 = 30 then
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 30
12223: EQUAL
12224: IFFALSE 12234
// sExchange := true ;
12226: LD_ADDR_EXP 65
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// if p3 = 31 then
12234: LD_VAR 0 3
12238: PUSH
12239: LD_INT 31
12241: EQUAL
12242: IFFALSE 12252
// sFac := true ;
12244: LD_ADDR_EXP 66
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
// if p3 = 32 then
12252: LD_VAR 0 3
12256: PUSH
12257: LD_INT 32
12259: EQUAL
12260: IFFALSE 12270
// sPower := true ;
12262: LD_ADDR_EXP 67
12266: PUSH
12267: LD_INT 1
12269: ST_TO_ADDR
// if p3 = 33 then
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 33
12277: EQUAL
12278: IFFALSE 12288
// sRandom := true ;
12280: LD_ADDR_EXP 68
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// if p3 = 34 then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 34
12295: EQUAL
12296: IFFALSE 12306
// sShield := true ;
12298: LD_ADDR_EXP 69
12302: PUSH
12303: LD_INT 1
12305: ST_TO_ADDR
// if p3 = 35 then
12306: LD_VAR 0 3
12310: PUSH
12311: LD_INT 35
12313: EQUAL
12314: IFFALSE 12324
// sTime := true ;
12316: LD_ADDR_EXP 70
12320: PUSH
12321: LD_INT 1
12323: ST_TO_ADDR
// if p3 = 36 then
12324: LD_VAR 0 3
12328: PUSH
12329: LD_INT 36
12331: EQUAL
12332: IFFALSE 12342
// sTools := true ;
12334: LD_ADDR_EXP 71
12338: PUSH
12339: LD_INT 1
12341: ST_TO_ADDR
// if p3 = 101 then
12342: LD_VAR 0 3
12346: PUSH
12347: LD_INT 101
12349: EQUAL
12350: IFFALSE 12360
// sSold := true ;
12352: LD_ADDR_EXP 36
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// if p3 = 102 then
12360: LD_VAR 0 3
12364: PUSH
12365: LD_INT 102
12367: EQUAL
12368: IFFALSE 12378
// sDiff := true ;
12370: LD_ADDR_EXP 37
12374: PUSH
12375: LD_INT 1
12377: ST_TO_ADDR
// if p3 = 103 then
12378: LD_VAR 0 3
12382: PUSH
12383: LD_INT 103
12385: EQUAL
12386: IFFALSE 12396
// sFog := true ;
12388: LD_ADDR_EXP 40
12392: PUSH
12393: LD_INT 1
12395: ST_TO_ADDR
// if p3 = 104 then
12396: LD_VAR 0 3
12400: PUSH
12401: LD_INT 104
12403: EQUAL
12404: IFFALSE 12414
// sReset := true ;
12406: LD_ADDR_EXP 41
12410: PUSH
12411: LD_INT 1
12413: ST_TO_ADDR
// if p3 = 105 then
12414: LD_VAR 0 3
12418: PUSH
12419: LD_INT 105
12421: EQUAL
12422: IFFALSE 12432
// sSun := true ;
12424: LD_ADDR_EXP 42
12428: PUSH
12429: LD_INT 1
12431: ST_TO_ADDR
// if p3 = 106 then
12432: LD_VAR 0 3
12436: PUSH
12437: LD_INT 106
12439: EQUAL
12440: IFFALSE 12450
// sTiger := true ;
12442: LD_ADDR_EXP 38
12446: PUSH
12447: LD_INT 1
12449: ST_TO_ADDR
// if p3 = 107 then
12450: LD_VAR 0 3
12454: PUSH
12455: LD_INT 107
12457: EQUAL
12458: IFFALSE 12468
// sBomb := true ;
12460: LD_ADDR_EXP 39
12464: PUSH
12465: LD_INT 1
12467: ST_TO_ADDR
// if p3 = 108 then
12468: LD_VAR 0 3
12472: PUSH
12473: LD_INT 108
12475: EQUAL
12476: IFFALSE 12486
// sWound := true ;
12478: LD_ADDR_EXP 47
12482: PUSH
12483: LD_INT 1
12485: ST_TO_ADDR
// if p3 = 109 then
12486: LD_VAR 0 3
12490: PUSH
12491: LD_INT 109
12493: EQUAL
12494: IFFALSE 12504
// sBetray := true ;
12496: LD_ADDR_EXP 51
12500: PUSH
12501: LD_INT 1
12503: ST_TO_ADDR
// if p3 = 110 then
12504: LD_VAR 0 3
12508: PUSH
12509: LD_INT 110
12511: EQUAL
12512: IFFALSE 12522
// sContamin := true ;
12514: LD_ADDR_EXP 52
12518: PUSH
12519: LD_INT 1
12521: ST_TO_ADDR
// if p3 = 111 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 111
12529: EQUAL
12530: IFFALSE 12540
// sOil := true ;
12532: LD_ADDR_EXP 54
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 112 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 112
12547: EQUAL
12548: IFFALSE 12558
// sStu := true ;
12550: LD_ADDR_EXP 58
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 113 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 113
12565: EQUAL
12566: IFFALSE 12576
// sBazooka := true ;
12568: LD_ADDR_EXP 61
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 114 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 114
12583: EQUAL
12584: IFFALSE 12594
// sMortar := true ;
12586: LD_ADDR_EXP 62
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 115 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 115
12601: EQUAL
12602: IFFALSE 12612
// sRanger := true ;
12604: LD_ADDR_EXP 72
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// end ; end ;
12612: PPOPN 6
12614: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12615: LD_EXP 19
12619: PUSH
12620: LD_EXP 24
12624: AND
12625: IFFALSE 12749
12627: GO 12629
12629: DISABLE
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
// begin enable ;
12634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_OWVAR 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 34
12657: PUSH
12658: LD_INT 7
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 34
12667: PUSH
12668: LD_INT 45
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 34
12677: PUSH
12678: LD_INT 28
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 34
12687: PUSH
12688: LD_INT 47
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: ST_TO_ADDR
// if not tmp then
12711: LD_VAR 0 2
12715: NOT
12716: IFFALSE 12720
// exit ;
12718: GO 12749
// for i in tmp do
12720: LD_ADDR_VAR 0 1
12724: PUSH
12725: LD_VAR 0 2
12729: PUSH
12730: FOR_IN
12731: IFFALSE 12747
// begin SetLives ( i , 0 ) ;
12733: LD_VAR 0 1
12737: PPUSH
12738: LD_INT 0
12740: PPUSH
12741: CALL_OW 234
// end ;
12745: GO 12730
12747: POP
12748: POP
// end ;
12749: PPOPN 2
12751: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12752: LD_EXP 19
12756: PUSH
12757: LD_EXP 25
12761: AND
12762: IFFALSE 12846
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
// begin enable ;
12771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12772: LD_ADDR_VAR 0 2
12776: PUSH
12777: LD_INT 22
12779: PUSH
12780: LD_OWVAR 2
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 32
12791: PUSH
12792: LD_INT 3
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PPUSH
12803: CALL_OW 69
12807: ST_TO_ADDR
// if not tmp then
12808: LD_VAR 0 2
12812: NOT
12813: IFFALSE 12817
// exit ;
12815: GO 12846
// for i in tmp do
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_VAR 0 2
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12844
// begin SetLives ( i , 0 ) ;
12830: LD_VAR 0 1
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 234
// end ;
12842: GO 12827
12844: POP
12845: POP
// end ;
12846: PPOPN 2
12848: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12849: LD_EXP 19
12853: PUSH
12854: LD_EXP 22
12858: AND
12859: IFFALSE 12952
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12868: LD_ADDR_VAR 0 1
12872: PUSH
12873: LD_INT 22
12875: PUSH
12876: LD_OWVAR 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: LD_INT 25
12890: PUSH
12891: LD_INT 5
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 25
12900: PUSH
12901: LD_INT 9
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 25
12910: PUSH
12911: LD_INT 8
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: FOR_IN
12934: IFFALSE 12950
// begin SetClass ( i , 1 ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 336
// end ;
12948: GO 12933
12950: POP
12951: POP
// end ;
12952: PPOPN 1
12954: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12955: LD_EXP 19
12959: PUSH
12960: LD_EXP 23
12964: AND
12965: PUSH
12966: LD_OWVAR 65
12970: PUSH
12971: LD_INT 7
12973: LESS
12974: AND
12975: IFFALSE 12989
12977: GO 12979
12979: DISABLE
// begin enable ;
12980: ENABLE
// game_speed := 7 ;
12981: LD_ADDR_OWVAR 65
12985: PUSH
12986: LD_INT 7
12988: ST_TO_ADDR
// end ;
12989: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12990: LD_EXP 19
12994: PUSH
12995: LD_EXP 26
12999: AND
13000: IFFALSE 13202
13002: GO 13004
13004: DISABLE
13005: LD_INT 0
13007: PPUSH
13008: PPUSH
13009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13010: LD_ADDR_VAR 0 3
13014: PUSH
13015: LD_INT 81
13017: PUSH
13018: LD_OWVAR 2
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 3
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13202
// if tmp > 5 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 5
13062: GREATER
13063: IFFALSE 13075
// k := 5 else
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: LD_INT 5
13072: ST_TO_ADDR
13073: GO 13085
// k := tmp ;
13075: LD_ADDR_VAR 0 2
13079: PUSH
13080: LD_VAR 0 3
13084: ST_TO_ADDR
// for i := 1 to k do
13085: LD_ADDR_VAR 0 1
13089: PUSH
13090: DOUBLE
13091: LD_INT 1
13093: DEC
13094: ST_TO_ADDR
13095: LD_VAR 0 2
13099: PUSH
13100: FOR_TO
13101: IFFALSE 13200
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13103: LD_VAR 0 3
13107: PUSH
13108: LD_VAR 0 1
13112: ARRAY
13113: PPUSH
13114: LD_VAR 0 1
13118: PUSH
13119: LD_INT 4
13121: MOD
13122: PUSH
13123: LD_INT 1
13125: PLUS
13126: PPUSH
13127: CALL_OW 259
13131: PUSH
13132: LD_INT 10
13134: LESS
13135: IFFALSE 13198
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13137: LD_VAR 0 3
13141: PUSH
13142: LD_VAR 0 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 1
13152: PUSH
13153: LD_INT 4
13155: MOD
13156: PUSH
13157: LD_INT 1
13159: PLUS
13160: PPUSH
13161: LD_VAR 0 3
13165: PUSH
13166: LD_VAR 0 1
13170: ARRAY
13171: PPUSH
13172: LD_VAR 0 1
13176: PUSH
13177: LD_INT 4
13179: MOD
13180: PUSH
13181: LD_INT 1
13183: PLUS
13184: PPUSH
13185: CALL_OW 259
13189: PUSH
13190: LD_INT 1
13192: PLUS
13193: PPUSH
13194: CALL_OW 237
13198: GO 13100
13200: POP
13201: POP
// end ;
13202: PPOPN 3
13204: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13205: LD_EXP 19
13209: PUSH
13210: LD_EXP 27
13214: AND
13215: IFFALSE 13235
13217: GO 13219
13219: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13220: LD_INT 4
13222: PPUSH
13223: LD_OWVAR 2
13227: PPUSH
13228: LD_INT 0
13230: PPUSH
13231: CALL_OW 324
13235: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13236: LD_EXP 19
13240: PUSH
13241: LD_EXP 56
13245: AND
13246: IFFALSE 13266
13248: GO 13250
13250: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13251: LD_INT 19
13253: PPUSH
13254: LD_OWVAR 2
13258: PPUSH
13259: LD_INT 0
13261: PPUSH
13262: CALL_OW 324
13266: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13267: LD_EXP 19
13271: PUSH
13272: LD_EXP 28
13276: AND
13277: IFFALSE 13379
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
// begin enable ;
13286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: LD_INT 22
13294: PUSH
13295: LD_OWVAR 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 2
13306: PUSH
13307: LD_INT 34
13309: PUSH
13310: LD_INT 11
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 34
13319: PUSH
13320: LD_INT 30
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: ST_TO_ADDR
// if not tmp then
13341: LD_VAR 0 2
13345: NOT
13346: IFFALSE 13350
// exit ;
13348: GO 13379
// for i in tmp do
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_VAR 0 2
13359: PUSH
13360: FOR_IN
13361: IFFALSE 13377
// begin SetLives ( i , 0 ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL_OW 234
// end ;
13375: GO 13360
13377: POP
13378: POP
// end ;
13379: PPOPN 2
13381: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13382: LD_EXP 19
13386: PUSH
13387: LD_EXP 29
13391: AND
13392: IFFALSE 13412
13394: GO 13396
13396: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13397: LD_INT 32
13399: PPUSH
13400: LD_OWVAR 2
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 324
13412: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13413: LD_EXP 19
13417: PUSH
13418: LD_EXP 30
13422: AND
13423: IFFALSE 13604
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
13431: PPUSH
13432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_OWVAR 2
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 33
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: ST_TO_ADDR
// if not tmp then
13469: LD_VAR 0 2
13473: NOT
13474: IFFALSE 13478
// exit ;
13476: GO 13604
// side := 0 ;
13478: LD_ADDR_VAR 0 3
13482: PUSH
13483: LD_INT 0
13485: ST_TO_ADDR
// for i := 1 to 8 do
13486: LD_ADDR_VAR 0 1
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_INT 8
13498: PUSH
13499: FOR_TO
13500: IFFALSE 13548
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13502: LD_OWVAR 2
13506: PUSH
13507: LD_VAR 0 1
13511: NONEQUAL
13512: PUSH
13513: LD_OWVAR 2
13517: PPUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 81
13527: PUSH
13528: LD_INT 2
13530: EQUAL
13531: AND
13532: IFFALSE 13546
// begin side := i ;
13534: LD_ADDR_VAR 0 3
13538: PUSH
13539: LD_VAR 0 1
13543: ST_TO_ADDR
// break ;
13544: GO 13548
// end ;
13546: GO 13499
13548: POP
13549: POP
// if not side then
13550: LD_VAR 0 3
13554: NOT
13555: IFFALSE 13559
// exit ;
13557: GO 13604
// for i := 1 to tmp do
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: DOUBLE
13565: LD_INT 1
13567: DEC
13568: ST_TO_ADDR
13569: LD_VAR 0 2
13573: PUSH
13574: FOR_TO
13575: IFFALSE 13602
// if Prob ( 60 ) then
13577: LD_INT 60
13579: PPUSH
13580: CALL_OW 13
13584: IFFALSE 13600
// SetSide ( i , side ) ;
13586: LD_VAR 0 1
13590: PPUSH
13591: LD_VAR 0 3
13595: PPUSH
13596: CALL_OW 235
13600: GO 13574
13602: POP
13603: POP
// end ;
13604: PPOPN 3
13606: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13607: LD_EXP 19
13611: PUSH
13612: LD_EXP 32
13616: AND
13617: IFFALSE 13736
13619: GO 13621
13621: DISABLE
13622: LD_INT 0
13624: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_OWVAR 2
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 21
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 3
13654: PUSH
13655: LD_INT 23
13657: PUSH
13658: LD_INT 0
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PUSH
13679: FOR_IN
13680: IFFALSE 13734
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13682: LD_VAR 0 1
13686: PPUSH
13687: CALL_OW 257
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: LD_INT 3
13700: PUSH
13701: LD_INT 4
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: IN
13710: IFFALSE 13732
// SetClass ( un , rand ( 1 , 4 ) ) ;
13712: LD_VAR 0 1
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: LD_INT 4
13722: PPUSH
13723: CALL_OW 12
13727: PPUSH
13728: CALL_OW 336
13732: GO 13679
13734: POP
13735: POP
// end ;
13736: PPOPN 1
13738: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13739: LD_EXP 19
13743: PUSH
13744: LD_EXP 31
13748: AND
13749: IFFALSE 13828
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_INT 22
13764: PUSH
13765: LD_OWVAR 2
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 21
13776: PUSH
13777: LD_INT 3
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PPUSH
13788: CALL_OW 69
13792: ST_TO_ADDR
// if not tmp then
13793: LD_VAR 0 1
13797: NOT
13798: IFFALSE 13802
// exit ;
13800: GO 13828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13802: LD_VAR 0 1
13806: PUSH
13807: LD_INT 1
13809: PPUSH
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 12
13819: ARRAY
13820: PPUSH
13821: LD_INT 100
13823: PPUSH
13824: CALL_OW 234
// end ;
13828: PPOPN 1
13830: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13831: LD_EXP 19
13835: PUSH
13836: LD_EXP 33
13840: AND
13841: IFFALSE 13939
13843: GO 13845
13845: DISABLE
13846: LD_INT 0
13848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13849: LD_ADDR_VAR 0 1
13853: PUSH
13854: LD_INT 22
13856: PUSH
13857: LD_OWVAR 2
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 21
13868: PUSH
13869: LD_INT 1
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// if not tmp then
13885: LD_VAR 0 1
13889: NOT
13890: IFFALSE 13894
// exit ;
13892: GO 13939
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13894: LD_VAR 0 1
13898: PUSH
13899: LD_INT 1
13901: PPUSH
13902: LD_VAR 0 1
13906: PPUSH
13907: CALL_OW 12
13911: ARRAY
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: LD_INT 4
13918: PPUSH
13919: CALL_OW 12
13923: PPUSH
13924: LD_INT 3000
13926: PPUSH
13927: LD_INT 9000
13929: PPUSH
13930: CALL_OW 12
13934: PPUSH
13935: CALL_OW 492
// end ;
13939: PPOPN 1
13941: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13942: LD_EXP 19
13946: PUSH
13947: LD_EXP 34
13951: AND
13952: IFFALSE 13972
13954: GO 13956
13956: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13957: LD_INT 1
13959: PPUSH
13960: LD_OWVAR 2
13964: PPUSH
13965: LD_INT 0
13967: PPUSH
13968: CALL_OW 324
13972: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13973: LD_EXP 19
13977: PUSH
13978: LD_EXP 35
13982: AND
13983: IFFALSE 14066
13985: GO 13987
13987: DISABLE
13988: LD_INT 0
13990: PPUSH
13991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13992: LD_ADDR_VAR 0 2
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_OWVAR 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 21
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: ST_TO_ADDR
// if not tmp then
14028: LD_VAR 0 2
14032: NOT
14033: IFFALSE 14037
// exit ;
14035: GO 14066
// for i in tmp do
14037: LD_ADDR_VAR 0 1
14041: PUSH
14042: LD_VAR 0 2
14046: PUSH
14047: FOR_IN
14048: IFFALSE 14064
// SetBLevel ( i , 10 ) ;
14050: LD_VAR 0 1
14054: PPUSH
14055: LD_INT 10
14057: PPUSH
14058: CALL_OW 241
14062: GO 14047
14064: POP
14065: POP
// end ;
14066: PPOPN 2
14068: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14069: LD_EXP 19
14073: PUSH
14074: LD_EXP 36
14078: AND
14079: IFFALSE 14190
14081: GO 14083
14083: DISABLE
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_OWVAR 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 25
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: ST_TO_ADDR
// if not tmp then
14125: LD_VAR 0 3
14129: NOT
14130: IFFALSE 14134
// exit ;
14132: GO 14190
// un := tmp [ rand ( 1 , tmp ) ] ;
14134: LD_ADDR_VAR 0 2
14138: PUSH
14139: LD_VAR 0 3
14143: PUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: CALL_OW 12
14156: ARRAY
14157: ST_TO_ADDR
// if Crawls ( un ) then
14158: LD_VAR 0 2
14162: PPUSH
14163: CALL_OW 318
14167: IFFALSE 14178
// ComWalk ( un ) ;
14169: LD_VAR 0 2
14173: PPUSH
14174: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14178: LD_VAR 0 2
14182: PPUSH
14183: LD_INT 5
14185: PPUSH
14186: CALL_OW 336
// end ;
14190: PPOPN 3
14192: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14193: LD_EXP 19
14197: PUSH
14198: LD_EXP 37
14202: AND
14203: PUSH
14204: LD_OWVAR 67
14208: PUSH
14209: LD_INT 3
14211: LESS
14212: AND
14213: IFFALSE 14232
14215: GO 14217
14217: DISABLE
// Difficulty := Difficulty + 1 ;
14218: LD_ADDR_OWVAR 67
14222: PUSH
14223: LD_OWVAR 67
14227: PUSH
14228: LD_INT 1
14230: PLUS
14231: ST_TO_ADDR
14232: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14233: LD_EXP 19
14237: PUSH
14238: LD_EXP 38
14242: AND
14243: IFFALSE 14346
14245: GO 14247
14247: DISABLE
14248: LD_INT 0
14250: PPUSH
// begin for i := 1 to 5 do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_INT 5
14263: PUSH
14264: FOR_TO
14265: IFFALSE 14344
// begin uc_nation := nation_nature ;
14267: LD_ADDR_OWVAR 21
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// uc_side := 0 ;
14275: LD_ADDR_OWVAR 20
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14283: LD_ADDR_OWVAR 29
14287: PUSH
14288: LD_INT 12
14290: PUSH
14291: LD_INT 12
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: ST_TO_ADDR
// hc_agressivity := 20 ;
14298: LD_ADDR_OWVAR 35
14302: PUSH
14303: LD_INT 20
14305: ST_TO_ADDR
// hc_class := class_tiger ;
14306: LD_ADDR_OWVAR 28
14310: PUSH
14311: LD_INT 14
14313: ST_TO_ADDR
// hc_gallery :=  ;
14314: LD_ADDR_OWVAR 33
14318: PUSH
14319: LD_STRING 
14321: ST_TO_ADDR
// hc_name :=  ;
14322: LD_ADDR_OWVAR 26
14326: PUSH
14327: LD_STRING 
14329: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14330: CALL_OW 44
14334: PPUSH
14335: LD_INT 0
14337: PPUSH
14338: CALL_OW 51
// end ;
14342: GO 14264
14344: POP
14345: POP
// end ;
14346: PPOPN 1
14348: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14349: LD_EXP 19
14353: PUSH
14354: LD_EXP 39
14358: AND
14359: IFFALSE 14368
14361: GO 14363
14363: DISABLE
// StreamSibBomb ;
14364: CALL 14369 0 0
14368: END
// export function StreamSibBomb ; var i , x , y ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
// result := false ;
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// for i := 1 to 16 do
14383: LD_ADDR_VAR 0 2
14387: PUSH
14388: DOUBLE
14389: LD_INT 1
14391: DEC
14392: ST_TO_ADDR
14393: LD_INT 16
14395: PUSH
14396: FOR_TO
14397: IFFALSE 14596
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_INT 10
14406: PUSH
14407: LD_INT 20
14409: PUSH
14410: LD_INT 30
14412: PUSH
14413: LD_INT 40
14415: PUSH
14416: LD_INT 50
14418: PUSH
14419: LD_INT 60
14421: PUSH
14422: LD_INT 70
14424: PUSH
14425: LD_INT 80
14427: PUSH
14428: LD_INT 90
14430: PUSH
14431: LD_INT 100
14433: PUSH
14434: LD_INT 110
14436: PUSH
14437: LD_INT 120
14439: PUSH
14440: LD_INT 130
14442: PUSH
14443: LD_INT 140
14445: PUSH
14446: LD_INT 150
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 1
14468: PPUSH
14469: LD_INT 15
14471: PPUSH
14472: CALL_OW 12
14476: ARRAY
14477: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14478: LD_ADDR_VAR 0 4
14482: PUSH
14483: LD_INT 10
14485: PUSH
14486: LD_INT 20
14488: PUSH
14489: LD_INT 30
14491: PUSH
14492: LD_INT 40
14494: PUSH
14495: LD_INT 50
14497: PUSH
14498: LD_INT 60
14500: PUSH
14501: LD_INT 70
14503: PUSH
14504: LD_INT 80
14506: PUSH
14507: LD_INT 90
14509: PUSH
14510: LD_INT 100
14512: PUSH
14513: LD_INT 110
14515: PUSH
14516: LD_INT 120
14518: PUSH
14519: LD_INT 130
14521: PUSH
14522: LD_INT 140
14524: PUSH
14525: LD_INT 150
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_INT 15
14550: PPUSH
14551: CALL_OW 12
14555: ARRAY
14556: ST_TO_ADDR
// if ValidHex ( x , y ) then
14557: LD_VAR 0 3
14561: PPUSH
14562: LD_VAR 0 4
14566: PPUSH
14567: CALL_OW 488
14571: IFFALSE 14594
// begin result := [ x , y ] ;
14573: LD_ADDR_VAR 0 1
14577: PUSH
14578: LD_VAR 0 3
14582: PUSH
14583: LD_VAR 0 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: ST_TO_ADDR
// break ;
14592: GO 14596
// end ; end ;
14594: GO 14396
14596: POP
14597: POP
// if result then
14598: LD_VAR 0 1
14602: IFFALSE 14662
// begin ToLua ( playSibBomb() ) ;
14604: LD_STRING playSibBomb()
14606: PPUSH
14607: CALL_OW 559
// wait ( 0 0$14 ) ;
14611: LD_INT 490
14613: PPUSH
14614: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14618: LD_VAR 0 1
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: LD_VAR 0 1
14631: PUSH
14632: LD_INT 2
14634: ARRAY
14635: PPUSH
14636: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14640: LD_VAR 0 1
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: LD_VAR 0 1
14653: PUSH
14654: LD_INT 2
14656: ARRAY
14657: PPUSH
14658: CALL_OW 429
// end ; end ;
14662: LD_VAR 0 1
14666: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14667: LD_EXP 19
14671: PUSH
14672: LD_EXP 41
14676: AND
14677: IFFALSE 14689
14679: GO 14681
14681: DISABLE
// YouLost (  ) ;
14682: LD_STRING 
14684: PPUSH
14685: CALL_OW 104
14689: END
// every 0 0$1 trigger StreamModeActive and sFog do
14690: LD_EXP 19
14694: PUSH
14695: LD_EXP 40
14699: AND
14700: IFFALSE 14714
14702: GO 14704
14704: DISABLE
// FogOff ( your_side ) ;
14705: LD_OWVAR 2
14709: PPUSH
14710: CALL_OW 344
14714: END
// every 0 0$1 trigger StreamModeActive and sSun do
14715: LD_EXP 19
14719: PUSH
14720: LD_EXP 42
14724: AND
14725: IFFALSE 14753
14727: GO 14729
14729: DISABLE
// begin solar_recharge_percent := 0 ;
14730: LD_ADDR_OWVAR 79
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14738: LD_INT 10500
14740: PPUSH
14741: CALL_OW 67
// solar_recharge_percent := 100 ;
14745: LD_ADDR_OWVAR 79
14749: PUSH
14750: LD_INT 100
14752: ST_TO_ADDR
// end ;
14753: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14754: LD_EXP 19
14758: PUSH
14759: LD_EXP 43
14763: AND
14764: IFFALSE 15003
14766: GO 14768
14768: DISABLE
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
// begin tmp := [ ] ;
14774: LD_ADDR_VAR 0 3
14778: PUSH
14779: EMPTY
14780: ST_TO_ADDR
// for i := 1 to 6 do
14781: LD_ADDR_VAR 0 1
14785: PUSH
14786: DOUBLE
14787: LD_INT 1
14789: DEC
14790: ST_TO_ADDR
14791: LD_INT 6
14793: PUSH
14794: FOR_TO
14795: IFFALSE 14900
// begin uc_nation := nation_nature ;
14797: LD_ADDR_OWVAR 21
14801: PUSH
14802: LD_INT 0
14804: ST_TO_ADDR
// uc_side := 0 ;
14805: LD_ADDR_OWVAR 20
14809: PUSH
14810: LD_INT 0
14812: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14813: LD_ADDR_OWVAR 29
14817: PUSH
14818: LD_INT 12
14820: PUSH
14821: LD_INT 12
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: ST_TO_ADDR
// hc_agressivity := 20 ;
14828: LD_ADDR_OWVAR 35
14832: PUSH
14833: LD_INT 20
14835: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14836: LD_ADDR_OWVAR 28
14840: PUSH
14841: LD_INT 17
14843: ST_TO_ADDR
// hc_gallery :=  ;
14844: LD_ADDR_OWVAR 33
14848: PUSH
14849: LD_STRING 
14851: ST_TO_ADDR
// hc_name :=  ;
14852: LD_ADDR_OWVAR 26
14856: PUSH
14857: LD_STRING 
14859: ST_TO_ADDR
// un := CreateHuman ;
14860: LD_ADDR_VAR 0 2
14864: PUSH
14865: CALL_OW 44
14869: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14870: LD_VAR 0 2
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 51
// tmp := tmp ^ un ;
14882: LD_ADDR_VAR 0 3
14886: PUSH
14887: LD_VAR 0 3
14891: PUSH
14892: LD_VAR 0 2
14896: ADD
14897: ST_TO_ADDR
// end ;
14898: GO 14794
14900: POP
14901: POP
// repeat wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// for un in tmp do
14909: LD_ADDR_VAR 0 2
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: FOR_IN
14920: IFFALSE 14994
// begin if IsDead ( un ) then
14922: LD_VAR 0 2
14926: PPUSH
14927: CALL_OW 301
14931: IFFALSE 14951
// begin tmp := tmp diff un ;
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_VAR 0 3
14942: PUSH
14943: LD_VAR 0 2
14947: DIFF
14948: ST_TO_ADDR
// continue ;
14949: GO 14919
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14951: LD_VAR 0 2
14955: PPUSH
14956: LD_INT 3
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_INT 0
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: PPUSH
14978: LD_VAR 0 2
14982: PPUSH
14983: CALL_OW 74
14987: PPUSH
14988: CALL_OW 115
// end ;
14992: GO 14919
14994: POP
14995: POP
// until not tmp ;
14996: LD_VAR 0 3
15000: NOT
15001: IFFALSE 14902
// end ;
15003: PPOPN 3
15005: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15006: LD_EXP 19
15010: PUSH
15011: LD_EXP 44
15015: AND
15016: IFFALSE 15070
15018: GO 15020
15020: DISABLE
// begin ToLua ( displayTroll(); ) ;
15021: LD_STRING displayTroll();
15023: PPUSH
15024: CALL_OW 559
// wait ( 3 3$00 ) ;
15028: LD_INT 6300
15030: PPUSH
15031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15035: LD_STRING hideTroll();
15037: PPUSH
15038: CALL_OW 559
// wait ( 1 1$00 ) ;
15042: LD_INT 2100
15044: PPUSH
15045: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15049: LD_STRING displayTroll();
15051: PPUSH
15052: CALL_OW 559
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15063: LD_STRING hideTroll();
15065: PPUSH
15066: CALL_OW 559
// end ;
15070: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15071: LD_EXP 19
15075: PUSH
15076: LD_EXP 45
15080: AND
15081: IFFALSE 15144
15083: GO 15085
15085: DISABLE
15086: LD_INT 0
15088: PPUSH
// begin p := 0 ;
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: LD_INT 0
15096: ST_TO_ADDR
// repeat game_speed := 1 ;
15097: LD_ADDR_OWVAR 65
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15105: LD_INT 35
15107: PPUSH
15108: CALL_OW 67
// p := p + 1 ;
15112: LD_ADDR_VAR 0 1
15116: PUSH
15117: LD_VAR 0 1
15121: PUSH
15122: LD_INT 1
15124: PLUS
15125: ST_TO_ADDR
// until p >= 60 ;
15126: LD_VAR 0 1
15130: PUSH
15131: LD_INT 60
15133: GREATEREQUAL
15134: IFFALSE 15097
// game_speed := 4 ;
15136: LD_ADDR_OWVAR 65
15140: PUSH
15141: LD_INT 4
15143: ST_TO_ADDR
// end ;
15144: PPOPN 1
15146: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15147: LD_EXP 19
15151: PUSH
15152: LD_EXP 46
15156: AND
15157: IFFALSE 15303
15159: GO 15161
15161: DISABLE
15162: LD_INT 0
15164: PPUSH
15165: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15166: LD_ADDR_VAR 0 1
15170: PUSH
15171: LD_INT 22
15173: PUSH
15174: LD_OWVAR 2
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 2
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: LD_INT 0
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 30
15198: PUSH
15199: LD_INT 1
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PPUSH
15215: CALL_OW 69
15219: ST_TO_ADDR
// if not depot then
15220: LD_VAR 0 1
15224: NOT
15225: IFFALSE 15229
// exit ;
15227: GO 15303
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_VAR 0 1
15238: PUSH
15239: LD_INT 1
15241: PPUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 12
15251: ARRAY
15252: PPUSH
15253: CALL_OW 274
15257: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15273: LD_VAR 0 2
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 0
15283: PPUSH
15284: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15288: LD_VAR 0 2
15292: PPUSH
15293: LD_INT 3
15295: PPUSH
15296: LD_INT 0
15298: PPUSH
15299: CALL_OW 277
// end ;
15303: PPOPN 2
15305: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15306: LD_EXP 19
15310: PUSH
15311: LD_EXP 47
15315: AND
15316: IFFALSE 15413
15318: GO 15320
15320: DISABLE
15321: LD_INT 0
15323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15324: LD_ADDR_VAR 0 1
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_OWVAR 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 21
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 3
15353: PUSH
15354: LD_INT 23
15356: PUSH
15357: LD_INT 0
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: PPUSH
15373: CALL_OW 69
15377: ST_TO_ADDR
// if not tmp then
15378: LD_VAR 0 1
15382: NOT
15383: IFFALSE 15387
// exit ;
15385: GO 15413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15387: LD_VAR 0 1
15391: PUSH
15392: LD_INT 1
15394: PPUSH
15395: LD_VAR 0 1
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: LD_INT 200
15408: PPUSH
15409: CALL_OW 234
// end ;
15413: PPOPN 1
15415: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15416: LD_EXP 19
15420: PUSH
15421: LD_EXP 48
15425: AND
15426: IFFALSE 15505
15428: GO 15430
15430: DISABLE
15431: LD_INT 0
15433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_OWVAR 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 21
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PPUSH
15465: CALL_OW 69
15469: ST_TO_ADDR
// if not tmp then
15470: LD_VAR 0 1
15474: NOT
15475: IFFALSE 15479
// exit ;
15477: GO 15505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15479: LD_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PPUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 12
15496: ARRAY
15497: PPUSH
15498: LD_INT 60
15500: PPUSH
15501: CALL_OW 234
// end ;
15505: PPOPN 1
15507: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15508: LD_EXP 19
15512: PUSH
15513: LD_EXP 49
15517: AND
15518: IFFALSE 15617
15520: GO 15522
15522: DISABLE
15523: LD_INT 0
15525: PPUSH
15526: PPUSH
// begin enable ;
15527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15528: LD_ADDR_VAR 0 1
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_OWVAR 2
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 61
15547: PUSH
15548: EMPTY
15549: LIST
15550: PUSH
15551: LD_INT 33
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 69
15570: ST_TO_ADDR
// if not tmp then
15571: LD_VAR 0 1
15575: NOT
15576: IFFALSE 15580
// exit ;
15578: GO 15617
// for i in tmp do
15580: LD_ADDR_VAR 0 2
15584: PUSH
15585: LD_VAR 0 1
15589: PUSH
15590: FOR_IN
15591: IFFALSE 15615
// if IsControledBy ( i ) then
15593: LD_VAR 0 2
15597: PPUSH
15598: CALL_OW 312
15602: IFFALSE 15613
// ComUnlink ( i ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: CALL_OW 136
15613: GO 15590
15615: POP
15616: POP
// end ;
15617: PPOPN 2
15619: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15620: LD_EXP 19
15624: PUSH
15625: LD_EXP 50
15629: AND
15630: IFFALSE 15770
15632: GO 15634
15634: DISABLE
15635: LD_INT 0
15637: PPUSH
15638: PPUSH
// begin ToLua ( displayPowell(); ) ;
15639: LD_STRING displayPowell();
15641: PPUSH
15642: CALL_OW 559
// uc_side := 0 ;
15646: LD_ADDR_OWVAR 20
15650: PUSH
15651: LD_INT 0
15653: ST_TO_ADDR
// uc_nation := 2 ;
15654: LD_ADDR_OWVAR 21
15658: PUSH
15659: LD_INT 2
15661: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15662: LD_ADDR_OWVAR 37
15666: PUSH
15667: LD_INT 14
15669: ST_TO_ADDR
// vc_engine := engine_siberite ;
15670: LD_ADDR_OWVAR 39
15674: PUSH
15675: LD_INT 3
15677: ST_TO_ADDR
// vc_control := control_apeman ;
15678: LD_ADDR_OWVAR 38
15682: PUSH
15683: LD_INT 5
15685: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15686: LD_ADDR_OWVAR 40
15690: PUSH
15691: LD_INT 29
15693: ST_TO_ADDR
// un := CreateVehicle ;
15694: LD_ADDR_VAR 0 2
15698: PUSH
15699: CALL_OW 45
15703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15704: LD_VAR 0 2
15708: PPUSH
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15716: LD_INT 35
15718: PPUSH
15719: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15723: LD_VAR 0 2
15727: PPUSH
15728: LD_INT 22
15730: PUSH
15731: LD_OWVAR 2
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 74
15754: PPUSH
15755: CALL_OW 115
// until IsDead ( un ) ;
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 301
15768: IFFALSE 15716
// end ;
15770: PPOPN 2
15772: END
// every 0 0$1 trigger StreamModeActive and sStu do
15773: LD_EXP 19
15777: PUSH
15778: LD_EXP 58
15782: AND
15783: IFFALSE 15799
15785: GO 15787
15787: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15788: LD_STRING displayStucuk();
15790: PPUSH
15791: CALL_OW 559
// ResetFog ;
15795: CALL_OW 335
// end ;
15799: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15800: LD_EXP 19
15804: PUSH
15805: LD_EXP 51
15809: AND
15810: IFFALSE 15951
15812: GO 15814
15814: DISABLE
15815: LD_INT 0
15817: PPUSH
15818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15819: LD_ADDR_VAR 0 2
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_OWVAR 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: ST_TO_ADDR
// if not tmp then
15855: LD_VAR 0 2
15859: NOT
15860: IFFALSE 15864
// exit ;
15862: GO 15951
// un := tmp [ rand ( 1 , tmp ) ] ;
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: LD_VAR 0 2
15873: PUSH
15874: LD_INT 1
15876: PPUSH
15877: LD_VAR 0 2
15881: PPUSH
15882: CALL_OW 12
15886: ARRAY
15887: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_INT 0
15895: PPUSH
15896: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_OWVAR 3
15909: PUSH
15910: LD_VAR 0 1
15914: DIFF
15915: PPUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 74
15925: PPUSH
15926: CALL_OW 115
// wait ( 0 0$20 ) ;
15930: LD_INT 700
15932: PPUSH
15933: CALL_OW 67
// SetSide ( un , your_side ) ;
15937: LD_VAR 0 1
15941: PPUSH
15942: LD_OWVAR 2
15946: PPUSH
15947: CALL_OW 235
// end ;
15951: PPOPN 2
15953: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15954: LD_EXP 19
15958: PUSH
15959: LD_EXP 52
15963: AND
15964: IFFALSE 16070
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15972: LD_ADDR_VAR 0 1
15976: PUSH
15977: LD_INT 22
15979: PUSH
15980: LD_OWVAR 2
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: LD_INT 30
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 30
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: ST_TO_ADDR
// if not depot then
16026: LD_VAR 0 1
16030: NOT
16031: IFFALSE 16035
// exit ;
16033: GO 16070
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16035: LD_VAR 0 1
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: PPUSH
16044: CALL_OW 250
16048: PPUSH
16049: LD_VAR 0 1
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: CALL_OW 251
16062: PPUSH
16063: LD_INT 70
16065: PPUSH
16066: CALL_OW 495
// end ;
16070: PPOPN 1
16072: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16073: LD_EXP 19
16077: PUSH
16078: LD_EXP 53
16082: AND
16083: IFFALSE 16294
16085: GO 16087
16087: DISABLE
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
16094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16095: LD_ADDR_VAR 0 5
16099: PUSH
16100: LD_INT 22
16102: PUSH
16103: LD_OWVAR 2
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 69
16130: ST_TO_ADDR
// if not tmp then
16131: LD_VAR 0 5
16135: NOT
16136: IFFALSE 16140
// exit ;
16138: GO 16294
// for i in tmp do
16140: LD_ADDR_VAR 0 1
16144: PUSH
16145: LD_VAR 0 5
16149: PUSH
16150: FOR_IN
16151: IFFALSE 16292
// begin d := rand ( 0 , 5 ) ;
16153: LD_ADDR_VAR 0 4
16157: PUSH
16158: LD_INT 0
16160: PPUSH
16161: LD_INT 5
16163: PPUSH
16164: CALL_OW 12
16168: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 250
16183: PPUSH
16184: LD_VAR 0 4
16188: PPUSH
16189: LD_INT 3
16191: PPUSH
16192: LD_INT 12
16194: PPUSH
16195: CALL_OW 12
16199: PPUSH
16200: CALL_OW 272
16204: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 251
16219: PPUSH
16220: LD_VAR 0 4
16224: PPUSH
16225: LD_INT 3
16227: PPUSH
16228: LD_INT 12
16230: PPUSH
16231: CALL_OW 12
16235: PPUSH
16236: CALL_OW 273
16240: ST_TO_ADDR
// if ValidHex ( x , y ) then
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 488
16255: IFFALSE 16290
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_VAR 0 3
16271: PPUSH
16272: LD_INT 3
16274: PPUSH
16275: LD_INT 6
16277: PPUSH
16278: CALL_OW 12
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 483
// end ;
16290: GO 16150
16292: POP
16293: POP
// end ;
16294: PPOPN 5
16296: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16297: LD_EXP 19
16301: PUSH
16302: LD_EXP 54
16306: AND
16307: IFFALSE 16401
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
16315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_INT 22
16323: PUSH
16324: LD_OWVAR 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 32
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 21
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16401
// for i in tmp do
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: FOR_IN
16383: IFFALSE 16399
// SetFuel ( i , 0 ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 0
16392: PPUSH
16393: CALL_OW 240
16397: GO 16382
16399: POP
16400: POP
// end ;
16401: PPOPN 2
16403: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16404: LD_EXP 19
16408: PUSH
16409: LD_EXP 55
16413: AND
16414: IFFALSE 16480
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_OWVAR 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 30
16441: PUSH
16442: LD_INT 29
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PPUSH
16453: CALL_OW 69
16457: ST_TO_ADDR
// if not tmp then
16458: LD_VAR 0 1
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16480
// DestroyUnit ( tmp [ 1 ] ) ;
16467: LD_VAR 0 1
16471: PUSH
16472: LD_INT 1
16474: ARRAY
16475: PPUSH
16476: CALL_OW 65
// end ;
16480: PPOPN 1
16482: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16483: LD_EXP 19
16487: PUSH
16488: LD_EXP 57
16492: AND
16493: IFFALSE 16622
16495: GO 16497
16497: DISABLE
16498: LD_INT 0
16500: PPUSH
// begin uc_side := 0 ;
16501: LD_ADDR_OWVAR 20
16505: PUSH
16506: LD_INT 0
16508: ST_TO_ADDR
// uc_nation := nation_arabian ;
16509: LD_ADDR_OWVAR 21
16513: PUSH
16514: LD_INT 2
16516: ST_TO_ADDR
// hc_gallery :=  ;
16517: LD_ADDR_OWVAR 33
16521: PUSH
16522: LD_STRING 
16524: ST_TO_ADDR
// hc_name :=  ;
16525: LD_ADDR_OWVAR 26
16529: PUSH
16530: LD_STRING 
16532: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16533: LD_INT 1
16535: PPUSH
16536: LD_INT 11
16538: PPUSH
16539: LD_INT 10
16541: PPUSH
16542: CALL_OW 380
// un := CreateHuman ;
16546: LD_ADDR_VAR 0 1
16550: PUSH
16551: CALL_OW 44
16555: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16556: LD_VAR 0 1
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16568: LD_INT 35
16570: PPUSH
16571: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16575: LD_VAR 0 1
16579: PPUSH
16580: LD_INT 22
16582: PUSH
16583: LD_OWVAR 2
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PPUSH
16592: CALL_OW 69
16596: PPUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 74
16606: PPUSH
16607: CALL_OW 115
// until IsDead ( un ) ;
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 301
16620: IFFALSE 16568
// end ;
16622: PPOPN 1
16624: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16625: LD_EXP 19
16629: PUSH
16630: LD_EXP 59
16634: AND
16635: IFFALSE 16647
16637: GO 16639
16639: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16640: LD_STRING earthquake(getX(game), 0, 32)
16642: PPUSH
16643: CALL_OW 559
16647: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16648: LD_EXP 19
16652: PUSH
16653: LD_EXP 60
16657: AND
16658: IFFALSE 16749
16660: GO 16662
16662: DISABLE
16663: LD_INT 0
16665: PPUSH
// begin enable ;
16666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_OWVAR 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 21
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 33
16696: PUSH
16697: LD_INT 3
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// if not tmp then
16714: LD_VAR 0 1
16718: NOT
16719: IFFALSE 16723
// exit ;
16721: GO 16749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16723: LD_VAR 0 1
16727: PUSH
16728: LD_INT 1
16730: PPUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 234
// end ;
16749: PPOPN 1
16751: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16752: LD_EXP 19
16756: PUSH
16757: LD_EXP 61
16761: AND
16762: IFFALSE 16903
16764: GO 16766
16766: DISABLE
16767: LD_INT 0
16769: PPUSH
16770: PPUSH
16771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: LD_INT 22
16779: PUSH
16780: LD_OWVAR 2
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 25
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 69
16807: ST_TO_ADDR
// if not tmp then
16808: LD_VAR 0 3
16812: NOT
16813: IFFALSE 16817
// exit ;
16815: GO 16903
// un := tmp [ rand ( 1 , tmp ) ] ;
16817: LD_ADDR_VAR 0 2
16821: PUSH
16822: LD_VAR 0 3
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: CALL_OW 12
16839: ARRAY
16840: ST_TO_ADDR
// if Crawls ( un ) then
16841: LD_VAR 0 2
16845: PPUSH
16846: CALL_OW 318
16850: IFFALSE 16861
// ComWalk ( un ) ;
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16861: LD_VAR 0 2
16865: PPUSH
16866: LD_INT 9
16868: PPUSH
16869: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16873: LD_INT 28
16875: PPUSH
16876: LD_OWVAR 2
16880: PPUSH
16881: LD_INT 2
16883: PPUSH
16884: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16888: LD_INT 29
16890: PPUSH
16891: LD_OWVAR 2
16895: PPUSH
16896: LD_INT 2
16898: PPUSH
16899: CALL_OW 322
// end ;
16903: PPOPN 3
16905: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16906: LD_EXP 19
16910: PUSH
16911: LD_EXP 62
16915: AND
16916: IFFALSE 17027
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
16925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16926: LD_ADDR_VAR 0 3
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_OWVAR 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 25
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 3
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17027
// un := tmp [ rand ( 1 , tmp ) ] ;
16971: LD_ADDR_VAR 0 2
16975: PUSH
16976: LD_VAR 0 3
16980: PUSH
16981: LD_INT 1
16983: PPUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: CALL_OW 12
16993: ARRAY
16994: ST_TO_ADDR
// if Crawls ( un ) then
16995: LD_VAR 0 2
16999: PPUSH
17000: CALL_OW 318
17004: IFFALSE 17015
// ComWalk ( un ) ;
17006: LD_VAR 0 2
17010: PPUSH
17011: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17015: LD_VAR 0 2
17019: PPUSH
17020: LD_INT 8
17022: PPUSH
17023: CALL_OW 336
// end ;
17027: PPOPN 3
17029: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17030: LD_EXP 19
17034: PUSH
17035: LD_EXP 63
17039: AND
17040: IFFALSE 17184
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17049: LD_ADDR_VAR 0 2
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_OWVAR 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 34
17081: PUSH
17082: LD_INT 12
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 34
17091: PUSH
17092: LD_INT 51
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 32
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 69
17124: ST_TO_ADDR
// if not tmp then
17125: LD_VAR 0 2
17129: NOT
17130: IFFALSE 17134
// exit ;
17132: GO 17184
// for i in tmp do
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17182
// if GetCargo ( i , mat_artifact ) = 0 then
17147: LD_VAR 0 1
17151: PPUSH
17152: LD_INT 4
17154: PPUSH
17155: CALL_OW 289
17159: PUSH
17160: LD_INT 0
17162: EQUAL
17163: IFFALSE 17180
// SetCargo ( i , mat_siberit , 100 ) ;
17165: LD_VAR 0 1
17169: PPUSH
17170: LD_INT 3
17172: PPUSH
17173: LD_INT 100
17175: PPUSH
17176: CALL_OW 290
17180: GO 17144
17182: POP
17183: POP
// end ;
17184: PPOPN 2
17186: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17187: LD_EXP 19
17191: PUSH
17192: LD_EXP 64
17196: AND
17197: IFFALSE 17380
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_INT 22
17213: PUSH
17214: LD_OWVAR 2
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: ST_TO_ADDR
// if not tmp then
17228: LD_VAR 0 2
17232: NOT
17233: IFFALSE 17237
// exit ;
17235: GO 17380
// for i := 1 to 2 do
17237: LD_ADDR_VAR 0 1
17241: PUSH
17242: DOUBLE
17243: LD_INT 1
17245: DEC
17246: ST_TO_ADDR
17247: LD_INT 2
17249: PUSH
17250: FOR_TO
17251: IFFALSE 17378
// begin uc_side := your_side ;
17253: LD_ADDR_OWVAR 20
17257: PUSH
17258: LD_OWVAR 2
17262: ST_TO_ADDR
// uc_nation := nation_american ;
17263: LD_ADDR_OWVAR 21
17267: PUSH
17268: LD_INT 1
17270: ST_TO_ADDR
// vc_chassis := us_morphling ;
17271: LD_ADDR_OWVAR 37
17275: PUSH
17276: LD_INT 5
17278: ST_TO_ADDR
// vc_engine := engine_siberite ;
17279: LD_ADDR_OWVAR 39
17283: PUSH
17284: LD_INT 3
17286: ST_TO_ADDR
// vc_control := control_computer ;
17287: LD_ADDR_OWVAR 38
17291: PUSH
17292: LD_INT 3
17294: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17295: LD_ADDR_OWVAR 40
17299: PUSH
17300: LD_INT 10
17302: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17303: LD_VAR 0 2
17307: PUSH
17308: LD_INT 1
17310: ARRAY
17311: PPUSH
17312: CALL_OW 310
17316: NOT
17317: IFFALSE 17364
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17319: CALL_OW 45
17323: PPUSH
17324: LD_VAR 0 2
17328: PUSH
17329: LD_INT 1
17331: ARRAY
17332: PPUSH
17333: CALL_OW 250
17337: PPUSH
17338: LD_VAR 0 2
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: CALL_OW 251
17351: PPUSH
17352: LD_INT 12
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: CALL_OW 50
17362: GO 17376
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17364: CALL_OW 45
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: CALL_OW 51
// end ;
17376: GO 17250
17378: POP
17379: POP
// end ;
17380: PPOPN 2
17382: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17383: LD_EXP 19
17387: PUSH
17388: LD_EXP 65
17392: AND
17393: IFFALSE 17615
17395: GO 17397
17397: DISABLE
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17406: LD_ADDR_VAR 0 6
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: LD_INT 23
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: PPUSH
17455: CALL_OW 69
17459: ST_TO_ADDR
// if not tmp then
17460: LD_VAR 0 6
17464: NOT
17465: IFFALSE 17469
// exit ;
17467: GO 17615
// s1 := rand ( 1 , 4 ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 4
17479: PPUSH
17480: CALL_OW 12
17484: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_VAR 0 6
17494: PUSH
17495: LD_INT 1
17497: ARRAY
17498: PPUSH
17499: LD_VAR 0 2
17503: PPUSH
17504: CALL_OW 259
17508: ST_TO_ADDR
// if s1 = 1 then
17509: LD_VAR 0 2
17513: PUSH
17514: LD_INT 1
17516: EQUAL
17517: IFFALSE 17537
// s2 := rand ( 2 , 4 ) else
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_INT 2
17526: PPUSH
17527: LD_INT 4
17529: PPUSH
17530: CALL_OW 12
17534: ST_TO_ADDR
17535: GO 17545
// s2 := 1 ;
17537: LD_ADDR_VAR 0 3
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17545: LD_ADDR_VAR 0 5
17549: PUSH
17550: LD_VAR 0 6
17554: PUSH
17555: LD_INT 1
17557: ARRAY
17558: PPUSH
17559: LD_VAR 0 3
17563: PPUSH
17564: CALL_OW 259
17568: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17569: LD_VAR 0 6
17573: PUSH
17574: LD_INT 1
17576: ARRAY
17577: PPUSH
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_VAR 0 5
17587: PPUSH
17588: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17592: LD_VAR 0 6
17596: PUSH
17597: LD_INT 1
17599: ARRAY
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_VAR 0 4
17610: PPUSH
17611: CALL_OW 237
// end ;
17615: PPOPN 6
17617: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17618: LD_EXP 19
17622: PUSH
17623: LD_EXP 66
17627: AND
17628: IFFALSE 17707
17630: GO 17632
17632: DISABLE
17633: LD_INT 0
17635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17636: LD_ADDR_VAR 0 1
17640: PUSH
17641: LD_INT 22
17643: PUSH
17644: LD_OWVAR 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 30
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: ST_TO_ADDR
// if not tmp then
17672: LD_VAR 0 1
17676: NOT
17677: IFFALSE 17681
// exit ;
17679: GO 17707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17681: LD_VAR 0 1
17685: PUSH
17686: LD_INT 1
17688: PPUSH
17689: LD_VAR 0 1
17693: PPUSH
17694: CALL_OW 12
17698: ARRAY
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 234
// end ;
17707: PPOPN 1
17709: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17710: LD_EXP 19
17714: PUSH
17715: LD_EXP 67
17719: AND
17720: IFFALSE 17832
17722: GO 17724
17724: DISABLE
17725: LD_INT 0
17727: PPUSH
17728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_OWVAR 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 30
17751: PUSH
17752: LD_INT 27
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 30
17761: PUSH
17762: LD_INT 26
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 30
17771: PUSH
17772: LD_INT 28
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: ST_TO_ADDR
// if not tmp then
17794: LD_VAR 0 2
17798: NOT
17799: IFFALSE 17803
// exit ;
17801: GO 17832
// for i in tmp do
17803: LD_ADDR_VAR 0 1
17807: PUSH
17808: LD_VAR 0 2
17812: PUSH
17813: FOR_IN
17814: IFFALSE 17830
// SetLives ( i , 1 ) ;
17816: LD_VAR 0 1
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 234
17828: GO 17813
17830: POP
17831: POP
// end ;
17832: PPOPN 2
17834: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17835: LD_EXP 19
17839: PUSH
17840: LD_EXP 68
17844: AND
17845: IFFALSE 18119
17847: GO 17849
17849: DISABLE
17850: LD_INT 0
17852: PPUSH
17853: PPUSH
17854: PPUSH
// begin i := rand ( 1 , 7 ) ;
17855: LD_ADDR_VAR 0 1
17859: PUSH
17860: LD_INT 1
17862: PPUSH
17863: LD_INT 7
17865: PPUSH
17866: CALL_OW 12
17870: ST_TO_ADDR
// case i of 1 :
17871: LD_VAR 0 1
17875: PUSH
17876: LD_INT 1
17878: DOUBLE
17879: EQUAL
17880: IFTRUE 17884
17882: GO 17894
17884: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17885: LD_STRING earthquake(getX(game), 0, 32)
17887: PPUSH
17888: CALL_OW 559
17892: GO 18119
17894: LD_INT 2
17896: DOUBLE
17897: EQUAL
17898: IFTRUE 17902
17900: GO 17916
17902: POP
// begin ToLua ( displayStucuk(); ) ;
17903: LD_STRING displayStucuk();
17905: PPUSH
17906: CALL_OW 559
// ResetFog ;
17910: CALL_OW 335
// end ; 3 :
17914: GO 18119
17916: LD_INT 3
17918: DOUBLE
17919: EQUAL
17920: IFTRUE 17924
17922: GO 18028
17924: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 25
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: ST_TO_ADDR
// if not tmp then
17961: LD_VAR 0 2
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18119
// un := tmp [ rand ( 1 , tmp ) ] ;
17970: LD_ADDR_VAR 0 3
17974: PUSH
17975: LD_VAR 0 2
17979: PUSH
17980: LD_INT 1
17982: PPUSH
17983: LD_VAR 0 2
17987: PPUSH
17988: CALL_OW 12
17992: ARRAY
17993: ST_TO_ADDR
// if Crawls ( un ) then
17994: LD_VAR 0 3
17998: PPUSH
17999: CALL_OW 318
18003: IFFALSE 18014
// ComWalk ( un ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_INT 8
18021: PPUSH
18022: CALL_OW 336
// end ; 4 :
18026: GO 18119
18028: LD_INT 4
18030: DOUBLE
18031: EQUAL
18032: IFTRUE 18036
18034: GO 18097
18036: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18037: LD_ADDR_VAR 0 2
18041: PUSH
18042: LD_INT 22
18044: PUSH
18045: LD_OWVAR 2
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 30
18056: PUSH
18057: LD_INT 29
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PPUSH
18068: CALL_OW 69
18072: ST_TO_ADDR
// if not tmp then
18073: LD_VAR 0 2
18077: NOT
18078: IFFALSE 18082
// exit ;
18080: GO 18119
// DestroyUnit ( tmp [ 1 ] ) ;
18082: LD_VAR 0 2
18086: PUSH
18087: LD_INT 1
18089: ARRAY
18090: PPUSH
18091: CALL_OW 65
// end ; 5 .. 7 :
18095: GO 18119
18097: LD_INT 5
18099: DOUBLE
18100: GREATEREQUAL
18101: IFFALSE 18109
18103: LD_INT 7
18105: DOUBLE
18106: LESSEQUAL
18107: IFTRUE 18111
18109: GO 18118
18111: POP
// StreamSibBomb ; end ;
18112: CALL 14369 0 0
18116: GO 18119
18118: POP
// end ;
18119: PPOPN 3
18121: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18122: LD_EXP 19
18126: PUSH
18127: LD_EXP 69
18131: AND
18132: IFFALSE 18288
18134: GO 18136
18136: DISABLE
18137: LD_INT 0
18139: PPUSH
18140: PPUSH
18141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: LD_INT 81
18149: PUSH
18150: LD_OWVAR 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 21
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 21
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PPUSH
18191: CALL_OW 69
18195: ST_TO_ADDR
// if not tmp then
18196: LD_VAR 0 2
18200: NOT
18201: IFFALSE 18205
// exit ;
18203: GO 18288
// p := 0 ;
18205: LD_ADDR_VAR 0 3
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18213: LD_INT 35
18215: PPUSH
18216: CALL_OW 67
// p := p + 1 ;
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 1
18232: PLUS
18233: ST_TO_ADDR
// for i in tmp do
18234: LD_ADDR_VAR 0 1
18238: PUSH
18239: LD_VAR 0 2
18243: PUSH
18244: FOR_IN
18245: IFFALSE 18276
// if GetLives ( i ) < 1000 then
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 256
18256: PUSH
18257: LD_INT 1000
18259: LESS
18260: IFFALSE 18274
// SetLives ( i , 1000 ) ;
18262: LD_VAR 0 1
18266: PPUSH
18267: LD_INT 1000
18269: PPUSH
18270: CALL_OW 234
18274: GO 18244
18276: POP
18277: POP
// until p > 20 ;
18278: LD_VAR 0 3
18282: PUSH
18283: LD_INT 20
18285: GREATER
18286: IFFALSE 18213
// end ;
18288: PPOPN 3
18290: END
// every 0 0$1 trigger StreamModeActive and sTime do
18291: LD_EXP 19
18295: PUSH
18296: LD_EXP 70
18300: AND
18301: IFFALSE 18336
18303: GO 18305
18305: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18306: LD_INT 28
18308: PPUSH
18309: LD_OWVAR 2
18313: PPUSH
18314: LD_INT 2
18316: PPUSH
18317: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18321: LD_INT 30
18323: PPUSH
18324: LD_OWVAR 2
18328: PPUSH
18329: LD_INT 2
18331: PPUSH
18332: CALL_OW 322
// end ;
18336: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18337: LD_EXP 19
18341: PUSH
18342: LD_EXP 71
18346: AND
18347: IFFALSE 18468
18349: GO 18351
18351: DISABLE
18352: LD_INT 0
18354: PPUSH
18355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18356: LD_ADDR_VAR 0 2
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_OWVAR 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 21
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 3
18385: PUSH
18386: LD_INT 23
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 69
18409: ST_TO_ADDR
// if not tmp then
18410: LD_VAR 0 2
18414: NOT
18415: IFFALSE 18419
// exit ;
18417: GO 18468
// for i in tmp do
18419: LD_ADDR_VAR 0 1
18423: PUSH
18424: LD_VAR 0 2
18428: PUSH
18429: FOR_IN
18430: IFFALSE 18466
// begin if Crawls ( i ) then
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 318
18441: IFFALSE 18452
// ComWalk ( i ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 138
// SetClass ( i , 2 ) ;
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_INT 2
18459: PPUSH
18460: CALL_OW 336
// end ;
18464: GO 18429
18466: POP
18467: POP
// end ;
18468: PPOPN 2
18470: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18471: LD_EXP 19
18475: PUSH
18476: LD_EXP 72
18480: AND
18481: IFFALSE 18762
18483: GO 18485
18485: DISABLE
18486: LD_INT 0
18488: PPUSH
18489: PPUSH
18490: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18491: LD_OWVAR 2
18495: PPUSH
18496: LD_INT 9
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18509: LD_INT 9
18511: PPUSH
18512: LD_OWVAR 2
18516: PPUSH
18517: CALL_OW 343
// uc_side := 9 ;
18521: LD_ADDR_OWVAR 20
18525: PUSH
18526: LD_INT 9
18528: ST_TO_ADDR
// uc_nation := 2 ;
18529: LD_ADDR_OWVAR 21
18533: PUSH
18534: LD_INT 2
18536: ST_TO_ADDR
// hc_name := Dark Warrior ;
18537: LD_ADDR_OWVAR 26
18541: PUSH
18542: LD_STRING Dark Warrior
18544: ST_TO_ADDR
// hc_gallery :=  ;
18545: LD_ADDR_OWVAR 33
18549: PUSH
18550: LD_STRING 
18552: ST_TO_ADDR
// hc_noskilllimit := true ;
18553: LD_ADDR_OWVAR 76
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18561: LD_ADDR_OWVAR 31
18565: PUSH
18566: LD_INT 30
18568: PUSH
18569: LD_INT 30
18571: PUSH
18572: LD_INT 30
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: ST_TO_ADDR
// un := CreateHuman ;
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: CALL_OW 44
18593: ST_TO_ADDR
// hc_noskilllimit := false ;
18594: LD_ADDR_OWVAR 76
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18602: LD_VAR 0 3
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: CALL_OW 51
// p := 0 ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_INT 0
18621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18622: LD_INT 35
18624: PPUSH
18625: CALL_OW 67
// p := p + 1 ;
18629: LD_ADDR_VAR 0 2
18633: PUSH
18634: LD_VAR 0 2
18638: PUSH
18639: LD_INT 1
18641: PLUS
18642: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18643: LD_VAR 0 3
18647: PPUSH
18648: CALL_OW 256
18652: PUSH
18653: LD_INT 1000
18655: LESS
18656: IFFALSE 18670
// SetLives ( un , 1000 ) ;
18658: LD_VAR 0 3
18662: PPUSH
18663: LD_INT 1000
18665: PPUSH
18666: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18670: LD_VAR 0 3
18674: PPUSH
18675: LD_INT 81
18677: PUSH
18678: LD_OWVAR 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 91
18689: PUSH
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 30
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 69
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 74
18721: PPUSH
18722: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18726: LD_VAR 0 2
18730: PUSH
18731: LD_INT 60
18733: GREATER
18734: PUSH
18735: LD_VAR 0 3
18739: PPUSH
18740: CALL_OW 301
18744: OR
18745: IFFALSE 18622
// if un then
18747: LD_VAR 0 3
18751: IFFALSE 18762
// RemoveUnit ( un ) ;
18753: LD_VAR 0 3
18757: PPUSH
18758: CALL_OW 64
// end ; end_of_file
18762: PPOPN 3
18764: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
// if exist_mode then
18769: LD_VAR 0 2
18773: IFFALSE 18798
// unit := CreateCharacter ( prefix & ident ) else
18775: LD_ADDR_VAR 0 5
18779: PUSH
18780: LD_VAR 0 3
18784: PUSH
18785: LD_VAR 0 1
18789: STR
18790: PPUSH
18791: CALL_OW 34
18795: ST_TO_ADDR
18796: GO 18813
// unit := NewCharacter ( ident ) ;
18798: LD_ADDR_VAR 0 5
18802: PUSH
18803: LD_VAR 0 1
18807: PPUSH
18808: CALL_OW 25
18812: ST_TO_ADDR
// result := unit ;
18813: LD_ADDR_VAR 0 4
18817: PUSH
18818: LD_VAR 0 5
18822: ST_TO_ADDR
// end ;
18823: LD_VAR 0 4
18827: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18828: LD_INT 0
18830: PPUSH
18831: PPUSH
// if not side or not nation then
18832: LD_VAR 0 1
18836: NOT
18837: PUSH
18838: LD_VAR 0 2
18842: NOT
18843: OR
18844: IFFALSE 18848
// exit ;
18846: GO 19612
// case nation of nation_american :
18848: LD_VAR 0 2
18852: PUSH
18853: LD_INT 1
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 19075
18861: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
18862: LD_ADDR_VAR 0 4
18866: PUSH
18867: LD_INT 35
18869: PUSH
18870: LD_INT 45
18872: PUSH
18873: LD_INT 46
18875: PUSH
18876: LD_INT 47
18878: PUSH
18879: LD_INT 82
18881: PUSH
18882: LD_INT 83
18884: PUSH
18885: LD_INT 84
18887: PUSH
18888: LD_INT 85
18890: PUSH
18891: LD_INT 86
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 6
18902: PUSH
18903: LD_INT 15
18905: PUSH
18906: LD_INT 16
18908: PUSH
18909: LD_INT 7
18911: PUSH
18912: LD_INT 12
18914: PUSH
18915: LD_INT 13
18917: PUSH
18918: LD_INT 10
18920: PUSH
18921: LD_INT 14
18923: PUSH
18924: LD_INT 20
18926: PUSH
18927: LD_INT 21
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 25
18935: PUSH
18936: LD_INT 32
18938: PUSH
18939: LD_INT 27
18941: PUSH
18942: LD_INT 36
18944: PUSH
18945: LD_INT 69
18947: PUSH
18948: LD_INT 39
18950: PUSH
18951: LD_INT 34
18953: PUSH
18954: LD_INT 40
18956: PUSH
18957: LD_INT 48
18959: PUSH
18960: LD_INT 49
18962: PUSH
18963: LD_INT 50
18965: PUSH
18966: LD_INT 51
18968: PUSH
18969: LD_INT 52
18971: PUSH
18972: LD_INT 53
18974: PUSH
18975: LD_INT 54
18977: PUSH
18978: LD_INT 55
18980: PUSH
18981: LD_INT 56
18983: PUSH
18984: LD_INT 57
18986: PUSH
18987: LD_INT 58
18989: PUSH
18990: LD_INT 59
18992: PUSH
18993: LD_INT 60
18995: PUSH
18996: LD_INT 61
18998: PUSH
18999: LD_INT 62
19001: PUSH
19002: LD_INT 80
19004: PUSH
19005: LD_INT 82
19007: PUSH
19008: LD_INT 83
19010: PUSH
19011: LD_INT 84
19013: PUSH
19014: LD_INT 85
19016: PUSH
19017: LD_INT 86
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: ST_TO_ADDR
19073: GO 19536
19075: LD_INT 2
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19305
19083: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19084: LD_ADDR_VAR 0 4
19088: PUSH
19089: LD_INT 35
19091: PUSH
19092: LD_INT 45
19094: PUSH
19095: LD_INT 46
19097: PUSH
19098: LD_INT 47
19100: PUSH
19101: LD_INT 82
19103: PUSH
19104: LD_INT 83
19106: PUSH
19107: LD_INT 84
19109: PUSH
19110: LD_INT 85
19112: PUSH
19113: LD_INT 87
19115: PUSH
19116: LD_INT 70
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: LD_INT 11
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: LD_INT 4
19130: PUSH
19131: LD_INT 5
19133: PUSH
19134: LD_INT 6
19136: PUSH
19137: LD_INT 15
19139: PUSH
19140: LD_INT 18
19142: PUSH
19143: LD_INT 7
19145: PUSH
19146: LD_INT 17
19148: PUSH
19149: LD_INT 8
19151: PUSH
19152: LD_INT 20
19154: PUSH
19155: LD_INT 21
19157: PUSH
19158: LD_INT 22
19160: PUSH
19161: LD_INT 72
19163: PUSH
19164: LD_INT 26
19166: PUSH
19167: LD_INT 69
19169: PUSH
19170: LD_INT 39
19172: PUSH
19173: LD_INT 40
19175: PUSH
19176: LD_INT 41
19178: PUSH
19179: LD_INT 42
19181: PUSH
19182: LD_INT 43
19184: PUSH
19185: LD_INT 48
19187: PUSH
19188: LD_INT 49
19190: PUSH
19191: LD_INT 50
19193: PUSH
19194: LD_INT 51
19196: PUSH
19197: LD_INT 52
19199: PUSH
19200: LD_INT 53
19202: PUSH
19203: LD_INT 54
19205: PUSH
19206: LD_INT 55
19208: PUSH
19209: LD_INT 56
19211: PUSH
19212: LD_INT 60
19214: PUSH
19215: LD_INT 61
19217: PUSH
19218: LD_INT 62
19220: PUSH
19221: LD_INT 66
19223: PUSH
19224: LD_INT 67
19226: PUSH
19227: LD_INT 68
19229: PUSH
19230: LD_INT 81
19232: PUSH
19233: LD_INT 82
19235: PUSH
19236: LD_INT 83
19238: PUSH
19239: LD_INT 84
19241: PUSH
19242: LD_INT 85
19244: PUSH
19245: LD_INT 87
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: ST_TO_ADDR
19303: GO 19536
19305: LD_INT 3
19307: DOUBLE
19308: EQUAL
19309: IFTRUE 19313
19311: GO 19535
19313: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19314: LD_ADDR_VAR 0 4
19318: PUSH
19319: LD_INT 46
19321: PUSH
19322: LD_INT 47
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: LD_INT 82
19333: PUSH
19334: LD_INT 83
19336: PUSH
19337: LD_INT 84
19339: PUSH
19340: LD_INT 85
19342: PUSH
19343: LD_INT 86
19345: PUSH
19346: LD_INT 11
19348: PUSH
19349: LD_INT 9
19351: PUSH
19352: LD_INT 20
19354: PUSH
19355: LD_INT 19
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 24
19363: PUSH
19364: LD_INT 22
19366: PUSH
19367: LD_INT 25
19369: PUSH
19370: LD_INT 28
19372: PUSH
19373: LD_INT 29
19375: PUSH
19376: LD_INT 30
19378: PUSH
19379: LD_INT 31
19381: PUSH
19382: LD_INT 37
19384: PUSH
19385: LD_INT 38
19387: PUSH
19388: LD_INT 32
19390: PUSH
19391: LD_INT 27
19393: PUSH
19394: LD_INT 33
19396: PUSH
19397: LD_INT 69
19399: PUSH
19400: LD_INT 39
19402: PUSH
19403: LD_INT 34
19405: PUSH
19406: LD_INT 40
19408: PUSH
19409: LD_INT 71
19411: PUSH
19412: LD_INT 23
19414: PUSH
19415: LD_INT 44
19417: PUSH
19418: LD_INT 48
19420: PUSH
19421: LD_INT 49
19423: PUSH
19424: LD_INT 50
19426: PUSH
19427: LD_INT 51
19429: PUSH
19430: LD_INT 52
19432: PUSH
19433: LD_INT 53
19435: PUSH
19436: LD_INT 54
19438: PUSH
19439: LD_INT 55
19441: PUSH
19442: LD_INT 56
19444: PUSH
19445: LD_INT 57
19447: PUSH
19448: LD_INT 58
19450: PUSH
19451: LD_INT 59
19453: PUSH
19454: LD_INT 63
19456: PUSH
19457: LD_INT 64
19459: PUSH
19460: LD_INT 65
19462: PUSH
19463: LD_INT 82
19465: PUSH
19466: LD_INT 83
19468: PUSH
19469: LD_INT 84
19471: PUSH
19472: LD_INT 85
19474: PUSH
19475: LD_INT 86
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: ST_TO_ADDR
19533: GO 19536
19535: POP
// if state > - 1 and state < 3 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: GREATER
19545: PUSH
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 3
19553: LESS
19554: AND
19555: IFFALSE 19612
// for i in result do
19557: LD_ADDR_VAR 0 5
19561: PUSH
19562: LD_VAR 0 4
19566: PUSH
19567: FOR_IN
19568: IFFALSE 19610
// if GetTech ( i , side ) <> state then
19570: LD_VAR 0 5
19574: PPUSH
19575: LD_VAR 0 1
19579: PPUSH
19580: CALL_OW 321
19584: PUSH
19585: LD_VAR 0 3
19589: NONEQUAL
19590: IFFALSE 19608
// result := result diff i ;
19592: LD_ADDR_VAR 0 4
19596: PUSH
19597: LD_VAR 0 4
19601: PUSH
19602: LD_VAR 0 5
19606: DIFF
19607: ST_TO_ADDR
19608: GO 19567
19610: POP
19611: POP
// end ;
19612: LD_VAR 0 4
19616: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// result := true ;
19622: LD_ADDR_VAR 0 3
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
19630: LD_ADDR_VAR 0 5
19634: PUSH
19635: LD_VAR 0 2
19639: PPUSH
19640: CALL_OW 480
19644: ST_TO_ADDR
// if not tmp then
19645: LD_VAR 0 5
19649: NOT
19650: IFFALSE 19654
// exit ;
19652: GO 19703
// for i in tmp do
19654: LD_ADDR_VAR 0 4
19658: PUSH
19659: LD_VAR 0 5
19663: PUSH
19664: FOR_IN
19665: IFFALSE 19701
// if GetTech ( i , side ) <> state_researched then
19667: LD_VAR 0 4
19671: PPUSH
19672: LD_VAR 0 1
19676: PPUSH
19677: CALL_OW 321
19681: PUSH
19682: LD_INT 2
19684: NONEQUAL
19685: IFFALSE 19699
// begin result := false ;
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_INT 0
19694: ST_TO_ADDR
// exit ;
19695: POP
19696: POP
19697: GO 19703
// end ;
19699: GO 19664
19701: POP
19702: POP
// end ;
19703: LD_VAR 0 3
19707: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
19708: LD_INT 0
19710: PPUSH
19711: PPUSH
19712: PPUSH
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
19719: PPUSH
19720: PPUSH
19721: PPUSH
19722: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
19723: LD_VAR 0 1
19727: NOT
19728: PUSH
19729: LD_VAR 0 1
19733: PPUSH
19734: CALL_OW 257
19738: PUSH
19739: LD_INT 9
19741: NONEQUAL
19742: OR
19743: IFFALSE 19747
// exit ;
19745: GO 20320
// side := GetSide ( unit ) ;
19747: LD_ADDR_VAR 0 9
19751: PUSH
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL_OW 255
19761: ST_TO_ADDR
// tech_space := tech_spacanom ;
19762: LD_ADDR_VAR 0 12
19766: PUSH
19767: LD_INT 29
19769: ST_TO_ADDR
// tech_time := tech_taurad ;
19770: LD_ADDR_VAR 0 13
19774: PUSH
19775: LD_INT 28
19777: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19778: LD_ADDR_VAR 0 11
19782: PUSH
19783: LD_VAR 0 1
19787: PPUSH
19788: CALL_OW 310
19792: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19793: LD_VAR 0 11
19797: PPUSH
19798: CALL_OW 247
19802: PUSH
19803: LD_INT 2
19805: EQUAL
19806: IFFALSE 19810
// exit ;
19808: GO 20320
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19810: LD_ADDR_VAR 0 8
19814: PUSH
19815: LD_INT 81
19817: PUSH
19818: LD_VAR 0 9
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 3
19829: PUSH
19830: LD_INT 21
19832: PUSH
19833: LD_INT 3
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: ST_TO_ADDR
// if not tmp then
19853: LD_VAR 0 8
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 20320
// if in_unit then
19862: LD_VAR 0 11
19866: IFFALSE 19890
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19868: LD_ADDR_VAR 0 10
19872: PUSH
19873: LD_VAR 0 8
19877: PPUSH
19878: LD_VAR 0 11
19882: PPUSH
19883: CALL_OW 74
19887: ST_TO_ADDR
19888: GO 19910
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19890: LD_ADDR_VAR 0 10
19894: PUSH
19895: LD_VAR 0 8
19899: PPUSH
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 74
19909: ST_TO_ADDR
// if not enemy then
19910: LD_VAR 0 10
19914: NOT
19915: IFFALSE 19919
// exit ;
19917: GO 20320
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19919: LD_VAR 0 11
19923: PUSH
19924: LD_VAR 0 11
19928: PPUSH
19929: LD_VAR 0 10
19933: PPUSH
19934: CALL_OW 296
19938: PUSH
19939: LD_INT 13
19941: GREATER
19942: AND
19943: PUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: LD_VAR 0 10
19953: PPUSH
19954: CALL_OW 296
19958: PUSH
19959: LD_INT 12
19961: GREATER
19962: OR
19963: IFFALSE 19967
// exit ;
19965: GO 20320
// missile := [ 1 ] ;
19967: LD_ADDR_VAR 0 14
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: EMPTY
19976: LIST
19977: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19978: LD_VAR 0 9
19982: PPUSH
19983: LD_VAR 0 12
19987: PPUSH
19988: CALL_OW 325
19992: IFFALSE 20021
// missile := Insert ( missile , missile + 1 , 2 ) ;
19994: LD_ADDR_VAR 0 14
19998: PUSH
19999: LD_VAR 0 14
20003: PPUSH
20004: LD_VAR 0 14
20008: PUSH
20009: LD_INT 1
20011: PLUS
20012: PPUSH
20013: LD_INT 2
20015: PPUSH
20016: CALL_OW 2
20020: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20021: LD_VAR 0 9
20025: PPUSH
20026: LD_VAR 0 13
20030: PPUSH
20031: CALL_OW 325
20035: PUSH
20036: LD_VAR 0 10
20040: PPUSH
20041: CALL_OW 255
20045: PPUSH
20046: LD_VAR 0 13
20050: PPUSH
20051: CALL_OW 325
20055: NOT
20056: AND
20057: IFFALSE 20086
// missile := Insert ( missile , missile + 1 , 3 ) ;
20059: LD_ADDR_VAR 0 14
20063: PUSH
20064: LD_VAR 0 14
20068: PPUSH
20069: LD_VAR 0 14
20073: PUSH
20074: LD_INT 1
20076: PLUS
20077: PPUSH
20078: LD_INT 3
20080: PPUSH
20081: CALL_OW 2
20085: ST_TO_ADDR
// if missile < 2 then
20086: LD_VAR 0 14
20090: PUSH
20091: LD_INT 2
20093: LESS
20094: IFFALSE 20098
// exit ;
20096: GO 20320
// x := GetX ( enemy ) ;
20098: LD_ADDR_VAR 0 4
20102: PUSH
20103: LD_VAR 0 10
20107: PPUSH
20108: CALL_OW 250
20112: ST_TO_ADDR
// y := GetY ( enemy ) ;
20113: LD_ADDR_VAR 0 5
20117: PUSH
20118: LD_VAR 0 10
20122: PPUSH
20123: CALL_OW 251
20127: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20128: LD_ADDR_VAR 0 6
20132: PUSH
20133: LD_VAR 0 4
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: CALL_OW 12
20149: PLUS
20150: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20151: LD_ADDR_VAR 0 7
20155: PUSH
20156: LD_VAR 0 5
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 12
20172: PLUS
20173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20174: LD_VAR 0 6
20178: PPUSH
20179: LD_VAR 0 7
20183: PPUSH
20184: CALL_OW 488
20188: NOT
20189: IFFALSE 20211
// begin _x := x ;
20191: LD_ADDR_VAR 0 6
20195: PUSH
20196: LD_VAR 0 4
20200: ST_TO_ADDR
// _y := y ;
20201: LD_ADDR_VAR 0 7
20205: PUSH
20206: LD_VAR 0 5
20210: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: LD_INT 1
20218: PPUSH
20219: LD_VAR 0 14
20223: PPUSH
20224: CALL_OW 12
20228: ST_TO_ADDR
// case i of 1 :
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 1
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20259
20242: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20243: LD_VAR 0 1
20247: PPUSH
20248: LD_VAR 0 10
20252: PPUSH
20253: CALL_OW 115
20257: GO 20320
20259: LD_INT 2
20261: DOUBLE
20262: EQUAL
20263: IFTRUE 20267
20265: GO 20289
20267: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_VAR 0 6
20277: PPUSH
20278: LD_VAR 0 7
20282: PPUSH
20283: CALL_OW 153
20287: GO 20320
20289: LD_INT 3
20291: DOUBLE
20292: EQUAL
20293: IFTRUE 20297
20295: GO 20319
20297: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20298: LD_VAR 0 1
20302: PPUSH
20303: LD_VAR 0 6
20307: PPUSH
20308: LD_VAR 0 7
20312: PPUSH
20313: CALL_OW 154
20317: GO 20320
20319: POP
// end ;
20320: LD_VAR 0 2
20324: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20325: LD_INT 0
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
// if not unit or not building then
20333: LD_VAR 0 1
20337: NOT
20338: PUSH
20339: LD_VAR 0 2
20343: NOT
20344: OR
20345: IFFALSE 20349
// exit ;
20347: GO 20507
// x := GetX ( building ) ;
20349: LD_ADDR_VAR 0 5
20353: PUSH
20354: LD_VAR 0 2
20358: PPUSH
20359: CALL_OW 250
20363: ST_TO_ADDR
// y := GetY ( building ) ;
20364: LD_ADDR_VAR 0 6
20368: PUSH
20369: LD_VAR 0 2
20373: PPUSH
20374: CALL_OW 251
20378: ST_TO_ADDR
// for i = 0 to 5 do
20379: LD_ADDR_VAR 0 4
20383: PUSH
20384: DOUBLE
20385: LD_INT 0
20387: DEC
20388: ST_TO_ADDR
20389: LD_INT 5
20391: PUSH
20392: FOR_TO
20393: IFFALSE 20505
// begin _x := ShiftX ( x , i , 3 ) ;
20395: LD_ADDR_VAR 0 7
20399: PUSH
20400: LD_VAR 0 5
20404: PPUSH
20405: LD_VAR 0 4
20409: PPUSH
20410: LD_INT 3
20412: PPUSH
20413: CALL_OW 272
20417: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20418: LD_ADDR_VAR 0 8
20422: PUSH
20423: LD_VAR 0 6
20427: PPUSH
20428: LD_VAR 0 4
20432: PPUSH
20433: LD_INT 3
20435: PPUSH
20436: CALL_OW 273
20440: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20441: LD_VAR 0 7
20445: PPUSH
20446: LD_VAR 0 8
20450: PPUSH
20451: CALL_OW 488
20455: NOT
20456: IFFALSE 20460
// continue ;
20458: GO 20392
// if HexInfo ( _x , _y ) = 0 then
20460: LD_VAR 0 7
20464: PPUSH
20465: LD_VAR 0 8
20469: PPUSH
20470: CALL_OW 428
20474: PUSH
20475: LD_INT 0
20477: EQUAL
20478: IFFALSE 20503
// begin ComMoveXY ( unit , _x , _y ) ;
20480: LD_VAR 0 1
20484: PPUSH
20485: LD_VAR 0 7
20489: PPUSH
20490: LD_VAR 0 8
20494: PPUSH
20495: CALL_OW 111
// exit ;
20499: POP
20500: POP
20501: GO 20507
// end ; end ;
20503: GO 20392
20505: POP
20506: POP
// end ;
20507: LD_VAR 0 3
20511: RET
// export function ScanBase ( side , base_area ) ; begin
20512: LD_INT 0
20514: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20515: LD_ADDR_VAR 0 3
20519: PUSH
20520: LD_VAR 0 2
20524: PPUSH
20525: LD_INT 81
20527: PUSH
20528: LD_VAR 0 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PPUSH
20537: CALL_OW 70
20541: ST_TO_ADDR
// end ;
20542: LD_VAR 0 3
20546: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
// result := false ;
20553: LD_ADDR_VAR 0 2
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// side := GetSide ( unit ) ;
20561: LD_ADDR_VAR 0 3
20565: PUSH
20566: LD_VAR 0 1
20570: PPUSH
20571: CALL_OW 255
20575: ST_TO_ADDR
// nat := GetNation ( unit ) ;
20576: LD_ADDR_VAR 0 4
20580: PUSH
20581: LD_VAR 0 1
20585: PPUSH
20586: CALL_OW 248
20590: ST_TO_ADDR
// case nat of 1 :
20591: LD_VAR 0 4
20595: PUSH
20596: LD_INT 1
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20615
20604: POP
// tech := tech_lassight ; 2 :
20605: LD_ADDR_VAR 0 5
20609: PUSH
20610: LD_INT 12
20612: ST_TO_ADDR
20613: GO 20654
20615: LD_INT 2
20617: DOUBLE
20618: EQUAL
20619: IFTRUE 20623
20621: GO 20634
20623: POP
// tech := tech_mortar ; 3 :
20624: LD_ADDR_VAR 0 5
20628: PUSH
20629: LD_INT 41
20631: ST_TO_ADDR
20632: GO 20654
20634: LD_INT 3
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20653
20642: POP
// tech := tech_bazooka ; end ;
20643: LD_ADDR_VAR 0 5
20647: PUSH
20648: LD_INT 44
20650: ST_TO_ADDR
20651: GO 20654
20653: POP
// if Researched ( side , tech ) then
20654: LD_VAR 0 3
20658: PPUSH
20659: LD_VAR 0 5
20663: PPUSH
20664: CALL_OW 325
20668: IFFALSE 20695
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_INT 5
20677: PUSH
20678: LD_INT 8
20680: PUSH
20681: LD_INT 9
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: LIST
20688: PUSH
20689: LD_VAR 0 4
20693: ARRAY
20694: ST_TO_ADDR
// end ;
20695: LD_VAR 0 2
20699: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
20704: PPUSH
// if not mines then
20705: LD_VAR 0 2
20709: NOT
20710: IFFALSE 20714
// exit ;
20712: GO 20858
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20714: LD_ADDR_VAR 0 5
20718: PUSH
20719: LD_INT 81
20721: PUSH
20722: LD_VAR 0 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 3
20733: PUSH
20734: LD_INT 21
20736: PUSH
20737: LD_INT 3
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PPUSH
20752: CALL_OW 69
20756: ST_TO_ADDR
// for i in mines do
20757: LD_ADDR_VAR 0 4
20761: PUSH
20762: LD_VAR 0 2
20766: PUSH
20767: FOR_IN
20768: IFFALSE 20856
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
20770: LD_VAR 0 4
20774: PUSH
20775: LD_INT 1
20777: ARRAY
20778: PPUSH
20779: LD_VAR 0 4
20783: PUSH
20784: LD_INT 2
20786: ARRAY
20787: PPUSH
20788: CALL_OW 458
20792: NOT
20793: IFFALSE 20797
// continue ;
20795: GO 20767
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
20797: LD_VAR 0 4
20801: PUSH
20802: LD_INT 1
20804: ARRAY
20805: PPUSH
20806: LD_VAR 0 4
20810: PUSH
20811: LD_INT 2
20813: ARRAY
20814: PPUSH
20815: CALL_OW 428
20819: PUSH
20820: LD_VAR 0 5
20824: IN
20825: IFFALSE 20854
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
20827: LD_VAR 0 4
20831: PUSH
20832: LD_INT 1
20834: ARRAY
20835: PPUSH
20836: LD_VAR 0 4
20840: PUSH
20841: LD_INT 2
20843: ARRAY
20844: PPUSH
20845: LD_VAR 0 1
20849: PPUSH
20850: CALL_OW 456
// end ;
20854: GO 20767
20856: POP
20857: POP
// end ;
20858: LD_VAR 0 3
20862: RET
// export function Count ( array ) ; var i ; begin
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
// result := 0 ;
20867: LD_ADDR_VAR 0 2
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// for i in array do
20875: LD_ADDR_VAR 0 3
20879: PUSH
20880: LD_VAR 0 1
20884: PUSH
20885: FOR_IN
20886: IFFALSE 20910
// if i then
20888: LD_VAR 0 3
20892: IFFALSE 20908
// result := result + 1 ;
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_VAR 0 2
20903: PUSH
20904: LD_INT 1
20906: PLUS
20907: ST_TO_ADDR
20908: GO 20885
20910: POP
20911: POP
// end ;
20912: LD_VAR 0 2
20916: RET
// export function IsEmpty ( building ) ; begin
20917: LD_INT 0
20919: PPUSH
// if not building then
20920: LD_VAR 0 1
20924: NOT
20925: IFFALSE 20929
// exit ;
20927: GO 20972
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
20929: LD_ADDR_VAR 0 2
20933: PUSH
20934: LD_VAR 0 1
20938: PUSH
20939: LD_INT 22
20941: PUSH
20942: LD_VAR 0 1
20946: PPUSH
20947: CALL_OW 255
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 58
20958: PUSH
20959: EMPTY
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PPUSH
20966: CALL_OW 69
20970: IN
20971: ST_TO_ADDR
// end ;
20972: LD_VAR 0 2
20976: RET
// export function IsNotFull ( building ) ; begin
20977: LD_INT 0
20979: PPUSH
// if not building then
20980: LD_VAR 0 1
20984: NOT
20985: IFFALSE 20989
// exit ;
20987: GO 21008
// result := UnitsInside ( building ) < 6 ;
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL_OW 313
21003: PUSH
21004: LD_INT 6
21006: LESS
21007: ST_TO_ADDR
// end ;
21008: LD_VAR 0 2
21012: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21013: LD_INT 0
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
// tmp := [ ] ;
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: EMPTY
21025: ST_TO_ADDR
// list := [ ] ;
21026: LD_ADDR_VAR 0 5
21030: PUSH
21031: EMPTY
21032: ST_TO_ADDR
// for i = 16 to 25 do
21033: LD_ADDR_VAR 0 4
21037: PUSH
21038: DOUBLE
21039: LD_INT 16
21041: DEC
21042: ST_TO_ADDR
21043: LD_INT 25
21045: PUSH
21046: FOR_TO
21047: IFFALSE 21120
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21049: LD_ADDR_VAR 0 3
21053: PUSH
21054: LD_VAR 0 3
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 255
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 91
21078: PUSH
21079: LD_VAR 0 1
21083: PUSH
21084: LD_INT 6
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 30
21094: PUSH
21095: LD_VAR 0 4
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: PPUSH
21112: CALL_OW 69
21116: ADD
21117: ST_TO_ADDR
21118: GO 21046
21120: POP
21121: POP
// for i = 1 to tmp do
21122: LD_ADDR_VAR 0 4
21126: PUSH
21127: DOUBLE
21128: LD_INT 1
21130: DEC
21131: ST_TO_ADDR
21132: LD_VAR 0 3
21136: PUSH
21137: FOR_TO
21138: IFFALSE 21226
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21140: LD_ADDR_VAR 0 5
21144: PUSH
21145: LD_VAR 0 5
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_VAR 0 4
21159: ARRAY
21160: PPUSH
21161: CALL_OW 266
21165: PUSH
21166: LD_VAR 0 3
21170: PUSH
21171: LD_VAR 0 4
21175: ARRAY
21176: PPUSH
21177: CALL_OW 250
21181: PUSH
21182: LD_VAR 0 3
21186: PUSH
21187: LD_VAR 0 4
21191: ARRAY
21192: PPUSH
21193: CALL_OW 251
21197: PUSH
21198: LD_VAR 0 3
21202: PUSH
21203: LD_VAR 0 4
21207: ARRAY
21208: PPUSH
21209: CALL_OW 254
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: ADD
21223: ST_TO_ADDR
21224: GO 21137
21226: POP
21227: POP
// result := list ;
21228: LD_ADDR_VAR 0 2
21232: PUSH
21233: LD_VAR 0 5
21237: ST_TO_ADDR
// end ;
21238: LD_VAR 0 2
21242: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21243: LD_INT 0
21245: PPUSH
21246: PPUSH
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if not factory then
21252: LD_VAR 0 1
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21854
// if control = control_apeman then
21261: LD_VAR 0 4
21265: PUSH
21266: LD_INT 5
21268: EQUAL
21269: IFFALSE 21378
// begin tmp := UnitsInside ( factory ) ;
21271: LD_ADDR_VAR 0 8
21275: PUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL_OW 313
21285: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21286: LD_VAR 0 8
21290: PPUSH
21291: LD_INT 25
21293: PUSH
21294: LD_INT 12
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PPUSH
21301: CALL_OW 72
21305: NOT
21306: IFFALSE 21316
// control := control_manual ;
21308: LD_ADDR_VAR 0 4
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21316: LD_ADDR_VAR 0 8
21320: PUSH
21321: LD_VAR 0 1
21325: PPUSH
21326: CALL 21013 0 1
21330: ST_TO_ADDR
// if tmp then
21331: LD_VAR 0 8
21335: IFFALSE 21378
// begin for i in tmp do
21337: LD_ADDR_VAR 0 7
21341: PUSH
21342: LD_VAR 0 8
21346: PUSH
21347: FOR_IN
21348: IFFALSE 21376
// if i [ 1 ] = b_ext_radio then
21350: LD_VAR 0 7
21354: PUSH
21355: LD_INT 1
21357: ARRAY
21358: PUSH
21359: LD_INT 22
21361: EQUAL
21362: IFFALSE 21374
// begin control := control_remote ;
21364: LD_ADDR_VAR 0 4
21368: PUSH
21369: LD_INT 2
21371: ST_TO_ADDR
// break ;
21372: GO 21376
// end ;
21374: GO 21347
21376: POP
21377: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21378: LD_VAR 0 1
21382: PPUSH
21383: LD_VAR 0 2
21387: PPUSH
21388: LD_VAR 0 3
21392: PPUSH
21393: LD_VAR 0 4
21397: PPUSH
21398: LD_VAR 0 5
21402: PPUSH
21403: CALL_OW 448
21407: IFFALSE 21442
// begin result := [ chassis , engine , control , weapon ] ;
21409: LD_ADDR_VAR 0 6
21413: PUSH
21414: LD_VAR 0 2
21418: PUSH
21419: LD_VAR 0 3
21423: PUSH
21424: LD_VAR 0 4
21428: PUSH
21429: LD_VAR 0 5
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: ST_TO_ADDR
// exit ;
21440: GO 21854
// end ; _chassis := AvailableChassisList ( factory ) ;
21442: LD_ADDR_VAR 0 9
21446: PUSH
21447: LD_VAR 0 1
21451: PPUSH
21452: CALL_OW 475
21456: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21457: LD_ADDR_VAR 0 11
21461: PUSH
21462: LD_VAR 0 1
21466: PPUSH
21467: CALL_OW 476
21471: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21472: LD_ADDR_VAR 0 12
21476: PUSH
21477: LD_VAR 0 1
21481: PPUSH
21482: CALL_OW 477
21486: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21487: LD_ADDR_VAR 0 10
21491: PUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 478
21501: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21502: LD_VAR 0 9
21506: NOT
21507: PUSH
21508: LD_VAR 0 11
21512: NOT
21513: OR
21514: PUSH
21515: LD_VAR 0 12
21519: NOT
21520: OR
21521: PUSH
21522: LD_VAR 0 10
21526: NOT
21527: OR
21528: IFFALSE 21563
// begin result := [ chassis , engine , control , weapon ] ;
21530: LD_ADDR_VAR 0 6
21534: PUSH
21535: LD_VAR 0 2
21539: PUSH
21540: LD_VAR 0 3
21544: PUSH
21545: LD_VAR 0 4
21549: PUSH
21550: LD_VAR 0 5
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: ST_TO_ADDR
// exit ;
21561: GO 21854
// end ; if not chassis in _chassis then
21563: LD_VAR 0 2
21567: PUSH
21568: LD_VAR 0 9
21572: IN
21573: NOT
21574: IFFALSE 21600
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_VAR 0 9
21585: PUSH
21586: LD_INT 1
21588: PPUSH
21589: LD_VAR 0 9
21593: PPUSH
21594: CALL_OW 12
21598: ARRAY
21599: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
21600: LD_VAR 0 2
21604: PPUSH
21605: LD_VAR 0 3
21609: PPUSH
21610: CALL 21859 0 2
21614: NOT
21615: IFFALSE 21674
// repeat engine := _engine [ 1 ] ;
21617: LD_ADDR_VAR 0 3
21621: PUSH
21622: LD_VAR 0 11
21626: PUSH
21627: LD_INT 1
21629: ARRAY
21630: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
21631: LD_ADDR_VAR 0 11
21635: PUSH
21636: LD_VAR 0 11
21640: PPUSH
21641: LD_INT 1
21643: PPUSH
21644: CALL_OW 3
21648: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
21649: LD_VAR 0 2
21653: PPUSH
21654: LD_VAR 0 3
21658: PPUSH
21659: CALL 21859 0 2
21663: PUSH
21664: LD_VAR 0 11
21668: PUSH
21669: EMPTY
21670: EQUAL
21671: OR
21672: IFFALSE 21617
// if not control in _control then
21674: LD_VAR 0 4
21678: PUSH
21679: LD_VAR 0 12
21683: IN
21684: NOT
21685: IFFALSE 21711
// control := _control [ rand ( 1 , _control ) ] ;
21687: LD_ADDR_VAR 0 4
21691: PUSH
21692: LD_VAR 0 12
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_VAR 0 12
21704: PPUSH
21705: CALL_OW 12
21709: ARRAY
21710: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
21711: LD_VAR 0 2
21715: PPUSH
21716: LD_VAR 0 5
21720: PPUSH
21721: CALL 22079 0 2
21725: NOT
21726: IFFALSE 21785
// repeat weapon := _weapon [ 1 ] ;
21728: LD_ADDR_VAR 0 5
21732: PUSH
21733: LD_VAR 0 10
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
21742: LD_ADDR_VAR 0 10
21746: PUSH
21747: LD_VAR 0 10
21751: PPUSH
21752: LD_INT 1
21754: PPUSH
21755: CALL_OW 3
21759: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
21760: LD_VAR 0 2
21764: PPUSH
21765: LD_VAR 0 5
21769: PPUSH
21770: CALL 22079 0 2
21774: PUSH
21775: LD_VAR 0 10
21779: PUSH
21780: EMPTY
21781: EQUAL
21782: OR
21783: IFFALSE 21728
// result := [ ] ;
21785: LD_ADDR_VAR 0 6
21789: PUSH
21790: EMPTY
21791: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 2
21801: PPUSH
21802: LD_VAR 0 3
21806: PPUSH
21807: LD_VAR 0 4
21811: PPUSH
21812: LD_VAR 0 5
21816: PPUSH
21817: CALL_OW 448
21821: IFFALSE 21854
// result := [ chassis , engine , control , weapon ] ;
21823: LD_ADDR_VAR 0 6
21827: PUSH
21828: LD_VAR 0 2
21832: PUSH
21833: LD_VAR 0 3
21837: PUSH
21838: LD_VAR 0 4
21842: PUSH
21843: LD_VAR 0 5
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: ST_TO_ADDR
// end ;
21854: LD_VAR 0 6
21858: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
21859: LD_INT 0
21861: PPUSH
// if not chassis or not engine then
21862: LD_VAR 0 1
21866: NOT
21867: PUSH
21868: LD_VAR 0 2
21872: NOT
21873: OR
21874: IFFALSE 21878
// exit ;
21876: GO 22074
// case engine of engine_solar :
21878: LD_VAR 0 2
21882: PUSH
21883: LD_INT 2
21885: DOUBLE
21886: EQUAL
21887: IFTRUE 21891
21889: GO 21929
21891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
21892: LD_ADDR_VAR 0 3
21896: PUSH
21897: LD_INT 11
21899: PUSH
21900: LD_INT 12
21902: PUSH
21903: LD_INT 13
21905: PUSH
21906: LD_INT 14
21908: PUSH
21909: LD_INT 1
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
21927: GO 22058
21929: LD_INT 1
21931: DOUBLE
21932: EQUAL
21933: IFTRUE 21937
21935: GO 21999
21937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
21938: LD_ADDR_VAR 0 3
21942: PUSH
21943: LD_INT 11
21945: PUSH
21946: LD_INT 12
21948: PUSH
21949: LD_INT 13
21951: PUSH
21952: LD_INT 14
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 5
21969: PUSH
21970: LD_INT 21
21972: PUSH
21973: LD_INT 23
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 24
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: ST_TO_ADDR
21997: GO 22058
21999: LD_INT 3
22001: DOUBLE
22002: EQUAL
22003: IFTRUE 22007
22005: GO 22057
22007: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: LD_INT 13
22015: PUSH
22016: LD_INT 14
22018: PUSH
22019: LD_INT 2
22021: PUSH
22022: LD_INT 3
22024: PUSH
22025: LD_INT 4
22027: PUSH
22028: LD_INT 5
22030: PUSH
22031: LD_INT 21
22033: PUSH
22034: LD_INT 22
22036: PUSH
22037: LD_INT 23
22039: PUSH
22040: LD_INT 24
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: ST_TO_ADDR
22055: GO 22058
22057: POP
// result := ( chassis in result ) ;
22058: LD_ADDR_VAR 0 3
22062: PUSH
22063: LD_VAR 0 1
22067: PUSH
22068: LD_VAR 0 3
22072: IN
22073: ST_TO_ADDR
// end ;
22074: LD_VAR 0 3
22078: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22079: LD_INT 0
22081: PPUSH
// if not chassis or not weapon then
22082: LD_VAR 0 1
22086: NOT
22087: PUSH
22088: LD_VAR 0 2
22092: NOT
22093: OR
22094: IFFALSE 22098
// exit ;
22096: GO 23124
// case weapon of us_machine_gun :
22098: LD_VAR 0 2
22102: PUSH
22103: LD_INT 2
22105: DOUBLE
22106: EQUAL
22107: IFTRUE 22111
22109: GO 22141
22111: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22112: LD_ADDR_VAR 0 3
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 3
22125: PUSH
22126: LD_INT 4
22128: PUSH
22129: LD_INT 5
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: ST_TO_ADDR
22139: GO 23108
22141: LD_INT 3
22143: DOUBLE
22144: EQUAL
22145: IFTRUE 22149
22147: GO 22179
22149: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: LD_INT 4
22166: PUSH
22167: LD_INT 5
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: ST_TO_ADDR
22177: GO 23108
22179: LD_INT 11
22181: DOUBLE
22182: EQUAL
22183: IFTRUE 22187
22185: GO 22217
22187: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 3
22201: PUSH
22202: LD_INT 4
22204: PUSH
22205: LD_INT 5
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: ST_TO_ADDR
22215: GO 23108
22217: LD_INT 4
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22251
22225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22226: LD_ADDR_VAR 0 3
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 3
22236: PUSH
22237: LD_INT 4
22239: PUSH
22240: LD_INT 5
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: ST_TO_ADDR
22249: GO 23108
22251: LD_INT 5
22253: DOUBLE
22254: EQUAL
22255: IFTRUE 22259
22257: GO 22285
22259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22260: LD_ADDR_VAR 0 3
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 4
22273: PUSH
22274: LD_INT 5
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: ST_TO_ADDR
22283: GO 23108
22285: LD_INT 9
22287: DOUBLE
22288: EQUAL
22289: IFTRUE 22293
22291: GO 22319
22293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22294: LD_ADDR_VAR 0 3
22298: PUSH
22299: LD_INT 2
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: LD_INT 4
22307: PUSH
22308: LD_INT 5
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: ST_TO_ADDR
22317: GO 23108
22319: LD_INT 7
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22353
22327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22328: LD_ADDR_VAR 0 3
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: LD_INT 4
22341: PUSH
22342: LD_INT 5
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: ST_TO_ADDR
22351: GO 23108
22353: LD_INT 12
22355: DOUBLE
22356: EQUAL
22357: IFTRUE 22361
22359: GO 22387
22361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22362: LD_ADDR_VAR 0 3
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: LD_INT 4
22375: PUSH
22376: LD_INT 5
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
22385: GO 23108
22387: LD_INT 13
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 22421
22395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: LD_INT 3
22406: PUSH
22407: LD_INT 4
22409: PUSH
22410: LD_INT 5
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: ST_TO_ADDR
22419: GO 23108
22421: LD_INT 14
22423: DOUBLE
22424: EQUAL
22425: IFTRUE 22429
22427: GO 22447
22429: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22430: LD_ADDR_VAR 0 3
22434: PUSH
22435: LD_INT 4
22437: PUSH
22438: LD_INT 5
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: ST_TO_ADDR
22445: GO 23108
22447: LD_INT 6
22449: DOUBLE
22450: EQUAL
22451: IFTRUE 22455
22453: GO 22473
22455: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22456: LD_ADDR_VAR 0 3
22460: PUSH
22461: LD_INT 4
22463: PUSH
22464: LD_INT 5
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: ST_TO_ADDR
22471: GO 23108
22473: LD_INT 10
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22499
22481: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_INT 4
22489: PUSH
22490: LD_INT 5
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: ST_TO_ADDR
22497: GO 23108
22499: LD_INT 22
22501: DOUBLE
22502: EQUAL
22503: IFTRUE 22507
22505: GO 22533
22507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22508: LD_ADDR_VAR 0 3
22512: PUSH
22513: LD_INT 11
22515: PUSH
22516: LD_INT 12
22518: PUSH
22519: LD_INT 13
22521: PUSH
22522: LD_INT 14
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 23108
22533: LD_INT 23
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22567
22541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_INT 11
22549: PUSH
22550: LD_INT 12
22552: PUSH
22553: LD_INT 13
22555: PUSH
22556: LD_INT 14
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
22565: GO 23108
22567: LD_INT 24
22569: DOUBLE
22570: EQUAL
22571: IFTRUE 22575
22573: GO 22601
22575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
22576: LD_ADDR_VAR 0 3
22580: PUSH
22581: LD_INT 11
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: LD_INT 13
22589: PUSH
22590: LD_INT 14
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: ST_TO_ADDR
22599: GO 23108
22601: LD_INT 30
22603: DOUBLE
22604: EQUAL
22605: IFTRUE 22609
22607: GO 22635
22609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
22610: LD_ADDR_VAR 0 3
22614: PUSH
22615: LD_INT 11
22617: PUSH
22618: LD_INT 12
22620: PUSH
22621: LD_INT 13
22623: PUSH
22624: LD_INT 14
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
22633: GO 23108
22635: LD_INT 25
22637: DOUBLE
22638: EQUAL
22639: IFTRUE 22643
22641: GO 22661
22643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
22644: LD_ADDR_VAR 0 3
22648: PUSH
22649: LD_INT 13
22651: PUSH
22652: LD_INT 14
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: ST_TO_ADDR
22659: GO 23108
22661: LD_INT 27
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22687
22669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
22670: LD_ADDR_VAR 0 3
22674: PUSH
22675: LD_INT 13
22677: PUSH
22678: LD_INT 14
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: ST_TO_ADDR
22685: GO 23108
22687: LD_INT 28
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22713
22695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
22696: LD_ADDR_VAR 0 3
22700: PUSH
22701: LD_INT 13
22703: PUSH
22704: LD_INT 14
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: ST_TO_ADDR
22711: GO 23108
22713: LD_INT 29
22715: DOUBLE
22716: EQUAL
22717: IFTRUE 22721
22719: GO 22739
22721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_INT 13
22729: PUSH
22730: LD_INT 14
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: ST_TO_ADDR
22737: GO 23108
22739: LD_INT 31
22741: DOUBLE
22742: EQUAL
22743: IFTRUE 22747
22745: GO 22765
22747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
22748: LD_ADDR_VAR 0 3
22752: PUSH
22753: LD_INT 13
22755: PUSH
22756: LD_INT 14
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 23108
22765: LD_INT 26
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22791
22773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
22774: LD_ADDR_VAR 0 3
22778: PUSH
22779: LD_INT 13
22781: PUSH
22782: LD_INT 14
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: ST_TO_ADDR
22789: GO 23108
22791: LD_INT 42
22793: DOUBLE
22794: EQUAL
22795: IFTRUE 22799
22797: GO 22825
22799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
22800: LD_ADDR_VAR 0 3
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 24
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: ST_TO_ADDR
22823: GO 23108
22825: LD_INT 43
22827: DOUBLE
22828: EQUAL
22829: IFTRUE 22833
22831: GO 22859
22833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
22834: LD_ADDR_VAR 0 3
22838: PUSH
22839: LD_INT 21
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_INT 23
22847: PUSH
22848: LD_INT 24
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: ST_TO_ADDR
22857: GO 23108
22859: LD_INT 44
22861: DOUBLE
22862: EQUAL
22863: IFTRUE 22867
22865: GO 22893
22867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
22868: LD_ADDR_VAR 0 3
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 24
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: ST_TO_ADDR
22891: GO 23108
22893: LD_INT 45
22895: DOUBLE
22896: EQUAL
22897: IFTRUE 22901
22899: GO 22927
22901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
22902: LD_ADDR_VAR 0 3
22906: PUSH
22907: LD_INT 21
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_INT 23
22915: PUSH
22916: LD_INT 24
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: ST_TO_ADDR
22925: GO 23108
22927: LD_INT 49
22929: DOUBLE
22930: EQUAL
22931: IFTRUE 22935
22933: GO 22961
22935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
22936: LD_ADDR_VAR 0 3
22940: PUSH
22941: LD_INT 21
22943: PUSH
22944: LD_INT 22
22946: PUSH
22947: LD_INT 23
22949: PUSH
22950: LD_INT 24
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: ST_TO_ADDR
22959: GO 23108
22961: LD_INT 51
22963: DOUBLE
22964: EQUAL
22965: IFTRUE 22969
22967: GO 22995
22969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22970: LD_ADDR_VAR 0 3
22974: PUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 22
22980: PUSH
22981: LD_INT 23
22983: PUSH
22984: LD_INT 24
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
22993: GO 23108
22995: LD_INT 52
22997: DOUBLE
22998: EQUAL
22999: IFTRUE 23003
23001: GO 23029
23003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_INT 21
23011: PUSH
23012: LD_INT 22
23014: PUSH
23015: LD_INT 23
23017: PUSH
23018: LD_INT 24
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
23027: GO 23108
23029: LD_INT 53
23031: DOUBLE
23032: EQUAL
23033: IFTRUE 23037
23035: GO 23055
23037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23038: LD_ADDR_VAR 0 3
23042: PUSH
23043: LD_INT 23
23045: PUSH
23046: LD_INT 24
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: ST_TO_ADDR
23053: GO 23108
23055: LD_INT 46
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23081
23063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23064: LD_ADDR_VAR 0 3
23068: PUSH
23069: LD_INT 23
23071: PUSH
23072: LD_INT 24
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: ST_TO_ADDR
23079: GO 23108
23081: LD_INT 47
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23107
23089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: LD_INT 23
23097: PUSH
23098: LD_INT 24
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: ST_TO_ADDR
23105: GO 23108
23107: POP
// result := ( chassis in result ) ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_VAR 0 1
23117: PUSH
23118: LD_VAR 0 3
23122: IN
23123: ST_TO_ADDR
// end ;
23124: LD_VAR 0 3
23128: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23129: LD_INT 0
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
23135: PPUSH
23136: PPUSH
23137: PPUSH
// result := array ;
23138: LD_ADDR_VAR 0 5
23142: PUSH
23143: LD_VAR 0 1
23147: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23148: LD_VAR 0 1
23152: NOT
23153: PUSH
23154: LD_VAR 0 2
23158: NOT
23159: OR
23160: PUSH
23161: LD_VAR 0 3
23165: NOT
23166: OR
23167: PUSH
23168: LD_VAR 0 2
23172: PUSH
23173: LD_VAR 0 1
23177: GREATER
23178: OR
23179: PUSH
23180: LD_VAR 0 3
23184: PUSH
23185: LD_VAR 0 1
23189: GREATER
23190: OR
23191: IFFALSE 23195
// exit ;
23193: GO 23491
// if direction then
23195: LD_VAR 0 4
23199: IFFALSE 23263
// begin d := 1 ;
23201: LD_ADDR_VAR 0 9
23205: PUSH
23206: LD_INT 1
23208: ST_TO_ADDR
// if i_from > i_to then
23209: LD_VAR 0 2
23213: PUSH
23214: LD_VAR 0 3
23218: GREATER
23219: IFFALSE 23245
// length := ( array - i_from ) + i_to else
23221: LD_ADDR_VAR 0 11
23225: PUSH
23226: LD_VAR 0 1
23230: PUSH
23231: LD_VAR 0 2
23235: MINUS
23236: PUSH
23237: LD_VAR 0 3
23241: PLUS
23242: ST_TO_ADDR
23243: GO 23261
// length := i_to - i_from ;
23245: LD_ADDR_VAR 0 11
23249: PUSH
23250: LD_VAR 0 3
23254: PUSH
23255: LD_VAR 0 2
23259: MINUS
23260: ST_TO_ADDR
// end else
23261: GO 23324
// begin d := - 1 ;
23263: LD_ADDR_VAR 0 9
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: ST_TO_ADDR
// if i_from > i_to then
23272: LD_VAR 0 2
23276: PUSH
23277: LD_VAR 0 3
23281: GREATER
23282: IFFALSE 23302
// length := i_from - i_to else
23284: LD_ADDR_VAR 0 11
23288: PUSH
23289: LD_VAR 0 2
23293: PUSH
23294: LD_VAR 0 3
23298: MINUS
23299: ST_TO_ADDR
23300: GO 23324
// length := ( array - i_to ) + i_from ;
23302: LD_ADDR_VAR 0 11
23306: PUSH
23307: LD_VAR 0 1
23311: PUSH
23312: LD_VAR 0 3
23316: MINUS
23317: PUSH
23318: LD_VAR 0 2
23322: PLUS
23323: ST_TO_ADDR
// end ; if not length then
23324: LD_VAR 0 11
23328: NOT
23329: IFFALSE 23333
// exit ;
23331: GO 23491
// tmp := array ;
23333: LD_ADDR_VAR 0 10
23337: PUSH
23338: LD_VAR 0 1
23342: ST_TO_ADDR
// for i = 1 to length do
23343: LD_ADDR_VAR 0 6
23347: PUSH
23348: DOUBLE
23349: LD_INT 1
23351: DEC
23352: ST_TO_ADDR
23353: LD_VAR 0 11
23357: PUSH
23358: FOR_TO
23359: IFFALSE 23479
// begin for j = 1 to array do
23361: LD_ADDR_VAR 0 7
23365: PUSH
23366: DOUBLE
23367: LD_INT 1
23369: DEC
23370: ST_TO_ADDR
23371: LD_VAR 0 1
23375: PUSH
23376: FOR_TO
23377: IFFALSE 23465
// begin k := j + d ;
23379: LD_ADDR_VAR 0 8
23383: PUSH
23384: LD_VAR 0 7
23388: PUSH
23389: LD_VAR 0 9
23393: PLUS
23394: ST_TO_ADDR
// if k > array then
23395: LD_VAR 0 8
23399: PUSH
23400: LD_VAR 0 1
23404: GREATER
23405: IFFALSE 23415
// k := 1 ;
23407: LD_ADDR_VAR 0 8
23411: PUSH
23412: LD_INT 1
23414: ST_TO_ADDR
// if not k then
23415: LD_VAR 0 8
23419: NOT
23420: IFFALSE 23432
// k := array ;
23422: LD_ADDR_VAR 0 8
23426: PUSH
23427: LD_VAR 0 1
23431: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23432: LD_ADDR_VAR 0 10
23436: PUSH
23437: LD_VAR 0 10
23441: PPUSH
23442: LD_VAR 0 8
23446: PPUSH
23447: LD_VAR 0 1
23451: PUSH
23452: LD_VAR 0 7
23456: ARRAY
23457: PPUSH
23458: CALL_OW 1
23462: ST_TO_ADDR
// end ;
23463: GO 23376
23465: POP
23466: POP
// array := tmp ;
23467: LD_ADDR_VAR 0 1
23471: PUSH
23472: LD_VAR 0 10
23476: ST_TO_ADDR
// end ;
23477: GO 23358
23479: POP
23480: POP
// result := array ;
23481: LD_ADDR_VAR 0 5
23485: PUSH
23486: LD_VAR 0 1
23490: ST_TO_ADDR
// end ;
23491: LD_VAR 0 5
23495: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23496: LD_INT 0
23498: PPUSH
23499: PPUSH
// result := 0 ;
23500: LD_ADDR_VAR 0 3
23504: PUSH
23505: LD_INT 0
23507: ST_TO_ADDR
// if not array or not value in array then
23508: LD_VAR 0 1
23512: NOT
23513: PUSH
23514: LD_VAR 0 2
23518: PUSH
23519: LD_VAR 0 1
23523: IN
23524: NOT
23525: OR
23526: IFFALSE 23530
// exit ;
23528: GO 23584
// for i = 1 to array do
23530: LD_ADDR_VAR 0 4
23534: PUSH
23535: DOUBLE
23536: LD_INT 1
23538: DEC
23539: ST_TO_ADDR
23540: LD_VAR 0 1
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23582
// if value = array [ i ] then
23548: LD_VAR 0 2
23552: PUSH
23553: LD_VAR 0 1
23557: PUSH
23558: LD_VAR 0 4
23562: ARRAY
23563: EQUAL
23564: IFFALSE 23580
// begin result := i ;
23566: LD_ADDR_VAR 0 3
23570: PUSH
23571: LD_VAR 0 4
23575: ST_TO_ADDR
// exit ;
23576: POP
23577: POP
23578: GO 23584
// end ;
23580: GO 23545
23582: POP
23583: POP
// end ;
23584: LD_VAR 0 3
23588: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
23589: LD_INT 0
23591: PPUSH
// vc_chassis := chassis ;
23592: LD_ADDR_OWVAR 37
23596: PUSH
23597: LD_VAR 0 1
23601: ST_TO_ADDR
// vc_engine := engine ;
23602: LD_ADDR_OWVAR 39
23606: PUSH
23607: LD_VAR 0 2
23611: ST_TO_ADDR
// vc_control := control ;
23612: LD_ADDR_OWVAR 38
23616: PUSH
23617: LD_VAR 0 3
23621: ST_TO_ADDR
// vc_weapon := weapon ;
23622: LD_ADDR_OWVAR 40
23626: PUSH
23627: LD_VAR 0 4
23631: ST_TO_ADDR
// vc_fuel_battery := fuel ;
23632: LD_ADDR_OWVAR 41
23636: PUSH
23637: LD_VAR 0 5
23641: ST_TO_ADDR
// end ;
23642: LD_VAR 0 6
23646: RET
// export function WantPlant ( unit ) ; var task ; begin
23647: LD_INT 0
23649: PPUSH
23650: PPUSH
// result := false ;
23651: LD_ADDR_VAR 0 2
23655: PUSH
23656: LD_INT 0
23658: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
23659: LD_ADDR_VAR 0 3
23663: PUSH
23664: LD_VAR 0 1
23668: PPUSH
23669: CALL_OW 437
23673: ST_TO_ADDR
// if task then
23674: LD_VAR 0 3
23678: IFFALSE 23706
// if task [ 1 ] [ 1 ] = p then
23680: LD_VAR 0 3
23684: PUSH
23685: LD_INT 1
23687: ARRAY
23688: PUSH
23689: LD_INT 1
23691: ARRAY
23692: PUSH
23693: LD_STRING p
23695: EQUAL
23696: IFFALSE 23706
// result := true ;
23698: LD_ADDR_VAR 0 2
23702: PUSH
23703: LD_INT 1
23705: ST_TO_ADDR
// end ;
23706: LD_VAR 0 2
23710: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
23711: LD_INT 0
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
// if pos < 1 then
23717: LD_VAR 0 2
23721: PUSH
23722: LD_INT 1
23724: LESS
23725: IFFALSE 23729
// exit ;
23727: GO 24032
// if pos = 1 then
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 1
23736: EQUAL
23737: IFFALSE 23770
// result := Replace ( arr , pos [ 1 ] , value ) else
23739: LD_ADDR_VAR 0 4
23743: PUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_VAR 0 2
23753: PUSH
23754: LD_INT 1
23756: ARRAY
23757: PPUSH
23758: LD_VAR 0 3
23762: PPUSH
23763: CALL_OW 1
23767: ST_TO_ADDR
23768: GO 24032
// begin tmp := arr ;
23770: LD_ADDR_VAR 0 6
23774: PUSH
23775: LD_VAR 0 1
23779: ST_TO_ADDR
// s_arr := [ tmp ] ;
23780: LD_ADDR_VAR 0 7
23784: PUSH
23785: LD_VAR 0 6
23789: PUSH
23790: EMPTY
23791: LIST
23792: ST_TO_ADDR
// for i = 1 to pos - 1 do
23793: LD_ADDR_VAR 0 5
23797: PUSH
23798: DOUBLE
23799: LD_INT 1
23801: DEC
23802: ST_TO_ADDR
23803: LD_VAR 0 2
23807: PUSH
23808: LD_INT 1
23810: MINUS
23811: PUSH
23812: FOR_TO
23813: IFFALSE 23858
// begin tmp := tmp [ pos [ i ] ] ;
23815: LD_ADDR_VAR 0 6
23819: PUSH
23820: LD_VAR 0 6
23824: PUSH
23825: LD_VAR 0 2
23829: PUSH
23830: LD_VAR 0 5
23834: ARRAY
23835: ARRAY
23836: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
23837: LD_ADDR_VAR 0 7
23841: PUSH
23842: LD_VAR 0 7
23846: PUSH
23847: LD_VAR 0 6
23851: PUSH
23852: EMPTY
23853: LIST
23854: ADD
23855: ST_TO_ADDR
// end ;
23856: GO 23812
23858: POP
23859: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
23860: LD_ADDR_VAR 0 6
23864: PUSH
23865: LD_VAR 0 6
23869: PPUSH
23870: LD_VAR 0 2
23874: PUSH
23875: LD_VAR 0 2
23879: ARRAY
23880: PPUSH
23881: LD_VAR 0 3
23885: PPUSH
23886: CALL_OW 1
23890: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
23891: LD_ADDR_VAR 0 7
23895: PUSH
23896: LD_VAR 0 7
23900: PPUSH
23901: LD_VAR 0 7
23905: PPUSH
23906: LD_VAR 0 6
23910: PPUSH
23911: CALL_OW 1
23915: ST_TO_ADDR
// for i = s_arr downto 2 do
23916: LD_ADDR_VAR 0 5
23920: PUSH
23921: DOUBLE
23922: LD_VAR 0 7
23926: INC
23927: ST_TO_ADDR
23928: LD_INT 2
23930: PUSH
23931: FOR_DOWNTO
23932: IFFALSE 24016
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23934: LD_ADDR_VAR 0 6
23938: PUSH
23939: LD_VAR 0 7
23943: PUSH
23944: LD_VAR 0 5
23948: PUSH
23949: LD_INT 1
23951: MINUS
23952: ARRAY
23953: PPUSH
23954: LD_VAR 0 2
23958: PUSH
23959: LD_VAR 0 5
23963: PUSH
23964: LD_INT 1
23966: MINUS
23967: ARRAY
23968: PPUSH
23969: LD_VAR 0 7
23973: PUSH
23974: LD_VAR 0 5
23978: ARRAY
23979: PPUSH
23980: CALL_OW 1
23984: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23985: LD_ADDR_VAR 0 7
23989: PUSH
23990: LD_VAR 0 7
23994: PPUSH
23995: LD_VAR 0 5
23999: PUSH
24000: LD_INT 1
24002: MINUS
24003: PPUSH
24004: LD_VAR 0 6
24008: PPUSH
24009: CALL_OW 1
24013: ST_TO_ADDR
// end ;
24014: GO 23931
24016: POP
24017: POP
// result := s_arr [ 1 ] ;
24018: LD_ADDR_VAR 0 4
24022: PUSH
24023: LD_VAR 0 7
24027: PUSH
24028: LD_INT 1
24030: ARRAY
24031: ST_TO_ADDR
// end ; end ;
24032: LD_VAR 0 4
24036: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
// if not list then
24041: LD_VAR 0 1
24045: NOT
24046: IFFALSE 24050
// exit ;
24048: GO 24141
// i := list [ pos1 ] ;
24050: LD_ADDR_VAR 0 5
24054: PUSH
24055: LD_VAR 0 1
24059: PUSH
24060: LD_VAR 0 2
24064: ARRAY
24065: ST_TO_ADDR
// if not i then
24066: LD_VAR 0 5
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24141
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: LD_VAR 0 2
24089: PPUSH
24090: LD_VAR 0 1
24094: PUSH
24095: LD_VAR 0 3
24099: ARRAY
24100: PPUSH
24101: CALL_OW 1
24105: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24106: LD_ADDR_VAR 0 1
24110: PUSH
24111: LD_VAR 0 1
24115: PPUSH
24116: LD_VAR 0 3
24120: PPUSH
24121: LD_VAR 0 5
24125: PPUSH
24126: CALL_OW 1
24130: ST_TO_ADDR
// result := list ;
24131: LD_ADDR_VAR 0 4
24135: PUSH
24136: LD_VAR 0 1
24140: ST_TO_ADDR
// end ;
24141: LD_VAR 0 4
24145: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24146: LD_INT 0
24148: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24149: LD_ADDR_VAR 0 5
24153: PUSH
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 250
24163: PPUSH
24164: LD_VAR 0 1
24168: PPUSH
24169: CALL_OW 251
24173: PPUSH
24174: LD_VAR 0 2
24178: PPUSH
24179: LD_VAR 0 3
24183: PPUSH
24184: LD_VAR 0 4
24188: PPUSH
24189: CALL 24199 0 5
24193: ST_TO_ADDR
// end ;
24194: LD_VAR 0 5
24198: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24199: LD_INT 0
24201: PPUSH
24202: PPUSH
24203: PPUSH
24204: PPUSH
// if not list then
24205: LD_VAR 0 3
24209: NOT
24210: IFFALSE 24214
// exit ;
24212: GO 24602
// result := [ ] ;
24214: LD_ADDR_VAR 0 6
24218: PUSH
24219: EMPTY
24220: ST_TO_ADDR
// for i in list do
24221: LD_ADDR_VAR 0 7
24225: PUSH
24226: LD_VAR 0 3
24230: PUSH
24231: FOR_IN
24232: IFFALSE 24434
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24234: LD_ADDR_VAR 0 9
24238: PUSH
24239: LD_VAR 0 7
24243: PPUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: LD_VAR 0 2
24253: PPUSH
24254: CALL_OW 297
24258: ST_TO_ADDR
// if not result then
24259: LD_VAR 0 6
24263: NOT
24264: IFFALSE 24290
// result := [ [ i , tmp ] ] else
24266: LD_ADDR_VAR 0 6
24270: PUSH
24271: LD_VAR 0 7
24275: PUSH
24276: LD_VAR 0 9
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: ST_TO_ADDR
24288: GO 24432
// begin if result [ result ] [ 2 ] < tmp then
24290: LD_VAR 0 6
24294: PUSH
24295: LD_VAR 0 6
24299: ARRAY
24300: PUSH
24301: LD_INT 2
24303: ARRAY
24304: PUSH
24305: LD_VAR 0 9
24309: LESS
24310: IFFALSE 24352
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24312: LD_ADDR_VAR 0 6
24316: PUSH
24317: LD_VAR 0 6
24321: PPUSH
24322: LD_VAR 0 6
24326: PUSH
24327: LD_INT 1
24329: PLUS
24330: PPUSH
24331: LD_VAR 0 7
24335: PUSH
24336: LD_VAR 0 9
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PPUSH
24345: CALL_OW 2
24349: ST_TO_ADDR
24350: GO 24432
// for j = 1 to result do
24352: LD_ADDR_VAR 0 8
24356: PUSH
24357: DOUBLE
24358: LD_INT 1
24360: DEC
24361: ST_TO_ADDR
24362: LD_VAR 0 6
24366: PUSH
24367: FOR_TO
24368: IFFALSE 24430
// begin if tmp < result [ j ] [ 2 ] then
24370: LD_VAR 0 9
24374: PUSH
24375: LD_VAR 0 6
24379: PUSH
24380: LD_VAR 0 8
24384: ARRAY
24385: PUSH
24386: LD_INT 2
24388: ARRAY
24389: LESS
24390: IFFALSE 24428
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24392: LD_ADDR_VAR 0 6
24396: PUSH
24397: LD_VAR 0 6
24401: PPUSH
24402: LD_VAR 0 8
24406: PPUSH
24407: LD_VAR 0 7
24411: PUSH
24412: LD_VAR 0 9
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PPUSH
24421: CALL_OW 2
24425: ST_TO_ADDR
// break ;
24426: GO 24430
// end ; end ;
24428: GO 24367
24430: POP
24431: POP
// end ; end ;
24432: GO 24231
24434: POP
24435: POP
// if result and not asc then
24436: LD_VAR 0 6
24440: PUSH
24441: LD_VAR 0 4
24445: NOT
24446: AND
24447: IFFALSE 24522
// begin tmp := result ;
24449: LD_ADDR_VAR 0 9
24453: PUSH
24454: LD_VAR 0 6
24458: ST_TO_ADDR
// for i = tmp downto 1 do
24459: LD_ADDR_VAR 0 7
24463: PUSH
24464: DOUBLE
24465: LD_VAR 0 9
24469: INC
24470: ST_TO_ADDR
24471: LD_INT 1
24473: PUSH
24474: FOR_DOWNTO
24475: IFFALSE 24520
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24477: LD_ADDR_VAR 0 6
24481: PUSH
24482: LD_VAR 0 6
24486: PPUSH
24487: LD_VAR 0 9
24491: PUSH
24492: LD_VAR 0 7
24496: MINUS
24497: PUSH
24498: LD_INT 1
24500: PLUS
24501: PPUSH
24502: LD_VAR 0 9
24506: PUSH
24507: LD_VAR 0 7
24511: ARRAY
24512: PPUSH
24513: CALL_OW 1
24517: ST_TO_ADDR
24518: GO 24474
24520: POP
24521: POP
// end ; tmp := [ ] ;
24522: LD_ADDR_VAR 0 9
24526: PUSH
24527: EMPTY
24528: ST_TO_ADDR
// if mode then
24529: LD_VAR 0 5
24533: IFFALSE 24602
// begin for i = 1 to result do
24535: LD_ADDR_VAR 0 7
24539: PUSH
24540: DOUBLE
24541: LD_INT 1
24543: DEC
24544: ST_TO_ADDR
24545: LD_VAR 0 6
24549: PUSH
24550: FOR_TO
24551: IFFALSE 24590
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
24553: LD_ADDR_VAR 0 9
24557: PUSH
24558: LD_VAR 0 9
24562: PPUSH
24563: LD_VAR 0 7
24567: PPUSH
24568: LD_VAR 0 6
24572: PUSH
24573: LD_VAR 0 7
24577: ARRAY
24578: PUSH
24579: LD_INT 1
24581: ARRAY
24582: PPUSH
24583: CALL_OW 1
24587: ST_TO_ADDR
24588: GO 24550
24590: POP
24591: POP
// result := tmp ;
24592: LD_ADDR_VAR 0 6
24596: PUSH
24597: LD_VAR 0 9
24601: ST_TO_ADDR
// end ; end ;
24602: LD_VAR 0 6
24606: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
24607: LD_INT 0
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
24615: LD_ADDR_VAR 0 5
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: ST_TO_ADDR
// if not x or not y then
24637: LD_VAR 0 2
24641: NOT
24642: PUSH
24643: LD_VAR 0 3
24647: NOT
24648: OR
24649: IFFALSE 24653
// exit ;
24651: GO 26299
// if not range then
24653: LD_VAR 0 4
24657: NOT
24658: IFFALSE 24668
// range := 10 ;
24660: LD_ADDR_VAR 0 4
24664: PUSH
24665: LD_INT 10
24667: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24668: LD_ADDR_VAR 0 8
24672: PUSH
24673: LD_INT 81
24675: PUSH
24676: LD_VAR 0 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 92
24687: PUSH
24688: LD_VAR 0 2
24692: PUSH
24693: LD_VAR 0 3
24697: PUSH
24698: LD_VAR 0 4
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 3
24711: PUSH
24712: LD_INT 21
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: PPUSH
24731: CALL_OW 69
24735: ST_TO_ADDR
// if not tmp then
24736: LD_VAR 0 8
24740: NOT
24741: IFFALSE 24745
// exit ;
24743: GO 26299
// for i in tmp do
24745: LD_ADDR_VAR 0 6
24749: PUSH
24750: LD_VAR 0 8
24754: PUSH
24755: FOR_IN
24756: IFFALSE 26274
// begin points := [ 0 , 0 , 0 ] ;
24758: LD_ADDR_VAR 0 9
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: ST_TO_ADDR
// bpoints := 1 ;
24777: LD_ADDR_VAR 0 10
24781: PUSH
24782: LD_INT 1
24784: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24785: LD_VAR 0 6
24789: PPUSH
24790: CALL_OW 247
24794: PUSH
24795: LD_INT 1
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 25381
24803: POP
// begin if GetClass ( i ) = 1 then
24804: LD_VAR 0 6
24808: PPUSH
24809: CALL_OW 257
24813: PUSH
24814: LD_INT 1
24816: EQUAL
24817: IFFALSE 24838
// points := [ 10 , 5 , 3 ] ;
24819: LD_ADDR_VAR 0 9
24823: PUSH
24824: LD_INT 10
24826: PUSH
24827: LD_INT 5
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24838: LD_VAR 0 6
24842: PPUSH
24843: CALL_OW 257
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: LD_INT 4
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: IN
24862: IFFALSE 24883
// points := [ 3 , 2 , 1 ] ;
24864: LD_ADDR_VAR 0 9
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24883: LD_VAR 0 6
24887: PPUSH
24888: CALL_OW 257
24892: PUSH
24893: LD_INT 5
24895: EQUAL
24896: IFFALSE 24917
// points := [ 130 , 5 , 2 ] ;
24898: LD_ADDR_VAR 0 9
24902: PUSH
24903: LD_INT 130
24905: PUSH
24906: LD_INT 5
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: LIST
24916: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24917: LD_VAR 0 6
24921: PPUSH
24922: CALL_OW 257
24926: PUSH
24927: LD_INT 8
24929: EQUAL
24930: IFFALSE 24951
// points := [ 35 , 35 , 30 ] ;
24932: LD_ADDR_VAR 0 9
24936: PUSH
24937: LD_INT 35
24939: PUSH
24940: LD_INT 35
24942: PUSH
24943: LD_INT 30
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24951: LD_VAR 0 6
24955: PPUSH
24956: CALL_OW 257
24960: PUSH
24961: LD_INT 9
24963: EQUAL
24964: IFFALSE 24985
// points := [ 20 , 55 , 40 ] ;
24966: LD_ADDR_VAR 0 9
24970: PUSH
24971: LD_INT 20
24973: PUSH
24974: LD_INT 55
24976: PUSH
24977: LD_INT 40
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: LIST
24984: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24985: LD_VAR 0 6
24989: PPUSH
24990: CALL_OW 257
24994: PUSH
24995: LD_INT 12
24997: PUSH
24998: LD_INT 16
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: IN
25005: IFFALSE 25026
// points := [ 5 , 3 , 2 ] ;
25007: LD_ADDR_VAR 0 9
25011: PUSH
25012: LD_INT 5
25014: PUSH
25015: LD_INT 3
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25026: LD_VAR 0 6
25030: PPUSH
25031: CALL_OW 257
25035: PUSH
25036: LD_INT 17
25038: EQUAL
25039: IFFALSE 25060
// points := [ 100 , 50 , 75 ] ;
25041: LD_ADDR_VAR 0 9
25045: PUSH
25046: LD_INT 100
25048: PUSH
25049: LD_INT 50
25051: PUSH
25052: LD_INT 75
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25060: LD_VAR 0 6
25064: PPUSH
25065: CALL_OW 257
25069: PUSH
25070: LD_INT 15
25072: EQUAL
25073: IFFALSE 25094
// points := [ 10 , 5 , 3 ] ;
25075: LD_ADDR_VAR 0 9
25079: PUSH
25080: LD_INT 10
25082: PUSH
25083: LD_INT 5
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25094: LD_VAR 0 6
25098: PPUSH
25099: CALL_OW 257
25103: PUSH
25104: LD_INT 14
25106: EQUAL
25107: IFFALSE 25128
// points := [ 10 , 0 , 0 ] ;
25109: LD_ADDR_VAR 0 9
25113: PUSH
25114: LD_INT 10
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25128: LD_VAR 0 6
25132: PPUSH
25133: CALL_OW 257
25137: PUSH
25138: LD_INT 11
25140: EQUAL
25141: IFFALSE 25162
// points := [ 30 , 10 , 5 ] ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_INT 30
25150: PUSH
25151: LD_INT 10
25153: PUSH
25154: LD_INT 5
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25162: LD_VAR 0 1
25166: PPUSH
25167: LD_INT 5
25169: PPUSH
25170: CALL_OW 321
25174: PUSH
25175: LD_INT 2
25177: EQUAL
25178: IFFALSE 25195
// bpoints := bpoints * 1.8 ;
25180: LD_ADDR_VAR 0 10
25184: PUSH
25185: LD_VAR 0 10
25189: PUSH
25190: LD_REAL  1.80000000000000E+0000
25193: MUL
25194: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25195: LD_VAR 0 6
25199: PPUSH
25200: CALL_OW 257
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: LD_INT 3
25213: PUSH
25214: LD_INT 4
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: IN
25223: PUSH
25224: LD_VAR 0 1
25228: PPUSH
25229: LD_INT 51
25231: PPUSH
25232: CALL_OW 321
25236: PUSH
25237: LD_INT 2
25239: EQUAL
25240: AND
25241: IFFALSE 25258
// bpoints := bpoints * 1.2 ;
25243: LD_ADDR_VAR 0 10
25247: PUSH
25248: LD_VAR 0 10
25252: PUSH
25253: LD_REAL  1.20000000000000E+0000
25256: MUL
25257: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25258: LD_VAR 0 6
25262: PPUSH
25263: CALL_OW 257
25267: PUSH
25268: LD_INT 5
25270: PUSH
25271: LD_INT 7
25273: PUSH
25274: LD_INT 9
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: IN
25282: PUSH
25283: LD_VAR 0 1
25287: PPUSH
25288: LD_INT 52
25290: PPUSH
25291: CALL_OW 321
25295: PUSH
25296: LD_INT 2
25298: EQUAL
25299: AND
25300: IFFALSE 25317
// bpoints := bpoints * 1.5 ;
25302: LD_ADDR_VAR 0 10
25306: PUSH
25307: LD_VAR 0 10
25311: PUSH
25312: LD_REAL  1.50000000000000E+0000
25315: MUL
25316: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25317: LD_VAR 0 1
25321: PPUSH
25322: LD_INT 66
25324: PPUSH
25325: CALL_OW 321
25329: PUSH
25330: LD_INT 2
25332: EQUAL
25333: IFFALSE 25350
// bpoints := bpoints * 1.1 ;
25335: LD_ADDR_VAR 0 10
25339: PUSH
25340: LD_VAR 0 10
25344: PUSH
25345: LD_REAL  1.10000000000000E+0000
25348: MUL
25349: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25350: LD_ADDR_VAR 0 10
25354: PUSH
25355: LD_VAR 0 10
25359: PUSH
25360: LD_VAR 0 6
25364: PPUSH
25365: LD_INT 1
25367: PPUSH
25368: CALL_OW 259
25372: PUSH
25373: LD_REAL  1.15000000000000E+0000
25376: MUL
25377: MUL
25378: ST_TO_ADDR
// end ; unit_vehicle :
25379: GO 26203
25381: LD_INT 2
25383: DOUBLE
25384: EQUAL
25385: IFTRUE 25389
25387: GO 26191
25389: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25390: LD_VAR 0 6
25394: PPUSH
25395: CALL_OW 264
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: LD_INT 42
25405: PUSH
25406: LD_INT 24
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: IN
25414: IFFALSE 25435
// points := [ 25 , 5 , 3 ] ;
25416: LD_ADDR_VAR 0 9
25420: PUSH
25421: LD_INT 25
25423: PUSH
25424: LD_INT 5
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: LIST
25434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25435: LD_VAR 0 6
25439: PPUSH
25440: CALL_OW 264
25444: PUSH
25445: LD_INT 4
25447: PUSH
25448: LD_INT 43
25450: PUSH
25451: LD_INT 25
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: IN
25459: IFFALSE 25480
// points := [ 40 , 15 , 5 ] ;
25461: LD_ADDR_VAR 0 9
25465: PUSH
25466: LD_INT 40
25468: PUSH
25469: LD_INT 15
25471: PUSH
25472: LD_INT 5
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25480: LD_VAR 0 6
25484: PPUSH
25485: CALL_OW 264
25489: PUSH
25490: LD_INT 3
25492: PUSH
25493: LD_INT 23
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: IN
25500: IFFALSE 25521
// points := [ 7 , 25 , 8 ] ;
25502: LD_ADDR_VAR 0 9
25506: PUSH
25507: LD_INT 7
25509: PUSH
25510: LD_INT 25
25512: PUSH
25513: LD_INT 8
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
25521: LD_VAR 0 6
25525: PPUSH
25526: CALL_OW 264
25530: PUSH
25531: LD_INT 5
25533: PUSH
25534: LD_INT 27
25536: PUSH
25537: LD_INT 44
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: IN
25545: IFFALSE 25566
// points := [ 14 , 50 , 16 ] ;
25547: LD_ADDR_VAR 0 9
25551: PUSH
25552: LD_INT 14
25554: PUSH
25555: LD_INT 50
25557: PUSH
25558: LD_INT 16
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
25566: LD_VAR 0 6
25570: PPUSH
25571: CALL_OW 264
25575: PUSH
25576: LD_INT 6
25578: PUSH
25579: LD_INT 46
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: IN
25586: IFFALSE 25607
// points := [ 32 , 120 , 70 ] ;
25588: LD_ADDR_VAR 0 9
25592: PUSH
25593: LD_INT 32
25595: PUSH
25596: LD_INT 120
25598: PUSH
25599: LD_INT 70
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
25607: LD_VAR 0 6
25611: PPUSH
25612: CALL_OW 264
25616: PUSH
25617: LD_INT 7
25619: PUSH
25620: LD_INT 28
25622: PUSH
25623: LD_INT 45
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: IN
25631: IFFALSE 25652
// points := [ 35 , 20 , 45 ] ;
25633: LD_ADDR_VAR 0 9
25637: PUSH
25638: LD_INT 35
25640: PUSH
25641: LD_INT 20
25643: PUSH
25644: LD_INT 45
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
25652: LD_VAR 0 6
25656: PPUSH
25657: CALL_OW 264
25661: PUSH
25662: LD_INT 47
25664: PUSH
25665: EMPTY
25666: LIST
25667: IN
25668: IFFALSE 25689
// points := [ 67 , 45 , 75 ] ;
25670: LD_ADDR_VAR 0 9
25674: PUSH
25675: LD_INT 67
25677: PUSH
25678: LD_INT 45
25680: PUSH
25681: LD_INT 75
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25689: LD_VAR 0 6
25693: PPUSH
25694: CALL_OW 264
25698: PUSH
25699: LD_INT 26
25701: PUSH
25702: EMPTY
25703: LIST
25704: IN
25705: IFFALSE 25726
// points := [ 120 , 30 , 80 ] ;
25707: LD_ADDR_VAR 0 9
25711: PUSH
25712: LD_INT 120
25714: PUSH
25715: LD_INT 30
25717: PUSH
25718: LD_INT 80
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: LIST
25725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25726: LD_VAR 0 6
25730: PPUSH
25731: CALL_OW 264
25735: PUSH
25736: LD_INT 22
25738: PUSH
25739: EMPTY
25740: LIST
25741: IN
25742: IFFALSE 25763
// points := [ 40 , 1 , 1 ] ;
25744: LD_ADDR_VAR 0 9
25748: PUSH
25749: LD_INT 40
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25763: LD_VAR 0 6
25767: PPUSH
25768: CALL_OW 264
25772: PUSH
25773: LD_INT 29
25775: PUSH
25776: EMPTY
25777: LIST
25778: IN
25779: IFFALSE 25800
// points := [ 70 , 200 , 400 ] ;
25781: LD_ADDR_VAR 0 9
25785: PUSH
25786: LD_INT 70
25788: PUSH
25789: LD_INT 200
25791: PUSH
25792: LD_INT 400
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25800: LD_VAR 0 6
25804: PPUSH
25805: CALL_OW 264
25809: PUSH
25810: LD_INT 14
25812: PUSH
25813: LD_INT 53
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: IN
25820: IFFALSE 25841
// points := [ 40 , 10 , 20 ] ;
25822: LD_ADDR_VAR 0 9
25826: PUSH
25827: LD_INT 40
25829: PUSH
25830: LD_INT 10
25832: PUSH
25833: LD_INT 20
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: LIST
25840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25841: LD_VAR 0 6
25845: PPUSH
25846: CALL_OW 264
25850: PUSH
25851: LD_INT 9
25853: PUSH
25854: EMPTY
25855: LIST
25856: IN
25857: IFFALSE 25878
// points := [ 5 , 70 , 20 ] ;
25859: LD_ADDR_VAR 0 9
25863: PUSH
25864: LD_INT 5
25866: PUSH
25867: LD_INT 70
25869: PUSH
25870: LD_INT 20
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25878: LD_VAR 0 6
25882: PPUSH
25883: CALL_OW 264
25887: PUSH
25888: LD_INT 10
25890: PUSH
25891: EMPTY
25892: LIST
25893: IN
25894: IFFALSE 25915
// points := [ 35 , 110 , 70 ] ;
25896: LD_ADDR_VAR 0 9
25900: PUSH
25901: LD_INT 35
25903: PUSH
25904: LD_INT 110
25906: PUSH
25907: LD_INT 70
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25915: LD_VAR 0 6
25919: PPUSH
25920: CALL_OW 265
25924: PUSH
25925: LD_INT 25
25927: EQUAL
25928: IFFALSE 25949
// points := [ 80 , 65 , 100 ] ;
25930: LD_ADDR_VAR 0 9
25934: PUSH
25935: LD_INT 80
25937: PUSH
25938: LD_INT 65
25940: PUSH
25941: LD_INT 100
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25949: LD_VAR 0 6
25953: PPUSH
25954: CALL_OW 263
25958: PUSH
25959: LD_INT 1
25961: EQUAL
25962: IFFALSE 25997
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25964: LD_ADDR_VAR 0 10
25968: PUSH
25969: LD_VAR 0 10
25973: PUSH
25974: LD_VAR 0 6
25978: PPUSH
25979: CALL_OW 311
25983: PPUSH
25984: LD_INT 3
25986: PPUSH
25987: CALL_OW 259
25991: PUSH
25992: LD_INT 4
25994: MUL
25995: MUL
25996: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25997: LD_VAR 0 6
26001: PPUSH
26002: CALL_OW 263
26006: PUSH
26007: LD_INT 2
26009: EQUAL
26010: IFFALSE 26061
// begin j := IsControledBy ( i ) ;
26012: LD_ADDR_VAR 0 7
26016: PUSH
26017: LD_VAR 0 6
26021: PPUSH
26022: CALL_OW 312
26026: ST_TO_ADDR
// if j then
26027: LD_VAR 0 7
26031: IFFALSE 26061
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26033: LD_ADDR_VAR 0 10
26037: PUSH
26038: LD_VAR 0 10
26042: PUSH
26043: LD_VAR 0 7
26047: PPUSH
26048: LD_INT 3
26050: PPUSH
26051: CALL_OW 259
26055: PUSH
26056: LD_INT 3
26058: MUL
26059: MUL
26060: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26061: LD_VAR 0 6
26065: PPUSH
26066: CALL_OW 264
26070: PUSH
26071: LD_INT 5
26073: PUSH
26074: LD_INT 6
26076: PUSH
26077: LD_INT 46
26079: PUSH
26080: LD_INT 44
26082: PUSH
26083: LD_INT 47
26085: PUSH
26086: LD_INT 45
26088: PUSH
26089: LD_INT 28
26091: PUSH
26092: LD_INT 7
26094: PUSH
26095: LD_INT 27
26097: PUSH
26098: LD_INT 29
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: IN
26113: PUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: LD_INT 52
26121: PPUSH
26122: CALL_OW 321
26126: PUSH
26127: LD_INT 2
26129: EQUAL
26130: AND
26131: IFFALSE 26148
// bpoints := bpoints * 1.2 ;
26133: LD_ADDR_VAR 0 10
26137: PUSH
26138: LD_VAR 0 10
26142: PUSH
26143: LD_REAL  1.20000000000000E+0000
26146: MUL
26147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26148: LD_VAR 0 6
26152: PPUSH
26153: CALL_OW 264
26157: PUSH
26158: LD_INT 6
26160: PUSH
26161: LD_INT 46
26163: PUSH
26164: LD_INT 47
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: IN
26172: IFFALSE 26189
// bpoints := bpoints * 1.2 ;
26174: LD_ADDR_VAR 0 10
26178: PUSH
26179: LD_VAR 0 10
26183: PUSH
26184: LD_REAL  1.20000000000000E+0000
26187: MUL
26188: ST_TO_ADDR
// end ; unit_building :
26189: GO 26203
26191: LD_INT 3
26193: DOUBLE
26194: EQUAL
26195: IFTRUE 26199
26197: GO 26202
26199: POP
// ; end ;
26200: GO 26203
26202: POP
// for j = 1 to 3 do
26203: LD_ADDR_VAR 0 7
26207: PUSH
26208: DOUBLE
26209: LD_INT 1
26211: DEC
26212: ST_TO_ADDR
26213: LD_INT 3
26215: PUSH
26216: FOR_TO
26217: IFFALSE 26270
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26219: LD_ADDR_VAR 0 5
26223: PUSH
26224: LD_VAR 0 5
26228: PPUSH
26229: LD_VAR 0 7
26233: PPUSH
26234: LD_VAR 0 5
26238: PUSH
26239: LD_VAR 0 7
26243: ARRAY
26244: PUSH
26245: LD_VAR 0 9
26249: PUSH
26250: LD_VAR 0 7
26254: ARRAY
26255: PUSH
26256: LD_VAR 0 10
26260: MUL
26261: PLUS
26262: PPUSH
26263: CALL_OW 1
26267: ST_TO_ADDR
26268: GO 26216
26270: POP
26271: POP
// end ;
26272: GO 24755
26274: POP
26275: POP
// result := Replace ( result , 4 , tmp ) ;
26276: LD_ADDR_VAR 0 5
26280: PUSH
26281: LD_VAR 0 5
26285: PPUSH
26286: LD_INT 4
26288: PPUSH
26289: LD_VAR 0 8
26293: PPUSH
26294: CALL_OW 1
26298: ST_TO_ADDR
// end ;
26299: LD_VAR 0 5
26303: RET
// export function DangerAtRange ( unit , range ) ; begin
26304: LD_INT 0
26306: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26307: LD_ADDR_VAR 0 3
26311: PUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 255
26321: PPUSH
26322: LD_VAR 0 1
26326: PPUSH
26327: CALL_OW 250
26331: PPUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: CALL_OW 251
26341: PPUSH
26342: LD_VAR 0 2
26346: PPUSH
26347: CALL 24607 0 4
26351: ST_TO_ADDR
// end ;
26352: LD_VAR 0 3
26356: RET
// export function DangerInArea ( side , area ) ; begin
26357: LD_INT 0
26359: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26360: LD_ADDR_VAR 0 3
26364: PUSH
26365: LD_VAR 0 2
26369: PPUSH
26370: LD_INT 81
26372: PUSH
26373: LD_VAR 0 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PPUSH
26382: CALL_OW 70
26386: ST_TO_ADDR
// end ;
26387: LD_VAR 0 3
26391: RET
// export function IsExtension ( b ) ; begin
26392: LD_INT 0
26394: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26395: LD_ADDR_VAR 0 2
26399: PUSH
26400: LD_VAR 0 1
26404: PUSH
26405: LD_INT 23
26407: PUSH
26408: LD_INT 20
26410: PUSH
26411: LD_INT 22
26413: PUSH
26414: LD_INT 17
26416: PUSH
26417: LD_INT 24
26419: PUSH
26420: LD_INT 21
26422: PUSH
26423: LD_INT 19
26425: PUSH
26426: LD_INT 16
26428: PUSH
26429: LD_INT 25
26431: PUSH
26432: LD_INT 18
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: IN
26447: ST_TO_ADDR
// end ;
26448: LD_VAR 0 2
26452: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26453: LD_INT 0
26455: PPUSH
26456: PPUSH
26457: PPUSH
// result := [ ] ;
26458: LD_ADDR_VAR 0 3
26462: PUSH
26463: EMPTY
26464: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26465: LD_ADDR_VAR 0 4
26469: PUSH
26470: LD_VAR 0 2
26474: PPUSH
26475: LD_INT 21
26477: PUSH
26478: LD_INT 3
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 70
26489: ST_TO_ADDR
// if not tmp then
26490: LD_VAR 0 4
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26557
// for i in tmp do
26499: LD_ADDR_VAR 0 5
26503: PUSH
26504: LD_VAR 0 4
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26545
// if GetBase ( i ) <> base then
26512: LD_VAR 0 5
26516: PPUSH
26517: CALL_OW 274
26521: PUSH
26522: LD_VAR 0 1
26526: NONEQUAL
26527: IFFALSE 26543
// ComLinkToBase ( base , i ) ;
26529: LD_VAR 0 1
26533: PPUSH
26534: LD_VAR 0 5
26538: PPUSH
26539: CALL_OW 169
26543: GO 26509
26545: POP
26546: POP
// result := tmp ;
26547: LD_ADDR_VAR 0 3
26551: PUSH
26552: LD_VAR 0 4
26556: ST_TO_ADDR
// end ;
26557: LD_VAR 0 3
26561: RET
// export function ComComplete ( unit , b ) ; var i ; begin
26562: LD_INT 0
26564: PPUSH
26565: PPUSH
// if BuildingStatus ( b ) = bs_build then
26566: LD_VAR 0 2
26570: PPUSH
26571: CALL_OW 461
26575: PUSH
26576: LD_INT 1
26578: EQUAL
26579: IFFALSE 26639
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
26581: LD_VAR 0 1
26585: PPUSH
26586: LD_STRING h
26588: PUSH
26589: LD_VAR 0 2
26593: PPUSH
26594: CALL_OW 250
26598: PUSH
26599: LD_VAR 0 2
26603: PPUSH
26604: CALL_OW 251
26608: PUSH
26609: LD_VAR 0 2
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: PPUSH
26635: CALL_OW 446
// end ;
26639: LD_VAR 0 3
26643: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26644: LD_INT 0
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
26652: LD_VAR 0 1
26656: NOT
26657: PUSH
26658: LD_VAR 0 1
26662: PPUSH
26663: CALL_OW 263
26667: PUSH
26668: LD_INT 2
26670: EQUAL
26671: NOT
26672: OR
26673: IFFALSE 26677
// exit ;
26675: GO 26993
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26677: LD_ADDR_VAR 0 6
26681: PUSH
26682: LD_INT 22
26684: PUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 255
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: LD_INT 30
26704: PUSH
26705: LD_INT 36
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 34
26714: PUSH
26715: LD_INT 31
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: ST_TO_ADDR
// if not tmp then
26736: LD_VAR 0 6
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26993
// result := [ ] ;
26745: LD_ADDR_VAR 0 2
26749: PUSH
26750: EMPTY
26751: ST_TO_ADDR
// for i in tmp do
26752: LD_ADDR_VAR 0 3
26756: PUSH
26757: LD_VAR 0 6
26761: PUSH
26762: FOR_IN
26763: IFFALSE 26834
// begin t := UnitsInside ( i ) ;
26765: LD_ADDR_VAR 0 4
26769: PUSH
26770: LD_VAR 0 3
26774: PPUSH
26775: CALL_OW 313
26779: ST_TO_ADDR
// if t then
26780: LD_VAR 0 4
26784: IFFALSE 26832
// for j in t do
26786: LD_ADDR_VAR 0 7
26790: PUSH
26791: LD_VAR 0 4
26795: PUSH
26796: FOR_IN
26797: IFFALSE 26830
// result := Insert ( result , result + 1 , j ) ;
26799: LD_ADDR_VAR 0 2
26803: PUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: LD_VAR 0 2
26813: PUSH
26814: LD_INT 1
26816: PLUS
26817: PPUSH
26818: LD_VAR 0 7
26822: PPUSH
26823: CALL_OW 2
26827: ST_TO_ADDR
26828: GO 26796
26830: POP
26831: POP
// end ;
26832: GO 26762
26834: POP
26835: POP
// if not result then
26836: LD_VAR 0 2
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 26993
// mech := result [ 1 ] ;
26845: LD_ADDR_VAR 0 5
26849: PUSH
26850: LD_VAR 0 2
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: ST_TO_ADDR
// if result > 1 then
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: GREATER
26867: IFFALSE 26979
// for i = 2 to result do
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: DOUBLE
26875: LD_INT 2
26877: DEC
26878: ST_TO_ADDR
26879: LD_VAR 0 2
26883: PUSH
26884: FOR_TO
26885: IFFALSE 26977
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26887: LD_ADDR_VAR 0 4
26891: PUSH
26892: LD_VAR 0 2
26896: PUSH
26897: LD_VAR 0 3
26901: ARRAY
26902: PPUSH
26903: LD_INT 3
26905: PPUSH
26906: CALL_OW 259
26910: PUSH
26911: LD_VAR 0 2
26915: PUSH
26916: LD_VAR 0 3
26920: ARRAY
26921: PPUSH
26922: CALL_OW 432
26926: MINUS
26927: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26928: LD_VAR 0 4
26932: PUSH
26933: LD_VAR 0 5
26937: PPUSH
26938: LD_INT 3
26940: PPUSH
26941: CALL_OW 259
26945: PUSH
26946: LD_VAR 0 5
26950: PPUSH
26951: CALL_OW 432
26955: MINUS
26956: GREATEREQUAL
26957: IFFALSE 26975
// mech := result [ i ] ;
26959: LD_ADDR_VAR 0 5
26963: PUSH
26964: LD_VAR 0 2
26968: PUSH
26969: LD_VAR 0 3
26973: ARRAY
26974: ST_TO_ADDR
// end ;
26975: GO 26884
26977: POP
26978: POP
// ComLinkTo ( vehicle , mech ) ;
26979: LD_VAR 0 1
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: CALL_OW 135
// end ;
26993: LD_VAR 0 2
26997: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26998: LD_INT 0
27000: PPUSH
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
27010: PPUSH
27011: PPUSH
27012: PPUSH
// result := [ ] ;
27013: LD_ADDR_VAR 0 7
27017: PUSH
27018: EMPTY
27019: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL_OW 266
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: IN
27040: NOT
27041: IFFALSE 27045
// exit ;
27043: GO 28676
// if name then
27045: LD_VAR 0 3
27049: IFFALSE 27065
// SetBName ( base_dep , name ) ;
27051: LD_VAR 0 1
27055: PPUSH
27056: LD_VAR 0 3
27060: PPUSH
27061: CALL_OW 500
// base := GetBase ( base_dep ) ;
27065: LD_ADDR_VAR 0 15
27069: PUSH
27070: LD_VAR 0 1
27074: PPUSH
27075: CALL_OW 274
27079: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27080: LD_ADDR_VAR 0 16
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 255
27094: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27095: LD_ADDR_VAR 0 17
27099: PUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 248
27109: ST_TO_ADDR
// if sources then
27110: LD_VAR 0 5
27114: IFFALSE 27161
// for i = 1 to 3 do
27116: LD_ADDR_VAR 0 8
27120: PUSH
27121: DOUBLE
27122: LD_INT 1
27124: DEC
27125: ST_TO_ADDR
27126: LD_INT 3
27128: PUSH
27129: FOR_TO
27130: IFFALSE 27159
// AddResourceType ( base , i , sources [ i ] ) ;
27132: LD_VAR 0 15
27136: PPUSH
27137: LD_VAR 0 8
27141: PPUSH
27142: LD_VAR 0 5
27146: PUSH
27147: LD_VAR 0 8
27151: ARRAY
27152: PPUSH
27153: CALL_OW 276
27157: GO 27129
27159: POP
27160: POP
// buildings := GetBaseBuildings ( base , area ) ;
27161: LD_ADDR_VAR 0 18
27165: PUSH
27166: LD_VAR 0 15
27170: PPUSH
27171: LD_VAR 0 2
27175: PPUSH
27176: CALL 26453 0 2
27180: ST_TO_ADDR
// InitHc ;
27181: CALL_OW 19
// InitUc ;
27185: CALL_OW 18
// uc_side := side ;
27189: LD_ADDR_OWVAR 20
27193: PUSH
27194: LD_VAR 0 16
27198: ST_TO_ADDR
// uc_nation := nation ;
27199: LD_ADDR_OWVAR 21
27203: PUSH
27204: LD_VAR 0 17
27208: ST_TO_ADDR
// if buildings then
27209: LD_VAR 0 18
27213: IFFALSE 28535
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27215: LD_ADDR_VAR 0 19
27219: PUSH
27220: LD_VAR 0 18
27224: PPUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 30
27230: PUSH
27231: LD_INT 29
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 30
27240: PUSH
27241: LD_INT 30
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: PPUSH
27253: CALL_OW 72
27257: ST_TO_ADDR
// if tmp then
27258: LD_VAR 0 19
27262: IFFALSE 27310
// for i in tmp do
27264: LD_ADDR_VAR 0 8
27268: PUSH
27269: LD_VAR 0 19
27273: PUSH
27274: FOR_IN
27275: IFFALSE 27308
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27277: LD_VAR 0 8
27281: PPUSH
27282: CALL_OW 250
27286: PPUSH
27287: LD_VAR 0 8
27291: PPUSH
27292: CALL_OW 251
27296: PPUSH
27297: LD_VAR 0 16
27301: PPUSH
27302: CALL_OW 441
27306: GO 27274
27308: POP
27309: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27310: LD_VAR 0 18
27314: PPUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 30
27320: PUSH
27321: LD_INT 32
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 30
27330: PUSH
27331: LD_INT 33
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: PPUSH
27343: CALL_OW 72
27347: IFFALSE 27435
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27349: LD_ADDR_VAR 0 8
27353: PUSH
27354: LD_VAR 0 18
27358: PPUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 30
27364: PUSH
27365: LD_INT 32
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 30
27374: PUSH
27375: LD_INT 33
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 72
27391: PUSH
27392: FOR_IN
27393: IFFALSE 27433
// begin if not GetBWeapon ( i ) then
27395: LD_VAR 0 8
27399: PPUSH
27400: CALL_OW 269
27404: NOT
27405: IFFALSE 27431
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27407: LD_VAR 0 8
27411: PPUSH
27412: LD_VAR 0 8
27416: PPUSH
27417: LD_VAR 0 2
27421: PPUSH
27422: CALL 28681 0 2
27426: PPUSH
27427: CALL_OW 431
// end ;
27431: GO 27392
27433: POP
27434: POP
// end ; for i = 1 to personel do
27435: LD_ADDR_VAR 0 8
27439: PUSH
27440: DOUBLE
27441: LD_INT 1
27443: DEC
27444: ST_TO_ADDR
27445: LD_VAR 0 6
27449: PUSH
27450: FOR_TO
27451: IFFALSE 28515
// begin if i > 4 then
27453: LD_VAR 0 8
27457: PUSH
27458: LD_INT 4
27460: GREATER
27461: IFFALSE 27465
// break ;
27463: GO 28515
// case i of 1 :
27465: LD_VAR 0 8
27469: PUSH
27470: LD_INT 1
27472: DOUBLE
27473: EQUAL
27474: IFTRUE 27478
27476: GO 27558
27478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27479: LD_ADDR_VAR 0 12
27483: PUSH
27484: LD_VAR 0 18
27488: PPUSH
27489: LD_INT 22
27491: PUSH
27492: LD_VAR 0 16
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 58
27503: PUSH
27504: EMPTY
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 30
27512: PUSH
27513: LD_INT 32
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 30
27522: PUSH
27523: LD_INT 4
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 30
27532: PUSH
27533: LD_INT 5
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: PPUSH
27551: CALL_OW 72
27555: ST_TO_ADDR
27556: GO 27780
27558: LD_INT 2
27560: DOUBLE
27561: EQUAL
27562: IFTRUE 27566
27564: GO 27628
27566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
27567: LD_ADDR_VAR 0 12
27571: PUSH
27572: LD_VAR 0 18
27576: PPUSH
27577: LD_INT 22
27579: PUSH
27580: LD_VAR 0 16
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 30
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 30
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PPUSH
27621: CALL_OW 72
27625: ST_TO_ADDR
27626: GO 27780
27628: LD_INT 3
27630: DOUBLE
27631: EQUAL
27632: IFTRUE 27636
27634: GO 27698
27636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27637: LD_ADDR_VAR 0 12
27641: PUSH
27642: LD_VAR 0 18
27646: PPUSH
27647: LD_INT 22
27649: PUSH
27650: LD_VAR 0 16
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: LD_INT 30
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 30
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PPUSH
27691: CALL_OW 72
27695: ST_TO_ADDR
27696: GO 27780
27698: LD_INT 4
27700: DOUBLE
27701: EQUAL
27702: IFTRUE 27706
27704: GO 27779
27706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27707: LD_ADDR_VAR 0 12
27711: PUSH
27712: LD_VAR 0 18
27716: PPUSH
27717: LD_INT 22
27719: PUSH
27720: LD_VAR 0 16
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 30
27734: PUSH
27735: LD_INT 6
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 30
27744: PUSH
27745: LD_INT 7
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 30
27754: PUSH
27755: LD_INT 8
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PPUSH
27772: CALL_OW 72
27776: ST_TO_ADDR
27777: GO 27780
27779: POP
// if i = 1 then
27780: LD_VAR 0 8
27784: PUSH
27785: LD_INT 1
27787: EQUAL
27788: IFFALSE 27899
// begin tmp := [ ] ;
27790: LD_ADDR_VAR 0 19
27794: PUSH
27795: EMPTY
27796: ST_TO_ADDR
// for j in f do
27797: LD_ADDR_VAR 0 9
27801: PUSH
27802: LD_VAR 0 12
27806: PUSH
27807: FOR_IN
27808: IFFALSE 27881
// if GetBType ( j ) = b_bunker then
27810: LD_VAR 0 9
27814: PPUSH
27815: CALL_OW 266
27819: PUSH
27820: LD_INT 32
27822: EQUAL
27823: IFFALSE 27850
// tmp := Insert ( tmp , 1 , j ) else
27825: LD_ADDR_VAR 0 19
27829: PUSH
27830: LD_VAR 0 19
27834: PPUSH
27835: LD_INT 1
27837: PPUSH
27838: LD_VAR 0 9
27842: PPUSH
27843: CALL_OW 2
27847: ST_TO_ADDR
27848: GO 27879
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27850: LD_ADDR_VAR 0 19
27854: PUSH
27855: LD_VAR 0 19
27859: PPUSH
27860: LD_VAR 0 19
27864: PUSH
27865: LD_INT 1
27867: PLUS
27868: PPUSH
27869: LD_VAR 0 9
27873: PPUSH
27874: CALL_OW 2
27878: ST_TO_ADDR
27879: GO 27807
27881: POP
27882: POP
// if tmp then
27883: LD_VAR 0 19
27887: IFFALSE 27899
// f := tmp ;
27889: LD_ADDR_VAR 0 12
27893: PUSH
27894: LD_VAR 0 19
27898: ST_TO_ADDR
// end ; x := personel [ i ] ;
27899: LD_ADDR_VAR 0 13
27903: PUSH
27904: LD_VAR 0 6
27908: PUSH
27909: LD_VAR 0 8
27913: ARRAY
27914: ST_TO_ADDR
// if x = - 1 then
27915: LD_VAR 0 13
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: EQUAL
27924: IFFALSE 28133
// begin for j in f do
27926: LD_ADDR_VAR 0 9
27930: PUSH
27931: LD_VAR 0 12
27935: PUSH
27936: FOR_IN
27937: IFFALSE 28129
// repeat InitHc ;
27939: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27943: LD_VAR 0 9
27947: PPUSH
27948: CALL_OW 266
27952: PUSH
27953: LD_INT 5
27955: EQUAL
27956: IFFALSE 28026
// begin if UnitsInside ( j ) < 3 then
27958: LD_VAR 0 9
27962: PPUSH
27963: CALL_OW 313
27967: PUSH
27968: LD_INT 3
27970: LESS
27971: IFFALSE 28007
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27973: LD_INT 0
27975: PPUSH
27976: LD_INT 5
27978: PUSH
27979: LD_INT 8
27981: PUSH
27982: LD_INT 9
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: PUSH
27990: LD_VAR 0 17
27994: ARRAY
27995: PPUSH
27996: LD_VAR 0 4
28000: PPUSH
28001: CALL_OW 380
28005: GO 28024
// PrepareHuman ( false , i , skill ) ;
28007: LD_INT 0
28009: PPUSH
28010: LD_VAR 0 8
28014: PPUSH
28015: LD_VAR 0 4
28019: PPUSH
28020: CALL_OW 380
// end else
28024: GO 28043
// PrepareHuman ( false , i , skill ) ;
28026: LD_INT 0
28028: PPUSH
28029: LD_VAR 0 8
28033: PPUSH
28034: LD_VAR 0 4
28038: PPUSH
28039: CALL_OW 380
// un := CreateHuman ;
28043: LD_ADDR_VAR 0 14
28047: PUSH
28048: CALL_OW 44
28052: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28053: LD_ADDR_VAR 0 7
28057: PUSH
28058: LD_VAR 0 7
28062: PPUSH
28063: LD_INT 1
28065: PPUSH
28066: LD_VAR 0 14
28070: PPUSH
28071: CALL_OW 2
28075: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28076: LD_VAR 0 14
28080: PPUSH
28081: LD_VAR 0 9
28085: PPUSH
28086: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28090: LD_VAR 0 9
28094: PPUSH
28095: CALL_OW 313
28099: PUSH
28100: LD_INT 6
28102: EQUAL
28103: PUSH
28104: LD_VAR 0 9
28108: PPUSH
28109: CALL_OW 266
28113: PUSH
28114: LD_INT 32
28116: PUSH
28117: LD_INT 31
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: IN
28124: OR
28125: IFFALSE 27939
28127: GO 27936
28129: POP
28130: POP
// end else
28131: GO 28513
// for j = 1 to x do
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: DOUBLE
28139: LD_INT 1
28141: DEC
28142: ST_TO_ADDR
28143: LD_VAR 0 13
28147: PUSH
28148: FOR_TO
28149: IFFALSE 28511
// begin InitHc ;
28151: CALL_OW 19
// if not f then
28155: LD_VAR 0 12
28159: NOT
28160: IFFALSE 28249
// begin PrepareHuman ( false , i , skill ) ;
28162: LD_INT 0
28164: PPUSH
28165: LD_VAR 0 8
28169: PPUSH
28170: LD_VAR 0 4
28174: PPUSH
28175: CALL_OW 380
// un := CreateHuman ;
28179: LD_ADDR_VAR 0 14
28183: PUSH
28184: CALL_OW 44
28188: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28189: LD_ADDR_VAR 0 7
28193: PUSH
28194: LD_VAR 0 7
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: LD_VAR 0 14
28206: PPUSH
28207: CALL_OW 2
28211: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28212: LD_VAR 0 14
28216: PPUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 250
28226: PPUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 251
28236: PPUSH
28237: LD_INT 10
28239: PPUSH
28240: LD_INT 0
28242: PPUSH
28243: CALL_OW 50
// continue ;
28247: GO 28148
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28249: LD_VAR 0 12
28253: PUSH
28254: LD_INT 1
28256: ARRAY
28257: PPUSH
28258: CALL_OW 313
28262: PUSH
28263: LD_VAR 0 12
28267: PUSH
28268: LD_INT 1
28270: ARRAY
28271: PPUSH
28272: CALL_OW 266
28276: PUSH
28277: LD_INT 32
28279: PUSH
28280: LD_INT 31
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: IN
28287: AND
28288: PUSH
28289: LD_VAR 0 12
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PPUSH
28298: CALL_OW 313
28302: PUSH
28303: LD_INT 6
28305: EQUAL
28306: OR
28307: IFFALSE 28327
// f := Delete ( f , 1 ) ;
28309: LD_ADDR_VAR 0 12
28313: PUSH
28314: LD_VAR 0 12
28318: PPUSH
28319: LD_INT 1
28321: PPUSH
28322: CALL_OW 3
28326: ST_TO_ADDR
// if not f then
28327: LD_VAR 0 12
28331: NOT
28332: IFFALSE 28350
// begin x := x + 2 ;
28334: LD_ADDR_VAR 0 13
28338: PUSH
28339: LD_VAR 0 13
28343: PUSH
28344: LD_INT 2
28346: PLUS
28347: ST_TO_ADDR
// continue ;
28348: GO 28148
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28350: LD_VAR 0 12
28354: PUSH
28355: LD_INT 1
28357: ARRAY
28358: PPUSH
28359: CALL_OW 266
28363: PUSH
28364: LD_INT 5
28366: EQUAL
28367: IFFALSE 28441
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28369: LD_VAR 0 12
28373: PUSH
28374: LD_INT 1
28376: ARRAY
28377: PPUSH
28378: CALL_OW 313
28382: PUSH
28383: LD_INT 3
28385: LESS
28386: IFFALSE 28422
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28388: LD_INT 0
28390: PPUSH
28391: LD_INT 5
28393: PUSH
28394: LD_INT 8
28396: PUSH
28397: LD_INT 9
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: PUSH
28405: LD_VAR 0 17
28409: ARRAY
28410: PPUSH
28411: LD_VAR 0 4
28415: PPUSH
28416: CALL_OW 380
28420: GO 28439
// PrepareHuman ( false , i , skill ) ;
28422: LD_INT 0
28424: PPUSH
28425: LD_VAR 0 8
28429: PPUSH
28430: LD_VAR 0 4
28434: PPUSH
28435: CALL_OW 380
// end else
28439: GO 28458
// PrepareHuman ( false , i , skill ) ;
28441: LD_INT 0
28443: PPUSH
28444: LD_VAR 0 8
28448: PPUSH
28449: LD_VAR 0 4
28453: PPUSH
28454: CALL_OW 380
// un := CreateHuman ;
28458: LD_ADDR_VAR 0 14
28462: PUSH
28463: CALL_OW 44
28467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28468: LD_ADDR_VAR 0 7
28472: PUSH
28473: LD_VAR 0 7
28477: PPUSH
28478: LD_INT 1
28480: PPUSH
28481: LD_VAR 0 14
28485: PPUSH
28486: CALL_OW 2
28490: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28491: LD_VAR 0 14
28495: PPUSH
28496: LD_VAR 0 12
28500: PUSH
28501: LD_INT 1
28503: ARRAY
28504: PPUSH
28505: CALL_OW 52
// end ;
28509: GO 28148
28511: POP
28512: POP
// end ;
28513: GO 27450
28515: POP
28516: POP
// result := result ^ buildings ;
28517: LD_ADDR_VAR 0 7
28521: PUSH
28522: LD_VAR 0 7
28526: PUSH
28527: LD_VAR 0 18
28531: ADD
28532: ST_TO_ADDR
// end else
28533: GO 28676
// begin for i = 1 to personel do
28535: LD_ADDR_VAR 0 8
28539: PUSH
28540: DOUBLE
28541: LD_INT 1
28543: DEC
28544: ST_TO_ADDR
28545: LD_VAR 0 6
28549: PUSH
28550: FOR_TO
28551: IFFALSE 28674
// begin if i > 4 then
28553: LD_VAR 0 8
28557: PUSH
28558: LD_INT 4
28560: GREATER
28561: IFFALSE 28565
// break ;
28563: GO 28674
// x := personel [ i ] ;
28565: LD_ADDR_VAR 0 13
28569: PUSH
28570: LD_VAR 0 6
28574: PUSH
28575: LD_VAR 0 8
28579: ARRAY
28580: ST_TO_ADDR
// if x = - 1 then
28581: LD_VAR 0 13
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: EQUAL
28590: IFFALSE 28594
// continue ;
28592: GO 28550
// PrepareHuman ( false , i , skill ) ;
28594: LD_INT 0
28596: PPUSH
28597: LD_VAR 0 8
28601: PPUSH
28602: LD_VAR 0 4
28606: PPUSH
28607: CALL_OW 380
// un := CreateHuman ;
28611: LD_ADDR_VAR 0 14
28615: PUSH
28616: CALL_OW 44
28620: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28621: LD_VAR 0 14
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 250
28635: PPUSH
28636: LD_VAR 0 1
28640: PPUSH
28641: CALL_OW 251
28645: PPUSH
28646: LD_INT 10
28648: PPUSH
28649: LD_INT 0
28651: PPUSH
28652: CALL_OW 50
// result := result ^ un ;
28656: LD_ADDR_VAR 0 7
28660: PUSH
28661: LD_VAR 0 7
28665: PUSH
28666: LD_VAR 0 14
28670: ADD
28671: ST_TO_ADDR
// end ;
28672: GO 28550
28674: POP
28675: POP
// end ; end ;
28676: LD_VAR 0 7
28680: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28681: LD_INT 0
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
28688: PPUSH
28689: PPUSH
28690: PPUSH
28691: PPUSH
28692: PPUSH
28693: PPUSH
28694: PPUSH
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
// result := false ;
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_INT 0
28706: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28707: LD_VAR 0 1
28711: NOT
28712: PUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 266
28722: PUSH
28723: LD_INT 32
28725: PUSH
28726: LD_INT 33
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: IN
28733: NOT
28734: OR
28735: IFFALSE 28739
// exit ;
28737: GO 29875
// nat := GetNation ( tower ) ;
28739: LD_ADDR_VAR 0 12
28743: PUSH
28744: LD_VAR 0 1
28748: PPUSH
28749: CALL_OW 248
28753: ST_TO_ADDR
// side := GetSide ( tower ) ;
28754: LD_ADDR_VAR 0 16
28758: PUSH
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL_OW 255
28768: ST_TO_ADDR
// x := GetX ( tower ) ;
28769: LD_ADDR_VAR 0 10
28773: PUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 250
28783: ST_TO_ADDR
// y := GetY ( tower ) ;
28784: LD_ADDR_VAR 0 11
28788: PUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 251
28798: ST_TO_ADDR
// if not x or not y then
28799: LD_VAR 0 10
28803: NOT
28804: PUSH
28805: LD_VAR 0 11
28809: NOT
28810: OR
28811: IFFALSE 28815
// exit ;
28813: GO 29875
// weapon := 0 ;
28815: LD_ADDR_VAR 0 18
28819: PUSH
28820: LD_INT 0
28822: ST_TO_ADDR
// fac_list := [ ] ;
28823: LD_ADDR_VAR 0 17
28827: PUSH
28828: EMPTY
28829: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
28830: LD_ADDR_VAR 0 6
28834: PUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 274
28844: PPUSH
28845: LD_VAR 0 2
28849: PPUSH
28850: CALL 26453 0 2
28854: PPUSH
28855: LD_INT 30
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 72
28869: ST_TO_ADDR
// if not factories then
28870: LD_VAR 0 6
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 29875
// for i in factories do
28879: LD_ADDR_VAR 0 8
28883: PUSH
28884: LD_VAR 0 6
28888: PUSH
28889: FOR_IN
28890: IFFALSE 28915
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28892: LD_ADDR_VAR 0 17
28896: PUSH
28897: LD_VAR 0 17
28901: PUSH
28902: LD_VAR 0 8
28906: PPUSH
28907: CALL_OW 478
28911: UNION
28912: ST_TO_ADDR
28913: GO 28889
28915: POP
28916: POP
// if not fac_list then
28917: LD_VAR 0 17
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 29875
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28926: LD_ADDR_VAR 0 5
28930: PUSH
28931: LD_INT 4
28933: PUSH
28934: LD_INT 5
28936: PUSH
28937: LD_INT 9
28939: PUSH
28940: LD_INT 10
28942: PUSH
28943: LD_INT 6
28945: PUSH
28946: LD_INT 7
28948: PUSH
28949: LD_INT 11
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 27
28963: PUSH
28964: LD_INT 28
28966: PUSH
28967: LD_INT 26
28969: PUSH
28970: LD_INT 30
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 43
28981: PUSH
28982: LD_INT 44
28984: PUSH
28985: LD_INT 46
28987: PUSH
28988: LD_INT 45
28990: PUSH
28991: LD_INT 47
28993: PUSH
28994: LD_INT 49
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: PUSH
29010: LD_VAR 0 12
29014: ARRAY
29015: ST_TO_ADDR
// for i in list do
29016: LD_ADDR_VAR 0 8
29020: PUSH
29021: LD_VAR 0 5
29025: PUSH
29026: FOR_IN
29027: IFFALSE 29060
// if not i in fac_list then
29029: LD_VAR 0 8
29033: PUSH
29034: LD_VAR 0 17
29038: IN
29039: NOT
29040: IFFALSE 29058
// list := list diff i ;
29042: LD_ADDR_VAR 0 5
29046: PUSH
29047: LD_VAR 0 5
29051: PUSH
29052: LD_VAR 0 8
29056: DIFF
29057: ST_TO_ADDR
29058: GO 29026
29060: POP
29061: POP
// if not list then
29062: LD_VAR 0 5
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29875
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29071: LD_VAR 0 12
29075: PUSH
29076: LD_INT 3
29078: EQUAL
29079: PUSH
29080: LD_INT 49
29082: PUSH
29083: LD_VAR 0 5
29087: IN
29088: AND
29089: PUSH
29090: LD_INT 31
29092: PPUSH
29093: LD_VAR 0 16
29097: PPUSH
29098: CALL_OW 321
29102: PUSH
29103: LD_INT 2
29105: EQUAL
29106: AND
29107: IFFALSE 29167
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29109: LD_INT 22
29111: PUSH
29112: LD_VAR 0 16
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 35
29123: PUSH
29124: LD_INT 49
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 91
29133: PUSH
29134: LD_VAR 0 1
29138: PUSH
29139: LD_INT 10
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 69
29156: NOT
29157: IFFALSE 29167
// weapon := ru_time_lapser ;
29159: LD_ADDR_VAR 0 18
29163: PUSH
29164: LD_INT 49
29166: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29167: LD_VAR 0 12
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: IN
29182: PUSH
29183: LD_INT 11
29185: PUSH
29186: LD_VAR 0 5
29190: IN
29191: PUSH
29192: LD_INT 30
29194: PUSH
29195: LD_VAR 0 5
29199: IN
29200: OR
29201: AND
29202: PUSH
29203: LD_INT 6
29205: PPUSH
29206: LD_VAR 0 16
29210: PPUSH
29211: CALL_OW 321
29215: PUSH
29216: LD_INT 2
29218: EQUAL
29219: AND
29220: IFFALSE 29385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29222: LD_INT 22
29224: PUSH
29225: LD_VAR 0 16
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 35
29239: PUSH
29240: LD_INT 11
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 35
29249: PUSH
29250: LD_INT 30
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 91
29264: PUSH
29265: LD_VAR 0 1
29269: PUSH
29270: LD_INT 18
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: PPUSH
29283: CALL_OW 69
29287: NOT
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_VAR 0 16
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 30
29306: PUSH
29307: LD_INT 32
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 30
29316: PUSH
29317: LD_INT 33
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 91
29331: PUSH
29332: LD_VAR 0 1
29336: PUSH
29337: LD_INT 12
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: PPUSH
29353: CALL_OW 69
29357: PUSH
29358: LD_INT 2
29360: GREATER
29361: AND
29362: IFFALSE 29385
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29364: LD_ADDR_VAR 0 18
29368: PUSH
29369: LD_INT 11
29371: PUSH
29372: LD_INT 30
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_VAR 0 12
29383: ARRAY
29384: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29385: LD_VAR 0 18
29389: NOT
29390: PUSH
29391: LD_INT 40
29393: PPUSH
29394: LD_VAR 0 16
29398: PPUSH
29399: CALL_OW 321
29403: PUSH
29404: LD_INT 2
29406: EQUAL
29407: AND
29408: PUSH
29409: LD_INT 7
29411: PUSH
29412: LD_VAR 0 5
29416: IN
29417: PUSH
29418: LD_INT 28
29420: PUSH
29421: LD_VAR 0 5
29425: IN
29426: OR
29427: PUSH
29428: LD_INT 45
29430: PUSH
29431: LD_VAR 0 5
29435: IN
29436: OR
29437: AND
29438: IFFALSE 29692
// begin hex := GetHexInfo ( x , y ) ;
29440: LD_ADDR_VAR 0 4
29444: PUSH
29445: LD_VAR 0 10
29449: PPUSH
29450: LD_VAR 0 11
29454: PPUSH
29455: CALL_OW 546
29459: ST_TO_ADDR
// if hex [ 1 ] then
29460: LD_VAR 0 4
29464: PUSH
29465: LD_INT 1
29467: ARRAY
29468: IFFALSE 29472
// exit ;
29470: GO 29875
// height := hex [ 2 ] ;
29472: LD_ADDR_VAR 0 15
29476: PUSH
29477: LD_VAR 0 4
29481: PUSH
29482: LD_INT 2
29484: ARRAY
29485: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29486: LD_ADDR_VAR 0 14
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 5
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: ST_TO_ADDR
// for i in tmp do
29509: LD_ADDR_VAR 0 8
29513: PUSH
29514: LD_VAR 0 14
29518: PUSH
29519: FOR_IN
29520: IFFALSE 29690
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29522: LD_ADDR_VAR 0 9
29526: PUSH
29527: LD_VAR 0 10
29531: PPUSH
29532: LD_VAR 0 8
29536: PPUSH
29537: LD_INT 5
29539: PPUSH
29540: CALL_OW 272
29544: PUSH
29545: LD_VAR 0 11
29549: PPUSH
29550: LD_VAR 0 8
29554: PPUSH
29555: LD_INT 5
29557: PPUSH
29558: CALL_OW 273
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29567: LD_VAR 0 9
29571: PUSH
29572: LD_INT 1
29574: ARRAY
29575: PPUSH
29576: LD_VAR 0 9
29580: PUSH
29581: LD_INT 2
29583: ARRAY
29584: PPUSH
29585: CALL_OW 488
29589: IFFALSE 29688
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
29591: LD_ADDR_VAR 0 4
29595: PUSH
29596: LD_VAR 0 9
29600: PUSH
29601: LD_INT 1
29603: ARRAY
29604: PPUSH
29605: LD_VAR 0 9
29609: PUSH
29610: LD_INT 2
29612: ARRAY
29613: PPUSH
29614: CALL_OW 546
29618: ST_TO_ADDR
// if hex [ 1 ] then
29619: LD_VAR 0 4
29623: PUSH
29624: LD_INT 1
29626: ARRAY
29627: IFFALSE 29631
// continue ;
29629: GO 29519
// h := hex [ 2 ] ;
29631: LD_ADDR_VAR 0 13
29635: PUSH
29636: LD_VAR 0 4
29640: PUSH
29641: LD_INT 2
29643: ARRAY
29644: ST_TO_ADDR
// if h + 7 < height then
29645: LD_VAR 0 13
29649: PUSH
29650: LD_INT 7
29652: PLUS
29653: PUSH
29654: LD_VAR 0 15
29658: LESS
29659: IFFALSE 29688
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29661: LD_ADDR_VAR 0 18
29665: PUSH
29666: LD_INT 7
29668: PUSH
29669: LD_INT 28
29671: PUSH
29672: LD_INT 45
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: PUSH
29680: LD_VAR 0 12
29684: ARRAY
29685: ST_TO_ADDR
// break ;
29686: GO 29690
// end ; end ; end ;
29688: GO 29519
29690: POP
29691: POP
// end ; if not weapon then
29692: LD_VAR 0 18
29696: NOT
29697: IFFALSE 29757
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29699: LD_ADDR_VAR 0 5
29703: PUSH
29704: LD_VAR 0 5
29708: PUSH
29709: LD_INT 11
29711: PUSH
29712: LD_INT 30
29714: PUSH
29715: LD_INT 49
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: DIFF
29723: ST_TO_ADDR
// if not list then
29724: LD_VAR 0 5
29728: NOT
29729: IFFALSE 29733
// exit ;
29731: GO 29875
// weapon := list [ rand ( 1 , list ) ] ;
29733: LD_ADDR_VAR 0 18
29737: PUSH
29738: LD_VAR 0 5
29742: PUSH
29743: LD_INT 1
29745: PPUSH
29746: LD_VAR 0 5
29750: PPUSH
29751: CALL_OW 12
29755: ARRAY
29756: ST_TO_ADDR
// end ; if weapon then
29757: LD_VAR 0 18
29761: IFFALSE 29875
// begin tmp := CostOfWeapon ( weapon ) ;
29763: LD_ADDR_VAR 0 14
29767: PUSH
29768: LD_VAR 0 18
29772: PPUSH
29773: CALL_OW 451
29777: ST_TO_ADDR
// j := GetBase ( tower ) ;
29778: LD_ADDR_VAR 0 9
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 274
29792: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29793: LD_VAR 0 9
29797: PPUSH
29798: LD_INT 1
29800: PPUSH
29801: CALL_OW 275
29805: PUSH
29806: LD_VAR 0 14
29810: PUSH
29811: LD_INT 1
29813: ARRAY
29814: GREATEREQUAL
29815: PUSH
29816: LD_VAR 0 9
29820: PPUSH
29821: LD_INT 2
29823: PPUSH
29824: CALL_OW 275
29828: PUSH
29829: LD_VAR 0 14
29833: PUSH
29834: LD_INT 2
29836: ARRAY
29837: GREATEREQUAL
29838: AND
29839: PUSH
29840: LD_VAR 0 9
29844: PPUSH
29845: LD_INT 3
29847: PPUSH
29848: CALL_OW 275
29852: PUSH
29853: LD_VAR 0 14
29857: PUSH
29858: LD_INT 3
29860: ARRAY
29861: GREATEREQUAL
29862: AND
29863: IFFALSE 29875
// result := weapon ;
29865: LD_ADDR_VAR 0 3
29869: PUSH
29870: LD_VAR 0 18
29874: ST_TO_ADDR
// end ; end ;
29875: LD_VAR 0 3
29879: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29880: LD_INT 0
29882: PPUSH
29883: PPUSH
// result := true ;
29884: LD_ADDR_VAR 0 3
29888: PUSH
29889: LD_INT 1
29891: ST_TO_ADDR
// if array1 = array2 then
29892: LD_VAR 0 1
29896: PUSH
29897: LD_VAR 0 2
29901: EQUAL
29902: IFFALSE 29962
// begin for i = 1 to array1 do
29904: LD_ADDR_VAR 0 4
29908: PUSH
29909: DOUBLE
29910: LD_INT 1
29912: DEC
29913: ST_TO_ADDR
29914: LD_VAR 0 1
29918: PUSH
29919: FOR_TO
29920: IFFALSE 29958
// if array1 [ i ] <> array2 [ i ] then
29922: LD_VAR 0 1
29926: PUSH
29927: LD_VAR 0 4
29931: ARRAY
29932: PUSH
29933: LD_VAR 0 2
29937: PUSH
29938: LD_VAR 0 4
29942: ARRAY
29943: NONEQUAL
29944: IFFALSE 29956
// begin result := false ;
29946: LD_ADDR_VAR 0 3
29950: PUSH
29951: LD_INT 0
29953: ST_TO_ADDR
// break ;
29954: GO 29958
// end ;
29956: GO 29919
29958: POP
29959: POP
// end else
29960: GO 29970
// result := false ;
29962: LD_ADDR_VAR 0 3
29966: PUSH
29967: LD_INT 0
29969: ST_TO_ADDR
// end ;
29970: LD_VAR 0 3
29974: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29975: LD_INT 0
29977: PPUSH
29978: PPUSH
29979: PPUSH
// pom := GetBase ( fac ) ;
29980: LD_ADDR_VAR 0 5
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 274
29994: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29995: LD_ADDR_VAR 0 4
29999: PUSH
30000: LD_VAR 0 2
30004: PUSH
30005: LD_INT 1
30007: ARRAY
30008: PPUSH
30009: LD_VAR 0 2
30013: PUSH
30014: LD_INT 2
30016: ARRAY
30017: PPUSH
30018: LD_VAR 0 2
30022: PUSH
30023: LD_INT 3
30025: ARRAY
30026: PPUSH
30027: LD_VAR 0 2
30031: PUSH
30032: LD_INT 4
30034: ARRAY
30035: PPUSH
30036: CALL_OW 449
30040: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30041: LD_ADDR_VAR 0 3
30045: PUSH
30046: LD_VAR 0 5
30050: PPUSH
30051: LD_INT 1
30053: PPUSH
30054: CALL_OW 275
30058: PUSH
30059: LD_VAR 0 4
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: GREATEREQUAL
30068: PUSH
30069: LD_VAR 0 5
30073: PPUSH
30074: LD_INT 2
30076: PPUSH
30077: CALL_OW 275
30081: PUSH
30082: LD_VAR 0 4
30086: PUSH
30087: LD_INT 2
30089: ARRAY
30090: GREATEREQUAL
30091: AND
30092: PUSH
30093: LD_VAR 0 5
30097: PPUSH
30098: LD_INT 3
30100: PPUSH
30101: CALL_OW 275
30105: PUSH
30106: LD_VAR 0 4
30110: PUSH
30111: LD_INT 3
30113: ARRAY
30114: GREATEREQUAL
30115: AND
30116: ST_TO_ADDR
// end ;
30117: LD_VAR 0 3
30121: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30122: LD_INT 0
30124: PPUSH
30125: PPUSH
30126: PPUSH
30127: PPUSH
// pom := GetBase ( building ) ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 274
30142: ST_TO_ADDR
// if not pom then
30143: LD_VAR 0 3
30147: NOT
30148: IFFALSE 30152
// exit ;
30150: GO 30322
// btype := GetBType ( building ) ;
30152: LD_ADDR_VAR 0 5
30156: PUSH
30157: LD_VAR 0 1
30161: PPUSH
30162: CALL_OW 266
30166: ST_TO_ADDR
// if btype = b_armoury then
30167: LD_VAR 0 5
30171: PUSH
30172: LD_INT 4
30174: EQUAL
30175: IFFALSE 30185
// btype := b_barracks ;
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: LD_INT 5
30184: ST_TO_ADDR
// if btype = b_depot then
30185: LD_VAR 0 5
30189: PUSH
30190: LD_INT 0
30192: EQUAL
30193: IFFALSE 30203
// btype := b_warehouse ;
30195: LD_ADDR_VAR 0 5
30199: PUSH
30200: LD_INT 1
30202: ST_TO_ADDR
// if btype = b_workshop then
30203: LD_VAR 0 5
30207: PUSH
30208: LD_INT 2
30210: EQUAL
30211: IFFALSE 30221
// btype := b_factory ;
30213: LD_ADDR_VAR 0 5
30217: PUSH
30218: LD_INT 3
30220: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30221: LD_ADDR_VAR 0 4
30225: PUSH
30226: LD_VAR 0 5
30230: PPUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 248
30240: PPUSH
30241: CALL_OW 450
30245: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30246: LD_ADDR_VAR 0 2
30250: PUSH
30251: LD_VAR 0 3
30255: PPUSH
30256: LD_INT 1
30258: PPUSH
30259: CALL_OW 275
30263: PUSH
30264: LD_VAR 0 4
30268: PUSH
30269: LD_INT 1
30271: ARRAY
30272: GREATEREQUAL
30273: PUSH
30274: LD_VAR 0 3
30278: PPUSH
30279: LD_INT 2
30281: PPUSH
30282: CALL_OW 275
30286: PUSH
30287: LD_VAR 0 4
30291: PUSH
30292: LD_INT 2
30294: ARRAY
30295: GREATEREQUAL
30296: AND
30297: PUSH
30298: LD_VAR 0 3
30302: PPUSH
30303: LD_INT 3
30305: PPUSH
30306: CALL_OW 275
30310: PUSH
30311: LD_VAR 0 4
30315: PUSH
30316: LD_INT 3
30318: ARRAY
30319: GREATEREQUAL
30320: AND
30321: ST_TO_ADDR
// end ;
30322: LD_VAR 0 2
30326: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30327: LD_INT 0
30329: PPUSH
30330: PPUSH
30331: PPUSH
// pom := GetBase ( building ) ;
30332: LD_ADDR_VAR 0 4
30336: PUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL_OW 274
30346: ST_TO_ADDR
// if not pom then
30347: LD_VAR 0 4
30351: NOT
30352: IFFALSE 30356
// exit ;
30354: GO 30457
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30356: LD_ADDR_VAR 0 5
30360: PUSH
30361: LD_VAR 0 2
30365: PPUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 248
30375: PPUSH
30376: CALL_OW 450
30380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30381: LD_ADDR_VAR 0 3
30385: PUSH
30386: LD_VAR 0 4
30390: PPUSH
30391: LD_INT 1
30393: PPUSH
30394: CALL_OW 275
30398: PUSH
30399: LD_VAR 0 5
30403: PUSH
30404: LD_INT 1
30406: ARRAY
30407: GREATEREQUAL
30408: PUSH
30409: LD_VAR 0 4
30413: PPUSH
30414: LD_INT 2
30416: PPUSH
30417: CALL_OW 275
30421: PUSH
30422: LD_VAR 0 5
30426: PUSH
30427: LD_INT 2
30429: ARRAY
30430: GREATEREQUAL
30431: AND
30432: PUSH
30433: LD_VAR 0 4
30437: PPUSH
30438: LD_INT 3
30440: PPUSH
30441: CALL_OW 275
30445: PUSH
30446: LD_VAR 0 5
30450: PUSH
30451: LD_INT 3
30453: ARRAY
30454: GREATEREQUAL
30455: AND
30456: ST_TO_ADDR
// end ;
30457: LD_VAR 0 3
30461: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30462: LD_INT 0
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
30470: PPUSH
30471: PPUSH
30472: PPUSH
30473: PPUSH
// result := false ;
30474: LD_ADDR_VAR 0 6
30478: PUSH
30479: LD_INT 0
30481: ST_TO_ADDR
// if not base or not btype or not x or not y then
30482: LD_VAR 0 1
30486: NOT
30487: PUSH
30488: LD_VAR 0 2
30492: NOT
30493: OR
30494: PUSH
30495: LD_VAR 0 3
30499: NOT
30500: OR
30501: PUSH
30502: LD_VAR 0 4
30506: NOT
30507: OR
30508: IFFALSE 30512
// exit ;
30510: GO 31121
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
30512: LD_ADDR_VAR 0 12
30516: PUSH
30517: LD_VAR 0 2
30521: PPUSH
30522: LD_VAR 0 3
30526: PPUSH
30527: LD_VAR 0 4
30531: PPUSH
30532: LD_VAR 0 5
30536: PPUSH
30537: LD_VAR 0 1
30541: PUSH
30542: LD_INT 1
30544: ARRAY
30545: PPUSH
30546: CALL_OW 248
30550: PPUSH
30551: LD_INT 0
30553: PPUSH
30554: CALL 31958 0 6
30558: ST_TO_ADDR
// if not hexes then
30559: LD_VAR 0 12
30563: NOT
30564: IFFALSE 30568
// exit ;
30566: GO 31121
// for i = 1 to hexes do
30568: LD_ADDR_VAR 0 7
30572: PUSH
30573: DOUBLE
30574: LD_INT 1
30576: DEC
30577: ST_TO_ADDR
30578: LD_VAR 0 12
30582: PUSH
30583: FOR_TO
30584: IFFALSE 31119
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30586: LD_ADDR_VAR 0 11
30590: PUSH
30591: LD_VAR 0 12
30595: PUSH
30596: LD_VAR 0 7
30600: ARRAY
30601: PUSH
30602: LD_INT 1
30604: ARRAY
30605: PPUSH
30606: LD_VAR 0 12
30610: PUSH
30611: LD_VAR 0 7
30615: ARRAY
30616: PUSH
30617: LD_INT 2
30619: ARRAY
30620: PPUSH
30621: CALL_OW 428
30625: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30626: LD_VAR 0 12
30630: PUSH
30631: LD_VAR 0 7
30635: ARRAY
30636: PUSH
30637: LD_INT 1
30639: ARRAY
30640: PPUSH
30641: LD_VAR 0 12
30645: PUSH
30646: LD_VAR 0 7
30650: ARRAY
30651: PUSH
30652: LD_INT 2
30654: ARRAY
30655: PPUSH
30656: CALL_OW 351
30660: PUSH
30661: LD_VAR 0 12
30665: PUSH
30666: LD_VAR 0 7
30670: ARRAY
30671: PUSH
30672: LD_INT 1
30674: ARRAY
30675: PPUSH
30676: LD_VAR 0 12
30680: PUSH
30681: LD_VAR 0 7
30685: ARRAY
30686: PUSH
30687: LD_INT 2
30689: ARRAY
30690: PPUSH
30691: CALL_OW 488
30695: NOT
30696: OR
30697: PUSH
30698: LD_VAR 0 11
30702: PPUSH
30703: CALL_OW 247
30707: PUSH
30708: LD_INT 3
30710: EQUAL
30711: OR
30712: IFFALSE 30718
// exit ;
30714: POP
30715: POP
30716: GO 31121
// if not tmp or not tmp in base then
30718: LD_VAR 0 11
30722: NOT
30723: PUSH
30724: LD_VAR 0 11
30728: PUSH
30729: LD_VAR 0 1
30733: IN
30734: NOT
30735: OR
30736: IFFALSE 30740
// continue ;
30738: GO 30583
// result := true ;
30740: LD_ADDR_VAR 0 6
30744: PUSH
30745: LD_INT 1
30747: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30748: LD_ADDR_VAR 0 15
30752: PUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_INT 22
30760: PUSH
30761: LD_VAR 0 11
30765: PPUSH
30766: CALL_OW 255
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 30
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PPUSH
30807: CALL_OW 72
30811: ST_TO_ADDR
// if dep then
30812: LD_VAR 0 15
30816: IFFALSE 30952
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30818: LD_ADDR_VAR 0 14
30822: PUSH
30823: LD_VAR 0 15
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: CALL_OW 250
30836: PPUSH
30837: LD_VAR 0 15
30841: PUSH
30842: LD_INT 1
30844: ARRAY
30845: PPUSH
30846: CALL_OW 254
30850: PPUSH
30851: LD_INT 5
30853: PPUSH
30854: CALL_OW 272
30858: PUSH
30859: LD_VAR 0 15
30863: PUSH
30864: LD_INT 1
30866: ARRAY
30867: PPUSH
30868: CALL_OW 251
30872: PPUSH
30873: LD_VAR 0 15
30877: PUSH
30878: LD_INT 1
30880: ARRAY
30881: PPUSH
30882: CALL_OW 254
30886: PPUSH
30887: LD_INT 5
30889: PPUSH
30890: CALL_OW 273
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30899: LD_VAR 0 14
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PPUSH
30908: LD_VAR 0 14
30912: PUSH
30913: LD_INT 2
30915: ARRAY
30916: PPUSH
30917: CALL_OW 488
30921: IFFALSE 30952
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30923: LD_VAR 0 11
30927: PPUSH
30928: LD_VAR 0 14
30932: PUSH
30933: LD_INT 1
30935: ARRAY
30936: PPUSH
30937: LD_VAR 0 14
30941: PUSH
30942: LD_INT 2
30944: ARRAY
30945: PPUSH
30946: CALL_OW 111
// continue ;
30950: GO 30583
// end ; end ; r := GetDir ( tmp ) ;
30952: LD_ADDR_VAR 0 13
30956: PUSH
30957: LD_VAR 0 11
30961: PPUSH
30962: CALL_OW 254
30966: ST_TO_ADDR
// if r = 5 then
30967: LD_VAR 0 13
30971: PUSH
30972: LD_INT 5
30974: EQUAL
30975: IFFALSE 30985
// r := 0 ;
30977: LD_ADDR_VAR 0 13
30981: PUSH
30982: LD_INT 0
30984: ST_TO_ADDR
// for j = r to 5 do
30985: LD_ADDR_VAR 0 8
30989: PUSH
30990: DOUBLE
30991: LD_VAR 0 13
30995: DEC
30996: ST_TO_ADDR
30997: LD_INT 5
30999: PUSH
31000: FOR_TO
31001: IFFALSE 31115
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31003: LD_ADDR_VAR 0 9
31007: PUSH
31008: LD_VAR 0 11
31012: PPUSH
31013: CALL_OW 250
31017: PPUSH
31018: LD_VAR 0 8
31022: PPUSH
31023: LD_INT 2
31025: PPUSH
31026: CALL_OW 272
31030: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31031: LD_ADDR_VAR 0 10
31035: PUSH
31036: LD_VAR 0 11
31040: PPUSH
31041: CALL_OW 251
31045: PPUSH
31046: LD_VAR 0 8
31050: PPUSH
31051: LD_INT 2
31053: PPUSH
31054: CALL_OW 273
31058: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31059: LD_VAR 0 9
31063: PPUSH
31064: LD_VAR 0 10
31068: PPUSH
31069: CALL_OW 488
31073: PUSH
31074: LD_VAR 0 9
31078: PPUSH
31079: LD_VAR 0 10
31083: PPUSH
31084: CALL_OW 428
31088: NOT
31089: AND
31090: IFFALSE 31113
// begin ComMoveXY ( tmp , _x , _y ) ;
31092: LD_VAR 0 11
31096: PPUSH
31097: LD_VAR 0 9
31101: PPUSH
31102: LD_VAR 0 10
31106: PPUSH
31107: CALL_OW 111
// break ;
31111: GO 31115
// end ; end ;
31113: GO 31000
31115: POP
31116: POP
// end ;
31117: GO 30583
31119: POP
31120: POP
// end ;
31121: LD_VAR 0 6
31125: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31126: LD_INT 0
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
31132: PPUSH
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
// result := false ;
31138: LD_ADDR_VAR 0 6
31142: PUSH
31143: LD_INT 0
31145: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31146: LD_VAR 0 1
31150: NOT
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 266
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: IN
31172: NOT
31173: OR
31174: PUSH
31175: LD_VAR 0 2
31179: NOT
31180: OR
31181: PUSH
31182: LD_VAR 0 5
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: LD_INT 5
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: IN
31213: NOT
31214: OR
31215: PUSH
31216: LD_VAR 0 3
31220: PPUSH
31221: LD_VAR 0 4
31225: PPUSH
31226: CALL_OW 488
31230: NOT
31231: OR
31232: IFFALSE 31236
// exit ;
31234: GO 31953
// pom := GetBase ( depot ) ;
31236: LD_ADDR_VAR 0 10
31240: PUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: CALL_OW 274
31250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31251: LD_ADDR_VAR 0 11
31255: PUSH
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: CALL_OW 248
31270: PPUSH
31271: CALL_OW 450
31275: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31276: LD_VAR 0 10
31280: PPUSH
31281: LD_INT 1
31283: PPUSH
31284: CALL_OW 275
31288: PUSH
31289: LD_VAR 0 11
31293: PUSH
31294: LD_INT 1
31296: ARRAY
31297: GREATEREQUAL
31298: PUSH
31299: LD_VAR 0 10
31303: PPUSH
31304: LD_INT 2
31306: PPUSH
31307: CALL_OW 275
31311: PUSH
31312: LD_VAR 0 11
31316: PUSH
31317: LD_INT 2
31319: ARRAY
31320: GREATEREQUAL
31321: AND
31322: PUSH
31323: LD_VAR 0 10
31327: PPUSH
31328: LD_INT 3
31330: PPUSH
31331: CALL_OW 275
31335: PUSH
31336: LD_VAR 0 11
31340: PUSH
31341: LD_INT 3
31343: ARRAY
31344: GREATEREQUAL
31345: AND
31346: NOT
31347: IFFALSE 31351
// exit ;
31349: GO 31953
// if GetBType ( depot ) = b_depot then
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 266
31360: PUSH
31361: LD_INT 0
31363: EQUAL
31364: IFFALSE 31376
// dist := 28 else
31366: LD_ADDR_VAR 0 14
31370: PUSH
31371: LD_INT 28
31373: ST_TO_ADDR
31374: GO 31384
// dist := 36 ;
31376: LD_ADDR_VAR 0 14
31380: PUSH
31381: LD_INT 36
31383: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31384: LD_VAR 0 1
31388: PPUSH
31389: LD_VAR 0 3
31393: PPUSH
31394: LD_VAR 0 4
31398: PPUSH
31399: CALL_OW 297
31403: PUSH
31404: LD_VAR 0 14
31408: GREATER
31409: IFFALSE 31413
// exit ;
31411: GO 31953
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31413: LD_ADDR_VAR 0 12
31417: PUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: LD_VAR 0 4
31432: PPUSH
31433: LD_VAR 0 5
31437: PPUSH
31438: LD_VAR 0 1
31442: PPUSH
31443: CALL_OW 248
31447: PPUSH
31448: LD_INT 0
31450: PPUSH
31451: CALL 31958 0 6
31455: ST_TO_ADDR
// if not hexes then
31456: LD_VAR 0 12
31460: NOT
31461: IFFALSE 31465
// exit ;
31463: GO 31953
// hex := GetHexInfo ( x , y ) ;
31465: LD_ADDR_VAR 0 15
31469: PUSH
31470: LD_VAR 0 3
31474: PPUSH
31475: LD_VAR 0 4
31479: PPUSH
31480: CALL_OW 546
31484: ST_TO_ADDR
// if hex [ 1 ] then
31485: LD_VAR 0 15
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: IFFALSE 31497
// exit ;
31495: GO 31953
// height := hex [ 2 ] ;
31497: LD_ADDR_VAR 0 13
31501: PUSH
31502: LD_VAR 0 15
31506: PUSH
31507: LD_INT 2
31509: ARRAY
31510: ST_TO_ADDR
// for i = 1 to hexes do
31511: LD_ADDR_VAR 0 7
31515: PUSH
31516: DOUBLE
31517: LD_INT 1
31519: DEC
31520: ST_TO_ADDR
31521: LD_VAR 0 12
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31857
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31529: LD_VAR 0 12
31533: PUSH
31534: LD_VAR 0 7
31538: ARRAY
31539: PUSH
31540: LD_INT 1
31542: ARRAY
31543: PPUSH
31544: LD_VAR 0 12
31548: PUSH
31549: LD_VAR 0 7
31553: ARRAY
31554: PUSH
31555: LD_INT 2
31557: ARRAY
31558: PPUSH
31559: CALL_OW 488
31563: NOT
31564: PUSH
31565: LD_VAR 0 12
31569: PUSH
31570: LD_VAR 0 7
31574: ARRAY
31575: PUSH
31576: LD_INT 1
31578: ARRAY
31579: PPUSH
31580: LD_VAR 0 12
31584: PUSH
31585: LD_VAR 0 7
31589: ARRAY
31590: PUSH
31591: LD_INT 2
31593: ARRAY
31594: PPUSH
31595: CALL_OW 428
31599: PUSH
31600: LD_INT 0
31602: GREATER
31603: OR
31604: PUSH
31605: LD_VAR 0 12
31609: PUSH
31610: LD_VAR 0 7
31614: ARRAY
31615: PUSH
31616: LD_INT 1
31618: ARRAY
31619: PPUSH
31620: LD_VAR 0 12
31624: PUSH
31625: LD_VAR 0 7
31629: ARRAY
31630: PUSH
31631: LD_INT 2
31633: ARRAY
31634: PPUSH
31635: CALL_OW 351
31639: OR
31640: IFFALSE 31646
// exit ;
31642: POP
31643: POP
31644: GO 31953
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31646: LD_ADDR_VAR 0 8
31650: PUSH
31651: LD_VAR 0 12
31655: PUSH
31656: LD_VAR 0 7
31660: ARRAY
31661: PUSH
31662: LD_INT 1
31664: ARRAY
31665: PPUSH
31666: LD_VAR 0 12
31670: PUSH
31671: LD_VAR 0 7
31675: ARRAY
31676: PUSH
31677: LD_INT 2
31679: ARRAY
31680: PPUSH
31681: CALL_OW 546
31685: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31686: LD_VAR 0 8
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: PUSH
31695: LD_VAR 0 8
31699: PUSH
31700: LD_INT 2
31702: ARRAY
31703: PUSH
31704: LD_VAR 0 13
31708: PUSH
31709: LD_INT 2
31711: PLUS
31712: GREATER
31713: OR
31714: PUSH
31715: LD_VAR 0 8
31719: PUSH
31720: LD_INT 2
31722: ARRAY
31723: PUSH
31724: LD_VAR 0 13
31728: PUSH
31729: LD_INT 2
31731: MINUS
31732: LESS
31733: OR
31734: PUSH
31735: LD_VAR 0 8
31739: PUSH
31740: LD_INT 3
31742: ARRAY
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 8
31749: PUSH
31750: LD_INT 9
31752: PUSH
31753: LD_INT 10
31755: PUSH
31756: LD_INT 11
31758: PUSH
31759: LD_INT 12
31761: PUSH
31762: LD_INT 13
31764: PUSH
31765: LD_INT 16
31767: PUSH
31768: LD_INT 17
31770: PUSH
31771: LD_INT 18
31773: PUSH
31774: LD_INT 19
31776: PUSH
31777: LD_INT 20
31779: PUSH
31780: LD_INT 21
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: IN
31798: NOT
31799: OR
31800: PUSH
31801: LD_VAR 0 8
31805: PUSH
31806: LD_INT 5
31808: ARRAY
31809: NOT
31810: OR
31811: PUSH
31812: LD_VAR 0 8
31816: PUSH
31817: LD_INT 6
31819: ARRAY
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 7
31829: PUSH
31830: LD_INT 9
31832: PUSH
31833: LD_INT 10
31835: PUSH
31836: LD_INT 11
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: IN
31847: NOT
31848: OR
31849: IFFALSE 31855
// exit ;
31851: POP
31852: POP
31853: GO 31953
// end ;
31855: GO 31526
31857: POP
31858: POP
// side := GetSide ( depot ) ;
31859: LD_ADDR_VAR 0 9
31863: PUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: CALL_OW 255
31873: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31874: LD_VAR 0 9
31878: PPUSH
31879: LD_VAR 0 3
31883: PPUSH
31884: LD_VAR 0 4
31888: PPUSH
31889: LD_INT 20
31891: PPUSH
31892: CALL 24607 0 4
31896: PUSH
31897: LD_INT 4
31899: ARRAY
31900: IFFALSE 31904
// exit ;
31902: GO 31953
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31904: LD_VAR 0 2
31908: PUSH
31909: LD_INT 29
31911: PUSH
31912: LD_INT 30
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: IN
31919: PUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: LD_VAR 0 4
31929: PPUSH
31930: LD_VAR 0 9
31934: PPUSH
31935: CALL_OW 440
31939: NOT
31940: AND
31941: IFFALSE 31945
// exit ;
31943: GO 31953
// result := true ;
31945: LD_ADDR_VAR 0 6
31949: PUSH
31950: LD_INT 1
31952: ST_TO_ADDR
// end ;
31953: LD_VAR 0 6
31957: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
31958: LD_INT 0
31960: PPUSH
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
31974: PPUSH
31975: PPUSH
31976: PPUSH
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
32010: PPUSH
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
// result = [ ] ;
32018: LD_ADDR_VAR 0 7
32022: PUSH
32023: EMPTY
32024: ST_TO_ADDR
// temp_list = [ ] ;
32025: LD_ADDR_VAR 0 9
32029: PUSH
32030: EMPTY
32031: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32032: LD_VAR 0 4
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: LD_INT 4
32051: PUSH
32052: LD_INT 5
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: IN
32063: NOT
32064: PUSH
32065: LD_VAR 0 1
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: IN
32080: PUSH
32081: LD_VAR 0 5
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: IN
32100: NOT
32101: AND
32102: OR
32103: IFFALSE 32107
// exit ;
32105: GO 50498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32107: LD_VAR 0 1
32111: PUSH
32112: LD_INT 6
32114: PUSH
32115: LD_INT 7
32117: PUSH
32118: LD_INT 8
32120: PUSH
32121: LD_INT 13
32123: PUSH
32124: LD_INT 12
32126: PUSH
32127: LD_INT 15
32129: PUSH
32130: LD_INT 11
32132: PUSH
32133: LD_INT 14
32135: PUSH
32136: LD_INT 10
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: IN
32150: IFFALSE 32160
// btype = b_lab ;
32152: LD_ADDR_VAR 0 1
32156: PUSH
32157: LD_INT 6
32159: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32160: LD_VAR 0 6
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: IN
32179: NOT
32180: PUSH
32181: LD_VAR 0 1
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: LD_INT 6
32200: PUSH
32201: LD_INT 36
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: LD_INT 31
32212: PUSH
32213: LD_INT 32
32215: PUSH
32216: LD_INT 33
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: IN
32232: NOT
32233: PUSH
32234: LD_VAR 0 6
32238: PUSH
32239: LD_INT 1
32241: EQUAL
32242: AND
32243: OR
32244: PUSH
32245: LD_VAR 0 1
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: IN
32260: NOT
32261: PUSH
32262: LD_VAR 0 6
32266: PUSH
32267: LD_INT 2
32269: EQUAL
32270: AND
32271: OR
32272: IFFALSE 32282
// mode = 0 ;
32274: LD_ADDR_VAR 0 6
32278: PUSH
32279: LD_INT 0
32281: ST_TO_ADDR
// case mode of 0 :
32282: LD_VAR 0 6
32286: PUSH
32287: LD_INT 0
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 43748
32295: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32296: LD_ADDR_VAR 0 11
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 3
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32489: LD_ADDR_VAR 0 12
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: NEG
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32685: LD_ADDR_VAR 0 13
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: NEG
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: LD_INT 2
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: NEG
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 3
32844: NEG
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 3
32856: NEG
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32884: LD_ADDR_VAR 0 14
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: LD_INT 2
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 2
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: LD_INT 3
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 3
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33080: LD_ADDR_VAR 0 15
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: NEG
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 3
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33273: LD_ADDR_VAR 0 16
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33466: LD_ADDR_VAR 0 17
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: NEG
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: NEG
33666: PUSH
33667: LD_INT 2
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33696: LD_ADDR_VAR 0 18
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33926: LD_ADDR_VAR 0 19
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 2
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34156: LD_ADDR_VAR 0 20
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 2
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34386: LD_ADDR_VAR 0 21
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: NEG
34586: PUSH
34587: LD_INT 2
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34616: LD_ADDR_VAR 0 22
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 2
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: NEG
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34846: LD_ADDR_VAR 0 23
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: LD_INT 3
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 3
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35126: LD_ADDR_VAR 0 24
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 2
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 3
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35402: LD_ADDR_VAR 0 25
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 3
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 2
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35676: LD_ADDR_VAR 0 26
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: NEG
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: NEG
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35952: LD_ADDR_VAR 0 27
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: LD_INT 2
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 3
36197: NEG
36198: PUSH
36199: LD_INT 2
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36232: LD_ADDR_VAR 0 28
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: NEG
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: NEG
36444: PUSH
36445: LD_INT 3
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: LD_INT 3
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 3
36467: NEG
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 3
36479: NEG
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36514: LD_ADDR_VAR 0 29
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 3
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: LD_INT 2
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36793: LD_ADDR_VAR 0 30
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 3
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 3
37036: NEG
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37071: LD_ADDR_VAR 0 31
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37349: LD_ADDR_VAR 0 32
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 3
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 3
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37627: LD_ADDR_VAR 0 33
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 3
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 3
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 3
37871: NEG
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37906: LD_ADDR_VAR 0 34
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 3
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 3
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38186: LD_ADDR_VAR 0 35
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38298: LD_ADDR_VAR 0 36
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38410: LD_ADDR_VAR 0 37
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38522: LD_ADDR_VAR 0 38
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38634: LD_ADDR_VAR 0 39
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38746: LD_ADDR_VAR 0 40
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38858: LD_ADDR_VAR 0 41
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 3
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 3
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 3
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: NEG
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: NEG
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39208: LD_ADDR_VAR 0 42
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 3
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 3
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39558: LD_ADDR_VAR 0 43
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 3
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 3
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: NEG
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39906: LD_ADDR_VAR 0 44
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 3
40149: PUSH
40150: LD_INT 3
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: NEG
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40256: LD_ADDR_VAR 0 45
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: LD_INT 3
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 3
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 3
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: LD_INT 3
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 3
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 3
40553: NEG
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: LD_INT 3
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40606: LD_ADDR_VAR 0 46
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 3
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 3
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 3
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 3
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: NEG
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40954: LD_ADDR_VAR 0 47
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41105: LD_ADDR_VAR 0 48
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41252: LD_ADDR_VAR 0 49
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41396: LD_ADDR_VAR 0 50
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41540: LD_ADDR_VAR 0 51
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41687: LD_ADDR_VAR 0 52
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41838: LD_ADDR_VAR 0 53
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42068: LD_ADDR_VAR 0 54
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42298: LD_ADDR_VAR 0 55
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42528: LD_ADDR_VAR 0 56
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42758: LD_ADDR_VAR 0 57
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 2
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42988: LD_ADDR_VAR 0 58
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43218: LD_ADDR_VAR 0 59
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43306: LD_ADDR_VAR 0 60
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43394: LD_ADDR_VAR 0 61
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43482: LD_ADDR_VAR 0 62
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43570: LD_ADDR_VAR 0 63
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43658: LD_ADDR_VAR 0 64
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: ST_TO_ADDR
// end ; 1 :
43746: GO 49643
43748: LD_INT 1
43750: DOUBLE
43751: EQUAL
43752: IFTRUE 43756
43754: GO 46379
43756: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43757: LD_ADDR_VAR 0 11
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 3
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43801: LD_ADDR_VAR 0 12
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43842: LD_ADDR_VAR 0 13
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: LD_INT 3
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43882: LD_ADDR_VAR 0 14
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 3
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43923: LD_ADDR_VAR 0 15
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 3
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43967: LD_ADDR_VAR 0 16
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: LD_INT 3
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: NEG
43999: PUSH
44000: LD_INT 3
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44013: LD_ADDR_VAR 0 17
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 3
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44057: LD_ADDR_VAR 0 18
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 3
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44098: LD_ADDR_VAR 0 19
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: LD_INT 3
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44138: LD_ADDR_VAR 0 20
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 3
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44179: LD_ADDR_VAR 0 21
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: NEG
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44223: LD_ADDR_VAR 0 22
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 3
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: LD_INT 3
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44269: LD_ADDR_VAR 0 23
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 4
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 3
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44313: LD_ADDR_VAR 0 24
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 4
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44354: LD_ADDR_VAR 0 25
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 3
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 4
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: LD_INT 4
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44394: LD_ADDR_VAR 0 26
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 4
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 3
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44435: LD_ADDR_VAR 0 27
44439: PUSH
44440: LD_INT 3
44442: NEG
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 4
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44479: LD_ADDR_VAR 0 28
44483: PUSH
44484: LD_INT 3
44486: NEG
44487: PUSH
44488: LD_INT 3
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: LD_INT 4
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 4
44510: NEG
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: LIST
44524: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44525: LD_ADDR_VAR 0 29
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 3
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 4
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 4
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 5
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 5
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 4
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 6
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 6
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 5
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44680: LD_ADDR_VAR 0 30
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 4
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 4
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 4
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 5
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 5
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 5
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 6
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 6
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44823: LD_ADDR_VAR 0 31
44827: PUSH
44828: LD_INT 3
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 3
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 3
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 4
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 4
44870: PUSH
44871: LD_INT 4
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: LD_INT 4
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 5
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 5
44900: PUSH
44901: LD_INT 5
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 4
44910: PUSH
44911: LD_INT 5
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 6
44920: PUSH
44921: LD_INT 5
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 6
44930: PUSH
44931: LD_INT 6
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: LD_INT 6
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44962: LD_ADDR_VAR 0 32
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 3
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 4
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 4
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 5
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 5
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 4
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 6
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 6
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 5
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45105: LD_ADDR_VAR 0 33
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 3
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 4
45157: NEG
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 4
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 4
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 5
45191: NEG
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 5
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 5
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 6
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 6
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45260: LD_ADDR_VAR 0 34
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 3
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: NEG
45292: PUSH
45293: LD_INT 3
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 3
45303: NEG
45304: PUSH
45305: LD_INT 4
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 4
45315: NEG
45316: PUSH
45317: LD_INT 3
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 4
45327: NEG
45328: PUSH
45329: LD_INT 4
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 4
45339: NEG
45340: PUSH
45341: LD_INT 5
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 5
45351: NEG
45352: PUSH
45353: LD_INT 4
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 5
45363: NEG
45364: PUSH
45365: LD_INT 5
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 5
45375: NEG
45376: PUSH
45377: LD_INT 6
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 6
45387: NEG
45388: PUSH
45389: LD_INT 5
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 6
45399: NEG
45400: PUSH
45401: LD_INT 6
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45423: LD_ADDR_VAR 0 41
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 3
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45467: LD_ADDR_VAR 0 42
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45508: LD_ADDR_VAR 0 43
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45548: LD_ADDR_VAR 0 44
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45589: LD_ADDR_VAR 0 45
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45633: LD_ADDR_VAR 0 46
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 3
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 3
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45679: LD_ADDR_VAR 0 47
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 3
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 3
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45712: LD_ADDR_VAR 0 48
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45743: LD_ADDR_VAR 0 49
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45772: LD_ADDR_VAR 0 50
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: LD_INT 3
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 3
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45801: LD_ADDR_VAR 0 51
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45832: LD_ADDR_VAR 0 52
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45865: LD_ADDR_VAR 0 53
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45909: LD_ADDR_VAR 0 54
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45950: LD_ADDR_VAR 0 55
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 3
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: LD_INT 3
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45990: LD_ADDR_VAR 0 56
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46031: LD_ADDR_VAR 0 57
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46075: LD_ADDR_VAR 0 58
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46121: LD_ADDR_VAR 0 59
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46165: LD_ADDR_VAR 0 60
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46206: LD_ADDR_VAR 0 61
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46246: LD_ADDR_VAR 0 62
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46287: LD_ADDR_VAR 0 63
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46331: LD_ADDR_VAR 0 64
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// end ; 2 :
46377: GO 49643
46379: LD_INT 2
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46387
46385: GO 49642
46387: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46388: LD_ADDR_VAR 0 29
46392: PUSH
46393: LD_INT 4
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 4
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 5
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 5
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: LD_INT 3
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 4
46508: PUSH
46509: LD_INT 3
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 4
46518: PUSH
46519: LD_INT 4
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: LD_INT 4
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 4
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 4
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 4
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 4
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 5
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 5
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 4
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 5
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 4
46727: NEG
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: NEG
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 4
46773: NEG
46774: PUSH
46775: LD_INT 4
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 4
46785: NEG
46786: PUSH
46787: LD_INT 5
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 3
46797: NEG
46798: PUSH
46799: LD_INT 4
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 4
46821: NEG
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 5
46833: NEG
46834: PUSH
46835: LD_INT 4
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 5
46845: NEG
46846: PUSH
46847: LD_INT 5
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: NEG
46858: PUSH
46859: LD_INT 5
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 5
46869: NEG
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46926: LD_ADDR_VAR 0 30
46930: PUSH
46931: LD_INT 4
46933: PUSH
46934: LD_INT 4
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 4
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 5
46953: PUSH
46954: LD_INT 4
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 5
46963: PUSH
46964: LD_INT 5
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 4
46973: PUSH
46974: LD_INT 5
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: LD_INT 4
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: LD_INT 3
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 5
47003: PUSH
47004: LD_INT 3
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 5
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 4
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 4
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 4
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 4
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 4
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 4
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 5
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 5
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 5
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: LD_INT 4
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 3
47266: NEG
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 4
47278: NEG
47279: PUSH
47280: LD_INT 3
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 4
47290: NEG
47291: PUSH
47292: LD_INT 4
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 4
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 4
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 4
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 4
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 5
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 5
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47473: LD_ADDR_VAR 0 31
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 4
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 4
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 5
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 5
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 4
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 5
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 4
47629: NEG
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 4
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 4
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: NEG
47676: PUSH
47677: LD_INT 4
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 4
47687: NEG
47688: PUSH
47689: LD_INT 5
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: NEG
47700: PUSH
47701: LD_INT 4
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 4
47723: NEG
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 5
47735: NEG
47736: PUSH
47737: LD_INT 4
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 5
47747: NEG
47748: PUSH
47749: LD_INT 5
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: NEG
47760: PUSH
47761: LD_INT 5
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 5
47771: NEG
47772: PUSH
47773: LD_INT 3
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 4
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 4
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 4
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 5
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 4
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 5
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48023: LD_ADDR_VAR 0 32
48027: PUSH
48028: LD_INT 4
48030: NEG
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 4
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 4
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 5
48086: NEG
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 5
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 5
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: LD_INT 4
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 4
48192: NEG
48193: PUSH
48194: LD_INT 3
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 4
48204: NEG
48205: PUSH
48206: LD_INT 4
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 4
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 4
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 4
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 5
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 4
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 4
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 5
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 3
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 4
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: LD_INT 4
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 4
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 5
48455: PUSH
48456: LD_INT 4
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 5
48465: PUSH
48466: LD_INT 5
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: LD_INT 5
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: LD_INT 4
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 5
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: LD_INT 5
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48570: LD_ADDR_VAR 0 33
48574: PUSH
48575: LD_INT 4
48577: NEG
48578: PUSH
48579: LD_INT 4
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 4
48589: NEG
48590: PUSH
48591: LD_INT 5
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 3
48601: NEG
48602: PUSH
48603: LD_INT 4
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: NEG
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 4
48625: NEG
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: NEG
48638: PUSH
48639: LD_INT 4
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 5
48649: NEG
48650: PUSH
48651: LD_INT 5
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 5
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 5
48673: NEG
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 4
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 3
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 3
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 4
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 4
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 4
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 4
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 5
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 4
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 5
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 4
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 4
48910: PUSH
48911: LD_INT 4
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: PUSH
48921: LD_INT 4
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 3
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 4
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 4
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 4
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 5
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 5
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 4
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: LD_INT 5
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49108: LD_ADDR_VAR 0 34
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 4
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 5
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 4
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 3
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 4
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 5
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 5
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 4
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 4
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 4
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 4
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 4
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 5
49330: PUSH
49331: LD_INT 4
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 5
49340: PUSH
49341: LD_INT 5
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 4
49350: PUSH
49351: LD_INT 5
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 4
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 5
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: LD_INT 5
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 4
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 4
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: NEG
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 4
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 3
49516: NEG
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 4
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 5
49549: NEG
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 5
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 5
49572: NEG
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: ST_TO_ADDR
// end ; end ;
49640: GO 49643
49642: POP
// case btype of b_depot , b_warehouse :
49643: LD_VAR 0 1
49647: PUSH
49648: LD_INT 0
49650: DOUBLE
49651: EQUAL
49652: IFTRUE 49662
49654: LD_INT 1
49656: DOUBLE
49657: EQUAL
49658: IFTRUE 49662
49660: GO 49863
49662: POP
// case nation of nation_american :
49663: LD_VAR 0 5
49667: PUSH
49668: LD_INT 1
49670: DOUBLE
49671: EQUAL
49672: IFTRUE 49676
49674: GO 49732
49676: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
49677: LD_ADDR_VAR 0 9
49681: PUSH
49682: LD_VAR 0 11
49686: PUSH
49687: LD_VAR 0 12
49691: PUSH
49692: LD_VAR 0 13
49696: PUSH
49697: LD_VAR 0 14
49701: PUSH
49702: LD_VAR 0 15
49706: PUSH
49707: LD_VAR 0 16
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: PUSH
49720: LD_VAR 0 4
49724: PUSH
49725: LD_INT 1
49727: PLUS
49728: ARRAY
49729: ST_TO_ADDR
49730: GO 49861
49732: LD_INT 2
49734: DOUBLE
49735: EQUAL
49736: IFTRUE 49740
49738: GO 49796
49740: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
49741: LD_ADDR_VAR 0 9
49745: PUSH
49746: LD_VAR 0 17
49750: PUSH
49751: LD_VAR 0 18
49755: PUSH
49756: LD_VAR 0 19
49760: PUSH
49761: LD_VAR 0 20
49765: PUSH
49766: LD_VAR 0 21
49770: PUSH
49771: LD_VAR 0 22
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: PUSH
49784: LD_VAR 0 4
49788: PUSH
49789: LD_INT 1
49791: PLUS
49792: ARRAY
49793: ST_TO_ADDR
49794: GO 49861
49796: LD_INT 3
49798: DOUBLE
49799: EQUAL
49800: IFTRUE 49804
49802: GO 49860
49804: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49805: LD_ADDR_VAR 0 9
49809: PUSH
49810: LD_VAR 0 23
49814: PUSH
49815: LD_VAR 0 24
49819: PUSH
49820: LD_VAR 0 25
49824: PUSH
49825: LD_VAR 0 26
49829: PUSH
49830: LD_VAR 0 27
49834: PUSH
49835: LD_VAR 0 28
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: PUSH
49848: LD_VAR 0 4
49852: PUSH
49853: LD_INT 1
49855: PLUS
49856: ARRAY
49857: ST_TO_ADDR
49858: GO 49861
49860: POP
49861: GO 50416
49863: LD_INT 2
49865: DOUBLE
49866: EQUAL
49867: IFTRUE 49877
49869: LD_INT 3
49871: DOUBLE
49872: EQUAL
49873: IFTRUE 49877
49875: GO 49933
49877: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49878: LD_ADDR_VAR 0 9
49882: PUSH
49883: LD_VAR 0 29
49887: PUSH
49888: LD_VAR 0 30
49892: PUSH
49893: LD_VAR 0 31
49897: PUSH
49898: LD_VAR 0 32
49902: PUSH
49903: LD_VAR 0 33
49907: PUSH
49908: LD_VAR 0 34
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: PUSH
49921: LD_VAR 0 4
49925: PUSH
49926: LD_INT 1
49928: PLUS
49929: ARRAY
49930: ST_TO_ADDR
49931: GO 50416
49933: LD_INT 16
49935: DOUBLE
49936: EQUAL
49937: IFTRUE 49995
49939: LD_INT 17
49941: DOUBLE
49942: EQUAL
49943: IFTRUE 49995
49945: LD_INT 18
49947: DOUBLE
49948: EQUAL
49949: IFTRUE 49995
49951: LD_INT 19
49953: DOUBLE
49954: EQUAL
49955: IFTRUE 49995
49957: LD_INT 22
49959: DOUBLE
49960: EQUAL
49961: IFTRUE 49995
49963: LD_INT 20
49965: DOUBLE
49966: EQUAL
49967: IFTRUE 49995
49969: LD_INT 21
49971: DOUBLE
49972: EQUAL
49973: IFTRUE 49995
49975: LD_INT 23
49977: DOUBLE
49978: EQUAL
49979: IFTRUE 49995
49981: LD_INT 24
49983: DOUBLE
49984: EQUAL
49985: IFTRUE 49995
49987: LD_INT 25
49989: DOUBLE
49990: EQUAL
49991: IFTRUE 49995
49993: GO 50051
49995: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49996: LD_ADDR_VAR 0 9
50000: PUSH
50001: LD_VAR 0 35
50005: PUSH
50006: LD_VAR 0 36
50010: PUSH
50011: LD_VAR 0 37
50015: PUSH
50016: LD_VAR 0 38
50020: PUSH
50021: LD_VAR 0 39
50025: PUSH
50026: LD_VAR 0 40
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: PUSH
50039: LD_VAR 0 4
50043: PUSH
50044: LD_INT 1
50046: PLUS
50047: ARRAY
50048: ST_TO_ADDR
50049: GO 50416
50051: LD_INT 6
50053: DOUBLE
50054: EQUAL
50055: IFTRUE 50107
50057: LD_INT 7
50059: DOUBLE
50060: EQUAL
50061: IFTRUE 50107
50063: LD_INT 8
50065: DOUBLE
50066: EQUAL
50067: IFTRUE 50107
50069: LD_INT 13
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50107
50075: LD_INT 12
50077: DOUBLE
50078: EQUAL
50079: IFTRUE 50107
50081: LD_INT 15
50083: DOUBLE
50084: EQUAL
50085: IFTRUE 50107
50087: LD_INT 11
50089: DOUBLE
50090: EQUAL
50091: IFTRUE 50107
50093: LD_INT 14
50095: DOUBLE
50096: EQUAL
50097: IFTRUE 50107
50099: LD_INT 10
50101: DOUBLE
50102: EQUAL
50103: IFTRUE 50107
50105: GO 50163
50107: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50108: LD_ADDR_VAR 0 9
50112: PUSH
50113: LD_VAR 0 41
50117: PUSH
50118: LD_VAR 0 42
50122: PUSH
50123: LD_VAR 0 43
50127: PUSH
50128: LD_VAR 0 44
50132: PUSH
50133: LD_VAR 0 45
50137: PUSH
50138: LD_VAR 0 46
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: PUSH
50151: LD_VAR 0 4
50155: PUSH
50156: LD_INT 1
50158: PLUS
50159: ARRAY
50160: ST_TO_ADDR
50161: GO 50416
50163: LD_INT 36
50165: DOUBLE
50166: EQUAL
50167: IFTRUE 50171
50169: GO 50227
50171: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50172: LD_ADDR_VAR 0 9
50176: PUSH
50177: LD_VAR 0 47
50181: PUSH
50182: LD_VAR 0 48
50186: PUSH
50187: LD_VAR 0 49
50191: PUSH
50192: LD_VAR 0 50
50196: PUSH
50197: LD_VAR 0 51
50201: PUSH
50202: LD_VAR 0 52
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: PUSH
50215: LD_VAR 0 4
50219: PUSH
50220: LD_INT 1
50222: PLUS
50223: ARRAY
50224: ST_TO_ADDR
50225: GO 50416
50227: LD_INT 4
50229: DOUBLE
50230: EQUAL
50231: IFTRUE 50253
50233: LD_INT 5
50235: DOUBLE
50236: EQUAL
50237: IFTRUE 50253
50239: LD_INT 34
50241: DOUBLE
50242: EQUAL
50243: IFTRUE 50253
50245: LD_INT 37
50247: DOUBLE
50248: EQUAL
50249: IFTRUE 50253
50251: GO 50309
50253: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50254: LD_ADDR_VAR 0 9
50258: PUSH
50259: LD_VAR 0 53
50263: PUSH
50264: LD_VAR 0 54
50268: PUSH
50269: LD_VAR 0 55
50273: PUSH
50274: LD_VAR 0 56
50278: PUSH
50279: LD_VAR 0 57
50283: PUSH
50284: LD_VAR 0 58
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: PUSH
50297: LD_VAR 0 4
50301: PUSH
50302: LD_INT 1
50304: PLUS
50305: ARRAY
50306: ST_TO_ADDR
50307: GO 50416
50309: LD_INT 31
50311: DOUBLE
50312: EQUAL
50313: IFTRUE 50359
50315: LD_INT 32
50317: DOUBLE
50318: EQUAL
50319: IFTRUE 50359
50321: LD_INT 33
50323: DOUBLE
50324: EQUAL
50325: IFTRUE 50359
50327: LD_INT 27
50329: DOUBLE
50330: EQUAL
50331: IFTRUE 50359
50333: LD_INT 26
50335: DOUBLE
50336: EQUAL
50337: IFTRUE 50359
50339: LD_INT 28
50341: DOUBLE
50342: EQUAL
50343: IFTRUE 50359
50345: LD_INT 29
50347: DOUBLE
50348: EQUAL
50349: IFTRUE 50359
50351: LD_INT 30
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50359
50357: GO 50415
50359: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50360: LD_ADDR_VAR 0 9
50364: PUSH
50365: LD_VAR 0 59
50369: PUSH
50370: LD_VAR 0 60
50374: PUSH
50375: LD_VAR 0 61
50379: PUSH
50380: LD_VAR 0 62
50384: PUSH
50385: LD_VAR 0 63
50389: PUSH
50390: LD_VAR 0 64
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: PUSH
50403: LD_VAR 0 4
50407: PUSH
50408: LD_INT 1
50410: PLUS
50411: ARRAY
50412: ST_TO_ADDR
50413: GO 50416
50415: POP
// temp_list2 = [ ] ;
50416: LD_ADDR_VAR 0 10
50420: PUSH
50421: EMPTY
50422: ST_TO_ADDR
// for i in temp_list do
50423: LD_ADDR_VAR 0 8
50427: PUSH
50428: LD_VAR 0 9
50432: PUSH
50433: FOR_IN
50434: IFFALSE 50486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50436: LD_ADDR_VAR 0 10
50440: PUSH
50441: LD_VAR 0 10
50445: PUSH
50446: LD_VAR 0 8
50450: PUSH
50451: LD_INT 1
50453: ARRAY
50454: PUSH
50455: LD_VAR 0 2
50459: PLUS
50460: PUSH
50461: LD_VAR 0 8
50465: PUSH
50466: LD_INT 2
50468: ARRAY
50469: PUSH
50470: LD_VAR 0 3
50474: PLUS
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: ADD
50483: ST_TO_ADDR
50484: GO 50433
50486: POP
50487: POP
// result = temp_list2 ;
50488: LD_ADDR_VAR 0 7
50492: PUSH
50493: LD_VAR 0 10
50497: ST_TO_ADDR
// end ;
50498: LD_VAR 0 7
50502: RET
// export function EnemyInRange ( unit , dist ) ; begin
50503: LD_INT 0
50505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50506: LD_ADDR_VAR 0 3
50510: PUSH
50511: LD_VAR 0 1
50515: PPUSH
50516: CALL_OW 255
50520: PPUSH
50521: LD_VAR 0 1
50525: PPUSH
50526: CALL_OW 250
50530: PPUSH
50531: LD_VAR 0 1
50535: PPUSH
50536: CALL_OW 251
50540: PPUSH
50541: LD_VAR 0 2
50545: PPUSH
50546: CALL 24607 0 4
50550: PUSH
50551: LD_INT 4
50553: ARRAY
50554: ST_TO_ADDR
// end ;
50555: LD_VAR 0 3
50559: RET
// export function PlayerSeeMe ( unit ) ; begin
50560: LD_INT 0
50562: PPUSH
// result := See ( your_side , unit ) ;
50563: LD_ADDR_VAR 0 2
50567: PUSH
50568: LD_OWVAR 2
50572: PPUSH
50573: LD_VAR 0 1
50577: PPUSH
50578: CALL_OW 292
50582: ST_TO_ADDR
// end ;
50583: LD_VAR 0 2
50587: RET
// export function ReverseDir ( unit ) ; begin
50588: LD_INT 0
50590: PPUSH
// if not unit then
50591: LD_VAR 0 1
50595: NOT
50596: IFFALSE 50600
// exit ;
50598: GO 50623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50600: LD_ADDR_VAR 0 2
50604: PUSH
50605: LD_VAR 0 1
50609: PPUSH
50610: CALL_OW 254
50614: PUSH
50615: LD_INT 3
50617: PLUS
50618: PUSH
50619: LD_INT 6
50621: MOD
50622: ST_TO_ADDR
// end ;
50623: LD_VAR 0 2
50627: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
50628: LD_INT 0
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
// if not hexes then
50635: LD_VAR 0 2
50639: NOT
50640: IFFALSE 50644
// exit ;
50642: GO 50792
// dist := 9999 ;
50644: LD_ADDR_VAR 0 5
50648: PUSH
50649: LD_INT 9999
50651: ST_TO_ADDR
// for i = 1 to hexes do
50652: LD_ADDR_VAR 0 4
50656: PUSH
50657: DOUBLE
50658: LD_INT 1
50660: DEC
50661: ST_TO_ADDR
50662: LD_VAR 0 2
50666: PUSH
50667: FOR_TO
50668: IFFALSE 50780
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
50670: LD_VAR 0 1
50674: PPUSH
50675: LD_VAR 0 2
50679: PUSH
50680: LD_VAR 0 4
50684: ARRAY
50685: PUSH
50686: LD_INT 1
50688: ARRAY
50689: PPUSH
50690: LD_VAR 0 2
50694: PUSH
50695: LD_VAR 0 4
50699: ARRAY
50700: PUSH
50701: LD_INT 2
50703: ARRAY
50704: PPUSH
50705: CALL_OW 297
50709: PUSH
50710: LD_VAR 0 5
50714: LESS
50715: IFFALSE 50778
// begin hex := hexes [ i ] ;
50717: LD_ADDR_VAR 0 7
50721: PUSH
50722: LD_VAR 0 2
50726: PUSH
50727: LD_VAR 0 4
50731: ARRAY
50732: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50733: LD_ADDR_VAR 0 5
50737: PUSH
50738: LD_VAR 0 1
50742: PPUSH
50743: LD_VAR 0 2
50747: PUSH
50748: LD_VAR 0 4
50752: ARRAY
50753: PUSH
50754: LD_INT 1
50756: ARRAY
50757: PPUSH
50758: LD_VAR 0 2
50762: PUSH
50763: LD_VAR 0 4
50767: ARRAY
50768: PUSH
50769: LD_INT 2
50771: ARRAY
50772: PPUSH
50773: CALL_OW 297
50777: ST_TO_ADDR
// end ; end ;
50778: GO 50667
50780: POP
50781: POP
// result := hex ;
50782: LD_ADDR_VAR 0 3
50786: PUSH
50787: LD_VAR 0 7
50791: ST_TO_ADDR
// end ;
50792: LD_VAR 0 3
50796: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50797: LD_INT 0
50799: PPUSH
50800: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50801: LD_VAR 0 1
50805: NOT
50806: PUSH
50807: LD_VAR 0 1
50811: PUSH
50812: LD_INT 21
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 23
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PPUSH
50836: CALL_OW 69
50840: IN
50841: NOT
50842: OR
50843: IFFALSE 50847
// exit ;
50845: GO 50894
// for i = 1 to 3 do
50847: LD_ADDR_VAR 0 3
50851: PUSH
50852: DOUBLE
50853: LD_INT 1
50855: DEC
50856: ST_TO_ADDR
50857: LD_INT 3
50859: PUSH
50860: FOR_TO
50861: IFFALSE 50892
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50863: LD_VAR 0 1
50867: PPUSH
50868: CALL_OW 250
50872: PPUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: CALL_OW 251
50882: PPUSH
50883: LD_INT 1
50885: PPUSH
50886: CALL_OW 453
50890: GO 50860
50892: POP
50893: POP
// end ;
50894: LD_VAR 0 2
50898: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50899: LD_INT 0
50901: PPUSH
50902: PPUSH
50903: PPUSH
50904: PPUSH
50905: PPUSH
50906: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50907: LD_VAR 0 1
50911: NOT
50912: PUSH
50913: LD_VAR 0 2
50917: NOT
50918: OR
50919: PUSH
50920: LD_VAR 0 1
50924: PPUSH
50925: CALL_OW 314
50929: OR
50930: IFFALSE 50934
// exit ;
50932: GO 51375
// x := GetX ( enemy_unit ) ;
50934: LD_ADDR_VAR 0 7
50938: PUSH
50939: LD_VAR 0 2
50943: PPUSH
50944: CALL_OW 250
50948: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50949: LD_ADDR_VAR 0 8
50953: PUSH
50954: LD_VAR 0 2
50958: PPUSH
50959: CALL_OW 251
50963: ST_TO_ADDR
// if not x or not y then
50964: LD_VAR 0 7
50968: NOT
50969: PUSH
50970: LD_VAR 0 8
50974: NOT
50975: OR
50976: IFFALSE 50980
// exit ;
50978: GO 51375
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50980: LD_ADDR_VAR 0 6
50984: PUSH
50985: LD_VAR 0 7
50989: PPUSH
50990: LD_INT 0
50992: PPUSH
50993: LD_INT 4
50995: PPUSH
50996: CALL_OW 272
51000: PUSH
51001: LD_VAR 0 8
51005: PPUSH
51006: LD_INT 0
51008: PPUSH
51009: LD_INT 4
51011: PPUSH
51012: CALL_OW 273
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_VAR 0 7
51025: PPUSH
51026: LD_INT 1
51028: PPUSH
51029: LD_INT 4
51031: PPUSH
51032: CALL_OW 272
51036: PUSH
51037: LD_VAR 0 8
51041: PPUSH
51042: LD_INT 1
51044: PPUSH
51045: LD_INT 4
51047: PPUSH
51048: CALL_OW 273
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_VAR 0 7
51061: PPUSH
51062: LD_INT 2
51064: PPUSH
51065: LD_INT 4
51067: PPUSH
51068: CALL_OW 272
51072: PUSH
51073: LD_VAR 0 8
51077: PPUSH
51078: LD_INT 2
51080: PPUSH
51081: LD_INT 4
51083: PPUSH
51084: CALL_OW 273
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_VAR 0 7
51097: PPUSH
51098: LD_INT 3
51100: PPUSH
51101: LD_INT 4
51103: PPUSH
51104: CALL_OW 272
51108: PUSH
51109: LD_VAR 0 8
51113: PPUSH
51114: LD_INT 3
51116: PPUSH
51117: LD_INT 4
51119: PPUSH
51120: CALL_OW 273
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_VAR 0 7
51133: PPUSH
51134: LD_INT 4
51136: PPUSH
51137: LD_INT 4
51139: PPUSH
51140: CALL_OW 272
51144: PUSH
51145: LD_VAR 0 8
51149: PPUSH
51150: LD_INT 4
51152: PPUSH
51153: LD_INT 4
51155: PPUSH
51156: CALL_OW 273
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_VAR 0 7
51169: PPUSH
51170: LD_INT 5
51172: PPUSH
51173: LD_INT 4
51175: PPUSH
51176: CALL_OW 272
51180: PUSH
51181: LD_VAR 0 8
51185: PPUSH
51186: LD_INT 5
51188: PPUSH
51189: LD_INT 4
51191: PPUSH
51192: CALL_OW 273
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// for i = tmp downto 1 do
51209: LD_ADDR_VAR 0 4
51213: PUSH
51214: DOUBLE
51215: LD_VAR 0 6
51219: INC
51220: ST_TO_ADDR
51221: LD_INT 1
51223: PUSH
51224: FOR_DOWNTO
51225: IFFALSE 51326
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51227: LD_VAR 0 6
51231: PUSH
51232: LD_VAR 0 4
51236: ARRAY
51237: PUSH
51238: LD_INT 1
51240: ARRAY
51241: PPUSH
51242: LD_VAR 0 6
51246: PUSH
51247: LD_VAR 0 4
51251: ARRAY
51252: PUSH
51253: LD_INT 2
51255: ARRAY
51256: PPUSH
51257: CALL_OW 488
51261: NOT
51262: PUSH
51263: LD_VAR 0 6
51267: PUSH
51268: LD_VAR 0 4
51272: ARRAY
51273: PUSH
51274: LD_INT 1
51276: ARRAY
51277: PPUSH
51278: LD_VAR 0 6
51282: PUSH
51283: LD_VAR 0 4
51287: ARRAY
51288: PUSH
51289: LD_INT 2
51291: ARRAY
51292: PPUSH
51293: CALL_OW 428
51297: PUSH
51298: LD_INT 0
51300: NONEQUAL
51301: OR
51302: IFFALSE 51324
// tmp := Delete ( tmp , i ) ;
51304: LD_ADDR_VAR 0 6
51308: PUSH
51309: LD_VAR 0 6
51313: PPUSH
51314: LD_VAR 0 4
51318: PPUSH
51319: CALL_OW 3
51323: ST_TO_ADDR
51324: GO 51224
51326: POP
51327: POP
// j := GetClosestHex ( unit , tmp ) ;
51328: LD_ADDR_VAR 0 5
51332: PUSH
51333: LD_VAR 0 1
51337: PPUSH
51338: LD_VAR 0 6
51342: PPUSH
51343: CALL 50628 0 2
51347: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51348: LD_VAR 0 1
51352: PPUSH
51353: LD_VAR 0 5
51357: PUSH
51358: LD_INT 1
51360: ARRAY
51361: PPUSH
51362: LD_VAR 0 5
51366: PUSH
51367: LD_INT 2
51369: ARRAY
51370: PPUSH
51371: CALL_OW 111
// end ;
51375: LD_VAR 0 3
51379: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51380: LD_INT 0
51382: PPUSH
51383: PPUSH
51384: PPUSH
// uc_side = 0 ;
51385: LD_ADDR_OWVAR 20
51389: PUSH
51390: LD_INT 0
51392: ST_TO_ADDR
// uc_nation = 0 ;
51393: LD_ADDR_OWVAR 21
51397: PUSH
51398: LD_INT 0
51400: ST_TO_ADDR
// InitHc ;
51401: CALL_OW 19
// InitVc ;
51405: CALL_OW 20
// if mastodonts then
51409: LD_VAR 0 6
51413: IFFALSE 51480
// for i = 1 to mastodonts do
51415: LD_ADDR_VAR 0 11
51419: PUSH
51420: DOUBLE
51421: LD_INT 1
51423: DEC
51424: ST_TO_ADDR
51425: LD_VAR 0 6
51429: PUSH
51430: FOR_TO
51431: IFFALSE 51478
// begin vc_chassis := 31 ;
51433: LD_ADDR_OWVAR 37
51437: PUSH
51438: LD_INT 31
51440: ST_TO_ADDR
// vc_control := control_rider ;
51441: LD_ADDR_OWVAR 38
51445: PUSH
51446: LD_INT 4
51448: ST_TO_ADDR
// animal := CreateVehicle ;
51449: LD_ADDR_VAR 0 12
51453: PUSH
51454: CALL_OW 45
51458: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51459: LD_VAR 0 12
51463: PPUSH
51464: LD_VAR 0 8
51468: PPUSH
51469: LD_INT 0
51471: PPUSH
51472: CALL 53549 0 3
// end ;
51476: GO 51430
51478: POP
51479: POP
// if horses then
51480: LD_VAR 0 5
51484: IFFALSE 51551
// for i = 1 to horses do
51486: LD_ADDR_VAR 0 11
51490: PUSH
51491: DOUBLE
51492: LD_INT 1
51494: DEC
51495: ST_TO_ADDR
51496: LD_VAR 0 5
51500: PUSH
51501: FOR_TO
51502: IFFALSE 51549
// begin hc_class := 21 ;
51504: LD_ADDR_OWVAR 28
51508: PUSH
51509: LD_INT 21
51511: ST_TO_ADDR
// hc_gallery :=  ;
51512: LD_ADDR_OWVAR 33
51516: PUSH
51517: LD_STRING 
51519: ST_TO_ADDR
// animal := CreateHuman ;
51520: LD_ADDR_VAR 0 12
51524: PUSH
51525: CALL_OW 44
51529: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51530: LD_VAR 0 12
51534: PPUSH
51535: LD_VAR 0 8
51539: PPUSH
51540: LD_INT 0
51542: PPUSH
51543: CALL 53549 0 3
// end ;
51547: GO 51501
51549: POP
51550: POP
// if birds then
51551: LD_VAR 0 1
51555: IFFALSE 51622
// for i = 1 to birds do
51557: LD_ADDR_VAR 0 11
51561: PUSH
51562: DOUBLE
51563: LD_INT 1
51565: DEC
51566: ST_TO_ADDR
51567: LD_VAR 0 1
51571: PUSH
51572: FOR_TO
51573: IFFALSE 51620
// begin hc_class = 18 ;
51575: LD_ADDR_OWVAR 28
51579: PUSH
51580: LD_INT 18
51582: ST_TO_ADDR
// hc_gallery =  ;
51583: LD_ADDR_OWVAR 33
51587: PUSH
51588: LD_STRING 
51590: ST_TO_ADDR
// animal := CreateHuman ;
51591: LD_ADDR_VAR 0 12
51595: PUSH
51596: CALL_OW 44
51600: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51601: LD_VAR 0 12
51605: PPUSH
51606: LD_VAR 0 8
51610: PPUSH
51611: LD_INT 0
51613: PPUSH
51614: CALL 53549 0 3
// end ;
51618: GO 51572
51620: POP
51621: POP
// if tigers then
51622: LD_VAR 0 2
51626: IFFALSE 51710
// for i = 1 to tigers do
51628: LD_ADDR_VAR 0 11
51632: PUSH
51633: DOUBLE
51634: LD_INT 1
51636: DEC
51637: ST_TO_ADDR
51638: LD_VAR 0 2
51642: PUSH
51643: FOR_TO
51644: IFFALSE 51708
// begin hc_class = class_tiger ;
51646: LD_ADDR_OWVAR 28
51650: PUSH
51651: LD_INT 14
51653: ST_TO_ADDR
// hc_gallery =  ;
51654: LD_ADDR_OWVAR 33
51658: PUSH
51659: LD_STRING 
51661: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51662: LD_ADDR_OWVAR 35
51666: PUSH
51667: LD_INT 7
51669: NEG
51670: PPUSH
51671: LD_INT 7
51673: PPUSH
51674: CALL_OW 12
51678: ST_TO_ADDR
// animal := CreateHuman ;
51679: LD_ADDR_VAR 0 12
51683: PUSH
51684: CALL_OW 44
51688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51689: LD_VAR 0 12
51693: PPUSH
51694: LD_VAR 0 8
51698: PPUSH
51699: LD_INT 0
51701: PPUSH
51702: CALL 53549 0 3
// end ;
51706: GO 51643
51708: POP
51709: POP
// if apemans then
51710: LD_VAR 0 3
51714: IFFALSE 51837
// for i = 1 to apemans do
51716: LD_ADDR_VAR 0 11
51720: PUSH
51721: DOUBLE
51722: LD_INT 1
51724: DEC
51725: ST_TO_ADDR
51726: LD_VAR 0 3
51730: PUSH
51731: FOR_TO
51732: IFFALSE 51835
// begin hc_class = class_apeman ;
51734: LD_ADDR_OWVAR 28
51738: PUSH
51739: LD_INT 12
51741: ST_TO_ADDR
// hc_gallery =  ;
51742: LD_ADDR_OWVAR 33
51746: PUSH
51747: LD_STRING 
51749: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
51750: LD_ADDR_OWVAR 35
51754: PUSH
51755: LD_INT 5
51757: NEG
51758: PPUSH
51759: LD_INT 5
51761: PPUSH
51762: CALL_OW 12
51766: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51767: LD_ADDR_OWVAR 31
51771: PUSH
51772: LD_INT 1
51774: PPUSH
51775: LD_INT 3
51777: PPUSH
51778: CALL_OW 12
51782: PUSH
51783: LD_INT 1
51785: PPUSH
51786: LD_INT 3
51788: PPUSH
51789: CALL_OW 12
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: ST_TO_ADDR
// animal := CreateHuman ;
51806: LD_ADDR_VAR 0 12
51810: PUSH
51811: CALL_OW 44
51815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51816: LD_VAR 0 12
51820: PPUSH
51821: LD_VAR 0 8
51825: PPUSH
51826: LD_INT 0
51828: PPUSH
51829: CALL 53549 0 3
// end ;
51833: GO 51731
51835: POP
51836: POP
// if enchidnas then
51837: LD_VAR 0 4
51841: IFFALSE 51908
// for i = 1 to enchidnas do
51843: LD_ADDR_VAR 0 11
51847: PUSH
51848: DOUBLE
51849: LD_INT 1
51851: DEC
51852: ST_TO_ADDR
51853: LD_VAR 0 4
51857: PUSH
51858: FOR_TO
51859: IFFALSE 51906
// begin hc_class = 13 ;
51861: LD_ADDR_OWVAR 28
51865: PUSH
51866: LD_INT 13
51868: ST_TO_ADDR
// hc_gallery =  ;
51869: LD_ADDR_OWVAR 33
51873: PUSH
51874: LD_STRING 
51876: ST_TO_ADDR
// animal := CreateHuman ;
51877: LD_ADDR_VAR 0 12
51881: PUSH
51882: CALL_OW 44
51886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51887: LD_VAR 0 12
51891: PPUSH
51892: LD_VAR 0 8
51896: PPUSH
51897: LD_INT 0
51899: PPUSH
51900: CALL 53549 0 3
// end ;
51904: GO 51858
51906: POP
51907: POP
// if fishes then
51908: LD_VAR 0 7
51912: IFFALSE 51979
// for i = 1 to fishes do
51914: LD_ADDR_VAR 0 11
51918: PUSH
51919: DOUBLE
51920: LD_INT 1
51922: DEC
51923: ST_TO_ADDR
51924: LD_VAR 0 7
51928: PUSH
51929: FOR_TO
51930: IFFALSE 51977
// begin hc_class = 20 ;
51932: LD_ADDR_OWVAR 28
51936: PUSH
51937: LD_INT 20
51939: ST_TO_ADDR
// hc_gallery =  ;
51940: LD_ADDR_OWVAR 33
51944: PUSH
51945: LD_STRING 
51947: ST_TO_ADDR
// animal := CreateHuman ;
51948: LD_ADDR_VAR 0 12
51952: PUSH
51953: CALL_OW 44
51957: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51958: LD_VAR 0 12
51962: PPUSH
51963: LD_VAR 0 9
51967: PPUSH
51968: LD_INT 0
51970: PPUSH
51971: CALL 53549 0 3
// end ;
51975: GO 51929
51977: POP
51978: POP
// end ;
51979: LD_VAR 0 10
51983: RET
// export function WantHeal ( sci , unit ) ; begin
51984: LD_INT 0
51986: PPUSH
// if GetTaskList ( sci ) > 0 then
51987: LD_VAR 0 1
51991: PPUSH
51992: CALL_OW 437
51996: PUSH
51997: LD_INT 0
51999: GREATER
52000: IFFALSE 52070
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52002: LD_VAR 0 1
52006: PPUSH
52007: CALL_OW 437
52011: PUSH
52012: LD_INT 1
52014: ARRAY
52015: PUSH
52016: LD_INT 1
52018: ARRAY
52019: PUSH
52020: LD_STRING l
52022: EQUAL
52023: PUSH
52024: LD_VAR 0 1
52028: PPUSH
52029: CALL_OW 437
52033: PUSH
52034: LD_INT 1
52036: ARRAY
52037: PUSH
52038: LD_INT 4
52040: ARRAY
52041: PUSH
52042: LD_VAR 0 2
52046: EQUAL
52047: AND
52048: IFFALSE 52060
// result := true else
52050: LD_ADDR_VAR 0 3
52054: PUSH
52055: LD_INT 1
52057: ST_TO_ADDR
52058: GO 52068
// result := false ;
52060: LD_ADDR_VAR 0 3
52064: PUSH
52065: LD_INT 0
52067: ST_TO_ADDR
// end else
52068: GO 52078
// result := false ;
52070: LD_ADDR_VAR 0 3
52074: PUSH
52075: LD_INT 0
52077: ST_TO_ADDR
// end ;
52078: LD_VAR 0 3
52082: RET
// export function HealTarget ( sci ) ; begin
52083: LD_INT 0
52085: PPUSH
// if not sci then
52086: LD_VAR 0 1
52090: NOT
52091: IFFALSE 52095
// exit ;
52093: GO 52160
// result := 0 ;
52095: LD_ADDR_VAR 0 2
52099: PUSH
52100: LD_INT 0
52102: ST_TO_ADDR
// if GetTaskList ( sci ) then
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 437
52112: IFFALSE 52160
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52114: LD_VAR 0 1
52118: PPUSH
52119: CALL_OW 437
52123: PUSH
52124: LD_INT 1
52126: ARRAY
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: PUSH
52132: LD_STRING l
52134: EQUAL
52135: IFFALSE 52160
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52137: LD_ADDR_VAR 0 2
52141: PUSH
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 437
52151: PUSH
52152: LD_INT 1
52154: ARRAY
52155: PUSH
52156: LD_INT 4
52158: ARRAY
52159: ST_TO_ADDR
// end ;
52160: LD_VAR 0 2
52164: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52165: LD_INT 0
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
// if not base_units then
52171: LD_VAR 0 1
52175: NOT
52176: IFFALSE 52180
// exit ;
52178: GO 52267
// result := false ;
52180: LD_ADDR_VAR 0 2
52184: PUSH
52185: LD_INT 0
52187: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52188: LD_ADDR_VAR 0 5
52192: PUSH
52193: LD_VAR 0 1
52197: PPUSH
52198: LD_INT 21
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PPUSH
52208: CALL_OW 72
52212: ST_TO_ADDR
// if not tmp then
52213: LD_VAR 0 5
52217: NOT
52218: IFFALSE 52222
// exit ;
52220: GO 52267
// for i in tmp do
52222: LD_ADDR_VAR 0 3
52226: PUSH
52227: LD_VAR 0 5
52231: PUSH
52232: FOR_IN
52233: IFFALSE 52265
// begin result := EnemyInRange ( i , 22 ) ;
52235: LD_ADDR_VAR 0 2
52239: PUSH
52240: LD_VAR 0 3
52244: PPUSH
52245: LD_INT 22
52247: PPUSH
52248: CALL 50503 0 2
52252: ST_TO_ADDR
// if result then
52253: LD_VAR 0 2
52257: IFFALSE 52263
// exit ;
52259: POP
52260: POP
52261: GO 52267
// end ;
52263: GO 52232
52265: POP
52266: POP
// end ;
52267: LD_VAR 0 2
52271: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52272: LD_INT 0
52274: PPUSH
52275: PPUSH
// if not units then
52276: LD_VAR 0 1
52280: NOT
52281: IFFALSE 52285
// exit ;
52283: GO 52355
// result := [ ] ;
52285: LD_ADDR_VAR 0 3
52289: PUSH
52290: EMPTY
52291: ST_TO_ADDR
// for i in units do
52292: LD_ADDR_VAR 0 4
52296: PUSH
52297: LD_VAR 0 1
52301: PUSH
52302: FOR_IN
52303: IFFALSE 52353
// if GetTag ( i ) = tag then
52305: LD_VAR 0 4
52309: PPUSH
52310: CALL_OW 110
52314: PUSH
52315: LD_VAR 0 2
52319: EQUAL
52320: IFFALSE 52351
// result := Insert ( result , result + 1 , i ) ;
52322: LD_ADDR_VAR 0 3
52326: PUSH
52327: LD_VAR 0 3
52331: PPUSH
52332: LD_VAR 0 3
52336: PUSH
52337: LD_INT 1
52339: PLUS
52340: PPUSH
52341: LD_VAR 0 4
52345: PPUSH
52346: CALL_OW 2
52350: ST_TO_ADDR
52351: GO 52302
52353: POP
52354: POP
// end ;
52355: LD_VAR 0 3
52359: RET
// export function IsDriver ( un ) ; begin
52360: LD_INT 0
52362: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52363: LD_ADDR_VAR 0 2
52367: PUSH
52368: LD_VAR 0 1
52372: PUSH
52373: LD_INT 55
52375: PUSH
52376: EMPTY
52377: LIST
52378: PPUSH
52379: CALL_OW 69
52383: IN
52384: ST_TO_ADDR
// end ;
52385: LD_VAR 0 2
52389: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52390: LD_INT 0
52392: PPUSH
52393: PPUSH
// list := [ ] ;
52394: LD_ADDR_VAR 0 5
52398: PUSH
52399: EMPTY
52400: ST_TO_ADDR
// case d of 0 :
52401: LD_VAR 0 3
52405: PUSH
52406: LD_INT 0
52408: DOUBLE
52409: EQUAL
52410: IFTRUE 52414
52412: GO 52547
52414: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52415: LD_ADDR_VAR 0 5
52419: PUSH
52420: LD_VAR 0 1
52424: PUSH
52425: LD_INT 4
52427: MINUS
52428: PUSH
52429: LD_VAR 0 2
52433: PUSH
52434: LD_INT 4
52436: MINUS
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: PUSH
52446: LD_VAR 0 1
52450: PUSH
52451: LD_INT 3
52453: MINUS
52454: PUSH
52455: LD_VAR 0 2
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: PUSH
52468: LD_VAR 0 1
52472: PUSH
52473: LD_INT 4
52475: PLUS
52476: PUSH
52477: LD_VAR 0 2
52481: PUSH
52482: LD_INT 4
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: LD_VAR 0 1
52494: PUSH
52495: LD_INT 3
52497: PLUS
52498: PUSH
52499: LD_VAR 0 2
52503: PUSH
52504: LD_INT 3
52506: PLUS
52507: PUSH
52508: LD_INT 5
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: PUSH
52516: LD_VAR 0 1
52520: PUSH
52521: LD_VAR 0 2
52525: PUSH
52526: LD_INT 4
52528: PLUS
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: ST_TO_ADDR
// end ; 1 :
52545: GO 53245
52547: LD_INT 1
52549: DOUBLE
52550: EQUAL
52551: IFTRUE 52555
52553: GO 52688
52555: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52556: LD_ADDR_VAR 0 5
52560: PUSH
52561: LD_VAR 0 1
52565: PUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 4
52573: MINUS
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: PUSH
52583: LD_VAR 0 1
52587: PUSH
52588: LD_INT 3
52590: MINUS
52591: PUSH
52592: LD_VAR 0 2
52596: PUSH
52597: LD_INT 3
52599: MINUS
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: PUSH
52609: LD_VAR 0 1
52613: PUSH
52614: LD_INT 4
52616: MINUS
52617: PUSH
52618: LD_VAR 0 2
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_VAR 0 2
52640: PUSH
52641: LD_INT 3
52643: PLUS
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: PUSH
52653: LD_VAR 0 1
52657: PUSH
52658: LD_INT 4
52660: PLUS
52661: PUSH
52662: LD_VAR 0 2
52666: PUSH
52667: LD_INT 4
52669: PLUS
52670: PUSH
52671: LD_INT 5
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// end ; 2 :
52686: GO 53245
52688: LD_INT 2
52690: DOUBLE
52691: EQUAL
52692: IFTRUE 52696
52694: GO 52825
52696: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52697: LD_ADDR_VAR 0 5
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_VAR 0 2
52711: PUSH
52712: LD_INT 3
52714: MINUS
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_INT 4
52731: PLUS
52732: PUSH
52733: LD_VAR 0 2
52737: PUSH
52738: LD_INT 4
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 1
52750: PUSH
52751: LD_VAR 0 2
52755: PUSH
52756: LD_INT 4
52758: PLUS
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: PUSH
52768: LD_VAR 0 1
52772: PUSH
52773: LD_INT 3
52775: MINUS
52776: PUSH
52777: LD_VAR 0 2
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: PUSH
52790: LD_VAR 0 1
52794: PUSH
52795: LD_INT 4
52797: MINUS
52798: PUSH
52799: LD_VAR 0 2
52803: PUSH
52804: LD_INT 4
52806: MINUS
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: ST_TO_ADDR
// end ; 3 :
52823: GO 53245
52825: LD_INT 3
52827: DOUBLE
52828: EQUAL
52829: IFTRUE 52833
52831: GO 52966
52833: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52834: LD_ADDR_VAR 0 5
52838: PUSH
52839: LD_VAR 0 1
52843: PUSH
52844: LD_INT 3
52846: PLUS
52847: PUSH
52848: LD_VAR 0 2
52852: PUSH
52853: LD_INT 4
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: PUSH
52861: LD_VAR 0 1
52865: PUSH
52866: LD_INT 4
52868: PLUS
52869: PUSH
52870: LD_VAR 0 2
52874: PUSH
52875: LD_INT 4
52877: PLUS
52878: PUSH
52879: LD_INT 5
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: LD_INT 4
52894: MINUS
52895: PUSH
52896: LD_VAR 0 2
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: PUSH
52909: LD_VAR 0 1
52913: PUSH
52914: LD_VAR 0 2
52918: PUSH
52919: LD_INT 4
52921: MINUS
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: PUSH
52931: LD_VAR 0 1
52935: PUSH
52936: LD_INT 3
52938: MINUS
52939: PUSH
52940: LD_VAR 0 2
52944: PUSH
52945: LD_INT 3
52947: MINUS
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// end ; 4 :
52964: GO 53245
52966: LD_INT 4
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52974
52972: GO 53107
52974: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52975: LD_ADDR_VAR 0 5
52979: PUSH
52980: LD_VAR 0 1
52984: PUSH
52985: LD_VAR 0 2
52989: PUSH
52990: LD_INT 4
52992: PLUS
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: PUSH
53002: LD_VAR 0 1
53006: PUSH
53007: LD_INT 3
53009: PLUS
53010: PUSH
53011: LD_VAR 0 2
53015: PUSH
53016: LD_INT 3
53018: PLUS
53019: PUSH
53020: LD_INT 5
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: PUSH
53028: LD_VAR 0 1
53032: PUSH
53033: LD_INT 4
53035: PLUS
53036: PUSH
53037: LD_VAR 0 2
53041: PUSH
53042: LD_INT 4
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: LD_VAR 0 1
53054: PUSH
53055: LD_VAR 0 2
53059: PUSH
53060: LD_INT 3
53062: MINUS
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_INT 4
53079: MINUS
53080: PUSH
53081: LD_VAR 0 2
53085: PUSH
53086: LD_INT 4
53088: MINUS
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// end ; 5 :
53105: GO 53245
53107: LD_INT 5
53109: DOUBLE
53110: EQUAL
53111: IFTRUE 53115
53113: GO 53244
53115: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53116: LD_ADDR_VAR 0 5
53120: PUSH
53121: LD_VAR 0 1
53125: PUSH
53126: LD_INT 4
53128: MINUS
53129: PUSH
53130: LD_VAR 0 2
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: PUSH
53143: LD_VAR 0 1
53147: PUSH
53148: LD_VAR 0 2
53152: PUSH
53153: LD_INT 4
53155: MINUS
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: PUSH
53165: LD_VAR 0 1
53169: PUSH
53170: LD_INT 4
53172: PLUS
53173: PUSH
53174: LD_VAR 0 2
53178: PUSH
53179: LD_INT 4
53181: PLUS
53182: PUSH
53183: LD_INT 5
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: PUSH
53191: LD_VAR 0 1
53195: PUSH
53196: LD_INT 3
53198: PLUS
53199: PUSH
53200: LD_VAR 0 2
53204: PUSH
53205: LD_INT 4
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: PUSH
53213: LD_VAR 0 1
53217: PUSH
53218: LD_VAR 0 2
53222: PUSH
53223: LD_INT 3
53225: PLUS
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// end ; end ;
53242: GO 53245
53244: POP
// result := list ;
53245: LD_ADDR_VAR 0 4
53249: PUSH
53250: LD_VAR 0 5
53254: ST_TO_ADDR
// end ;
53255: LD_VAR 0 4
53259: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53260: LD_INT 0
53262: PPUSH
53263: PPUSH
53264: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53265: LD_VAR 0 1
53269: NOT
53270: PUSH
53271: LD_VAR 0 2
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: LD_INT 4
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: IN
53294: NOT
53295: OR
53296: IFFALSE 53300
// exit ;
53298: GO 53392
// tmp := [ ] ;
53300: LD_ADDR_VAR 0 5
53304: PUSH
53305: EMPTY
53306: ST_TO_ADDR
// for i in units do
53307: LD_ADDR_VAR 0 4
53311: PUSH
53312: LD_VAR 0 1
53316: PUSH
53317: FOR_IN
53318: IFFALSE 53361
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53320: LD_ADDR_VAR 0 5
53324: PUSH
53325: LD_VAR 0 5
53329: PPUSH
53330: LD_VAR 0 5
53334: PUSH
53335: LD_INT 1
53337: PLUS
53338: PPUSH
53339: LD_VAR 0 4
53343: PPUSH
53344: LD_VAR 0 2
53348: PPUSH
53349: CALL_OW 259
53353: PPUSH
53354: CALL_OW 2
53358: ST_TO_ADDR
53359: GO 53317
53361: POP
53362: POP
// if not tmp then
53363: LD_VAR 0 5
53367: NOT
53368: IFFALSE 53372
// exit ;
53370: GO 53392
// result := SortListByListDesc ( units , tmp ) ;
53372: LD_ADDR_VAR 0 3
53376: PUSH
53377: LD_VAR 0 1
53381: PPUSH
53382: LD_VAR 0 5
53386: PPUSH
53387: CALL_OW 77
53391: ST_TO_ADDR
// end ;
53392: LD_VAR 0 3
53396: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53397: LD_INT 0
53399: PPUSH
53400: PPUSH
53401: PPUSH
// x := GetX ( building ) ;
53402: LD_ADDR_VAR 0 4
53406: PUSH
53407: LD_VAR 0 2
53411: PPUSH
53412: CALL_OW 250
53416: ST_TO_ADDR
// y := GetY ( building ) ;
53417: LD_ADDR_VAR 0 5
53421: PUSH
53422: LD_VAR 0 2
53426: PPUSH
53427: CALL_OW 251
53431: ST_TO_ADDR
// if GetTaskList ( unit ) then
53432: LD_VAR 0 1
53436: PPUSH
53437: CALL_OW 437
53441: IFFALSE 53536
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53443: LD_STRING e
53445: PUSH
53446: LD_VAR 0 1
53450: PPUSH
53451: CALL_OW 437
53455: PUSH
53456: LD_INT 1
53458: ARRAY
53459: PUSH
53460: LD_INT 1
53462: ARRAY
53463: EQUAL
53464: PUSH
53465: LD_VAR 0 4
53469: PUSH
53470: LD_VAR 0 1
53474: PPUSH
53475: CALL_OW 437
53479: PUSH
53480: LD_INT 1
53482: ARRAY
53483: PUSH
53484: LD_INT 2
53486: ARRAY
53487: EQUAL
53488: AND
53489: PUSH
53490: LD_VAR 0 5
53494: PUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 437
53504: PUSH
53505: LD_INT 1
53507: ARRAY
53508: PUSH
53509: LD_INT 3
53511: ARRAY
53512: EQUAL
53513: AND
53514: IFFALSE 53526
// result := true else
53516: LD_ADDR_VAR 0 3
53520: PUSH
53521: LD_INT 1
53523: ST_TO_ADDR
53524: GO 53534
// result := false ;
53526: LD_ADDR_VAR 0 3
53530: PUSH
53531: LD_INT 0
53533: ST_TO_ADDR
// end else
53534: GO 53544
// result := false ;
53536: LD_ADDR_VAR 0 3
53540: PUSH
53541: LD_INT 0
53543: ST_TO_ADDR
// end ;
53544: LD_VAR 0 3
53548: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53549: LD_INT 0
53551: PPUSH
53552: PPUSH
53553: PPUSH
53554: PPUSH
// if not unit or not area then
53555: LD_VAR 0 1
53559: NOT
53560: PUSH
53561: LD_VAR 0 2
53565: NOT
53566: OR
53567: IFFALSE 53571
// exit ;
53569: GO 53735
// tmp := AreaToList ( area , i ) ;
53571: LD_ADDR_VAR 0 6
53575: PUSH
53576: LD_VAR 0 2
53580: PPUSH
53581: LD_VAR 0 5
53585: PPUSH
53586: CALL_OW 517
53590: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53591: LD_ADDR_VAR 0 5
53595: PUSH
53596: DOUBLE
53597: LD_INT 1
53599: DEC
53600: ST_TO_ADDR
53601: LD_VAR 0 6
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PUSH
53610: FOR_TO
53611: IFFALSE 53733
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53613: LD_ADDR_VAR 0 7
53617: PUSH
53618: LD_VAR 0 6
53622: PUSH
53623: LD_INT 1
53625: ARRAY
53626: PUSH
53627: LD_VAR 0 5
53631: ARRAY
53632: PUSH
53633: LD_VAR 0 6
53637: PUSH
53638: LD_INT 2
53640: ARRAY
53641: PUSH
53642: LD_VAR 0 5
53646: ARRAY
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53652: LD_VAR 0 7
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: PPUSH
53661: LD_VAR 0 7
53665: PUSH
53666: LD_INT 2
53668: ARRAY
53669: PPUSH
53670: CALL_OW 428
53674: PUSH
53675: LD_INT 0
53677: EQUAL
53678: IFFALSE 53731
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53680: LD_VAR 0 1
53684: PPUSH
53685: LD_VAR 0 7
53689: PUSH
53690: LD_INT 1
53692: ARRAY
53693: PPUSH
53694: LD_VAR 0 7
53698: PUSH
53699: LD_INT 2
53701: ARRAY
53702: PPUSH
53703: LD_VAR 0 3
53707: PPUSH
53708: CALL_OW 48
// result := IsPlaced ( unit ) ;
53712: LD_ADDR_VAR 0 4
53716: PUSH
53717: LD_VAR 0 1
53721: PPUSH
53722: CALL_OW 305
53726: ST_TO_ADDR
// exit ;
53727: POP
53728: POP
53729: GO 53735
// end ; end ;
53731: GO 53610
53733: POP
53734: POP
// end ;
53735: LD_VAR 0 4
53739: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53740: LD_INT 0
53742: PPUSH
53743: PPUSH
53744: PPUSH
// if not side or side > 8 then
53745: LD_VAR 0 1
53749: NOT
53750: PUSH
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 8
53758: GREATER
53759: OR
53760: IFFALSE 53764
// exit ;
53762: GO 53951
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53764: LD_ADDR_VAR 0 4
53768: PUSH
53769: LD_INT 22
53771: PUSH
53772: LD_VAR 0 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 21
53783: PUSH
53784: LD_INT 3
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PPUSH
53795: CALL_OW 69
53799: ST_TO_ADDR
// if not tmp then
53800: LD_VAR 0 4
53804: NOT
53805: IFFALSE 53809
// exit ;
53807: GO 53951
// enable_addtolog := true ;
53809: LD_ADDR_OWVAR 81
53813: PUSH
53814: LD_INT 1
53816: ST_TO_ADDR
// AddToLog ( [ ) ;
53817: LD_STRING [
53819: PPUSH
53820: CALL_OW 561
// for i in tmp do
53824: LD_ADDR_VAR 0 3
53828: PUSH
53829: LD_VAR 0 4
53833: PUSH
53834: FOR_IN
53835: IFFALSE 53942
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53837: LD_STRING [
53839: PUSH
53840: LD_VAR 0 3
53844: PPUSH
53845: CALL_OW 266
53849: STR
53850: PUSH
53851: LD_STRING , 
53853: STR
53854: PUSH
53855: LD_VAR 0 3
53859: PPUSH
53860: CALL_OW 250
53864: STR
53865: PUSH
53866: LD_STRING , 
53868: STR
53869: PUSH
53870: LD_VAR 0 3
53874: PPUSH
53875: CALL_OW 251
53879: STR
53880: PUSH
53881: LD_STRING , 
53883: STR
53884: PUSH
53885: LD_VAR 0 3
53889: PPUSH
53890: CALL_OW 254
53894: STR
53895: PUSH
53896: LD_STRING , 
53898: STR
53899: PUSH
53900: LD_VAR 0 3
53904: PPUSH
53905: LD_INT 1
53907: PPUSH
53908: CALL_OW 268
53912: STR
53913: PUSH
53914: LD_STRING , 
53916: STR
53917: PUSH
53918: LD_VAR 0 3
53922: PPUSH
53923: LD_INT 2
53925: PPUSH
53926: CALL_OW 268
53930: STR
53931: PUSH
53932: LD_STRING ],
53934: STR
53935: PPUSH
53936: CALL_OW 561
// end ;
53940: GO 53834
53942: POP
53943: POP
// AddToLog ( ]; ) ;
53944: LD_STRING ];
53946: PPUSH
53947: CALL_OW 561
// end ;
53951: LD_VAR 0 2
53955: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53956: LD_INT 0
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
// if not area or not rate or not max then
53963: LD_VAR 0 1
53967: NOT
53968: PUSH
53969: LD_VAR 0 2
53973: NOT
53974: OR
53975: PUSH
53976: LD_VAR 0 4
53980: NOT
53981: OR
53982: IFFALSE 53986
// exit ;
53984: GO 54178
// while 1 do
53986: LD_INT 1
53988: IFFALSE 54178
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53990: LD_ADDR_VAR 0 9
53994: PUSH
53995: LD_VAR 0 1
53999: PPUSH
54000: LD_INT 1
54002: PPUSH
54003: CALL_OW 287
54007: PUSH
54008: LD_INT 10
54010: MUL
54011: ST_TO_ADDR
// r := rate / 10 ;
54012: LD_ADDR_VAR 0 7
54016: PUSH
54017: LD_VAR 0 2
54021: PUSH
54022: LD_INT 10
54024: DIVREAL
54025: ST_TO_ADDR
// time := 1 1$00 ;
54026: LD_ADDR_VAR 0 8
54030: PUSH
54031: LD_INT 2100
54033: ST_TO_ADDR
// if amount < min then
54034: LD_VAR 0 9
54038: PUSH
54039: LD_VAR 0 3
54043: LESS
54044: IFFALSE 54062
// r := r * 2 else
54046: LD_ADDR_VAR 0 7
54050: PUSH
54051: LD_VAR 0 7
54055: PUSH
54056: LD_INT 2
54058: MUL
54059: ST_TO_ADDR
54060: GO 54088
// if amount > max then
54062: LD_VAR 0 9
54066: PUSH
54067: LD_VAR 0 4
54071: GREATER
54072: IFFALSE 54088
// r := r / 2 ;
54074: LD_ADDR_VAR 0 7
54078: PUSH
54079: LD_VAR 0 7
54083: PUSH
54084: LD_INT 2
54086: DIVREAL
54087: ST_TO_ADDR
// time := time / r ;
54088: LD_ADDR_VAR 0 8
54092: PUSH
54093: LD_VAR 0 8
54097: PUSH
54098: LD_VAR 0 7
54102: DIVREAL
54103: ST_TO_ADDR
// if time < 0 then
54104: LD_VAR 0 8
54108: PUSH
54109: LD_INT 0
54111: LESS
54112: IFFALSE 54129
// time := time * - 1 ;
54114: LD_ADDR_VAR 0 8
54118: PUSH
54119: LD_VAR 0 8
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: MUL
54128: ST_TO_ADDR
// wait ( time ) ;
54129: LD_VAR 0 8
54133: PPUSH
54134: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54138: LD_INT 35
54140: PPUSH
54141: LD_INT 875
54143: PPUSH
54144: CALL_OW 12
54148: PPUSH
54149: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54153: LD_INT 1
54155: PPUSH
54156: LD_INT 5
54158: PPUSH
54159: CALL_OW 12
54163: PPUSH
54164: LD_VAR 0 1
54168: PPUSH
54169: LD_INT 1
54171: PPUSH
54172: CALL_OW 55
// end ;
54176: GO 53986
// end ;
54178: LD_VAR 0 5
54182: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54183: LD_INT 0
54185: PPUSH
54186: PPUSH
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
// if not turrets or not factories then
54193: LD_VAR 0 1
54197: NOT
54198: PUSH
54199: LD_VAR 0 2
54203: NOT
54204: OR
54205: IFFALSE 54209
// exit ;
54207: GO 54516
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54209: LD_ADDR_VAR 0 10
54213: PUSH
54214: LD_INT 5
54216: PUSH
54217: LD_INT 6
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 4
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 5
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 24
54251: PUSH
54252: LD_INT 25
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 23
54261: PUSH
54262: LD_INT 27
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 42
54275: PUSH
54276: LD_INT 43
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 44
54285: PUSH
54286: LD_INT 46
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 45
54295: PUSH
54296: LD_INT 47
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// result := [ ] ;
54313: LD_ADDR_VAR 0 3
54317: PUSH
54318: EMPTY
54319: ST_TO_ADDR
// for i in turrets do
54320: LD_ADDR_VAR 0 4
54324: PUSH
54325: LD_VAR 0 1
54329: PUSH
54330: FOR_IN
54331: IFFALSE 54514
// begin nat := GetNation ( i ) ;
54333: LD_ADDR_VAR 0 7
54337: PUSH
54338: LD_VAR 0 4
54342: PPUSH
54343: CALL_OW 248
54347: ST_TO_ADDR
// weapon := 0 ;
54348: LD_ADDR_VAR 0 8
54352: PUSH
54353: LD_INT 0
54355: ST_TO_ADDR
// if not nat then
54356: LD_VAR 0 7
54360: NOT
54361: IFFALSE 54365
// continue ;
54363: GO 54330
// for j in list [ nat ] do
54365: LD_ADDR_VAR 0 5
54369: PUSH
54370: LD_VAR 0 10
54374: PUSH
54375: LD_VAR 0 7
54379: ARRAY
54380: PUSH
54381: FOR_IN
54382: IFFALSE 54423
// if GetBWeapon ( i ) = j [ 1 ] then
54384: LD_VAR 0 4
54388: PPUSH
54389: CALL_OW 269
54393: PUSH
54394: LD_VAR 0 5
54398: PUSH
54399: LD_INT 1
54401: ARRAY
54402: EQUAL
54403: IFFALSE 54421
// begin weapon := j [ 2 ] ;
54405: LD_ADDR_VAR 0 8
54409: PUSH
54410: LD_VAR 0 5
54414: PUSH
54415: LD_INT 2
54417: ARRAY
54418: ST_TO_ADDR
// break ;
54419: GO 54423
// end ;
54421: GO 54381
54423: POP
54424: POP
// if not weapon then
54425: LD_VAR 0 8
54429: NOT
54430: IFFALSE 54434
// continue ;
54432: GO 54330
// for k in factories do
54434: LD_ADDR_VAR 0 6
54438: PUSH
54439: LD_VAR 0 2
54443: PUSH
54444: FOR_IN
54445: IFFALSE 54510
// begin weapons := AvailableWeaponList ( k ) ;
54447: LD_ADDR_VAR 0 9
54451: PUSH
54452: LD_VAR 0 6
54456: PPUSH
54457: CALL_OW 478
54461: ST_TO_ADDR
// if not weapons then
54462: LD_VAR 0 9
54466: NOT
54467: IFFALSE 54471
// continue ;
54469: GO 54444
// if weapon in weapons then
54471: LD_VAR 0 8
54475: PUSH
54476: LD_VAR 0 9
54480: IN
54481: IFFALSE 54508
// begin result := [ i , weapon ] ;
54483: LD_ADDR_VAR 0 3
54487: PUSH
54488: LD_VAR 0 4
54492: PUSH
54493: LD_VAR 0 8
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// exit ;
54502: POP
54503: POP
54504: POP
54505: POP
54506: GO 54516
// end ; end ;
54508: GO 54444
54510: POP
54511: POP
// end ;
54512: GO 54330
54514: POP
54515: POP
// end ;
54516: LD_VAR 0 3
54520: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54521: LD_INT 0
54523: PPUSH
// if not side or side > 8 then
54524: LD_VAR 0 3
54528: NOT
54529: PUSH
54530: LD_VAR 0 3
54534: PUSH
54535: LD_INT 8
54537: GREATER
54538: OR
54539: IFFALSE 54543
// exit ;
54541: GO 54602
// if not range then
54543: LD_VAR 0 4
54547: NOT
54548: IFFALSE 54559
// range := - 12 ;
54550: LD_ADDR_VAR 0 4
54554: PUSH
54555: LD_INT 12
54557: NEG
54558: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54559: LD_VAR 0 1
54563: PPUSH
54564: LD_VAR 0 2
54568: PPUSH
54569: LD_VAR 0 3
54573: PPUSH
54574: LD_VAR 0 4
54578: PPUSH
54579: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54583: LD_VAR 0 1
54587: PPUSH
54588: LD_VAR 0 2
54592: PPUSH
54593: LD_VAR 0 3
54597: PPUSH
54598: CALL_OW 331
// end ;
54602: LD_VAR 0 5
54606: RET
// export function Video ( mode ) ; begin
54607: LD_INT 0
54609: PPUSH
// ingame_video = mode ;
54610: LD_ADDR_OWVAR 52
54614: PUSH
54615: LD_VAR 0 1
54619: ST_TO_ADDR
// interface_hidden = mode ;
54620: LD_ADDR_OWVAR 54
54624: PUSH
54625: LD_VAR 0 1
54629: ST_TO_ADDR
// end ;
54630: LD_VAR 0 2
54634: RET
// export function Join ( array , element ) ; begin
54635: LD_INT 0
54637: PPUSH
// result := array ^ element ;
54638: LD_ADDR_VAR 0 3
54642: PUSH
54643: LD_VAR 0 1
54647: PUSH
54648: LD_VAR 0 2
54652: ADD
54653: ST_TO_ADDR
// end ;
54654: LD_VAR 0 3
54658: RET
// export function JoinUnion ( array , element ) ; begin
54659: LD_INT 0
54661: PPUSH
// result := array union element ;
54662: LD_ADDR_VAR 0 3
54666: PUSH
54667: LD_VAR 0 1
54671: PUSH
54672: LD_VAR 0 2
54676: UNION
54677: ST_TO_ADDR
// end ;
54678: LD_VAR 0 3
54682: RET
// export function GetBehemoths ( side ) ; begin
54683: LD_INT 0
54685: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54686: LD_ADDR_VAR 0 2
54690: PUSH
54691: LD_INT 22
54693: PUSH
54694: LD_VAR 0 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 31
54705: PUSH
54706: LD_INT 25
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PPUSH
54717: CALL_OW 69
54721: ST_TO_ADDR
// end ;
54722: LD_VAR 0 2
54726: RET
// export function Shuffle ( array ) ; var i , index ; begin
54727: LD_INT 0
54729: PPUSH
54730: PPUSH
54731: PPUSH
// result := [ ] ;
54732: LD_ADDR_VAR 0 2
54736: PUSH
54737: EMPTY
54738: ST_TO_ADDR
// if not array then
54739: LD_VAR 0 1
54743: NOT
54744: IFFALSE 54748
// exit ;
54746: GO 54847
// Randomize ;
54748: CALL_OW 10
// for i = array downto 1 do
54752: LD_ADDR_VAR 0 3
54756: PUSH
54757: DOUBLE
54758: LD_VAR 0 1
54762: INC
54763: ST_TO_ADDR
54764: LD_INT 1
54766: PUSH
54767: FOR_DOWNTO
54768: IFFALSE 54845
// begin index := rand ( 1 , array ) ;
54770: LD_ADDR_VAR 0 4
54774: PUSH
54775: LD_INT 1
54777: PPUSH
54778: LD_VAR 0 1
54782: PPUSH
54783: CALL_OW 12
54787: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54788: LD_ADDR_VAR 0 2
54792: PUSH
54793: LD_VAR 0 2
54797: PPUSH
54798: LD_VAR 0 2
54802: PUSH
54803: LD_INT 1
54805: PLUS
54806: PPUSH
54807: LD_VAR 0 1
54811: PUSH
54812: LD_VAR 0 4
54816: ARRAY
54817: PPUSH
54818: CALL_OW 2
54822: ST_TO_ADDR
// array := Delete ( array , index ) ;
54823: LD_ADDR_VAR 0 1
54827: PUSH
54828: LD_VAR 0 1
54832: PPUSH
54833: LD_VAR 0 4
54837: PPUSH
54838: CALL_OW 3
54842: ST_TO_ADDR
// end ;
54843: GO 54767
54845: POP
54846: POP
// end ;
54847: LD_VAR 0 2
54851: RET
// export function GetBaseMaterials ( base ) ; begin
54852: LD_INT 0
54854: PPUSH
// result := [ 0 , 0 , 0 ] ;
54855: LD_ADDR_VAR 0 2
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: ST_TO_ADDR
// if not base then
54874: LD_VAR 0 1
54878: NOT
54879: IFFALSE 54883
// exit ;
54881: GO 54932
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54883: LD_ADDR_VAR 0 2
54887: PUSH
54888: LD_VAR 0 1
54892: PPUSH
54893: LD_INT 1
54895: PPUSH
54896: CALL_OW 275
54900: PUSH
54901: LD_VAR 0 1
54905: PPUSH
54906: LD_INT 2
54908: PPUSH
54909: CALL_OW 275
54913: PUSH
54914: LD_VAR 0 1
54918: PPUSH
54919: LD_INT 3
54921: PPUSH
54922: CALL_OW 275
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// end ;
54932: LD_VAR 0 2
54936: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54937: LD_INT 0
54939: PPUSH
54940: PPUSH
// result := array ;
54941: LD_ADDR_VAR 0 3
54945: PUSH
54946: LD_VAR 0 1
54950: ST_TO_ADDR
// if size > 0 then
54951: LD_VAR 0 2
54955: PUSH
54956: LD_INT 0
54958: GREATER
54959: IFFALSE 55005
// for i := array downto size do
54961: LD_ADDR_VAR 0 4
54965: PUSH
54966: DOUBLE
54967: LD_VAR 0 1
54971: INC
54972: ST_TO_ADDR
54973: LD_VAR 0 2
54977: PUSH
54978: FOR_DOWNTO
54979: IFFALSE 55003
// result := Delete ( result , result ) ;
54981: LD_ADDR_VAR 0 3
54985: PUSH
54986: LD_VAR 0 3
54990: PPUSH
54991: LD_VAR 0 3
54995: PPUSH
54996: CALL_OW 3
55000: ST_TO_ADDR
55001: GO 54978
55003: POP
55004: POP
// end ;
55005: LD_VAR 0 3
55009: RET
// export function ComExit ( unit ) ; var tmp ; begin
55010: LD_INT 0
55012: PPUSH
55013: PPUSH
// if not IsInUnit ( unit ) then
55014: LD_VAR 0 1
55018: PPUSH
55019: CALL_OW 310
55023: NOT
55024: IFFALSE 55028
// exit ;
55026: GO 55088
// tmp := IsInUnit ( unit ) ;
55028: LD_ADDR_VAR 0 3
55032: PUSH
55033: LD_VAR 0 1
55037: PPUSH
55038: CALL_OW 310
55042: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55043: LD_VAR 0 3
55047: PPUSH
55048: CALL_OW 247
55052: PUSH
55053: LD_INT 2
55055: EQUAL
55056: IFFALSE 55069
// ComExitVehicle ( unit ) else
55058: LD_VAR 0 1
55062: PPUSH
55063: CALL_OW 121
55067: GO 55078
// ComExitBuilding ( unit ) ;
55069: LD_VAR 0 1
55073: PPUSH
55074: CALL_OW 122
// result := tmp ;
55078: LD_ADDR_VAR 0 2
55082: PUSH
55083: LD_VAR 0 3
55087: ST_TO_ADDR
// end ;
55088: LD_VAR 0 2
55092: RET
// export function ResetHc ; begin
55093: LD_INT 0
55095: PPUSH
// InitHc ;
55096: CALL_OW 19
// hc_importance := 0 ;
55100: LD_ADDR_OWVAR 32
55104: PUSH
55105: LD_INT 0
55107: ST_TO_ADDR
// end ;
55108: LD_VAR 0 1
55112: RET
