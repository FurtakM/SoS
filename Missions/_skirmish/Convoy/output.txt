// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( pos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( pos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := pos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := pos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := pos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := pos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( pos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( pos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := pos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := pos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7714: GO 7716
7716: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7717: LD_STRING initStreamRollete();
7719: PPUSH
7720: CALL_OW 559
// InitStreamMode ;
7724: CALL 7733 0 0
// DefineStreamItems ( ) ;
7728: CALL 8173 0 0
// end ;
7732: END
// function InitStreamMode ; begin
7733: LD_INT 0
7735: PPUSH
// streamModeActive := false ;
7736: LD_ADDR_EXP 19
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// normalCounter := 36 ;
7744: LD_ADDR_EXP 20
7748: PUSH
7749: LD_INT 36
7751: ST_TO_ADDR
// hardcoreCounter := 16 ;
7752: LD_ADDR_EXP 21
7756: PUSH
7757: LD_INT 16
7759: ST_TO_ADDR
// sRocket := false ;
7760: LD_ADDR_EXP 24
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sSpeed := false ;
7768: LD_ADDR_EXP 23
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sEngine := false ;
7776: LD_ADDR_EXP 25
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sSpec := false ;
7784: LD_ADDR_EXP 22
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sLevel := false ;
7792: LD_ADDR_EXP 26
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sArmoury := false ;
7800: LD_ADDR_EXP 27
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sRadar := false ;
7808: LD_ADDR_EXP 28
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sBunker := false ;
7816: LD_ADDR_EXP 29
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sHack := false ;
7824: LD_ADDR_EXP 30
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sFire := false ;
7832: LD_ADDR_EXP 31
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sRefresh := false ;
7840: LD_ADDR_EXP 32
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sExp := false ;
7848: LD_ADDR_EXP 33
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sDepot := false ;
7856: LD_ADDR_EXP 34
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sFlag := false ;
7864: LD_ADDR_EXP 35
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sKamikadze := false ;
7872: LD_ADDR_EXP 43
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sTroll := false ;
7880: LD_ADDR_EXP 44
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sSlow := false ;
7888: LD_ADDR_EXP 45
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sLack := false ;
7896: LD_ADDR_EXP 46
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sTank := false ;
7904: LD_ADDR_EXP 48
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sRemote := false ;
7912: LD_ADDR_EXP 49
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sPowell := false ;
7920: LD_ADDR_EXP 50
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sTeleport := false ;
7928: LD_ADDR_EXP 53
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sOilTower := false ;
7936: LD_ADDR_EXP 55
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sShovel := false ;
7944: LD_ADDR_EXP 56
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sSheik := false ;
7952: LD_ADDR_EXP 57
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sEarthquake := false ;
7960: LD_ADDR_EXP 59
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sAI := false ;
7968: LD_ADDR_EXP 60
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sCargo := false ;
7976: LD_ADDR_EXP 63
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sDLaser := false ;
7984: LD_ADDR_EXP 64
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sExchange := false ;
7992: LD_ADDR_EXP 65
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sFac := false ;
8000: LD_ADDR_EXP 66
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sPower := false ;
8008: LD_ADDR_EXP 67
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sRandom := false ;
8016: LD_ADDR_EXP 68
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sShield := false ;
8024: LD_ADDR_EXP 69
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// sTime := false ;
8032: LD_ADDR_EXP 70
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// sTools := false ;
8040: LD_ADDR_EXP 71
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// sSold := false ;
8048: LD_ADDR_EXP 36
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sDiff := false ;
8056: LD_ADDR_EXP 37
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// sFog := false ;
8064: LD_ADDR_EXP 40
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// sReset := false ;
8072: LD_ADDR_EXP 41
8076: PUSH
8077: LD_INT 0
8079: ST_TO_ADDR
// sSun := false ;
8080: LD_ADDR_EXP 42
8084: PUSH
8085: LD_INT 0
8087: ST_TO_ADDR
// sTiger := false ;
8088: LD_ADDR_EXP 38
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// sBomb := false ;
8096: LD_ADDR_EXP 39
8100: PUSH
8101: LD_INT 0
8103: ST_TO_ADDR
// sWound := false ;
8104: LD_ADDR_EXP 47
8108: PUSH
8109: LD_INT 0
8111: ST_TO_ADDR
// sBetray := false ;
8112: LD_ADDR_EXP 51
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// sContamin := false ;
8120: LD_ADDR_EXP 52
8124: PUSH
8125: LD_INT 0
8127: ST_TO_ADDR
// sOil := false ;
8128: LD_ADDR_EXP 54
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// sStu := false ;
8136: LD_ADDR_EXP 58
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// sBazooka := false ;
8144: LD_ADDR_EXP 61
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// sMortar := false ;
8152: LD_ADDR_EXP 62
8156: PUSH
8157: LD_INT 0
8159: ST_TO_ADDR
// sRanger := false ;
8160: LD_ADDR_EXP 72
8164: PUSH
8165: LD_INT 0
8167: ST_TO_ADDR
// end ;
8168: LD_VAR 0 1
8172: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8173: LD_INT 0
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
// result := [ ] ;
8180: LD_ADDR_VAR 0 1
8184: PUSH
8185: EMPTY
8186: ST_TO_ADDR
// if campaign_id = 1 then
8187: LD_OWVAR 69
8191: PUSH
8192: LD_INT 1
8194: EQUAL
8195: IFFALSE 11133
// begin case mission_number of 1 :
8197: LD_OWVAR 70
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8274
8210: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8211: LD_ADDR_VAR 0 1
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: LD_INT 4
8221: PUSH
8222: LD_INT 11
8224: PUSH
8225: LD_INT 12
8227: PUSH
8228: LD_INT 15
8230: PUSH
8231: LD_INT 16
8233: PUSH
8234: LD_INT 22
8236: PUSH
8237: LD_INT 23
8239: PUSH
8240: LD_INT 26
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 101
8256: PUSH
8257: LD_INT 102
8259: PUSH
8260: LD_INT 106
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 11131
8274: LD_INT 2
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8354
8282: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8283: LD_ADDR_VAR 0 1
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 11
8296: PUSH
8297: LD_INT 12
8299: PUSH
8300: LD_INT 15
8302: PUSH
8303: LD_INT 16
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 23
8311: PUSH
8312: LD_INT 26
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 101
8328: PUSH
8329: LD_INT 102
8331: PUSH
8332: LD_INT 105
8334: PUSH
8335: LD_INT 106
8337: PUSH
8338: LD_INT 108
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: ST_TO_ADDR
8352: GO 11131
8354: LD_INT 3
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8438
8362: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: LD_INT 5
8376: PUSH
8377: LD_INT 11
8379: PUSH
8380: LD_INT 12
8382: PUSH
8383: LD_INT 15
8385: PUSH
8386: LD_INT 16
8388: PUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 26
8394: PUSH
8395: LD_INT 36
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 101
8412: PUSH
8413: LD_INT 102
8415: PUSH
8416: LD_INT 105
8418: PUSH
8419: LD_INT 106
8421: PUSH
8422: LD_INT 108
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: ST_TO_ADDR
8436: GO 11131
8438: LD_INT 4
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8530
8446: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8447: LD_ADDR_VAR 0 1
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: LD_INT 4
8457: PUSH
8458: LD_INT 5
8460: PUSH
8461: LD_INT 8
8463: PUSH
8464: LD_INT 11
8466: PUSH
8467: LD_INT 12
8469: PUSH
8470: LD_INT 15
8472: PUSH
8473: LD_INT 16
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_INT 23
8481: PUSH
8482: LD_INT 26
8484: PUSH
8485: LD_INT 36
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 101
8504: PUSH
8505: LD_INT 102
8507: PUSH
8508: LD_INT 105
8510: PUSH
8511: LD_INT 106
8513: PUSH
8514: LD_INT 108
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: ST_TO_ADDR
8528: GO 11131
8530: LD_INT 5
8532: DOUBLE
8533: EQUAL
8534: IFTRUE 8538
8536: GO 8638
8538: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8539: LD_ADDR_VAR 0 1
8543: PUSH
8544: LD_INT 2
8546: PUSH
8547: LD_INT 4
8549: PUSH
8550: LD_INT 5
8552: PUSH
8553: LD_INT 6
8555: PUSH
8556: LD_INT 8
8558: PUSH
8559: LD_INT 11
8561: PUSH
8562: LD_INT 12
8564: PUSH
8565: LD_INT 15
8567: PUSH
8568: LD_INT 16
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_INT 23
8576: PUSH
8577: LD_INT 25
8579: PUSH
8580: LD_INT 26
8582: PUSH
8583: LD_INT 36
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 101
8604: PUSH
8605: LD_INT 102
8607: PUSH
8608: LD_INT 105
8610: PUSH
8611: LD_INT 106
8613: PUSH
8614: LD_INT 108
8616: PUSH
8617: LD_INT 109
8619: PUSH
8620: LD_INT 112
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: ST_TO_ADDR
8636: GO 11131
8638: LD_INT 6
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8646
8644: GO 8766
8646: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8647: LD_ADDR_VAR 0 1
8651: PUSH
8652: LD_INT 2
8654: PUSH
8655: LD_INT 4
8657: PUSH
8658: LD_INT 5
8660: PUSH
8661: LD_INT 6
8663: PUSH
8664: LD_INT 8
8666: PUSH
8667: LD_INT 11
8669: PUSH
8670: LD_INT 12
8672: PUSH
8673: LD_INT 15
8675: PUSH
8676: LD_INT 16
8678: PUSH
8679: LD_INT 20
8681: PUSH
8682: LD_INT 21
8684: PUSH
8685: LD_INT 22
8687: PUSH
8688: LD_INT 23
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 26
8696: PUSH
8697: LD_INT 30
8699: PUSH
8700: LD_INT 31
8702: PUSH
8703: LD_INT 32
8705: PUSH
8706: LD_INT 36
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 101
8732: PUSH
8733: LD_INT 102
8735: PUSH
8736: LD_INT 105
8738: PUSH
8739: LD_INT 106
8741: PUSH
8742: LD_INT 108
8744: PUSH
8745: LD_INT 109
8747: PUSH
8748: LD_INT 112
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: ST_TO_ADDR
8764: GO 11131
8766: LD_INT 7
8768: DOUBLE
8769: EQUAL
8770: IFTRUE 8774
8772: GO 8874
8774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8775: LD_ADDR_VAR 0 1
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 4
8785: PUSH
8786: LD_INT 5
8788: PUSH
8789: LD_INT 7
8791: PUSH
8792: LD_INT 11
8794: PUSH
8795: LD_INT 12
8797: PUSH
8798: LD_INT 15
8800: PUSH
8801: LD_INT 16
8803: PUSH
8804: LD_INT 20
8806: PUSH
8807: LD_INT 21
8809: PUSH
8810: LD_INT 22
8812: PUSH
8813: LD_INT 23
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 101
8840: PUSH
8841: LD_INT 102
8843: PUSH
8844: LD_INT 103
8846: PUSH
8847: LD_INT 105
8849: PUSH
8850: LD_INT 106
8852: PUSH
8853: LD_INT 108
8855: PUSH
8856: LD_INT 112
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: ST_TO_ADDR
8872: GO 11131
8874: LD_INT 8
8876: DOUBLE
8877: EQUAL
8878: IFTRUE 8882
8880: GO 9010
8882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8883: LD_ADDR_VAR 0 1
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 4
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: LD_INT 6
8899: PUSH
8900: LD_INT 7
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: LD_INT 11
8908: PUSH
8909: LD_INT 12
8911: PUSH
8912: LD_INT 15
8914: PUSH
8915: LD_INT 16
8917: PUSH
8918: LD_INT 20
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 25
8932: PUSH
8933: LD_INT 26
8935: PUSH
8936: LD_INT 30
8938: PUSH
8939: LD_INT 31
8941: PUSH
8942: LD_INT 32
8944: PUSH
8945: LD_INT 36
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 101
8972: PUSH
8973: LD_INT 102
8975: PUSH
8976: LD_INT 103
8978: PUSH
8979: LD_INT 105
8981: PUSH
8982: LD_INT 106
8984: PUSH
8985: LD_INT 108
8987: PUSH
8988: LD_INT 109
8990: PUSH
8991: LD_INT 112
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: ST_TO_ADDR
9008: GO 11131
9010: LD_INT 9
9012: DOUBLE
9013: EQUAL
9014: IFTRUE 9018
9016: GO 9154
9018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9019: LD_ADDR_VAR 0 1
9023: PUSH
9024: LD_INT 2
9026: PUSH
9027: LD_INT 4
9029: PUSH
9030: LD_INT 5
9032: PUSH
9033: LD_INT 6
9035: PUSH
9036: LD_INT 7
9038: PUSH
9039: LD_INT 8
9041: PUSH
9042: LD_INT 11
9044: PUSH
9045: LD_INT 12
9047: PUSH
9048: LD_INT 15
9050: PUSH
9051: LD_INT 16
9053: PUSH
9054: LD_INT 20
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 23
9065: PUSH
9066: LD_INT 25
9068: PUSH
9069: LD_INT 26
9071: PUSH
9072: LD_INT 28
9074: PUSH
9075: LD_INT 30
9077: PUSH
9078: LD_INT 31
9080: PUSH
9081: LD_INT 32
9083: PUSH
9084: LD_INT 36
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 101
9112: PUSH
9113: LD_INT 102
9115: PUSH
9116: LD_INT 103
9118: PUSH
9119: LD_INT 105
9121: PUSH
9122: LD_INT 106
9124: PUSH
9125: LD_INT 108
9127: PUSH
9128: LD_INT 109
9130: PUSH
9131: LD_INT 112
9133: PUSH
9134: LD_INT 114
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: ST_TO_ADDR
9152: GO 11131
9154: LD_INT 10
9156: DOUBLE
9157: EQUAL
9158: IFTRUE 9162
9160: GO 9346
9162: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9163: LD_ADDR_VAR 0 1
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 4
9173: PUSH
9174: LD_INT 5
9176: PUSH
9177: LD_INT 6
9179: PUSH
9180: LD_INT 7
9182: PUSH
9183: LD_INT 8
9185: PUSH
9186: LD_INT 9
9188: PUSH
9189: LD_INT 10
9191: PUSH
9192: LD_INT 11
9194: PUSH
9195: LD_INT 12
9197: PUSH
9198: LD_INT 13
9200: PUSH
9201: LD_INT 14
9203: PUSH
9204: LD_INT 15
9206: PUSH
9207: LD_INT 16
9209: PUSH
9210: LD_INT 17
9212: PUSH
9213: LD_INT 18
9215: PUSH
9216: LD_INT 19
9218: PUSH
9219: LD_INT 20
9221: PUSH
9222: LD_INT 21
9224: PUSH
9225: LD_INT 22
9227: PUSH
9228: LD_INT 23
9230: PUSH
9231: LD_INT 24
9233: PUSH
9234: LD_INT 25
9236: PUSH
9237: LD_INT 26
9239: PUSH
9240: LD_INT 28
9242: PUSH
9243: LD_INT 30
9245: PUSH
9246: LD_INT 31
9248: PUSH
9249: LD_INT 32
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 101
9288: PUSH
9289: LD_INT 102
9291: PUSH
9292: LD_INT 103
9294: PUSH
9295: LD_INT 104
9297: PUSH
9298: LD_INT 105
9300: PUSH
9301: LD_INT 106
9303: PUSH
9304: LD_INT 107
9306: PUSH
9307: LD_INT 108
9309: PUSH
9310: LD_INT 109
9312: PUSH
9313: LD_INT 110
9315: PUSH
9316: LD_INT 111
9318: PUSH
9319: LD_INT 112
9321: PUSH
9322: LD_INT 114
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: ST_TO_ADDR
9344: GO 11131
9346: LD_INT 11
9348: DOUBLE
9349: EQUAL
9350: IFTRUE 9354
9352: GO 9546
9354: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9355: LD_ADDR_VAR 0 1
9359: PUSH
9360: LD_INT 2
9362: PUSH
9363: LD_INT 3
9365: PUSH
9366: LD_INT 4
9368: PUSH
9369: LD_INT 5
9371: PUSH
9372: LD_INT 6
9374: PUSH
9375: LD_INT 7
9377: PUSH
9378: LD_INT 8
9380: PUSH
9381: LD_INT 9
9383: PUSH
9384: LD_INT 10
9386: PUSH
9387: LD_INT 11
9389: PUSH
9390: LD_INT 12
9392: PUSH
9393: LD_INT 13
9395: PUSH
9396: LD_INT 14
9398: PUSH
9399: LD_INT 15
9401: PUSH
9402: LD_INT 16
9404: PUSH
9405: LD_INT 17
9407: PUSH
9408: LD_INT 18
9410: PUSH
9411: LD_INT 19
9413: PUSH
9414: LD_INT 20
9416: PUSH
9417: LD_INT 21
9419: PUSH
9420: LD_INT 22
9422: PUSH
9423: LD_INT 23
9425: PUSH
9426: LD_INT 24
9428: PUSH
9429: LD_INT 25
9431: PUSH
9432: LD_INT 26
9434: PUSH
9435: LD_INT 28
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: LD_INT 31
9443: PUSH
9444: LD_INT 32
9446: PUSH
9447: LD_INT 34
9449: PUSH
9450: LD_INT 36
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 101
9488: PUSH
9489: LD_INT 102
9491: PUSH
9492: LD_INT 103
9494: PUSH
9495: LD_INT 104
9497: PUSH
9498: LD_INT 105
9500: PUSH
9501: LD_INT 106
9503: PUSH
9504: LD_INT 107
9506: PUSH
9507: LD_INT 108
9509: PUSH
9510: LD_INT 109
9512: PUSH
9513: LD_INT 110
9515: PUSH
9516: LD_INT 111
9518: PUSH
9519: LD_INT 112
9521: PUSH
9522: LD_INT 114
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: ST_TO_ADDR
9544: GO 11131
9546: LD_INT 12
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9762
9554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_INT 1
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 3
9568: PUSH
9569: LD_INT 4
9571: PUSH
9572: LD_INT 5
9574: PUSH
9575: LD_INT 6
9577: PUSH
9578: LD_INT 7
9580: PUSH
9581: LD_INT 8
9583: PUSH
9584: LD_INT 9
9586: PUSH
9587: LD_INT 10
9589: PUSH
9590: LD_INT 11
9592: PUSH
9593: LD_INT 12
9595: PUSH
9596: LD_INT 13
9598: PUSH
9599: LD_INT 14
9601: PUSH
9602: LD_INT 15
9604: PUSH
9605: LD_INT 16
9607: PUSH
9608: LD_INT 17
9610: PUSH
9611: LD_INT 18
9613: PUSH
9614: LD_INT 19
9616: PUSH
9617: LD_INT 20
9619: PUSH
9620: LD_INT 21
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 26
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 28
9643: PUSH
9644: LD_INT 30
9646: PUSH
9647: LD_INT 31
9649: PUSH
9650: LD_INT 32
9652: PUSH
9653: LD_INT 33
9655: PUSH
9656: LD_INT 34
9658: PUSH
9659: LD_INT 36
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 101
9700: PUSH
9701: LD_INT 102
9703: PUSH
9704: LD_INT 103
9706: PUSH
9707: LD_INT 104
9709: PUSH
9710: LD_INT 105
9712: PUSH
9713: LD_INT 106
9715: PUSH
9716: LD_INT 107
9718: PUSH
9719: LD_INT 108
9721: PUSH
9722: LD_INT 109
9724: PUSH
9725: LD_INT 110
9727: PUSH
9728: LD_INT 111
9730: PUSH
9731: LD_INT 112
9733: PUSH
9734: LD_INT 113
9736: PUSH
9737: LD_INT 114
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: ST_TO_ADDR
9760: GO 11131
9762: LD_INT 13
9764: DOUBLE
9765: EQUAL
9766: IFTRUE 9770
9768: GO 9966
9770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9771: LD_ADDR_VAR 0 1
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: LD_INT 3
9784: PUSH
9785: LD_INT 4
9787: PUSH
9788: LD_INT 5
9790: PUSH
9791: LD_INT 8
9793: PUSH
9794: LD_INT 9
9796: PUSH
9797: LD_INT 10
9799: PUSH
9800: LD_INT 11
9802: PUSH
9803: LD_INT 12
9805: PUSH
9806: LD_INT 14
9808: PUSH
9809: LD_INT 15
9811: PUSH
9812: LD_INT 16
9814: PUSH
9815: LD_INT 17
9817: PUSH
9818: LD_INT 18
9820: PUSH
9821: LD_INT 19
9823: PUSH
9824: LD_INT 20
9826: PUSH
9827: LD_INT 21
9829: PUSH
9830: LD_INT 22
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 24
9838: PUSH
9839: LD_INT 25
9841: PUSH
9842: LD_INT 26
9844: PUSH
9845: LD_INT 27
9847: PUSH
9848: LD_INT 28
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 31
9856: PUSH
9857: LD_INT 32
9859: PUSH
9860: LD_INT 33
9862: PUSH
9863: LD_INT 34
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 101
9904: PUSH
9905: LD_INT 102
9907: PUSH
9908: LD_INT 103
9910: PUSH
9911: LD_INT 104
9913: PUSH
9914: LD_INT 105
9916: PUSH
9917: LD_INT 106
9919: PUSH
9920: LD_INT 107
9922: PUSH
9923: LD_INT 108
9925: PUSH
9926: LD_INT 109
9928: PUSH
9929: LD_INT 110
9931: PUSH
9932: LD_INT 111
9934: PUSH
9935: LD_INT 112
9937: PUSH
9938: LD_INT 113
9940: PUSH
9941: LD_INT 114
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: ST_TO_ADDR
9964: GO 11131
9966: LD_INT 14
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 10186
9974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9975: LD_ADDR_VAR 0 1
9979: PUSH
9980: LD_INT 1
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: LD_INT 4
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: LD_INT 6
9997: PUSH
9998: LD_INT 7
10000: PUSH
10001: LD_INT 8
10003: PUSH
10004: LD_INT 9
10006: PUSH
10007: LD_INT 10
10009: PUSH
10010: LD_INT 11
10012: PUSH
10013: LD_INT 12
10015: PUSH
10016: LD_INT 13
10018: PUSH
10019: LD_INT 14
10021: PUSH
10022: LD_INT 15
10024: PUSH
10025: LD_INT 16
10027: PUSH
10028: LD_INT 17
10030: PUSH
10031: LD_INT 18
10033: PUSH
10034: LD_INT 19
10036: PUSH
10037: LD_INT 20
10039: PUSH
10040: LD_INT 21
10042: PUSH
10043: LD_INT 22
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: LD_INT 24
10051: PUSH
10052: LD_INT 25
10054: PUSH
10055: LD_INT 26
10057: PUSH
10058: LD_INT 27
10060: PUSH
10061: LD_INT 28
10063: PUSH
10064: LD_INT 29
10066: PUSH
10067: LD_INT 30
10069: PUSH
10070: LD_INT 31
10072: PUSH
10073: LD_INT 32
10075: PUSH
10076: LD_INT 33
10078: PUSH
10079: LD_INT 34
10081: PUSH
10082: LD_INT 36
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 101
10124: PUSH
10125: LD_INT 102
10127: PUSH
10128: LD_INT 103
10130: PUSH
10131: LD_INT 104
10133: PUSH
10134: LD_INT 105
10136: PUSH
10137: LD_INT 106
10139: PUSH
10140: LD_INT 107
10142: PUSH
10143: LD_INT 108
10145: PUSH
10146: LD_INT 109
10148: PUSH
10149: LD_INT 110
10151: PUSH
10152: LD_INT 111
10154: PUSH
10155: LD_INT 112
10157: PUSH
10158: LD_INT 113
10160: PUSH
10161: LD_INT 114
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: ST_TO_ADDR
10184: GO 11131
10186: LD_INT 15
10188: DOUBLE
10189: EQUAL
10190: IFTRUE 10194
10192: GO 10406
10194: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10195: LD_ADDR_VAR 0 1
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 4
10211: PUSH
10212: LD_INT 5
10214: PUSH
10215: LD_INT 6
10217: PUSH
10218: LD_INT 7
10220: PUSH
10221: LD_INT 8
10223: PUSH
10224: LD_INT 9
10226: PUSH
10227: LD_INT 10
10229: PUSH
10230: LD_INT 11
10232: PUSH
10233: LD_INT 12
10235: PUSH
10236: LD_INT 13
10238: PUSH
10239: LD_INT 14
10241: PUSH
10242: LD_INT 15
10244: PUSH
10245: LD_INT 16
10247: PUSH
10248: LD_INT 17
10250: PUSH
10251: LD_INT 18
10253: PUSH
10254: LD_INT 19
10256: PUSH
10257: LD_INT 20
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 22
10265: PUSH
10266: LD_INT 23
10268: PUSH
10269: LD_INT 24
10271: PUSH
10272: LD_INT 25
10274: PUSH
10275: LD_INT 26
10277: PUSH
10278: LD_INT 27
10280: PUSH
10281: LD_INT 28
10283: PUSH
10284: LD_INT 29
10286: PUSH
10287: LD_INT 30
10289: PUSH
10290: LD_INT 31
10292: PUSH
10293: LD_INT 32
10295: PUSH
10296: LD_INT 33
10298: PUSH
10299: LD_INT 34
10301: PUSH
10302: LD_INT 36
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 101
10344: PUSH
10345: LD_INT 102
10347: PUSH
10348: LD_INT 103
10350: PUSH
10351: LD_INT 104
10353: PUSH
10354: LD_INT 105
10356: PUSH
10357: LD_INT 106
10359: PUSH
10360: LD_INT 107
10362: PUSH
10363: LD_INT 108
10365: PUSH
10366: LD_INT 109
10368: PUSH
10369: LD_INT 110
10371: PUSH
10372: LD_INT 111
10374: PUSH
10375: LD_INT 112
10377: PUSH
10378: LD_INT 113
10380: PUSH
10381: LD_INT 114
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: ST_TO_ADDR
10404: GO 11131
10406: LD_INT 16
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 10538
10414: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10415: LD_ADDR_VAR 0 1
10419: PUSH
10420: LD_INT 2
10422: PUSH
10423: LD_INT 4
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: LD_INT 7
10431: PUSH
10432: LD_INT 11
10434: PUSH
10435: LD_INT 12
10437: PUSH
10438: LD_INT 15
10440: PUSH
10441: LD_INT 16
10443: PUSH
10444: LD_INT 20
10446: PUSH
10447: LD_INT 21
10449: PUSH
10450: LD_INT 22
10452: PUSH
10453: LD_INT 23
10455: PUSH
10456: LD_INT 25
10458: PUSH
10459: LD_INT 26
10461: PUSH
10462: LD_INT 30
10464: PUSH
10465: LD_INT 31
10467: PUSH
10468: LD_INT 32
10470: PUSH
10471: LD_INT 33
10473: PUSH
10474: LD_INT 34
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 102
10503: PUSH
10504: LD_INT 103
10506: PUSH
10507: LD_INT 106
10509: PUSH
10510: LD_INT 108
10512: PUSH
10513: LD_INT 112
10515: PUSH
10516: LD_INT 113
10518: PUSH
10519: LD_INT 114
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
10536: GO 11131
10538: LD_INT 17
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10758
10546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: LD_INT 6
10569: PUSH
10570: LD_INT 7
10572: PUSH
10573: LD_INT 8
10575: PUSH
10576: LD_INT 9
10578: PUSH
10579: LD_INT 10
10581: PUSH
10582: LD_INT 11
10584: PUSH
10585: LD_INT 12
10587: PUSH
10588: LD_INT 13
10590: PUSH
10591: LD_INT 14
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 17
10602: PUSH
10603: LD_INT 18
10605: PUSH
10606: LD_INT 19
10608: PUSH
10609: LD_INT 20
10611: PUSH
10612: LD_INT 21
10614: PUSH
10615: LD_INT 22
10617: PUSH
10618: LD_INT 23
10620: PUSH
10621: LD_INT 24
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 26
10629: PUSH
10630: LD_INT 27
10632: PUSH
10633: LD_INT 28
10635: PUSH
10636: LD_INT 29
10638: PUSH
10639: LD_INT 30
10641: PUSH
10642: LD_INT 31
10644: PUSH
10645: LD_INT 32
10647: PUSH
10648: LD_INT 33
10650: PUSH
10651: LD_INT 34
10653: PUSH
10654: LD_INT 36
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 101
10696: PUSH
10697: LD_INT 102
10699: PUSH
10700: LD_INT 103
10702: PUSH
10703: LD_INT 104
10705: PUSH
10706: LD_INT 105
10708: PUSH
10709: LD_INT 106
10711: PUSH
10712: LD_INT 107
10714: PUSH
10715: LD_INT 108
10717: PUSH
10718: LD_INT 109
10720: PUSH
10721: LD_INT 110
10723: PUSH
10724: LD_INT 111
10726: PUSH
10727: LD_INT 112
10729: PUSH
10730: LD_INT 113
10732: PUSH
10733: LD_INT 114
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: ST_TO_ADDR
10756: GO 11131
10758: LD_INT 18
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10902
10766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10767: LD_ADDR_VAR 0 1
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: LD_INT 5
10780: PUSH
10781: LD_INT 7
10783: PUSH
10784: LD_INT 11
10786: PUSH
10787: LD_INT 12
10789: PUSH
10790: LD_INT 15
10792: PUSH
10793: LD_INT 16
10795: PUSH
10796: LD_INT 20
10798: PUSH
10799: LD_INT 21
10801: PUSH
10802: LD_INT 22
10804: PUSH
10805: LD_INT 23
10807: PUSH
10808: LD_INT 25
10810: PUSH
10811: LD_INT 26
10813: PUSH
10814: LD_INT 30
10816: PUSH
10817: LD_INT 31
10819: PUSH
10820: LD_INT 32
10822: PUSH
10823: LD_INT 33
10825: PUSH
10826: LD_INT 34
10828: PUSH
10829: LD_INT 35
10831: PUSH
10832: LD_INT 36
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 101
10860: PUSH
10861: LD_INT 102
10863: PUSH
10864: LD_INT 103
10866: PUSH
10867: LD_INT 106
10869: PUSH
10870: LD_INT 108
10872: PUSH
10873: LD_INT 112
10875: PUSH
10876: LD_INT 113
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: LD_INT 115
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: ST_TO_ADDR
10900: GO 11131
10902: LD_INT 19
10904: DOUBLE
10905: EQUAL
10906: IFTRUE 10910
10908: GO 11130
10910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10911: LD_ADDR_VAR 0 1
10915: PUSH
10916: LD_INT 1
10918: PUSH
10919: LD_INT 2
10921: PUSH
10922: LD_INT 3
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: LD_INT 5
10930: PUSH
10931: LD_INT 6
10933: PUSH
10934: LD_INT 7
10936: PUSH
10937: LD_INT 8
10939: PUSH
10940: LD_INT 9
10942: PUSH
10943: LD_INT 10
10945: PUSH
10946: LD_INT 11
10948: PUSH
10949: LD_INT 12
10951: PUSH
10952: LD_INT 13
10954: PUSH
10955: LD_INT 14
10957: PUSH
10958: LD_INT 15
10960: PUSH
10961: LD_INT 16
10963: PUSH
10964: LD_INT 17
10966: PUSH
10967: LD_INT 18
10969: PUSH
10970: LD_INT 19
10972: PUSH
10973: LD_INT 20
10975: PUSH
10976: LD_INT 21
10978: PUSH
10979: LD_INT 22
10981: PUSH
10982: LD_INT 23
10984: PUSH
10985: LD_INT 24
10987: PUSH
10988: LD_INT 25
10990: PUSH
10991: LD_INT 26
10993: PUSH
10994: LD_INT 27
10996: PUSH
10997: LD_INT 28
10999: PUSH
11000: LD_INT 29
11002: PUSH
11003: LD_INT 30
11005: PUSH
11006: LD_INT 31
11008: PUSH
11009: LD_INT 32
11011: PUSH
11012: LD_INT 33
11014: PUSH
11015: LD_INT 34
11017: PUSH
11018: LD_INT 35
11020: PUSH
11021: LD_INT 36
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 101
11064: PUSH
11065: LD_INT 102
11067: PUSH
11068: LD_INT 103
11070: PUSH
11071: LD_INT 104
11073: PUSH
11074: LD_INT 105
11076: PUSH
11077: LD_INT 106
11079: PUSH
11080: LD_INT 107
11082: PUSH
11083: LD_INT 108
11085: PUSH
11086: LD_INT 109
11088: PUSH
11089: LD_INT 110
11091: PUSH
11092: LD_INT 111
11094: PUSH
11095: LD_INT 112
11097: PUSH
11098: LD_INT 113
11100: PUSH
11101: LD_INT 114
11103: PUSH
11104: LD_INT 115
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: ST_TO_ADDR
11128: GO 11131
11130: POP
// end else
11131: GO 11350
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: LD_INT 4
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: LD_INT 6
11155: PUSH
11156: LD_INT 7
11158: PUSH
11159: LD_INT 8
11161: PUSH
11162: LD_INT 9
11164: PUSH
11165: LD_INT 10
11167: PUSH
11168: LD_INT 11
11170: PUSH
11171: LD_INT 12
11173: PUSH
11174: LD_INT 13
11176: PUSH
11177: LD_INT 14
11179: PUSH
11180: LD_INT 15
11182: PUSH
11183: LD_INT 16
11185: PUSH
11186: LD_INT 17
11188: PUSH
11189: LD_INT 18
11191: PUSH
11192: LD_INT 19
11194: PUSH
11195: LD_INT 20
11197: PUSH
11198: LD_INT 21
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_INT 23
11206: PUSH
11207: LD_INT 24
11209: PUSH
11210: LD_INT 25
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 27
11218: PUSH
11219: LD_INT 28
11221: PUSH
11222: LD_INT 29
11224: PUSH
11225: LD_INT 30
11227: PUSH
11228: LD_INT 31
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: LD_INT 33
11236: PUSH
11237: LD_INT 34
11239: PUSH
11240: LD_INT 35
11242: PUSH
11243: LD_INT 36
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 101
11286: PUSH
11287: LD_INT 102
11289: PUSH
11290: LD_INT 103
11292: PUSH
11293: LD_INT 104
11295: PUSH
11296: LD_INT 105
11298: PUSH
11299: LD_INT 106
11301: PUSH
11302: LD_INT 107
11304: PUSH
11305: LD_INT 108
11307: PUSH
11308: LD_INT 109
11310: PUSH
11311: LD_INT 110
11313: PUSH
11314: LD_INT 111
11316: PUSH
11317: LD_INT 112
11319: PUSH
11320: LD_INT 113
11322: PUSH
11323: LD_INT 114
11325: PUSH
11326: LD_INT 115
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: ST_TO_ADDR
// if result then
11350: LD_VAR 0 1
11354: IFFALSE 11643
// begin normal :=  ;
11356: LD_ADDR_VAR 0 3
11360: PUSH
11361: LD_STRING 
11363: ST_TO_ADDR
// hardcore :=  ;
11364: LD_ADDR_VAR 0 4
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// for i = 1 to normalCounter do
11372: LD_ADDR_VAR 0 5
11376: PUSH
11377: DOUBLE
11378: LD_INT 1
11380: DEC
11381: ST_TO_ADDR
11382: LD_EXP 20
11386: PUSH
11387: FOR_TO
11388: IFFALSE 11489
// begin tmp := 0 ;
11390: LD_ADDR_VAR 0 2
11394: PUSH
11395: LD_STRING 0
11397: ST_TO_ADDR
// if result [ 1 ] then
11398: LD_VAR 0 1
11402: PUSH
11403: LD_INT 1
11405: ARRAY
11406: IFFALSE 11471
// if result [ 1 ] [ 1 ] = i then
11408: LD_VAR 0 1
11412: PUSH
11413: LD_INT 1
11415: ARRAY
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PUSH
11421: LD_VAR 0 5
11425: EQUAL
11426: IFFALSE 11471
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11428: LD_ADDR_VAR 0 1
11432: PUSH
11433: LD_VAR 0 1
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: LD_VAR 0 1
11445: PUSH
11446: LD_INT 1
11448: ARRAY
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 3
11457: PPUSH
11458: CALL_OW 1
11462: ST_TO_ADDR
// tmp := 1 ;
11463: LD_ADDR_VAR 0 2
11467: PUSH
11468: LD_STRING 1
11470: ST_TO_ADDR
// end ; normal := normal & tmp ;
11471: LD_ADDR_VAR 0 3
11475: PUSH
11476: LD_VAR 0 3
11480: PUSH
11481: LD_VAR 0 2
11485: STR
11486: ST_TO_ADDR
// end ;
11487: GO 11387
11489: POP
11490: POP
// for i = 1 to hardcoreCounter do
11491: LD_ADDR_VAR 0 5
11495: PUSH
11496: DOUBLE
11497: LD_INT 1
11499: DEC
11500: ST_TO_ADDR
11501: LD_EXP 21
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11612
// begin tmp := 0 ;
11509: LD_ADDR_VAR 0 2
11513: PUSH
11514: LD_STRING 0
11516: ST_TO_ADDR
// if result [ 2 ] then
11517: LD_VAR 0 1
11521: PUSH
11522: LD_INT 2
11524: ARRAY
11525: IFFALSE 11594
// if result [ 2 ] [ 1 ] = 100 + i then
11527: LD_VAR 0 1
11531: PUSH
11532: LD_INT 2
11534: ARRAY
11535: PUSH
11536: LD_INT 1
11538: ARRAY
11539: PUSH
11540: LD_INT 100
11542: PUSH
11543: LD_VAR 0 5
11547: PLUS
11548: EQUAL
11549: IFFALSE 11594
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11551: LD_ADDR_VAR 0 1
11555: PUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: LD_VAR 0 1
11568: PUSH
11569: LD_INT 2
11571: ARRAY
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 3
11580: PPUSH
11581: CALL_OW 1
11585: ST_TO_ADDR
// tmp := 1 ;
11586: LD_ADDR_VAR 0 2
11590: PUSH
11591: LD_STRING 1
11593: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11594: LD_ADDR_VAR 0 4
11598: PUSH
11599: LD_VAR 0 4
11603: PUSH
11604: LD_VAR 0 2
11608: STR
11609: ST_TO_ADDR
// end ;
11610: GO 11506
11612: POP
11613: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11614: LD_STRING getStreamItemsFromMission("
11616: PUSH
11617: LD_VAR 0 3
11621: STR
11622: PUSH
11623: LD_STRING ","
11625: STR
11626: PUSH
11627: LD_VAR 0 4
11631: STR
11632: PUSH
11633: LD_STRING ")
11635: STR
11636: PPUSH
11637: CALL_OW 559
// end else
11641: GO 11650
// ToLua ( getStreamItemsFromMission("","") ) ;
11643: LD_STRING getStreamItemsFromMission("","")
11645: PPUSH
11646: CALL_OW 559
// end ;
11650: LD_VAR 0 1
11654: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11655: LD_VAR 0 2
11659: PUSH
11660: LD_INT 100
11662: EQUAL
11663: IFFALSE 12612
// begin if not StreamModeActive then
11665: LD_EXP 19
11669: NOT
11670: IFFALSE 11680
// StreamModeActive := true ;
11672: LD_ADDR_EXP 19
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if p3 = 0 then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_INT 0
11687: EQUAL
11688: IFFALSE 11694
// InitStreamMode ;
11690: CALL 7733 0 0
// if p3 = 1 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 1
11701: EQUAL
11702: IFFALSE 11712
// sRocket := true ;
11704: LD_ADDR_EXP 24
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 2 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 2
11719: EQUAL
11720: IFFALSE 11730
// sSpeed := true ;
11722: LD_ADDR_EXP 23
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 3 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 3
11737: EQUAL
11738: IFFALSE 11748
// sEngine := true ;
11740: LD_ADDR_EXP 25
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 4 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 4
11755: EQUAL
11756: IFFALSE 11766
// sSpec := true ;
11758: LD_ADDR_EXP 22
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 5 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 5
11773: EQUAL
11774: IFFALSE 11784
// sLevel := true ;
11776: LD_ADDR_EXP 26
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 6 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 6
11791: EQUAL
11792: IFFALSE 11802
// sArmoury := true ;
11794: LD_ADDR_EXP 27
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 7 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 7
11809: EQUAL
11810: IFFALSE 11820
// sRadar := true ;
11812: LD_ADDR_EXP 28
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 8 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 8
11827: EQUAL
11828: IFFALSE 11838
// sBunker := true ;
11830: LD_ADDR_EXP 29
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 9 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 9
11845: EQUAL
11846: IFFALSE 11856
// sHack := true ;
11848: LD_ADDR_EXP 30
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 10 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 10
11863: EQUAL
11864: IFFALSE 11874
// sFire := true ;
11866: LD_ADDR_EXP 31
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 11 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 11
11881: EQUAL
11882: IFFALSE 11892
// sRefresh := true ;
11884: LD_ADDR_EXP 32
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 12 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 12
11899: EQUAL
11900: IFFALSE 11910
// sExp := true ;
11902: LD_ADDR_EXP 33
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 13 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 13
11917: EQUAL
11918: IFFALSE 11928
// sDepot := true ;
11920: LD_ADDR_EXP 34
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 14 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 14
11935: EQUAL
11936: IFFALSE 11946
// sFlag := true ;
11938: LD_ADDR_EXP 35
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 15 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 15
11953: EQUAL
11954: IFFALSE 11964
// sKamikadze := true ;
11956: LD_ADDR_EXP 43
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 16 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 16
11971: EQUAL
11972: IFFALSE 11982
// sTroll := true ;
11974: LD_ADDR_EXP 44
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 17 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 17
11989: EQUAL
11990: IFFALSE 12000
// sSlow := true ;
11992: LD_ADDR_EXP 45
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 18 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 18
12007: EQUAL
12008: IFFALSE 12018
// sLack := true ;
12010: LD_ADDR_EXP 46
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 19 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 19
12025: EQUAL
12026: IFFALSE 12036
// sTank := true ;
12028: LD_ADDR_EXP 48
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 20 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 20
12043: EQUAL
12044: IFFALSE 12054
// sRemote := true ;
12046: LD_ADDR_EXP 49
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 21 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 21
12061: EQUAL
12062: IFFALSE 12072
// sPowell := true ;
12064: LD_ADDR_EXP 50
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 22 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 22
12079: EQUAL
12080: IFFALSE 12090
// sTeleport := true ;
12082: LD_ADDR_EXP 53
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 23 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 23
12097: EQUAL
12098: IFFALSE 12108
// sOilTower := true ;
12100: LD_ADDR_EXP 55
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 24 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 24
12115: EQUAL
12116: IFFALSE 12126
// sShovel := true ;
12118: LD_ADDR_EXP 56
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// if p3 = 25 then
12126: LD_VAR 0 3
12130: PUSH
12131: LD_INT 25
12133: EQUAL
12134: IFFALSE 12144
// sSheik := true ;
12136: LD_ADDR_EXP 57
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if p3 = 26 then
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 26
12151: EQUAL
12152: IFFALSE 12162
// sEarthquake := true ;
12154: LD_ADDR_EXP 59
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// if p3 = 27 then
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 27
12169: EQUAL
12170: IFFALSE 12180
// sAI := true ;
12172: LD_ADDR_EXP 60
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// if p3 = 28 then
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 28
12187: EQUAL
12188: IFFALSE 12198
// sCargo := true ;
12190: LD_ADDR_EXP 63
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// if p3 = 29 then
12198: LD_VAR 0 3
12202: PUSH
12203: LD_INT 29
12205: EQUAL
12206: IFFALSE 12216
// sDLaser := true ;
12208: LD_ADDR_EXP 64
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// if p3 = 30 then
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 30
12223: EQUAL
12224: IFFALSE 12234
// sExchange := true ;
12226: LD_ADDR_EXP 65
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// if p3 = 31 then
12234: LD_VAR 0 3
12238: PUSH
12239: LD_INT 31
12241: EQUAL
12242: IFFALSE 12252
// sFac := true ;
12244: LD_ADDR_EXP 66
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
// if p3 = 32 then
12252: LD_VAR 0 3
12256: PUSH
12257: LD_INT 32
12259: EQUAL
12260: IFFALSE 12270
// sPower := true ;
12262: LD_ADDR_EXP 67
12266: PUSH
12267: LD_INT 1
12269: ST_TO_ADDR
// if p3 = 33 then
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 33
12277: EQUAL
12278: IFFALSE 12288
// sRandom := true ;
12280: LD_ADDR_EXP 68
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// if p3 = 34 then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 34
12295: EQUAL
12296: IFFALSE 12306
// sShield := true ;
12298: LD_ADDR_EXP 69
12302: PUSH
12303: LD_INT 1
12305: ST_TO_ADDR
// if p3 = 35 then
12306: LD_VAR 0 3
12310: PUSH
12311: LD_INT 35
12313: EQUAL
12314: IFFALSE 12324
// sTime := true ;
12316: LD_ADDR_EXP 70
12320: PUSH
12321: LD_INT 1
12323: ST_TO_ADDR
// if p3 = 36 then
12324: LD_VAR 0 3
12328: PUSH
12329: LD_INT 36
12331: EQUAL
12332: IFFALSE 12342
// sTools := true ;
12334: LD_ADDR_EXP 71
12338: PUSH
12339: LD_INT 1
12341: ST_TO_ADDR
// if p3 = 101 then
12342: LD_VAR 0 3
12346: PUSH
12347: LD_INT 101
12349: EQUAL
12350: IFFALSE 12360
// sSold := true ;
12352: LD_ADDR_EXP 36
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// if p3 = 102 then
12360: LD_VAR 0 3
12364: PUSH
12365: LD_INT 102
12367: EQUAL
12368: IFFALSE 12378
// sDiff := true ;
12370: LD_ADDR_EXP 37
12374: PUSH
12375: LD_INT 1
12377: ST_TO_ADDR
// if p3 = 103 then
12378: LD_VAR 0 3
12382: PUSH
12383: LD_INT 103
12385: EQUAL
12386: IFFALSE 12396
// sFog := true ;
12388: LD_ADDR_EXP 40
12392: PUSH
12393: LD_INT 1
12395: ST_TO_ADDR
// if p3 = 104 then
12396: LD_VAR 0 3
12400: PUSH
12401: LD_INT 104
12403: EQUAL
12404: IFFALSE 12414
// sReset := true ;
12406: LD_ADDR_EXP 41
12410: PUSH
12411: LD_INT 1
12413: ST_TO_ADDR
// if p3 = 105 then
12414: LD_VAR 0 3
12418: PUSH
12419: LD_INT 105
12421: EQUAL
12422: IFFALSE 12432
// sSun := true ;
12424: LD_ADDR_EXP 42
12428: PUSH
12429: LD_INT 1
12431: ST_TO_ADDR
// if p3 = 106 then
12432: LD_VAR 0 3
12436: PUSH
12437: LD_INT 106
12439: EQUAL
12440: IFFALSE 12450
// sTiger := true ;
12442: LD_ADDR_EXP 38
12446: PUSH
12447: LD_INT 1
12449: ST_TO_ADDR
// if p3 = 107 then
12450: LD_VAR 0 3
12454: PUSH
12455: LD_INT 107
12457: EQUAL
12458: IFFALSE 12468
// sBomb := true ;
12460: LD_ADDR_EXP 39
12464: PUSH
12465: LD_INT 1
12467: ST_TO_ADDR
// if p3 = 108 then
12468: LD_VAR 0 3
12472: PUSH
12473: LD_INT 108
12475: EQUAL
12476: IFFALSE 12486
// sWound := true ;
12478: LD_ADDR_EXP 47
12482: PUSH
12483: LD_INT 1
12485: ST_TO_ADDR
// if p3 = 109 then
12486: LD_VAR 0 3
12490: PUSH
12491: LD_INT 109
12493: EQUAL
12494: IFFALSE 12504
// sBetray := true ;
12496: LD_ADDR_EXP 51
12500: PUSH
12501: LD_INT 1
12503: ST_TO_ADDR
// if p3 = 110 then
12504: LD_VAR 0 3
12508: PUSH
12509: LD_INT 110
12511: EQUAL
12512: IFFALSE 12522
// sContamin := true ;
12514: LD_ADDR_EXP 52
12518: PUSH
12519: LD_INT 1
12521: ST_TO_ADDR
// if p3 = 111 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 111
12529: EQUAL
12530: IFFALSE 12540
// sOil := true ;
12532: LD_ADDR_EXP 54
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 112 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 112
12547: EQUAL
12548: IFFALSE 12558
// sStu := true ;
12550: LD_ADDR_EXP 58
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 113 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 113
12565: EQUAL
12566: IFFALSE 12576
// sBazooka := true ;
12568: LD_ADDR_EXP 61
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 114 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 114
12583: EQUAL
12584: IFFALSE 12594
// sMortar := true ;
12586: LD_ADDR_EXP 62
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 115 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 115
12601: EQUAL
12602: IFFALSE 12612
// sRanger := true ;
12604: LD_ADDR_EXP 72
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// end ; end ;
12612: PPOPN 6
12614: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12615: LD_EXP 19
12619: PUSH
12620: LD_EXP 24
12624: AND
12625: IFFALSE 12749
12627: GO 12629
12629: DISABLE
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
// begin enable ;
12634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_OWVAR 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 34
12657: PUSH
12658: LD_INT 7
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 34
12667: PUSH
12668: LD_INT 45
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 34
12677: PUSH
12678: LD_INT 28
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 34
12687: PUSH
12688: LD_INT 47
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: ST_TO_ADDR
// if not tmp then
12711: LD_VAR 0 2
12715: NOT
12716: IFFALSE 12720
// exit ;
12718: GO 12749
// for i in tmp do
12720: LD_ADDR_VAR 0 1
12724: PUSH
12725: LD_VAR 0 2
12729: PUSH
12730: FOR_IN
12731: IFFALSE 12747
// begin SetLives ( i , 0 ) ;
12733: LD_VAR 0 1
12737: PPUSH
12738: LD_INT 0
12740: PPUSH
12741: CALL_OW 234
// end ;
12745: GO 12730
12747: POP
12748: POP
// end ;
12749: PPOPN 2
12751: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12752: LD_EXP 19
12756: PUSH
12757: LD_EXP 25
12761: AND
12762: IFFALSE 12846
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
// begin enable ;
12771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12772: LD_ADDR_VAR 0 2
12776: PUSH
12777: LD_INT 22
12779: PUSH
12780: LD_OWVAR 2
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 32
12791: PUSH
12792: LD_INT 3
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PPUSH
12803: CALL_OW 69
12807: ST_TO_ADDR
// if not tmp then
12808: LD_VAR 0 2
12812: NOT
12813: IFFALSE 12817
// exit ;
12815: GO 12846
// for i in tmp do
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_VAR 0 2
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12844
// begin SetLives ( i , 0 ) ;
12830: LD_VAR 0 1
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 234
// end ;
12842: GO 12827
12844: POP
12845: POP
// end ;
12846: PPOPN 2
12848: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12849: LD_EXP 19
12853: PUSH
12854: LD_EXP 22
12858: AND
12859: IFFALSE 12952
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12868: LD_ADDR_VAR 0 1
12872: PUSH
12873: LD_INT 22
12875: PUSH
12876: LD_OWVAR 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: LD_INT 25
12890: PUSH
12891: LD_INT 5
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 25
12900: PUSH
12901: LD_INT 9
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 25
12910: PUSH
12911: LD_INT 8
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: FOR_IN
12934: IFFALSE 12950
// begin SetClass ( i , 1 ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 336
// end ;
12948: GO 12933
12950: POP
12951: POP
// end ;
12952: PPOPN 1
12954: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12955: LD_EXP 19
12959: PUSH
12960: LD_EXP 23
12964: AND
12965: PUSH
12966: LD_OWVAR 65
12970: PUSH
12971: LD_INT 7
12973: LESS
12974: AND
12975: IFFALSE 12989
12977: GO 12979
12979: DISABLE
// begin enable ;
12980: ENABLE
// game_speed := 7 ;
12981: LD_ADDR_OWVAR 65
12985: PUSH
12986: LD_INT 7
12988: ST_TO_ADDR
// end ;
12989: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12990: LD_EXP 19
12994: PUSH
12995: LD_EXP 26
12999: AND
13000: IFFALSE 13202
13002: GO 13004
13004: DISABLE
13005: LD_INT 0
13007: PPUSH
13008: PPUSH
13009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13010: LD_ADDR_VAR 0 3
13014: PUSH
13015: LD_INT 81
13017: PUSH
13018: LD_OWVAR 2
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 3
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13202
// if tmp > 5 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 5
13062: GREATER
13063: IFFALSE 13075
// k := 5 else
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: LD_INT 5
13072: ST_TO_ADDR
13073: GO 13085
// k := tmp ;
13075: LD_ADDR_VAR 0 2
13079: PUSH
13080: LD_VAR 0 3
13084: ST_TO_ADDR
// for i := 1 to k do
13085: LD_ADDR_VAR 0 1
13089: PUSH
13090: DOUBLE
13091: LD_INT 1
13093: DEC
13094: ST_TO_ADDR
13095: LD_VAR 0 2
13099: PUSH
13100: FOR_TO
13101: IFFALSE 13200
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13103: LD_VAR 0 3
13107: PUSH
13108: LD_VAR 0 1
13112: ARRAY
13113: PPUSH
13114: LD_VAR 0 1
13118: PUSH
13119: LD_INT 4
13121: MOD
13122: PUSH
13123: LD_INT 1
13125: PLUS
13126: PPUSH
13127: CALL_OW 259
13131: PUSH
13132: LD_INT 10
13134: LESS
13135: IFFALSE 13198
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13137: LD_VAR 0 3
13141: PUSH
13142: LD_VAR 0 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 1
13152: PUSH
13153: LD_INT 4
13155: MOD
13156: PUSH
13157: LD_INT 1
13159: PLUS
13160: PPUSH
13161: LD_VAR 0 3
13165: PUSH
13166: LD_VAR 0 1
13170: ARRAY
13171: PPUSH
13172: LD_VAR 0 1
13176: PUSH
13177: LD_INT 4
13179: MOD
13180: PUSH
13181: LD_INT 1
13183: PLUS
13184: PPUSH
13185: CALL_OW 259
13189: PUSH
13190: LD_INT 1
13192: PLUS
13193: PPUSH
13194: CALL_OW 237
13198: GO 13100
13200: POP
13201: POP
// end ;
13202: PPOPN 3
13204: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13205: LD_EXP 19
13209: PUSH
13210: LD_EXP 27
13214: AND
13215: IFFALSE 13235
13217: GO 13219
13219: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13220: LD_INT 4
13222: PPUSH
13223: LD_OWVAR 2
13227: PPUSH
13228: LD_INT 0
13230: PPUSH
13231: CALL_OW 324
13235: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13236: LD_EXP 19
13240: PUSH
13241: LD_EXP 56
13245: AND
13246: IFFALSE 13266
13248: GO 13250
13250: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13251: LD_INT 19
13253: PPUSH
13254: LD_OWVAR 2
13258: PPUSH
13259: LD_INT 0
13261: PPUSH
13262: CALL_OW 324
13266: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13267: LD_EXP 19
13271: PUSH
13272: LD_EXP 28
13276: AND
13277: IFFALSE 13379
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
// begin enable ;
13286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: LD_INT 22
13294: PUSH
13295: LD_OWVAR 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 2
13306: PUSH
13307: LD_INT 34
13309: PUSH
13310: LD_INT 11
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 34
13319: PUSH
13320: LD_INT 30
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: ST_TO_ADDR
// if not tmp then
13341: LD_VAR 0 2
13345: NOT
13346: IFFALSE 13350
// exit ;
13348: GO 13379
// for i in tmp do
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_VAR 0 2
13359: PUSH
13360: FOR_IN
13361: IFFALSE 13377
// begin SetLives ( i , 0 ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL_OW 234
// end ;
13375: GO 13360
13377: POP
13378: POP
// end ;
13379: PPOPN 2
13381: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13382: LD_EXP 19
13386: PUSH
13387: LD_EXP 29
13391: AND
13392: IFFALSE 13412
13394: GO 13396
13396: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13397: LD_INT 32
13399: PPUSH
13400: LD_OWVAR 2
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 324
13412: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13413: LD_EXP 19
13417: PUSH
13418: LD_EXP 30
13422: AND
13423: IFFALSE 13604
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
13431: PPUSH
13432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_OWVAR 2
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 33
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: ST_TO_ADDR
// if not tmp then
13469: LD_VAR 0 2
13473: NOT
13474: IFFALSE 13478
// exit ;
13476: GO 13604
// side := 0 ;
13478: LD_ADDR_VAR 0 3
13482: PUSH
13483: LD_INT 0
13485: ST_TO_ADDR
// for i := 1 to 8 do
13486: LD_ADDR_VAR 0 1
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_INT 8
13498: PUSH
13499: FOR_TO
13500: IFFALSE 13548
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13502: LD_OWVAR 2
13506: PUSH
13507: LD_VAR 0 1
13511: NONEQUAL
13512: PUSH
13513: LD_OWVAR 2
13517: PPUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 81
13527: PUSH
13528: LD_INT 2
13530: EQUAL
13531: AND
13532: IFFALSE 13546
// begin side := i ;
13534: LD_ADDR_VAR 0 3
13538: PUSH
13539: LD_VAR 0 1
13543: ST_TO_ADDR
// break ;
13544: GO 13548
// end ;
13546: GO 13499
13548: POP
13549: POP
// if not side then
13550: LD_VAR 0 3
13554: NOT
13555: IFFALSE 13559
// exit ;
13557: GO 13604
// for i := 1 to tmp do
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: DOUBLE
13565: LD_INT 1
13567: DEC
13568: ST_TO_ADDR
13569: LD_VAR 0 2
13573: PUSH
13574: FOR_TO
13575: IFFALSE 13602
// if Prob ( 60 ) then
13577: LD_INT 60
13579: PPUSH
13580: CALL_OW 13
13584: IFFALSE 13600
// SetSide ( i , side ) ;
13586: LD_VAR 0 1
13590: PPUSH
13591: LD_VAR 0 3
13595: PPUSH
13596: CALL_OW 235
13600: GO 13574
13602: POP
13603: POP
// end ;
13604: PPOPN 3
13606: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13607: LD_EXP 19
13611: PUSH
13612: LD_EXP 32
13616: AND
13617: IFFALSE 13736
13619: GO 13621
13621: DISABLE
13622: LD_INT 0
13624: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_OWVAR 2
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 21
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 3
13654: PUSH
13655: LD_INT 23
13657: PUSH
13658: LD_INT 0
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PUSH
13679: FOR_IN
13680: IFFALSE 13734
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13682: LD_VAR 0 1
13686: PPUSH
13687: CALL_OW 257
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: LD_INT 3
13700: PUSH
13701: LD_INT 4
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: IN
13710: IFFALSE 13732
// SetClass ( un , rand ( 1 , 4 ) ) ;
13712: LD_VAR 0 1
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: LD_INT 4
13722: PPUSH
13723: CALL_OW 12
13727: PPUSH
13728: CALL_OW 336
13732: GO 13679
13734: POP
13735: POP
// end ;
13736: PPOPN 1
13738: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13739: LD_EXP 19
13743: PUSH
13744: LD_EXP 31
13748: AND
13749: IFFALSE 13828
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_INT 22
13764: PUSH
13765: LD_OWVAR 2
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 21
13776: PUSH
13777: LD_INT 3
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PPUSH
13788: CALL_OW 69
13792: ST_TO_ADDR
// if not tmp then
13793: LD_VAR 0 1
13797: NOT
13798: IFFALSE 13802
// exit ;
13800: GO 13828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13802: LD_VAR 0 1
13806: PUSH
13807: LD_INT 1
13809: PPUSH
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 12
13819: ARRAY
13820: PPUSH
13821: LD_INT 100
13823: PPUSH
13824: CALL_OW 234
// end ;
13828: PPOPN 1
13830: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13831: LD_EXP 19
13835: PUSH
13836: LD_EXP 33
13840: AND
13841: IFFALSE 13939
13843: GO 13845
13845: DISABLE
13846: LD_INT 0
13848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13849: LD_ADDR_VAR 0 1
13853: PUSH
13854: LD_INT 22
13856: PUSH
13857: LD_OWVAR 2
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 21
13868: PUSH
13869: LD_INT 1
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// if not tmp then
13885: LD_VAR 0 1
13889: NOT
13890: IFFALSE 13894
// exit ;
13892: GO 13939
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13894: LD_VAR 0 1
13898: PUSH
13899: LD_INT 1
13901: PPUSH
13902: LD_VAR 0 1
13906: PPUSH
13907: CALL_OW 12
13911: ARRAY
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: LD_INT 4
13918: PPUSH
13919: CALL_OW 12
13923: PPUSH
13924: LD_INT 3000
13926: PPUSH
13927: LD_INT 9000
13929: PPUSH
13930: CALL_OW 12
13934: PPUSH
13935: CALL_OW 492
// end ;
13939: PPOPN 1
13941: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13942: LD_EXP 19
13946: PUSH
13947: LD_EXP 34
13951: AND
13952: IFFALSE 13972
13954: GO 13956
13956: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13957: LD_INT 1
13959: PPUSH
13960: LD_OWVAR 2
13964: PPUSH
13965: LD_INT 0
13967: PPUSH
13968: CALL_OW 324
13972: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13973: LD_EXP 19
13977: PUSH
13978: LD_EXP 35
13982: AND
13983: IFFALSE 14066
13985: GO 13987
13987: DISABLE
13988: LD_INT 0
13990: PPUSH
13991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13992: LD_ADDR_VAR 0 2
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_OWVAR 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 21
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: ST_TO_ADDR
// if not tmp then
14028: LD_VAR 0 2
14032: NOT
14033: IFFALSE 14037
// exit ;
14035: GO 14066
// for i in tmp do
14037: LD_ADDR_VAR 0 1
14041: PUSH
14042: LD_VAR 0 2
14046: PUSH
14047: FOR_IN
14048: IFFALSE 14064
// SetBLevel ( i , 10 ) ;
14050: LD_VAR 0 1
14054: PPUSH
14055: LD_INT 10
14057: PPUSH
14058: CALL_OW 241
14062: GO 14047
14064: POP
14065: POP
// end ;
14066: PPOPN 2
14068: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14069: LD_EXP 19
14073: PUSH
14074: LD_EXP 36
14078: AND
14079: IFFALSE 14190
14081: GO 14083
14083: DISABLE
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_OWVAR 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 25
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: ST_TO_ADDR
// if not tmp then
14125: LD_VAR 0 3
14129: NOT
14130: IFFALSE 14134
// exit ;
14132: GO 14190
// un := tmp [ rand ( 1 , tmp ) ] ;
14134: LD_ADDR_VAR 0 2
14138: PUSH
14139: LD_VAR 0 3
14143: PUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: CALL_OW 12
14156: ARRAY
14157: ST_TO_ADDR
// if Crawls ( un ) then
14158: LD_VAR 0 2
14162: PPUSH
14163: CALL_OW 318
14167: IFFALSE 14178
// ComWalk ( un ) ;
14169: LD_VAR 0 2
14173: PPUSH
14174: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14178: LD_VAR 0 2
14182: PPUSH
14183: LD_INT 5
14185: PPUSH
14186: CALL_OW 336
// end ;
14190: PPOPN 3
14192: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14193: LD_EXP 19
14197: PUSH
14198: LD_EXP 37
14202: AND
14203: PUSH
14204: LD_OWVAR 67
14208: PUSH
14209: LD_INT 3
14211: LESS
14212: AND
14213: IFFALSE 14232
14215: GO 14217
14217: DISABLE
// Difficulty := Difficulty + 1 ;
14218: LD_ADDR_OWVAR 67
14222: PUSH
14223: LD_OWVAR 67
14227: PUSH
14228: LD_INT 1
14230: PLUS
14231: ST_TO_ADDR
14232: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14233: LD_EXP 19
14237: PUSH
14238: LD_EXP 38
14242: AND
14243: IFFALSE 14346
14245: GO 14247
14247: DISABLE
14248: LD_INT 0
14250: PPUSH
// begin for i := 1 to 5 do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_INT 5
14263: PUSH
14264: FOR_TO
14265: IFFALSE 14344
// begin uc_nation := nation_nature ;
14267: LD_ADDR_OWVAR 21
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// uc_side := 0 ;
14275: LD_ADDR_OWVAR 20
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14283: LD_ADDR_OWVAR 29
14287: PUSH
14288: LD_INT 12
14290: PUSH
14291: LD_INT 12
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: ST_TO_ADDR
// hc_agressivity := 20 ;
14298: LD_ADDR_OWVAR 35
14302: PUSH
14303: LD_INT 20
14305: ST_TO_ADDR
// hc_class := class_tiger ;
14306: LD_ADDR_OWVAR 28
14310: PUSH
14311: LD_INT 14
14313: ST_TO_ADDR
// hc_gallery :=  ;
14314: LD_ADDR_OWVAR 33
14318: PUSH
14319: LD_STRING 
14321: ST_TO_ADDR
// hc_name :=  ;
14322: LD_ADDR_OWVAR 26
14326: PUSH
14327: LD_STRING 
14329: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14330: CALL_OW 44
14334: PPUSH
14335: LD_INT 0
14337: PPUSH
14338: CALL_OW 51
// end ;
14342: GO 14264
14344: POP
14345: POP
// end ;
14346: PPOPN 1
14348: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14349: LD_EXP 19
14353: PUSH
14354: LD_EXP 39
14358: AND
14359: IFFALSE 14368
14361: GO 14363
14363: DISABLE
// StreamSibBomb ;
14364: CALL 14369 0 0
14368: END
// export function StreamSibBomb ; var i , x , y ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
// result := false ;
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// for i := 1 to 16 do
14383: LD_ADDR_VAR 0 2
14387: PUSH
14388: DOUBLE
14389: LD_INT 1
14391: DEC
14392: ST_TO_ADDR
14393: LD_INT 16
14395: PUSH
14396: FOR_TO
14397: IFFALSE 14596
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_INT 10
14406: PUSH
14407: LD_INT 20
14409: PUSH
14410: LD_INT 30
14412: PUSH
14413: LD_INT 40
14415: PUSH
14416: LD_INT 50
14418: PUSH
14419: LD_INT 60
14421: PUSH
14422: LD_INT 70
14424: PUSH
14425: LD_INT 80
14427: PUSH
14428: LD_INT 90
14430: PUSH
14431: LD_INT 100
14433: PUSH
14434: LD_INT 110
14436: PUSH
14437: LD_INT 120
14439: PUSH
14440: LD_INT 130
14442: PUSH
14443: LD_INT 140
14445: PUSH
14446: LD_INT 150
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 1
14468: PPUSH
14469: LD_INT 15
14471: PPUSH
14472: CALL_OW 12
14476: ARRAY
14477: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14478: LD_ADDR_VAR 0 4
14482: PUSH
14483: LD_INT 10
14485: PUSH
14486: LD_INT 20
14488: PUSH
14489: LD_INT 30
14491: PUSH
14492: LD_INT 40
14494: PUSH
14495: LD_INT 50
14497: PUSH
14498: LD_INT 60
14500: PUSH
14501: LD_INT 70
14503: PUSH
14504: LD_INT 80
14506: PUSH
14507: LD_INT 90
14509: PUSH
14510: LD_INT 100
14512: PUSH
14513: LD_INT 110
14515: PUSH
14516: LD_INT 120
14518: PUSH
14519: LD_INT 130
14521: PUSH
14522: LD_INT 140
14524: PUSH
14525: LD_INT 150
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_INT 15
14550: PPUSH
14551: CALL_OW 12
14555: ARRAY
14556: ST_TO_ADDR
// if ValidHex ( x , y ) then
14557: LD_VAR 0 3
14561: PPUSH
14562: LD_VAR 0 4
14566: PPUSH
14567: CALL_OW 488
14571: IFFALSE 14594
// begin result := [ x , y ] ;
14573: LD_ADDR_VAR 0 1
14577: PUSH
14578: LD_VAR 0 3
14582: PUSH
14583: LD_VAR 0 4
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: ST_TO_ADDR
// break ;
14592: GO 14596
// end ; end ;
14594: GO 14396
14596: POP
14597: POP
// if result then
14598: LD_VAR 0 1
14602: IFFALSE 14662
// begin ToLua ( playSibBomb() ) ;
14604: LD_STRING playSibBomb()
14606: PPUSH
14607: CALL_OW 559
// wait ( 0 0$14 ) ;
14611: LD_INT 490
14613: PPUSH
14614: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14618: LD_VAR 0 1
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: LD_VAR 0 1
14631: PUSH
14632: LD_INT 2
14634: ARRAY
14635: PPUSH
14636: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14640: LD_VAR 0 1
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: LD_VAR 0 1
14653: PUSH
14654: LD_INT 2
14656: ARRAY
14657: PPUSH
14658: CALL_OW 429
// end ; end ;
14662: LD_VAR 0 1
14666: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14667: LD_EXP 19
14671: PUSH
14672: LD_EXP 41
14676: AND
14677: IFFALSE 14689
14679: GO 14681
14681: DISABLE
// YouLost (  ) ;
14682: LD_STRING 
14684: PPUSH
14685: CALL_OW 104
14689: END
// every 0 0$1 trigger StreamModeActive and sFog do
14690: LD_EXP 19
14694: PUSH
14695: LD_EXP 40
14699: AND
14700: IFFALSE 14714
14702: GO 14704
14704: DISABLE
// FogOff ( your_side ) ;
14705: LD_OWVAR 2
14709: PPUSH
14710: CALL_OW 344
14714: END
// every 0 0$1 trigger StreamModeActive and sSun do
14715: LD_EXP 19
14719: PUSH
14720: LD_EXP 42
14724: AND
14725: IFFALSE 14753
14727: GO 14729
14729: DISABLE
// begin solar_recharge_percent := 0 ;
14730: LD_ADDR_OWVAR 79
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14738: LD_INT 10500
14740: PPUSH
14741: CALL_OW 67
// solar_recharge_percent := 100 ;
14745: LD_ADDR_OWVAR 79
14749: PUSH
14750: LD_INT 100
14752: ST_TO_ADDR
// end ;
14753: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14754: LD_EXP 19
14758: PUSH
14759: LD_EXP 43
14763: AND
14764: IFFALSE 15003
14766: GO 14768
14768: DISABLE
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
// begin tmp := [ ] ;
14774: LD_ADDR_VAR 0 3
14778: PUSH
14779: EMPTY
14780: ST_TO_ADDR
// for i := 1 to 6 do
14781: LD_ADDR_VAR 0 1
14785: PUSH
14786: DOUBLE
14787: LD_INT 1
14789: DEC
14790: ST_TO_ADDR
14791: LD_INT 6
14793: PUSH
14794: FOR_TO
14795: IFFALSE 14900
// begin uc_nation := nation_nature ;
14797: LD_ADDR_OWVAR 21
14801: PUSH
14802: LD_INT 0
14804: ST_TO_ADDR
// uc_side := 0 ;
14805: LD_ADDR_OWVAR 20
14809: PUSH
14810: LD_INT 0
14812: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14813: LD_ADDR_OWVAR 29
14817: PUSH
14818: LD_INT 12
14820: PUSH
14821: LD_INT 12
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: ST_TO_ADDR
// hc_agressivity := 20 ;
14828: LD_ADDR_OWVAR 35
14832: PUSH
14833: LD_INT 20
14835: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14836: LD_ADDR_OWVAR 28
14840: PUSH
14841: LD_INT 17
14843: ST_TO_ADDR
// hc_gallery :=  ;
14844: LD_ADDR_OWVAR 33
14848: PUSH
14849: LD_STRING 
14851: ST_TO_ADDR
// hc_name :=  ;
14852: LD_ADDR_OWVAR 26
14856: PUSH
14857: LD_STRING 
14859: ST_TO_ADDR
// un := CreateHuman ;
14860: LD_ADDR_VAR 0 2
14864: PUSH
14865: CALL_OW 44
14869: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14870: LD_VAR 0 2
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 51
// tmp := tmp ^ un ;
14882: LD_ADDR_VAR 0 3
14886: PUSH
14887: LD_VAR 0 3
14891: PUSH
14892: LD_VAR 0 2
14896: ADD
14897: ST_TO_ADDR
// end ;
14898: GO 14794
14900: POP
14901: POP
// repeat wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// for un in tmp do
14909: LD_ADDR_VAR 0 2
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: FOR_IN
14920: IFFALSE 14994
// begin if IsDead ( un ) then
14922: LD_VAR 0 2
14926: PPUSH
14927: CALL_OW 301
14931: IFFALSE 14951
// begin tmp := tmp diff un ;
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_VAR 0 3
14942: PUSH
14943: LD_VAR 0 2
14947: DIFF
14948: ST_TO_ADDR
// continue ;
14949: GO 14919
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14951: LD_VAR 0 2
14955: PPUSH
14956: LD_INT 3
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_INT 0
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: PPUSH
14978: LD_VAR 0 2
14982: PPUSH
14983: CALL_OW 74
14987: PPUSH
14988: CALL_OW 115
// end ;
14992: GO 14919
14994: POP
14995: POP
// until not tmp ;
14996: LD_VAR 0 3
15000: NOT
15001: IFFALSE 14902
// end ;
15003: PPOPN 3
15005: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15006: LD_EXP 19
15010: PUSH
15011: LD_EXP 44
15015: AND
15016: IFFALSE 15070
15018: GO 15020
15020: DISABLE
// begin ToLua ( displayTroll(); ) ;
15021: LD_STRING displayTroll();
15023: PPUSH
15024: CALL_OW 559
// wait ( 3 3$00 ) ;
15028: LD_INT 6300
15030: PPUSH
15031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15035: LD_STRING hideTroll();
15037: PPUSH
15038: CALL_OW 559
// wait ( 1 1$00 ) ;
15042: LD_INT 2100
15044: PPUSH
15045: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15049: LD_STRING displayTroll();
15051: PPUSH
15052: CALL_OW 559
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15063: LD_STRING hideTroll();
15065: PPUSH
15066: CALL_OW 559
// end ;
15070: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15071: LD_EXP 19
15075: PUSH
15076: LD_EXP 45
15080: AND
15081: IFFALSE 15144
15083: GO 15085
15085: DISABLE
15086: LD_INT 0
15088: PPUSH
// begin p := 0 ;
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: LD_INT 0
15096: ST_TO_ADDR
// repeat game_speed := 1 ;
15097: LD_ADDR_OWVAR 65
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15105: LD_INT 35
15107: PPUSH
15108: CALL_OW 67
// p := p + 1 ;
15112: LD_ADDR_VAR 0 1
15116: PUSH
15117: LD_VAR 0 1
15121: PUSH
15122: LD_INT 1
15124: PLUS
15125: ST_TO_ADDR
// until p >= 60 ;
15126: LD_VAR 0 1
15130: PUSH
15131: LD_INT 60
15133: GREATEREQUAL
15134: IFFALSE 15097
// game_speed := 4 ;
15136: LD_ADDR_OWVAR 65
15140: PUSH
15141: LD_INT 4
15143: ST_TO_ADDR
// end ;
15144: PPOPN 1
15146: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15147: LD_EXP 19
15151: PUSH
15152: LD_EXP 46
15156: AND
15157: IFFALSE 15303
15159: GO 15161
15161: DISABLE
15162: LD_INT 0
15164: PPUSH
15165: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15166: LD_ADDR_VAR 0 1
15170: PUSH
15171: LD_INT 22
15173: PUSH
15174: LD_OWVAR 2
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 2
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: LD_INT 0
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 30
15198: PUSH
15199: LD_INT 1
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PPUSH
15215: CALL_OW 69
15219: ST_TO_ADDR
// if not depot then
15220: LD_VAR 0 1
15224: NOT
15225: IFFALSE 15229
// exit ;
15227: GO 15303
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_VAR 0 1
15238: PUSH
15239: LD_INT 1
15241: PPUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 12
15251: ARRAY
15252: PPUSH
15253: CALL_OW 274
15257: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15273: LD_VAR 0 2
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 0
15283: PPUSH
15284: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15288: LD_VAR 0 2
15292: PPUSH
15293: LD_INT 3
15295: PPUSH
15296: LD_INT 0
15298: PPUSH
15299: CALL_OW 277
// end ;
15303: PPOPN 2
15305: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15306: LD_EXP 19
15310: PUSH
15311: LD_EXP 47
15315: AND
15316: IFFALSE 15413
15318: GO 15320
15320: DISABLE
15321: LD_INT 0
15323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15324: LD_ADDR_VAR 0 1
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_OWVAR 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 21
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 3
15353: PUSH
15354: LD_INT 23
15356: PUSH
15357: LD_INT 0
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: PPUSH
15373: CALL_OW 69
15377: ST_TO_ADDR
// if not tmp then
15378: LD_VAR 0 1
15382: NOT
15383: IFFALSE 15387
// exit ;
15385: GO 15413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15387: LD_VAR 0 1
15391: PUSH
15392: LD_INT 1
15394: PPUSH
15395: LD_VAR 0 1
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: LD_INT 200
15408: PPUSH
15409: CALL_OW 234
// end ;
15413: PPOPN 1
15415: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15416: LD_EXP 19
15420: PUSH
15421: LD_EXP 48
15425: AND
15426: IFFALSE 15505
15428: GO 15430
15430: DISABLE
15431: LD_INT 0
15433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_OWVAR 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 21
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PPUSH
15465: CALL_OW 69
15469: ST_TO_ADDR
// if not tmp then
15470: LD_VAR 0 1
15474: NOT
15475: IFFALSE 15479
// exit ;
15477: GO 15505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15479: LD_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PPUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 12
15496: ARRAY
15497: PPUSH
15498: LD_INT 60
15500: PPUSH
15501: CALL_OW 234
// end ;
15505: PPOPN 1
15507: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15508: LD_EXP 19
15512: PUSH
15513: LD_EXP 49
15517: AND
15518: IFFALSE 15617
15520: GO 15522
15522: DISABLE
15523: LD_INT 0
15525: PPUSH
15526: PPUSH
// begin enable ;
15527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15528: LD_ADDR_VAR 0 1
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_OWVAR 2
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 61
15547: PUSH
15548: EMPTY
15549: LIST
15550: PUSH
15551: LD_INT 33
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 69
15570: ST_TO_ADDR
// if not tmp then
15571: LD_VAR 0 1
15575: NOT
15576: IFFALSE 15580
// exit ;
15578: GO 15617
// for i in tmp do
15580: LD_ADDR_VAR 0 2
15584: PUSH
15585: LD_VAR 0 1
15589: PUSH
15590: FOR_IN
15591: IFFALSE 15615
// if IsControledBy ( i ) then
15593: LD_VAR 0 2
15597: PPUSH
15598: CALL_OW 312
15602: IFFALSE 15613
// ComUnlink ( i ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: CALL_OW 136
15613: GO 15590
15615: POP
15616: POP
// end ;
15617: PPOPN 2
15619: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15620: LD_EXP 19
15624: PUSH
15625: LD_EXP 50
15629: AND
15630: IFFALSE 15770
15632: GO 15634
15634: DISABLE
15635: LD_INT 0
15637: PPUSH
15638: PPUSH
// begin ToLua ( displayPowell(); ) ;
15639: LD_STRING displayPowell();
15641: PPUSH
15642: CALL_OW 559
// uc_side := 0 ;
15646: LD_ADDR_OWVAR 20
15650: PUSH
15651: LD_INT 0
15653: ST_TO_ADDR
// uc_nation := 2 ;
15654: LD_ADDR_OWVAR 21
15658: PUSH
15659: LD_INT 2
15661: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15662: LD_ADDR_OWVAR 37
15666: PUSH
15667: LD_INT 14
15669: ST_TO_ADDR
// vc_engine := engine_siberite ;
15670: LD_ADDR_OWVAR 39
15674: PUSH
15675: LD_INT 3
15677: ST_TO_ADDR
// vc_control := control_apeman ;
15678: LD_ADDR_OWVAR 38
15682: PUSH
15683: LD_INT 5
15685: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15686: LD_ADDR_OWVAR 40
15690: PUSH
15691: LD_INT 29
15693: ST_TO_ADDR
// un := CreateVehicle ;
15694: LD_ADDR_VAR 0 2
15698: PUSH
15699: CALL_OW 45
15703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15704: LD_VAR 0 2
15708: PPUSH
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15716: LD_INT 35
15718: PPUSH
15719: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15723: LD_VAR 0 2
15727: PPUSH
15728: LD_INT 22
15730: PUSH
15731: LD_OWVAR 2
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 74
15754: PPUSH
15755: CALL_OW 115
// until IsDead ( un ) ;
15759: LD_VAR 0 2
15763: PPUSH
15764: CALL_OW 301
15768: IFFALSE 15716
// end ;
15770: PPOPN 2
15772: END
// every 0 0$1 trigger StreamModeActive and sStu do
15773: LD_EXP 19
15777: PUSH
15778: LD_EXP 58
15782: AND
15783: IFFALSE 15799
15785: GO 15787
15787: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15788: LD_STRING displayStucuk();
15790: PPUSH
15791: CALL_OW 559
// ResetFog ;
15795: CALL_OW 335
// end ;
15799: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15800: LD_EXP 19
15804: PUSH
15805: LD_EXP 51
15809: AND
15810: IFFALSE 15951
15812: GO 15814
15814: DISABLE
15815: LD_INT 0
15817: PPUSH
15818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15819: LD_ADDR_VAR 0 2
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_OWVAR 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: ST_TO_ADDR
// if not tmp then
15855: LD_VAR 0 2
15859: NOT
15860: IFFALSE 15864
// exit ;
15862: GO 15951
// un := tmp [ rand ( 1 , tmp ) ] ;
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: LD_VAR 0 2
15873: PUSH
15874: LD_INT 1
15876: PPUSH
15877: LD_VAR 0 2
15881: PPUSH
15882: CALL_OW 12
15886: ARRAY
15887: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_INT 0
15895: PPUSH
15896: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_OWVAR 3
15909: PUSH
15910: LD_VAR 0 1
15914: DIFF
15915: PPUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 74
15925: PPUSH
15926: CALL_OW 115
// wait ( 0 0$20 ) ;
15930: LD_INT 700
15932: PPUSH
15933: CALL_OW 67
// SetSide ( un , your_side ) ;
15937: LD_VAR 0 1
15941: PPUSH
15942: LD_OWVAR 2
15946: PPUSH
15947: CALL_OW 235
// end ;
15951: PPOPN 2
15953: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15954: LD_EXP 19
15958: PUSH
15959: LD_EXP 52
15963: AND
15964: IFFALSE 16070
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15972: LD_ADDR_VAR 0 1
15976: PUSH
15977: LD_INT 22
15979: PUSH
15980: LD_OWVAR 2
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: LD_INT 30
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 30
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: ST_TO_ADDR
// if not depot then
16026: LD_VAR 0 1
16030: NOT
16031: IFFALSE 16035
// exit ;
16033: GO 16070
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16035: LD_VAR 0 1
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: PPUSH
16044: CALL_OW 250
16048: PPUSH
16049: LD_VAR 0 1
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: CALL_OW 251
16062: PPUSH
16063: LD_INT 70
16065: PPUSH
16066: CALL_OW 495
// end ;
16070: PPOPN 1
16072: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16073: LD_EXP 19
16077: PUSH
16078: LD_EXP 53
16082: AND
16083: IFFALSE 16294
16085: GO 16087
16087: DISABLE
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
16094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16095: LD_ADDR_VAR 0 5
16099: PUSH
16100: LD_INT 22
16102: PUSH
16103: LD_OWVAR 2
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 69
16130: ST_TO_ADDR
// if not tmp then
16131: LD_VAR 0 5
16135: NOT
16136: IFFALSE 16140
// exit ;
16138: GO 16294
// for i in tmp do
16140: LD_ADDR_VAR 0 1
16144: PUSH
16145: LD_VAR 0 5
16149: PUSH
16150: FOR_IN
16151: IFFALSE 16292
// begin d := rand ( 0 , 5 ) ;
16153: LD_ADDR_VAR 0 4
16157: PUSH
16158: LD_INT 0
16160: PPUSH
16161: LD_INT 5
16163: PPUSH
16164: CALL_OW 12
16168: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 250
16183: PPUSH
16184: LD_VAR 0 4
16188: PPUSH
16189: LD_INT 3
16191: PPUSH
16192: LD_INT 12
16194: PPUSH
16195: CALL_OW 12
16199: PPUSH
16200: CALL_OW 272
16204: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 251
16219: PPUSH
16220: LD_VAR 0 4
16224: PPUSH
16225: LD_INT 3
16227: PPUSH
16228: LD_INT 12
16230: PPUSH
16231: CALL_OW 12
16235: PPUSH
16236: CALL_OW 273
16240: ST_TO_ADDR
// if ValidHex ( x , y ) then
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 488
16255: IFFALSE 16290
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_VAR 0 3
16271: PPUSH
16272: LD_INT 3
16274: PPUSH
16275: LD_INT 6
16277: PPUSH
16278: CALL_OW 12
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 483
// end ;
16290: GO 16150
16292: POP
16293: POP
// end ;
16294: PPOPN 5
16296: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16297: LD_EXP 19
16301: PUSH
16302: LD_EXP 54
16306: AND
16307: IFFALSE 16401
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
16315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_INT 22
16323: PUSH
16324: LD_OWVAR 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 32
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 21
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16401
// for i in tmp do
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: FOR_IN
16383: IFFALSE 16399
// SetFuel ( i , 0 ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 0
16392: PPUSH
16393: CALL_OW 240
16397: GO 16382
16399: POP
16400: POP
// end ;
16401: PPOPN 2
16403: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16404: LD_EXP 19
16408: PUSH
16409: LD_EXP 55
16413: AND
16414: IFFALSE 16480
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16422: LD_ADDR_VAR 0 1
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_OWVAR 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 30
16441: PUSH
16442: LD_INT 29
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PPUSH
16453: CALL_OW 69
16457: ST_TO_ADDR
// if not tmp then
16458: LD_VAR 0 1
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16480
// DestroyUnit ( tmp [ 1 ] ) ;
16467: LD_VAR 0 1
16471: PUSH
16472: LD_INT 1
16474: ARRAY
16475: PPUSH
16476: CALL_OW 65
// end ;
16480: PPOPN 1
16482: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16483: LD_EXP 19
16487: PUSH
16488: LD_EXP 57
16492: AND
16493: IFFALSE 16622
16495: GO 16497
16497: DISABLE
16498: LD_INT 0
16500: PPUSH
// begin uc_side := 0 ;
16501: LD_ADDR_OWVAR 20
16505: PUSH
16506: LD_INT 0
16508: ST_TO_ADDR
// uc_nation := nation_arabian ;
16509: LD_ADDR_OWVAR 21
16513: PUSH
16514: LD_INT 2
16516: ST_TO_ADDR
// hc_gallery :=  ;
16517: LD_ADDR_OWVAR 33
16521: PUSH
16522: LD_STRING 
16524: ST_TO_ADDR
// hc_name :=  ;
16525: LD_ADDR_OWVAR 26
16529: PUSH
16530: LD_STRING 
16532: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16533: LD_INT 1
16535: PPUSH
16536: LD_INT 11
16538: PPUSH
16539: LD_INT 10
16541: PPUSH
16542: CALL_OW 380
// un := CreateHuman ;
16546: LD_ADDR_VAR 0 1
16550: PUSH
16551: CALL_OW 44
16555: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16556: LD_VAR 0 1
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16568: LD_INT 35
16570: PPUSH
16571: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16575: LD_VAR 0 1
16579: PPUSH
16580: LD_INT 22
16582: PUSH
16583: LD_OWVAR 2
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PPUSH
16592: CALL_OW 69
16596: PPUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 74
16606: PPUSH
16607: CALL_OW 115
// until IsDead ( un ) ;
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 301
16620: IFFALSE 16568
// end ;
16622: PPOPN 1
16624: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16625: LD_EXP 19
16629: PUSH
16630: LD_EXP 59
16634: AND
16635: IFFALSE 16647
16637: GO 16639
16639: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16640: LD_STRING earthquake(getX(game), 0, 32)
16642: PPUSH
16643: CALL_OW 559
16647: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16648: LD_EXP 19
16652: PUSH
16653: LD_EXP 60
16657: AND
16658: IFFALSE 16749
16660: GO 16662
16662: DISABLE
16663: LD_INT 0
16665: PPUSH
// begin enable ;
16666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_OWVAR 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 21
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 33
16696: PUSH
16697: LD_INT 3
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// if not tmp then
16714: LD_VAR 0 1
16718: NOT
16719: IFFALSE 16723
// exit ;
16721: GO 16749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16723: LD_VAR 0 1
16727: PUSH
16728: LD_INT 1
16730: PPUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 234
// end ;
16749: PPOPN 1
16751: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16752: LD_EXP 19
16756: PUSH
16757: LD_EXP 61
16761: AND
16762: IFFALSE 16903
16764: GO 16766
16766: DISABLE
16767: LD_INT 0
16769: PPUSH
16770: PPUSH
16771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: LD_INT 22
16779: PUSH
16780: LD_OWVAR 2
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 25
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 69
16807: ST_TO_ADDR
// if not tmp then
16808: LD_VAR 0 3
16812: NOT
16813: IFFALSE 16817
// exit ;
16815: GO 16903
// un := tmp [ rand ( 1 , tmp ) ] ;
16817: LD_ADDR_VAR 0 2
16821: PUSH
16822: LD_VAR 0 3
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: CALL_OW 12
16839: ARRAY
16840: ST_TO_ADDR
// if Crawls ( un ) then
16841: LD_VAR 0 2
16845: PPUSH
16846: CALL_OW 318
16850: IFFALSE 16861
// ComWalk ( un ) ;
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16861: LD_VAR 0 2
16865: PPUSH
16866: LD_INT 9
16868: PPUSH
16869: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16873: LD_INT 28
16875: PPUSH
16876: LD_OWVAR 2
16880: PPUSH
16881: LD_INT 2
16883: PPUSH
16884: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16888: LD_INT 29
16890: PPUSH
16891: LD_OWVAR 2
16895: PPUSH
16896: LD_INT 2
16898: PPUSH
16899: CALL_OW 322
// end ;
16903: PPOPN 3
16905: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16906: LD_EXP 19
16910: PUSH
16911: LD_EXP 62
16915: AND
16916: IFFALSE 17027
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
16925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16926: LD_ADDR_VAR 0 3
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_OWVAR 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 25
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 3
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17027
// un := tmp [ rand ( 1 , tmp ) ] ;
16971: LD_ADDR_VAR 0 2
16975: PUSH
16976: LD_VAR 0 3
16980: PUSH
16981: LD_INT 1
16983: PPUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: CALL_OW 12
16993: ARRAY
16994: ST_TO_ADDR
// if Crawls ( un ) then
16995: LD_VAR 0 2
16999: PPUSH
17000: CALL_OW 318
17004: IFFALSE 17015
// ComWalk ( un ) ;
17006: LD_VAR 0 2
17010: PPUSH
17011: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17015: LD_VAR 0 2
17019: PPUSH
17020: LD_INT 8
17022: PPUSH
17023: CALL_OW 336
// end ;
17027: PPOPN 3
17029: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17030: LD_EXP 19
17034: PUSH
17035: LD_EXP 63
17039: AND
17040: IFFALSE 17184
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17049: LD_ADDR_VAR 0 2
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_OWVAR 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 34
17081: PUSH
17082: LD_INT 12
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 34
17091: PUSH
17092: LD_INT 51
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 34
17101: PUSH
17102: LD_INT 32
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 69
17124: ST_TO_ADDR
// if not tmp then
17125: LD_VAR 0 2
17129: NOT
17130: IFFALSE 17134
// exit ;
17132: GO 17184
// for i in tmp do
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17182
// if GetCargo ( i , mat_artifact ) = 0 then
17147: LD_VAR 0 1
17151: PPUSH
17152: LD_INT 4
17154: PPUSH
17155: CALL_OW 289
17159: PUSH
17160: LD_INT 0
17162: EQUAL
17163: IFFALSE 17180
// SetCargo ( i , mat_siberit , 100 ) ;
17165: LD_VAR 0 1
17169: PPUSH
17170: LD_INT 3
17172: PPUSH
17173: LD_INT 100
17175: PPUSH
17176: CALL_OW 290
17180: GO 17144
17182: POP
17183: POP
// end ;
17184: PPOPN 2
17186: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17187: LD_EXP 19
17191: PUSH
17192: LD_EXP 64
17196: AND
17197: IFFALSE 17380
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_INT 22
17213: PUSH
17214: LD_OWVAR 2
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: ST_TO_ADDR
// if not tmp then
17228: LD_VAR 0 2
17232: NOT
17233: IFFALSE 17237
// exit ;
17235: GO 17380
// for i := 1 to 2 do
17237: LD_ADDR_VAR 0 1
17241: PUSH
17242: DOUBLE
17243: LD_INT 1
17245: DEC
17246: ST_TO_ADDR
17247: LD_INT 2
17249: PUSH
17250: FOR_TO
17251: IFFALSE 17378
// begin uc_side := your_side ;
17253: LD_ADDR_OWVAR 20
17257: PUSH
17258: LD_OWVAR 2
17262: ST_TO_ADDR
// uc_nation := nation_american ;
17263: LD_ADDR_OWVAR 21
17267: PUSH
17268: LD_INT 1
17270: ST_TO_ADDR
// vc_chassis := us_morphling ;
17271: LD_ADDR_OWVAR 37
17275: PUSH
17276: LD_INT 5
17278: ST_TO_ADDR
// vc_engine := engine_siberite ;
17279: LD_ADDR_OWVAR 39
17283: PUSH
17284: LD_INT 3
17286: ST_TO_ADDR
// vc_control := control_computer ;
17287: LD_ADDR_OWVAR 38
17291: PUSH
17292: LD_INT 3
17294: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17295: LD_ADDR_OWVAR 40
17299: PUSH
17300: LD_INT 10
17302: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17303: LD_VAR 0 2
17307: PUSH
17308: LD_INT 1
17310: ARRAY
17311: PPUSH
17312: CALL_OW 310
17316: NOT
17317: IFFALSE 17364
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17319: CALL_OW 45
17323: PPUSH
17324: LD_VAR 0 2
17328: PUSH
17329: LD_INT 1
17331: ARRAY
17332: PPUSH
17333: CALL_OW 250
17337: PPUSH
17338: LD_VAR 0 2
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: CALL_OW 251
17351: PPUSH
17352: LD_INT 12
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: CALL_OW 50
17362: GO 17376
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17364: CALL_OW 45
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: CALL_OW 51
// end ;
17376: GO 17250
17378: POP
17379: POP
// end ;
17380: PPOPN 2
17382: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17383: LD_EXP 19
17387: PUSH
17388: LD_EXP 65
17392: AND
17393: IFFALSE 17615
17395: GO 17397
17397: DISABLE
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17406: LD_ADDR_VAR 0 6
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: LD_INT 23
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: PPUSH
17455: CALL_OW 69
17459: ST_TO_ADDR
// if not tmp then
17460: LD_VAR 0 6
17464: NOT
17465: IFFALSE 17469
// exit ;
17467: GO 17615
// s1 := rand ( 1 , 4 ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 4
17479: PPUSH
17480: CALL_OW 12
17484: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_VAR 0 6
17494: PUSH
17495: LD_INT 1
17497: ARRAY
17498: PPUSH
17499: LD_VAR 0 2
17503: PPUSH
17504: CALL_OW 259
17508: ST_TO_ADDR
// if s1 = 1 then
17509: LD_VAR 0 2
17513: PUSH
17514: LD_INT 1
17516: EQUAL
17517: IFFALSE 17537
// s2 := rand ( 2 , 4 ) else
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_INT 2
17526: PPUSH
17527: LD_INT 4
17529: PPUSH
17530: CALL_OW 12
17534: ST_TO_ADDR
17535: GO 17545
// s2 := 1 ;
17537: LD_ADDR_VAR 0 3
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17545: LD_ADDR_VAR 0 5
17549: PUSH
17550: LD_VAR 0 6
17554: PUSH
17555: LD_INT 1
17557: ARRAY
17558: PPUSH
17559: LD_VAR 0 3
17563: PPUSH
17564: CALL_OW 259
17568: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17569: LD_VAR 0 6
17573: PUSH
17574: LD_INT 1
17576: ARRAY
17577: PPUSH
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_VAR 0 5
17587: PPUSH
17588: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17592: LD_VAR 0 6
17596: PUSH
17597: LD_INT 1
17599: ARRAY
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_VAR 0 4
17610: PPUSH
17611: CALL_OW 237
// end ;
17615: PPOPN 6
17617: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17618: LD_EXP 19
17622: PUSH
17623: LD_EXP 66
17627: AND
17628: IFFALSE 17707
17630: GO 17632
17632: DISABLE
17633: LD_INT 0
17635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17636: LD_ADDR_VAR 0 1
17640: PUSH
17641: LD_INT 22
17643: PUSH
17644: LD_OWVAR 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 30
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: ST_TO_ADDR
// if not tmp then
17672: LD_VAR 0 1
17676: NOT
17677: IFFALSE 17681
// exit ;
17679: GO 17707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17681: LD_VAR 0 1
17685: PUSH
17686: LD_INT 1
17688: PPUSH
17689: LD_VAR 0 1
17693: PPUSH
17694: CALL_OW 12
17698: ARRAY
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 234
// end ;
17707: PPOPN 1
17709: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17710: LD_EXP 19
17714: PUSH
17715: LD_EXP 67
17719: AND
17720: IFFALSE 17832
17722: GO 17724
17724: DISABLE
17725: LD_INT 0
17727: PPUSH
17728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_OWVAR 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 30
17751: PUSH
17752: LD_INT 27
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 30
17761: PUSH
17762: LD_INT 26
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 30
17771: PUSH
17772: LD_INT 28
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: ST_TO_ADDR
// if not tmp then
17794: LD_VAR 0 2
17798: NOT
17799: IFFALSE 17803
// exit ;
17801: GO 17832
// for i in tmp do
17803: LD_ADDR_VAR 0 1
17807: PUSH
17808: LD_VAR 0 2
17812: PUSH
17813: FOR_IN
17814: IFFALSE 17830
// SetLives ( i , 1 ) ;
17816: LD_VAR 0 1
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 234
17828: GO 17813
17830: POP
17831: POP
// end ;
17832: PPOPN 2
17834: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17835: LD_EXP 19
17839: PUSH
17840: LD_EXP 68
17844: AND
17845: IFFALSE 18119
17847: GO 17849
17849: DISABLE
17850: LD_INT 0
17852: PPUSH
17853: PPUSH
17854: PPUSH
// begin i := rand ( 1 , 7 ) ;
17855: LD_ADDR_VAR 0 1
17859: PUSH
17860: LD_INT 1
17862: PPUSH
17863: LD_INT 7
17865: PPUSH
17866: CALL_OW 12
17870: ST_TO_ADDR
// case i of 1 :
17871: LD_VAR 0 1
17875: PUSH
17876: LD_INT 1
17878: DOUBLE
17879: EQUAL
17880: IFTRUE 17884
17882: GO 17894
17884: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17885: LD_STRING earthquake(getX(game), 0, 32)
17887: PPUSH
17888: CALL_OW 559
17892: GO 18119
17894: LD_INT 2
17896: DOUBLE
17897: EQUAL
17898: IFTRUE 17902
17900: GO 17916
17902: POP
// begin ToLua ( displayStucuk(); ) ;
17903: LD_STRING displayStucuk();
17905: PPUSH
17906: CALL_OW 559
// ResetFog ;
17910: CALL_OW 335
// end ; 3 :
17914: GO 18119
17916: LD_INT 3
17918: DOUBLE
17919: EQUAL
17920: IFTRUE 17924
17922: GO 18028
17924: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 25
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: ST_TO_ADDR
// if not tmp then
17961: LD_VAR 0 2
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18119
// un := tmp [ rand ( 1 , tmp ) ] ;
17970: LD_ADDR_VAR 0 3
17974: PUSH
17975: LD_VAR 0 2
17979: PUSH
17980: LD_INT 1
17982: PPUSH
17983: LD_VAR 0 2
17987: PPUSH
17988: CALL_OW 12
17992: ARRAY
17993: ST_TO_ADDR
// if Crawls ( un ) then
17994: LD_VAR 0 3
17998: PPUSH
17999: CALL_OW 318
18003: IFFALSE 18014
// ComWalk ( un ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_INT 8
18021: PPUSH
18022: CALL_OW 336
// end ; 4 :
18026: GO 18119
18028: LD_INT 4
18030: DOUBLE
18031: EQUAL
18032: IFTRUE 18036
18034: GO 18097
18036: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18037: LD_ADDR_VAR 0 2
18041: PUSH
18042: LD_INT 22
18044: PUSH
18045: LD_OWVAR 2
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 30
18056: PUSH
18057: LD_INT 29
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PPUSH
18068: CALL_OW 69
18072: ST_TO_ADDR
// if not tmp then
18073: LD_VAR 0 2
18077: NOT
18078: IFFALSE 18082
// exit ;
18080: GO 18119
// DestroyUnit ( tmp [ 1 ] ) ;
18082: LD_VAR 0 2
18086: PUSH
18087: LD_INT 1
18089: ARRAY
18090: PPUSH
18091: CALL_OW 65
// end ; 5 .. 7 :
18095: GO 18119
18097: LD_INT 5
18099: DOUBLE
18100: GREATEREQUAL
18101: IFFALSE 18109
18103: LD_INT 7
18105: DOUBLE
18106: LESSEQUAL
18107: IFTRUE 18111
18109: GO 18118
18111: POP
// StreamSibBomb ; end ;
18112: CALL 14369 0 0
18116: GO 18119
18118: POP
// end ;
18119: PPOPN 3
18121: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18122: LD_EXP 19
18126: PUSH
18127: LD_EXP 69
18131: AND
18132: IFFALSE 18288
18134: GO 18136
18136: DISABLE
18137: LD_INT 0
18139: PPUSH
18140: PPUSH
18141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: LD_INT 81
18149: PUSH
18150: LD_OWVAR 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 21
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 21
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PPUSH
18191: CALL_OW 69
18195: ST_TO_ADDR
// if not tmp then
18196: LD_VAR 0 2
18200: NOT
18201: IFFALSE 18205
// exit ;
18203: GO 18288
// p := 0 ;
18205: LD_ADDR_VAR 0 3
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18213: LD_INT 35
18215: PPUSH
18216: CALL_OW 67
// p := p + 1 ;
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 1
18232: PLUS
18233: ST_TO_ADDR
// for i in tmp do
18234: LD_ADDR_VAR 0 1
18238: PUSH
18239: LD_VAR 0 2
18243: PUSH
18244: FOR_IN
18245: IFFALSE 18276
// if GetLives ( i ) < 1000 then
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 256
18256: PUSH
18257: LD_INT 1000
18259: LESS
18260: IFFALSE 18274
// SetLives ( i , 1000 ) ;
18262: LD_VAR 0 1
18266: PPUSH
18267: LD_INT 1000
18269: PPUSH
18270: CALL_OW 234
18274: GO 18244
18276: POP
18277: POP
// until p > 20 ;
18278: LD_VAR 0 3
18282: PUSH
18283: LD_INT 20
18285: GREATER
18286: IFFALSE 18213
// end ;
18288: PPOPN 3
18290: END
// every 0 0$1 trigger StreamModeActive and sTime do
18291: LD_EXP 19
18295: PUSH
18296: LD_EXP 70
18300: AND
18301: IFFALSE 18336
18303: GO 18305
18305: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18306: LD_INT 28
18308: PPUSH
18309: LD_OWVAR 2
18313: PPUSH
18314: LD_INT 2
18316: PPUSH
18317: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18321: LD_INT 30
18323: PPUSH
18324: LD_OWVAR 2
18328: PPUSH
18329: LD_INT 2
18331: PPUSH
18332: CALL_OW 322
// end ;
18336: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18337: LD_EXP 19
18341: PUSH
18342: LD_EXP 71
18346: AND
18347: IFFALSE 18468
18349: GO 18351
18351: DISABLE
18352: LD_INT 0
18354: PPUSH
18355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18356: LD_ADDR_VAR 0 2
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_OWVAR 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 21
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 3
18385: PUSH
18386: LD_INT 23
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 69
18409: ST_TO_ADDR
// if not tmp then
18410: LD_VAR 0 2
18414: NOT
18415: IFFALSE 18419
// exit ;
18417: GO 18468
// for i in tmp do
18419: LD_ADDR_VAR 0 1
18423: PUSH
18424: LD_VAR 0 2
18428: PUSH
18429: FOR_IN
18430: IFFALSE 18466
// begin if Crawls ( i ) then
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 318
18441: IFFALSE 18452
// ComWalk ( i ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 138
// SetClass ( i , 2 ) ;
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_INT 2
18459: PPUSH
18460: CALL_OW 336
// end ;
18464: GO 18429
18466: POP
18467: POP
// end ;
18468: PPOPN 2
18470: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18471: LD_EXP 19
18475: PUSH
18476: LD_EXP 72
18480: AND
18481: IFFALSE 18762
18483: GO 18485
18485: DISABLE
18486: LD_INT 0
18488: PPUSH
18489: PPUSH
18490: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18491: LD_OWVAR 2
18495: PPUSH
18496: LD_INT 9
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18509: LD_INT 9
18511: PPUSH
18512: LD_OWVAR 2
18516: PPUSH
18517: CALL_OW 343
// uc_side := 9 ;
18521: LD_ADDR_OWVAR 20
18525: PUSH
18526: LD_INT 9
18528: ST_TO_ADDR
// uc_nation := 2 ;
18529: LD_ADDR_OWVAR 21
18533: PUSH
18534: LD_INT 2
18536: ST_TO_ADDR
// hc_name := Dark Warrior ;
18537: LD_ADDR_OWVAR 26
18541: PUSH
18542: LD_STRING Dark Warrior
18544: ST_TO_ADDR
// hc_gallery :=  ;
18545: LD_ADDR_OWVAR 33
18549: PUSH
18550: LD_STRING 
18552: ST_TO_ADDR
// hc_noskilllimit := true ;
18553: LD_ADDR_OWVAR 76
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18561: LD_ADDR_OWVAR 31
18565: PUSH
18566: LD_INT 30
18568: PUSH
18569: LD_INT 30
18571: PUSH
18572: LD_INT 30
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: ST_TO_ADDR
// un := CreateHuman ;
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: CALL_OW 44
18593: ST_TO_ADDR
// hc_noskilllimit := false ;
18594: LD_ADDR_OWVAR 76
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18602: LD_VAR 0 3
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: CALL_OW 51
// p := 0 ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_INT 0
18621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18622: LD_INT 35
18624: PPUSH
18625: CALL_OW 67
// p := p + 1 ;
18629: LD_ADDR_VAR 0 2
18633: PUSH
18634: LD_VAR 0 2
18638: PUSH
18639: LD_INT 1
18641: PLUS
18642: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18643: LD_VAR 0 3
18647: PPUSH
18648: CALL_OW 256
18652: PUSH
18653: LD_INT 1000
18655: LESS
18656: IFFALSE 18670
// SetLives ( un , 1000 ) ;
18658: LD_VAR 0 3
18662: PPUSH
18663: LD_INT 1000
18665: PPUSH
18666: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18670: LD_VAR 0 3
18674: PPUSH
18675: LD_INT 81
18677: PUSH
18678: LD_OWVAR 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 91
18689: PUSH
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 30
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 69
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 74
18721: PPUSH
18722: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18726: LD_VAR 0 2
18730: PUSH
18731: LD_INT 60
18733: GREATER
18734: PUSH
18735: LD_VAR 0 3
18739: PPUSH
18740: CALL_OW 301
18744: OR
18745: IFFALSE 18622
// if un then
18747: LD_VAR 0 3
18751: IFFALSE 18762
// RemoveUnit ( un ) ;
18753: LD_VAR 0 3
18757: PPUSH
18758: CALL_OW 64
// end ;
18762: PPOPN 3
18764: END
