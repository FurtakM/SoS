// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7714: LD_VAR 0 2
7718: PUSH
7719: LD_INT 100
7721: EQUAL
7722: IFFALSE 8671
// begin if not StreamModeActive then
7724: LD_EXP 19
7728: NOT
7729: IFFALSE 7739
// StreamModeActive := true ;
7731: LD_ADDR_EXP 19
7735: PUSH
7736: LD_INT 1
7738: ST_TO_ADDR
// if p3 = 0 then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 0
7746: EQUAL
7747: IFFALSE 7753
// InitStreamMode ;
7749: CALL 8904 0 0
// if p3 = 1 then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_INT 1
7760: EQUAL
7761: IFFALSE 7771
// sRocket := true ;
7763: LD_ADDR_EXP 24
7767: PUSH
7768: LD_INT 1
7770: ST_TO_ADDR
// if p3 = 2 then
7771: LD_VAR 0 3
7775: PUSH
7776: LD_INT 2
7778: EQUAL
7779: IFFALSE 7789
// sSpeed := true ;
7781: LD_ADDR_EXP 23
7785: PUSH
7786: LD_INT 1
7788: ST_TO_ADDR
// if p3 = 3 then
7789: LD_VAR 0 3
7793: PUSH
7794: LD_INT 3
7796: EQUAL
7797: IFFALSE 7807
// sEngine := true ;
7799: LD_ADDR_EXP 25
7803: PUSH
7804: LD_INT 1
7806: ST_TO_ADDR
// if p3 = 4 then
7807: LD_VAR 0 3
7811: PUSH
7812: LD_INT 4
7814: EQUAL
7815: IFFALSE 7825
// sSpec := true ;
7817: LD_ADDR_EXP 22
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// if p3 = 5 then
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 5
7832: EQUAL
7833: IFFALSE 7843
// sLevel := true ;
7835: LD_ADDR_EXP 26
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// if p3 = 6 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 6
7850: EQUAL
7851: IFFALSE 7861
// sArmoury := true ;
7853: LD_ADDR_EXP 27
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// if p3 = 7 then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 7
7868: EQUAL
7869: IFFALSE 7879
// sRadar := true ;
7871: LD_ADDR_EXP 28
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 8 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 8
7886: EQUAL
7887: IFFALSE 7897
// sBunker := true ;
7889: LD_ADDR_EXP 29
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// if p3 = 9 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 9
7904: EQUAL
7905: IFFALSE 7915
// sHack := true ;
7907: LD_ADDR_EXP 30
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// if p3 = 10 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 10
7922: EQUAL
7923: IFFALSE 7933
// sFire := true ;
7925: LD_ADDR_EXP 31
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// if p3 = 11 then
7933: LD_VAR 0 3
7937: PUSH
7938: LD_INT 11
7940: EQUAL
7941: IFFALSE 7951
// sRefresh := true ;
7943: LD_ADDR_EXP 32
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// if p3 = 12 then
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 12
7958: EQUAL
7959: IFFALSE 7969
// sExp := true ;
7961: LD_ADDR_EXP 33
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if p3 = 13 then
7969: LD_VAR 0 3
7973: PUSH
7974: LD_INT 13
7976: EQUAL
7977: IFFALSE 7987
// sDepot := true ;
7979: LD_ADDR_EXP 34
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// if p3 = 14 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 14
7994: EQUAL
7995: IFFALSE 8005
// sFlag := true ;
7997: LD_ADDR_EXP 35
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// if p3 = 15 then
8005: LD_VAR 0 3
8009: PUSH
8010: LD_INT 15
8012: EQUAL
8013: IFFALSE 8023
// sKamikadze := true ;
8015: LD_ADDR_EXP 43
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// if p3 = 16 then
8023: LD_VAR 0 3
8027: PUSH
8028: LD_INT 16
8030: EQUAL
8031: IFFALSE 8041
// sTroll := true ;
8033: LD_ADDR_EXP 44
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// if p3 = 17 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 17
8048: EQUAL
8049: IFFALSE 8059
// sSlow := true ;
8051: LD_ADDR_EXP 45
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// if p3 = 18 then
8059: LD_VAR 0 3
8063: PUSH
8064: LD_INT 18
8066: EQUAL
8067: IFFALSE 8077
// sLack := true ;
8069: LD_ADDR_EXP 46
8073: PUSH
8074: LD_INT 1
8076: ST_TO_ADDR
// if p3 = 19 then
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 19
8084: EQUAL
8085: IFFALSE 8095
// sTank := true ;
8087: LD_ADDR_EXP 48
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// if p3 = 20 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 20
8102: EQUAL
8103: IFFALSE 8113
// sRemote := true ;
8105: LD_ADDR_EXP 49
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// if p3 = 21 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 21
8120: EQUAL
8121: IFFALSE 8131
// sPowell := true ;
8123: LD_ADDR_EXP 50
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if p3 = 22 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 22
8138: EQUAL
8139: IFFALSE 8149
// sTeleport := true ;
8141: LD_ADDR_EXP 53
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 23 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 23
8156: EQUAL
8157: IFFALSE 8167
// sOilTower := true ;
8159: LD_ADDR_EXP 55
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 24 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 24
8174: EQUAL
8175: IFFALSE 8185
// sShovel := true ;
8177: LD_ADDR_EXP 56
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 25 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 25
8192: EQUAL
8193: IFFALSE 8203
// sSheik := true ;
8195: LD_ADDR_EXP 57
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 26 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 26
8210: EQUAL
8211: IFFALSE 8221
// sEarthquake := true ;
8213: LD_ADDR_EXP 59
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 27 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 27
8228: EQUAL
8229: IFFALSE 8239
// sAI := true ;
8231: LD_ADDR_EXP 60
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 28 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 28
8246: EQUAL
8247: IFFALSE 8257
// sCargo := true ;
8249: LD_ADDR_EXP 63
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 29 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 29
8264: EQUAL
8265: IFFALSE 8275
// sDLaser := true ;
8267: LD_ADDR_EXP 64
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 30 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 30
8282: EQUAL
8283: IFFALSE 8293
// sExchange := true ;
8285: LD_ADDR_EXP 65
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 31 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 31
8300: EQUAL
8301: IFFALSE 8311
// sFac := true ;
8303: LD_ADDR_EXP 66
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 32 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 32
8318: EQUAL
8319: IFFALSE 8329
// sPower := true ;
8321: LD_ADDR_EXP 67
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 33 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 33
8336: EQUAL
8337: IFFALSE 8347
// sRandom := true ;
8339: LD_ADDR_EXP 68
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 34 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 34
8354: EQUAL
8355: IFFALSE 8365
// sShield := true ;
8357: LD_ADDR_EXP 69
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 35 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 35
8372: EQUAL
8373: IFFALSE 8383
// sTime := true ;
8375: LD_ADDR_EXP 70
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 36 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 36
8390: EQUAL
8391: IFFALSE 8401
// sTools := true ;
8393: LD_ADDR_EXP 71
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 101 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 101
8408: EQUAL
8409: IFFALSE 8419
// sSold := true ;
8411: LD_ADDR_EXP 36
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 102 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 102
8426: EQUAL
8427: IFFALSE 8437
// sDiff := true ;
8429: LD_ADDR_EXP 37
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 103 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 103
8444: EQUAL
8445: IFFALSE 8455
// sFog := true ;
8447: LD_ADDR_EXP 40
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 104 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 104
8462: EQUAL
8463: IFFALSE 8473
// sReset := true ;
8465: LD_ADDR_EXP 41
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 105 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 105
8480: EQUAL
8481: IFFALSE 8491
// sSun := true ;
8483: LD_ADDR_EXP 42
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 106 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 106
8498: EQUAL
8499: IFFALSE 8509
// sTiger := true ;
8501: LD_ADDR_EXP 38
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 107 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 107
8516: EQUAL
8517: IFFALSE 8527
// sBomb := true ;
8519: LD_ADDR_EXP 39
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 108 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 108
8534: EQUAL
8535: IFFALSE 8545
// sWound := true ;
8537: LD_ADDR_EXP 47
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 109 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 109
8552: EQUAL
8553: IFFALSE 8563
// sBetray := true ;
8555: LD_ADDR_EXP 51
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 110 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 110
8570: EQUAL
8571: IFFALSE 8581
// sContamin := true ;
8573: LD_ADDR_EXP 52
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 111 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 111
8588: EQUAL
8589: IFFALSE 8599
// sOil := true ;
8591: LD_ADDR_EXP 54
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 112 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 112
8606: EQUAL
8607: IFFALSE 8617
// sStu := true ;
8609: LD_ADDR_EXP 58
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 113 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 113
8624: EQUAL
8625: IFFALSE 8635
// sBazooka := true ;
8627: LD_ADDR_EXP 61
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 114 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 114
8642: EQUAL
8643: IFFALSE 8653
// sMortar := true ;
8645: LD_ADDR_EXP 62
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 115 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 115
8660: EQUAL
8661: IFFALSE 8671
// sRanger := true ;
8663: LD_ADDR_EXP 72
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// end ; if p2 = 101 then
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 101
8678: EQUAL
8679: IFFALSE 8882
// begin case p3 of 1 :
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 1
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8701
8694: POP
// hHackUnlimitedResources ; 2 :
8695: CALL 18976 0 0
8699: GO 8882
8701: LD_INT 2
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8716
8709: POP
// hHackSetLevel10 ; 3 :
8710: CALL 19109 0 0
8714: GO 8882
8716: LD_INT 3
8718: DOUBLE
8719: EQUAL
8720: IFTRUE 8724
8722: GO 8731
8724: POP
// hHackSetLevel10YourUnits ; 4 :
8725: CALL 19194 0 0
8729: GO 8882
8731: LD_INT 4
8733: DOUBLE
8734: EQUAL
8735: IFTRUE 8739
8737: GO 8761
8739: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
8740: LD_VAR 0 4
8744: PPUSH
8745: LD_VAR 0 5
8749: PPUSH
8750: LD_VAR 0 6
8754: PPUSH
8755: CALL 19284 0 3
8759: GO 8882
8761: LD_INT 5
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8776
8769: POP
// hHackSpawnVehicle ; 6 :
8770: CALL 19345 0 0
8774: GO 8882
8776: LD_INT 6
8778: DOUBLE
8779: EQUAL
8780: IFTRUE 8784
8782: GO 8791
8784: POP
// hHackInvincible ; 7 :
8785: CALL 19891 0 0
8789: GO 8882
8791: LD_INT 7
8793: DOUBLE
8794: EQUAL
8795: IFTRUE 8799
8797: GO 8806
8799: POP
// hHackInvisible ; 8 :
8800: CALL 20002 0 0
8804: GO 8882
8806: LD_INT 8
8808: DOUBLE
8809: EQUAL
8810: IFTRUE 8814
8812: GO 8821
8814: POP
// hHackChangeYourSide ; 9 :
8815: CALL 20059 0 0
8819: GO 8882
8821: LD_INT 9
8823: DOUBLE
8824: EQUAL
8825: IFTRUE 8829
8827: GO 8836
8829: POP
// hHackChangeUnitSide ; 10 :
8830: CALL 20101 0 0
8834: GO 8882
8836: LD_INT 10
8838: DOUBLE
8839: EQUAL
8840: IFTRUE 8844
8842: GO 8851
8844: POP
// hHackFog ; 11 :
8845: CALL 20202 0 0
8849: GO 8882
8851: LD_INT 11
8853: DOUBLE
8854: EQUAL
8855: IFTRUE 8859
8857: GO 8866
8859: POP
// hHackApeman ; 12 :
8860: CALL 20217 0 0
8864: GO 8882
8866: LD_INT 12
8868: DOUBLE
8869: EQUAL
8870: IFTRUE 8874
8872: GO 8881
8874: POP
// hHackBoom ; end ;
8875: CALL 20302 0 0
8879: GO 8882
8881: POP
// end ; end ;
8882: PPOPN 6
8884: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8885: GO 8887
8887: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8888: LD_STRING initStreamRollete();
8890: PPUSH
8891: CALL_OW 559
// InitStreamMode ;
8895: CALL 8904 0 0
// DefineStreamItems ( ) ;
8899: CALL 9344 0 0
// end ;
8903: END
// function InitStreamMode ; begin
8904: LD_INT 0
8906: PPUSH
// streamModeActive := false ;
8907: LD_ADDR_EXP 19
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// normalCounter := 36 ;
8915: LD_ADDR_EXP 20
8919: PUSH
8920: LD_INT 36
8922: ST_TO_ADDR
// hardcoreCounter := 16 ;
8923: LD_ADDR_EXP 21
8927: PUSH
8928: LD_INT 16
8930: ST_TO_ADDR
// sRocket := false ;
8931: LD_ADDR_EXP 24
8935: PUSH
8936: LD_INT 0
8938: ST_TO_ADDR
// sSpeed := false ;
8939: LD_ADDR_EXP 23
8943: PUSH
8944: LD_INT 0
8946: ST_TO_ADDR
// sEngine := false ;
8947: LD_ADDR_EXP 25
8951: PUSH
8952: LD_INT 0
8954: ST_TO_ADDR
// sSpec := false ;
8955: LD_ADDR_EXP 22
8959: PUSH
8960: LD_INT 0
8962: ST_TO_ADDR
// sLevel := false ;
8963: LD_ADDR_EXP 26
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// sArmoury := false ;
8971: LD_ADDR_EXP 27
8975: PUSH
8976: LD_INT 0
8978: ST_TO_ADDR
// sRadar := false ;
8979: LD_ADDR_EXP 28
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// sBunker := false ;
8987: LD_ADDR_EXP 29
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// sHack := false ;
8995: LD_ADDR_EXP 30
8999: PUSH
9000: LD_INT 0
9002: ST_TO_ADDR
// sFire := false ;
9003: LD_ADDR_EXP 31
9007: PUSH
9008: LD_INT 0
9010: ST_TO_ADDR
// sRefresh := false ;
9011: LD_ADDR_EXP 32
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// sExp := false ;
9019: LD_ADDR_EXP 33
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// sDepot := false ;
9027: LD_ADDR_EXP 34
9031: PUSH
9032: LD_INT 0
9034: ST_TO_ADDR
// sFlag := false ;
9035: LD_ADDR_EXP 35
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// sKamikadze := false ;
9043: LD_ADDR_EXP 43
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// sTroll := false ;
9051: LD_ADDR_EXP 44
9055: PUSH
9056: LD_INT 0
9058: ST_TO_ADDR
// sSlow := false ;
9059: LD_ADDR_EXP 45
9063: PUSH
9064: LD_INT 0
9066: ST_TO_ADDR
// sLack := false ;
9067: LD_ADDR_EXP 46
9071: PUSH
9072: LD_INT 0
9074: ST_TO_ADDR
// sTank := false ;
9075: LD_ADDR_EXP 48
9079: PUSH
9080: LD_INT 0
9082: ST_TO_ADDR
// sRemote := false ;
9083: LD_ADDR_EXP 49
9087: PUSH
9088: LD_INT 0
9090: ST_TO_ADDR
// sPowell := false ;
9091: LD_ADDR_EXP 50
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// sTeleport := false ;
9099: LD_ADDR_EXP 53
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// sOilTower := false ;
9107: LD_ADDR_EXP 55
9111: PUSH
9112: LD_INT 0
9114: ST_TO_ADDR
// sShovel := false ;
9115: LD_ADDR_EXP 56
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// sSheik := false ;
9123: LD_ADDR_EXP 57
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sEarthquake := false ;
9131: LD_ADDR_EXP 59
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sAI := false ;
9139: LD_ADDR_EXP 60
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sCargo := false ;
9147: LD_ADDR_EXP 63
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sDLaser := false ;
9155: LD_ADDR_EXP 64
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sExchange := false ;
9163: LD_ADDR_EXP 65
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sFac := false ;
9171: LD_ADDR_EXP 66
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sPower := false ;
9179: LD_ADDR_EXP 67
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// sRandom := false ;
9187: LD_ADDR_EXP 68
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// sShield := false ;
9195: LD_ADDR_EXP 69
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// sTime := false ;
9203: LD_ADDR_EXP 70
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// sTools := false ;
9211: LD_ADDR_EXP 71
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// sSold := false ;
9219: LD_ADDR_EXP 36
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// sDiff := false ;
9227: LD_ADDR_EXP 37
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// sFog := false ;
9235: LD_ADDR_EXP 40
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// sReset := false ;
9243: LD_ADDR_EXP 41
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// sSun := false ;
9251: LD_ADDR_EXP 42
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// sTiger := false ;
9259: LD_ADDR_EXP 38
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// sBomb := false ;
9267: LD_ADDR_EXP 39
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// sWound := false ;
9275: LD_ADDR_EXP 47
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// sBetray := false ;
9283: LD_ADDR_EXP 51
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// sContamin := false ;
9291: LD_ADDR_EXP 52
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// sOil := false ;
9299: LD_ADDR_EXP 54
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// sStu := false ;
9307: LD_ADDR_EXP 58
9311: PUSH
9312: LD_INT 0
9314: ST_TO_ADDR
// sBazooka := false ;
9315: LD_ADDR_EXP 61
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// sMortar := false ;
9323: LD_ADDR_EXP 62
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// sRanger := false ;
9331: LD_ADDR_EXP 72
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// end ;
9339: LD_VAR 0 1
9343: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9344: LD_INT 0
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
// result := [ ] ;
9351: LD_ADDR_VAR 0 1
9355: PUSH
9356: EMPTY
9357: ST_TO_ADDR
// if campaign_id = 1 then
9358: LD_OWVAR 69
9362: PUSH
9363: LD_INT 1
9365: EQUAL
9366: IFFALSE 12304
// begin case mission_number of 1 :
9368: LD_OWVAR 70
9372: PUSH
9373: LD_INT 1
9375: DOUBLE
9376: EQUAL
9377: IFTRUE 9381
9379: GO 9445
9381: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9382: LD_ADDR_VAR 0 1
9386: PUSH
9387: LD_INT 2
9389: PUSH
9390: LD_INT 4
9392: PUSH
9393: LD_INT 11
9395: PUSH
9396: LD_INT 12
9398: PUSH
9399: LD_INT 15
9401: PUSH
9402: LD_INT 16
9404: PUSH
9405: LD_INT 22
9407: PUSH
9408: LD_INT 23
9410: PUSH
9411: LD_INT 26
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 101
9427: PUSH
9428: LD_INT 102
9430: PUSH
9431: LD_INT 106
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: ST_TO_ADDR
9443: GO 12302
9445: LD_INT 2
9447: DOUBLE
9448: EQUAL
9449: IFTRUE 9453
9451: GO 9525
9453: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_INT 2
9461: PUSH
9462: LD_INT 4
9464: PUSH
9465: LD_INT 11
9467: PUSH
9468: LD_INT 12
9470: PUSH
9471: LD_INT 15
9473: PUSH
9474: LD_INT 16
9476: PUSH
9477: LD_INT 22
9479: PUSH
9480: LD_INT 23
9482: PUSH
9483: LD_INT 26
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 101
9499: PUSH
9500: LD_INT 102
9502: PUSH
9503: LD_INT 105
9505: PUSH
9506: LD_INT 106
9508: PUSH
9509: LD_INT 108
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: ST_TO_ADDR
9523: GO 12302
9525: LD_INT 3
9527: DOUBLE
9528: EQUAL
9529: IFTRUE 9533
9531: GO 9609
9533: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9534: LD_ADDR_VAR 0 1
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 4
9544: PUSH
9545: LD_INT 5
9547: PUSH
9548: LD_INT 11
9550: PUSH
9551: LD_INT 12
9553: PUSH
9554: LD_INT 15
9556: PUSH
9557: LD_INT 16
9559: PUSH
9560: LD_INT 22
9562: PUSH
9563: LD_INT 26
9565: PUSH
9566: LD_INT 36
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 101
9583: PUSH
9584: LD_INT 102
9586: PUSH
9587: LD_INT 105
9589: PUSH
9590: LD_INT 106
9592: PUSH
9593: LD_INT 108
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: ST_TO_ADDR
9607: GO 12302
9609: LD_INT 4
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9701
9617: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9618: LD_ADDR_VAR 0 1
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 4
9628: PUSH
9629: LD_INT 5
9631: PUSH
9632: LD_INT 8
9634: PUSH
9635: LD_INT 11
9637: PUSH
9638: LD_INT 12
9640: PUSH
9641: LD_INT 15
9643: PUSH
9644: LD_INT 16
9646: PUSH
9647: LD_INT 22
9649: PUSH
9650: LD_INT 23
9652: PUSH
9653: LD_INT 26
9655: PUSH
9656: LD_INT 36
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 101
9675: PUSH
9676: LD_INT 102
9678: PUSH
9679: LD_INT 105
9681: PUSH
9682: LD_INT 106
9684: PUSH
9685: LD_INT 108
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: ST_TO_ADDR
9699: GO 12302
9701: LD_INT 5
9703: DOUBLE
9704: EQUAL
9705: IFTRUE 9709
9707: GO 9809
9709: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9710: LD_ADDR_VAR 0 1
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 4
9720: PUSH
9721: LD_INT 5
9723: PUSH
9724: LD_INT 6
9726: PUSH
9727: LD_INT 8
9729: PUSH
9730: LD_INT 11
9732: PUSH
9733: LD_INT 12
9735: PUSH
9736: LD_INT 15
9738: PUSH
9739: LD_INT 16
9741: PUSH
9742: LD_INT 22
9744: PUSH
9745: LD_INT 23
9747: PUSH
9748: LD_INT 25
9750: PUSH
9751: LD_INT 26
9753: PUSH
9754: LD_INT 36
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 101
9775: PUSH
9776: LD_INT 102
9778: PUSH
9779: LD_INT 105
9781: PUSH
9782: LD_INT 106
9784: PUSH
9785: LD_INT 108
9787: PUSH
9788: LD_INT 109
9790: PUSH
9791: LD_INT 112
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: ST_TO_ADDR
9807: GO 12302
9809: LD_INT 6
9811: DOUBLE
9812: EQUAL
9813: IFTRUE 9817
9815: GO 9937
9817: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9818: LD_ADDR_VAR 0 1
9822: PUSH
9823: LD_INT 2
9825: PUSH
9826: LD_INT 4
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: LD_INT 6
9834: PUSH
9835: LD_INT 8
9837: PUSH
9838: LD_INT 11
9840: PUSH
9841: LD_INT 12
9843: PUSH
9844: LD_INT 15
9846: PUSH
9847: LD_INT 16
9849: PUSH
9850: LD_INT 20
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 22
9858: PUSH
9859: LD_INT 23
9861: PUSH
9862: LD_INT 25
9864: PUSH
9865: LD_INT 26
9867: PUSH
9868: LD_INT 30
9870: PUSH
9871: LD_INT 31
9873: PUSH
9874: LD_INT 32
9876: PUSH
9877: LD_INT 36
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 101
9903: PUSH
9904: LD_INT 102
9906: PUSH
9907: LD_INT 105
9909: PUSH
9910: LD_INT 106
9912: PUSH
9913: LD_INT 108
9915: PUSH
9916: LD_INT 109
9918: PUSH
9919: LD_INT 112
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: ST_TO_ADDR
9935: GO 12302
9937: LD_INT 7
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 10045
9945: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9946: LD_ADDR_VAR 0 1
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 5
9959: PUSH
9960: LD_INT 7
9962: PUSH
9963: LD_INT 11
9965: PUSH
9966: LD_INT 12
9968: PUSH
9969: LD_INT 15
9971: PUSH
9972: LD_INT 16
9974: PUSH
9975: LD_INT 20
9977: PUSH
9978: LD_INT 21
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_INT 23
9986: PUSH
9987: LD_INT 25
9989: PUSH
9990: LD_INT 26
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 101
10011: PUSH
10012: LD_INT 102
10014: PUSH
10015: LD_INT 103
10017: PUSH
10018: LD_INT 105
10020: PUSH
10021: LD_INT 106
10023: PUSH
10024: LD_INT 108
10026: PUSH
10027: LD_INT 112
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: ST_TO_ADDR
10043: GO 12302
10045: LD_INT 8
10047: DOUBLE
10048: EQUAL
10049: IFTRUE 10053
10051: GO 10181
10053: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10054: LD_ADDR_VAR 0 1
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 5
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: LD_INT 7
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: LD_INT 11
10079: PUSH
10080: LD_INT 12
10082: PUSH
10083: LD_INT 15
10085: PUSH
10086: LD_INT 16
10088: PUSH
10089: LD_INT 20
10091: PUSH
10092: LD_INT 21
10094: PUSH
10095: LD_INT 22
10097: PUSH
10098: LD_INT 23
10100: PUSH
10101: LD_INT 25
10103: PUSH
10104: LD_INT 26
10106: PUSH
10107: LD_INT 30
10109: PUSH
10110: LD_INT 31
10112: PUSH
10113: LD_INT 32
10115: PUSH
10116: LD_INT 36
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 101
10143: PUSH
10144: LD_INT 102
10146: PUSH
10147: LD_INT 103
10149: PUSH
10150: LD_INT 105
10152: PUSH
10153: LD_INT 106
10155: PUSH
10156: LD_INT 108
10158: PUSH
10159: LD_INT 109
10161: PUSH
10162: LD_INT 112
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: ST_TO_ADDR
10179: GO 12302
10181: LD_INT 9
10183: DOUBLE
10184: EQUAL
10185: IFTRUE 10189
10187: GO 10325
10189: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10190: LD_ADDR_VAR 0 1
10194: PUSH
10195: LD_INT 2
10197: PUSH
10198: LD_INT 4
10200: PUSH
10201: LD_INT 5
10203: PUSH
10204: LD_INT 6
10206: PUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 8
10212: PUSH
10213: LD_INT 11
10215: PUSH
10216: LD_INT 12
10218: PUSH
10219: LD_INT 15
10221: PUSH
10222: LD_INT 16
10224: PUSH
10225: LD_INT 20
10227: PUSH
10228: LD_INT 21
10230: PUSH
10231: LD_INT 22
10233: PUSH
10234: LD_INT 23
10236: PUSH
10237: LD_INT 25
10239: PUSH
10240: LD_INT 26
10242: PUSH
10243: LD_INT 28
10245: PUSH
10246: LD_INT 30
10248: PUSH
10249: LD_INT 31
10251: PUSH
10252: LD_INT 32
10254: PUSH
10255: LD_INT 36
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 101
10283: PUSH
10284: LD_INT 102
10286: PUSH
10287: LD_INT 103
10289: PUSH
10290: LD_INT 105
10292: PUSH
10293: LD_INT 106
10295: PUSH
10296: LD_INT 108
10298: PUSH
10299: LD_INT 109
10301: PUSH
10302: LD_INT 112
10304: PUSH
10305: LD_INT 114
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: ST_TO_ADDR
10323: GO 12302
10325: LD_INT 10
10327: DOUBLE
10328: EQUAL
10329: IFTRUE 10333
10331: GO 10517
10333: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10334: LD_ADDR_VAR 0 1
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: LD_INT 5
10347: PUSH
10348: LD_INT 6
10350: PUSH
10351: LD_INT 7
10353: PUSH
10354: LD_INT 8
10356: PUSH
10357: LD_INT 9
10359: PUSH
10360: LD_INT 10
10362: PUSH
10363: LD_INT 11
10365: PUSH
10366: LD_INT 12
10368: PUSH
10369: LD_INT 13
10371: PUSH
10372: LD_INT 14
10374: PUSH
10375: LD_INT 15
10377: PUSH
10378: LD_INT 16
10380: PUSH
10381: LD_INT 17
10383: PUSH
10384: LD_INT 18
10386: PUSH
10387: LD_INT 19
10389: PUSH
10390: LD_INT 20
10392: PUSH
10393: LD_INT 21
10395: PUSH
10396: LD_INT 22
10398: PUSH
10399: LD_INT 23
10401: PUSH
10402: LD_INT 24
10404: PUSH
10405: LD_INT 25
10407: PUSH
10408: LD_INT 26
10410: PUSH
10411: LD_INT 28
10413: PUSH
10414: LD_INT 30
10416: PUSH
10417: LD_INT 31
10419: PUSH
10420: LD_INT 32
10422: PUSH
10423: LD_INT 36
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 101
10459: PUSH
10460: LD_INT 102
10462: PUSH
10463: LD_INT 103
10465: PUSH
10466: LD_INT 104
10468: PUSH
10469: LD_INT 105
10471: PUSH
10472: LD_INT 106
10474: PUSH
10475: LD_INT 107
10477: PUSH
10478: LD_INT 108
10480: PUSH
10481: LD_INT 109
10483: PUSH
10484: LD_INT 110
10486: PUSH
10487: LD_INT 111
10489: PUSH
10490: LD_INT 112
10492: PUSH
10493: LD_INT 114
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: ST_TO_ADDR
10515: GO 12302
10517: LD_INT 11
10519: DOUBLE
10520: EQUAL
10521: IFTRUE 10525
10523: GO 10717
10525: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10526: LD_ADDR_VAR 0 1
10530: PUSH
10531: LD_INT 2
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: LD_INT 4
10539: PUSH
10540: LD_INT 5
10542: PUSH
10543: LD_INT 6
10545: PUSH
10546: LD_INT 7
10548: PUSH
10549: LD_INT 8
10551: PUSH
10552: LD_INT 9
10554: PUSH
10555: LD_INT 10
10557: PUSH
10558: LD_INT 11
10560: PUSH
10561: LD_INT 12
10563: PUSH
10564: LD_INT 13
10566: PUSH
10567: LD_INT 14
10569: PUSH
10570: LD_INT 15
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: LD_INT 17
10578: PUSH
10579: LD_INT 18
10581: PUSH
10582: LD_INT 19
10584: PUSH
10585: LD_INT 20
10587: PUSH
10588: LD_INT 21
10590: PUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 23
10596: PUSH
10597: LD_INT 24
10599: PUSH
10600: LD_INT 25
10602: PUSH
10603: LD_INT 26
10605: PUSH
10606: LD_INT 28
10608: PUSH
10609: LD_INT 30
10611: PUSH
10612: LD_INT 31
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 36
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 101
10659: PUSH
10660: LD_INT 102
10662: PUSH
10663: LD_INT 103
10665: PUSH
10666: LD_INT 104
10668: PUSH
10669: LD_INT 105
10671: PUSH
10672: LD_INT 106
10674: PUSH
10675: LD_INT 107
10677: PUSH
10678: LD_INT 108
10680: PUSH
10681: LD_INT 109
10683: PUSH
10684: LD_INT 110
10686: PUSH
10687: LD_INT 111
10689: PUSH
10690: LD_INT 112
10692: PUSH
10693: LD_INT 114
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: ST_TO_ADDR
10715: GO 12302
10717: LD_INT 12
10719: DOUBLE
10720: EQUAL
10721: IFTRUE 10725
10723: GO 10933
10725: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10726: LD_ADDR_VAR 0 1
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 4
10742: PUSH
10743: LD_INT 5
10745: PUSH
10746: LD_INT 6
10748: PUSH
10749: LD_INT 7
10751: PUSH
10752: LD_INT 8
10754: PUSH
10755: LD_INT 9
10757: PUSH
10758: LD_INT 10
10760: PUSH
10761: LD_INT 11
10763: PUSH
10764: LD_INT 12
10766: PUSH
10767: LD_INT 13
10769: PUSH
10770: LD_INT 14
10772: PUSH
10773: LD_INT 15
10775: PUSH
10776: LD_INT 16
10778: PUSH
10779: LD_INT 17
10781: PUSH
10782: LD_INT 18
10784: PUSH
10785: LD_INT 19
10787: PUSH
10788: LD_INT 20
10790: PUSH
10791: LD_INT 21
10793: PUSH
10794: LD_INT 22
10796: PUSH
10797: LD_INT 23
10799: PUSH
10800: LD_INT 24
10802: PUSH
10803: LD_INT 25
10805: PUSH
10806: LD_INT 26
10808: PUSH
10809: LD_INT 27
10811: PUSH
10812: LD_INT 28
10814: PUSH
10815: LD_INT 30
10817: PUSH
10818: LD_INT 31
10820: PUSH
10821: LD_INT 32
10823: PUSH
10824: LD_INT 33
10826: PUSH
10827: LD_INT 34
10829: PUSH
10830: LD_INT 36
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 101
10871: PUSH
10872: LD_INT 102
10874: PUSH
10875: LD_INT 103
10877: PUSH
10878: LD_INT 104
10880: PUSH
10881: LD_INT 105
10883: PUSH
10884: LD_INT 106
10886: PUSH
10887: LD_INT 107
10889: PUSH
10890: LD_INT 108
10892: PUSH
10893: LD_INT 109
10895: PUSH
10896: LD_INT 110
10898: PUSH
10899: LD_INT 111
10901: PUSH
10902: LD_INT 112
10904: PUSH
10905: LD_INT 113
10907: PUSH
10908: LD_INT 114
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: ST_TO_ADDR
10931: GO 12302
10933: LD_INT 13
10935: DOUBLE
10936: EQUAL
10937: IFTRUE 10941
10939: GO 11137
10941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10942: LD_ADDR_VAR 0 1
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: LD_INT 2
10952: PUSH
10953: LD_INT 3
10955: PUSH
10956: LD_INT 4
10958: PUSH
10959: LD_INT 5
10961: PUSH
10962: LD_INT 8
10964: PUSH
10965: LD_INT 9
10967: PUSH
10968: LD_INT 10
10970: PUSH
10971: LD_INT 11
10973: PUSH
10974: LD_INT 12
10976: PUSH
10977: LD_INT 14
10979: PUSH
10980: LD_INT 15
10982: PUSH
10983: LD_INT 16
10985: PUSH
10986: LD_INT 17
10988: PUSH
10989: LD_INT 18
10991: PUSH
10992: LD_INT 19
10994: PUSH
10995: LD_INT 20
10997: PUSH
10998: LD_INT 21
11000: PUSH
11001: LD_INT 22
11003: PUSH
11004: LD_INT 23
11006: PUSH
11007: LD_INT 24
11009: PUSH
11010: LD_INT 25
11012: PUSH
11013: LD_INT 26
11015: PUSH
11016: LD_INT 27
11018: PUSH
11019: LD_INT 28
11021: PUSH
11022: LD_INT 30
11024: PUSH
11025: LD_INT 31
11027: PUSH
11028: LD_INT 32
11030: PUSH
11031: LD_INT 33
11033: PUSH
11034: LD_INT 34
11036: PUSH
11037: LD_INT 36
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 101
11075: PUSH
11076: LD_INT 102
11078: PUSH
11079: LD_INT 103
11081: PUSH
11082: LD_INT 104
11084: PUSH
11085: LD_INT 105
11087: PUSH
11088: LD_INT 106
11090: PUSH
11091: LD_INT 107
11093: PUSH
11094: LD_INT 108
11096: PUSH
11097: LD_INT 109
11099: PUSH
11100: LD_INT 110
11102: PUSH
11103: LD_INT 111
11105: PUSH
11106: LD_INT 112
11108: PUSH
11109: LD_INT 113
11111: PUSH
11112: LD_INT 114
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: ST_TO_ADDR
11135: GO 12302
11137: LD_INT 14
11139: DOUBLE
11140: EQUAL
11141: IFTRUE 11145
11143: GO 11357
11145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11146: LD_ADDR_VAR 0 1
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: LD_INT 5
11165: PUSH
11166: LD_INT 6
11168: PUSH
11169: LD_INT 7
11171: PUSH
11172: LD_INT 8
11174: PUSH
11175: LD_INT 9
11177: PUSH
11178: LD_INT 10
11180: PUSH
11181: LD_INT 11
11183: PUSH
11184: LD_INT 12
11186: PUSH
11187: LD_INT 13
11189: PUSH
11190: LD_INT 14
11192: PUSH
11193: LD_INT 15
11195: PUSH
11196: LD_INT 16
11198: PUSH
11199: LD_INT 17
11201: PUSH
11202: LD_INT 18
11204: PUSH
11205: LD_INT 19
11207: PUSH
11208: LD_INT 20
11210: PUSH
11211: LD_INT 21
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_INT 23
11219: PUSH
11220: LD_INT 24
11222: PUSH
11223: LD_INT 25
11225: PUSH
11226: LD_INT 26
11228: PUSH
11229: LD_INT 27
11231: PUSH
11232: LD_INT 28
11234: PUSH
11235: LD_INT 29
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 31
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 33
11249: PUSH
11250: LD_INT 34
11252: PUSH
11253: LD_INT 36
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 101
11295: PUSH
11296: LD_INT 102
11298: PUSH
11299: LD_INT 103
11301: PUSH
11302: LD_INT 104
11304: PUSH
11305: LD_INT 105
11307: PUSH
11308: LD_INT 106
11310: PUSH
11311: LD_INT 107
11313: PUSH
11314: LD_INT 108
11316: PUSH
11317: LD_INT 109
11319: PUSH
11320: LD_INT 110
11322: PUSH
11323: LD_INT 111
11325: PUSH
11326: LD_INT 112
11328: PUSH
11329: LD_INT 113
11331: PUSH
11332: LD_INT 114
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: ST_TO_ADDR
11355: GO 12302
11357: LD_INT 15
11359: DOUBLE
11360: EQUAL
11361: IFTRUE 11365
11363: GO 11577
11365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: LD_INT 4
11382: PUSH
11383: LD_INT 5
11385: PUSH
11386: LD_INT 6
11388: PUSH
11389: LD_INT 7
11391: PUSH
11392: LD_INT 8
11394: PUSH
11395: LD_INT 9
11397: PUSH
11398: LD_INT 10
11400: PUSH
11401: LD_INT 11
11403: PUSH
11404: LD_INT 12
11406: PUSH
11407: LD_INT 13
11409: PUSH
11410: LD_INT 14
11412: PUSH
11413: LD_INT 15
11415: PUSH
11416: LD_INT 16
11418: PUSH
11419: LD_INT 17
11421: PUSH
11422: LD_INT 18
11424: PUSH
11425: LD_INT 19
11427: PUSH
11428: LD_INT 20
11430: PUSH
11431: LD_INT 21
11433: PUSH
11434: LD_INT 22
11436: PUSH
11437: LD_INT 23
11439: PUSH
11440: LD_INT 24
11442: PUSH
11443: LD_INT 25
11445: PUSH
11446: LD_INT 26
11448: PUSH
11449: LD_INT 27
11451: PUSH
11452: LD_INT 28
11454: PUSH
11455: LD_INT 29
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: LD_INT 31
11463: PUSH
11464: LD_INT 32
11466: PUSH
11467: LD_INT 33
11469: PUSH
11470: LD_INT 34
11472: PUSH
11473: LD_INT 36
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 101
11515: PUSH
11516: LD_INT 102
11518: PUSH
11519: LD_INT 103
11521: PUSH
11522: LD_INT 104
11524: PUSH
11525: LD_INT 105
11527: PUSH
11528: LD_INT 106
11530: PUSH
11531: LD_INT 107
11533: PUSH
11534: LD_INT 108
11536: PUSH
11537: LD_INT 109
11539: PUSH
11540: LD_INT 110
11542: PUSH
11543: LD_INT 111
11545: PUSH
11546: LD_INT 112
11548: PUSH
11549: LD_INT 113
11551: PUSH
11552: LD_INT 114
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: ST_TO_ADDR
11575: GO 12302
11577: LD_INT 16
11579: DOUBLE
11580: EQUAL
11581: IFTRUE 11585
11583: GO 11709
11585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: LD_INT 4
11596: PUSH
11597: LD_INT 5
11599: PUSH
11600: LD_INT 7
11602: PUSH
11603: LD_INT 11
11605: PUSH
11606: LD_INT 12
11608: PUSH
11609: LD_INT 15
11611: PUSH
11612: LD_INT 16
11614: PUSH
11615: LD_INT 20
11617: PUSH
11618: LD_INT 21
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_INT 23
11626: PUSH
11627: LD_INT 25
11629: PUSH
11630: LD_INT 26
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 31
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: LD_INT 33
11644: PUSH
11645: LD_INT 34
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 101
11671: PUSH
11672: LD_INT 102
11674: PUSH
11675: LD_INT 103
11677: PUSH
11678: LD_INT 106
11680: PUSH
11681: LD_INT 108
11683: PUSH
11684: LD_INT 112
11686: PUSH
11687: LD_INT 113
11689: PUSH
11690: LD_INT 114
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: ST_TO_ADDR
11707: GO 12302
11709: LD_INT 17
11711: DOUBLE
11712: EQUAL
11713: IFTRUE 11717
11715: GO 11929
11717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11718: LD_ADDR_VAR 0 1
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: LD_INT 2
11728: PUSH
11729: LD_INT 3
11731: PUSH
11732: LD_INT 4
11734: PUSH
11735: LD_INT 5
11737: PUSH
11738: LD_INT 6
11740: PUSH
11741: LD_INT 7
11743: PUSH
11744: LD_INT 8
11746: PUSH
11747: LD_INT 9
11749: PUSH
11750: LD_INT 10
11752: PUSH
11753: LD_INT 11
11755: PUSH
11756: LD_INT 12
11758: PUSH
11759: LD_INT 13
11761: PUSH
11762: LD_INT 14
11764: PUSH
11765: LD_INT 15
11767: PUSH
11768: LD_INT 16
11770: PUSH
11771: LD_INT 17
11773: PUSH
11774: LD_INT 18
11776: PUSH
11777: LD_INT 19
11779: PUSH
11780: LD_INT 20
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 23
11791: PUSH
11792: LD_INT 24
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 26
11800: PUSH
11801: LD_INT 27
11803: PUSH
11804: LD_INT 28
11806: PUSH
11807: LD_INT 29
11809: PUSH
11810: LD_INT 30
11812: PUSH
11813: LD_INT 31
11815: PUSH
11816: LD_INT 32
11818: PUSH
11819: LD_INT 33
11821: PUSH
11822: LD_INT 34
11824: PUSH
11825: LD_INT 36
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 101
11867: PUSH
11868: LD_INT 102
11870: PUSH
11871: LD_INT 103
11873: PUSH
11874: LD_INT 104
11876: PUSH
11877: LD_INT 105
11879: PUSH
11880: LD_INT 106
11882: PUSH
11883: LD_INT 107
11885: PUSH
11886: LD_INT 108
11888: PUSH
11889: LD_INT 109
11891: PUSH
11892: LD_INT 110
11894: PUSH
11895: LD_INT 111
11897: PUSH
11898: LD_INT 112
11900: PUSH
11901: LD_INT 113
11903: PUSH
11904: LD_INT 114
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: ST_TO_ADDR
11927: GO 12302
11929: LD_INT 18
11931: DOUBLE
11932: EQUAL
11933: IFTRUE 11937
11935: GO 12073
11937: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11938: LD_ADDR_VAR 0 1
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 4
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: LD_INT 7
11954: PUSH
11955: LD_INT 11
11957: PUSH
11958: LD_INT 12
11960: PUSH
11961: LD_INT 15
11963: PUSH
11964: LD_INT 16
11966: PUSH
11967: LD_INT 20
11969: PUSH
11970: LD_INT 21
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_INT 23
11978: PUSH
11979: LD_INT 25
11981: PUSH
11982: LD_INT 26
11984: PUSH
11985: LD_INT 30
11987: PUSH
11988: LD_INT 31
11990: PUSH
11991: LD_INT 32
11993: PUSH
11994: LD_INT 33
11996: PUSH
11997: LD_INT 34
11999: PUSH
12000: LD_INT 35
12002: PUSH
12003: LD_INT 36
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 101
12031: PUSH
12032: LD_INT 102
12034: PUSH
12035: LD_INT 103
12037: PUSH
12038: LD_INT 106
12040: PUSH
12041: LD_INT 108
12043: PUSH
12044: LD_INT 112
12046: PUSH
12047: LD_INT 113
12049: PUSH
12050: LD_INT 114
12052: PUSH
12053: LD_INT 115
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: ST_TO_ADDR
12071: GO 12302
12073: LD_INT 19
12075: DOUBLE
12076: EQUAL
12077: IFTRUE 12081
12079: GO 12301
12081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 4
12098: PUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: LD_INT 7
12107: PUSH
12108: LD_INT 8
12110: PUSH
12111: LD_INT 9
12113: PUSH
12114: LD_INT 10
12116: PUSH
12117: LD_INT 11
12119: PUSH
12120: LD_INT 12
12122: PUSH
12123: LD_INT 13
12125: PUSH
12126: LD_INT 14
12128: PUSH
12129: LD_INT 15
12131: PUSH
12132: LD_INT 16
12134: PUSH
12135: LD_INT 17
12137: PUSH
12138: LD_INT 18
12140: PUSH
12141: LD_INT 19
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 21
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 23
12155: PUSH
12156: LD_INT 24
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 26
12164: PUSH
12165: LD_INT 27
12167: PUSH
12168: LD_INT 28
12170: PUSH
12171: LD_INT 29
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: LD_INT 34
12188: PUSH
12189: LD_INT 35
12191: PUSH
12192: LD_INT 36
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 101
12235: PUSH
12236: LD_INT 102
12238: PUSH
12239: LD_INT 103
12241: PUSH
12242: LD_INT 104
12244: PUSH
12245: LD_INT 105
12247: PUSH
12248: LD_INT 106
12250: PUSH
12251: LD_INT 107
12253: PUSH
12254: LD_INT 108
12256: PUSH
12257: LD_INT 109
12259: PUSH
12260: LD_INT 110
12262: PUSH
12263: LD_INT 111
12265: PUSH
12266: LD_INT 112
12268: PUSH
12269: LD_INT 113
12271: PUSH
12272: LD_INT 114
12274: PUSH
12275: LD_INT 115
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: ST_TO_ADDR
12299: GO 12302
12301: POP
// end else
12302: GO 12521
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12304: LD_ADDR_VAR 0 1
12308: PUSH
12309: LD_INT 1
12311: PUSH
12312: LD_INT 2
12314: PUSH
12315: LD_INT 3
12317: PUSH
12318: LD_INT 4
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: LD_INT 6
12326: PUSH
12327: LD_INT 7
12329: PUSH
12330: LD_INT 8
12332: PUSH
12333: LD_INT 9
12335: PUSH
12336: LD_INT 10
12338: PUSH
12339: LD_INT 11
12341: PUSH
12342: LD_INT 12
12344: PUSH
12345: LD_INT 13
12347: PUSH
12348: LD_INT 14
12350: PUSH
12351: LD_INT 15
12353: PUSH
12354: LD_INT 16
12356: PUSH
12357: LD_INT 17
12359: PUSH
12360: LD_INT 18
12362: PUSH
12363: LD_INT 19
12365: PUSH
12366: LD_INT 20
12368: PUSH
12369: LD_INT 21
12371: PUSH
12372: LD_INT 22
12374: PUSH
12375: LD_INT 23
12377: PUSH
12378: LD_INT 24
12380: PUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 26
12386: PUSH
12387: LD_INT 27
12389: PUSH
12390: LD_INT 28
12392: PUSH
12393: LD_INT 29
12395: PUSH
12396: LD_INT 30
12398: PUSH
12399: LD_INT 31
12401: PUSH
12402: LD_INT 32
12404: PUSH
12405: LD_INT 33
12407: PUSH
12408: LD_INT 34
12410: PUSH
12411: LD_INT 35
12413: PUSH
12414: LD_INT 36
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 101
12457: PUSH
12458: LD_INT 102
12460: PUSH
12461: LD_INT 103
12463: PUSH
12464: LD_INT 104
12466: PUSH
12467: LD_INT 105
12469: PUSH
12470: LD_INT 106
12472: PUSH
12473: LD_INT 107
12475: PUSH
12476: LD_INT 108
12478: PUSH
12479: LD_INT 109
12481: PUSH
12482: LD_INT 110
12484: PUSH
12485: LD_INT 111
12487: PUSH
12488: LD_INT 112
12490: PUSH
12491: LD_INT 113
12493: PUSH
12494: LD_INT 114
12496: PUSH
12497: LD_INT 115
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: ST_TO_ADDR
// if result then
12521: LD_VAR 0 1
12525: IFFALSE 12814
// begin normal :=  ;
12527: LD_ADDR_VAR 0 3
12531: PUSH
12532: LD_STRING 
12534: ST_TO_ADDR
// hardcore :=  ;
12535: LD_ADDR_VAR 0 4
12539: PUSH
12540: LD_STRING 
12542: ST_TO_ADDR
// for i = 1 to normalCounter do
12543: LD_ADDR_VAR 0 5
12547: PUSH
12548: DOUBLE
12549: LD_INT 1
12551: DEC
12552: ST_TO_ADDR
12553: LD_EXP 20
12557: PUSH
12558: FOR_TO
12559: IFFALSE 12660
// begin tmp := 0 ;
12561: LD_ADDR_VAR 0 2
12565: PUSH
12566: LD_STRING 0
12568: ST_TO_ADDR
// if result [ 1 ] then
12569: LD_VAR 0 1
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: IFFALSE 12642
// if result [ 1 ] [ 1 ] = i then
12579: LD_VAR 0 1
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PUSH
12592: LD_VAR 0 5
12596: EQUAL
12597: IFFALSE 12642
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12599: LD_ADDR_VAR 0 1
12603: PUSH
12604: LD_VAR 0 1
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: LD_VAR 0 1
12616: PUSH
12617: LD_INT 1
12619: ARRAY
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 3
12628: PPUSH
12629: CALL_OW 1
12633: ST_TO_ADDR
// tmp := 1 ;
12634: LD_ADDR_VAR 0 2
12638: PUSH
12639: LD_STRING 1
12641: ST_TO_ADDR
// end ; normal := normal & tmp ;
12642: LD_ADDR_VAR 0 3
12646: PUSH
12647: LD_VAR 0 3
12651: PUSH
12652: LD_VAR 0 2
12656: STR
12657: ST_TO_ADDR
// end ;
12658: GO 12558
12660: POP
12661: POP
// for i = 1 to hardcoreCounter do
12662: LD_ADDR_VAR 0 5
12666: PUSH
12667: DOUBLE
12668: LD_INT 1
12670: DEC
12671: ST_TO_ADDR
12672: LD_EXP 21
12676: PUSH
12677: FOR_TO
12678: IFFALSE 12783
// begin tmp := 0 ;
12680: LD_ADDR_VAR 0 2
12684: PUSH
12685: LD_STRING 0
12687: ST_TO_ADDR
// if result [ 2 ] then
12688: LD_VAR 0 1
12692: PUSH
12693: LD_INT 2
12695: ARRAY
12696: IFFALSE 12765
// if result [ 2 ] [ 1 ] = 100 + i then
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 2
12705: ARRAY
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PUSH
12711: LD_INT 100
12713: PUSH
12714: LD_VAR 0 5
12718: PLUS
12719: EQUAL
12720: IFFALSE 12765
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12722: LD_ADDR_VAR 0 1
12726: PUSH
12727: LD_VAR 0 1
12731: PPUSH
12732: LD_INT 2
12734: PPUSH
12735: LD_VAR 0 1
12739: PUSH
12740: LD_INT 2
12742: ARRAY
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 3
12751: PPUSH
12752: CALL_OW 1
12756: ST_TO_ADDR
// tmp := 1 ;
12757: LD_ADDR_VAR 0 2
12761: PUSH
12762: LD_STRING 1
12764: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12765: LD_ADDR_VAR 0 4
12769: PUSH
12770: LD_VAR 0 4
12774: PUSH
12775: LD_VAR 0 2
12779: STR
12780: ST_TO_ADDR
// end ;
12781: GO 12677
12783: POP
12784: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12785: LD_STRING getStreamItemsFromMission("
12787: PUSH
12788: LD_VAR 0 3
12792: STR
12793: PUSH
12794: LD_STRING ","
12796: STR
12797: PUSH
12798: LD_VAR 0 4
12802: STR
12803: PUSH
12804: LD_STRING ")
12806: STR
12807: PPUSH
12808: CALL_OW 559
// end else
12812: GO 12821
// ToLua ( getStreamItemsFromMission("","") ) ;
12814: LD_STRING getStreamItemsFromMission("","")
12816: PPUSH
12817: CALL_OW 559
// end ;
12821: LD_VAR 0 1
12825: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12826: LD_EXP 19
12830: PUSH
12831: LD_EXP 24
12835: AND
12836: IFFALSE 12960
12838: GO 12840
12840: DISABLE
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
// begin enable ;
12845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_INT 22
12853: PUSH
12854: LD_OWVAR 2
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: LD_INT 34
12868: PUSH
12869: LD_INT 7
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 34
12878: PUSH
12879: LD_INT 45
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 34
12888: PUSH
12889: LD_INT 28
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 34
12898: PUSH
12899: LD_INT 47
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: ST_TO_ADDR
// if not tmp then
12922: LD_VAR 0 2
12926: NOT
12927: IFFALSE 12931
// exit ;
12929: GO 12960
// for i in tmp do
12931: LD_ADDR_VAR 0 1
12935: PUSH
12936: LD_VAR 0 2
12940: PUSH
12941: FOR_IN
12942: IFFALSE 12958
// begin SetLives ( i , 0 ) ;
12944: LD_VAR 0 1
12948: PPUSH
12949: LD_INT 0
12951: PPUSH
12952: CALL_OW 234
// end ;
12956: GO 12941
12958: POP
12959: POP
// end ;
12960: PPOPN 2
12962: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12963: LD_EXP 19
12967: PUSH
12968: LD_EXP 25
12972: AND
12973: IFFALSE 13057
12975: GO 12977
12977: DISABLE
12978: LD_INT 0
12980: PPUSH
12981: PPUSH
// begin enable ;
12982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12983: LD_ADDR_VAR 0 2
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_OWVAR 2
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 32
13002: PUSH
13003: LD_INT 3
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if not tmp then
13019: LD_VAR 0 2
13023: NOT
13024: IFFALSE 13028
// exit ;
13026: GO 13057
// for i in tmp do
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: LD_VAR 0 2
13037: PUSH
13038: FOR_IN
13039: IFFALSE 13055
// begin SetLives ( i , 0 ) ;
13041: LD_VAR 0 1
13045: PPUSH
13046: LD_INT 0
13048: PPUSH
13049: CALL_OW 234
// end ;
13053: GO 13038
13055: POP
13056: POP
// end ;
13057: PPOPN 2
13059: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13060: LD_EXP 19
13064: PUSH
13065: LD_EXP 22
13069: AND
13070: IFFALSE 13163
13072: GO 13074
13074: DISABLE
13075: LD_INT 0
13077: PPUSH
// begin enable ;
13078: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_OWVAR 2
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 5
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 25
13111: PUSH
13112: LD_INT 9
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 8
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: PUSH
13144: FOR_IN
13145: IFFALSE 13161
// begin SetClass ( i , 1 ) ;
13147: LD_VAR 0 1
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: CALL_OW 336
// end ;
13159: GO 13144
13161: POP
13162: POP
// end ;
13163: PPOPN 1
13165: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13166: LD_EXP 19
13170: PUSH
13171: LD_EXP 23
13175: AND
13176: PUSH
13177: LD_OWVAR 65
13181: PUSH
13182: LD_INT 7
13184: LESS
13185: AND
13186: IFFALSE 13200
13188: GO 13190
13190: DISABLE
// begin enable ;
13191: ENABLE
// game_speed := 7 ;
13192: LD_ADDR_OWVAR 65
13196: PUSH
13197: LD_INT 7
13199: ST_TO_ADDR
// end ;
13200: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13201: LD_EXP 19
13205: PUSH
13206: LD_EXP 26
13210: AND
13211: IFFALSE 13413
13213: GO 13215
13215: DISABLE
13216: LD_INT 0
13218: PPUSH
13219: PPUSH
13220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13221: LD_ADDR_VAR 0 3
13225: PUSH
13226: LD_INT 81
13228: PUSH
13229: LD_OWVAR 2
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 21
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PPUSH
13252: CALL_OW 69
13256: ST_TO_ADDR
// if not tmp then
13257: LD_VAR 0 3
13261: NOT
13262: IFFALSE 13266
// exit ;
13264: GO 13413
// if tmp > 5 then
13266: LD_VAR 0 3
13270: PUSH
13271: LD_INT 5
13273: GREATER
13274: IFFALSE 13286
// k := 5 else
13276: LD_ADDR_VAR 0 2
13280: PUSH
13281: LD_INT 5
13283: ST_TO_ADDR
13284: GO 13296
// k := tmp ;
13286: LD_ADDR_VAR 0 2
13290: PUSH
13291: LD_VAR 0 3
13295: ST_TO_ADDR
// for i := 1 to k do
13296: LD_ADDR_VAR 0 1
13300: PUSH
13301: DOUBLE
13302: LD_INT 1
13304: DEC
13305: ST_TO_ADDR
13306: LD_VAR 0 2
13310: PUSH
13311: FOR_TO
13312: IFFALSE 13411
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13314: LD_VAR 0 3
13318: PUSH
13319: LD_VAR 0 1
13323: ARRAY
13324: PPUSH
13325: LD_VAR 0 1
13329: PUSH
13330: LD_INT 4
13332: MOD
13333: PUSH
13334: LD_INT 1
13336: PLUS
13337: PPUSH
13338: CALL_OW 259
13342: PUSH
13343: LD_INT 10
13345: LESS
13346: IFFALSE 13409
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13348: LD_VAR 0 3
13352: PUSH
13353: LD_VAR 0 1
13357: ARRAY
13358: PPUSH
13359: LD_VAR 0 1
13363: PUSH
13364: LD_INT 4
13366: MOD
13367: PUSH
13368: LD_INT 1
13370: PLUS
13371: PPUSH
13372: LD_VAR 0 3
13376: PUSH
13377: LD_VAR 0 1
13381: ARRAY
13382: PPUSH
13383: LD_VAR 0 1
13387: PUSH
13388: LD_INT 4
13390: MOD
13391: PUSH
13392: LD_INT 1
13394: PLUS
13395: PPUSH
13396: CALL_OW 259
13400: PUSH
13401: LD_INT 1
13403: PLUS
13404: PPUSH
13405: CALL_OW 237
13409: GO 13311
13411: POP
13412: POP
// end ;
13413: PPOPN 3
13415: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13416: LD_EXP 19
13420: PUSH
13421: LD_EXP 27
13425: AND
13426: IFFALSE 13446
13428: GO 13430
13430: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13431: LD_INT 4
13433: PPUSH
13434: LD_OWVAR 2
13438: PPUSH
13439: LD_INT 0
13441: PPUSH
13442: CALL_OW 324
13446: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13447: LD_EXP 19
13451: PUSH
13452: LD_EXP 56
13456: AND
13457: IFFALSE 13477
13459: GO 13461
13461: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13462: LD_INT 19
13464: PPUSH
13465: LD_OWVAR 2
13469: PPUSH
13470: LD_INT 0
13472: PPUSH
13473: CALL_OW 324
13477: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13478: LD_EXP 19
13482: PUSH
13483: LD_EXP 28
13487: AND
13488: IFFALSE 13590
13490: GO 13492
13492: DISABLE
13493: LD_INT 0
13495: PPUSH
13496: PPUSH
// begin enable ;
13497: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 22
13505: PUSH
13506: LD_OWVAR 2
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 2
13517: PUSH
13518: LD_INT 34
13520: PUSH
13521: LD_INT 11
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 34
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 69
13551: ST_TO_ADDR
// if not tmp then
13552: LD_VAR 0 2
13556: NOT
13557: IFFALSE 13561
// exit ;
13559: GO 13590
// for i in tmp do
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_VAR 0 2
13570: PUSH
13571: FOR_IN
13572: IFFALSE 13588
// begin SetLives ( i , 0 ) ;
13574: LD_VAR 0 1
13578: PPUSH
13579: LD_INT 0
13581: PPUSH
13582: CALL_OW 234
// end ;
13586: GO 13571
13588: POP
13589: POP
// end ;
13590: PPOPN 2
13592: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13593: LD_EXP 19
13597: PUSH
13598: LD_EXP 29
13602: AND
13603: IFFALSE 13623
13605: GO 13607
13607: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13608: LD_INT 32
13610: PPUSH
13611: LD_OWVAR 2
13615: PPUSH
13616: LD_INT 0
13618: PPUSH
13619: CALL_OW 324
13623: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13624: LD_EXP 19
13628: PUSH
13629: LD_EXP 30
13633: AND
13634: IFFALSE 13815
13636: GO 13638
13638: DISABLE
13639: LD_INT 0
13641: PPUSH
13642: PPUSH
13643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_OWVAR 2
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 33
13663: PUSH
13664: LD_INT 3
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 69
13679: ST_TO_ADDR
// if not tmp then
13680: LD_VAR 0 2
13684: NOT
13685: IFFALSE 13689
// exit ;
13687: GO 13815
// side := 0 ;
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// for i := 1 to 8 do
13697: LD_ADDR_VAR 0 1
13701: PUSH
13702: DOUBLE
13703: LD_INT 1
13705: DEC
13706: ST_TO_ADDR
13707: LD_INT 8
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13759
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13713: LD_OWVAR 2
13717: PUSH
13718: LD_VAR 0 1
13722: NONEQUAL
13723: PUSH
13724: LD_OWVAR 2
13728: PPUSH
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 81
13738: PUSH
13739: LD_INT 2
13741: EQUAL
13742: AND
13743: IFFALSE 13757
// begin side := i ;
13745: LD_ADDR_VAR 0 3
13749: PUSH
13750: LD_VAR 0 1
13754: ST_TO_ADDR
// break ;
13755: GO 13759
// end ;
13757: GO 13710
13759: POP
13760: POP
// if not side then
13761: LD_VAR 0 3
13765: NOT
13766: IFFALSE 13770
// exit ;
13768: GO 13815
// for i := 1 to tmp do
13770: LD_ADDR_VAR 0 1
13774: PUSH
13775: DOUBLE
13776: LD_INT 1
13778: DEC
13779: ST_TO_ADDR
13780: LD_VAR 0 2
13784: PUSH
13785: FOR_TO
13786: IFFALSE 13813
// if Prob ( 60 ) then
13788: LD_INT 60
13790: PPUSH
13791: CALL_OW 13
13795: IFFALSE 13811
// SetSide ( i , side ) ;
13797: LD_VAR 0 1
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: CALL_OW 235
13811: GO 13785
13813: POP
13814: POP
// end ;
13815: PPOPN 3
13817: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13818: LD_EXP 19
13822: PUSH
13823: LD_EXP 32
13827: AND
13828: IFFALSE 13947
13830: GO 13832
13832: DISABLE
13833: LD_INT 0
13835: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_OWVAR 2
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 1
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 3
13865: PUSH
13866: LD_INT 23
13868: PUSH
13869: LD_INT 0
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: PUSH
13890: FOR_IN
13891: IFFALSE 13945
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13893: LD_VAR 0 1
13897: PPUSH
13898: CALL_OW 257
13902: PUSH
13903: LD_INT 1
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: LD_INT 4
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: IN
13921: IFFALSE 13943
// SetClass ( un , rand ( 1 , 4 ) ) ;
13923: LD_VAR 0 1
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_INT 4
13933: PPUSH
13934: CALL_OW 12
13938: PPUSH
13939: CALL_OW 336
13943: GO 13890
13945: POP
13946: POP
// end ;
13947: PPOPN 1
13949: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13950: LD_EXP 19
13954: PUSH
13955: LD_EXP 31
13959: AND
13960: IFFALSE 14039
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13968: LD_ADDR_VAR 0 1
13972: PUSH
13973: LD_INT 22
13975: PUSH
13976: LD_OWVAR 2
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 21
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PPUSH
13999: CALL_OW 69
14003: ST_TO_ADDR
// if not tmp then
14004: LD_VAR 0 1
14008: NOT
14009: IFFALSE 14013
// exit ;
14011: GO 14039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 1
14020: PPUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 12
14030: ARRAY
14031: PPUSH
14032: LD_INT 100
14034: PPUSH
14035: CALL_OW 234
// end ;
14039: PPOPN 1
14041: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14042: LD_EXP 19
14046: PUSH
14047: LD_EXP 33
14051: AND
14052: IFFALSE 14150
14054: GO 14056
14056: DISABLE
14057: LD_INT 0
14059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14060: LD_ADDR_VAR 0 1
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_OWVAR 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 21
14079: PUSH
14080: LD_INT 1
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: ST_TO_ADDR
// if not tmp then
14096: LD_VAR 0 1
14100: NOT
14101: IFFALSE 14105
// exit ;
14103: GO 14150
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14105: LD_VAR 0 1
14109: PUSH
14110: LD_INT 1
14112: PPUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 12
14122: ARRAY
14123: PPUSH
14124: LD_INT 1
14126: PPUSH
14127: LD_INT 4
14129: PPUSH
14130: CALL_OW 12
14134: PPUSH
14135: LD_INT 3000
14137: PPUSH
14138: LD_INT 9000
14140: PPUSH
14141: CALL_OW 12
14145: PPUSH
14146: CALL_OW 492
// end ;
14150: PPOPN 1
14152: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14153: LD_EXP 19
14157: PUSH
14158: LD_EXP 34
14162: AND
14163: IFFALSE 14183
14165: GO 14167
14167: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14168: LD_INT 1
14170: PPUSH
14171: LD_OWVAR 2
14175: PPUSH
14176: LD_INT 0
14178: PPUSH
14179: CALL_OW 324
14183: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14184: LD_EXP 19
14188: PUSH
14189: LD_EXP 35
14193: AND
14194: IFFALSE 14277
14196: GO 14198
14198: DISABLE
14199: LD_INT 0
14201: PPUSH
14202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_INT 22
14210: PUSH
14211: LD_OWVAR 2
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 3
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 69
14238: ST_TO_ADDR
// if not tmp then
14239: LD_VAR 0 2
14243: NOT
14244: IFFALSE 14248
// exit ;
14246: GO 14277
// for i in tmp do
14248: LD_ADDR_VAR 0 1
14252: PUSH
14253: LD_VAR 0 2
14257: PUSH
14258: FOR_IN
14259: IFFALSE 14275
// SetBLevel ( i , 10 ) ;
14261: LD_VAR 0 1
14265: PPUSH
14266: LD_INT 10
14268: PPUSH
14269: CALL_OW 241
14273: GO 14258
14275: POP
14276: POP
// end ;
14277: PPOPN 2
14279: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14280: LD_EXP 19
14284: PUSH
14285: LD_EXP 36
14289: AND
14290: IFFALSE 14401
14292: GO 14294
14294: DISABLE
14295: LD_INT 0
14297: PPUSH
14298: PPUSH
14299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14300: LD_ADDR_VAR 0 3
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_OWVAR 2
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 1
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: ST_TO_ADDR
// if not tmp then
14336: LD_VAR 0 3
14340: NOT
14341: IFFALSE 14345
// exit ;
14343: GO 14401
// un := tmp [ rand ( 1 , tmp ) ] ;
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_VAR 0 3
14354: PUSH
14355: LD_INT 1
14357: PPUSH
14358: LD_VAR 0 3
14362: PPUSH
14363: CALL_OW 12
14367: ARRAY
14368: ST_TO_ADDR
// if Crawls ( un ) then
14369: LD_VAR 0 2
14373: PPUSH
14374: CALL_OW 318
14378: IFFALSE 14389
// ComWalk ( un ) ;
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14389: LD_VAR 0 2
14393: PPUSH
14394: LD_INT 5
14396: PPUSH
14397: CALL_OW 336
// end ;
14401: PPOPN 3
14403: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14404: LD_EXP 19
14408: PUSH
14409: LD_EXP 37
14413: AND
14414: PUSH
14415: LD_OWVAR 67
14419: PUSH
14420: LD_INT 3
14422: LESS
14423: AND
14424: IFFALSE 14443
14426: GO 14428
14428: DISABLE
// Difficulty := Difficulty + 1 ;
14429: LD_ADDR_OWVAR 67
14433: PUSH
14434: LD_OWVAR 67
14438: PUSH
14439: LD_INT 1
14441: PLUS
14442: ST_TO_ADDR
14443: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14444: LD_EXP 19
14448: PUSH
14449: LD_EXP 38
14453: AND
14454: IFFALSE 14557
14456: GO 14458
14458: DISABLE
14459: LD_INT 0
14461: PPUSH
// begin for i := 1 to 5 do
14462: LD_ADDR_VAR 0 1
14466: PUSH
14467: DOUBLE
14468: LD_INT 1
14470: DEC
14471: ST_TO_ADDR
14472: LD_INT 5
14474: PUSH
14475: FOR_TO
14476: IFFALSE 14555
// begin uc_nation := nation_nature ;
14478: LD_ADDR_OWVAR 21
14482: PUSH
14483: LD_INT 0
14485: ST_TO_ADDR
// uc_side := 0 ;
14486: LD_ADDR_OWVAR 20
14490: PUSH
14491: LD_INT 0
14493: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14494: LD_ADDR_OWVAR 29
14498: PUSH
14499: LD_INT 12
14501: PUSH
14502: LD_INT 12
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: ST_TO_ADDR
// hc_agressivity := 20 ;
14509: LD_ADDR_OWVAR 35
14513: PUSH
14514: LD_INT 20
14516: ST_TO_ADDR
// hc_class := class_tiger ;
14517: LD_ADDR_OWVAR 28
14521: PUSH
14522: LD_INT 14
14524: ST_TO_ADDR
// hc_gallery :=  ;
14525: LD_ADDR_OWVAR 33
14529: PUSH
14530: LD_STRING 
14532: ST_TO_ADDR
// hc_name :=  ;
14533: LD_ADDR_OWVAR 26
14537: PUSH
14538: LD_STRING 
14540: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14541: CALL_OW 44
14545: PPUSH
14546: LD_INT 0
14548: PPUSH
14549: CALL_OW 51
// end ;
14553: GO 14475
14555: POP
14556: POP
// end ;
14557: PPOPN 1
14559: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14560: LD_EXP 19
14564: PUSH
14565: LD_EXP 39
14569: AND
14570: IFFALSE 14579
14572: GO 14574
14574: DISABLE
// StreamSibBomb ;
14575: CALL 14580 0 0
14579: END
// export function StreamSibBomb ; var i , x , y ; begin
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
// result := false ;
14586: LD_ADDR_VAR 0 1
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// for i := 1 to 16 do
14594: LD_ADDR_VAR 0 2
14598: PUSH
14599: DOUBLE
14600: LD_INT 1
14602: DEC
14603: ST_TO_ADDR
14604: LD_INT 16
14606: PUSH
14607: FOR_TO
14608: IFFALSE 14807
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_INT 10
14617: PUSH
14618: LD_INT 20
14620: PUSH
14621: LD_INT 30
14623: PUSH
14624: LD_INT 40
14626: PUSH
14627: LD_INT 50
14629: PUSH
14630: LD_INT 60
14632: PUSH
14633: LD_INT 70
14635: PUSH
14636: LD_INT 80
14638: PUSH
14639: LD_INT 90
14641: PUSH
14642: LD_INT 100
14644: PUSH
14645: LD_INT 110
14647: PUSH
14648: LD_INT 120
14650: PUSH
14651: LD_INT 130
14653: PUSH
14654: LD_INT 140
14656: PUSH
14657: LD_INT 150
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 1
14679: PPUSH
14680: LD_INT 15
14682: PPUSH
14683: CALL_OW 12
14687: ARRAY
14688: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14689: LD_ADDR_VAR 0 4
14693: PUSH
14694: LD_INT 10
14696: PUSH
14697: LD_INT 20
14699: PUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 40
14705: PUSH
14706: LD_INT 50
14708: PUSH
14709: LD_INT 60
14711: PUSH
14712: LD_INT 70
14714: PUSH
14715: LD_INT 80
14717: PUSH
14718: LD_INT 90
14720: PUSH
14721: LD_INT 100
14723: PUSH
14724: LD_INT 110
14726: PUSH
14727: LD_INT 120
14729: PUSH
14730: LD_INT 130
14732: PUSH
14733: LD_INT 140
14735: PUSH
14736: LD_INT 150
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 1
14758: PPUSH
14759: LD_INT 15
14761: PPUSH
14762: CALL_OW 12
14766: ARRAY
14767: ST_TO_ADDR
// if ValidHex ( x , y ) then
14768: LD_VAR 0 3
14772: PPUSH
14773: LD_VAR 0 4
14777: PPUSH
14778: CALL_OW 488
14782: IFFALSE 14805
// begin result := [ x , y ] ;
14784: LD_ADDR_VAR 0 1
14788: PUSH
14789: LD_VAR 0 3
14793: PUSH
14794: LD_VAR 0 4
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: ST_TO_ADDR
// break ;
14803: GO 14807
// end ; end ;
14805: GO 14607
14807: POP
14808: POP
// if result then
14809: LD_VAR 0 1
14813: IFFALSE 14873
// begin ToLua ( playSibBomb() ) ;
14815: LD_STRING playSibBomb()
14817: PPUSH
14818: CALL_OW 559
// wait ( 0 0$14 ) ;
14822: LD_INT 490
14824: PPUSH
14825: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14829: LD_VAR 0 1
14833: PUSH
14834: LD_INT 1
14836: ARRAY
14837: PPUSH
14838: LD_VAR 0 1
14842: PUSH
14843: LD_INT 2
14845: ARRAY
14846: PPUSH
14847: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14851: LD_VAR 0 1
14855: PUSH
14856: LD_INT 1
14858: ARRAY
14859: PPUSH
14860: LD_VAR 0 1
14864: PUSH
14865: LD_INT 2
14867: ARRAY
14868: PPUSH
14869: CALL_OW 429
// end ; end ;
14873: LD_VAR 0 1
14877: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14878: LD_EXP 19
14882: PUSH
14883: LD_EXP 41
14887: AND
14888: IFFALSE 14900
14890: GO 14892
14892: DISABLE
// YouLost (  ) ;
14893: LD_STRING 
14895: PPUSH
14896: CALL_OW 104
14900: END
// every 0 0$1 trigger StreamModeActive and sFog do
14901: LD_EXP 19
14905: PUSH
14906: LD_EXP 40
14910: AND
14911: IFFALSE 14925
14913: GO 14915
14915: DISABLE
// FogOff ( your_side ) ;
14916: LD_OWVAR 2
14920: PPUSH
14921: CALL_OW 344
14925: END
// every 0 0$1 trigger StreamModeActive and sSun do
14926: LD_EXP 19
14930: PUSH
14931: LD_EXP 42
14935: AND
14936: IFFALSE 14964
14938: GO 14940
14940: DISABLE
// begin solar_recharge_percent := 0 ;
14941: LD_ADDR_OWVAR 79
14945: PUSH
14946: LD_INT 0
14948: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14949: LD_INT 10500
14951: PPUSH
14952: CALL_OW 67
// solar_recharge_percent := 100 ;
14956: LD_ADDR_OWVAR 79
14960: PUSH
14961: LD_INT 100
14963: ST_TO_ADDR
// end ;
14964: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14965: LD_EXP 19
14969: PUSH
14970: LD_EXP 43
14974: AND
14975: IFFALSE 15214
14977: GO 14979
14979: DISABLE
14980: LD_INT 0
14982: PPUSH
14983: PPUSH
14984: PPUSH
// begin tmp := [ ] ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: EMPTY
14991: ST_TO_ADDR
// for i := 1 to 6 do
14992: LD_ADDR_VAR 0 1
14996: PUSH
14997: DOUBLE
14998: LD_INT 1
15000: DEC
15001: ST_TO_ADDR
15002: LD_INT 6
15004: PUSH
15005: FOR_TO
15006: IFFALSE 15111
// begin uc_nation := nation_nature ;
15008: LD_ADDR_OWVAR 21
15012: PUSH
15013: LD_INT 0
15015: ST_TO_ADDR
// uc_side := 0 ;
15016: LD_ADDR_OWVAR 20
15020: PUSH
15021: LD_INT 0
15023: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15024: LD_ADDR_OWVAR 29
15028: PUSH
15029: LD_INT 12
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: ST_TO_ADDR
// hc_agressivity := 20 ;
15039: LD_ADDR_OWVAR 35
15043: PUSH
15044: LD_INT 20
15046: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15047: LD_ADDR_OWVAR 28
15051: PUSH
15052: LD_INT 17
15054: ST_TO_ADDR
// hc_gallery :=  ;
15055: LD_ADDR_OWVAR 33
15059: PUSH
15060: LD_STRING 
15062: ST_TO_ADDR
// hc_name :=  ;
15063: LD_ADDR_OWVAR 26
15067: PUSH
15068: LD_STRING 
15070: ST_TO_ADDR
// un := CreateHuman ;
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: CALL_OW 44
15080: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15081: LD_VAR 0 2
15085: PPUSH
15086: LD_INT 1
15088: PPUSH
15089: CALL_OW 51
// tmp := tmp ^ un ;
15093: LD_ADDR_VAR 0 3
15097: PUSH
15098: LD_VAR 0 3
15102: PUSH
15103: LD_VAR 0 2
15107: ADD
15108: ST_TO_ADDR
// end ;
15109: GO 15005
15111: POP
15112: POP
// repeat wait ( 0 0$1 ) ;
15113: LD_INT 35
15115: PPUSH
15116: CALL_OW 67
// for un in tmp do
15120: LD_ADDR_VAR 0 2
15124: PUSH
15125: LD_VAR 0 3
15129: PUSH
15130: FOR_IN
15131: IFFALSE 15205
// begin if IsDead ( un ) then
15133: LD_VAR 0 2
15137: PPUSH
15138: CALL_OW 301
15142: IFFALSE 15162
// begin tmp := tmp diff un ;
15144: LD_ADDR_VAR 0 3
15148: PUSH
15149: LD_VAR 0 3
15153: PUSH
15154: LD_VAR 0 2
15158: DIFF
15159: ST_TO_ADDR
// continue ;
15160: GO 15130
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15162: LD_VAR 0 2
15166: PPUSH
15167: LD_INT 3
15169: PUSH
15170: LD_INT 22
15172: PUSH
15173: LD_INT 0
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: PPUSH
15189: LD_VAR 0 2
15193: PPUSH
15194: CALL_OW 74
15198: PPUSH
15199: CALL_OW 115
// end ;
15203: GO 15130
15205: POP
15206: POP
// until not tmp ;
15207: LD_VAR 0 3
15211: NOT
15212: IFFALSE 15113
// end ;
15214: PPOPN 3
15216: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15217: LD_EXP 19
15221: PUSH
15222: LD_EXP 44
15226: AND
15227: IFFALSE 15281
15229: GO 15231
15231: DISABLE
// begin ToLua ( displayTroll(); ) ;
15232: LD_STRING displayTroll();
15234: PPUSH
15235: CALL_OW 559
// wait ( 3 3$00 ) ;
15239: LD_INT 6300
15241: PPUSH
15242: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15246: LD_STRING hideTroll();
15248: PPUSH
15249: CALL_OW 559
// wait ( 1 1$00 ) ;
15253: LD_INT 2100
15255: PPUSH
15256: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15260: LD_STRING displayTroll();
15262: PPUSH
15263: CALL_OW 559
// wait ( 1 1$00 ) ;
15267: LD_INT 2100
15269: PPUSH
15270: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15274: LD_STRING hideTroll();
15276: PPUSH
15277: CALL_OW 559
// end ;
15281: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15282: LD_EXP 19
15286: PUSH
15287: LD_EXP 45
15291: AND
15292: IFFALSE 15355
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
// begin p := 0 ;
15300: LD_ADDR_VAR 0 1
15304: PUSH
15305: LD_INT 0
15307: ST_TO_ADDR
// repeat game_speed := 1 ;
15308: LD_ADDR_OWVAR 65
15312: PUSH
15313: LD_INT 1
15315: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15316: LD_INT 35
15318: PPUSH
15319: CALL_OW 67
// p := p + 1 ;
15323: LD_ADDR_VAR 0 1
15327: PUSH
15328: LD_VAR 0 1
15332: PUSH
15333: LD_INT 1
15335: PLUS
15336: ST_TO_ADDR
// until p >= 60 ;
15337: LD_VAR 0 1
15341: PUSH
15342: LD_INT 60
15344: GREATEREQUAL
15345: IFFALSE 15308
// game_speed := 4 ;
15347: LD_ADDR_OWVAR 65
15351: PUSH
15352: LD_INT 4
15354: ST_TO_ADDR
// end ;
15355: PPOPN 1
15357: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15358: LD_EXP 19
15362: PUSH
15363: LD_EXP 46
15367: AND
15368: IFFALSE 15514
15370: GO 15372
15372: DISABLE
15373: LD_INT 0
15375: PPUSH
15376: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15377: LD_ADDR_VAR 0 1
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_OWVAR 2
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 2
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 30
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: ST_TO_ADDR
// if not depot then
15431: LD_VAR 0 1
15435: NOT
15436: IFFALSE 15440
// exit ;
15438: GO 15514
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15440: LD_ADDR_VAR 0 2
15444: PUSH
15445: LD_VAR 0 1
15449: PUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_VAR 0 1
15457: PPUSH
15458: CALL_OW 12
15462: ARRAY
15463: PPUSH
15464: CALL_OW 274
15468: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15469: LD_VAR 0 2
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: LD_INT 0
15479: PPUSH
15480: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15484: LD_VAR 0 2
15488: PPUSH
15489: LD_INT 2
15491: PPUSH
15492: LD_INT 0
15494: PPUSH
15495: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15499: LD_VAR 0 2
15503: PPUSH
15504: LD_INT 3
15506: PPUSH
15507: LD_INT 0
15509: PPUSH
15510: CALL_OW 277
// end ;
15514: PPOPN 2
15516: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15517: LD_EXP 19
15521: PUSH
15522: LD_EXP 47
15526: AND
15527: IFFALSE 15624
15529: GO 15531
15531: DISABLE
15532: LD_INT 0
15534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15535: LD_ADDR_VAR 0 1
15539: PUSH
15540: LD_INT 22
15542: PUSH
15543: LD_OWVAR 2
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 3
15564: PUSH
15565: LD_INT 23
15567: PUSH
15568: LD_INT 0
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: ST_TO_ADDR
// if not tmp then
15589: LD_VAR 0 1
15593: NOT
15594: IFFALSE 15598
// exit ;
15596: GO 15624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15598: LD_VAR 0 1
15602: PUSH
15603: LD_INT 1
15605: PPUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 12
15615: ARRAY
15616: PPUSH
15617: LD_INT 200
15619: PPUSH
15620: CALL_OW 234
// end ;
15624: PPOPN 1
15626: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15627: LD_EXP 19
15631: PUSH
15632: LD_EXP 48
15636: AND
15637: IFFALSE 15716
15639: GO 15641
15641: DISABLE
15642: LD_INT 0
15644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15645: LD_ADDR_VAR 0 1
15649: PUSH
15650: LD_INT 22
15652: PUSH
15653: LD_OWVAR 2
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PPUSH
15676: CALL_OW 69
15680: ST_TO_ADDR
// if not tmp then
15681: LD_VAR 0 1
15685: NOT
15686: IFFALSE 15690
// exit ;
15688: GO 15716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15690: LD_VAR 0 1
15694: PUSH
15695: LD_INT 1
15697: PPUSH
15698: LD_VAR 0 1
15702: PPUSH
15703: CALL_OW 12
15707: ARRAY
15708: PPUSH
15709: LD_INT 60
15711: PPUSH
15712: CALL_OW 234
// end ;
15716: PPOPN 1
15718: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15719: LD_EXP 19
15723: PUSH
15724: LD_EXP 49
15728: AND
15729: IFFALSE 15828
15731: GO 15733
15733: DISABLE
15734: LD_INT 0
15736: PPUSH
15737: PPUSH
// begin enable ;
15738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_INT 22
15746: PUSH
15747: LD_OWVAR 2
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 61
15758: PUSH
15759: EMPTY
15760: LIST
15761: PUSH
15762: LD_INT 33
15764: PUSH
15765: LD_INT 2
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: PPUSH
15777: CALL_OW 69
15781: ST_TO_ADDR
// if not tmp then
15782: LD_VAR 0 1
15786: NOT
15787: IFFALSE 15791
// exit ;
15789: GO 15828
// for i in tmp do
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_VAR 0 1
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15826
// if IsControledBy ( i ) then
15804: LD_VAR 0 2
15808: PPUSH
15809: CALL_OW 312
15813: IFFALSE 15824
// ComUnlink ( i ) ;
15815: LD_VAR 0 2
15819: PPUSH
15820: CALL_OW 136
15824: GO 15801
15826: POP
15827: POP
// end ;
15828: PPOPN 2
15830: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15831: LD_EXP 19
15835: PUSH
15836: LD_EXP 50
15840: AND
15841: IFFALSE 15981
15843: GO 15845
15845: DISABLE
15846: LD_INT 0
15848: PPUSH
15849: PPUSH
// begin ToLua ( displayPowell(); ) ;
15850: LD_STRING displayPowell();
15852: PPUSH
15853: CALL_OW 559
// uc_side := 0 ;
15857: LD_ADDR_OWVAR 20
15861: PUSH
15862: LD_INT 0
15864: ST_TO_ADDR
// uc_nation := 2 ;
15865: LD_ADDR_OWVAR 21
15869: PUSH
15870: LD_INT 2
15872: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15873: LD_ADDR_OWVAR 37
15877: PUSH
15878: LD_INT 14
15880: ST_TO_ADDR
// vc_engine := engine_siberite ;
15881: LD_ADDR_OWVAR 39
15885: PUSH
15886: LD_INT 3
15888: ST_TO_ADDR
// vc_control := control_apeman ;
15889: LD_ADDR_OWVAR 38
15893: PUSH
15894: LD_INT 5
15896: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15897: LD_ADDR_OWVAR 40
15901: PUSH
15902: LD_INT 29
15904: ST_TO_ADDR
// un := CreateVehicle ;
15905: LD_ADDR_VAR 0 2
15909: PUSH
15910: CALL_OW 45
15914: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15915: LD_VAR 0 2
15919: PPUSH
15920: LD_INT 1
15922: PPUSH
15923: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15927: LD_INT 35
15929: PPUSH
15930: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 22
15941: PUSH
15942: LD_OWVAR 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: PPUSH
15956: LD_VAR 0 2
15960: PPUSH
15961: CALL_OW 74
15965: PPUSH
15966: CALL_OW 115
// until IsDead ( un ) ;
15970: LD_VAR 0 2
15974: PPUSH
15975: CALL_OW 301
15979: IFFALSE 15927
// end ;
15981: PPOPN 2
15983: END
// every 0 0$1 trigger StreamModeActive and sStu do
15984: LD_EXP 19
15988: PUSH
15989: LD_EXP 58
15993: AND
15994: IFFALSE 16010
15996: GO 15998
15998: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15999: LD_STRING displayStucuk();
16001: PPUSH
16002: CALL_OW 559
// ResetFog ;
16006: CALL_OW 335
// end ;
16010: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16011: LD_EXP 19
16015: PUSH
16016: LD_EXP 51
16020: AND
16021: IFFALSE 16162
16023: GO 16025
16025: DISABLE
16026: LD_INT 0
16028: PPUSH
16029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16030: LD_ADDR_VAR 0 2
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_OWVAR 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 21
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: ST_TO_ADDR
// if not tmp then
16066: LD_VAR 0 2
16070: NOT
16071: IFFALSE 16075
// exit ;
16073: GO 16162
// un := tmp [ rand ( 1 , tmp ) ] ;
16075: LD_ADDR_VAR 0 1
16079: PUSH
16080: LD_VAR 0 2
16084: PUSH
16085: LD_INT 1
16087: PPUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 12
16097: ARRAY
16098: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16099: LD_VAR 0 1
16103: PPUSH
16104: LD_INT 0
16106: PPUSH
16107: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16111: LD_VAR 0 1
16115: PPUSH
16116: LD_OWVAR 3
16120: PUSH
16121: LD_VAR 0 1
16125: DIFF
16126: PPUSH
16127: LD_VAR 0 1
16131: PPUSH
16132: CALL_OW 74
16136: PPUSH
16137: CALL_OW 115
// wait ( 0 0$20 ) ;
16141: LD_INT 700
16143: PPUSH
16144: CALL_OW 67
// SetSide ( un , your_side ) ;
16148: LD_VAR 0 1
16152: PPUSH
16153: LD_OWVAR 2
16157: PPUSH
16158: CALL_OW 235
// end ;
16162: PPOPN 2
16164: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16165: LD_EXP 19
16169: PUSH
16170: LD_EXP 52
16174: AND
16175: IFFALSE 16281
16177: GO 16179
16179: DISABLE
16180: LD_INT 0
16182: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16183: LD_ADDR_VAR 0 1
16187: PUSH
16188: LD_INT 22
16190: PUSH
16191: LD_OWVAR 2
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 2
16202: PUSH
16203: LD_INT 30
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 30
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PPUSH
16232: CALL_OW 69
16236: ST_TO_ADDR
// if not depot then
16237: LD_VAR 0 1
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16281
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16246: LD_VAR 0 1
16250: PUSH
16251: LD_INT 1
16253: ARRAY
16254: PPUSH
16255: CALL_OW 250
16259: PPUSH
16260: LD_VAR 0 1
16264: PUSH
16265: LD_INT 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 251
16273: PPUSH
16274: LD_INT 70
16276: PPUSH
16277: CALL_OW 495
// end ;
16281: PPOPN 1
16283: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16284: LD_EXP 19
16288: PUSH
16289: LD_EXP 53
16293: AND
16294: IFFALSE 16505
16296: GO 16298
16298: DISABLE
16299: LD_INT 0
16301: PPUSH
16302: PPUSH
16303: PPUSH
16304: PPUSH
16305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16306: LD_ADDR_VAR 0 5
16310: PUSH
16311: LD_INT 22
16313: PUSH
16314: LD_OWVAR 2
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 21
16325: PUSH
16326: LD_INT 1
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 69
16341: ST_TO_ADDR
// if not tmp then
16342: LD_VAR 0 5
16346: NOT
16347: IFFALSE 16351
// exit ;
16349: GO 16505
// for i in tmp do
16351: LD_ADDR_VAR 0 1
16355: PUSH
16356: LD_VAR 0 5
16360: PUSH
16361: FOR_IN
16362: IFFALSE 16503
// begin d := rand ( 0 , 5 ) ;
16364: LD_ADDR_VAR 0 4
16368: PUSH
16369: LD_INT 0
16371: PPUSH
16372: LD_INT 5
16374: PPUSH
16375: CALL_OW 12
16379: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: LD_VAR 0 1
16389: PPUSH
16390: CALL_OW 250
16394: PPUSH
16395: LD_VAR 0 4
16399: PPUSH
16400: LD_INT 3
16402: PPUSH
16403: LD_INT 12
16405: PPUSH
16406: CALL_OW 12
16410: PPUSH
16411: CALL_OW 272
16415: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_VAR 0 1
16425: PPUSH
16426: CALL_OW 251
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: LD_INT 3
16438: PPUSH
16439: LD_INT 12
16441: PPUSH
16442: CALL_OW 12
16446: PPUSH
16447: CALL_OW 273
16451: ST_TO_ADDR
// if ValidHex ( x , y ) then
16452: LD_VAR 0 2
16456: PPUSH
16457: LD_VAR 0 3
16461: PPUSH
16462: CALL_OW 488
16466: IFFALSE 16501
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_VAR 0 2
16477: PPUSH
16478: LD_VAR 0 3
16482: PPUSH
16483: LD_INT 3
16485: PPUSH
16486: LD_INT 6
16488: PPUSH
16489: CALL_OW 12
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 483
// end ;
16501: GO 16361
16503: POP
16504: POP
// end ;
16505: PPOPN 5
16507: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16508: LD_EXP 19
16512: PUSH
16513: LD_EXP 54
16517: AND
16518: IFFALSE 16612
16520: GO 16522
16522: DISABLE
16523: LD_INT 0
16525: PPUSH
16526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16527: LD_ADDR_VAR 0 2
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_OWVAR 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 32
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: ST_TO_ADDR
// if not tmp then
16574: LD_VAR 0 2
16578: NOT
16579: IFFALSE 16583
// exit ;
16581: GO 16612
// for i in tmp do
16583: LD_ADDR_VAR 0 1
16587: PUSH
16588: LD_VAR 0 2
16592: PUSH
16593: FOR_IN
16594: IFFALSE 16610
// SetFuel ( i , 0 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 0
16603: PPUSH
16604: CALL_OW 240
16608: GO 16593
16610: POP
16611: POP
// end ;
16612: PPOPN 2
16614: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16615: LD_EXP 19
16619: PUSH
16620: LD_EXP 55
16624: AND
16625: IFFALSE 16691
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16633: LD_ADDR_VAR 0 1
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_OWVAR 2
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 29
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PPUSH
16664: CALL_OW 69
16668: ST_TO_ADDR
// if not tmp then
16669: LD_VAR 0 1
16673: NOT
16674: IFFALSE 16678
// exit ;
16676: GO 16691
// DestroyUnit ( tmp [ 1 ] ) ;
16678: LD_VAR 0 1
16682: PUSH
16683: LD_INT 1
16685: ARRAY
16686: PPUSH
16687: CALL_OW 65
// end ;
16691: PPOPN 1
16693: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16694: LD_EXP 19
16698: PUSH
16699: LD_EXP 57
16703: AND
16704: IFFALSE 16833
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
// begin uc_side := 0 ;
16712: LD_ADDR_OWVAR 20
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// uc_nation := nation_arabian ;
16720: LD_ADDR_OWVAR 21
16724: PUSH
16725: LD_INT 2
16727: ST_TO_ADDR
// hc_gallery :=  ;
16728: LD_ADDR_OWVAR 33
16732: PUSH
16733: LD_STRING 
16735: ST_TO_ADDR
// hc_name :=  ;
16736: LD_ADDR_OWVAR 26
16740: PUSH
16741: LD_STRING 
16743: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16744: LD_INT 1
16746: PPUSH
16747: LD_INT 11
16749: PPUSH
16750: LD_INT 10
16752: PPUSH
16753: CALL_OW 380
// un := CreateHuman ;
16757: LD_ADDR_VAR 0 1
16761: PUSH
16762: CALL_OW 44
16766: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16767: LD_VAR 0 1
16771: PPUSH
16772: LD_INT 1
16774: PPUSH
16775: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16779: LD_INT 35
16781: PPUSH
16782: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: LD_INT 22
16793: PUSH
16794: LD_OWVAR 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 69
16807: PPUSH
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 74
16817: PPUSH
16818: CALL_OW 115
// until IsDead ( un ) ;
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 301
16831: IFFALSE 16779
// end ;
16833: PPOPN 1
16835: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16836: LD_EXP 19
16840: PUSH
16841: LD_EXP 59
16845: AND
16846: IFFALSE 16858
16848: GO 16850
16850: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16851: LD_STRING earthquake(getX(game), 0, 32)
16853: PPUSH
16854: CALL_OW 559
16858: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16859: LD_EXP 19
16863: PUSH
16864: LD_EXP 60
16868: AND
16869: IFFALSE 16960
16871: GO 16873
16873: DISABLE
16874: LD_INT 0
16876: PPUSH
// begin enable ;
16877: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16878: LD_ADDR_VAR 0 1
16882: PUSH
16883: LD_INT 22
16885: PUSH
16886: LD_OWVAR 2
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 21
16897: PUSH
16898: LD_INT 2
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 33
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 69
16924: ST_TO_ADDR
// if not tmp then
16925: LD_VAR 0 1
16929: NOT
16930: IFFALSE 16934
// exit ;
16932: GO 16960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16934: LD_VAR 0 1
16938: PUSH
16939: LD_INT 1
16941: PPUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 12
16951: ARRAY
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 234
// end ;
16960: PPOPN 1
16962: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16963: LD_EXP 19
16967: PUSH
16968: LD_EXP 61
16972: AND
16973: IFFALSE 17114
16975: GO 16977
16977: DISABLE
16978: LD_INT 0
16980: PPUSH
16981: PPUSH
16982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16983: LD_ADDR_VAR 0 3
16987: PUSH
16988: LD_INT 22
16990: PUSH
16991: LD_OWVAR 2
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 25
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: ST_TO_ADDR
// if not tmp then
17019: LD_VAR 0 3
17023: NOT
17024: IFFALSE 17028
// exit ;
17026: GO 17114
// un := tmp [ rand ( 1 , tmp ) ] ;
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: LD_VAR 0 3
17037: PUSH
17038: LD_INT 1
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: CALL_OW 12
17050: ARRAY
17051: ST_TO_ADDR
// if Crawls ( un ) then
17052: LD_VAR 0 2
17056: PPUSH
17057: CALL_OW 318
17061: IFFALSE 17072
// ComWalk ( un ) ;
17063: LD_VAR 0 2
17067: PPUSH
17068: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17072: LD_VAR 0 2
17076: PPUSH
17077: LD_INT 9
17079: PPUSH
17080: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17084: LD_INT 28
17086: PPUSH
17087: LD_OWVAR 2
17091: PPUSH
17092: LD_INT 2
17094: PPUSH
17095: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17099: LD_INT 29
17101: PPUSH
17102: LD_OWVAR 2
17106: PPUSH
17107: LD_INT 2
17109: PPUSH
17110: CALL_OW 322
// end ;
17114: PPOPN 3
17116: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17117: LD_EXP 19
17121: PUSH
17122: LD_EXP 62
17126: AND
17127: IFFALSE 17238
17129: GO 17131
17131: DISABLE
17132: LD_INT 0
17134: PPUSH
17135: PPUSH
17136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17137: LD_ADDR_VAR 0 3
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_OWVAR 2
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 25
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PPUSH
17168: CALL_OW 69
17172: ST_TO_ADDR
// if not tmp then
17173: LD_VAR 0 3
17177: NOT
17178: IFFALSE 17182
// exit ;
17180: GO 17238
// un := tmp [ rand ( 1 , tmp ) ] ;
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_INT 1
17194: PPUSH
17195: LD_VAR 0 3
17199: PPUSH
17200: CALL_OW 12
17204: ARRAY
17205: ST_TO_ADDR
// if Crawls ( un ) then
17206: LD_VAR 0 2
17210: PPUSH
17211: CALL_OW 318
17215: IFFALSE 17226
// ComWalk ( un ) ;
17217: LD_VAR 0 2
17221: PPUSH
17222: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17226: LD_VAR 0 2
17230: PPUSH
17231: LD_INT 8
17233: PPUSH
17234: CALL_OW 336
// end ;
17238: PPOPN 3
17240: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17241: LD_EXP 19
17245: PUSH
17246: LD_EXP 63
17250: AND
17251: IFFALSE 17395
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17260: LD_ADDR_VAR 0 2
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_OWVAR 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 21
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 34
17292: PUSH
17293: LD_INT 12
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 34
17302: PUSH
17303: LD_INT 51
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 34
17312: PUSH
17313: LD_INT 32
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: ST_TO_ADDR
// if not tmp then
17336: LD_VAR 0 2
17340: NOT
17341: IFFALSE 17345
// exit ;
17343: GO 17395
// for i in tmp do
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: LD_VAR 0 2
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17393
// if GetCargo ( i , mat_artifact ) = 0 then
17358: LD_VAR 0 1
17362: PPUSH
17363: LD_INT 4
17365: PPUSH
17366: CALL_OW 289
17370: PUSH
17371: LD_INT 0
17373: EQUAL
17374: IFFALSE 17391
// SetCargo ( i , mat_siberit , 100 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 3
17383: PPUSH
17384: LD_INT 100
17386: PPUSH
17387: CALL_OW 290
17391: GO 17355
17393: POP
17394: POP
// end ;
17395: PPOPN 2
17397: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17398: LD_EXP 19
17402: PUSH
17403: LD_EXP 64
17407: AND
17408: IFFALSE 17591
17410: GO 17412
17412: DISABLE
17413: LD_INT 0
17415: PPUSH
17416: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17417: LD_ADDR_VAR 0 2
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: ST_TO_ADDR
// if not tmp then
17439: LD_VAR 0 2
17443: NOT
17444: IFFALSE 17448
// exit ;
17446: GO 17591
// for i := 1 to 2 do
17448: LD_ADDR_VAR 0 1
17452: PUSH
17453: DOUBLE
17454: LD_INT 1
17456: DEC
17457: ST_TO_ADDR
17458: LD_INT 2
17460: PUSH
17461: FOR_TO
17462: IFFALSE 17589
// begin uc_side := your_side ;
17464: LD_ADDR_OWVAR 20
17468: PUSH
17469: LD_OWVAR 2
17473: ST_TO_ADDR
// uc_nation := nation_american ;
17474: LD_ADDR_OWVAR 21
17478: PUSH
17479: LD_INT 1
17481: ST_TO_ADDR
// vc_chassis := us_morphling ;
17482: LD_ADDR_OWVAR 37
17486: PUSH
17487: LD_INT 5
17489: ST_TO_ADDR
// vc_engine := engine_siberite ;
17490: LD_ADDR_OWVAR 39
17494: PUSH
17495: LD_INT 3
17497: ST_TO_ADDR
// vc_control := control_computer ;
17498: LD_ADDR_OWVAR 38
17502: PUSH
17503: LD_INT 3
17505: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17506: LD_ADDR_OWVAR 40
17510: PUSH
17511: LD_INT 10
17513: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17514: LD_VAR 0 2
17518: PUSH
17519: LD_INT 1
17521: ARRAY
17522: PPUSH
17523: CALL_OW 310
17527: NOT
17528: IFFALSE 17575
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17530: CALL_OW 45
17534: PPUSH
17535: LD_VAR 0 2
17539: PUSH
17540: LD_INT 1
17542: ARRAY
17543: PPUSH
17544: CALL_OW 250
17548: PPUSH
17549: LD_VAR 0 2
17553: PUSH
17554: LD_INT 1
17556: ARRAY
17557: PPUSH
17558: CALL_OW 251
17562: PPUSH
17563: LD_INT 12
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 50
17573: GO 17587
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17575: CALL_OW 45
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: CALL_OW 51
// end ;
17587: GO 17461
17589: POP
17590: POP
// end ;
17591: PPOPN 2
17593: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17594: LD_EXP 19
17598: PUSH
17599: LD_EXP 65
17603: AND
17604: IFFALSE 17826
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17617: LD_ADDR_VAR 0 6
17621: PUSH
17622: LD_INT 22
17624: PUSH
17625: LD_OWVAR 2
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 21
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 3
17646: PUSH
17647: LD_INT 23
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: ST_TO_ADDR
// if not tmp then
17671: LD_VAR 0 6
17675: NOT
17676: IFFALSE 17680
// exit ;
17678: GO 17826
// s1 := rand ( 1 , 4 ) ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: LD_INT 1
17687: PPUSH
17688: LD_INT 4
17690: PPUSH
17691: CALL_OW 12
17695: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17696: LD_ADDR_VAR 0 4
17700: PUSH
17701: LD_VAR 0 6
17705: PUSH
17706: LD_INT 1
17708: ARRAY
17709: PPUSH
17710: LD_VAR 0 2
17714: PPUSH
17715: CALL_OW 259
17719: ST_TO_ADDR
// if s1 = 1 then
17720: LD_VAR 0 2
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17748
// s2 := rand ( 2 , 4 ) else
17730: LD_ADDR_VAR 0 3
17734: PUSH
17735: LD_INT 2
17737: PPUSH
17738: LD_INT 4
17740: PPUSH
17741: CALL_OW 12
17745: ST_TO_ADDR
17746: GO 17756
// s2 := 1 ;
17748: LD_ADDR_VAR 0 3
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17756: LD_ADDR_VAR 0 5
17760: PUSH
17761: LD_VAR 0 6
17765: PUSH
17766: LD_INT 1
17768: ARRAY
17769: PPUSH
17770: LD_VAR 0 3
17774: PPUSH
17775: CALL_OW 259
17779: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17780: LD_VAR 0 6
17784: PUSH
17785: LD_INT 1
17787: ARRAY
17788: PPUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: LD_VAR 0 5
17798: PPUSH
17799: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17803: LD_VAR 0 6
17807: PUSH
17808: LD_INT 1
17810: ARRAY
17811: PPUSH
17812: LD_VAR 0 3
17816: PPUSH
17817: LD_VAR 0 4
17821: PPUSH
17822: CALL_OW 237
// end ;
17826: PPOPN 6
17828: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17829: LD_EXP 19
17833: PUSH
17834: LD_EXP 66
17838: AND
17839: IFFALSE 17918
17841: GO 17843
17843: DISABLE
17844: LD_INT 0
17846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17847: LD_ADDR_VAR 0 1
17851: PUSH
17852: LD_INT 22
17854: PUSH
17855: LD_OWVAR 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 30
17866: PUSH
17867: LD_INT 3
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: CALL_OW 69
17882: ST_TO_ADDR
// if not tmp then
17883: LD_VAR 0 1
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 17918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17892: LD_VAR 0 1
17896: PUSH
17897: LD_INT 1
17899: PPUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 12
17909: ARRAY
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 234
// end ;
17918: PPOPN 1
17920: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17921: LD_EXP 19
17925: PUSH
17926: LD_EXP 67
17930: AND
17931: IFFALSE 18043
17933: GO 17935
17935: DISABLE
17936: LD_INT 0
17938: PPUSH
17939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_OWVAR 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 30
17962: PUSH
17963: LD_INT 27
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 30
17972: PUSH
17973: LD_INT 26
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 30
17982: PUSH
17983: LD_INT 28
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: ST_TO_ADDR
// if not tmp then
18005: LD_VAR 0 2
18009: NOT
18010: IFFALSE 18014
// exit ;
18012: GO 18043
// for i in tmp do
18014: LD_ADDR_VAR 0 1
18018: PUSH
18019: LD_VAR 0 2
18023: PUSH
18024: FOR_IN
18025: IFFALSE 18041
// SetLives ( i , 1 ) ;
18027: LD_VAR 0 1
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 234
18039: GO 18024
18041: POP
18042: POP
// end ;
18043: PPOPN 2
18045: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18046: LD_EXP 19
18050: PUSH
18051: LD_EXP 68
18055: AND
18056: IFFALSE 18330
18058: GO 18060
18060: DISABLE
18061: LD_INT 0
18063: PPUSH
18064: PPUSH
18065: PPUSH
// begin i := rand ( 1 , 7 ) ;
18066: LD_ADDR_VAR 0 1
18070: PUSH
18071: LD_INT 1
18073: PPUSH
18074: LD_INT 7
18076: PPUSH
18077: CALL_OW 12
18081: ST_TO_ADDR
// case i of 1 :
18082: LD_VAR 0 1
18086: PUSH
18087: LD_INT 1
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18105
18095: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18096: LD_STRING earthquake(getX(game), 0, 32)
18098: PPUSH
18099: CALL_OW 559
18103: GO 18330
18105: LD_INT 2
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18113
18111: GO 18127
18113: POP
// begin ToLua ( displayStucuk(); ) ;
18114: LD_STRING displayStucuk();
18116: PPUSH
18117: CALL_OW 559
// ResetFog ;
18121: CALL_OW 335
// end ; 3 :
18125: GO 18330
18127: LD_INT 3
18129: DOUBLE
18130: EQUAL
18131: IFTRUE 18135
18133: GO 18239
18135: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18136: LD_ADDR_VAR 0 2
18140: PUSH
18141: LD_INT 22
18143: PUSH
18144: LD_OWVAR 2
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 25
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PPUSH
18167: CALL_OW 69
18171: ST_TO_ADDR
// if not tmp then
18172: LD_VAR 0 2
18176: NOT
18177: IFFALSE 18181
// exit ;
18179: GO 18330
// un := tmp [ rand ( 1 , tmp ) ] ;
18181: LD_ADDR_VAR 0 3
18185: PUSH
18186: LD_VAR 0 2
18190: PUSH
18191: LD_INT 1
18193: PPUSH
18194: LD_VAR 0 2
18198: PPUSH
18199: CALL_OW 12
18203: ARRAY
18204: ST_TO_ADDR
// if Crawls ( un ) then
18205: LD_VAR 0 3
18209: PPUSH
18210: CALL_OW 318
18214: IFFALSE 18225
// ComWalk ( un ) ;
18216: LD_VAR 0 3
18220: PPUSH
18221: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18225: LD_VAR 0 3
18229: PPUSH
18230: LD_INT 8
18232: PPUSH
18233: CALL_OW 336
// end ; 4 :
18237: GO 18330
18239: LD_INT 4
18241: DOUBLE
18242: EQUAL
18243: IFTRUE 18247
18245: GO 18308
18247: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18248: LD_ADDR_VAR 0 2
18252: PUSH
18253: LD_INT 22
18255: PUSH
18256: LD_OWVAR 2
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 30
18267: PUSH
18268: LD_INT 29
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PPUSH
18279: CALL_OW 69
18283: ST_TO_ADDR
// if not tmp then
18284: LD_VAR 0 2
18288: NOT
18289: IFFALSE 18293
// exit ;
18291: GO 18330
// DestroyUnit ( tmp [ 1 ] ) ;
18293: LD_VAR 0 2
18297: PUSH
18298: LD_INT 1
18300: ARRAY
18301: PPUSH
18302: CALL_OW 65
// end ; 5 .. 7 :
18306: GO 18330
18308: LD_INT 5
18310: DOUBLE
18311: GREATEREQUAL
18312: IFFALSE 18320
18314: LD_INT 7
18316: DOUBLE
18317: LESSEQUAL
18318: IFTRUE 18322
18320: GO 18329
18322: POP
// StreamSibBomb ; end ;
18323: CALL 14580 0 0
18327: GO 18330
18329: POP
// end ;
18330: PPOPN 3
18332: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18333: LD_EXP 19
18337: PUSH
18338: LD_EXP 69
18342: AND
18343: IFFALSE 18499
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
18352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_INT 81
18360: PUSH
18361: LD_OWVAR 2
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 2
18372: PUSH
18373: LD_INT 21
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 21
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: ST_TO_ADDR
// if not tmp then
18407: LD_VAR 0 2
18411: NOT
18412: IFFALSE 18416
// exit ;
18414: GO 18499
// p := 0 ;
18416: LD_ADDR_VAR 0 3
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18424: LD_INT 35
18426: PPUSH
18427: CALL_OW 67
// p := p + 1 ;
18431: LD_ADDR_VAR 0 3
18435: PUSH
18436: LD_VAR 0 3
18440: PUSH
18441: LD_INT 1
18443: PLUS
18444: ST_TO_ADDR
// for i in tmp do
18445: LD_ADDR_VAR 0 1
18449: PUSH
18450: LD_VAR 0 2
18454: PUSH
18455: FOR_IN
18456: IFFALSE 18487
// if GetLives ( i ) < 1000 then
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 256
18467: PUSH
18468: LD_INT 1000
18470: LESS
18471: IFFALSE 18485
// SetLives ( i , 1000 ) ;
18473: LD_VAR 0 1
18477: PPUSH
18478: LD_INT 1000
18480: PPUSH
18481: CALL_OW 234
18485: GO 18455
18487: POP
18488: POP
// until p > 20 ;
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 20
18496: GREATER
18497: IFFALSE 18424
// end ;
18499: PPOPN 3
18501: END
// every 0 0$1 trigger StreamModeActive and sTime do
18502: LD_EXP 19
18506: PUSH
18507: LD_EXP 70
18511: AND
18512: IFFALSE 18547
18514: GO 18516
18516: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18517: LD_INT 28
18519: PPUSH
18520: LD_OWVAR 2
18524: PPUSH
18525: LD_INT 2
18527: PPUSH
18528: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18532: LD_INT 30
18534: PPUSH
18535: LD_OWVAR 2
18539: PPUSH
18540: LD_INT 2
18542: PPUSH
18543: CALL_OW 322
// end ;
18547: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18548: LD_EXP 19
18552: PUSH
18553: LD_EXP 71
18557: AND
18558: IFFALSE 18679
18560: GO 18562
18562: DISABLE
18563: LD_INT 0
18565: PPUSH
18566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18567: LD_ADDR_VAR 0 2
18571: PUSH
18572: LD_INT 22
18574: PUSH
18575: LD_OWVAR 2
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 21
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 23
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: LIST
18615: PPUSH
18616: CALL_OW 69
18620: ST_TO_ADDR
// if not tmp then
18621: LD_VAR 0 2
18625: NOT
18626: IFFALSE 18630
// exit ;
18628: GO 18679
// for i in tmp do
18630: LD_ADDR_VAR 0 1
18634: PUSH
18635: LD_VAR 0 2
18639: PUSH
18640: FOR_IN
18641: IFFALSE 18677
// begin if Crawls ( i ) then
18643: LD_VAR 0 1
18647: PPUSH
18648: CALL_OW 318
18652: IFFALSE 18663
// ComWalk ( i ) ;
18654: LD_VAR 0 1
18658: PPUSH
18659: CALL_OW 138
// SetClass ( i , 2 ) ;
18663: LD_VAR 0 1
18667: PPUSH
18668: LD_INT 2
18670: PPUSH
18671: CALL_OW 336
// end ;
18675: GO 18640
18677: POP
18678: POP
// end ;
18679: PPOPN 2
18681: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18682: LD_EXP 19
18686: PUSH
18687: LD_EXP 72
18691: AND
18692: IFFALSE 18973
18694: GO 18696
18696: DISABLE
18697: LD_INT 0
18699: PPUSH
18700: PPUSH
18701: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18702: LD_OWVAR 2
18706: PPUSH
18707: LD_INT 9
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: LD_INT 1
18715: PPUSH
18716: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18720: LD_INT 9
18722: PPUSH
18723: LD_OWVAR 2
18727: PPUSH
18728: CALL_OW 343
// uc_side := 9 ;
18732: LD_ADDR_OWVAR 20
18736: PUSH
18737: LD_INT 9
18739: ST_TO_ADDR
// uc_nation := 2 ;
18740: LD_ADDR_OWVAR 21
18744: PUSH
18745: LD_INT 2
18747: ST_TO_ADDR
// hc_name := Dark Warrior ;
18748: LD_ADDR_OWVAR 26
18752: PUSH
18753: LD_STRING Dark Warrior
18755: ST_TO_ADDR
// hc_gallery :=  ;
18756: LD_ADDR_OWVAR 33
18760: PUSH
18761: LD_STRING 
18763: ST_TO_ADDR
// hc_noskilllimit := true ;
18764: LD_ADDR_OWVAR 76
18768: PUSH
18769: LD_INT 1
18771: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18772: LD_ADDR_OWVAR 31
18776: PUSH
18777: LD_INT 30
18779: PUSH
18780: LD_INT 30
18782: PUSH
18783: LD_INT 30
18785: PUSH
18786: LD_INT 30
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: ST_TO_ADDR
// un := CreateHuman ;
18795: LD_ADDR_VAR 0 3
18799: PUSH
18800: CALL_OW 44
18804: ST_TO_ADDR
// hc_noskilllimit := false ;
18805: LD_ADDR_OWVAR 76
18809: PUSH
18810: LD_INT 0
18812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18813: LD_VAR 0 3
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: CALL_OW 51
// p := 0 ;
18825: LD_ADDR_VAR 0 2
18829: PUSH
18830: LD_INT 0
18832: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18833: LD_INT 35
18835: PPUSH
18836: CALL_OW 67
// p := p + 1 ;
18840: LD_ADDR_VAR 0 2
18844: PUSH
18845: LD_VAR 0 2
18849: PUSH
18850: LD_INT 1
18852: PLUS
18853: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18854: LD_VAR 0 3
18858: PPUSH
18859: CALL_OW 256
18863: PUSH
18864: LD_INT 1000
18866: LESS
18867: IFFALSE 18881
// SetLives ( un , 1000 ) ;
18869: LD_VAR 0 3
18873: PPUSH
18874: LD_INT 1000
18876: PPUSH
18877: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18881: LD_VAR 0 3
18885: PPUSH
18886: LD_INT 81
18888: PUSH
18889: LD_OWVAR 2
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 91
18900: PUSH
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 30
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PPUSH
18918: CALL_OW 69
18922: PPUSH
18923: LD_VAR 0 3
18927: PPUSH
18928: CALL_OW 74
18932: PPUSH
18933: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18937: LD_VAR 0 2
18941: PUSH
18942: LD_INT 60
18944: GREATER
18945: PUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: CALL_OW 301
18955: OR
18956: IFFALSE 18833
// if un then
18958: LD_VAR 0 3
18962: IFFALSE 18973
// RemoveUnit ( un ) ;
18964: LD_VAR 0 3
18968: PPUSH
18969: CALL_OW 64
// end ;
18973: PPOPN 3
18975: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18976: LD_INT 0
18978: PPUSH
18979: PPUSH
18980: PPUSH
18981: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18982: LD_ADDR_VAR 0 4
18986: PUSH
18987: LD_INT 22
18989: PUSH
18990: LD_OWVAR 2
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: LD_INT 30
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 30
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PPUSH
19031: CALL_OW 69
19035: ST_TO_ADDR
// if not tmp then
19036: LD_VAR 0 4
19040: NOT
19041: IFFALSE 19045
// exit ;
19043: GO 19104
// for i in tmp do
19045: LD_ADDR_VAR 0 2
19049: PUSH
19050: LD_VAR 0 4
19054: PUSH
19055: FOR_IN
19056: IFFALSE 19102
// for j = 1 to 3 do
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: DOUBLE
19064: LD_INT 1
19066: DEC
19067: ST_TO_ADDR
19068: LD_INT 3
19070: PUSH
19071: FOR_TO
19072: IFFALSE 19098
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19074: LD_VAR 0 2
19078: PPUSH
19079: CALL_OW 274
19083: PPUSH
19084: LD_VAR 0 3
19088: PPUSH
19089: LD_INT 99999
19091: PPUSH
19092: CALL_OW 277
19096: GO 19071
19098: POP
19099: POP
19100: GO 19055
19102: POP
19103: POP
// end ;
19104: LD_VAR 0 1
19108: RET
// export function hHackSetLevel10 ; var i , j ; begin
19109: LD_INT 0
19111: PPUSH
19112: PPUSH
19113: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19114: LD_ADDR_VAR 0 2
19118: PUSH
19119: LD_INT 21
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PPUSH
19129: CALL_OW 69
19133: PUSH
19134: FOR_IN
19135: IFFALSE 19187
// if IsSelected ( i ) then
19137: LD_VAR 0 2
19141: PPUSH
19142: CALL_OW 306
19146: IFFALSE 19185
// begin for j := 1 to 4 do
19148: LD_ADDR_VAR 0 3
19152: PUSH
19153: DOUBLE
19154: LD_INT 1
19156: DEC
19157: ST_TO_ADDR
19158: LD_INT 4
19160: PUSH
19161: FOR_TO
19162: IFFALSE 19183
// SetSkill ( i , j , 10 ) ;
19164: LD_VAR 0 2
19168: PPUSH
19169: LD_VAR 0 3
19173: PPUSH
19174: LD_INT 10
19176: PPUSH
19177: CALL_OW 237
19181: GO 19161
19183: POP
19184: POP
// end ;
19185: GO 19134
19187: POP
19188: POP
// end ;
19189: LD_VAR 0 1
19193: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19194: LD_INT 0
19196: PPUSH
19197: PPUSH
19198: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19199: LD_ADDR_VAR 0 2
19203: PUSH
19204: LD_INT 22
19206: PUSH
19207: LD_OWVAR 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 21
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PPUSH
19230: CALL_OW 69
19234: PUSH
19235: FOR_IN
19236: IFFALSE 19277
// begin for j := 1 to 4 do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: DOUBLE
19244: LD_INT 1
19246: DEC
19247: ST_TO_ADDR
19248: LD_INT 4
19250: PUSH
19251: FOR_TO
19252: IFFALSE 19273
// SetSkill ( i , j , 10 ) ;
19254: LD_VAR 0 2
19258: PPUSH
19259: LD_VAR 0 3
19263: PPUSH
19264: LD_INT 10
19266: PPUSH
19267: CALL_OW 237
19271: GO 19251
19273: POP
19274: POP
// end ;
19275: GO 19235
19277: POP
19278: POP
// end ;
19279: LD_VAR 0 1
19283: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
19284: LD_INT 0
19286: PPUSH
// uc_side := your_side ;
19287: LD_ADDR_OWVAR 20
19291: PUSH
19292: LD_OWVAR 2
19296: ST_TO_ADDR
// uc_nation := nation ;
19297: LD_ADDR_OWVAR 21
19301: PUSH
19302: LD_VAR 0 1
19306: ST_TO_ADDR
// InitHc ;
19307: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19311: LD_INT 0
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_VAR 0 3
19323: PPUSH
19324: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
19328: CALL_OW 44
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 51
// end ;
19340: LD_VAR 0 4
19344: RET
// export function hHackSpawnVehicle ; begin
19345: LD_INT 0
19347: PPUSH
// uc_side := your_side ;
19348: LD_ADDR_OWVAR 20
19352: PUSH
19353: LD_OWVAR 2
19357: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
19358: LD_ADDR_OWVAR 21
19362: PUSH
19363: LD_INT 1
19365: PPUSH
19366: LD_INT 3
19368: PPUSH
19369: CALL_OW 12
19373: ST_TO_ADDR
// InitVc ;
19374: CALL_OW 20
// case uc_nation of 1 :
19378: LD_OWVAR 21
19382: PUSH
19383: LD_INT 1
19385: DOUBLE
19386: EQUAL
19387: IFTRUE 19391
19389: GO 19535
19391: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
19392: LD_ADDR_OWVAR 37
19396: PUSH
19397: LD_INT 1
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: LD_INT 3
19405: PUSH
19406: LD_INT 4
19408: PUSH
19409: LD_INT 5
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 1
19421: PPUSH
19422: LD_INT 5
19424: PPUSH
19425: CALL_OW 12
19429: ARRAY
19430: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19431: LD_ADDR_OWVAR 39
19435: PUSH
19436: LD_INT 1
19438: PPUSH
19439: LD_INT 3
19441: PPUSH
19442: CALL_OW 12
19446: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
19447: LD_ADDR_OWVAR 38
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_INT 3
19471: PPUSH
19472: CALL_OW 12
19476: ARRAY
19477: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
19478: LD_ADDR_OWVAR 40
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 4
19488: PUSH
19489: LD_INT 5
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: LD_INT 7
19497: PUSH
19498: LD_INT 8
19500: PUSH
19501: LD_INT 9
19503: PUSH
19504: LD_INT 10
19506: PUSH
19507: LD_INT 6
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: PPUSH
19524: LD_INT 9
19526: PPUSH
19527: CALL_OW 12
19531: ARRAY
19532: ST_TO_ADDR
// end ; 2 :
19533: GO 19800
19535: LD_INT 2
19537: DOUBLE
19538: EQUAL
19539: IFTRUE 19543
19541: GO 19667
19543: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
19544: LD_ADDR_OWVAR 37
19548: PUSH
19549: LD_INT 11
19551: PUSH
19552: LD_INT 12
19554: PUSH
19555: LD_INT 13
19557: PUSH
19558: LD_INT 14
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: PPUSH
19570: LD_INT 4
19572: PPUSH
19573: CALL_OW 12
19577: ARRAY
19578: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19579: LD_ADDR_OWVAR 39
19583: PUSH
19584: LD_INT 1
19586: PPUSH
19587: LD_INT 3
19589: PPUSH
19590: CALL_OW 12
19594: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
19595: LD_ADDR_OWVAR 38
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: LD_INT 5
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: PPUSH
19617: LD_INT 3
19619: PPUSH
19620: CALL_OW 12
19624: ARRAY
19625: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
19626: LD_ADDR_OWVAR 40
19630: PUSH
19631: LD_INT 24
19633: PUSH
19634: LD_INT 26
19636: PUSH
19637: LD_INT 27
19639: PUSH
19640: LD_INT 28
19642: PUSH
19643: LD_INT 29
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PPUSH
19656: LD_INT 5
19658: PPUSH
19659: CALL_OW 12
19663: ARRAY
19664: ST_TO_ADDR
// end ; 3 :
19665: GO 19800
19667: LD_INT 3
19669: DOUBLE
19670: EQUAL
19671: IFTRUE 19675
19673: GO 19799
19675: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
19676: LD_ADDR_OWVAR 37
19680: PUSH
19681: LD_INT 21
19683: PUSH
19684: LD_INT 23
19686: PUSH
19687: LD_INT 22
19689: PUSH
19690: LD_INT 24
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 1
19701: PPUSH
19702: LD_INT 4
19704: PPUSH
19705: CALL_OW 12
19709: ARRAY
19710: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19711: LD_ADDR_OWVAR 39
19715: PUSH
19716: LD_INT 1
19718: PPUSH
19719: LD_INT 3
19721: PPUSH
19722: CALL_OW 12
19726: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
19727: LD_ADDR_OWVAR 38
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 3
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: PPUSH
19745: LD_INT 2
19747: PPUSH
19748: CALL_OW 12
19752: ARRAY
19753: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
19754: LD_ADDR_OWVAR 40
19758: PUSH
19759: LD_INT 42
19761: PUSH
19762: LD_INT 43
19764: PUSH
19765: LD_INT 44
19767: PUSH
19768: LD_INT 46
19770: PUSH
19771: LD_INT 48
19773: PUSH
19774: LD_INT 47
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PPUSH
19788: LD_INT 6
19790: PPUSH
19791: CALL_OW 12
19795: ARRAY
19796: ST_TO_ADDR
// end ; end ;
19797: GO 19800
19799: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19800: CALL_OW 45
19804: PPUSH
19805: LD_INT 1
19807: PPUSH
19808: CALL_OW 51
// end ;
19812: LD_VAR 0 1
19816: RET
// export hInvincible ; every 1 do
19817: GO 19819
19819: DISABLE
// hInvincible := [ ] ;
19820: LD_ADDR_EXP 73
19824: PUSH
19825: EMPTY
19826: ST_TO_ADDR
19827: END
// every 10 do var i ;
19828: GO 19830
19830: DISABLE
19831: LD_INT 0
19833: PPUSH
// begin enable ;
19834: ENABLE
// if not hInvincible then
19835: LD_EXP 73
19839: NOT
19840: IFFALSE 19844
// exit ;
19842: GO 19888
// for i in hInvincible do
19844: LD_ADDR_VAR 0 1
19848: PUSH
19849: LD_EXP 73
19853: PUSH
19854: FOR_IN
19855: IFFALSE 19886
// if GetLives ( i ) < 1000 then
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL_OW 256
19866: PUSH
19867: LD_INT 1000
19869: LESS
19870: IFFALSE 19884
// SetLives ( i , 1000 ) ;
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_INT 1000
19879: PPUSH
19880: CALL_OW 234
19884: GO 19854
19886: POP
19887: POP
// end ;
19888: PPOPN 1
19890: END
// export function hHackInvincible ; var i ; begin
19891: LD_INT 0
19893: PPUSH
19894: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19895: LD_ADDR_VAR 0 2
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 21
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: PUSH
19933: FOR_IN
19934: IFFALSE 19995
// if IsSelected ( i ) then
19936: LD_VAR 0 2
19940: PPUSH
19941: CALL_OW 306
19945: IFFALSE 19993
// begin if i in hInvincible then
19947: LD_VAR 0 2
19951: PUSH
19952: LD_EXP 73
19956: IN
19957: IFFALSE 19977
// hInvincible := hInvincible diff i else
19959: LD_ADDR_EXP 73
19963: PUSH
19964: LD_EXP 73
19968: PUSH
19969: LD_VAR 0 2
19973: DIFF
19974: ST_TO_ADDR
19975: GO 19993
// hInvincible := hInvincible union i ;
19977: LD_ADDR_EXP 73
19981: PUSH
19982: LD_EXP 73
19986: PUSH
19987: LD_VAR 0 2
19991: UNION
19992: ST_TO_ADDR
// end ;
19993: GO 19933
19995: POP
19996: POP
// end ;
19997: LD_VAR 0 1
20001: RET
// export function hHackInvisible ; var i , j ; begin
20002: LD_INT 0
20004: PPUSH
20005: PPUSH
20006: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20007: LD_ADDR_VAR 0 2
20011: PUSH
20012: LD_INT 21
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: PUSH
20027: FOR_IN
20028: IFFALSE 20052
// if IsSelected ( i ) then
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL_OW 306
20039: IFFALSE 20050
// ComForceInvisible ( i ) ;
20041: LD_VAR 0 2
20045: PPUSH
20046: CALL_OW 496
20050: GO 20027
20052: POP
20053: POP
// end ;
20054: LD_VAR 0 1
20058: RET
// export function hHackChangeYourSide ; begin
20059: LD_INT 0
20061: PPUSH
// if your_side = 8 then
20062: LD_OWVAR 2
20066: PUSH
20067: LD_INT 8
20069: EQUAL
20070: IFFALSE 20082
// your_side := 0 else
20072: LD_ADDR_OWVAR 2
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
20080: GO 20096
// your_side := your_side + 1 ;
20082: LD_ADDR_OWVAR 2
20086: PUSH
20087: LD_OWVAR 2
20091: PUSH
20092: LD_INT 1
20094: PLUS
20095: ST_TO_ADDR
// end ;
20096: LD_VAR 0 1
20100: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20101: LD_INT 0
20103: PPUSH
20104: PPUSH
20105: PPUSH
// for i in all_units do
20106: LD_ADDR_VAR 0 2
20110: PUSH
20111: LD_OWVAR 3
20115: PUSH
20116: FOR_IN
20117: IFFALSE 20195
// if IsSelected ( i ) then
20119: LD_VAR 0 2
20123: PPUSH
20124: CALL_OW 306
20128: IFFALSE 20193
// begin j := GetSide ( i ) ;
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_VAR 0 2
20139: PPUSH
20140: CALL_OW 255
20144: ST_TO_ADDR
// if j = 8 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 8
20152: EQUAL
20153: IFFALSE 20165
// j := 0 else
20155: LD_ADDR_VAR 0 3
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
20163: GO 20179
// j := j + 1 ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 1
20177: PLUS
20178: ST_TO_ADDR
// SetSide ( i , j ) ;
20179: LD_VAR 0 2
20183: PPUSH
20184: LD_VAR 0 3
20188: PPUSH
20189: CALL_OW 235
// end ;
20193: GO 20116
20195: POP
20196: POP
// end ;
20197: LD_VAR 0 1
20201: RET
// export function hHackFog ; begin
20202: LD_INT 0
20204: PPUSH
// FogOff ( true ) ;
20205: LD_INT 1
20207: PPUSH
20208: CALL_OW 344
// end ;
20212: LD_VAR 0 1
20216: RET
// export function hHackApeman ; begin
20217: LD_INT 0
20219: PPUSH
// uc_side := your_side ;
20220: LD_ADDR_OWVAR 20
20224: PUSH
20225: LD_OWVAR 2
20229: ST_TO_ADDR
// uc_nation := 0 ;
20230: LD_ADDR_OWVAR 21
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// hc_name :=  ;
20238: LD_ADDR_OWVAR 26
20242: PUSH
20243: LD_STRING 
20245: ST_TO_ADDR
// hc_gallery :=  ;
20246: LD_ADDR_OWVAR 33
20250: PUSH
20251: LD_STRING 
20253: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
20254: LD_ADDR_OWVAR 31
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: ST_TO_ADDR
// hc_class := class_apeman ;
20277: LD_ADDR_OWVAR 28
20281: PUSH
20282: LD_INT 12
20284: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
20285: CALL_OW 44
20289: PPUSH
20290: LD_INT 1
20292: PPUSH
20293: CALL_OW 51
// end ;
20297: LD_VAR 0 1
20301: RET
// export function hHackBoom ; begin
20302: LD_INT 0
20304: PPUSH
// uc_side := your_side ;
20305: LD_ADDR_OWVAR 20
20309: PUSH
20310: LD_OWVAR 2
20314: ST_TO_ADDR
// uc_nation := 1 ;
20315: LD_ADDR_OWVAR 21
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// vc_chassis := us_morphling ;
20323: LD_ADDR_OWVAR 37
20327: PUSH
20328: LD_INT 5
20330: ST_TO_ADDR
// vc_engine := engine_siberite ;
20331: LD_ADDR_OWVAR 39
20335: PUSH
20336: LD_INT 3
20338: ST_TO_ADDR
// vc_control := control_computer ;
20339: LD_ADDR_OWVAR 38
20343: PUSH
20344: LD_INT 3
20346: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
20347: LD_ADDR_OWVAR 40
20351: PUSH
20352: LD_INT 8
20354: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20355: CALL_OW 45
20359: PPUSH
20360: LD_INT 1
20362: PPUSH
20363: CALL_OW 51
// end ; end_of_file
20367: LD_VAR 0 1
20371: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20372: LD_INT 0
20374: PPUSH
20375: PPUSH
// if exist_mode then
20376: LD_VAR 0 2
20380: IFFALSE 20405
// unit := CreateCharacter ( prefix & ident ) else
20382: LD_ADDR_VAR 0 5
20386: PUSH
20387: LD_VAR 0 3
20391: PUSH
20392: LD_VAR 0 1
20396: STR
20397: PPUSH
20398: CALL_OW 34
20402: ST_TO_ADDR
20403: GO 20420
// unit := NewCharacter ( ident ) ;
20405: LD_ADDR_VAR 0 5
20409: PUSH
20410: LD_VAR 0 1
20414: PPUSH
20415: CALL_OW 25
20419: ST_TO_ADDR
// result := unit ;
20420: LD_ADDR_VAR 0 4
20424: PUSH
20425: LD_VAR 0 5
20429: ST_TO_ADDR
// end ;
20430: LD_VAR 0 4
20434: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
// if not side or not nation then
20439: LD_VAR 0 1
20443: NOT
20444: PUSH
20445: LD_VAR 0 2
20449: NOT
20450: OR
20451: IFFALSE 20455
// exit ;
20453: GO 21219
// case nation of nation_american :
20455: LD_VAR 0 2
20459: PUSH
20460: LD_INT 1
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20682
20468: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20469: LD_ADDR_VAR 0 4
20473: PUSH
20474: LD_INT 35
20476: PUSH
20477: LD_INT 45
20479: PUSH
20480: LD_INT 46
20482: PUSH
20483: LD_INT 47
20485: PUSH
20486: LD_INT 82
20488: PUSH
20489: LD_INT 83
20491: PUSH
20492: LD_INT 84
20494: PUSH
20495: LD_INT 85
20497: PUSH
20498: LD_INT 86
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 6
20509: PUSH
20510: LD_INT 15
20512: PUSH
20513: LD_INT 16
20515: PUSH
20516: LD_INT 7
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 13
20524: PUSH
20525: LD_INT 10
20527: PUSH
20528: LD_INT 14
20530: PUSH
20531: LD_INT 20
20533: PUSH
20534: LD_INT 21
20536: PUSH
20537: LD_INT 22
20539: PUSH
20540: LD_INT 25
20542: PUSH
20543: LD_INT 32
20545: PUSH
20546: LD_INT 27
20548: PUSH
20549: LD_INT 36
20551: PUSH
20552: LD_INT 69
20554: PUSH
20555: LD_INT 39
20557: PUSH
20558: LD_INT 34
20560: PUSH
20561: LD_INT 40
20563: PUSH
20564: LD_INT 48
20566: PUSH
20567: LD_INT 49
20569: PUSH
20570: LD_INT 50
20572: PUSH
20573: LD_INT 51
20575: PUSH
20576: LD_INT 52
20578: PUSH
20579: LD_INT 53
20581: PUSH
20582: LD_INT 54
20584: PUSH
20585: LD_INT 55
20587: PUSH
20588: LD_INT 56
20590: PUSH
20591: LD_INT 57
20593: PUSH
20594: LD_INT 58
20596: PUSH
20597: LD_INT 59
20599: PUSH
20600: LD_INT 60
20602: PUSH
20603: LD_INT 61
20605: PUSH
20606: LD_INT 62
20608: PUSH
20609: LD_INT 80
20611: PUSH
20612: LD_INT 82
20614: PUSH
20615: LD_INT 83
20617: PUSH
20618: LD_INT 84
20620: PUSH
20621: LD_INT 85
20623: PUSH
20624: LD_INT 86
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: ST_TO_ADDR
20680: GO 21143
20682: LD_INT 2
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20912
20690: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20691: LD_ADDR_VAR 0 4
20695: PUSH
20696: LD_INT 35
20698: PUSH
20699: LD_INT 45
20701: PUSH
20702: LD_INT 46
20704: PUSH
20705: LD_INT 47
20707: PUSH
20708: LD_INT 82
20710: PUSH
20711: LD_INT 83
20713: PUSH
20714: LD_INT 84
20716: PUSH
20717: LD_INT 85
20719: PUSH
20720: LD_INT 87
20722: PUSH
20723: LD_INT 70
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: LD_INT 11
20731: PUSH
20732: LD_INT 3
20734: PUSH
20735: LD_INT 4
20737: PUSH
20738: LD_INT 5
20740: PUSH
20741: LD_INT 6
20743: PUSH
20744: LD_INT 15
20746: PUSH
20747: LD_INT 18
20749: PUSH
20750: LD_INT 7
20752: PUSH
20753: LD_INT 17
20755: PUSH
20756: LD_INT 8
20758: PUSH
20759: LD_INT 20
20761: PUSH
20762: LD_INT 21
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_INT 72
20770: PUSH
20771: LD_INT 26
20773: PUSH
20774: LD_INT 69
20776: PUSH
20777: LD_INT 39
20779: PUSH
20780: LD_INT 40
20782: PUSH
20783: LD_INT 41
20785: PUSH
20786: LD_INT 42
20788: PUSH
20789: LD_INT 43
20791: PUSH
20792: LD_INT 48
20794: PUSH
20795: LD_INT 49
20797: PUSH
20798: LD_INT 50
20800: PUSH
20801: LD_INT 51
20803: PUSH
20804: LD_INT 52
20806: PUSH
20807: LD_INT 53
20809: PUSH
20810: LD_INT 54
20812: PUSH
20813: LD_INT 55
20815: PUSH
20816: LD_INT 56
20818: PUSH
20819: LD_INT 60
20821: PUSH
20822: LD_INT 61
20824: PUSH
20825: LD_INT 62
20827: PUSH
20828: LD_INT 66
20830: PUSH
20831: LD_INT 67
20833: PUSH
20834: LD_INT 68
20836: PUSH
20837: LD_INT 81
20839: PUSH
20840: LD_INT 82
20842: PUSH
20843: LD_INT 83
20845: PUSH
20846: LD_INT 84
20848: PUSH
20849: LD_INT 85
20851: PUSH
20852: LD_INT 87
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: ST_TO_ADDR
20910: GO 21143
20912: LD_INT 3
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 21142
20920: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20921: LD_ADDR_VAR 0 4
20925: PUSH
20926: LD_INT 46
20928: PUSH
20929: LD_INT 47
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: LD_INT 82
20940: PUSH
20941: LD_INT 83
20943: PUSH
20944: LD_INT 84
20946: PUSH
20947: LD_INT 85
20949: PUSH
20950: LD_INT 86
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 9
20958: PUSH
20959: LD_INT 20
20961: PUSH
20962: LD_INT 19
20964: PUSH
20965: LD_INT 21
20967: PUSH
20968: LD_INT 24
20970: PUSH
20971: LD_INT 22
20973: PUSH
20974: LD_INT 25
20976: PUSH
20977: LD_INT 28
20979: PUSH
20980: LD_INT 29
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 31
20988: PUSH
20989: LD_INT 37
20991: PUSH
20992: LD_INT 38
20994: PUSH
20995: LD_INT 32
20997: PUSH
20998: LD_INT 27
21000: PUSH
21001: LD_INT 33
21003: PUSH
21004: LD_INT 69
21006: PUSH
21007: LD_INT 39
21009: PUSH
21010: LD_INT 34
21012: PUSH
21013: LD_INT 40
21015: PUSH
21016: LD_INT 71
21018: PUSH
21019: LD_INT 23
21021: PUSH
21022: LD_INT 44
21024: PUSH
21025: LD_INT 48
21027: PUSH
21028: LD_INT 49
21030: PUSH
21031: LD_INT 50
21033: PUSH
21034: LD_INT 51
21036: PUSH
21037: LD_INT 52
21039: PUSH
21040: LD_INT 53
21042: PUSH
21043: LD_INT 54
21045: PUSH
21046: LD_INT 55
21048: PUSH
21049: LD_INT 56
21051: PUSH
21052: LD_INT 57
21054: PUSH
21055: LD_INT 58
21057: PUSH
21058: LD_INT 59
21060: PUSH
21061: LD_INT 63
21063: PUSH
21064: LD_INT 64
21066: PUSH
21067: LD_INT 65
21069: PUSH
21070: LD_INT 82
21072: PUSH
21073: LD_INT 83
21075: PUSH
21076: LD_INT 84
21078: PUSH
21079: LD_INT 85
21081: PUSH
21082: LD_INT 86
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: ST_TO_ADDR
21140: GO 21143
21142: POP
// if state > - 1 and state < 3 then
21143: LD_VAR 0 3
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: GREATER
21152: PUSH
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 3
21160: LESS
21161: AND
21162: IFFALSE 21219
// for i in result do
21164: LD_ADDR_VAR 0 5
21168: PUSH
21169: LD_VAR 0 4
21173: PUSH
21174: FOR_IN
21175: IFFALSE 21217
// if GetTech ( i , side ) <> state then
21177: LD_VAR 0 5
21181: PPUSH
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL_OW 321
21191: PUSH
21192: LD_VAR 0 3
21196: NONEQUAL
21197: IFFALSE 21215
// result := result diff i ;
21199: LD_ADDR_VAR 0 4
21203: PUSH
21204: LD_VAR 0 4
21208: PUSH
21209: LD_VAR 0 5
21213: DIFF
21214: ST_TO_ADDR
21215: GO 21174
21217: POP
21218: POP
// end ;
21219: LD_VAR 0 4
21223: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
21228: PPUSH
// result := true ;
21229: LD_ADDR_VAR 0 3
21233: PUSH
21234: LD_INT 1
21236: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21237: LD_ADDR_VAR 0 5
21241: PUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 480
21251: ST_TO_ADDR
// if not tmp then
21252: LD_VAR 0 5
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21310
// for i in tmp do
21261: LD_ADDR_VAR 0 4
21265: PUSH
21266: LD_VAR 0 5
21270: PUSH
21271: FOR_IN
21272: IFFALSE 21308
// if GetTech ( i , side ) <> state_researched then
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_VAR 0 1
21283: PPUSH
21284: CALL_OW 321
21288: PUSH
21289: LD_INT 2
21291: NONEQUAL
21292: IFFALSE 21306
// begin result := false ;
21294: LD_ADDR_VAR 0 3
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// exit ;
21302: POP
21303: POP
21304: GO 21310
// end ;
21306: GO 21271
21308: POP
21309: POP
// end ;
21310: LD_VAR 0 3
21314: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
21322: PPUSH
21323: PPUSH
21324: PPUSH
21325: PPUSH
21326: PPUSH
21327: PPUSH
21328: PPUSH
21329: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21330: LD_VAR 0 1
21334: NOT
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 257
21345: PUSH
21346: LD_INT 9
21348: NONEQUAL
21349: OR
21350: IFFALSE 21354
// exit ;
21352: GO 21927
// side := GetSide ( unit ) ;
21354: LD_ADDR_VAR 0 9
21358: PUSH
21359: LD_VAR 0 1
21363: PPUSH
21364: CALL_OW 255
21368: ST_TO_ADDR
// tech_space := tech_spacanom ;
21369: LD_ADDR_VAR 0 12
21373: PUSH
21374: LD_INT 29
21376: ST_TO_ADDR
// tech_time := tech_taurad ;
21377: LD_ADDR_VAR 0 13
21381: PUSH
21382: LD_INT 28
21384: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21385: LD_ADDR_VAR 0 11
21389: PUSH
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 310
21399: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21400: LD_VAR 0 11
21404: PPUSH
21405: CALL_OW 247
21409: PUSH
21410: LD_INT 2
21412: EQUAL
21413: IFFALSE 21417
// exit ;
21415: GO 21927
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21417: LD_ADDR_VAR 0 8
21421: PUSH
21422: LD_INT 81
21424: PUSH
21425: LD_VAR 0 9
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: LD_INT 21
21439: PUSH
21440: LD_INT 3
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 69
21459: ST_TO_ADDR
// if not tmp then
21460: LD_VAR 0 8
21464: NOT
21465: IFFALSE 21469
// exit ;
21467: GO 21927
// if in_unit then
21469: LD_VAR 0 11
21473: IFFALSE 21497
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21475: LD_ADDR_VAR 0 10
21479: PUSH
21480: LD_VAR 0 8
21484: PPUSH
21485: LD_VAR 0 11
21489: PPUSH
21490: CALL_OW 74
21494: ST_TO_ADDR
21495: GO 21517
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21497: LD_ADDR_VAR 0 10
21501: PUSH
21502: LD_VAR 0 8
21506: PPUSH
21507: LD_VAR 0 1
21511: PPUSH
21512: CALL_OW 74
21516: ST_TO_ADDR
// if not enemy then
21517: LD_VAR 0 10
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21927
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21526: LD_VAR 0 11
21530: PUSH
21531: LD_VAR 0 11
21535: PPUSH
21536: LD_VAR 0 10
21540: PPUSH
21541: CALL_OW 296
21545: PUSH
21546: LD_INT 13
21548: GREATER
21549: AND
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: LD_VAR 0 10
21560: PPUSH
21561: CALL_OW 296
21565: PUSH
21566: LD_INT 12
21568: GREATER
21569: OR
21570: IFFALSE 21574
// exit ;
21572: GO 21927
// missile := [ 1 ] ;
21574: LD_ADDR_VAR 0 14
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: EMPTY
21583: LIST
21584: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21585: LD_VAR 0 9
21589: PPUSH
21590: LD_VAR 0 12
21594: PPUSH
21595: CALL_OW 325
21599: IFFALSE 21628
// missile := Insert ( missile , missile + 1 , 2 ) ;
21601: LD_ADDR_VAR 0 14
21605: PUSH
21606: LD_VAR 0 14
21610: PPUSH
21611: LD_VAR 0 14
21615: PUSH
21616: LD_INT 1
21618: PLUS
21619: PPUSH
21620: LD_INT 2
21622: PPUSH
21623: CALL_OW 2
21627: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21628: LD_VAR 0 9
21632: PPUSH
21633: LD_VAR 0 13
21637: PPUSH
21638: CALL_OW 325
21642: PUSH
21643: LD_VAR 0 10
21647: PPUSH
21648: CALL_OW 255
21652: PPUSH
21653: LD_VAR 0 13
21657: PPUSH
21658: CALL_OW 325
21662: NOT
21663: AND
21664: IFFALSE 21693
// missile := Insert ( missile , missile + 1 , 3 ) ;
21666: LD_ADDR_VAR 0 14
21670: PUSH
21671: LD_VAR 0 14
21675: PPUSH
21676: LD_VAR 0 14
21680: PUSH
21681: LD_INT 1
21683: PLUS
21684: PPUSH
21685: LD_INT 3
21687: PPUSH
21688: CALL_OW 2
21692: ST_TO_ADDR
// if missile < 2 then
21693: LD_VAR 0 14
21697: PUSH
21698: LD_INT 2
21700: LESS
21701: IFFALSE 21705
// exit ;
21703: GO 21927
// x := GetX ( enemy ) ;
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 10
21714: PPUSH
21715: CALL_OW 250
21719: ST_TO_ADDR
// y := GetY ( enemy ) ;
21720: LD_ADDR_VAR 0 5
21724: PUSH
21725: LD_VAR 0 10
21729: PPUSH
21730: CALL_OW 251
21734: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21735: LD_ADDR_VAR 0 6
21739: PUSH
21740: LD_VAR 0 4
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PPUSH
21749: LD_INT 1
21751: PPUSH
21752: CALL_OW 12
21756: PLUS
21757: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21758: LD_ADDR_VAR 0 7
21762: PUSH
21763: LD_VAR 0 5
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PPUSH
21772: LD_INT 1
21774: PPUSH
21775: CALL_OW 12
21779: PLUS
21780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21781: LD_VAR 0 6
21785: PPUSH
21786: LD_VAR 0 7
21790: PPUSH
21791: CALL_OW 488
21795: NOT
21796: IFFALSE 21818
// begin _x := x ;
21798: LD_ADDR_VAR 0 6
21802: PUSH
21803: LD_VAR 0 4
21807: ST_TO_ADDR
// _y := y ;
21808: LD_ADDR_VAR 0 7
21812: PUSH
21813: LD_VAR 0 5
21817: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21818: LD_ADDR_VAR 0 3
21822: PUSH
21823: LD_INT 1
21825: PPUSH
21826: LD_VAR 0 14
21830: PPUSH
21831: CALL_OW 12
21835: ST_TO_ADDR
// case i of 1 :
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 1
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21866
21849: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_VAR 0 10
21859: PPUSH
21860: CALL_OW 115
21864: GO 21927
21866: LD_INT 2
21868: DOUBLE
21869: EQUAL
21870: IFTRUE 21874
21872: GO 21896
21874: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21875: LD_VAR 0 1
21879: PPUSH
21880: LD_VAR 0 6
21884: PPUSH
21885: LD_VAR 0 7
21889: PPUSH
21890: CALL_OW 153
21894: GO 21927
21896: LD_INT 3
21898: DOUBLE
21899: EQUAL
21900: IFTRUE 21904
21902: GO 21926
21904: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21905: LD_VAR 0 1
21909: PPUSH
21910: LD_VAR 0 6
21914: PPUSH
21915: LD_VAR 0 7
21919: PPUSH
21920: CALL_OW 154
21924: GO 21927
21926: POP
// end ;
21927: LD_VAR 0 2
21931: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21932: LD_INT 0
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
// if not unit or not building then
21940: LD_VAR 0 1
21944: NOT
21945: PUSH
21946: LD_VAR 0 2
21950: NOT
21951: OR
21952: IFFALSE 21956
// exit ;
21954: GO 22114
// x := GetX ( building ) ;
21956: LD_ADDR_VAR 0 5
21960: PUSH
21961: LD_VAR 0 2
21965: PPUSH
21966: CALL_OW 250
21970: ST_TO_ADDR
// y := GetY ( building ) ;
21971: LD_ADDR_VAR 0 6
21975: PUSH
21976: LD_VAR 0 2
21980: PPUSH
21981: CALL_OW 251
21985: ST_TO_ADDR
// for i = 0 to 5 do
21986: LD_ADDR_VAR 0 4
21990: PUSH
21991: DOUBLE
21992: LD_INT 0
21994: DEC
21995: ST_TO_ADDR
21996: LD_INT 5
21998: PUSH
21999: FOR_TO
22000: IFFALSE 22112
// begin _x := ShiftX ( x , i , 3 ) ;
22002: LD_ADDR_VAR 0 7
22006: PUSH
22007: LD_VAR 0 5
22011: PPUSH
22012: LD_VAR 0 4
22016: PPUSH
22017: LD_INT 3
22019: PPUSH
22020: CALL_OW 272
22024: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22025: LD_ADDR_VAR 0 8
22029: PUSH
22030: LD_VAR 0 6
22034: PPUSH
22035: LD_VAR 0 4
22039: PPUSH
22040: LD_INT 3
22042: PPUSH
22043: CALL_OW 273
22047: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22048: LD_VAR 0 7
22052: PPUSH
22053: LD_VAR 0 8
22057: PPUSH
22058: CALL_OW 488
22062: NOT
22063: IFFALSE 22067
// continue ;
22065: GO 21999
// if HexInfo ( _x , _y ) = 0 then
22067: LD_VAR 0 7
22071: PPUSH
22072: LD_VAR 0 8
22076: PPUSH
22077: CALL_OW 428
22081: PUSH
22082: LD_INT 0
22084: EQUAL
22085: IFFALSE 22110
// begin ComMoveXY ( unit , _x , _y ) ;
22087: LD_VAR 0 1
22091: PPUSH
22092: LD_VAR 0 7
22096: PPUSH
22097: LD_VAR 0 8
22101: PPUSH
22102: CALL_OW 111
// exit ;
22106: POP
22107: POP
22108: GO 22114
// end ; end ;
22110: GO 21999
22112: POP
22113: POP
// end ;
22114: LD_VAR 0 3
22118: RET
// export function ScanBase ( side , base_area ) ; begin
22119: LD_INT 0
22121: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22122: LD_ADDR_VAR 0 3
22126: PUSH
22127: LD_VAR 0 2
22131: PPUSH
22132: LD_INT 81
22134: PUSH
22135: LD_VAR 0 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PPUSH
22144: CALL_OW 70
22148: ST_TO_ADDR
// end ;
22149: LD_VAR 0 3
22153: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22154: LD_INT 0
22156: PPUSH
22157: PPUSH
22158: PPUSH
22159: PPUSH
// result := false ;
22160: LD_ADDR_VAR 0 2
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// side := GetSide ( unit ) ;
22168: LD_ADDR_VAR 0 3
22172: PUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 255
22182: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22183: LD_ADDR_VAR 0 4
22187: PUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 248
22197: ST_TO_ADDR
// case nat of 1 :
22198: LD_VAR 0 4
22202: PUSH
22203: LD_INT 1
22205: DOUBLE
22206: EQUAL
22207: IFTRUE 22211
22209: GO 22222
22211: POP
// tech := tech_lassight ; 2 :
22212: LD_ADDR_VAR 0 5
22216: PUSH
22217: LD_INT 12
22219: ST_TO_ADDR
22220: GO 22261
22222: LD_INT 2
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22230
22228: GO 22241
22230: POP
// tech := tech_mortar ; 3 :
22231: LD_ADDR_VAR 0 5
22235: PUSH
22236: LD_INT 41
22238: ST_TO_ADDR
22239: GO 22261
22241: LD_INT 3
22243: DOUBLE
22244: EQUAL
22245: IFTRUE 22249
22247: GO 22260
22249: POP
// tech := tech_bazooka ; end ;
22250: LD_ADDR_VAR 0 5
22254: PUSH
22255: LD_INT 44
22257: ST_TO_ADDR
22258: GO 22261
22260: POP
// if Researched ( side , tech ) then
22261: LD_VAR 0 3
22265: PPUSH
22266: LD_VAR 0 5
22270: PPUSH
22271: CALL_OW 325
22275: IFFALSE 22302
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22277: LD_ADDR_VAR 0 2
22281: PUSH
22282: LD_INT 5
22284: PUSH
22285: LD_INT 8
22287: PUSH
22288: LD_INT 9
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: LD_VAR 0 4
22300: ARRAY
22301: ST_TO_ADDR
// end ;
22302: LD_VAR 0 2
22306: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22307: LD_INT 0
22309: PPUSH
22310: PPUSH
22311: PPUSH
// if not mines then
22312: LD_VAR 0 2
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22465
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22321: LD_ADDR_VAR 0 5
22325: PUSH
22326: LD_INT 81
22328: PUSH
22329: LD_VAR 0 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 3
22340: PUSH
22341: LD_INT 21
22343: PUSH
22344: LD_INT 3
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: ST_TO_ADDR
// for i in mines do
22364: LD_ADDR_VAR 0 4
22368: PUSH
22369: LD_VAR 0 2
22373: PUSH
22374: FOR_IN
22375: IFFALSE 22463
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22377: LD_VAR 0 4
22381: PUSH
22382: LD_INT 1
22384: ARRAY
22385: PPUSH
22386: LD_VAR 0 4
22390: PUSH
22391: LD_INT 2
22393: ARRAY
22394: PPUSH
22395: CALL_OW 458
22399: NOT
22400: IFFALSE 22404
// continue ;
22402: GO 22374
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22404: LD_VAR 0 4
22408: PUSH
22409: LD_INT 1
22411: ARRAY
22412: PPUSH
22413: LD_VAR 0 4
22417: PUSH
22418: LD_INT 2
22420: ARRAY
22421: PPUSH
22422: CALL_OW 428
22426: PUSH
22427: LD_VAR 0 5
22431: IN
22432: IFFALSE 22461
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22434: LD_VAR 0 4
22438: PUSH
22439: LD_INT 1
22441: ARRAY
22442: PPUSH
22443: LD_VAR 0 4
22447: PUSH
22448: LD_INT 2
22450: ARRAY
22451: PPUSH
22452: LD_VAR 0 1
22456: PPUSH
22457: CALL_OW 456
// end ;
22461: GO 22374
22463: POP
22464: POP
// end ;
22465: LD_VAR 0 3
22469: RET
// export function Count ( array ) ; var i ; begin
22470: LD_INT 0
22472: PPUSH
22473: PPUSH
// result := 0 ;
22474: LD_ADDR_VAR 0 2
22478: PUSH
22479: LD_INT 0
22481: ST_TO_ADDR
// for i in array do
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_VAR 0 1
22491: PUSH
22492: FOR_IN
22493: IFFALSE 22517
// if i then
22495: LD_VAR 0 3
22499: IFFALSE 22515
// result := result + 1 ;
22501: LD_ADDR_VAR 0 2
22505: PUSH
22506: LD_VAR 0 2
22510: PUSH
22511: LD_INT 1
22513: PLUS
22514: ST_TO_ADDR
22515: GO 22492
22517: POP
22518: POP
// end ;
22519: LD_VAR 0 2
22523: RET
// export function IsEmpty ( building ) ; begin
22524: LD_INT 0
22526: PPUSH
// if not building then
22527: LD_VAR 0 1
22531: NOT
22532: IFFALSE 22536
// exit ;
22534: GO 22579
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22536: LD_ADDR_VAR 0 2
22540: PUSH
22541: LD_VAR 0 1
22545: PUSH
22546: LD_INT 22
22548: PUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 255
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 58
22565: PUSH
22566: EMPTY
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: IN
22578: ST_TO_ADDR
// end ;
22579: LD_VAR 0 2
22583: RET
// export function IsNotFull ( building ) ; begin
22584: LD_INT 0
22586: PPUSH
// if not building then
22587: LD_VAR 0 1
22591: NOT
22592: IFFALSE 22596
// exit ;
22594: GO 22615
// result := UnitsInside ( building ) < 6 ;
22596: LD_ADDR_VAR 0 2
22600: PUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 313
22610: PUSH
22611: LD_INT 6
22613: LESS
22614: ST_TO_ADDR
// end ;
22615: LD_VAR 0 2
22619: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22620: LD_INT 0
22622: PPUSH
22623: PPUSH
22624: PPUSH
22625: PPUSH
// tmp := [ ] ;
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: EMPTY
22632: ST_TO_ADDR
// list := [ ] ;
22633: LD_ADDR_VAR 0 5
22637: PUSH
22638: EMPTY
22639: ST_TO_ADDR
// for i = 16 to 25 do
22640: LD_ADDR_VAR 0 4
22644: PUSH
22645: DOUBLE
22646: LD_INT 16
22648: DEC
22649: ST_TO_ADDR
22650: LD_INT 25
22652: PUSH
22653: FOR_TO
22654: IFFALSE 22727
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22656: LD_ADDR_VAR 0 3
22660: PUSH
22661: LD_VAR 0 3
22665: PUSH
22666: LD_INT 22
22668: PUSH
22669: LD_VAR 0 1
22673: PPUSH
22674: CALL_OW 255
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 91
22685: PUSH
22686: LD_VAR 0 1
22690: PUSH
22691: LD_INT 6
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 30
22701: PUSH
22702: LD_VAR 0 4
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: ADD
22724: ST_TO_ADDR
22725: GO 22653
22727: POP
22728: POP
// for i = 1 to tmp do
22729: LD_ADDR_VAR 0 4
22733: PUSH
22734: DOUBLE
22735: LD_INT 1
22737: DEC
22738: ST_TO_ADDR
22739: LD_VAR 0 3
22743: PUSH
22744: FOR_TO
22745: IFFALSE 22833
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22747: LD_ADDR_VAR 0 5
22751: PUSH
22752: LD_VAR 0 5
22756: PUSH
22757: LD_VAR 0 3
22761: PUSH
22762: LD_VAR 0 4
22766: ARRAY
22767: PPUSH
22768: CALL_OW 266
22772: PUSH
22773: LD_VAR 0 3
22777: PUSH
22778: LD_VAR 0 4
22782: ARRAY
22783: PPUSH
22784: CALL_OW 250
22788: PUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_VAR 0 4
22798: ARRAY
22799: PPUSH
22800: CALL_OW 251
22804: PUSH
22805: LD_VAR 0 3
22809: PUSH
22810: LD_VAR 0 4
22814: ARRAY
22815: PPUSH
22816: CALL_OW 254
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: EMPTY
22828: LIST
22829: ADD
22830: ST_TO_ADDR
22831: GO 22744
22833: POP
22834: POP
// result := list ;
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_VAR 0 5
22844: ST_TO_ADDR
// end ;
22845: LD_VAR 0 2
22849: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22850: LD_INT 0
22852: PPUSH
22853: PPUSH
22854: PPUSH
22855: PPUSH
22856: PPUSH
22857: PPUSH
22858: PPUSH
// if not factory then
22859: LD_VAR 0 1
22863: NOT
22864: IFFALSE 22868
// exit ;
22866: GO 23461
// if control = control_apeman then
22868: LD_VAR 0 4
22872: PUSH
22873: LD_INT 5
22875: EQUAL
22876: IFFALSE 22985
// begin tmp := UnitsInside ( factory ) ;
22878: LD_ADDR_VAR 0 8
22882: PUSH
22883: LD_VAR 0 1
22887: PPUSH
22888: CALL_OW 313
22892: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22893: LD_VAR 0 8
22897: PPUSH
22898: LD_INT 25
22900: PUSH
22901: LD_INT 12
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 72
22912: NOT
22913: IFFALSE 22923
// control := control_manual ;
22915: LD_ADDR_VAR 0 4
22919: PUSH
22920: LD_INT 1
22922: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22923: LD_ADDR_VAR 0 8
22927: PUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL 22620 0 1
22937: ST_TO_ADDR
// if tmp then
22938: LD_VAR 0 8
22942: IFFALSE 22985
// begin for i in tmp do
22944: LD_ADDR_VAR 0 7
22948: PUSH
22949: LD_VAR 0 8
22953: PUSH
22954: FOR_IN
22955: IFFALSE 22983
// if i [ 1 ] = b_ext_radio then
22957: LD_VAR 0 7
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PUSH
22966: LD_INT 22
22968: EQUAL
22969: IFFALSE 22981
// begin control := control_remote ;
22971: LD_ADDR_VAR 0 4
22975: PUSH
22976: LD_INT 2
22978: ST_TO_ADDR
// break ;
22979: GO 22983
// end ;
22981: GO 22954
22983: POP
22984: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22985: LD_VAR 0 1
22989: PPUSH
22990: LD_VAR 0 2
22994: PPUSH
22995: LD_VAR 0 3
22999: PPUSH
23000: LD_VAR 0 4
23004: PPUSH
23005: LD_VAR 0 5
23009: PPUSH
23010: CALL_OW 448
23014: IFFALSE 23049
// begin result := [ chassis , engine , control , weapon ] ;
23016: LD_ADDR_VAR 0 6
23020: PUSH
23021: LD_VAR 0 2
23025: PUSH
23026: LD_VAR 0 3
23030: PUSH
23031: LD_VAR 0 4
23035: PUSH
23036: LD_VAR 0 5
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: ST_TO_ADDR
// exit ;
23047: GO 23461
// end ; _chassis := AvailableChassisList ( factory ) ;
23049: LD_ADDR_VAR 0 9
23053: PUSH
23054: LD_VAR 0 1
23058: PPUSH
23059: CALL_OW 475
23063: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23064: LD_ADDR_VAR 0 11
23068: PUSH
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL_OW 476
23078: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23079: LD_ADDR_VAR 0 12
23083: PUSH
23084: LD_VAR 0 1
23088: PPUSH
23089: CALL_OW 477
23093: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23094: LD_ADDR_VAR 0 10
23098: PUSH
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 478
23108: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23109: LD_VAR 0 9
23113: NOT
23114: PUSH
23115: LD_VAR 0 11
23119: NOT
23120: OR
23121: PUSH
23122: LD_VAR 0 12
23126: NOT
23127: OR
23128: PUSH
23129: LD_VAR 0 10
23133: NOT
23134: OR
23135: IFFALSE 23170
// begin result := [ chassis , engine , control , weapon ] ;
23137: LD_ADDR_VAR 0 6
23141: PUSH
23142: LD_VAR 0 2
23146: PUSH
23147: LD_VAR 0 3
23151: PUSH
23152: LD_VAR 0 4
23156: PUSH
23157: LD_VAR 0 5
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: ST_TO_ADDR
// exit ;
23168: GO 23461
// end ; if not chassis in _chassis then
23170: LD_VAR 0 2
23174: PUSH
23175: LD_VAR 0 9
23179: IN
23180: NOT
23181: IFFALSE 23207
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: LD_VAR 0 9
23192: PUSH
23193: LD_INT 1
23195: PPUSH
23196: LD_VAR 0 9
23200: PPUSH
23201: CALL_OW 12
23205: ARRAY
23206: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23207: LD_VAR 0 2
23211: PPUSH
23212: LD_VAR 0 3
23216: PPUSH
23217: CALL 23466 0 2
23221: NOT
23222: IFFALSE 23281
// repeat engine := _engine [ 1 ] ;
23224: LD_ADDR_VAR 0 3
23228: PUSH
23229: LD_VAR 0 11
23233: PUSH
23234: LD_INT 1
23236: ARRAY
23237: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23238: LD_ADDR_VAR 0 11
23242: PUSH
23243: LD_VAR 0 11
23247: PPUSH
23248: LD_INT 1
23250: PPUSH
23251: CALL_OW 3
23255: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23256: LD_VAR 0 2
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: CALL 23466 0 2
23270: PUSH
23271: LD_VAR 0 11
23275: PUSH
23276: EMPTY
23277: EQUAL
23278: OR
23279: IFFALSE 23224
// if not control in _control then
23281: LD_VAR 0 4
23285: PUSH
23286: LD_VAR 0 12
23290: IN
23291: NOT
23292: IFFALSE 23318
// control := _control [ rand ( 1 , _control ) ] ;
23294: LD_ADDR_VAR 0 4
23298: PUSH
23299: LD_VAR 0 12
23303: PUSH
23304: LD_INT 1
23306: PPUSH
23307: LD_VAR 0 12
23311: PPUSH
23312: CALL_OW 12
23316: ARRAY
23317: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_VAR 0 5
23327: PPUSH
23328: CALL 23686 0 2
23332: NOT
23333: IFFALSE 23392
// repeat weapon := _weapon [ 1 ] ;
23335: LD_ADDR_VAR 0 5
23339: PUSH
23340: LD_VAR 0 10
23344: PUSH
23345: LD_INT 1
23347: ARRAY
23348: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23349: LD_ADDR_VAR 0 10
23353: PUSH
23354: LD_VAR 0 10
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 3
23366: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23367: LD_VAR 0 2
23371: PPUSH
23372: LD_VAR 0 5
23376: PPUSH
23377: CALL 23686 0 2
23381: PUSH
23382: LD_VAR 0 10
23386: PUSH
23387: EMPTY
23388: EQUAL
23389: OR
23390: IFFALSE 23335
// result := [ ] ;
23392: LD_ADDR_VAR 0 6
23396: PUSH
23397: EMPTY
23398: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23399: LD_VAR 0 1
23403: PPUSH
23404: LD_VAR 0 2
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: LD_VAR 0 4
23418: PPUSH
23419: LD_VAR 0 5
23423: PPUSH
23424: CALL_OW 448
23428: IFFALSE 23461
// result := [ chassis , engine , control , weapon ] ;
23430: LD_ADDR_VAR 0 6
23434: PUSH
23435: LD_VAR 0 2
23439: PUSH
23440: LD_VAR 0 3
23444: PUSH
23445: LD_VAR 0 4
23449: PUSH
23450: LD_VAR 0 5
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: ST_TO_ADDR
// end ;
23461: LD_VAR 0 6
23465: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23466: LD_INT 0
23468: PPUSH
// if not chassis or not engine then
23469: LD_VAR 0 1
23473: NOT
23474: PUSH
23475: LD_VAR 0 2
23479: NOT
23480: OR
23481: IFFALSE 23485
// exit ;
23483: GO 23681
// case engine of engine_solar :
23485: LD_VAR 0 2
23489: PUSH
23490: LD_INT 2
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23536
23498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23499: LD_ADDR_VAR 0 3
23503: PUSH
23504: LD_INT 11
23506: PUSH
23507: LD_INT 12
23509: PUSH
23510: LD_INT 13
23512: PUSH
23513: LD_INT 14
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: LD_INT 2
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 23665
23536: LD_INT 1
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23606
23544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23545: LD_ADDR_VAR 0 3
23549: PUSH
23550: LD_INT 11
23552: PUSH
23553: LD_INT 12
23555: PUSH
23556: LD_INT 13
23558: PUSH
23559: LD_INT 14
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: LD_INT 4
23573: PUSH
23574: LD_INT 5
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 23
23582: PUSH
23583: LD_INT 22
23585: PUSH
23586: LD_INT 24
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: ST_TO_ADDR
23604: GO 23665
23606: LD_INT 3
23608: DOUBLE
23609: EQUAL
23610: IFTRUE 23614
23612: GO 23664
23614: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23615: LD_ADDR_VAR 0 3
23619: PUSH
23620: LD_INT 13
23622: PUSH
23623: LD_INT 14
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 3
23631: PUSH
23632: LD_INT 4
23634: PUSH
23635: LD_INT 5
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 22
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 24
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: ST_TO_ADDR
23662: GO 23665
23664: POP
// result := ( chassis in result ) ;
23665: LD_ADDR_VAR 0 3
23669: PUSH
23670: LD_VAR 0 1
23674: PUSH
23675: LD_VAR 0 3
23679: IN
23680: ST_TO_ADDR
// end ;
23681: LD_VAR 0 3
23685: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23686: LD_INT 0
23688: PPUSH
// if not chassis or not weapon then
23689: LD_VAR 0 1
23693: NOT
23694: PUSH
23695: LD_VAR 0 2
23699: NOT
23700: OR
23701: IFFALSE 23705
// exit ;
23703: GO 24731
// case weapon of us_machine_gun :
23705: LD_VAR 0 2
23709: PUSH
23710: LD_INT 2
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23748
23718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: LD_INT 3
23732: PUSH
23733: LD_INT 4
23735: PUSH
23736: LD_INT 5
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
23746: GO 24715
23748: LD_INT 3
23750: DOUBLE
23751: EQUAL
23752: IFTRUE 23756
23754: GO 23786
23756: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: LD_INT 4
23773: PUSH
23774: LD_INT 5
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: ST_TO_ADDR
23784: GO 24715
23786: LD_INT 11
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23794
23792: GO 23824
23794: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23795: LD_ADDR_VAR 0 3
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 3
23808: PUSH
23809: LD_INT 4
23811: PUSH
23812: LD_INT 5
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
23822: GO 24715
23824: LD_INT 4
23826: DOUBLE
23827: EQUAL
23828: IFTRUE 23832
23830: GO 23858
23832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23833: LD_ADDR_VAR 0 3
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: LD_INT 3
23843: PUSH
23844: LD_INT 4
23846: PUSH
23847: LD_INT 5
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
23856: GO 24715
23858: LD_INT 5
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23892
23866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23867: LD_ADDR_VAR 0 3
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: LD_INT 4
23880: PUSH
23881: LD_INT 5
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24715
23892: LD_INT 9
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 23926
23900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23901: LD_ADDR_VAR 0 3
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 3
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: LD_INT 5
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: ST_TO_ADDR
23924: GO 24715
23926: LD_INT 7
23928: DOUBLE
23929: EQUAL
23930: IFTRUE 23934
23932: GO 23960
23934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 3
23945: PUSH
23946: LD_INT 4
23948: PUSH
23949: LD_INT 5
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: ST_TO_ADDR
23958: GO 24715
23960: LD_INT 12
23962: DOUBLE
23963: EQUAL
23964: IFTRUE 23968
23966: GO 23994
23968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23969: LD_ADDR_VAR 0 3
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: LD_INT 4
23982: PUSH
23983: LD_INT 5
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: ST_TO_ADDR
23992: GO 24715
23994: LD_INT 13
23996: DOUBLE
23997: EQUAL
23998: IFTRUE 24002
24000: GO 24028
24002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24003: LD_ADDR_VAR 0 3
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: LD_INT 3
24013: PUSH
24014: LD_INT 4
24016: PUSH
24017: LD_INT 5
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: ST_TO_ADDR
24026: GO 24715
24028: LD_INT 14
24030: DOUBLE
24031: EQUAL
24032: IFTRUE 24036
24034: GO 24054
24036: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24037: LD_ADDR_VAR 0 3
24041: PUSH
24042: LD_INT 4
24044: PUSH
24045: LD_INT 5
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: ST_TO_ADDR
24052: GO 24715
24054: LD_INT 6
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24080
24062: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 4
24070: PUSH
24071: LD_INT 5
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: ST_TO_ADDR
24078: GO 24715
24080: LD_INT 10
24082: DOUBLE
24083: EQUAL
24084: IFTRUE 24088
24086: GO 24106
24088: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24089: LD_ADDR_VAR 0 3
24093: PUSH
24094: LD_INT 4
24096: PUSH
24097: LD_INT 5
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: ST_TO_ADDR
24104: GO 24715
24106: LD_INT 22
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24140
24114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 11
24122: PUSH
24123: LD_INT 12
24125: PUSH
24126: LD_INT 13
24128: PUSH
24129: LD_INT 14
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
24138: GO 24715
24140: LD_INT 23
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24174
24148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_INT 11
24156: PUSH
24157: LD_INT 12
24159: PUSH
24160: LD_INT 13
24162: PUSH
24163: LD_INT 14
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: ST_TO_ADDR
24172: GO 24715
24174: LD_INT 24
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24208
24182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24183: LD_ADDR_VAR 0 3
24187: PUSH
24188: LD_INT 11
24190: PUSH
24191: LD_INT 12
24193: PUSH
24194: LD_INT 13
24196: PUSH
24197: LD_INT 14
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: ST_TO_ADDR
24206: GO 24715
24208: LD_INT 30
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24242
24216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24217: LD_ADDR_VAR 0 3
24221: PUSH
24222: LD_INT 11
24224: PUSH
24225: LD_INT 12
24227: PUSH
24228: LD_INT 13
24230: PUSH
24231: LD_INT 14
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
24240: GO 24715
24242: LD_INT 25
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24268
24250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 13
24258: PUSH
24259: LD_INT 14
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: ST_TO_ADDR
24266: GO 24715
24268: LD_INT 27
24270: DOUBLE
24271: EQUAL
24272: IFTRUE 24276
24274: GO 24294
24276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24277: LD_ADDR_VAR 0 3
24281: PUSH
24282: LD_INT 13
24284: PUSH
24285: LD_INT 14
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: ST_TO_ADDR
24292: GO 24715
24294: LD_INT 28
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24320
24302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24303: LD_ADDR_VAR 0 3
24307: PUSH
24308: LD_INT 13
24310: PUSH
24311: LD_INT 14
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: ST_TO_ADDR
24318: GO 24715
24320: LD_INT 29
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24346
24328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: LD_INT 13
24336: PUSH
24337: LD_INT 14
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: ST_TO_ADDR
24344: GO 24715
24346: LD_INT 31
24348: DOUBLE
24349: EQUAL
24350: IFTRUE 24354
24352: GO 24372
24354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_INT 13
24362: PUSH
24363: LD_INT 14
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: ST_TO_ADDR
24370: GO 24715
24372: LD_INT 26
24374: DOUBLE
24375: EQUAL
24376: IFTRUE 24380
24378: GO 24398
24380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: LD_INT 13
24388: PUSH
24389: LD_INT 14
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: ST_TO_ADDR
24396: GO 24715
24398: LD_INT 42
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24406
24404: GO 24432
24406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24407: LD_ADDR_VAR 0 3
24411: PUSH
24412: LD_INT 21
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_INT 23
24420: PUSH
24421: LD_INT 24
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: ST_TO_ADDR
24430: GO 24715
24432: LD_INT 43
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24466
24440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: LD_INT 21
24448: PUSH
24449: LD_INT 22
24451: PUSH
24452: LD_INT 23
24454: PUSH
24455: LD_INT 24
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: ST_TO_ADDR
24464: GO 24715
24466: LD_INT 44
24468: DOUBLE
24469: EQUAL
24470: IFTRUE 24474
24472: GO 24500
24474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: LD_INT 21
24482: PUSH
24483: LD_INT 22
24485: PUSH
24486: LD_INT 23
24488: PUSH
24489: LD_INT 24
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: ST_TO_ADDR
24498: GO 24715
24500: LD_INT 45
24502: DOUBLE
24503: EQUAL
24504: IFTRUE 24508
24506: GO 24534
24508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_INT 21
24516: PUSH
24517: LD_INT 22
24519: PUSH
24520: LD_INT 23
24522: PUSH
24523: LD_INT 24
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: ST_TO_ADDR
24532: GO 24715
24534: LD_INT 49
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24542
24540: GO 24568
24542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24543: LD_ADDR_VAR 0 3
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 22
24553: PUSH
24554: LD_INT 23
24556: PUSH
24557: LD_INT 24
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: ST_TO_ADDR
24566: GO 24715
24568: LD_INT 51
24570: DOUBLE
24571: EQUAL
24572: IFTRUE 24576
24574: GO 24602
24576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 22
24587: PUSH
24588: LD_INT 23
24590: PUSH
24591: LD_INT 24
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: ST_TO_ADDR
24600: GO 24715
24602: LD_INT 52
24604: DOUBLE
24605: EQUAL
24606: IFTRUE 24610
24608: GO 24636
24610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24611: LD_ADDR_VAR 0 3
24615: PUSH
24616: LD_INT 21
24618: PUSH
24619: LD_INT 22
24621: PUSH
24622: LD_INT 23
24624: PUSH
24625: LD_INT 24
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: ST_TO_ADDR
24634: GO 24715
24636: LD_INT 53
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24662
24644: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_INT 23
24652: PUSH
24653: LD_INT 24
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: ST_TO_ADDR
24660: GO 24715
24662: LD_INT 46
24664: DOUBLE
24665: EQUAL
24666: IFTRUE 24670
24668: GO 24688
24670: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24671: LD_ADDR_VAR 0 3
24675: PUSH
24676: LD_INT 23
24678: PUSH
24679: LD_INT 24
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: ST_TO_ADDR
24686: GO 24715
24688: LD_INT 47
24690: DOUBLE
24691: EQUAL
24692: IFTRUE 24696
24694: GO 24714
24696: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24697: LD_ADDR_VAR 0 3
24701: PUSH
24702: LD_INT 23
24704: PUSH
24705: LD_INT 24
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: ST_TO_ADDR
24712: GO 24715
24714: POP
// result := ( chassis in result ) ;
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: LD_VAR 0 1
24724: PUSH
24725: LD_VAR 0 3
24729: IN
24730: ST_TO_ADDR
// end ;
24731: LD_VAR 0 3
24735: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24736: LD_INT 0
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
// result := array ;
24745: LD_ADDR_VAR 0 5
24749: PUSH
24750: LD_VAR 0 1
24754: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24755: LD_VAR 0 1
24759: NOT
24760: PUSH
24761: LD_VAR 0 2
24765: NOT
24766: OR
24767: PUSH
24768: LD_VAR 0 3
24772: NOT
24773: OR
24774: PUSH
24775: LD_VAR 0 2
24779: PUSH
24780: LD_VAR 0 1
24784: GREATER
24785: OR
24786: PUSH
24787: LD_VAR 0 3
24791: PUSH
24792: LD_VAR 0 1
24796: GREATER
24797: OR
24798: IFFALSE 24802
// exit ;
24800: GO 25098
// if direction then
24802: LD_VAR 0 4
24806: IFFALSE 24870
// begin d := 1 ;
24808: LD_ADDR_VAR 0 9
24812: PUSH
24813: LD_INT 1
24815: ST_TO_ADDR
// if i_from > i_to then
24816: LD_VAR 0 2
24820: PUSH
24821: LD_VAR 0 3
24825: GREATER
24826: IFFALSE 24852
// length := ( array - i_from ) + i_to else
24828: LD_ADDR_VAR 0 11
24832: PUSH
24833: LD_VAR 0 1
24837: PUSH
24838: LD_VAR 0 2
24842: MINUS
24843: PUSH
24844: LD_VAR 0 3
24848: PLUS
24849: ST_TO_ADDR
24850: GO 24868
// length := i_to - i_from ;
24852: LD_ADDR_VAR 0 11
24856: PUSH
24857: LD_VAR 0 3
24861: PUSH
24862: LD_VAR 0 2
24866: MINUS
24867: ST_TO_ADDR
// end else
24868: GO 24931
// begin d := - 1 ;
24870: LD_ADDR_VAR 0 9
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: ST_TO_ADDR
// if i_from > i_to then
24879: LD_VAR 0 2
24883: PUSH
24884: LD_VAR 0 3
24888: GREATER
24889: IFFALSE 24909
// length := i_from - i_to else
24891: LD_ADDR_VAR 0 11
24895: PUSH
24896: LD_VAR 0 2
24900: PUSH
24901: LD_VAR 0 3
24905: MINUS
24906: ST_TO_ADDR
24907: GO 24931
// length := ( array - i_to ) + i_from ;
24909: LD_ADDR_VAR 0 11
24913: PUSH
24914: LD_VAR 0 1
24918: PUSH
24919: LD_VAR 0 3
24923: MINUS
24924: PUSH
24925: LD_VAR 0 2
24929: PLUS
24930: ST_TO_ADDR
// end ; if not length then
24931: LD_VAR 0 11
24935: NOT
24936: IFFALSE 24940
// exit ;
24938: GO 25098
// tmp := array ;
24940: LD_ADDR_VAR 0 10
24944: PUSH
24945: LD_VAR 0 1
24949: ST_TO_ADDR
// for i = 1 to length do
24950: LD_ADDR_VAR 0 6
24954: PUSH
24955: DOUBLE
24956: LD_INT 1
24958: DEC
24959: ST_TO_ADDR
24960: LD_VAR 0 11
24964: PUSH
24965: FOR_TO
24966: IFFALSE 25086
// begin for j = 1 to array do
24968: LD_ADDR_VAR 0 7
24972: PUSH
24973: DOUBLE
24974: LD_INT 1
24976: DEC
24977: ST_TO_ADDR
24978: LD_VAR 0 1
24982: PUSH
24983: FOR_TO
24984: IFFALSE 25072
// begin k := j + d ;
24986: LD_ADDR_VAR 0 8
24990: PUSH
24991: LD_VAR 0 7
24995: PUSH
24996: LD_VAR 0 9
25000: PLUS
25001: ST_TO_ADDR
// if k > array then
25002: LD_VAR 0 8
25006: PUSH
25007: LD_VAR 0 1
25011: GREATER
25012: IFFALSE 25022
// k := 1 ;
25014: LD_ADDR_VAR 0 8
25018: PUSH
25019: LD_INT 1
25021: ST_TO_ADDR
// if not k then
25022: LD_VAR 0 8
25026: NOT
25027: IFFALSE 25039
// k := array ;
25029: LD_ADDR_VAR 0 8
25033: PUSH
25034: LD_VAR 0 1
25038: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25039: LD_ADDR_VAR 0 10
25043: PUSH
25044: LD_VAR 0 10
25048: PPUSH
25049: LD_VAR 0 8
25053: PPUSH
25054: LD_VAR 0 1
25058: PUSH
25059: LD_VAR 0 7
25063: ARRAY
25064: PPUSH
25065: CALL_OW 1
25069: ST_TO_ADDR
// end ;
25070: GO 24983
25072: POP
25073: POP
// array := tmp ;
25074: LD_ADDR_VAR 0 1
25078: PUSH
25079: LD_VAR 0 10
25083: ST_TO_ADDR
// end ;
25084: GO 24965
25086: POP
25087: POP
// result := array ;
25088: LD_ADDR_VAR 0 5
25092: PUSH
25093: LD_VAR 0 1
25097: ST_TO_ADDR
// end ;
25098: LD_VAR 0 5
25102: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25103: LD_INT 0
25105: PPUSH
25106: PPUSH
// result := 0 ;
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_INT 0
25114: ST_TO_ADDR
// if not array or not value in array then
25115: LD_VAR 0 1
25119: NOT
25120: PUSH
25121: LD_VAR 0 2
25125: PUSH
25126: LD_VAR 0 1
25130: IN
25131: NOT
25132: OR
25133: IFFALSE 25137
// exit ;
25135: GO 25191
// for i = 1 to array do
25137: LD_ADDR_VAR 0 4
25141: PUSH
25142: DOUBLE
25143: LD_INT 1
25145: DEC
25146: ST_TO_ADDR
25147: LD_VAR 0 1
25151: PUSH
25152: FOR_TO
25153: IFFALSE 25189
// if value = array [ i ] then
25155: LD_VAR 0 2
25159: PUSH
25160: LD_VAR 0 1
25164: PUSH
25165: LD_VAR 0 4
25169: ARRAY
25170: EQUAL
25171: IFFALSE 25187
// begin result := i ;
25173: LD_ADDR_VAR 0 3
25177: PUSH
25178: LD_VAR 0 4
25182: ST_TO_ADDR
// exit ;
25183: POP
25184: POP
25185: GO 25191
// end ;
25187: GO 25152
25189: POP
25190: POP
// end ;
25191: LD_VAR 0 3
25195: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25196: LD_INT 0
25198: PPUSH
// vc_chassis := chassis ;
25199: LD_ADDR_OWVAR 37
25203: PUSH
25204: LD_VAR 0 1
25208: ST_TO_ADDR
// vc_engine := engine ;
25209: LD_ADDR_OWVAR 39
25213: PUSH
25214: LD_VAR 0 2
25218: ST_TO_ADDR
// vc_control := control ;
25219: LD_ADDR_OWVAR 38
25223: PUSH
25224: LD_VAR 0 3
25228: ST_TO_ADDR
// vc_weapon := weapon ;
25229: LD_ADDR_OWVAR 40
25233: PUSH
25234: LD_VAR 0 4
25238: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25239: LD_ADDR_OWVAR 41
25243: PUSH
25244: LD_VAR 0 5
25248: ST_TO_ADDR
// end ;
25249: LD_VAR 0 6
25253: RET
// export function WantPlant ( unit ) ; var task ; begin
25254: LD_INT 0
25256: PPUSH
25257: PPUSH
// result := false ;
25258: LD_ADDR_VAR 0 2
25262: PUSH
25263: LD_INT 0
25265: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25266: LD_ADDR_VAR 0 3
25270: PUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 437
25280: ST_TO_ADDR
// if task then
25281: LD_VAR 0 3
25285: IFFALSE 25313
// if task [ 1 ] [ 1 ] = p then
25287: LD_VAR 0 3
25291: PUSH
25292: LD_INT 1
25294: ARRAY
25295: PUSH
25296: LD_INT 1
25298: ARRAY
25299: PUSH
25300: LD_STRING p
25302: EQUAL
25303: IFFALSE 25313
// result := true ;
25305: LD_ADDR_VAR 0 2
25309: PUSH
25310: LD_INT 1
25312: ST_TO_ADDR
// end ;
25313: LD_VAR 0 2
25317: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25318: LD_INT 0
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
// if pos < 1 then
25324: LD_VAR 0 2
25328: PUSH
25329: LD_INT 1
25331: LESS
25332: IFFALSE 25336
// exit ;
25334: GO 25639
// if pos = 1 then
25336: LD_VAR 0 2
25340: PUSH
25341: LD_INT 1
25343: EQUAL
25344: IFFALSE 25377
// result := Replace ( arr , pos [ 1 ] , value ) else
25346: LD_ADDR_VAR 0 4
25350: PUSH
25351: LD_VAR 0 1
25355: PPUSH
25356: LD_VAR 0 2
25360: PUSH
25361: LD_INT 1
25363: ARRAY
25364: PPUSH
25365: LD_VAR 0 3
25369: PPUSH
25370: CALL_OW 1
25374: ST_TO_ADDR
25375: GO 25639
// begin tmp := arr ;
25377: LD_ADDR_VAR 0 6
25381: PUSH
25382: LD_VAR 0 1
25386: ST_TO_ADDR
// s_arr := [ tmp ] ;
25387: LD_ADDR_VAR 0 7
25391: PUSH
25392: LD_VAR 0 6
25396: PUSH
25397: EMPTY
25398: LIST
25399: ST_TO_ADDR
// for i = 1 to pos - 1 do
25400: LD_ADDR_VAR 0 5
25404: PUSH
25405: DOUBLE
25406: LD_INT 1
25408: DEC
25409: ST_TO_ADDR
25410: LD_VAR 0 2
25414: PUSH
25415: LD_INT 1
25417: MINUS
25418: PUSH
25419: FOR_TO
25420: IFFALSE 25465
// begin tmp := tmp [ pos [ i ] ] ;
25422: LD_ADDR_VAR 0 6
25426: PUSH
25427: LD_VAR 0 6
25431: PUSH
25432: LD_VAR 0 2
25436: PUSH
25437: LD_VAR 0 5
25441: ARRAY
25442: ARRAY
25443: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25444: LD_ADDR_VAR 0 7
25448: PUSH
25449: LD_VAR 0 7
25453: PUSH
25454: LD_VAR 0 6
25458: PUSH
25459: EMPTY
25460: LIST
25461: ADD
25462: ST_TO_ADDR
// end ;
25463: GO 25419
25465: POP
25466: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25467: LD_ADDR_VAR 0 6
25471: PUSH
25472: LD_VAR 0 6
25476: PPUSH
25477: LD_VAR 0 2
25481: PUSH
25482: LD_VAR 0 2
25486: ARRAY
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: CALL_OW 1
25497: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25498: LD_ADDR_VAR 0 7
25502: PUSH
25503: LD_VAR 0 7
25507: PPUSH
25508: LD_VAR 0 7
25512: PPUSH
25513: LD_VAR 0 6
25517: PPUSH
25518: CALL_OW 1
25522: ST_TO_ADDR
// for i = s_arr downto 2 do
25523: LD_ADDR_VAR 0 5
25527: PUSH
25528: DOUBLE
25529: LD_VAR 0 7
25533: INC
25534: ST_TO_ADDR
25535: LD_INT 2
25537: PUSH
25538: FOR_DOWNTO
25539: IFFALSE 25623
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25541: LD_ADDR_VAR 0 6
25545: PUSH
25546: LD_VAR 0 7
25550: PUSH
25551: LD_VAR 0 5
25555: PUSH
25556: LD_INT 1
25558: MINUS
25559: ARRAY
25560: PPUSH
25561: LD_VAR 0 2
25565: PUSH
25566: LD_VAR 0 5
25570: PUSH
25571: LD_INT 1
25573: MINUS
25574: ARRAY
25575: PPUSH
25576: LD_VAR 0 7
25580: PUSH
25581: LD_VAR 0 5
25585: ARRAY
25586: PPUSH
25587: CALL_OW 1
25591: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25592: LD_ADDR_VAR 0 7
25596: PUSH
25597: LD_VAR 0 7
25601: PPUSH
25602: LD_VAR 0 5
25606: PUSH
25607: LD_INT 1
25609: MINUS
25610: PPUSH
25611: LD_VAR 0 6
25615: PPUSH
25616: CALL_OW 1
25620: ST_TO_ADDR
// end ;
25621: GO 25538
25623: POP
25624: POP
// result := s_arr [ 1 ] ;
25625: LD_ADDR_VAR 0 4
25629: PUSH
25630: LD_VAR 0 7
25634: PUSH
25635: LD_INT 1
25637: ARRAY
25638: ST_TO_ADDR
// end ; end ;
25639: LD_VAR 0 4
25643: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25644: LD_INT 0
25646: PPUSH
25647: PPUSH
// if not list then
25648: LD_VAR 0 1
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 25748
// i := list [ pos1 ] ;
25657: LD_ADDR_VAR 0 5
25661: PUSH
25662: LD_VAR 0 1
25666: PUSH
25667: LD_VAR 0 2
25671: ARRAY
25672: ST_TO_ADDR
// if not i then
25673: LD_VAR 0 5
25677: NOT
25678: IFFALSE 25682
// exit ;
25680: GO 25748
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25682: LD_ADDR_VAR 0 1
25686: PUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: LD_VAR 0 2
25696: PPUSH
25697: LD_VAR 0 1
25701: PUSH
25702: LD_VAR 0 3
25706: ARRAY
25707: PPUSH
25708: CALL_OW 1
25712: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25713: LD_ADDR_VAR 0 1
25717: PUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: LD_VAR 0 3
25727: PPUSH
25728: LD_VAR 0 5
25732: PPUSH
25733: CALL_OW 1
25737: ST_TO_ADDR
// result := list ;
25738: LD_ADDR_VAR 0 4
25742: PUSH
25743: LD_VAR 0 1
25747: ST_TO_ADDR
// end ;
25748: LD_VAR 0 4
25752: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25753: LD_INT 0
25755: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25756: LD_ADDR_VAR 0 5
25760: PUSH
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 250
25770: PPUSH
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 251
25780: PPUSH
25781: LD_VAR 0 2
25785: PPUSH
25786: LD_VAR 0 3
25790: PPUSH
25791: LD_VAR 0 4
25795: PPUSH
25796: CALL 25806 0 5
25800: ST_TO_ADDR
// end ;
25801: LD_VAR 0 5
25805: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
// if not list then
25812: LD_VAR 0 3
25816: NOT
25817: IFFALSE 25821
// exit ;
25819: GO 26209
// result := [ ] ;
25821: LD_ADDR_VAR 0 6
25825: PUSH
25826: EMPTY
25827: ST_TO_ADDR
// for i in list do
25828: LD_ADDR_VAR 0 7
25832: PUSH
25833: LD_VAR 0 3
25837: PUSH
25838: FOR_IN
25839: IFFALSE 26041
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25841: LD_ADDR_VAR 0 9
25845: PUSH
25846: LD_VAR 0 7
25850: PPUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: LD_VAR 0 2
25860: PPUSH
25861: CALL_OW 297
25865: ST_TO_ADDR
// if not result then
25866: LD_VAR 0 6
25870: NOT
25871: IFFALSE 25897
// result := [ [ i , tmp ] ] else
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_VAR 0 7
25882: PUSH
25883: LD_VAR 0 9
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: ST_TO_ADDR
25895: GO 26039
// begin if result [ result ] [ 2 ] < tmp then
25897: LD_VAR 0 6
25901: PUSH
25902: LD_VAR 0 6
25906: ARRAY
25907: PUSH
25908: LD_INT 2
25910: ARRAY
25911: PUSH
25912: LD_VAR 0 9
25916: LESS
25917: IFFALSE 25959
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25919: LD_ADDR_VAR 0 6
25923: PUSH
25924: LD_VAR 0 6
25928: PPUSH
25929: LD_VAR 0 6
25933: PUSH
25934: LD_INT 1
25936: PLUS
25937: PPUSH
25938: LD_VAR 0 7
25942: PUSH
25943: LD_VAR 0 9
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL_OW 2
25956: ST_TO_ADDR
25957: GO 26039
// for j = 1 to result do
25959: LD_ADDR_VAR 0 8
25963: PUSH
25964: DOUBLE
25965: LD_INT 1
25967: DEC
25968: ST_TO_ADDR
25969: LD_VAR 0 6
25973: PUSH
25974: FOR_TO
25975: IFFALSE 26037
// begin if tmp < result [ j ] [ 2 ] then
25977: LD_VAR 0 9
25981: PUSH
25982: LD_VAR 0 6
25986: PUSH
25987: LD_VAR 0 8
25991: ARRAY
25992: PUSH
25993: LD_INT 2
25995: ARRAY
25996: LESS
25997: IFFALSE 26035
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25999: LD_ADDR_VAR 0 6
26003: PUSH
26004: LD_VAR 0 6
26008: PPUSH
26009: LD_VAR 0 8
26013: PPUSH
26014: LD_VAR 0 7
26018: PUSH
26019: LD_VAR 0 9
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 2
26032: ST_TO_ADDR
// break ;
26033: GO 26037
// end ; end ;
26035: GO 25974
26037: POP
26038: POP
// end ; end ;
26039: GO 25838
26041: POP
26042: POP
// if result and not asc then
26043: LD_VAR 0 6
26047: PUSH
26048: LD_VAR 0 4
26052: NOT
26053: AND
26054: IFFALSE 26129
// begin tmp := result ;
26056: LD_ADDR_VAR 0 9
26060: PUSH
26061: LD_VAR 0 6
26065: ST_TO_ADDR
// for i = tmp downto 1 do
26066: LD_ADDR_VAR 0 7
26070: PUSH
26071: DOUBLE
26072: LD_VAR 0 9
26076: INC
26077: ST_TO_ADDR
26078: LD_INT 1
26080: PUSH
26081: FOR_DOWNTO
26082: IFFALSE 26127
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26084: LD_ADDR_VAR 0 6
26088: PUSH
26089: LD_VAR 0 6
26093: PPUSH
26094: LD_VAR 0 9
26098: PUSH
26099: LD_VAR 0 7
26103: MINUS
26104: PUSH
26105: LD_INT 1
26107: PLUS
26108: PPUSH
26109: LD_VAR 0 9
26113: PUSH
26114: LD_VAR 0 7
26118: ARRAY
26119: PPUSH
26120: CALL_OW 1
26124: ST_TO_ADDR
26125: GO 26081
26127: POP
26128: POP
// end ; tmp := [ ] ;
26129: LD_ADDR_VAR 0 9
26133: PUSH
26134: EMPTY
26135: ST_TO_ADDR
// if mode then
26136: LD_VAR 0 5
26140: IFFALSE 26209
// begin for i = 1 to result do
26142: LD_ADDR_VAR 0 7
26146: PUSH
26147: DOUBLE
26148: LD_INT 1
26150: DEC
26151: ST_TO_ADDR
26152: LD_VAR 0 6
26156: PUSH
26157: FOR_TO
26158: IFFALSE 26197
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26160: LD_ADDR_VAR 0 9
26164: PUSH
26165: LD_VAR 0 9
26169: PPUSH
26170: LD_VAR 0 7
26174: PPUSH
26175: LD_VAR 0 6
26179: PUSH
26180: LD_VAR 0 7
26184: ARRAY
26185: PUSH
26186: LD_INT 1
26188: ARRAY
26189: PPUSH
26190: CALL_OW 1
26194: ST_TO_ADDR
26195: GO 26157
26197: POP
26198: POP
// result := tmp ;
26199: LD_ADDR_VAR 0 6
26203: PUSH
26204: LD_VAR 0 9
26208: ST_TO_ADDR
// end ; end ;
26209: LD_VAR 0 6
26213: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26214: LD_INT 0
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: EMPTY
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: ST_TO_ADDR
// if not x or not y then
26244: LD_VAR 0 2
26248: NOT
26249: PUSH
26250: LD_VAR 0 3
26254: NOT
26255: OR
26256: IFFALSE 26260
// exit ;
26258: GO 27906
// if not range then
26260: LD_VAR 0 4
26264: NOT
26265: IFFALSE 26275
// range := 10 ;
26267: LD_ADDR_VAR 0 4
26271: PUSH
26272: LD_INT 10
26274: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26275: LD_ADDR_VAR 0 8
26279: PUSH
26280: LD_INT 81
26282: PUSH
26283: LD_VAR 0 1
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 92
26294: PUSH
26295: LD_VAR 0 2
26299: PUSH
26300: LD_VAR 0 3
26304: PUSH
26305: LD_VAR 0 4
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 3
26318: PUSH
26319: LD_INT 21
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: PPUSH
26338: CALL_OW 69
26342: ST_TO_ADDR
// if not tmp then
26343: LD_VAR 0 8
26347: NOT
26348: IFFALSE 26352
// exit ;
26350: GO 27906
// for i in tmp do
26352: LD_ADDR_VAR 0 6
26356: PUSH
26357: LD_VAR 0 8
26361: PUSH
26362: FOR_IN
26363: IFFALSE 27881
// begin points := [ 0 , 0 , 0 ] ;
26365: LD_ADDR_VAR 0 9
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: LIST
26383: ST_TO_ADDR
// bpoints := 1 ;
26384: LD_ADDR_VAR 0 10
26388: PUSH
26389: LD_INT 1
26391: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26392: LD_VAR 0 6
26396: PPUSH
26397: CALL_OW 247
26401: PUSH
26402: LD_INT 1
26404: DOUBLE
26405: EQUAL
26406: IFTRUE 26410
26408: GO 26988
26410: POP
// begin if GetClass ( i ) = 1 then
26411: LD_VAR 0 6
26415: PPUSH
26416: CALL_OW 257
26420: PUSH
26421: LD_INT 1
26423: EQUAL
26424: IFFALSE 26445
// points := [ 10 , 5 , 3 ] ;
26426: LD_ADDR_VAR 0 9
26430: PUSH
26431: LD_INT 10
26433: PUSH
26434: LD_INT 5
26436: PUSH
26437: LD_INT 3
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26445: LD_VAR 0 6
26449: PPUSH
26450: CALL_OW 257
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: LD_INT 4
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: IN
26469: IFFALSE 26490
// points := [ 3 , 2 , 1 ] ;
26471: LD_ADDR_VAR 0 9
26475: PUSH
26476: LD_INT 3
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26490: LD_VAR 0 6
26494: PPUSH
26495: CALL_OW 257
26499: PUSH
26500: LD_INT 5
26502: EQUAL
26503: IFFALSE 26524
// points := [ 130 , 5 , 2 ] ;
26505: LD_ADDR_VAR 0 9
26509: PUSH
26510: LD_INT 130
26512: PUSH
26513: LD_INT 5
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: LIST
26523: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26524: LD_VAR 0 6
26528: PPUSH
26529: CALL_OW 257
26533: PUSH
26534: LD_INT 8
26536: EQUAL
26537: IFFALSE 26558
// points := [ 35 , 35 , 30 ] ;
26539: LD_ADDR_VAR 0 9
26543: PUSH
26544: LD_INT 35
26546: PUSH
26547: LD_INT 35
26549: PUSH
26550: LD_INT 30
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26558: LD_VAR 0 6
26562: PPUSH
26563: CALL_OW 257
26567: PUSH
26568: LD_INT 9
26570: EQUAL
26571: IFFALSE 26592
// points := [ 20 , 55 , 40 ] ;
26573: LD_ADDR_VAR 0 9
26577: PUSH
26578: LD_INT 20
26580: PUSH
26581: LD_INT 55
26583: PUSH
26584: LD_INT 40
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26592: LD_VAR 0 6
26596: PPUSH
26597: CALL_OW 257
26601: PUSH
26602: LD_INT 12
26604: PUSH
26605: LD_INT 16
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: IN
26612: IFFALSE 26633
// points := [ 5 , 3 , 2 ] ;
26614: LD_ADDR_VAR 0 9
26618: PUSH
26619: LD_INT 5
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26633: LD_VAR 0 6
26637: PPUSH
26638: CALL_OW 257
26642: PUSH
26643: LD_INT 17
26645: EQUAL
26646: IFFALSE 26667
// points := [ 100 , 50 , 75 ] ;
26648: LD_ADDR_VAR 0 9
26652: PUSH
26653: LD_INT 100
26655: PUSH
26656: LD_INT 50
26658: PUSH
26659: LD_INT 75
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26667: LD_VAR 0 6
26671: PPUSH
26672: CALL_OW 257
26676: PUSH
26677: LD_INT 15
26679: EQUAL
26680: IFFALSE 26701
// points := [ 10 , 5 , 3 ] ;
26682: LD_ADDR_VAR 0 9
26686: PUSH
26687: LD_INT 10
26689: PUSH
26690: LD_INT 5
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26701: LD_VAR 0 6
26705: PPUSH
26706: CALL_OW 257
26710: PUSH
26711: LD_INT 14
26713: EQUAL
26714: IFFALSE 26735
// points := [ 10 , 0 , 0 ] ;
26716: LD_ADDR_VAR 0 9
26720: PUSH
26721: LD_INT 10
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26735: LD_VAR 0 6
26739: PPUSH
26740: CALL_OW 257
26744: PUSH
26745: LD_INT 11
26747: EQUAL
26748: IFFALSE 26769
// points := [ 30 , 10 , 5 ] ;
26750: LD_ADDR_VAR 0 9
26754: PUSH
26755: LD_INT 30
26757: PUSH
26758: LD_INT 10
26760: PUSH
26761: LD_INT 5
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26769: LD_VAR 0 1
26773: PPUSH
26774: LD_INT 5
26776: PPUSH
26777: CALL_OW 321
26781: PUSH
26782: LD_INT 2
26784: EQUAL
26785: IFFALSE 26802
// bpoints := bpoints * 1.8 ;
26787: LD_ADDR_VAR 0 10
26791: PUSH
26792: LD_VAR 0 10
26796: PUSH
26797: LD_REAL  1.80000000000000E+0000
26800: MUL
26801: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26802: LD_VAR 0 6
26806: PPUSH
26807: CALL_OW 257
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: LD_INT 3
26820: PUSH
26821: LD_INT 4
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: IN
26830: PUSH
26831: LD_VAR 0 1
26835: PPUSH
26836: LD_INT 51
26838: PPUSH
26839: CALL_OW 321
26843: PUSH
26844: LD_INT 2
26846: EQUAL
26847: AND
26848: IFFALSE 26865
// bpoints := bpoints * 1.2 ;
26850: LD_ADDR_VAR 0 10
26854: PUSH
26855: LD_VAR 0 10
26859: PUSH
26860: LD_REAL  1.20000000000000E+0000
26863: MUL
26864: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26865: LD_VAR 0 6
26869: PPUSH
26870: CALL_OW 257
26874: PUSH
26875: LD_INT 5
26877: PUSH
26878: LD_INT 7
26880: PUSH
26881: LD_INT 9
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: LIST
26888: IN
26889: PUSH
26890: LD_VAR 0 1
26894: PPUSH
26895: LD_INT 52
26897: PPUSH
26898: CALL_OW 321
26902: PUSH
26903: LD_INT 2
26905: EQUAL
26906: AND
26907: IFFALSE 26924
// bpoints := bpoints * 1.5 ;
26909: LD_ADDR_VAR 0 10
26913: PUSH
26914: LD_VAR 0 10
26918: PUSH
26919: LD_REAL  1.50000000000000E+0000
26922: MUL
26923: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26924: LD_VAR 0 1
26928: PPUSH
26929: LD_INT 66
26931: PPUSH
26932: CALL_OW 321
26936: PUSH
26937: LD_INT 2
26939: EQUAL
26940: IFFALSE 26957
// bpoints := bpoints * 1.1 ;
26942: LD_ADDR_VAR 0 10
26946: PUSH
26947: LD_VAR 0 10
26951: PUSH
26952: LD_REAL  1.10000000000000E+0000
26955: MUL
26956: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26957: LD_ADDR_VAR 0 10
26961: PUSH
26962: LD_VAR 0 10
26966: PUSH
26967: LD_VAR 0 6
26971: PPUSH
26972: LD_INT 1
26974: PPUSH
26975: CALL_OW 259
26979: PUSH
26980: LD_REAL  1.15000000000000E+0000
26983: MUL
26984: MUL
26985: ST_TO_ADDR
// end ; unit_vehicle :
26986: GO 27810
26988: LD_INT 2
26990: DOUBLE
26991: EQUAL
26992: IFTRUE 26996
26994: GO 27798
26996: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26997: LD_VAR 0 6
27001: PPUSH
27002: CALL_OW 264
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 42
27012: PUSH
27013: LD_INT 24
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: IN
27021: IFFALSE 27042
// points := [ 25 , 5 , 3 ] ;
27023: LD_ADDR_VAR 0 9
27027: PUSH
27028: LD_INT 25
27030: PUSH
27031: LD_INT 5
27033: PUSH
27034: LD_INT 3
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27042: LD_VAR 0 6
27046: PPUSH
27047: CALL_OW 264
27051: PUSH
27052: LD_INT 4
27054: PUSH
27055: LD_INT 43
27057: PUSH
27058: LD_INT 25
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: LIST
27065: IN
27066: IFFALSE 27087
// points := [ 40 , 15 , 5 ] ;
27068: LD_ADDR_VAR 0 9
27072: PUSH
27073: LD_INT 40
27075: PUSH
27076: LD_INT 15
27078: PUSH
27079: LD_INT 5
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27087: LD_VAR 0 6
27091: PPUSH
27092: CALL_OW 264
27096: PUSH
27097: LD_INT 3
27099: PUSH
27100: LD_INT 23
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: IN
27107: IFFALSE 27128
// points := [ 7 , 25 , 8 ] ;
27109: LD_ADDR_VAR 0 9
27113: PUSH
27114: LD_INT 7
27116: PUSH
27117: LD_INT 25
27119: PUSH
27120: LD_INT 8
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27128: LD_VAR 0 6
27132: PPUSH
27133: CALL_OW 264
27137: PUSH
27138: LD_INT 5
27140: PUSH
27141: LD_INT 27
27143: PUSH
27144: LD_INT 44
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: LIST
27151: IN
27152: IFFALSE 27173
// points := [ 14 , 50 , 16 ] ;
27154: LD_ADDR_VAR 0 9
27158: PUSH
27159: LD_INT 14
27161: PUSH
27162: LD_INT 50
27164: PUSH
27165: LD_INT 16
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27173: LD_VAR 0 6
27177: PPUSH
27178: CALL_OW 264
27182: PUSH
27183: LD_INT 6
27185: PUSH
27186: LD_INT 46
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: IN
27193: IFFALSE 27214
// points := [ 32 , 120 , 70 ] ;
27195: LD_ADDR_VAR 0 9
27199: PUSH
27200: LD_INT 32
27202: PUSH
27203: LD_INT 120
27205: PUSH
27206: LD_INT 70
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 264
27223: PUSH
27224: LD_INT 7
27226: PUSH
27227: LD_INT 28
27229: PUSH
27230: LD_INT 45
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: IN
27238: IFFALSE 27259
// points := [ 35 , 20 , 45 ] ;
27240: LD_ADDR_VAR 0 9
27244: PUSH
27245: LD_INT 35
27247: PUSH
27248: LD_INT 20
27250: PUSH
27251: LD_INT 45
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27259: LD_VAR 0 6
27263: PPUSH
27264: CALL_OW 264
27268: PUSH
27269: LD_INT 47
27271: PUSH
27272: EMPTY
27273: LIST
27274: IN
27275: IFFALSE 27296
// points := [ 67 , 45 , 75 ] ;
27277: LD_ADDR_VAR 0 9
27281: PUSH
27282: LD_INT 67
27284: PUSH
27285: LD_INT 45
27287: PUSH
27288: LD_INT 75
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: LIST
27295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27296: LD_VAR 0 6
27300: PPUSH
27301: CALL_OW 264
27305: PUSH
27306: LD_INT 26
27308: PUSH
27309: EMPTY
27310: LIST
27311: IN
27312: IFFALSE 27333
// points := [ 120 , 30 , 80 ] ;
27314: LD_ADDR_VAR 0 9
27318: PUSH
27319: LD_INT 120
27321: PUSH
27322: LD_INT 30
27324: PUSH
27325: LD_INT 80
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27333: LD_VAR 0 6
27337: PPUSH
27338: CALL_OW 264
27342: PUSH
27343: LD_INT 22
27345: PUSH
27346: EMPTY
27347: LIST
27348: IN
27349: IFFALSE 27370
// points := [ 40 , 1 , 1 ] ;
27351: LD_ADDR_VAR 0 9
27355: PUSH
27356: LD_INT 40
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27370: LD_VAR 0 6
27374: PPUSH
27375: CALL_OW 264
27379: PUSH
27380: LD_INT 29
27382: PUSH
27383: EMPTY
27384: LIST
27385: IN
27386: IFFALSE 27407
// points := [ 70 , 200 , 400 ] ;
27388: LD_ADDR_VAR 0 9
27392: PUSH
27393: LD_INT 70
27395: PUSH
27396: LD_INT 200
27398: PUSH
27399: LD_INT 400
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27407: LD_VAR 0 6
27411: PPUSH
27412: CALL_OW 264
27416: PUSH
27417: LD_INT 14
27419: PUSH
27420: LD_INT 53
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: IN
27427: IFFALSE 27448
// points := [ 40 , 10 , 20 ] ;
27429: LD_ADDR_VAR 0 9
27433: PUSH
27434: LD_INT 40
27436: PUSH
27437: LD_INT 10
27439: PUSH
27440: LD_INT 20
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27448: LD_VAR 0 6
27452: PPUSH
27453: CALL_OW 264
27457: PUSH
27458: LD_INT 9
27460: PUSH
27461: EMPTY
27462: LIST
27463: IN
27464: IFFALSE 27485
// points := [ 5 , 70 , 20 ] ;
27466: LD_ADDR_VAR 0 9
27470: PUSH
27471: LD_INT 5
27473: PUSH
27474: LD_INT 70
27476: PUSH
27477: LD_INT 20
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27485: LD_VAR 0 6
27489: PPUSH
27490: CALL_OW 264
27494: PUSH
27495: LD_INT 10
27497: PUSH
27498: EMPTY
27499: LIST
27500: IN
27501: IFFALSE 27522
// points := [ 35 , 110 , 70 ] ;
27503: LD_ADDR_VAR 0 9
27507: PUSH
27508: LD_INT 35
27510: PUSH
27511: LD_INT 110
27513: PUSH
27514: LD_INT 70
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27522: LD_VAR 0 6
27526: PPUSH
27527: CALL_OW 265
27531: PUSH
27532: LD_INT 25
27534: EQUAL
27535: IFFALSE 27556
// points := [ 80 , 65 , 100 ] ;
27537: LD_ADDR_VAR 0 9
27541: PUSH
27542: LD_INT 80
27544: PUSH
27545: LD_INT 65
27547: PUSH
27548: LD_INT 100
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27556: LD_VAR 0 6
27560: PPUSH
27561: CALL_OW 263
27565: PUSH
27566: LD_INT 1
27568: EQUAL
27569: IFFALSE 27604
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27571: LD_ADDR_VAR 0 10
27575: PUSH
27576: LD_VAR 0 10
27580: PUSH
27581: LD_VAR 0 6
27585: PPUSH
27586: CALL_OW 311
27590: PPUSH
27591: LD_INT 3
27593: PPUSH
27594: CALL_OW 259
27598: PUSH
27599: LD_INT 4
27601: MUL
27602: MUL
27603: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27604: LD_VAR 0 6
27608: PPUSH
27609: CALL_OW 263
27613: PUSH
27614: LD_INT 2
27616: EQUAL
27617: IFFALSE 27668
// begin j := IsControledBy ( i ) ;
27619: LD_ADDR_VAR 0 7
27623: PUSH
27624: LD_VAR 0 6
27628: PPUSH
27629: CALL_OW 312
27633: ST_TO_ADDR
// if j then
27634: LD_VAR 0 7
27638: IFFALSE 27668
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27640: LD_ADDR_VAR 0 10
27644: PUSH
27645: LD_VAR 0 10
27649: PUSH
27650: LD_VAR 0 7
27654: PPUSH
27655: LD_INT 3
27657: PPUSH
27658: CALL_OW 259
27662: PUSH
27663: LD_INT 3
27665: MUL
27666: MUL
27667: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27668: LD_VAR 0 6
27672: PPUSH
27673: CALL_OW 264
27677: PUSH
27678: LD_INT 5
27680: PUSH
27681: LD_INT 6
27683: PUSH
27684: LD_INT 46
27686: PUSH
27687: LD_INT 44
27689: PUSH
27690: LD_INT 47
27692: PUSH
27693: LD_INT 45
27695: PUSH
27696: LD_INT 28
27698: PUSH
27699: LD_INT 7
27701: PUSH
27702: LD_INT 27
27704: PUSH
27705: LD_INT 29
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: IN
27720: PUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: LD_INT 52
27728: PPUSH
27729: CALL_OW 321
27733: PUSH
27734: LD_INT 2
27736: EQUAL
27737: AND
27738: IFFALSE 27755
// bpoints := bpoints * 1.2 ;
27740: LD_ADDR_VAR 0 10
27744: PUSH
27745: LD_VAR 0 10
27749: PUSH
27750: LD_REAL  1.20000000000000E+0000
27753: MUL
27754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27755: LD_VAR 0 6
27759: PPUSH
27760: CALL_OW 264
27764: PUSH
27765: LD_INT 6
27767: PUSH
27768: LD_INT 46
27770: PUSH
27771: LD_INT 47
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: IN
27779: IFFALSE 27796
// bpoints := bpoints * 1.2 ;
27781: LD_ADDR_VAR 0 10
27785: PUSH
27786: LD_VAR 0 10
27790: PUSH
27791: LD_REAL  1.20000000000000E+0000
27794: MUL
27795: ST_TO_ADDR
// end ; unit_building :
27796: GO 27810
27798: LD_INT 3
27800: DOUBLE
27801: EQUAL
27802: IFTRUE 27806
27804: GO 27809
27806: POP
// ; end ;
27807: GO 27810
27809: POP
// for j = 1 to 3 do
27810: LD_ADDR_VAR 0 7
27814: PUSH
27815: DOUBLE
27816: LD_INT 1
27818: DEC
27819: ST_TO_ADDR
27820: LD_INT 3
27822: PUSH
27823: FOR_TO
27824: IFFALSE 27877
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27826: LD_ADDR_VAR 0 5
27830: PUSH
27831: LD_VAR 0 5
27835: PPUSH
27836: LD_VAR 0 7
27840: PPUSH
27841: LD_VAR 0 5
27845: PUSH
27846: LD_VAR 0 7
27850: ARRAY
27851: PUSH
27852: LD_VAR 0 9
27856: PUSH
27857: LD_VAR 0 7
27861: ARRAY
27862: PUSH
27863: LD_VAR 0 10
27867: MUL
27868: PLUS
27869: PPUSH
27870: CALL_OW 1
27874: ST_TO_ADDR
27875: GO 27823
27877: POP
27878: POP
// end ;
27879: GO 26362
27881: POP
27882: POP
// result := Replace ( result , 4 , tmp ) ;
27883: LD_ADDR_VAR 0 5
27887: PUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: LD_INT 4
27895: PPUSH
27896: LD_VAR 0 8
27900: PPUSH
27901: CALL_OW 1
27905: ST_TO_ADDR
// end ;
27906: LD_VAR 0 5
27910: RET
// export function DangerAtRange ( unit , range ) ; begin
27911: LD_INT 0
27913: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_VAR 0 1
27923: PPUSH
27924: CALL_OW 255
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 250
27938: PPUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 251
27948: PPUSH
27949: LD_VAR 0 2
27953: PPUSH
27954: CALL 26214 0 4
27958: ST_TO_ADDR
// end ;
27959: LD_VAR 0 3
27963: RET
// export function DangerInArea ( side , area ) ; begin
27964: LD_INT 0
27966: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27967: LD_ADDR_VAR 0 3
27971: PUSH
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_INT 81
27979: PUSH
27980: LD_VAR 0 1
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PPUSH
27989: CALL_OW 70
27993: ST_TO_ADDR
// end ;
27994: LD_VAR 0 3
27998: RET
// export function IsExtension ( b ) ; begin
27999: LD_INT 0
28001: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28002: LD_ADDR_VAR 0 2
28006: PUSH
28007: LD_VAR 0 1
28011: PUSH
28012: LD_INT 23
28014: PUSH
28015: LD_INT 20
28017: PUSH
28018: LD_INT 22
28020: PUSH
28021: LD_INT 17
28023: PUSH
28024: LD_INT 24
28026: PUSH
28027: LD_INT 21
28029: PUSH
28030: LD_INT 19
28032: PUSH
28033: LD_INT 16
28035: PUSH
28036: LD_INT 25
28038: PUSH
28039: LD_INT 18
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: IN
28054: ST_TO_ADDR
// end ;
28055: LD_VAR 0 2
28059: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28060: LD_INT 0
28062: PPUSH
28063: PPUSH
28064: PPUSH
// result := [ ] ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: EMPTY
28071: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28072: LD_ADDR_VAR 0 4
28076: PUSH
28077: LD_VAR 0 2
28081: PPUSH
28082: LD_INT 21
28084: PUSH
28085: LD_INT 3
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 70
28096: ST_TO_ADDR
// if not tmp then
28097: LD_VAR 0 4
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28164
// for i in tmp do
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: LD_VAR 0 4
28115: PUSH
28116: FOR_IN
28117: IFFALSE 28152
// if GetBase ( i ) <> base then
28119: LD_VAR 0 5
28123: PPUSH
28124: CALL_OW 274
28128: PUSH
28129: LD_VAR 0 1
28133: NONEQUAL
28134: IFFALSE 28150
// ComLinkToBase ( base , i ) ;
28136: LD_VAR 0 1
28140: PPUSH
28141: LD_VAR 0 5
28145: PPUSH
28146: CALL_OW 169
28150: GO 28116
28152: POP
28153: POP
// result := tmp ;
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: LD_VAR 0 4
28163: ST_TO_ADDR
// end ;
28164: LD_VAR 0 3
28168: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28169: LD_INT 0
28171: PPUSH
28172: PPUSH
// if BuildingStatus ( b ) = bs_build then
28173: LD_VAR 0 2
28177: PPUSH
28178: CALL_OW 461
28182: PUSH
28183: LD_INT 1
28185: EQUAL
28186: IFFALSE 28246
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28188: LD_VAR 0 1
28192: PPUSH
28193: LD_STRING h
28195: PUSH
28196: LD_VAR 0 2
28200: PPUSH
28201: CALL_OW 250
28205: PUSH
28206: LD_VAR 0 2
28210: PPUSH
28211: CALL_OW 251
28215: PUSH
28216: LD_VAR 0 2
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: PPUSH
28242: CALL_OW 446
// end ;
28246: LD_VAR 0 3
28250: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28251: LD_INT 0
28253: PPUSH
28254: PPUSH
28255: PPUSH
28256: PPUSH
28257: PPUSH
28258: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28259: LD_VAR 0 1
28263: NOT
28264: PUSH
28265: LD_VAR 0 1
28269: PPUSH
28270: CALL_OW 263
28274: PUSH
28275: LD_INT 2
28277: EQUAL
28278: NOT
28279: OR
28280: IFFALSE 28284
// exit ;
28282: GO 28600
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28284: LD_ADDR_VAR 0 6
28288: PUSH
28289: LD_INT 22
28291: PUSH
28292: LD_VAR 0 1
28296: PPUSH
28297: CALL_OW 255
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: LD_INT 30
28311: PUSH
28312: LD_INT 36
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 34
28321: PUSH
28322: LD_INT 31
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PPUSH
28338: CALL_OW 69
28342: ST_TO_ADDR
// if not tmp then
28343: LD_VAR 0 6
28347: NOT
28348: IFFALSE 28352
// exit ;
28350: GO 28600
// result := [ ] ;
28352: LD_ADDR_VAR 0 2
28356: PUSH
28357: EMPTY
28358: ST_TO_ADDR
// for i in tmp do
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_VAR 0 6
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28441
// begin t := UnitsInside ( i ) ;
28372: LD_ADDR_VAR 0 4
28376: PUSH
28377: LD_VAR 0 3
28381: PPUSH
28382: CALL_OW 313
28386: ST_TO_ADDR
// if t then
28387: LD_VAR 0 4
28391: IFFALSE 28439
// for j in t do
28393: LD_ADDR_VAR 0 7
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: FOR_IN
28404: IFFALSE 28437
// result := Insert ( result , result + 1 , j ) ;
28406: LD_ADDR_VAR 0 2
28410: PUSH
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_VAR 0 2
28420: PUSH
28421: LD_INT 1
28423: PLUS
28424: PPUSH
28425: LD_VAR 0 7
28429: PPUSH
28430: CALL_OW 2
28434: ST_TO_ADDR
28435: GO 28403
28437: POP
28438: POP
// end ;
28439: GO 28369
28441: POP
28442: POP
// if not result then
28443: LD_VAR 0 2
28447: NOT
28448: IFFALSE 28452
// exit ;
28450: GO 28600
// mech := result [ 1 ] ;
28452: LD_ADDR_VAR 0 5
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: ST_TO_ADDR
// if result > 1 then
28466: LD_VAR 0 2
28470: PUSH
28471: LD_INT 1
28473: GREATER
28474: IFFALSE 28586
// for i = 2 to result do
28476: LD_ADDR_VAR 0 3
28480: PUSH
28481: DOUBLE
28482: LD_INT 2
28484: DEC
28485: ST_TO_ADDR
28486: LD_VAR 0 2
28490: PUSH
28491: FOR_TO
28492: IFFALSE 28584
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28494: LD_ADDR_VAR 0 4
28498: PUSH
28499: LD_VAR 0 2
28503: PUSH
28504: LD_VAR 0 3
28508: ARRAY
28509: PPUSH
28510: LD_INT 3
28512: PPUSH
28513: CALL_OW 259
28517: PUSH
28518: LD_VAR 0 2
28522: PUSH
28523: LD_VAR 0 3
28527: ARRAY
28528: PPUSH
28529: CALL_OW 432
28533: MINUS
28534: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28535: LD_VAR 0 4
28539: PUSH
28540: LD_VAR 0 5
28544: PPUSH
28545: LD_INT 3
28547: PPUSH
28548: CALL_OW 259
28552: PUSH
28553: LD_VAR 0 5
28557: PPUSH
28558: CALL_OW 432
28562: MINUS
28563: GREATEREQUAL
28564: IFFALSE 28582
// mech := result [ i ] ;
28566: LD_ADDR_VAR 0 5
28570: PUSH
28571: LD_VAR 0 2
28575: PUSH
28576: LD_VAR 0 3
28580: ARRAY
28581: ST_TO_ADDR
// end ;
28582: GO 28491
28584: POP
28585: POP
// ComLinkTo ( vehicle , mech ) ;
28586: LD_VAR 0 1
28590: PPUSH
28591: LD_VAR 0 5
28595: PPUSH
28596: CALL_OW 135
// end ;
28600: LD_VAR 0 2
28604: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28605: LD_INT 0
28607: PPUSH
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
28612: PPUSH
28613: PPUSH
28614: PPUSH
28615: PPUSH
28616: PPUSH
28617: PPUSH
28618: PPUSH
28619: PPUSH
// result := [ ] ;
28620: LD_ADDR_VAR 0 7
28624: PUSH
28625: EMPTY
28626: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28627: LD_VAR 0 1
28631: PPUSH
28632: CALL_OW 266
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: IN
28647: NOT
28648: IFFALSE 28652
// exit ;
28650: GO 30283
// if name then
28652: LD_VAR 0 3
28656: IFFALSE 28672
// SetBName ( base_dep , name ) ;
28658: LD_VAR 0 1
28662: PPUSH
28663: LD_VAR 0 3
28667: PPUSH
28668: CALL_OW 500
// base := GetBase ( base_dep ) ;
28672: LD_ADDR_VAR 0 15
28676: PUSH
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL_OW 274
28686: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28687: LD_ADDR_VAR 0 16
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 255
28701: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28702: LD_ADDR_VAR 0 17
28706: PUSH
28707: LD_VAR 0 1
28711: PPUSH
28712: CALL_OW 248
28716: ST_TO_ADDR
// if sources then
28717: LD_VAR 0 5
28721: IFFALSE 28768
// for i = 1 to 3 do
28723: LD_ADDR_VAR 0 8
28727: PUSH
28728: DOUBLE
28729: LD_INT 1
28731: DEC
28732: ST_TO_ADDR
28733: LD_INT 3
28735: PUSH
28736: FOR_TO
28737: IFFALSE 28766
// AddResourceType ( base , i , sources [ i ] ) ;
28739: LD_VAR 0 15
28743: PPUSH
28744: LD_VAR 0 8
28748: PPUSH
28749: LD_VAR 0 5
28753: PUSH
28754: LD_VAR 0 8
28758: ARRAY
28759: PPUSH
28760: CALL_OW 276
28764: GO 28736
28766: POP
28767: POP
// buildings := GetBaseBuildings ( base , area ) ;
28768: LD_ADDR_VAR 0 18
28772: PUSH
28773: LD_VAR 0 15
28777: PPUSH
28778: LD_VAR 0 2
28782: PPUSH
28783: CALL 28060 0 2
28787: ST_TO_ADDR
// InitHc ;
28788: CALL_OW 19
// InitUc ;
28792: CALL_OW 18
// uc_side := side ;
28796: LD_ADDR_OWVAR 20
28800: PUSH
28801: LD_VAR 0 16
28805: ST_TO_ADDR
// uc_nation := nation ;
28806: LD_ADDR_OWVAR 21
28810: PUSH
28811: LD_VAR 0 17
28815: ST_TO_ADDR
// if buildings then
28816: LD_VAR 0 18
28820: IFFALSE 30142
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28822: LD_ADDR_VAR 0 19
28826: PUSH
28827: LD_VAR 0 18
28831: PPUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 30
28837: PUSH
28838: LD_INT 29
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 30
28847: PUSH
28848: LD_INT 30
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 72
28864: ST_TO_ADDR
// if tmp then
28865: LD_VAR 0 19
28869: IFFALSE 28917
// for i in tmp do
28871: LD_ADDR_VAR 0 8
28875: PUSH
28876: LD_VAR 0 19
28880: PUSH
28881: FOR_IN
28882: IFFALSE 28915
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28884: LD_VAR 0 8
28888: PPUSH
28889: CALL_OW 250
28893: PPUSH
28894: LD_VAR 0 8
28898: PPUSH
28899: CALL_OW 251
28903: PPUSH
28904: LD_VAR 0 16
28908: PPUSH
28909: CALL_OW 441
28913: GO 28881
28915: POP
28916: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28917: LD_VAR 0 18
28921: PPUSH
28922: LD_INT 2
28924: PUSH
28925: LD_INT 30
28927: PUSH
28928: LD_INT 32
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 30
28937: PUSH
28938: LD_INT 33
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 72
28954: IFFALSE 29042
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28956: LD_ADDR_VAR 0 8
28960: PUSH
28961: LD_VAR 0 18
28965: PPUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 30
28971: PUSH
28972: LD_INT 32
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 30
28981: PUSH
28982: LD_INT 33
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 72
28998: PUSH
28999: FOR_IN
29000: IFFALSE 29040
// begin if not GetBWeapon ( i ) then
29002: LD_VAR 0 8
29006: PPUSH
29007: CALL_OW 269
29011: NOT
29012: IFFALSE 29038
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29014: LD_VAR 0 8
29018: PPUSH
29019: LD_VAR 0 8
29023: PPUSH
29024: LD_VAR 0 2
29028: PPUSH
29029: CALL 30288 0 2
29033: PPUSH
29034: CALL_OW 431
// end ;
29038: GO 28999
29040: POP
29041: POP
// end ; for i = 1 to personel do
29042: LD_ADDR_VAR 0 8
29046: PUSH
29047: DOUBLE
29048: LD_INT 1
29050: DEC
29051: ST_TO_ADDR
29052: LD_VAR 0 6
29056: PUSH
29057: FOR_TO
29058: IFFALSE 30122
// begin if i > 4 then
29060: LD_VAR 0 8
29064: PUSH
29065: LD_INT 4
29067: GREATER
29068: IFFALSE 29072
// break ;
29070: GO 30122
// case i of 1 :
29072: LD_VAR 0 8
29076: PUSH
29077: LD_INT 1
29079: DOUBLE
29080: EQUAL
29081: IFTRUE 29085
29083: GO 29165
29085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29086: LD_ADDR_VAR 0 12
29090: PUSH
29091: LD_VAR 0 18
29095: PPUSH
29096: LD_INT 22
29098: PUSH
29099: LD_VAR 0 16
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 58
29110: PUSH
29111: EMPTY
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 30
29119: PUSH
29120: LD_INT 32
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 30
29129: PUSH
29130: LD_INT 4
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 30
29139: PUSH
29140: LD_INT 5
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: PPUSH
29158: CALL_OW 72
29162: ST_TO_ADDR
29163: GO 29387
29165: LD_INT 2
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29235
29173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29174: LD_ADDR_VAR 0 12
29178: PUSH
29179: LD_VAR 0 18
29183: PPUSH
29184: LD_INT 22
29186: PUSH
29187: LD_VAR 0 16
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: LD_INT 30
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 30
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 72
29232: ST_TO_ADDR
29233: GO 29387
29235: LD_INT 3
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29305
29243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29244: LD_ADDR_VAR 0 12
29248: PUSH
29249: LD_VAR 0 18
29253: PPUSH
29254: LD_INT 22
29256: PUSH
29257: LD_VAR 0 16
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: LD_INT 30
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 30
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 72
29302: ST_TO_ADDR
29303: GO 29387
29305: LD_INT 4
29307: DOUBLE
29308: EQUAL
29309: IFTRUE 29313
29311: GO 29386
29313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29314: LD_ADDR_VAR 0 12
29318: PUSH
29319: LD_VAR 0 18
29323: PPUSH
29324: LD_INT 22
29326: PUSH
29327: LD_VAR 0 16
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: LD_INT 30
29341: PUSH
29342: LD_INT 6
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 30
29351: PUSH
29352: LD_INT 7
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 30
29361: PUSH
29362: LD_INT 8
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PPUSH
29379: CALL_OW 72
29383: ST_TO_ADDR
29384: GO 29387
29386: POP
// if i = 1 then
29387: LD_VAR 0 8
29391: PUSH
29392: LD_INT 1
29394: EQUAL
29395: IFFALSE 29506
// begin tmp := [ ] ;
29397: LD_ADDR_VAR 0 19
29401: PUSH
29402: EMPTY
29403: ST_TO_ADDR
// for j in f do
29404: LD_ADDR_VAR 0 9
29408: PUSH
29409: LD_VAR 0 12
29413: PUSH
29414: FOR_IN
29415: IFFALSE 29488
// if GetBType ( j ) = b_bunker then
29417: LD_VAR 0 9
29421: PPUSH
29422: CALL_OW 266
29426: PUSH
29427: LD_INT 32
29429: EQUAL
29430: IFFALSE 29457
// tmp := Insert ( tmp , 1 , j ) else
29432: LD_ADDR_VAR 0 19
29436: PUSH
29437: LD_VAR 0 19
29441: PPUSH
29442: LD_INT 1
29444: PPUSH
29445: LD_VAR 0 9
29449: PPUSH
29450: CALL_OW 2
29454: ST_TO_ADDR
29455: GO 29486
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29457: LD_ADDR_VAR 0 19
29461: PUSH
29462: LD_VAR 0 19
29466: PPUSH
29467: LD_VAR 0 19
29471: PUSH
29472: LD_INT 1
29474: PLUS
29475: PPUSH
29476: LD_VAR 0 9
29480: PPUSH
29481: CALL_OW 2
29485: ST_TO_ADDR
29486: GO 29414
29488: POP
29489: POP
// if tmp then
29490: LD_VAR 0 19
29494: IFFALSE 29506
// f := tmp ;
29496: LD_ADDR_VAR 0 12
29500: PUSH
29501: LD_VAR 0 19
29505: ST_TO_ADDR
// end ; x := personel [ i ] ;
29506: LD_ADDR_VAR 0 13
29510: PUSH
29511: LD_VAR 0 6
29515: PUSH
29516: LD_VAR 0 8
29520: ARRAY
29521: ST_TO_ADDR
// if x = - 1 then
29522: LD_VAR 0 13
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: EQUAL
29531: IFFALSE 29740
// begin for j in f do
29533: LD_ADDR_VAR 0 9
29537: PUSH
29538: LD_VAR 0 12
29542: PUSH
29543: FOR_IN
29544: IFFALSE 29736
// repeat InitHc ;
29546: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29550: LD_VAR 0 9
29554: PPUSH
29555: CALL_OW 266
29559: PUSH
29560: LD_INT 5
29562: EQUAL
29563: IFFALSE 29633
// begin if UnitsInside ( j ) < 3 then
29565: LD_VAR 0 9
29569: PPUSH
29570: CALL_OW 313
29574: PUSH
29575: LD_INT 3
29577: LESS
29578: IFFALSE 29614
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29580: LD_INT 0
29582: PPUSH
29583: LD_INT 5
29585: PUSH
29586: LD_INT 8
29588: PUSH
29589: LD_INT 9
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: PUSH
29597: LD_VAR 0 17
29601: ARRAY
29602: PPUSH
29603: LD_VAR 0 4
29607: PPUSH
29608: CALL_OW 380
29612: GO 29631
// PrepareHuman ( false , i , skill ) ;
29614: LD_INT 0
29616: PPUSH
29617: LD_VAR 0 8
29621: PPUSH
29622: LD_VAR 0 4
29626: PPUSH
29627: CALL_OW 380
// end else
29631: GO 29650
// PrepareHuman ( false , i , skill ) ;
29633: LD_INT 0
29635: PPUSH
29636: LD_VAR 0 8
29640: PPUSH
29641: LD_VAR 0 4
29645: PPUSH
29646: CALL_OW 380
// un := CreateHuman ;
29650: LD_ADDR_VAR 0 14
29654: PUSH
29655: CALL_OW 44
29659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29660: LD_ADDR_VAR 0 7
29664: PUSH
29665: LD_VAR 0 7
29669: PPUSH
29670: LD_INT 1
29672: PPUSH
29673: LD_VAR 0 14
29677: PPUSH
29678: CALL_OW 2
29682: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29683: LD_VAR 0 14
29687: PPUSH
29688: LD_VAR 0 9
29692: PPUSH
29693: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29697: LD_VAR 0 9
29701: PPUSH
29702: CALL_OW 313
29706: PUSH
29707: LD_INT 6
29709: EQUAL
29710: PUSH
29711: LD_VAR 0 9
29715: PPUSH
29716: CALL_OW 266
29720: PUSH
29721: LD_INT 32
29723: PUSH
29724: LD_INT 31
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: IN
29731: OR
29732: IFFALSE 29546
29734: GO 29543
29736: POP
29737: POP
// end else
29738: GO 30120
// for j = 1 to x do
29740: LD_ADDR_VAR 0 9
29744: PUSH
29745: DOUBLE
29746: LD_INT 1
29748: DEC
29749: ST_TO_ADDR
29750: LD_VAR 0 13
29754: PUSH
29755: FOR_TO
29756: IFFALSE 30118
// begin InitHc ;
29758: CALL_OW 19
// if not f then
29762: LD_VAR 0 12
29766: NOT
29767: IFFALSE 29856
// begin PrepareHuman ( false , i , skill ) ;
29769: LD_INT 0
29771: PPUSH
29772: LD_VAR 0 8
29776: PPUSH
29777: LD_VAR 0 4
29781: PPUSH
29782: CALL_OW 380
// un := CreateHuman ;
29786: LD_ADDR_VAR 0 14
29790: PUSH
29791: CALL_OW 44
29795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29796: LD_ADDR_VAR 0 7
29800: PUSH
29801: LD_VAR 0 7
29805: PPUSH
29806: LD_INT 1
29808: PPUSH
29809: LD_VAR 0 14
29813: PPUSH
29814: CALL_OW 2
29818: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29819: LD_VAR 0 14
29823: PPUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 250
29833: PPUSH
29834: LD_VAR 0 1
29838: PPUSH
29839: CALL_OW 251
29843: PPUSH
29844: LD_INT 10
29846: PPUSH
29847: LD_INT 0
29849: PPUSH
29850: CALL_OW 50
// continue ;
29854: GO 29755
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29856: LD_VAR 0 12
29860: PUSH
29861: LD_INT 1
29863: ARRAY
29864: PPUSH
29865: CALL_OW 313
29869: PUSH
29870: LD_VAR 0 12
29874: PUSH
29875: LD_INT 1
29877: ARRAY
29878: PPUSH
29879: CALL_OW 266
29883: PUSH
29884: LD_INT 32
29886: PUSH
29887: LD_INT 31
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: IN
29894: AND
29895: PUSH
29896: LD_VAR 0 12
29900: PUSH
29901: LD_INT 1
29903: ARRAY
29904: PPUSH
29905: CALL_OW 313
29909: PUSH
29910: LD_INT 6
29912: EQUAL
29913: OR
29914: IFFALSE 29934
// f := Delete ( f , 1 ) ;
29916: LD_ADDR_VAR 0 12
29920: PUSH
29921: LD_VAR 0 12
29925: PPUSH
29926: LD_INT 1
29928: PPUSH
29929: CALL_OW 3
29933: ST_TO_ADDR
// if not f then
29934: LD_VAR 0 12
29938: NOT
29939: IFFALSE 29957
// begin x := x + 2 ;
29941: LD_ADDR_VAR 0 13
29945: PUSH
29946: LD_VAR 0 13
29950: PUSH
29951: LD_INT 2
29953: PLUS
29954: ST_TO_ADDR
// continue ;
29955: GO 29755
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29957: LD_VAR 0 12
29961: PUSH
29962: LD_INT 1
29964: ARRAY
29965: PPUSH
29966: CALL_OW 266
29970: PUSH
29971: LD_INT 5
29973: EQUAL
29974: IFFALSE 30048
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29976: LD_VAR 0 12
29980: PUSH
29981: LD_INT 1
29983: ARRAY
29984: PPUSH
29985: CALL_OW 313
29989: PUSH
29990: LD_INT 3
29992: LESS
29993: IFFALSE 30029
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29995: LD_INT 0
29997: PPUSH
29998: LD_INT 5
30000: PUSH
30001: LD_INT 8
30003: PUSH
30004: LD_INT 9
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: PUSH
30012: LD_VAR 0 17
30016: ARRAY
30017: PPUSH
30018: LD_VAR 0 4
30022: PPUSH
30023: CALL_OW 380
30027: GO 30046
// PrepareHuman ( false , i , skill ) ;
30029: LD_INT 0
30031: PPUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_VAR 0 4
30041: PPUSH
30042: CALL_OW 380
// end else
30046: GO 30065
// PrepareHuman ( false , i , skill ) ;
30048: LD_INT 0
30050: PPUSH
30051: LD_VAR 0 8
30055: PPUSH
30056: LD_VAR 0 4
30060: PPUSH
30061: CALL_OW 380
// un := CreateHuman ;
30065: LD_ADDR_VAR 0 14
30069: PUSH
30070: CALL_OW 44
30074: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30075: LD_ADDR_VAR 0 7
30079: PUSH
30080: LD_VAR 0 7
30084: PPUSH
30085: LD_INT 1
30087: PPUSH
30088: LD_VAR 0 14
30092: PPUSH
30093: CALL_OW 2
30097: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30098: LD_VAR 0 14
30102: PPUSH
30103: LD_VAR 0 12
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: CALL_OW 52
// end ;
30116: GO 29755
30118: POP
30119: POP
// end ;
30120: GO 29057
30122: POP
30123: POP
// result := result ^ buildings ;
30124: LD_ADDR_VAR 0 7
30128: PUSH
30129: LD_VAR 0 7
30133: PUSH
30134: LD_VAR 0 18
30138: ADD
30139: ST_TO_ADDR
// end else
30140: GO 30283
// begin for i = 1 to personel do
30142: LD_ADDR_VAR 0 8
30146: PUSH
30147: DOUBLE
30148: LD_INT 1
30150: DEC
30151: ST_TO_ADDR
30152: LD_VAR 0 6
30156: PUSH
30157: FOR_TO
30158: IFFALSE 30281
// begin if i > 4 then
30160: LD_VAR 0 8
30164: PUSH
30165: LD_INT 4
30167: GREATER
30168: IFFALSE 30172
// break ;
30170: GO 30281
// x := personel [ i ] ;
30172: LD_ADDR_VAR 0 13
30176: PUSH
30177: LD_VAR 0 6
30181: PUSH
30182: LD_VAR 0 8
30186: ARRAY
30187: ST_TO_ADDR
// if x = - 1 then
30188: LD_VAR 0 13
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: EQUAL
30197: IFFALSE 30201
// continue ;
30199: GO 30157
// PrepareHuman ( false , i , skill ) ;
30201: LD_INT 0
30203: PPUSH
30204: LD_VAR 0 8
30208: PPUSH
30209: LD_VAR 0 4
30213: PPUSH
30214: CALL_OW 380
// un := CreateHuman ;
30218: LD_ADDR_VAR 0 14
30222: PUSH
30223: CALL_OW 44
30227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30228: LD_VAR 0 14
30232: PPUSH
30233: LD_VAR 0 1
30237: PPUSH
30238: CALL_OW 250
30242: PPUSH
30243: LD_VAR 0 1
30247: PPUSH
30248: CALL_OW 251
30252: PPUSH
30253: LD_INT 10
30255: PPUSH
30256: LD_INT 0
30258: PPUSH
30259: CALL_OW 50
// result := result ^ un ;
30263: LD_ADDR_VAR 0 7
30267: PUSH
30268: LD_VAR 0 7
30272: PUSH
30273: LD_VAR 0 14
30277: ADD
30278: ST_TO_ADDR
// end ;
30279: GO 30157
30281: POP
30282: POP
// end ; end ;
30283: LD_VAR 0 7
30287: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30288: LD_INT 0
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
// result := false ;
30306: LD_ADDR_VAR 0 3
30310: PUSH
30311: LD_INT 0
30313: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30314: LD_VAR 0 1
30318: NOT
30319: PUSH
30320: LD_VAR 0 1
30324: PPUSH
30325: CALL_OW 266
30329: PUSH
30330: LD_INT 32
30332: PUSH
30333: LD_INT 33
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: IN
30340: NOT
30341: OR
30342: IFFALSE 30346
// exit ;
30344: GO 31482
// nat := GetNation ( tower ) ;
30346: LD_ADDR_VAR 0 12
30350: PUSH
30351: LD_VAR 0 1
30355: PPUSH
30356: CALL_OW 248
30360: ST_TO_ADDR
// side := GetSide ( tower ) ;
30361: LD_ADDR_VAR 0 16
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 255
30375: ST_TO_ADDR
// x := GetX ( tower ) ;
30376: LD_ADDR_VAR 0 10
30380: PUSH
30381: LD_VAR 0 1
30385: PPUSH
30386: CALL_OW 250
30390: ST_TO_ADDR
// y := GetY ( tower ) ;
30391: LD_ADDR_VAR 0 11
30395: PUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 251
30405: ST_TO_ADDR
// if not x or not y then
30406: LD_VAR 0 10
30410: NOT
30411: PUSH
30412: LD_VAR 0 11
30416: NOT
30417: OR
30418: IFFALSE 30422
// exit ;
30420: GO 31482
// weapon := 0 ;
30422: LD_ADDR_VAR 0 18
30426: PUSH
30427: LD_INT 0
30429: ST_TO_ADDR
// fac_list := [ ] ;
30430: LD_ADDR_VAR 0 17
30434: PUSH
30435: EMPTY
30436: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30437: LD_ADDR_VAR 0 6
30441: PUSH
30442: LD_VAR 0 1
30446: PPUSH
30447: CALL_OW 274
30451: PPUSH
30452: LD_VAR 0 2
30456: PPUSH
30457: CALL 28060 0 2
30461: PPUSH
30462: LD_INT 30
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PPUSH
30472: CALL_OW 72
30476: ST_TO_ADDR
// if not factories then
30477: LD_VAR 0 6
30481: NOT
30482: IFFALSE 30486
// exit ;
30484: GO 31482
// for i in factories do
30486: LD_ADDR_VAR 0 8
30490: PUSH
30491: LD_VAR 0 6
30495: PUSH
30496: FOR_IN
30497: IFFALSE 30522
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30499: LD_ADDR_VAR 0 17
30503: PUSH
30504: LD_VAR 0 17
30508: PUSH
30509: LD_VAR 0 8
30513: PPUSH
30514: CALL_OW 478
30518: UNION
30519: ST_TO_ADDR
30520: GO 30496
30522: POP
30523: POP
// if not fac_list then
30524: LD_VAR 0 17
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 31482
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30533: LD_ADDR_VAR 0 5
30537: PUSH
30538: LD_INT 4
30540: PUSH
30541: LD_INT 5
30543: PUSH
30544: LD_INT 9
30546: PUSH
30547: LD_INT 10
30549: PUSH
30550: LD_INT 6
30552: PUSH
30553: LD_INT 7
30555: PUSH
30556: LD_INT 11
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 27
30570: PUSH
30571: LD_INT 28
30573: PUSH
30574: LD_INT 26
30576: PUSH
30577: LD_INT 30
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 43
30588: PUSH
30589: LD_INT 44
30591: PUSH
30592: LD_INT 46
30594: PUSH
30595: LD_INT 45
30597: PUSH
30598: LD_INT 47
30600: PUSH
30601: LD_INT 49
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: PUSH
30617: LD_VAR 0 12
30621: ARRAY
30622: ST_TO_ADDR
// for i in list do
30623: LD_ADDR_VAR 0 8
30627: PUSH
30628: LD_VAR 0 5
30632: PUSH
30633: FOR_IN
30634: IFFALSE 30667
// if not i in fac_list then
30636: LD_VAR 0 8
30640: PUSH
30641: LD_VAR 0 17
30645: IN
30646: NOT
30647: IFFALSE 30665
// list := list diff i ;
30649: LD_ADDR_VAR 0 5
30653: PUSH
30654: LD_VAR 0 5
30658: PUSH
30659: LD_VAR 0 8
30663: DIFF
30664: ST_TO_ADDR
30665: GO 30633
30667: POP
30668: POP
// if not list then
30669: LD_VAR 0 5
30673: NOT
30674: IFFALSE 30678
// exit ;
30676: GO 31482
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30678: LD_VAR 0 12
30682: PUSH
30683: LD_INT 3
30685: EQUAL
30686: PUSH
30687: LD_INT 49
30689: PUSH
30690: LD_VAR 0 5
30694: IN
30695: AND
30696: PUSH
30697: LD_INT 31
30699: PPUSH
30700: LD_VAR 0 16
30704: PPUSH
30705: CALL_OW 321
30709: PUSH
30710: LD_INT 2
30712: EQUAL
30713: AND
30714: IFFALSE 30774
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30716: LD_INT 22
30718: PUSH
30719: LD_VAR 0 16
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 35
30730: PUSH
30731: LD_INT 49
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 91
30740: PUSH
30741: LD_VAR 0 1
30745: PUSH
30746: LD_INT 10
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL_OW 69
30763: NOT
30764: IFFALSE 30774
// weapon := ru_time_lapser ;
30766: LD_ADDR_VAR 0 18
30770: PUSH
30771: LD_INT 49
30773: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30774: LD_VAR 0 12
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: LD_INT 2
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: IN
30789: PUSH
30790: LD_INT 11
30792: PUSH
30793: LD_VAR 0 5
30797: IN
30798: PUSH
30799: LD_INT 30
30801: PUSH
30802: LD_VAR 0 5
30806: IN
30807: OR
30808: AND
30809: PUSH
30810: LD_INT 6
30812: PPUSH
30813: LD_VAR 0 16
30817: PPUSH
30818: CALL_OW 321
30822: PUSH
30823: LD_INT 2
30825: EQUAL
30826: AND
30827: IFFALSE 30992
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30829: LD_INT 22
30831: PUSH
30832: LD_VAR 0 16
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 35
30846: PUSH
30847: LD_INT 11
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 35
30856: PUSH
30857: LD_INT 30
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 91
30871: PUSH
30872: LD_VAR 0 1
30876: PUSH
30877: LD_INT 18
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: LIST
30889: PPUSH
30890: CALL_OW 69
30894: NOT
30895: PUSH
30896: LD_INT 22
30898: PUSH
30899: LD_VAR 0 16
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 30
30913: PUSH
30914: LD_INT 32
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 30
30923: PUSH
30924: LD_INT 33
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 91
30938: PUSH
30939: LD_VAR 0 1
30943: PUSH
30944: LD_INT 12
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: PUSH
30957: EMPTY
30958: LIST
30959: PPUSH
30960: CALL_OW 69
30964: PUSH
30965: LD_INT 2
30967: GREATER
30968: AND
30969: IFFALSE 30992
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30971: LD_ADDR_VAR 0 18
30975: PUSH
30976: LD_INT 11
30978: PUSH
30979: LD_INT 30
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_VAR 0 12
30990: ARRAY
30991: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30992: LD_VAR 0 18
30996: NOT
30997: PUSH
30998: LD_INT 40
31000: PPUSH
31001: LD_VAR 0 16
31005: PPUSH
31006: CALL_OW 321
31010: PUSH
31011: LD_INT 2
31013: EQUAL
31014: AND
31015: PUSH
31016: LD_INT 7
31018: PUSH
31019: LD_VAR 0 5
31023: IN
31024: PUSH
31025: LD_INT 28
31027: PUSH
31028: LD_VAR 0 5
31032: IN
31033: OR
31034: PUSH
31035: LD_INT 45
31037: PUSH
31038: LD_VAR 0 5
31042: IN
31043: OR
31044: AND
31045: IFFALSE 31299
// begin hex := GetHexInfo ( x , y ) ;
31047: LD_ADDR_VAR 0 4
31051: PUSH
31052: LD_VAR 0 10
31056: PPUSH
31057: LD_VAR 0 11
31061: PPUSH
31062: CALL_OW 546
31066: ST_TO_ADDR
// if hex [ 1 ] then
31067: LD_VAR 0 4
31071: PUSH
31072: LD_INT 1
31074: ARRAY
31075: IFFALSE 31079
// exit ;
31077: GO 31482
// height := hex [ 2 ] ;
31079: LD_ADDR_VAR 0 15
31083: PUSH
31084: LD_VAR 0 4
31088: PUSH
31089: LD_INT 2
31091: ARRAY
31092: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31093: LD_ADDR_VAR 0 14
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// for i in tmp do
31116: LD_ADDR_VAR 0 8
31120: PUSH
31121: LD_VAR 0 14
31125: PUSH
31126: FOR_IN
31127: IFFALSE 31297
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31129: LD_ADDR_VAR 0 9
31133: PUSH
31134: LD_VAR 0 10
31138: PPUSH
31139: LD_VAR 0 8
31143: PPUSH
31144: LD_INT 5
31146: PPUSH
31147: CALL_OW 272
31151: PUSH
31152: LD_VAR 0 11
31156: PPUSH
31157: LD_VAR 0 8
31161: PPUSH
31162: LD_INT 5
31164: PPUSH
31165: CALL_OW 273
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31174: LD_VAR 0 9
31178: PUSH
31179: LD_INT 1
31181: ARRAY
31182: PPUSH
31183: LD_VAR 0 9
31187: PUSH
31188: LD_INT 2
31190: ARRAY
31191: PPUSH
31192: CALL_OW 488
31196: IFFALSE 31295
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31198: LD_ADDR_VAR 0 4
31202: PUSH
31203: LD_VAR 0 9
31207: PUSH
31208: LD_INT 1
31210: ARRAY
31211: PPUSH
31212: LD_VAR 0 9
31216: PUSH
31217: LD_INT 2
31219: ARRAY
31220: PPUSH
31221: CALL_OW 546
31225: ST_TO_ADDR
// if hex [ 1 ] then
31226: LD_VAR 0 4
31230: PUSH
31231: LD_INT 1
31233: ARRAY
31234: IFFALSE 31238
// continue ;
31236: GO 31126
// h := hex [ 2 ] ;
31238: LD_ADDR_VAR 0 13
31242: PUSH
31243: LD_VAR 0 4
31247: PUSH
31248: LD_INT 2
31250: ARRAY
31251: ST_TO_ADDR
// if h + 7 < height then
31252: LD_VAR 0 13
31256: PUSH
31257: LD_INT 7
31259: PLUS
31260: PUSH
31261: LD_VAR 0 15
31265: LESS
31266: IFFALSE 31295
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31268: LD_ADDR_VAR 0 18
31272: PUSH
31273: LD_INT 7
31275: PUSH
31276: LD_INT 28
31278: PUSH
31279: LD_INT 45
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: PUSH
31287: LD_VAR 0 12
31291: ARRAY
31292: ST_TO_ADDR
// break ;
31293: GO 31297
// end ; end ; end ;
31295: GO 31126
31297: POP
31298: POP
// end ; if not weapon then
31299: LD_VAR 0 18
31303: NOT
31304: IFFALSE 31364
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31306: LD_ADDR_VAR 0 5
31310: PUSH
31311: LD_VAR 0 5
31315: PUSH
31316: LD_INT 11
31318: PUSH
31319: LD_INT 30
31321: PUSH
31322: LD_INT 49
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: DIFF
31330: ST_TO_ADDR
// if not list then
31331: LD_VAR 0 5
31335: NOT
31336: IFFALSE 31340
// exit ;
31338: GO 31482
// weapon := list [ rand ( 1 , list ) ] ;
31340: LD_ADDR_VAR 0 18
31344: PUSH
31345: LD_VAR 0 5
31349: PUSH
31350: LD_INT 1
31352: PPUSH
31353: LD_VAR 0 5
31357: PPUSH
31358: CALL_OW 12
31362: ARRAY
31363: ST_TO_ADDR
// end ; if weapon then
31364: LD_VAR 0 18
31368: IFFALSE 31482
// begin tmp := CostOfWeapon ( weapon ) ;
31370: LD_ADDR_VAR 0 14
31374: PUSH
31375: LD_VAR 0 18
31379: PPUSH
31380: CALL_OW 451
31384: ST_TO_ADDR
// j := GetBase ( tower ) ;
31385: LD_ADDR_VAR 0 9
31389: PUSH
31390: LD_VAR 0 1
31394: PPUSH
31395: CALL_OW 274
31399: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31400: LD_VAR 0 9
31404: PPUSH
31405: LD_INT 1
31407: PPUSH
31408: CALL_OW 275
31412: PUSH
31413: LD_VAR 0 14
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: GREATEREQUAL
31422: PUSH
31423: LD_VAR 0 9
31427: PPUSH
31428: LD_INT 2
31430: PPUSH
31431: CALL_OW 275
31435: PUSH
31436: LD_VAR 0 14
31440: PUSH
31441: LD_INT 2
31443: ARRAY
31444: GREATEREQUAL
31445: AND
31446: PUSH
31447: LD_VAR 0 9
31451: PPUSH
31452: LD_INT 3
31454: PPUSH
31455: CALL_OW 275
31459: PUSH
31460: LD_VAR 0 14
31464: PUSH
31465: LD_INT 3
31467: ARRAY
31468: GREATEREQUAL
31469: AND
31470: IFFALSE 31482
// result := weapon ;
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: LD_VAR 0 18
31481: ST_TO_ADDR
// end ; end ;
31482: LD_VAR 0 3
31486: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
// result := true ;
31491: LD_ADDR_VAR 0 3
31495: PUSH
31496: LD_INT 1
31498: ST_TO_ADDR
// if array1 = array2 then
31499: LD_VAR 0 1
31503: PUSH
31504: LD_VAR 0 2
31508: EQUAL
31509: IFFALSE 31569
// begin for i = 1 to array1 do
31511: LD_ADDR_VAR 0 4
31515: PUSH
31516: DOUBLE
31517: LD_INT 1
31519: DEC
31520: ST_TO_ADDR
31521: LD_VAR 0 1
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31565
// if array1 [ i ] <> array2 [ i ] then
31529: LD_VAR 0 1
31533: PUSH
31534: LD_VAR 0 4
31538: ARRAY
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: LD_VAR 0 4
31549: ARRAY
31550: NONEQUAL
31551: IFFALSE 31563
// begin result := false ;
31553: LD_ADDR_VAR 0 3
31557: PUSH
31558: LD_INT 0
31560: ST_TO_ADDR
// break ;
31561: GO 31565
// end ;
31563: GO 31526
31565: POP
31566: POP
// end else
31567: GO 31577
// result := false ;
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 0
31576: ST_TO_ADDR
// end ;
31577: LD_VAR 0 3
31581: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31582: LD_INT 0
31584: PPUSH
31585: PPUSH
31586: PPUSH
// pom := GetBase ( fac ) ;
31587: LD_ADDR_VAR 0 5
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 274
31601: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31602: LD_ADDR_VAR 0 4
31606: PUSH
31607: LD_VAR 0 2
31611: PUSH
31612: LD_INT 1
31614: ARRAY
31615: PPUSH
31616: LD_VAR 0 2
31620: PUSH
31621: LD_INT 2
31623: ARRAY
31624: PPUSH
31625: LD_VAR 0 2
31629: PUSH
31630: LD_INT 3
31632: ARRAY
31633: PPUSH
31634: LD_VAR 0 2
31638: PUSH
31639: LD_INT 4
31641: ARRAY
31642: PPUSH
31643: CALL_OW 449
31647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31648: LD_ADDR_VAR 0 3
31652: PUSH
31653: LD_VAR 0 5
31657: PPUSH
31658: LD_INT 1
31660: PPUSH
31661: CALL_OW 275
31665: PUSH
31666: LD_VAR 0 4
31670: PUSH
31671: LD_INT 1
31673: ARRAY
31674: GREATEREQUAL
31675: PUSH
31676: LD_VAR 0 5
31680: PPUSH
31681: LD_INT 2
31683: PPUSH
31684: CALL_OW 275
31688: PUSH
31689: LD_VAR 0 4
31693: PUSH
31694: LD_INT 2
31696: ARRAY
31697: GREATEREQUAL
31698: AND
31699: PUSH
31700: LD_VAR 0 5
31704: PPUSH
31705: LD_INT 3
31707: PPUSH
31708: CALL_OW 275
31712: PUSH
31713: LD_VAR 0 4
31717: PUSH
31718: LD_INT 3
31720: ARRAY
31721: GREATEREQUAL
31722: AND
31723: ST_TO_ADDR
// end ;
31724: LD_VAR 0 3
31728: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31729: LD_INT 0
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
// pom := GetBase ( building ) ;
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 274
31749: ST_TO_ADDR
// if not pom then
31750: LD_VAR 0 3
31754: NOT
31755: IFFALSE 31759
// exit ;
31757: GO 31929
// btype := GetBType ( building ) ;
31759: LD_ADDR_VAR 0 5
31763: PUSH
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 266
31773: ST_TO_ADDR
// if btype = b_armoury then
31774: LD_VAR 0 5
31778: PUSH
31779: LD_INT 4
31781: EQUAL
31782: IFFALSE 31792
// btype := b_barracks ;
31784: LD_ADDR_VAR 0 5
31788: PUSH
31789: LD_INT 5
31791: ST_TO_ADDR
// if btype = b_depot then
31792: LD_VAR 0 5
31796: PUSH
31797: LD_INT 0
31799: EQUAL
31800: IFFALSE 31810
// btype := b_warehouse ;
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: LD_INT 1
31809: ST_TO_ADDR
// if btype = b_workshop then
31810: LD_VAR 0 5
31814: PUSH
31815: LD_INT 2
31817: EQUAL
31818: IFFALSE 31828
// btype := b_factory ;
31820: LD_ADDR_VAR 0 5
31824: PUSH
31825: LD_INT 3
31827: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31828: LD_ADDR_VAR 0 4
31832: PUSH
31833: LD_VAR 0 5
31837: PPUSH
31838: LD_VAR 0 1
31842: PPUSH
31843: CALL_OW 248
31847: PPUSH
31848: CALL_OW 450
31852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31853: LD_ADDR_VAR 0 2
31857: PUSH
31858: LD_VAR 0 3
31862: PPUSH
31863: LD_INT 1
31865: PPUSH
31866: CALL_OW 275
31870: PUSH
31871: LD_VAR 0 4
31875: PUSH
31876: LD_INT 1
31878: ARRAY
31879: GREATEREQUAL
31880: PUSH
31881: LD_VAR 0 3
31885: PPUSH
31886: LD_INT 2
31888: PPUSH
31889: CALL_OW 275
31893: PUSH
31894: LD_VAR 0 4
31898: PUSH
31899: LD_INT 2
31901: ARRAY
31902: GREATEREQUAL
31903: AND
31904: PUSH
31905: LD_VAR 0 3
31909: PPUSH
31910: LD_INT 3
31912: PPUSH
31913: CALL_OW 275
31917: PUSH
31918: LD_VAR 0 4
31922: PUSH
31923: LD_INT 3
31925: ARRAY
31926: GREATEREQUAL
31927: AND
31928: ST_TO_ADDR
// end ;
31929: LD_VAR 0 2
31933: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31934: LD_INT 0
31936: PPUSH
31937: PPUSH
31938: PPUSH
// pom := GetBase ( building ) ;
31939: LD_ADDR_VAR 0 4
31943: PUSH
31944: LD_VAR 0 1
31948: PPUSH
31949: CALL_OW 274
31953: ST_TO_ADDR
// if not pom then
31954: LD_VAR 0 4
31958: NOT
31959: IFFALSE 31963
// exit ;
31961: GO 32064
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31963: LD_ADDR_VAR 0 5
31967: PUSH
31968: LD_VAR 0 2
31972: PPUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: CALL_OW 248
31982: PPUSH
31983: CALL_OW 450
31987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_VAR 0 4
31997: PPUSH
31998: LD_INT 1
32000: PPUSH
32001: CALL_OW 275
32005: PUSH
32006: LD_VAR 0 5
32010: PUSH
32011: LD_INT 1
32013: ARRAY
32014: GREATEREQUAL
32015: PUSH
32016: LD_VAR 0 4
32020: PPUSH
32021: LD_INT 2
32023: PPUSH
32024: CALL_OW 275
32028: PUSH
32029: LD_VAR 0 5
32033: PUSH
32034: LD_INT 2
32036: ARRAY
32037: GREATEREQUAL
32038: AND
32039: PUSH
32040: LD_VAR 0 4
32044: PPUSH
32045: LD_INT 3
32047: PPUSH
32048: CALL_OW 275
32052: PUSH
32053: LD_VAR 0 5
32057: PUSH
32058: LD_INT 3
32060: ARRAY
32061: GREATEREQUAL
32062: AND
32063: ST_TO_ADDR
// end ;
32064: LD_VAR 0 3
32068: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32069: LD_INT 0
32071: PPUSH
32072: PPUSH
32073: PPUSH
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
// result := false ;
32081: LD_ADDR_VAR 0 6
32085: PUSH
32086: LD_INT 0
32088: ST_TO_ADDR
// if not base or not btype or not x or not y then
32089: LD_VAR 0 1
32093: NOT
32094: PUSH
32095: LD_VAR 0 2
32099: NOT
32100: OR
32101: PUSH
32102: LD_VAR 0 3
32106: NOT
32107: OR
32108: PUSH
32109: LD_VAR 0 4
32113: NOT
32114: OR
32115: IFFALSE 32119
// exit ;
32117: GO 32728
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32119: LD_ADDR_VAR 0 12
32123: PUSH
32124: LD_VAR 0 2
32128: PPUSH
32129: LD_VAR 0 3
32133: PPUSH
32134: LD_VAR 0 4
32138: PPUSH
32139: LD_VAR 0 5
32143: PPUSH
32144: LD_VAR 0 1
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: PPUSH
32153: CALL_OW 248
32157: PPUSH
32158: LD_INT 0
32160: PPUSH
32161: CALL 33565 0 6
32165: ST_TO_ADDR
// if not hexes then
32166: LD_VAR 0 12
32170: NOT
32171: IFFALSE 32175
// exit ;
32173: GO 32728
// for i = 1 to hexes do
32175: LD_ADDR_VAR 0 7
32179: PUSH
32180: DOUBLE
32181: LD_INT 1
32183: DEC
32184: ST_TO_ADDR
32185: LD_VAR 0 12
32189: PUSH
32190: FOR_TO
32191: IFFALSE 32726
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32193: LD_ADDR_VAR 0 11
32197: PUSH
32198: LD_VAR 0 12
32202: PUSH
32203: LD_VAR 0 7
32207: ARRAY
32208: PUSH
32209: LD_INT 1
32211: ARRAY
32212: PPUSH
32213: LD_VAR 0 12
32217: PUSH
32218: LD_VAR 0 7
32222: ARRAY
32223: PUSH
32224: LD_INT 2
32226: ARRAY
32227: PPUSH
32228: CALL_OW 428
32232: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32233: LD_VAR 0 12
32237: PUSH
32238: LD_VAR 0 7
32242: ARRAY
32243: PUSH
32244: LD_INT 1
32246: ARRAY
32247: PPUSH
32248: LD_VAR 0 12
32252: PUSH
32253: LD_VAR 0 7
32257: ARRAY
32258: PUSH
32259: LD_INT 2
32261: ARRAY
32262: PPUSH
32263: CALL_OW 351
32267: PUSH
32268: LD_VAR 0 12
32272: PUSH
32273: LD_VAR 0 7
32277: ARRAY
32278: PUSH
32279: LD_INT 1
32281: ARRAY
32282: PPUSH
32283: LD_VAR 0 12
32287: PUSH
32288: LD_VAR 0 7
32292: ARRAY
32293: PUSH
32294: LD_INT 2
32296: ARRAY
32297: PPUSH
32298: CALL_OW 488
32302: NOT
32303: OR
32304: PUSH
32305: LD_VAR 0 11
32309: PPUSH
32310: CALL_OW 247
32314: PUSH
32315: LD_INT 3
32317: EQUAL
32318: OR
32319: IFFALSE 32325
// exit ;
32321: POP
32322: POP
32323: GO 32728
// if not tmp or not tmp in base then
32325: LD_VAR 0 11
32329: NOT
32330: PUSH
32331: LD_VAR 0 11
32335: PUSH
32336: LD_VAR 0 1
32340: IN
32341: NOT
32342: OR
32343: IFFALSE 32347
// continue ;
32345: GO 32190
// result := true ;
32347: LD_ADDR_VAR 0 6
32351: PUSH
32352: LD_INT 1
32354: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32355: LD_ADDR_VAR 0 15
32359: PUSH
32360: LD_VAR 0 1
32364: PPUSH
32365: LD_INT 22
32367: PUSH
32368: LD_VAR 0 11
32372: PPUSH
32373: CALL_OW 255
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 30
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 30
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PPUSH
32414: CALL_OW 72
32418: ST_TO_ADDR
// if dep then
32419: LD_VAR 0 15
32423: IFFALSE 32559
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32425: LD_ADDR_VAR 0 14
32429: PUSH
32430: LD_VAR 0 15
32434: PUSH
32435: LD_INT 1
32437: ARRAY
32438: PPUSH
32439: CALL_OW 250
32443: PPUSH
32444: LD_VAR 0 15
32448: PUSH
32449: LD_INT 1
32451: ARRAY
32452: PPUSH
32453: CALL_OW 254
32457: PPUSH
32458: LD_INT 5
32460: PPUSH
32461: CALL_OW 272
32465: PUSH
32466: LD_VAR 0 15
32470: PUSH
32471: LD_INT 1
32473: ARRAY
32474: PPUSH
32475: CALL_OW 251
32479: PPUSH
32480: LD_VAR 0 15
32484: PUSH
32485: LD_INT 1
32487: ARRAY
32488: PPUSH
32489: CALL_OW 254
32493: PPUSH
32494: LD_INT 5
32496: PPUSH
32497: CALL_OW 273
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32506: LD_VAR 0 14
32510: PUSH
32511: LD_INT 1
32513: ARRAY
32514: PPUSH
32515: LD_VAR 0 14
32519: PUSH
32520: LD_INT 2
32522: ARRAY
32523: PPUSH
32524: CALL_OW 488
32528: IFFALSE 32559
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32530: LD_VAR 0 11
32534: PPUSH
32535: LD_VAR 0 14
32539: PUSH
32540: LD_INT 1
32542: ARRAY
32543: PPUSH
32544: LD_VAR 0 14
32548: PUSH
32549: LD_INT 2
32551: ARRAY
32552: PPUSH
32553: CALL_OW 111
// continue ;
32557: GO 32190
// end ; end ; r := GetDir ( tmp ) ;
32559: LD_ADDR_VAR 0 13
32563: PUSH
32564: LD_VAR 0 11
32568: PPUSH
32569: CALL_OW 254
32573: ST_TO_ADDR
// if r = 5 then
32574: LD_VAR 0 13
32578: PUSH
32579: LD_INT 5
32581: EQUAL
32582: IFFALSE 32592
// r := 0 ;
32584: LD_ADDR_VAR 0 13
32588: PUSH
32589: LD_INT 0
32591: ST_TO_ADDR
// for j = r to 5 do
32592: LD_ADDR_VAR 0 8
32596: PUSH
32597: DOUBLE
32598: LD_VAR 0 13
32602: DEC
32603: ST_TO_ADDR
32604: LD_INT 5
32606: PUSH
32607: FOR_TO
32608: IFFALSE 32722
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32610: LD_ADDR_VAR 0 9
32614: PUSH
32615: LD_VAR 0 11
32619: PPUSH
32620: CALL_OW 250
32624: PPUSH
32625: LD_VAR 0 8
32629: PPUSH
32630: LD_INT 2
32632: PPUSH
32633: CALL_OW 272
32637: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32638: LD_ADDR_VAR 0 10
32642: PUSH
32643: LD_VAR 0 11
32647: PPUSH
32648: CALL_OW 251
32652: PPUSH
32653: LD_VAR 0 8
32657: PPUSH
32658: LD_INT 2
32660: PPUSH
32661: CALL_OW 273
32665: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32666: LD_VAR 0 9
32670: PPUSH
32671: LD_VAR 0 10
32675: PPUSH
32676: CALL_OW 488
32680: PUSH
32681: LD_VAR 0 9
32685: PPUSH
32686: LD_VAR 0 10
32690: PPUSH
32691: CALL_OW 428
32695: NOT
32696: AND
32697: IFFALSE 32720
// begin ComMoveXY ( tmp , _x , _y ) ;
32699: LD_VAR 0 11
32703: PPUSH
32704: LD_VAR 0 9
32708: PPUSH
32709: LD_VAR 0 10
32713: PPUSH
32714: CALL_OW 111
// break ;
32718: GO 32722
// end ; end ;
32720: GO 32607
32722: POP
32723: POP
// end ;
32724: GO 32190
32726: POP
32727: POP
// end ;
32728: LD_VAR 0 6
32732: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
32744: PPUSH
// result := false ;
32745: LD_ADDR_VAR 0 6
32749: PUSH
32750: LD_INT 0
32752: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32753: LD_VAR 0 1
32757: NOT
32758: PUSH
32759: LD_VAR 0 1
32763: PPUSH
32764: CALL_OW 266
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: IN
32779: NOT
32780: OR
32781: PUSH
32782: LD_VAR 0 2
32786: NOT
32787: OR
32788: PUSH
32789: LD_VAR 0 5
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: LD_INT 3
32805: PUSH
32806: LD_INT 4
32808: PUSH
32809: LD_INT 5
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: IN
32820: NOT
32821: OR
32822: PUSH
32823: LD_VAR 0 3
32827: PPUSH
32828: LD_VAR 0 4
32832: PPUSH
32833: CALL_OW 488
32837: NOT
32838: OR
32839: IFFALSE 32843
// exit ;
32841: GO 33560
// pom := GetBase ( depot ) ;
32843: LD_ADDR_VAR 0 10
32847: PUSH
32848: LD_VAR 0 1
32852: PPUSH
32853: CALL_OW 274
32857: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32858: LD_ADDR_VAR 0 11
32862: PUSH
32863: LD_VAR 0 2
32867: PPUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL_OW 248
32877: PPUSH
32878: CALL_OW 450
32882: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32883: LD_VAR 0 10
32887: PPUSH
32888: LD_INT 1
32890: PPUSH
32891: CALL_OW 275
32895: PUSH
32896: LD_VAR 0 11
32900: PUSH
32901: LD_INT 1
32903: ARRAY
32904: GREATEREQUAL
32905: PUSH
32906: LD_VAR 0 10
32910: PPUSH
32911: LD_INT 2
32913: PPUSH
32914: CALL_OW 275
32918: PUSH
32919: LD_VAR 0 11
32923: PUSH
32924: LD_INT 2
32926: ARRAY
32927: GREATEREQUAL
32928: AND
32929: PUSH
32930: LD_VAR 0 10
32934: PPUSH
32935: LD_INT 3
32937: PPUSH
32938: CALL_OW 275
32942: PUSH
32943: LD_VAR 0 11
32947: PUSH
32948: LD_INT 3
32950: ARRAY
32951: GREATEREQUAL
32952: AND
32953: NOT
32954: IFFALSE 32958
// exit ;
32956: GO 33560
// if GetBType ( depot ) = b_depot then
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL_OW 266
32967: PUSH
32968: LD_INT 0
32970: EQUAL
32971: IFFALSE 32983
// dist := 28 else
32973: LD_ADDR_VAR 0 14
32977: PUSH
32978: LD_INT 28
32980: ST_TO_ADDR
32981: GO 32991
// dist := 36 ;
32983: LD_ADDR_VAR 0 14
32987: PUSH
32988: LD_INT 36
32990: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32991: LD_VAR 0 1
32995: PPUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: CALL_OW 297
33010: PUSH
33011: LD_VAR 0 14
33015: GREATER
33016: IFFALSE 33020
// exit ;
33018: GO 33560
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33020: LD_ADDR_VAR 0 12
33024: PUSH
33025: LD_VAR 0 2
33029: PPUSH
33030: LD_VAR 0 3
33034: PPUSH
33035: LD_VAR 0 4
33039: PPUSH
33040: LD_VAR 0 5
33044: PPUSH
33045: LD_VAR 0 1
33049: PPUSH
33050: CALL_OW 248
33054: PPUSH
33055: LD_INT 0
33057: PPUSH
33058: CALL 33565 0 6
33062: ST_TO_ADDR
// if not hexes then
33063: LD_VAR 0 12
33067: NOT
33068: IFFALSE 33072
// exit ;
33070: GO 33560
// hex := GetHexInfo ( x , y ) ;
33072: LD_ADDR_VAR 0 15
33076: PUSH
33077: LD_VAR 0 3
33081: PPUSH
33082: LD_VAR 0 4
33086: PPUSH
33087: CALL_OW 546
33091: ST_TO_ADDR
// if hex [ 1 ] then
33092: LD_VAR 0 15
33096: PUSH
33097: LD_INT 1
33099: ARRAY
33100: IFFALSE 33104
// exit ;
33102: GO 33560
// height := hex [ 2 ] ;
33104: LD_ADDR_VAR 0 13
33108: PUSH
33109: LD_VAR 0 15
33113: PUSH
33114: LD_INT 2
33116: ARRAY
33117: ST_TO_ADDR
// for i = 1 to hexes do
33118: LD_ADDR_VAR 0 7
33122: PUSH
33123: DOUBLE
33124: LD_INT 1
33126: DEC
33127: ST_TO_ADDR
33128: LD_VAR 0 12
33132: PUSH
33133: FOR_TO
33134: IFFALSE 33464
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33136: LD_VAR 0 12
33140: PUSH
33141: LD_VAR 0 7
33145: ARRAY
33146: PUSH
33147: LD_INT 1
33149: ARRAY
33150: PPUSH
33151: LD_VAR 0 12
33155: PUSH
33156: LD_VAR 0 7
33160: ARRAY
33161: PUSH
33162: LD_INT 2
33164: ARRAY
33165: PPUSH
33166: CALL_OW 488
33170: NOT
33171: PUSH
33172: LD_VAR 0 12
33176: PUSH
33177: LD_VAR 0 7
33181: ARRAY
33182: PUSH
33183: LD_INT 1
33185: ARRAY
33186: PPUSH
33187: LD_VAR 0 12
33191: PUSH
33192: LD_VAR 0 7
33196: ARRAY
33197: PUSH
33198: LD_INT 2
33200: ARRAY
33201: PPUSH
33202: CALL_OW 428
33206: PUSH
33207: LD_INT 0
33209: GREATER
33210: OR
33211: PUSH
33212: LD_VAR 0 12
33216: PUSH
33217: LD_VAR 0 7
33221: ARRAY
33222: PUSH
33223: LD_INT 1
33225: ARRAY
33226: PPUSH
33227: LD_VAR 0 12
33231: PUSH
33232: LD_VAR 0 7
33236: ARRAY
33237: PUSH
33238: LD_INT 2
33240: ARRAY
33241: PPUSH
33242: CALL_OW 351
33246: OR
33247: IFFALSE 33253
// exit ;
33249: POP
33250: POP
33251: GO 33560
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33253: LD_ADDR_VAR 0 8
33257: PUSH
33258: LD_VAR 0 12
33262: PUSH
33263: LD_VAR 0 7
33267: ARRAY
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PPUSH
33273: LD_VAR 0 12
33277: PUSH
33278: LD_VAR 0 7
33282: ARRAY
33283: PUSH
33284: LD_INT 2
33286: ARRAY
33287: PPUSH
33288: CALL_OW 546
33292: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33293: LD_VAR 0 8
33297: PUSH
33298: LD_INT 1
33300: ARRAY
33301: PUSH
33302: LD_VAR 0 8
33306: PUSH
33307: LD_INT 2
33309: ARRAY
33310: PUSH
33311: LD_VAR 0 13
33315: PUSH
33316: LD_INT 2
33318: PLUS
33319: GREATER
33320: OR
33321: PUSH
33322: LD_VAR 0 8
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PUSH
33331: LD_VAR 0 13
33335: PUSH
33336: LD_INT 2
33338: MINUS
33339: LESS
33340: OR
33341: PUSH
33342: LD_VAR 0 8
33346: PUSH
33347: LD_INT 3
33349: ARRAY
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 8
33356: PUSH
33357: LD_INT 9
33359: PUSH
33360: LD_INT 10
33362: PUSH
33363: LD_INT 11
33365: PUSH
33366: LD_INT 12
33368: PUSH
33369: LD_INT 13
33371: PUSH
33372: LD_INT 16
33374: PUSH
33375: LD_INT 17
33377: PUSH
33378: LD_INT 18
33380: PUSH
33381: LD_INT 19
33383: PUSH
33384: LD_INT 20
33386: PUSH
33387: LD_INT 21
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: IN
33405: NOT
33406: OR
33407: PUSH
33408: LD_VAR 0 8
33412: PUSH
33413: LD_INT 5
33415: ARRAY
33416: NOT
33417: OR
33418: PUSH
33419: LD_VAR 0 8
33423: PUSH
33424: LD_INT 6
33426: ARRAY
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 7
33436: PUSH
33437: LD_INT 9
33439: PUSH
33440: LD_INT 10
33442: PUSH
33443: LD_INT 11
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: IN
33454: NOT
33455: OR
33456: IFFALSE 33462
// exit ;
33458: POP
33459: POP
33460: GO 33560
// end ;
33462: GO 33133
33464: POP
33465: POP
// side := GetSide ( depot ) ;
33466: LD_ADDR_VAR 0 9
33470: PUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 255
33480: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33481: LD_VAR 0 9
33485: PPUSH
33486: LD_VAR 0 3
33490: PPUSH
33491: LD_VAR 0 4
33495: PPUSH
33496: LD_INT 20
33498: PPUSH
33499: CALL 26214 0 4
33503: PUSH
33504: LD_INT 4
33506: ARRAY
33507: IFFALSE 33511
// exit ;
33509: GO 33560
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33511: LD_VAR 0 2
33515: PUSH
33516: LD_INT 29
33518: PUSH
33519: LD_INT 30
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: IN
33526: PUSH
33527: LD_VAR 0 3
33531: PPUSH
33532: LD_VAR 0 4
33536: PPUSH
33537: LD_VAR 0 9
33541: PPUSH
33542: CALL_OW 440
33546: NOT
33547: AND
33548: IFFALSE 33552
// exit ;
33550: GO 33560
// result := true ;
33552: LD_ADDR_VAR 0 6
33556: PUSH
33557: LD_INT 1
33559: ST_TO_ADDR
// end ;
33560: LD_VAR 0 6
33564: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33565: LD_INT 0
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
33574: PPUSH
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
33624: PPUSH
// result = [ ] ;
33625: LD_ADDR_VAR 0 7
33629: PUSH
33630: EMPTY
33631: ST_TO_ADDR
// temp_list = [ ] ;
33632: LD_ADDR_VAR 0 9
33636: PUSH
33637: EMPTY
33638: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33639: LD_VAR 0 4
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: LD_INT 5
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: IN
33670: NOT
33671: PUSH
33672: LD_VAR 0 1
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: IN
33687: PUSH
33688: LD_VAR 0 5
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: IN
33707: NOT
33708: AND
33709: OR
33710: IFFALSE 33714
// exit ;
33712: GO 52105
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33714: LD_VAR 0 1
33718: PUSH
33719: LD_INT 6
33721: PUSH
33722: LD_INT 7
33724: PUSH
33725: LD_INT 8
33727: PUSH
33728: LD_INT 13
33730: PUSH
33731: LD_INT 12
33733: PUSH
33734: LD_INT 15
33736: PUSH
33737: LD_INT 11
33739: PUSH
33740: LD_INT 14
33742: PUSH
33743: LD_INT 10
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: IN
33757: IFFALSE 33767
// btype = b_lab ;
33759: LD_ADDR_VAR 0 1
33763: PUSH
33764: LD_INT 6
33766: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33767: LD_VAR 0 6
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: IN
33786: NOT
33787: PUSH
33788: LD_VAR 0 1
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 3
33804: PUSH
33805: LD_INT 6
33807: PUSH
33808: LD_INT 36
33810: PUSH
33811: LD_INT 4
33813: PUSH
33814: LD_INT 5
33816: PUSH
33817: LD_INT 31
33819: PUSH
33820: LD_INT 32
33822: PUSH
33823: LD_INT 33
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: IN
33839: NOT
33840: PUSH
33841: LD_VAR 0 6
33845: PUSH
33846: LD_INT 1
33848: EQUAL
33849: AND
33850: OR
33851: PUSH
33852: LD_VAR 0 1
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: IN
33867: NOT
33868: PUSH
33869: LD_VAR 0 6
33873: PUSH
33874: LD_INT 2
33876: EQUAL
33877: AND
33878: OR
33879: IFFALSE 33889
// mode = 0 ;
33881: LD_ADDR_VAR 0 6
33885: PUSH
33886: LD_INT 0
33888: ST_TO_ADDR
// case mode of 0 :
33889: LD_VAR 0 6
33893: PUSH
33894: LD_INT 0
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33902
33900: GO 45355
33902: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33903: LD_ADDR_VAR 0 11
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 2
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34096: LD_ADDR_VAR 0 12
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 2
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: NEG
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: NEG
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 3
34264: NEG
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34292: LD_ADDR_VAR 0 13
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 3
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 3
34463: NEG
34464: PUSH
34465: LD_INT 3
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34491: LD_ADDR_VAR 0 14
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 2
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: LD_INT 3
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34687: LD_ADDR_VAR 0 15
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34880: LD_ADDR_VAR 0 16
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 2
35003: NEG
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 2
35015: NEG
35016: PUSH
35017: LD_INT 2
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35073: LD_ADDR_VAR 0 17
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: LD_INT 2
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: LD_INT 2
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 2
35249: NEG
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35303: LD_ADDR_VAR 0 18
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35533: LD_ADDR_VAR 0 19
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: NEG
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35763: LD_ADDR_VAR 0 20
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: LD_INT 2
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35993: LD_ADDR_VAR 0 21
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36223: LD_ADDR_VAR 0 22
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36453: LD_ADDR_VAR 0 23
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: LD_INT 3
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: LD_INT 3
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36733: LD_ADDR_VAR 0 24
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 3
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 3
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37009: LD_ADDR_VAR 0 25
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: NEG
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 3
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37283: LD_ADDR_VAR 0 26
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 2
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37559: LD_ADDR_VAR 0 27
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 2
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 3
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37839: LD_ADDR_VAR 0 28
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 3
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 3
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: NEG
38075: PUSH
38076: LD_INT 1
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 3
38086: NEG
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38121: LD_ADDR_VAR 0 29
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: LD_INT 3
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 3
38365: NEG
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38400: LD_ADDR_VAR 0 30
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 2
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 3
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 3
38643: NEG
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38678: LD_ADDR_VAR 0 31
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 2
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: LD_INT 3
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38956: LD_ADDR_VAR 0 32
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 3
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39234: LD_ADDR_VAR 0 33
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: NEG
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39513: LD_ADDR_VAR 0 34
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: LD_INT 3
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 3
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39793: LD_ADDR_VAR 0 35
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39905: LD_ADDR_VAR 0 36
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40017: LD_ADDR_VAR 0 37
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40129: LD_ADDR_VAR 0 38
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40241: LD_ADDR_VAR 0 39
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40353: LD_ADDR_VAR 0 40
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40465: LD_ADDR_VAR 0 41
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 3
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 3
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: LD_INT 3
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40815: LD_ADDR_VAR 0 42
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 3
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 3
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 3
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 3
41112: NEG
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 3
41124: NEG
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41165: LD_ADDR_VAR 0 43
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 3
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 3
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 3
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 3
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 3
41461: NEG
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 3
41472: NEG
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41513: LD_ADDR_VAR 0 44
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 3
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: NEG
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: LD_INT 3
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41863: LD_ADDR_VAR 0 45
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 3
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 3
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 3
42109: PUSH
42110: LD_INT 3
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 3
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: LD_INT 3
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42213: LD_ADDR_VAR 0 46
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 3
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 3
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 3
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42561: LD_ADDR_VAR 0 47
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42712: LD_ADDR_VAR 0 48
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42859: LD_ADDR_VAR 0 49
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43003: LD_ADDR_VAR 0 50
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43147: LD_ADDR_VAR 0 51
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43294: LD_ADDR_VAR 0 52
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43445: LD_ADDR_VAR 0 53
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43675: LD_ADDR_VAR 0 54
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43905: LD_ADDR_VAR 0 55
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44135: LD_ADDR_VAR 0 56
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44365: LD_ADDR_VAR 0 57
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44595: LD_ADDR_VAR 0 58
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44825: LD_ADDR_VAR 0 59
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44913: LD_ADDR_VAR 0 60
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45001: LD_ADDR_VAR 0 61
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45089: LD_ADDR_VAR 0 62
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45177: LD_ADDR_VAR 0 63
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45265: LD_ADDR_VAR 0 64
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// end ; 1 :
45353: GO 51250
45355: LD_INT 1
45357: DOUBLE
45358: EQUAL
45359: IFTRUE 45363
45361: GO 47986
45363: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45364: LD_ADDR_VAR 0 11
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 3
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45408: LD_ADDR_VAR 0 12
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45449: LD_ADDR_VAR 0 13
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45489: LD_ADDR_VAR 0 14
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45530: LD_ADDR_VAR 0 15
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 3
45548: NEG
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 3
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45574: LD_ADDR_VAR 0 16
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: LD_INT 3
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45620: LD_ADDR_VAR 0 17
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 3
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45664: LD_ADDR_VAR 0 18
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45705: LD_ADDR_VAR 0 19
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: LD_INT 3
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45745: LD_ADDR_VAR 0 20
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 3
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45786: LD_ADDR_VAR 0 21
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 3
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45830: LD_ADDR_VAR 0 22
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 3
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: LD_INT 3
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45876: LD_ADDR_VAR 0 23
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 4
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45920: LD_ADDR_VAR 0 24
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 4
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45961: LD_ADDR_VAR 0 25
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 4
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: LD_INT 4
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46001: LD_ADDR_VAR 0 26
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 4
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 3
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 27
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 4
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46086: LD_ADDR_VAR 0 28
46090: PUSH
46091: LD_INT 3
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: LD_INT 4
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 4
46117: NEG
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46132: LD_ADDR_VAR 0 29
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 4
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 4
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 3
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 5
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 5
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 4
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 6
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 6
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 5
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46287: LD_ADDR_VAR 0 30
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 4
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 4
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 4
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 5
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 5
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 5
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 6
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 6
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46430: LD_ADDR_VAR 0 31
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 4
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 4
46477: PUSH
46478: LD_INT 4
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: LD_INT 4
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 5
46497: PUSH
46498: LD_INT 4
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 5
46507: PUSH
46508: LD_INT 5
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 4
46517: PUSH
46518: LD_INT 5
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 6
46527: PUSH
46528: LD_INT 5
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 6
46537: PUSH
46538: LD_INT 6
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 5
46547: PUSH
46548: LD_INT 6
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46569: LD_ADDR_VAR 0 32
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 4
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 4
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 5
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 5
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 4
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 6
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 6
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 5
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46712: LD_ADDR_VAR 0 33
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: NEG
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 4
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 4
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 4
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 5
46798: NEG
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 5
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 5
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 6
46832: NEG
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 6
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46867: LD_ADDR_VAR 0 34
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 3
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 3
46898: NEG
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: LD_INT 4
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 4
46922: NEG
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 4
46934: NEG
46935: PUSH
46936: LD_INT 4
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 4
46946: NEG
46947: PUSH
46948: LD_INT 5
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 5
46958: NEG
46959: PUSH
46960: LD_INT 4
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 5
46970: NEG
46971: PUSH
46972: LD_INT 5
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 5
46982: NEG
46983: PUSH
46984: LD_INT 6
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 6
46994: NEG
46995: PUSH
46996: LD_INT 5
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 6
47006: NEG
47007: PUSH
47008: LD_INT 6
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47030: LD_ADDR_VAR 0 41
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 3
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47074: LD_ADDR_VAR 0 42
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47115: LD_ADDR_VAR 0 43
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47155: LD_ADDR_VAR 0 44
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47196: LD_ADDR_VAR 0 45
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47240: LD_ADDR_VAR 0 46
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47286: LD_ADDR_VAR 0 47
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47319: LD_ADDR_VAR 0 48
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47350: LD_ADDR_VAR 0 49
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 3
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47379: LD_ADDR_VAR 0 50
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47408: LD_ADDR_VAR 0 51
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47439: LD_ADDR_VAR 0 52
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47472: LD_ADDR_VAR 0 53
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47516: LD_ADDR_VAR 0 54
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47557: LD_ADDR_VAR 0 55
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47597: LD_ADDR_VAR 0 56
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47638: LD_ADDR_VAR 0 57
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47682: LD_ADDR_VAR 0 58
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47728: LD_ADDR_VAR 0 59
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47772: LD_ADDR_VAR 0 60
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47813: LD_ADDR_VAR 0 61
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47853: LD_ADDR_VAR 0 62
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47894: LD_ADDR_VAR 0 63
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47938: LD_ADDR_VAR 0 64
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: ST_TO_ADDR
// end ; 2 :
47984: GO 51250
47986: LD_INT 2
47988: DOUBLE
47989: EQUAL
47990: IFTRUE 47994
47992: GO 51249
47994: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47995: LD_ADDR_VAR 0 29
47999: PUSH
48000: LD_INT 4
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 4
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 5
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 5
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 4
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 5
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 4
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 4
48125: PUSH
48126: LD_INT 4
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 4
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: LD_INT 4
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 4
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 4
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 5
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 5
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 4
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 4
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 4
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 4
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 4
48380: NEG
48381: PUSH
48382: LD_INT 4
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 4
48392: NEG
48393: PUSH
48394: LD_INT 5
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: LD_INT 4
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 4
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 5
48440: NEG
48441: PUSH
48442: LD_INT 4
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 5
48452: NEG
48453: PUSH
48454: LD_INT 5
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: LD_INT 5
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 5
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48533: LD_ADDR_VAR 0 30
48537: PUSH
48538: LD_INT 4
48540: PUSH
48541: LD_INT 4
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 4
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 5
48560: PUSH
48561: LD_INT 4
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 5
48570: PUSH
48571: LD_INT 5
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 4
48580: PUSH
48581: LD_INT 5
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: LD_INT 4
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 5
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: LD_INT 5
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 4
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 4
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 4
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 4
48723: NEG
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 4
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 4
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 5
48779: NEG
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 5
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 5
48802: NEG
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: NEG
48838: PUSH
48839: LD_INT 4
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: LD_INT 3
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: NEG
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 4
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 4
48897: NEG
48898: PUSH
48899: LD_INT 4
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 4
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 4
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 4
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 5
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 4
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 3
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 4
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 5
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 3
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 5
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49080: LD_ADDR_VAR 0 31
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 4
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 4
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 5
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 5
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 4
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 5
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 4
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 4
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 4
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 4
49282: NEG
49283: PUSH
49284: LD_INT 4
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 4
49294: NEG
49295: PUSH
49296: LD_INT 5
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: LD_INT 4
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 4
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 5
49342: NEG
49343: PUSH
49344: LD_INT 4
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 5
49354: NEG
49355: PUSH
49356: LD_INT 5
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: LD_INT 5
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 5
49378: NEG
49379: PUSH
49380: LD_INT 3
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 3
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 4
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 3
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 4
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 4
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 5
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 5
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 4
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 5
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49630: LD_ADDR_VAR 0 32
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 3
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 4
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 5
49693: NEG
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 5
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 5
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: LD_INT 4
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 3
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 4
49799: NEG
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 4
49811: NEG
49812: PUSH
49813: LD_INT 4
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 4
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 4
49835: NEG
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 4
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 5
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 4
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 3
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 4
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 5
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 5
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 4
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 3
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 4
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: PUSH
50043: LD_INT 4
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 4
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 5
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 5
50072: PUSH
50073: LD_INT 5
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: LD_INT 5
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 4
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 5
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: LD_INT 5
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50177: LD_ADDR_VAR 0 33
50181: PUSH
50182: LD_INT 4
50184: NEG
50185: PUSH
50186: LD_INT 4
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 4
50196: NEG
50197: PUSH
50198: LD_INT 5
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 4
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 4
50232: NEG
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 5
50244: NEG
50245: PUSH
50246: LD_INT 4
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 5
50256: NEG
50257: PUSH
50258: LD_INT 5
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: NEG
50269: PUSH
50270: LD_INT 5
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 5
50280: NEG
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 4
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 4
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 4
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 4
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 4
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 5
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 5
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 5
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 4
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: PUSH
50518: LD_INT 4
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: LD_INT 4
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 4
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: LD_INT 4
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 4
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 3
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 5
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 5
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 4
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 5
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50715: LD_ADDR_VAR 0 34
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 4
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 5
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 4
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 4
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 5
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 3
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 5
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 4
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 4
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 4
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: LD_INT 4
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 5
50937: PUSH
50938: LD_INT 4
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 5
50947: PUSH
50948: LD_INT 5
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 4
50957: PUSH
50958: LD_INT 5
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 4
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 5
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 5
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 4
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 4
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 4
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 4
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 4
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 5
51156: NEG
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 5
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 5
51179: NEG
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// end ; end ;
51247: GO 51250
51249: POP
// case btype of b_depot , b_warehouse :
51250: LD_VAR 0 1
51254: PUSH
51255: LD_INT 0
51257: DOUBLE
51258: EQUAL
51259: IFTRUE 51269
51261: LD_INT 1
51263: DOUBLE
51264: EQUAL
51265: IFTRUE 51269
51267: GO 51470
51269: POP
// case nation of nation_american :
51270: LD_VAR 0 5
51274: PUSH
51275: LD_INT 1
51277: DOUBLE
51278: EQUAL
51279: IFTRUE 51283
51281: GO 51339
51283: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51284: LD_ADDR_VAR 0 9
51288: PUSH
51289: LD_VAR 0 11
51293: PUSH
51294: LD_VAR 0 12
51298: PUSH
51299: LD_VAR 0 13
51303: PUSH
51304: LD_VAR 0 14
51308: PUSH
51309: LD_VAR 0 15
51313: PUSH
51314: LD_VAR 0 16
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: PUSH
51327: LD_VAR 0 4
51331: PUSH
51332: LD_INT 1
51334: PLUS
51335: ARRAY
51336: ST_TO_ADDR
51337: GO 51468
51339: LD_INT 2
51341: DOUBLE
51342: EQUAL
51343: IFTRUE 51347
51345: GO 51403
51347: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51348: LD_ADDR_VAR 0 9
51352: PUSH
51353: LD_VAR 0 17
51357: PUSH
51358: LD_VAR 0 18
51362: PUSH
51363: LD_VAR 0 19
51367: PUSH
51368: LD_VAR 0 20
51372: PUSH
51373: LD_VAR 0 21
51377: PUSH
51378: LD_VAR 0 22
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: PUSH
51391: LD_VAR 0 4
51395: PUSH
51396: LD_INT 1
51398: PLUS
51399: ARRAY
51400: ST_TO_ADDR
51401: GO 51468
51403: LD_INT 3
51405: DOUBLE
51406: EQUAL
51407: IFTRUE 51411
51409: GO 51467
51411: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51412: LD_ADDR_VAR 0 9
51416: PUSH
51417: LD_VAR 0 23
51421: PUSH
51422: LD_VAR 0 24
51426: PUSH
51427: LD_VAR 0 25
51431: PUSH
51432: LD_VAR 0 26
51436: PUSH
51437: LD_VAR 0 27
51441: PUSH
51442: LD_VAR 0 28
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: PUSH
51455: LD_VAR 0 4
51459: PUSH
51460: LD_INT 1
51462: PLUS
51463: ARRAY
51464: ST_TO_ADDR
51465: GO 51468
51467: POP
51468: GO 52023
51470: LD_INT 2
51472: DOUBLE
51473: EQUAL
51474: IFTRUE 51484
51476: LD_INT 3
51478: DOUBLE
51479: EQUAL
51480: IFTRUE 51484
51482: GO 51540
51484: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51485: LD_ADDR_VAR 0 9
51489: PUSH
51490: LD_VAR 0 29
51494: PUSH
51495: LD_VAR 0 30
51499: PUSH
51500: LD_VAR 0 31
51504: PUSH
51505: LD_VAR 0 32
51509: PUSH
51510: LD_VAR 0 33
51514: PUSH
51515: LD_VAR 0 34
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: PUSH
51528: LD_VAR 0 4
51532: PUSH
51533: LD_INT 1
51535: PLUS
51536: ARRAY
51537: ST_TO_ADDR
51538: GO 52023
51540: LD_INT 16
51542: DOUBLE
51543: EQUAL
51544: IFTRUE 51602
51546: LD_INT 17
51548: DOUBLE
51549: EQUAL
51550: IFTRUE 51602
51552: LD_INT 18
51554: DOUBLE
51555: EQUAL
51556: IFTRUE 51602
51558: LD_INT 19
51560: DOUBLE
51561: EQUAL
51562: IFTRUE 51602
51564: LD_INT 22
51566: DOUBLE
51567: EQUAL
51568: IFTRUE 51602
51570: LD_INT 20
51572: DOUBLE
51573: EQUAL
51574: IFTRUE 51602
51576: LD_INT 21
51578: DOUBLE
51579: EQUAL
51580: IFTRUE 51602
51582: LD_INT 23
51584: DOUBLE
51585: EQUAL
51586: IFTRUE 51602
51588: LD_INT 24
51590: DOUBLE
51591: EQUAL
51592: IFTRUE 51602
51594: LD_INT 25
51596: DOUBLE
51597: EQUAL
51598: IFTRUE 51602
51600: GO 51658
51602: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51603: LD_ADDR_VAR 0 9
51607: PUSH
51608: LD_VAR 0 35
51612: PUSH
51613: LD_VAR 0 36
51617: PUSH
51618: LD_VAR 0 37
51622: PUSH
51623: LD_VAR 0 38
51627: PUSH
51628: LD_VAR 0 39
51632: PUSH
51633: LD_VAR 0 40
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: LD_VAR 0 4
51650: PUSH
51651: LD_INT 1
51653: PLUS
51654: ARRAY
51655: ST_TO_ADDR
51656: GO 52023
51658: LD_INT 6
51660: DOUBLE
51661: EQUAL
51662: IFTRUE 51714
51664: LD_INT 7
51666: DOUBLE
51667: EQUAL
51668: IFTRUE 51714
51670: LD_INT 8
51672: DOUBLE
51673: EQUAL
51674: IFTRUE 51714
51676: LD_INT 13
51678: DOUBLE
51679: EQUAL
51680: IFTRUE 51714
51682: LD_INT 12
51684: DOUBLE
51685: EQUAL
51686: IFTRUE 51714
51688: LD_INT 15
51690: DOUBLE
51691: EQUAL
51692: IFTRUE 51714
51694: LD_INT 11
51696: DOUBLE
51697: EQUAL
51698: IFTRUE 51714
51700: LD_INT 14
51702: DOUBLE
51703: EQUAL
51704: IFTRUE 51714
51706: LD_INT 10
51708: DOUBLE
51709: EQUAL
51710: IFTRUE 51714
51712: GO 51770
51714: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51715: LD_ADDR_VAR 0 9
51719: PUSH
51720: LD_VAR 0 41
51724: PUSH
51725: LD_VAR 0 42
51729: PUSH
51730: LD_VAR 0 43
51734: PUSH
51735: LD_VAR 0 44
51739: PUSH
51740: LD_VAR 0 45
51744: PUSH
51745: LD_VAR 0 46
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: PUSH
51758: LD_VAR 0 4
51762: PUSH
51763: LD_INT 1
51765: PLUS
51766: ARRAY
51767: ST_TO_ADDR
51768: GO 52023
51770: LD_INT 36
51772: DOUBLE
51773: EQUAL
51774: IFTRUE 51778
51776: GO 51834
51778: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51779: LD_ADDR_VAR 0 9
51783: PUSH
51784: LD_VAR 0 47
51788: PUSH
51789: LD_VAR 0 48
51793: PUSH
51794: LD_VAR 0 49
51798: PUSH
51799: LD_VAR 0 50
51803: PUSH
51804: LD_VAR 0 51
51808: PUSH
51809: LD_VAR 0 52
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: PUSH
51822: LD_VAR 0 4
51826: PUSH
51827: LD_INT 1
51829: PLUS
51830: ARRAY
51831: ST_TO_ADDR
51832: GO 52023
51834: LD_INT 4
51836: DOUBLE
51837: EQUAL
51838: IFTRUE 51860
51840: LD_INT 5
51842: DOUBLE
51843: EQUAL
51844: IFTRUE 51860
51846: LD_INT 34
51848: DOUBLE
51849: EQUAL
51850: IFTRUE 51860
51852: LD_INT 37
51854: DOUBLE
51855: EQUAL
51856: IFTRUE 51860
51858: GO 51916
51860: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51861: LD_ADDR_VAR 0 9
51865: PUSH
51866: LD_VAR 0 53
51870: PUSH
51871: LD_VAR 0 54
51875: PUSH
51876: LD_VAR 0 55
51880: PUSH
51881: LD_VAR 0 56
51885: PUSH
51886: LD_VAR 0 57
51890: PUSH
51891: LD_VAR 0 58
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: PUSH
51904: LD_VAR 0 4
51908: PUSH
51909: LD_INT 1
51911: PLUS
51912: ARRAY
51913: ST_TO_ADDR
51914: GO 52023
51916: LD_INT 31
51918: DOUBLE
51919: EQUAL
51920: IFTRUE 51966
51922: LD_INT 32
51924: DOUBLE
51925: EQUAL
51926: IFTRUE 51966
51928: LD_INT 33
51930: DOUBLE
51931: EQUAL
51932: IFTRUE 51966
51934: LD_INT 27
51936: DOUBLE
51937: EQUAL
51938: IFTRUE 51966
51940: LD_INT 26
51942: DOUBLE
51943: EQUAL
51944: IFTRUE 51966
51946: LD_INT 28
51948: DOUBLE
51949: EQUAL
51950: IFTRUE 51966
51952: LD_INT 29
51954: DOUBLE
51955: EQUAL
51956: IFTRUE 51966
51958: LD_INT 30
51960: DOUBLE
51961: EQUAL
51962: IFTRUE 51966
51964: GO 52022
51966: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
51967: LD_ADDR_VAR 0 9
51971: PUSH
51972: LD_VAR 0 59
51976: PUSH
51977: LD_VAR 0 60
51981: PUSH
51982: LD_VAR 0 61
51986: PUSH
51987: LD_VAR 0 62
51991: PUSH
51992: LD_VAR 0 63
51996: PUSH
51997: LD_VAR 0 64
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: PUSH
52010: LD_VAR 0 4
52014: PUSH
52015: LD_INT 1
52017: PLUS
52018: ARRAY
52019: ST_TO_ADDR
52020: GO 52023
52022: POP
// temp_list2 = [ ] ;
52023: LD_ADDR_VAR 0 10
52027: PUSH
52028: EMPTY
52029: ST_TO_ADDR
// for i in temp_list do
52030: LD_ADDR_VAR 0 8
52034: PUSH
52035: LD_VAR 0 9
52039: PUSH
52040: FOR_IN
52041: IFFALSE 52093
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52043: LD_ADDR_VAR 0 10
52047: PUSH
52048: LD_VAR 0 10
52052: PUSH
52053: LD_VAR 0 8
52057: PUSH
52058: LD_INT 1
52060: ARRAY
52061: PUSH
52062: LD_VAR 0 2
52066: PLUS
52067: PUSH
52068: LD_VAR 0 8
52072: PUSH
52073: LD_INT 2
52075: ARRAY
52076: PUSH
52077: LD_VAR 0 3
52081: PLUS
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: ADD
52090: ST_TO_ADDR
52091: GO 52040
52093: POP
52094: POP
// result = temp_list2 ;
52095: LD_ADDR_VAR 0 7
52099: PUSH
52100: LD_VAR 0 10
52104: ST_TO_ADDR
// end ;
52105: LD_VAR 0 7
52109: RET
// export function EnemyInRange ( unit , dist ) ; begin
52110: LD_INT 0
52112: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52113: LD_ADDR_VAR 0 3
52117: PUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 255
52127: PPUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: CALL_OW 250
52137: PPUSH
52138: LD_VAR 0 1
52142: PPUSH
52143: CALL_OW 251
52147: PPUSH
52148: LD_VAR 0 2
52152: PPUSH
52153: CALL 26214 0 4
52157: PUSH
52158: LD_INT 4
52160: ARRAY
52161: ST_TO_ADDR
// end ;
52162: LD_VAR 0 3
52166: RET
// export function PlayerSeeMe ( unit ) ; begin
52167: LD_INT 0
52169: PPUSH
// result := See ( your_side , unit ) ;
52170: LD_ADDR_VAR 0 2
52174: PUSH
52175: LD_OWVAR 2
52179: PPUSH
52180: LD_VAR 0 1
52184: PPUSH
52185: CALL_OW 292
52189: ST_TO_ADDR
// end ;
52190: LD_VAR 0 2
52194: RET
// export function ReverseDir ( unit ) ; begin
52195: LD_INT 0
52197: PPUSH
// if not unit then
52198: LD_VAR 0 1
52202: NOT
52203: IFFALSE 52207
// exit ;
52205: GO 52230
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52207: LD_ADDR_VAR 0 2
52211: PUSH
52212: LD_VAR 0 1
52216: PPUSH
52217: CALL_OW 254
52221: PUSH
52222: LD_INT 3
52224: PLUS
52225: PUSH
52226: LD_INT 6
52228: MOD
52229: ST_TO_ADDR
// end ;
52230: LD_VAR 0 2
52234: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52235: LD_INT 0
52237: PPUSH
52238: PPUSH
52239: PPUSH
52240: PPUSH
52241: PPUSH
// if not hexes then
52242: LD_VAR 0 2
52246: NOT
52247: IFFALSE 52251
// exit ;
52249: GO 52399
// dist := 9999 ;
52251: LD_ADDR_VAR 0 5
52255: PUSH
52256: LD_INT 9999
52258: ST_TO_ADDR
// for i = 1 to hexes do
52259: LD_ADDR_VAR 0 4
52263: PUSH
52264: DOUBLE
52265: LD_INT 1
52267: DEC
52268: ST_TO_ADDR
52269: LD_VAR 0 2
52273: PUSH
52274: FOR_TO
52275: IFFALSE 52387
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52277: LD_VAR 0 1
52281: PPUSH
52282: LD_VAR 0 2
52286: PUSH
52287: LD_VAR 0 4
52291: ARRAY
52292: PUSH
52293: LD_INT 1
52295: ARRAY
52296: PPUSH
52297: LD_VAR 0 2
52301: PUSH
52302: LD_VAR 0 4
52306: ARRAY
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PPUSH
52312: CALL_OW 297
52316: PUSH
52317: LD_VAR 0 5
52321: LESS
52322: IFFALSE 52385
// begin hex := hexes [ i ] ;
52324: LD_ADDR_VAR 0 7
52328: PUSH
52329: LD_VAR 0 2
52333: PUSH
52334: LD_VAR 0 4
52338: ARRAY
52339: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52340: LD_ADDR_VAR 0 5
52344: PUSH
52345: LD_VAR 0 1
52349: PPUSH
52350: LD_VAR 0 2
52354: PUSH
52355: LD_VAR 0 4
52359: ARRAY
52360: PUSH
52361: LD_INT 1
52363: ARRAY
52364: PPUSH
52365: LD_VAR 0 2
52369: PUSH
52370: LD_VAR 0 4
52374: ARRAY
52375: PUSH
52376: LD_INT 2
52378: ARRAY
52379: PPUSH
52380: CALL_OW 297
52384: ST_TO_ADDR
// end ; end ;
52385: GO 52274
52387: POP
52388: POP
// result := hex ;
52389: LD_ADDR_VAR 0 3
52393: PUSH
52394: LD_VAR 0 7
52398: ST_TO_ADDR
// end ;
52399: LD_VAR 0 3
52403: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52404: LD_INT 0
52406: PPUSH
52407: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52408: LD_VAR 0 1
52412: NOT
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_INT 21
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 23
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PPUSH
52443: CALL_OW 69
52447: IN
52448: NOT
52449: OR
52450: IFFALSE 52454
// exit ;
52452: GO 52501
// for i = 1 to 3 do
52454: LD_ADDR_VAR 0 3
52458: PUSH
52459: DOUBLE
52460: LD_INT 1
52462: DEC
52463: ST_TO_ADDR
52464: LD_INT 3
52466: PUSH
52467: FOR_TO
52468: IFFALSE 52499
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 250
52479: PPUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: CALL_OW 251
52489: PPUSH
52490: LD_INT 1
52492: PPUSH
52493: CALL_OW 453
52497: GO 52467
52499: POP
52500: POP
// end ;
52501: LD_VAR 0 2
52505: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52506: LD_INT 0
52508: PPUSH
52509: PPUSH
52510: PPUSH
52511: PPUSH
52512: PPUSH
52513: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52514: LD_VAR 0 1
52518: NOT
52519: PUSH
52520: LD_VAR 0 2
52524: NOT
52525: OR
52526: PUSH
52527: LD_VAR 0 1
52531: PPUSH
52532: CALL_OW 314
52536: OR
52537: IFFALSE 52541
// exit ;
52539: GO 52982
// x := GetX ( enemy_unit ) ;
52541: LD_ADDR_VAR 0 7
52545: PUSH
52546: LD_VAR 0 2
52550: PPUSH
52551: CALL_OW 250
52555: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52556: LD_ADDR_VAR 0 8
52560: PUSH
52561: LD_VAR 0 2
52565: PPUSH
52566: CALL_OW 251
52570: ST_TO_ADDR
// if not x or not y then
52571: LD_VAR 0 7
52575: NOT
52576: PUSH
52577: LD_VAR 0 8
52581: NOT
52582: OR
52583: IFFALSE 52587
// exit ;
52585: GO 52982
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52587: LD_ADDR_VAR 0 6
52591: PUSH
52592: LD_VAR 0 7
52596: PPUSH
52597: LD_INT 0
52599: PPUSH
52600: LD_INT 4
52602: PPUSH
52603: CALL_OW 272
52607: PUSH
52608: LD_VAR 0 8
52612: PPUSH
52613: LD_INT 0
52615: PPUSH
52616: LD_INT 4
52618: PPUSH
52619: CALL_OW 273
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_VAR 0 7
52632: PPUSH
52633: LD_INT 1
52635: PPUSH
52636: LD_INT 4
52638: PPUSH
52639: CALL_OW 272
52643: PUSH
52644: LD_VAR 0 8
52648: PPUSH
52649: LD_INT 1
52651: PPUSH
52652: LD_INT 4
52654: PPUSH
52655: CALL_OW 273
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_VAR 0 7
52668: PPUSH
52669: LD_INT 2
52671: PPUSH
52672: LD_INT 4
52674: PPUSH
52675: CALL_OW 272
52679: PUSH
52680: LD_VAR 0 8
52684: PPUSH
52685: LD_INT 2
52687: PPUSH
52688: LD_INT 4
52690: PPUSH
52691: CALL_OW 273
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_VAR 0 7
52704: PPUSH
52705: LD_INT 3
52707: PPUSH
52708: LD_INT 4
52710: PPUSH
52711: CALL_OW 272
52715: PUSH
52716: LD_VAR 0 8
52720: PPUSH
52721: LD_INT 3
52723: PPUSH
52724: LD_INT 4
52726: PPUSH
52727: CALL_OW 273
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_VAR 0 7
52740: PPUSH
52741: LD_INT 4
52743: PPUSH
52744: LD_INT 4
52746: PPUSH
52747: CALL_OW 272
52751: PUSH
52752: LD_VAR 0 8
52756: PPUSH
52757: LD_INT 4
52759: PPUSH
52760: LD_INT 4
52762: PPUSH
52763: CALL_OW 273
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_VAR 0 7
52776: PPUSH
52777: LD_INT 5
52779: PPUSH
52780: LD_INT 4
52782: PPUSH
52783: CALL_OW 272
52787: PUSH
52788: LD_VAR 0 8
52792: PPUSH
52793: LD_INT 5
52795: PPUSH
52796: LD_INT 4
52798: PPUSH
52799: CALL_OW 273
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// for i = tmp downto 1 do
52816: LD_ADDR_VAR 0 4
52820: PUSH
52821: DOUBLE
52822: LD_VAR 0 6
52826: INC
52827: ST_TO_ADDR
52828: LD_INT 1
52830: PUSH
52831: FOR_DOWNTO
52832: IFFALSE 52933
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52834: LD_VAR 0 6
52838: PUSH
52839: LD_VAR 0 4
52843: ARRAY
52844: PUSH
52845: LD_INT 1
52847: ARRAY
52848: PPUSH
52849: LD_VAR 0 6
52853: PUSH
52854: LD_VAR 0 4
52858: ARRAY
52859: PUSH
52860: LD_INT 2
52862: ARRAY
52863: PPUSH
52864: CALL_OW 488
52868: NOT
52869: PUSH
52870: LD_VAR 0 6
52874: PUSH
52875: LD_VAR 0 4
52879: ARRAY
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PPUSH
52885: LD_VAR 0 6
52889: PUSH
52890: LD_VAR 0 4
52894: ARRAY
52895: PUSH
52896: LD_INT 2
52898: ARRAY
52899: PPUSH
52900: CALL_OW 428
52904: PUSH
52905: LD_INT 0
52907: NONEQUAL
52908: OR
52909: IFFALSE 52931
// tmp := Delete ( tmp , i ) ;
52911: LD_ADDR_VAR 0 6
52915: PUSH
52916: LD_VAR 0 6
52920: PPUSH
52921: LD_VAR 0 4
52925: PPUSH
52926: CALL_OW 3
52930: ST_TO_ADDR
52931: GO 52831
52933: POP
52934: POP
// j := GetClosestHex ( unit , tmp ) ;
52935: LD_ADDR_VAR 0 5
52939: PUSH
52940: LD_VAR 0 1
52944: PPUSH
52945: LD_VAR 0 6
52949: PPUSH
52950: CALL 52235 0 2
52954: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52955: LD_VAR 0 1
52959: PPUSH
52960: LD_VAR 0 5
52964: PUSH
52965: LD_INT 1
52967: ARRAY
52968: PPUSH
52969: LD_VAR 0 5
52973: PUSH
52974: LD_INT 2
52976: ARRAY
52977: PPUSH
52978: CALL_OW 111
// end ;
52982: LD_VAR 0 3
52986: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52987: LD_INT 0
52989: PPUSH
52990: PPUSH
52991: PPUSH
// uc_side = 0 ;
52992: LD_ADDR_OWVAR 20
52996: PUSH
52997: LD_INT 0
52999: ST_TO_ADDR
// uc_nation = 0 ;
53000: LD_ADDR_OWVAR 21
53004: PUSH
53005: LD_INT 0
53007: ST_TO_ADDR
// InitHc ;
53008: CALL_OW 19
// InitVc ;
53012: CALL_OW 20
// if mastodonts then
53016: LD_VAR 0 6
53020: IFFALSE 53087
// for i = 1 to mastodonts do
53022: LD_ADDR_VAR 0 11
53026: PUSH
53027: DOUBLE
53028: LD_INT 1
53030: DEC
53031: ST_TO_ADDR
53032: LD_VAR 0 6
53036: PUSH
53037: FOR_TO
53038: IFFALSE 53085
// begin vc_chassis := 31 ;
53040: LD_ADDR_OWVAR 37
53044: PUSH
53045: LD_INT 31
53047: ST_TO_ADDR
// vc_control := control_rider ;
53048: LD_ADDR_OWVAR 38
53052: PUSH
53053: LD_INT 4
53055: ST_TO_ADDR
// animal := CreateVehicle ;
53056: LD_ADDR_VAR 0 12
53060: PUSH
53061: CALL_OW 45
53065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53066: LD_VAR 0 12
53070: PPUSH
53071: LD_VAR 0 8
53075: PPUSH
53076: LD_INT 0
53078: PPUSH
53079: CALL 55156 0 3
// end ;
53083: GO 53037
53085: POP
53086: POP
// if horses then
53087: LD_VAR 0 5
53091: IFFALSE 53158
// for i = 1 to horses do
53093: LD_ADDR_VAR 0 11
53097: PUSH
53098: DOUBLE
53099: LD_INT 1
53101: DEC
53102: ST_TO_ADDR
53103: LD_VAR 0 5
53107: PUSH
53108: FOR_TO
53109: IFFALSE 53156
// begin hc_class := 21 ;
53111: LD_ADDR_OWVAR 28
53115: PUSH
53116: LD_INT 21
53118: ST_TO_ADDR
// hc_gallery :=  ;
53119: LD_ADDR_OWVAR 33
53123: PUSH
53124: LD_STRING 
53126: ST_TO_ADDR
// animal := CreateHuman ;
53127: LD_ADDR_VAR 0 12
53131: PUSH
53132: CALL_OW 44
53136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53137: LD_VAR 0 12
53141: PPUSH
53142: LD_VAR 0 8
53146: PPUSH
53147: LD_INT 0
53149: PPUSH
53150: CALL 55156 0 3
// end ;
53154: GO 53108
53156: POP
53157: POP
// if birds then
53158: LD_VAR 0 1
53162: IFFALSE 53229
// for i = 1 to birds do
53164: LD_ADDR_VAR 0 11
53168: PUSH
53169: DOUBLE
53170: LD_INT 1
53172: DEC
53173: ST_TO_ADDR
53174: LD_VAR 0 1
53178: PUSH
53179: FOR_TO
53180: IFFALSE 53227
// begin hc_class = 18 ;
53182: LD_ADDR_OWVAR 28
53186: PUSH
53187: LD_INT 18
53189: ST_TO_ADDR
// hc_gallery =  ;
53190: LD_ADDR_OWVAR 33
53194: PUSH
53195: LD_STRING 
53197: ST_TO_ADDR
// animal := CreateHuman ;
53198: LD_ADDR_VAR 0 12
53202: PUSH
53203: CALL_OW 44
53207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53208: LD_VAR 0 12
53212: PPUSH
53213: LD_VAR 0 8
53217: PPUSH
53218: LD_INT 0
53220: PPUSH
53221: CALL 55156 0 3
// end ;
53225: GO 53179
53227: POP
53228: POP
// if tigers then
53229: LD_VAR 0 2
53233: IFFALSE 53317
// for i = 1 to tigers do
53235: LD_ADDR_VAR 0 11
53239: PUSH
53240: DOUBLE
53241: LD_INT 1
53243: DEC
53244: ST_TO_ADDR
53245: LD_VAR 0 2
53249: PUSH
53250: FOR_TO
53251: IFFALSE 53315
// begin hc_class = class_tiger ;
53253: LD_ADDR_OWVAR 28
53257: PUSH
53258: LD_INT 14
53260: ST_TO_ADDR
// hc_gallery =  ;
53261: LD_ADDR_OWVAR 33
53265: PUSH
53266: LD_STRING 
53268: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53269: LD_ADDR_OWVAR 35
53273: PUSH
53274: LD_INT 7
53276: NEG
53277: PPUSH
53278: LD_INT 7
53280: PPUSH
53281: CALL_OW 12
53285: ST_TO_ADDR
// animal := CreateHuman ;
53286: LD_ADDR_VAR 0 12
53290: PUSH
53291: CALL_OW 44
53295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53296: LD_VAR 0 12
53300: PPUSH
53301: LD_VAR 0 8
53305: PPUSH
53306: LD_INT 0
53308: PPUSH
53309: CALL 55156 0 3
// end ;
53313: GO 53250
53315: POP
53316: POP
// if apemans then
53317: LD_VAR 0 3
53321: IFFALSE 53444
// for i = 1 to apemans do
53323: LD_ADDR_VAR 0 11
53327: PUSH
53328: DOUBLE
53329: LD_INT 1
53331: DEC
53332: ST_TO_ADDR
53333: LD_VAR 0 3
53337: PUSH
53338: FOR_TO
53339: IFFALSE 53442
// begin hc_class = class_apeman ;
53341: LD_ADDR_OWVAR 28
53345: PUSH
53346: LD_INT 12
53348: ST_TO_ADDR
// hc_gallery =  ;
53349: LD_ADDR_OWVAR 33
53353: PUSH
53354: LD_STRING 
53356: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53357: LD_ADDR_OWVAR 35
53361: PUSH
53362: LD_INT 5
53364: NEG
53365: PPUSH
53366: LD_INT 5
53368: PPUSH
53369: CALL_OW 12
53373: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53374: LD_ADDR_OWVAR 31
53378: PUSH
53379: LD_INT 1
53381: PPUSH
53382: LD_INT 3
53384: PPUSH
53385: CALL_OW 12
53389: PUSH
53390: LD_INT 1
53392: PPUSH
53393: LD_INT 3
53395: PPUSH
53396: CALL_OW 12
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// animal := CreateHuman ;
53413: LD_ADDR_VAR 0 12
53417: PUSH
53418: CALL_OW 44
53422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53423: LD_VAR 0 12
53427: PPUSH
53428: LD_VAR 0 8
53432: PPUSH
53433: LD_INT 0
53435: PPUSH
53436: CALL 55156 0 3
// end ;
53440: GO 53338
53442: POP
53443: POP
// if enchidnas then
53444: LD_VAR 0 4
53448: IFFALSE 53515
// for i = 1 to enchidnas do
53450: LD_ADDR_VAR 0 11
53454: PUSH
53455: DOUBLE
53456: LD_INT 1
53458: DEC
53459: ST_TO_ADDR
53460: LD_VAR 0 4
53464: PUSH
53465: FOR_TO
53466: IFFALSE 53513
// begin hc_class = 13 ;
53468: LD_ADDR_OWVAR 28
53472: PUSH
53473: LD_INT 13
53475: ST_TO_ADDR
// hc_gallery =  ;
53476: LD_ADDR_OWVAR 33
53480: PUSH
53481: LD_STRING 
53483: ST_TO_ADDR
// animal := CreateHuman ;
53484: LD_ADDR_VAR 0 12
53488: PUSH
53489: CALL_OW 44
53493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53494: LD_VAR 0 12
53498: PPUSH
53499: LD_VAR 0 8
53503: PPUSH
53504: LD_INT 0
53506: PPUSH
53507: CALL 55156 0 3
// end ;
53511: GO 53465
53513: POP
53514: POP
// if fishes then
53515: LD_VAR 0 7
53519: IFFALSE 53586
// for i = 1 to fishes do
53521: LD_ADDR_VAR 0 11
53525: PUSH
53526: DOUBLE
53527: LD_INT 1
53529: DEC
53530: ST_TO_ADDR
53531: LD_VAR 0 7
53535: PUSH
53536: FOR_TO
53537: IFFALSE 53584
// begin hc_class = 20 ;
53539: LD_ADDR_OWVAR 28
53543: PUSH
53544: LD_INT 20
53546: ST_TO_ADDR
// hc_gallery =  ;
53547: LD_ADDR_OWVAR 33
53551: PUSH
53552: LD_STRING 
53554: ST_TO_ADDR
// animal := CreateHuman ;
53555: LD_ADDR_VAR 0 12
53559: PUSH
53560: CALL_OW 44
53564: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53565: LD_VAR 0 12
53569: PPUSH
53570: LD_VAR 0 9
53574: PPUSH
53575: LD_INT 0
53577: PPUSH
53578: CALL 55156 0 3
// end ;
53582: GO 53536
53584: POP
53585: POP
// end ;
53586: LD_VAR 0 10
53590: RET
// export function WantHeal ( sci , unit ) ; begin
53591: LD_INT 0
53593: PPUSH
// if GetTaskList ( sci ) > 0 then
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 437
53603: PUSH
53604: LD_INT 0
53606: GREATER
53607: IFFALSE 53677
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 437
53618: PUSH
53619: LD_INT 1
53621: ARRAY
53622: PUSH
53623: LD_INT 1
53625: ARRAY
53626: PUSH
53627: LD_STRING l
53629: EQUAL
53630: PUSH
53631: LD_VAR 0 1
53635: PPUSH
53636: CALL_OW 437
53640: PUSH
53641: LD_INT 1
53643: ARRAY
53644: PUSH
53645: LD_INT 4
53647: ARRAY
53648: PUSH
53649: LD_VAR 0 2
53653: EQUAL
53654: AND
53655: IFFALSE 53667
// result := true else
53657: LD_ADDR_VAR 0 3
53661: PUSH
53662: LD_INT 1
53664: ST_TO_ADDR
53665: GO 53675
// result := false ;
53667: LD_ADDR_VAR 0 3
53671: PUSH
53672: LD_INT 0
53674: ST_TO_ADDR
// end else
53675: GO 53685
// result := false ;
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_INT 0
53684: ST_TO_ADDR
// end ;
53685: LD_VAR 0 3
53689: RET
// export function HealTarget ( sci ) ; begin
53690: LD_INT 0
53692: PPUSH
// if not sci then
53693: LD_VAR 0 1
53697: NOT
53698: IFFALSE 53702
// exit ;
53700: GO 53767
// result := 0 ;
53702: LD_ADDR_VAR 0 2
53706: PUSH
53707: LD_INT 0
53709: ST_TO_ADDR
// if GetTaskList ( sci ) then
53710: LD_VAR 0 1
53714: PPUSH
53715: CALL_OW 437
53719: IFFALSE 53767
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53721: LD_VAR 0 1
53725: PPUSH
53726: CALL_OW 437
53730: PUSH
53731: LD_INT 1
53733: ARRAY
53734: PUSH
53735: LD_INT 1
53737: ARRAY
53738: PUSH
53739: LD_STRING l
53741: EQUAL
53742: IFFALSE 53767
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53744: LD_ADDR_VAR 0 2
53748: PUSH
53749: LD_VAR 0 1
53753: PPUSH
53754: CALL_OW 437
53758: PUSH
53759: LD_INT 1
53761: ARRAY
53762: PUSH
53763: LD_INT 4
53765: ARRAY
53766: ST_TO_ADDR
// end ;
53767: LD_VAR 0 2
53771: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53772: LD_INT 0
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
// if not base_units then
53778: LD_VAR 0 1
53782: NOT
53783: IFFALSE 53787
// exit ;
53785: GO 53874
// result := false ;
53787: LD_ADDR_VAR 0 2
53791: PUSH
53792: LD_INT 0
53794: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53795: LD_ADDR_VAR 0 5
53799: PUSH
53800: LD_VAR 0 1
53804: PPUSH
53805: LD_INT 21
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PPUSH
53815: CALL_OW 72
53819: ST_TO_ADDR
// if not tmp then
53820: LD_VAR 0 5
53824: NOT
53825: IFFALSE 53829
// exit ;
53827: GO 53874
// for i in tmp do
53829: LD_ADDR_VAR 0 3
53833: PUSH
53834: LD_VAR 0 5
53838: PUSH
53839: FOR_IN
53840: IFFALSE 53872
// begin result := EnemyInRange ( i , 22 ) ;
53842: LD_ADDR_VAR 0 2
53846: PUSH
53847: LD_VAR 0 3
53851: PPUSH
53852: LD_INT 22
53854: PPUSH
53855: CALL 52110 0 2
53859: ST_TO_ADDR
// if result then
53860: LD_VAR 0 2
53864: IFFALSE 53870
// exit ;
53866: POP
53867: POP
53868: GO 53874
// end ;
53870: GO 53839
53872: POP
53873: POP
// end ;
53874: LD_VAR 0 2
53878: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53879: LD_INT 0
53881: PPUSH
53882: PPUSH
// if not units then
53883: LD_VAR 0 1
53887: NOT
53888: IFFALSE 53892
// exit ;
53890: GO 53962
// result := [ ] ;
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: EMPTY
53898: ST_TO_ADDR
// for i in units do
53899: LD_ADDR_VAR 0 4
53903: PUSH
53904: LD_VAR 0 1
53908: PUSH
53909: FOR_IN
53910: IFFALSE 53960
// if GetTag ( i ) = tag then
53912: LD_VAR 0 4
53916: PPUSH
53917: CALL_OW 110
53921: PUSH
53922: LD_VAR 0 2
53926: EQUAL
53927: IFFALSE 53958
// result := Insert ( result , result + 1 , i ) ;
53929: LD_ADDR_VAR 0 3
53933: PUSH
53934: LD_VAR 0 3
53938: PPUSH
53939: LD_VAR 0 3
53943: PUSH
53944: LD_INT 1
53946: PLUS
53947: PPUSH
53948: LD_VAR 0 4
53952: PPUSH
53953: CALL_OW 2
53957: ST_TO_ADDR
53958: GO 53909
53960: POP
53961: POP
// end ;
53962: LD_VAR 0 3
53966: RET
// export function IsDriver ( un ) ; begin
53967: LD_INT 0
53969: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53970: LD_ADDR_VAR 0 2
53974: PUSH
53975: LD_VAR 0 1
53979: PUSH
53980: LD_INT 55
53982: PUSH
53983: EMPTY
53984: LIST
53985: PPUSH
53986: CALL_OW 69
53990: IN
53991: ST_TO_ADDR
// end ;
53992: LD_VAR 0 2
53996: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53997: LD_INT 0
53999: PPUSH
54000: PPUSH
// list := [ ] ;
54001: LD_ADDR_VAR 0 5
54005: PUSH
54006: EMPTY
54007: ST_TO_ADDR
// case d of 0 :
54008: LD_VAR 0 3
54012: PUSH
54013: LD_INT 0
54015: DOUBLE
54016: EQUAL
54017: IFTRUE 54021
54019: GO 54154
54021: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54022: LD_ADDR_VAR 0 5
54026: PUSH
54027: LD_VAR 0 1
54031: PUSH
54032: LD_INT 4
54034: MINUS
54035: PUSH
54036: LD_VAR 0 2
54040: PUSH
54041: LD_INT 4
54043: MINUS
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: PUSH
54053: LD_VAR 0 1
54057: PUSH
54058: LD_INT 3
54060: MINUS
54061: PUSH
54062: LD_VAR 0 2
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: PUSH
54075: LD_VAR 0 1
54079: PUSH
54080: LD_INT 4
54082: PLUS
54083: PUSH
54084: LD_VAR 0 2
54088: PUSH
54089: LD_INT 4
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: PUSH
54097: LD_VAR 0 1
54101: PUSH
54102: LD_INT 3
54104: PLUS
54105: PUSH
54106: LD_VAR 0 2
54110: PUSH
54111: LD_INT 3
54113: PLUS
54114: PUSH
54115: LD_INT 5
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: PUSH
54123: LD_VAR 0 1
54127: PUSH
54128: LD_VAR 0 2
54132: PUSH
54133: LD_INT 4
54135: PLUS
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: ST_TO_ADDR
// end ; 1 :
54152: GO 54852
54154: LD_INT 1
54156: DOUBLE
54157: EQUAL
54158: IFTRUE 54162
54160: GO 54295
54162: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54163: LD_ADDR_VAR 0 5
54167: PUSH
54168: LD_VAR 0 1
54172: PUSH
54173: LD_VAR 0 2
54177: PUSH
54178: LD_INT 4
54180: MINUS
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: PUSH
54190: LD_VAR 0 1
54194: PUSH
54195: LD_INT 3
54197: MINUS
54198: PUSH
54199: LD_VAR 0 2
54203: PUSH
54204: LD_INT 3
54206: MINUS
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: PUSH
54216: LD_VAR 0 1
54220: PUSH
54221: LD_INT 4
54223: MINUS
54224: PUSH
54225: LD_VAR 0 2
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: PUSH
54238: LD_VAR 0 1
54242: PUSH
54243: LD_VAR 0 2
54247: PUSH
54248: LD_INT 3
54250: PLUS
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: PUSH
54260: LD_VAR 0 1
54264: PUSH
54265: LD_INT 4
54267: PLUS
54268: PUSH
54269: LD_VAR 0 2
54273: PUSH
54274: LD_INT 4
54276: PLUS
54277: PUSH
54278: LD_INT 5
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// end ; 2 :
54293: GO 54852
54295: LD_INT 2
54297: DOUBLE
54298: EQUAL
54299: IFTRUE 54303
54301: GO 54432
54303: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54304: LD_ADDR_VAR 0 5
54308: PUSH
54309: LD_VAR 0 1
54313: PUSH
54314: LD_VAR 0 2
54318: PUSH
54319: LD_INT 3
54321: MINUS
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: PUSH
54331: LD_VAR 0 1
54335: PUSH
54336: LD_INT 4
54338: PLUS
54339: PUSH
54340: LD_VAR 0 2
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: PUSH
54353: LD_VAR 0 1
54357: PUSH
54358: LD_VAR 0 2
54362: PUSH
54363: LD_INT 4
54365: PLUS
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: PUSH
54375: LD_VAR 0 1
54379: PUSH
54380: LD_INT 3
54382: MINUS
54383: PUSH
54384: LD_VAR 0 2
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: LIST
54396: PUSH
54397: LD_VAR 0 1
54401: PUSH
54402: LD_INT 4
54404: MINUS
54405: PUSH
54406: LD_VAR 0 2
54410: PUSH
54411: LD_INT 4
54413: MINUS
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// end ; 3 :
54430: GO 54852
54432: LD_INT 3
54434: DOUBLE
54435: EQUAL
54436: IFTRUE 54440
54438: GO 54573
54440: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54441: LD_ADDR_VAR 0 5
54445: PUSH
54446: LD_VAR 0 1
54450: PUSH
54451: LD_INT 3
54453: PLUS
54454: PUSH
54455: LD_VAR 0 2
54459: PUSH
54460: LD_INT 4
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: PUSH
54468: LD_VAR 0 1
54472: PUSH
54473: LD_INT 4
54475: PLUS
54476: PUSH
54477: LD_VAR 0 2
54481: PUSH
54482: LD_INT 4
54484: PLUS
54485: PUSH
54486: LD_INT 5
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: PUSH
54494: LD_VAR 0 1
54498: PUSH
54499: LD_INT 4
54501: MINUS
54502: PUSH
54503: LD_VAR 0 2
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: PUSH
54516: LD_VAR 0 1
54520: PUSH
54521: LD_VAR 0 2
54525: PUSH
54526: LD_INT 4
54528: MINUS
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: LIST
54537: PUSH
54538: LD_VAR 0 1
54542: PUSH
54543: LD_INT 3
54545: MINUS
54546: PUSH
54547: LD_VAR 0 2
54551: PUSH
54552: LD_INT 3
54554: MINUS
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// end ; 4 :
54571: GO 54852
54573: LD_INT 4
54575: DOUBLE
54576: EQUAL
54577: IFTRUE 54581
54579: GO 54714
54581: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54582: LD_ADDR_VAR 0 5
54586: PUSH
54587: LD_VAR 0 1
54591: PUSH
54592: LD_VAR 0 2
54596: PUSH
54597: LD_INT 4
54599: PLUS
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: PUSH
54609: LD_VAR 0 1
54613: PUSH
54614: LD_INT 3
54616: PLUS
54617: PUSH
54618: LD_VAR 0 2
54622: PUSH
54623: LD_INT 3
54625: PLUS
54626: PUSH
54627: LD_INT 5
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: PUSH
54635: LD_VAR 0 1
54639: PUSH
54640: LD_INT 4
54642: PLUS
54643: PUSH
54644: LD_VAR 0 2
54648: PUSH
54649: LD_INT 4
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: PUSH
54657: LD_VAR 0 1
54661: PUSH
54662: LD_VAR 0 2
54666: PUSH
54667: LD_INT 3
54669: MINUS
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: PUSH
54679: LD_VAR 0 1
54683: PUSH
54684: LD_INT 4
54686: MINUS
54687: PUSH
54688: LD_VAR 0 2
54692: PUSH
54693: LD_INT 4
54695: MINUS
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// end ; 5 :
54712: GO 54852
54714: LD_INT 5
54716: DOUBLE
54717: EQUAL
54718: IFTRUE 54722
54720: GO 54851
54722: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54723: LD_ADDR_VAR 0 5
54727: PUSH
54728: LD_VAR 0 1
54732: PUSH
54733: LD_INT 4
54735: MINUS
54736: PUSH
54737: LD_VAR 0 2
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: PUSH
54750: LD_VAR 0 1
54754: PUSH
54755: LD_VAR 0 2
54759: PUSH
54760: LD_INT 4
54762: MINUS
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: PUSH
54772: LD_VAR 0 1
54776: PUSH
54777: LD_INT 4
54779: PLUS
54780: PUSH
54781: LD_VAR 0 2
54785: PUSH
54786: LD_INT 4
54788: PLUS
54789: PUSH
54790: LD_INT 5
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: PUSH
54798: LD_VAR 0 1
54802: PUSH
54803: LD_INT 3
54805: PLUS
54806: PUSH
54807: LD_VAR 0 2
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: PUSH
54820: LD_VAR 0 1
54824: PUSH
54825: LD_VAR 0 2
54829: PUSH
54830: LD_INT 3
54832: PLUS
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// end ; end ;
54849: GO 54852
54851: POP
// result := list ;
54852: LD_ADDR_VAR 0 4
54856: PUSH
54857: LD_VAR 0 5
54861: ST_TO_ADDR
// end ;
54862: LD_VAR 0 4
54866: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54867: LD_INT 0
54869: PPUSH
54870: PPUSH
54871: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54872: LD_VAR 0 1
54876: NOT
54877: PUSH
54878: LD_VAR 0 2
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 4
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: IN
54901: NOT
54902: OR
54903: IFFALSE 54907
// exit ;
54905: GO 54999
// tmp := [ ] ;
54907: LD_ADDR_VAR 0 5
54911: PUSH
54912: EMPTY
54913: ST_TO_ADDR
// for i in units do
54914: LD_ADDR_VAR 0 4
54918: PUSH
54919: LD_VAR 0 1
54923: PUSH
54924: FOR_IN
54925: IFFALSE 54968
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54927: LD_ADDR_VAR 0 5
54931: PUSH
54932: LD_VAR 0 5
54936: PPUSH
54937: LD_VAR 0 5
54941: PUSH
54942: LD_INT 1
54944: PLUS
54945: PPUSH
54946: LD_VAR 0 4
54950: PPUSH
54951: LD_VAR 0 2
54955: PPUSH
54956: CALL_OW 259
54960: PPUSH
54961: CALL_OW 2
54965: ST_TO_ADDR
54966: GO 54924
54968: POP
54969: POP
// if not tmp then
54970: LD_VAR 0 5
54974: NOT
54975: IFFALSE 54979
// exit ;
54977: GO 54999
// result := SortListByListDesc ( units , tmp ) ;
54979: LD_ADDR_VAR 0 3
54983: PUSH
54984: LD_VAR 0 1
54988: PPUSH
54989: LD_VAR 0 5
54993: PPUSH
54994: CALL_OW 77
54998: ST_TO_ADDR
// end ;
54999: LD_VAR 0 3
55003: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55004: LD_INT 0
55006: PPUSH
55007: PPUSH
55008: PPUSH
// x := GetX ( building ) ;
55009: LD_ADDR_VAR 0 4
55013: PUSH
55014: LD_VAR 0 2
55018: PPUSH
55019: CALL_OW 250
55023: ST_TO_ADDR
// y := GetY ( building ) ;
55024: LD_ADDR_VAR 0 5
55028: PUSH
55029: LD_VAR 0 2
55033: PPUSH
55034: CALL_OW 251
55038: ST_TO_ADDR
// if GetTaskList ( unit ) then
55039: LD_VAR 0 1
55043: PPUSH
55044: CALL_OW 437
55048: IFFALSE 55143
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55050: LD_STRING e
55052: PUSH
55053: LD_VAR 0 1
55057: PPUSH
55058: CALL_OW 437
55062: PUSH
55063: LD_INT 1
55065: ARRAY
55066: PUSH
55067: LD_INT 1
55069: ARRAY
55070: EQUAL
55071: PUSH
55072: LD_VAR 0 4
55076: PUSH
55077: LD_VAR 0 1
55081: PPUSH
55082: CALL_OW 437
55086: PUSH
55087: LD_INT 1
55089: ARRAY
55090: PUSH
55091: LD_INT 2
55093: ARRAY
55094: EQUAL
55095: AND
55096: PUSH
55097: LD_VAR 0 5
55101: PUSH
55102: LD_VAR 0 1
55106: PPUSH
55107: CALL_OW 437
55111: PUSH
55112: LD_INT 1
55114: ARRAY
55115: PUSH
55116: LD_INT 3
55118: ARRAY
55119: EQUAL
55120: AND
55121: IFFALSE 55133
// result := true else
55123: LD_ADDR_VAR 0 3
55127: PUSH
55128: LD_INT 1
55130: ST_TO_ADDR
55131: GO 55141
// result := false ;
55133: LD_ADDR_VAR 0 3
55137: PUSH
55138: LD_INT 0
55140: ST_TO_ADDR
// end else
55141: GO 55151
// result := false ;
55143: LD_ADDR_VAR 0 3
55147: PUSH
55148: LD_INT 0
55150: ST_TO_ADDR
// end ;
55151: LD_VAR 0 3
55155: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55156: LD_INT 0
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
// if not unit or not area then
55162: LD_VAR 0 1
55166: NOT
55167: PUSH
55168: LD_VAR 0 2
55172: NOT
55173: OR
55174: IFFALSE 55178
// exit ;
55176: GO 55342
// tmp := AreaToList ( area , i ) ;
55178: LD_ADDR_VAR 0 6
55182: PUSH
55183: LD_VAR 0 2
55187: PPUSH
55188: LD_VAR 0 5
55192: PPUSH
55193: CALL_OW 517
55197: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55198: LD_ADDR_VAR 0 5
55202: PUSH
55203: DOUBLE
55204: LD_INT 1
55206: DEC
55207: ST_TO_ADDR
55208: LD_VAR 0 6
55212: PUSH
55213: LD_INT 1
55215: ARRAY
55216: PUSH
55217: FOR_TO
55218: IFFALSE 55340
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55220: LD_ADDR_VAR 0 7
55224: PUSH
55225: LD_VAR 0 6
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PUSH
55234: LD_VAR 0 5
55238: ARRAY
55239: PUSH
55240: LD_VAR 0 6
55244: PUSH
55245: LD_INT 2
55247: ARRAY
55248: PUSH
55249: LD_VAR 0 5
55253: ARRAY
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55259: LD_VAR 0 7
55263: PUSH
55264: LD_INT 1
55266: ARRAY
55267: PPUSH
55268: LD_VAR 0 7
55272: PUSH
55273: LD_INT 2
55275: ARRAY
55276: PPUSH
55277: CALL_OW 428
55281: PUSH
55282: LD_INT 0
55284: EQUAL
55285: IFFALSE 55338
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55287: LD_VAR 0 1
55291: PPUSH
55292: LD_VAR 0 7
55296: PUSH
55297: LD_INT 1
55299: ARRAY
55300: PPUSH
55301: LD_VAR 0 7
55305: PUSH
55306: LD_INT 2
55308: ARRAY
55309: PPUSH
55310: LD_VAR 0 3
55314: PPUSH
55315: CALL_OW 48
// result := IsPlaced ( unit ) ;
55319: LD_ADDR_VAR 0 4
55323: PUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: CALL_OW 305
55333: ST_TO_ADDR
// exit ;
55334: POP
55335: POP
55336: GO 55342
// end ; end ;
55338: GO 55217
55340: POP
55341: POP
// end ;
55342: LD_VAR 0 4
55346: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55347: LD_INT 0
55349: PPUSH
55350: PPUSH
55351: PPUSH
// if not side or side > 8 then
55352: LD_VAR 0 1
55356: NOT
55357: PUSH
55358: LD_VAR 0 1
55362: PUSH
55363: LD_INT 8
55365: GREATER
55366: OR
55367: IFFALSE 55371
// exit ;
55369: GO 55558
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55371: LD_ADDR_VAR 0 4
55375: PUSH
55376: LD_INT 22
55378: PUSH
55379: LD_VAR 0 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 21
55390: PUSH
55391: LD_INT 3
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PPUSH
55402: CALL_OW 69
55406: ST_TO_ADDR
// if not tmp then
55407: LD_VAR 0 4
55411: NOT
55412: IFFALSE 55416
// exit ;
55414: GO 55558
// enable_addtolog := true ;
55416: LD_ADDR_OWVAR 81
55420: PUSH
55421: LD_INT 1
55423: ST_TO_ADDR
// AddToLog ( [ ) ;
55424: LD_STRING [
55426: PPUSH
55427: CALL_OW 561
// for i in tmp do
55431: LD_ADDR_VAR 0 3
55435: PUSH
55436: LD_VAR 0 4
55440: PUSH
55441: FOR_IN
55442: IFFALSE 55549
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55444: LD_STRING [
55446: PUSH
55447: LD_VAR 0 3
55451: PPUSH
55452: CALL_OW 266
55456: STR
55457: PUSH
55458: LD_STRING , 
55460: STR
55461: PUSH
55462: LD_VAR 0 3
55466: PPUSH
55467: CALL_OW 250
55471: STR
55472: PUSH
55473: LD_STRING , 
55475: STR
55476: PUSH
55477: LD_VAR 0 3
55481: PPUSH
55482: CALL_OW 251
55486: STR
55487: PUSH
55488: LD_STRING , 
55490: STR
55491: PUSH
55492: LD_VAR 0 3
55496: PPUSH
55497: CALL_OW 254
55501: STR
55502: PUSH
55503: LD_STRING , 
55505: STR
55506: PUSH
55507: LD_VAR 0 3
55511: PPUSH
55512: LD_INT 1
55514: PPUSH
55515: CALL_OW 268
55519: STR
55520: PUSH
55521: LD_STRING , 
55523: STR
55524: PUSH
55525: LD_VAR 0 3
55529: PPUSH
55530: LD_INT 2
55532: PPUSH
55533: CALL_OW 268
55537: STR
55538: PUSH
55539: LD_STRING ],
55541: STR
55542: PPUSH
55543: CALL_OW 561
// end ;
55547: GO 55441
55549: POP
55550: POP
// AddToLog ( ]; ) ;
55551: LD_STRING ];
55553: PPUSH
55554: CALL_OW 561
// end ;
55558: LD_VAR 0 2
55562: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55563: LD_INT 0
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
55569: PPUSH
// if not area or not rate or not max then
55570: LD_VAR 0 1
55574: NOT
55575: PUSH
55576: LD_VAR 0 2
55580: NOT
55581: OR
55582: PUSH
55583: LD_VAR 0 4
55587: NOT
55588: OR
55589: IFFALSE 55593
// exit ;
55591: GO 55785
// while 1 do
55593: LD_INT 1
55595: IFFALSE 55785
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55597: LD_ADDR_VAR 0 9
55601: PUSH
55602: LD_VAR 0 1
55606: PPUSH
55607: LD_INT 1
55609: PPUSH
55610: CALL_OW 287
55614: PUSH
55615: LD_INT 10
55617: MUL
55618: ST_TO_ADDR
// r := rate / 10 ;
55619: LD_ADDR_VAR 0 7
55623: PUSH
55624: LD_VAR 0 2
55628: PUSH
55629: LD_INT 10
55631: DIVREAL
55632: ST_TO_ADDR
// time := 1 1$00 ;
55633: LD_ADDR_VAR 0 8
55637: PUSH
55638: LD_INT 2100
55640: ST_TO_ADDR
// if amount < min then
55641: LD_VAR 0 9
55645: PUSH
55646: LD_VAR 0 3
55650: LESS
55651: IFFALSE 55669
// r := r * 2 else
55653: LD_ADDR_VAR 0 7
55657: PUSH
55658: LD_VAR 0 7
55662: PUSH
55663: LD_INT 2
55665: MUL
55666: ST_TO_ADDR
55667: GO 55695
// if amount > max then
55669: LD_VAR 0 9
55673: PUSH
55674: LD_VAR 0 4
55678: GREATER
55679: IFFALSE 55695
// r := r / 2 ;
55681: LD_ADDR_VAR 0 7
55685: PUSH
55686: LD_VAR 0 7
55690: PUSH
55691: LD_INT 2
55693: DIVREAL
55694: ST_TO_ADDR
// time := time / r ;
55695: LD_ADDR_VAR 0 8
55699: PUSH
55700: LD_VAR 0 8
55704: PUSH
55705: LD_VAR 0 7
55709: DIVREAL
55710: ST_TO_ADDR
// if time < 0 then
55711: LD_VAR 0 8
55715: PUSH
55716: LD_INT 0
55718: LESS
55719: IFFALSE 55736
// time := time * - 1 ;
55721: LD_ADDR_VAR 0 8
55725: PUSH
55726: LD_VAR 0 8
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: MUL
55735: ST_TO_ADDR
// wait ( time ) ;
55736: LD_VAR 0 8
55740: PPUSH
55741: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55745: LD_INT 35
55747: PPUSH
55748: LD_INT 875
55750: PPUSH
55751: CALL_OW 12
55755: PPUSH
55756: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55760: LD_INT 1
55762: PPUSH
55763: LD_INT 5
55765: PPUSH
55766: CALL_OW 12
55770: PPUSH
55771: LD_VAR 0 1
55775: PPUSH
55776: LD_INT 1
55778: PPUSH
55779: CALL_OW 55
// end ;
55783: GO 55593
// end ;
55785: LD_VAR 0 5
55789: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55790: LD_INT 0
55792: PPUSH
55793: PPUSH
55794: PPUSH
55795: PPUSH
55796: PPUSH
55797: PPUSH
55798: PPUSH
55799: PPUSH
// if not turrets or not factories then
55800: LD_VAR 0 1
55804: NOT
55805: PUSH
55806: LD_VAR 0 2
55810: NOT
55811: OR
55812: IFFALSE 55816
// exit ;
55814: GO 56123
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55816: LD_ADDR_VAR 0 10
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 6
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 4
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: LD_INT 5
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 24
55858: PUSH
55859: LD_INT 25
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 23
55868: PUSH
55869: LD_INT 27
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 42
55882: PUSH
55883: LD_INT 43
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 44
55892: PUSH
55893: LD_INT 46
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 45
55902: PUSH
55903: LD_INT 47
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// result := [ ] ;
55920: LD_ADDR_VAR 0 3
55924: PUSH
55925: EMPTY
55926: ST_TO_ADDR
// for i in turrets do
55927: LD_ADDR_VAR 0 4
55931: PUSH
55932: LD_VAR 0 1
55936: PUSH
55937: FOR_IN
55938: IFFALSE 56121
// begin nat := GetNation ( i ) ;
55940: LD_ADDR_VAR 0 7
55944: PUSH
55945: LD_VAR 0 4
55949: PPUSH
55950: CALL_OW 248
55954: ST_TO_ADDR
// weapon := 0 ;
55955: LD_ADDR_VAR 0 8
55959: PUSH
55960: LD_INT 0
55962: ST_TO_ADDR
// if not nat then
55963: LD_VAR 0 7
55967: NOT
55968: IFFALSE 55972
// continue ;
55970: GO 55937
// for j in list [ nat ] do
55972: LD_ADDR_VAR 0 5
55976: PUSH
55977: LD_VAR 0 10
55981: PUSH
55982: LD_VAR 0 7
55986: ARRAY
55987: PUSH
55988: FOR_IN
55989: IFFALSE 56030
// if GetBWeapon ( i ) = j [ 1 ] then
55991: LD_VAR 0 4
55995: PPUSH
55996: CALL_OW 269
56000: PUSH
56001: LD_VAR 0 5
56005: PUSH
56006: LD_INT 1
56008: ARRAY
56009: EQUAL
56010: IFFALSE 56028
// begin weapon := j [ 2 ] ;
56012: LD_ADDR_VAR 0 8
56016: PUSH
56017: LD_VAR 0 5
56021: PUSH
56022: LD_INT 2
56024: ARRAY
56025: ST_TO_ADDR
// break ;
56026: GO 56030
// end ;
56028: GO 55988
56030: POP
56031: POP
// if not weapon then
56032: LD_VAR 0 8
56036: NOT
56037: IFFALSE 56041
// continue ;
56039: GO 55937
// for k in factories do
56041: LD_ADDR_VAR 0 6
56045: PUSH
56046: LD_VAR 0 2
56050: PUSH
56051: FOR_IN
56052: IFFALSE 56117
// begin weapons := AvailableWeaponList ( k ) ;
56054: LD_ADDR_VAR 0 9
56058: PUSH
56059: LD_VAR 0 6
56063: PPUSH
56064: CALL_OW 478
56068: ST_TO_ADDR
// if not weapons then
56069: LD_VAR 0 9
56073: NOT
56074: IFFALSE 56078
// continue ;
56076: GO 56051
// if weapon in weapons then
56078: LD_VAR 0 8
56082: PUSH
56083: LD_VAR 0 9
56087: IN
56088: IFFALSE 56115
// begin result := [ i , weapon ] ;
56090: LD_ADDR_VAR 0 3
56094: PUSH
56095: LD_VAR 0 4
56099: PUSH
56100: LD_VAR 0 8
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: ST_TO_ADDR
// exit ;
56109: POP
56110: POP
56111: POP
56112: POP
56113: GO 56123
// end ; end ;
56115: GO 56051
56117: POP
56118: POP
// end ;
56119: GO 55937
56121: POP
56122: POP
// end ;
56123: LD_VAR 0 3
56127: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56128: LD_INT 0
56130: PPUSH
// if not side or side > 8 then
56131: LD_VAR 0 3
56135: NOT
56136: PUSH
56137: LD_VAR 0 3
56141: PUSH
56142: LD_INT 8
56144: GREATER
56145: OR
56146: IFFALSE 56150
// exit ;
56148: GO 56209
// if not range then
56150: LD_VAR 0 4
56154: NOT
56155: IFFALSE 56166
// range := - 12 ;
56157: LD_ADDR_VAR 0 4
56161: PUSH
56162: LD_INT 12
56164: NEG
56165: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56166: LD_VAR 0 1
56170: PPUSH
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_VAR 0 3
56180: PPUSH
56181: LD_VAR 0 4
56185: PPUSH
56186: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56190: LD_VAR 0 1
56194: PPUSH
56195: LD_VAR 0 2
56199: PPUSH
56200: LD_VAR 0 3
56204: PPUSH
56205: CALL_OW 331
// end ;
56209: LD_VAR 0 5
56213: RET
// export function Video ( mode ) ; begin
56214: LD_INT 0
56216: PPUSH
// ingame_video = mode ;
56217: LD_ADDR_OWVAR 52
56221: PUSH
56222: LD_VAR 0 1
56226: ST_TO_ADDR
// interface_hidden = mode ;
56227: LD_ADDR_OWVAR 54
56231: PUSH
56232: LD_VAR 0 1
56236: ST_TO_ADDR
// end ;
56237: LD_VAR 0 2
56241: RET
// export function Join ( array , element ) ; begin
56242: LD_INT 0
56244: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56245: LD_ADDR_VAR 0 3
56249: PUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: LD_VAR 0 1
56259: PUSH
56260: LD_INT 1
56262: PLUS
56263: PPUSH
56264: LD_VAR 0 2
56268: PPUSH
56269: CALL_OW 1
56273: ST_TO_ADDR
// end ;
56274: LD_VAR 0 3
56278: RET
// export function JoinUnion ( array , element ) ; begin
56279: LD_INT 0
56281: PPUSH
// result := array union element ;
56282: LD_ADDR_VAR 0 3
56286: PUSH
56287: LD_VAR 0 1
56291: PUSH
56292: LD_VAR 0 2
56296: UNION
56297: ST_TO_ADDR
// end ;
56298: LD_VAR 0 3
56302: RET
// export function GetBehemoths ( side ) ; begin
56303: LD_INT 0
56305: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56306: LD_ADDR_VAR 0 2
56310: PUSH
56311: LD_INT 22
56313: PUSH
56314: LD_VAR 0 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 31
56325: PUSH
56326: LD_INT 25
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PPUSH
56337: CALL_OW 69
56341: ST_TO_ADDR
// end ;
56342: LD_VAR 0 2
56346: RET
// export function Shuffle ( array ) ; var i , index ; begin
56347: LD_INT 0
56349: PPUSH
56350: PPUSH
56351: PPUSH
// result := [ ] ;
56352: LD_ADDR_VAR 0 2
56356: PUSH
56357: EMPTY
56358: ST_TO_ADDR
// if not array then
56359: LD_VAR 0 1
56363: NOT
56364: IFFALSE 56368
// exit ;
56366: GO 56467
// Randomize ;
56368: CALL_OW 10
// for i = array downto 1 do
56372: LD_ADDR_VAR 0 3
56376: PUSH
56377: DOUBLE
56378: LD_VAR 0 1
56382: INC
56383: ST_TO_ADDR
56384: LD_INT 1
56386: PUSH
56387: FOR_DOWNTO
56388: IFFALSE 56465
// begin index := rand ( 1 , array ) ;
56390: LD_ADDR_VAR 0 4
56394: PUSH
56395: LD_INT 1
56397: PPUSH
56398: LD_VAR 0 1
56402: PPUSH
56403: CALL_OW 12
56407: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56408: LD_ADDR_VAR 0 2
56412: PUSH
56413: LD_VAR 0 2
56417: PPUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 1
56425: PLUS
56426: PPUSH
56427: LD_VAR 0 1
56431: PUSH
56432: LD_VAR 0 4
56436: ARRAY
56437: PPUSH
56438: CALL_OW 2
56442: ST_TO_ADDR
// array := Delete ( array , index ) ;
56443: LD_ADDR_VAR 0 1
56447: PUSH
56448: LD_VAR 0 1
56452: PPUSH
56453: LD_VAR 0 4
56457: PPUSH
56458: CALL_OW 3
56462: ST_TO_ADDR
// end ;
56463: GO 56387
56465: POP
56466: POP
// end ;
56467: LD_VAR 0 2
56471: RET
// export function GetBaseMaterials ( base ) ; begin
56472: LD_INT 0
56474: PPUSH
// result := [ 0 , 0 , 0 ] ;
56475: LD_ADDR_VAR 0 2
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// if not base then
56494: LD_VAR 0 1
56498: NOT
56499: IFFALSE 56503
// exit ;
56501: GO 56552
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56503: LD_ADDR_VAR 0 2
56507: PUSH
56508: LD_VAR 0 1
56512: PPUSH
56513: LD_INT 1
56515: PPUSH
56516: CALL_OW 275
56520: PUSH
56521: LD_VAR 0 1
56525: PPUSH
56526: LD_INT 2
56528: PPUSH
56529: CALL_OW 275
56533: PUSH
56534: LD_VAR 0 1
56538: PPUSH
56539: LD_INT 3
56541: PPUSH
56542: CALL_OW 275
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// end ;
56552: LD_VAR 0 2
56556: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56557: LD_INT 0
56559: PPUSH
56560: PPUSH
// result := array ;
56561: LD_ADDR_VAR 0 3
56565: PUSH
56566: LD_VAR 0 1
56570: ST_TO_ADDR
// if size > 0 then
56571: LD_VAR 0 2
56575: PUSH
56576: LD_INT 0
56578: GREATER
56579: IFFALSE 56625
// for i := array downto size do
56581: LD_ADDR_VAR 0 4
56585: PUSH
56586: DOUBLE
56587: LD_VAR 0 1
56591: INC
56592: ST_TO_ADDR
56593: LD_VAR 0 2
56597: PUSH
56598: FOR_DOWNTO
56599: IFFALSE 56623
// result := Delete ( result , result ) ;
56601: LD_ADDR_VAR 0 3
56605: PUSH
56606: LD_VAR 0 3
56610: PPUSH
56611: LD_VAR 0 3
56615: PPUSH
56616: CALL_OW 3
56620: ST_TO_ADDR
56621: GO 56598
56623: POP
56624: POP
// end ;
56625: LD_VAR 0 3
56629: RET
// export function ComExit ( unit ) ; var tmp ; begin
56630: LD_INT 0
56632: PPUSH
56633: PPUSH
// if not IsInUnit ( unit ) then
56634: LD_VAR 0 1
56638: PPUSH
56639: CALL_OW 310
56643: NOT
56644: IFFALSE 56648
// exit ;
56646: GO 56708
// tmp := IsInUnit ( unit ) ;
56648: LD_ADDR_VAR 0 3
56652: PUSH
56653: LD_VAR 0 1
56657: PPUSH
56658: CALL_OW 310
56662: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56663: LD_VAR 0 3
56667: PPUSH
56668: CALL_OW 247
56672: PUSH
56673: LD_INT 2
56675: EQUAL
56676: IFFALSE 56689
// ComExitVehicle ( unit ) else
56678: LD_VAR 0 1
56682: PPUSH
56683: CALL_OW 121
56687: GO 56698
// ComExitBuilding ( unit ) ;
56689: LD_VAR 0 1
56693: PPUSH
56694: CALL_OW 122
// result := tmp ;
56698: LD_ADDR_VAR 0 2
56702: PUSH
56703: LD_VAR 0 3
56707: ST_TO_ADDR
// end ;
56708: LD_VAR 0 2
56712: RET
// export function ResetHc ; begin
56713: LD_INT 0
56715: PPUSH
// InitHc ;
56716: CALL_OW 19
// hc_importance := 0 ;
56720: LD_ADDR_OWVAR 32
56724: PUSH
56725: LD_INT 0
56727: ST_TO_ADDR
// end ;
56728: LD_VAR 0 1
56732: RET
