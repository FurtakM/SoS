// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3118 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7115 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7115 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7115 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2820
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2820
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2794: LD_ADDR_EXP 11
2798: PUSH
2799: LD_STRING QConv
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: MINUS
2810: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2811: LD_EXP 4
2815: PPUSH
2816: CALL_OW 491
// end ; end ;
2820: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2821: LD_EXP 11
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: IFFALSE 3041
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// begin enable ;
2839: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 51
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 69
2859: ST_TO_ADDR
// if debug then
2860: LD_EXP 1
2864: IFFALSE 2901
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2866: LD_ADDR_OWVAR 47
2870: PUSH
2871: LD_EXP 13
2875: PUSH
2876: LD_EXP 12
2880: ARRAY
2881: PUSH
2882: LD_EXP 13
2886: PUSH
2887: LD_EXP 12
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ARRAY
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: ST_TO_ADDR
// for i = 1 to car do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 3
2915: PUSH
2916: FOR_TO
2917: IFFALSE 3039
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: PPUSH
2930: LD_EXP 13
2934: PUSH
2935: LD_EXP 12
2939: ARRAY
2940: PPUSH
2941: LD_EXP 13
2945: PUSH
2946: LD_EXP 12
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PPUSH
2956: CALL 7193 0 3
2960: IFFALSE 2978
// conv_am := conv_am + 2 else
2962: LD_ADDR_EXP 12
2966: PUSH
2967: LD_EXP 12
2971: PUSH
2972: LD_INT 2
2974: PLUS
2975: ST_TO_ADDR
2976: GO 3037
// if not HasTask ( car [ i ] ) then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 314
2993: NOT
2994: IFFALSE 3037
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2996: LD_VAR 0 3
3000: PUSH
3001: LD_VAR 0 1
3005: ARRAY
3006: PPUSH
3007: LD_EXP 13
3011: PUSH
3012: LD_EXP 12
3016: ARRAY
3017: PPUSH
3018: LD_EXP 13
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_INT 1
3030: PLUS
3031: ARRAY
3032: PPUSH
3033: CALL_OW 111
// end ;
3037: GO 2916
3039: POP
3040: POP
// end ;
3041: PPOPN 3
3043: END
// every 0 0$01 trigger conv = 0 do var i ;
3044: LD_EXP 11
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3115
3054: GO 3056
3056: DISABLE
3057: LD_INT 0
3059: PPUSH
// begin enable ;
3060: ENABLE
// for i = 1 to cargos do
3061: LD_ADDR_VAR 0 1
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_EXP 4
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3113
// if HasTask ( cargos [ i ] ) then
3079: LD_EXP 4
3083: PUSH
3084: LD_VAR 0 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 314
3094: IFFALSE 3111
// ComStop ( cargos [ i ] ) ;
3096: LD_EXP 4
3100: PUSH
3101: LD_VAR 0 1
3105: ARRAY
3106: PPUSH
3107: CALL_OW 141
3111: GO 3076
3113: POP
3114: POP
// end ; end_of_file
3115: PPOPN 1
3117: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3118: LD_INT 0
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
// uc_side := 2 ;
3136: LD_ADDR_OWVAR 20
3140: PUSH
3141: LD_INT 2
3143: ST_TO_ADDR
// uc_nation := 2 ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// if road = 1 then
3152: LD_EXP 2
3156: PUSH
3157: LD_INT 1
3159: EQUAL
3160: IFFALSE 3922
// begin case Difficulty of 1 :
3162: LD_OWVAR 67
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3482
3175: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 56
3183: PUSH
3184: LD_INT 37
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 81
3192: PUSH
3193: LD_INT 6
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: LD_INT 90
3201: PUSH
3202: LD_INT 25
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 68
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 96
3219: PUSH
3220: LD_INT 82
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 80
3228: PUSH
3229: LD_INT 109
3231: PUSH
3232: LD_INT 4
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 9
3265: PUSH
3266: LD_INT 10
3268: PUSH
3269: LD_INT 11
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 13
3285: PUSH
3286: LD_INT 14
3288: PUSH
3289: LD_INT 15
3291: PUSH
3292: LD_INT 16
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3301: LD_ADDR_VAR 0 15
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3324: LD_ADDR_VAR 0 8
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 96
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 142
3343: PUSH
3344: LD_INT 98
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 100
3394: PUSH
3395: LD_INT 21
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 38
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 41
3422: PUSH
3423: LD_INT 29
3425: PUSH
3426: LD_INT 62
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 65
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: LD_INT 95
3440: PUSH
3441: LD_INT 55
3443: PUSH
3444: LD_INT 98
3446: PUSH
3447: LD_INT 54
3449: PUSH
3450: LD_INT 96
3452: PUSH
3453: LD_INT 111
3455: PUSH
3456: LD_INT 99
3458: PUSH
3459: LD_INT 112
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// end ; 2 , 3 :
3480: GO 3920
3482: LD_INT 2
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3496
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3919
3496: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: LD_INT 37
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 90
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 105
3531: PUSH
3532: LD_INT 68
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 96
3540: PUSH
3541: LD_INT 82
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 80
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 8
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: LD_INT 10
3592: PUSH
3593: LD_INT 11
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 42
3601: PUSH
3602: LD_INT 43
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 13
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 15
3628: PUSH
3629: LD_INT 16
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3638: LD_ADDR_VAR 0 15
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3661: LD_ADDR_VAR 0 8
3665: PUSH
3666: LD_INT 68
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: LD_INT 96
3674: PUSH
3675: LD_INT 53
3677: PUSH
3678: LD_INT 142
3680: PUSH
3681: LD_INT 98
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 82
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3700: LD_ADDR_VAR 0 6
3704: PUSH
3705: LD_INT 17
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3715: LD_ADDR_VAR 0 5
3719: PUSH
3720: LD_INT 104
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 100
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 91
3740: PUSH
3741: LD_INT 28
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_INT 31
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 71
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 71
3767: PUSH
3768: LD_INT 103
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 66
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3806: LD_ADDR_VAR 0 7
3810: PUSH
3811: LD_INT 38
3813: PUSH
3814: LD_INT 28
3816: PUSH
3817: LD_INT 41
3819: PUSH
3820: LD_INT 29
3822: PUSH
3823: LD_INT 62
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 65
3831: PUSH
3832: LD_INT 7
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 55
3840: PUSH
3841: LD_INT 98
3843: PUSH
3844: LD_INT 54
3846: PUSH
3847: LD_INT 96
3849: PUSH
3850: LD_INT 111
3852: PUSH
3853: LD_INT 99
3855: PUSH
3856: LD_INT 112
3858: PUSH
3859: LD_INT 86
3861: PUSH
3862: LD_INT 17
3864: PUSH
3865: LD_INT 89
3867: PUSH
3868: LD_INT 17
3870: PUSH
3871: LD_INT 136
3873: PUSH
3874: LD_INT 91
3876: PUSH
3877: LD_INT 140
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 54
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// end ; end ;
3917: GO 3920
3919: POP
// end else
3920: GO 4862
// if road = 2 then
3922: LD_EXP 2
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 4862
// begin case Difficulty of 1 :
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4356
3945: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: LD_INT 62
3962: PUSH
3963: LD_INT 8
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 68
3974: PUSH
3975: LD_INT 2
3977: PUSH
3978: LD_INT 143
3980: PUSH
3981: LD_INT 96
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 90
3989: PUSH
3990: LD_INT 115
3992: PUSH
3993: LD_INT 4
3995: PUSH
3996: LD_INT 56
3998: PUSH
3999: LD_INT 59
4001: PUSH
4002: LD_INT 5
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 45
4032: PUSH
4033: LD_INT 46
4035: PUSH
4036: LD_INT 47
4038: PUSH
4039: LD_INT 48
4041: PUSH
4042: LD_INT 49
4044: PUSH
4045: LD_INT 50
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4087: LD_ADDR_VAR 0 15
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4118: LD_ADDR_VAR 0 8
4122: PUSH
4123: LD_INT 44
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 62
4131: PUSH
4132: LD_INT 8
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 68
4140: PUSH
4141: LD_INT 143
4143: PUSH
4144: LD_INT 96
4146: PUSH
4147: LD_INT 90
4149: PUSH
4150: LD_INT 115
4152: PUSH
4153: LD_INT 56
4155: PUSH
4156: LD_INT 59
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_INT 17
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 51
4195: PUSH
4196: LD_INT 29
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: LD_INT 55
4204: PUSH
4205: LD_INT 33
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 13
4235: PUSH
4236: LD_INT 35
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 98
4244: PUSH
4245: LD_INT 20
4247: PUSH
4248: LD_INT 102
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 97
4256: PUSH
4257: LD_INT 33
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 54
4265: PUSH
4266: LD_INT 98
4268: PUSH
4269: LD_INT 54
4271: PUSH
4272: LD_INT 96
4274: PUSH
4275: LD_INT 55
4277: PUSH
4278: LD_INT 94
4280: PUSH
4281: LD_INT 56
4283: PUSH
4284: LD_INT 145
4286: PUSH
4287: LD_INT 102
4289: PUSH
4290: LD_INT 146
4292: PUSH
4293: LD_INT 100
4295: PUSH
4296: LD_INT 97
4298: PUSH
4299: LD_INT 114
4301: PUSH
4302: LD_INT 99
4304: PUSH
4305: LD_INT 117
4307: PUSH
4308: LD_INT 54
4310: PUSH
4311: LD_INT 58
4313: PUSH
4314: LD_INT 55
4316: PUSH
4317: LD_INT 56
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ; 2 , 3 :
4354: GO 4862
4356: LD_INT 2
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4370
4362: LD_INT 3
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4861
4370: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 44
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 62
4387: PUSH
4388: LD_INT 8
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 68
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 143
4405: PUSH
4406: LD_INT 96
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 90
4414: PUSH
4415: LD_INT 115
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: LD_INT 56
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 45
4457: PUSH
4458: LD_INT 46
4460: PUSH
4461: LD_INT 47
4463: PUSH
4464: LD_INT 48
4466: PUSH
4467: LD_INT 49
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 45
4488: PUSH
4489: LD_INT 46
4491: PUSH
4492: LD_INT 47
4494: PUSH
4495: LD_INT 48
4497: PUSH
4498: LD_INT 49
4500: PUSH
4501: LD_INT 50
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4512: LD_ADDR_VAR 0 15
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4543: LD_ADDR_VAR 0 8
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 27
4553: PUSH
4554: LD_INT 44
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 62
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 143
4574: PUSH
4575: LD_INT 96
4577: PUSH
4578: LD_INT 90
4580: PUSH
4581: LD_INT 115
4583: PUSH
4584: LD_INT 56
4586: PUSH
4587: LD_INT 59
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4606: LD_ADDR_VAR 0 6
4610: PUSH
4611: LD_INT 17
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 29
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 55
4637: PUSH
4638: LD_INT 33
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 37
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 72
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 120
4664: PUSH
4665: LD_INT 93
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 25
4673: PUSH
4674: LD_INT 45
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: LD_INT 27
4682: PUSH
4683: LD_INT 48
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 51
4694: PUSH
4695: LD_INT 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4724: LD_ADDR_VAR 0 7
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 13
4734: PUSH
4735: LD_INT 33
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 35
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 98
4749: PUSH
4750: LD_INT 20
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 97
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 101
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: LD_INT 98
4773: PUSH
4774: LD_INT 54
4776: PUSH
4777: LD_INT 96
4779: PUSH
4780: LD_INT 55
4782: PUSH
4783: LD_INT 94
4785: PUSH
4786: LD_INT 56
4788: PUSH
4789: LD_INT 145
4791: PUSH
4792: LD_INT 102
4794: PUSH
4795: LD_INT 146
4797: PUSH
4798: LD_INT 100
4800: PUSH
4801: LD_INT 97
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 99
4809: PUSH
4810: LD_INT 117
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: LD_INT 58
4818: PUSH
4819: LD_INT 55
4821: PUSH
4822: LD_INT 56
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// end ; end ;
4859: GO 4862
4861: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4862: LD_ADDR_EXP 3
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: ST_TO_ADDR
// if Difficulty > 1 then
4887: LD_OWVAR 67
4891: PUSH
4892: LD_INT 1
4894: GREATER
4895: IFFALSE 4910
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: CALL_OW 322
// if Difficulty > 1 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 1
4917: GREATER
4918: IFFALSE 4933
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4920: LD_INT 52
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: CALL_OW 322
// miners := [ ] ;
4933: LD_ADDR_EXP 15
4937: PUSH
4938: EMPTY
4939: ST_TO_ADDR
// hovers := [ ] ;
4940: LD_ADDR_EXP 16
4944: PUSH
4945: EMPTY
4946: ST_TO_ADDR
// hovers_driver := [ ] ;
4947: LD_ADDR_EXP 17
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// tanks := [ ] ;
4954: LD_ADDR_EXP 18
4958: PUSH
4959: EMPTY
4960: ST_TO_ADDR
// p := 1 ;
4961: LD_ADDR_VAR 0 10
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4969: LD_ADDR_OWVAR 43
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: LD_INT 7
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: LD_OWVAR 67
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ARRAY
5001: ST_TO_ADDR
// bc_type = b_breastwork ;
5002: LD_ADDR_OWVAR 42
5006: PUSH
5007: LD_INT 31
5009: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 3
5027: DIVREAL
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5207
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 10
5046: ARRAY
5047: PPUSH
5048: LD_VAR 0 2
5052: PUSH
5053: LD_VAR 0 10
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 10
5072: PUSH
5073: LD_INT 2
5075: PLUS
5076: ARRAY
5077: PPUSH
5078: CALL_OW 47
5082: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_EXP 3
5093: PPUSH
5094: CALL_OW 380
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 12
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// dir := GetDir ( b ) ;
5108: LD_ADDR_VAR 0 16
5112: PUSH
5113: LD_VAR 0 13
5117: PPUSH
5118: CALL_OW 254
5122: ST_TO_ADDR
// if dir < 3 then
5123: LD_VAR 0 16
5127: PUSH
5128: LD_INT 3
5130: LESS
5131: IFFALSE 5149
// dir := dir + 3 else
5133: LD_ADDR_VAR 0 16
5137: PUSH
5138: LD_VAR 0 16
5142: PUSH
5143: LD_INT 3
5145: PLUS
5146: ST_TO_ADDR
5147: GO 5163
// dir := dir - 3 ;
5149: LD_ADDR_VAR 0 16
5153: PUSH
5154: LD_VAR 0 16
5158: PUSH
5159: LD_INT 3
5161: MINUS
5162: ST_TO_ADDR
// SetDir ( un , dir ) ;
5163: LD_VAR 0 12
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5177: LD_VAR 0 12
5181: PPUSH
5182: LD_VAR 0 13
5186: PPUSH
5187: CALL_OW 52
// p := p + 3 ;
5191: LD_ADDR_VAR 0 10
5195: PUSH
5196: LD_VAR 0 10
5200: PUSH
5201: LD_INT 3
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: GO 5029
5207: POP
5208: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5209: LD_ADDR_VAR 0 14
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: ST_TO_ADDR
// for i = 1 to sold_stand do
5234: LD_ADDR_VAR 0 9
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5429
// for p = 1 to x do
5252: LD_ADDR_VAR 0 10
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 14
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5425
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 9
5279: ARRAY
5280: PUSH
5281: LD_INT 10
5283: EQUAL
5284: PUSH
5285: LD_EXP 2
5289: PUSH
5290: LD_INT 2
5292: EQUAL
5293: PUSH
5294: LD_OWVAR 67
5298: PUSH
5299: LD_INT 1
5301: GREATER
5302: AND
5303: PUSH
5304: LD_VAR 0 10
5308: PUSH
5309: LD_VAR 0 14
5313: EQUAL
5314: AND
5315: OR
5316: IFFALSE 5335
// PrepareHuman ( false , class_mortar , skill ) else
5318: LD_INT 0
5320: PPUSH
5321: LD_INT 8
5323: PPUSH
5324: LD_EXP 3
5328: PPUSH
5329: CALL_OW 380
5333: GO 5350
// PrepareHuman ( false , 1 , skill ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_EXP 3
5345: PPUSH
5346: CALL_OW 380
// un := CreateHuman ;
5350: LD_ADDR_VAR 0 12
5354: PUSH
5355: CALL_OW 44
5359: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5360: LD_VAR 0 12
5364: PPUSH
5365: CALL_OW 257
5369: PUSH
5370: LD_INT 1
5372: EQUAL
5373: IFFALSE 5391
// miners := miners ^ un ;
5375: LD_ADDR_EXP 15
5379: PUSH
5380: LD_EXP 15
5384: PUSH
5385: LD_VAR 0 12
5389: ADD
5390: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5391: LD_VAR 0 12
5395: PPUSH
5396: LD_VAR 0 3
5400: PUSH
5401: LD_VAR 0 9
5405: ARRAY
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// ComHold ( un ) ;
5414: LD_VAR 0 12
5418: PPUSH
5419: CALL_OW 140
// end ;
5423: GO 5267
5425: POP
5426: POP
5427: GO 5249
5429: POP
5430: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5431: LD_ADDR_VAR 0 14
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 4
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: ST_TO_ADDR
// for i = 1 to sold_crawl do
5456: LD_ADDR_VAR 0 9
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_VAR 0 4
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5584
// for p = 1 to x do
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 14
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5580
// begin PrepareHuman ( false , 1 , skill ) ;
5492: LD_INT 0
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_EXP 3
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 12
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5517: LD_VAR 0 12
5521: PPUSH
5522: LD_VAR 0 15
5526: PUSH
5527: LD_VAR 0 9
5531: ARRAY
5532: PPUSH
5533: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5537: LD_VAR 0 12
5541: PPUSH
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 9
5551: ARRAY
5552: PPUSH
5553: LD_INT 0
5555: PPUSH
5556: CALL_OW 49
// ComCrawl ( un ) ;
5560: LD_VAR 0 12
5564: PPUSH
5565: CALL_OW 137
// AddComHold ( un ) ;
5569: LD_VAR 0 12
5573: PPUSH
5574: CALL_OW 200
// end ;
5578: GO 5489
5580: POP
5581: POP
5582: GO 5471
5584: POP
5585: POP
// p := 1 ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5594: LD_ADDR_VAR 0 9
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 8
5608: PUSH
5609: LD_INT 2
5611: DIVREAL
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5668
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5616: LD_VAR 0 8
5620: PUSH
5621: LD_VAR 0 10
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 8
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_INT 10
5647: PPUSH
5648: CALL_OW 330
// p := p + 2 ;
5652: LD_ADDR_VAR 0 10
5656: PUSH
5657: LD_VAR 0 10
5661: PUSH
5662: LD_INT 2
5664: PLUS
5665: ST_TO_ADDR
// end ;
5666: GO 5613
5668: POP
5669: POP
// for i = 1 to hover_x [ 2 ] do
5670: LD_ADDR_VAR 0 9
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5839
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5692: LD_INT 0
5694: PPUSH
5695: LD_INT 3
5697: PPUSH
5698: LD_EXP 3
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 12
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5721: LD_ADDR_EXP 17
5725: PUSH
5726: LD_EXP 17
5730: PUSH
5731: LD_VAR 0 12
5735: ADD
5736: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 11
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 92
5759: PUSH
5760: LD_INT 24
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_VAR 0 9
5771: PUSH
5772: LD_INT 2
5774: MOD
5775: PUSH
5776: LD_INT 1
5778: PLUS
5779: ARRAY
5780: PPUSH
5781: CALL 7115 0 6
5785: ST_TO_ADDR
// hovers := hovers ^ veh ;
5786: LD_ADDR_EXP 16
5790: PUSH
5791: LD_EXP 16
5795: PUSH
5796: LD_VAR 0 11
5800: ADD
5801: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5802: LD_VAR 0 11
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_INT 0
5818: PPUSH
5819: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5823: LD_VAR 0 12
5827: PPUSH
5828: LD_VAR 0 11
5832: PPUSH
5833: CALL_OW 52
// end ;
5837: GO 5689
5839: POP
5840: POP
// p := 1 ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: DIVREAL
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6043
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 3
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 380
// un := CreateHuman ;
5890: LD_ADDR_VAR 0 12
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5900: LD_ADDR_VAR 0 11
5904: PUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 14
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 27
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: PPUSH
5946: CALL 7115 0 6
5950: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5951: LD_VAR 0 11
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 10
5965: PUSH
5966: LD_INT 2
5968: PLUS
5969: ARRAY
5970: PPUSH
5971: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5975: LD_VAR 0 11
5979: PPUSH
5980: LD_VAR 0 5
5984: PUSH
5985: LD_VAR 0 10
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ARRAY
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_VAR 0 11
6022: PPUSH
6023: CALL_OW 52
// p := p + 3 ;
6027: LD_ADDR_VAR 0 10
6031: PUSH
6032: LD_VAR 0 10
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: GO 5868
6043: POP
6044: POP
// p := 1 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6053: LD_ADDR_VAR 0 9
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_VAR 0 7
6067: PUSH
6068: LD_INT 2
6070: DIVREAL
6071: PUSH
6072: FOR_TO
6073: IFFALSE 6127
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6075: LD_VAR 0 7
6079: PUSH
6080: LD_VAR 0 10
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_VAR 0 10
6095: PUSH
6096: LD_INT 1
6098: PLUS
6099: ARRAY
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 454
// p := p + 2 ;
6111: LD_ADDR_VAR 0 10
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: LD_INT 2
6123: PLUS
6124: ST_TO_ADDR
// end ;
6125: GO 6072
6127: POP
6128: POP
// mines := mines_xy ;
6129: LD_ADDR_EXP 14
6133: PUSH
6134: LD_VAR 0 7
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 1
6143: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin enable ;
6153: ENABLE
// if tanks > 0 then
6154: LD_EXP 18
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: IFFALSE 6270
// begin for i = 1 to tanks do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_EXP 18
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6268
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6182: LD_INT 2
6184: PPUSH
6185: LD_EXP 18
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: PPUSH
6196: CALL_OW 292
6200: PUSH
6201: LD_EXP 18
6205: PUSH
6206: LD_VAR 0 3
6210: ARRAY
6211: PPUSH
6212: CALL_OW 314
6216: NOT
6217: AND
6218: IFFALSE 6266
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6220: LD_EXP 18
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_EXP 18
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PPUSH
6257: CALL_OW 74
6261: PPUSH
6262: CALL_OW 115
6266: GO 6179
6268: POP
6269: POP
// end ; if hovers > 0 then
6270: LD_EXP 16
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: IFFALSE 6603
// begin for i = 1 to hovers do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_EXP 16
6294: PUSH
6295: FOR_TO
6296: IFFALSE 6601
// begin if GetLives ( hovers [ i ] ) < 600 then
6298: LD_EXP 16
6302: PUSH
6303: LD_VAR 0 3
6307: ARRAY
6308: PPUSH
6309: CALL_OW 256
6313: PUSH
6314: LD_INT 600
6316: LESS
6317: IFFALSE 6428
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6319: LD_EXP 16
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PPUSH
6330: LD_INT 18
6332: PPUSH
6333: CALL_OW 308
6337: NOT
6338: IFFALSE 6360
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6340: LD_EXP 16
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: PPUSH
6351: LD_INT 18
6353: PPUSH
6354: CALL_OW 113
6358: GO 6428
// if IsDrivenBy ( hovers [ i ] ) then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 311
6375: IFFALSE 6428
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6377: LD_EXP 16
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 311
6392: PPUSH
6393: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: LD_EXP 16
6417: PUSH
6418: LD_VAR 0 3
6422: ARRAY
6423: PPUSH
6424: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6428: LD_EXP 16
6432: PUSH
6433: LD_VAR 0 3
6437: ARRAY
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 998
6446: GREATER
6447: IFFALSE 6599
// begin if not IsDrivenBy ( hovers [ i ] ) then
6449: LD_EXP 16
6453: PUSH
6454: LD_VAR 0 3
6458: ARRAY
6459: PPUSH
6460: CALL_OW 311
6464: NOT
6465: IFFALSE 6502
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6467: LD_EXP 17
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: LD_EXP 16
6482: PPUSH
6483: LD_INT 58
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 72
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6502: LD_INT 19
6504: PPUSH
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 70
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: IFFALSE 6599
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6525: LD_EXP 16
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PPUSH
6536: CALL_OW 311
6540: PPUSH
6541: CALL_OW 314
6545: NOT
6546: IFFALSE 6599
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6548: LD_EXP 16
6552: PUSH
6553: LD_VAR 0 3
6557: ARRAY
6558: PPUSH
6559: CALL_OW 311
6563: PPUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_EXP 16
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: PPUSH
6590: CALL_OW 74
6594: PPUSH
6595: CALL_OW 115
// end ; end ;
6599: GO 6295
6601: POP
6602: POP
// end ; p := 1 ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_EXP 14
6625: PUSH
6626: LD_INT 2
6628: DIVREAL
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6891
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 14
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PPUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: PLUS
6662: ARRAY
6663: PPUSH
6664: CALL_OW 428
6668: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6669: LD_VAR 0 4
6673: PUSH
6674: LD_EXP 14
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PPUSH
6685: LD_EXP 14
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: ARRAY
6699: PPUSH
6700: CALL_OW 458
6704: AND
6705: IFFALSE 6875
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 14
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: PPUSH
6733: CALL_OW 428
6737: PPUSH
6738: CALL_OW 255
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: PUSH
6754: LD_EXP 15
6758: PPUSH
6759: LD_EXP 14
6763: PUSH
6764: LD_VAR 0 2
6768: ARRAY
6769: PPUSH
6770: LD_EXP 14
6774: PUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ARRAY
6784: PPUSH
6785: CALL_OW 73
6789: PPUSH
6790: LD_EXP 14
6794: PUSH
6795: LD_VAR 0 2
6799: ARRAY
6800: PPUSH
6801: LD_EXP 14
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ARRAY
6815: PPUSH
6816: CALL_OW 297
6820: PUSH
6821: LD_INT 30
6823: LESS
6824: AND
6825: IFFALSE 6875
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6827: LD_EXP 14
6831: PUSH
6832: LD_VAR 0 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 14
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 456
// if not mines_trigger then
6860: LD_EXP 10
6864: NOT
6865: IFFALSE 6875
// mines_trigger := true ;
6867: LD_ADDR_EXP 10
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// end ; p := p + 2 ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: PLUS
6888: ST_TO_ADDR
// end ;
6889: GO 6630
6891: POP
6892: POP
// end ;
6893: PPOPN 4
6895: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6896: LD_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_EXP 6
6909: PPUSH
6910: CALL_OW 296
6914: PUSH
6915: LD_INT 20
6917: GREATER
6918: PUSH
6919: LD_EXP 4
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_EXP 6
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 20
6940: GREATER
6941: OR
6942: IFFALSE 7057
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// begin for i = 1 to Difficulty + 1 do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_OWVAR 67
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7055
// begin uc_side := 2 ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_INT 2
6980: ST_TO_ADDR
// uc_nation := 2 ;
6981: LD_ADDR_OWVAR 21
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6989: LD_INT 0
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 380
// un := CreateHuman ;
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: CALL_OW 44
7013: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 44
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_EXP 4
7038: PPUSH
7039: LD_VAR 0 2
7043: PPUSH
7044: CALL_OW 74
7048: PPUSH
7049: CALL_OW 115
// end ;
7053: GO 6970
7055: POP
7056: POP
// end ;
7057: PPOPN 2
7059: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7060: LD_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: IN
7101: IFFALSE 7112
// ComRetreat ( driver ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL 7244 0 1
// end ; end_of_file
7112: PPOPN 4
7114: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7115: LD_INT 0
7117: PPUSH
// uc_side := side ;
7118: LD_ADDR_OWVAR 20
7122: PUSH
7123: LD_VAR 0 1
7127: ST_TO_ADDR
// uc_nation := nation ;
7128: LD_ADDR_OWVAR 21
7132: PUSH
7133: LD_VAR 0 2
7137: ST_TO_ADDR
// vc_chassis := chassis ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_VAR 0 3
7147: ST_TO_ADDR
// vc_engine := engine ;
7148: LD_ADDR_OWVAR 39
7152: PUSH
7153: LD_VAR 0 4
7157: ST_TO_ADDR
// vc_control := control ;
7158: LD_ADDR_OWVAR 38
7162: PUSH
7163: LD_VAR 0 5
7167: ST_TO_ADDR
// vc_weapon := weapon ;
7168: LD_ADDR_OWVAR 40
7172: PUSH
7173: LD_VAR 0 6
7177: ST_TO_ADDR
// result := CreateVehicle ;
7178: LD_ADDR_VAR 0 7
7182: PUSH
7183: CALL_OW 45
7187: ST_TO_ADDR
// end ;
7188: LD_VAR 0 7
7192: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7193: LD_INT 0
7195: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 3
7210: PPUSH
7211: CALL_OW 297
7215: PUSH
7216: LD_INT 6
7218: LESS
7219: IFFALSE 7231
// result := true else
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
7229: GO 7239
// result := false ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 4
7243: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PPUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 74
7287: PPUSH
7288: CALL_OW 119
// dir := GetDir ( un ) ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 254
7306: ST_TO_ADDR
// dir := dir - 3 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 3
7319: MINUS
7320: ST_TO_ADDR
// if dir < 0 then
7321: LD_VAR 0 4
7325: PUSH
7326: LD_INT 0
7328: LESS
7329: IFFALSE 7345
// dir := dir + 6 ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 6
7343: PLUS
7344: ST_TO_ADDR
// while true do
7345: LD_INT 1
7347: IFFALSE 7718
// begin coord_dist := 3 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 250
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: CALL_OW 272
7386: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 273
7416: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 351
7431: PUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 488
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 6
7461: PPUSH
7462: CALL_OW 428
7466: PUSH
7467: LD_INT 0
7469: NONEQUAL
7470: OR
7471: IFFALSE 7632
// begin repeat begin coord_dist := coord_dist + 1 ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: ST_TO_ADDR
// dir := dir + 1 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// if dir > 5 then
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 5
7508: GREATER
7509: IFFALSE 7519
// dir = 0 ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7519: LD_ADDR_VAR 0 5
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 250
7533: PPUSH
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 272
7548: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 251
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 273
7578: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 351
7593: NOT
7594: PUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 488
7609: AND
7610: PUSH
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_VAR 0 6
7620: PPUSH
7621: CALL_OW 428
7625: PUSH
7626: LD_INT 0
7628: EQUAL
7629: AND
7630: IFFALSE 7473
// end ; ComMoveXY ( un , x , y ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 5
7641: PPUSH
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 111
// Wait ( 0 0$1 ) ;
7651: LD_INT 35
7653: PPUSH
7654: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_INT 81
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PPUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 74
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 10
7702: GREATEREQUAL
7703: IFFALSE 7716
// begin ComStop ( un ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 141
// break ;
7714: GO 7718
// end ; end ;
7716: GO 7345
// end ; end_of_file end_of_file
7718: LD_VAR 0 2
7722: RET
// export globalGameSaveCounter ; every 0 0$1 do
7723: GO 7725
7725: DISABLE
// begin enable ;
7726: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7727: LD_STRING updateTimer(
7729: PUSH
7730: LD_OWVAR 1
7734: STR
7735: PUSH
7736: LD_STRING );
7738: STR
7739: PPUSH
7740: CALL_OW 559
// end ;
7744: END
// every 0 0$1 do
7745: GO 7747
7747: DISABLE
// begin globalGameSaveCounter := 0 ;
7748: LD_ADDR_EXP 19
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7756: LD_STRING setGameSaveCounter(0)
7758: PPUSH
7759: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7763: LD_STRING initStreamRollete();
7765: PPUSH
7766: CALL_OW 559
// InitStreamMode ;
7770: CALL 9096 0 0
// DefineStreamItems ( false ) ;
7774: LD_INT 0
7776: PPUSH
7777: CALL 9560 0 1
// end ;
7781: END
// export function SOS_MapStart ( ) ; begin
7782: LD_INT 0
7784: PPUSH
// if streamModeActive then
7785: LD_EXP 20
7789: IFFALSE 7798
// DefineStreamItems ( true ) ;
7791: LD_INT 1
7793: PPUSH
7794: CALL 9560 0 1
// UpdateLuaVariables ( ) ;
7798: CALL 7815 0 0
// UpdateFactoryWaypoints ( ) ;
7802: CALL 22429 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7806: CALL 22686 0 0
// end ;
7810: LD_VAR 0 1
7814: RET
// function UpdateLuaVariables ( ) ; begin
7815: LD_INT 0
7817: PPUSH
// if globalGameSaveCounter then
7818: LD_EXP 19
7822: IFFALSE 7856
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7824: LD_ADDR_EXP 19
7828: PUSH
7829: LD_EXP 19
7833: PPUSH
7834: CALL 62588 0 1
7838: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7839: LD_STRING setGameSaveCounter(
7841: PUSH
7842: LD_EXP 19
7846: STR
7847: PUSH
7848: LD_STRING )
7850: STR
7851: PPUSH
7852: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7856: LD_STRING setGameDifficulty(
7858: PUSH
7859: LD_OWVAR 67
7863: STR
7864: PUSH
7865: LD_STRING )
7867: STR
7868: PPUSH
7869: CALL_OW 559
// end ;
7873: LD_VAR 0 1
7877: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7878: LD_INT 0
7880: PPUSH
// if p2 = stream_mode then
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 100
7888: EQUAL
7889: IFFALSE 8892
// begin if not StreamModeActive then
7891: LD_EXP 20
7895: NOT
7896: IFFALSE 7906
// StreamModeActive := true ;
7898: LD_ADDR_EXP 20
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 0 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 0
7913: EQUAL
7914: IFFALSE 7920
// InitStreamMode ;
7916: CALL 9096 0 0
// if p3 = 1 then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: EQUAL
7928: IFFALSE 7938
// sRocket := true ;
7930: LD_ADDR_EXP 25
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// if p3 = 2 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 7956
// sSpeed := true ;
7948: LD_ADDR_EXP 24
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// if p3 = 3 then
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 3
7963: EQUAL
7964: IFFALSE 7974
// sEngine := true ;
7966: LD_ADDR_EXP 26
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// if p3 = 4 then
7974: LD_VAR 0 3
7978: PUSH
7979: LD_INT 4
7981: EQUAL
7982: IFFALSE 7992
// sSpec := true ;
7984: LD_ADDR_EXP 23
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 5 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 5
7999: EQUAL
8000: IFFALSE 8010
// sLevel := true ;
8002: LD_ADDR_EXP 27
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if p3 = 6 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 6
8017: EQUAL
8018: IFFALSE 8028
// sArmoury := true ;
8020: LD_ADDR_EXP 28
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// if p3 = 7 then
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 7
8035: EQUAL
8036: IFFALSE 8046
// sRadar := true ;
8038: LD_ADDR_EXP 29
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// if p3 = 8 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 8
8053: EQUAL
8054: IFFALSE 8064
// sBunker := true ;
8056: LD_ADDR_EXP 30
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// if p3 = 9 then
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 9
8071: EQUAL
8072: IFFALSE 8082
// sHack := true ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// if p3 = 10 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 10
8089: EQUAL
8090: IFFALSE 8100
// sFire := true ;
8092: LD_ADDR_EXP 32
8096: PUSH
8097: LD_INT 1
8099: ST_TO_ADDR
// if p3 = 11 then
8100: LD_VAR 0 3
8104: PUSH
8105: LD_INT 11
8107: EQUAL
8108: IFFALSE 8118
// sRefresh := true ;
8110: LD_ADDR_EXP 33
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// if p3 = 12 then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 12
8125: EQUAL
8126: IFFALSE 8136
// sExp := true ;
8128: LD_ADDR_EXP 34
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// if p3 = 13 then
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 13
8143: EQUAL
8144: IFFALSE 8154
// sDepot := true ;
8146: LD_ADDR_EXP 35
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if p3 = 14 then
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 14
8161: EQUAL
8162: IFFALSE 8172
// sFlag := true ;
8164: LD_ADDR_EXP 36
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// if p3 = 15 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 15
8179: EQUAL
8180: IFFALSE 8190
// sKamikadze := true ;
8182: LD_ADDR_EXP 44
8186: PUSH
8187: LD_INT 1
8189: ST_TO_ADDR
// if p3 = 16 then
8190: LD_VAR 0 3
8194: PUSH
8195: LD_INT 16
8197: EQUAL
8198: IFFALSE 8208
// sTroll := true ;
8200: LD_ADDR_EXP 45
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// if p3 = 17 then
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 17
8215: EQUAL
8216: IFFALSE 8226
// sSlow := true ;
8218: LD_ADDR_EXP 46
8222: PUSH
8223: LD_INT 1
8225: ST_TO_ADDR
// if p3 = 18 then
8226: LD_VAR 0 3
8230: PUSH
8231: LD_INT 18
8233: EQUAL
8234: IFFALSE 8244
// sLack := true ;
8236: LD_ADDR_EXP 47
8240: PUSH
8241: LD_INT 1
8243: ST_TO_ADDR
// if p3 = 19 then
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 19
8251: EQUAL
8252: IFFALSE 8262
// sTank := true ;
8254: LD_ADDR_EXP 49
8258: PUSH
8259: LD_INT 1
8261: ST_TO_ADDR
// if p3 = 20 then
8262: LD_VAR 0 3
8266: PUSH
8267: LD_INT 20
8269: EQUAL
8270: IFFALSE 8280
// sRemote := true ;
8272: LD_ADDR_EXP 50
8276: PUSH
8277: LD_INT 1
8279: ST_TO_ADDR
// if p3 = 21 then
8280: LD_VAR 0 3
8284: PUSH
8285: LD_INT 21
8287: EQUAL
8288: IFFALSE 8298
// sPowell := true ;
8290: LD_ADDR_EXP 51
8294: PUSH
8295: LD_INT 1
8297: ST_TO_ADDR
// if p3 = 22 then
8298: LD_VAR 0 3
8302: PUSH
8303: LD_INT 22
8305: EQUAL
8306: IFFALSE 8316
// sTeleport := true ;
8308: LD_ADDR_EXP 54
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if p3 = 23 then
8316: LD_VAR 0 3
8320: PUSH
8321: LD_INT 23
8323: EQUAL
8324: IFFALSE 8334
// sOilTower := true ;
8326: LD_ADDR_EXP 56
8330: PUSH
8331: LD_INT 1
8333: ST_TO_ADDR
// if p3 = 24 then
8334: LD_VAR 0 3
8338: PUSH
8339: LD_INT 24
8341: EQUAL
8342: IFFALSE 8352
// sShovel := true ;
8344: LD_ADDR_EXP 57
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// if p3 = 25 then
8352: LD_VAR 0 3
8356: PUSH
8357: LD_INT 25
8359: EQUAL
8360: IFFALSE 8370
// sSheik := true ;
8362: LD_ADDR_EXP 58
8366: PUSH
8367: LD_INT 1
8369: ST_TO_ADDR
// if p3 = 26 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 26
8377: EQUAL
8378: IFFALSE 8388
// sEarthquake := true ;
8380: LD_ADDR_EXP 60
8384: PUSH
8385: LD_INT 1
8387: ST_TO_ADDR
// if p3 = 27 then
8388: LD_VAR 0 3
8392: PUSH
8393: LD_INT 27
8395: EQUAL
8396: IFFALSE 8406
// sAI := true ;
8398: LD_ADDR_EXP 61
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// if p3 = 28 then
8406: LD_VAR 0 3
8410: PUSH
8411: LD_INT 28
8413: EQUAL
8414: IFFALSE 8424
// sCargo := true ;
8416: LD_ADDR_EXP 64
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// if p3 = 29 then
8424: LD_VAR 0 3
8428: PUSH
8429: LD_INT 29
8431: EQUAL
8432: IFFALSE 8442
// sDLaser := true ;
8434: LD_ADDR_EXP 65
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// if p3 = 30 then
8442: LD_VAR 0 3
8446: PUSH
8447: LD_INT 30
8449: EQUAL
8450: IFFALSE 8460
// sExchange := true ;
8452: LD_ADDR_EXP 66
8456: PUSH
8457: LD_INT 1
8459: ST_TO_ADDR
// if p3 = 31 then
8460: LD_VAR 0 3
8464: PUSH
8465: LD_INT 31
8467: EQUAL
8468: IFFALSE 8478
// sFac := true ;
8470: LD_ADDR_EXP 67
8474: PUSH
8475: LD_INT 1
8477: ST_TO_ADDR
// if p3 = 32 then
8478: LD_VAR 0 3
8482: PUSH
8483: LD_INT 32
8485: EQUAL
8486: IFFALSE 8496
// sPower := true ;
8488: LD_ADDR_EXP 68
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
// if p3 = 33 then
8496: LD_VAR 0 3
8500: PUSH
8501: LD_INT 33
8503: EQUAL
8504: IFFALSE 8514
// sRandom := true ;
8506: LD_ADDR_EXP 69
8510: PUSH
8511: LD_INT 1
8513: ST_TO_ADDR
// if p3 = 34 then
8514: LD_VAR 0 3
8518: PUSH
8519: LD_INT 34
8521: EQUAL
8522: IFFALSE 8532
// sShield := true ;
8524: LD_ADDR_EXP 70
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// if p3 = 35 then
8532: LD_VAR 0 3
8536: PUSH
8537: LD_INT 35
8539: EQUAL
8540: IFFALSE 8550
// sTime := true ;
8542: LD_ADDR_EXP 71
8546: PUSH
8547: LD_INT 1
8549: ST_TO_ADDR
// if p3 = 36 then
8550: LD_VAR 0 3
8554: PUSH
8555: LD_INT 36
8557: EQUAL
8558: IFFALSE 8568
// sTools := true ;
8560: LD_ADDR_EXP 72
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// if p3 = 101 then
8568: LD_VAR 0 3
8572: PUSH
8573: LD_INT 101
8575: EQUAL
8576: IFFALSE 8586
// sSold := true ;
8578: LD_ADDR_EXP 37
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// if p3 = 102 then
8586: LD_VAR 0 3
8590: PUSH
8591: LD_INT 102
8593: EQUAL
8594: IFFALSE 8604
// sDiff := true ;
8596: LD_ADDR_EXP 38
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// if p3 = 103 then
8604: LD_VAR 0 3
8608: PUSH
8609: LD_INT 103
8611: EQUAL
8612: IFFALSE 8622
// sFog := true ;
8614: LD_ADDR_EXP 41
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
// if p3 = 104 then
8622: LD_VAR 0 3
8626: PUSH
8627: LD_INT 104
8629: EQUAL
8630: IFFALSE 8640
// sReset := true ;
8632: LD_ADDR_EXP 42
8636: PUSH
8637: LD_INT 1
8639: ST_TO_ADDR
// if p3 = 105 then
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 105
8647: EQUAL
8648: IFFALSE 8658
// sSun := true ;
8650: LD_ADDR_EXP 43
8654: PUSH
8655: LD_INT 1
8657: ST_TO_ADDR
// if p3 = 106 then
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 106
8665: EQUAL
8666: IFFALSE 8676
// sTiger := true ;
8668: LD_ADDR_EXP 39
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// if p3 = 107 then
8676: LD_VAR 0 3
8680: PUSH
8681: LD_INT 107
8683: EQUAL
8684: IFFALSE 8694
// sBomb := true ;
8686: LD_ADDR_EXP 40
8690: PUSH
8691: LD_INT 1
8693: ST_TO_ADDR
// if p3 = 108 then
8694: LD_VAR 0 3
8698: PUSH
8699: LD_INT 108
8701: EQUAL
8702: IFFALSE 8712
// sWound := true ;
8704: LD_ADDR_EXP 48
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// if p3 = 109 then
8712: LD_VAR 0 3
8716: PUSH
8717: LD_INT 109
8719: EQUAL
8720: IFFALSE 8730
// sBetray := true ;
8722: LD_ADDR_EXP 52
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// if p3 = 110 then
8730: LD_VAR 0 3
8734: PUSH
8735: LD_INT 110
8737: EQUAL
8738: IFFALSE 8748
// sContamin := true ;
8740: LD_ADDR_EXP 53
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// if p3 = 111 then
8748: LD_VAR 0 3
8752: PUSH
8753: LD_INT 111
8755: EQUAL
8756: IFFALSE 8766
// sOil := true ;
8758: LD_ADDR_EXP 55
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// if p3 = 112 then
8766: LD_VAR 0 3
8770: PUSH
8771: LD_INT 112
8773: EQUAL
8774: IFFALSE 8784
// sStu := true ;
8776: LD_ADDR_EXP 59
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// if p3 = 113 then
8784: LD_VAR 0 3
8788: PUSH
8789: LD_INT 113
8791: EQUAL
8792: IFFALSE 8802
// sBazooka := true ;
8794: LD_ADDR_EXP 62
8798: PUSH
8799: LD_INT 1
8801: ST_TO_ADDR
// if p3 = 114 then
8802: LD_VAR 0 3
8806: PUSH
8807: LD_INT 114
8809: EQUAL
8810: IFFALSE 8820
// sMortar := true ;
8812: LD_ADDR_EXP 63
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// if p3 = 115 then
8820: LD_VAR 0 3
8824: PUSH
8825: LD_INT 115
8827: EQUAL
8828: IFFALSE 8838
// sRanger := true ;
8830: LD_ADDR_EXP 73
8834: PUSH
8835: LD_INT 1
8837: ST_TO_ADDR
// if p3 = 116 then
8838: LD_VAR 0 3
8842: PUSH
8843: LD_INT 116
8845: EQUAL
8846: IFFALSE 8856
// sComputer := true ;
8848: LD_ADDR_EXP 74
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// if p3 = 117 then
8856: LD_VAR 0 3
8860: PUSH
8861: LD_INT 117
8863: EQUAL
8864: IFFALSE 8874
// s30 := true ;
8866: LD_ADDR_EXP 75
8870: PUSH
8871: LD_INT 1
8873: ST_TO_ADDR
// if p3 = 118 then
8874: LD_VAR 0 3
8878: PUSH
8879: LD_INT 118
8881: EQUAL
8882: IFFALSE 8892
// s60 := true ;
8884: LD_ADDR_EXP 76
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// end ; if p2 = hack_mode then
8892: LD_VAR 0 2
8896: PUSH
8897: LD_INT 101
8899: EQUAL
8900: IFFALSE 9028
// begin case p3 of 1 :
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 1
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8922
8915: POP
// hHackUnlimitedResources ; 2 :
8916: CALL 21175 0 0
8920: GO 9028
8922: LD_INT 2
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8937
8930: POP
// hHackSetLevel10 ; 3 :
8931: CALL 21308 0 0
8935: GO 9028
8937: LD_INT 3
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8952
8945: POP
// hHackSetLevel10YourUnits ; 4 :
8946: CALL 21393 0 0
8950: GO 9028
8952: LD_INT 4
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8967
8960: POP
// hHackInvincible ; 5 :
8961: CALL 21841 0 0
8965: GO 9028
8967: LD_INT 5
8969: DOUBLE
8970: EQUAL
8971: IFTRUE 8975
8973: GO 8982
8975: POP
// hHackInvisible ; 6 :
8976: CALL 21952 0 0
8980: GO 9028
8982: LD_INT 6
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 8997
8990: POP
// hHackChangeYourSide ; 7 :
8991: CALL 22009 0 0
8995: GO 9028
8997: LD_INT 7
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9012
9005: POP
// hHackChangeUnitSide ; 8 :
9006: CALL 22051 0 0
9010: GO 9028
9012: LD_INT 8
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9027
9020: POP
// hHackFog ; end ;
9021: CALL 22152 0 0
9025: GO 9028
9027: POP
// end ; if p2 = game_save_mode then
9028: LD_VAR 0 2
9032: PUSH
9033: LD_INT 102
9035: EQUAL
9036: IFFALSE 9091
// begin if p3 = 1 then
9038: LD_VAR 0 3
9042: PUSH
9043: LD_INT 1
9045: EQUAL
9046: IFFALSE 9058
// globalGameSaveCounter := p4 ;
9048: LD_ADDR_EXP 19
9052: PUSH
9053: LD_VAR 0 4
9057: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 2
9065: EQUAL
9066: PUSH
9067: LD_EXP 19
9071: AND
9072: IFFALSE 9091
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9074: LD_STRING setGameSaveCounter(
9076: PUSH
9077: LD_EXP 19
9081: STR
9082: PUSH
9083: LD_STRING )
9085: STR
9086: PPUSH
9087: CALL_OW 559
// end ; end ;
9091: LD_VAR 0 7
9095: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9096: LD_INT 0
9098: PPUSH
// streamModeActive := false ;
9099: LD_ADDR_EXP 20
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// normalCounter := 36 ;
9107: LD_ADDR_EXP 21
9111: PUSH
9112: LD_INT 36
9114: ST_TO_ADDR
// hardcoreCounter := 18 ;
9115: LD_ADDR_EXP 22
9119: PUSH
9120: LD_INT 18
9122: ST_TO_ADDR
// sRocket := false ;
9123: LD_ADDR_EXP 25
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sSpeed := false ;
9131: LD_ADDR_EXP 24
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sEngine := false ;
9139: LD_ADDR_EXP 26
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sSpec := false ;
9147: LD_ADDR_EXP 23
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sLevel := false ;
9155: LD_ADDR_EXP 27
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sArmoury := false ;
9163: LD_ADDR_EXP 28
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sRadar := false ;
9171: LD_ADDR_EXP 29
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sBunker := false ;
9179: LD_ADDR_EXP 30
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// sHack := false ;
9187: LD_ADDR_EXP 31
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// sFire := false ;
9195: LD_ADDR_EXP 32
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// sRefresh := false ;
9203: LD_ADDR_EXP 33
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// sExp := false ;
9211: LD_ADDR_EXP 34
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// sDepot := false ;
9219: LD_ADDR_EXP 35
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// sFlag := false ;
9227: LD_ADDR_EXP 36
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// sKamikadze := false ;
9235: LD_ADDR_EXP 44
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// sTroll := false ;
9243: LD_ADDR_EXP 45
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// sSlow := false ;
9251: LD_ADDR_EXP 46
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// sLack := false ;
9259: LD_ADDR_EXP 47
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// sTank := false ;
9267: LD_ADDR_EXP 49
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// sRemote := false ;
9275: LD_ADDR_EXP 50
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// sPowell := false ;
9283: LD_ADDR_EXP 51
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// sTeleport := false ;
9291: LD_ADDR_EXP 54
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// sOilTower := false ;
9299: LD_ADDR_EXP 56
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// sShovel := false ;
9307: LD_ADDR_EXP 57
9311: PUSH
9312: LD_INT 0
9314: ST_TO_ADDR
// sSheik := false ;
9315: LD_ADDR_EXP 58
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// sEarthquake := false ;
9323: LD_ADDR_EXP 60
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// sAI := false ;
9331: LD_ADDR_EXP 61
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// sCargo := false ;
9339: LD_ADDR_EXP 64
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// sDLaser := false ;
9347: LD_ADDR_EXP 65
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// sExchange := false ;
9355: LD_ADDR_EXP 66
9359: PUSH
9360: LD_INT 0
9362: ST_TO_ADDR
// sFac := false ;
9363: LD_ADDR_EXP 67
9367: PUSH
9368: LD_INT 0
9370: ST_TO_ADDR
// sPower := false ;
9371: LD_ADDR_EXP 68
9375: PUSH
9376: LD_INT 0
9378: ST_TO_ADDR
// sRandom := false ;
9379: LD_ADDR_EXP 69
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// sShield := false ;
9387: LD_ADDR_EXP 70
9391: PUSH
9392: LD_INT 0
9394: ST_TO_ADDR
// sTime := false ;
9395: LD_ADDR_EXP 71
9399: PUSH
9400: LD_INT 0
9402: ST_TO_ADDR
// sTools := false ;
9403: LD_ADDR_EXP 72
9407: PUSH
9408: LD_INT 0
9410: ST_TO_ADDR
// sSold := false ;
9411: LD_ADDR_EXP 37
9415: PUSH
9416: LD_INT 0
9418: ST_TO_ADDR
// sDiff := false ;
9419: LD_ADDR_EXP 38
9423: PUSH
9424: LD_INT 0
9426: ST_TO_ADDR
// sFog := false ;
9427: LD_ADDR_EXP 41
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// sReset := false ;
9435: LD_ADDR_EXP 42
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// sSun := false ;
9443: LD_ADDR_EXP 43
9447: PUSH
9448: LD_INT 0
9450: ST_TO_ADDR
// sTiger := false ;
9451: LD_ADDR_EXP 39
9455: PUSH
9456: LD_INT 0
9458: ST_TO_ADDR
// sBomb := false ;
9459: LD_ADDR_EXP 40
9463: PUSH
9464: LD_INT 0
9466: ST_TO_ADDR
// sWound := false ;
9467: LD_ADDR_EXP 48
9471: PUSH
9472: LD_INT 0
9474: ST_TO_ADDR
// sBetray := false ;
9475: LD_ADDR_EXP 52
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// sContamin := false ;
9483: LD_ADDR_EXP 53
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// sOil := false ;
9491: LD_ADDR_EXP 55
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// sStu := false ;
9499: LD_ADDR_EXP 59
9503: PUSH
9504: LD_INT 0
9506: ST_TO_ADDR
// sBazooka := false ;
9507: LD_ADDR_EXP 62
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// sMortar := false ;
9515: LD_ADDR_EXP 63
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// sRanger := false ;
9523: LD_ADDR_EXP 73
9527: PUSH
9528: LD_INT 0
9530: ST_TO_ADDR
// sComputer := false ;
9531: LD_ADDR_EXP 74
9535: PUSH
9536: LD_INT 0
9538: ST_TO_ADDR
// s30 := false ;
9539: LD_ADDR_EXP 75
9543: PUSH
9544: LD_INT 0
9546: ST_TO_ADDR
// s60 := false ;
9547: LD_ADDR_EXP 76
9551: PUSH
9552: LD_INT 0
9554: ST_TO_ADDR
// end ;
9555: LD_VAR 0 1
9559: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
// result := [ ] ;
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: EMPTY
9575: ST_TO_ADDR
// if campaign_id = 1 then
9576: LD_OWVAR 69
9580: PUSH
9581: LD_INT 1
9583: EQUAL
9584: IFFALSE 12750
// begin case mission_number of 1 :
9586: LD_OWVAR 70
9590: PUSH
9591: LD_INT 1
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9675
9599: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 4
9610: PUSH
9611: LD_INT 11
9613: PUSH
9614: LD_INT 12
9616: PUSH
9617: LD_INT 15
9619: PUSH
9620: LD_INT 16
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 26
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 106
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: ST_TO_ADDR
9673: GO 12748
9675: LD_INT 2
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9767
9683: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9684: LD_ADDR_VAR 0 2
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 4
9694: PUSH
9695: LD_INT 11
9697: PUSH
9698: LD_INT 12
9700: PUSH
9701: LD_INT 15
9703: PUSH
9704: LD_INT 16
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 23
9712: PUSH
9713: LD_INT 26
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 101
9729: PUSH
9730: LD_INT 102
9732: PUSH
9733: LD_INT 105
9735: PUSH
9736: LD_INT 106
9738: PUSH
9739: LD_INT 108
9741: PUSH
9742: LD_INT 116
9744: PUSH
9745: LD_INT 117
9747: PUSH
9748: LD_INT 118
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: ST_TO_ADDR
9765: GO 12748
9767: LD_INT 3
9769: DOUBLE
9770: EQUAL
9771: IFTRUE 9775
9773: GO 9863
9775: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 4
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: LD_INT 11
9792: PUSH
9793: LD_INT 12
9795: PUSH
9796: LD_INT 15
9798: PUSH
9799: LD_INT 16
9801: PUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 36
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 101
9825: PUSH
9826: LD_INT 102
9828: PUSH
9829: LD_INT 105
9831: PUSH
9832: LD_INT 106
9834: PUSH
9835: LD_INT 108
9837: PUSH
9838: LD_INT 116
9840: PUSH
9841: LD_INT 117
9843: PUSH
9844: LD_INT 118
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: ST_TO_ADDR
9861: GO 12748
9863: LD_INT 4
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9967
9871: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9872: LD_ADDR_VAR 0 2
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: LD_INT 4
9882: PUSH
9883: LD_INT 5
9885: PUSH
9886: LD_INT 8
9888: PUSH
9889: LD_INT 11
9891: PUSH
9892: LD_INT 12
9894: PUSH
9895: LD_INT 15
9897: PUSH
9898: LD_INT 16
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_INT 23
9906: PUSH
9907: LD_INT 26
9909: PUSH
9910: LD_INT 36
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 101
9929: PUSH
9930: LD_INT 102
9932: PUSH
9933: LD_INT 105
9935: PUSH
9936: LD_INT 106
9938: PUSH
9939: LD_INT 108
9941: PUSH
9942: LD_INT 116
9944: PUSH
9945: LD_INT 117
9947: PUSH
9948: LD_INT 118
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: ST_TO_ADDR
9965: GO 12748
9967: LD_INT 5
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10087
9975: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 4
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 8
9995: PUSH
9996: LD_INT 11
9998: PUSH
9999: LD_INT 12
10001: PUSH
10002: LD_INT 15
10004: PUSH
10005: LD_INT 16
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 23
10013: PUSH
10014: LD_INT 25
10016: PUSH
10017: LD_INT 26
10019: PUSH
10020: LD_INT 36
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 101
10041: PUSH
10042: LD_INT 102
10044: PUSH
10045: LD_INT 105
10047: PUSH
10048: LD_INT 106
10050: PUSH
10051: LD_INT 108
10053: PUSH
10054: LD_INT 109
10056: PUSH
10057: LD_INT 112
10059: PUSH
10060: LD_INT 116
10062: PUSH
10063: LD_INT 117
10065: PUSH
10066: LD_INT 118
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: ST_TO_ADDR
10085: GO 12748
10087: LD_INT 6
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10227
10095: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10096: LD_ADDR_VAR 0 2
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 4
10106: PUSH
10107: LD_INT 5
10109: PUSH
10110: LD_INT 6
10112: PUSH
10113: LD_INT 8
10115: PUSH
10116: LD_INT 11
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 15
10124: PUSH
10125: LD_INT 16
10127: PUSH
10128: LD_INT 20
10130: PUSH
10131: LD_INT 21
10133: PUSH
10134: LD_INT 22
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: LD_INT 25
10142: PUSH
10143: LD_INT 26
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 31
10151: PUSH
10152: LD_INT 32
10154: PUSH
10155: LD_INT 36
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 101
10181: PUSH
10182: LD_INT 102
10184: PUSH
10185: LD_INT 105
10187: PUSH
10188: LD_INT 106
10190: PUSH
10191: LD_INT 108
10193: PUSH
10194: LD_INT 109
10196: PUSH
10197: LD_INT 112
10199: PUSH
10200: LD_INT 116
10202: PUSH
10203: LD_INT 117
10205: PUSH
10206: LD_INT 118
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: ST_TO_ADDR
10225: GO 12748
10227: LD_INT 7
10229: DOUBLE
10230: EQUAL
10231: IFTRUE 10235
10233: GO 10347
10235: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: LD_INT 4
10246: PUSH
10247: LD_INT 5
10249: PUSH
10250: LD_INT 7
10252: PUSH
10253: LD_INT 11
10255: PUSH
10256: LD_INT 12
10258: PUSH
10259: LD_INT 15
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 26
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 101
10301: PUSH
10302: LD_INT 102
10304: PUSH
10305: LD_INT 103
10307: PUSH
10308: LD_INT 105
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 112
10319: PUSH
10320: LD_INT 116
10322: PUSH
10323: LD_INT 117
10325: PUSH
10326: LD_INT 118
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: ST_TO_ADDR
10345: GO 12748
10347: LD_INT 8
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10495
10355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 4
10366: PUSH
10367: LD_INT 5
10369: PUSH
10370: LD_INT 6
10372: PUSH
10373: LD_INT 7
10375: PUSH
10376: LD_INT 8
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 12
10384: PUSH
10385: LD_INT 15
10387: PUSH
10388: LD_INT 16
10390: PUSH
10391: LD_INT 20
10393: PUSH
10394: LD_INT 21
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 23
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 26
10408: PUSH
10409: LD_INT 30
10411: PUSH
10412: LD_INT 31
10414: PUSH
10415: LD_INT 32
10417: PUSH
10418: LD_INT 36
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 101
10445: PUSH
10446: LD_INT 102
10448: PUSH
10449: LD_INT 103
10451: PUSH
10452: LD_INT 105
10454: PUSH
10455: LD_INT 106
10457: PUSH
10458: LD_INT 108
10460: PUSH
10461: LD_INT 109
10463: PUSH
10464: LD_INT 112
10466: PUSH
10467: LD_INT 116
10469: PUSH
10470: LD_INT 117
10472: PUSH
10473: LD_INT 118
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: ST_TO_ADDR
10493: GO 12748
10495: LD_INT 9
10497: DOUBLE
10498: EQUAL
10499: IFTRUE 10503
10501: GO 10651
10503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: LD_INT 2
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: LD_INT 5
10517: PUSH
10518: LD_INT 6
10520: PUSH
10521: LD_INT 7
10523: PUSH
10524: LD_INT 8
10526: PUSH
10527: LD_INT 11
10529: PUSH
10530: LD_INT 12
10532: PUSH
10533: LD_INT 15
10535: PUSH
10536: LD_INT 16
10538: PUSH
10539: LD_INT 20
10541: PUSH
10542: LD_INT 21
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 25
10553: PUSH
10554: LD_INT 26
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 30
10562: PUSH
10563: LD_INT 31
10565: PUSH
10566: LD_INT 32
10568: PUSH
10569: LD_INT 36
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 101
10597: PUSH
10598: LD_INT 102
10600: PUSH
10601: LD_INT 103
10603: PUSH
10604: LD_INT 105
10606: PUSH
10607: LD_INT 106
10609: PUSH
10610: LD_INT 108
10612: PUSH
10613: LD_INT 109
10615: PUSH
10616: LD_INT 112
10618: PUSH
10619: LD_INT 114
10621: PUSH
10622: LD_INT 116
10624: PUSH
10625: LD_INT 117
10627: PUSH
10628: LD_INT 118
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 12748
10651: LD_INT 10
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10855
10659: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10660: LD_ADDR_VAR 0 2
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: LD_INT 6
10676: PUSH
10677: LD_INT 7
10679: PUSH
10680: LD_INT 8
10682: PUSH
10683: LD_INT 9
10685: PUSH
10686: LD_INT 10
10688: PUSH
10689: LD_INT 11
10691: PUSH
10692: LD_INT 12
10694: PUSH
10695: LD_INT 13
10697: PUSH
10698: LD_INT 14
10700: PUSH
10701: LD_INT 15
10703: PUSH
10704: LD_INT 16
10706: PUSH
10707: LD_INT 17
10709: PUSH
10710: LD_INT 18
10712: PUSH
10713: LD_INT 19
10715: PUSH
10716: LD_INT 20
10718: PUSH
10719: LD_INT 21
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_INT 23
10727: PUSH
10728: LD_INT 24
10730: PUSH
10731: LD_INT 25
10733: PUSH
10734: LD_INT 26
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: LD_INT 31
10745: PUSH
10746: LD_INT 32
10748: PUSH
10749: LD_INT 36
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 101
10785: PUSH
10786: LD_INT 102
10788: PUSH
10789: LD_INT 103
10791: PUSH
10792: LD_INT 104
10794: PUSH
10795: LD_INT 105
10797: PUSH
10798: LD_INT 106
10800: PUSH
10801: LD_INT 107
10803: PUSH
10804: LD_INT 108
10806: PUSH
10807: LD_INT 109
10809: PUSH
10810: LD_INT 110
10812: PUSH
10813: LD_INT 111
10815: PUSH
10816: LD_INT 112
10818: PUSH
10819: LD_INT 114
10821: PUSH
10822: LD_INT 116
10824: PUSH
10825: LD_INT 117
10827: PUSH
10828: LD_INT 118
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: ST_TO_ADDR
10853: GO 12748
10855: LD_INT 11
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 11067
10863: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 3
10874: PUSH
10875: LD_INT 4
10877: PUSH
10878: LD_INT 5
10880: PUSH
10881: LD_INT 6
10883: PUSH
10884: LD_INT 7
10886: PUSH
10887: LD_INT 8
10889: PUSH
10890: LD_INT 9
10892: PUSH
10893: LD_INT 10
10895: PUSH
10896: LD_INT 11
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: LD_INT 13
10904: PUSH
10905: LD_INT 14
10907: PUSH
10908: LD_INT 15
10910: PUSH
10911: LD_INT 16
10913: PUSH
10914: LD_INT 17
10916: PUSH
10917: LD_INT 18
10919: PUSH
10920: LD_INT 19
10922: PUSH
10923: LD_INT 20
10925: PUSH
10926: LD_INT 21
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 23
10934: PUSH
10935: LD_INT 24
10937: PUSH
10938: LD_INT 25
10940: PUSH
10941: LD_INT 26
10943: PUSH
10944: LD_INT 28
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 31
10952: PUSH
10953: LD_INT 32
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 36
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 102
11000: PUSH
11001: LD_INT 103
11003: PUSH
11004: LD_INT 104
11006: PUSH
11007: LD_INT 105
11009: PUSH
11010: LD_INT 106
11012: PUSH
11013: LD_INT 107
11015: PUSH
11016: LD_INT 108
11018: PUSH
11019: LD_INT 109
11021: PUSH
11022: LD_INT 110
11024: PUSH
11025: LD_INT 111
11027: PUSH
11028: LD_INT 112
11030: PUSH
11031: LD_INT 114
11033: PUSH
11034: LD_INT 116
11036: PUSH
11037: LD_INT 117
11039: PUSH
11040: LD_INT 118
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: ST_TO_ADDR
11065: GO 12748
11067: LD_INT 12
11069: DOUBLE
11070: EQUAL
11071: IFTRUE 11075
11073: GO 11295
11075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: LD_INT 4
11092: PUSH
11093: LD_INT 5
11095: PUSH
11096: LD_INT 6
11098: PUSH
11099: LD_INT 7
11101: PUSH
11102: LD_INT 8
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: LD_INT 10
11110: PUSH
11111: LD_INT 11
11113: PUSH
11114: LD_INT 12
11116: PUSH
11117: LD_INT 13
11119: PUSH
11120: LD_INT 14
11122: PUSH
11123: LD_INT 15
11125: PUSH
11126: LD_INT 16
11128: PUSH
11129: LD_INT 17
11131: PUSH
11132: LD_INT 18
11134: PUSH
11135: LD_INT 19
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_INT 23
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 26
11158: PUSH
11159: LD_INT 27
11161: PUSH
11162: LD_INT 28
11164: PUSH
11165: LD_INT 30
11167: PUSH
11168: LD_INT 31
11170: PUSH
11171: LD_INT 32
11173: PUSH
11174: LD_INT 33
11176: PUSH
11177: LD_INT 34
11179: PUSH
11180: LD_INT 36
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 101
11221: PUSH
11222: LD_INT 102
11224: PUSH
11225: LD_INT 103
11227: PUSH
11228: LD_INT 104
11230: PUSH
11231: LD_INT 105
11233: PUSH
11234: LD_INT 106
11236: PUSH
11237: LD_INT 107
11239: PUSH
11240: LD_INT 108
11242: PUSH
11243: LD_INT 109
11245: PUSH
11246: LD_INT 110
11248: PUSH
11249: LD_INT 111
11251: PUSH
11252: LD_INT 112
11254: PUSH
11255: LD_INT 113
11257: PUSH
11258: LD_INT 114
11260: PUSH
11261: LD_INT 116
11263: PUSH
11264: LD_INT 117
11266: PUSH
11267: LD_INT 118
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: ST_TO_ADDR
11293: GO 12748
11295: LD_INT 13
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11511
11303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11304: LD_ADDR_VAR 0 2
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: LD_INT 5
11323: PUSH
11324: LD_INT 8
11326: PUSH
11327: LD_INT 9
11329: PUSH
11330: LD_INT 10
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 15
11344: PUSH
11345: LD_INT 16
11347: PUSH
11348: LD_INT 17
11350: PUSH
11351: LD_INT 18
11353: PUSH
11354: LD_INT 19
11356: PUSH
11357: LD_INT 20
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_INT 23
11368: PUSH
11369: LD_INT 24
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: LD_INT 27
11380: PUSH
11381: LD_INT 28
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 36
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 101
11437: PUSH
11438: LD_INT 102
11440: PUSH
11441: LD_INT 103
11443: PUSH
11444: LD_INT 104
11446: PUSH
11447: LD_INT 105
11449: PUSH
11450: LD_INT 106
11452: PUSH
11453: LD_INT 107
11455: PUSH
11456: LD_INT 108
11458: PUSH
11459: LD_INT 109
11461: PUSH
11462: LD_INT 110
11464: PUSH
11465: LD_INT 111
11467: PUSH
11468: LD_INT 112
11470: PUSH
11471: LD_INT 113
11473: PUSH
11474: LD_INT 114
11476: PUSH
11477: LD_INT 116
11479: PUSH
11480: LD_INT 117
11482: PUSH
11483: LD_INT 118
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 12748
11511: LD_INT 14
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11743
11519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: LD_INT 5
11539: PUSH
11540: LD_INT 6
11542: PUSH
11543: LD_INT 7
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: LD_INT 9
11551: PUSH
11552: LD_INT 10
11554: PUSH
11555: LD_INT 11
11557: PUSH
11558: LD_INT 12
11560: PUSH
11561: LD_INT 13
11563: PUSH
11564: LD_INT 14
11566: PUSH
11567: LD_INT 15
11569: PUSH
11570: LD_INT 16
11572: PUSH
11573: LD_INT 17
11575: PUSH
11576: LD_INT 18
11578: PUSH
11579: LD_INT 19
11581: PUSH
11582: LD_INT 20
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 22
11590: PUSH
11591: LD_INT 23
11593: PUSH
11594: LD_INT 24
11596: PUSH
11597: LD_INT 25
11599: PUSH
11600: LD_INT 26
11602: PUSH
11603: LD_INT 27
11605: PUSH
11606: LD_INT 28
11608: PUSH
11609: LD_INT 29
11611: PUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 31
11617: PUSH
11618: LD_INT 32
11620: PUSH
11621: LD_INT 33
11623: PUSH
11624: LD_INT 34
11626: PUSH
11627: LD_INT 36
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 101
11669: PUSH
11670: LD_INT 102
11672: PUSH
11673: LD_INT 103
11675: PUSH
11676: LD_INT 104
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 107
11687: PUSH
11688: LD_INT 108
11690: PUSH
11691: LD_INT 109
11693: PUSH
11694: LD_INT 110
11696: PUSH
11697: LD_INT 111
11699: PUSH
11700: LD_INT 112
11702: PUSH
11703: LD_INT 113
11705: PUSH
11706: LD_INT 114
11708: PUSH
11709: LD_INT 116
11711: PUSH
11712: LD_INT 117
11714: PUSH
11715: LD_INT 118
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: ST_TO_ADDR
11741: GO 12748
11743: LD_INT 15
11745: DOUBLE
11746: EQUAL
11747: IFTRUE 11751
11749: GO 11975
11751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11752: LD_ADDR_VAR 0 2
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: LD_INT 3
11765: PUSH
11766: LD_INT 4
11768: PUSH
11769: LD_INT 5
11771: PUSH
11772: LD_INT 6
11774: PUSH
11775: LD_INT 7
11777: PUSH
11778: LD_INT 8
11780: PUSH
11781: LD_INT 9
11783: PUSH
11784: LD_INT 10
11786: PUSH
11787: LD_INT 11
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: LD_INT 13
11795: PUSH
11796: LD_INT 14
11798: PUSH
11799: LD_INT 15
11801: PUSH
11802: LD_INT 16
11804: PUSH
11805: LD_INT 17
11807: PUSH
11808: LD_INT 18
11810: PUSH
11811: LD_INT 19
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 23
11825: PUSH
11826: LD_INT 24
11828: PUSH
11829: LD_INT 25
11831: PUSH
11832: LD_INT 26
11834: PUSH
11835: LD_INT 27
11837: PUSH
11838: LD_INT 28
11840: PUSH
11841: LD_INT 29
11843: PUSH
11844: LD_INT 30
11846: PUSH
11847: LD_INT 31
11849: PUSH
11850: LD_INT 32
11852: PUSH
11853: LD_INT 33
11855: PUSH
11856: LD_INT 34
11858: PUSH
11859: LD_INT 36
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 101
11901: PUSH
11902: LD_INT 102
11904: PUSH
11905: LD_INT 103
11907: PUSH
11908: LD_INT 104
11910: PUSH
11911: LD_INT 105
11913: PUSH
11914: LD_INT 106
11916: PUSH
11917: LD_INT 107
11919: PUSH
11920: LD_INT 108
11922: PUSH
11923: LD_INT 109
11925: PUSH
11926: LD_INT 110
11928: PUSH
11929: LD_INT 111
11931: PUSH
11932: LD_INT 112
11934: PUSH
11935: LD_INT 113
11937: PUSH
11938: LD_INT 114
11940: PUSH
11941: LD_INT 116
11943: PUSH
11944: LD_INT 117
11946: PUSH
11947: LD_INT 118
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: ST_TO_ADDR
11973: GO 12748
11975: LD_INT 16
11977: DOUBLE
11978: EQUAL
11979: IFTRUE 11983
11981: GO 12119
11983: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: LD_INT 4
11994: PUSH
11995: LD_INT 5
11997: PUSH
11998: LD_INT 7
12000: PUSH
12001: LD_INT 11
12003: PUSH
12004: LD_INT 12
12006: PUSH
12007: LD_INT 15
12009: PUSH
12010: LD_INT 16
12012: PUSH
12013: LD_INT 20
12015: PUSH
12016: LD_INT 21
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 23
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 26
12030: PUSH
12031: LD_INT 30
12033: PUSH
12034: LD_INT 31
12036: PUSH
12037: LD_INT 32
12039: PUSH
12040: LD_INT 33
12042: PUSH
12043: LD_INT 34
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 101
12069: PUSH
12070: LD_INT 102
12072: PUSH
12073: LD_INT 103
12075: PUSH
12076: LD_INT 106
12078: PUSH
12079: LD_INT 108
12081: PUSH
12082: LD_INT 112
12084: PUSH
12085: LD_INT 113
12087: PUSH
12088: LD_INT 114
12090: PUSH
12091: LD_INT 116
12093: PUSH
12094: LD_INT 117
12096: PUSH
12097: LD_INT 118
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: ST_TO_ADDR
12117: GO 12748
12119: LD_INT 17
12121: DOUBLE
12122: EQUAL
12123: IFTRUE 12127
12125: GO 12351
12127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12128: LD_ADDR_VAR 0 2
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 3
12141: PUSH
12142: LD_INT 4
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 6
12150: PUSH
12151: LD_INT 7
12153: PUSH
12154: LD_INT 8
12156: PUSH
12157: LD_INT 9
12159: PUSH
12160: LD_INT 10
12162: PUSH
12163: LD_INT 11
12165: PUSH
12166: LD_INT 12
12168: PUSH
12169: LD_INT 13
12171: PUSH
12172: LD_INT 14
12174: PUSH
12175: LD_INT 15
12177: PUSH
12178: LD_INT 16
12180: PUSH
12181: LD_INT 17
12183: PUSH
12184: LD_INT 18
12186: PUSH
12187: LD_INT 19
12189: PUSH
12190: LD_INT 20
12192: PUSH
12193: LD_INT 21
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_INT 23
12201: PUSH
12202: LD_INT 24
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 26
12210: PUSH
12211: LD_INT 27
12213: PUSH
12214: LD_INT 28
12216: PUSH
12217: LD_INT 29
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 31
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 34
12234: PUSH
12235: LD_INT 36
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 101
12277: PUSH
12278: LD_INT 102
12280: PUSH
12281: LD_INT 103
12283: PUSH
12284: LD_INT 104
12286: PUSH
12287: LD_INT 105
12289: PUSH
12290: LD_INT 106
12292: PUSH
12293: LD_INT 107
12295: PUSH
12296: LD_INT 108
12298: PUSH
12299: LD_INT 109
12301: PUSH
12302: LD_INT 110
12304: PUSH
12305: LD_INT 111
12307: PUSH
12308: LD_INT 112
12310: PUSH
12311: LD_INT 113
12313: PUSH
12314: LD_INT 114
12316: PUSH
12317: LD_INT 116
12319: PUSH
12320: LD_INT 117
12322: PUSH
12323: LD_INT 118
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: ST_TO_ADDR
12349: GO 12748
12351: LD_INT 18
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12507
12359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: LD_INT 4
12370: PUSH
12371: LD_INT 5
12373: PUSH
12374: LD_INT 7
12376: PUSH
12377: LD_INT 11
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: LD_INT 15
12385: PUSH
12386: LD_INT 16
12388: PUSH
12389: LD_INT 20
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: LD_INT 33
12418: PUSH
12419: LD_INT 34
12421: PUSH
12422: LD_INT 35
12424: PUSH
12425: LD_INT 36
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 101
12453: PUSH
12454: LD_INT 102
12456: PUSH
12457: LD_INT 103
12459: PUSH
12460: LD_INT 106
12462: PUSH
12463: LD_INT 108
12465: PUSH
12466: LD_INT 112
12468: PUSH
12469: LD_INT 113
12471: PUSH
12472: LD_INT 114
12474: PUSH
12475: LD_INT 115
12477: PUSH
12478: LD_INT 116
12480: PUSH
12481: LD_INT 117
12483: PUSH
12484: LD_INT 118
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12748
12507: LD_INT 19
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12747
12515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: LD_INT 6
12538: PUSH
12539: LD_INT 7
12541: PUSH
12542: LD_INT 8
12544: PUSH
12545: LD_INT 9
12547: PUSH
12548: LD_INT 10
12550: PUSH
12551: LD_INT 11
12553: PUSH
12554: LD_INT 12
12556: PUSH
12557: LD_INT 13
12559: PUSH
12560: LD_INT 14
12562: PUSH
12563: LD_INT 15
12565: PUSH
12566: LD_INT 16
12568: PUSH
12569: LD_INT 17
12571: PUSH
12572: LD_INT 18
12574: PUSH
12575: LD_INT 19
12577: PUSH
12578: LD_INT 20
12580: PUSH
12581: LD_INT 21
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_INT 23
12589: PUSH
12590: LD_INT 24
12592: PUSH
12593: LD_INT 25
12595: PUSH
12596: LD_INT 26
12598: PUSH
12599: LD_INT 27
12601: PUSH
12602: LD_INT 28
12604: PUSH
12605: LD_INT 29
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 31
12613: PUSH
12614: LD_INT 32
12616: PUSH
12617: LD_INT 33
12619: PUSH
12620: LD_INT 34
12622: PUSH
12623: LD_INT 35
12625: PUSH
12626: LD_INT 36
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 101
12669: PUSH
12670: LD_INT 102
12672: PUSH
12673: LD_INT 103
12675: PUSH
12676: LD_INT 104
12678: PUSH
12679: LD_INT 105
12681: PUSH
12682: LD_INT 106
12684: PUSH
12685: LD_INT 107
12687: PUSH
12688: LD_INT 108
12690: PUSH
12691: LD_INT 109
12693: PUSH
12694: LD_INT 110
12696: PUSH
12697: LD_INT 111
12699: PUSH
12700: LD_INT 112
12702: PUSH
12703: LD_INT 113
12705: PUSH
12706: LD_INT 114
12708: PUSH
12709: LD_INT 115
12711: PUSH
12712: LD_INT 116
12714: PUSH
12715: LD_INT 117
12717: PUSH
12718: LD_INT 118
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: ST_TO_ADDR
12745: GO 12748
12747: POP
// end else
12748: GO 12979
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: LD_INT 3
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: LD_INT 5
12769: PUSH
12770: LD_INT 6
12772: PUSH
12773: LD_INT 7
12775: PUSH
12776: LD_INT 8
12778: PUSH
12779: LD_INT 9
12781: PUSH
12782: LD_INT 10
12784: PUSH
12785: LD_INT 11
12787: PUSH
12788: LD_INT 12
12790: PUSH
12791: LD_INT 13
12793: PUSH
12794: LD_INT 14
12796: PUSH
12797: LD_INT 15
12799: PUSH
12800: LD_INT 16
12802: PUSH
12803: LD_INT 17
12805: PUSH
12806: LD_INT 18
12808: PUSH
12809: LD_INT 19
12811: PUSH
12812: LD_INT 20
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 23
12823: PUSH
12824: LD_INT 24
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 26
12832: PUSH
12833: LD_INT 27
12835: PUSH
12836: LD_INT 28
12838: PUSH
12839: LD_INT 29
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 31
12847: PUSH
12848: LD_INT 32
12850: PUSH
12851: LD_INT 33
12853: PUSH
12854: LD_INT 34
12856: PUSH
12857: LD_INT 35
12859: PUSH
12860: LD_INT 36
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 101
12903: PUSH
12904: LD_INT 102
12906: PUSH
12907: LD_INT 103
12909: PUSH
12910: LD_INT 104
12912: PUSH
12913: LD_INT 105
12915: PUSH
12916: LD_INT 106
12918: PUSH
12919: LD_INT 107
12921: PUSH
12922: LD_INT 108
12924: PUSH
12925: LD_INT 109
12927: PUSH
12928: LD_INT 110
12930: PUSH
12931: LD_INT 111
12933: PUSH
12934: LD_INT 112
12936: PUSH
12937: LD_INT 113
12939: PUSH
12940: LD_INT 114
12942: PUSH
12943: LD_INT 115
12945: PUSH
12946: LD_INT 116
12948: PUSH
12949: LD_INT 117
12951: PUSH
12952: LD_INT 118
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: ST_TO_ADDR
// if result then
12979: LD_VAR 0 2
12983: IFFALSE 13769
// begin normal :=  ;
12985: LD_ADDR_VAR 0 5
12989: PUSH
12990: LD_STRING 
12992: ST_TO_ADDR
// hardcore :=  ;
12993: LD_ADDR_VAR 0 6
12997: PUSH
12998: LD_STRING 
13000: ST_TO_ADDR
// active :=  ;
13001: LD_ADDR_VAR 0 7
13005: PUSH
13006: LD_STRING 
13008: ST_TO_ADDR
// for i = 1 to normalCounter do
13009: LD_ADDR_VAR 0 8
13013: PUSH
13014: DOUBLE
13015: LD_INT 1
13017: DEC
13018: ST_TO_ADDR
13019: LD_EXP 21
13023: PUSH
13024: FOR_TO
13025: IFFALSE 13126
// begin tmp := 0 ;
13027: LD_ADDR_VAR 0 3
13031: PUSH
13032: LD_STRING 0
13034: ST_TO_ADDR
// if result [ 1 ] then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: IFFALSE 13108
// if result [ 1 ] [ 1 ] = i then
13045: LD_VAR 0 2
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PUSH
13058: LD_VAR 0 8
13062: EQUAL
13063: IFFALSE 13108
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: LD_VAR 0 2
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 3
13094: PPUSH
13095: CALL_OW 1
13099: ST_TO_ADDR
// tmp := 1 ;
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_STRING 1
13107: ST_TO_ADDR
// end ; normal := normal & tmp ;
13108: LD_ADDR_VAR 0 5
13112: PUSH
13113: LD_VAR 0 5
13117: PUSH
13118: LD_VAR 0 3
13122: STR
13123: ST_TO_ADDR
// end ;
13124: GO 13024
13126: POP
13127: POP
// for i = 1 to hardcoreCounter do
13128: LD_ADDR_VAR 0 8
13132: PUSH
13133: DOUBLE
13134: LD_INT 1
13136: DEC
13137: ST_TO_ADDR
13138: LD_EXP 22
13142: PUSH
13143: FOR_TO
13144: IFFALSE 13249
// begin tmp := 0 ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_STRING 0
13153: ST_TO_ADDR
// if result [ 2 ] then
13154: LD_VAR 0 2
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: IFFALSE 13231
// if result [ 2 ] [ 1 ] = 100 + i then
13164: LD_VAR 0 2
13168: PUSH
13169: LD_INT 2
13171: ARRAY
13172: PUSH
13173: LD_INT 1
13175: ARRAY
13176: PUSH
13177: LD_INT 100
13179: PUSH
13180: LD_VAR 0 8
13184: PLUS
13185: EQUAL
13186: IFFALSE 13231
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_VAR 0 2
13197: PPUSH
13198: LD_INT 2
13200: PPUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 2
13208: ARRAY
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 3
13217: PPUSH
13218: CALL_OW 1
13222: ST_TO_ADDR
// tmp := 1 ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_STRING 1
13230: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13231: LD_ADDR_VAR 0 6
13235: PUSH
13236: LD_VAR 0 6
13240: PUSH
13241: LD_VAR 0 3
13245: STR
13246: ST_TO_ADDR
// end ;
13247: GO 13143
13249: POP
13250: POP
// if isGameLoad then
13251: LD_VAR 0 1
13255: IFFALSE 13730
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: LD_EXP 25
13266: PUSH
13267: LD_EXP 24
13271: PUSH
13272: LD_EXP 26
13276: PUSH
13277: LD_EXP 23
13281: PUSH
13282: LD_EXP 27
13286: PUSH
13287: LD_EXP 28
13291: PUSH
13292: LD_EXP 29
13296: PUSH
13297: LD_EXP 30
13301: PUSH
13302: LD_EXP 31
13306: PUSH
13307: LD_EXP 32
13311: PUSH
13312: LD_EXP 33
13316: PUSH
13317: LD_EXP 34
13321: PUSH
13322: LD_EXP 35
13326: PUSH
13327: LD_EXP 36
13331: PUSH
13332: LD_EXP 44
13336: PUSH
13337: LD_EXP 45
13341: PUSH
13342: LD_EXP 46
13346: PUSH
13347: LD_EXP 47
13351: PUSH
13352: LD_EXP 49
13356: PUSH
13357: LD_EXP 50
13361: PUSH
13362: LD_EXP 51
13366: PUSH
13367: LD_EXP 54
13371: PUSH
13372: LD_EXP 56
13376: PUSH
13377: LD_EXP 57
13381: PUSH
13382: LD_EXP 58
13386: PUSH
13387: LD_EXP 60
13391: PUSH
13392: LD_EXP 61
13396: PUSH
13397: LD_EXP 64
13401: PUSH
13402: LD_EXP 65
13406: PUSH
13407: LD_EXP 66
13411: PUSH
13412: LD_EXP 67
13416: PUSH
13417: LD_EXP 68
13421: PUSH
13422: LD_EXP 69
13426: PUSH
13427: LD_EXP 70
13431: PUSH
13432: LD_EXP 71
13436: PUSH
13437: LD_EXP 72
13441: PUSH
13442: LD_EXP 37
13446: PUSH
13447: LD_EXP 38
13451: PUSH
13452: LD_EXP 41
13456: PUSH
13457: LD_EXP 42
13461: PUSH
13462: LD_EXP 43
13466: PUSH
13467: LD_EXP 39
13471: PUSH
13472: LD_EXP 40
13476: PUSH
13477: LD_EXP 48
13481: PUSH
13482: LD_EXP 52
13486: PUSH
13487: LD_EXP 53
13491: PUSH
13492: LD_EXP 55
13496: PUSH
13497: LD_EXP 59
13501: PUSH
13502: LD_EXP 62
13506: PUSH
13507: LD_EXP 63
13511: PUSH
13512: LD_EXP 73
13516: PUSH
13517: LD_EXP 74
13521: PUSH
13522: LD_EXP 75
13526: PUSH
13527: LD_EXP 76
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// tmp :=  ;
13588: LD_ADDR_VAR 0 3
13592: PUSH
13593: LD_STRING 
13595: ST_TO_ADDR
// for i = 1 to normalCounter do
13596: LD_ADDR_VAR 0 8
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_EXP 21
13610: PUSH
13611: FOR_TO
13612: IFFALSE 13648
// begin if flags [ i ] then
13614: LD_VAR 0 4
13618: PUSH
13619: LD_VAR 0 8
13623: ARRAY
13624: IFFALSE 13646
// tmp := tmp & i & ; ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 3
13635: PUSH
13636: LD_VAR 0 8
13640: STR
13641: PUSH
13642: LD_STRING ;
13644: STR
13645: ST_TO_ADDR
// end ;
13646: GO 13611
13648: POP
13649: POP
// for i = 1 to hardcoreCounter do
13650: LD_ADDR_VAR 0 8
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_EXP 22
13664: PUSH
13665: FOR_TO
13666: IFFALSE 13712
// begin if flags [ normalCounter + i ] then
13668: LD_VAR 0 4
13672: PUSH
13673: LD_EXP 21
13677: PUSH
13678: LD_VAR 0 8
13682: PLUS
13683: ARRAY
13684: IFFALSE 13710
// tmp := tmp & ( 100 + i ) & ; ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_VAR 0 3
13695: PUSH
13696: LD_INT 100
13698: PUSH
13699: LD_VAR 0 8
13703: PLUS
13704: STR
13705: PUSH
13706: LD_STRING ;
13708: STR
13709: ST_TO_ADDR
// end ;
13710: GO 13665
13712: POP
13713: POP
// if tmp then
13714: LD_VAR 0 3
13718: IFFALSE 13730
// active := tmp ;
13720: LD_ADDR_VAR 0 7
13724: PUSH
13725: LD_VAR 0 3
13729: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13730: LD_STRING getStreamItemsFromMission("
13732: PUSH
13733: LD_VAR 0 5
13737: STR
13738: PUSH
13739: LD_STRING ","
13741: STR
13742: PUSH
13743: LD_VAR 0 6
13747: STR
13748: PUSH
13749: LD_STRING ","
13751: STR
13752: PUSH
13753: LD_VAR 0 7
13757: STR
13758: PUSH
13759: LD_STRING ")
13761: STR
13762: PPUSH
13763: CALL_OW 559
// end else
13767: GO 13776
// ToLua ( getStreamItemsFromMission("","","") ) ;
13769: LD_STRING getStreamItemsFromMission("","","")
13771: PPUSH
13772: CALL_OW 559
// end ;
13776: LD_VAR 0 2
13780: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13781: LD_EXP 20
13785: PUSH
13786: LD_EXP 25
13790: AND
13791: IFFALSE 13915
13793: GO 13795
13795: DISABLE
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
// begin enable ;
13800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13801: LD_ADDR_VAR 0 2
13805: PUSH
13806: LD_INT 22
13808: PUSH
13809: LD_OWVAR 2
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 2
13820: PUSH
13821: LD_INT 34
13823: PUSH
13824: LD_INT 7
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 34
13833: PUSH
13834: LD_INT 45
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 34
13843: PUSH
13844: LD_INT 28
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 34
13853: PUSH
13854: LD_INT 47
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: ST_TO_ADDR
// if not tmp then
13877: LD_VAR 0 2
13881: NOT
13882: IFFALSE 13886
// exit ;
13884: GO 13915
// for i in tmp do
13886: LD_ADDR_VAR 0 1
13890: PUSH
13891: LD_VAR 0 2
13895: PUSH
13896: FOR_IN
13897: IFFALSE 13913
// begin SetLives ( i , 0 ) ;
13899: LD_VAR 0 1
13903: PPUSH
13904: LD_INT 0
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: GO 13896
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13918: LD_EXP 20
13922: PUSH
13923: LD_EXP 26
13927: AND
13928: IFFALSE 14012
13930: GO 13932
13932: DISABLE
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// begin enable ;
13937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_OWVAR 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 32
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 69
13973: ST_TO_ADDR
// if not tmp then
13974: LD_VAR 0 2
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14012
// for i in tmp do
13983: LD_ADDR_VAR 0 1
13987: PUSH
13988: LD_VAR 0 2
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14010
// begin SetLives ( i , 0 ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: LD_INT 0
14003: PPUSH
14004: CALL_OW 234
// end ;
14008: GO 13993
14010: POP
14011: POP
// end ;
14012: PPOPN 2
14014: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14015: LD_EXP 20
14019: PUSH
14020: LD_EXP 23
14024: AND
14025: IFFALSE 14118
14027: GO 14029
14029: DISABLE
14030: LD_INT 0
14032: PPUSH
// begin enable ;
14033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 22
14041: PUSH
14042: LD_OWVAR 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 2
14053: PUSH
14054: LD_INT 25
14056: PUSH
14057: LD_INT 5
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 25
14066: PUSH
14067: LD_INT 9
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 25
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PUSH
14099: FOR_IN
14100: IFFALSE 14116
// begin SetClass ( i , 1 ) ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 336
// end ;
14114: GO 14099
14116: POP
14117: POP
// end ;
14118: PPOPN 1
14120: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14121: LD_EXP 20
14125: PUSH
14126: LD_EXP 24
14130: AND
14131: PUSH
14132: LD_OWVAR 65
14136: PUSH
14137: LD_INT 7
14139: LESS
14140: AND
14141: IFFALSE 14155
14143: GO 14145
14145: DISABLE
// begin enable ;
14146: ENABLE
// game_speed := 7 ;
14147: LD_ADDR_OWVAR 65
14151: PUSH
14152: LD_INT 7
14154: ST_TO_ADDR
// end ;
14155: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14156: LD_EXP 20
14160: PUSH
14161: LD_EXP 27
14165: AND
14166: IFFALSE 14368
14168: GO 14170
14170: DISABLE
14171: LD_INT 0
14173: PPUSH
14174: PPUSH
14175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 81
14183: PUSH
14184: LD_OWVAR 2
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 69
14211: ST_TO_ADDR
// if not tmp then
14212: LD_VAR 0 3
14216: NOT
14217: IFFALSE 14221
// exit ;
14219: GO 14368
// if tmp > 5 then
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 5
14228: GREATER
14229: IFFALSE 14241
// k := 5 else
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_INT 5
14238: ST_TO_ADDR
14239: GO 14251
// k := tmp ;
14241: LD_ADDR_VAR 0 2
14245: PUSH
14246: LD_VAR 0 3
14250: ST_TO_ADDR
// for i := 1 to k do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_VAR 0 2
14265: PUSH
14266: FOR_TO
14267: IFFALSE 14366
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14269: LD_VAR 0 3
14273: PUSH
14274: LD_VAR 0 1
14278: ARRAY
14279: PPUSH
14280: LD_VAR 0 1
14284: PUSH
14285: LD_INT 4
14287: MOD
14288: PUSH
14289: LD_INT 1
14291: PLUS
14292: PPUSH
14293: CALL_OW 259
14297: PUSH
14298: LD_INT 10
14300: LESS
14301: IFFALSE 14364
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14303: LD_VAR 0 3
14307: PUSH
14308: LD_VAR 0 1
14312: ARRAY
14313: PPUSH
14314: LD_VAR 0 1
14318: PUSH
14319: LD_INT 4
14321: MOD
14322: PUSH
14323: LD_INT 1
14325: PLUS
14326: PPUSH
14327: LD_VAR 0 3
14331: PUSH
14332: LD_VAR 0 1
14336: ARRAY
14337: PPUSH
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 4
14345: MOD
14346: PUSH
14347: LD_INT 1
14349: PLUS
14350: PPUSH
14351: CALL_OW 259
14355: PUSH
14356: LD_INT 1
14358: PLUS
14359: PPUSH
14360: CALL_OW 237
14364: GO 14266
14366: POP
14367: POP
// end ;
14368: PPOPN 3
14370: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14371: LD_EXP 20
14375: PUSH
14376: LD_EXP 28
14380: AND
14381: IFFALSE 14401
14383: GO 14385
14385: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14386: LD_INT 4
14388: PPUSH
14389: LD_OWVAR 2
14393: PPUSH
14394: LD_INT 0
14396: PPUSH
14397: CALL_OW 324
14401: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14402: LD_EXP 20
14406: PUSH
14407: LD_EXP 57
14411: AND
14412: IFFALSE 14432
14414: GO 14416
14416: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14417: LD_INT 19
14419: PPUSH
14420: LD_OWVAR 2
14424: PPUSH
14425: LD_INT 0
14427: PPUSH
14428: CALL_OW 324
14432: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14433: LD_EXP 20
14437: PUSH
14438: LD_EXP 29
14442: AND
14443: IFFALSE 14545
14445: GO 14447
14447: DISABLE
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// begin enable ;
14452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: LD_INT 22
14460: PUSH
14461: LD_OWVAR 2
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 2
14472: PUSH
14473: LD_INT 34
14475: PUSH
14476: LD_INT 11
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 34
14485: PUSH
14486: LD_INT 30
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: ST_TO_ADDR
// if not tmp then
14507: LD_VAR 0 2
14511: NOT
14512: IFFALSE 14516
// exit ;
14514: GO 14545
// for i in tmp do
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: LD_VAR 0 2
14525: PUSH
14526: FOR_IN
14527: IFFALSE 14543
// begin SetLives ( i , 0 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 0
14536: PPUSH
14537: CALL_OW 234
// end ;
14541: GO 14526
14543: POP
14544: POP
// end ;
14545: PPOPN 2
14547: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14548: LD_EXP 20
14552: PUSH
14553: LD_EXP 30
14557: AND
14558: IFFALSE 14578
14560: GO 14562
14562: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14563: LD_INT 32
14565: PPUSH
14566: LD_OWVAR 2
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 324
14578: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14579: LD_EXP 20
14583: PUSH
14584: LD_EXP 31
14588: AND
14589: IFFALSE 14770
14591: GO 14593
14593: DISABLE
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
14598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: LD_INT 22
14606: PUSH
14607: LD_OWVAR 2
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 33
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: ST_TO_ADDR
// if not tmp then
14635: LD_VAR 0 2
14639: NOT
14640: IFFALSE 14644
// exit ;
14642: GO 14770
// side := 0 ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_INT 0
14651: ST_TO_ADDR
// for i := 1 to 8 do
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: DOUBLE
14658: LD_INT 1
14660: DEC
14661: ST_TO_ADDR
14662: LD_INT 8
14664: PUSH
14665: FOR_TO
14666: IFFALSE 14714
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14668: LD_OWVAR 2
14672: PUSH
14673: LD_VAR 0 1
14677: NONEQUAL
14678: PUSH
14679: LD_OWVAR 2
14683: PPUSH
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 81
14693: PUSH
14694: LD_INT 2
14696: EQUAL
14697: AND
14698: IFFALSE 14712
// begin side := i ;
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_VAR 0 1
14709: ST_TO_ADDR
// break ;
14710: GO 14714
// end ;
14712: GO 14665
14714: POP
14715: POP
// if not side then
14716: LD_VAR 0 3
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14770
// for i := 1 to tmp do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: DOUBLE
14731: LD_INT 1
14733: DEC
14734: ST_TO_ADDR
14735: LD_VAR 0 2
14739: PUSH
14740: FOR_TO
14741: IFFALSE 14768
// if Prob ( 60 ) then
14743: LD_INT 60
14745: PPUSH
14746: CALL_OW 13
14750: IFFALSE 14766
// SetSide ( i , side ) ;
14752: LD_VAR 0 1
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: CALL_OW 235
14766: GO 14740
14768: POP
14769: POP
// end ;
14770: PPOPN 3
14772: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14773: LD_EXP 20
14777: PUSH
14778: LD_EXP 33
14782: AND
14783: IFFALSE 14902
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14900
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 3
14866: PUSH
14867: LD_INT 4
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: IN
14876: IFFALSE 14898
// SetClass ( un , rand ( 1 , 4 ) ) ;
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_INT 4
14888: PPUSH
14889: CALL_OW 12
14893: PPUSH
14894: CALL_OW 336
14898: GO 14845
14900: POP
14901: POP
// end ;
14902: PPOPN 1
14904: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14905: LD_EXP 20
14909: PUSH
14910: LD_EXP 32
14914: AND
14915: IFFALSE 14994
14917: GO 14919
14919: DISABLE
14920: LD_INT 0
14922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14923: LD_ADDR_VAR 0 1
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_OWVAR 2
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PPUSH
14954: CALL_OW 69
14958: ST_TO_ADDR
// if not tmp then
14959: LD_VAR 0 1
14963: NOT
14964: IFFALSE 14968
// exit ;
14966: GO 14994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14968: LD_VAR 0 1
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: PPUSH
14987: LD_INT 100
14989: PPUSH
14990: CALL_OW 234
// end ;
14994: PPOPN 1
14996: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14997: LD_EXP 20
15001: PUSH
15002: LD_EXP 34
15006: AND
15007: IFFALSE 15105
15009: GO 15011
15011: DISABLE
15012: LD_INT 0
15014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_OWVAR 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: ST_TO_ADDR
// if not tmp then
15051: LD_VAR 0 1
15055: NOT
15056: IFFALSE 15060
// exit ;
15058: GO 15105
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15060: LD_VAR 0 1
15064: PUSH
15065: LD_INT 1
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL_OW 12
15077: ARRAY
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 4
15084: PPUSH
15085: CALL_OW 12
15089: PPUSH
15090: LD_INT 3000
15092: PPUSH
15093: LD_INT 9000
15095: PPUSH
15096: CALL_OW 12
15100: PPUSH
15101: CALL_OW 492
// end ;
15105: PPOPN 1
15107: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15108: LD_EXP 20
15112: PUSH
15113: LD_EXP 35
15117: AND
15118: IFFALSE 15138
15120: GO 15122
15122: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15123: LD_INT 1
15125: PPUSH
15126: LD_OWVAR 2
15130: PPUSH
15131: LD_INT 0
15133: PPUSH
15134: CALL_OW 324
15138: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15139: LD_EXP 20
15143: PUSH
15144: LD_EXP 36
15148: AND
15149: IFFALSE 15232
15151: GO 15153
15153: DISABLE
15154: LD_INT 0
15156: PPUSH
15157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15158: LD_ADDR_VAR 0 2
15162: PUSH
15163: LD_INT 22
15165: PUSH
15166: LD_OWVAR 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 21
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: ST_TO_ADDR
// if not tmp then
15194: LD_VAR 0 2
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15232
// for i in tmp do
15203: LD_ADDR_VAR 0 1
15207: PUSH
15208: LD_VAR 0 2
15212: PUSH
15213: FOR_IN
15214: IFFALSE 15230
// SetBLevel ( i , 10 ) ;
15216: LD_VAR 0 1
15220: PPUSH
15221: LD_INT 10
15223: PPUSH
15224: CALL_OW 241
15228: GO 15213
15230: POP
15231: POP
// end ;
15232: PPOPN 2
15234: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15235: LD_EXP 20
15239: PUSH
15240: LD_EXP 37
15244: AND
15245: IFFALSE 15356
15247: GO 15249
15249: DISABLE
15250: LD_INT 0
15252: PPUSH
15253: PPUSH
15254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15255: LD_ADDR_VAR 0 3
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_OWVAR 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: ST_TO_ADDR
// if not tmp then
15291: LD_VAR 0 3
15295: NOT
15296: IFFALSE 15300
// exit ;
15298: GO 15356
// un := tmp [ rand ( 1 , tmp ) ] ;
15300: LD_ADDR_VAR 0 2
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 1
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: CALL_OW 12
15322: ARRAY
15323: ST_TO_ADDR
// if Crawls ( un ) then
15324: LD_VAR 0 2
15328: PPUSH
15329: CALL_OW 318
15333: IFFALSE 15344
// ComWalk ( un ) ;
15335: LD_VAR 0 2
15339: PPUSH
15340: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15344: LD_VAR 0 2
15348: PPUSH
15349: LD_INT 5
15351: PPUSH
15352: CALL_OW 336
// end ;
15356: PPOPN 3
15358: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15359: LD_EXP 20
15363: PUSH
15364: LD_EXP 38
15368: AND
15369: PUSH
15370: LD_OWVAR 67
15374: PUSH
15375: LD_INT 4
15377: LESS
15378: AND
15379: IFFALSE 15398
15381: GO 15383
15383: DISABLE
// begin Difficulty := Difficulty + 1 ;
15384: LD_ADDR_OWVAR 67
15388: PUSH
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 1
15396: PLUS
15397: ST_TO_ADDR
// end ;
15398: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15399: LD_EXP 20
15403: PUSH
15404: LD_EXP 39
15408: AND
15409: IFFALSE 15512
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
// begin for i := 1 to 5 do
15417: LD_ADDR_VAR 0 1
15421: PUSH
15422: DOUBLE
15423: LD_INT 1
15425: DEC
15426: ST_TO_ADDR
15427: LD_INT 5
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15510
// begin uc_nation := nation_nature ;
15433: LD_ADDR_OWVAR 21
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// uc_side := 0 ;
15441: LD_ADDR_OWVAR 20
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15449: LD_ADDR_OWVAR 29
15453: PUSH
15454: LD_INT 12
15456: PUSH
15457: LD_INT 12
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: ST_TO_ADDR
// hc_agressivity := 20 ;
15464: LD_ADDR_OWVAR 35
15468: PUSH
15469: LD_INT 20
15471: ST_TO_ADDR
// hc_class := class_tiger ;
15472: LD_ADDR_OWVAR 28
15476: PUSH
15477: LD_INT 14
15479: ST_TO_ADDR
// hc_gallery :=  ;
15480: LD_ADDR_OWVAR 33
15484: PUSH
15485: LD_STRING 
15487: ST_TO_ADDR
// hc_name :=  ;
15488: LD_ADDR_OWVAR 26
15492: PUSH
15493: LD_STRING 
15495: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15496: CALL_OW 44
15500: PPUSH
15501: LD_INT 0
15503: PPUSH
15504: CALL_OW 51
// end ;
15508: GO 15430
15510: POP
15511: POP
// end ;
15512: PPOPN 1
15514: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15515: LD_EXP 20
15519: PUSH
15520: LD_EXP 40
15524: AND
15525: IFFALSE 15534
15527: GO 15529
15529: DISABLE
// StreamSibBomb ;
15530: CALL 15535 0 0
15534: END
// export function StreamSibBomb ; var i , x , y ; begin
15535: LD_INT 0
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
// result := false ;
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
// for i := 1 to 16 do
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: DOUBLE
15555: LD_INT 1
15557: DEC
15558: ST_TO_ADDR
15559: LD_INT 16
15561: PUSH
15562: FOR_TO
15563: IFFALSE 15762
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_INT 10
15572: PUSH
15573: LD_INT 20
15575: PUSH
15576: LD_INT 30
15578: PUSH
15579: LD_INT 40
15581: PUSH
15582: LD_INT 50
15584: PUSH
15585: LD_INT 60
15587: PUSH
15588: LD_INT 70
15590: PUSH
15591: LD_INT 80
15593: PUSH
15594: LD_INT 90
15596: PUSH
15597: LD_INT 100
15599: PUSH
15600: LD_INT 110
15602: PUSH
15603: LD_INT 120
15605: PUSH
15606: LD_INT 130
15608: PUSH
15609: LD_INT 140
15611: PUSH
15612: LD_INT 150
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_INT 15
15637: PPUSH
15638: CALL_OW 12
15642: ARRAY
15643: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15644: LD_ADDR_VAR 0 4
15648: PUSH
15649: LD_INT 10
15651: PUSH
15652: LD_INT 20
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: LD_INT 40
15660: PUSH
15661: LD_INT 50
15663: PUSH
15664: LD_INT 60
15666: PUSH
15667: LD_INT 70
15669: PUSH
15670: LD_INT 80
15672: PUSH
15673: LD_INT 90
15675: PUSH
15676: LD_INT 100
15678: PUSH
15679: LD_INT 110
15681: PUSH
15682: LD_INT 120
15684: PUSH
15685: LD_INT 130
15687: PUSH
15688: LD_INT 140
15690: PUSH
15691: LD_INT 150
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_INT 15
15716: PPUSH
15717: CALL_OW 12
15721: ARRAY
15722: ST_TO_ADDR
// if ValidHex ( x , y ) then
15723: LD_VAR 0 3
15727: PPUSH
15728: LD_VAR 0 4
15732: PPUSH
15733: CALL_OW 488
15737: IFFALSE 15760
// begin result := [ x , y ] ;
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_VAR 0 3
15748: PUSH
15749: LD_VAR 0 4
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: ST_TO_ADDR
// break ;
15758: GO 15762
// end ; end ;
15760: GO 15562
15762: POP
15763: POP
// if result then
15764: LD_VAR 0 1
15768: IFFALSE 15828
// begin ToLua ( playSibBomb() ) ;
15770: LD_STRING playSibBomb()
15772: PPUSH
15773: CALL_OW 559
// wait ( 0 0$14 ) ;
15777: LD_INT 490
15779: PPUSH
15780: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: PPUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: PPUSH
15802: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15806: LD_VAR 0 1
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: LD_VAR 0 1
15819: PUSH
15820: LD_INT 2
15822: ARRAY
15823: PPUSH
15824: CALL_OW 429
// end ; end ;
15828: LD_VAR 0 1
15832: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15833: LD_EXP 20
15837: PUSH
15838: LD_EXP 42
15842: AND
15843: IFFALSE 15855
15845: GO 15847
15847: DISABLE
// YouLost (  ) ;
15848: LD_STRING 
15850: PPUSH
15851: CALL_OW 104
15855: END
// every 0 0$1 trigger StreamModeActive and sFog do
15856: LD_EXP 20
15860: PUSH
15861: LD_EXP 41
15865: AND
15866: IFFALSE 15880
15868: GO 15870
15870: DISABLE
// FogOff ( your_side ) ;
15871: LD_OWVAR 2
15875: PPUSH
15876: CALL_OW 344
15880: END
// every 0 0$1 trigger StreamModeActive and sSun do
15881: LD_EXP 20
15885: PUSH
15886: LD_EXP 43
15890: AND
15891: IFFALSE 15919
15893: GO 15895
15895: DISABLE
// begin solar_recharge_percent := 0 ;
15896: LD_ADDR_OWVAR 79
15900: PUSH
15901: LD_INT 0
15903: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15904: LD_INT 10500
15906: PPUSH
15907: CALL_OW 67
// solar_recharge_percent := 100 ;
15911: LD_ADDR_OWVAR 79
15915: PUSH
15916: LD_INT 100
15918: ST_TO_ADDR
// end ;
15919: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15920: LD_EXP 20
15924: PUSH
15925: LD_EXP 44
15929: AND
15930: IFFALSE 16169
15932: GO 15934
15934: DISABLE
15935: LD_INT 0
15937: PPUSH
15938: PPUSH
15939: PPUSH
// begin tmp := [ ] ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: EMPTY
15946: ST_TO_ADDR
// for i := 1 to 6 do
15947: LD_ADDR_VAR 0 1
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_INT 6
15959: PUSH
15960: FOR_TO
15961: IFFALSE 16066
// begin uc_nation := nation_nature ;
15963: LD_ADDR_OWVAR 21
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// uc_side := 0 ;
15971: LD_ADDR_OWVAR 20
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15979: LD_ADDR_OWVAR 29
15983: PUSH
15984: LD_INT 12
15986: PUSH
15987: LD_INT 12
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: ST_TO_ADDR
// hc_agressivity := 20 ;
15994: LD_ADDR_OWVAR 35
15998: PUSH
15999: LD_INT 20
16001: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16002: LD_ADDR_OWVAR 28
16006: PUSH
16007: LD_INT 17
16009: ST_TO_ADDR
// hc_gallery :=  ;
16010: LD_ADDR_OWVAR 33
16014: PUSH
16015: LD_STRING 
16017: ST_TO_ADDR
// hc_name :=  ;
16018: LD_ADDR_OWVAR 26
16022: PUSH
16023: LD_STRING 
16025: ST_TO_ADDR
// un := CreateHuman ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: CALL_OW 44
16035: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16036: LD_VAR 0 2
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 51
// tmp := tmp ^ un ;
16048: LD_ADDR_VAR 0 3
16052: PUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_VAR 0 2
16062: ADD
16063: ST_TO_ADDR
// end ;
16064: GO 15960
16066: POP
16067: POP
// repeat wait ( 0 0$1 ) ;
16068: LD_INT 35
16070: PPUSH
16071: CALL_OW 67
// for un in tmp do
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_VAR 0 3
16084: PUSH
16085: FOR_IN
16086: IFFALSE 16160
// begin if IsDead ( un ) then
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 301
16097: IFFALSE 16117
// begin tmp := tmp diff un ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_VAR 0 3
16108: PUSH
16109: LD_VAR 0 2
16113: DIFF
16114: ST_TO_ADDR
// continue ;
16115: GO 16085
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_INT 3
16124: PUSH
16125: LD_INT 22
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: PPUSH
16144: LD_VAR 0 2
16148: PPUSH
16149: CALL_OW 74
16153: PPUSH
16154: CALL_OW 115
// end ;
16158: GO 16085
16160: POP
16161: POP
// until not tmp ;
16162: LD_VAR 0 3
16166: NOT
16167: IFFALSE 16068
// end ;
16169: PPOPN 3
16171: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16172: LD_EXP 20
16176: PUSH
16177: LD_EXP 45
16181: AND
16182: IFFALSE 16236
16184: GO 16186
16186: DISABLE
// begin ToLua ( displayTroll(); ) ;
16187: LD_STRING displayTroll();
16189: PPUSH
16190: CALL_OW 559
// wait ( 3 3$00 ) ;
16194: LD_INT 6300
16196: PPUSH
16197: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16201: LD_STRING hideTroll();
16203: PPUSH
16204: CALL_OW 559
// wait ( 1 1$00 ) ;
16208: LD_INT 2100
16210: PPUSH
16211: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16215: LD_STRING displayTroll();
16217: PPUSH
16218: CALL_OW 559
// wait ( 1 1$00 ) ;
16222: LD_INT 2100
16224: PPUSH
16225: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16229: LD_STRING hideTroll();
16231: PPUSH
16232: CALL_OW 559
// end ;
16236: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16237: LD_EXP 20
16241: PUSH
16242: LD_EXP 46
16246: AND
16247: IFFALSE 16310
16249: GO 16251
16251: DISABLE
16252: LD_INT 0
16254: PPUSH
// begin p := 0 ;
16255: LD_ADDR_VAR 0 1
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// repeat game_speed := 1 ;
16263: LD_ADDR_OWVAR 65
16267: PUSH
16268: LD_INT 1
16270: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16271: LD_INT 35
16273: PPUSH
16274: CALL_OW 67
// p := p + 1 ;
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_VAR 0 1
16287: PUSH
16288: LD_INT 1
16290: PLUS
16291: ST_TO_ADDR
// until p >= 60 ;
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 60
16299: GREATEREQUAL
16300: IFFALSE 16263
// game_speed := 4 ;
16302: LD_ADDR_OWVAR 65
16306: PUSH
16307: LD_INT 4
16309: ST_TO_ADDR
// end ;
16310: PPOPN 1
16312: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16313: LD_EXP 20
16317: PUSH
16318: LD_EXP 47
16322: AND
16323: IFFALSE 16469
16325: GO 16327
16327: DISABLE
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16332: LD_ADDR_VAR 0 1
16336: PUSH
16337: LD_INT 22
16339: PUSH
16340: LD_OWVAR 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: LD_INT 30
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 30
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 69
16385: ST_TO_ADDR
// if not depot then
16386: LD_VAR 0 1
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 16469
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_VAR 0 1
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: PPUSH
16419: CALL_OW 274
16423: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 0
16434: PPUSH
16435: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16439: LD_VAR 0 2
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: LD_INT 0
16449: PPUSH
16450: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 3
16461: PPUSH
16462: LD_INT 0
16464: PPUSH
16465: CALL_OW 277
// end ;
16469: PPOPN 2
16471: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16472: LD_EXP 20
16476: PUSH
16477: LD_EXP 48
16481: AND
16482: IFFALSE 16579
16484: GO 16486
16486: DISABLE
16487: LD_INT 0
16489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_INT 22
16497: PUSH
16498: LD_OWVAR 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 23
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// if not tmp then
16544: LD_VAR 0 1
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 16579
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16553: LD_VAR 0 1
16557: PUSH
16558: LD_INT 1
16560: PPUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 12
16570: ARRAY
16571: PPUSH
16572: LD_INT 200
16574: PPUSH
16575: CALL_OW 234
// end ;
16579: PPOPN 1
16581: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16582: LD_EXP 20
16586: PUSH
16587: LD_EXP 49
16591: AND
16592: IFFALSE 16671
16594: GO 16596
16596: DISABLE
16597: LD_INT 0
16599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_OWVAR 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 21
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PPUSH
16631: CALL_OW 69
16635: ST_TO_ADDR
// if not tmp then
16636: LD_VAR 0 1
16640: NOT
16641: IFFALSE 16645
// exit ;
16643: GO 16671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16645: LD_VAR 0 1
16649: PUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 12
16662: ARRAY
16663: PPUSH
16664: LD_INT 60
16666: PPUSH
16667: CALL_OW 234
// end ;
16671: PPOPN 1
16673: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16674: LD_EXP 20
16678: PUSH
16679: LD_EXP 50
16683: AND
16684: IFFALSE 16783
16686: GO 16688
16688: DISABLE
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
// begin enable ;
16693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_INT 22
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 61
16713: PUSH
16714: EMPTY
16715: LIST
16716: PUSH
16717: LD_INT 33
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
// if not tmp then
16737: LD_VAR 0 1
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 16783
// for i in tmp do
16746: LD_ADDR_VAR 0 2
16750: PUSH
16751: LD_VAR 0 1
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16781
// if IsControledBy ( i ) then
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 312
16768: IFFALSE 16779
// ComUnlink ( i ) ;
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 136
16779: GO 16756
16781: POP
16782: POP
// end ;
16783: PPOPN 2
16785: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16786: LD_EXP 20
16790: PUSH
16791: LD_EXP 51
16795: AND
16796: IFFALSE 16936
16798: GO 16800
16800: DISABLE
16801: LD_INT 0
16803: PPUSH
16804: PPUSH
// begin ToLua ( displayPowell(); ) ;
16805: LD_STRING displayPowell();
16807: PPUSH
16808: CALL_OW 559
// uc_side := 0 ;
16812: LD_ADDR_OWVAR 20
16816: PUSH
16817: LD_INT 0
16819: ST_TO_ADDR
// uc_nation := 2 ;
16820: LD_ADDR_OWVAR 21
16824: PUSH
16825: LD_INT 2
16827: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16828: LD_ADDR_OWVAR 37
16832: PUSH
16833: LD_INT 14
16835: ST_TO_ADDR
// vc_engine := engine_siberite ;
16836: LD_ADDR_OWVAR 39
16840: PUSH
16841: LD_INT 3
16843: ST_TO_ADDR
// vc_control := control_apeman ;
16844: LD_ADDR_OWVAR 38
16848: PUSH
16849: LD_INT 5
16851: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16852: LD_ADDR_OWVAR 40
16856: PUSH
16857: LD_INT 29
16859: ST_TO_ADDR
// un := CreateVehicle ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: CALL_OW 45
16869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16870: LD_VAR 0 2
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16882: LD_INT 35
16884: PPUSH
16885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16889: LD_VAR 0 2
16893: PPUSH
16894: LD_INT 22
16896: PUSH
16897: LD_OWVAR 2
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 69
16910: PPUSH
16911: LD_VAR 0 2
16915: PPUSH
16916: CALL_OW 74
16920: PPUSH
16921: CALL_OW 115
// until IsDead ( un ) ;
16925: LD_VAR 0 2
16929: PPUSH
16930: CALL_OW 301
16934: IFFALSE 16882
// end ;
16936: PPOPN 2
16938: END
// every 0 0$1 trigger StreamModeActive and sStu do
16939: LD_EXP 20
16943: PUSH
16944: LD_EXP 59
16948: AND
16949: IFFALSE 16965
16951: GO 16953
16953: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16954: LD_STRING displayStucuk();
16956: PPUSH
16957: CALL_OW 559
// ResetFog ;
16961: CALL_OW 335
// end ;
16965: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16966: LD_EXP 20
16970: PUSH
16971: LD_EXP 52
16975: AND
16976: IFFALSE 17117
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_OWVAR 2
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// if not tmp then
17021: LD_VAR 0 2
17025: NOT
17026: IFFALSE 17030
// exit ;
17028: GO 17117
// un := tmp [ rand ( 1 , tmp ) ] ;
17030: LD_ADDR_VAR 0 1
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_VAR 0 2
17047: PPUSH
17048: CALL_OW 12
17052: ARRAY
17053: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 0
17061: PPUSH
17062: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_OWVAR 3
17075: PUSH
17076: LD_VAR 0 1
17080: DIFF
17081: PPUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 74
17091: PPUSH
17092: CALL_OW 115
// wait ( 0 0$20 ) ;
17096: LD_INT 700
17098: PPUSH
17099: CALL_OW 67
// SetSide ( un , your_side ) ;
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_OWVAR 2
17112: PPUSH
17113: CALL_OW 235
// end ;
17117: PPOPN 2
17119: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17120: LD_EXP 20
17124: PUSH
17125: LD_EXP 53
17129: AND
17130: IFFALSE 17236
17132: GO 17134
17134: DISABLE
17135: LD_INT 0
17137: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_OWVAR 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 30
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: ST_TO_ADDR
// if not depot then
17192: LD_VAR 0 1
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17236
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17201: LD_VAR 0 1
17205: PUSH
17206: LD_INT 1
17208: ARRAY
17209: PPUSH
17210: CALL_OW 250
17214: PPUSH
17215: LD_VAR 0 1
17219: PUSH
17220: LD_INT 1
17222: ARRAY
17223: PPUSH
17224: CALL_OW 251
17228: PPUSH
17229: LD_INT 70
17231: PPUSH
17232: CALL_OW 495
// end ;
17236: PPOPN 1
17238: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17239: LD_EXP 20
17243: PUSH
17244: LD_EXP 54
17248: AND
17249: IFFALSE 17460
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17261: LD_ADDR_VAR 0 5
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 21
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 5
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17460
// for i in tmp do
17306: LD_ADDR_VAR 0 1
17310: PUSH
17311: LD_VAR 0 5
17315: PUSH
17316: FOR_IN
17317: IFFALSE 17458
// begin d := rand ( 0 , 5 ) ;
17319: LD_ADDR_VAR 0 4
17323: PUSH
17324: LD_INT 0
17326: PPUSH
17327: LD_INT 5
17329: PPUSH
17330: CALL_OW 12
17334: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 250
17349: PPUSH
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 3
17357: PPUSH
17358: LD_INT 12
17360: PPUSH
17361: CALL_OW 12
17365: PPUSH
17366: CALL_OW 272
17370: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 251
17385: PPUSH
17386: LD_VAR 0 4
17390: PPUSH
17391: LD_INT 3
17393: PPUSH
17394: LD_INT 12
17396: PPUSH
17397: CALL_OW 12
17401: PPUSH
17402: CALL_OW 273
17406: ST_TO_ADDR
// if ValidHex ( x , y ) then
17407: LD_VAR 0 2
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: CALL_OW 488
17421: IFFALSE 17456
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17423: LD_VAR 0 1
17427: PPUSH
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: LD_INT 3
17440: PPUSH
17441: LD_INT 6
17443: PPUSH
17444: CALL_OW 12
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 483
// end ;
17456: GO 17316
17458: POP
17459: POP
// end ;
17460: PPOPN 5
17462: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17463: LD_EXP 20
17467: PUSH
17468: LD_EXP 55
17472: AND
17473: IFFALSE 17567
17475: GO 17477
17477: DISABLE
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17482: LD_ADDR_VAR 0 2
17486: PUSH
17487: LD_INT 22
17489: PUSH
17490: LD_OWVAR 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 32
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 21
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 2
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17567
// for i in tmp do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_VAR 0 2
17547: PUSH
17548: FOR_IN
17549: IFFALSE 17565
// SetFuel ( i , 0 ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_INT 0
17558: PPUSH
17559: CALL_OW 240
17563: GO 17548
17565: POP
17566: POP
// end ;
17567: PPOPN 2
17569: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17570: LD_EXP 20
17574: PUSH
17575: LD_EXP 56
17579: AND
17580: IFFALSE 17646
17582: GO 17584
17584: DISABLE
17585: LD_INT 0
17587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17588: LD_ADDR_VAR 0 1
17592: PUSH
17593: LD_INT 22
17595: PUSH
17596: LD_OWVAR 2
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 29
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: ST_TO_ADDR
// if not tmp then
17624: LD_VAR 0 1
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 17646
// DestroyUnit ( tmp [ 1 ] ) ;
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 1
17640: ARRAY
17641: PPUSH
17642: CALL_OW 65
// end ;
17646: PPOPN 1
17648: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17649: LD_EXP 20
17653: PUSH
17654: LD_EXP 58
17658: AND
17659: IFFALSE 17788
17661: GO 17663
17663: DISABLE
17664: LD_INT 0
17666: PPUSH
// begin uc_side := 0 ;
17667: LD_ADDR_OWVAR 20
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// uc_nation := nation_arabian ;
17675: LD_ADDR_OWVAR 21
17679: PUSH
17680: LD_INT 2
17682: ST_TO_ADDR
// hc_gallery :=  ;
17683: LD_ADDR_OWVAR 33
17687: PUSH
17688: LD_STRING 
17690: ST_TO_ADDR
// hc_name :=  ;
17691: LD_ADDR_OWVAR 26
17695: PUSH
17696: LD_STRING 
17698: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17699: LD_INT 1
17701: PPUSH
17702: LD_INT 11
17704: PPUSH
17705: LD_INT 10
17707: PPUSH
17708: CALL_OW 380
// un := CreateHuman ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: CALL_OW 44
17721: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17722: LD_VAR 0 1
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17734: LD_INT 35
17736: PPUSH
17737: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 74
17772: PPUSH
17773: CALL_OW 115
// until IsDead ( un ) ;
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 301
17786: IFFALSE 17734
// end ;
17788: PPOPN 1
17790: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17791: LD_EXP 20
17795: PUSH
17796: LD_EXP 60
17800: AND
17801: IFFALSE 17813
17803: GO 17805
17805: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17806: LD_STRING earthquake(getX(game), 0, 32)
17808: PPUSH
17809: CALL_OW 559
17813: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17814: LD_EXP 20
17818: PUSH
17819: LD_EXP 61
17823: AND
17824: IFFALSE 17915
17826: GO 17828
17828: DISABLE
17829: LD_INT 0
17831: PPUSH
// begin enable ;
17832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17833: LD_ADDR_VAR 0 1
17837: PUSH
17838: LD_INT 22
17840: PUSH
17841: LD_OWVAR 2
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 21
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 33
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: CALL_OW 69
17879: ST_TO_ADDR
// if not tmp then
17880: LD_VAR 0 1
17884: NOT
17885: IFFALSE 17889
// exit ;
17887: GO 17915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17889: LD_VAR 0 1
17893: PUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 12
17906: ARRAY
17907: PPUSH
17908: LD_INT 1
17910: PPUSH
17911: CALL_OW 234
// end ;
17915: PPOPN 1
17917: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17918: LD_EXP 20
17922: PUSH
17923: LD_EXP 62
17927: AND
17928: IFFALSE 18069
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
17937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 3
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18069
// un := tmp [ rand ( 1 , tmp ) ] ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 1
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: CALL_OW 12
18005: ARRAY
18006: ST_TO_ADDR
// if Crawls ( un ) then
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 318
18016: IFFALSE 18027
// ComWalk ( un ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18027: LD_VAR 0 2
18031: PPUSH
18032: LD_INT 9
18034: PPUSH
18035: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18039: LD_INT 28
18041: PPUSH
18042: LD_OWVAR 2
18046: PPUSH
18047: LD_INT 2
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18054: LD_INT 29
18056: PPUSH
18057: LD_OWVAR 2
18061: PPUSH
18062: LD_INT 2
18064: PPUSH
18065: CALL_OW 322
// end ;
18069: PPOPN 3
18071: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18072: LD_EXP 20
18076: PUSH
18077: LD_EXP 63
18081: AND
18082: IFFALSE 18193
18084: GO 18086
18086: DISABLE
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18092: LD_ADDR_VAR 0 3
18096: PUSH
18097: LD_INT 22
18099: PUSH
18100: LD_OWVAR 2
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 25
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: ST_TO_ADDR
// if not tmp then
18128: LD_VAR 0 3
18132: NOT
18133: IFFALSE 18137
// exit ;
18135: GO 18193
// un := tmp [ rand ( 1 , tmp ) ] ;
18137: LD_ADDR_VAR 0 2
18141: PUSH
18142: LD_VAR 0 3
18146: PUSH
18147: LD_INT 1
18149: PPUSH
18150: LD_VAR 0 3
18154: PPUSH
18155: CALL_OW 12
18159: ARRAY
18160: ST_TO_ADDR
// if Crawls ( un ) then
18161: LD_VAR 0 2
18165: PPUSH
18166: CALL_OW 318
18170: IFFALSE 18181
// ComWalk ( un ) ;
18172: LD_VAR 0 2
18176: PPUSH
18177: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18181: LD_VAR 0 2
18185: PPUSH
18186: LD_INT 8
18188: PPUSH
18189: CALL_OW 336
// end ;
18193: PPOPN 3
18195: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18196: LD_EXP 20
18200: PUSH
18201: LD_EXP 64
18205: AND
18206: IFFALSE 18350
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
18214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_INT 22
18222: PUSH
18223: LD_OWVAR 2
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 21
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 34
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 34
18257: PUSH
18258: LD_INT 51
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 34
18267: PUSH
18268: LD_INT 32
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: PPUSH
18286: CALL_OW 69
18290: ST_TO_ADDR
// if not tmp then
18291: LD_VAR 0 2
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 18350
// for i in tmp do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_VAR 0 2
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18348
// if GetCargo ( i , mat_artifact ) = 0 then
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_INT 4
18320: PPUSH
18321: CALL_OW 289
18325: PUSH
18326: LD_INT 0
18328: EQUAL
18329: IFFALSE 18346
// SetCargo ( i , mat_siberit , 100 ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 100
18341: PPUSH
18342: CALL_OW 290
18346: GO 18310
18348: POP
18349: POP
// end ;
18350: PPOPN 2
18352: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18353: LD_EXP 20
18357: PUSH
18358: LD_EXP 65
18362: AND
18363: IFFALSE 18546
18365: GO 18367
18367: DISABLE
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18372: LD_ADDR_VAR 0 2
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_OWVAR 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PPUSH
18389: CALL_OW 69
18393: ST_TO_ADDR
// if not tmp then
18394: LD_VAR 0 2
18398: NOT
18399: IFFALSE 18403
// exit ;
18401: GO 18546
// for i := 1 to 2 do
18403: LD_ADDR_VAR 0 1
18407: PUSH
18408: DOUBLE
18409: LD_INT 1
18411: DEC
18412: ST_TO_ADDR
18413: LD_INT 2
18415: PUSH
18416: FOR_TO
18417: IFFALSE 18544
// begin uc_side := your_side ;
18419: LD_ADDR_OWVAR 20
18423: PUSH
18424: LD_OWVAR 2
18428: ST_TO_ADDR
// uc_nation := nation_american ;
18429: LD_ADDR_OWVAR 21
18433: PUSH
18434: LD_INT 1
18436: ST_TO_ADDR
// vc_chassis := us_morphling ;
18437: LD_ADDR_OWVAR 37
18441: PUSH
18442: LD_INT 5
18444: ST_TO_ADDR
// vc_engine := engine_siberite ;
18445: LD_ADDR_OWVAR 39
18449: PUSH
18450: LD_INT 3
18452: ST_TO_ADDR
// vc_control := control_computer ;
18453: LD_ADDR_OWVAR 38
18457: PUSH
18458: LD_INT 3
18460: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18461: LD_ADDR_OWVAR 40
18465: PUSH
18466: LD_INT 10
18468: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18469: LD_VAR 0 2
18473: PUSH
18474: LD_INT 1
18476: ARRAY
18477: PPUSH
18478: CALL_OW 310
18482: NOT
18483: IFFALSE 18530
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18485: CALL_OW 45
18489: PPUSH
18490: LD_VAR 0 2
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: CALL_OW 250
18503: PPUSH
18504: LD_VAR 0 2
18508: PUSH
18509: LD_INT 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 251
18517: PPUSH
18518: LD_INT 12
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 50
18528: GO 18542
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18530: CALL_OW 45
18534: PPUSH
18535: LD_INT 1
18537: PPUSH
18538: CALL_OW 51
// end ;
18542: GO 18416
18544: POP
18545: POP
// end ;
18546: PPOPN 2
18548: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18549: LD_EXP 20
18553: PUSH
18554: LD_EXP 66
18558: AND
18559: IFFALSE 18781
18561: GO 18563
18563: DISABLE
18564: LD_INT 0
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18572: LD_ADDR_VAR 0 6
18576: PUSH
18577: LD_INT 22
18579: PUSH
18580: LD_OWVAR 2
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 21
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: LD_INT 23
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: ST_TO_ADDR
// if not tmp then
18626: LD_VAR 0 6
18630: NOT
18631: IFFALSE 18635
// exit ;
18633: GO 18781
// s1 := rand ( 1 , 4 ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 4
18645: PPUSH
18646: CALL_OW 12
18650: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18651: LD_ADDR_VAR 0 4
18655: PUSH
18656: LD_VAR 0 6
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 259
18674: ST_TO_ADDR
// if s1 = 1 then
18675: LD_VAR 0 2
18679: PUSH
18680: LD_INT 1
18682: EQUAL
18683: IFFALSE 18703
// s2 := rand ( 2 , 4 ) else
18685: LD_ADDR_VAR 0 3
18689: PUSH
18690: LD_INT 2
18692: PPUSH
18693: LD_INT 4
18695: PPUSH
18696: CALL_OW 12
18700: ST_TO_ADDR
18701: GO 18711
// s2 := 1 ;
18703: LD_ADDR_VAR 0 3
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18711: LD_ADDR_VAR 0 5
18715: PUSH
18716: LD_VAR 0 6
18720: PUSH
18721: LD_INT 1
18723: ARRAY
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: CALL_OW 259
18734: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18735: LD_VAR 0 6
18739: PUSH
18740: LD_INT 1
18742: ARRAY
18743: PPUSH
18744: LD_VAR 0 2
18748: PPUSH
18749: LD_VAR 0 5
18753: PPUSH
18754: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18758: LD_VAR 0 6
18762: PUSH
18763: LD_INT 1
18765: ARRAY
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_VAR 0 4
18776: PPUSH
18777: CALL_OW 237
// end ;
18781: PPOPN 6
18783: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18784: LD_EXP 20
18788: PUSH
18789: LD_EXP 67
18793: AND
18794: IFFALSE 18873
18796: GO 18798
18798: DISABLE
18799: LD_INT 0
18801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18802: LD_ADDR_VAR 0 1
18806: PUSH
18807: LD_INT 22
18809: PUSH
18810: LD_OWVAR 2
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 30
18821: PUSH
18822: LD_INT 3
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PPUSH
18833: CALL_OW 69
18837: ST_TO_ADDR
// if not tmp then
18838: LD_VAR 0 1
18842: NOT
18843: IFFALSE 18847
// exit ;
18845: GO 18873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18847: LD_VAR 0 1
18851: PUSH
18852: LD_INT 1
18854: PPUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 12
18864: ARRAY
18865: PPUSH
18866: LD_INT 1
18868: PPUSH
18869: CALL_OW 234
// end ;
18873: PPOPN 1
18875: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18876: LD_EXP 20
18880: PUSH
18881: LD_EXP 68
18885: AND
18886: IFFALSE 18998
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
18894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18895: LD_ADDR_VAR 0 2
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_OWVAR 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 30
18917: PUSH
18918: LD_INT 27
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 30
18927: PUSH
18928: LD_INT 26
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 28
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: ST_TO_ADDR
// if not tmp then
18960: LD_VAR 0 2
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 18998
// for i in tmp do
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 2
18978: PUSH
18979: FOR_IN
18980: IFFALSE 18996
// SetLives ( i , 1 ) ;
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 234
18994: GO 18979
18996: POP
18997: POP
// end ;
18998: PPOPN 2
19000: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19001: LD_EXP 20
19005: PUSH
19006: LD_EXP 69
19010: AND
19011: IFFALSE 19298
19013: GO 19015
19015: DISABLE
19016: LD_INT 0
19018: PPUSH
19019: PPUSH
19020: PPUSH
// begin i := rand ( 1 , 7 ) ;
19021: LD_ADDR_VAR 0 1
19025: PUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 7
19031: PPUSH
19032: CALL_OW 12
19036: ST_TO_ADDR
// case i of 1 :
19037: LD_VAR 0 1
19041: PUSH
19042: LD_INT 1
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19060
19050: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19051: LD_STRING earthquake(getX(game), 0, 32)
19053: PPUSH
19054: CALL_OW 559
19058: GO 19298
19060: LD_INT 2
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19082
19068: POP
// begin ToLua ( displayStucuk(); ) ;
19069: LD_STRING displayStucuk();
19071: PPUSH
19072: CALL_OW 559
// ResetFog ;
19076: CALL_OW 335
// end ; 3 :
19080: GO 19298
19082: LD_INT 3
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19194
19090: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_INT 22
19098: PUSH
19099: LD_OWVAR 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 25
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 69
19126: ST_TO_ADDR
// if not tmp then
19127: LD_VAR 0 2
19131: NOT
19132: IFFALSE 19136
// exit ;
19134: GO 19298
// un := tmp [ rand ( 1 , tmp ) ] ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_VAR 0 2
19153: PPUSH
19154: CALL_OW 12
19158: ARRAY
19159: ST_TO_ADDR
// if Crawls ( un ) then
19160: LD_VAR 0 3
19164: PPUSH
19165: CALL_OW 318
19169: IFFALSE 19180
// ComWalk ( un ) ;
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19180: LD_VAR 0 3
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 336
// end ; 4 :
19192: GO 19298
19194: LD_INT 4
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19276
19202: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_OWVAR 2
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 30
19222: PUSH
19223: LD_INT 29
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: ST_TO_ADDR
// if not tmp then
19239: LD_VAR 0 2
19243: NOT
19244: IFFALSE 19248
// exit ;
19246: GO 19298
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19248: LD_VAR 0 2
19252: PUSH
19253: LD_INT 1
19255: ARRAY
19256: PPUSH
19257: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: CALL_OW 65
// end ; 5 .. 7 :
19274: GO 19298
19276: LD_INT 5
19278: DOUBLE
19279: GREATEREQUAL
19280: IFFALSE 19288
19282: LD_INT 7
19284: DOUBLE
19285: LESSEQUAL
19286: IFTRUE 19290
19288: GO 19297
19290: POP
// StreamSibBomb ; end ;
19291: CALL 15535 0 0
19295: GO 19298
19297: POP
// end ;
19298: PPOPN 3
19300: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19301: LD_EXP 20
19305: PUSH
19306: LD_EXP 70
19310: AND
19311: IFFALSE 19467
19313: GO 19315
19315: DISABLE
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_INT 81
19328: PUSH
19329: LD_OWVAR 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 21
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 2
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19467
// p := 0 ;
19384: LD_ADDR_VAR 0 3
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19392: LD_INT 35
19394: PPUSH
19395: CALL_OW 67
// p := p + 1 ;
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 1
19411: PLUS
19412: ST_TO_ADDR
// for i in tmp do
19413: LD_ADDR_VAR 0 1
19417: PUSH
19418: LD_VAR 0 2
19422: PUSH
19423: FOR_IN
19424: IFFALSE 19455
// if GetLives ( i ) < 1000 then
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 256
19435: PUSH
19436: LD_INT 1000
19438: LESS
19439: IFFALSE 19453
// SetLives ( i , 1000 ) ;
19441: LD_VAR 0 1
19445: PPUSH
19446: LD_INT 1000
19448: PPUSH
19449: CALL_OW 234
19453: GO 19423
19455: POP
19456: POP
// until p > 20 ;
19457: LD_VAR 0 3
19461: PUSH
19462: LD_INT 20
19464: GREATER
19465: IFFALSE 19392
// end ;
19467: PPOPN 3
19469: END
// every 0 0$1 trigger StreamModeActive and sTime do
19470: LD_EXP 20
19474: PUSH
19475: LD_EXP 71
19479: AND
19480: IFFALSE 19515
19482: GO 19484
19484: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19485: LD_INT 28
19487: PPUSH
19488: LD_OWVAR 2
19492: PPUSH
19493: LD_INT 2
19495: PPUSH
19496: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19500: LD_INT 30
19502: PPUSH
19503: LD_OWVAR 2
19507: PPUSH
19508: LD_INT 2
19510: PPUSH
19511: CALL_OW 322
// end ;
19515: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19516: LD_EXP 20
19520: PUSH
19521: LD_EXP 72
19525: AND
19526: IFFALSE 19647
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 21
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: LD_INT 23
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: ST_TO_ADDR
// if not tmp then
19589: LD_VAR 0 2
19593: NOT
19594: IFFALSE 19598
// exit ;
19596: GO 19647
// for i in tmp do
19598: LD_ADDR_VAR 0 1
19602: PUSH
19603: LD_VAR 0 2
19607: PUSH
19608: FOR_IN
19609: IFFALSE 19645
// begin if Crawls ( i ) then
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 318
19620: IFFALSE 19631
// ComWalk ( i ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 138
// SetClass ( i , 2 ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_INT 2
19638: PPUSH
19639: CALL_OW 336
// end ;
19643: GO 19608
19645: POP
19646: POP
// end ;
19647: PPOPN 2
19649: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19650: LD_EXP 20
19654: PUSH
19655: LD_EXP 73
19659: AND
19660: IFFALSE 19948
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
19669: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19670: LD_OWVAR 2
19674: PPUSH
19675: LD_INT 9
19677: PPUSH
19678: LD_INT 1
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19688: LD_INT 9
19690: PPUSH
19691: LD_OWVAR 2
19695: PPUSH
19696: CALL_OW 343
// uc_side := 9 ;
19700: LD_ADDR_OWVAR 20
19704: PUSH
19705: LD_INT 9
19707: ST_TO_ADDR
// uc_nation := 2 ;
19708: LD_ADDR_OWVAR 21
19712: PUSH
19713: LD_INT 2
19715: ST_TO_ADDR
// hc_name := Dark Warrior ;
19716: LD_ADDR_OWVAR 26
19720: PUSH
19721: LD_STRING Dark Warrior
19723: ST_TO_ADDR
// hc_gallery :=  ;
19724: LD_ADDR_OWVAR 33
19728: PUSH
19729: LD_STRING 
19731: ST_TO_ADDR
// hc_noskilllimit := true ;
19732: LD_ADDR_OWVAR 76
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19740: LD_ADDR_OWVAR 31
19744: PUSH
19745: LD_INT 30
19747: PUSH
19748: LD_INT 30
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: LD_INT 30
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
// un := CreateHuman ;
19763: LD_ADDR_VAR 0 3
19767: PUSH
19768: CALL_OW 44
19772: ST_TO_ADDR
// hc_noskilllimit := false ;
19773: LD_ADDR_OWVAR 76
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19781: LD_VAR 0 3
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 51
// ToLua ( playRanger() ) ;
19793: LD_STRING playRanger()
19795: PPUSH
19796: CALL_OW 559
// p := 0 ;
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_INT 0
19807: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19808: LD_INT 35
19810: PPUSH
19811: CALL_OW 67
// p := p + 1 ;
19815: LD_ADDR_VAR 0 2
19819: PUSH
19820: LD_VAR 0 2
19824: PUSH
19825: LD_INT 1
19827: PLUS
19828: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19829: LD_VAR 0 3
19833: PPUSH
19834: CALL_OW 256
19838: PUSH
19839: LD_INT 1000
19841: LESS
19842: IFFALSE 19856
// SetLives ( un , 1000 ) ;
19844: LD_VAR 0 3
19848: PPUSH
19849: LD_INT 1000
19851: PPUSH
19852: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19856: LD_VAR 0 3
19860: PPUSH
19861: LD_INT 81
19863: PUSH
19864: LD_OWVAR 2
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 91
19875: PUSH
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 30
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PPUSH
19893: CALL_OW 69
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL_OW 74
19907: PPUSH
19908: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19912: LD_VAR 0 2
19916: PUSH
19917: LD_INT 80
19919: GREATER
19920: PUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 301
19930: OR
19931: IFFALSE 19808
// if un then
19933: LD_VAR 0 3
19937: IFFALSE 19948
// RemoveUnit ( un ) ;
19939: LD_VAR 0 3
19943: PPUSH
19944: CALL_OW 64
// end ;
19948: PPOPN 3
19950: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19951: LD_EXP 74
19955: IFFALSE 20071
19957: GO 19959
19959: DISABLE
19960: LD_INT 0
19962: PPUSH
19963: PPUSH
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19965: LD_ADDR_VAR 0 2
19969: PUSH
19970: LD_INT 81
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 21
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20001: LD_STRING playComputer()
20003: PPUSH
20004: CALL_OW 559
// if not tmp then
20008: LD_VAR 0 2
20012: NOT
20013: IFFALSE 20017
// exit ;
20015: GO 20071
// for i in tmp do
20017: LD_ADDR_VAR 0 1
20021: PUSH
20022: LD_VAR 0 2
20026: PUSH
20027: FOR_IN
20028: IFFALSE 20069
// for j := 1 to 4 do
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: DOUBLE
20036: LD_INT 1
20038: DEC
20039: ST_TO_ADDR
20040: LD_INT 4
20042: PUSH
20043: FOR_TO
20044: IFFALSE 20065
// SetSkill ( i , j , 10 ) ;
20046: LD_VAR 0 1
20050: PPUSH
20051: LD_VAR 0 3
20055: PPUSH
20056: LD_INT 10
20058: PPUSH
20059: CALL_OW 237
20063: GO 20043
20065: POP
20066: POP
20067: GO 20027
20069: POP
20070: POP
// end ;
20071: PPOPN 3
20073: END
// every 0 0$1 trigger s30 do var i , tmp ;
20074: LD_EXP 75
20078: IFFALSE 20147
20080: GO 20082
20082: DISABLE
20083: LD_INT 0
20085: PPUSH
20086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_INT 22
20094: PUSH
20095: LD_OWVAR 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PPUSH
20104: CALL_OW 69
20108: ST_TO_ADDR
// if not tmp then
20109: LD_VAR 0 2
20113: NOT
20114: IFFALSE 20118
// exit ;
20116: GO 20147
// for i in tmp do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: LD_VAR 0 2
20127: PUSH
20128: FOR_IN
20129: IFFALSE 20145
// SetLives ( i , 300 ) ;
20131: LD_VAR 0 1
20135: PPUSH
20136: LD_INT 300
20138: PPUSH
20139: CALL_OW 234
20143: GO 20128
20145: POP
20146: POP
// end ;
20147: PPOPN 2
20149: END
// every 0 0$1 trigger s60 do var i , tmp ;
20150: LD_EXP 76
20154: IFFALSE 20223
20156: GO 20158
20158: DISABLE
20159: LD_INT 0
20161: PPUSH
20162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: ST_TO_ADDR
// if not tmp then
20185: LD_VAR 0 2
20189: NOT
20190: IFFALSE 20194
// exit ;
20192: GO 20223
// for i in tmp do
20194: LD_ADDR_VAR 0 1
20198: PUSH
20199: LD_VAR 0 2
20203: PUSH
20204: FOR_IN
20205: IFFALSE 20221
// SetLives ( i , 600 ) ;
20207: LD_VAR 0 1
20211: PPUSH
20212: LD_INT 600
20214: PPUSH
20215: CALL_OW 234
20219: GO 20204
20221: POP
20222: POP
// end ;
20223: PPOPN 2
20225: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20226: LD_INT 0
20228: PPUSH
// case cmd of 301 :
20229: LD_VAR 0 1
20233: PUSH
20234: LD_INT 301
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20274
20242: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20243: LD_VAR 0 6
20247: PPUSH
20248: LD_VAR 0 7
20252: PPUSH
20253: LD_VAR 0 8
20257: PPUSH
20258: LD_VAR 0 4
20262: PPUSH
20263: LD_VAR 0 5
20267: PPUSH
20268: CALL 21483 0 5
20272: GO 20395
20274: LD_INT 302
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20319
20282: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20283: LD_VAR 0 6
20287: PPUSH
20288: LD_VAR 0 7
20292: PPUSH
20293: LD_VAR 0 8
20297: PPUSH
20298: LD_VAR 0 9
20302: PPUSH
20303: LD_VAR 0 4
20307: PPUSH
20308: LD_VAR 0 5
20312: PPUSH
20313: CALL 21574 0 6
20317: GO 20395
20319: LD_INT 303
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20364
20327: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20328: LD_VAR 0 6
20332: PPUSH
20333: LD_VAR 0 7
20337: PPUSH
20338: LD_VAR 0 8
20342: PPUSH
20343: LD_VAR 0 9
20347: PPUSH
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_VAR 0 5
20357: PPUSH
20358: CALL 20400 0 6
20362: GO 20395
20364: LD_INT 304
20366: DOUBLE
20367: EQUAL
20368: IFTRUE 20372
20370: GO 20394
20372: POP
// hHackTeleport ( unit , x , y ) ; end ;
20373: LD_VAR 0 2
20377: PPUSH
20378: LD_VAR 0 4
20382: PPUSH
20383: LD_VAR 0 5
20387: PPUSH
20388: CALL 22167 0 3
20392: GO 20395
20394: POP
// end ;
20395: LD_VAR 0 12
20399: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20400: LD_INT 0
20402: PPUSH
20403: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20404: LD_VAR 0 1
20408: PUSH
20409: LD_INT 1
20411: LESS
20412: PUSH
20413: LD_VAR 0 1
20417: PUSH
20418: LD_INT 3
20420: GREATER
20421: OR
20422: PUSH
20423: LD_VAR 0 5
20427: PPUSH
20428: LD_VAR 0 6
20432: PPUSH
20433: CALL_OW 428
20437: OR
20438: IFFALSE 20442
// exit ;
20440: GO 21170
// uc_side := your_side ;
20442: LD_ADDR_OWVAR 20
20446: PUSH
20447: LD_OWVAR 2
20451: ST_TO_ADDR
// uc_nation := nation ;
20452: LD_ADDR_OWVAR 21
20456: PUSH
20457: LD_VAR 0 1
20461: ST_TO_ADDR
// bc_level = 1 ;
20462: LD_ADDR_OWVAR 43
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// case btype of 1 :
20470: LD_VAR 0 2
20474: PUSH
20475: LD_INT 1
20477: DOUBLE
20478: EQUAL
20479: IFTRUE 20483
20481: GO 20494
20483: POP
// bc_type := b_depot ; 2 :
20484: LD_ADDR_OWVAR 42
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
20492: GO 21114
20494: LD_INT 2
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20513
20502: POP
// bc_type := b_warehouse ; 3 :
20503: LD_ADDR_OWVAR 42
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
20511: GO 21114
20513: LD_INT 3
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20532
20521: POP
// bc_type := b_lab ; 4 .. 9 :
20522: LD_ADDR_OWVAR 42
20526: PUSH
20527: LD_INT 6
20529: ST_TO_ADDR
20530: GO 21114
20532: LD_INT 4
20534: DOUBLE
20535: GREATEREQUAL
20536: IFFALSE 20544
20538: LD_INT 9
20540: DOUBLE
20541: LESSEQUAL
20542: IFTRUE 20546
20544: GO 20606
20546: POP
// begin bc_type := b_lab_half ;
20547: LD_ADDR_OWVAR 42
20551: PUSH
20552: LD_INT 7
20554: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20555: LD_ADDR_OWVAR 44
20559: PUSH
20560: LD_INT 10
20562: PUSH
20563: LD_INT 11
20565: PUSH
20566: LD_INT 12
20568: PUSH
20569: LD_INT 15
20571: PUSH
20572: LD_INT 14
20574: PUSH
20575: LD_INT 13
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: LD_INT 3
20593: MINUS
20594: ARRAY
20595: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20596: LD_ADDR_OWVAR 45
20600: PUSH
20601: LD_INT 9
20603: ST_TO_ADDR
// end ; 10 .. 13 :
20604: GO 21114
20606: LD_INT 10
20608: DOUBLE
20609: GREATEREQUAL
20610: IFFALSE 20618
20612: LD_INT 13
20614: DOUBLE
20615: LESSEQUAL
20616: IFTRUE 20620
20618: GO 20697
20620: POP
// begin bc_type := b_lab_full ;
20621: LD_ADDR_OWVAR 42
20625: PUSH
20626: LD_INT 8
20628: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20629: LD_ADDR_OWVAR 44
20633: PUSH
20634: LD_INT 10
20636: PUSH
20637: LD_INT 12
20639: PUSH
20640: LD_INT 14
20642: PUSH
20643: LD_INT 13
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: PUSH
20652: LD_VAR 0 2
20656: PUSH
20657: LD_INT 9
20659: MINUS
20660: ARRAY
20661: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20662: LD_ADDR_OWVAR 45
20666: PUSH
20667: LD_INT 11
20669: PUSH
20670: LD_INT 15
20672: PUSH
20673: LD_INT 12
20675: PUSH
20676: LD_INT 15
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: LD_VAR 0 2
20689: PUSH
20690: LD_INT 9
20692: MINUS
20693: ARRAY
20694: ST_TO_ADDR
// end ; 14 :
20695: GO 21114
20697: LD_INT 14
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20716
20705: POP
// bc_type := b_workshop ; 15 :
20706: LD_ADDR_OWVAR 42
20710: PUSH
20711: LD_INT 2
20713: ST_TO_ADDR
20714: GO 21114
20716: LD_INT 15
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20735
20724: POP
// bc_type := b_factory ; 16 :
20725: LD_ADDR_OWVAR 42
20729: PUSH
20730: LD_INT 3
20732: ST_TO_ADDR
20733: GO 21114
20735: LD_INT 16
20737: DOUBLE
20738: EQUAL
20739: IFTRUE 20743
20741: GO 20754
20743: POP
// bc_type := b_ext_gun ; 17 :
20744: LD_ADDR_OWVAR 42
20748: PUSH
20749: LD_INT 17
20751: ST_TO_ADDR
20752: GO 21114
20754: LD_INT 17
20756: DOUBLE
20757: EQUAL
20758: IFTRUE 20762
20760: GO 20790
20762: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20763: LD_ADDR_OWVAR 42
20767: PUSH
20768: LD_INT 19
20770: PUSH
20771: LD_INT 23
20773: PUSH
20774: LD_INT 19
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: PUSH
20782: LD_VAR 0 1
20786: ARRAY
20787: ST_TO_ADDR
20788: GO 21114
20790: LD_INT 18
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 20809
20798: POP
// bc_type := b_ext_radar ; 19 :
20799: LD_ADDR_OWVAR 42
20803: PUSH
20804: LD_INT 20
20806: ST_TO_ADDR
20807: GO 21114
20809: LD_INT 19
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20828
20817: POP
// bc_type := b_ext_radio ; 20 :
20818: LD_ADDR_OWVAR 42
20822: PUSH
20823: LD_INT 22
20825: ST_TO_ADDR
20826: GO 21114
20828: LD_INT 20
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20847
20836: POP
// bc_type := b_ext_siberium ; 21 :
20837: LD_ADDR_OWVAR 42
20841: PUSH
20842: LD_INT 21
20844: ST_TO_ADDR
20845: GO 21114
20847: LD_INT 21
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20866
20855: POP
// bc_type := b_ext_computer ; 22 :
20856: LD_ADDR_OWVAR 42
20860: PUSH
20861: LD_INT 24
20863: ST_TO_ADDR
20864: GO 21114
20866: LD_INT 22
20868: DOUBLE
20869: EQUAL
20870: IFTRUE 20874
20872: GO 20885
20874: POP
// bc_type := b_ext_track ; 23 :
20875: LD_ADDR_OWVAR 42
20879: PUSH
20880: LD_INT 16
20882: ST_TO_ADDR
20883: GO 21114
20885: LD_INT 23
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20904
20893: POP
// bc_type := b_ext_laser ; 24 :
20894: LD_ADDR_OWVAR 42
20898: PUSH
20899: LD_INT 25
20901: ST_TO_ADDR
20902: GO 21114
20904: LD_INT 24
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20923
20912: POP
// bc_type := b_control_tower ; 25 :
20913: LD_ADDR_OWVAR 42
20917: PUSH
20918: LD_INT 36
20920: ST_TO_ADDR
20921: GO 21114
20923: LD_INT 25
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 20942
20931: POP
// bc_type := b_breastwork ; 26 :
20932: LD_ADDR_OWVAR 42
20936: PUSH
20937: LD_INT 31
20939: ST_TO_ADDR
20940: GO 21114
20942: LD_INT 26
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20961
20950: POP
// bc_type := b_bunker ; 27 :
20951: LD_ADDR_OWVAR 42
20955: PUSH
20956: LD_INT 32
20958: ST_TO_ADDR
20959: GO 21114
20961: LD_INT 27
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20980
20969: POP
// bc_type := b_turret ; 28 :
20970: LD_ADDR_OWVAR 42
20974: PUSH
20975: LD_INT 33
20977: ST_TO_ADDR
20978: GO 21114
20980: LD_INT 28
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 20999
20988: POP
// bc_type := b_armoury ; 29 :
20989: LD_ADDR_OWVAR 42
20993: PUSH
20994: LD_INT 4
20996: ST_TO_ADDR
20997: GO 21114
20999: LD_INT 29
21001: DOUBLE
21002: EQUAL
21003: IFTRUE 21007
21005: GO 21018
21007: POP
// bc_type := b_barracks ; 30 :
21008: LD_ADDR_OWVAR 42
21012: PUSH
21013: LD_INT 5
21015: ST_TO_ADDR
21016: GO 21114
21018: LD_INT 30
21020: DOUBLE
21021: EQUAL
21022: IFTRUE 21026
21024: GO 21037
21026: POP
// bc_type := b_solar_power ; 31 :
21027: LD_ADDR_OWVAR 42
21031: PUSH
21032: LD_INT 27
21034: ST_TO_ADDR
21035: GO 21114
21037: LD_INT 31
21039: DOUBLE
21040: EQUAL
21041: IFTRUE 21045
21043: GO 21056
21045: POP
// bc_type := b_oil_power ; 32 :
21046: LD_ADDR_OWVAR 42
21050: PUSH
21051: LD_INT 26
21053: ST_TO_ADDR
21054: GO 21114
21056: LD_INT 32
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21075
21064: POP
// bc_type := b_siberite_power ; 33 :
21065: LD_ADDR_OWVAR 42
21069: PUSH
21070: LD_INT 28
21072: ST_TO_ADDR
21073: GO 21114
21075: LD_INT 33
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21094
21083: POP
// bc_type := b_oil_mine ; 34 :
21084: LD_ADDR_OWVAR 42
21088: PUSH
21089: LD_INT 29
21091: ST_TO_ADDR
21092: GO 21114
21094: LD_INT 34
21096: DOUBLE
21097: EQUAL
21098: IFTRUE 21102
21100: GO 21113
21102: POP
// bc_type := b_siberite_mine ; end ;
21103: LD_ADDR_OWVAR 42
21107: PUSH
21108: LD_INT 30
21110: ST_TO_ADDR
21111: GO 21114
21113: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21114: LD_ADDR_VAR 0 8
21118: PUSH
21119: LD_VAR 0 5
21123: PPUSH
21124: LD_VAR 0 6
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: CALL_OW 47
21138: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21139: LD_OWVAR 42
21143: PUSH
21144: LD_INT 32
21146: PUSH
21147: LD_INT 33
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: IN
21154: IFFALSE 21170
// PlaceWeaponTurret ( b , weapon ) ;
21156: LD_VAR 0 8
21160: PPUSH
21161: LD_VAR 0 4
21165: PPUSH
21166: CALL_OW 431
// end ;
21170: LD_VAR 0 7
21174: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21175: LD_INT 0
21177: PPUSH
21178: PPUSH
21179: PPUSH
21180: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21181: LD_ADDR_VAR 0 4
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 30
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 30
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: ST_TO_ADDR
// if not tmp then
21235: LD_VAR 0 4
21239: NOT
21240: IFFALSE 21244
// exit ;
21242: GO 21303
// for i in tmp do
21244: LD_ADDR_VAR 0 2
21248: PUSH
21249: LD_VAR 0 4
21253: PUSH
21254: FOR_IN
21255: IFFALSE 21301
// for j = 1 to 3 do
21257: LD_ADDR_VAR 0 3
21261: PUSH
21262: DOUBLE
21263: LD_INT 1
21265: DEC
21266: ST_TO_ADDR
21267: LD_INT 3
21269: PUSH
21270: FOR_TO
21271: IFFALSE 21297
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21273: LD_VAR 0 2
21277: PPUSH
21278: CALL_OW 274
21282: PPUSH
21283: LD_VAR 0 3
21287: PPUSH
21288: LD_INT 99999
21290: PPUSH
21291: CALL_OW 277
21295: GO 21270
21297: POP
21298: POP
21299: GO 21254
21301: POP
21302: POP
// end ;
21303: LD_VAR 0 1
21307: RET
// export function hHackSetLevel10 ; var i , j ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21313: LD_ADDR_VAR 0 2
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: PUSH
21333: FOR_IN
21334: IFFALSE 21386
// if IsSelected ( i ) then
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 306
21345: IFFALSE 21384
// begin for j := 1 to 4 do
21347: LD_ADDR_VAR 0 3
21351: PUSH
21352: DOUBLE
21353: LD_INT 1
21355: DEC
21356: ST_TO_ADDR
21357: LD_INT 4
21359: PUSH
21360: FOR_TO
21361: IFFALSE 21382
// SetSkill ( i , j , 10 ) ;
21363: LD_VAR 0 2
21367: PPUSH
21368: LD_VAR 0 3
21372: PPUSH
21373: LD_INT 10
21375: PPUSH
21376: CALL_OW 237
21380: GO 21360
21382: POP
21383: POP
// end ;
21384: GO 21333
21386: POP
21387: POP
// end ;
21388: LD_VAR 0 1
21392: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
21397: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_INT 22
21405: PUSH
21406: LD_OWVAR 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 21
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PPUSH
21429: CALL_OW 69
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21476
// begin for j := 1 to 4 do
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: DOUBLE
21443: LD_INT 1
21445: DEC
21446: ST_TO_ADDR
21447: LD_INT 4
21449: PUSH
21450: FOR_TO
21451: IFFALSE 21472
// SetSkill ( i , j , 10 ) ;
21453: LD_VAR 0 2
21457: PPUSH
21458: LD_VAR 0 3
21462: PPUSH
21463: LD_INT 10
21465: PPUSH
21466: CALL_OW 237
21470: GO 21450
21472: POP
21473: POP
// end ;
21474: GO 21434
21476: POP
21477: POP
// end ;
21478: LD_VAR 0 1
21482: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21483: LD_INT 0
21485: PPUSH
// uc_side := your_side ;
21486: LD_ADDR_OWVAR 20
21490: PUSH
21491: LD_OWVAR 2
21495: ST_TO_ADDR
// uc_nation := nation ;
21496: LD_ADDR_OWVAR 21
21500: PUSH
21501: LD_VAR 0 1
21505: ST_TO_ADDR
// InitHc ;
21506: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21510: LD_INT 0
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_VAR 0 3
21522: PPUSH
21523: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21527: LD_VAR 0 4
21531: PPUSH
21532: LD_VAR 0 5
21536: PPUSH
21537: CALL_OW 428
21541: PUSH
21542: LD_INT 0
21544: EQUAL
21545: IFFALSE 21569
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21547: CALL_OW 44
21551: PPUSH
21552: LD_VAR 0 4
21556: PPUSH
21557: LD_VAR 0 5
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 48
// end ;
21569: LD_VAR 0 6
21573: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21574: LD_INT 0
21576: PPUSH
21577: PPUSH
// uc_side := your_side ;
21578: LD_ADDR_OWVAR 20
21582: PUSH
21583: LD_OWVAR 2
21587: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 3
21601: PUSH
21602: LD_INT 4
21604: PUSH
21605: LD_INT 5
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: IN
21615: IFFALSE 21627
// uc_nation := nation_american else
21617: LD_ADDR_OWVAR 21
21621: PUSH
21622: LD_INT 1
21624: ST_TO_ADDR
21625: GO 21670
// if chassis in [ 11 , 12 , 13 , 14 ] then
21627: LD_VAR 0 1
21631: PUSH
21632: LD_INT 11
21634: PUSH
21635: LD_INT 12
21637: PUSH
21638: LD_INT 13
21640: PUSH
21641: LD_INT 14
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: IN
21650: IFFALSE 21662
// uc_nation := nation_arabian else
21652: LD_ADDR_OWVAR 21
21656: PUSH
21657: LD_INT 2
21659: ST_TO_ADDR
21660: GO 21670
// uc_nation := nation_russian ;
21662: LD_ADDR_OWVAR 21
21666: PUSH
21667: LD_INT 3
21669: ST_TO_ADDR
// vc_chassis := chassis ;
21670: LD_ADDR_OWVAR 37
21674: PUSH
21675: LD_VAR 0 1
21679: ST_TO_ADDR
// vc_engine := engine ;
21680: LD_ADDR_OWVAR 39
21684: PUSH
21685: LD_VAR 0 2
21689: ST_TO_ADDR
// vc_control := control ;
21690: LD_ADDR_OWVAR 38
21694: PUSH
21695: LD_VAR 0 3
21699: ST_TO_ADDR
// vc_weapon := weapon ;
21700: LD_ADDR_OWVAR 40
21704: PUSH
21705: LD_VAR 0 4
21709: ST_TO_ADDR
// un := CreateVehicle ;
21710: LD_ADDR_VAR 0 8
21714: PUSH
21715: CALL_OW 45
21719: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21720: LD_VAR 0 8
21724: PPUSH
21725: LD_INT 0
21727: PPUSH
21728: LD_INT 5
21730: PPUSH
21731: CALL_OW 12
21735: PPUSH
21736: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21740: LD_VAR 0 8
21744: PPUSH
21745: LD_VAR 0 5
21749: PPUSH
21750: LD_VAR 0 6
21754: PPUSH
21755: LD_INT 1
21757: PPUSH
21758: CALL_OW 48
// end ;
21762: LD_VAR 0 7
21766: RET
// export hInvincible ; every 1 do
21767: GO 21769
21769: DISABLE
// hInvincible := [ ] ;
21770: LD_ADDR_EXP 77
21774: PUSH
21775: EMPTY
21776: ST_TO_ADDR
21777: END
// every 10 do var i ;
21778: GO 21780
21780: DISABLE
21781: LD_INT 0
21783: PPUSH
// begin enable ;
21784: ENABLE
// if not hInvincible then
21785: LD_EXP 77
21789: NOT
21790: IFFALSE 21794
// exit ;
21792: GO 21838
// for i in hInvincible do
21794: LD_ADDR_VAR 0 1
21798: PUSH
21799: LD_EXP 77
21803: PUSH
21804: FOR_IN
21805: IFFALSE 21836
// if GetLives ( i ) < 1000 then
21807: LD_VAR 0 1
21811: PPUSH
21812: CALL_OW 256
21816: PUSH
21817: LD_INT 1000
21819: LESS
21820: IFFALSE 21834
// SetLives ( i , 1000 ) ;
21822: LD_VAR 0 1
21826: PPUSH
21827: LD_INT 1000
21829: PPUSH
21830: CALL_OW 234
21834: GO 21804
21836: POP
21837: POP
// end ;
21838: PPOPN 1
21840: END
// export function hHackInvincible ; var i ; begin
21841: LD_INT 0
21843: PPUSH
21844: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21845: LD_ADDR_VAR 0 2
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 21
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 21
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: PPUSH
21878: CALL_OW 69
21882: PUSH
21883: FOR_IN
21884: IFFALSE 21945
// if IsSelected ( i ) then
21886: LD_VAR 0 2
21890: PPUSH
21891: CALL_OW 306
21895: IFFALSE 21943
// begin if i in hInvincible then
21897: LD_VAR 0 2
21901: PUSH
21902: LD_EXP 77
21906: IN
21907: IFFALSE 21927
// hInvincible := hInvincible diff i else
21909: LD_ADDR_EXP 77
21913: PUSH
21914: LD_EXP 77
21918: PUSH
21919: LD_VAR 0 2
21923: DIFF
21924: ST_TO_ADDR
21925: GO 21943
// hInvincible := hInvincible union i ;
21927: LD_ADDR_EXP 77
21931: PUSH
21932: LD_EXP 77
21936: PUSH
21937: LD_VAR 0 2
21941: UNION
21942: ST_TO_ADDR
// end ;
21943: GO 21883
21945: POP
21946: POP
// end ;
21947: LD_VAR 0 1
21951: RET
// export function hHackInvisible ; var i , j ; begin
21952: LD_INT 0
21954: PPUSH
21955: PPUSH
21956: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21957: LD_ADDR_VAR 0 2
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: PUSH
21977: FOR_IN
21978: IFFALSE 22002
// if IsSelected ( i ) then
21980: LD_VAR 0 2
21984: PPUSH
21985: CALL_OW 306
21989: IFFALSE 22000
// ComForceInvisible ( i ) ;
21991: LD_VAR 0 2
21995: PPUSH
21996: CALL_OW 496
22000: GO 21977
22002: POP
22003: POP
// end ;
22004: LD_VAR 0 1
22008: RET
// export function hHackChangeYourSide ; begin
22009: LD_INT 0
22011: PPUSH
// if your_side = 8 then
22012: LD_OWVAR 2
22016: PUSH
22017: LD_INT 8
22019: EQUAL
22020: IFFALSE 22032
// your_side := 0 else
22022: LD_ADDR_OWVAR 2
22026: PUSH
22027: LD_INT 0
22029: ST_TO_ADDR
22030: GO 22046
// your_side := your_side + 1 ;
22032: LD_ADDR_OWVAR 2
22036: PUSH
22037: LD_OWVAR 2
22041: PUSH
22042: LD_INT 1
22044: PLUS
22045: ST_TO_ADDR
// end ;
22046: LD_VAR 0 1
22050: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22051: LD_INT 0
22053: PPUSH
22054: PPUSH
22055: PPUSH
// for i in all_units do
22056: LD_ADDR_VAR 0 2
22060: PUSH
22061: LD_OWVAR 3
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22145
// if IsSelected ( i ) then
22069: LD_VAR 0 2
22073: PPUSH
22074: CALL_OW 306
22078: IFFALSE 22143
// begin j := GetSide ( i ) ;
22080: LD_ADDR_VAR 0 3
22084: PUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: CALL_OW 255
22094: ST_TO_ADDR
// if j = 8 then
22095: LD_VAR 0 3
22099: PUSH
22100: LD_INT 8
22102: EQUAL
22103: IFFALSE 22115
// j := 0 else
22105: LD_ADDR_VAR 0 3
22109: PUSH
22110: LD_INT 0
22112: ST_TO_ADDR
22113: GO 22129
// j := j + 1 ;
22115: LD_ADDR_VAR 0 3
22119: PUSH
22120: LD_VAR 0 3
22124: PUSH
22125: LD_INT 1
22127: PLUS
22128: ST_TO_ADDR
// SetSide ( i , j ) ;
22129: LD_VAR 0 2
22133: PPUSH
22134: LD_VAR 0 3
22138: PPUSH
22139: CALL_OW 235
// end ;
22143: GO 22066
22145: POP
22146: POP
// end ;
22147: LD_VAR 0 1
22151: RET
// export function hHackFog ; begin
22152: LD_INT 0
22154: PPUSH
// FogOff ( true ) ;
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 344
// end ;
22162: LD_VAR 0 1
22166: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22167: LD_INT 0
22169: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_VAR 0 2
22179: PPUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: LD_INT 1
22187: PPUSH
22188: LD_INT 1
22190: PPUSH
22191: CALL_OW 483
// CenterOnXY ( x , y ) ;
22195: LD_VAR 0 2
22199: PPUSH
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 84
// end ;
22209: LD_VAR 0 4
22213: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22214: LD_INT 0
22216: PPUSH
22217: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22218: LD_VAR 0 1
22222: NOT
22223: PUSH
22224: LD_VAR 0 2
22228: PPUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 488
22238: NOT
22239: OR
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 266
22250: PUSH
22251: LD_INT 3
22253: NONEQUAL
22254: PUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 247
22264: PUSH
22265: LD_INT 1
22267: EQUAL
22268: NOT
22269: AND
22270: OR
22271: IFFALSE 22275
// exit ;
22273: GO 22424
// if GetType ( factory ) = unit_human then
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL_OW 247
22284: PUSH
22285: LD_INT 1
22287: EQUAL
22288: IFFALSE 22305
// factory := IsInUnit ( factory ) ;
22290: LD_ADDR_VAR 0 1
22294: PUSH
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 310
22304: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22305: LD_VAR 0 1
22309: PPUSH
22310: CALL_OW 266
22314: PUSH
22315: LD_INT 3
22317: NONEQUAL
22318: IFFALSE 22322
// exit ;
22320: GO 22424
// if HexInfo ( x , y ) = factory then
22322: LD_VAR 0 2
22326: PPUSH
22327: LD_VAR 0 3
22331: PPUSH
22332: CALL_OW 428
22336: PUSH
22337: LD_VAR 0 1
22341: EQUAL
22342: IFFALSE 22369
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22344: LD_ADDR_EXP 78
22348: PUSH
22349: LD_EXP 78
22353: PPUSH
22354: LD_VAR 0 1
22358: PPUSH
22359: LD_INT 0
22361: PPUSH
22362: CALL_OW 1
22366: ST_TO_ADDR
22367: GO 22420
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22369: LD_ADDR_EXP 78
22373: PUSH
22374: LD_EXP 78
22378: PPUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 255
22393: PUSH
22394: LD_VAR 0 1
22398: PUSH
22399: LD_VAR 0 2
22403: PUSH
22404: LD_VAR 0 3
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PPUSH
22415: CALL_OW 1
22419: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22420: CALL 22429 0 0
// end ;
22424: LD_VAR 0 4
22428: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
22433: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22434: LD_STRING resetFactoryWaypoint();
22436: PPUSH
22437: CALL_OW 559
// if factoryWaypoints then
22441: LD_EXP 78
22445: IFFALSE 22571
// begin list := PrepareArray ( factoryWaypoints ) ;
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: LD_EXP 78
22456: PPUSH
22457: CALL 64985 0 1
22461: ST_TO_ADDR
// for i := 1 to list do
22462: LD_ADDR_VAR 0 2
22466: PUSH
22467: DOUBLE
22468: LD_INT 1
22470: DEC
22471: ST_TO_ADDR
22472: LD_VAR 0 3
22476: PUSH
22477: FOR_TO
22478: IFFALSE 22569
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22480: LD_STRING setFactoryWaypointXY(
22482: PUSH
22483: LD_VAR 0 3
22487: PUSH
22488: LD_VAR 0 2
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: STR
22498: PUSH
22499: LD_STRING ,
22501: STR
22502: PUSH
22503: LD_VAR 0 3
22507: PUSH
22508: LD_VAR 0 2
22512: ARRAY
22513: PUSH
22514: LD_INT 2
22516: ARRAY
22517: STR
22518: PUSH
22519: LD_STRING ,
22521: STR
22522: PUSH
22523: LD_VAR 0 3
22527: PUSH
22528: LD_VAR 0 2
22532: ARRAY
22533: PUSH
22534: LD_INT 3
22536: ARRAY
22537: STR
22538: PUSH
22539: LD_STRING ,
22541: STR
22542: PUSH
22543: LD_VAR 0 3
22547: PUSH
22548: LD_VAR 0 2
22552: ARRAY
22553: PUSH
22554: LD_INT 4
22556: ARRAY
22557: STR
22558: PUSH
22559: LD_STRING )
22561: STR
22562: PPUSH
22563: CALL_OW 559
22567: GO 22477
22569: POP
22570: POP
// end ; end ;
22571: LD_VAR 0 1
22575: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22576: LD_INT 0
22578: PPUSH
// if HexInfo ( x , y ) = warehouse then
22579: LD_VAR 0 2
22583: PPUSH
22584: LD_VAR 0 3
22588: PPUSH
22589: CALL_OW 428
22593: PUSH
22594: LD_VAR 0 1
22598: EQUAL
22599: IFFALSE 22626
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22601: LD_ADDR_EXP 79
22605: PUSH
22606: LD_EXP 79
22610: PPUSH
22611: LD_VAR 0 1
22615: PPUSH
22616: LD_INT 0
22618: PPUSH
22619: CALL_OW 1
22623: ST_TO_ADDR
22624: GO 22677
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22626: LD_ADDR_EXP 79
22630: PUSH
22631: LD_EXP 79
22635: PPUSH
22636: LD_VAR 0 1
22640: PPUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 255
22650: PUSH
22651: LD_VAR 0 1
22655: PUSH
22656: LD_VAR 0 2
22660: PUSH
22661: LD_VAR 0 3
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: PPUSH
22672: CALL_OW 1
22676: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22677: CALL 22686 0 0
// end ;
22681: LD_VAR 0 4
22685: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22686: LD_INT 0
22688: PPUSH
22689: PPUSH
22690: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22691: LD_STRING resetWarehouseGatheringPoints();
22693: PPUSH
22694: CALL_OW 559
// if warehouseGatheringPoints then
22698: LD_EXP 79
22702: IFFALSE 22828
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22704: LD_ADDR_VAR 0 3
22708: PUSH
22709: LD_EXP 79
22713: PPUSH
22714: CALL 64985 0 1
22718: ST_TO_ADDR
// for i := 1 to list do
22719: LD_ADDR_VAR 0 2
22723: PUSH
22724: DOUBLE
22725: LD_INT 1
22727: DEC
22728: ST_TO_ADDR
22729: LD_VAR 0 3
22733: PUSH
22734: FOR_TO
22735: IFFALSE 22826
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22737: LD_STRING setWarehouseGatheringPointXY(
22739: PUSH
22740: LD_VAR 0 3
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: STR
22755: PUSH
22756: LD_STRING ,
22758: STR
22759: PUSH
22760: LD_VAR 0 3
22764: PUSH
22765: LD_VAR 0 2
22769: ARRAY
22770: PUSH
22771: LD_INT 2
22773: ARRAY
22774: STR
22775: PUSH
22776: LD_STRING ,
22778: STR
22779: PUSH
22780: LD_VAR 0 3
22784: PUSH
22785: LD_VAR 0 2
22789: ARRAY
22790: PUSH
22791: LD_INT 3
22793: ARRAY
22794: STR
22795: PUSH
22796: LD_STRING ,
22798: STR
22799: PUSH
22800: LD_VAR 0 3
22804: PUSH
22805: LD_VAR 0 2
22809: ARRAY
22810: PUSH
22811: LD_INT 4
22813: ARRAY
22814: STR
22815: PUSH
22816: LD_STRING )
22818: STR
22819: PPUSH
22820: CALL_OW 559
22824: GO 22734
22826: POP
22827: POP
// end ; end ;
22828: LD_VAR 0 1
22832: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22833: LD_EXP 79
22837: IFFALSE 23522
22839: GO 22841
22841: DISABLE
22842: LD_INT 0
22844: PPUSH
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
22849: PPUSH
22850: PPUSH
22851: PPUSH
22852: PPUSH
// begin enable ;
22853: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22854: LD_ADDR_VAR 0 3
22858: PUSH
22859: LD_EXP 79
22863: PPUSH
22864: CALL 64985 0 1
22868: ST_TO_ADDR
// if not list then
22869: LD_VAR 0 3
22873: NOT
22874: IFFALSE 22878
// exit ;
22876: GO 23522
// for i := 1 to list do
22878: LD_ADDR_VAR 0 1
22882: PUSH
22883: DOUBLE
22884: LD_INT 1
22886: DEC
22887: ST_TO_ADDR
22888: LD_VAR 0 3
22892: PUSH
22893: FOR_TO
22894: IFFALSE 23520
// begin depot := list [ i ] [ 2 ] ;
22896: LD_ADDR_VAR 0 8
22900: PUSH
22901: LD_VAR 0 3
22905: PUSH
22906: LD_VAR 0 1
22910: ARRAY
22911: PUSH
22912: LD_INT 2
22914: ARRAY
22915: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22916: LD_ADDR_VAR 0 5
22920: PUSH
22921: LD_VAR 0 3
22925: PUSH
22926: LD_VAR 0 1
22930: ARRAY
22931: PUSH
22932: LD_INT 1
22934: ARRAY
22935: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22936: LD_VAR 0 8
22940: PPUSH
22941: CALL_OW 301
22945: PUSH
22946: LD_VAR 0 5
22950: PUSH
22951: LD_VAR 0 8
22955: PPUSH
22956: CALL_OW 255
22960: NONEQUAL
22961: OR
22962: IFFALSE 22991
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22964: LD_ADDR_EXP 79
22968: PUSH
22969: LD_EXP 79
22973: PPUSH
22974: LD_VAR 0 8
22978: PPUSH
22979: LD_INT 0
22981: PPUSH
22982: CALL_OW 1
22986: ST_TO_ADDR
// exit ;
22987: POP
22988: POP
22989: GO 23522
// end ; x := list [ i ] [ 3 ] ;
22991: LD_ADDR_VAR 0 6
22995: PUSH
22996: LD_VAR 0 3
23000: PUSH
23001: LD_VAR 0 1
23005: ARRAY
23006: PUSH
23007: LD_INT 3
23009: ARRAY
23010: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23011: LD_ADDR_VAR 0 7
23015: PUSH
23016: LD_VAR 0 3
23020: PUSH
23021: LD_VAR 0 1
23025: ARRAY
23026: PUSH
23027: LD_INT 4
23029: ARRAY
23030: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23031: LD_ADDR_VAR 0 9
23035: PUSH
23036: LD_VAR 0 6
23040: PPUSH
23041: LD_VAR 0 7
23045: PPUSH
23046: LD_INT 16
23048: PPUSH
23049: CALL 63573 0 3
23053: ST_TO_ADDR
// if not cratesNearbyPoint then
23054: LD_VAR 0 9
23058: NOT
23059: IFFALSE 23065
// exit ;
23061: POP
23062: POP
23063: GO 23522
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23065: LD_ADDR_VAR 0 4
23069: PUSH
23070: LD_INT 22
23072: PUSH
23073: LD_VAR 0 5
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 3
23084: PUSH
23085: LD_INT 60
23087: PUSH
23088: EMPTY
23089: LIST
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 91
23097: PUSH
23098: LD_VAR 0 8
23102: PUSH
23103: LD_INT 6
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: LD_INT 25
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 25
23126: PUSH
23127: LD_INT 16
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: PPUSH
23145: CALL_OW 69
23149: PUSH
23150: LD_VAR 0 8
23154: PPUSH
23155: CALL_OW 313
23159: PPUSH
23160: LD_INT 3
23162: PUSH
23163: LD_INT 60
23165: PUSH
23166: EMPTY
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 25
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 25
23188: PUSH
23189: LD_INT 16
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PPUSH
23205: CALL_OW 72
23209: UNION
23210: ST_TO_ADDR
// if tmp then
23211: LD_VAR 0 4
23215: IFFALSE 23295
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23217: LD_ADDR_VAR 0 4
23221: PUSH
23222: LD_VAR 0 4
23226: PPUSH
23227: LD_INT 3
23229: PPUSH
23230: CALL 61542 0 2
23234: ST_TO_ADDR
// for j in tmp do
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_VAR 0 4
23244: PUSH
23245: FOR_IN
23246: IFFALSE 23289
// begin if IsInUnit ( j ) then
23248: LD_VAR 0 2
23252: PPUSH
23253: CALL_OW 310
23257: IFFALSE 23268
// ComExit ( j ) ;
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL 61625 0 1
// AddComCollect ( j , x , y ) ;
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_VAR 0 6
23277: PPUSH
23278: LD_VAR 0 7
23282: PPUSH
23283: CALL_OW 177
// end ;
23287: GO 23245
23289: POP
23290: POP
// exit ;
23291: POP
23292: POP
23293: GO 23522
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_INT 22
23302: PUSH
23303: LD_VAR 0 5
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 91
23314: PUSH
23315: LD_VAR 0 8
23319: PUSH
23320: LD_INT 8
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 34
23333: PUSH
23334: LD_INT 12
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 34
23343: PUSH
23344: LD_INT 51
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 34
23353: PUSH
23354: LD_INT 32
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 34
23363: PUSH
23364: LD_INT 89
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: ST_TO_ADDR
// if tmp then
23388: LD_VAR 0 4
23392: IFFALSE 23518
// begin for j in tmp do
23394: LD_ADDR_VAR 0 2
23398: PUSH
23399: LD_VAR 0 4
23403: PUSH
23404: FOR_IN
23405: IFFALSE 23516
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: CALL_OW 262
23416: PUSH
23417: LD_INT 3
23419: EQUAL
23420: PUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 261
23430: PUSH
23431: LD_INT 20
23433: GREATER
23434: OR
23435: PUSH
23436: LD_VAR 0 2
23440: PPUSH
23441: CALL_OW 314
23445: NOT
23446: AND
23447: PUSH
23448: LD_VAR 0 2
23452: PPUSH
23453: CALL_OW 263
23457: PUSH
23458: LD_INT 1
23460: NONEQUAL
23461: PUSH
23462: LD_VAR 0 2
23466: PPUSH
23467: CALL_OW 311
23471: OR
23472: AND
23473: IFFALSE 23514
// begin ComCollect ( j , x , y ) ;
23475: LD_VAR 0 2
23479: PPUSH
23480: LD_VAR 0 6
23484: PPUSH
23485: LD_VAR 0 7
23489: PPUSH
23490: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23494: LD_VAR 0 2
23498: PPUSH
23499: LD_VAR 0 8
23503: PPUSH
23504: CALL_OW 172
// exit ;
23508: POP
23509: POP
23510: POP
23511: POP
23512: GO 23522
// end ;
23514: GO 23404
23516: POP
23517: POP
// end ; end ;
23518: GO 22893
23520: POP
23521: POP
// end ; end_of_file
23522: PPOPN 9
23524: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
// if exist_mode then
23529: LD_VAR 0 2
23533: IFFALSE 23558
// unit := CreateCharacter ( prefix & ident ) else
23535: LD_ADDR_VAR 0 5
23539: PUSH
23540: LD_VAR 0 3
23544: PUSH
23545: LD_VAR 0 1
23549: STR
23550: PPUSH
23551: CALL_OW 34
23555: ST_TO_ADDR
23556: GO 23573
// unit := NewCharacter ( ident ) ;
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL_OW 25
23572: ST_TO_ADDR
// result := unit ;
23573: LD_ADDR_VAR 0 4
23577: PUSH
23578: LD_VAR 0 5
23582: ST_TO_ADDR
// end ;
23583: LD_VAR 0 4
23587: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23588: LD_INT 0
23590: PPUSH
23591: PPUSH
// if not side or not nation then
23592: LD_VAR 0 1
23596: NOT
23597: PUSH
23598: LD_VAR 0 2
23602: NOT
23603: OR
23604: IFFALSE 23608
// exit ;
23606: GO 24376
// case nation of nation_american :
23608: LD_VAR 0 2
23612: PUSH
23613: LD_INT 1
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23835
23621: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23622: LD_ADDR_VAR 0 4
23626: PUSH
23627: LD_INT 35
23629: PUSH
23630: LD_INT 45
23632: PUSH
23633: LD_INT 46
23635: PUSH
23636: LD_INT 47
23638: PUSH
23639: LD_INT 82
23641: PUSH
23642: LD_INT 83
23644: PUSH
23645: LD_INT 84
23647: PUSH
23648: LD_INT 85
23650: PUSH
23651: LD_INT 86
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: LD_INT 6
23662: PUSH
23663: LD_INT 15
23665: PUSH
23666: LD_INT 16
23668: PUSH
23669: LD_INT 7
23671: PUSH
23672: LD_INT 12
23674: PUSH
23675: LD_INT 13
23677: PUSH
23678: LD_INT 10
23680: PUSH
23681: LD_INT 14
23683: PUSH
23684: LD_INT 20
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 22
23692: PUSH
23693: LD_INT 25
23695: PUSH
23696: LD_INT 32
23698: PUSH
23699: LD_INT 27
23701: PUSH
23702: LD_INT 36
23704: PUSH
23705: LD_INT 69
23707: PUSH
23708: LD_INT 39
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 40
23716: PUSH
23717: LD_INT 48
23719: PUSH
23720: LD_INT 49
23722: PUSH
23723: LD_INT 50
23725: PUSH
23726: LD_INT 51
23728: PUSH
23729: LD_INT 52
23731: PUSH
23732: LD_INT 53
23734: PUSH
23735: LD_INT 54
23737: PUSH
23738: LD_INT 55
23740: PUSH
23741: LD_INT 56
23743: PUSH
23744: LD_INT 57
23746: PUSH
23747: LD_INT 58
23749: PUSH
23750: LD_INT 59
23752: PUSH
23753: LD_INT 60
23755: PUSH
23756: LD_INT 61
23758: PUSH
23759: LD_INT 62
23761: PUSH
23762: LD_INT 80
23764: PUSH
23765: LD_INT 82
23767: PUSH
23768: LD_INT 83
23770: PUSH
23771: LD_INT 84
23773: PUSH
23774: LD_INT 85
23776: PUSH
23777: LD_INT 86
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
23833: GO 24300
23835: LD_INT 2
23837: DOUBLE
23838: EQUAL
23839: IFTRUE 23843
23841: GO 24069
23843: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23844: LD_ADDR_VAR 0 4
23848: PUSH
23849: LD_INT 35
23851: PUSH
23852: LD_INT 45
23854: PUSH
23855: LD_INT 46
23857: PUSH
23858: LD_INT 47
23860: PUSH
23861: LD_INT 82
23863: PUSH
23864: LD_INT 83
23866: PUSH
23867: LD_INT 84
23869: PUSH
23870: LD_INT 85
23872: PUSH
23873: LD_INT 87
23875: PUSH
23876: LD_INT 70
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 11
23884: PUSH
23885: LD_INT 3
23887: PUSH
23888: LD_INT 4
23890: PUSH
23891: LD_INT 5
23893: PUSH
23894: LD_INT 6
23896: PUSH
23897: LD_INT 15
23899: PUSH
23900: LD_INT 18
23902: PUSH
23903: LD_INT 7
23905: PUSH
23906: LD_INT 17
23908: PUSH
23909: LD_INT 8
23911: PUSH
23912: LD_INT 20
23914: PUSH
23915: LD_INT 21
23917: PUSH
23918: LD_INT 22
23920: PUSH
23921: LD_INT 72
23923: PUSH
23924: LD_INT 26
23926: PUSH
23927: LD_INT 69
23929: PUSH
23930: LD_INT 39
23932: PUSH
23933: LD_INT 40
23935: PUSH
23936: LD_INT 41
23938: PUSH
23939: LD_INT 42
23941: PUSH
23942: LD_INT 43
23944: PUSH
23945: LD_INT 48
23947: PUSH
23948: LD_INT 49
23950: PUSH
23951: LD_INT 50
23953: PUSH
23954: LD_INT 51
23956: PUSH
23957: LD_INT 52
23959: PUSH
23960: LD_INT 53
23962: PUSH
23963: LD_INT 54
23965: PUSH
23966: LD_INT 55
23968: PUSH
23969: LD_INT 56
23971: PUSH
23972: LD_INT 60
23974: PUSH
23975: LD_INT 61
23977: PUSH
23978: LD_INT 62
23980: PUSH
23981: LD_INT 66
23983: PUSH
23984: LD_INT 67
23986: PUSH
23987: LD_INT 68
23989: PUSH
23990: LD_INT 81
23992: PUSH
23993: LD_INT 82
23995: PUSH
23996: LD_INT 83
23998: PUSH
23999: LD_INT 84
24001: PUSH
24002: LD_INT 85
24004: PUSH
24005: LD_INT 87
24007: PUSH
24008: LD_INT 88
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: ST_TO_ADDR
24067: GO 24300
24069: LD_INT 3
24071: DOUBLE
24072: EQUAL
24073: IFTRUE 24077
24075: GO 24299
24077: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24078: LD_ADDR_VAR 0 4
24082: PUSH
24083: LD_INT 46
24085: PUSH
24086: LD_INT 47
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 82
24097: PUSH
24098: LD_INT 83
24100: PUSH
24101: LD_INT 84
24103: PUSH
24104: LD_INT 85
24106: PUSH
24107: LD_INT 86
24109: PUSH
24110: LD_INT 11
24112: PUSH
24113: LD_INT 9
24115: PUSH
24116: LD_INT 20
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 24
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 25
24133: PUSH
24134: LD_INT 28
24136: PUSH
24137: LD_INT 29
24139: PUSH
24140: LD_INT 30
24142: PUSH
24143: LD_INT 31
24145: PUSH
24146: LD_INT 37
24148: PUSH
24149: LD_INT 38
24151: PUSH
24152: LD_INT 32
24154: PUSH
24155: LD_INT 27
24157: PUSH
24158: LD_INT 33
24160: PUSH
24161: LD_INT 69
24163: PUSH
24164: LD_INT 39
24166: PUSH
24167: LD_INT 34
24169: PUSH
24170: LD_INT 40
24172: PUSH
24173: LD_INT 71
24175: PUSH
24176: LD_INT 23
24178: PUSH
24179: LD_INT 44
24181: PUSH
24182: LD_INT 48
24184: PUSH
24185: LD_INT 49
24187: PUSH
24188: LD_INT 50
24190: PUSH
24191: LD_INT 51
24193: PUSH
24194: LD_INT 52
24196: PUSH
24197: LD_INT 53
24199: PUSH
24200: LD_INT 54
24202: PUSH
24203: LD_INT 55
24205: PUSH
24206: LD_INT 56
24208: PUSH
24209: LD_INT 57
24211: PUSH
24212: LD_INT 58
24214: PUSH
24215: LD_INT 59
24217: PUSH
24218: LD_INT 63
24220: PUSH
24221: LD_INT 64
24223: PUSH
24224: LD_INT 65
24226: PUSH
24227: LD_INT 82
24229: PUSH
24230: LD_INT 83
24232: PUSH
24233: LD_INT 84
24235: PUSH
24236: LD_INT 85
24238: PUSH
24239: LD_INT 86
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: ST_TO_ADDR
24297: GO 24300
24299: POP
// if state > - 1 and state < 3 then
24300: LD_VAR 0 3
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: GREATER
24309: PUSH
24310: LD_VAR 0 3
24314: PUSH
24315: LD_INT 3
24317: LESS
24318: AND
24319: IFFALSE 24376
// for i in result do
24321: LD_ADDR_VAR 0 5
24325: PUSH
24326: LD_VAR 0 4
24330: PUSH
24331: FOR_IN
24332: IFFALSE 24374
// if GetTech ( i , side ) <> state then
24334: LD_VAR 0 5
24338: PPUSH
24339: LD_VAR 0 1
24343: PPUSH
24344: CALL_OW 321
24348: PUSH
24349: LD_VAR 0 3
24353: NONEQUAL
24354: IFFALSE 24372
// result := result diff i ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_VAR 0 4
24365: PUSH
24366: LD_VAR 0 5
24370: DIFF
24371: ST_TO_ADDR
24372: GO 24331
24374: POP
24375: POP
// end ;
24376: LD_VAR 0 4
24380: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
// result := true ;
24386: LD_ADDR_VAR 0 3
24390: PUSH
24391: LD_INT 1
24393: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24394: LD_ADDR_VAR 0 5
24398: PUSH
24399: LD_VAR 0 2
24403: PPUSH
24404: CALL_OW 480
24408: ST_TO_ADDR
// if not tmp then
24409: LD_VAR 0 5
24413: NOT
24414: IFFALSE 24418
// exit ;
24416: GO 24467
// for i in tmp do
24418: LD_ADDR_VAR 0 4
24422: PUSH
24423: LD_VAR 0 5
24427: PUSH
24428: FOR_IN
24429: IFFALSE 24465
// if GetTech ( i , side ) <> state_researched then
24431: LD_VAR 0 4
24435: PPUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 321
24445: PUSH
24446: LD_INT 2
24448: NONEQUAL
24449: IFFALSE 24463
// begin result := false ;
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_INT 0
24458: ST_TO_ADDR
// exit ;
24459: POP
24460: POP
24461: GO 24467
// end ;
24463: GO 24428
24465: POP
24466: POP
// end ;
24467: LD_VAR 0 3
24471: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24472: LD_INT 0
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24487: LD_VAR 0 1
24491: NOT
24492: PUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 257
24502: PUSH
24503: LD_INT 9
24505: NONEQUAL
24506: OR
24507: IFFALSE 24511
// exit ;
24509: GO 25084
// side := GetSide ( unit ) ;
24511: LD_ADDR_VAR 0 9
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 255
24525: ST_TO_ADDR
// tech_space := tech_spacanom ;
24526: LD_ADDR_VAR 0 12
24530: PUSH
24531: LD_INT 29
24533: ST_TO_ADDR
// tech_time := tech_taurad ;
24534: LD_ADDR_VAR 0 13
24538: PUSH
24539: LD_INT 28
24541: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24542: LD_ADDR_VAR 0 11
24546: PUSH
24547: LD_VAR 0 1
24551: PPUSH
24552: CALL_OW 310
24556: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24557: LD_VAR 0 11
24561: PPUSH
24562: CALL_OW 247
24566: PUSH
24567: LD_INT 2
24569: EQUAL
24570: IFFALSE 24574
// exit ;
24572: GO 25084
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24574: LD_ADDR_VAR 0 8
24578: PUSH
24579: LD_INT 81
24581: PUSH
24582: LD_VAR 0 9
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 3
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PPUSH
24612: CALL_OW 69
24616: ST_TO_ADDR
// if not tmp then
24617: LD_VAR 0 8
24621: NOT
24622: IFFALSE 24626
// exit ;
24624: GO 25084
// if in_unit then
24626: LD_VAR 0 11
24630: IFFALSE 24654
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24632: LD_ADDR_VAR 0 10
24636: PUSH
24637: LD_VAR 0 8
24641: PPUSH
24642: LD_VAR 0 11
24646: PPUSH
24647: CALL_OW 74
24651: ST_TO_ADDR
24652: GO 24674
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24654: LD_ADDR_VAR 0 10
24658: PUSH
24659: LD_VAR 0 8
24663: PPUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 74
24673: ST_TO_ADDR
// if not enemy then
24674: LD_VAR 0 10
24678: NOT
24679: IFFALSE 24683
// exit ;
24681: GO 25084
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24683: LD_VAR 0 11
24687: PUSH
24688: LD_VAR 0 11
24692: PPUSH
24693: LD_VAR 0 10
24697: PPUSH
24698: CALL_OW 296
24702: PUSH
24703: LD_INT 13
24705: GREATER
24706: AND
24707: PUSH
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_VAR 0 10
24717: PPUSH
24718: CALL_OW 296
24722: PUSH
24723: LD_INT 12
24725: GREATER
24726: OR
24727: IFFALSE 24731
// exit ;
24729: GO 25084
// missile := [ 1 ] ;
24731: LD_ADDR_VAR 0 14
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24742: LD_VAR 0 9
24746: PPUSH
24747: LD_VAR 0 12
24751: PPUSH
24752: CALL_OW 325
24756: IFFALSE 24785
// missile := Replace ( missile , missile + 1 , 2 ) ;
24758: LD_ADDR_VAR 0 14
24762: PUSH
24763: LD_VAR 0 14
24767: PPUSH
24768: LD_VAR 0 14
24772: PUSH
24773: LD_INT 1
24775: PLUS
24776: PPUSH
24777: LD_INT 2
24779: PPUSH
24780: CALL_OW 1
24784: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24785: LD_VAR 0 9
24789: PPUSH
24790: LD_VAR 0 13
24794: PPUSH
24795: CALL_OW 325
24799: PUSH
24800: LD_VAR 0 10
24804: PPUSH
24805: CALL_OW 255
24809: PPUSH
24810: LD_VAR 0 13
24814: PPUSH
24815: CALL_OW 325
24819: NOT
24820: AND
24821: IFFALSE 24850
// missile := Replace ( missile , missile + 1 , 3 ) ;
24823: LD_ADDR_VAR 0 14
24827: PUSH
24828: LD_VAR 0 14
24832: PPUSH
24833: LD_VAR 0 14
24837: PUSH
24838: LD_INT 1
24840: PLUS
24841: PPUSH
24842: LD_INT 3
24844: PPUSH
24845: CALL_OW 1
24849: ST_TO_ADDR
// if missile < 2 then
24850: LD_VAR 0 14
24854: PUSH
24855: LD_INT 2
24857: LESS
24858: IFFALSE 24862
// exit ;
24860: GO 25084
// x := GetX ( enemy ) ;
24862: LD_ADDR_VAR 0 4
24866: PUSH
24867: LD_VAR 0 10
24871: PPUSH
24872: CALL_OW 250
24876: ST_TO_ADDR
// y := GetY ( enemy ) ;
24877: LD_ADDR_VAR 0 5
24881: PUSH
24882: LD_VAR 0 10
24886: PPUSH
24887: CALL_OW 251
24891: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 4
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PPUSH
24906: LD_INT 1
24908: PPUSH
24909: CALL_OW 12
24913: PLUS
24914: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24915: LD_ADDR_VAR 0 7
24919: PUSH
24920: LD_VAR 0 5
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 12
24936: PLUS
24937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24938: LD_VAR 0 6
24942: PPUSH
24943: LD_VAR 0 7
24947: PPUSH
24948: CALL_OW 488
24952: NOT
24953: IFFALSE 24975
// begin _x := x ;
24955: LD_ADDR_VAR 0 6
24959: PUSH
24960: LD_VAR 0 4
24964: ST_TO_ADDR
// _y := y ;
24965: LD_ADDR_VAR 0 7
24969: PUSH
24970: LD_VAR 0 5
24974: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_INT 1
24982: PPUSH
24983: LD_VAR 0 14
24987: PPUSH
24988: CALL_OW 12
24992: ST_TO_ADDR
// case i of 1 :
24993: LD_VAR 0 3
24997: PUSH
24998: LD_INT 1
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25023
25006: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_VAR 0 10
25016: PPUSH
25017: CALL_OW 115
25021: GO 25084
25023: LD_INT 2
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25053
25031: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 6
25041: PPUSH
25042: LD_VAR 0 7
25046: PPUSH
25047: CALL_OW 153
25051: GO 25084
25053: LD_INT 3
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25083
25061: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25062: LD_VAR 0 1
25066: PPUSH
25067: LD_VAR 0 6
25071: PPUSH
25072: LD_VAR 0 7
25076: PPUSH
25077: CALL_OW 154
25081: GO 25084
25083: POP
// end ;
25084: LD_VAR 0 2
25088: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
// if not unit or not building then
25097: LD_VAR 0 1
25101: NOT
25102: PUSH
25103: LD_VAR 0 2
25107: NOT
25108: OR
25109: IFFALSE 25113
// exit ;
25111: GO 25271
// x := GetX ( building ) ;
25113: LD_ADDR_VAR 0 5
25117: PUSH
25118: LD_VAR 0 2
25122: PPUSH
25123: CALL_OW 250
25127: ST_TO_ADDR
// y := GetY ( building ) ;
25128: LD_ADDR_VAR 0 6
25132: PUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: CALL_OW 251
25142: ST_TO_ADDR
// for i = 0 to 5 do
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: DOUBLE
25149: LD_INT 0
25151: DEC
25152: ST_TO_ADDR
25153: LD_INT 5
25155: PUSH
25156: FOR_TO
25157: IFFALSE 25269
// begin _x := ShiftX ( x , i , 3 ) ;
25159: LD_ADDR_VAR 0 7
25163: PUSH
25164: LD_VAR 0 5
25168: PPUSH
25169: LD_VAR 0 4
25173: PPUSH
25174: LD_INT 3
25176: PPUSH
25177: CALL_OW 272
25181: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25182: LD_ADDR_VAR 0 8
25186: PUSH
25187: LD_VAR 0 6
25191: PPUSH
25192: LD_VAR 0 4
25196: PPUSH
25197: LD_INT 3
25199: PPUSH
25200: CALL_OW 273
25204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25205: LD_VAR 0 7
25209: PPUSH
25210: LD_VAR 0 8
25214: PPUSH
25215: CALL_OW 488
25219: NOT
25220: IFFALSE 25224
// continue ;
25222: GO 25156
// if HexInfo ( _x , _y ) = 0 then
25224: LD_VAR 0 7
25228: PPUSH
25229: LD_VAR 0 8
25233: PPUSH
25234: CALL_OW 428
25238: PUSH
25239: LD_INT 0
25241: EQUAL
25242: IFFALSE 25267
// begin ComMoveXY ( unit , _x , _y ) ;
25244: LD_VAR 0 1
25248: PPUSH
25249: LD_VAR 0 7
25253: PPUSH
25254: LD_VAR 0 8
25258: PPUSH
25259: CALL_OW 111
// exit ;
25263: POP
25264: POP
25265: GO 25271
// end ; end ;
25267: GO 25156
25269: POP
25270: POP
// end ;
25271: LD_VAR 0 3
25275: RET
// export function ScanBase ( side , base_area ) ; begin
25276: LD_INT 0
25278: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25279: LD_ADDR_VAR 0 3
25283: PUSH
25284: LD_VAR 0 2
25288: PPUSH
25289: LD_INT 81
25291: PUSH
25292: LD_VAR 0 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PPUSH
25301: CALL_OW 70
25305: ST_TO_ADDR
// end ;
25306: LD_VAR 0 3
25310: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
// result := false ;
25317: LD_ADDR_VAR 0 2
25321: PUSH
25322: LD_INT 0
25324: ST_TO_ADDR
// side := GetSide ( unit ) ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 255
25339: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25340: LD_ADDR_VAR 0 4
25344: PUSH
25345: LD_VAR 0 1
25349: PPUSH
25350: CALL_OW 248
25354: ST_TO_ADDR
// case nat of 1 :
25355: LD_VAR 0 4
25359: PUSH
25360: LD_INT 1
25362: DOUBLE
25363: EQUAL
25364: IFTRUE 25368
25366: GO 25379
25368: POP
// tech := tech_lassight ; 2 :
25369: LD_ADDR_VAR 0 5
25373: PUSH
25374: LD_INT 12
25376: ST_TO_ADDR
25377: GO 25418
25379: LD_INT 2
25381: DOUBLE
25382: EQUAL
25383: IFTRUE 25387
25385: GO 25398
25387: POP
// tech := tech_mortar ; 3 :
25388: LD_ADDR_VAR 0 5
25392: PUSH
25393: LD_INT 41
25395: ST_TO_ADDR
25396: GO 25418
25398: LD_INT 3
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25406
25404: GO 25417
25406: POP
// tech := tech_bazooka ; end ;
25407: LD_ADDR_VAR 0 5
25411: PUSH
25412: LD_INT 44
25414: ST_TO_ADDR
25415: GO 25418
25417: POP
// if Researched ( side , tech ) then
25418: LD_VAR 0 3
25422: PPUSH
25423: LD_VAR 0 5
25427: PPUSH
25428: CALL_OW 325
25432: IFFALSE 25459
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_INT 5
25441: PUSH
25442: LD_INT 8
25444: PUSH
25445: LD_INT 9
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: PUSH
25453: LD_VAR 0 4
25457: ARRAY
25458: ST_TO_ADDR
// end ;
25459: LD_VAR 0 2
25463: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25464: LD_INT 0
25466: PPUSH
25467: PPUSH
25468: PPUSH
// if not mines then
25469: LD_VAR 0 2
25473: NOT
25474: IFFALSE 25478
// exit ;
25476: GO 25622
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_INT 81
25485: PUSH
25486: LD_VAR 0 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 21
25500: PUSH
25501: LD_INT 3
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 69
25520: ST_TO_ADDR
// for i in mines do
25521: LD_ADDR_VAR 0 4
25525: PUSH
25526: LD_VAR 0 2
25530: PUSH
25531: FOR_IN
25532: IFFALSE 25620
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25534: LD_VAR 0 4
25538: PUSH
25539: LD_INT 1
25541: ARRAY
25542: PPUSH
25543: LD_VAR 0 4
25547: PUSH
25548: LD_INT 2
25550: ARRAY
25551: PPUSH
25552: CALL_OW 458
25556: NOT
25557: IFFALSE 25561
// continue ;
25559: GO 25531
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25561: LD_VAR 0 4
25565: PUSH
25566: LD_INT 1
25568: ARRAY
25569: PPUSH
25570: LD_VAR 0 4
25574: PUSH
25575: LD_INT 2
25577: ARRAY
25578: PPUSH
25579: CALL_OW 428
25583: PUSH
25584: LD_VAR 0 5
25588: IN
25589: IFFALSE 25618
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25591: LD_VAR 0 4
25595: PUSH
25596: LD_INT 1
25598: ARRAY
25599: PPUSH
25600: LD_VAR 0 4
25604: PUSH
25605: LD_INT 2
25607: ARRAY
25608: PPUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: CALL_OW 456
// end ;
25618: GO 25531
25620: POP
25621: POP
// end ;
25622: LD_VAR 0 3
25626: RET
// export function Count ( array ) ; begin
25627: LD_INT 0
25629: PPUSH
// result := array + 0 ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_VAR 0 1
25639: PUSH
25640: LD_INT 0
25642: PLUS
25643: ST_TO_ADDR
// end ;
25644: LD_VAR 0 2
25648: RET
// export function IsEmpty ( building ) ; begin
25649: LD_INT 0
25651: PPUSH
// if not building then
25652: LD_VAR 0 1
25656: NOT
25657: IFFALSE 25661
// exit ;
25659: GO 25704
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_INT 22
25673: PUSH
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 255
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 58
25690: PUSH
25691: EMPTY
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PPUSH
25698: CALL_OW 69
25702: IN
25703: ST_TO_ADDR
// end ;
25704: LD_VAR 0 2
25708: RET
// export function IsNotFull ( building ) ; var places ; begin
25709: LD_INT 0
25711: PPUSH
25712: PPUSH
// if not building then
25713: LD_VAR 0 1
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 25750
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25722: LD_ADDR_VAR 0 2
25726: PUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 62
25737: PUSH
25738: EMPTY
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 72
25749: ST_TO_ADDR
// end ;
25750: LD_VAR 0 2
25754: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// tmp := [ ] ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: EMPTY
25767: ST_TO_ADDR
// list := [ ] ;
25768: LD_ADDR_VAR 0 5
25772: PUSH
25773: EMPTY
25774: ST_TO_ADDR
// for i = 16 to 25 do
25775: LD_ADDR_VAR 0 4
25779: PUSH
25780: DOUBLE
25781: LD_INT 16
25783: DEC
25784: ST_TO_ADDR
25785: LD_INT 25
25787: PUSH
25788: FOR_TO
25789: IFFALSE 25862
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 22
25803: PUSH
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL_OW 255
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 91
25820: PUSH
25821: LD_VAR 0 1
25825: PUSH
25826: LD_INT 6
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 30
25836: PUSH
25837: LD_VAR 0 4
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: PPUSH
25854: CALL_OW 69
25858: ADD
25859: ST_TO_ADDR
25860: GO 25788
25862: POP
25863: POP
// for i = 1 to tmp do
25864: LD_ADDR_VAR 0 4
25868: PUSH
25869: DOUBLE
25870: LD_INT 1
25872: DEC
25873: ST_TO_ADDR
25874: LD_VAR 0 3
25878: PUSH
25879: FOR_TO
25880: IFFALSE 25968
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25882: LD_ADDR_VAR 0 5
25886: PUSH
25887: LD_VAR 0 5
25891: PUSH
25892: LD_VAR 0 3
25896: PUSH
25897: LD_VAR 0 4
25901: ARRAY
25902: PPUSH
25903: CALL_OW 266
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_VAR 0 4
25917: ARRAY
25918: PPUSH
25919: CALL_OW 250
25923: PUSH
25924: LD_VAR 0 3
25928: PUSH
25929: LD_VAR 0 4
25933: ARRAY
25934: PPUSH
25935: CALL_OW 251
25939: PUSH
25940: LD_VAR 0 3
25944: PUSH
25945: LD_VAR 0 4
25949: ARRAY
25950: PPUSH
25951: CALL_OW 254
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: ADD
25965: ST_TO_ADDR
25966: GO 25879
25968: POP
25969: POP
// result := list ;
25970: LD_ADDR_VAR 0 2
25974: PUSH
25975: LD_VAR 0 5
25979: ST_TO_ADDR
// end ;
25980: LD_VAR 0 2
25984: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
// if not factory then
25994: LD_VAR 0 1
25998: NOT
25999: IFFALSE 26003
// exit ;
26001: GO 26596
// if control = control_apeman then
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 5
26010: EQUAL
26011: IFFALSE 26120
// begin tmp := UnitsInside ( factory ) ;
26013: LD_ADDR_VAR 0 8
26017: PUSH
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 313
26027: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26028: LD_VAR 0 8
26032: PPUSH
26033: LD_INT 25
26035: PUSH
26036: LD_INT 12
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 72
26047: NOT
26048: IFFALSE 26058
// control := control_manual ;
26050: LD_ADDR_VAR 0 4
26054: PUSH
26055: LD_INT 1
26057: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26058: LD_ADDR_VAR 0 8
26062: PUSH
26063: LD_VAR 0 1
26067: PPUSH
26068: CALL 25755 0 1
26072: ST_TO_ADDR
// if tmp then
26073: LD_VAR 0 8
26077: IFFALSE 26120
// begin for i in tmp do
26079: LD_ADDR_VAR 0 7
26083: PUSH
26084: LD_VAR 0 8
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26118
// if i [ 1 ] = b_ext_radio then
26092: LD_VAR 0 7
26096: PUSH
26097: LD_INT 1
26099: ARRAY
26100: PUSH
26101: LD_INT 22
26103: EQUAL
26104: IFFALSE 26116
// begin control := control_remote ;
26106: LD_ADDR_VAR 0 4
26110: PUSH
26111: LD_INT 2
26113: ST_TO_ADDR
// break ;
26114: GO 26118
// end ;
26116: GO 26089
26118: POP
26119: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_VAR 0 2
26129: PPUSH
26130: LD_VAR 0 3
26134: PPUSH
26135: LD_VAR 0 4
26139: PPUSH
26140: LD_VAR 0 5
26144: PPUSH
26145: CALL_OW 448
26149: IFFALSE 26184
// begin result := [ chassis , engine , control , weapon ] ;
26151: LD_ADDR_VAR 0 6
26155: PUSH
26156: LD_VAR 0 2
26160: PUSH
26161: LD_VAR 0 3
26165: PUSH
26166: LD_VAR 0 4
26170: PUSH
26171: LD_VAR 0 5
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: ST_TO_ADDR
// exit ;
26182: GO 26596
// end ; _chassis := AvailableChassisList ( factory ) ;
26184: LD_ADDR_VAR 0 9
26188: PUSH
26189: LD_VAR 0 1
26193: PPUSH
26194: CALL_OW 475
26198: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26199: LD_ADDR_VAR 0 11
26203: PUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 476
26213: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26214: LD_ADDR_VAR 0 12
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 477
26228: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26229: LD_ADDR_VAR 0 10
26233: PUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 478
26243: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26244: LD_VAR 0 9
26248: NOT
26249: PUSH
26250: LD_VAR 0 11
26254: NOT
26255: OR
26256: PUSH
26257: LD_VAR 0 12
26261: NOT
26262: OR
26263: PUSH
26264: LD_VAR 0 10
26268: NOT
26269: OR
26270: IFFALSE 26305
// begin result := [ chassis , engine , control , weapon ] ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_VAR 0 2
26281: PUSH
26282: LD_VAR 0 3
26286: PUSH
26287: LD_VAR 0 4
26291: PUSH
26292: LD_VAR 0 5
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: ST_TO_ADDR
// exit ;
26303: GO 26596
// end ; if not chassis in _chassis then
26305: LD_VAR 0 2
26309: PUSH
26310: LD_VAR 0 9
26314: IN
26315: NOT
26316: IFFALSE 26342
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26318: LD_ADDR_VAR 0 2
26322: PUSH
26323: LD_VAR 0 9
26327: PUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_VAR 0 9
26335: PPUSH
26336: CALL_OW 12
26340: ARRAY
26341: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26342: LD_VAR 0 2
26346: PPUSH
26347: LD_VAR 0 3
26351: PPUSH
26352: CALL 26601 0 2
26356: NOT
26357: IFFALSE 26416
// repeat engine := _engine [ 1 ] ;
26359: LD_ADDR_VAR 0 3
26363: PUSH
26364: LD_VAR 0 11
26368: PUSH
26369: LD_INT 1
26371: ARRAY
26372: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26373: LD_ADDR_VAR 0 11
26377: PUSH
26378: LD_VAR 0 11
26382: PPUSH
26383: LD_INT 1
26385: PPUSH
26386: CALL_OW 3
26390: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26391: LD_VAR 0 2
26395: PPUSH
26396: LD_VAR 0 3
26400: PPUSH
26401: CALL 26601 0 2
26405: PUSH
26406: LD_VAR 0 11
26410: PUSH
26411: EMPTY
26412: EQUAL
26413: OR
26414: IFFALSE 26359
// if not control in _control then
26416: LD_VAR 0 4
26420: PUSH
26421: LD_VAR 0 12
26425: IN
26426: NOT
26427: IFFALSE 26453
// control := _control [ rand ( 1 , _control ) ] ;
26429: LD_ADDR_VAR 0 4
26433: PUSH
26434: LD_VAR 0 12
26438: PUSH
26439: LD_INT 1
26441: PPUSH
26442: LD_VAR 0 12
26446: PPUSH
26447: CALL_OW 12
26451: ARRAY
26452: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26453: LD_VAR 0 2
26457: PPUSH
26458: LD_VAR 0 5
26462: PPUSH
26463: CALL 26821 0 2
26467: NOT
26468: IFFALSE 26527
// repeat weapon := _weapon [ 1 ] ;
26470: LD_ADDR_VAR 0 5
26474: PUSH
26475: LD_VAR 0 10
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26484: LD_ADDR_VAR 0 10
26488: PUSH
26489: LD_VAR 0 10
26493: PPUSH
26494: LD_INT 1
26496: PPUSH
26497: CALL_OW 3
26501: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26502: LD_VAR 0 2
26506: PPUSH
26507: LD_VAR 0 5
26511: PPUSH
26512: CALL 26821 0 2
26516: PUSH
26517: LD_VAR 0 10
26521: PUSH
26522: EMPTY
26523: EQUAL
26524: OR
26525: IFFALSE 26470
// result := [ ] ;
26527: LD_ADDR_VAR 0 6
26531: PUSH
26532: EMPTY
26533: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26534: LD_VAR 0 1
26538: PPUSH
26539: LD_VAR 0 2
26543: PPUSH
26544: LD_VAR 0 3
26548: PPUSH
26549: LD_VAR 0 4
26553: PPUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 448
26563: IFFALSE 26596
// result := [ chassis , engine , control , weapon ] ;
26565: LD_ADDR_VAR 0 6
26569: PUSH
26570: LD_VAR 0 2
26574: PUSH
26575: LD_VAR 0 3
26579: PUSH
26580: LD_VAR 0 4
26584: PUSH
26585: LD_VAR 0 5
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// end ;
26596: LD_VAR 0 6
26600: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26601: LD_INT 0
26603: PPUSH
// if not chassis or not engine then
26604: LD_VAR 0 1
26608: NOT
26609: PUSH
26610: LD_VAR 0 2
26614: NOT
26615: OR
26616: IFFALSE 26620
// exit ;
26618: GO 26816
// case engine of engine_solar :
26620: LD_VAR 0 2
26624: PUSH
26625: LD_INT 2
26627: DOUBLE
26628: EQUAL
26629: IFTRUE 26633
26631: GO 26671
26633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 11
26641: PUSH
26642: LD_INT 12
26644: PUSH
26645: LD_INT 13
26647: PUSH
26648: LD_INT 14
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 3
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: ST_TO_ADDR
26669: GO 26800
26671: LD_INT 1
26673: DOUBLE
26674: EQUAL
26675: IFTRUE 26679
26677: GO 26741
26679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_INT 11
26687: PUSH
26688: LD_INT 12
26690: PUSH
26691: LD_INT 13
26693: PUSH
26694: LD_INT 14
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: LD_INT 4
26708: PUSH
26709: LD_INT 5
26711: PUSH
26712: LD_INT 21
26714: PUSH
26715: LD_INT 23
26717: PUSH
26718: LD_INT 22
26720: PUSH
26721: LD_INT 24
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
26739: GO 26800
26741: LD_INT 3
26743: DOUBLE
26744: EQUAL
26745: IFTRUE 26749
26747: GO 26799
26749: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26750: LD_ADDR_VAR 0 3
26754: PUSH
26755: LD_INT 13
26757: PUSH
26758: LD_INT 14
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: LD_INT 4
26769: PUSH
26770: LD_INT 5
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_INT 23
26781: PUSH
26782: LD_INT 24
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: ST_TO_ADDR
26797: GO 26800
26799: POP
// result := ( chassis in result ) ;
26800: LD_ADDR_VAR 0 3
26804: PUSH
26805: LD_VAR 0 1
26809: PUSH
26810: LD_VAR 0 3
26814: IN
26815: ST_TO_ADDR
// end ;
26816: LD_VAR 0 3
26820: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26821: LD_INT 0
26823: PPUSH
// if not chassis or not weapon then
26824: LD_VAR 0 1
26828: NOT
26829: PUSH
26830: LD_VAR 0 2
26834: NOT
26835: OR
26836: IFFALSE 26840
// exit ;
26838: GO 27900
// case weapon of us_machine_gun :
26840: LD_VAR 0 2
26844: PUSH
26845: LD_INT 2
26847: DOUBLE
26848: EQUAL
26849: IFTRUE 26853
26851: GO 26883
26853: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26854: LD_ADDR_VAR 0 3
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: LD_INT 5
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: ST_TO_ADDR
26881: GO 27884
26883: LD_INT 3
26885: DOUBLE
26886: EQUAL
26887: IFTRUE 26891
26889: GO 26921
26891: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26892: LD_ADDR_VAR 0 3
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 4
26908: PUSH
26909: LD_INT 5
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: ST_TO_ADDR
26919: GO 27884
26921: LD_INT 11
26923: DOUBLE
26924: EQUAL
26925: IFTRUE 26929
26927: GO 26959
26929: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: LD_INT 3
26943: PUSH
26944: LD_INT 4
26946: PUSH
26947: LD_INT 5
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
26957: GO 27884
26959: LD_INT 4
26961: DOUBLE
26962: EQUAL
26963: IFTRUE 26967
26965: GO 26993
26967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26968: LD_ADDR_VAR 0 3
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: LD_INT 4
26981: PUSH
26982: LD_INT 5
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
26991: GO 27884
26993: LD_INT 5
26995: DOUBLE
26996: EQUAL
26997: IFTRUE 27001
26999: GO 27027
27001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 3
27012: PUSH
27013: LD_INT 4
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
27025: GO 27884
27027: LD_INT 9
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27061
27035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27036: LD_ADDR_VAR 0 3
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: LD_INT 4
27049: PUSH
27050: LD_INT 5
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
27059: GO 27884
27061: LD_INT 7
27063: DOUBLE
27064: EQUAL
27065: IFTRUE 27069
27067: GO 27095
27069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: LD_INT 4
27083: PUSH
27084: LD_INT 5
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: ST_TO_ADDR
27093: GO 27884
27095: LD_INT 12
27097: DOUBLE
27098: EQUAL
27099: IFTRUE 27103
27101: GO 27129
27103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27104: LD_ADDR_VAR 0 3
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: LD_INT 4
27117: PUSH
27118: LD_INT 5
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: ST_TO_ADDR
27127: GO 27884
27129: LD_INT 13
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27137
27135: GO 27163
27137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 3
27148: PUSH
27149: LD_INT 4
27151: PUSH
27152: LD_INT 5
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: ST_TO_ADDR
27161: GO 27884
27163: LD_INT 14
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27171
27169: GO 27189
27171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 4
27179: PUSH
27180: LD_INT 5
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: ST_TO_ADDR
27187: GO 27884
27189: LD_INT 6
27191: DOUBLE
27192: EQUAL
27193: IFTRUE 27197
27195: GO 27215
27197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27198: LD_ADDR_VAR 0 3
27202: PUSH
27203: LD_INT 4
27205: PUSH
27206: LD_INT 5
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: ST_TO_ADDR
27213: GO 27884
27215: LD_INT 10
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27223
27221: GO 27241
27223: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27224: LD_ADDR_VAR 0 3
27228: PUSH
27229: LD_INT 4
27231: PUSH
27232: LD_INT 5
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: ST_TO_ADDR
27239: GO 27884
27241: LD_INT 22
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27275
27249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_INT 11
27257: PUSH
27258: LD_INT 12
27260: PUSH
27261: LD_INT 13
27263: PUSH
27264: LD_INT 14
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
27273: GO 27884
27275: LD_INT 23
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27309
27283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27284: LD_ADDR_VAR 0 3
27288: PUSH
27289: LD_INT 11
27291: PUSH
27292: LD_INT 12
27294: PUSH
27295: LD_INT 13
27297: PUSH
27298: LD_INT 14
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
27307: GO 27884
27309: LD_INT 24
27311: DOUBLE
27312: EQUAL
27313: IFTRUE 27317
27315: GO 27343
27317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27318: LD_ADDR_VAR 0 3
27322: PUSH
27323: LD_INT 11
27325: PUSH
27326: LD_INT 12
27328: PUSH
27329: LD_INT 13
27331: PUSH
27332: LD_INT 14
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: ST_TO_ADDR
27341: GO 27884
27343: LD_INT 30
27345: DOUBLE
27346: EQUAL
27347: IFTRUE 27351
27349: GO 27377
27351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_INT 11
27359: PUSH
27360: LD_INT 12
27362: PUSH
27363: LD_INT 13
27365: PUSH
27366: LD_INT 14
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
27375: GO 27884
27377: LD_INT 25
27379: DOUBLE
27380: EQUAL
27381: IFTRUE 27385
27383: GO 27403
27385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27386: LD_ADDR_VAR 0 3
27390: PUSH
27391: LD_INT 13
27393: PUSH
27394: LD_INT 14
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: ST_TO_ADDR
27401: GO 27884
27403: LD_INT 27
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27429
27411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_INT 13
27419: PUSH
27420: LD_INT 14
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: ST_TO_ADDR
27427: GO 27884
27429: LD_INT 92
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27463
27437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_INT 11
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: LD_INT 13
27451: PUSH
27452: LD_INT 14
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
27461: GO 27884
27463: LD_INT 28
27465: DOUBLE
27466: EQUAL
27467: IFTRUE 27471
27469: GO 27489
27471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27472: LD_ADDR_VAR 0 3
27476: PUSH
27477: LD_INT 13
27479: PUSH
27480: LD_INT 14
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: ST_TO_ADDR
27487: GO 27884
27489: LD_INT 29
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27515
27497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 13
27505: PUSH
27506: LD_INT 14
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 27884
27515: LD_INT 31
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27541
27523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 13
27531: PUSH
27532: LD_INT 14
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: ST_TO_ADDR
27539: GO 27884
27541: LD_INT 26
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27567
27549: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 13
27557: PUSH
27558: LD_INT 14
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: ST_TO_ADDR
27565: GO 27884
27567: LD_INT 42
27569: DOUBLE
27570: EQUAL
27571: IFTRUE 27575
27573: GO 27601
27575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27576: LD_ADDR_VAR 0 3
27580: PUSH
27581: LD_INT 21
27583: PUSH
27584: LD_INT 22
27586: PUSH
27587: LD_INT 23
27589: PUSH
27590: LD_INT 24
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: ST_TO_ADDR
27599: GO 27884
27601: LD_INT 43
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27635
27609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: LD_INT 21
27617: PUSH
27618: LD_INT 22
27620: PUSH
27621: LD_INT 23
27623: PUSH
27624: LD_INT 24
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
27633: GO 27884
27635: LD_INT 44
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27669
27643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27644: LD_ADDR_VAR 0 3
27648: PUSH
27649: LD_INT 21
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_INT 23
27657: PUSH
27658: LD_INT 24
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
27667: GO 27884
27669: LD_INT 45
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27703
27677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27678: LD_ADDR_VAR 0 3
27682: PUSH
27683: LD_INT 21
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 24
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
27701: GO 27884
27703: LD_INT 49
27705: DOUBLE
27706: EQUAL
27707: IFTRUE 27711
27709: GO 27737
27711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27712: LD_ADDR_VAR 0 3
27716: PUSH
27717: LD_INT 21
27719: PUSH
27720: LD_INT 22
27722: PUSH
27723: LD_INT 23
27725: PUSH
27726: LD_INT 24
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 27884
27737: LD_INT 51
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27771
27745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 21
27753: PUSH
27754: LD_INT 22
27756: PUSH
27757: LD_INT 23
27759: PUSH
27760: LD_INT 24
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
27769: GO 27884
27771: LD_INT 52
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27805
27779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 21
27787: PUSH
27788: LD_INT 22
27790: PUSH
27791: LD_INT 23
27793: PUSH
27794: LD_INT 24
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
27803: GO 27884
27805: LD_INT 53
27807: DOUBLE
27808: EQUAL
27809: IFTRUE 27813
27811: GO 27831
27813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27814: LD_ADDR_VAR 0 3
27818: PUSH
27819: LD_INT 23
27821: PUSH
27822: LD_INT 24
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: ST_TO_ADDR
27829: GO 27884
27831: LD_INT 46
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27857
27839: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27840: LD_ADDR_VAR 0 3
27844: PUSH
27845: LD_INT 23
27847: PUSH
27848: LD_INT 24
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: ST_TO_ADDR
27855: GO 27884
27857: LD_INT 47
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27865
27863: GO 27883
27865: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27866: LD_ADDR_VAR 0 3
27870: PUSH
27871: LD_INT 23
27873: PUSH
27874: LD_INT 24
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: ST_TO_ADDR
27881: GO 27884
27883: POP
// result := ( chassis in result ) ;
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_VAR 0 1
27893: PUSH
27894: LD_VAR 0 3
27898: IN
27899: ST_TO_ADDR
// end ;
27900: LD_VAR 0 3
27904: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
27913: PPUSH
// result := array ;
27914: LD_ADDR_VAR 0 5
27918: PUSH
27919: LD_VAR 0 1
27923: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27924: LD_VAR 0 1
27928: NOT
27929: PUSH
27930: LD_VAR 0 2
27934: NOT
27935: OR
27936: PUSH
27937: LD_VAR 0 3
27941: NOT
27942: OR
27943: PUSH
27944: LD_VAR 0 2
27948: PUSH
27949: LD_VAR 0 1
27953: GREATER
27954: OR
27955: PUSH
27956: LD_VAR 0 3
27960: PUSH
27961: LD_VAR 0 1
27965: GREATER
27966: OR
27967: IFFALSE 27971
// exit ;
27969: GO 28267
// if direction then
27971: LD_VAR 0 4
27975: IFFALSE 28039
// begin d := 1 ;
27977: LD_ADDR_VAR 0 9
27981: PUSH
27982: LD_INT 1
27984: ST_TO_ADDR
// if i_from > i_to then
27985: LD_VAR 0 2
27989: PUSH
27990: LD_VAR 0 3
27994: GREATER
27995: IFFALSE 28021
// length := ( array - i_from ) + i_to else
27997: LD_ADDR_VAR 0 11
28001: PUSH
28002: LD_VAR 0 1
28006: PUSH
28007: LD_VAR 0 2
28011: MINUS
28012: PUSH
28013: LD_VAR 0 3
28017: PLUS
28018: ST_TO_ADDR
28019: GO 28037
// length := i_to - i_from ;
28021: LD_ADDR_VAR 0 11
28025: PUSH
28026: LD_VAR 0 3
28030: PUSH
28031: LD_VAR 0 2
28035: MINUS
28036: ST_TO_ADDR
// end else
28037: GO 28100
// begin d := - 1 ;
28039: LD_ADDR_VAR 0 9
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: ST_TO_ADDR
// if i_from > i_to then
28048: LD_VAR 0 2
28052: PUSH
28053: LD_VAR 0 3
28057: GREATER
28058: IFFALSE 28078
// length := i_from - i_to else
28060: LD_ADDR_VAR 0 11
28064: PUSH
28065: LD_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: MINUS
28075: ST_TO_ADDR
28076: GO 28100
// length := ( array - i_to ) + i_from ;
28078: LD_ADDR_VAR 0 11
28082: PUSH
28083: LD_VAR 0 1
28087: PUSH
28088: LD_VAR 0 3
28092: MINUS
28093: PUSH
28094: LD_VAR 0 2
28098: PLUS
28099: ST_TO_ADDR
// end ; if not length then
28100: LD_VAR 0 11
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28267
// tmp := array ;
28109: LD_ADDR_VAR 0 10
28113: PUSH
28114: LD_VAR 0 1
28118: ST_TO_ADDR
// for i = 1 to length do
28119: LD_ADDR_VAR 0 6
28123: PUSH
28124: DOUBLE
28125: LD_INT 1
28127: DEC
28128: ST_TO_ADDR
28129: LD_VAR 0 11
28133: PUSH
28134: FOR_TO
28135: IFFALSE 28255
// begin for j = 1 to array do
28137: LD_ADDR_VAR 0 7
28141: PUSH
28142: DOUBLE
28143: LD_INT 1
28145: DEC
28146: ST_TO_ADDR
28147: LD_VAR 0 1
28151: PUSH
28152: FOR_TO
28153: IFFALSE 28241
// begin k := j + d ;
28155: LD_ADDR_VAR 0 8
28159: PUSH
28160: LD_VAR 0 7
28164: PUSH
28165: LD_VAR 0 9
28169: PLUS
28170: ST_TO_ADDR
// if k > array then
28171: LD_VAR 0 8
28175: PUSH
28176: LD_VAR 0 1
28180: GREATER
28181: IFFALSE 28191
// k := 1 ;
28183: LD_ADDR_VAR 0 8
28187: PUSH
28188: LD_INT 1
28190: ST_TO_ADDR
// if not k then
28191: LD_VAR 0 8
28195: NOT
28196: IFFALSE 28208
// k := array ;
28198: LD_ADDR_VAR 0 8
28202: PUSH
28203: LD_VAR 0 1
28207: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28208: LD_ADDR_VAR 0 10
28212: PUSH
28213: LD_VAR 0 10
28217: PPUSH
28218: LD_VAR 0 8
28222: PPUSH
28223: LD_VAR 0 1
28227: PUSH
28228: LD_VAR 0 7
28232: ARRAY
28233: PPUSH
28234: CALL_OW 1
28238: ST_TO_ADDR
// end ;
28239: GO 28152
28241: POP
28242: POP
// array := tmp ;
28243: LD_ADDR_VAR 0 1
28247: PUSH
28248: LD_VAR 0 10
28252: ST_TO_ADDR
// end ;
28253: GO 28134
28255: POP
28256: POP
// result := array ;
28257: LD_ADDR_VAR 0 5
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// end ;
28267: LD_VAR 0 5
28271: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
// result := 0 ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_INT 0
28283: ST_TO_ADDR
// if not array or not value in array then
28284: LD_VAR 0 1
28288: NOT
28289: PUSH
28290: LD_VAR 0 2
28294: PUSH
28295: LD_VAR 0 1
28299: IN
28300: NOT
28301: OR
28302: IFFALSE 28306
// exit ;
28304: GO 28360
// for i = 1 to array do
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: DOUBLE
28312: LD_INT 1
28314: DEC
28315: ST_TO_ADDR
28316: LD_VAR 0 1
28320: PUSH
28321: FOR_TO
28322: IFFALSE 28358
// if value = array [ i ] then
28324: LD_VAR 0 2
28328: PUSH
28329: LD_VAR 0 1
28333: PUSH
28334: LD_VAR 0 4
28338: ARRAY
28339: EQUAL
28340: IFFALSE 28356
// begin result := i ;
28342: LD_ADDR_VAR 0 3
28346: PUSH
28347: LD_VAR 0 4
28351: ST_TO_ADDR
// exit ;
28352: POP
28353: POP
28354: GO 28360
// end ;
28356: GO 28321
28358: POP
28359: POP
// end ;
28360: LD_VAR 0 3
28364: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28365: LD_INT 0
28367: PPUSH
// vc_chassis := chassis ;
28368: LD_ADDR_OWVAR 37
28372: PUSH
28373: LD_VAR 0 1
28377: ST_TO_ADDR
// vc_engine := engine ;
28378: LD_ADDR_OWVAR 39
28382: PUSH
28383: LD_VAR 0 2
28387: ST_TO_ADDR
// vc_control := control ;
28388: LD_ADDR_OWVAR 38
28392: PUSH
28393: LD_VAR 0 3
28397: ST_TO_ADDR
// vc_weapon := weapon ;
28398: LD_ADDR_OWVAR 40
28402: PUSH
28403: LD_VAR 0 4
28407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28408: LD_ADDR_OWVAR 41
28412: PUSH
28413: LD_VAR 0 5
28417: ST_TO_ADDR
// end ;
28418: LD_VAR 0 6
28422: RET
// export function WantPlant ( unit ) ; var task ; begin
28423: LD_INT 0
28425: PPUSH
28426: PPUSH
// result := false ;
28427: LD_ADDR_VAR 0 2
28431: PUSH
28432: LD_INT 0
28434: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28435: LD_ADDR_VAR 0 3
28439: PUSH
28440: LD_VAR 0 1
28444: PPUSH
28445: CALL_OW 437
28449: ST_TO_ADDR
// if task then
28450: LD_VAR 0 3
28454: IFFALSE 28482
// if task [ 1 ] [ 1 ] = p then
28456: LD_VAR 0 3
28460: PUSH
28461: LD_INT 1
28463: ARRAY
28464: PUSH
28465: LD_INT 1
28467: ARRAY
28468: PUSH
28469: LD_STRING p
28471: EQUAL
28472: IFFALSE 28482
// result := true ;
28474: LD_ADDR_VAR 0 2
28478: PUSH
28479: LD_INT 1
28481: ST_TO_ADDR
// end ;
28482: LD_VAR 0 2
28486: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28487: LD_INT 0
28489: PPUSH
28490: PPUSH
28491: PPUSH
28492: PPUSH
// if pos < 1 then
28493: LD_VAR 0 2
28497: PUSH
28498: LD_INT 1
28500: LESS
28501: IFFALSE 28505
// exit ;
28503: GO 28808
// if pos = 1 then
28505: LD_VAR 0 2
28509: PUSH
28510: LD_INT 1
28512: EQUAL
28513: IFFALSE 28546
// result := Replace ( arr , pos [ 1 ] , value ) else
28515: LD_ADDR_VAR 0 4
28519: PUSH
28520: LD_VAR 0 1
28524: PPUSH
28525: LD_VAR 0 2
28529: PUSH
28530: LD_INT 1
28532: ARRAY
28533: PPUSH
28534: LD_VAR 0 3
28538: PPUSH
28539: CALL_OW 1
28543: ST_TO_ADDR
28544: GO 28808
// begin tmp := arr ;
28546: LD_ADDR_VAR 0 6
28550: PUSH
28551: LD_VAR 0 1
28555: ST_TO_ADDR
// s_arr := [ tmp ] ;
28556: LD_ADDR_VAR 0 7
28560: PUSH
28561: LD_VAR 0 6
28565: PUSH
28566: EMPTY
28567: LIST
28568: ST_TO_ADDR
// for i = 1 to pos - 1 do
28569: LD_ADDR_VAR 0 5
28573: PUSH
28574: DOUBLE
28575: LD_INT 1
28577: DEC
28578: ST_TO_ADDR
28579: LD_VAR 0 2
28583: PUSH
28584: LD_INT 1
28586: MINUS
28587: PUSH
28588: FOR_TO
28589: IFFALSE 28634
// begin tmp := tmp [ pos [ i ] ] ;
28591: LD_ADDR_VAR 0 6
28595: PUSH
28596: LD_VAR 0 6
28600: PUSH
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 5
28610: ARRAY
28611: ARRAY
28612: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28613: LD_ADDR_VAR 0 7
28617: PUSH
28618: LD_VAR 0 7
28622: PUSH
28623: LD_VAR 0 6
28627: PUSH
28628: EMPTY
28629: LIST
28630: ADD
28631: ST_TO_ADDR
// end ;
28632: GO 28588
28634: POP
28635: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28636: LD_ADDR_VAR 0 6
28640: PUSH
28641: LD_VAR 0 6
28645: PPUSH
28646: LD_VAR 0 2
28650: PUSH
28651: LD_VAR 0 2
28655: ARRAY
28656: PPUSH
28657: LD_VAR 0 3
28661: PPUSH
28662: CALL_OW 1
28666: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28667: LD_ADDR_VAR 0 7
28671: PUSH
28672: LD_VAR 0 7
28676: PPUSH
28677: LD_VAR 0 7
28681: PPUSH
28682: LD_VAR 0 6
28686: PPUSH
28687: CALL_OW 1
28691: ST_TO_ADDR
// for i = s_arr downto 2 do
28692: LD_ADDR_VAR 0 5
28696: PUSH
28697: DOUBLE
28698: LD_VAR 0 7
28702: INC
28703: ST_TO_ADDR
28704: LD_INT 2
28706: PUSH
28707: FOR_DOWNTO
28708: IFFALSE 28792
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28710: LD_ADDR_VAR 0 6
28714: PUSH
28715: LD_VAR 0 7
28719: PUSH
28720: LD_VAR 0 5
28724: PUSH
28725: LD_INT 1
28727: MINUS
28728: ARRAY
28729: PPUSH
28730: LD_VAR 0 2
28734: PUSH
28735: LD_VAR 0 5
28739: PUSH
28740: LD_INT 1
28742: MINUS
28743: ARRAY
28744: PPUSH
28745: LD_VAR 0 7
28749: PUSH
28750: LD_VAR 0 5
28754: ARRAY
28755: PPUSH
28756: CALL_OW 1
28760: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28761: LD_ADDR_VAR 0 7
28765: PUSH
28766: LD_VAR 0 7
28770: PPUSH
28771: LD_VAR 0 5
28775: PUSH
28776: LD_INT 1
28778: MINUS
28779: PPUSH
28780: LD_VAR 0 6
28784: PPUSH
28785: CALL_OW 1
28789: ST_TO_ADDR
// end ;
28790: GO 28707
28792: POP
28793: POP
// result := s_arr [ 1 ] ;
28794: LD_ADDR_VAR 0 4
28798: PUSH
28799: LD_VAR 0 7
28803: PUSH
28804: LD_INT 1
28806: ARRAY
28807: ST_TO_ADDR
// end ; end ;
28808: LD_VAR 0 4
28812: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28813: LD_INT 0
28815: PPUSH
28816: PPUSH
// if not list then
28817: LD_VAR 0 1
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 28917
// i := list [ pos1 ] ;
28826: LD_ADDR_VAR 0 5
28830: PUSH
28831: LD_VAR 0 1
28835: PUSH
28836: LD_VAR 0 2
28840: ARRAY
28841: ST_TO_ADDR
// if not i then
28842: LD_VAR 0 5
28846: NOT
28847: IFFALSE 28851
// exit ;
28849: GO 28917
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28851: LD_ADDR_VAR 0 1
28855: PUSH
28856: LD_VAR 0 1
28860: PPUSH
28861: LD_VAR 0 2
28865: PPUSH
28866: LD_VAR 0 1
28870: PUSH
28871: LD_VAR 0 3
28875: ARRAY
28876: PPUSH
28877: CALL_OW 1
28881: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28882: LD_ADDR_VAR 0 1
28886: PUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_VAR 0 3
28896: PPUSH
28897: LD_VAR 0 5
28901: PPUSH
28902: CALL_OW 1
28906: ST_TO_ADDR
// result := list ;
28907: LD_ADDR_VAR 0 4
28911: PUSH
28912: LD_VAR 0 1
28916: ST_TO_ADDR
// end ;
28917: LD_VAR 0 4
28921: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28922: LD_INT 0
28924: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28925: LD_ADDR_VAR 0 5
28929: PUSH
28930: LD_VAR 0 1
28934: PPUSH
28935: CALL_OW 250
28939: PPUSH
28940: LD_VAR 0 1
28944: PPUSH
28945: CALL_OW 251
28949: PPUSH
28950: LD_VAR 0 2
28954: PPUSH
28955: LD_VAR 0 3
28959: PPUSH
28960: LD_VAR 0 4
28964: PPUSH
28965: CALL 29343 0 5
28969: ST_TO_ADDR
// end ;
28970: LD_VAR 0 5
28974: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// if not list or not unit then
28981: LD_VAR 0 2
28985: NOT
28986: PUSH
28987: LD_VAR 0 1
28991: NOT
28992: OR
28993: IFFALSE 28997
// exit ;
28995: GO 29338
// result := [ ] ;
28997: LD_ADDR_VAR 0 5
29001: PUSH
29002: EMPTY
29003: ST_TO_ADDR
// for i in list do
29004: LD_ADDR_VAR 0 6
29008: PUSH
29009: LD_VAR 0 2
29013: PUSH
29014: FOR_IN
29015: IFFALSE 29233
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29017: LD_ADDR_VAR 0 8
29021: PUSH
29022: LD_VAR 0 1
29026: PPUSH
29027: LD_VAR 0 6
29031: PUSH
29032: LD_INT 1
29034: ARRAY
29035: PPUSH
29036: LD_VAR 0 6
29040: PUSH
29041: LD_INT 2
29043: ARRAY
29044: PPUSH
29045: CALL_OW 297
29049: ST_TO_ADDR
// if not Count ( result ) then
29050: LD_VAR 0 5
29054: PPUSH
29055: CALL 25627 0 1
29059: NOT
29060: IFFALSE 29093
// begin result := Join ( result , [ i , tmp ] ) ;
29062: LD_ADDR_VAR 0 5
29066: PUSH
29067: LD_VAR 0 5
29071: PPUSH
29072: LD_VAR 0 6
29076: PUSH
29077: LD_VAR 0 8
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL 61227 0 2
29090: ST_TO_ADDR
// continue ;
29091: GO 29014
// end ; if result [ result ] [ 2 ] <= tmp then
29093: LD_VAR 0 5
29097: PUSH
29098: LD_VAR 0 5
29102: ARRAY
29103: PUSH
29104: LD_INT 2
29106: ARRAY
29107: PUSH
29108: LD_VAR 0 8
29112: LESSEQUAL
29113: IFFALSE 29146
// result := Join ( result , [ i , tmp ] ) else
29115: LD_ADDR_VAR 0 5
29119: PUSH
29120: LD_VAR 0 5
29124: PPUSH
29125: LD_VAR 0 6
29129: PUSH
29130: LD_VAR 0 8
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PPUSH
29139: CALL 61227 0 2
29143: ST_TO_ADDR
29144: GO 29231
// begin for j := 1 to Count ( result ) do
29146: LD_ADDR_VAR 0 7
29150: PUSH
29151: DOUBLE
29152: LD_INT 1
29154: DEC
29155: ST_TO_ADDR
29156: LD_VAR 0 5
29160: PPUSH
29161: CALL 25627 0 1
29165: PUSH
29166: FOR_TO
29167: IFFALSE 29229
// begin if tmp < result [ j ] [ 2 ] then
29169: LD_VAR 0 8
29173: PUSH
29174: LD_VAR 0 5
29178: PUSH
29179: LD_VAR 0 7
29183: ARRAY
29184: PUSH
29185: LD_INT 2
29187: ARRAY
29188: LESS
29189: IFFALSE 29227
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29191: LD_ADDR_VAR 0 5
29195: PUSH
29196: LD_VAR 0 5
29200: PPUSH
29201: LD_VAR 0 7
29205: PPUSH
29206: LD_VAR 0 6
29210: PUSH
29211: LD_VAR 0 8
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 2
29224: ST_TO_ADDR
// break ;
29225: GO 29229
// end ; end ;
29227: GO 29166
29229: POP
29230: POP
// end ; end ;
29231: GO 29014
29233: POP
29234: POP
// if result and not asc then
29235: LD_VAR 0 5
29239: PUSH
29240: LD_VAR 0 3
29244: NOT
29245: AND
29246: IFFALSE 29263
// result := ReverseArray ( result ) ;
29248: LD_ADDR_VAR 0 5
29252: PUSH
29253: LD_VAR 0 5
29257: PPUSH
29258: CALL 56503 0 1
29262: ST_TO_ADDR
// tmp := [ ] ;
29263: LD_ADDR_VAR 0 8
29267: PUSH
29268: EMPTY
29269: ST_TO_ADDR
// if mode then
29270: LD_VAR 0 4
29274: IFFALSE 29338
// begin for i := 1 to result do
29276: LD_ADDR_VAR 0 6
29280: PUSH
29281: DOUBLE
29282: LD_INT 1
29284: DEC
29285: ST_TO_ADDR
29286: LD_VAR 0 5
29290: PUSH
29291: FOR_TO
29292: IFFALSE 29326
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29294: LD_ADDR_VAR 0 8
29298: PUSH
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_VAR 0 5
29308: PUSH
29309: LD_VAR 0 6
29313: ARRAY
29314: PUSH
29315: LD_INT 1
29317: ARRAY
29318: PPUSH
29319: CALL 61227 0 2
29323: ST_TO_ADDR
29324: GO 29291
29326: POP
29327: POP
// result := tmp ;
29328: LD_ADDR_VAR 0 5
29332: PUSH
29333: LD_VAR 0 8
29337: ST_TO_ADDR
// end ; end ;
29338: LD_VAR 0 5
29342: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29343: LD_INT 0
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// if not list then
29349: LD_VAR 0 3
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29746
// result := [ ] ;
29358: LD_ADDR_VAR 0 6
29362: PUSH
29363: EMPTY
29364: ST_TO_ADDR
// for i in list do
29365: LD_ADDR_VAR 0 7
29369: PUSH
29370: LD_VAR 0 3
29374: PUSH
29375: FOR_IN
29376: IFFALSE 29578
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29378: LD_ADDR_VAR 0 9
29382: PUSH
29383: LD_VAR 0 7
29387: PPUSH
29388: LD_VAR 0 1
29392: PPUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: CALL_OW 297
29402: ST_TO_ADDR
// if not result then
29403: LD_VAR 0 6
29407: NOT
29408: IFFALSE 29434
// result := [ [ i , tmp ] ] else
29410: LD_ADDR_VAR 0 6
29414: PUSH
29415: LD_VAR 0 7
29419: PUSH
29420: LD_VAR 0 9
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: ST_TO_ADDR
29432: GO 29576
// begin if result [ result ] [ 2 ] < tmp then
29434: LD_VAR 0 6
29438: PUSH
29439: LD_VAR 0 6
29443: ARRAY
29444: PUSH
29445: LD_INT 2
29447: ARRAY
29448: PUSH
29449: LD_VAR 0 9
29453: LESS
29454: IFFALSE 29496
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29456: LD_ADDR_VAR 0 6
29460: PUSH
29461: LD_VAR 0 6
29465: PPUSH
29466: LD_VAR 0 6
29470: PUSH
29471: LD_INT 1
29473: PLUS
29474: PPUSH
29475: LD_VAR 0 7
29479: PUSH
29480: LD_VAR 0 9
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PPUSH
29489: CALL_OW 2
29493: ST_TO_ADDR
29494: GO 29576
// for j = 1 to result do
29496: LD_ADDR_VAR 0 8
29500: PUSH
29501: DOUBLE
29502: LD_INT 1
29504: DEC
29505: ST_TO_ADDR
29506: LD_VAR 0 6
29510: PUSH
29511: FOR_TO
29512: IFFALSE 29574
// begin if tmp < result [ j ] [ 2 ] then
29514: LD_VAR 0 9
29518: PUSH
29519: LD_VAR 0 6
29523: PUSH
29524: LD_VAR 0 8
29528: ARRAY
29529: PUSH
29530: LD_INT 2
29532: ARRAY
29533: LESS
29534: IFFALSE 29572
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29536: LD_ADDR_VAR 0 6
29540: PUSH
29541: LD_VAR 0 6
29545: PPUSH
29546: LD_VAR 0 8
29550: PPUSH
29551: LD_VAR 0 7
29555: PUSH
29556: LD_VAR 0 9
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 2
29569: ST_TO_ADDR
// break ;
29570: GO 29574
// end ; end ;
29572: GO 29511
29574: POP
29575: POP
// end ; end ;
29576: GO 29375
29578: POP
29579: POP
// if result and not asc then
29580: LD_VAR 0 6
29584: PUSH
29585: LD_VAR 0 4
29589: NOT
29590: AND
29591: IFFALSE 29666
// begin tmp := result ;
29593: LD_ADDR_VAR 0 9
29597: PUSH
29598: LD_VAR 0 6
29602: ST_TO_ADDR
// for i = tmp downto 1 do
29603: LD_ADDR_VAR 0 7
29607: PUSH
29608: DOUBLE
29609: LD_VAR 0 9
29613: INC
29614: ST_TO_ADDR
29615: LD_INT 1
29617: PUSH
29618: FOR_DOWNTO
29619: IFFALSE 29664
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29621: LD_ADDR_VAR 0 6
29625: PUSH
29626: LD_VAR 0 6
29630: PPUSH
29631: LD_VAR 0 9
29635: PUSH
29636: LD_VAR 0 7
29640: MINUS
29641: PUSH
29642: LD_INT 1
29644: PLUS
29645: PPUSH
29646: LD_VAR 0 9
29650: PUSH
29651: LD_VAR 0 7
29655: ARRAY
29656: PPUSH
29657: CALL_OW 1
29661: ST_TO_ADDR
29662: GO 29618
29664: POP
29665: POP
// end ; tmp := [ ] ;
29666: LD_ADDR_VAR 0 9
29670: PUSH
29671: EMPTY
29672: ST_TO_ADDR
// if mode then
29673: LD_VAR 0 5
29677: IFFALSE 29746
// begin for i = 1 to result do
29679: LD_ADDR_VAR 0 7
29683: PUSH
29684: DOUBLE
29685: LD_INT 1
29687: DEC
29688: ST_TO_ADDR
29689: LD_VAR 0 6
29693: PUSH
29694: FOR_TO
29695: IFFALSE 29734
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29697: LD_ADDR_VAR 0 9
29701: PUSH
29702: LD_VAR 0 9
29706: PPUSH
29707: LD_VAR 0 7
29711: PPUSH
29712: LD_VAR 0 6
29716: PUSH
29717: LD_VAR 0 7
29721: ARRAY
29722: PUSH
29723: LD_INT 1
29725: ARRAY
29726: PPUSH
29727: CALL_OW 1
29731: ST_TO_ADDR
29732: GO 29694
29734: POP
29735: POP
// result := tmp ;
29736: LD_ADDR_VAR 0 6
29740: PUSH
29741: LD_VAR 0 9
29745: ST_TO_ADDR
// end ; end ;
29746: LD_VAR 0 6
29750: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29751: LD_INT 0
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29759: LD_ADDR_VAR 0 5
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: EMPTY
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: ST_TO_ADDR
// if not x or not y then
29781: LD_VAR 0 2
29785: NOT
29786: PUSH
29787: LD_VAR 0 3
29791: NOT
29792: OR
29793: IFFALSE 29797
// exit ;
29795: GO 31447
// if not range then
29797: LD_VAR 0 4
29801: NOT
29802: IFFALSE 29812
// range := 10 ;
29804: LD_ADDR_VAR 0 4
29808: PUSH
29809: LD_INT 10
29811: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29812: LD_ADDR_VAR 0 8
29816: PUSH
29817: LD_INT 81
29819: PUSH
29820: LD_VAR 0 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 92
29831: PUSH
29832: LD_VAR 0 2
29836: PUSH
29837: LD_VAR 0 3
29841: PUSH
29842: LD_VAR 0 4
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: LD_INT 21
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: PPUSH
29875: CALL_OW 69
29879: ST_TO_ADDR
// if not tmp then
29880: LD_VAR 0 8
29884: NOT
29885: IFFALSE 29889
// exit ;
29887: GO 31447
// for i in tmp do
29889: LD_ADDR_VAR 0 6
29893: PUSH
29894: LD_VAR 0 8
29898: PUSH
29899: FOR_IN
29900: IFFALSE 31422
// begin points := [ 0 , 0 , 0 ] ;
29902: LD_ADDR_VAR 0 9
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// bpoints := 1 ;
29921: LD_ADDR_VAR 0 10
29925: PUSH
29926: LD_INT 1
29928: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29929: LD_VAR 0 6
29933: PPUSH
29934: CALL_OW 247
29938: PUSH
29939: LD_INT 1
29941: DOUBLE
29942: EQUAL
29943: IFTRUE 29947
29945: GO 30525
29947: POP
// begin if GetClass ( i ) = 1 then
29948: LD_VAR 0 6
29952: PPUSH
29953: CALL_OW 257
29957: PUSH
29958: LD_INT 1
29960: EQUAL
29961: IFFALSE 29982
// points := [ 10 , 5 , 3 ] ;
29963: LD_ADDR_VAR 0 9
29967: PUSH
29968: LD_INT 10
29970: PUSH
29971: LD_INT 5
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29982: LD_VAR 0 6
29986: PPUSH
29987: CALL_OW 257
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: LD_INT 4
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: IN
30006: IFFALSE 30027
// points := [ 3 , 2 , 1 ] ;
30008: LD_ADDR_VAR 0 9
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30027: LD_VAR 0 6
30031: PPUSH
30032: CALL_OW 257
30036: PUSH
30037: LD_INT 5
30039: EQUAL
30040: IFFALSE 30061
// points := [ 130 , 5 , 2 ] ;
30042: LD_ADDR_VAR 0 9
30046: PUSH
30047: LD_INT 130
30049: PUSH
30050: LD_INT 5
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30061: LD_VAR 0 6
30065: PPUSH
30066: CALL_OW 257
30070: PUSH
30071: LD_INT 8
30073: EQUAL
30074: IFFALSE 30095
// points := [ 35 , 35 , 30 ] ;
30076: LD_ADDR_VAR 0 9
30080: PUSH
30081: LD_INT 35
30083: PUSH
30084: LD_INT 35
30086: PUSH
30087: LD_INT 30
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30095: LD_VAR 0 6
30099: PPUSH
30100: CALL_OW 257
30104: PUSH
30105: LD_INT 9
30107: EQUAL
30108: IFFALSE 30129
// points := [ 20 , 55 , 40 ] ;
30110: LD_ADDR_VAR 0 9
30114: PUSH
30115: LD_INT 20
30117: PUSH
30118: LD_INT 55
30120: PUSH
30121: LD_INT 40
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30129: LD_VAR 0 6
30133: PPUSH
30134: CALL_OW 257
30138: PUSH
30139: LD_INT 12
30141: PUSH
30142: LD_INT 16
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: IN
30149: IFFALSE 30170
// points := [ 5 , 3 , 2 ] ;
30151: LD_ADDR_VAR 0 9
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30170: LD_VAR 0 6
30174: PPUSH
30175: CALL_OW 257
30179: PUSH
30180: LD_INT 17
30182: EQUAL
30183: IFFALSE 30204
// points := [ 100 , 50 , 75 ] ;
30185: LD_ADDR_VAR 0 9
30189: PUSH
30190: LD_INT 100
30192: PUSH
30193: LD_INT 50
30195: PUSH
30196: LD_INT 75
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30204: LD_VAR 0 6
30208: PPUSH
30209: CALL_OW 257
30213: PUSH
30214: LD_INT 15
30216: EQUAL
30217: IFFALSE 30238
// points := [ 10 , 5 , 3 ] ;
30219: LD_ADDR_VAR 0 9
30223: PUSH
30224: LD_INT 10
30226: PUSH
30227: LD_INT 5
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30238: LD_VAR 0 6
30242: PPUSH
30243: CALL_OW 257
30247: PUSH
30248: LD_INT 14
30250: EQUAL
30251: IFFALSE 30272
// points := [ 10 , 0 , 0 ] ;
30253: LD_ADDR_VAR 0 9
30257: PUSH
30258: LD_INT 10
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30272: LD_VAR 0 6
30276: PPUSH
30277: CALL_OW 257
30281: PUSH
30282: LD_INT 11
30284: EQUAL
30285: IFFALSE 30306
// points := [ 30 , 10 , 5 ] ;
30287: LD_ADDR_VAR 0 9
30291: PUSH
30292: LD_INT 30
30294: PUSH
30295: LD_INT 10
30297: PUSH
30298: LD_INT 5
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30306: LD_VAR 0 1
30310: PPUSH
30311: LD_INT 5
30313: PPUSH
30314: CALL_OW 321
30318: PUSH
30319: LD_INT 2
30321: EQUAL
30322: IFFALSE 30339
// bpoints := bpoints * 1.8 ;
30324: LD_ADDR_VAR 0 10
30328: PUSH
30329: LD_VAR 0 10
30333: PUSH
30334: LD_REAL  1.80000000000000E+0000
30337: MUL
30338: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30339: LD_VAR 0 6
30343: PPUSH
30344: CALL_OW 257
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 4
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: IN
30367: PUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: LD_INT 51
30375: PPUSH
30376: CALL_OW 321
30380: PUSH
30381: LD_INT 2
30383: EQUAL
30384: AND
30385: IFFALSE 30402
// bpoints := bpoints * 1.2 ;
30387: LD_ADDR_VAR 0 10
30391: PUSH
30392: LD_VAR 0 10
30396: PUSH
30397: LD_REAL  1.20000000000000E+0000
30400: MUL
30401: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30402: LD_VAR 0 6
30406: PPUSH
30407: CALL_OW 257
30411: PUSH
30412: LD_INT 5
30414: PUSH
30415: LD_INT 7
30417: PUSH
30418: LD_INT 9
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: IN
30426: PUSH
30427: LD_VAR 0 1
30431: PPUSH
30432: LD_INT 52
30434: PPUSH
30435: CALL_OW 321
30439: PUSH
30440: LD_INT 2
30442: EQUAL
30443: AND
30444: IFFALSE 30461
// bpoints := bpoints * 1.5 ;
30446: LD_ADDR_VAR 0 10
30450: PUSH
30451: LD_VAR 0 10
30455: PUSH
30456: LD_REAL  1.50000000000000E+0000
30459: MUL
30460: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30461: LD_VAR 0 1
30465: PPUSH
30466: LD_INT 66
30468: PPUSH
30469: CALL_OW 321
30473: PUSH
30474: LD_INT 2
30476: EQUAL
30477: IFFALSE 30494
// bpoints := bpoints * 1.1 ;
30479: LD_ADDR_VAR 0 10
30483: PUSH
30484: LD_VAR 0 10
30488: PUSH
30489: LD_REAL  1.10000000000000E+0000
30492: MUL
30493: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30494: LD_ADDR_VAR 0 10
30498: PUSH
30499: LD_VAR 0 10
30503: PUSH
30504: LD_VAR 0 6
30508: PPUSH
30509: LD_INT 1
30511: PPUSH
30512: CALL_OW 259
30516: PUSH
30517: LD_REAL  1.15000000000000E+0000
30520: MUL
30521: MUL
30522: ST_TO_ADDR
// end ; unit_vehicle :
30523: GO 31351
30525: LD_INT 2
30527: DOUBLE
30528: EQUAL
30529: IFTRUE 30533
30531: GO 31339
30533: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30534: LD_VAR 0 6
30538: PPUSH
30539: CALL_OW 264
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 42
30549: PUSH
30550: LD_INT 24
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: LIST
30557: IN
30558: IFFALSE 30579
// points := [ 25 , 5 , 3 ] ;
30560: LD_ADDR_VAR 0 9
30564: PUSH
30565: LD_INT 25
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: LD_INT 3
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30579: LD_VAR 0 6
30583: PPUSH
30584: CALL_OW 264
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: LD_INT 43
30594: PUSH
30595: LD_INT 25
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: LIST
30602: IN
30603: IFFALSE 30624
// points := [ 40 , 15 , 5 ] ;
30605: LD_ADDR_VAR 0 9
30609: PUSH
30610: LD_INT 40
30612: PUSH
30613: LD_INT 15
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30624: LD_VAR 0 6
30628: PPUSH
30629: CALL_OW 264
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: LD_INT 23
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: IN
30644: IFFALSE 30665
// points := [ 7 , 25 , 8 ] ;
30646: LD_ADDR_VAR 0 9
30650: PUSH
30651: LD_INT 7
30653: PUSH
30654: LD_INT 25
30656: PUSH
30657: LD_INT 8
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30665: LD_VAR 0 6
30669: PPUSH
30670: CALL_OW 264
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: LD_INT 27
30680: PUSH
30681: LD_INT 44
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: IN
30689: IFFALSE 30710
// points := [ 14 , 50 , 16 ] ;
30691: LD_ADDR_VAR 0 9
30695: PUSH
30696: LD_INT 14
30698: PUSH
30699: LD_INT 50
30701: PUSH
30702: LD_INT 16
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30710: LD_VAR 0 6
30714: PPUSH
30715: CALL_OW 264
30719: PUSH
30720: LD_INT 6
30722: PUSH
30723: LD_INT 46
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: IN
30730: IFFALSE 30751
// points := [ 32 , 120 , 70 ] ;
30732: LD_ADDR_VAR 0 9
30736: PUSH
30737: LD_INT 32
30739: PUSH
30740: LD_INT 120
30742: PUSH
30743: LD_INT 70
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30751: LD_VAR 0 6
30755: PPUSH
30756: CALL_OW 264
30760: PUSH
30761: LD_INT 7
30763: PUSH
30764: LD_INT 28
30766: PUSH
30767: LD_INT 45
30769: PUSH
30770: LD_INT 92
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: IN
30779: IFFALSE 30800
// points := [ 35 , 20 , 45 ] ;
30781: LD_ADDR_VAR 0 9
30785: PUSH
30786: LD_INT 35
30788: PUSH
30789: LD_INT 20
30791: PUSH
30792: LD_INT 45
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30800: LD_VAR 0 6
30804: PPUSH
30805: CALL_OW 264
30809: PUSH
30810: LD_INT 47
30812: PUSH
30813: EMPTY
30814: LIST
30815: IN
30816: IFFALSE 30837
// points := [ 67 , 45 , 75 ] ;
30818: LD_ADDR_VAR 0 9
30822: PUSH
30823: LD_INT 67
30825: PUSH
30826: LD_INT 45
30828: PUSH
30829: LD_INT 75
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30837: LD_VAR 0 6
30841: PPUSH
30842: CALL_OW 264
30846: PUSH
30847: LD_INT 26
30849: PUSH
30850: EMPTY
30851: LIST
30852: IN
30853: IFFALSE 30874
// points := [ 120 , 30 , 80 ] ;
30855: LD_ADDR_VAR 0 9
30859: PUSH
30860: LD_INT 120
30862: PUSH
30863: LD_INT 30
30865: PUSH
30866: LD_INT 80
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30874: LD_VAR 0 6
30878: PPUSH
30879: CALL_OW 264
30883: PUSH
30884: LD_INT 22
30886: PUSH
30887: EMPTY
30888: LIST
30889: IN
30890: IFFALSE 30911
// points := [ 40 , 1 , 1 ] ;
30892: LD_ADDR_VAR 0 9
30896: PUSH
30897: LD_INT 40
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30911: LD_VAR 0 6
30915: PPUSH
30916: CALL_OW 264
30920: PUSH
30921: LD_INT 29
30923: PUSH
30924: EMPTY
30925: LIST
30926: IN
30927: IFFALSE 30948
// points := [ 70 , 200 , 400 ] ;
30929: LD_ADDR_VAR 0 9
30933: PUSH
30934: LD_INT 70
30936: PUSH
30937: LD_INT 200
30939: PUSH
30940: LD_INT 400
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30948: LD_VAR 0 6
30952: PPUSH
30953: CALL_OW 264
30957: PUSH
30958: LD_INT 14
30960: PUSH
30961: LD_INT 53
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: IN
30968: IFFALSE 30989
// points := [ 40 , 10 , 20 ] ;
30970: LD_ADDR_VAR 0 9
30974: PUSH
30975: LD_INT 40
30977: PUSH
30978: LD_INT 10
30980: PUSH
30981: LD_INT 20
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: LIST
30988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30989: LD_VAR 0 6
30993: PPUSH
30994: CALL_OW 264
30998: PUSH
30999: LD_INT 9
31001: PUSH
31002: EMPTY
31003: LIST
31004: IN
31005: IFFALSE 31026
// points := [ 5 , 70 , 20 ] ;
31007: LD_ADDR_VAR 0 9
31011: PUSH
31012: LD_INT 5
31014: PUSH
31015: LD_INT 70
31017: PUSH
31018: LD_INT 20
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31026: LD_VAR 0 6
31030: PPUSH
31031: CALL_OW 264
31035: PUSH
31036: LD_INT 10
31038: PUSH
31039: EMPTY
31040: LIST
31041: IN
31042: IFFALSE 31063
// points := [ 35 , 110 , 70 ] ;
31044: LD_ADDR_VAR 0 9
31048: PUSH
31049: LD_INT 35
31051: PUSH
31052: LD_INT 110
31054: PUSH
31055: LD_INT 70
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31063: LD_VAR 0 6
31067: PPUSH
31068: CALL_OW 265
31072: PUSH
31073: LD_INT 25
31075: EQUAL
31076: IFFALSE 31097
// points := [ 80 , 65 , 100 ] ;
31078: LD_ADDR_VAR 0 9
31082: PUSH
31083: LD_INT 80
31085: PUSH
31086: LD_INT 65
31088: PUSH
31089: LD_INT 100
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31097: LD_VAR 0 6
31101: PPUSH
31102: CALL_OW 263
31106: PUSH
31107: LD_INT 1
31109: EQUAL
31110: IFFALSE 31145
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31112: LD_ADDR_VAR 0 10
31116: PUSH
31117: LD_VAR 0 10
31121: PUSH
31122: LD_VAR 0 6
31126: PPUSH
31127: CALL_OW 311
31131: PPUSH
31132: LD_INT 3
31134: PPUSH
31135: CALL_OW 259
31139: PUSH
31140: LD_INT 4
31142: MUL
31143: MUL
31144: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31145: LD_VAR 0 6
31149: PPUSH
31150: CALL_OW 263
31154: PUSH
31155: LD_INT 2
31157: EQUAL
31158: IFFALSE 31209
// begin j := IsControledBy ( i ) ;
31160: LD_ADDR_VAR 0 7
31164: PUSH
31165: LD_VAR 0 6
31169: PPUSH
31170: CALL_OW 312
31174: ST_TO_ADDR
// if j then
31175: LD_VAR 0 7
31179: IFFALSE 31209
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31181: LD_ADDR_VAR 0 10
31185: PUSH
31186: LD_VAR 0 10
31190: PUSH
31191: LD_VAR 0 7
31195: PPUSH
31196: LD_INT 3
31198: PPUSH
31199: CALL_OW 259
31203: PUSH
31204: LD_INT 3
31206: MUL
31207: MUL
31208: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31209: LD_VAR 0 6
31213: PPUSH
31214: CALL_OW 264
31218: PUSH
31219: LD_INT 5
31221: PUSH
31222: LD_INT 6
31224: PUSH
31225: LD_INT 46
31227: PUSH
31228: LD_INT 44
31230: PUSH
31231: LD_INT 47
31233: PUSH
31234: LD_INT 45
31236: PUSH
31237: LD_INT 28
31239: PUSH
31240: LD_INT 7
31242: PUSH
31243: LD_INT 27
31245: PUSH
31246: LD_INT 29
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: IN
31261: PUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: LD_INT 52
31269: PPUSH
31270: CALL_OW 321
31274: PUSH
31275: LD_INT 2
31277: EQUAL
31278: AND
31279: IFFALSE 31296
// bpoints := bpoints * 1.2 ;
31281: LD_ADDR_VAR 0 10
31285: PUSH
31286: LD_VAR 0 10
31290: PUSH
31291: LD_REAL  1.20000000000000E+0000
31294: MUL
31295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31296: LD_VAR 0 6
31300: PPUSH
31301: CALL_OW 264
31305: PUSH
31306: LD_INT 6
31308: PUSH
31309: LD_INT 46
31311: PUSH
31312: LD_INT 47
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: IN
31320: IFFALSE 31337
// bpoints := bpoints * 1.2 ;
31322: LD_ADDR_VAR 0 10
31326: PUSH
31327: LD_VAR 0 10
31331: PUSH
31332: LD_REAL  1.20000000000000E+0000
31335: MUL
31336: ST_TO_ADDR
// end ; unit_building :
31337: GO 31351
31339: LD_INT 3
31341: DOUBLE
31342: EQUAL
31343: IFTRUE 31347
31345: GO 31350
31347: POP
// ; end ;
31348: GO 31351
31350: POP
// for j = 1 to 3 do
31351: LD_ADDR_VAR 0 7
31355: PUSH
31356: DOUBLE
31357: LD_INT 1
31359: DEC
31360: ST_TO_ADDR
31361: LD_INT 3
31363: PUSH
31364: FOR_TO
31365: IFFALSE 31418
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31367: LD_ADDR_VAR 0 5
31371: PUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: LD_VAR 0 7
31381: PPUSH
31382: LD_VAR 0 5
31386: PUSH
31387: LD_VAR 0 7
31391: ARRAY
31392: PUSH
31393: LD_VAR 0 9
31397: PUSH
31398: LD_VAR 0 7
31402: ARRAY
31403: PUSH
31404: LD_VAR 0 10
31408: MUL
31409: PLUS
31410: PPUSH
31411: CALL_OW 1
31415: ST_TO_ADDR
31416: GO 31364
31418: POP
31419: POP
// end ;
31420: GO 29899
31422: POP
31423: POP
// result := Replace ( result , 4 , tmp ) ;
31424: LD_ADDR_VAR 0 5
31428: PUSH
31429: LD_VAR 0 5
31433: PPUSH
31434: LD_INT 4
31436: PPUSH
31437: LD_VAR 0 8
31441: PPUSH
31442: CALL_OW 1
31446: ST_TO_ADDR
// end ;
31447: LD_VAR 0 5
31451: RET
// export function DangerAtRange ( unit , range ) ; begin
31452: LD_INT 0
31454: PPUSH
// if not unit then
31455: LD_VAR 0 1
31459: NOT
31460: IFFALSE 31464
// exit ;
31462: GO 31509
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31464: LD_ADDR_VAR 0 3
31468: PUSH
31469: LD_VAR 0 1
31473: PPUSH
31474: CALL_OW 255
31478: PPUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL_OW 250
31488: PPUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 251
31498: PPUSH
31499: LD_VAR 0 2
31503: PPUSH
31504: CALL 29751 0 4
31508: ST_TO_ADDR
// end ;
31509: LD_VAR 0 3
31513: RET
// export function DangerInArea ( side , area ) ; begin
31514: LD_INT 0
31516: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31517: LD_ADDR_VAR 0 3
31521: PUSH
31522: LD_VAR 0 2
31526: PPUSH
31527: LD_INT 81
31529: PUSH
31530: LD_VAR 0 1
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 70
31543: ST_TO_ADDR
// end ;
31544: LD_VAR 0 3
31548: RET
// export function IsExtension ( b ) ; begin
31549: LD_INT 0
31551: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31552: LD_ADDR_VAR 0 2
31556: PUSH
31557: LD_VAR 0 1
31561: PUSH
31562: LD_INT 23
31564: PUSH
31565: LD_INT 20
31567: PUSH
31568: LD_INT 22
31570: PUSH
31571: LD_INT 17
31573: PUSH
31574: LD_INT 24
31576: PUSH
31577: LD_INT 21
31579: PUSH
31580: LD_INT 19
31582: PUSH
31583: LD_INT 16
31585: PUSH
31586: LD_INT 25
31588: PUSH
31589: LD_INT 18
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: IN
31604: ST_TO_ADDR
// end ;
31605: LD_VAR 0 2
31609: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31610: LD_INT 0
31612: PPUSH
31613: PPUSH
31614: PPUSH
// result := [ ] ;
31615: LD_ADDR_VAR 0 4
31619: PUSH
31620: EMPTY
31621: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31622: LD_ADDR_VAR 0 5
31626: PUSH
31627: LD_VAR 0 2
31631: PPUSH
31632: LD_INT 21
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PPUSH
31642: CALL_OW 70
31646: ST_TO_ADDR
// if not tmp then
31647: LD_VAR 0 5
31651: NOT
31652: IFFALSE 31656
// exit ;
31654: GO 31720
// if checkLink then
31656: LD_VAR 0 3
31660: IFFALSE 31710
// begin for i in tmp do
31662: LD_ADDR_VAR 0 6
31666: PUSH
31667: LD_VAR 0 5
31671: PUSH
31672: FOR_IN
31673: IFFALSE 31708
// if GetBase ( i ) <> base then
31675: LD_VAR 0 6
31679: PPUSH
31680: CALL_OW 274
31684: PUSH
31685: LD_VAR 0 1
31689: NONEQUAL
31690: IFFALSE 31706
// ComLinkToBase ( base , i ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: LD_VAR 0 6
31701: PPUSH
31702: CALL_OW 169
31706: GO 31672
31708: POP
31709: POP
// end ; result := tmp ;
31710: LD_ADDR_VAR 0 4
31714: PUSH
31715: LD_VAR 0 5
31719: ST_TO_ADDR
// end ;
31720: LD_VAR 0 4
31724: RET
// export function ComComplete ( units , b ) ; var i ; begin
31725: LD_INT 0
31727: PPUSH
31728: PPUSH
// if not units then
31729: LD_VAR 0 1
31733: NOT
31734: IFFALSE 31738
// exit ;
31736: GO 31828
// for i in units do
31738: LD_ADDR_VAR 0 4
31742: PUSH
31743: LD_VAR 0 1
31747: PUSH
31748: FOR_IN
31749: IFFALSE 31826
// if BuildingStatus ( b ) = bs_build then
31751: LD_VAR 0 2
31755: PPUSH
31756: CALL_OW 461
31760: PUSH
31761: LD_INT 1
31763: EQUAL
31764: IFFALSE 31824
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31766: LD_VAR 0 4
31770: PPUSH
31771: LD_STRING h
31773: PUSH
31774: LD_VAR 0 2
31778: PPUSH
31779: CALL_OW 250
31783: PUSH
31784: LD_VAR 0 2
31788: PPUSH
31789: CALL_OW 251
31793: PUSH
31794: LD_VAR 0 2
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: PPUSH
31820: CALL_OW 446
31824: GO 31748
31826: POP
31827: POP
// end ;
31828: LD_VAR 0 3
31832: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31833: LD_INT 0
31835: PPUSH
31836: PPUSH
31837: PPUSH
31838: PPUSH
31839: PPUSH
31840: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31841: LD_VAR 0 1
31845: NOT
31846: PUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 263
31856: PUSH
31857: LD_INT 2
31859: NONEQUAL
31860: OR
31861: IFFALSE 31865
// exit ;
31863: GO 32181
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31865: LD_ADDR_VAR 0 6
31869: PUSH
31870: LD_INT 22
31872: PUSH
31873: LD_VAR 0 1
31877: PPUSH
31878: CALL_OW 255
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 30
31892: PUSH
31893: LD_INT 36
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 34
31902: PUSH
31903: LD_INT 31
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PPUSH
31919: CALL_OW 69
31923: ST_TO_ADDR
// if not tmp then
31924: LD_VAR 0 6
31928: NOT
31929: IFFALSE 31933
// exit ;
31931: GO 32181
// result := [ ] ;
31933: LD_ADDR_VAR 0 2
31937: PUSH
31938: EMPTY
31939: ST_TO_ADDR
// for i in tmp do
31940: LD_ADDR_VAR 0 3
31944: PUSH
31945: LD_VAR 0 6
31949: PUSH
31950: FOR_IN
31951: IFFALSE 32022
// begin t := UnitsInside ( i ) ;
31953: LD_ADDR_VAR 0 4
31957: PUSH
31958: LD_VAR 0 3
31962: PPUSH
31963: CALL_OW 313
31967: ST_TO_ADDR
// if t then
31968: LD_VAR 0 4
31972: IFFALSE 32020
// for j in t do
31974: LD_ADDR_VAR 0 7
31978: PUSH
31979: LD_VAR 0 4
31983: PUSH
31984: FOR_IN
31985: IFFALSE 32018
// result := Replace ( result , result + 1 , j ) ;
31987: LD_ADDR_VAR 0 2
31991: PUSH
31992: LD_VAR 0 2
31996: PPUSH
31997: LD_VAR 0 2
32001: PUSH
32002: LD_INT 1
32004: PLUS
32005: PPUSH
32006: LD_VAR 0 7
32010: PPUSH
32011: CALL_OW 1
32015: ST_TO_ADDR
32016: GO 31984
32018: POP
32019: POP
// end ;
32020: GO 31950
32022: POP
32023: POP
// if not result then
32024: LD_VAR 0 2
32028: NOT
32029: IFFALSE 32033
// exit ;
32031: GO 32181
// mech := result [ 1 ] ;
32033: LD_ADDR_VAR 0 5
32037: PUSH
32038: LD_VAR 0 2
32042: PUSH
32043: LD_INT 1
32045: ARRAY
32046: ST_TO_ADDR
// if result > 1 then
32047: LD_VAR 0 2
32051: PUSH
32052: LD_INT 1
32054: GREATER
32055: IFFALSE 32167
// begin for i = 2 to result do
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: DOUBLE
32063: LD_INT 2
32065: DEC
32066: ST_TO_ADDR
32067: LD_VAR 0 2
32071: PUSH
32072: FOR_TO
32073: IFFALSE 32165
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32075: LD_ADDR_VAR 0 4
32079: PUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_VAR 0 3
32089: ARRAY
32090: PPUSH
32091: LD_INT 3
32093: PPUSH
32094: CALL_OW 259
32098: PUSH
32099: LD_VAR 0 2
32103: PUSH
32104: LD_VAR 0 3
32108: ARRAY
32109: PPUSH
32110: CALL_OW 432
32114: MINUS
32115: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32116: LD_VAR 0 4
32120: PUSH
32121: LD_VAR 0 5
32125: PPUSH
32126: LD_INT 3
32128: PPUSH
32129: CALL_OW 259
32133: PUSH
32134: LD_VAR 0 5
32138: PPUSH
32139: CALL_OW 432
32143: MINUS
32144: GREATEREQUAL
32145: IFFALSE 32163
// mech := result [ i ] ;
32147: LD_ADDR_VAR 0 5
32151: PUSH
32152: LD_VAR 0 2
32156: PUSH
32157: LD_VAR 0 3
32161: ARRAY
32162: ST_TO_ADDR
// end ;
32163: GO 32072
32165: POP
32166: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32167: LD_VAR 0 1
32171: PPUSH
32172: LD_VAR 0 5
32176: PPUSH
32177: CALL_OW 135
// end ;
32181: LD_VAR 0 2
32185: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32186: LD_INT 0
32188: PPUSH
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
// result := [ ] ;
32201: LD_ADDR_VAR 0 7
32205: PUSH
32206: EMPTY
32207: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32208: LD_VAR 0 1
32212: PPUSH
32213: CALL_OW 266
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: IN
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 33867
// if name then
32233: LD_VAR 0 3
32237: IFFALSE 32253
// SetBName ( base_dep , name ) ;
32239: LD_VAR 0 1
32243: PPUSH
32244: LD_VAR 0 3
32248: PPUSH
32249: CALL_OW 500
// base := GetBase ( base_dep ) ;
32253: LD_ADDR_VAR 0 15
32257: PUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 274
32267: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32268: LD_ADDR_VAR 0 16
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 255
32282: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32283: LD_ADDR_VAR 0 17
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 248
32297: ST_TO_ADDR
// if sources then
32298: LD_VAR 0 5
32302: IFFALSE 32349
// for i = 1 to 3 do
32304: LD_ADDR_VAR 0 8
32308: PUSH
32309: DOUBLE
32310: LD_INT 1
32312: DEC
32313: ST_TO_ADDR
32314: LD_INT 3
32316: PUSH
32317: FOR_TO
32318: IFFALSE 32347
// AddResourceType ( base , i , sources [ i ] ) ;
32320: LD_VAR 0 15
32324: PPUSH
32325: LD_VAR 0 8
32329: PPUSH
32330: LD_VAR 0 5
32334: PUSH
32335: LD_VAR 0 8
32339: ARRAY
32340: PPUSH
32341: CALL_OW 276
32345: GO 32317
32347: POP
32348: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32349: LD_ADDR_VAR 0 18
32353: PUSH
32354: LD_VAR 0 15
32358: PPUSH
32359: LD_VAR 0 2
32363: PPUSH
32364: LD_INT 1
32366: PPUSH
32367: CALL 31610 0 3
32371: ST_TO_ADDR
// InitHc ;
32372: CALL_OW 19
// InitUc ;
32376: CALL_OW 18
// uc_side := side ;
32380: LD_ADDR_OWVAR 20
32384: PUSH
32385: LD_VAR 0 16
32389: ST_TO_ADDR
// uc_nation := nation ;
32390: LD_ADDR_OWVAR 21
32394: PUSH
32395: LD_VAR 0 17
32399: ST_TO_ADDR
// if buildings then
32400: LD_VAR 0 18
32404: IFFALSE 33726
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32406: LD_ADDR_VAR 0 19
32410: PUSH
32411: LD_VAR 0 18
32415: PPUSH
32416: LD_INT 2
32418: PUSH
32419: LD_INT 30
32421: PUSH
32422: LD_INT 29
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 30
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: PPUSH
32444: CALL_OW 72
32448: ST_TO_ADDR
// if tmp then
32449: LD_VAR 0 19
32453: IFFALSE 32501
// for i in tmp do
32455: LD_ADDR_VAR 0 8
32459: PUSH
32460: LD_VAR 0 19
32464: PUSH
32465: FOR_IN
32466: IFFALSE 32499
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32468: LD_VAR 0 8
32472: PPUSH
32473: CALL_OW 250
32477: PPUSH
32478: LD_VAR 0 8
32482: PPUSH
32483: CALL_OW 251
32487: PPUSH
32488: LD_VAR 0 16
32492: PPUSH
32493: CALL_OW 441
32497: GO 32465
32499: POP
32500: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32501: LD_VAR 0 18
32505: PPUSH
32506: LD_INT 2
32508: PUSH
32509: LD_INT 30
32511: PUSH
32512: LD_INT 32
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 30
32521: PUSH
32522: LD_INT 33
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: PPUSH
32534: CALL_OW 72
32538: IFFALSE 32626
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32540: LD_ADDR_VAR 0 8
32544: PUSH
32545: LD_VAR 0 18
32549: PPUSH
32550: LD_INT 2
32552: PUSH
32553: LD_INT 30
32555: PUSH
32556: LD_INT 32
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 30
32565: PUSH
32566: LD_INT 33
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 72
32582: PUSH
32583: FOR_IN
32584: IFFALSE 32624
// begin if not GetBWeapon ( i ) then
32586: LD_VAR 0 8
32590: PPUSH
32591: CALL_OW 269
32595: NOT
32596: IFFALSE 32622
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32598: LD_VAR 0 8
32602: PPUSH
32603: LD_VAR 0 8
32607: PPUSH
32608: LD_VAR 0 2
32612: PPUSH
32613: CALL 33872 0 2
32617: PPUSH
32618: CALL_OW 431
// end ;
32622: GO 32583
32624: POP
32625: POP
// end ; for i = 1 to personel do
32626: LD_ADDR_VAR 0 8
32630: PUSH
32631: DOUBLE
32632: LD_INT 1
32634: DEC
32635: ST_TO_ADDR
32636: LD_VAR 0 6
32640: PUSH
32641: FOR_TO
32642: IFFALSE 33706
// begin if i > 4 then
32644: LD_VAR 0 8
32648: PUSH
32649: LD_INT 4
32651: GREATER
32652: IFFALSE 32656
// break ;
32654: GO 33706
// case i of 1 :
32656: LD_VAR 0 8
32660: PUSH
32661: LD_INT 1
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32749
32669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32670: LD_ADDR_VAR 0 12
32674: PUSH
32675: LD_VAR 0 18
32679: PPUSH
32680: LD_INT 22
32682: PUSH
32683: LD_VAR 0 16
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 58
32694: PUSH
32695: EMPTY
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: LD_INT 30
32703: PUSH
32704: LD_INT 32
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 30
32713: PUSH
32714: LD_INT 4
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 30
32723: PUSH
32724: LD_INT 5
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: PPUSH
32742: CALL_OW 72
32746: ST_TO_ADDR
32747: GO 32971
32749: LD_INT 2
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32819
32757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32758: LD_ADDR_VAR 0 12
32762: PUSH
32763: LD_VAR 0 18
32767: PPUSH
32768: LD_INT 22
32770: PUSH
32771: LD_VAR 0 16
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 30
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PPUSH
32812: CALL_OW 72
32816: ST_TO_ADDR
32817: GO 32971
32819: LD_INT 3
32821: DOUBLE
32822: EQUAL
32823: IFTRUE 32827
32825: GO 32889
32827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32828: LD_ADDR_VAR 0 12
32832: PUSH
32833: LD_VAR 0 18
32837: PPUSH
32838: LD_INT 22
32840: PUSH
32841: LD_VAR 0 16
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 30
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 30
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PPUSH
32882: CALL_OW 72
32886: ST_TO_ADDR
32887: GO 32971
32889: LD_INT 4
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32970
32897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32898: LD_ADDR_VAR 0 12
32902: PUSH
32903: LD_VAR 0 18
32907: PPUSH
32908: LD_INT 22
32910: PUSH
32911: LD_VAR 0 16
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: LD_INT 30
32925: PUSH
32926: LD_INT 6
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 30
32935: PUSH
32936: LD_INT 7
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 30
32945: PUSH
32946: LD_INT 8
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PPUSH
32963: CALL_OW 72
32967: ST_TO_ADDR
32968: GO 32971
32970: POP
// if i = 1 then
32971: LD_VAR 0 8
32975: PUSH
32976: LD_INT 1
32978: EQUAL
32979: IFFALSE 33090
// begin tmp := [ ] ;
32981: LD_ADDR_VAR 0 19
32985: PUSH
32986: EMPTY
32987: ST_TO_ADDR
// for j in f do
32988: LD_ADDR_VAR 0 9
32992: PUSH
32993: LD_VAR 0 12
32997: PUSH
32998: FOR_IN
32999: IFFALSE 33072
// if GetBType ( j ) = b_bunker then
33001: LD_VAR 0 9
33005: PPUSH
33006: CALL_OW 266
33010: PUSH
33011: LD_INT 32
33013: EQUAL
33014: IFFALSE 33041
// tmp := Insert ( tmp , 1 , j ) else
33016: LD_ADDR_VAR 0 19
33020: PUSH
33021: LD_VAR 0 19
33025: PPUSH
33026: LD_INT 1
33028: PPUSH
33029: LD_VAR 0 9
33033: PPUSH
33034: CALL_OW 2
33038: ST_TO_ADDR
33039: GO 33070
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33041: LD_ADDR_VAR 0 19
33045: PUSH
33046: LD_VAR 0 19
33050: PPUSH
33051: LD_VAR 0 19
33055: PUSH
33056: LD_INT 1
33058: PLUS
33059: PPUSH
33060: LD_VAR 0 9
33064: PPUSH
33065: CALL_OW 2
33069: ST_TO_ADDR
33070: GO 32998
33072: POP
33073: POP
// if tmp then
33074: LD_VAR 0 19
33078: IFFALSE 33090
// f := tmp ;
33080: LD_ADDR_VAR 0 12
33084: PUSH
33085: LD_VAR 0 19
33089: ST_TO_ADDR
// end ; x := personel [ i ] ;
33090: LD_ADDR_VAR 0 13
33094: PUSH
33095: LD_VAR 0 6
33099: PUSH
33100: LD_VAR 0 8
33104: ARRAY
33105: ST_TO_ADDR
// if x = - 1 then
33106: LD_VAR 0 13
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: EQUAL
33115: IFFALSE 33324
// begin for j in f do
33117: LD_ADDR_VAR 0 9
33121: PUSH
33122: LD_VAR 0 12
33126: PUSH
33127: FOR_IN
33128: IFFALSE 33320
// repeat InitHc ;
33130: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33134: LD_VAR 0 9
33138: PPUSH
33139: CALL_OW 266
33143: PUSH
33144: LD_INT 5
33146: EQUAL
33147: IFFALSE 33217
// begin if UnitsInside ( j ) < 3 then
33149: LD_VAR 0 9
33153: PPUSH
33154: CALL_OW 313
33158: PUSH
33159: LD_INT 3
33161: LESS
33162: IFFALSE 33198
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33164: LD_INT 0
33166: PPUSH
33167: LD_INT 5
33169: PUSH
33170: LD_INT 8
33172: PUSH
33173: LD_INT 9
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: PUSH
33181: LD_VAR 0 17
33185: ARRAY
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: CALL_OW 380
33196: GO 33215
// PrepareHuman ( false , i , skill ) ;
33198: LD_INT 0
33200: PPUSH
33201: LD_VAR 0 8
33205: PPUSH
33206: LD_VAR 0 4
33210: PPUSH
33211: CALL_OW 380
// end else
33215: GO 33234
// PrepareHuman ( false , i , skill ) ;
33217: LD_INT 0
33219: PPUSH
33220: LD_VAR 0 8
33224: PPUSH
33225: LD_VAR 0 4
33229: PPUSH
33230: CALL_OW 380
// un := CreateHuman ;
33234: LD_ADDR_VAR 0 14
33238: PUSH
33239: CALL_OW 44
33243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33244: LD_ADDR_VAR 0 7
33248: PUSH
33249: LD_VAR 0 7
33253: PPUSH
33254: LD_INT 1
33256: PPUSH
33257: LD_VAR 0 14
33261: PPUSH
33262: CALL_OW 2
33266: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33267: LD_VAR 0 14
33271: PPUSH
33272: LD_VAR 0 9
33276: PPUSH
33277: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33281: LD_VAR 0 9
33285: PPUSH
33286: CALL_OW 313
33290: PUSH
33291: LD_INT 6
33293: EQUAL
33294: PUSH
33295: LD_VAR 0 9
33299: PPUSH
33300: CALL_OW 266
33304: PUSH
33305: LD_INT 32
33307: PUSH
33308: LD_INT 31
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: IN
33315: OR
33316: IFFALSE 33130
33318: GO 33127
33320: POP
33321: POP
// end else
33322: GO 33704
// for j = 1 to x do
33324: LD_ADDR_VAR 0 9
33328: PUSH
33329: DOUBLE
33330: LD_INT 1
33332: DEC
33333: ST_TO_ADDR
33334: LD_VAR 0 13
33338: PUSH
33339: FOR_TO
33340: IFFALSE 33702
// begin InitHc ;
33342: CALL_OW 19
// if not f then
33346: LD_VAR 0 12
33350: NOT
33351: IFFALSE 33440
// begin PrepareHuman ( false , i , skill ) ;
33353: LD_INT 0
33355: PPUSH
33356: LD_VAR 0 8
33360: PPUSH
33361: LD_VAR 0 4
33365: PPUSH
33366: CALL_OW 380
// un := CreateHuman ;
33370: LD_ADDR_VAR 0 14
33374: PUSH
33375: CALL_OW 44
33379: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33380: LD_ADDR_VAR 0 7
33384: PUSH
33385: LD_VAR 0 7
33389: PPUSH
33390: LD_INT 1
33392: PPUSH
33393: LD_VAR 0 14
33397: PPUSH
33398: CALL_OW 2
33402: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33403: LD_VAR 0 14
33407: PPUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL_OW 250
33417: PPUSH
33418: LD_VAR 0 1
33422: PPUSH
33423: CALL_OW 251
33427: PPUSH
33428: LD_INT 10
33430: PPUSH
33431: LD_INT 0
33433: PPUSH
33434: CALL_OW 50
// continue ;
33438: GO 33339
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33440: LD_VAR 0 12
33444: PUSH
33445: LD_INT 1
33447: ARRAY
33448: PPUSH
33449: CALL_OW 313
33453: PUSH
33454: LD_VAR 0 12
33458: PUSH
33459: LD_INT 1
33461: ARRAY
33462: PPUSH
33463: CALL_OW 266
33467: PUSH
33468: LD_INT 32
33470: PUSH
33471: LD_INT 31
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: IN
33478: AND
33479: PUSH
33480: LD_VAR 0 12
33484: PUSH
33485: LD_INT 1
33487: ARRAY
33488: PPUSH
33489: CALL_OW 313
33493: PUSH
33494: LD_INT 6
33496: EQUAL
33497: OR
33498: IFFALSE 33518
// f := Delete ( f , 1 ) ;
33500: LD_ADDR_VAR 0 12
33504: PUSH
33505: LD_VAR 0 12
33509: PPUSH
33510: LD_INT 1
33512: PPUSH
33513: CALL_OW 3
33517: ST_TO_ADDR
// if not f then
33518: LD_VAR 0 12
33522: NOT
33523: IFFALSE 33541
// begin x := x + 2 ;
33525: LD_ADDR_VAR 0 13
33529: PUSH
33530: LD_VAR 0 13
33534: PUSH
33535: LD_INT 2
33537: PLUS
33538: ST_TO_ADDR
// continue ;
33539: GO 33339
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33541: LD_VAR 0 12
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: PPUSH
33550: CALL_OW 266
33554: PUSH
33555: LD_INT 5
33557: EQUAL
33558: IFFALSE 33632
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33560: LD_VAR 0 12
33564: PUSH
33565: LD_INT 1
33567: ARRAY
33568: PPUSH
33569: CALL_OW 313
33573: PUSH
33574: LD_INT 3
33576: LESS
33577: IFFALSE 33613
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33579: LD_INT 0
33581: PPUSH
33582: LD_INT 5
33584: PUSH
33585: LD_INT 8
33587: PUSH
33588: LD_INT 9
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: LD_VAR 0 17
33600: ARRAY
33601: PPUSH
33602: LD_VAR 0 4
33606: PPUSH
33607: CALL_OW 380
33611: GO 33630
// PrepareHuman ( false , i , skill ) ;
33613: LD_INT 0
33615: PPUSH
33616: LD_VAR 0 8
33620: PPUSH
33621: LD_VAR 0 4
33625: PPUSH
33626: CALL_OW 380
// end else
33630: GO 33649
// PrepareHuman ( false , i , skill ) ;
33632: LD_INT 0
33634: PPUSH
33635: LD_VAR 0 8
33639: PPUSH
33640: LD_VAR 0 4
33644: PPUSH
33645: CALL_OW 380
// un := CreateHuman ;
33649: LD_ADDR_VAR 0 14
33653: PUSH
33654: CALL_OW 44
33658: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33659: LD_ADDR_VAR 0 7
33663: PUSH
33664: LD_VAR 0 7
33668: PPUSH
33669: LD_INT 1
33671: PPUSH
33672: LD_VAR 0 14
33676: PPUSH
33677: CALL_OW 2
33681: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33682: LD_VAR 0 14
33686: PPUSH
33687: LD_VAR 0 12
33691: PUSH
33692: LD_INT 1
33694: ARRAY
33695: PPUSH
33696: CALL_OW 52
// end ;
33700: GO 33339
33702: POP
33703: POP
// end ;
33704: GO 32641
33706: POP
33707: POP
// result := result ^ buildings ;
33708: LD_ADDR_VAR 0 7
33712: PUSH
33713: LD_VAR 0 7
33717: PUSH
33718: LD_VAR 0 18
33722: ADD
33723: ST_TO_ADDR
// end else
33724: GO 33867
// begin for i = 1 to personel do
33726: LD_ADDR_VAR 0 8
33730: PUSH
33731: DOUBLE
33732: LD_INT 1
33734: DEC
33735: ST_TO_ADDR
33736: LD_VAR 0 6
33740: PUSH
33741: FOR_TO
33742: IFFALSE 33865
// begin if i > 4 then
33744: LD_VAR 0 8
33748: PUSH
33749: LD_INT 4
33751: GREATER
33752: IFFALSE 33756
// break ;
33754: GO 33865
// x := personel [ i ] ;
33756: LD_ADDR_VAR 0 13
33760: PUSH
33761: LD_VAR 0 6
33765: PUSH
33766: LD_VAR 0 8
33770: ARRAY
33771: ST_TO_ADDR
// if x = - 1 then
33772: LD_VAR 0 13
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: EQUAL
33781: IFFALSE 33785
// continue ;
33783: GO 33741
// PrepareHuman ( false , i , skill ) ;
33785: LD_INT 0
33787: PPUSH
33788: LD_VAR 0 8
33792: PPUSH
33793: LD_VAR 0 4
33797: PPUSH
33798: CALL_OW 380
// un := CreateHuman ;
33802: LD_ADDR_VAR 0 14
33806: PUSH
33807: CALL_OW 44
33811: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33812: LD_VAR 0 14
33816: PPUSH
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 250
33826: PPUSH
33827: LD_VAR 0 1
33831: PPUSH
33832: CALL_OW 251
33836: PPUSH
33837: LD_INT 10
33839: PPUSH
33840: LD_INT 0
33842: PPUSH
33843: CALL_OW 50
// result := result ^ un ;
33847: LD_ADDR_VAR 0 7
33851: PUSH
33852: LD_VAR 0 7
33856: PUSH
33857: LD_VAR 0 14
33861: ADD
33862: ST_TO_ADDR
// end ;
33863: GO 33741
33865: POP
33866: POP
// end ; end ;
33867: LD_VAR 0 7
33871: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
// result := false ;
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 0
33897: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33898: LD_VAR 0 1
33902: NOT
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 266
33913: PUSH
33914: LD_INT 32
33916: PUSH
33917: LD_INT 33
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: IN
33924: NOT
33925: OR
33926: IFFALSE 33930
// exit ;
33928: GO 35039
// nat := GetNation ( tower ) ;
33930: LD_ADDR_VAR 0 12
33934: PUSH
33935: LD_VAR 0 1
33939: PPUSH
33940: CALL_OW 248
33944: ST_TO_ADDR
// side := GetSide ( tower ) ;
33945: LD_ADDR_VAR 0 16
33949: PUSH
33950: LD_VAR 0 1
33954: PPUSH
33955: CALL_OW 255
33959: ST_TO_ADDR
// x := GetX ( tower ) ;
33960: LD_ADDR_VAR 0 10
33964: PUSH
33965: LD_VAR 0 1
33969: PPUSH
33970: CALL_OW 250
33974: ST_TO_ADDR
// y := GetY ( tower ) ;
33975: LD_ADDR_VAR 0 11
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 251
33989: ST_TO_ADDR
// if not x or not y then
33990: LD_VAR 0 10
33994: NOT
33995: PUSH
33996: LD_VAR 0 11
34000: NOT
34001: OR
34002: IFFALSE 34006
// exit ;
34004: GO 35039
// weapon := 0 ;
34006: LD_ADDR_VAR 0 18
34010: PUSH
34011: LD_INT 0
34013: ST_TO_ADDR
// fac_list := [ ] ;
34014: LD_ADDR_VAR 0 17
34018: PUSH
34019: EMPTY
34020: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34021: LD_ADDR_VAR 0 6
34025: PUSH
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 274
34035: PPUSH
34036: LD_VAR 0 2
34040: PPUSH
34041: LD_INT 0
34043: PPUSH
34044: CALL 31610 0 3
34048: PPUSH
34049: LD_INT 30
34051: PUSH
34052: LD_INT 3
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PPUSH
34059: CALL_OW 72
34063: ST_TO_ADDR
// if not factories then
34064: LD_VAR 0 6
34068: NOT
34069: IFFALSE 34073
// exit ;
34071: GO 35039
// for i in factories do
34073: LD_ADDR_VAR 0 8
34077: PUSH
34078: LD_VAR 0 6
34082: PUSH
34083: FOR_IN
34084: IFFALSE 34109
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34086: LD_ADDR_VAR 0 17
34090: PUSH
34091: LD_VAR 0 17
34095: PUSH
34096: LD_VAR 0 8
34100: PPUSH
34101: CALL_OW 478
34105: UNION
34106: ST_TO_ADDR
34107: GO 34083
34109: POP
34110: POP
// if not fac_list then
34111: LD_VAR 0 17
34115: NOT
34116: IFFALSE 34120
// exit ;
34118: GO 35039
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34120: LD_ADDR_VAR 0 5
34124: PUSH
34125: LD_INT 4
34127: PUSH
34128: LD_INT 5
34130: PUSH
34131: LD_INT 9
34133: PUSH
34134: LD_INT 10
34136: PUSH
34137: LD_INT 6
34139: PUSH
34140: LD_INT 7
34142: PUSH
34143: LD_INT 11
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 27
34157: PUSH
34158: LD_INT 28
34160: PUSH
34161: LD_INT 26
34163: PUSH
34164: LD_INT 30
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 43
34175: PUSH
34176: LD_INT 44
34178: PUSH
34179: LD_INT 46
34181: PUSH
34182: LD_INT 45
34184: PUSH
34185: LD_INT 47
34187: PUSH
34188: LD_INT 49
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: PUSH
34204: LD_VAR 0 12
34208: ARRAY
34209: ST_TO_ADDR
// list := list isect fac_list ;
34210: LD_ADDR_VAR 0 5
34214: PUSH
34215: LD_VAR 0 5
34219: PUSH
34220: LD_VAR 0 17
34224: ISECT
34225: ST_TO_ADDR
// if not list then
34226: LD_VAR 0 5
34230: NOT
34231: IFFALSE 34235
// exit ;
34233: GO 35039
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34235: LD_VAR 0 12
34239: PUSH
34240: LD_INT 3
34242: EQUAL
34243: PUSH
34244: LD_INT 49
34246: PUSH
34247: LD_VAR 0 5
34251: IN
34252: AND
34253: PUSH
34254: LD_INT 31
34256: PPUSH
34257: LD_VAR 0 16
34261: PPUSH
34262: CALL_OW 321
34266: PUSH
34267: LD_INT 2
34269: EQUAL
34270: AND
34271: IFFALSE 34331
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34273: LD_INT 22
34275: PUSH
34276: LD_VAR 0 16
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 35
34287: PUSH
34288: LD_INT 49
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 91
34297: PUSH
34298: LD_VAR 0 1
34302: PUSH
34303: LD_INT 10
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: PPUSH
34316: CALL_OW 69
34320: NOT
34321: IFFALSE 34331
// weapon := ru_time_lapser ;
34323: LD_ADDR_VAR 0 18
34327: PUSH
34328: LD_INT 49
34330: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34331: LD_VAR 0 12
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: IN
34346: PUSH
34347: LD_INT 11
34349: PUSH
34350: LD_VAR 0 5
34354: IN
34355: PUSH
34356: LD_INT 30
34358: PUSH
34359: LD_VAR 0 5
34363: IN
34364: OR
34365: AND
34366: PUSH
34367: LD_INT 6
34369: PPUSH
34370: LD_VAR 0 16
34374: PPUSH
34375: CALL_OW 321
34379: PUSH
34380: LD_INT 2
34382: EQUAL
34383: AND
34384: IFFALSE 34549
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34386: LD_INT 22
34388: PUSH
34389: LD_VAR 0 16
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 35
34403: PUSH
34404: LD_INT 11
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 35
34413: PUSH
34414: LD_INT 30
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 91
34428: PUSH
34429: LD_VAR 0 1
34433: PUSH
34434: LD_INT 18
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: PPUSH
34447: CALL_OW 69
34451: NOT
34452: PUSH
34453: LD_INT 22
34455: PUSH
34456: LD_VAR 0 16
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 30
34470: PUSH
34471: LD_INT 32
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 30
34480: PUSH
34481: LD_INT 33
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 91
34495: PUSH
34496: LD_VAR 0 1
34500: PUSH
34501: LD_INT 12
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: PPUSH
34517: CALL_OW 69
34521: PUSH
34522: LD_INT 2
34524: GREATER
34525: AND
34526: IFFALSE 34549
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34528: LD_ADDR_VAR 0 18
34532: PUSH
34533: LD_INT 11
34535: PUSH
34536: LD_INT 30
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_VAR 0 12
34547: ARRAY
34548: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34549: LD_VAR 0 18
34553: NOT
34554: PUSH
34555: LD_INT 40
34557: PPUSH
34558: LD_VAR 0 16
34562: PPUSH
34563: CALL_OW 321
34567: PUSH
34568: LD_INT 2
34570: EQUAL
34571: AND
34572: PUSH
34573: LD_INT 7
34575: PUSH
34576: LD_VAR 0 5
34580: IN
34581: PUSH
34582: LD_INT 28
34584: PUSH
34585: LD_VAR 0 5
34589: IN
34590: OR
34591: PUSH
34592: LD_INT 45
34594: PUSH
34595: LD_VAR 0 5
34599: IN
34600: OR
34601: AND
34602: IFFALSE 34856
// begin hex := GetHexInfo ( x , y ) ;
34604: LD_ADDR_VAR 0 4
34608: PUSH
34609: LD_VAR 0 10
34613: PPUSH
34614: LD_VAR 0 11
34618: PPUSH
34619: CALL_OW 546
34623: ST_TO_ADDR
// if hex [ 1 ] then
34624: LD_VAR 0 4
34628: PUSH
34629: LD_INT 1
34631: ARRAY
34632: IFFALSE 34636
// exit ;
34634: GO 35039
// height := hex [ 2 ] ;
34636: LD_ADDR_VAR 0 15
34640: PUSH
34641: LD_VAR 0 4
34645: PUSH
34646: LD_INT 2
34648: ARRAY
34649: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34650: LD_ADDR_VAR 0 14
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: LD_INT 5
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: ST_TO_ADDR
// for i in tmp do
34673: LD_ADDR_VAR 0 8
34677: PUSH
34678: LD_VAR 0 14
34682: PUSH
34683: FOR_IN
34684: IFFALSE 34854
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34686: LD_ADDR_VAR 0 9
34690: PUSH
34691: LD_VAR 0 10
34695: PPUSH
34696: LD_VAR 0 8
34700: PPUSH
34701: LD_INT 5
34703: PPUSH
34704: CALL_OW 272
34708: PUSH
34709: LD_VAR 0 11
34713: PPUSH
34714: LD_VAR 0 8
34718: PPUSH
34719: LD_INT 5
34721: PPUSH
34722: CALL_OW 273
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34731: LD_VAR 0 9
34735: PUSH
34736: LD_INT 1
34738: ARRAY
34739: PPUSH
34740: LD_VAR 0 9
34744: PUSH
34745: LD_INT 2
34747: ARRAY
34748: PPUSH
34749: CALL_OW 488
34753: IFFALSE 34852
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34755: LD_ADDR_VAR 0 4
34759: PUSH
34760: LD_VAR 0 9
34764: PUSH
34765: LD_INT 1
34767: ARRAY
34768: PPUSH
34769: LD_VAR 0 9
34773: PUSH
34774: LD_INT 2
34776: ARRAY
34777: PPUSH
34778: CALL_OW 546
34782: ST_TO_ADDR
// if hex [ 1 ] then
34783: LD_VAR 0 4
34787: PUSH
34788: LD_INT 1
34790: ARRAY
34791: IFFALSE 34795
// continue ;
34793: GO 34683
// h := hex [ 2 ] ;
34795: LD_ADDR_VAR 0 13
34799: PUSH
34800: LD_VAR 0 4
34804: PUSH
34805: LD_INT 2
34807: ARRAY
34808: ST_TO_ADDR
// if h + 7 < height then
34809: LD_VAR 0 13
34813: PUSH
34814: LD_INT 7
34816: PLUS
34817: PUSH
34818: LD_VAR 0 15
34822: LESS
34823: IFFALSE 34852
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34825: LD_ADDR_VAR 0 18
34829: PUSH
34830: LD_INT 7
34832: PUSH
34833: LD_INT 28
34835: PUSH
34836: LD_INT 45
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: PUSH
34844: LD_VAR 0 12
34848: ARRAY
34849: ST_TO_ADDR
// break ;
34850: GO 34854
// end ; end ; end ;
34852: GO 34683
34854: POP
34855: POP
// end ; if not weapon then
34856: LD_VAR 0 18
34860: NOT
34861: IFFALSE 34921
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34863: LD_ADDR_VAR 0 5
34867: PUSH
34868: LD_VAR 0 5
34872: PUSH
34873: LD_INT 11
34875: PUSH
34876: LD_INT 30
34878: PUSH
34879: LD_INT 49
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: LIST
34886: DIFF
34887: ST_TO_ADDR
// if not list then
34888: LD_VAR 0 5
34892: NOT
34893: IFFALSE 34897
// exit ;
34895: GO 35039
// weapon := list [ rand ( 1 , list ) ] ;
34897: LD_ADDR_VAR 0 18
34901: PUSH
34902: LD_VAR 0 5
34906: PUSH
34907: LD_INT 1
34909: PPUSH
34910: LD_VAR 0 5
34914: PPUSH
34915: CALL_OW 12
34919: ARRAY
34920: ST_TO_ADDR
// end ; if weapon then
34921: LD_VAR 0 18
34925: IFFALSE 35039
// begin tmp := CostOfWeapon ( weapon ) ;
34927: LD_ADDR_VAR 0 14
34931: PUSH
34932: LD_VAR 0 18
34936: PPUSH
34937: CALL_OW 451
34941: ST_TO_ADDR
// j := GetBase ( tower ) ;
34942: LD_ADDR_VAR 0 9
34946: PUSH
34947: LD_VAR 0 1
34951: PPUSH
34952: CALL_OW 274
34956: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34957: LD_VAR 0 9
34961: PPUSH
34962: LD_INT 1
34964: PPUSH
34965: CALL_OW 275
34969: PUSH
34970: LD_VAR 0 14
34974: PUSH
34975: LD_INT 1
34977: ARRAY
34978: GREATEREQUAL
34979: PUSH
34980: LD_VAR 0 9
34984: PPUSH
34985: LD_INT 2
34987: PPUSH
34988: CALL_OW 275
34992: PUSH
34993: LD_VAR 0 14
34997: PUSH
34998: LD_INT 2
35000: ARRAY
35001: GREATEREQUAL
35002: AND
35003: PUSH
35004: LD_VAR 0 9
35008: PPUSH
35009: LD_INT 3
35011: PPUSH
35012: CALL_OW 275
35016: PUSH
35017: LD_VAR 0 14
35021: PUSH
35022: LD_INT 3
35024: ARRAY
35025: GREATEREQUAL
35026: AND
35027: IFFALSE 35039
// result := weapon ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_VAR 0 18
35038: ST_TO_ADDR
// end ; end ;
35039: LD_VAR 0 3
35043: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35044: LD_INT 0
35046: PPUSH
35047: PPUSH
// result := true ;
35048: LD_ADDR_VAR 0 3
35052: PUSH
35053: LD_INT 1
35055: ST_TO_ADDR
// if array1 = array2 then
35056: LD_VAR 0 1
35060: PUSH
35061: LD_VAR 0 2
35065: EQUAL
35066: IFFALSE 35126
// begin for i = 1 to array1 do
35068: LD_ADDR_VAR 0 4
35072: PUSH
35073: DOUBLE
35074: LD_INT 1
35076: DEC
35077: ST_TO_ADDR
35078: LD_VAR 0 1
35082: PUSH
35083: FOR_TO
35084: IFFALSE 35122
// if array1 [ i ] <> array2 [ i ] then
35086: LD_VAR 0 1
35090: PUSH
35091: LD_VAR 0 4
35095: ARRAY
35096: PUSH
35097: LD_VAR 0 2
35101: PUSH
35102: LD_VAR 0 4
35106: ARRAY
35107: NONEQUAL
35108: IFFALSE 35120
// begin result := false ;
35110: LD_ADDR_VAR 0 3
35114: PUSH
35115: LD_INT 0
35117: ST_TO_ADDR
// break ;
35118: GO 35122
// end ;
35120: GO 35083
35122: POP
35123: POP
// end else
35124: GO 35134
// result := false ;
35126: LD_ADDR_VAR 0 3
35130: PUSH
35131: LD_INT 0
35133: ST_TO_ADDR
// end ;
35134: LD_VAR 0 3
35138: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35139: LD_INT 0
35141: PPUSH
35142: PPUSH
// if not array1 or not array2 then
35143: LD_VAR 0 1
35147: NOT
35148: PUSH
35149: LD_VAR 0 2
35153: NOT
35154: OR
35155: IFFALSE 35159
// exit ;
35157: GO 35223
// result := true ;
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_INT 1
35166: ST_TO_ADDR
// for i = 1 to array1 do
35167: LD_ADDR_VAR 0 4
35171: PUSH
35172: DOUBLE
35173: LD_INT 1
35175: DEC
35176: ST_TO_ADDR
35177: LD_VAR 0 1
35181: PUSH
35182: FOR_TO
35183: IFFALSE 35221
// if array1 [ i ] <> array2 [ i ] then
35185: LD_VAR 0 1
35189: PUSH
35190: LD_VAR 0 4
35194: ARRAY
35195: PUSH
35196: LD_VAR 0 2
35200: PUSH
35201: LD_VAR 0 4
35205: ARRAY
35206: NONEQUAL
35207: IFFALSE 35219
// begin result := false ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_INT 0
35216: ST_TO_ADDR
// break ;
35217: GO 35221
// end ;
35219: GO 35182
35221: POP
35222: POP
// end ;
35223: LD_VAR 0 3
35227: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35228: LD_INT 0
35230: PPUSH
35231: PPUSH
35232: PPUSH
// pom := GetBase ( fac ) ;
35233: LD_ADDR_VAR 0 5
35237: PUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 274
35247: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35248: LD_ADDR_VAR 0 4
35252: PUSH
35253: LD_VAR 0 2
35257: PUSH
35258: LD_INT 1
35260: ARRAY
35261: PPUSH
35262: LD_VAR 0 2
35266: PUSH
35267: LD_INT 2
35269: ARRAY
35270: PPUSH
35271: LD_VAR 0 2
35275: PUSH
35276: LD_INT 3
35278: ARRAY
35279: PPUSH
35280: LD_VAR 0 2
35284: PUSH
35285: LD_INT 4
35287: ARRAY
35288: PPUSH
35289: CALL_OW 449
35293: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35294: LD_ADDR_VAR 0 3
35298: PUSH
35299: LD_VAR 0 5
35303: PPUSH
35304: LD_INT 1
35306: PPUSH
35307: CALL_OW 275
35311: PUSH
35312: LD_VAR 0 4
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: GREATEREQUAL
35321: PUSH
35322: LD_VAR 0 5
35326: PPUSH
35327: LD_INT 2
35329: PPUSH
35330: CALL_OW 275
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: GREATEREQUAL
35344: AND
35345: PUSH
35346: LD_VAR 0 5
35350: PPUSH
35351: LD_INT 3
35353: PPUSH
35354: CALL_OW 275
35358: PUSH
35359: LD_VAR 0 4
35363: PUSH
35364: LD_INT 3
35366: ARRAY
35367: GREATEREQUAL
35368: AND
35369: ST_TO_ADDR
// end ;
35370: LD_VAR 0 3
35374: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
// pom := GetBase ( building ) ;
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 274
35395: ST_TO_ADDR
// if not pom then
35396: LD_VAR 0 3
35400: NOT
35401: IFFALSE 35405
// exit ;
35403: GO 35575
// btype := GetBType ( building ) ;
35405: LD_ADDR_VAR 0 5
35409: PUSH
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL_OW 266
35419: ST_TO_ADDR
// if btype = b_armoury then
35420: LD_VAR 0 5
35424: PUSH
35425: LD_INT 4
35427: EQUAL
35428: IFFALSE 35438
// btype := b_barracks ;
35430: LD_ADDR_VAR 0 5
35434: PUSH
35435: LD_INT 5
35437: ST_TO_ADDR
// if btype = b_depot then
35438: LD_VAR 0 5
35442: PUSH
35443: LD_INT 0
35445: EQUAL
35446: IFFALSE 35456
// btype := b_warehouse ;
35448: LD_ADDR_VAR 0 5
35452: PUSH
35453: LD_INT 1
35455: ST_TO_ADDR
// if btype = b_workshop then
35456: LD_VAR 0 5
35460: PUSH
35461: LD_INT 2
35463: EQUAL
35464: IFFALSE 35474
// btype := b_factory ;
35466: LD_ADDR_VAR 0 5
35470: PUSH
35471: LD_INT 3
35473: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35474: LD_ADDR_VAR 0 4
35478: PUSH
35479: LD_VAR 0 5
35483: PPUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: CALL_OW 248
35493: PPUSH
35494: CALL_OW 450
35498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35499: LD_ADDR_VAR 0 2
35503: PUSH
35504: LD_VAR 0 3
35508: PPUSH
35509: LD_INT 1
35511: PPUSH
35512: CALL_OW 275
35516: PUSH
35517: LD_VAR 0 4
35521: PUSH
35522: LD_INT 1
35524: ARRAY
35525: GREATEREQUAL
35526: PUSH
35527: LD_VAR 0 3
35531: PPUSH
35532: LD_INT 2
35534: PPUSH
35535: CALL_OW 275
35539: PUSH
35540: LD_VAR 0 4
35544: PUSH
35545: LD_INT 2
35547: ARRAY
35548: GREATEREQUAL
35549: AND
35550: PUSH
35551: LD_VAR 0 3
35555: PPUSH
35556: LD_INT 3
35558: PPUSH
35559: CALL_OW 275
35563: PUSH
35564: LD_VAR 0 4
35568: PUSH
35569: LD_INT 3
35571: ARRAY
35572: GREATEREQUAL
35573: AND
35574: ST_TO_ADDR
// end ;
35575: LD_VAR 0 2
35579: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35580: LD_INT 0
35582: PPUSH
35583: PPUSH
35584: PPUSH
// pom := GetBase ( building ) ;
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL_OW 274
35599: ST_TO_ADDR
// if not pom then
35600: LD_VAR 0 4
35604: NOT
35605: IFFALSE 35609
// exit ;
35607: GO 35710
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: LD_VAR 0 2
35618: PPUSH
35619: LD_VAR 0 1
35623: PPUSH
35624: CALL_OW 248
35628: PPUSH
35629: CALL_OW 450
35633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35634: LD_ADDR_VAR 0 3
35638: PUSH
35639: LD_VAR 0 4
35643: PPUSH
35644: LD_INT 1
35646: PPUSH
35647: CALL_OW 275
35651: PUSH
35652: LD_VAR 0 5
35656: PUSH
35657: LD_INT 1
35659: ARRAY
35660: GREATEREQUAL
35661: PUSH
35662: LD_VAR 0 4
35666: PPUSH
35667: LD_INT 2
35669: PPUSH
35670: CALL_OW 275
35674: PUSH
35675: LD_VAR 0 5
35679: PUSH
35680: LD_INT 2
35682: ARRAY
35683: GREATEREQUAL
35684: AND
35685: PUSH
35686: LD_VAR 0 4
35690: PPUSH
35691: LD_INT 3
35693: PPUSH
35694: CALL_OW 275
35698: PUSH
35699: LD_VAR 0 5
35703: PUSH
35704: LD_INT 3
35706: ARRAY
35707: GREATEREQUAL
35708: AND
35709: ST_TO_ADDR
// end ;
35710: LD_VAR 0 3
35714: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35715: LD_INT 0
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
// result := false ;
35728: LD_ADDR_VAR 0 8
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35736: LD_VAR 0 5
35740: NOT
35741: PUSH
35742: LD_VAR 0 1
35746: NOT
35747: OR
35748: PUSH
35749: LD_VAR 0 2
35753: NOT
35754: OR
35755: PUSH
35756: LD_VAR 0 3
35760: NOT
35761: OR
35762: IFFALSE 35766
// exit ;
35764: GO 36580
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35766: LD_ADDR_VAR 0 14
35770: PUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: LD_VAR 0 2
35780: PPUSH
35781: LD_VAR 0 3
35785: PPUSH
35786: LD_VAR 0 4
35790: PPUSH
35791: LD_VAR 0 5
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: CALL_OW 248
35804: PPUSH
35805: LD_INT 0
35807: PPUSH
35808: CALL 37833 0 6
35812: ST_TO_ADDR
// if not hexes then
35813: LD_VAR 0 14
35817: NOT
35818: IFFALSE 35822
// exit ;
35820: GO 36580
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35822: LD_ADDR_VAR 0 17
35826: PUSH
35827: LD_VAR 0 5
35831: PPUSH
35832: LD_INT 22
35834: PUSH
35835: LD_VAR 0 13
35839: PPUSH
35840: CALL_OW 255
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 30
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 30
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PPUSH
35881: CALL_OW 72
35885: ST_TO_ADDR
// for i = 1 to hexes do
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: DOUBLE
35892: LD_INT 1
35894: DEC
35895: ST_TO_ADDR
35896: LD_VAR 0 14
35900: PUSH
35901: FOR_TO
35902: IFFALSE 36578
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35904: LD_ADDR_VAR 0 13
35908: PUSH
35909: LD_VAR 0 14
35913: PUSH
35914: LD_VAR 0 9
35918: ARRAY
35919: PUSH
35920: LD_INT 1
35922: ARRAY
35923: PPUSH
35924: LD_VAR 0 14
35928: PUSH
35929: LD_VAR 0 9
35933: ARRAY
35934: PUSH
35935: LD_INT 2
35937: ARRAY
35938: PPUSH
35939: CALL_OW 428
35943: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35944: LD_VAR 0 14
35948: PUSH
35949: LD_VAR 0 9
35953: ARRAY
35954: PUSH
35955: LD_INT 1
35957: ARRAY
35958: PPUSH
35959: LD_VAR 0 14
35963: PUSH
35964: LD_VAR 0 9
35968: ARRAY
35969: PUSH
35970: LD_INT 2
35972: ARRAY
35973: PPUSH
35974: CALL_OW 351
35978: PUSH
35979: LD_VAR 0 14
35983: PUSH
35984: LD_VAR 0 9
35988: ARRAY
35989: PUSH
35990: LD_INT 1
35992: ARRAY
35993: PPUSH
35994: LD_VAR 0 14
35998: PUSH
35999: LD_VAR 0 9
36003: ARRAY
36004: PUSH
36005: LD_INT 2
36007: ARRAY
36008: PPUSH
36009: CALL_OW 488
36013: NOT
36014: OR
36015: PUSH
36016: LD_VAR 0 13
36020: PPUSH
36021: CALL_OW 247
36025: PUSH
36026: LD_INT 3
36028: EQUAL
36029: OR
36030: IFFALSE 36036
// exit ;
36032: POP
36033: POP
36034: GO 36580
// if not tmp then
36036: LD_VAR 0 13
36040: NOT
36041: IFFALSE 36045
// continue ;
36043: GO 35901
// result := true ;
36045: LD_ADDR_VAR 0 8
36049: PUSH
36050: LD_INT 1
36052: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36053: LD_VAR 0 6
36057: PUSH
36058: LD_VAR 0 13
36062: PPUSH
36063: CALL_OW 247
36067: PUSH
36068: LD_INT 2
36070: EQUAL
36071: AND
36072: PUSH
36073: LD_VAR 0 13
36077: PPUSH
36078: CALL_OW 263
36082: PUSH
36083: LD_INT 1
36085: EQUAL
36086: AND
36087: IFFALSE 36251
// begin if IsDrivenBy ( tmp ) then
36089: LD_VAR 0 13
36093: PPUSH
36094: CALL_OW 311
36098: IFFALSE 36102
// continue ;
36100: GO 35901
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36102: LD_VAR 0 6
36106: PPUSH
36107: LD_INT 3
36109: PUSH
36110: LD_INT 60
36112: PUSH
36113: EMPTY
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 3
36122: PUSH
36123: LD_INT 55
36125: PUSH
36126: EMPTY
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PPUSH
36137: CALL_OW 72
36141: IFFALSE 36249
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36143: LD_ADDR_VAR 0 18
36147: PUSH
36148: LD_VAR 0 6
36152: PPUSH
36153: LD_INT 3
36155: PUSH
36156: LD_INT 60
36158: PUSH
36159: EMPTY
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 55
36171: PUSH
36172: EMPTY
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PPUSH
36183: CALL_OW 72
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: ST_TO_ADDR
// if IsInUnit ( driver ) then
36192: LD_VAR 0 18
36196: PPUSH
36197: CALL_OW 310
36201: IFFALSE 36212
// ComExit ( driver ) ;
36203: LD_VAR 0 18
36207: PPUSH
36208: CALL 61625 0 1
// AddComEnterUnit ( driver , tmp ) ;
36212: LD_VAR 0 18
36216: PPUSH
36217: LD_VAR 0 13
36221: PPUSH
36222: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36226: LD_VAR 0 18
36230: PPUSH
36231: LD_VAR 0 7
36235: PPUSH
36236: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36240: LD_VAR 0 18
36244: PPUSH
36245: CALL_OW 181
// end ; continue ;
36249: GO 35901
// end ; if not cleaners or not tmp in cleaners then
36251: LD_VAR 0 6
36255: NOT
36256: PUSH
36257: LD_VAR 0 13
36261: PUSH
36262: LD_VAR 0 6
36266: IN
36267: NOT
36268: OR
36269: IFFALSE 36576
// begin if dep then
36271: LD_VAR 0 17
36275: IFFALSE 36411
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36277: LD_ADDR_VAR 0 16
36281: PUSH
36282: LD_VAR 0 17
36286: PUSH
36287: LD_INT 1
36289: ARRAY
36290: PPUSH
36291: CALL_OW 250
36295: PPUSH
36296: LD_VAR 0 17
36300: PUSH
36301: LD_INT 1
36303: ARRAY
36304: PPUSH
36305: CALL_OW 254
36309: PPUSH
36310: LD_INT 5
36312: PPUSH
36313: CALL_OW 272
36317: PUSH
36318: LD_VAR 0 17
36322: PUSH
36323: LD_INT 1
36325: ARRAY
36326: PPUSH
36327: CALL_OW 251
36331: PPUSH
36332: LD_VAR 0 17
36336: PUSH
36337: LD_INT 1
36339: ARRAY
36340: PPUSH
36341: CALL_OW 254
36345: PPUSH
36346: LD_INT 5
36348: PPUSH
36349: CALL_OW 273
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36358: LD_VAR 0 16
36362: PUSH
36363: LD_INT 1
36365: ARRAY
36366: PPUSH
36367: LD_VAR 0 16
36371: PUSH
36372: LD_INT 2
36374: ARRAY
36375: PPUSH
36376: CALL_OW 488
36380: IFFALSE 36411
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36382: LD_VAR 0 13
36386: PPUSH
36387: LD_VAR 0 16
36391: PUSH
36392: LD_INT 1
36394: ARRAY
36395: PPUSH
36396: LD_VAR 0 16
36400: PUSH
36401: LD_INT 2
36403: ARRAY
36404: PPUSH
36405: CALL_OW 111
// continue ;
36409: GO 35901
// end ; end ; r := GetDir ( tmp ) ;
36411: LD_ADDR_VAR 0 15
36415: PUSH
36416: LD_VAR 0 13
36420: PPUSH
36421: CALL_OW 254
36425: ST_TO_ADDR
// if r = 5 then
36426: LD_VAR 0 15
36430: PUSH
36431: LD_INT 5
36433: EQUAL
36434: IFFALSE 36444
// r := 0 ;
36436: LD_ADDR_VAR 0 15
36440: PUSH
36441: LD_INT 0
36443: ST_TO_ADDR
// for j = r to 5 do
36444: LD_ADDR_VAR 0 10
36448: PUSH
36449: DOUBLE
36450: LD_VAR 0 15
36454: DEC
36455: ST_TO_ADDR
36456: LD_INT 5
36458: PUSH
36459: FOR_TO
36460: IFFALSE 36574
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36462: LD_ADDR_VAR 0 11
36466: PUSH
36467: LD_VAR 0 13
36471: PPUSH
36472: CALL_OW 250
36476: PPUSH
36477: LD_VAR 0 10
36481: PPUSH
36482: LD_INT 2
36484: PPUSH
36485: CALL_OW 272
36489: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36490: LD_ADDR_VAR 0 12
36494: PUSH
36495: LD_VAR 0 13
36499: PPUSH
36500: CALL_OW 251
36504: PPUSH
36505: LD_VAR 0 10
36509: PPUSH
36510: LD_INT 2
36512: PPUSH
36513: CALL_OW 273
36517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36518: LD_VAR 0 11
36522: PPUSH
36523: LD_VAR 0 12
36527: PPUSH
36528: CALL_OW 488
36532: PUSH
36533: LD_VAR 0 11
36537: PPUSH
36538: LD_VAR 0 12
36542: PPUSH
36543: CALL_OW 428
36547: NOT
36548: AND
36549: IFFALSE 36572
// begin ComMoveXY ( tmp , _x , _y ) ;
36551: LD_VAR 0 13
36555: PPUSH
36556: LD_VAR 0 11
36560: PPUSH
36561: LD_VAR 0 12
36565: PPUSH
36566: CALL_OW 111
// break ;
36570: GO 36574
// end ; end ;
36572: GO 36459
36574: POP
36575: POP
// end ; end ;
36576: GO 35901
36578: POP
36579: POP
// end ;
36580: LD_VAR 0 8
36584: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36585: LD_INT 0
36587: PPUSH
// result := true ;
36588: LD_ADDR_VAR 0 3
36592: PUSH
36593: LD_INT 1
36595: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36596: LD_VAR 0 2
36600: PUSH
36601: LD_INT 24
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36615
36607: LD_INT 33
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36615
36613: GO 36640
36615: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_INT 32
36623: PPUSH
36624: LD_VAR 0 1
36628: PPUSH
36629: CALL_OW 321
36633: PUSH
36634: LD_INT 2
36636: EQUAL
36637: ST_TO_ADDR
36638: GO 36956
36640: LD_INT 20
36642: DOUBLE
36643: EQUAL
36644: IFTRUE 36648
36646: GO 36673
36648: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36649: LD_ADDR_VAR 0 3
36653: PUSH
36654: LD_INT 6
36656: PPUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 321
36666: PUSH
36667: LD_INT 2
36669: EQUAL
36670: ST_TO_ADDR
36671: GO 36956
36673: LD_INT 22
36675: DOUBLE
36676: EQUAL
36677: IFTRUE 36687
36679: LD_INT 36
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36687
36685: GO 36712
36687: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36688: LD_ADDR_VAR 0 3
36692: PUSH
36693: LD_INT 15
36695: PPUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 321
36705: PUSH
36706: LD_INT 2
36708: EQUAL
36709: ST_TO_ADDR
36710: GO 36956
36712: LD_INT 30
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36745
36720: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36721: LD_ADDR_VAR 0 3
36725: PUSH
36726: LD_INT 20
36728: PPUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 321
36738: PUSH
36739: LD_INT 2
36741: EQUAL
36742: ST_TO_ADDR
36743: GO 36956
36745: LD_INT 28
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36759
36751: LD_INT 21
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36759
36757: GO 36784
36759: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36760: LD_ADDR_VAR 0 3
36764: PUSH
36765: LD_INT 21
36767: PPUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 321
36777: PUSH
36778: LD_INT 2
36780: EQUAL
36781: ST_TO_ADDR
36782: GO 36956
36784: LD_INT 16
36786: DOUBLE
36787: EQUAL
36788: IFTRUE 36792
36790: GO 36817
36792: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36793: LD_ADDR_VAR 0 3
36797: PUSH
36798: LD_INT 84
36800: PPUSH
36801: LD_VAR 0 1
36805: PPUSH
36806: CALL_OW 321
36810: PUSH
36811: LD_INT 2
36813: EQUAL
36814: ST_TO_ADDR
36815: GO 36956
36817: LD_INT 19
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36831
36823: LD_INT 23
36825: DOUBLE
36826: EQUAL
36827: IFTRUE 36831
36829: GO 36856
36831: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36832: LD_ADDR_VAR 0 3
36836: PUSH
36837: LD_INT 83
36839: PPUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 321
36849: PUSH
36850: LD_INT 2
36852: EQUAL
36853: ST_TO_ADDR
36854: GO 36956
36856: LD_INT 17
36858: DOUBLE
36859: EQUAL
36860: IFTRUE 36864
36862: GO 36889
36864: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36865: LD_ADDR_VAR 0 3
36869: PUSH
36870: LD_INT 39
36872: PPUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 321
36882: PUSH
36883: LD_INT 2
36885: EQUAL
36886: ST_TO_ADDR
36887: GO 36956
36889: LD_INT 18
36891: DOUBLE
36892: EQUAL
36893: IFTRUE 36897
36895: GO 36922
36897: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36898: LD_ADDR_VAR 0 3
36902: PUSH
36903: LD_INT 40
36905: PPUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 321
36915: PUSH
36916: LD_INT 2
36918: EQUAL
36919: ST_TO_ADDR
36920: GO 36956
36922: LD_INT 27
36924: DOUBLE
36925: EQUAL
36926: IFTRUE 36930
36928: GO 36955
36930: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_INT 35
36938: PPUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 321
36948: PUSH
36949: LD_INT 2
36951: EQUAL
36952: ST_TO_ADDR
36953: GO 36956
36955: POP
// end ;
36956: LD_VAR 0 3
36960: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36961: LD_INT 0
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
// result := false ;
36974: LD_ADDR_VAR 0 6
36978: PUSH
36979: LD_INT 0
36981: ST_TO_ADDR
// if btype = b_depot then
36982: LD_VAR 0 2
36986: PUSH
36987: LD_INT 0
36989: EQUAL
36990: IFFALSE 37002
// begin result := true ;
36992: LD_ADDR_VAR 0 6
36996: PUSH
36997: LD_INT 1
36999: ST_TO_ADDR
// exit ;
37000: GO 37828
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37002: LD_VAR 0 1
37006: NOT
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 266
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: IN
37028: NOT
37029: OR
37030: PUSH
37031: LD_VAR 0 2
37035: NOT
37036: OR
37037: PUSH
37038: LD_VAR 0 5
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: LD_INT 4
37057: PUSH
37058: LD_INT 5
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: IN
37069: NOT
37070: OR
37071: PUSH
37072: LD_VAR 0 3
37076: PPUSH
37077: LD_VAR 0 4
37081: PPUSH
37082: CALL_OW 488
37086: NOT
37087: OR
37088: IFFALSE 37092
// exit ;
37090: GO 37828
// side := GetSide ( depot ) ;
37092: LD_ADDR_VAR 0 9
37096: PUSH
37097: LD_VAR 0 1
37101: PPUSH
37102: CALL_OW 255
37106: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37107: LD_VAR 0 9
37111: PPUSH
37112: LD_VAR 0 2
37116: PPUSH
37117: CALL 36585 0 2
37121: NOT
37122: IFFALSE 37126
// exit ;
37124: GO 37828
// pom := GetBase ( depot ) ;
37126: LD_ADDR_VAR 0 10
37130: PUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: CALL_OW 274
37140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37141: LD_ADDR_VAR 0 11
37145: PUSH
37146: LD_VAR 0 2
37150: PPUSH
37151: LD_VAR 0 1
37155: PPUSH
37156: CALL_OW 248
37160: PPUSH
37161: CALL_OW 450
37165: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37166: LD_VAR 0 10
37170: PPUSH
37171: LD_INT 1
37173: PPUSH
37174: CALL_OW 275
37178: PUSH
37179: LD_VAR 0 11
37183: PUSH
37184: LD_INT 1
37186: ARRAY
37187: GREATEREQUAL
37188: PUSH
37189: LD_VAR 0 10
37193: PPUSH
37194: LD_INT 2
37196: PPUSH
37197: CALL_OW 275
37201: PUSH
37202: LD_VAR 0 11
37206: PUSH
37207: LD_INT 2
37209: ARRAY
37210: GREATEREQUAL
37211: AND
37212: PUSH
37213: LD_VAR 0 10
37217: PPUSH
37218: LD_INT 3
37220: PPUSH
37221: CALL_OW 275
37225: PUSH
37226: LD_VAR 0 11
37230: PUSH
37231: LD_INT 3
37233: ARRAY
37234: GREATEREQUAL
37235: AND
37236: NOT
37237: IFFALSE 37241
// exit ;
37239: GO 37828
// if GetBType ( depot ) = b_depot then
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 266
37250: PUSH
37251: LD_INT 0
37253: EQUAL
37254: IFFALSE 37266
// dist := 28 else
37256: LD_ADDR_VAR 0 14
37260: PUSH
37261: LD_INT 28
37263: ST_TO_ADDR
37264: GO 37274
// dist := 36 ;
37266: LD_ADDR_VAR 0 14
37270: PUSH
37271: LD_INT 36
37273: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 3
37283: PPUSH
37284: LD_VAR 0 4
37288: PPUSH
37289: CALL_OW 297
37293: PUSH
37294: LD_VAR 0 14
37298: GREATER
37299: IFFALSE 37303
// exit ;
37301: GO 37828
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37303: LD_ADDR_VAR 0 12
37307: PUSH
37308: LD_VAR 0 2
37312: PPUSH
37313: LD_VAR 0 3
37317: PPUSH
37318: LD_VAR 0 4
37322: PPUSH
37323: LD_VAR 0 5
37327: PPUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 248
37337: PPUSH
37338: LD_INT 0
37340: PPUSH
37341: CALL 37833 0 6
37345: ST_TO_ADDR
// if not hexes then
37346: LD_VAR 0 12
37350: NOT
37351: IFFALSE 37355
// exit ;
37353: GO 37828
// hex := GetHexInfo ( x , y ) ;
37355: LD_ADDR_VAR 0 15
37359: PUSH
37360: LD_VAR 0 3
37364: PPUSH
37365: LD_VAR 0 4
37369: PPUSH
37370: CALL_OW 546
37374: ST_TO_ADDR
// if hex [ 1 ] then
37375: LD_VAR 0 15
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: IFFALSE 37387
// exit ;
37385: GO 37828
// height := hex [ 2 ] ;
37387: LD_ADDR_VAR 0 13
37391: PUSH
37392: LD_VAR 0 15
37396: PUSH
37397: LD_INT 2
37399: ARRAY
37400: ST_TO_ADDR
// for i = 1 to hexes do
37401: LD_ADDR_VAR 0 7
37405: PUSH
37406: DOUBLE
37407: LD_INT 1
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 12
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37747
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37419: LD_VAR 0 12
37423: PUSH
37424: LD_VAR 0 7
37428: ARRAY
37429: PUSH
37430: LD_INT 1
37432: ARRAY
37433: PPUSH
37434: LD_VAR 0 12
37438: PUSH
37439: LD_VAR 0 7
37443: ARRAY
37444: PUSH
37445: LD_INT 2
37447: ARRAY
37448: PPUSH
37449: CALL_OW 488
37453: NOT
37454: PUSH
37455: LD_VAR 0 12
37459: PUSH
37460: LD_VAR 0 7
37464: ARRAY
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PPUSH
37470: LD_VAR 0 12
37474: PUSH
37475: LD_VAR 0 7
37479: ARRAY
37480: PUSH
37481: LD_INT 2
37483: ARRAY
37484: PPUSH
37485: CALL_OW 428
37489: PUSH
37490: LD_INT 0
37492: GREATER
37493: OR
37494: PUSH
37495: LD_VAR 0 12
37499: PUSH
37500: LD_VAR 0 7
37504: ARRAY
37505: PUSH
37506: LD_INT 1
37508: ARRAY
37509: PPUSH
37510: LD_VAR 0 12
37514: PUSH
37515: LD_VAR 0 7
37519: ARRAY
37520: PUSH
37521: LD_INT 2
37523: ARRAY
37524: PPUSH
37525: CALL_OW 351
37529: OR
37530: IFFALSE 37536
// exit ;
37532: POP
37533: POP
37534: GO 37828
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37536: LD_ADDR_VAR 0 8
37540: PUSH
37541: LD_VAR 0 12
37545: PUSH
37546: LD_VAR 0 7
37550: ARRAY
37551: PUSH
37552: LD_INT 1
37554: ARRAY
37555: PPUSH
37556: LD_VAR 0 12
37560: PUSH
37561: LD_VAR 0 7
37565: ARRAY
37566: PUSH
37567: LD_INT 2
37569: ARRAY
37570: PPUSH
37571: CALL_OW 546
37575: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37576: LD_VAR 0 8
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PUSH
37585: LD_VAR 0 8
37589: PUSH
37590: LD_INT 2
37592: ARRAY
37593: PUSH
37594: LD_VAR 0 13
37598: PUSH
37599: LD_INT 2
37601: PLUS
37602: GREATER
37603: OR
37604: PUSH
37605: LD_VAR 0 8
37609: PUSH
37610: LD_INT 2
37612: ARRAY
37613: PUSH
37614: LD_VAR 0 13
37618: PUSH
37619: LD_INT 2
37621: MINUS
37622: LESS
37623: OR
37624: PUSH
37625: LD_VAR 0 8
37629: PUSH
37630: LD_INT 3
37632: ARRAY
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 8
37639: PUSH
37640: LD_INT 9
37642: PUSH
37643: LD_INT 10
37645: PUSH
37646: LD_INT 11
37648: PUSH
37649: LD_INT 12
37651: PUSH
37652: LD_INT 13
37654: PUSH
37655: LD_INT 16
37657: PUSH
37658: LD_INT 17
37660: PUSH
37661: LD_INT 18
37663: PUSH
37664: LD_INT 19
37666: PUSH
37667: LD_INT 20
37669: PUSH
37670: LD_INT 21
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: IN
37688: NOT
37689: OR
37690: PUSH
37691: LD_VAR 0 8
37695: PUSH
37696: LD_INT 5
37698: ARRAY
37699: NOT
37700: OR
37701: PUSH
37702: LD_VAR 0 8
37706: PUSH
37707: LD_INT 6
37709: ARRAY
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 7
37719: PUSH
37720: LD_INT 9
37722: PUSH
37723: LD_INT 10
37725: PUSH
37726: LD_INT 11
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: IN
37737: NOT
37738: OR
37739: IFFALSE 37745
// exit ;
37741: POP
37742: POP
37743: GO 37828
// end ;
37745: GO 37416
37747: POP
37748: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37749: LD_VAR 0 9
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: LD_VAR 0 4
37763: PPUSH
37764: LD_INT 20
37766: PPUSH
37767: CALL 29751 0 4
37771: PUSH
37772: LD_INT 4
37774: ARRAY
37775: IFFALSE 37779
// exit ;
37777: GO 37828
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37779: LD_VAR 0 2
37783: PUSH
37784: LD_INT 29
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: IN
37794: PUSH
37795: LD_VAR 0 3
37799: PPUSH
37800: LD_VAR 0 4
37804: PPUSH
37805: LD_VAR 0 9
37809: PPUSH
37810: CALL_OW 440
37814: NOT
37815: AND
37816: IFFALSE 37820
// exit ;
37818: GO 37828
// result := true ;
37820: LD_ADDR_VAR 0 6
37824: PUSH
37825: LD_INT 1
37827: ST_TO_ADDR
// end ;
37828: LD_VAR 0 6
37832: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37833: LD_INT 0
37835: PPUSH
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
37841: PPUSH
37842: PPUSH
37843: PPUSH
37844: PPUSH
37845: PPUSH
37846: PPUSH
37847: PPUSH
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
// result = [ ] ;
37893: LD_ADDR_VAR 0 7
37897: PUSH
37898: EMPTY
37899: ST_TO_ADDR
// temp_list = [ ] ;
37900: LD_ADDR_VAR 0 9
37904: PUSH
37905: EMPTY
37906: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37907: LD_VAR 0 4
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 3
37923: PUSH
37924: LD_INT 4
37926: PUSH
37927: LD_INT 5
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: IN
37938: NOT
37939: PUSH
37940: LD_VAR 0 1
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: IN
37955: PUSH
37956: LD_VAR 0 5
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 3
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: IN
37975: NOT
37976: AND
37977: OR
37978: IFFALSE 37982
// exit ;
37980: GO 56373
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37982: LD_VAR 0 1
37986: PUSH
37987: LD_INT 6
37989: PUSH
37990: LD_INT 7
37992: PUSH
37993: LD_INT 8
37995: PUSH
37996: LD_INT 13
37998: PUSH
37999: LD_INT 12
38001: PUSH
38002: LD_INT 15
38004: PUSH
38005: LD_INT 11
38007: PUSH
38008: LD_INT 14
38010: PUSH
38011: LD_INT 10
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: IN
38025: IFFALSE 38035
// btype = b_lab ;
38027: LD_ADDR_VAR 0 1
38031: PUSH
38032: LD_INT 6
38034: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38035: LD_VAR 0 6
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: IN
38054: NOT
38055: PUSH
38056: LD_VAR 0 1
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 6
38075: PUSH
38076: LD_INT 36
38078: PUSH
38079: LD_INT 4
38081: PUSH
38082: LD_INT 5
38084: PUSH
38085: LD_INT 31
38087: PUSH
38088: LD_INT 32
38090: PUSH
38091: LD_INT 33
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: IN
38107: NOT
38108: PUSH
38109: LD_VAR 0 6
38113: PUSH
38114: LD_INT 1
38116: EQUAL
38117: AND
38118: OR
38119: PUSH
38120: LD_VAR 0 1
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: IN
38135: NOT
38136: PUSH
38137: LD_VAR 0 6
38141: PUSH
38142: LD_INT 2
38144: EQUAL
38145: AND
38146: OR
38147: IFFALSE 38157
// mode = 0 ;
38149: LD_ADDR_VAR 0 6
38153: PUSH
38154: LD_INT 0
38156: ST_TO_ADDR
// case mode of 0 :
38157: LD_VAR 0 6
38161: PUSH
38162: LD_INT 0
38164: DOUBLE
38165: EQUAL
38166: IFTRUE 38170
38168: GO 49623
38170: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38171: LD_ADDR_VAR 0 11
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38364: LD_ADDR_VAR 0 12
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: NEG
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 3
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38560: LD_ADDR_VAR 0 13
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: LD_INT 3
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 3
38719: NEG
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 3
38731: NEG
38732: PUSH
38733: LD_INT 3
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38759: LD_ADDR_VAR 0 14
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 3
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38955: LD_ADDR_VAR 0 15
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39148: LD_ADDR_VAR 0 16
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: NEG
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 3
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39341: LD_ADDR_VAR 0 17
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39571: LD_ADDR_VAR 0 18
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39801: LD_ADDR_VAR 0 19
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40031: LD_ADDR_VAR 0 20
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40261: LD_ADDR_VAR 0 21
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40491: LD_ADDR_VAR 0 22
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40721: LD_ADDR_VAR 0 23
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: LD_INT 3
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: LD_INT 3
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41001: LD_ADDR_VAR 0 24
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41277: LD_ADDR_VAR 0 25
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 2
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41551: LD_ADDR_VAR 0 26
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41827: LD_ADDR_VAR 0 27
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: NEG
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42107: LD_ADDR_VAR 0 28
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42389: LD_ADDR_VAR 0 29
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 3
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: NEG
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42668: LD_ADDR_VAR 0 30
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 3
42911: NEG
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42946: LD_ADDR_VAR 0 31
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 3
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: NEG
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43224: LD_ADDR_VAR 0 32
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43502: LD_ADDR_VAR 0 33
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 3
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43781: LD_ADDR_VAR 0 34
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 3
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 3
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 3
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44061: LD_ADDR_VAR 0 35
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44173: LD_ADDR_VAR 0 36
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44285: LD_ADDR_VAR 0 37
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44397: LD_ADDR_VAR 0 38
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44509: LD_ADDR_VAR 0 39
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44621: LD_ADDR_VAR 0 40
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44733: LD_ADDR_VAR 0 41
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 3
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 3
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 3
45042: NEG
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45083: LD_ADDR_VAR 0 42
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 3
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 3
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 3
45392: NEG
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45433: LD_ADDR_VAR 0 43
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 3
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 3
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45781: LD_ADDR_VAR 0 44
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 3
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46131: LD_ADDR_VAR 0 45
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 3
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: LD_INT 3
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46481: LD_ADDR_VAR 0 46
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 3
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 3
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46829: LD_ADDR_VAR 0 47
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46980: LD_ADDR_VAR 0 48
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47127: LD_ADDR_VAR 0 49
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47271: LD_ADDR_VAR 0 50
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47415: LD_ADDR_VAR 0 51
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47562: LD_ADDR_VAR 0 52
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47713: LD_ADDR_VAR 0 53
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47943: LD_ADDR_VAR 0 54
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48173: LD_ADDR_VAR 0 55
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48403: LD_ADDR_VAR 0 56
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48633: LD_ADDR_VAR 0 57
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48863: LD_ADDR_VAR 0 58
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49093: LD_ADDR_VAR 0 59
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49181: LD_ADDR_VAR 0 60
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49269: LD_ADDR_VAR 0 61
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49357: LD_ADDR_VAR 0 62
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49445: LD_ADDR_VAR 0 63
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49533: LD_ADDR_VAR 0 64
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: ST_TO_ADDR
// end ; 1 :
49621: GO 55518
49623: LD_INT 1
49625: DOUBLE
49626: EQUAL
49627: IFTRUE 49631
49629: GO 52254
49631: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49632: LD_ADDR_VAR 0 11
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49676: LD_ADDR_VAR 0 12
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49717: LD_ADDR_VAR 0 13
49721: PUSH
49722: LD_INT 3
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49757: LD_ADDR_VAR 0 14
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49798: LD_ADDR_VAR 0 15
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 3
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49842: LD_ADDR_VAR 0 16
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: NEG
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49888: LD_ADDR_VAR 0 17
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49932: LD_ADDR_VAR 0 18
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49973: LD_ADDR_VAR 0 19
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 3
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 3
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50013: LD_ADDR_VAR 0 20
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 3
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50054: LD_ADDR_VAR 0 21
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50098: LD_ADDR_VAR 0 22
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: LD_INT 3
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: NEG
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50144: LD_ADDR_VAR 0 23
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 4
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50188: LD_ADDR_VAR 0 24
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 4
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50229: LD_ADDR_VAR 0 25
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 4
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: LD_INT 4
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50269: LD_ADDR_VAR 0 26
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 4
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50310: LD_ADDR_VAR 0 27
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 3
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 4
50339: NEG
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50354: LD_ADDR_VAR 0 28
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: LD_INT 4
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 4
50385: NEG
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50400: LD_ADDR_VAR 0 29
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 4
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 4
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 3
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 5
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 5
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 4
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 6
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 6
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 5
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50555: LD_ADDR_VAR 0 30
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 4
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 4
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 5
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 5
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 6
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 6
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50698: LD_ADDR_VAR 0 31
50702: PUSH
50703: LD_INT 3
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 4
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 4
50745: PUSH
50746: LD_INT 4
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: LD_INT 4
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 5
50765: PUSH
50766: LD_INT 4
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 5
50775: PUSH
50776: LD_INT 5
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: LD_INT 5
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 6
50795: PUSH
50796: LD_INT 5
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 6
50805: PUSH
50806: LD_INT 6
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 5
50815: PUSH
50816: LD_INT 6
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50837: LD_ADDR_VAR 0 32
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 4
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 4
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 5
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 5
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 4
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 6
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 6
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 5
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50980: LD_ADDR_VAR 0 33
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 4
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 5
51066: NEG
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 5
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 5
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 6
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 6
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51135: LD_ADDR_VAR 0 34
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: NEG
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: LD_INT 4
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 4
51190: NEG
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: NEG
51203: PUSH
51204: LD_INT 4
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: LD_INT 5
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 5
51226: NEG
51227: PUSH
51228: LD_INT 4
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 5
51238: NEG
51239: PUSH
51240: LD_INT 5
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 5
51250: NEG
51251: PUSH
51252: LD_INT 6
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 6
51262: NEG
51263: PUSH
51264: LD_INT 5
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 6
51274: NEG
51275: PUSH
51276: LD_INT 6
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51298: LD_ADDR_VAR 0 41
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51342: LD_ADDR_VAR 0 42
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51383: LD_ADDR_VAR 0 43
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51423: LD_ADDR_VAR 0 44
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51464: LD_ADDR_VAR 0 45
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51508: LD_ADDR_VAR 0 46
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 3
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51554: LD_ADDR_VAR 0 47
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 3
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51587: LD_ADDR_VAR 0 48
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51618: LD_ADDR_VAR 0 49
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51647: LD_ADDR_VAR 0 50
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51676: LD_ADDR_VAR 0 51
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51707: LD_ADDR_VAR 0 52
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51740: LD_ADDR_VAR 0 53
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51784: LD_ADDR_VAR 0 54
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51825: LD_ADDR_VAR 0 55
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51865: LD_ADDR_VAR 0 56
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51906: LD_ADDR_VAR 0 57
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51950: LD_ADDR_VAR 0 58
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51996: LD_ADDR_VAR 0 59
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52040: LD_ADDR_VAR 0 60
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52081: LD_ADDR_VAR 0 61
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52121: LD_ADDR_VAR 0 62
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52162: LD_ADDR_VAR 0 63
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52206: LD_ADDR_VAR 0 64
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// end ; 2 :
52252: GO 55518
52254: LD_INT 2
52256: DOUBLE
52257: EQUAL
52258: IFTRUE 52262
52260: GO 55517
52262: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52263: LD_ADDR_VAR 0 29
52267: PUSH
52268: LD_INT 4
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 5
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 4
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 5
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 4
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: LD_INT 4
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: LD_INT 4
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 4
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 4
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 3
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 5
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 5
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 4
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 5
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 4
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 4
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 4
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 4
52648: NEG
52649: PUSH
52650: LD_INT 4
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 4
52660: NEG
52661: PUSH
52662: LD_INT 5
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: NEG
52673: PUSH
52674: LD_INT 4
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: LD_INT 3
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 4
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 5
52708: NEG
52709: PUSH
52710: LD_INT 4
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 5
52720: NEG
52721: PUSH
52722: LD_INT 5
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: LD_INT 5
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 5
52744: NEG
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52801: LD_ADDR_VAR 0 30
52805: PUSH
52806: LD_INT 4
52808: PUSH
52809: LD_INT 4
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 4
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 5
52828: PUSH
52829: LD_INT 4
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 5
52838: PUSH
52839: LD_INT 5
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 4
52848: PUSH
52849: LD_INT 5
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: LD_INT 4
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 5
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: LD_INT 5
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 3
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 4
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 4
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 4
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 4
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 4
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 5
53047: NEG
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 5
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 5
53070: NEG
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 3
53105: NEG
53106: PUSH
53107: LD_INT 4
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 4
53153: NEG
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 4
53165: NEG
53166: PUSH
53167: LD_INT 4
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 4
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 5
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 4
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 4
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 5
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 5
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53348: LD_ADDR_VAR 0 31
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 4
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 4
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 5
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 5
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 4
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 5
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 4
53550: NEG
53551: PUSH
53552: LD_INT 4
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: LD_INT 5
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: LD_INT 4
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: NEG
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 5
53610: NEG
53611: PUSH
53612: LD_INT 4
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 5
53622: NEG
53623: PUSH
53624: LD_INT 5
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 5
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 5
53646: NEG
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 4
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 4
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 5
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 5
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 4
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 5
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53898: LD_ADDR_VAR 0 32
53902: PUSH
53903: LD_INT 4
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 4
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 4
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 5
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 5
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 5
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: NEG
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: LD_INT 4
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 4
54067: NEG
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 4
54079: NEG
54080: PUSH
54081: LD_INT 4
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 4
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 4
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 4
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 4
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 4
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 5
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 3
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 5
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 4
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 4
54310: PUSH
54311: LD_INT 4
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 5
54330: PUSH
54331: LD_INT 4
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 5
54340: PUSH
54341: LD_INT 5
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 5
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: LD_INT 5
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54445: LD_ADDR_VAR 0 33
54449: PUSH
54450: LD_INT 4
54452: NEG
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: NEG
54465: PUSH
54466: LD_INT 5
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 4
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 4
54500: NEG
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 5
54512: NEG
54513: PUSH
54514: LD_INT 4
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 5
54524: NEG
54525: PUSH
54526: LD_INT 5
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 5
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 5
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 4
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 4
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 5
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 4
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: PUSH
54786: LD_INT 4
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 4
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 4
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 4
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 4
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 5
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 5
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 5
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54983: LD_ADDR_VAR 0 34
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 4
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 5
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 4
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 5
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 4
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 4
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 4
55185: PUSH
55186: LD_INT 4
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 4
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 5
55205: PUSH
55206: LD_INT 4
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 5
55215: PUSH
55216: LD_INT 5
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 4
55225: PUSH
55226: LD_INT 5
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: LD_INT 4
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 5
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: LD_INT 5
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 4
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 4
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 4
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 4
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 5
55424: NEG
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 5
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 5
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// end ; end ;
55515: GO 55518
55517: POP
// case btype of b_depot , b_warehouse :
55518: LD_VAR 0 1
55522: PUSH
55523: LD_INT 0
55525: DOUBLE
55526: EQUAL
55527: IFTRUE 55537
55529: LD_INT 1
55531: DOUBLE
55532: EQUAL
55533: IFTRUE 55537
55535: GO 55738
55537: POP
// case nation of nation_american :
55538: LD_VAR 0 5
55542: PUSH
55543: LD_INT 1
55545: DOUBLE
55546: EQUAL
55547: IFTRUE 55551
55549: GO 55607
55551: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55552: LD_ADDR_VAR 0 9
55556: PUSH
55557: LD_VAR 0 11
55561: PUSH
55562: LD_VAR 0 12
55566: PUSH
55567: LD_VAR 0 13
55571: PUSH
55572: LD_VAR 0 14
55576: PUSH
55577: LD_VAR 0 15
55581: PUSH
55582: LD_VAR 0 16
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: PUSH
55595: LD_VAR 0 4
55599: PUSH
55600: LD_INT 1
55602: PLUS
55603: ARRAY
55604: ST_TO_ADDR
55605: GO 55736
55607: LD_INT 2
55609: DOUBLE
55610: EQUAL
55611: IFTRUE 55615
55613: GO 55671
55615: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55616: LD_ADDR_VAR 0 9
55620: PUSH
55621: LD_VAR 0 17
55625: PUSH
55626: LD_VAR 0 18
55630: PUSH
55631: LD_VAR 0 19
55635: PUSH
55636: LD_VAR 0 20
55640: PUSH
55641: LD_VAR 0 21
55645: PUSH
55646: LD_VAR 0 22
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: PUSH
55659: LD_VAR 0 4
55663: PUSH
55664: LD_INT 1
55666: PLUS
55667: ARRAY
55668: ST_TO_ADDR
55669: GO 55736
55671: LD_INT 3
55673: DOUBLE
55674: EQUAL
55675: IFTRUE 55679
55677: GO 55735
55679: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55680: LD_ADDR_VAR 0 9
55684: PUSH
55685: LD_VAR 0 23
55689: PUSH
55690: LD_VAR 0 24
55694: PUSH
55695: LD_VAR 0 25
55699: PUSH
55700: LD_VAR 0 26
55704: PUSH
55705: LD_VAR 0 27
55709: PUSH
55710: LD_VAR 0 28
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: PUSH
55723: LD_VAR 0 4
55727: PUSH
55728: LD_INT 1
55730: PLUS
55731: ARRAY
55732: ST_TO_ADDR
55733: GO 55736
55735: POP
55736: GO 56291
55738: LD_INT 2
55740: DOUBLE
55741: EQUAL
55742: IFTRUE 55752
55744: LD_INT 3
55746: DOUBLE
55747: EQUAL
55748: IFTRUE 55752
55750: GO 55808
55752: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55753: LD_ADDR_VAR 0 9
55757: PUSH
55758: LD_VAR 0 29
55762: PUSH
55763: LD_VAR 0 30
55767: PUSH
55768: LD_VAR 0 31
55772: PUSH
55773: LD_VAR 0 32
55777: PUSH
55778: LD_VAR 0 33
55782: PUSH
55783: LD_VAR 0 34
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: PUSH
55796: LD_VAR 0 4
55800: PUSH
55801: LD_INT 1
55803: PLUS
55804: ARRAY
55805: ST_TO_ADDR
55806: GO 56291
55808: LD_INT 16
55810: DOUBLE
55811: EQUAL
55812: IFTRUE 55870
55814: LD_INT 17
55816: DOUBLE
55817: EQUAL
55818: IFTRUE 55870
55820: LD_INT 18
55822: DOUBLE
55823: EQUAL
55824: IFTRUE 55870
55826: LD_INT 19
55828: DOUBLE
55829: EQUAL
55830: IFTRUE 55870
55832: LD_INT 22
55834: DOUBLE
55835: EQUAL
55836: IFTRUE 55870
55838: LD_INT 20
55840: DOUBLE
55841: EQUAL
55842: IFTRUE 55870
55844: LD_INT 21
55846: DOUBLE
55847: EQUAL
55848: IFTRUE 55870
55850: LD_INT 23
55852: DOUBLE
55853: EQUAL
55854: IFTRUE 55870
55856: LD_INT 24
55858: DOUBLE
55859: EQUAL
55860: IFTRUE 55870
55862: LD_INT 25
55864: DOUBLE
55865: EQUAL
55866: IFTRUE 55870
55868: GO 55926
55870: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55871: LD_ADDR_VAR 0 9
55875: PUSH
55876: LD_VAR 0 35
55880: PUSH
55881: LD_VAR 0 36
55885: PUSH
55886: LD_VAR 0 37
55890: PUSH
55891: LD_VAR 0 38
55895: PUSH
55896: LD_VAR 0 39
55900: PUSH
55901: LD_VAR 0 40
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: PUSH
55914: LD_VAR 0 4
55918: PUSH
55919: LD_INT 1
55921: PLUS
55922: ARRAY
55923: ST_TO_ADDR
55924: GO 56291
55926: LD_INT 6
55928: DOUBLE
55929: EQUAL
55930: IFTRUE 55982
55932: LD_INT 7
55934: DOUBLE
55935: EQUAL
55936: IFTRUE 55982
55938: LD_INT 8
55940: DOUBLE
55941: EQUAL
55942: IFTRUE 55982
55944: LD_INT 13
55946: DOUBLE
55947: EQUAL
55948: IFTRUE 55982
55950: LD_INT 12
55952: DOUBLE
55953: EQUAL
55954: IFTRUE 55982
55956: LD_INT 15
55958: DOUBLE
55959: EQUAL
55960: IFTRUE 55982
55962: LD_INT 11
55964: DOUBLE
55965: EQUAL
55966: IFTRUE 55982
55968: LD_INT 14
55970: DOUBLE
55971: EQUAL
55972: IFTRUE 55982
55974: LD_INT 10
55976: DOUBLE
55977: EQUAL
55978: IFTRUE 55982
55980: GO 56038
55982: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55983: LD_ADDR_VAR 0 9
55987: PUSH
55988: LD_VAR 0 41
55992: PUSH
55993: LD_VAR 0 42
55997: PUSH
55998: LD_VAR 0 43
56002: PUSH
56003: LD_VAR 0 44
56007: PUSH
56008: LD_VAR 0 45
56012: PUSH
56013: LD_VAR 0 46
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: PUSH
56026: LD_VAR 0 4
56030: PUSH
56031: LD_INT 1
56033: PLUS
56034: ARRAY
56035: ST_TO_ADDR
56036: GO 56291
56038: LD_INT 36
56040: DOUBLE
56041: EQUAL
56042: IFTRUE 56046
56044: GO 56102
56046: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56047: LD_ADDR_VAR 0 9
56051: PUSH
56052: LD_VAR 0 47
56056: PUSH
56057: LD_VAR 0 48
56061: PUSH
56062: LD_VAR 0 49
56066: PUSH
56067: LD_VAR 0 50
56071: PUSH
56072: LD_VAR 0 51
56076: PUSH
56077: LD_VAR 0 52
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: PUSH
56090: LD_VAR 0 4
56094: PUSH
56095: LD_INT 1
56097: PLUS
56098: ARRAY
56099: ST_TO_ADDR
56100: GO 56291
56102: LD_INT 4
56104: DOUBLE
56105: EQUAL
56106: IFTRUE 56128
56108: LD_INT 5
56110: DOUBLE
56111: EQUAL
56112: IFTRUE 56128
56114: LD_INT 34
56116: DOUBLE
56117: EQUAL
56118: IFTRUE 56128
56120: LD_INT 37
56122: DOUBLE
56123: EQUAL
56124: IFTRUE 56128
56126: GO 56184
56128: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56129: LD_ADDR_VAR 0 9
56133: PUSH
56134: LD_VAR 0 53
56138: PUSH
56139: LD_VAR 0 54
56143: PUSH
56144: LD_VAR 0 55
56148: PUSH
56149: LD_VAR 0 56
56153: PUSH
56154: LD_VAR 0 57
56158: PUSH
56159: LD_VAR 0 58
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: PUSH
56172: LD_VAR 0 4
56176: PUSH
56177: LD_INT 1
56179: PLUS
56180: ARRAY
56181: ST_TO_ADDR
56182: GO 56291
56184: LD_INT 31
56186: DOUBLE
56187: EQUAL
56188: IFTRUE 56234
56190: LD_INT 32
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56234
56196: LD_INT 33
56198: DOUBLE
56199: EQUAL
56200: IFTRUE 56234
56202: LD_INT 27
56204: DOUBLE
56205: EQUAL
56206: IFTRUE 56234
56208: LD_INT 26
56210: DOUBLE
56211: EQUAL
56212: IFTRUE 56234
56214: LD_INT 28
56216: DOUBLE
56217: EQUAL
56218: IFTRUE 56234
56220: LD_INT 29
56222: DOUBLE
56223: EQUAL
56224: IFTRUE 56234
56226: LD_INT 30
56228: DOUBLE
56229: EQUAL
56230: IFTRUE 56234
56232: GO 56290
56234: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56235: LD_ADDR_VAR 0 9
56239: PUSH
56240: LD_VAR 0 59
56244: PUSH
56245: LD_VAR 0 60
56249: PUSH
56250: LD_VAR 0 61
56254: PUSH
56255: LD_VAR 0 62
56259: PUSH
56260: LD_VAR 0 63
56264: PUSH
56265: LD_VAR 0 64
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: PUSH
56278: LD_VAR 0 4
56282: PUSH
56283: LD_INT 1
56285: PLUS
56286: ARRAY
56287: ST_TO_ADDR
56288: GO 56291
56290: POP
// temp_list2 = [ ] ;
56291: LD_ADDR_VAR 0 10
56295: PUSH
56296: EMPTY
56297: ST_TO_ADDR
// for i in temp_list do
56298: LD_ADDR_VAR 0 8
56302: PUSH
56303: LD_VAR 0 9
56307: PUSH
56308: FOR_IN
56309: IFFALSE 56361
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56311: LD_ADDR_VAR 0 10
56315: PUSH
56316: LD_VAR 0 10
56320: PUSH
56321: LD_VAR 0 8
56325: PUSH
56326: LD_INT 1
56328: ARRAY
56329: PUSH
56330: LD_VAR 0 2
56334: PLUS
56335: PUSH
56336: LD_VAR 0 8
56340: PUSH
56341: LD_INT 2
56343: ARRAY
56344: PUSH
56345: LD_VAR 0 3
56349: PLUS
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: ADD
56358: ST_TO_ADDR
56359: GO 56308
56361: POP
56362: POP
// result = temp_list2 ;
56363: LD_ADDR_VAR 0 7
56367: PUSH
56368: LD_VAR 0 10
56372: ST_TO_ADDR
// end ;
56373: LD_VAR 0 7
56377: RET
// export function EnemyInRange ( unit , dist ) ; begin
56378: LD_INT 0
56380: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56381: LD_ADDR_VAR 0 3
56385: PUSH
56386: LD_VAR 0 1
56390: PPUSH
56391: CALL_OW 255
56395: PPUSH
56396: LD_VAR 0 1
56400: PPUSH
56401: CALL_OW 250
56405: PPUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL_OW 251
56415: PPUSH
56416: LD_VAR 0 2
56420: PPUSH
56421: CALL 29751 0 4
56425: PUSH
56426: LD_INT 4
56428: ARRAY
56429: ST_TO_ADDR
// end ;
56430: LD_VAR 0 3
56434: RET
// export function PlayerSeeMe ( unit ) ; begin
56435: LD_INT 0
56437: PPUSH
// result := See ( your_side , unit ) ;
56438: LD_ADDR_VAR 0 2
56442: PUSH
56443: LD_OWVAR 2
56447: PPUSH
56448: LD_VAR 0 1
56452: PPUSH
56453: CALL_OW 292
56457: ST_TO_ADDR
// end ;
56458: LD_VAR 0 2
56462: RET
// export function ReverseDir ( unit ) ; begin
56463: LD_INT 0
56465: PPUSH
// if not unit then
56466: LD_VAR 0 1
56470: NOT
56471: IFFALSE 56475
// exit ;
56473: GO 56498
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56475: LD_ADDR_VAR 0 2
56479: PUSH
56480: LD_VAR 0 1
56484: PPUSH
56485: CALL_OW 254
56489: PUSH
56490: LD_INT 3
56492: PLUS
56493: PUSH
56494: LD_INT 6
56496: MOD
56497: ST_TO_ADDR
// end ;
56498: LD_VAR 0 2
56502: RET
// export function ReverseArray ( array ) ; var i ; begin
56503: LD_INT 0
56505: PPUSH
56506: PPUSH
// if not array then
56507: LD_VAR 0 1
56511: NOT
56512: IFFALSE 56516
// exit ;
56514: GO 56571
// result := [ ] ;
56516: LD_ADDR_VAR 0 2
56520: PUSH
56521: EMPTY
56522: ST_TO_ADDR
// for i := array downto 1 do
56523: LD_ADDR_VAR 0 3
56527: PUSH
56528: DOUBLE
56529: LD_VAR 0 1
56533: INC
56534: ST_TO_ADDR
56535: LD_INT 1
56537: PUSH
56538: FOR_DOWNTO
56539: IFFALSE 56569
// result := Join ( result , array [ i ] ) ;
56541: LD_ADDR_VAR 0 2
56545: PUSH
56546: LD_VAR 0 2
56550: PPUSH
56551: LD_VAR 0 1
56555: PUSH
56556: LD_VAR 0 3
56560: ARRAY
56561: PPUSH
56562: CALL 61227 0 2
56566: ST_TO_ADDR
56567: GO 56538
56569: POP
56570: POP
// end ;
56571: LD_VAR 0 2
56575: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56576: LD_INT 0
56578: PPUSH
56579: PPUSH
56580: PPUSH
56581: PPUSH
56582: PPUSH
56583: PPUSH
// if not unit or not hexes then
56584: LD_VAR 0 1
56588: NOT
56589: PUSH
56590: LD_VAR 0 2
56594: NOT
56595: OR
56596: IFFALSE 56600
// exit ;
56598: GO 56723
// dist := 9999 ;
56600: LD_ADDR_VAR 0 5
56604: PUSH
56605: LD_INT 9999
56607: ST_TO_ADDR
// for i = 1 to hexes do
56608: LD_ADDR_VAR 0 4
56612: PUSH
56613: DOUBLE
56614: LD_INT 1
56616: DEC
56617: ST_TO_ADDR
56618: LD_VAR 0 2
56622: PUSH
56623: FOR_TO
56624: IFFALSE 56711
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56626: LD_ADDR_VAR 0 6
56630: PUSH
56631: LD_VAR 0 1
56635: PPUSH
56636: LD_VAR 0 2
56640: PUSH
56641: LD_VAR 0 4
56645: ARRAY
56646: PUSH
56647: LD_INT 1
56649: ARRAY
56650: PPUSH
56651: LD_VAR 0 2
56655: PUSH
56656: LD_VAR 0 4
56660: ARRAY
56661: PUSH
56662: LD_INT 2
56664: ARRAY
56665: PPUSH
56666: CALL_OW 297
56670: ST_TO_ADDR
// if tdist < dist then
56671: LD_VAR 0 6
56675: PUSH
56676: LD_VAR 0 5
56680: LESS
56681: IFFALSE 56709
// begin hex := hexes [ i ] ;
56683: LD_ADDR_VAR 0 8
56687: PUSH
56688: LD_VAR 0 2
56692: PUSH
56693: LD_VAR 0 4
56697: ARRAY
56698: ST_TO_ADDR
// dist := tdist ;
56699: LD_ADDR_VAR 0 5
56703: PUSH
56704: LD_VAR 0 6
56708: ST_TO_ADDR
// end ; end ;
56709: GO 56623
56711: POP
56712: POP
// result := hex ;
56713: LD_ADDR_VAR 0 3
56717: PUSH
56718: LD_VAR 0 8
56722: ST_TO_ADDR
// end ;
56723: LD_VAR 0 3
56727: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56728: LD_INT 0
56730: PPUSH
56731: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56732: LD_VAR 0 1
56736: NOT
56737: PUSH
56738: LD_VAR 0 1
56742: PUSH
56743: LD_INT 21
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 23
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PPUSH
56767: CALL_OW 69
56771: IN
56772: NOT
56773: OR
56774: IFFALSE 56778
// exit ;
56776: GO 56825
// for i = 1 to 3 do
56778: LD_ADDR_VAR 0 3
56782: PUSH
56783: DOUBLE
56784: LD_INT 1
56786: DEC
56787: ST_TO_ADDR
56788: LD_INT 3
56790: PUSH
56791: FOR_TO
56792: IFFALSE 56823
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56794: LD_VAR 0 1
56798: PPUSH
56799: CALL_OW 250
56803: PPUSH
56804: LD_VAR 0 1
56808: PPUSH
56809: CALL_OW 251
56813: PPUSH
56814: LD_INT 1
56816: PPUSH
56817: CALL_OW 453
56821: GO 56791
56823: POP
56824: POP
// end ;
56825: LD_VAR 0 2
56829: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56830: LD_INT 0
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56838: LD_VAR 0 1
56842: NOT
56843: PUSH
56844: LD_VAR 0 2
56848: NOT
56849: OR
56850: PUSH
56851: LD_VAR 0 1
56855: PPUSH
56856: CALL_OW 314
56860: OR
56861: IFFALSE 56865
// exit ;
56863: GO 57332
// if GetLives ( i ) < 250 then
56865: LD_VAR 0 4
56869: PPUSH
56870: CALL_OW 256
56874: PUSH
56875: LD_INT 250
56877: LESS
56878: IFFALSE 56891
// begin ComAutodestruct ( i ) ;
56880: LD_VAR 0 4
56884: PPUSH
56885: CALL 56728 0 1
// exit ;
56889: GO 57332
// end ; x := GetX ( enemy_unit ) ;
56891: LD_ADDR_VAR 0 7
56895: PUSH
56896: LD_VAR 0 2
56900: PPUSH
56901: CALL_OW 250
56905: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56906: LD_ADDR_VAR 0 8
56910: PUSH
56911: LD_VAR 0 2
56915: PPUSH
56916: CALL_OW 251
56920: ST_TO_ADDR
// if not x or not y then
56921: LD_VAR 0 7
56925: NOT
56926: PUSH
56927: LD_VAR 0 8
56931: NOT
56932: OR
56933: IFFALSE 56937
// exit ;
56935: GO 57332
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56937: LD_ADDR_VAR 0 6
56941: PUSH
56942: LD_VAR 0 7
56946: PPUSH
56947: LD_INT 0
56949: PPUSH
56950: LD_INT 4
56952: PPUSH
56953: CALL_OW 272
56957: PUSH
56958: LD_VAR 0 8
56962: PPUSH
56963: LD_INT 0
56965: PPUSH
56966: LD_INT 4
56968: PPUSH
56969: CALL_OW 273
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_VAR 0 7
56982: PPUSH
56983: LD_INT 1
56985: PPUSH
56986: LD_INT 4
56988: PPUSH
56989: CALL_OW 272
56993: PUSH
56994: LD_VAR 0 8
56998: PPUSH
56999: LD_INT 1
57001: PPUSH
57002: LD_INT 4
57004: PPUSH
57005: CALL_OW 273
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_VAR 0 7
57018: PPUSH
57019: LD_INT 2
57021: PPUSH
57022: LD_INT 4
57024: PPUSH
57025: CALL_OW 272
57029: PUSH
57030: LD_VAR 0 8
57034: PPUSH
57035: LD_INT 2
57037: PPUSH
57038: LD_INT 4
57040: PPUSH
57041: CALL_OW 273
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_VAR 0 7
57054: PPUSH
57055: LD_INT 3
57057: PPUSH
57058: LD_INT 4
57060: PPUSH
57061: CALL_OW 272
57065: PUSH
57066: LD_VAR 0 8
57070: PPUSH
57071: LD_INT 3
57073: PPUSH
57074: LD_INT 4
57076: PPUSH
57077: CALL_OW 273
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_VAR 0 7
57090: PPUSH
57091: LD_INT 4
57093: PPUSH
57094: LD_INT 4
57096: PPUSH
57097: CALL_OW 272
57101: PUSH
57102: LD_VAR 0 8
57106: PPUSH
57107: LD_INT 4
57109: PPUSH
57110: LD_INT 4
57112: PPUSH
57113: CALL_OW 273
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_VAR 0 7
57126: PPUSH
57127: LD_INT 5
57129: PPUSH
57130: LD_INT 4
57132: PPUSH
57133: CALL_OW 272
57137: PUSH
57138: LD_VAR 0 8
57142: PPUSH
57143: LD_INT 5
57145: PPUSH
57146: LD_INT 4
57148: PPUSH
57149: CALL_OW 273
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// for i = tmp downto 1 do
57166: LD_ADDR_VAR 0 4
57170: PUSH
57171: DOUBLE
57172: LD_VAR 0 6
57176: INC
57177: ST_TO_ADDR
57178: LD_INT 1
57180: PUSH
57181: FOR_DOWNTO
57182: IFFALSE 57283
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57184: LD_VAR 0 6
57188: PUSH
57189: LD_VAR 0 4
57193: ARRAY
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: PPUSH
57199: LD_VAR 0 6
57203: PUSH
57204: LD_VAR 0 4
57208: ARRAY
57209: PUSH
57210: LD_INT 2
57212: ARRAY
57213: PPUSH
57214: CALL_OW 488
57218: NOT
57219: PUSH
57220: LD_VAR 0 6
57224: PUSH
57225: LD_VAR 0 4
57229: ARRAY
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: PPUSH
57235: LD_VAR 0 6
57239: PUSH
57240: LD_VAR 0 4
57244: ARRAY
57245: PUSH
57246: LD_INT 2
57248: ARRAY
57249: PPUSH
57250: CALL_OW 428
57254: PUSH
57255: LD_INT 0
57257: NONEQUAL
57258: OR
57259: IFFALSE 57281
// tmp := Delete ( tmp , i ) ;
57261: LD_ADDR_VAR 0 6
57265: PUSH
57266: LD_VAR 0 6
57270: PPUSH
57271: LD_VAR 0 4
57275: PPUSH
57276: CALL_OW 3
57280: ST_TO_ADDR
57281: GO 57181
57283: POP
57284: POP
// j := GetClosestHex ( unit , tmp ) ;
57285: LD_ADDR_VAR 0 5
57289: PUSH
57290: LD_VAR 0 1
57294: PPUSH
57295: LD_VAR 0 6
57299: PPUSH
57300: CALL 56576 0 2
57304: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57305: LD_VAR 0 1
57309: PPUSH
57310: LD_VAR 0 5
57314: PUSH
57315: LD_INT 1
57317: ARRAY
57318: PPUSH
57319: LD_VAR 0 5
57323: PUSH
57324: LD_INT 2
57326: ARRAY
57327: PPUSH
57328: CALL_OW 111
// end ;
57332: LD_VAR 0 3
57336: RET
// export function PrepareApemanSoldier ( ) ; begin
57337: LD_INT 0
57339: PPUSH
// uc_nation := 0 ;
57340: LD_ADDR_OWVAR 21
57344: PUSH
57345: LD_INT 0
57347: ST_TO_ADDR
// hc_sex := sex_male ;
57348: LD_ADDR_OWVAR 27
57352: PUSH
57353: LD_INT 1
57355: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57356: LD_ADDR_OWVAR 28
57360: PUSH
57361: LD_INT 15
57363: ST_TO_ADDR
// hc_gallery :=  ;
57364: LD_ADDR_OWVAR 33
57368: PUSH
57369: LD_STRING 
57371: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57372: LD_ADDR_OWVAR 31
57376: PUSH
57377: LD_INT 0
57379: PPUSH
57380: LD_INT 3
57382: PPUSH
57383: CALL_OW 12
57387: PUSH
57388: LD_INT 0
57390: PPUSH
57391: LD_INT 3
57393: PPUSH
57394: CALL_OW 12
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// end ;
57411: LD_VAR 0 1
57415: RET
// export function PrepareApemanEngineer ( ) ; begin
57416: LD_INT 0
57418: PPUSH
// uc_nation := 0 ;
57419: LD_ADDR_OWVAR 21
57423: PUSH
57424: LD_INT 0
57426: ST_TO_ADDR
// hc_sex := sex_male ;
57427: LD_ADDR_OWVAR 27
57431: PUSH
57432: LD_INT 1
57434: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57435: LD_ADDR_OWVAR 28
57439: PUSH
57440: LD_INT 16
57442: ST_TO_ADDR
// hc_gallery :=  ;
57443: LD_ADDR_OWVAR 33
57447: PUSH
57448: LD_STRING 
57450: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57451: LD_ADDR_OWVAR 31
57455: PUSH
57456: LD_INT 0
57458: PPUSH
57459: LD_INT 3
57461: PPUSH
57462: CALL_OW 12
57466: PUSH
57467: LD_INT 0
57469: PPUSH
57470: LD_INT 3
57472: PPUSH
57473: CALL_OW 12
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// end ;
57490: LD_VAR 0 1
57494: RET
// export function PrepareApeman ( agressivity ) ; begin
57495: LD_INT 0
57497: PPUSH
// uc_side := 0 ;
57498: LD_ADDR_OWVAR 20
57502: PUSH
57503: LD_INT 0
57505: ST_TO_ADDR
// uc_nation := 0 ;
57506: LD_ADDR_OWVAR 21
57510: PUSH
57511: LD_INT 0
57513: ST_TO_ADDR
// hc_sex := sex_male ;
57514: LD_ADDR_OWVAR 27
57518: PUSH
57519: LD_INT 1
57521: ST_TO_ADDR
// hc_class := class_apeman ;
57522: LD_ADDR_OWVAR 28
57526: PUSH
57527: LD_INT 12
57529: ST_TO_ADDR
// hc_gallery :=  ;
57530: LD_ADDR_OWVAR 33
57534: PUSH
57535: LD_STRING 
57537: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57538: LD_ADDR_OWVAR 35
57542: PUSH
57543: LD_VAR 0 1
57547: NEG
57548: PPUSH
57549: LD_VAR 0 1
57553: PPUSH
57554: CALL_OW 12
57558: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57559: LD_ADDR_OWVAR 31
57563: PUSH
57564: LD_INT 0
57566: PPUSH
57567: LD_INT 3
57569: PPUSH
57570: CALL_OW 12
57574: PUSH
57575: LD_INT 0
57577: PPUSH
57578: LD_INT 3
57580: PPUSH
57581: CALL_OW 12
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// end ;
57598: LD_VAR 0 2
57602: RET
// export function PrepareTiger ( agressivity ) ; begin
57603: LD_INT 0
57605: PPUSH
// uc_side := 0 ;
57606: LD_ADDR_OWVAR 20
57610: PUSH
57611: LD_INT 0
57613: ST_TO_ADDR
// uc_nation := 0 ;
57614: LD_ADDR_OWVAR 21
57618: PUSH
57619: LD_INT 0
57621: ST_TO_ADDR
// hc_class := class_tiger ;
57622: LD_ADDR_OWVAR 28
57626: PUSH
57627: LD_INT 14
57629: ST_TO_ADDR
// hc_gallery :=  ;
57630: LD_ADDR_OWVAR 33
57634: PUSH
57635: LD_STRING 
57637: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57638: LD_ADDR_OWVAR 35
57642: PUSH
57643: LD_VAR 0 1
57647: NEG
57648: PPUSH
57649: LD_VAR 0 1
57653: PPUSH
57654: CALL_OW 12
57658: ST_TO_ADDR
// end ;
57659: LD_VAR 0 2
57663: RET
// export function PrepareEnchidna ( ) ; begin
57664: LD_INT 0
57666: PPUSH
// uc_side := 0 ;
57667: LD_ADDR_OWVAR 20
57671: PUSH
57672: LD_INT 0
57674: ST_TO_ADDR
// uc_nation := 0 ;
57675: LD_ADDR_OWVAR 21
57679: PUSH
57680: LD_INT 0
57682: ST_TO_ADDR
// hc_class := class_baggie ;
57683: LD_ADDR_OWVAR 28
57687: PUSH
57688: LD_INT 13
57690: ST_TO_ADDR
// hc_gallery :=  ;
57691: LD_ADDR_OWVAR 33
57695: PUSH
57696: LD_STRING 
57698: ST_TO_ADDR
// end ;
57699: LD_VAR 0 1
57703: RET
// export function PrepareFrog ( ) ; begin
57704: LD_INT 0
57706: PPUSH
// uc_side := 0 ;
57707: LD_ADDR_OWVAR 20
57711: PUSH
57712: LD_INT 0
57714: ST_TO_ADDR
// uc_nation := 0 ;
57715: LD_ADDR_OWVAR 21
57719: PUSH
57720: LD_INT 0
57722: ST_TO_ADDR
// hc_class := class_frog ;
57723: LD_ADDR_OWVAR 28
57727: PUSH
57728: LD_INT 19
57730: ST_TO_ADDR
// hc_gallery :=  ;
57731: LD_ADDR_OWVAR 33
57735: PUSH
57736: LD_STRING 
57738: ST_TO_ADDR
// end ;
57739: LD_VAR 0 1
57743: RET
// export function PrepareFish ( ) ; begin
57744: LD_INT 0
57746: PPUSH
// uc_side := 0 ;
57747: LD_ADDR_OWVAR 20
57751: PUSH
57752: LD_INT 0
57754: ST_TO_ADDR
// uc_nation := 0 ;
57755: LD_ADDR_OWVAR 21
57759: PUSH
57760: LD_INT 0
57762: ST_TO_ADDR
// hc_class := class_fish ;
57763: LD_ADDR_OWVAR 28
57767: PUSH
57768: LD_INT 20
57770: ST_TO_ADDR
// hc_gallery :=  ;
57771: LD_ADDR_OWVAR 33
57775: PUSH
57776: LD_STRING 
57778: ST_TO_ADDR
// end ;
57779: LD_VAR 0 1
57783: RET
// export function PrepareBird ( ) ; begin
57784: LD_INT 0
57786: PPUSH
// uc_side := 0 ;
57787: LD_ADDR_OWVAR 20
57791: PUSH
57792: LD_INT 0
57794: ST_TO_ADDR
// uc_nation := 0 ;
57795: LD_ADDR_OWVAR 21
57799: PUSH
57800: LD_INT 0
57802: ST_TO_ADDR
// hc_class := class_phororhacos ;
57803: LD_ADDR_OWVAR 28
57807: PUSH
57808: LD_INT 18
57810: ST_TO_ADDR
// hc_gallery :=  ;
57811: LD_ADDR_OWVAR 33
57815: PUSH
57816: LD_STRING 
57818: ST_TO_ADDR
// end ;
57819: LD_VAR 0 1
57823: RET
// export function PrepareHorse ( ) ; begin
57824: LD_INT 0
57826: PPUSH
// uc_side := 0 ;
57827: LD_ADDR_OWVAR 20
57831: PUSH
57832: LD_INT 0
57834: ST_TO_ADDR
// uc_nation := 0 ;
57835: LD_ADDR_OWVAR 21
57839: PUSH
57840: LD_INT 0
57842: ST_TO_ADDR
// hc_class := class_horse ;
57843: LD_ADDR_OWVAR 28
57847: PUSH
57848: LD_INT 21
57850: ST_TO_ADDR
// hc_gallery :=  ;
57851: LD_ADDR_OWVAR 33
57855: PUSH
57856: LD_STRING 
57858: ST_TO_ADDR
// end ;
57859: LD_VAR 0 1
57863: RET
// export function PrepareMastodont ( ) ; begin
57864: LD_INT 0
57866: PPUSH
// uc_side := 0 ;
57867: LD_ADDR_OWVAR 20
57871: PUSH
57872: LD_INT 0
57874: ST_TO_ADDR
// uc_nation := 0 ;
57875: LD_ADDR_OWVAR 21
57879: PUSH
57880: LD_INT 0
57882: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57883: LD_ADDR_OWVAR 37
57887: PUSH
57888: LD_INT 31
57890: ST_TO_ADDR
// vc_control := control_rider ;
57891: LD_ADDR_OWVAR 38
57895: PUSH
57896: LD_INT 4
57898: ST_TO_ADDR
// end ;
57899: LD_VAR 0 1
57903: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57904: LD_INT 0
57906: PPUSH
57907: PPUSH
57908: PPUSH
// uc_side = 0 ;
57909: LD_ADDR_OWVAR 20
57913: PUSH
57914: LD_INT 0
57916: ST_TO_ADDR
// uc_nation = 0 ;
57917: LD_ADDR_OWVAR 21
57921: PUSH
57922: LD_INT 0
57924: ST_TO_ADDR
// InitHc_All ( ) ;
57925: CALL_OW 584
// InitVc ;
57929: CALL_OW 20
// if mastodonts then
57933: LD_VAR 0 6
57937: IFFALSE 58004
// for i = 1 to mastodonts do
57939: LD_ADDR_VAR 0 11
57943: PUSH
57944: DOUBLE
57945: LD_INT 1
57947: DEC
57948: ST_TO_ADDR
57949: LD_VAR 0 6
57953: PUSH
57954: FOR_TO
57955: IFFALSE 58002
// begin vc_chassis := 31 ;
57957: LD_ADDR_OWVAR 37
57961: PUSH
57962: LD_INT 31
57964: ST_TO_ADDR
// vc_control := control_rider ;
57965: LD_ADDR_OWVAR 38
57969: PUSH
57970: LD_INT 4
57972: ST_TO_ADDR
// animal := CreateVehicle ;
57973: LD_ADDR_VAR 0 12
57977: PUSH
57978: CALL_OW 45
57982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57983: LD_VAR 0 12
57987: PPUSH
57988: LD_VAR 0 8
57992: PPUSH
57993: LD_INT 0
57995: PPUSH
57996: CALL 60132 0 3
// end ;
58000: GO 57954
58002: POP
58003: POP
// if horses then
58004: LD_VAR 0 5
58008: IFFALSE 58075
// for i = 1 to horses do
58010: LD_ADDR_VAR 0 11
58014: PUSH
58015: DOUBLE
58016: LD_INT 1
58018: DEC
58019: ST_TO_ADDR
58020: LD_VAR 0 5
58024: PUSH
58025: FOR_TO
58026: IFFALSE 58073
// begin hc_class := 21 ;
58028: LD_ADDR_OWVAR 28
58032: PUSH
58033: LD_INT 21
58035: ST_TO_ADDR
// hc_gallery :=  ;
58036: LD_ADDR_OWVAR 33
58040: PUSH
58041: LD_STRING 
58043: ST_TO_ADDR
// animal := CreateHuman ;
58044: LD_ADDR_VAR 0 12
58048: PUSH
58049: CALL_OW 44
58053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58054: LD_VAR 0 12
58058: PPUSH
58059: LD_VAR 0 8
58063: PPUSH
58064: LD_INT 0
58066: PPUSH
58067: CALL 60132 0 3
// end ;
58071: GO 58025
58073: POP
58074: POP
// if birds then
58075: LD_VAR 0 1
58079: IFFALSE 58146
// for i = 1 to birds do
58081: LD_ADDR_VAR 0 11
58085: PUSH
58086: DOUBLE
58087: LD_INT 1
58089: DEC
58090: ST_TO_ADDR
58091: LD_VAR 0 1
58095: PUSH
58096: FOR_TO
58097: IFFALSE 58144
// begin hc_class := 18 ;
58099: LD_ADDR_OWVAR 28
58103: PUSH
58104: LD_INT 18
58106: ST_TO_ADDR
// hc_gallery =  ;
58107: LD_ADDR_OWVAR 33
58111: PUSH
58112: LD_STRING 
58114: ST_TO_ADDR
// animal := CreateHuman ;
58115: LD_ADDR_VAR 0 12
58119: PUSH
58120: CALL_OW 44
58124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58125: LD_VAR 0 12
58129: PPUSH
58130: LD_VAR 0 8
58134: PPUSH
58135: LD_INT 0
58137: PPUSH
58138: CALL 60132 0 3
// end ;
58142: GO 58096
58144: POP
58145: POP
// if tigers then
58146: LD_VAR 0 2
58150: IFFALSE 58234
// for i = 1 to tigers do
58152: LD_ADDR_VAR 0 11
58156: PUSH
58157: DOUBLE
58158: LD_INT 1
58160: DEC
58161: ST_TO_ADDR
58162: LD_VAR 0 2
58166: PUSH
58167: FOR_TO
58168: IFFALSE 58232
// begin hc_class = class_tiger ;
58170: LD_ADDR_OWVAR 28
58174: PUSH
58175: LD_INT 14
58177: ST_TO_ADDR
// hc_gallery =  ;
58178: LD_ADDR_OWVAR 33
58182: PUSH
58183: LD_STRING 
58185: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58186: LD_ADDR_OWVAR 35
58190: PUSH
58191: LD_INT 7
58193: NEG
58194: PPUSH
58195: LD_INT 7
58197: PPUSH
58198: CALL_OW 12
58202: ST_TO_ADDR
// animal := CreateHuman ;
58203: LD_ADDR_VAR 0 12
58207: PUSH
58208: CALL_OW 44
58212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58213: LD_VAR 0 12
58217: PPUSH
58218: LD_VAR 0 8
58222: PPUSH
58223: LD_INT 0
58225: PPUSH
58226: CALL 60132 0 3
// end ;
58230: GO 58167
58232: POP
58233: POP
// if apemans then
58234: LD_VAR 0 3
58238: IFFALSE 58361
// for i = 1 to apemans do
58240: LD_ADDR_VAR 0 11
58244: PUSH
58245: DOUBLE
58246: LD_INT 1
58248: DEC
58249: ST_TO_ADDR
58250: LD_VAR 0 3
58254: PUSH
58255: FOR_TO
58256: IFFALSE 58359
// begin hc_class = class_apeman ;
58258: LD_ADDR_OWVAR 28
58262: PUSH
58263: LD_INT 12
58265: ST_TO_ADDR
// hc_gallery =  ;
58266: LD_ADDR_OWVAR 33
58270: PUSH
58271: LD_STRING 
58273: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58274: LD_ADDR_OWVAR 35
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PPUSH
58283: LD_INT 2
58285: PPUSH
58286: CALL_OW 12
58290: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58291: LD_ADDR_OWVAR 31
58295: PUSH
58296: LD_INT 1
58298: PPUSH
58299: LD_INT 3
58301: PPUSH
58302: CALL_OW 12
58306: PUSH
58307: LD_INT 1
58309: PPUSH
58310: LD_INT 3
58312: PPUSH
58313: CALL_OW 12
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// animal := CreateHuman ;
58330: LD_ADDR_VAR 0 12
58334: PUSH
58335: CALL_OW 44
58339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58340: LD_VAR 0 12
58344: PPUSH
58345: LD_VAR 0 8
58349: PPUSH
58350: LD_INT 0
58352: PPUSH
58353: CALL 60132 0 3
// end ;
58357: GO 58255
58359: POP
58360: POP
// if enchidnas then
58361: LD_VAR 0 4
58365: IFFALSE 58432
// for i = 1 to enchidnas do
58367: LD_ADDR_VAR 0 11
58371: PUSH
58372: DOUBLE
58373: LD_INT 1
58375: DEC
58376: ST_TO_ADDR
58377: LD_VAR 0 4
58381: PUSH
58382: FOR_TO
58383: IFFALSE 58430
// begin hc_class = 13 ;
58385: LD_ADDR_OWVAR 28
58389: PUSH
58390: LD_INT 13
58392: ST_TO_ADDR
// hc_gallery =  ;
58393: LD_ADDR_OWVAR 33
58397: PUSH
58398: LD_STRING 
58400: ST_TO_ADDR
// animal := CreateHuman ;
58401: LD_ADDR_VAR 0 12
58405: PUSH
58406: CALL_OW 44
58410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58411: LD_VAR 0 12
58415: PPUSH
58416: LD_VAR 0 8
58420: PPUSH
58421: LD_INT 0
58423: PPUSH
58424: CALL 60132 0 3
// end ;
58428: GO 58382
58430: POP
58431: POP
// if fishes then
58432: LD_VAR 0 7
58436: IFFALSE 58503
// for i = 1 to fishes do
58438: LD_ADDR_VAR 0 11
58442: PUSH
58443: DOUBLE
58444: LD_INT 1
58446: DEC
58447: ST_TO_ADDR
58448: LD_VAR 0 7
58452: PUSH
58453: FOR_TO
58454: IFFALSE 58501
// begin hc_class = 20 ;
58456: LD_ADDR_OWVAR 28
58460: PUSH
58461: LD_INT 20
58463: ST_TO_ADDR
// hc_gallery =  ;
58464: LD_ADDR_OWVAR 33
58468: PUSH
58469: LD_STRING 
58471: ST_TO_ADDR
// animal := CreateHuman ;
58472: LD_ADDR_VAR 0 12
58476: PUSH
58477: CALL_OW 44
58481: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58482: LD_VAR 0 12
58486: PPUSH
58487: LD_VAR 0 9
58491: PPUSH
58492: LD_INT 0
58494: PPUSH
58495: CALL 60132 0 3
// end ;
58499: GO 58453
58501: POP
58502: POP
// end ;
58503: LD_VAR 0 10
58507: RET
// export function WantHeal ( sci , unit ) ; begin
58508: LD_INT 0
58510: PPUSH
// if GetTaskList ( sci ) > 0 then
58511: LD_VAR 0 1
58515: PPUSH
58516: CALL_OW 437
58520: PUSH
58521: LD_INT 0
58523: GREATER
58524: IFFALSE 58594
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58526: LD_VAR 0 1
58530: PPUSH
58531: CALL_OW 437
58535: PUSH
58536: LD_INT 1
58538: ARRAY
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: PUSH
58544: LD_STRING l
58546: EQUAL
58547: PUSH
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 437
58557: PUSH
58558: LD_INT 1
58560: ARRAY
58561: PUSH
58562: LD_INT 4
58564: ARRAY
58565: PUSH
58566: LD_VAR 0 2
58570: EQUAL
58571: AND
58572: IFFALSE 58584
// result := true else
58574: LD_ADDR_VAR 0 3
58578: PUSH
58579: LD_INT 1
58581: ST_TO_ADDR
58582: GO 58592
// result := false ;
58584: LD_ADDR_VAR 0 3
58588: PUSH
58589: LD_INT 0
58591: ST_TO_ADDR
// end else
58592: GO 58602
// result := false ;
58594: LD_ADDR_VAR 0 3
58598: PUSH
58599: LD_INT 0
58601: ST_TO_ADDR
// end ;
58602: LD_VAR 0 3
58606: RET
// export function HealTarget ( sci ) ; begin
58607: LD_INT 0
58609: PPUSH
// if not sci then
58610: LD_VAR 0 1
58614: NOT
58615: IFFALSE 58619
// exit ;
58617: GO 58684
// result := 0 ;
58619: LD_ADDR_VAR 0 2
58623: PUSH
58624: LD_INT 0
58626: ST_TO_ADDR
// if GetTaskList ( sci ) then
58627: LD_VAR 0 1
58631: PPUSH
58632: CALL_OW 437
58636: IFFALSE 58684
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58638: LD_VAR 0 1
58642: PPUSH
58643: CALL_OW 437
58647: PUSH
58648: LD_INT 1
58650: ARRAY
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: PUSH
58656: LD_STRING l
58658: EQUAL
58659: IFFALSE 58684
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58661: LD_ADDR_VAR 0 2
58665: PUSH
58666: LD_VAR 0 1
58670: PPUSH
58671: CALL_OW 437
58675: PUSH
58676: LD_INT 1
58678: ARRAY
58679: PUSH
58680: LD_INT 4
58682: ARRAY
58683: ST_TO_ADDR
// end ;
58684: LD_VAR 0 2
58688: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58689: LD_INT 0
58691: PPUSH
58692: PPUSH
58693: PPUSH
58694: PPUSH
// if not base_units then
58695: LD_VAR 0 1
58699: NOT
58700: IFFALSE 58704
// exit ;
58702: GO 58791
// result := false ;
58704: LD_ADDR_VAR 0 2
58708: PUSH
58709: LD_INT 0
58711: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58712: LD_ADDR_VAR 0 5
58716: PUSH
58717: LD_VAR 0 1
58721: PPUSH
58722: LD_INT 21
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PPUSH
58732: CALL_OW 72
58736: ST_TO_ADDR
// if not tmp then
58737: LD_VAR 0 5
58741: NOT
58742: IFFALSE 58746
// exit ;
58744: GO 58791
// for i in tmp do
58746: LD_ADDR_VAR 0 3
58750: PUSH
58751: LD_VAR 0 5
58755: PUSH
58756: FOR_IN
58757: IFFALSE 58789
// begin result := EnemyInRange ( i , 22 ) ;
58759: LD_ADDR_VAR 0 2
58763: PUSH
58764: LD_VAR 0 3
58768: PPUSH
58769: LD_INT 22
58771: PPUSH
58772: CALL 56378 0 2
58776: ST_TO_ADDR
// if result then
58777: LD_VAR 0 2
58781: IFFALSE 58787
// exit ;
58783: POP
58784: POP
58785: GO 58791
// end ;
58787: GO 58756
58789: POP
58790: POP
// end ;
58791: LD_VAR 0 2
58795: RET
// export function FilterByTag ( units , tag ) ; begin
58796: LD_INT 0
58798: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58799: LD_ADDR_VAR 0 3
58803: PUSH
58804: LD_VAR 0 1
58808: PPUSH
58809: LD_INT 120
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PPUSH
58821: CALL_OW 72
58825: ST_TO_ADDR
// end ;
58826: LD_VAR 0 3
58830: RET
// export function IsDriver ( un ) ; begin
58831: LD_INT 0
58833: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58834: LD_ADDR_VAR 0 2
58838: PUSH
58839: LD_VAR 0 1
58843: PUSH
58844: LD_INT 55
58846: PUSH
58847: EMPTY
58848: LIST
58849: PPUSH
58850: CALL_OW 69
58854: IN
58855: ST_TO_ADDR
// end ;
58856: LD_VAR 0 2
58860: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58861: LD_INT 0
58863: PPUSH
58864: PPUSH
// list := [ ] ;
58865: LD_ADDR_VAR 0 5
58869: PUSH
58870: EMPTY
58871: ST_TO_ADDR
// case d of 0 :
58872: LD_VAR 0 3
58876: PUSH
58877: LD_INT 0
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58885
58883: GO 59018
58885: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58886: LD_ADDR_VAR 0 5
58890: PUSH
58891: LD_VAR 0 1
58895: PUSH
58896: LD_INT 4
58898: MINUS
58899: PUSH
58900: LD_VAR 0 2
58904: PUSH
58905: LD_INT 4
58907: MINUS
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: PUSH
58917: LD_VAR 0 1
58921: PUSH
58922: LD_INT 3
58924: MINUS
58925: PUSH
58926: LD_VAR 0 2
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: PUSH
58939: LD_VAR 0 1
58943: PUSH
58944: LD_INT 4
58946: PLUS
58947: PUSH
58948: LD_VAR 0 2
58952: PUSH
58953: LD_INT 4
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: PUSH
58961: LD_VAR 0 1
58965: PUSH
58966: LD_INT 3
58968: PLUS
58969: PUSH
58970: LD_VAR 0 2
58974: PUSH
58975: LD_INT 3
58977: PLUS
58978: PUSH
58979: LD_INT 5
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: LD_VAR 0 1
58991: PUSH
58992: LD_VAR 0 2
58996: PUSH
58997: LD_INT 4
58999: PLUS
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// end ; 1 :
59016: GO 59716
59018: LD_INT 1
59020: DOUBLE
59021: EQUAL
59022: IFTRUE 59026
59024: GO 59159
59026: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59027: LD_ADDR_VAR 0 5
59031: PUSH
59032: LD_VAR 0 1
59036: PUSH
59037: LD_VAR 0 2
59041: PUSH
59042: LD_INT 4
59044: MINUS
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: PUSH
59054: LD_VAR 0 1
59058: PUSH
59059: LD_INT 3
59061: MINUS
59062: PUSH
59063: LD_VAR 0 2
59067: PUSH
59068: LD_INT 3
59070: MINUS
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: LIST
59079: PUSH
59080: LD_VAR 0 1
59084: PUSH
59085: LD_INT 4
59087: MINUS
59088: PUSH
59089: LD_VAR 0 2
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 3
59114: PLUS
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: LIST
59123: PUSH
59124: LD_VAR 0 1
59128: PUSH
59129: LD_INT 4
59131: PLUS
59132: PUSH
59133: LD_VAR 0 2
59137: PUSH
59138: LD_INT 4
59140: PLUS
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// end ; 2 :
59157: GO 59716
59159: LD_INT 2
59161: DOUBLE
59162: EQUAL
59163: IFTRUE 59167
59165: GO 59296
59167: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59168: LD_ADDR_VAR 0 5
59172: PUSH
59173: LD_VAR 0 1
59177: PUSH
59178: LD_VAR 0 2
59182: PUSH
59183: LD_INT 3
59185: MINUS
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: PUSH
59195: LD_VAR 0 1
59199: PUSH
59200: LD_INT 4
59202: PLUS
59203: PUSH
59204: LD_VAR 0 2
59208: PUSH
59209: LD_INT 4
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: PUSH
59217: LD_VAR 0 1
59221: PUSH
59222: LD_VAR 0 2
59226: PUSH
59227: LD_INT 4
59229: PLUS
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: PUSH
59239: LD_VAR 0 1
59243: PUSH
59244: LD_INT 3
59246: MINUS
59247: PUSH
59248: LD_VAR 0 2
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: PUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_INT 4
59268: MINUS
59269: PUSH
59270: LD_VAR 0 2
59274: PUSH
59275: LD_INT 4
59277: MINUS
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// end ; 3 :
59294: GO 59716
59296: LD_INT 3
59298: DOUBLE
59299: EQUAL
59300: IFTRUE 59304
59302: GO 59437
59304: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59305: LD_ADDR_VAR 0 5
59309: PUSH
59310: LD_VAR 0 1
59314: PUSH
59315: LD_INT 3
59317: PLUS
59318: PUSH
59319: LD_VAR 0 2
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: PUSH
59332: LD_VAR 0 1
59336: PUSH
59337: LD_INT 4
59339: PLUS
59340: PUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 4
59348: PLUS
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: LIST
59357: PUSH
59358: LD_VAR 0 1
59362: PUSH
59363: LD_INT 4
59365: MINUS
59366: PUSH
59367: LD_VAR 0 2
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: LIST
59379: PUSH
59380: LD_VAR 0 1
59384: PUSH
59385: LD_VAR 0 2
59389: PUSH
59390: LD_INT 4
59392: MINUS
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: PUSH
59402: LD_VAR 0 1
59406: PUSH
59407: LD_INT 3
59409: MINUS
59410: PUSH
59411: LD_VAR 0 2
59415: PUSH
59416: LD_INT 3
59418: MINUS
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// end ; 4 :
59435: GO 59716
59437: LD_INT 4
59439: DOUBLE
59440: EQUAL
59441: IFTRUE 59445
59443: GO 59578
59445: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59446: LD_ADDR_VAR 0 5
59450: PUSH
59451: LD_VAR 0 1
59455: PUSH
59456: LD_VAR 0 2
59460: PUSH
59461: LD_INT 4
59463: PLUS
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: PUSH
59473: LD_VAR 0 1
59477: PUSH
59478: LD_INT 3
59480: PLUS
59481: PUSH
59482: LD_VAR 0 2
59486: PUSH
59487: LD_INT 3
59489: PLUS
59490: PUSH
59491: LD_INT 5
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: PUSH
59499: LD_VAR 0 1
59503: PUSH
59504: LD_INT 4
59506: PLUS
59507: PUSH
59508: LD_VAR 0 2
59512: PUSH
59513: LD_INT 4
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: PUSH
59521: LD_VAR 0 1
59525: PUSH
59526: LD_VAR 0 2
59530: PUSH
59531: LD_INT 3
59533: MINUS
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: PUSH
59543: LD_VAR 0 1
59547: PUSH
59548: LD_INT 4
59550: MINUS
59551: PUSH
59552: LD_VAR 0 2
59556: PUSH
59557: LD_INT 4
59559: MINUS
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// end ; 5 :
59576: GO 59716
59578: LD_INT 5
59580: DOUBLE
59581: EQUAL
59582: IFTRUE 59586
59584: GO 59715
59586: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59587: LD_ADDR_VAR 0 5
59591: PUSH
59592: LD_VAR 0 1
59596: PUSH
59597: LD_INT 4
59599: MINUS
59600: PUSH
59601: LD_VAR 0 2
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: PUSH
59614: LD_VAR 0 1
59618: PUSH
59619: LD_VAR 0 2
59623: PUSH
59624: LD_INT 4
59626: MINUS
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: PUSH
59636: LD_VAR 0 1
59640: PUSH
59641: LD_INT 4
59643: PLUS
59644: PUSH
59645: LD_VAR 0 2
59649: PUSH
59650: LD_INT 4
59652: PLUS
59653: PUSH
59654: LD_INT 5
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: PUSH
59662: LD_VAR 0 1
59666: PUSH
59667: LD_INT 3
59669: PLUS
59670: PUSH
59671: LD_VAR 0 2
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: PUSH
59684: LD_VAR 0 1
59688: PUSH
59689: LD_VAR 0 2
59693: PUSH
59694: LD_INT 3
59696: PLUS
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: LIST
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// end ; end ;
59713: GO 59716
59715: POP
// result := list ;
59716: LD_ADDR_VAR 0 4
59720: PUSH
59721: LD_VAR 0 5
59725: ST_TO_ADDR
// end ;
59726: LD_VAR 0 4
59730: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59731: LD_INT 0
59733: PPUSH
59734: PPUSH
59735: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59736: LD_VAR 0 1
59740: NOT
59741: PUSH
59742: LD_VAR 0 2
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: IN
59765: NOT
59766: OR
59767: IFFALSE 59771
// exit ;
59769: GO 59854
// tmp := [ ] ;
59771: LD_ADDR_VAR 0 5
59775: PUSH
59776: EMPTY
59777: ST_TO_ADDR
// for i in units do
59778: LD_ADDR_VAR 0 4
59782: PUSH
59783: LD_VAR 0 1
59787: PUSH
59788: FOR_IN
59789: IFFALSE 59823
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59791: LD_ADDR_VAR 0 5
59795: PUSH
59796: LD_VAR 0 5
59800: PPUSH
59801: LD_VAR 0 4
59805: PPUSH
59806: LD_VAR 0 2
59810: PPUSH
59811: CALL_OW 259
59815: PPUSH
59816: CALL 61227 0 2
59820: ST_TO_ADDR
59821: GO 59788
59823: POP
59824: POP
// if not tmp then
59825: LD_VAR 0 5
59829: NOT
59830: IFFALSE 59834
// exit ;
59832: GO 59854
// result := SortListByListDesc ( units , tmp ) ;
59834: LD_ADDR_VAR 0 3
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: LD_VAR 0 5
59848: PPUSH
59849: CALL_OW 77
59853: ST_TO_ADDR
// end ;
59854: LD_VAR 0 3
59858: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59859: LD_INT 0
59861: PPUSH
59862: PPUSH
59863: PPUSH
// result := false ;
59864: LD_ADDR_VAR 0 3
59868: PUSH
59869: LD_INT 0
59871: ST_TO_ADDR
// if not building then
59872: LD_VAR 0 2
59876: NOT
59877: IFFALSE 59881
// exit ;
59879: GO 60019
// x := GetX ( building ) ;
59881: LD_ADDR_VAR 0 4
59885: PUSH
59886: LD_VAR 0 2
59890: PPUSH
59891: CALL_OW 250
59895: ST_TO_ADDR
// y := GetY ( building ) ;
59896: LD_ADDR_VAR 0 5
59900: PUSH
59901: LD_VAR 0 2
59905: PPUSH
59906: CALL_OW 251
59910: ST_TO_ADDR
// if not x or not y then
59911: LD_VAR 0 4
59915: NOT
59916: PUSH
59917: LD_VAR 0 5
59921: NOT
59922: OR
59923: IFFALSE 59927
// exit ;
59925: GO 60019
// if GetTaskList ( unit ) then
59927: LD_VAR 0 1
59931: PPUSH
59932: CALL_OW 437
59936: IFFALSE 60019
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59938: LD_STRING e
59940: PUSH
59941: LD_VAR 0 1
59945: PPUSH
59946: CALL_OW 437
59950: PUSH
59951: LD_INT 1
59953: ARRAY
59954: PUSH
59955: LD_INT 1
59957: ARRAY
59958: EQUAL
59959: PUSH
59960: LD_VAR 0 4
59964: PUSH
59965: LD_VAR 0 1
59969: PPUSH
59970: CALL_OW 437
59974: PUSH
59975: LD_INT 1
59977: ARRAY
59978: PUSH
59979: LD_INT 2
59981: ARRAY
59982: EQUAL
59983: AND
59984: PUSH
59985: LD_VAR 0 5
59989: PUSH
59990: LD_VAR 0 1
59994: PPUSH
59995: CALL_OW 437
59999: PUSH
60000: LD_INT 1
60002: ARRAY
60003: PUSH
60004: LD_INT 3
60006: ARRAY
60007: EQUAL
60008: AND
60009: IFFALSE 60019
// result := true end ;
60011: LD_ADDR_VAR 0 3
60015: PUSH
60016: LD_INT 1
60018: ST_TO_ADDR
// end ;
60019: LD_VAR 0 3
60023: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60024: LD_INT 0
60026: PPUSH
// result := false ;
60027: LD_ADDR_VAR 0 4
60031: PUSH
60032: LD_INT 0
60034: ST_TO_ADDR
// if GetTaskList ( unit ) then
60035: LD_VAR 0 1
60039: PPUSH
60040: CALL_OW 437
60044: IFFALSE 60127
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60046: LD_STRING M
60048: PUSH
60049: LD_VAR 0 1
60053: PPUSH
60054: CALL_OW 437
60058: PUSH
60059: LD_INT 1
60061: ARRAY
60062: PUSH
60063: LD_INT 1
60065: ARRAY
60066: EQUAL
60067: PUSH
60068: LD_VAR 0 2
60072: PUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: CALL_OW 437
60082: PUSH
60083: LD_INT 1
60085: ARRAY
60086: PUSH
60087: LD_INT 2
60089: ARRAY
60090: EQUAL
60091: AND
60092: PUSH
60093: LD_VAR 0 3
60097: PUSH
60098: LD_VAR 0 1
60102: PPUSH
60103: CALL_OW 437
60107: PUSH
60108: LD_INT 1
60110: ARRAY
60111: PUSH
60112: LD_INT 3
60114: ARRAY
60115: EQUAL
60116: AND
60117: IFFALSE 60127
// result := true ;
60119: LD_ADDR_VAR 0 4
60123: PUSH
60124: LD_INT 1
60126: ST_TO_ADDR
// end ; end ;
60127: LD_VAR 0 4
60131: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60132: LD_INT 0
60134: PPUSH
60135: PPUSH
60136: PPUSH
60137: PPUSH
// if not unit or not area then
60138: LD_VAR 0 1
60142: NOT
60143: PUSH
60144: LD_VAR 0 2
60148: NOT
60149: OR
60150: IFFALSE 60154
// exit ;
60152: GO 60330
// tmp := AreaToList ( area , i ) ;
60154: LD_ADDR_VAR 0 6
60158: PUSH
60159: LD_VAR 0 2
60163: PPUSH
60164: LD_VAR 0 5
60168: PPUSH
60169: CALL_OW 517
60173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60174: LD_ADDR_VAR 0 5
60178: PUSH
60179: DOUBLE
60180: LD_INT 1
60182: DEC
60183: ST_TO_ADDR
60184: LD_VAR 0 6
60188: PUSH
60189: LD_INT 1
60191: ARRAY
60192: PUSH
60193: FOR_TO
60194: IFFALSE 60328
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60196: LD_ADDR_VAR 0 7
60200: PUSH
60201: LD_VAR 0 6
60205: PUSH
60206: LD_INT 1
60208: ARRAY
60209: PUSH
60210: LD_VAR 0 5
60214: ARRAY
60215: PUSH
60216: LD_VAR 0 6
60220: PUSH
60221: LD_INT 2
60223: ARRAY
60224: PUSH
60225: LD_VAR 0 5
60229: ARRAY
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
60235: LD_INT 92
60237: PUSH
60238: LD_VAR 0 7
60242: PUSH
60243: LD_INT 1
60245: ARRAY
60246: PUSH
60247: LD_VAR 0 7
60251: PUSH
60252: LD_INT 2
60254: ARRAY
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: PPUSH
60265: CALL_OW 69
60269: PUSH
60270: LD_INT 0
60272: EQUAL
60273: IFFALSE 60326
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60275: LD_VAR 0 1
60279: PPUSH
60280: LD_VAR 0 7
60284: PUSH
60285: LD_INT 1
60287: ARRAY
60288: PPUSH
60289: LD_VAR 0 7
60293: PUSH
60294: LD_INT 2
60296: ARRAY
60297: PPUSH
60298: LD_VAR 0 3
60302: PPUSH
60303: CALL_OW 48
// result := IsPlaced ( unit ) ;
60307: LD_ADDR_VAR 0 4
60311: PUSH
60312: LD_VAR 0 1
60316: PPUSH
60317: CALL_OW 305
60321: ST_TO_ADDR
// exit ;
60322: POP
60323: POP
60324: GO 60330
// end ; end ;
60326: GO 60193
60328: POP
60329: POP
// end ;
60330: LD_VAR 0 4
60334: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
60339: PPUSH
// if not side or side > 8 then
60340: LD_VAR 0 1
60344: NOT
60345: PUSH
60346: LD_VAR 0 1
60350: PUSH
60351: LD_INT 8
60353: GREATER
60354: OR
60355: IFFALSE 60359
// exit ;
60357: GO 60546
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60359: LD_ADDR_VAR 0 4
60363: PUSH
60364: LD_INT 22
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 21
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PPUSH
60390: CALL_OW 69
60394: ST_TO_ADDR
// if not tmp then
60395: LD_VAR 0 4
60399: NOT
60400: IFFALSE 60404
// exit ;
60402: GO 60546
// enable_addtolog := true ;
60404: LD_ADDR_OWVAR 81
60408: PUSH
60409: LD_INT 1
60411: ST_TO_ADDR
// AddToLog ( [ ) ;
60412: LD_STRING [
60414: PPUSH
60415: CALL_OW 561
// for i in tmp do
60419: LD_ADDR_VAR 0 3
60423: PUSH
60424: LD_VAR 0 4
60428: PUSH
60429: FOR_IN
60430: IFFALSE 60537
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60432: LD_STRING [
60434: PUSH
60435: LD_VAR 0 3
60439: PPUSH
60440: CALL_OW 266
60444: STR
60445: PUSH
60446: LD_STRING , 
60448: STR
60449: PUSH
60450: LD_VAR 0 3
60454: PPUSH
60455: CALL_OW 250
60459: STR
60460: PUSH
60461: LD_STRING , 
60463: STR
60464: PUSH
60465: LD_VAR 0 3
60469: PPUSH
60470: CALL_OW 251
60474: STR
60475: PUSH
60476: LD_STRING , 
60478: STR
60479: PUSH
60480: LD_VAR 0 3
60484: PPUSH
60485: CALL_OW 254
60489: STR
60490: PUSH
60491: LD_STRING , 
60493: STR
60494: PUSH
60495: LD_VAR 0 3
60499: PPUSH
60500: LD_INT 1
60502: PPUSH
60503: CALL_OW 268
60507: STR
60508: PUSH
60509: LD_STRING , 
60511: STR
60512: PUSH
60513: LD_VAR 0 3
60517: PPUSH
60518: LD_INT 2
60520: PPUSH
60521: CALL_OW 268
60525: STR
60526: PUSH
60527: LD_STRING ],
60529: STR
60530: PPUSH
60531: CALL_OW 561
// end ;
60535: GO 60429
60537: POP
60538: POP
// AddToLog ( ]; ) ;
60539: LD_STRING ];
60541: PPUSH
60542: CALL_OW 561
// end ;
60546: LD_VAR 0 2
60550: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60551: LD_INT 0
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
60557: PPUSH
// if not area or not rate or not max then
60558: LD_VAR 0 1
60562: NOT
60563: PUSH
60564: LD_VAR 0 2
60568: NOT
60569: OR
60570: PUSH
60571: LD_VAR 0 4
60575: NOT
60576: OR
60577: IFFALSE 60581
// exit ;
60579: GO 60770
// while 1 do
60581: LD_INT 1
60583: IFFALSE 60770
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60585: LD_ADDR_VAR 0 9
60589: PUSH
60590: LD_VAR 0 1
60594: PPUSH
60595: LD_INT 1
60597: PPUSH
60598: CALL_OW 287
60602: PUSH
60603: LD_INT 10
60605: MUL
60606: ST_TO_ADDR
// r := rate / 10 ;
60607: LD_ADDR_VAR 0 7
60611: PUSH
60612: LD_VAR 0 2
60616: PUSH
60617: LD_INT 10
60619: DIVREAL
60620: ST_TO_ADDR
// time := 1 1$00 ;
60621: LD_ADDR_VAR 0 8
60625: PUSH
60626: LD_INT 2100
60628: ST_TO_ADDR
// if amount < min then
60629: LD_VAR 0 9
60633: PUSH
60634: LD_VAR 0 3
60638: LESS
60639: IFFALSE 60657
// r := r * 2 else
60641: LD_ADDR_VAR 0 7
60645: PUSH
60646: LD_VAR 0 7
60650: PUSH
60651: LD_INT 2
60653: MUL
60654: ST_TO_ADDR
60655: GO 60683
// if amount > max then
60657: LD_VAR 0 9
60661: PUSH
60662: LD_VAR 0 4
60666: GREATER
60667: IFFALSE 60683
// r := r / 2 ;
60669: LD_ADDR_VAR 0 7
60673: PUSH
60674: LD_VAR 0 7
60678: PUSH
60679: LD_INT 2
60681: DIVREAL
60682: ST_TO_ADDR
// time := time / r ;
60683: LD_ADDR_VAR 0 8
60687: PUSH
60688: LD_VAR 0 8
60692: PUSH
60693: LD_VAR 0 7
60697: DIVREAL
60698: ST_TO_ADDR
// if time < 0 then
60699: LD_VAR 0 8
60703: PUSH
60704: LD_INT 0
60706: LESS
60707: IFFALSE 60724
// time := time * - 1 ;
60709: LD_ADDR_VAR 0 8
60713: PUSH
60714: LD_VAR 0 8
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: MUL
60723: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60724: LD_VAR 0 8
60728: PUSH
60729: LD_INT 35
60731: PPUSH
60732: LD_INT 875
60734: PPUSH
60735: CALL_OW 12
60739: PLUS
60740: PPUSH
60741: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60745: LD_INT 1
60747: PPUSH
60748: LD_INT 5
60750: PPUSH
60751: CALL_OW 12
60755: PPUSH
60756: LD_VAR 0 1
60760: PPUSH
60761: LD_INT 1
60763: PPUSH
60764: CALL_OW 55
// end ;
60768: GO 60581
// end ;
60770: LD_VAR 0 5
60774: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60775: LD_INT 0
60777: PPUSH
60778: PPUSH
60779: PPUSH
60780: PPUSH
60781: PPUSH
60782: PPUSH
60783: PPUSH
60784: PPUSH
// if not turrets or not factories then
60785: LD_VAR 0 1
60789: NOT
60790: PUSH
60791: LD_VAR 0 2
60795: NOT
60796: OR
60797: IFFALSE 60801
// exit ;
60799: GO 61108
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60801: LD_ADDR_VAR 0 10
60805: PUSH
60806: LD_INT 5
60808: PUSH
60809: LD_INT 6
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 5
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 24
60843: PUSH
60844: LD_INT 25
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 23
60853: PUSH
60854: LD_INT 27
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 42
60867: PUSH
60868: LD_INT 43
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 44
60877: PUSH
60878: LD_INT 46
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 45
60887: PUSH
60888: LD_INT 47
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// result := [ ] ;
60905: LD_ADDR_VAR 0 3
60909: PUSH
60910: EMPTY
60911: ST_TO_ADDR
// for i in turrets do
60912: LD_ADDR_VAR 0 4
60916: PUSH
60917: LD_VAR 0 1
60921: PUSH
60922: FOR_IN
60923: IFFALSE 61106
// begin nat := GetNation ( i ) ;
60925: LD_ADDR_VAR 0 7
60929: PUSH
60930: LD_VAR 0 4
60934: PPUSH
60935: CALL_OW 248
60939: ST_TO_ADDR
// weapon := 0 ;
60940: LD_ADDR_VAR 0 8
60944: PUSH
60945: LD_INT 0
60947: ST_TO_ADDR
// if not nat then
60948: LD_VAR 0 7
60952: NOT
60953: IFFALSE 60957
// continue ;
60955: GO 60922
// for j in list [ nat ] do
60957: LD_ADDR_VAR 0 5
60961: PUSH
60962: LD_VAR 0 10
60966: PUSH
60967: LD_VAR 0 7
60971: ARRAY
60972: PUSH
60973: FOR_IN
60974: IFFALSE 61015
// if GetBWeapon ( i ) = j [ 1 ] then
60976: LD_VAR 0 4
60980: PPUSH
60981: CALL_OW 269
60985: PUSH
60986: LD_VAR 0 5
60990: PUSH
60991: LD_INT 1
60993: ARRAY
60994: EQUAL
60995: IFFALSE 61013
// begin weapon := j [ 2 ] ;
60997: LD_ADDR_VAR 0 8
61001: PUSH
61002: LD_VAR 0 5
61006: PUSH
61007: LD_INT 2
61009: ARRAY
61010: ST_TO_ADDR
// break ;
61011: GO 61015
// end ;
61013: GO 60973
61015: POP
61016: POP
// if not weapon then
61017: LD_VAR 0 8
61021: NOT
61022: IFFALSE 61026
// continue ;
61024: GO 60922
// for k in factories do
61026: LD_ADDR_VAR 0 6
61030: PUSH
61031: LD_VAR 0 2
61035: PUSH
61036: FOR_IN
61037: IFFALSE 61102
// begin weapons := AvailableWeaponList ( k ) ;
61039: LD_ADDR_VAR 0 9
61043: PUSH
61044: LD_VAR 0 6
61048: PPUSH
61049: CALL_OW 478
61053: ST_TO_ADDR
// if not weapons then
61054: LD_VAR 0 9
61058: NOT
61059: IFFALSE 61063
// continue ;
61061: GO 61036
// if weapon in weapons then
61063: LD_VAR 0 8
61067: PUSH
61068: LD_VAR 0 9
61072: IN
61073: IFFALSE 61100
// begin result := [ i , weapon ] ;
61075: LD_ADDR_VAR 0 3
61079: PUSH
61080: LD_VAR 0 4
61084: PUSH
61085: LD_VAR 0 8
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// exit ;
61094: POP
61095: POP
61096: POP
61097: POP
61098: GO 61108
// end ; end ;
61100: GO 61036
61102: POP
61103: POP
// end ;
61104: GO 60922
61106: POP
61107: POP
// end ;
61108: LD_VAR 0 3
61112: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61113: LD_INT 0
61115: PPUSH
// if not side or side > 8 then
61116: LD_VAR 0 3
61120: NOT
61121: PUSH
61122: LD_VAR 0 3
61126: PUSH
61127: LD_INT 8
61129: GREATER
61130: OR
61131: IFFALSE 61135
// exit ;
61133: GO 61194
// if not range then
61135: LD_VAR 0 4
61139: NOT
61140: IFFALSE 61151
// range := - 12 ;
61142: LD_ADDR_VAR 0 4
61146: PUSH
61147: LD_INT 12
61149: NEG
61150: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61151: LD_VAR 0 1
61155: PPUSH
61156: LD_VAR 0 2
61160: PPUSH
61161: LD_VAR 0 3
61165: PPUSH
61166: LD_VAR 0 4
61170: PPUSH
61171: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61175: LD_VAR 0 1
61179: PPUSH
61180: LD_VAR 0 2
61184: PPUSH
61185: LD_VAR 0 3
61189: PPUSH
61190: CALL_OW 331
// end ;
61194: LD_VAR 0 5
61198: RET
// export function Video ( mode ) ; begin
61199: LD_INT 0
61201: PPUSH
// ingame_video = mode ;
61202: LD_ADDR_OWVAR 52
61206: PUSH
61207: LD_VAR 0 1
61211: ST_TO_ADDR
// interface_hidden = mode ;
61212: LD_ADDR_OWVAR 54
61216: PUSH
61217: LD_VAR 0 1
61221: ST_TO_ADDR
// end ;
61222: LD_VAR 0 2
61226: RET
// export function Join ( array , element ) ; begin
61227: LD_INT 0
61229: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61230: LD_ADDR_VAR 0 3
61234: PUSH
61235: LD_VAR 0 1
61239: PPUSH
61240: LD_VAR 0 1
61244: PUSH
61245: LD_INT 1
61247: PLUS
61248: PPUSH
61249: LD_VAR 0 2
61253: PPUSH
61254: CALL_OW 1
61258: ST_TO_ADDR
// end ;
61259: LD_VAR 0 3
61263: RET
// export function JoinUnion ( array , element ) ; begin
61264: LD_INT 0
61266: PPUSH
// result := array union element ;
61267: LD_ADDR_VAR 0 3
61271: PUSH
61272: LD_VAR 0 1
61276: PUSH
61277: LD_VAR 0 2
61281: UNION
61282: ST_TO_ADDR
// end ;
61283: LD_VAR 0 3
61287: RET
// export function GetBehemoths ( side ) ; begin
61288: LD_INT 0
61290: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61291: LD_ADDR_VAR 0 2
61295: PUSH
61296: LD_INT 22
61298: PUSH
61299: LD_VAR 0 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 31
61310: PUSH
61311: LD_INT 25
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PPUSH
61322: CALL_OW 69
61326: ST_TO_ADDR
// end ;
61327: LD_VAR 0 2
61331: RET
// export function Shuffle ( array ) ; var i , index ; begin
61332: LD_INT 0
61334: PPUSH
61335: PPUSH
61336: PPUSH
// result := [ ] ;
61337: LD_ADDR_VAR 0 2
61341: PUSH
61342: EMPTY
61343: ST_TO_ADDR
// if not array then
61344: LD_VAR 0 1
61348: NOT
61349: IFFALSE 61353
// exit ;
61351: GO 61452
// Randomize ;
61353: CALL_OW 10
// for i = array downto 1 do
61357: LD_ADDR_VAR 0 3
61361: PUSH
61362: DOUBLE
61363: LD_VAR 0 1
61367: INC
61368: ST_TO_ADDR
61369: LD_INT 1
61371: PUSH
61372: FOR_DOWNTO
61373: IFFALSE 61450
// begin index := rand ( 1 , array ) ;
61375: LD_ADDR_VAR 0 4
61379: PUSH
61380: LD_INT 1
61382: PPUSH
61383: LD_VAR 0 1
61387: PPUSH
61388: CALL_OW 12
61392: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61393: LD_ADDR_VAR 0 2
61397: PUSH
61398: LD_VAR 0 2
61402: PPUSH
61403: LD_VAR 0 2
61407: PUSH
61408: LD_INT 1
61410: PLUS
61411: PPUSH
61412: LD_VAR 0 1
61416: PUSH
61417: LD_VAR 0 4
61421: ARRAY
61422: PPUSH
61423: CALL_OW 2
61427: ST_TO_ADDR
// array := Delete ( array , index ) ;
61428: LD_ADDR_VAR 0 1
61432: PUSH
61433: LD_VAR 0 1
61437: PPUSH
61438: LD_VAR 0 4
61442: PPUSH
61443: CALL_OW 3
61447: ST_TO_ADDR
// end ;
61448: GO 61372
61450: POP
61451: POP
// end ;
61452: LD_VAR 0 2
61456: RET
// export function GetBaseMaterials ( base ) ; begin
61457: LD_INT 0
61459: PPUSH
// result := [ 0 , 0 , 0 ] ;
61460: LD_ADDR_VAR 0 2
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// if not base then
61479: LD_VAR 0 1
61483: NOT
61484: IFFALSE 61488
// exit ;
61486: GO 61537
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61488: LD_ADDR_VAR 0 2
61492: PUSH
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_INT 1
61500: PPUSH
61501: CALL_OW 275
61505: PUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_INT 2
61513: PPUSH
61514: CALL_OW 275
61518: PUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: LD_INT 3
61526: PPUSH
61527: CALL_OW 275
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: LIST
61536: ST_TO_ADDR
// end ;
61537: LD_VAR 0 2
61541: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61542: LD_INT 0
61544: PPUSH
61545: PPUSH
// result := array ;
61546: LD_ADDR_VAR 0 3
61550: PUSH
61551: LD_VAR 0 1
61555: ST_TO_ADDR
// if size >= result then
61556: LD_VAR 0 2
61560: PUSH
61561: LD_VAR 0 3
61565: GREATEREQUAL
61566: IFFALSE 61570
// exit ;
61568: GO 61620
// if size then
61570: LD_VAR 0 2
61574: IFFALSE 61620
// for i := array downto size do
61576: LD_ADDR_VAR 0 4
61580: PUSH
61581: DOUBLE
61582: LD_VAR 0 1
61586: INC
61587: ST_TO_ADDR
61588: LD_VAR 0 2
61592: PUSH
61593: FOR_DOWNTO
61594: IFFALSE 61618
// result := Delete ( result , result ) ;
61596: LD_ADDR_VAR 0 3
61600: PUSH
61601: LD_VAR 0 3
61605: PPUSH
61606: LD_VAR 0 3
61610: PPUSH
61611: CALL_OW 3
61615: ST_TO_ADDR
61616: GO 61593
61618: POP
61619: POP
// end ;
61620: LD_VAR 0 3
61624: RET
// export function ComExit ( unit ) ; var tmp ; begin
61625: LD_INT 0
61627: PPUSH
61628: PPUSH
// if not IsInUnit ( unit ) then
61629: LD_VAR 0 1
61633: PPUSH
61634: CALL_OW 310
61638: NOT
61639: IFFALSE 61643
// exit ;
61641: GO 61703
// tmp := IsInUnit ( unit ) ;
61643: LD_ADDR_VAR 0 3
61647: PUSH
61648: LD_VAR 0 1
61652: PPUSH
61653: CALL_OW 310
61657: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61658: LD_VAR 0 3
61662: PPUSH
61663: CALL_OW 247
61667: PUSH
61668: LD_INT 2
61670: EQUAL
61671: IFFALSE 61684
// ComExitVehicle ( unit ) else
61673: LD_VAR 0 1
61677: PPUSH
61678: CALL_OW 121
61682: GO 61693
// ComExitBuilding ( unit ) ;
61684: LD_VAR 0 1
61688: PPUSH
61689: CALL_OW 122
// result := tmp ;
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: LD_VAR 0 3
61702: ST_TO_ADDR
// end ;
61703: LD_VAR 0 2
61707: RET
// export function ComExitAll ( units ) ; var i ; begin
61708: LD_INT 0
61710: PPUSH
61711: PPUSH
// if not units then
61712: LD_VAR 0 1
61716: NOT
61717: IFFALSE 61721
// exit ;
61719: GO 61747
// for i in units do
61721: LD_ADDR_VAR 0 3
61725: PUSH
61726: LD_VAR 0 1
61730: PUSH
61731: FOR_IN
61732: IFFALSE 61745
// ComExit ( i ) ;
61734: LD_VAR 0 3
61738: PPUSH
61739: CALL 61625 0 1
61743: GO 61731
61745: POP
61746: POP
// end ;
61747: LD_VAR 0 2
61751: RET
// export function ResetHc ; begin
61752: LD_INT 0
61754: PPUSH
// InitHc ;
61755: CALL_OW 19
// hc_importance := 0 ;
61759: LD_ADDR_OWVAR 32
61763: PUSH
61764: LD_INT 0
61766: ST_TO_ADDR
// end ;
61767: LD_VAR 0 1
61771: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61772: LD_INT 0
61774: PPUSH
61775: PPUSH
61776: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61777: LD_ADDR_VAR 0 6
61781: PUSH
61782: LD_VAR 0 1
61786: PUSH
61787: LD_VAR 0 3
61791: PLUS
61792: PUSH
61793: LD_INT 2
61795: DIV
61796: ST_TO_ADDR
// if _x < 0 then
61797: LD_VAR 0 6
61801: PUSH
61802: LD_INT 0
61804: LESS
61805: IFFALSE 61822
// _x := _x * - 1 ;
61807: LD_ADDR_VAR 0 6
61811: PUSH
61812: LD_VAR 0 6
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: MUL
61821: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61822: LD_ADDR_VAR 0 7
61826: PUSH
61827: LD_VAR 0 2
61831: PUSH
61832: LD_VAR 0 4
61836: PLUS
61837: PUSH
61838: LD_INT 2
61840: DIV
61841: ST_TO_ADDR
// if _y < 0 then
61842: LD_VAR 0 7
61846: PUSH
61847: LD_INT 0
61849: LESS
61850: IFFALSE 61867
// _y := _y * - 1 ;
61852: LD_ADDR_VAR 0 7
61856: PUSH
61857: LD_VAR 0 7
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: MUL
61866: ST_TO_ADDR
// result := [ _x , _y ] ;
61867: LD_ADDR_VAR 0 5
61871: PUSH
61872: LD_VAR 0 6
61876: PUSH
61877: LD_VAR 0 7
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// end ;
61886: LD_VAR 0 5
61890: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61891: LD_INT 0
61893: PPUSH
61894: PPUSH
61895: PPUSH
61896: PPUSH
// task := GetTaskList ( unit ) ;
61897: LD_ADDR_VAR 0 7
61901: PUSH
61902: LD_VAR 0 1
61906: PPUSH
61907: CALL_OW 437
61911: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61912: LD_VAR 0 7
61916: NOT
61917: PUSH
61918: LD_VAR 0 1
61922: PPUSH
61923: LD_VAR 0 2
61927: PPUSH
61928: CALL_OW 308
61932: NOT
61933: AND
61934: IFFALSE 61938
// exit ;
61936: GO 62056
// if IsInArea ( unit , area ) then
61938: LD_VAR 0 1
61942: PPUSH
61943: LD_VAR 0 2
61947: PPUSH
61948: CALL_OW 308
61952: IFFALSE 61970
// begin ComMoveToArea ( unit , goAway ) ;
61954: LD_VAR 0 1
61958: PPUSH
61959: LD_VAR 0 3
61963: PPUSH
61964: CALL_OW 113
// exit ;
61968: GO 62056
// end ; if task [ 1 ] [ 1 ] <> M then
61970: LD_VAR 0 7
61974: PUSH
61975: LD_INT 1
61977: ARRAY
61978: PUSH
61979: LD_INT 1
61981: ARRAY
61982: PUSH
61983: LD_STRING M
61985: NONEQUAL
61986: IFFALSE 61990
// exit ;
61988: GO 62056
// x := task [ 1 ] [ 2 ] ;
61990: LD_ADDR_VAR 0 5
61994: PUSH
61995: LD_VAR 0 7
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: PUSH
62004: LD_INT 2
62006: ARRAY
62007: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62008: LD_ADDR_VAR 0 6
62012: PUSH
62013: LD_VAR 0 7
62017: PUSH
62018: LD_INT 1
62020: ARRAY
62021: PUSH
62022: LD_INT 3
62024: ARRAY
62025: ST_TO_ADDR
// if InArea ( x , y , area ) then
62026: LD_VAR 0 5
62030: PPUSH
62031: LD_VAR 0 6
62035: PPUSH
62036: LD_VAR 0 2
62040: PPUSH
62041: CALL_OW 309
62045: IFFALSE 62056
// ComStop ( unit ) ;
62047: LD_VAR 0 1
62051: PPUSH
62052: CALL_OW 141
// end ;
62056: LD_VAR 0 4
62060: RET
// export function Abs ( value ) ; begin
62061: LD_INT 0
62063: PPUSH
// result := value ;
62064: LD_ADDR_VAR 0 2
62068: PUSH
62069: LD_VAR 0 1
62073: ST_TO_ADDR
// if value < 0 then
62074: LD_VAR 0 1
62078: PUSH
62079: LD_INT 0
62081: LESS
62082: IFFALSE 62099
// result := value * - 1 ;
62084: LD_ADDR_VAR 0 2
62088: PUSH
62089: LD_VAR 0 1
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: MUL
62098: ST_TO_ADDR
// end ;
62099: LD_VAR 0 2
62103: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62104: LD_INT 0
62106: PPUSH
62107: PPUSH
62108: PPUSH
62109: PPUSH
62110: PPUSH
62111: PPUSH
62112: PPUSH
62113: PPUSH
// if not unit or not building then
62114: LD_VAR 0 1
62118: NOT
62119: PUSH
62120: LD_VAR 0 2
62124: NOT
62125: OR
62126: IFFALSE 62130
// exit ;
62128: GO 62356
// x := GetX ( building ) ;
62130: LD_ADDR_VAR 0 4
62134: PUSH
62135: LD_VAR 0 2
62139: PPUSH
62140: CALL_OW 250
62144: ST_TO_ADDR
// y := GetY ( building ) ;
62145: LD_ADDR_VAR 0 6
62149: PUSH
62150: LD_VAR 0 2
62154: PPUSH
62155: CALL_OW 251
62159: ST_TO_ADDR
// d := GetDir ( building ) ;
62160: LD_ADDR_VAR 0 8
62164: PUSH
62165: LD_VAR 0 2
62169: PPUSH
62170: CALL_OW 254
62174: ST_TO_ADDR
// r := 4 ;
62175: LD_ADDR_VAR 0 9
62179: PUSH
62180: LD_INT 4
62182: ST_TO_ADDR
// for i := 1 to 5 do
62183: LD_ADDR_VAR 0 10
62187: PUSH
62188: DOUBLE
62189: LD_INT 1
62191: DEC
62192: ST_TO_ADDR
62193: LD_INT 5
62195: PUSH
62196: FOR_TO
62197: IFFALSE 62354
// begin _x := ShiftX ( x , d , r + i ) ;
62199: LD_ADDR_VAR 0 5
62203: PUSH
62204: LD_VAR 0 4
62208: PPUSH
62209: LD_VAR 0 8
62213: PPUSH
62214: LD_VAR 0 9
62218: PUSH
62219: LD_VAR 0 10
62223: PLUS
62224: PPUSH
62225: CALL_OW 272
62229: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62230: LD_ADDR_VAR 0 7
62234: PUSH
62235: LD_VAR 0 6
62239: PPUSH
62240: LD_VAR 0 8
62244: PPUSH
62245: LD_VAR 0 9
62249: PUSH
62250: LD_VAR 0 10
62254: PLUS
62255: PPUSH
62256: CALL_OW 273
62260: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62261: LD_VAR 0 5
62265: PPUSH
62266: LD_VAR 0 7
62270: PPUSH
62271: CALL_OW 488
62275: PUSH
62276: LD_VAR 0 5
62280: PPUSH
62281: LD_VAR 0 7
62285: PPUSH
62286: CALL_OW 428
62290: PPUSH
62291: CALL_OW 247
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: IN
62306: NOT
62307: AND
62308: IFFALSE 62352
// begin ComMoveXY ( unit , _x , _y ) ;
62310: LD_VAR 0 1
62314: PPUSH
62315: LD_VAR 0 5
62319: PPUSH
62320: LD_VAR 0 7
62324: PPUSH
62325: CALL_OW 111
// result := [ _x , _y ] ;
62329: LD_ADDR_VAR 0 3
62333: PUSH
62334: LD_VAR 0 5
62338: PUSH
62339: LD_VAR 0 7
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: ST_TO_ADDR
// exit ;
62348: POP
62349: POP
62350: GO 62356
// end ; end ;
62352: GO 62196
62354: POP
62355: POP
// end ;
62356: LD_VAR 0 3
62360: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62361: LD_INT 0
62363: PPUSH
62364: PPUSH
62365: PPUSH
// result := 0 ;
62366: LD_ADDR_VAR 0 3
62370: PUSH
62371: LD_INT 0
62373: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62374: LD_VAR 0 1
62378: PUSH
62379: LD_INT 0
62381: LESS
62382: PUSH
62383: LD_VAR 0 1
62387: PUSH
62388: LD_INT 8
62390: GREATER
62391: OR
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 0
62400: LESS
62401: OR
62402: PUSH
62403: LD_VAR 0 2
62407: PUSH
62408: LD_INT 8
62410: GREATER
62411: OR
62412: IFFALSE 62416
// exit ;
62414: GO 62491
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62416: LD_ADDR_VAR 0 4
62420: PUSH
62421: LD_INT 22
62423: PUSH
62424: LD_VAR 0 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PPUSH
62433: CALL_OW 69
62437: PUSH
62438: FOR_IN
62439: IFFALSE 62489
// begin un := UnitShoot ( i ) ;
62441: LD_ADDR_VAR 0 5
62445: PUSH
62446: LD_VAR 0 4
62450: PPUSH
62451: CALL_OW 504
62455: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62456: LD_VAR 0 5
62460: PPUSH
62461: CALL_OW 255
62465: PUSH
62466: LD_VAR 0 1
62470: EQUAL
62471: IFFALSE 62487
// begin result := un ;
62473: LD_ADDR_VAR 0 3
62477: PUSH
62478: LD_VAR 0 5
62482: ST_TO_ADDR
// exit ;
62483: POP
62484: POP
62485: GO 62491
// end ; end ;
62487: GO 62438
62489: POP
62490: POP
// end ;
62491: LD_VAR 0 3
62495: RET
// export function GetCargoBay ( units ) ; begin
62496: LD_INT 0
62498: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62499: LD_ADDR_VAR 0 2
62503: PUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: LD_INT 2
62511: PUSH
62512: LD_INT 34
62514: PUSH
62515: LD_INT 12
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 34
62524: PUSH
62525: LD_INT 51
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 34
62534: PUSH
62535: LD_INT 32
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 34
62544: PUSH
62545: LD_INT 89
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: PPUSH
62559: CALL_OW 72
62563: ST_TO_ADDR
// end ;
62564: LD_VAR 0 2
62568: RET
// export function Negate ( value ) ; begin
62569: LD_INT 0
62571: PPUSH
// result := not value ;
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: LD_VAR 0 1
62581: NOT
62582: ST_TO_ADDR
// end ;
62583: LD_VAR 0 2
62587: RET
// export function Inc ( value ) ; begin
62588: LD_INT 0
62590: PPUSH
// result := value + 1 ;
62591: LD_ADDR_VAR 0 2
62595: PUSH
62596: LD_VAR 0 1
62600: PUSH
62601: LD_INT 1
62603: PLUS
62604: ST_TO_ADDR
// end ;
62605: LD_VAR 0 2
62609: RET
// export function Dec ( value ) ; begin
62610: LD_INT 0
62612: PPUSH
// result := value - 1 ;
62613: LD_ADDR_VAR 0 2
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: LD_INT 1
62625: MINUS
62626: ST_TO_ADDR
// end ;
62627: LD_VAR 0 2
62631: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62632: LD_INT 0
62634: PPUSH
62635: PPUSH
62636: PPUSH
62637: PPUSH
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62642: LD_VAR 0 1
62646: PPUSH
62647: LD_VAR 0 2
62651: PPUSH
62652: CALL_OW 488
62656: NOT
62657: PUSH
62658: LD_VAR 0 3
62662: PPUSH
62663: LD_VAR 0 4
62667: PPUSH
62668: CALL_OW 488
62672: NOT
62673: OR
62674: IFFALSE 62687
// begin result := - 1 ;
62676: LD_ADDR_VAR 0 5
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: ST_TO_ADDR
// exit ;
62685: GO 62922
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62687: LD_ADDR_VAR 0 12
62691: PUSH
62692: LD_VAR 0 1
62696: PPUSH
62697: LD_VAR 0 2
62701: PPUSH
62702: LD_VAR 0 3
62706: PPUSH
62707: LD_VAR 0 4
62711: PPUSH
62712: CALL 61772 0 4
62716: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62717: LD_ADDR_VAR 0 11
62721: PUSH
62722: LD_VAR 0 1
62726: PPUSH
62727: LD_VAR 0 2
62731: PPUSH
62732: LD_VAR 0 12
62736: PUSH
62737: LD_INT 1
62739: ARRAY
62740: PPUSH
62741: LD_VAR 0 12
62745: PUSH
62746: LD_INT 2
62748: ARRAY
62749: PPUSH
62750: CALL_OW 298
62754: ST_TO_ADDR
// distance := 9999 ;
62755: LD_ADDR_VAR 0 10
62759: PUSH
62760: LD_INT 9999
62762: ST_TO_ADDR
// for i := 0 to 5 do
62763: LD_ADDR_VAR 0 6
62767: PUSH
62768: DOUBLE
62769: LD_INT 0
62771: DEC
62772: ST_TO_ADDR
62773: LD_INT 5
62775: PUSH
62776: FOR_TO
62777: IFFALSE 62920
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62779: LD_ADDR_VAR 0 7
62783: PUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: LD_VAR 0 6
62793: PPUSH
62794: LD_VAR 0 11
62798: PPUSH
62799: CALL_OW 272
62803: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62804: LD_ADDR_VAR 0 8
62808: PUSH
62809: LD_VAR 0 2
62813: PPUSH
62814: LD_VAR 0 6
62818: PPUSH
62819: LD_VAR 0 11
62823: PPUSH
62824: CALL_OW 273
62828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62829: LD_VAR 0 7
62833: PPUSH
62834: LD_VAR 0 8
62838: PPUSH
62839: CALL_OW 488
62843: NOT
62844: IFFALSE 62848
// continue ;
62846: GO 62776
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62848: LD_ADDR_VAR 0 9
62852: PUSH
62853: LD_VAR 0 12
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PPUSH
62862: LD_VAR 0 12
62866: PUSH
62867: LD_INT 2
62869: ARRAY
62870: PPUSH
62871: LD_VAR 0 7
62875: PPUSH
62876: LD_VAR 0 8
62880: PPUSH
62881: CALL_OW 298
62885: ST_TO_ADDR
// if tmp < distance then
62886: LD_VAR 0 9
62890: PUSH
62891: LD_VAR 0 10
62895: LESS
62896: IFFALSE 62918
// begin result := i ;
62898: LD_ADDR_VAR 0 5
62902: PUSH
62903: LD_VAR 0 6
62907: ST_TO_ADDR
// distance := tmp ;
62908: LD_ADDR_VAR 0 10
62912: PUSH
62913: LD_VAR 0 9
62917: ST_TO_ADDR
// end ; end ;
62918: GO 62776
62920: POP
62921: POP
// end ;
62922: LD_VAR 0 5
62926: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62927: LD_INT 0
62929: PPUSH
62930: PPUSH
// if not driver or not IsInUnit ( driver ) then
62931: LD_VAR 0 1
62935: NOT
62936: PUSH
62937: LD_VAR 0 1
62941: PPUSH
62942: CALL_OW 310
62946: NOT
62947: OR
62948: IFFALSE 62952
// exit ;
62950: GO 63042
// vehicle := IsInUnit ( driver ) ;
62952: LD_ADDR_VAR 0 3
62956: PUSH
62957: LD_VAR 0 1
62961: PPUSH
62962: CALL_OW 310
62966: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62967: LD_VAR 0 1
62971: PPUSH
62972: LD_STRING \
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: PUSH
63002: LD_STRING E
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_VAR 0 3
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PPUSH
63038: CALL_OW 446
// end ;
63042: LD_VAR 0 2
63046: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63047: LD_INT 0
63049: PPUSH
63050: PPUSH
// if not driver or not IsInUnit ( driver ) then
63051: LD_VAR 0 1
63055: NOT
63056: PUSH
63057: LD_VAR 0 1
63061: PPUSH
63062: CALL_OW 310
63066: NOT
63067: OR
63068: IFFALSE 63072
// exit ;
63070: GO 63162
// vehicle := IsInUnit ( driver ) ;
63072: LD_ADDR_VAR 0 3
63076: PUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 310
63086: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63087: LD_VAR 0 1
63091: PPUSH
63092: LD_STRING \
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: PUSH
63122: LD_STRING E
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_VAR 0 3
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PPUSH
63158: CALL_OW 447
// end ;
63162: LD_VAR 0 2
63166: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63167: LD_INT 0
63169: PPUSH
63170: PPUSH
63171: PPUSH
// tmp := [ ] ;
63172: LD_ADDR_VAR 0 5
63176: PUSH
63177: EMPTY
63178: ST_TO_ADDR
// for i in units do
63179: LD_ADDR_VAR 0 4
63183: PUSH
63184: LD_VAR 0 1
63188: PUSH
63189: FOR_IN
63190: IFFALSE 63228
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63192: LD_ADDR_VAR 0 5
63196: PUSH
63197: LD_VAR 0 5
63201: PPUSH
63202: LD_VAR 0 5
63206: PUSH
63207: LD_INT 1
63209: PLUS
63210: PPUSH
63211: LD_VAR 0 4
63215: PPUSH
63216: CALL_OW 256
63220: PPUSH
63221: CALL_OW 2
63225: ST_TO_ADDR
63226: GO 63189
63228: POP
63229: POP
// if not tmp then
63230: LD_VAR 0 5
63234: NOT
63235: IFFALSE 63239
// exit ;
63237: GO 63287
// if asc then
63239: LD_VAR 0 2
63243: IFFALSE 63267
// result := SortListByListAsc ( units , tmp ) else
63245: LD_ADDR_VAR 0 3
63249: PUSH
63250: LD_VAR 0 1
63254: PPUSH
63255: LD_VAR 0 5
63259: PPUSH
63260: CALL_OW 76
63264: ST_TO_ADDR
63265: GO 63287
// result := SortListByListDesc ( units , tmp ) ;
63267: LD_ADDR_VAR 0 3
63271: PUSH
63272: LD_VAR 0 1
63276: PPUSH
63277: LD_VAR 0 5
63281: PPUSH
63282: CALL_OW 77
63286: ST_TO_ADDR
// end ;
63287: LD_VAR 0 3
63291: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63292: LD_INT 0
63294: PPUSH
63295: PPUSH
// task := GetTaskList ( mech ) ;
63296: LD_ADDR_VAR 0 4
63300: PUSH
63301: LD_VAR 0 1
63305: PPUSH
63306: CALL_OW 437
63310: ST_TO_ADDR
// if not task then
63311: LD_VAR 0 4
63315: NOT
63316: IFFALSE 63320
// exit ;
63318: GO 63362
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63320: LD_ADDR_VAR 0 3
63324: PUSH
63325: LD_VAR 0 4
63329: PUSH
63330: LD_INT 1
63332: ARRAY
63333: PUSH
63334: LD_INT 1
63336: ARRAY
63337: PUSH
63338: LD_STRING r
63340: EQUAL
63341: PUSH
63342: LD_VAR 0 4
63346: PUSH
63347: LD_INT 1
63349: ARRAY
63350: PUSH
63351: LD_INT 4
63353: ARRAY
63354: PUSH
63355: LD_VAR 0 2
63359: EQUAL
63360: AND
63361: ST_TO_ADDR
// end ;
63362: LD_VAR 0 3
63366: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63367: LD_INT 0
63369: PPUSH
// SetDir ( unit , d ) ;
63370: LD_VAR 0 1
63374: PPUSH
63375: LD_VAR 0 4
63379: PPUSH
63380: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63384: LD_VAR 0 1
63388: PPUSH
63389: LD_VAR 0 2
63393: PPUSH
63394: LD_VAR 0 3
63398: PPUSH
63399: LD_VAR 0 5
63403: PPUSH
63404: CALL_OW 48
// end ;
63408: LD_VAR 0 6
63412: RET
// export function ToNaturalNumber ( number ) ; begin
63413: LD_INT 0
63415: PPUSH
// result := number div 1 ;
63416: LD_ADDR_VAR 0 2
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 1
63428: DIV
63429: ST_TO_ADDR
// if number < 0 then
63430: LD_VAR 0 1
63434: PUSH
63435: LD_INT 0
63437: LESS
63438: IFFALSE 63448
// result := 0 ;
63440: LD_ADDR_VAR 0 2
63444: PUSH
63445: LD_INT 0
63447: ST_TO_ADDR
// end ;
63448: LD_VAR 0 2
63452: RET
// export function SortByClass ( units , class ) ; var un ; begin
63453: LD_INT 0
63455: PPUSH
63456: PPUSH
// if not units or not class then
63457: LD_VAR 0 1
63461: NOT
63462: PUSH
63463: LD_VAR 0 2
63467: NOT
63468: OR
63469: IFFALSE 63473
// exit ;
63471: GO 63568
// result := [ ] ;
63473: LD_ADDR_VAR 0 3
63477: PUSH
63478: EMPTY
63479: ST_TO_ADDR
// for un in units do
63480: LD_ADDR_VAR 0 4
63484: PUSH
63485: LD_VAR 0 1
63489: PUSH
63490: FOR_IN
63491: IFFALSE 63566
// if GetClass ( un ) = class then
63493: LD_VAR 0 4
63497: PPUSH
63498: CALL_OW 257
63502: PUSH
63503: LD_VAR 0 2
63507: EQUAL
63508: IFFALSE 63535
// result := Insert ( result , 1 , un ) else
63510: LD_ADDR_VAR 0 3
63514: PUSH
63515: LD_VAR 0 3
63519: PPUSH
63520: LD_INT 1
63522: PPUSH
63523: LD_VAR 0 4
63527: PPUSH
63528: CALL_OW 2
63532: ST_TO_ADDR
63533: GO 63564
// result := Replace ( result , result + 1 , un ) ;
63535: LD_ADDR_VAR 0 3
63539: PUSH
63540: LD_VAR 0 3
63544: PPUSH
63545: LD_VAR 0 3
63549: PUSH
63550: LD_INT 1
63552: PLUS
63553: PPUSH
63554: LD_VAR 0 4
63558: PPUSH
63559: CALL_OW 1
63563: ST_TO_ADDR
63564: GO 63490
63566: POP
63567: POP
// end ;
63568: LD_VAR 0 3
63572: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63573: LD_INT 0
63575: PPUSH
63576: PPUSH
63577: PPUSH
63578: PPUSH
63579: PPUSH
63580: PPUSH
63581: PPUSH
// result := [ ] ;
63582: LD_ADDR_VAR 0 4
63586: PUSH
63587: EMPTY
63588: ST_TO_ADDR
// if x - r < 0 then
63589: LD_VAR 0 1
63593: PUSH
63594: LD_VAR 0 3
63598: MINUS
63599: PUSH
63600: LD_INT 0
63602: LESS
63603: IFFALSE 63615
// min_x := 0 else
63605: LD_ADDR_VAR 0 8
63609: PUSH
63610: LD_INT 0
63612: ST_TO_ADDR
63613: GO 63631
// min_x := x - r ;
63615: LD_ADDR_VAR 0 8
63619: PUSH
63620: LD_VAR 0 1
63624: PUSH
63625: LD_VAR 0 3
63629: MINUS
63630: ST_TO_ADDR
// if y - r < 0 then
63631: LD_VAR 0 2
63635: PUSH
63636: LD_VAR 0 3
63640: MINUS
63641: PUSH
63642: LD_INT 0
63644: LESS
63645: IFFALSE 63657
// min_y := 0 else
63647: LD_ADDR_VAR 0 7
63651: PUSH
63652: LD_INT 0
63654: ST_TO_ADDR
63655: GO 63673
// min_y := y - r ;
63657: LD_ADDR_VAR 0 7
63661: PUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_VAR 0 3
63671: MINUS
63672: ST_TO_ADDR
// max_x := x + r ;
63673: LD_ADDR_VAR 0 9
63677: PUSH
63678: LD_VAR 0 1
63682: PUSH
63683: LD_VAR 0 3
63687: PLUS
63688: ST_TO_ADDR
// max_y := y + r ;
63689: LD_ADDR_VAR 0 10
63693: PUSH
63694: LD_VAR 0 2
63698: PUSH
63699: LD_VAR 0 3
63703: PLUS
63704: ST_TO_ADDR
// for _x = min_x to max_x do
63705: LD_ADDR_VAR 0 5
63709: PUSH
63710: DOUBLE
63711: LD_VAR 0 8
63715: DEC
63716: ST_TO_ADDR
63717: LD_VAR 0 9
63721: PUSH
63722: FOR_TO
63723: IFFALSE 63824
// for _y = min_y to max_y do
63725: LD_ADDR_VAR 0 6
63729: PUSH
63730: DOUBLE
63731: LD_VAR 0 7
63735: DEC
63736: ST_TO_ADDR
63737: LD_VAR 0 10
63741: PUSH
63742: FOR_TO
63743: IFFALSE 63820
// begin if not ValidHex ( _x , _y ) then
63745: LD_VAR 0 5
63749: PPUSH
63750: LD_VAR 0 6
63754: PPUSH
63755: CALL_OW 488
63759: NOT
63760: IFFALSE 63764
// continue ;
63762: GO 63742
// if GetResourceTypeXY ( _x , _y ) then
63764: LD_VAR 0 5
63768: PPUSH
63769: LD_VAR 0 6
63773: PPUSH
63774: CALL_OW 283
63778: IFFALSE 63818
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63780: LD_ADDR_VAR 0 4
63784: PUSH
63785: LD_VAR 0 4
63789: PPUSH
63790: LD_VAR 0 4
63794: PUSH
63795: LD_INT 1
63797: PLUS
63798: PPUSH
63799: LD_VAR 0 5
63803: PUSH
63804: LD_VAR 0 6
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PPUSH
63813: CALL_OW 1
63817: ST_TO_ADDR
// end ;
63818: GO 63742
63820: POP
63821: POP
63822: GO 63722
63824: POP
63825: POP
// end ;
63826: LD_VAR 0 4
63830: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63831: LD_INT 0
63833: PPUSH
63834: PPUSH
63835: PPUSH
63836: PPUSH
63837: PPUSH
63838: PPUSH
63839: PPUSH
63840: PPUSH
// if not units then
63841: LD_VAR 0 1
63845: NOT
63846: IFFALSE 63850
// exit ;
63848: GO 64374
// result := UnitFilter ( units , [ f_ok ] ) ;
63850: LD_ADDR_VAR 0 3
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: LD_INT 50
63862: PUSH
63863: EMPTY
63864: LIST
63865: PPUSH
63866: CALL_OW 72
63870: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63871: LD_ADDR_VAR 0 8
63875: PUSH
63876: LD_VAR 0 1
63880: PUSH
63881: LD_INT 1
63883: ARRAY
63884: PPUSH
63885: CALL_OW 255
63889: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63890: LD_ADDR_VAR 0 10
63894: PUSH
63895: LD_INT 29
63897: PUSH
63898: LD_INT 91
63900: PUSH
63901: LD_INT 49
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: ST_TO_ADDR
// if not result then
63909: LD_VAR 0 3
63913: NOT
63914: IFFALSE 63918
// exit ;
63916: GO 64374
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63918: LD_ADDR_VAR 0 5
63922: PUSH
63923: LD_INT 81
63925: PUSH
63926: LD_VAR 0 8
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PPUSH
63935: CALL_OW 69
63939: ST_TO_ADDR
// for i in result do
63940: LD_ADDR_VAR 0 4
63944: PUSH
63945: LD_VAR 0 3
63949: PUSH
63950: FOR_IN
63951: IFFALSE 64372
// begin tag := GetTag ( i ) + 1 ;
63953: LD_ADDR_VAR 0 9
63957: PUSH
63958: LD_VAR 0 4
63962: PPUSH
63963: CALL_OW 110
63967: PUSH
63968: LD_INT 1
63970: PLUS
63971: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63972: LD_ADDR_VAR 0 7
63976: PUSH
63977: LD_VAR 0 4
63981: PPUSH
63982: CALL_OW 250
63986: PPUSH
63987: LD_VAR 0 4
63991: PPUSH
63992: CALL_OW 251
63996: PPUSH
63997: LD_INT 6
63999: PPUSH
64000: CALL 63573 0 3
64004: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64005: LD_VAR 0 4
64009: PPUSH
64010: CALL_OW 247
64014: PUSH
64015: LD_INT 2
64017: EQUAL
64018: PUSH
64019: LD_VAR 0 7
64023: AND
64024: PUSH
64025: LD_VAR 0 4
64029: PPUSH
64030: CALL_OW 264
64034: PUSH
64035: LD_VAR 0 10
64039: IN
64040: NOT
64041: AND
64042: IFFALSE 64081
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64044: LD_VAR 0 4
64048: PPUSH
64049: LD_VAR 0 7
64053: PUSH
64054: LD_INT 1
64056: ARRAY
64057: PUSH
64058: LD_INT 1
64060: ARRAY
64061: PPUSH
64062: LD_VAR 0 7
64066: PUSH
64067: LD_INT 1
64069: ARRAY
64070: PUSH
64071: LD_INT 2
64073: ARRAY
64074: PPUSH
64075: CALL_OW 116
64079: GO 64370
// if path > tag then
64081: LD_VAR 0 2
64085: PUSH
64086: LD_VAR 0 9
64090: GREATER
64091: IFFALSE 64299
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64093: LD_ADDR_VAR 0 6
64097: PUSH
64098: LD_VAR 0 5
64102: PPUSH
64103: LD_INT 91
64105: PUSH
64106: LD_VAR 0 4
64110: PUSH
64111: LD_INT 8
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: PPUSH
64119: CALL_OW 72
64123: ST_TO_ADDR
// if nearEnemy then
64124: LD_VAR 0 6
64128: IFFALSE 64197
// begin if GetWeapon ( i ) = ru_time_lapser then
64130: LD_VAR 0 4
64134: PPUSH
64135: CALL_OW 264
64139: PUSH
64140: LD_INT 49
64142: EQUAL
64143: IFFALSE 64171
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64145: LD_VAR 0 4
64149: PPUSH
64150: LD_VAR 0 6
64154: PPUSH
64155: LD_VAR 0 4
64159: PPUSH
64160: CALL_OW 74
64164: PPUSH
64165: CALL_OW 112
64169: GO 64195
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64171: LD_VAR 0 4
64175: PPUSH
64176: LD_VAR 0 6
64180: PPUSH
64181: LD_VAR 0 4
64185: PPUSH
64186: CALL_OW 74
64190: PPUSH
64191: CALL 65299 0 2
// end else
64195: GO 64297
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64197: LD_VAR 0 4
64201: PPUSH
64202: LD_VAR 0 2
64206: PUSH
64207: LD_VAR 0 9
64211: ARRAY
64212: PUSH
64213: LD_INT 1
64215: ARRAY
64216: PPUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_VAR 0 9
64226: ARRAY
64227: PUSH
64228: LD_INT 2
64230: ARRAY
64231: PPUSH
64232: CALL_OW 297
64236: PUSH
64237: LD_INT 6
64239: GREATER
64240: IFFALSE 64283
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64242: LD_VAR 0 4
64246: PPUSH
64247: LD_VAR 0 2
64251: PUSH
64252: LD_VAR 0 9
64256: ARRAY
64257: PUSH
64258: LD_INT 1
64260: ARRAY
64261: PPUSH
64262: LD_VAR 0 2
64266: PUSH
64267: LD_VAR 0 9
64271: ARRAY
64272: PUSH
64273: LD_INT 2
64275: ARRAY
64276: PPUSH
64277: CALL_OW 114
64281: GO 64297
// SetTag ( i , tag ) ;
64283: LD_VAR 0 4
64287: PPUSH
64288: LD_VAR 0 9
64292: PPUSH
64293: CALL_OW 109
// end else
64297: GO 64370
// if enemy then
64299: LD_VAR 0 5
64303: IFFALSE 64370
// begin if GetWeapon ( i ) = ru_time_lapser then
64305: LD_VAR 0 4
64309: PPUSH
64310: CALL_OW 264
64314: PUSH
64315: LD_INT 49
64317: EQUAL
64318: IFFALSE 64346
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64320: LD_VAR 0 4
64324: PPUSH
64325: LD_VAR 0 5
64329: PPUSH
64330: LD_VAR 0 4
64334: PPUSH
64335: CALL_OW 74
64339: PPUSH
64340: CALL_OW 112
64344: GO 64370
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64346: LD_VAR 0 4
64350: PPUSH
64351: LD_VAR 0 5
64355: PPUSH
64356: LD_VAR 0 4
64360: PPUSH
64361: CALL_OW 74
64365: PPUSH
64366: CALL 65299 0 2
// end ; end ;
64370: GO 63950
64372: POP
64373: POP
// end ;
64374: LD_VAR 0 3
64378: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64379: LD_INT 0
64381: PPUSH
64382: PPUSH
64383: PPUSH
// if not unit or IsInUnit ( unit ) then
64384: LD_VAR 0 1
64388: NOT
64389: PUSH
64390: LD_VAR 0 1
64394: PPUSH
64395: CALL_OW 310
64399: OR
64400: IFFALSE 64404
// exit ;
64402: GO 64495
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64404: LD_ADDR_VAR 0 4
64408: PUSH
64409: LD_VAR 0 1
64413: PPUSH
64414: CALL_OW 250
64418: PPUSH
64419: LD_VAR 0 2
64423: PPUSH
64424: LD_INT 1
64426: PPUSH
64427: CALL_OW 272
64431: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64432: LD_ADDR_VAR 0 5
64436: PUSH
64437: LD_VAR 0 1
64441: PPUSH
64442: CALL_OW 251
64446: PPUSH
64447: LD_VAR 0 2
64451: PPUSH
64452: LD_INT 1
64454: PPUSH
64455: CALL_OW 273
64459: ST_TO_ADDR
// if ValidHex ( x , y ) then
64460: LD_VAR 0 4
64464: PPUSH
64465: LD_VAR 0 5
64469: PPUSH
64470: CALL_OW 488
64474: IFFALSE 64495
// ComTurnXY ( unit , x , y ) ;
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_VAR 0 4
64485: PPUSH
64486: LD_VAR 0 5
64490: PPUSH
64491: CALL_OW 118
// end ;
64495: LD_VAR 0 3
64499: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64500: LD_INT 0
64502: PPUSH
64503: PPUSH
// result := false ;
64504: LD_ADDR_VAR 0 3
64508: PUSH
64509: LD_INT 0
64511: ST_TO_ADDR
// if not units then
64512: LD_VAR 0 2
64516: NOT
64517: IFFALSE 64521
// exit ;
64519: GO 64566
// for i in units do
64521: LD_ADDR_VAR 0 4
64525: PUSH
64526: LD_VAR 0 2
64530: PUSH
64531: FOR_IN
64532: IFFALSE 64564
// if See ( side , i ) then
64534: LD_VAR 0 1
64538: PPUSH
64539: LD_VAR 0 4
64543: PPUSH
64544: CALL_OW 292
64548: IFFALSE 64562
// begin result := true ;
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_INT 1
64557: ST_TO_ADDR
// exit ;
64558: POP
64559: POP
64560: GO 64566
// end ;
64562: GO 64531
64564: POP
64565: POP
// end ;
64566: LD_VAR 0 3
64570: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64571: LD_INT 0
64573: PPUSH
64574: PPUSH
64575: PPUSH
64576: PPUSH
// if not unit or not points then
64577: LD_VAR 0 1
64581: NOT
64582: PUSH
64583: LD_VAR 0 2
64587: NOT
64588: OR
64589: IFFALSE 64593
// exit ;
64591: GO 64683
// dist := 99999 ;
64593: LD_ADDR_VAR 0 5
64597: PUSH
64598: LD_INT 99999
64600: ST_TO_ADDR
// for i in points do
64601: LD_ADDR_VAR 0 4
64605: PUSH
64606: LD_VAR 0 2
64610: PUSH
64611: FOR_IN
64612: IFFALSE 64681
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64614: LD_ADDR_VAR 0 6
64618: PUSH
64619: LD_VAR 0 1
64623: PPUSH
64624: LD_VAR 0 4
64628: PUSH
64629: LD_INT 1
64631: ARRAY
64632: PPUSH
64633: LD_VAR 0 4
64637: PUSH
64638: LD_INT 2
64640: ARRAY
64641: PPUSH
64642: CALL_OW 297
64646: ST_TO_ADDR
// if tmpDist < dist then
64647: LD_VAR 0 6
64651: PUSH
64652: LD_VAR 0 5
64656: LESS
64657: IFFALSE 64679
// begin result := i ;
64659: LD_ADDR_VAR 0 3
64663: PUSH
64664: LD_VAR 0 4
64668: ST_TO_ADDR
// dist := tmpDist ;
64669: LD_ADDR_VAR 0 5
64673: PUSH
64674: LD_VAR 0 6
64678: ST_TO_ADDR
// end ; end ;
64679: GO 64611
64681: POP
64682: POP
// end ;
64683: LD_VAR 0 3
64687: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64688: LD_INT 0
64690: PPUSH
// uc_side := side ;
64691: LD_ADDR_OWVAR 20
64695: PUSH
64696: LD_VAR 0 1
64700: ST_TO_ADDR
// uc_nation := 3 ;
64701: LD_ADDR_OWVAR 21
64705: PUSH
64706: LD_INT 3
64708: ST_TO_ADDR
// vc_chassis := 25 ;
64709: LD_ADDR_OWVAR 37
64713: PUSH
64714: LD_INT 25
64716: ST_TO_ADDR
// vc_engine := engine_siberite ;
64717: LD_ADDR_OWVAR 39
64721: PUSH
64722: LD_INT 3
64724: ST_TO_ADDR
// vc_control := control_computer ;
64725: LD_ADDR_OWVAR 38
64729: PUSH
64730: LD_INT 3
64732: ST_TO_ADDR
// vc_weapon := 59 ;
64733: LD_ADDR_OWVAR 40
64737: PUSH
64738: LD_INT 59
64740: ST_TO_ADDR
// result := CreateVehicle ;
64741: LD_ADDR_VAR 0 5
64745: PUSH
64746: CALL_OW 45
64750: ST_TO_ADDR
// SetDir ( result , d ) ;
64751: LD_VAR 0 5
64755: PPUSH
64756: LD_VAR 0 4
64760: PPUSH
64761: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64765: LD_VAR 0 5
64769: PPUSH
64770: LD_VAR 0 2
64774: PPUSH
64775: LD_VAR 0 3
64779: PPUSH
64780: LD_INT 0
64782: PPUSH
64783: CALL_OW 48
// end ;
64787: LD_VAR 0 5
64791: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64792: LD_INT 0
64794: PPUSH
64795: PPUSH
64796: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64797: LD_ADDR_VAR 0 2
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64820: LD_VAR 0 1
64824: NOT
64825: PUSH
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 264
64835: PUSH
64836: LD_INT 12
64838: PUSH
64839: LD_INT 51
64841: PUSH
64842: LD_INT 32
64844: PUSH
64845: LD_INT 89
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: IN
64854: NOT
64855: OR
64856: IFFALSE 64860
// exit ;
64858: GO 64958
// for i := 1 to 3 do
64860: LD_ADDR_VAR 0 3
64864: PUSH
64865: DOUBLE
64866: LD_INT 1
64868: DEC
64869: ST_TO_ADDR
64870: LD_INT 3
64872: PUSH
64873: FOR_TO
64874: IFFALSE 64956
// begin tmp := GetCargo ( cargo , i ) ;
64876: LD_ADDR_VAR 0 4
64880: PUSH
64881: LD_VAR 0 1
64885: PPUSH
64886: LD_VAR 0 3
64890: PPUSH
64891: CALL_OW 289
64895: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64896: LD_ADDR_VAR 0 2
64900: PUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: LD_VAR 0 3
64910: PPUSH
64911: LD_VAR 0 4
64915: PPUSH
64916: CALL_OW 1
64920: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64921: LD_ADDR_VAR 0 2
64925: PUSH
64926: LD_VAR 0 2
64930: PPUSH
64931: LD_INT 4
64933: PPUSH
64934: LD_VAR 0 2
64938: PUSH
64939: LD_INT 4
64941: ARRAY
64942: PUSH
64943: LD_VAR 0 4
64947: PLUS
64948: PPUSH
64949: CALL_OW 1
64953: ST_TO_ADDR
// end ;
64954: GO 64873
64956: POP
64957: POP
// end ;
64958: LD_VAR 0 2
64962: RET
// export function Length ( array ) ; begin
64963: LD_INT 0
64965: PPUSH
// result := array + 0 ;
64966: LD_ADDR_VAR 0 2
64970: PUSH
64971: LD_VAR 0 1
64975: PUSH
64976: LD_INT 0
64978: PLUS
64979: ST_TO_ADDR
// end ;
64980: LD_VAR 0 2
64984: RET
// export function PrepareArray ( array ) ; begin
64985: LD_INT 0
64987: PPUSH
// result := array diff 0 ;
64988: LD_ADDR_VAR 0 2
64992: PUSH
64993: LD_VAR 0 1
64997: PUSH
64998: LD_INT 0
65000: DIFF
65001: ST_TO_ADDR
// if not result [ 1 ] then
65002: LD_VAR 0 2
65006: PUSH
65007: LD_INT 1
65009: ARRAY
65010: NOT
65011: IFFALSE 65031
// result := Delete ( result , 1 ) ;
65013: LD_ADDR_VAR 0 2
65017: PUSH
65018: LD_VAR 0 2
65022: PPUSH
65023: LD_INT 1
65025: PPUSH
65026: CALL_OW 3
65030: ST_TO_ADDR
// end ;
65031: LD_VAR 0 2
65035: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65036: LD_INT 0
65038: PPUSH
65039: PPUSH
65040: PPUSH
65041: PPUSH
// sibRocketRange := 25 ;
65042: LD_ADDR_VAR 0 6
65046: PUSH
65047: LD_INT 25
65049: ST_TO_ADDR
// result := false ;
65050: LD_ADDR_VAR 0 4
65054: PUSH
65055: LD_INT 0
65057: ST_TO_ADDR
// for i := 0 to 5 do
65058: LD_ADDR_VAR 0 5
65062: PUSH
65063: DOUBLE
65064: LD_INT 0
65066: DEC
65067: ST_TO_ADDR
65068: LD_INT 5
65070: PUSH
65071: FOR_TO
65072: IFFALSE 65139
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_VAR 0 5
65083: PPUSH
65084: LD_VAR 0 6
65088: PPUSH
65089: CALL_OW 272
65093: PPUSH
65094: LD_VAR 0 2
65098: PPUSH
65099: LD_VAR 0 5
65103: PPUSH
65104: LD_VAR 0 6
65108: PPUSH
65109: CALL_OW 273
65113: PPUSH
65114: LD_VAR 0 3
65118: PPUSH
65119: CALL_OW 309
65123: IFFALSE 65137
// begin result := true ;
65125: LD_ADDR_VAR 0 4
65129: PUSH
65130: LD_INT 1
65132: ST_TO_ADDR
// exit ;
65133: POP
65134: POP
65135: GO 65141
// end ;
65137: GO 65071
65139: POP
65140: POP
// end ;
65141: LD_VAR 0 4
65145: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65146: LD_INT 0
65148: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65149: LD_VAR 0 1
65153: PPUSH
65154: LD_VAR 0 2
65158: PPUSH
65159: LD_INT 0
65161: PPUSH
65162: LD_INT 0
65164: PPUSH
65165: LD_INT 1
65167: PPUSH
65168: LD_INT 0
65170: PPUSH
65171: CALL_OW 587
// end ;
65175: LD_VAR 0 3
65179: RET
// export function CenterOnNow ( unit ) ; begin
65180: LD_INT 0
65182: PPUSH
// result := IsInUnit ( unit ) ;
65183: LD_ADDR_VAR 0 2
65187: PUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 310
65197: ST_TO_ADDR
// if not result then
65198: LD_VAR 0 2
65202: NOT
65203: IFFALSE 65215
// result := unit ;
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: LD_VAR 0 1
65214: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65215: LD_VAR 0 1
65219: PPUSH
65220: CALL_OW 87
// end ;
65224: LD_VAR 0 2
65228: RET
// export function ComMoveHex ( unit , hex ) ; begin
65229: LD_INT 0
65231: PPUSH
// if not hex then
65232: LD_VAR 0 2
65236: NOT
65237: IFFALSE 65241
// exit ;
65239: GO 65294
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65241: LD_VAR 0 2
65245: PUSH
65246: LD_INT 1
65248: ARRAY
65249: PPUSH
65250: LD_VAR 0 2
65254: PUSH
65255: LD_INT 2
65257: ARRAY
65258: PPUSH
65259: CALL_OW 428
65263: IFFALSE 65267
// exit ;
65265: GO 65294
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65267: LD_VAR 0 1
65271: PPUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_INT 1
65279: ARRAY
65280: PPUSH
65281: LD_VAR 0 2
65285: PUSH
65286: LD_INT 2
65288: ARRAY
65289: PPUSH
65290: CALL_OW 111
// end ;
65294: LD_VAR 0 3
65298: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65299: LD_INT 0
65301: PPUSH
65302: PPUSH
65303: PPUSH
// if not unit or not enemy then
65304: LD_VAR 0 1
65308: NOT
65309: PUSH
65310: LD_VAR 0 2
65314: NOT
65315: OR
65316: IFFALSE 65320
// exit ;
65318: GO 65444
// x := GetX ( enemy ) ;
65320: LD_ADDR_VAR 0 4
65324: PUSH
65325: LD_VAR 0 2
65329: PPUSH
65330: CALL_OW 250
65334: ST_TO_ADDR
// y := GetY ( enemy ) ;
65335: LD_ADDR_VAR 0 5
65339: PUSH
65340: LD_VAR 0 2
65344: PPUSH
65345: CALL_OW 251
65349: ST_TO_ADDR
// if ValidHex ( x , y ) then
65350: LD_VAR 0 4
65354: PPUSH
65355: LD_VAR 0 5
65359: PPUSH
65360: CALL_OW 488
65364: IFFALSE 65444
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
65366: LD_VAR 0 2
65370: PPUSH
65371: CALL_OW 247
65375: PUSH
65376: LD_INT 3
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: IN
65386: PUSH
65387: LD_VAR 0 1
65391: PPUSH
65392: CALL_OW 255
65396: PPUSH
65397: LD_VAR 0 2
65401: PPUSH
65402: CALL_OW 292
65406: AND
65407: IFFALSE 65425
// ComAttackUnit ( unit , enemy ) else
65409: LD_VAR 0 1
65413: PPUSH
65414: LD_VAR 0 2
65418: PPUSH
65419: CALL_OW 115
65423: GO 65444
// ComAgressiveMove ( unit , x , y ) ;
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 4
65434: PPUSH
65435: LD_VAR 0 5
65439: PPUSH
65440: CALL_OW 114
// end ; end_of_file
65444: LD_VAR 0 3
65448: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65449: LD_VAR 0 1
65453: PUSH
65454: LD_INT 200
65456: DOUBLE
65457: GREATEREQUAL
65458: IFFALSE 65466
65460: LD_INT 299
65462: DOUBLE
65463: LESSEQUAL
65464: IFTRUE 65468
65466: GO 65500
65468: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65469: LD_VAR 0 1
65473: PPUSH
65474: LD_VAR 0 2
65478: PPUSH
65479: LD_VAR 0 3
65483: PPUSH
65484: LD_VAR 0 4
65488: PPUSH
65489: LD_VAR 0 5
65493: PPUSH
65494: CALL 65988 0 5
65498: GO 65577
65500: LD_INT 300
65502: DOUBLE
65503: GREATEREQUAL
65504: IFFALSE 65512
65506: LD_INT 399
65508: DOUBLE
65509: LESSEQUAL
65510: IFTRUE 65514
65512: GO 65576
65514: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65515: LD_VAR 0 1
65519: PPUSH
65520: LD_VAR 0 2
65524: PPUSH
65525: LD_VAR 0 3
65529: PPUSH
65530: LD_VAR 0 4
65534: PPUSH
65535: LD_VAR 0 5
65539: PPUSH
65540: LD_VAR 0 6
65544: PPUSH
65545: LD_VAR 0 7
65549: PPUSH
65550: LD_VAR 0 8
65554: PPUSH
65555: LD_VAR 0 9
65559: PPUSH
65560: LD_VAR 0 10
65564: PPUSH
65565: LD_VAR 0 11
65569: PPUSH
65570: CALL 20226 0 11
65574: GO 65577
65576: POP
// end ;
65577: PPOPN 11
65579: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65580: LD_VAR 0 1
65584: PPUSH
65585: LD_VAR 0 2
65589: PPUSH
65590: LD_VAR 0 3
65594: PPUSH
65595: LD_VAR 0 4
65599: PPUSH
65600: LD_VAR 0 5
65604: PPUSH
65605: CALL 65724 0 5
// end ; end_of_file
65609: PPOPN 5
65611: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65612: LD_INT 0
65614: PPUSH
65615: PPUSH
65616: PPUSH
65617: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65618: LD_VAR 0 1
65622: PPUSH
65623: CALL_OW 264
65627: PUSH
65628: LD_INT 91
65630: EQUAL
65631: IFFALSE 65703
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65633: LD_INT 68
65635: PPUSH
65636: LD_VAR 0 1
65640: PPUSH
65641: CALL_OW 255
65645: PPUSH
65646: CALL_OW 321
65650: PUSH
65651: LD_INT 2
65653: EQUAL
65654: IFFALSE 65666
// eff := 70 else
65656: LD_ADDR_VAR 0 4
65660: PUSH
65661: LD_INT 70
65663: ST_TO_ADDR
65664: GO 65674
// eff := 30 ;
65666: LD_ADDR_VAR 0 4
65670: PUSH
65671: LD_INT 30
65673: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65674: LD_VAR 0 1
65678: PPUSH
65679: CALL_OW 250
65683: PPUSH
65684: LD_VAR 0 1
65688: PPUSH
65689: CALL_OW 251
65693: PPUSH
65694: LD_VAR 0 4
65698: PPUSH
65699: CALL_OW 495
// end ; end ;
65703: LD_VAR 0 2
65707: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65708: LD_INT 0
65710: PPUSH
// end ;
65711: LD_VAR 0 4
65715: RET
// export function SOS_Command ( cmd ) ; begin
65716: LD_INT 0
65718: PPUSH
// end ;
65719: LD_VAR 0 2
65723: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65724: LD_INT 0
65726: PPUSH
// end ;
65727: LD_VAR 0 6
65731: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65732: LD_INT 0
65734: PPUSH
65735: PPUSH
// if not vehicle or not factory then
65736: LD_VAR 0 1
65740: NOT
65741: PUSH
65742: LD_VAR 0 2
65746: NOT
65747: OR
65748: IFFALSE 65752
// exit ;
65750: GO 65983
// if factoryWaypoints >= factory then
65752: LD_EXP 78
65756: PUSH
65757: LD_VAR 0 2
65761: GREATEREQUAL
65762: IFFALSE 65983
// if factoryWaypoints [ factory ] then
65764: LD_EXP 78
65768: PUSH
65769: LD_VAR 0 2
65773: ARRAY
65774: IFFALSE 65983
// begin if GetControl ( vehicle ) = control_manual then
65776: LD_VAR 0 1
65780: PPUSH
65781: CALL_OW 263
65785: PUSH
65786: LD_INT 1
65788: EQUAL
65789: IFFALSE 65870
// begin driver := IsDrivenBy ( vehicle ) ;
65791: LD_ADDR_VAR 0 4
65795: PUSH
65796: LD_VAR 0 1
65800: PPUSH
65801: CALL_OW 311
65805: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65806: LD_VAR 0 4
65810: PPUSH
65811: LD_EXP 78
65815: PUSH
65816: LD_VAR 0 2
65820: ARRAY
65821: PUSH
65822: LD_INT 3
65824: ARRAY
65825: PPUSH
65826: LD_EXP 78
65830: PUSH
65831: LD_VAR 0 2
65835: ARRAY
65836: PUSH
65837: LD_INT 4
65839: ARRAY
65840: PPUSH
65841: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65845: LD_VAR 0 4
65849: PPUSH
65850: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65854: LD_VAR 0 4
65858: PPUSH
65859: LD_VAR 0 2
65863: PPUSH
65864: CALL_OW 180
// end else
65868: GO 65983
// if GetControl ( vehicle ) = control_remote then
65870: LD_VAR 0 1
65874: PPUSH
65875: CALL_OW 263
65879: PUSH
65880: LD_INT 2
65882: EQUAL
65883: IFFALSE 65944
// begin wait ( 0 0$2 ) ;
65885: LD_INT 70
65887: PPUSH
65888: CALL_OW 67
// if Connect ( vehicle ) then
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL 31833 0 1
65901: IFFALSE 65942
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65903: LD_VAR 0 1
65907: PPUSH
65908: LD_EXP 78
65912: PUSH
65913: LD_VAR 0 2
65917: ARRAY
65918: PUSH
65919: LD_INT 3
65921: ARRAY
65922: PPUSH
65923: LD_EXP 78
65927: PUSH
65928: LD_VAR 0 2
65932: ARRAY
65933: PUSH
65934: LD_INT 4
65936: ARRAY
65937: PPUSH
65938: CALL_OW 171
// end else
65942: GO 65983
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65944: LD_VAR 0 1
65948: PPUSH
65949: LD_EXP 78
65953: PUSH
65954: LD_VAR 0 2
65958: ARRAY
65959: PUSH
65960: LD_INT 3
65962: ARRAY
65963: PPUSH
65964: LD_EXP 78
65968: PUSH
65969: LD_VAR 0 2
65973: ARRAY
65974: PUSH
65975: LD_INT 4
65977: ARRAY
65978: PPUSH
65979: CALL_OW 171
// end ; end ;
65983: LD_VAR 0 3
65987: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65988: LD_INT 0
65990: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65991: LD_VAR 0 1
65995: PUSH
65996: LD_INT 250
65998: EQUAL
65999: PUSH
66000: LD_VAR 0 2
66004: PPUSH
66005: CALL_OW 264
66009: PUSH
66010: LD_INT 81
66012: EQUAL
66013: AND
66014: IFFALSE 66035
// MinerPlaceMine ( unit , x , y ) ;
66016: LD_VAR 0 2
66020: PPUSH
66021: LD_VAR 0 4
66025: PPUSH
66026: LD_VAR 0 5
66030: PPUSH
66031: CALL 68859 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66035: LD_VAR 0 1
66039: PUSH
66040: LD_INT 251
66042: EQUAL
66043: PUSH
66044: LD_VAR 0 2
66048: PPUSH
66049: CALL_OW 264
66053: PUSH
66054: LD_INT 81
66056: EQUAL
66057: AND
66058: IFFALSE 66079
// MinerDetonateMine ( unit , x , y ) ;
66060: LD_VAR 0 2
66064: PPUSH
66065: LD_VAR 0 4
66069: PPUSH
66070: LD_VAR 0 5
66074: PPUSH
66075: CALL 69134 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66079: LD_VAR 0 1
66083: PUSH
66084: LD_INT 252
66086: EQUAL
66087: PUSH
66088: LD_VAR 0 2
66092: PPUSH
66093: CALL_OW 264
66097: PUSH
66098: LD_INT 81
66100: EQUAL
66101: AND
66102: IFFALSE 66123
// MinerCreateMinefield ( unit , x , y ) ;
66104: LD_VAR 0 2
66108: PPUSH
66109: LD_VAR 0 4
66113: PPUSH
66114: LD_VAR 0 5
66118: PPUSH
66119: CALL 69551 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66123: LD_VAR 0 1
66127: PUSH
66128: LD_INT 253
66130: EQUAL
66131: PUSH
66132: LD_VAR 0 2
66136: PPUSH
66137: CALL_OW 257
66141: PUSH
66142: LD_INT 5
66144: EQUAL
66145: AND
66146: IFFALSE 66167
// ComBinocular ( unit , x , y ) ;
66148: LD_VAR 0 2
66152: PPUSH
66153: LD_VAR 0 4
66157: PPUSH
66158: LD_VAR 0 5
66162: PPUSH
66163: CALL 69920 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66167: LD_VAR 0 1
66171: PUSH
66172: LD_INT 254
66174: EQUAL
66175: PUSH
66176: LD_VAR 0 2
66180: PPUSH
66181: CALL_OW 264
66185: PUSH
66186: LD_INT 99
66188: EQUAL
66189: AND
66190: PUSH
66191: LD_VAR 0 3
66195: PPUSH
66196: CALL_OW 263
66200: PUSH
66201: LD_INT 3
66203: EQUAL
66204: AND
66205: IFFALSE 66221
// HackDestroyVehicle ( unit , selectedUnit ) ;
66207: LD_VAR 0 2
66211: PPUSH
66212: LD_VAR 0 3
66216: PPUSH
66217: CALL 68223 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66221: LD_VAR 0 1
66225: PUSH
66226: LD_INT 255
66228: EQUAL
66229: PUSH
66230: LD_VAR 0 2
66234: PPUSH
66235: CALL_OW 264
66239: PUSH
66240: LD_INT 14
66242: PUSH
66243: LD_INT 53
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: IN
66250: AND
66251: PUSH
66252: LD_VAR 0 4
66256: PPUSH
66257: LD_VAR 0 5
66261: PPUSH
66262: CALL_OW 488
66266: AND
66267: IFFALSE 66291
// CutTreeXYR ( unit , x , y , 12 ) ;
66269: LD_VAR 0 2
66273: PPUSH
66274: LD_VAR 0 4
66278: PPUSH
66279: LD_VAR 0 5
66283: PPUSH
66284: LD_INT 12
66286: PPUSH
66287: CALL 66386 0 4
// if cmd = 256 then
66291: LD_VAR 0 1
66295: PUSH
66296: LD_INT 256
66298: EQUAL
66299: IFFALSE 66320
// SetFactoryWaypoint ( unit , x , y ) ;
66301: LD_VAR 0 2
66305: PPUSH
66306: LD_VAR 0 4
66310: PPUSH
66311: LD_VAR 0 5
66315: PPUSH
66316: CALL 22214 0 3
// if cmd = 257 then
66320: LD_VAR 0 1
66324: PUSH
66325: LD_INT 257
66327: EQUAL
66328: IFFALSE 66349
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66330: LD_VAR 0 2
66334: PPUSH
66335: LD_VAR 0 4
66339: PPUSH
66340: LD_VAR 0 5
66344: PPUSH
66345: CALL 22576 0 3
// if cmd = 258 then
66349: LD_VAR 0 1
66353: PUSH
66354: LD_INT 258
66356: EQUAL
66357: IFFALSE 66381
// BurnTreeXYR ( unit , x , y , 8 ) ;
66359: LD_VAR 0 2
66363: PPUSH
66364: LD_VAR 0 4
66368: PPUSH
66369: LD_VAR 0 5
66373: PPUSH
66374: LD_INT 8
66376: PPUSH
66377: CALL 66780 0 4
// end ;
66381: LD_VAR 0 6
66385: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66386: LD_INT 0
66388: PPUSH
66389: PPUSH
66390: PPUSH
66391: PPUSH
66392: PPUSH
66393: PPUSH
66394: PPUSH
66395: PPUSH
66396: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
66397: LD_VAR 0 1
66401: PPUSH
66402: CALL_OW 302
66406: NOT
66407: PUSH
66408: LD_VAR 0 2
66412: PPUSH
66413: LD_VAR 0 3
66417: PPUSH
66418: CALL_OW 488
66422: NOT
66423: OR
66424: PUSH
66425: LD_VAR 0 4
66429: NOT
66430: OR
66431: IFFALSE 66435
// exit ;
66433: GO 66775
// list := [ ] ;
66435: LD_ADDR_VAR 0 13
66439: PUSH
66440: EMPTY
66441: ST_TO_ADDR
// if x - r < 0 then
66442: LD_VAR 0 2
66446: PUSH
66447: LD_VAR 0 4
66451: MINUS
66452: PUSH
66453: LD_INT 0
66455: LESS
66456: IFFALSE 66468
// min_x := 0 else
66458: LD_ADDR_VAR 0 7
66462: PUSH
66463: LD_INT 0
66465: ST_TO_ADDR
66466: GO 66484
// min_x := x - r ;
66468: LD_ADDR_VAR 0 7
66472: PUSH
66473: LD_VAR 0 2
66477: PUSH
66478: LD_VAR 0 4
66482: MINUS
66483: ST_TO_ADDR
// if y - r < 0 then
66484: LD_VAR 0 3
66488: PUSH
66489: LD_VAR 0 4
66493: MINUS
66494: PUSH
66495: LD_INT 0
66497: LESS
66498: IFFALSE 66510
// min_y := 0 else
66500: LD_ADDR_VAR 0 8
66504: PUSH
66505: LD_INT 0
66507: ST_TO_ADDR
66508: GO 66526
// min_y := y - r ;
66510: LD_ADDR_VAR 0 8
66514: PUSH
66515: LD_VAR 0 3
66519: PUSH
66520: LD_VAR 0 4
66524: MINUS
66525: ST_TO_ADDR
// max_x := x + r ;
66526: LD_ADDR_VAR 0 9
66530: PUSH
66531: LD_VAR 0 2
66535: PUSH
66536: LD_VAR 0 4
66540: PLUS
66541: ST_TO_ADDR
// max_y := y + r ;
66542: LD_ADDR_VAR 0 10
66546: PUSH
66547: LD_VAR 0 3
66551: PUSH
66552: LD_VAR 0 4
66556: PLUS
66557: ST_TO_ADDR
// for _x = min_x to max_x do
66558: LD_ADDR_VAR 0 11
66562: PUSH
66563: DOUBLE
66564: LD_VAR 0 7
66568: DEC
66569: ST_TO_ADDR
66570: LD_VAR 0 9
66574: PUSH
66575: FOR_TO
66576: IFFALSE 66693
// for _y = min_y to max_y do
66578: LD_ADDR_VAR 0 12
66582: PUSH
66583: DOUBLE
66584: LD_VAR 0 8
66588: DEC
66589: ST_TO_ADDR
66590: LD_VAR 0 10
66594: PUSH
66595: FOR_TO
66596: IFFALSE 66689
// begin if not ValidHex ( _x , _y ) then
66598: LD_VAR 0 11
66602: PPUSH
66603: LD_VAR 0 12
66607: PPUSH
66608: CALL_OW 488
66612: NOT
66613: IFFALSE 66617
// continue ;
66615: GO 66595
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66617: LD_VAR 0 11
66621: PPUSH
66622: LD_VAR 0 12
66626: PPUSH
66627: CALL_OW 351
66631: PUSH
66632: LD_VAR 0 11
66636: PPUSH
66637: LD_VAR 0 12
66641: PPUSH
66642: CALL_OW 554
66646: AND
66647: IFFALSE 66687
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66649: LD_ADDR_VAR 0 13
66653: PUSH
66654: LD_VAR 0 13
66658: PPUSH
66659: LD_VAR 0 13
66663: PUSH
66664: LD_INT 1
66666: PLUS
66667: PPUSH
66668: LD_VAR 0 11
66672: PUSH
66673: LD_VAR 0 12
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PPUSH
66682: CALL_OW 2
66686: ST_TO_ADDR
// end ;
66687: GO 66595
66689: POP
66690: POP
66691: GO 66575
66693: POP
66694: POP
// if not list then
66695: LD_VAR 0 13
66699: NOT
66700: IFFALSE 66704
// exit ;
66702: GO 66775
// for i in list do
66704: LD_ADDR_VAR 0 6
66708: PUSH
66709: LD_VAR 0 13
66713: PUSH
66714: FOR_IN
66715: IFFALSE 66773
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66717: LD_VAR 0 1
66721: PPUSH
66722: LD_STRING M
66724: PUSH
66725: LD_VAR 0 6
66729: PUSH
66730: LD_INT 1
66732: ARRAY
66733: PUSH
66734: LD_VAR 0 6
66738: PUSH
66739: LD_INT 2
66741: ARRAY
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: PPUSH
66767: CALL_OW 447
66771: GO 66714
66773: POP
66774: POP
// end ;
66775: LD_VAR 0 5
66779: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66780: LD_INT 0
66782: PPUSH
66783: PPUSH
66784: PPUSH
66785: PPUSH
66786: PPUSH
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
66791: LD_VAR 0 1
66795: PPUSH
66796: CALL_OW 302
66800: NOT
66801: PUSH
66802: LD_VAR 0 2
66806: PPUSH
66807: LD_VAR 0 3
66811: PPUSH
66812: CALL_OW 488
66816: NOT
66817: OR
66818: PUSH
66819: LD_VAR 0 4
66823: NOT
66824: OR
66825: IFFALSE 66829
// exit ;
66827: GO 67177
// list := [ ] ;
66829: LD_ADDR_VAR 0 13
66833: PUSH
66834: EMPTY
66835: ST_TO_ADDR
// if x - r < 0 then
66836: LD_VAR 0 2
66840: PUSH
66841: LD_VAR 0 4
66845: MINUS
66846: PUSH
66847: LD_INT 0
66849: LESS
66850: IFFALSE 66862
// min_x := 0 else
66852: LD_ADDR_VAR 0 7
66856: PUSH
66857: LD_INT 0
66859: ST_TO_ADDR
66860: GO 66878
// min_x := x - r ;
66862: LD_ADDR_VAR 0 7
66866: PUSH
66867: LD_VAR 0 2
66871: PUSH
66872: LD_VAR 0 4
66876: MINUS
66877: ST_TO_ADDR
// if y - r < 0 then
66878: LD_VAR 0 3
66882: PUSH
66883: LD_VAR 0 4
66887: MINUS
66888: PUSH
66889: LD_INT 0
66891: LESS
66892: IFFALSE 66904
// min_y := 0 else
66894: LD_ADDR_VAR 0 8
66898: PUSH
66899: LD_INT 0
66901: ST_TO_ADDR
66902: GO 66920
// min_y := y - r ;
66904: LD_ADDR_VAR 0 8
66908: PUSH
66909: LD_VAR 0 3
66913: PUSH
66914: LD_VAR 0 4
66918: MINUS
66919: ST_TO_ADDR
// max_x := x + r ;
66920: LD_ADDR_VAR 0 9
66924: PUSH
66925: LD_VAR 0 2
66929: PUSH
66930: LD_VAR 0 4
66934: PLUS
66935: ST_TO_ADDR
// max_y := y + r ;
66936: LD_ADDR_VAR 0 10
66940: PUSH
66941: LD_VAR 0 3
66945: PUSH
66946: LD_VAR 0 4
66950: PLUS
66951: ST_TO_ADDR
// for _x = min_x to max_x do
66952: LD_ADDR_VAR 0 11
66956: PUSH
66957: DOUBLE
66958: LD_VAR 0 7
66962: DEC
66963: ST_TO_ADDR
66964: LD_VAR 0 9
66968: PUSH
66969: FOR_TO
66970: IFFALSE 67087
// for _y = min_y to max_y do
66972: LD_ADDR_VAR 0 12
66976: PUSH
66977: DOUBLE
66978: LD_VAR 0 8
66982: DEC
66983: ST_TO_ADDR
66984: LD_VAR 0 10
66988: PUSH
66989: FOR_TO
66990: IFFALSE 67083
// begin if not ValidHex ( _x , _y ) then
66992: LD_VAR 0 11
66996: PPUSH
66997: LD_VAR 0 12
67001: PPUSH
67002: CALL_OW 488
67006: NOT
67007: IFFALSE 67011
// continue ;
67009: GO 66989
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67011: LD_VAR 0 11
67015: PPUSH
67016: LD_VAR 0 12
67020: PPUSH
67021: CALL_OW 351
67025: PUSH
67026: LD_VAR 0 11
67030: PPUSH
67031: LD_VAR 0 12
67035: PPUSH
67036: CALL_OW 554
67040: AND
67041: IFFALSE 67081
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67043: LD_ADDR_VAR 0 13
67047: PUSH
67048: LD_VAR 0 13
67052: PPUSH
67053: LD_VAR 0 13
67057: PUSH
67058: LD_INT 1
67060: PLUS
67061: PPUSH
67062: LD_VAR 0 11
67066: PUSH
67067: LD_VAR 0 12
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PPUSH
67076: CALL_OW 2
67080: ST_TO_ADDR
// end ;
67081: GO 66989
67083: POP
67084: POP
67085: GO 66969
67087: POP
67088: POP
// if not list then
67089: LD_VAR 0 13
67093: NOT
67094: IFFALSE 67098
// exit ;
67096: GO 67177
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
67098: LD_ADDR_VAR 0 13
67102: PUSH
67103: LD_VAR 0 1
67107: PPUSH
67108: LD_VAR 0 13
67112: PPUSH
67113: LD_INT 1
67115: PPUSH
67116: LD_INT 1
67118: PPUSH
67119: CALL 28975 0 4
67123: ST_TO_ADDR
// ComStop ( flame ) ;
67124: LD_VAR 0 1
67128: PPUSH
67129: CALL_OW 141
// for i in list do
67133: LD_ADDR_VAR 0 6
67137: PUSH
67138: LD_VAR 0 13
67142: PUSH
67143: FOR_IN
67144: IFFALSE 67175
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
67146: LD_VAR 0 1
67150: PPUSH
67151: LD_VAR 0 6
67155: PUSH
67156: LD_INT 1
67158: ARRAY
67159: PPUSH
67160: LD_VAR 0 6
67164: PUSH
67165: LD_INT 2
67167: ARRAY
67168: PPUSH
67169: CALL_OW 176
67173: GO 67143
67175: POP
67176: POP
// end ;
67177: LD_VAR 0 5
67181: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67182: LD_EXP 81
67186: NOT
67187: IFFALSE 67237
67189: GO 67191
67191: DISABLE
// begin initHack := true ;
67192: LD_ADDR_EXP 81
67196: PUSH
67197: LD_INT 1
67199: ST_TO_ADDR
// hackTanks := [ ] ;
67200: LD_ADDR_EXP 82
67204: PUSH
67205: EMPTY
67206: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67207: LD_ADDR_EXP 83
67211: PUSH
67212: EMPTY
67213: ST_TO_ADDR
// hackLimit := 3 ;
67214: LD_ADDR_EXP 84
67218: PUSH
67219: LD_INT 3
67221: ST_TO_ADDR
// hackDist := 12 ;
67222: LD_ADDR_EXP 85
67226: PUSH
67227: LD_INT 12
67229: ST_TO_ADDR
// hackCounter := [ ] ;
67230: LD_ADDR_EXP 86
67234: PUSH
67235: EMPTY
67236: ST_TO_ADDR
// end ;
67237: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67238: LD_EXP 81
67242: PUSH
67243: LD_INT 34
67245: PUSH
67246: LD_INT 99
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PPUSH
67253: CALL_OW 69
67257: AND
67258: IFFALSE 67511
67260: GO 67262
67262: DISABLE
67263: LD_INT 0
67265: PPUSH
67266: PPUSH
// begin enable ;
67267: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67268: LD_ADDR_VAR 0 1
67272: PUSH
67273: LD_INT 34
67275: PUSH
67276: LD_INT 99
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PPUSH
67283: CALL_OW 69
67287: PUSH
67288: FOR_IN
67289: IFFALSE 67509
// begin if not i in hackTanks then
67291: LD_VAR 0 1
67295: PUSH
67296: LD_EXP 82
67300: IN
67301: NOT
67302: IFFALSE 67385
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67304: LD_ADDR_EXP 82
67308: PUSH
67309: LD_EXP 82
67313: PPUSH
67314: LD_EXP 82
67318: PUSH
67319: LD_INT 1
67321: PLUS
67322: PPUSH
67323: LD_VAR 0 1
67327: PPUSH
67328: CALL_OW 1
67332: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67333: LD_ADDR_EXP 83
67337: PUSH
67338: LD_EXP 83
67342: PPUSH
67343: LD_EXP 83
67347: PUSH
67348: LD_INT 1
67350: PLUS
67351: PPUSH
67352: EMPTY
67353: PPUSH
67354: CALL_OW 1
67358: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67359: LD_ADDR_EXP 86
67363: PUSH
67364: LD_EXP 86
67368: PPUSH
67369: LD_EXP 86
67373: PUSH
67374: LD_INT 1
67376: PLUS
67377: PPUSH
67378: EMPTY
67379: PPUSH
67380: CALL_OW 1
67384: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 302
67394: NOT
67395: IFFALSE 67408
// begin HackUnlinkAll ( i ) ;
67397: LD_VAR 0 1
67401: PPUSH
67402: CALL 67514 0 1
// continue ;
67406: GO 67288
// end ; HackCheckCapturedStatus ( i ) ;
67408: LD_VAR 0 1
67412: PPUSH
67413: CALL 67957 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67417: LD_ADDR_VAR 0 2
67421: PUSH
67422: LD_INT 81
67424: PUSH
67425: LD_VAR 0 1
67429: PPUSH
67430: CALL_OW 255
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 33
67441: PUSH
67442: LD_INT 3
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 91
67451: PUSH
67452: LD_VAR 0 1
67456: PUSH
67457: LD_EXP 85
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 50
67469: PUSH
67470: EMPTY
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: PPUSH
67479: CALL_OW 69
67483: ST_TO_ADDR
// if not tmp then
67484: LD_VAR 0 2
67488: NOT
67489: IFFALSE 67493
// continue ;
67491: GO 67288
// HackLink ( i , tmp ) ;
67493: LD_VAR 0 1
67497: PPUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: CALL 67650 0 2
// end ;
67507: GO 67288
67509: POP
67510: POP
// end ;
67511: PPOPN 2
67513: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67514: LD_INT 0
67516: PPUSH
67517: PPUSH
67518: PPUSH
// if not hack in hackTanks then
67519: LD_VAR 0 1
67523: PUSH
67524: LD_EXP 82
67528: IN
67529: NOT
67530: IFFALSE 67534
// exit ;
67532: GO 67645
// index := GetElementIndex ( hackTanks , hack ) ;
67534: LD_ADDR_VAR 0 4
67538: PUSH
67539: LD_EXP 82
67543: PPUSH
67544: LD_VAR 0 1
67548: PPUSH
67549: CALL 28272 0 2
67553: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67554: LD_EXP 83
67558: PUSH
67559: LD_VAR 0 4
67563: ARRAY
67564: IFFALSE 67645
// begin for i in hackTanksCaptured [ index ] do
67566: LD_ADDR_VAR 0 3
67570: PUSH
67571: LD_EXP 83
67575: PUSH
67576: LD_VAR 0 4
67580: ARRAY
67581: PUSH
67582: FOR_IN
67583: IFFALSE 67609
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67585: LD_VAR 0 3
67589: PUSH
67590: LD_INT 1
67592: ARRAY
67593: PPUSH
67594: LD_VAR 0 3
67598: PUSH
67599: LD_INT 2
67601: ARRAY
67602: PPUSH
67603: CALL_OW 235
67607: GO 67582
67609: POP
67610: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67611: LD_ADDR_EXP 83
67615: PUSH
67616: LD_EXP 83
67620: PPUSH
67621: LD_VAR 0 4
67625: PPUSH
67626: EMPTY
67627: PPUSH
67628: CALL_OW 1
67632: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67633: LD_VAR 0 1
67637: PPUSH
67638: LD_INT 0
67640: PPUSH
67641: CALL_OW 505
// end ; end ;
67645: LD_VAR 0 2
67649: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67650: LD_INT 0
67652: PPUSH
67653: PPUSH
67654: PPUSH
// if not hack in hackTanks or not vehicles then
67655: LD_VAR 0 1
67659: PUSH
67660: LD_EXP 82
67664: IN
67665: NOT
67666: PUSH
67667: LD_VAR 0 2
67671: NOT
67672: OR
67673: IFFALSE 67677
// exit ;
67675: GO 67952
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67677: LD_ADDR_VAR 0 2
67681: PUSH
67682: LD_VAR 0 1
67686: PPUSH
67687: LD_VAR 0 2
67691: PPUSH
67692: LD_INT 1
67694: PPUSH
67695: LD_INT 1
67697: PPUSH
67698: CALL 28922 0 4
67702: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67703: LD_ADDR_VAR 0 5
67707: PUSH
67708: LD_EXP 82
67712: PPUSH
67713: LD_VAR 0 1
67717: PPUSH
67718: CALL 28272 0 2
67722: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67723: LD_EXP 83
67727: PUSH
67728: LD_VAR 0 5
67732: ARRAY
67733: PUSH
67734: LD_EXP 84
67738: LESS
67739: IFFALSE 67928
// begin for i := 1 to vehicles do
67741: LD_ADDR_VAR 0 4
67745: PUSH
67746: DOUBLE
67747: LD_INT 1
67749: DEC
67750: ST_TO_ADDR
67751: LD_VAR 0 2
67755: PUSH
67756: FOR_TO
67757: IFFALSE 67926
// begin if hackTanksCaptured [ index ] = hackLimit then
67759: LD_EXP 83
67763: PUSH
67764: LD_VAR 0 5
67768: ARRAY
67769: PUSH
67770: LD_EXP 84
67774: EQUAL
67775: IFFALSE 67779
// break ;
67777: GO 67926
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67779: LD_ADDR_EXP 86
67783: PUSH
67784: LD_EXP 86
67788: PPUSH
67789: LD_VAR 0 5
67793: PPUSH
67794: LD_EXP 86
67798: PUSH
67799: LD_VAR 0 5
67803: ARRAY
67804: PUSH
67805: LD_INT 1
67807: PLUS
67808: PPUSH
67809: CALL_OW 1
67813: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67814: LD_ADDR_EXP 83
67818: PUSH
67819: LD_EXP 83
67823: PPUSH
67824: LD_VAR 0 5
67828: PUSH
67829: LD_EXP 83
67833: PUSH
67834: LD_VAR 0 5
67838: ARRAY
67839: PUSH
67840: LD_INT 1
67842: PLUS
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PPUSH
67848: LD_VAR 0 2
67852: PUSH
67853: LD_VAR 0 4
67857: ARRAY
67858: PUSH
67859: LD_VAR 0 2
67863: PUSH
67864: LD_VAR 0 4
67868: ARRAY
67869: PPUSH
67870: CALL_OW 255
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PPUSH
67879: CALL 28487 0 3
67883: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67884: LD_VAR 0 2
67888: PUSH
67889: LD_VAR 0 4
67893: ARRAY
67894: PPUSH
67895: LD_VAR 0 1
67899: PPUSH
67900: CALL_OW 255
67904: PPUSH
67905: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67909: LD_VAR 0 2
67913: PUSH
67914: LD_VAR 0 4
67918: ARRAY
67919: PPUSH
67920: CALL_OW 141
// end ;
67924: GO 67756
67926: POP
67927: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67928: LD_VAR 0 1
67932: PPUSH
67933: LD_EXP 83
67937: PUSH
67938: LD_VAR 0 5
67942: ARRAY
67943: PUSH
67944: LD_INT 0
67946: PLUS
67947: PPUSH
67948: CALL_OW 505
// end ;
67952: LD_VAR 0 3
67956: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67957: LD_INT 0
67959: PPUSH
67960: PPUSH
67961: PPUSH
67962: PPUSH
// if not hack in hackTanks then
67963: LD_VAR 0 1
67967: PUSH
67968: LD_EXP 82
67972: IN
67973: NOT
67974: IFFALSE 67978
// exit ;
67976: GO 68218
// index := GetElementIndex ( hackTanks , hack ) ;
67978: LD_ADDR_VAR 0 4
67982: PUSH
67983: LD_EXP 82
67987: PPUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: CALL 28272 0 2
67997: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67998: LD_ADDR_VAR 0 3
68002: PUSH
68003: DOUBLE
68004: LD_EXP 83
68008: PUSH
68009: LD_VAR 0 4
68013: ARRAY
68014: INC
68015: ST_TO_ADDR
68016: LD_INT 1
68018: PUSH
68019: FOR_DOWNTO
68020: IFFALSE 68192
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68022: LD_ADDR_VAR 0 5
68026: PUSH
68027: LD_EXP 83
68031: PUSH
68032: LD_VAR 0 4
68036: ARRAY
68037: PUSH
68038: LD_VAR 0 3
68042: ARRAY
68043: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68044: LD_VAR 0 5
68048: PUSH
68049: LD_INT 1
68051: ARRAY
68052: PPUSH
68053: CALL_OW 302
68057: NOT
68058: PUSH
68059: LD_VAR 0 5
68063: PUSH
68064: LD_INT 1
68066: ARRAY
68067: PPUSH
68068: CALL_OW 255
68072: PUSH
68073: LD_VAR 0 1
68077: PPUSH
68078: CALL_OW 255
68082: NONEQUAL
68083: OR
68084: IFFALSE 68190
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68086: LD_VAR 0 5
68090: PUSH
68091: LD_INT 1
68093: ARRAY
68094: PPUSH
68095: CALL_OW 305
68099: PUSH
68100: LD_VAR 0 5
68104: PUSH
68105: LD_INT 1
68107: ARRAY
68108: PPUSH
68109: CALL_OW 255
68113: PUSH
68114: LD_VAR 0 1
68118: PPUSH
68119: CALL_OW 255
68123: EQUAL
68124: AND
68125: IFFALSE 68149
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68127: LD_VAR 0 5
68131: PUSH
68132: LD_INT 1
68134: ARRAY
68135: PPUSH
68136: LD_VAR 0 5
68140: PUSH
68141: LD_INT 2
68143: ARRAY
68144: PPUSH
68145: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68149: LD_ADDR_EXP 83
68153: PUSH
68154: LD_EXP 83
68158: PPUSH
68159: LD_VAR 0 4
68163: PPUSH
68164: LD_EXP 83
68168: PUSH
68169: LD_VAR 0 4
68173: ARRAY
68174: PPUSH
68175: LD_VAR 0 3
68179: PPUSH
68180: CALL_OW 3
68184: PPUSH
68185: CALL_OW 1
68189: ST_TO_ADDR
// end ; end ;
68190: GO 68019
68192: POP
68193: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68194: LD_VAR 0 1
68198: PPUSH
68199: LD_EXP 83
68203: PUSH
68204: LD_VAR 0 4
68208: ARRAY
68209: PUSH
68210: LD_INT 0
68212: PLUS
68213: PPUSH
68214: CALL_OW 505
// end ;
68218: LD_VAR 0 2
68222: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68223: LD_INT 0
68225: PPUSH
68226: PPUSH
68227: PPUSH
68228: PPUSH
// if not hack in hackTanks then
68229: LD_VAR 0 1
68233: PUSH
68234: LD_EXP 82
68238: IN
68239: NOT
68240: IFFALSE 68244
// exit ;
68242: GO 68329
// index := GetElementIndex ( hackTanks , hack ) ;
68244: LD_ADDR_VAR 0 5
68248: PUSH
68249: LD_EXP 82
68253: PPUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: CALL 28272 0 2
68263: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68264: LD_ADDR_VAR 0 4
68268: PUSH
68269: DOUBLE
68270: LD_INT 1
68272: DEC
68273: ST_TO_ADDR
68274: LD_EXP 83
68278: PUSH
68279: LD_VAR 0 5
68283: ARRAY
68284: PUSH
68285: FOR_TO
68286: IFFALSE 68327
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68288: LD_EXP 83
68292: PUSH
68293: LD_VAR 0 5
68297: ARRAY
68298: PUSH
68299: LD_VAR 0 4
68303: ARRAY
68304: PUSH
68305: LD_INT 1
68307: ARRAY
68308: PUSH
68309: LD_VAR 0 2
68313: EQUAL
68314: IFFALSE 68325
// KillUnit ( vehicle ) ;
68316: LD_VAR 0 2
68320: PPUSH
68321: CALL_OW 66
68325: GO 68285
68327: POP
68328: POP
// end ;
68329: LD_VAR 0 3
68333: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68334: LD_EXP 87
68338: NOT
68339: IFFALSE 68374
68341: GO 68343
68343: DISABLE
// begin initMiner := true ;
68344: LD_ADDR_EXP 87
68348: PUSH
68349: LD_INT 1
68351: ST_TO_ADDR
// minersList := [ ] ;
68352: LD_ADDR_EXP 88
68356: PUSH
68357: EMPTY
68358: ST_TO_ADDR
// minerMinesList := [ ] ;
68359: LD_ADDR_EXP 89
68363: PUSH
68364: EMPTY
68365: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68366: LD_ADDR_EXP 90
68370: PUSH
68371: LD_INT 5
68373: ST_TO_ADDR
// end ;
68374: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68375: LD_EXP 87
68379: PUSH
68380: LD_INT 34
68382: PUSH
68383: LD_INT 81
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PPUSH
68390: CALL_OW 69
68394: AND
68395: IFFALSE 68856
68397: GO 68399
68399: DISABLE
68400: LD_INT 0
68402: PPUSH
68403: PPUSH
68404: PPUSH
68405: PPUSH
// begin enable ;
68406: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68407: LD_ADDR_VAR 0 1
68411: PUSH
68412: LD_INT 34
68414: PUSH
68415: LD_INT 81
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PPUSH
68422: CALL_OW 69
68426: PUSH
68427: FOR_IN
68428: IFFALSE 68500
// begin if not i in minersList then
68430: LD_VAR 0 1
68434: PUSH
68435: LD_EXP 88
68439: IN
68440: NOT
68441: IFFALSE 68498
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68443: LD_ADDR_EXP 88
68447: PUSH
68448: LD_EXP 88
68452: PPUSH
68453: LD_EXP 88
68457: PUSH
68458: LD_INT 1
68460: PLUS
68461: PPUSH
68462: LD_VAR 0 1
68466: PPUSH
68467: CALL_OW 1
68471: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68472: LD_ADDR_EXP 89
68476: PUSH
68477: LD_EXP 89
68481: PPUSH
68482: LD_EXP 89
68486: PUSH
68487: LD_INT 1
68489: PLUS
68490: PPUSH
68491: EMPTY
68492: PPUSH
68493: CALL_OW 1
68497: ST_TO_ADDR
// end end ;
68498: GO 68427
68500: POP
68501: POP
// for i := minerMinesList downto 1 do
68502: LD_ADDR_VAR 0 1
68506: PUSH
68507: DOUBLE
68508: LD_EXP 89
68512: INC
68513: ST_TO_ADDR
68514: LD_INT 1
68516: PUSH
68517: FOR_DOWNTO
68518: IFFALSE 68854
// begin if IsLive ( minersList [ i ] ) then
68520: LD_EXP 88
68524: PUSH
68525: LD_VAR 0 1
68529: ARRAY
68530: PPUSH
68531: CALL_OW 300
68535: IFFALSE 68563
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68537: LD_EXP 88
68541: PUSH
68542: LD_VAR 0 1
68546: ARRAY
68547: PPUSH
68548: LD_EXP 89
68552: PUSH
68553: LD_VAR 0 1
68557: ARRAY
68558: PPUSH
68559: CALL_OW 505
// if not minerMinesList [ i ] then
68563: LD_EXP 89
68567: PUSH
68568: LD_VAR 0 1
68572: ARRAY
68573: NOT
68574: IFFALSE 68578
// continue ;
68576: GO 68517
// for j := minerMinesList [ i ] downto 1 do
68578: LD_ADDR_VAR 0 2
68582: PUSH
68583: DOUBLE
68584: LD_EXP 89
68588: PUSH
68589: LD_VAR 0 1
68593: ARRAY
68594: INC
68595: ST_TO_ADDR
68596: LD_INT 1
68598: PUSH
68599: FOR_DOWNTO
68600: IFFALSE 68850
// begin side := GetSide ( minersList [ i ] ) ;
68602: LD_ADDR_VAR 0 3
68606: PUSH
68607: LD_EXP 88
68611: PUSH
68612: LD_VAR 0 1
68616: ARRAY
68617: PPUSH
68618: CALL_OW 255
68622: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68623: LD_ADDR_VAR 0 4
68627: PUSH
68628: LD_EXP 89
68632: PUSH
68633: LD_VAR 0 1
68637: ARRAY
68638: PUSH
68639: LD_VAR 0 2
68643: ARRAY
68644: PUSH
68645: LD_INT 1
68647: ARRAY
68648: PPUSH
68649: LD_EXP 89
68653: PUSH
68654: LD_VAR 0 1
68658: ARRAY
68659: PUSH
68660: LD_VAR 0 2
68664: ARRAY
68665: PUSH
68666: LD_INT 2
68668: ARRAY
68669: PPUSH
68670: CALL_OW 428
68674: ST_TO_ADDR
// if not tmp then
68675: LD_VAR 0 4
68679: NOT
68680: IFFALSE 68684
// continue ;
68682: GO 68599
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68684: LD_VAR 0 4
68688: PUSH
68689: LD_INT 81
68691: PUSH
68692: LD_VAR 0 3
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PPUSH
68701: CALL_OW 69
68705: IN
68706: PUSH
68707: LD_EXP 89
68711: PUSH
68712: LD_VAR 0 1
68716: ARRAY
68717: PUSH
68718: LD_VAR 0 2
68722: ARRAY
68723: PUSH
68724: LD_INT 1
68726: ARRAY
68727: PPUSH
68728: LD_EXP 89
68732: PUSH
68733: LD_VAR 0 1
68737: ARRAY
68738: PUSH
68739: LD_VAR 0 2
68743: ARRAY
68744: PUSH
68745: LD_INT 2
68747: ARRAY
68748: PPUSH
68749: CALL_OW 458
68753: AND
68754: IFFALSE 68848
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68756: LD_EXP 89
68760: PUSH
68761: LD_VAR 0 1
68765: ARRAY
68766: PUSH
68767: LD_VAR 0 2
68771: ARRAY
68772: PUSH
68773: LD_INT 1
68775: ARRAY
68776: PPUSH
68777: LD_EXP 89
68781: PUSH
68782: LD_VAR 0 1
68786: ARRAY
68787: PUSH
68788: LD_VAR 0 2
68792: ARRAY
68793: PUSH
68794: LD_INT 2
68796: ARRAY
68797: PPUSH
68798: LD_VAR 0 3
68802: PPUSH
68803: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68807: LD_ADDR_EXP 89
68811: PUSH
68812: LD_EXP 89
68816: PPUSH
68817: LD_VAR 0 1
68821: PPUSH
68822: LD_EXP 89
68826: PUSH
68827: LD_VAR 0 1
68831: ARRAY
68832: PPUSH
68833: LD_VAR 0 2
68837: PPUSH
68838: CALL_OW 3
68842: PPUSH
68843: CALL_OW 1
68847: ST_TO_ADDR
// end ; end ;
68848: GO 68599
68850: POP
68851: POP
// end ;
68852: GO 68517
68854: POP
68855: POP
// end ;
68856: PPOPN 4
68858: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68859: LD_INT 0
68861: PPUSH
68862: PPUSH
// result := false ;
68863: LD_ADDR_VAR 0 4
68867: PUSH
68868: LD_INT 0
68870: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68871: LD_VAR 0 1
68875: PPUSH
68876: CALL_OW 264
68880: PUSH
68881: LD_INT 81
68883: EQUAL
68884: NOT
68885: IFFALSE 68889
// exit ;
68887: GO 69129
// index := GetElementIndex ( minersList , unit ) ;
68889: LD_ADDR_VAR 0 5
68893: PUSH
68894: LD_EXP 88
68898: PPUSH
68899: LD_VAR 0 1
68903: PPUSH
68904: CALL 28272 0 2
68908: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68909: LD_EXP 89
68913: PUSH
68914: LD_VAR 0 5
68918: ARRAY
68919: PUSH
68920: LD_EXP 90
68924: GREATEREQUAL
68925: IFFALSE 68929
// exit ;
68927: GO 69129
// ComMoveXY ( unit , x , y ) ;
68929: LD_VAR 0 1
68933: PPUSH
68934: LD_VAR 0 2
68938: PPUSH
68939: LD_VAR 0 3
68943: PPUSH
68944: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68948: LD_INT 35
68950: PPUSH
68951: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68955: LD_VAR 0 1
68959: PPUSH
68960: LD_VAR 0 2
68964: PPUSH
68965: LD_VAR 0 3
68969: PPUSH
68970: CALL 60024 0 3
68974: NOT
68975: PUSH
68976: LD_VAR 0 1
68980: PPUSH
68981: CALL_OW 314
68985: AND
68986: IFFALSE 68990
// exit ;
68988: GO 69129
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68990: LD_VAR 0 2
68994: PPUSH
68995: LD_VAR 0 3
68999: PPUSH
69000: CALL_OW 428
69004: PUSH
69005: LD_VAR 0 1
69009: EQUAL
69010: PUSH
69011: LD_VAR 0 1
69015: PPUSH
69016: CALL_OW 314
69020: NOT
69021: AND
69022: IFFALSE 68948
// PlaySoundXY ( x , y , PlantMine ) ;
69024: LD_VAR 0 2
69028: PPUSH
69029: LD_VAR 0 3
69033: PPUSH
69034: LD_STRING PlantMine
69036: PPUSH
69037: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69041: LD_VAR 0 2
69045: PPUSH
69046: LD_VAR 0 3
69050: PPUSH
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 255
69060: PPUSH
69061: LD_INT 0
69063: PPUSH
69064: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69068: LD_ADDR_EXP 89
69072: PUSH
69073: LD_EXP 89
69077: PPUSH
69078: LD_VAR 0 5
69082: PUSH
69083: LD_EXP 89
69087: PUSH
69088: LD_VAR 0 5
69092: ARRAY
69093: PUSH
69094: LD_INT 1
69096: PLUS
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PPUSH
69102: LD_VAR 0 2
69106: PUSH
69107: LD_VAR 0 3
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PPUSH
69116: CALL 28487 0 3
69120: ST_TO_ADDR
// result := true ;
69121: LD_ADDR_VAR 0 4
69125: PUSH
69126: LD_INT 1
69128: ST_TO_ADDR
// end ;
69129: LD_VAR 0 4
69133: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69134: LD_INT 0
69136: PPUSH
69137: PPUSH
69138: PPUSH
// if not unit in minersList then
69139: LD_VAR 0 1
69143: PUSH
69144: LD_EXP 88
69148: IN
69149: NOT
69150: IFFALSE 69154
// exit ;
69152: GO 69546
// index := GetElementIndex ( minersList , unit ) ;
69154: LD_ADDR_VAR 0 6
69158: PUSH
69159: LD_EXP 88
69163: PPUSH
69164: LD_VAR 0 1
69168: PPUSH
69169: CALL 28272 0 2
69173: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69174: LD_ADDR_VAR 0 5
69178: PUSH
69179: DOUBLE
69180: LD_EXP 89
69184: PUSH
69185: LD_VAR 0 6
69189: ARRAY
69190: INC
69191: ST_TO_ADDR
69192: LD_INT 1
69194: PUSH
69195: FOR_DOWNTO
69196: IFFALSE 69357
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69198: LD_EXP 89
69202: PUSH
69203: LD_VAR 0 6
69207: ARRAY
69208: PUSH
69209: LD_VAR 0 5
69213: ARRAY
69214: PUSH
69215: LD_INT 1
69217: ARRAY
69218: PUSH
69219: LD_VAR 0 2
69223: EQUAL
69224: PUSH
69225: LD_EXP 89
69229: PUSH
69230: LD_VAR 0 6
69234: ARRAY
69235: PUSH
69236: LD_VAR 0 5
69240: ARRAY
69241: PUSH
69242: LD_INT 2
69244: ARRAY
69245: PUSH
69246: LD_VAR 0 3
69250: EQUAL
69251: AND
69252: IFFALSE 69355
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69254: LD_EXP 89
69258: PUSH
69259: LD_VAR 0 6
69263: ARRAY
69264: PUSH
69265: LD_VAR 0 5
69269: ARRAY
69270: PUSH
69271: LD_INT 1
69273: ARRAY
69274: PPUSH
69275: LD_EXP 89
69279: PUSH
69280: LD_VAR 0 6
69284: ARRAY
69285: PUSH
69286: LD_VAR 0 5
69290: ARRAY
69291: PUSH
69292: LD_INT 2
69294: ARRAY
69295: PPUSH
69296: LD_VAR 0 1
69300: PPUSH
69301: CALL_OW 255
69305: PPUSH
69306: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69310: LD_ADDR_EXP 89
69314: PUSH
69315: LD_EXP 89
69319: PPUSH
69320: LD_VAR 0 6
69324: PPUSH
69325: LD_EXP 89
69329: PUSH
69330: LD_VAR 0 6
69334: ARRAY
69335: PPUSH
69336: LD_VAR 0 5
69340: PPUSH
69341: CALL_OW 3
69345: PPUSH
69346: CALL_OW 1
69350: ST_TO_ADDR
// exit ;
69351: POP
69352: POP
69353: GO 69546
// end ; end ;
69355: GO 69195
69357: POP
69358: POP
// for i := minerMinesList [ index ] downto 1 do
69359: LD_ADDR_VAR 0 5
69363: PUSH
69364: DOUBLE
69365: LD_EXP 89
69369: PUSH
69370: LD_VAR 0 6
69374: ARRAY
69375: INC
69376: ST_TO_ADDR
69377: LD_INT 1
69379: PUSH
69380: FOR_DOWNTO
69381: IFFALSE 69544
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69383: LD_EXP 89
69387: PUSH
69388: LD_VAR 0 6
69392: ARRAY
69393: PUSH
69394: LD_VAR 0 5
69398: ARRAY
69399: PUSH
69400: LD_INT 1
69402: ARRAY
69403: PPUSH
69404: LD_EXP 89
69408: PUSH
69409: LD_VAR 0 6
69413: ARRAY
69414: PUSH
69415: LD_VAR 0 5
69419: ARRAY
69420: PUSH
69421: LD_INT 2
69423: ARRAY
69424: PPUSH
69425: LD_VAR 0 2
69429: PPUSH
69430: LD_VAR 0 3
69434: PPUSH
69435: CALL_OW 298
69439: PUSH
69440: LD_INT 6
69442: LESS
69443: IFFALSE 69542
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69445: LD_EXP 89
69449: PUSH
69450: LD_VAR 0 6
69454: ARRAY
69455: PUSH
69456: LD_VAR 0 5
69460: ARRAY
69461: PUSH
69462: LD_INT 1
69464: ARRAY
69465: PPUSH
69466: LD_EXP 89
69470: PUSH
69471: LD_VAR 0 6
69475: ARRAY
69476: PUSH
69477: LD_VAR 0 5
69481: ARRAY
69482: PUSH
69483: LD_INT 2
69485: ARRAY
69486: PPUSH
69487: LD_VAR 0 1
69491: PPUSH
69492: CALL_OW 255
69496: PPUSH
69497: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69501: LD_ADDR_EXP 89
69505: PUSH
69506: LD_EXP 89
69510: PPUSH
69511: LD_VAR 0 6
69515: PPUSH
69516: LD_EXP 89
69520: PUSH
69521: LD_VAR 0 6
69525: ARRAY
69526: PPUSH
69527: LD_VAR 0 5
69531: PPUSH
69532: CALL_OW 3
69536: PPUSH
69537: CALL_OW 1
69541: ST_TO_ADDR
// end ; end ;
69542: GO 69380
69544: POP
69545: POP
// end ;
69546: LD_VAR 0 4
69550: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69551: LD_INT 0
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
69558: PPUSH
69559: PPUSH
69560: PPUSH
69561: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69562: LD_VAR 0 1
69566: PPUSH
69567: CALL_OW 264
69571: PUSH
69572: LD_INT 81
69574: EQUAL
69575: NOT
69576: PUSH
69577: LD_VAR 0 1
69581: PUSH
69582: LD_EXP 88
69586: IN
69587: NOT
69588: OR
69589: IFFALSE 69593
// exit ;
69591: GO 69915
// index := GetElementIndex ( minersList , unit ) ;
69593: LD_ADDR_VAR 0 6
69597: PUSH
69598: LD_EXP 88
69602: PPUSH
69603: LD_VAR 0 1
69607: PPUSH
69608: CALL 28272 0 2
69612: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69613: LD_ADDR_VAR 0 8
69617: PUSH
69618: LD_EXP 90
69622: PUSH
69623: LD_EXP 89
69627: PUSH
69628: LD_VAR 0 6
69632: ARRAY
69633: MINUS
69634: ST_TO_ADDR
// if not minesFreeAmount then
69635: LD_VAR 0 8
69639: NOT
69640: IFFALSE 69644
// exit ;
69642: GO 69915
// tmp := [ ] ;
69644: LD_ADDR_VAR 0 7
69648: PUSH
69649: EMPTY
69650: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69651: LD_ADDR_VAR 0 5
69655: PUSH
69656: DOUBLE
69657: LD_INT 1
69659: DEC
69660: ST_TO_ADDR
69661: LD_VAR 0 8
69665: PUSH
69666: FOR_TO
69667: IFFALSE 69862
// begin _d := rand ( 0 , 5 ) ;
69669: LD_ADDR_VAR 0 11
69673: PUSH
69674: LD_INT 0
69676: PPUSH
69677: LD_INT 5
69679: PPUSH
69680: CALL_OW 12
69684: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69685: LD_ADDR_VAR 0 12
69689: PUSH
69690: LD_INT 2
69692: PPUSH
69693: LD_INT 6
69695: PPUSH
69696: CALL_OW 12
69700: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69701: LD_ADDR_VAR 0 9
69705: PUSH
69706: LD_VAR 0 2
69710: PPUSH
69711: LD_VAR 0 11
69715: PPUSH
69716: LD_VAR 0 12
69720: PPUSH
69721: CALL_OW 272
69725: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69726: LD_ADDR_VAR 0 10
69730: PUSH
69731: LD_VAR 0 3
69735: PPUSH
69736: LD_VAR 0 11
69740: PPUSH
69741: LD_VAR 0 12
69745: PPUSH
69746: CALL_OW 273
69750: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69751: LD_VAR 0 9
69755: PPUSH
69756: LD_VAR 0 10
69760: PPUSH
69761: CALL_OW 488
69765: PUSH
69766: LD_VAR 0 9
69770: PUSH
69771: LD_VAR 0 10
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_VAR 0 7
69784: IN
69785: NOT
69786: AND
69787: PUSH
69788: LD_VAR 0 9
69792: PPUSH
69793: LD_VAR 0 10
69797: PPUSH
69798: CALL_OW 458
69802: NOT
69803: AND
69804: IFFALSE 69846
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69806: LD_ADDR_VAR 0 7
69810: PUSH
69811: LD_VAR 0 7
69815: PPUSH
69816: LD_VAR 0 7
69820: PUSH
69821: LD_INT 1
69823: PLUS
69824: PPUSH
69825: LD_VAR 0 9
69829: PUSH
69830: LD_VAR 0 10
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PPUSH
69839: CALL_OW 1
69843: ST_TO_ADDR
69844: GO 69860
// i := i - 1 ;
69846: LD_ADDR_VAR 0 5
69850: PUSH
69851: LD_VAR 0 5
69855: PUSH
69856: LD_INT 1
69858: MINUS
69859: ST_TO_ADDR
// end ;
69860: GO 69666
69862: POP
69863: POP
// for i in tmp do
69864: LD_ADDR_VAR 0 5
69868: PUSH
69869: LD_VAR 0 7
69873: PUSH
69874: FOR_IN
69875: IFFALSE 69913
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69877: LD_VAR 0 1
69881: PPUSH
69882: LD_VAR 0 5
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PPUSH
69891: LD_VAR 0 5
69895: PUSH
69896: LD_INT 2
69898: ARRAY
69899: PPUSH
69900: CALL 68859 0 3
69904: NOT
69905: IFFALSE 69911
// exit ;
69907: POP
69908: POP
69909: GO 69915
69911: GO 69874
69913: POP
69914: POP
// end ;
69915: LD_VAR 0 4
69919: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69920: LD_INT 0
69922: PPUSH
69923: PPUSH
69924: PPUSH
69925: PPUSH
69926: PPUSH
69927: PPUSH
69928: PPUSH
// if not GetClass ( unit ) = class_sniper then
69929: LD_VAR 0 1
69933: PPUSH
69934: CALL_OW 257
69938: PUSH
69939: LD_INT 5
69941: EQUAL
69942: NOT
69943: IFFALSE 69947
// exit ;
69945: GO 70335
// dist := 8 ;
69947: LD_ADDR_VAR 0 5
69951: PUSH
69952: LD_INT 8
69954: ST_TO_ADDR
// viewRange := 12 ;
69955: LD_ADDR_VAR 0 7
69959: PUSH
69960: LD_INT 12
69962: ST_TO_ADDR
// side := GetSide ( unit ) ;
69963: LD_ADDR_VAR 0 6
69967: PUSH
69968: LD_VAR 0 1
69972: PPUSH
69973: CALL_OW 255
69977: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69978: LD_INT 61
69980: PPUSH
69981: LD_VAR 0 6
69985: PPUSH
69986: CALL_OW 321
69990: PUSH
69991: LD_INT 2
69993: EQUAL
69994: IFFALSE 70004
// viewRange := 16 ;
69996: LD_ADDR_VAR 0 7
70000: PUSH
70001: LD_INT 16
70003: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70004: LD_VAR 0 1
70008: PPUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: LD_VAR 0 3
70018: PPUSH
70019: CALL_OW 297
70023: PUSH
70024: LD_VAR 0 5
70028: GREATER
70029: IFFALSE 70108
// begin ComMoveXY ( unit , x , y ) ;
70031: LD_VAR 0 1
70035: PPUSH
70036: LD_VAR 0 2
70040: PPUSH
70041: LD_VAR 0 3
70045: PPUSH
70046: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70050: LD_INT 35
70052: PPUSH
70053: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70057: LD_VAR 0 1
70061: PPUSH
70062: LD_VAR 0 2
70066: PPUSH
70067: LD_VAR 0 3
70071: PPUSH
70072: CALL 60024 0 3
70076: NOT
70077: IFFALSE 70081
// exit ;
70079: GO 70335
// until GetDistUnitXY ( unit , x , y ) < dist ;
70081: LD_VAR 0 1
70085: PPUSH
70086: LD_VAR 0 2
70090: PPUSH
70091: LD_VAR 0 3
70095: PPUSH
70096: CALL_OW 297
70100: PUSH
70101: LD_VAR 0 5
70105: LESS
70106: IFFALSE 70050
// end ; ComTurnXY ( unit , x , y ) ;
70108: LD_VAR 0 1
70112: PPUSH
70113: LD_VAR 0 2
70117: PPUSH
70118: LD_VAR 0 3
70122: PPUSH
70123: CALL_OW 118
// wait ( 5 ) ;
70127: LD_INT 5
70129: PPUSH
70130: CALL_OW 67
// _d := GetDir ( unit ) ;
70134: LD_ADDR_VAR 0 10
70138: PUSH
70139: LD_VAR 0 1
70143: PPUSH
70144: CALL_OW 254
70148: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70149: LD_ADDR_VAR 0 8
70153: PUSH
70154: LD_VAR 0 1
70158: PPUSH
70159: CALL_OW 250
70163: PPUSH
70164: LD_VAR 0 10
70168: PPUSH
70169: LD_VAR 0 5
70173: PPUSH
70174: CALL_OW 272
70178: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70179: LD_ADDR_VAR 0 9
70183: PUSH
70184: LD_VAR 0 1
70188: PPUSH
70189: CALL_OW 251
70193: PPUSH
70194: LD_VAR 0 10
70198: PPUSH
70199: LD_VAR 0 5
70203: PPUSH
70204: CALL_OW 273
70208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70209: LD_VAR 0 8
70213: PPUSH
70214: LD_VAR 0 9
70218: PPUSH
70219: CALL_OW 488
70223: NOT
70224: IFFALSE 70228
// exit ;
70226: GO 70335
// ComAnimCustom ( unit , 1 ) ;
70228: LD_VAR 0 1
70232: PPUSH
70233: LD_INT 1
70235: PPUSH
70236: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70240: LD_VAR 0 8
70244: PPUSH
70245: LD_VAR 0 9
70249: PPUSH
70250: LD_VAR 0 6
70254: PPUSH
70255: LD_VAR 0 7
70259: PPUSH
70260: CALL_OW 330
// repeat wait ( 1 ) ;
70264: LD_INT 1
70266: PPUSH
70267: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70271: LD_VAR 0 1
70275: PPUSH
70276: CALL_OW 316
70280: PUSH
70281: LD_VAR 0 1
70285: PPUSH
70286: CALL_OW 314
70290: OR
70291: PUSH
70292: LD_VAR 0 1
70296: PPUSH
70297: CALL_OW 302
70301: NOT
70302: OR
70303: PUSH
70304: LD_VAR 0 1
70308: PPUSH
70309: CALL_OW 301
70313: OR
70314: IFFALSE 70264
// RemoveSeeing ( _x , _y , side ) ;
70316: LD_VAR 0 8
70320: PPUSH
70321: LD_VAR 0 9
70325: PPUSH
70326: LD_VAR 0 6
70330: PPUSH
70331: CALL_OW 331
// end ; end_of_file
70335: LD_VAR 0 4
70339: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70340: LD_VAR 0 1
70344: PPUSH
70345: LD_VAR 0 2
70349: PPUSH
70350: LD_VAR 0 3
70354: PPUSH
70355: LD_VAR 0 4
70359: PPUSH
70360: LD_VAR 0 5
70364: PPUSH
70365: LD_VAR 0 6
70369: PPUSH
70370: CALL 7878 0 6
// end ;
70374: PPOPN 6
70376: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70377: LD_INT 0
70379: PPUSH
// begin if not units then
70380: LD_VAR 0 1
70384: NOT
70385: IFFALSE 70389
// exit ;
70387: GO 70389
// end ;
70389: PPOPN 7
70391: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70392: CALL 7782 0 0
// end ;
70396: PPOPN 1
70398: END
