// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7714: LD_VAR 0 2
7718: PUSH
7719: LD_INT 100
7721: EQUAL
7722: IFFALSE 8671
// begin if not StreamModeActive then
7724: LD_EXP 19
7728: NOT
7729: IFFALSE 7739
// StreamModeActive := true ;
7731: LD_ADDR_EXP 19
7735: PUSH
7736: LD_INT 1
7738: ST_TO_ADDR
// if p3 = 0 then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 0
7746: EQUAL
7747: IFFALSE 7753
// InitStreamMode ;
7749: CALL 8829 0 0
// if p3 = 1 then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_INT 1
7760: EQUAL
7761: IFFALSE 7771
// sRocket := true ;
7763: LD_ADDR_EXP 24
7767: PUSH
7768: LD_INT 1
7770: ST_TO_ADDR
// if p3 = 2 then
7771: LD_VAR 0 3
7775: PUSH
7776: LD_INT 2
7778: EQUAL
7779: IFFALSE 7789
// sSpeed := true ;
7781: LD_ADDR_EXP 23
7785: PUSH
7786: LD_INT 1
7788: ST_TO_ADDR
// if p3 = 3 then
7789: LD_VAR 0 3
7793: PUSH
7794: LD_INT 3
7796: EQUAL
7797: IFFALSE 7807
// sEngine := true ;
7799: LD_ADDR_EXP 25
7803: PUSH
7804: LD_INT 1
7806: ST_TO_ADDR
// if p3 = 4 then
7807: LD_VAR 0 3
7811: PUSH
7812: LD_INT 4
7814: EQUAL
7815: IFFALSE 7825
// sSpec := true ;
7817: LD_ADDR_EXP 22
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// if p3 = 5 then
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 5
7832: EQUAL
7833: IFFALSE 7843
// sLevel := true ;
7835: LD_ADDR_EXP 26
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// if p3 = 6 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 6
7850: EQUAL
7851: IFFALSE 7861
// sArmoury := true ;
7853: LD_ADDR_EXP 27
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// if p3 = 7 then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 7
7868: EQUAL
7869: IFFALSE 7879
// sRadar := true ;
7871: LD_ADDR_EXP 28
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 8 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 8
7886: EQUAL
7887: IFFALSE 7897
// sBunker := true ;
7889: LD_ADDR_EXP 29
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// if p3 = 9 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 9
7904: EQUAL
7905: IFFALSE 7915
// sHack := true ;
7907: LD_ADDR_EXP 30
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// if p3 = 10 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 10
7922: EQUAL
7923: IFFALSE 7933
// sFire := true ;
7925: LD_ADDR_EXP 31
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// if p3 = 11 then
7933: LD_VAR 0 3
7937: PUSH
7938: LD_INT 11
7940: EQUAL
7941: IFFALSE 7951
// sRefresh := true ;
7943: LD_ADDR_EXP 32
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// if p3 = 12 then
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 12
7958: EQUAL
7959: IFFALSE 7969
// sExp := true ;
7961: LD_ADDR_EXP 33
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if p3 = 13 then
7969: LD_VAR 0 3
7973: PUSH
7974: LD_INT 13
7976: EQUAL
7977: IFFALSE 7987
// sDepot := true ;
7979: LD_ADDR_EXP 34
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// if p3 = 14 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 14
7994: EQUAL
7995: IFFALSE 8005
// sFlag := true ;
7997: LD_ADDR_EXP 35
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// if p3 = 15 then
8005: LD_VAR 0 3
8009: PUSH
8010: LD_INT 15
8012: EQUAL
8013: IFFALSE 8023
// sKamikadze := true ;
8015: LD_ADDR_EXP 43
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// if p3 = 16 then
8023: LD_VAR 0 3
8027: PUSH
8028: LD_INT 16
8030: EQUAL
8031: IFFALSE 8041
// sTroll := true ;
8033: LD_ADDR_EXP 44
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// if p3 = 17 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 17
8048: EQUAL
8049: IFFALSE 8059
// sSlow := true ;
8051: LD_ADDR_EXP 45
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// if p3 = 18 then
8059: LD_VAR 0 3
8063: PUSH
8064: LD_INT 18
8066: EQUAL
8067: IFFALSE 8077
// sLack := true ;
8069: LD_ADDR_EXP 46
8073: PUSH
8074: LD_INT 1
8076: ST_TO_ADDR
// if p3 = 19 then
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 19
8084: EQUAL
8085: IFFALSE 8095
// sTank := true ;
8087: LD_ADDR_EXP 48
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// if p3 = 20 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 20
8102: EQUAL
8103: IFFALSE 8113
// sRemote := true ;
8105: LD_ADDR_EXP 49
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// if p3 = 21 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 21
8120: EQUAL
8121: IFFALSE 8131
// sPowell := true ;
8123: LD_ADDR_EXP 50
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if p3 = 22 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 22
8138: EQUAL
8139: IFFALSE 8149
// sTeleport := true ;
8141: LD_ADDR_EXP 53
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 23 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 23
8156: EQUAL
8157: IFFALSE 8167
// sOilTower := true ;
8159: LD_ADDR_EXP 55
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 24 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 24
8174: EQUAL
8175: IFFALSE 8185
// sShovel := true ;
8177: LD_ADDR_EXP 56
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 25 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 25
8192: EQUAL
8193: IFFALSE 8203
// sSheik := true ;
8195: LD_ADDR_EXP 57
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 26 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 26
8210: EQUAL
8211: IFFALSE 8221
// sEarthquake := true ;
8213: LD_ADDR_EXP 59
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 27 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 27
8228: EQUAL
8229: IFFALSE 8239
// sAI := true ;
8231: LD_ADDR_EXP 60
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 28 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 28
8246: EQUAL
8247: IFFALSE 8257
// sCargo := true ;
8249: LD_ADDR_EXP 63
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 29 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 29
8264: EQUAL
8265: IFFALSE 8275
// sDLaser := true ;
8267: LD_ADDR_EXP 64
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 30 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 30
8282: EQUAL
8283: IFFALSE 8293
// sExchange := true ;
8285: LD_ADDR_EXP 65
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 31 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 31
8300: EQUAL
8301: IFFALSE 8311
// sFac := true ;
8303: LD_ADDR_EXP 66
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 32 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 32
8318: EQUAL
8319: IFFALSE 8329
// sPower := true ;
8321: LD_ADDR_EXP 67
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 33 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 33
8336: EQUAL
8337: IFFALSE 8347
// sRandom := true ;
8339: LD_ADDR_EXP 68
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 34 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 34
8354: EQUAL
8355: IFFALSE 8365
// sShield := true ;
8357: LD_ADDR_EXP 69
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 35 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 35
8372: EQUAL
8373: IFFALSE 8383
// sTime := true ;
8375: LD_ADDR_EXP 70
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 36 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 36
8390: EQUAL
8391: IFFALSE 8401
// sTools := true ;
8393: LD_ADDR_EXP 71
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 101 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 101
8408: EQUAL
8409: IFFALSE 8419
// sSold := true ;
8411: LD_ADDR_EXP 36
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 102 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 102
8426: EQUAL
8427: IFFALSE 8437
// sDiff := true ;
8429: LD_ADDR_EXP 37
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 103 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 103
8444: EQUAL
8445: IFFALSE 8455
// sFog := true ;
8447: LD_ADDR_EXP 40
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 104 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 104
8462: EQUAL
8463: IFFALSE 8473
// sReset := true ;
8465: LD_ADDR_EXP 41
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 105 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 105
8480: EQUAL
8481: IFFALSE 8491
// sSun := true ;
8483: LD_ADDR_EXP 42
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 106 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 106
8498: EQUAL
8499: IFFALSE 8509
// sTiger := true ;
8501: LD_ADDR_EXP 38
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 107 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 107
8516: EQUAL
8517: IFFALSE 8527
// sBomb := true ;
8519: LD_ADDR_EXP 39
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 108 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 108
8534: EQUAL
8535: IFFALSE 8545
// sWound := true ;
8537: LD_ADDR_EXP 47
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 109 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 109
8552: EQUAL
8553: IFFALSE 8563
// sBetray := true ;
8555: LD_ADDR_EXP 51
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 110 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 110
8570: EQUAL
8571: IFFALSE 8581
// sContamin := true ;
8573: LD_ADDR_EXP 52
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 111 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 111
8588: EQUAL
8589: IFFALSE 8599
// sOil := true ;
8591: LD_ADDR_EXP 54
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 112 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 112
8606: EQUAL
8607: IFFALSE 8617
// sStu := true ;
8609: LD_ADDR_EXP 58
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 113 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 113
8624: EQUAL
8625: IFFALSE 8635
// sBazooka := true ;
8627: LD_ADDR_EXP 61
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 114 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 114
8642: EQUAL
8643: IFFALSE 8653
// sMortar := true ;
8645: LD_ADDR_EXP 62
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 115 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 115
8660: EQUAL
8661: IFFALSE 8671
// sRanger := true ;
8663: LD_ADDR_EXP 72
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// end ; if p2 = 101 then
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 101
8678: EQUAL
8679: IFFALSE 8807
// begin case p3 of 1 :
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 1
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8701
8694: POP
// hHackUnlimitedResources ; 2 :
8695: CALL 19842 0 0
8699: GO 8807
8701: LD_INT 2
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8716
8709: POP
// hHackSetLevel10 ; 3 :
8710: CALL 19975 0 0
8714: GO 8807
8716: LD_INT 3
8718: DOUBLE
8719: EQUAL
8720: IFTRUE 8724
8722: GO 8731
8724: POP
// hHackSetLevel10YourUnits ; 4 :
8725: CALL 20060 0 0
8729: GO 8807
8731: LD_INT 4
8733: DOUBLE
8734: EQUAL
8735: IFTRUE 8739
8737: GO 8746
8739: POP
// hHackInvincible ; 5 :
8740: CALL 20508 0 0
8744: GO 8807
8746: LD_INT 5
8748: DOUBLE
8749: EQUAL
8750: IFTRUE 8754
8752: GO 8761
8754: POP
// hHackInvisible ; 6 :
8755: CALL 20619 0 0
8759: GO 8807
8761: LD_INT 6
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8776
8769: POP
// hHackChangeYourSide ; 7 :
8770: CALL 20676 0 0
8774: GO 8807
8776: LD_INT 7
8778: DOUBLE
8779: EQUAL
8780: IFTRUE 8784
8782: GO 8791
8784: POP
// hHackChangeUnitSide ; 8 :
8785: CALL 20718 0 0
8789: GO 8807
8791: LD_INT 8
8793: DOUBLE
8794: EQUAL
8795: IFTRUE 8799
8797: GO 8806
8799: POP
// hHackFog ; end ;
8800: CALL 20819 0 0
8804: GO 8807
8806: POP
// end ; end ;
8807: PPOPN 6
8809: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8810: GO 8812
8812: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8813: LD_STRING initStreamRollete();
8815: PPUSH
8816: CALL_OW 559
// InitStreamMode ;
8820: CALL 8829 0 0
// DefineStreamItems ( ) ;
8824: CALL 9269 0 0
// end ;
8828: END
// function InitStreamMode ; begin
8829: LD_INT 0
8831: PPUSH
// streamModeActive := false ;
8832: LD_ADDR_EXP 19
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// normalCounter := 36 ;
8840: LD_ADDR_EXP 20
8844: PUSH
8845: LD_INT 36
8847: ST_TO_ADDR
// hardcoreCounter := 16 ;
8848: LD_ADDR_EXP 21
8852: PUSH
8853: LD_INT 16
8855: ST_TO_ADDR
// sRocket := false ;
8856: LD_ADDR_EXP 24
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sSpeed := false ;
8864: LD_ADDR_EXP 23
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sEngine := false ;
8872: LD_ADDR_EXP 25
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sSpec := false ;
8880: LD_ADDR_EXP 22
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sLevel := false ;
8888: LD_ADDR_EXP 26
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sArmoury := false ;
8896: LD_ADDR_EXP 27
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sRadar := false ;
8904: LD_ADDR_EXP 28
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// sBunker := false ;
8912: LD_ADDR_EXP 29
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// sHack := false ;
8920: LD_ADDR_EXP 30
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// sFire := false ;
8928: LD_ADDR_EXP 31
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// sRefresh := false ;
8936: LD_ADDR_EXP 32
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// sExp := false ;
8944: LD_ADDR_EXP 33
8948: PUSH
8949: LD_INT 0
8951: ST_TO_ADDR
// sDepot := false ;
8952: LD_ADDR_EXP 34
8956: PUSH
8957: LD_INT 0
8959: ST_TO_ADDR
// sFlag := false ;
8960: LD_ADDR_EXP 35
8964: PUSH
8965: LD_INT 0
8967: ST_TO_ADDR
// sKamikadze := false ;
8968: LD_ADDR_EXP 43
8972: PUSH
8973: LD_INT 0
8975: ST_TO_ADDR
// sTroll := false ;
8976: LD_ADDR_EXP 44
8980: PUSH
8981: LD_INT 0
8983: ST_TO_ADDR
// sSlow := false ;
8984: LD_ADDR_EXP 45
8988: PUSH
8989: LD_INT 0
8991: ST_TO_ADDR
// sLack := false ;
8992: LD_ADDR_EXP 46
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// sTank := false ;
9000: LD_ADDR_EXP 48
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// sRemote := false ;
9008: LD_ADDR_EXP 49
9012: PUSH
9013: LD_INT 0
9015: ST_TO_ADDR
// sPowell := false ;
9016: LD_ADDR_EXP 50
9020: PUSH
9021: LD_INT 0
9023: ST_TO_ADDR
// sTeleport := false ;
9024: LD_ADDR_EXP 53
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// sOilTower := false ;
9032: LD_ADDR_EXP 55
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// sShovel := false ;
9040: LD_ADDR_EXP 56
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// sSheik := false ;
9048: LD_ADDR_EXP 57
9052: PUSH
9053: LD_INT 0
9055: ST_TO_ADDR
// sEarthquake := false ;
9056: LD_ADDR_EXP 59
9060: PUSH
9061: LD_INT 0
9063: ST_TO_ADDR
// sAI := false ;
9064: LD_ADDR_EXP 60
9068: PUSH
9069: LD_INT 0
9071: ST_TO_ADDR
// sCargo := false ;
9072: LD_ADDR_EXP 63
9076: PUSH
9077: LD_INT 0
9079: ST_TO_ADDR
// sDLaser := false ;
9080: LD_ADDR_EXP 64
9084: PUSH
9085: LD_INT 0
9087: ST_TO_ADDR
// sExchange := false ;
9088: LD_ADDR_EXP 65
9092: PUSH
9093: LD_INT 0
9095: ST_TO_ADDR
// sFac := false ;
9096: LD_ADDR_EXP 66
9100: PUSH
9101: LD_INT 0
9103: ST_TO_ADDR
// sPower := false ;
9104: LD_ADDR_EXP 67
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// sRandom := false ;
9112: LD_ADDR_EXP 68
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// sShield := false ;
9120: LD_ADDR_EXP 69
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// sTime := false ;
9128: LD_ADDR_EXP 70
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// sTools := false ;
9136: LD_ADDR_EXP 71
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// sSold := false ;
9144: LD_ADDR_EXP 36
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// sDiff := false ;
9152: LD_ADDR_EXP 37
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// sFog := false ;
9160: LD_ADDR_EXP 40
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// sReset := false ;
9168: LD_ADDR_EXP 41
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// sSun := false ;
9176: LD_ADDR_EXP 42
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sTiger := false ;
9184: LD_ADDR_EXP 38
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sBomb := false ;
9192: LD_ADDR_EXP 39
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sWound := false ;
9200: LD_ADDR_EXP 47
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sBetray := false ;
9208: LD_ADDR_EXP 51
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sContamin := false ;
9216: LD_ADDR_EXP 52
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sOil := false ;
9224: LD_ADDR_EXP 54
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sStu := false ;
9232: LD_ADDR_EXP 58
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sBazooka := false ;
9240: LD_ADDR_EXP 61
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sMortar := false ;
9248: LD_ADDR_EXP 62
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sRanger := false ;
9256: LD_ADDR_EXP 72
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// end ;
9264: LD_VAR 0 1
9268: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
9275: PPUSH
// result := [ ] ;
9276: LD_ADDR_VAR 0 1
9280: PUSH
9281: EMPTY
9282: ST_TO_ADDR
// if campaign_id = 1 then
9283: LD_OWVAR 69
9287: PUSH
9288: LD_INT 1
9290: EQUAL
9291: IFFALSE 12229
// begin case mission_number of 1 :
9293: LD_OWVAR 70
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: EQUAL
9302: IFTRUE 9306
9304: GO 9370
9306: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9307: LD_ADDR_VAR 0 1
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 4
9317: PUSH
9318: LD_INT 11
9320: PUSH
9321: LD_INT 12
9323: PUSH
9324: LD_INT 15
9326: PUSH
9327: LD_INT 16
9329: PUSH
9330: LD_INT 22
9332: PUSH
9333: LD_INT 23
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 101
9352: PUSH
9353: LD_INT 102
9355: PUSH
9356: LD_INT 106
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: ST_TO_ADDR
9368: GO 12227
9370: LD_INT 2
9372: DOUBLE
9373: EQUAL
9374: IFTRUE 9378
9376: GO 9450
9378: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9379: LD_ADDR_VAR 0 1
9383: PUSH
9384: LD_INT 2
9386: PUSH
9387: LD_INT 4
9389: PUSH
9390: LD_INT 11
9392: PUSH
9393: LD_INT 12
9395: PUSH
9396: LD_INT 15
9398: PUSH
9399: LD_INT 16
9401: PUSH
9402: LD_INT 22
9404: PUSH
9405: LD_INT 23
9407: PUSH
9408: LD_INT 26
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 101
9424: PUSH
9425: LD_INT 102
9427: PUSH
9428: LD_INT 105
9430: PUSH
9431: LD_INT 106
9433: PUSH
9434: LD_INT 108
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: ST_TO_ADDR
9448: GO 12227
9450: LD_INT 3
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9534
9458: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 4
9469: PUSH
9470: LD_INT 5
9472: PUSH
9473: LD_INT 11
9475: PUSH
9476: LD_INT 12
9478: PUSH
9479: LD_INT 15
9481: PUSH
9482: LD_INT 16
9484: PUSH
9485: LD_INT 22
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 36
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 101
9508: PUSH
9509: LD_INT 102
9511: PUSH
9512: LD_INT 105
9514: PUSH
9515: LD_INT 106
9517: PUSH
9518: LD_INT 108
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: ST_TO_ADDR
9532: GO 12227
9534: LD_INT 4
9536: DOUBLE
9537: EQUAL
9538: IFTRUE 9542
9540: GO 9626
9542: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9543: LD_ADDR_VAR 0 1
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: LD_INT 4
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: LD_INT 8
9559: PUSH
9560: LD_INT 11
9562: PUSH
9563: LD_INT 12
9565: PUSH
9566: LD_INT 15
9568: PUSH
9569: LD_INT 16
9571: PUSH
9572: LD_INT 22
9574: PUSH
9575: LD_INT 23
9577: PUSH
9578: LD_INT 26
9580: PUSH
9581: LD_INT 36
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 101
9600: PUSH
9601: LD_INT 102
9603: PUSH
9604: LD_INT 105
9606: PUSH
9607: LD_INT 106
9609: PUSH
9610: LD_INT 108
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: ST_TO_ADDR
9624: GO 12227
9626: LD_INT 5
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9734
9634: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: LD_INT 4
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: LD_INT 6
9651: PUSH
9652: LD_INT 8
9654: PUSH
9655: LD_INT 11
9657: PUSH
9658: LD_INT 12
9660: PUSH
9661: LD_INT 15
9663: PUSH
9664: LD_INT 16
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_INT 23
9672: PUSH
9673: LD_INT 25
9675: PUSH
9676: LD_INT 26
9678: PUSH
9679: LD_INT 36
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 101
9700: PUSH
9701: LD_INT 102
9703: PUSH
9704: LD_INT 105
9706: PUSH
9707: LD_INT 106
9709: PUSH
9710: LD_INT 108
9712: PUSH
9713: LD_INT 109
9715: PUSH
9716: LD_INT 112
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: ST_TO_ADDR
9732: GO 12227
9734: LD_INT 6
9736: DOUBLE
9737: EQUAL
9738: IFTRUE 9742
9740: GO 9862
9742: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9743: LD_ADDR_VAR 0 1
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 4
9753: PUSH
9754: LD_INT 5
9756: PUSH
9757: LD_INT 6
9759: PUSH
9760: LD_INT 8
9762: PUSH
9763: LD_INT 11
9765: PUSH
9766: LD_INT 12
9768: PUSH
9769: LD_INT 15
9771: PUSH
9772: LD_INT 16
9774: PUSH
9775: LD_INT 20
9777: PUSH
9778: LD_INT 21
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_INT 23
9786: PUSH
9787: LD_INT 25
9789: PUSH
9790: LD_INT 26
9792: PUSH
9793: LD_INT 30
9795: PUSH
9796: LD_INT 31
9798: PUSH
9799: LD_INT 32
9801: PUSH
9802: LD_INT 36
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 101
9828: PUSH
9829: LD_INT 102
9831: PUSH
9832: LD_INT 105
9834: PUSH
9835: LD_INT 106
9837: PUSH
9838: LD_INT 108
9840: PUSH
9841: LD_INT 109
9843: PUSH
9844: LD_INT 112
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: ST_TO_ADDR
9860: GO 12227
9862: LD_INT 7
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9970
9870: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: LD_INT 4
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: LD_INT 7
9887: PUSH
9888: LD_INT 11
9890: PUSH
9891: LD_INT 12
9893: PUSH
9894: LD_INT 15
9896: PUSH
9897: LD_INT 16
9899: PUSH
9900: LD_INT 20
9902: PUSH
9903: LD_INT 21
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 23
9911: PUSH
9912: LD_INT 25
9914: PUSH
9915: LD_INT 26
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 101
9936: PUSH
9937: LD_INT 102
9939: PUSH
9940: LD_INT 103
9942: PUSH
9943: LD_INT 105
9945: PUSH
9946: LD_INT 106
9948: PUSH
9949: LD_INT 108
9951: PUSH
9952: LD_INT 112
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: ST_TO_ADDR
9968: GO 12227
9970: LD_INT 8
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 10106
9978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: LD_INT 5
9992: PUSH
9993: LD_INT 6
9995: PUSH
9996: LD_INT 7
9998: PUSH
9999: LD_INT 8
10001: PUSH
10002: LD_INT 11
10004: PUSH
10005: LD_INT 12
10007: PUSH
10008: LD_INT 15
10010: PUSH
10011: LD_INT 16
10013: PUSH
10014: LD_INT 20
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 22
10022: PUSH
10023: LD_INT 23
10025: PUSH
10026: LD_INT 25
10028: PUSH
10029: LD_INT 26
10031: PUSH
10032: LD_INT 30
10034: PUSH
10035: LD_INT 31
10037: PUSH
10038: LD_INT 32
10040: PUSH
10041: LD_INT 36
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 101
10068: PUSH
10069: LD_INT 102
10071: PUSH
10072: LD_INT 103
10074: PUSH
10075: LD_INT 105
10077: PUSH
10078: LD_INT 106
10080: PUSH
10081: LD_INT 108
10083: PUSH
10084: LD_INT 109
10086: PUSH
10087: LD_INT 112
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: ST_TO_ADDR
10104: GO 12227
10106: LD_INT 9
10108: DOUBLE
10109: EQUAL
10110: IFTRUE 10114
10112: GO 10250
10114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10115: LD_ADDR_VAR 0 1
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 6
10131: PUSH
10132: LD_INT 7
10134: PUSH
10135: LD_INT 8
10137: PUSH
10138: LD_INT 11
10140: PUSH
10141: LD_INT 12
10143: PUSH
10144: LD_INT 15
10146: PUSH
10147: LD_INT 16
10149: PUSH
10150: LD_INT 20
10152: PUSH
10153: LD_INT 21
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_INT 23
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 26
10167: PUSH
10168: LD_INT 28
10170: PUSH
10171: LD_INT 30
10173: PUSH
10174: LD_INT 31
10176: PUSH
10177: LD_INT 32
10179: PUSH
10180: LD_INT 36
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 101
10208: PUSH
10209: LD_INT 102
10211: PUSH
10212: LD_INT 103
10214: PUSH
10215: LD_INT 105
10217: PUSH
10218: LD_INT 106
10220: PUSH
10221: LD_INT 108
10223: PUSH
10224: LD_INT 109
10226: PUSH
10227: LD_INT 112
10229: PUSH
10230: LD_INT 114
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: ST_TO_ADDR
10248: GO 12227
10250: LD_INT 10
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10258
10256: GO 10442
10258: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10259: LD_ADDR_VAR 0 1
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: LD_INT 4
10269: PUSH
10270: LD_INT 5
10272: PUSH
10273: LD_INT 6
10275: PUSH
10276: LD_INT 7
10278: PUSH
10279: LD_INT 8
10281: PUSH
10282: LD_INT 9
10284: PUSH
10285: LD_INT 10
10287: PUSH
10288: LD_INT 11
10290: PUSH
10291: LD_INT 12
10293: PUSH
10294: LD_INT 13
10296: PUSH
10297: LD_INT 14
10299: PUSH
10300: LD_INT 15
10302: PUSH
10303: LD_INT 16
10305: PUSH
10306: LD_INT 17
10308: PUSH
10309: LD_INT 18
10311: PUSH
10312: LD_INT 19
10314: PUSH
10315: LD_INT 20
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 23
10326: PUSH
10327: LD_INT 24
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 26
10335: PUSH
10336: LD_INT 28
10338: PUSH
10339: LD_INT 30
10341: PUSH
10342: LD_INT 31
10344: PUSH
10345: LD_INT 32
10347: PUSH
10348: LD_INT 36
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 101
10384: PUSH
10385: LD_INT 102
10387: PUSH
10388: LD_INT 103
10390: PUSH
10391: LD_INT 104
10393: PUSH
10394: LD_INT 105
10396: PUSH
10397: LD_INT 106
10399: PUSH
10400: LD_INT 107
10402: PUSH
10403: LD_INT 108
10405: PUSH
10406: LD_INT 109
10408: PUSH
10409: LD_INT 110
10411: PUSH
10412: LD_INT 111
10414: PUSH
10415: LD_INT 112
10417: PUSH
10418: LD_INT 114
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: ST_TO_ADDR
10440: GO 12227
10442: LD_INT 11
10444: DOUBLE
10445: EQUAL
10446: IFTRUE 10450
10448: GO 10642
10450: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10451: LD_ADDR_VAR 0 1
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: LD_INT 4
10464: PUSH
10465: LD_INT 5
10467: PUSH
10468: LD_INT 6
10470: PUSH
10471: LD_INT 7
10473: PUSH
10474: LD_INT 8
10476: PUSH
10477: LD_INT 9
10479: PUSH
10480: LD_INT 10
10482: PUSH
10483: LD_INT 11
10485: PUSH
10486: LD_INT 12
10488: PUSH
10489: LD_INT 13
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: LD_INT 15
10497: PUSH
10498: LD_INT 16
10500: PUSH
10501: LD_INT 17
10503: PUSH
10504: LD_INT 18
10506: PUSH
10507: LD_INT 19
10509: PUSH
10510: LD_INT 20
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 22
10518: PUSH
10519: LD_INT 23
10521: PUSH
10522: LD_INT 24
10524: PUSH
10525: LD_INT 25
10527: PUSH
10528: LD_INT 26
10530: PUSH
10531: LD_INT 28
10533: PUSH
10534: LD_INT 30
10536: PUSH
10537: LD_INT 31
10539: PUSH
10540: LD_INT 32
10542: PUSH
10543: LD_INT 34
10545: PUSH
10546: LD_INT 36
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 101
10584: PUSH
10585: LD_INT 102
10587: PUSH
10588: LD_INT 103
10590: PUSH
10591: LD_INT 104
10593: PUSH
10594: LD_INT 105
10596: PUSH
10597: LD_INT 106
10599: PUSH
10600: LD_INT 107
10602: PUSH
10603: LD_INT 108
10605: PUSH
10606: LD_INT 109
10608: PUSH
10609: LD_INT 110
10611: PUSH
10612: LD_INT 111
10614: PUSH
10615: LD_INT 112
10617: PUSH
10618: LD_INT 114
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: ST_TO_ADDR
10640: GO 12227
10642: LD_INT 12
10644: DOUBLE
10645: EQUAL
10646: IFTRUE 10650
10648: GO 10858
10650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10651: LD_ADDR_VAR 0 1
10655: PUSH
10656: LD_INT 1
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: LD_INT 4
10667: PUSH
10668: LD_INT 5
10670: PUSH
10671: LD_INT 6
10673: PUSH
10674: LD_INT 7
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: LD_INT 9
10682: PUSH
10683: LD_INT 10
10685: PUSH
10686: LD_INT 11
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: LD_INT 13
10694: PUSH
10695: LD_INT 14
10697: PUSH
10698: LD_INT 15
10700: PUSH
10701: LD_INT 16
10703: PUSH
10704: LD_INT 17
10706: PUSH
10707: LD_INT 18
10709: PUSH
10710: LD_INT 19
10712: PUSH
10713: LD_INT 20
10715: PUSH
10716: LD_INT 21
10718: PUSH
10719: LD_INT 22
10721: PUSH
10722: LD_INT 23
10724: PUSH
10725: LD_INT 24
10727: PUSH
10728: LD_INT 25
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: LD_INT 31
10745: PUSH
10746: LD_INT 32
10748: PUSH
10749: LD_INT 33
10751: PUSH
10752: LD_INT 34
10754: PUSH
10755: LD_INT 36
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 101
10796: PUSH
10797: LD_INT 102
10799: PUSH
10800: LD_INT 103
10802: PUSH
10803: LD_INT 104
10805: PUSH
10806: LD_INT 105
10808: PUSH
10809: LD_INT 106
10811: PUSH
10812: LD_INT 107
10814: PUSH
10815: LD_INT 108
10817: PUSH
10818: LD_INT 109
10820: PUSH
10821: LD_INT 110
10823: PUSH
10824: LD_INT 111
10826: PUSH
10827: LD_INT 112
10829: PUSH
10830: LD_INT 113
10832: PUSH
10833: LD_INT 114
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: ST_TO_ADDR
10856: GO 12227
10858: LD_INT 13
10860: DOUBLE
10861: EQUAL
10862: IFTRUE 10866
10864: GO 11062
10866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10867: LD_ADDR_VAR 0 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 3
10880: PUSH
10881: LD_INT 4
10883: PUSH
10884: LD_INT 5
10886: PUSH
10887: LD_INT 8
10889: PUSH
10890: LD_INT 9
10892: PUSH
10893: LD_INT 10
10895: PUSH
10896: LD_INT 11
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: LD_INT 14
10904: PUSH
10905: LD_INT 15
10907: PUSH
10908: LD_INT 16
10910: PUSH
10911: LD_INT 17
10913: PUSH
10914: LD_INT 18
10916: PUSH
10917: LD_INT 19
10919: PUSH
10920: LD_INT 20
10922: PUSH
10923: LD_INT 21
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 23
10931: PUSH
10932: LD_INT 24
10934: PUSH
10935: LD_INT 25
10937: PUSH
10938: LD_INT 26
10940: PUSH
10941: LD_INT 27
10943: PUSH
10944: LD_INT 28
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 31
10952: PUSH
10953: LD_INT 32
10955: PUSH
10956: LD_INT 33
10958: PUSH
10959: LD_INT 34
10961: PUSH
10962: LD_INT 36
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 101
11000: PUSH
11001: LD_INT 102
11003: PUSH
11004: LD_INT 103
11006: PUSH
11007: LD_INT 104
11009: PUSH
11010: LD_INT 105
11012: PUSH
11013: LD_INT 106
11015: PUSH
11016: LD_INT 107
11018: PUSH
11019: LD_INT 108
11021: PUSH
11022: LD_INT 109
11024: PUSH
11025: LD_INT 110
11027: PUSH
11028: LD_INT 111
11030: PUSH
11031: LD_INT 112
11033: PUSH
11034: LD_INT 113
11036: PUSH
11037: LD_INT 114
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: ST_TO_ADDR
11060: GO 12227
11062: LD_INT 14
11064: DOUBLE
11065: EQUAL
11066: IFTRUE 11070
11068: GO 11282
11070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11071: LD_ADDR_VAR 0 1
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: LD_INT 3
11084: PUSH
11085: LD_INT 4
11087: PUSH
11088: LD_INT 5
11090: PUSH
11091: LD_INT 6
11093: PUSH
11094: LD_INT 7
11096: PUSH
11097: LD_INT 8
11099: PUSH
11100: LD_INT 9
11102: PUSH
11103: LD_INT 10
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 13
11114: PUSH
11115: LD_INT 14
11117: PUSH
11118: LD_INT 15
11120: PUSH
11121: LD_INT 16
11123: PUSH
11124: LD_INT 17
11126: PUSH
11127: LD_INT 18
11129: PUSH
11130: LD_INT 19
11132: PUSH
11133: LD_INT 20
11135: PUSH
11136: LD_INT 21
11138: PUSH
11139: LD_INT 22
11141: PUSH
11142: LD_INT 23
11144: PUSH
11145: LD_INT 24
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 26
11153: PUSH
11154: LD_INT 27
11156: PUSH
11157: LD_INT 28
11159: PUSH
11160: LD_INT 29
11162: PUSH
11163: LD_INT 30
11165: PUSH
11166: LD_INT 31
11168: PUSH
11169: LD_INT 32
11171: PUSH
11172: LD_INT 33
11174: PUSH
11175: LD_INT 34
11177: PUSH
11178: LD_INT 36
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 101
11220: PUSH
11221: LD_INT 102
11223: PUSH
11224: LD_INT 103
11226: PUSH
11227: LD_INT 104
11229: PUSH
11230: LD_INT 105
11232: PUSH
11233: LD_INT 106
11235: PUSH
11236: LD_INT 107
11238: PUSH
11239: LD_INT 108
11241: PUSH
11242: LD_INT 109
11244: PUSH
11245: LD_INT 110
11247: PUSH
11248: LD_INT 111
11250: PUSH
11251: LD_INT 112
11253: PUSH
11254: LD_INT 113
11256: PUSH
11257: LD_INT 114
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: ST_TO_ADDR
11280: GO 12227
11282: LD_INT 15
11284: DOUBLE
11285: EQUAL
11286: IFTRUE 11290
11288: GO 11502
11290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 4
11307: PUSH
11308: LD_INT 5
11310: PUSH
11311: LD_INT 6
11313: PUSH
11314: LD_INT 7
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: LD_INT 9
11322: PUSH
11323: LD_INT 10
11325: PUSH
11326: LD_INT 11
11328: PUSH
11329: LD_INT 12
11331: PUSH
11332: LD_INT 13
11334: PUSH
11335: LD_INT 14
11337: PUSH
11338: LD_INT 15
11340: PUSH
11341: LD_INT 16
11343: PUSH
11344: LD_INT 17
11346: PUSH
11347: LD_INT 18
11349: PUSH
11350: LD_INT 19
11352: PUSH
11353: LD_INT 20
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 22
11361: PUSH
11362: LD_INT 23
11364: PUSH
11365: LD_INT 24
11367: PUSH
11368: LD_INT 25
11370: PUSH
11371: LD_INT 26
11373: PUSH
11374: LD_INT 27
11376: PUSH
11377: LD_INT 28
11379: PUSH
11380: LD_INT 29
11382: PUSH
11383: LD_INT 30
11385: PUSH
11386: LD_INT 31
11388: PUSH
11389: LD_INT 32
11391: PUSH
11392: LD_INT 33
11394: PUSH
11395: LD_INT 34
11397: PUSH
11398: LD_INT 36
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 101
11440: PUSH
11441: LD_INT 102
11443: PUSH
11444: LD_INT 103
11446: PUSH
11447: LD_INT 104
11449: PUSH
11450: LD_INT 105
11452: PUSH
11453: LD_INT 106
11455: PUSH
11456: LD_INT 107
11458: PUSH
11459: LD_INT 108
11461: PUSH
11462: LD_INT 109
11464: PUSH
11465: LD_INT 110
11467: PUSH
11468: LD_INT 111
11470: PUSH
11471: LD_INT 112
11473: PUSH
11474: LD_INT 113
11476: PUSH
11477: LD_INT 114
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: ST_TO_ADDR
11500: GO 12227
11502: LD_INT 16
11504: DOUBLE
11505: EQUAL
11506: IFTRUE 11510
11508: GO 11634
11510: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11511: LD_ADDR_VAR 0 1
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 4
11521: PUSH
11522: LD_INT 5
11524: PUSH
11525: LD_INT 7
11527: PUSH
11528: LD_INT 11
11530: PUSH
11531: LD_INT 12
11533: PUSH
11534: LD_INT 15
11536: PUSH
11537: LD_INT 16
11539: PUSH
11540: LD_INT 20
11542: PUSH
11543: LD_INT 21
11545: PUSH
11546: LD_INT 22
11548: PUSH
11549: LD_INT 23
11551: PUSH
11552: LD_INT 25
11554: PUSH
11555: LD_INT 26
11557: PUSH
11558: LD_INT 30
11560: PUSH
11561: LD_INT 31
11563: PUSH
11564: LD_INT 32
11566: PUSH
11567: LD_INT 33
11569: PUSH
11570: LD_INT 34
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 101
11596: PUSH
11597: LD_INT 102
11599: PUSH
11600: LD_INT 103
11602: PUSH
11603: LD_INT 106
11605: PUSH
11606: LD_INT 108
11608: PUSH
11609: LD_INT 112
11611: PUSH
11612: LD_INT 113
11614: PUSH
11615: LD_INT 114
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: ST_TO_ADDR
11632: GO 12227
11634: LD_INT 17
11636: DOUBLE
11637: EQUAL
11638: IFTRUE 11642
11640: GO 11854
11642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: LD_INT 2
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: LD_INT 4
11659: PUSH
11660: LD_INT 5
11662: PUSH
11663: LD_INT 6
11665: PUSH
11666: LD_INT 7
11668: PUSH
11669: LD_INT 8
11671: PUSH
11672: LD_INT 9
11674: PUSH
11675: LD_INT 10
11677: PUSH
11678: LD_INT 11
11680: PUSH
11681: LD_INT 12
11683: PUSH
11684: LD_INT 13
11686: PUSH
11687: LD_INT 14
11689: PUSH
11690: LD_INT 15
11692: PUSH
11693: LD_INT 16
11695: PUSH
11696: LD_INT 17
11698: PUSH
11699: LD_INT 18
11701: PUSH
11702: LD_INT 19
11704: PUSH
11705: LD_INT 20
11707: PUSH
11708: LD_INT 21
11710: PUSH
11711: LD_INT 22
11713: PUSH
11714: LD_INT 23
11716: PUSH
11717: LD_INT 24
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 26
11725: PUSH
11726: LD_INT 27
11728: PUSH
11729: LD_INT 28
11731: PUSH
11732: LD_INT 29
11734: PUSH
11735: LD_INT 30
11737: PUSH
11738: LD_INT 31
11740: PUSH
11741: LD_INT 32
11743: PUSH
11744: LD_INT 33
11746: PUSH
11747: LD_INT 34
11749: PUSH
11750: LD_INT 36
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 101
11792: PUSH
11793: LD_INT 102
11795: PUSH
11796: LD_INT 103
11798: PUSH
11799: LD_INT 104
11801: PUSH
11802: LD_INT 105
11804: PUSH
11805: LD_INT 106
11807: PUSH
11808: LD_INT 107
11810: PUSH
11811: LD_INT 108
11813: PUSH
11814: LD_INT 109
11816: PUSH
11817: LD_INT 110
11819: PUSH
11820: LD_INT 111
11822: PUSH
11823: LD_INT 112
11825: PUSH
11826: LD_INT 113
11828: PUSH
11829: LD_INT 114
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: ST_TO_ADDR
11852: GO 12227
11854: LD_INT 18
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11998
11862: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11863: LD_ADDR_VAR 0 1
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 7
11879: PUSH
11880: LD_INT 11
11882: PUSH
11883: LD_INT 12
11885: PUSH
11886: LD_INT 15
11888: PUSH
11889: LD_INT 16
11891: PUSH
11892: LD_INT 20
11894: PUSH
11895: LD_INT 21
11897: PUSH
11898: LD_INT 22
11900: PUSH
11901: LD_INT 23
11903: PUSH
11904: LD_INT 25
11906: PUSH
11907: LD_INT 26
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 31
11915: PUSH
11916: LD_INT 32
11918: PUSH
11919: LD_INT 33
11921: PUSH
11922: LD_INT 34
11924: PUSH
11925: LD_INT 35
11927: PUSH
11928: LD_INT 36
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 101
11956: PUSH
11957: LD_INT 102
11959: PUSH
11960: LD_INT 103
11962: PUSH
11963: LD_INT 106
11965: PUSH
11966: LD_INT 108
11968: PUSH
11969: LD_INT 112
11971: PUSH
11972: LD_INT 113
11974: PUSH
11975: LD_INT 114
11977: PUSH
11978: LD_INT 115
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: ST_TO_ADDR
11996: GO 12227
11998: LD_INT 19
12000: DOUBLE
12001: EQUAL
12002: IFTRUE 12006
12004: GO 12226
12006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12007: LD_ADDR_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: LD_INT 2
12017: PUSH
12018: LD_INT 3
12020: PUSH
12021: LD_INT 4
12023: PUSH
12024: LD_INT 5
12026: PUSH
12027: LD_INT 6
12029: PUSH
12030: LD_INT 7
12032: PUSH
12033: LD_INT 8
12035: PUSH
12036: LD_INT 9
12038: PUSH
12039: LD_INT 10
12041: PUSH
12042: LD_INT 11
12044: PUSH
12045: LD_INT 12
12047: PUSH
12048: LD_INT 13
12050: PUSH
12051: LD_INT 14
12053: PUSH
12054: LD_INT 15
12056: PUSH
12057: LD_INT 16
12059: PUSH
12060: LD_INT 17
12062: PUSH
12063: LD_INT 18
12065: PUSH
12066: LD_INT 19
12068: PUSH
12069: LD_INT 20
12071: PUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_INT 23
12080: PUSH
12081: LD_INT 24
12083: PUSH
12084: LD_INT 25
12086: PUSH
12087: LD_INT 26
12089: PUSH
12090: LD_INT 27
12092: PUSH
12093: LD_INT 28
12095: PUSH
12096: LD_INT 29
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 31
12104: PUSH
12105: LD_INT 32
12107: PUSH
12108: LD_INT 33
12110: PUSH
12111: LD_INT 34
12113: PUSH
12114: LD_INT 35
12116: PUSH
12117: LD_INT 36
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 101
12160: PUSH
12161: LD_INT 102
12163: PUSH
12164: LD_INT 103
12166: PUSH
12167: LD_INT 104
12169: PUSH
12170: LD_INT 105
12172: PUSH
12173: LD_INT 106
12175: PUSH
12176: LD_INT 107
12178: PUSH
12179: LD_INT 108
12181: PUSH
12182: LD_INT 109
12184: PUSH
12185: LD_INT 110
12187: PUSH
12188: LD_INT 111
12190: PUSH
12191: LD_INT 112
12193: PUSH
12194: LD_INT 113
12196: PUSH
12197: LD_INT 114
12199: PUSH
12200: LD_INT 115
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: ST_TO_ADDR
12224: GO 12227
12226: POP
// end else
12227: GO 12446
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12229: LD_ADDR_VAR 0 1
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: LD_INT 3
12242: PUSH
12243: LD_INT 4
12245: PUSH
12246: LD_INT 5
12248: PUSH
12249: LD_INT 6
12251: PUSH
12252: LD_INT 7
12254: PUSH
12255: LD_INT 8
12257: PUSH
12258: LD_INT 9
12260: PUSH
12261: LD_INT 10
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: LD_INT 12
12269: PUSH
12270: LD_INT 13
12272: PUSH
12273: LD_INT 14
12275: PUSH
12276: LD_INT 15
12278: PUSH
12279: LD_INT 16
12281: PUSH
12282: LD_INT 17
12284: PUSH
12285: LD_INT 18
12287: PUSH
12288: LD_INT 19
12290: PUSH
12291: LD_INT 20
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: LD_INT 23
12302: PUSH
12303: LD_INT 24
12305: PUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: LD_INT 27
12314: PUSH
12315: LD_INT 28
12317: PUSH
12318: LD_INT 29
12320: PUSH
12321: LD_INT 30
12323: PUSH
12324: LD_INT 31
12326: PUSH
12327: LD_INT 32
12329: PUSH
12330: LD_INT 33
12332: PUSH
12333: LD_INT 34
12335: PUSH
12336: LD_INT 35
12338: PUSH
12339: LD_INT 36
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 101
12382: PUSH
12383: LD_INT 102
12385: PUSH
12386: LD_INT 103
12388: PUSH
12389: LD_INT 104
12391: PUSH
12392: LD_INT 105
12394: PUSH
12395: LD_INT 106
12397: PUSH
12398: LD_INT 107
12400: PUSH
12401: LD_INT 108
12403: PUSH
12404: LD_INT 109
12406: PUSH
12407: LD_INT 110
12409: PUSH
12410: LD_INT 111
12412: PUSH
12413: LD_INT 112
12415: PUSH
12416: LD_INT 113
12418: PUSH
12419: LD_INT 114
12421: PUSH
12422: LD_INT 115
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: ST_TO_ADDR
// if result then
12446: LD_VAR 0 1
12450: IFFALSE 12739
// begin normal :=  ;
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: LD_STRING 
12459: ST_TO_ADDR
// hardcore :=  ;
12460: LD_ADDR_VAR 0 4
12464: PUSH
12465: LD_STRING 
12467: ST_TO_ADDR
// for i = 1 to normalCounter do
12468: LD_ADDR_VAR 0 5
12472: PUSH
12473: DOUBLE
12474: LD_INT 1
12476: DEC
12477: ST_TO_ADDR
12478: LD_EXP 20
12482: PUSH
12483: FOR_TO
12484: IFFALSE 12585
// begin tmp := 0 ;
12486: LD_ADDR_VAR 0 2
12490: PUSH
12491: LD_STRING 0
12493: ST_TO_ADDR
// if result [ 1 ] then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: IFFALSE 12567
// if result [ 1 ] [ 1 ] = i then
12504: LD_VAR 0 1
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: PUSH
12517: LD_VAR 0 5
12521: EQUAL
12522: IFFALSE 12567
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12524: LD_ADDR_VAR 0 1
12528: PUSH
12529: LD_VAR 0 1
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_VAR 0 1
12541: PUSH
12542: LD_INT 1
12544: ARRAY
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL_OW 3
12553: PPUSH
12554: CALL_OW 1
12558: ST_TO_ADDR
// tmp := 1 ;
12559: LD_ADDR_VAR 0 2
12563: PUSH
12564: LD_STRING 1
12566: ST_TO_ADDR
// end ; normal := normal & tmp ;
12567: LD_ADDR_VAR 0 3
12571: PUSH
12572: LD_VAR 0 3
12576: PUSH
12577: LD_VAR 0 2
12581: STR
12582: ST_TO_ADDR
// end ;
12583: GO 12483
12585: POP
12586: POP
// for i = 1 to hardcoreCounter do
12587: LD_ADDR_VAR 0 5
12591: PUSH
12592: DOUBLE
12593: LD_INT 1
12595: DEC
12596: ST_TO_ADDR
12597: LD_EXP 21
12601: PUSH
12602: FOR_TO
12603: IFFALSE 12708
// begin tmp := 0 ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_STRING 0
12612: ST_TO_ADDR
// if result [ 2 ] then
12613: LD_VAR 0 1
12617: PUSH
12618: LD_INT 2
12620: ARRAY
12621: IFFALSE 12690
// if result [ 2 ] [ 1 ] = 100 + i then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_INT 2
12630: ARRAY
12631: PUSH
12632: LD_INT 1
12634: ARRAY
12635: PUSH
12636: LD_INT 100
12638: PUSH
12639: LD_VAR 0 5
12643: PLUS
12644: EQUAL
12645: IFFALSE 12690
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12647: LD_ADDR_VAR 0 1
12651: PUSH
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 2
12659: PPUSH
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 2
12667: ARRAY
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 3
12676: PPUSH
12677: CALL_OW 1
12681: ST_TO_ADDR
// tmp := 1 ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_STRING 1
12689: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12690: LD_ADDR_VAR 0 4
12694: PUSH
12695: LD_VAR 0 4
12699: PUSH
12700: LD_VAR 0 2
12704: STR
12705: ST_TO_ADDR
// end ;
12706: GO 12602
12708: POP
12709: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12710: LD_STRING getStreamItemsFromMission("
12712: PUSH
12713: LD_VAR 0 3
12717: STR
12718: PUSH
12719: LD_STRING ","
12721: STR
12722: PUSH
12723: LD_VAR 0 4
12727: STR
12728: PUSH
12729: LD_STRING ")
12731: STR
12732: PPUSH
12733: CALL_OW 559
// end else
12737: GO 12746
// ToLua ( getStreamItemsFromMission("","") ) ;
12739: LD_STRING getStreamItemsFromMission("","")
12741: PPUSH
12742: CALL_OW 559
// end ;
12746: LD_VAR 0 1
12750: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12751: LD_EXP 19
12755: PUSH
12756: LD_EXP 24
12760: AND
12761: IFFALSE 12885
12763: GO 12765
12765: DISABLE
12766: LD_INT 0
12768: PPUSH
12769: PPUSH
// begin enable ;
12770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12771: LD_ADDR_VAR 0 2
12775: PUSH
12776: LD_INT 22
12778: PUSH
12779: LD_OWVAR 2
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: LD_INT 34
12793: PUSH
12794: LD_INT 7
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 34
12803: PUSH
12804: LD_INT 45
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 34
12813: PUSH
12814: LD_INT 28
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 34
12823: PUSH
12824: LD_INT 47
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// if not tmp then
12847: LD_VAR 0 2
12851: NOT
12852: IFFALSE 12856
// exit ;
12854: GO 12885
// for i in tmp do
12856: LD_ADDR_VAR 0 1
12860: PUSH
12861: LD_VAR 0 2
12865: PUSH
12866: FOR_IN
12867: IFFALSE 12883
// begin SetLives ( i , 0 ) ;
12869: LD_VAR 0 1
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 234
// end ;
12881: GO 12866
12883: POP
12884: POP
// end ;
12885: PPOPN 2
12887: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12888: LD_EXP 19
12892: PUSH
12893: LD_EXP 25
12897: AND
12898: IFFALSE 12982
12900: GO 12902
12902: DISABLE
12903: LD_INT 0
12905: PPUSH
12906: PPUSH
// begin enable ;
12907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12908: LD_ADDR_VAR 0 2
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_OWVAR 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 32
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: ST_TO_ADDR
// if not tmp then
12944: LD_VAR 0 2
12948: NOT
12949: IFFALSE 12953
// exit ;
12951: GO 12982
// for i in tmp do
12953: LD_ADDR_VAR 0 1
12957: PUSH
12958: LD_VAR 0 2
12962: PUSH
12963: FOR_IN
12964: IFFALSE 12980
// begin SetLives ( i , 0 ) ;
12966: LD_VAR 0 1
12970: PPUSH
12971: LD_INT 0
12973: PPUSH
12974: CALL_OW 234
// end ;
12978: GO 12963
12980: POP
12981: POP
// end ;
12982: PPOPN 2
12984: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12985: LD_EXP 19
12989: PUSH
12990: LD_EXP 22
12994: AND
12995: IFFALSE 13088
12997: GO 12999
12999: DISABLE
13000: LD_INT 0
13002: PPUSH
// begin enable ;
13003: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13004: LD_ADDR_VAR 0 1
13008: PUSH
13009: LD_INT 22
13011: PUSH
13012: LD_OWVAR 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 5
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 25
13036: PUSH
13037: LD_INT 9
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 25
13046: PUSH
13047: LD_INT 8
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PPUSH
13064: CALL_OW 69
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13086
// begin SetClass ( i , 1 ) ;
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 336
// end ;
13084: GO 13069
13086: POP
13087: POP
// end ;
13088: PPOPN 1
13090: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13091: LD_EXP 19
13095: PUSH
13096: LD_EXP 23
13100: AND
13101: PUSH
13102: LD_OWVAR 65
13106: PUSH
13107: LD_INT 7
13109: LESS
13110: AND
13111: IFFALSE 13125
13113: GO 13115
13115: DISABLE
// begin enable ;
13116: ENABLE
// game_speed := 7 ;
13117: LD_ADDR_OWVAR 65
13121: PUSH
13122: LD_INT 7
13124: ST_TO_ADDR
// end ;
13125: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13126: LD_EXP 19
13130: PUSH
13131: LD_EXP 26
13135: AND
13136: IFFALSE 13338
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
13144: PPUSH
13145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_INT 81
13153: PUSH
13154: LD_OWVAR 2
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 21
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 69
13181: ST_TO_ADDR
// if not tmp then
13182: LD_VAR 0 3
13186: NOT
13187: IFFALSE 13191
// exit ;
13189: GO 13338
// if tmp > 5 then
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 5
13198: GREATER
13199: IFFALSE 13211
// k := 5 else
13201: LD_ADDR_VAR 0 2
13205: PUSH
13206: LD_INT 5
13208: ST_TO_ADDR
13209: GO 13221
// k := tmp ;
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_VAR 0 3
13220: ST_TO_ADDR
// for i := 1 to k do
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: DOUBLE
13227: LD_INT 1
13229: DEC
13230: ST_TO_ADDR
13231: LD_VAR 0 2
13235: PUSH
13236: FOR_TO
13237: IFFALSE 13336
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13239: LD_VAR 0 3
13243: PUSH
13244: LD_VAR 0 1
13248: ARRAY
13249: PPUSH
13250: LD_VAR 0 1
13254: PUSH
13255: LD_INT 4
13257: MOD
13258: PUSH
13259: LD_INT 1
13261: PLUS
13262: PPUSH
13263: CALL_OW 259
13267: PUSH
13268: LD_INT 10
13270: LESS
13271: IFFALSE 13334
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13273: LD_VAR 0 3
13277: PUSH
13278: LD_VAR 0 1
13282: ARRAY
13283: PPUSH
13284: LD_VAR 0 1
13288: PUSH
13289: LD_INT 4
13291: MOD
13292: PUSH
13293: LD_INT 1
13295: PLUS
13296: PPUSH
13297: LD_VAR 0 3
13301: PUSH
13302: LD_VAR 0 1
13306: ARRAY
13307: PPUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_INT 4
13315: MOD
13316: PUSH
13317: LD_INT 1
13319: PLUS
13320: PPUSH
13321: CALL_OW 259
13325: PUSH
13326: LD_INT 1
13328: PLUS
13329: PPUSH
13330: CALL_OW 237
13334: GO 13236
13336: POP
13337: POP
// end ;
13338: PPOPN 3
13340: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13341: LD_EXP 19
13345: PUSH
13346: LD_EXP 27
13350: AND
13351: IFFALSE 13371
13353: GO 13355
13355: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13356: LD_INT 4
13358: PPUSH
13359: LD_OWVAR 2
13363: PPUSH
13364: LD_INT 0
13366: PPUSH
13367: CALL_OW 324
13371: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13372: LD_EXP 19
13376: PUSH
13377: LD_EXP 56
13381: AND
13382: IFFALSE 13402
13384: GO 13386
13386: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13387: LD_INT 19
13389: PPUSH
13390: LD_OWVAR 2
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 324
13402: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13403: LD_EXP 19
13407: PUSH
13408: LD_EXP 28
13412: AND
13413: IFFALSE 13515
13415: GO 13417
13417: DISABLE
13418: LD_INT 0
13420: PPUSH
13421: PPUSH
// begin enable ;
13422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: LD_INT 22
13430: PUSH
13431: LD_OWVAR 2
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 2
13442: PUSH
13443: LD_INT 34
13445: PUSH
13446: LD_INT 11
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 34
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: ST_TO_ADDR
// if not tmp then
13477: LD_VAR 0 2
13481: NOT
13482: IFFALSE 13486
// exit ;
13484: GO 13515
// for i in tmp do
13486: LD_ADDR_VAR 0 1
13490: PUSH
13491: LD_VAR 0 2
13495: PUSH
13496: FOR_IN
13497: IFFALSE 13513
// begin SetLives ( i , 0 ) ;
13499: LD_VAR 0 1
13503: PPUSH
13504: LD_INT 0
13506: PPUSH
13507: CALL_OW 234
// end ;
13511: GO 13496
13513: POP
13514: POP
// end ;
13515: PPOPN 2
13517: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13518: LD_EXP 19
13522: PUSH
13523: LD_EXP 29
13527: AND
13528: IFFALSE 13548
13530: GO 13532
13532: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13533: LD_INT 32
13535: PPUSH
13536: LD_OWVAR 2
13540: PPUSH
13541: LD_INT 0
13543: PPUSH
13544: CALL_OW 324
13548: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13549: LD_EXP 19
13553: PUSH
13554: LD_EXP 30
13558: AND
13559: IFFALSE 13740
13561: GO 13563
13563: DISABLE
13564: LD_INT 0
13566: PPUSH
13567: PPUSH
13568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13569: LD_ADDR_VAR 0 2
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_OWVAR 2
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 33
13588: PUSH
13589: LD_INT 3
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 69
13604: ST_TO_ADDR
// if not tmp then
13605: LD_VAR 0 2
13609: NOT
13610: IFFALSE 13614
// exit ;
13612: GO 13740
// side := 0 ;
13614: LD_ADDR_VAR 0 3
13618: PUSH
13619: LD_INT 0
13621: ST_TO_ADDR
// for i := 1 to 8 do
13622: LD_ADDR_VAR 0 1
13626: PUSH
13627: DOUBLE
13628: LD_INT 1
13630: DEC
13631: ST_TO_ADDR
13632: LD_INT 8
13634: PUSH
13635: FOR_TO
13636: IFFALSE 13684
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13638: LD_OWVAR 2
13642: PUSH
13643: LD_VAR 0 1
13647: NONEQUAL
13648: PUSH
13649: LD_OWVAR 2
13653: PPUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 81
13663: PUSH
13664: LD_INT 2
13666: EQUAL
13667: AND
13668: IFFALSE 13682
// begin side := i ;
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_VAR 0 1
13679: ST_TO_ADDR
// break ;
13680: GO 13684
// end ;
13682: GO 13635
13684: POP
13685: POP
// if not side then
13686: LD_VAR 0 3
13690: NOT
13691: IFFALSE 13695
// exit ;
13693: GO 13740
// for i := 1 to tmp do
13695: LD_ADDR_VAR 0 1
13699: PUSH
13700: DOUBLE
13701: LD_INT 1
13703: DEC
13704: ST_TO_ADDR
13705: LD_VAR 0 2
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13738
// if Prob ( 60 ) then
13713: LD_INT 60
13715: PPUSH
13716: CALL_OW 13
13720: IFFALSE 13736
// SetSide ( i , side ) ;
13722: LD_VAR 0 1
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: CALL_OW 235
13736: GO 13710
13738: POP
13739: POP
// end ;
13740: PPOPN 3
13742: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13743: LD_EXP 19
13747: PUSH
13748: LD_EXP 32
13752: AND
13753: IFFALSE 13872
13755: GO 13757
13757: DISABLE
13758: LD_INT 0
13760: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13761: LD_ADDR_VAR 0 1
13765: PUSH
13766: LD_INT 22
13768: PUSH
13769: LD_OWVAR 2
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 1
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 3
13790: PUSH
13791: LD_INT 23
13793: PUSH
13794: LD_INT 0
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: PUSH
13815: FOR_IN
13816: IFFALSE 13870
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 257
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: LD_INT 3
13836: PUSH
13837: LD_INT 4
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: IN
13846: IFFALSE 13868
// SetClass ( un , rand ( 1 , 4 ) ) ;
13848: LD_VAR 0 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_INT 4
13858: PPUSH
13859: CALL_OW 12
13863: PPUSH
13864: CALL_OW 336
13868: GO 13815
13870: POP
13871: POP
// end ;
13872: PPOPN 1
13874: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13875: LD_EXP 19
13879: PUSH
13880: LD_EXP 31
13884: AND
13885: IFFALSE 13964
13887: GO 13889
13889: DISABLE
13890: LD_INT 0
13892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13893: LD_ADDR_VAR 0 1
13897: PUSH
13898: LD_INT 22
13900: PUSH
13901: LD_OWVAR 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 21
13912: PUSH
13913: LD_INT 3
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: ST_TO_ADDR
// if not tmp then
13929: LD_VAR 0 1
13933: NOT
13934: IFFALSE 13938
// exit ;
13936: GO 13964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13938: LD_VAR 0 1
13942: PUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_VAR 0 1
13950: PPUSH
13951: CALL_OW 12
13955: ARRAY
13956: PPUSH
13957: LD_INT 100
13959: PPUSH
13960: CALL_OW 234
// end ;
13964: PPOPN 1
13966: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13967: LD_EXP 19
13971: PUSH
13972: LD_EXP 33
13976: AND
13977: IFFALSE 14075
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13985: LD_ADDR_VAR 0 1
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: LD_OWVAR 2
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 1
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 69
14020: ST_TO_ADDR
// if not tmp then
14021: LD_VAR 0 1
14025: NOT
14026: IFFALSE 14030
// exit ;
14028: GO 14075
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 1
14037: PPUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 12
14047: ARRAY
14048: PPUSH
14049: LD_INT 1
14051: PPUSH
14052: LD_INT 4
14054: PPUSH
14055: CALL_OW 12
14059: PPUSH
14060: LD_INT 3000
14062: PPUSH
14063: LD_INT 9000
14065: PPUSH
14066: CALL_OW 12
14070: PPUSH
14071: CALL_OW 492
// end ;
14075: PPOPN 1
14077: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14078: LD_EXP 19
14082: PUSH
14083: LD_EXP 34
14087: AND
14088: IFFALSE 14108
14090: GO 14092
14092: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14093: LD_INT 1
14095: PPUSH
14096: LD_OWVAR 2
14100: PPUSH
14101: LD_INT 0
14103: PPUSH
14104: CALL_OW 324
14108: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14109: LD_EXP 19
14113: PUSH
14114: LD_EXP 35
14118: AND
14119: IFFALSE 14202
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_OWVAR 2
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PPUSH
14159: CALL_OW 69
14163: ST_TO_ADDR
// if not tmp then
14164: LD_VAR 0 2
14168: NOT
14169: IFFALSE 14173
// exit ;
14171: GO 14202
// for i in tmp do
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_VAR 0 2
14182: PUSH
14183: FOR_IN
14184: IFFALSE 14200
// SetBLevel ( i , 10 ) ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_INT 10
14193: PPUSH
14194: CALL_OW 241
14198: GO 14183
14200: POP
14201: POP
// end ;
14202: PPOPN 2
14204: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14205: LD_EXP 19
14209: PUSH
14210: LD_EXP 36
14214: AND
14215: IFFALSE 14326
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14225: LD_ADDR_VAR 0 3
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 25
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 3
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14326
// un := tmp [ rand ( 1 , tmp ) ] ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// if Crawls ( un ) then
14294: LD_VAR 0 2
14298: PPUSH
14299: CALL_OW 318
14303: IFFALSE 14314
// ComWalk ( un ) ;
14305: LD_VAR 0 2
14309: PPUSH
14310: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14314: LD_VAR 0 2
14318: PPUSH
14319: LD_INT 5
14321: PPUSH
14322: CALL_OW 336
// end ;
14326: PPOPN 3
14328: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14329: LD_EXP 19
14333: PUSH
14334: LD_EXP 37
14338: AND
14339: PUSH
14340: LD_OWVAR 67
14344: PUSH
14345: LD_INT 3
14347: LESS
14348: AND
14349: IFFALSE 14368
14351: GO 14353
14353: DISABLE
// Difficulty := Difficulty + 1 ;
14354: LD_ADDR_OWVAR 67
14358: PUSH
14359: LD_OWVAR 67
14363: PUSH
14364: LD_INT 1
14366: PLUS
14367: ST_TO_ADDR
14368: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14369: LD_EXP 19
14373: PUSH
14374: LD_EXP 38
14378: AND
14379: IFFALSE 14482
14381: GO 14383
14383: DISABLE
14384: LD_INT 0
14386: PPUSH
// begin for i := 1 to 5 do
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: DOUBLE
14393: LD_INT 1
14395: DEC
14396: ST_TO_ADDR
14397: LD_INT 5
14399: PUSH
14400: FOR_TO
14401: IFFALSE 14480
// begin uc_nation := nation_nature ;
14403: LD_ADDR_OWVAR 21
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// uc_side := 0 ;
14411: LD_ADDR_OWVAR 20
14415: PUSH
14416: LD_INT 0
14418: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14419: LD_ADDR_OWVAR 29
14423: PUSH
14424: LD_INT 12
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: ST_TO_ADDR
// hc_agressivity := 20 ;
14434: LD_ADDR_OWVAR 35
14438: PUSH
14439: LD_INT 20
14441: ST_TO_ADDR
// hc_class := class_tiger ;
14442: LD_ADDR_OWVAR 28
14446: PUSH
14447: LD_INT 14
14449: ST_TO_ADDR
// hc_gallery :=  ;
14450: LD_ADDR_OWVAR 33
14454: PUSH
14455: LD_STRING 
14457: ST_TO_ADDR
// hc_name :=  ;
14458: LD_ADDR_OWVAR 26
14462: PUSH
14463: LD_STRING 
14465: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14466: CALL_OW 44
14470: PPUSH
14471: LD_INT 0
14473: PPUSH
14474: CALL_OW 51
// end ;
14478: GO 14400
14480: POP
14481: POP
// end ;
14482: PPOPN 1
14484: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14485: LD_EXP 19
14489: PUSH
14490: LD_EXP 39
14494: AND
14495: IFFALSE 14504
14497: GO 14499
14499: DISABLE
// StreamSibBomb ;
14500: CALL 14505 0 0
14504: END
// export function StreamSibBomb ; var i , x , y ; begin
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
// result := false ;
14511: LD_ADDR_VAR 0 1
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// for i := 1 to 16 do
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: DOUBLE
14525: LD_INT 1
14527: DEC
14528: ST_TO_ADDR
14529: LD_INT 16
14531: PUSH
14532: FOR_TO
14533: IFFALSE 14732
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: LD_INT 10
14542: PUSH
14543: LD_INT 20
14545: PUSH
14546: LD_INT 30
14548: PUSH
14549: LD_INT 40
14551: PUSH
14552: LD_INT 50
14554: PUSH
14555: LD_INT 60
14557: PUSH
14558: LD_INT 70
14560: PUSH
14561: LD_INT 80
14563: PUSH
14564: LD_INT 90
14566: PUSH
14567: LD_INT 100
14569: PUSH
14570: LD_INT 110
14572: PUSH
14573: LD_INT 120
14575: PUSH
14576: LD_INT 130
14578: PUSH
14579: LD_INT 140
14581: PUSH
14582: LD_INT 150
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 1
14604: PPUSH
14605: LD_INT 15
14607: PPUSH
14608: CALL_OW 12
14612: ARRAY
14613: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14614: LD_ADDR_VAR 0 4
14618: PUSH
14619: LD_INT 10
14621: PUSH
14622: LD_INT 20
14624: PUSH
14625: LD_INT 30
14627: PUSH
14628: LD_INT 40
14630: PUSH
14631: LD_INT 50
14633: PUSH
14634: LD_INT 60
14636: PUSH
14637: LD_INT 70
14639: PUSH
14640: LD_INT 80
14642: PUSH
14643: LD_INT 90
14645: PUSH
14646: LD_INT 100
14648: PUSH
14649: LD_INT 110
14651: PUSH
14652: LD_INT 120
14654: PUSH
14655: LD_INT 130
14657: PUSH
14658: LD_INT 140
14660: PUSH
14661: LD_INT 150
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 1
14683: PPUSH
14684: LD_INT 15
14686: PPUSH
14687: CALL_OW 12
14691: ARRAY
14692: ST_TO_ADDR
// if ValidHex ( x , y ) then
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_VAR 0 4
14702: PPUSH
14703: CALL_OW 488
14707: IFFALSE 14730
// begin result := [ x , y ] ;
14709: LD_ADDR_VAR 0 1
14713: PUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: ST_TO_ADDR
// break ;
14728: GO 14732
// end ; end ;
14730: GO 14532
14732: POP
14733: POP
// if result then
14734: LD_VAR 0 1
14738: IFFALSE 14798
// begin ToLua ( playSibBomb() ) ;
14740: LD_STRING playSibBomb()
14742: PPUSH
14743: CALL_OW 559
// wait ( 0 0$14 ) ;
14747: LD_INT 490
14749: PPUSH
14750: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14754: LD_VAR 0 1
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PPUSH
14763: LD_VAR 0 1
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: PPUSH
14772: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: ARRAY
14784: PPUSH
14785: LD_VAR 0 1
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: PPUSH
14794: CALL_OW 429
// end ; end ;
14798: LD_VAR 0 1
14802: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14803: LD_EXP 19
14807: PUSH
14808: LD_EXP 41
14812: AND
14813: IFFALSE 14825
14815: GO 14817
14817: DISABLE
// YouLost (  ) ;
14818: LD_STRING 
14820: PPUSH
14821: CALL_OW 104
14825: END
// every 0 0$1 trigger StreamModeActive and sFog do
14826: LD_EXP 19
14830: PUSH
14831: LD_EXP 40
14835: AND
14836: IFFALSE 14850
14838: GO 14840
14840: DISABLE
// FogOff ( your_side ) ;
14841: LD_OWVAR 2
14845: PPUSH
14846: CALL_OW 344
14850: END
// every 0 0$1 trigger StreamModeActive and sSun do
14851: LD_EXP 19
14855: PUSH
14856: LD_EXP 42
14860: AND
14861: IFFALSE 14889
14863: GO 14865
14865: DISABLE
// begin solar_recharge_percent := 0 ;
14866: LD_ADDR_OWVAR 79
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14874: LD_INT 10500
14876: PPUSH
14877: CALL_OW 67
// solar_recharge_percent := 100 ;
14881: LD_ADDR_OWVAR 79
14885: PUSH
14886: LD_INT 100
14888: ST_TO_ADDR
// end ;
14889: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14890: LD_EXP 19
14894: PUSH
14895: LD_EXP 43
14899: AND
14900: IFFALSE 15139
14902: GO 14904
14904: DISABLE
14905: LD_INT 0
14907: PPUSH
14908: PPUSH
14909: PPUSH
// begin tmp := [ ] ;
14910: LD_ADDR_VAR 0 3
14914: PUSH
14915: EMPTY
14916: ST_TO_ADDR
// for i := 1 to 6 do
14917: LD_ADDR_VAR 0 1
14921: PUSH
14922: DOUBLE
14923: LD_INT 1
14925: DEC
14926: ST_TO_ADDR
14927: LD_INT 6
14929: PUSH
14930: FOR_TO
14931: IFFALSE 15036
// begin uc_nation := nation_nature ;
14933: LD_ADDR_OWVAR 21
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// uc_side := 0 ;
14941: LD_ADDR_OWVAR 20
14945: PUSH
14946: LD_INT 0
14948: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14949: LD_ADDR_OWVAR 29
14953: PUSH
14954: LD_INT 12
14956: PUSH
14957: LD_INT 12
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
// hc_agressivity := 20 ;
14964: LD_ADDR_OWVAR 35
14968: PUSH
14969: LD_INT 20
14971: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14972: LD_ADDR_OWVAR 28
14976: PUSH
14977: LD_INT 17
14979: ST_TO_ADDR
// hc_gallery :=  ;
14980: LD_ADDR_OWVAR 33
14984: PUSH
14985: LD_STRING 
14987: ST_TO_ADDR
// hc_name :=  ;
14988: LD_ADDR_OWVAR 26
14992: PUSH
14993: LD_STRING 
14995: ST_TO_ADDR
// un := CreateHuman ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: CALL_OW 44
15005: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15006: LD_VAR 0 2
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 51
// tmp := tmp ^ un ;
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_VAR 0 3
15027: PUSH
15028: LD_VAR 0 2
15032: ADD
15033: ST_TO_ADDR
// end ;
15034: GO 14930
15036: POP
15037: POP
// repeat wait ( 0 0$1 ) ;
15038: LD_INT 35
15040: PPUSH
15041: CALL_OW 67
// for un in tmp do
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_VAR 0 3
15054: PUSH
15055: FOR_IN
15056: IFFALSE 15130
// begin if IsDead ( un ) then
15058: LD_VAR 0 2
15062: PPUSH
15063: CALL_OW 301
15067: IFFALSE 15087
// begin tmp := tmp diff un ;
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_VAR 0 2
15083: DIFF
15084: ST_TO_ADDR
// continue ;
15085: GO 15055
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 0
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PPUSH
15114: LD_VAR 0 2
15118: PPUSH
15119: CALL_OW 74
15123: PPUSH
15124: CALL_OW 115
// end ;
15128: GO 15055
15130: POP
15131: POP
// until not tmp ;
15132: LD_VAR 0 3
15136: NOT
15137: IFFALSE 15038
// end ;
15139: PPOPN 3
15141: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15142: LD_EXP 19
15146: PUSH
15147: LD_EXP 44
15151: AND
15152: IFFALSE 15206
15154: GO 15156
15156: DISABLE
// begin ToLua ( displayTroll(); ) ;
15157: LD_STRING displayTroll();
15159: PPUSH
15160: CALL_OW 559
// wait ( 3 3$00 ) ;
15164: LD_INT 6300
15166: PPUSH
15167: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15171: LD_STRING hideTroll();
15173: PPUSH
15174: CALL_OW 559
// wait ( 1 1$00 ) ;
15178: LD_INT 2100
15180: PPUSH
15181: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15185: LD_STRING displayTroll();
15187: PPUSH
15188: CALL_OW 559
// wait ( 1 1$00 ) ;
15192: LD_INT 2100
15194: PPUSH
15195: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15199: LD_STRING hideTroll();
15201: PPUSH
15202: CALL_OW 559
// end ;
15206: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15207: LD_EXP 19
15211: PUSH
15212: LD_EXP 45
15216: AND
15217: IFFALSE 15280
15219: GO 15221
15221: DISABLE
15222: LD_INT 0
15224: PPUSH
// begin p := 0 ;
15225: LD_ADDR_VAR 0 1
15229: PUSH
15230: LD_INT 0
15232: ST_TO_ADDR
// repeat game_speed := 1 ;
15233: LD_ADDR_OWVAR 65
15237: PUSH
15238: LD_INT 1
15240: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15241: LD_INT 35
15243: PPUSH
15244: CALL_OW 67
// p := p + 1 ;
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_VAR 0 1
15257: PUSH
15258: LD_INT 1
15260: PLUS
15261: ST_TO_ADDR
// until p >= 60 ;
15262: LD_VAR 0 1
15266: PUSH
15267: LD_INT 60
15269: GREATEREQUAL
15270: IFFALSE 15233
// game_speed := 4 ;
15272: LD_ADDR_OWVAR 65
15276: PUSH
15277: LD_INT 4
15279: ST_TO_ADDR
// end ;
15280: PPOPN 1
15282: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15283: LD_EXP 19
15287: PUSH
15288: LD_EXP 46
15292: AND
15293: IFFALSE 15439
15295: GO 15297
15297: DISABLE
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15302: LD_ADDR_VAR 0 1
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_OWVAR 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 30
15324: PUSH
15325: LD_INT 0
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PPUSH
15351: CALL_OW 69
15355: ST_TO_ADDR
// if not depot then
15356: LD_VAR 0 1
15360: NOT
15361: IFFALSE 15365
// exit ;
15363: GO 15439
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15365: LD_ADDR_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: PUSH
15375: LD_INT 1
15377: PPUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 12
15387: ARRAY
15388: PPUSH
15389: CALL_OW 274
15393: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15394: LD_VAR 0 2
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 0
15404: PPUSH
15405: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_INT 2
15416: PPUSH
15417: LD_INT 0
15419: PPUSH
15420: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15424: LD_VAR 0 2
15428: PPUSH
15429: LD_INT 3
15431: PPUSH
15432: LD_INT 0
15434: PPUSH
15435: CALL_OW 277
// end ;
15439: PPOPN 2
15441: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15442: LD_EXP 19
15446: PUSH
15447: LD_EXP 47
15451: AND
15452: IFFALSE 15549
15454: GO 15456
15456: DISABLE
15457: LD_INT 0
15459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15460: LD_ADDR_VAR 0 1
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_OWVAR 2
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 23
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: PPUSH
15509: CALL_OW 69
15513: ST_TO_ADDR
// if not tmp then
15514: LD_VAR 0 1
15518: NOT
15519: IFFALSE 15523
// exit ;
15521: GO 15549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15523: LD_VAR 0 1
15527: PUSH
15528: LD_INT 1
15530: PPUSH
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 12
15540: ARRAY
15541: PPUSH
15542: LD_INT 200
15544: PPUSH
15545: CALL_OW 234
// end ;
15549: PPOPN 1
15551: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15552: LD_EXP 19
15556: PUSH
15557: LD_EXP 48
15561: AND
15562: IFFALSE 15641
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: LD_INT 22
15577: PUSH
15578: LD_OWVAR 2
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 69
15605: ST_TO_ADDR
// if not tmp then
15606: LD_VAR 0 1
15610: NOT
15611: IFFALSE 15615
// exit ;
15613: GO 15641
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 12
15632: ARRAY
15633: PPUSH
15634: LD_INT 60
15636: PPUSH
15637: CALL_OW 234
// end ;
15641: PPOPN 1
15643: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15644: LD_EXP 19
15648: PUSH
15649: LD_EXP 49
15653: AND
15654: IFFALSE 15753
15656: GO 15658
15658: DISABLE
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
// begin enable ;
15663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_OWVAR 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 61
15683: PUSH
15684: EMPTY
15685: LIST
15686: PUSH
15687: LD_INT 33
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// if not tmp then
15707: LD_VAR 0 1
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15753
// for i in tmp do
15716: LD_ADDR_VAR 0 2
15720: PUSH
15721: LD_VAR 0 1
15725: PUSH
15726: FOR_IN
15727: IFFALSE 15751
// if IsControledBy ( i ) then
15729: LD_VAR 0 2
15733: PPUSH
15734: CALL_OW 312
15738: IFFALSE 15749
// ComUnlink ( i ) ;
15740: LD_VAR 0 2
15744: PPUSH
15745: CALL_OW 136
15749: GO 15726
15751: POP
15752: POP
// end ;
15753: PPOPN 2
15755: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15756: LD_EXP 19
15760: PUSH
15761: LD_EXP 50
15765: AND
15766: IFFALSE 15906
15768: GO 15770
15770: DISABLE
15771: LD_INT 0
15773: PPUSH
15774: PPUSH
// begin ToLua ( displayPowell(); ) ;
15775: LD_STRING displayPowell();
15777: PPUSH
15778: CALL_OW 559
// uc_side := 0 ;
15782: LD_ADDR_OWVAR 20
15786: PUSH
15787: LD_INT 0
15789: ST_TO_ADDR
// uc_nation := 2 ;
15790: LD_ADDR_OWVAR 21
15794: PUSH
15795: LD_INT 2
15797: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15798: LD_ADDR_OWVAR 37
15802: PUSH
15803: LD_INT 14
15805: ST_TO_ADDR
// vc_engine := engine_siberite ;
15806: LD_ADDR_OWVAR 39
15810: PUSH
15811: LD_INT 3
15813: ST_TO_ADDR
// vc_control := control_apeman ;
15814: LD_ADDR_OWVAR 38
15818: PUSH
15819: LD_INT 5
15821: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15822: LD_ADDR_OWVAR 40
15826: PUSH
15827: LD_INT 29
15829: ST_TO_ADDR
// un := CreateVehicle ;
15830: LD_ADDR_VAR 0 2
15834: PUSH
15835: CALL_OW 45
15839: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15840: LD_VAR 0 2
15844: PPUSH
15845: LD_INT 1
15847: PPUSH
15848: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15852: LD_INT 35
15854: PPUSH
15855: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15859: LD_VAR 0 2
15863: PPUSH
15864: LD_INT 22
15866: PUSH
15867: LD_OWVAR 2
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: PPUSH
15881: LD_VAR 0 2
15885: PPUSH
15886: CALL_OW 74
15890: PPUSH
15891: CALL_OW 115
// until IsDead ( un ) ;
15895: LD_VAR 0 2
15899: PPUSH
15900: CALL_OW 301
15904: IFFALSE 15852
// end ;
15906: PPOPN 2
15908: END
// every 0 0$1 trigger StreamModeActive and sStu do
15909: LD_EXP 19
15913: PUSH
15914: LD_EXP 58
15918: AND
15919: IFFALSE 15935
15921: GO 15923
15923: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15924: LD_STRING displayStucuk();
15926: PPUSH
15927: CALL_OW 559
// ResetFog ;
15931: CALL_OW 335
// end ;
15935: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15936: LD_EXP 19
15940: PUSH
15941: LD_EXP 51
15945: AND
15946: IFFALSE 16087
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15955: LD_ADDR_VAR 0 2
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 2
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16087
// un := tmp [ rand ( 1 , tmp ) ] ;
16000: LD_ADDR_VAR 0 1
16004: PUSH
16005: LD_VAR 0 2
16009: PUSH
16010: LD_INT 1
16012: PPUSH
16013: LD_VAR 0 2
16017: PPUSH
16018: CALL_OW 12
16022: ARRAY
16023: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 0
16031: PPUSH
16032: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16036: LD_VAR 0 1
16040: PPUSH
16041: LD_OWVAR 3
16045: PUSH
16046: LD_VAR 0 1
16050: DIFF
16051: PPUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 74
16061: PPUSH
16062: CALL_OW 115
// wait ( 0 0$20 ) ;
16066: LD_INT 700
16068: PPUSH
16069: CALL_OW 67
// SetSide ( un , your_side ) ;
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_OWVAR 2
16082: PPUSH
16083: CALL_OW 235
// end ;
16087: PPOPN 2
16089: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16090: LD_EXP 19
16094: PUSH
16095: LD_EXP 52
16099: AND
16100: IFFALSE 16206
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: LD_INT 22
16115: PUSH
16116: LD_OWVAR 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 2
16127: PUSH
16128: LD_INT 30
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: ST_TO_ADDR
// if not depot then
16162: LD_VAR 0 1
16166: NOT
16167: IFFALSE 16171
// exit ;
16169: GO 16206
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16171: LD_VAR 0 1
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 250
16184: PPUSH
16185: LD_VAR 0 1
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: PPUSH
16194: CALL_OW 251
16198: PPUSH
16199: LD_INT 70
16201: PPUSH
16202: CALL_OW 495
// end ;
16206: PPOPN 1
16208: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16209: LD_EXP 19
16213: PUSH
16214: LD_EXP 53
16218: AND
16219: IFFALSE 16430
16221: GO 16223
16223: DISABLE
16224: LD_INT 0
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16231: LD_ADDR_VAR 0 5
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_OWVAR 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: ST_TO_ADDR
// if not tmp then
16267: LD_VAR 0 5
16271: NOT
16272: IFFALSE 16276
// exit ;
16274: GO 16430
// for i in tmp do
16276: LD_ADDR_VAR 0 1
16280: PUSH
16281: LD_VAR 0 5
16285: PUSH
16286: FOR_IN
16287: IFFALSE 16428
// begin d := rand ( 0 , 5 ) ;
16289: LD_ADDR_VAR 0 4
16293: PUSH
16294: LD_INT 0
16296: PPUSH
16297: LD_INT 5
16299: PPUSH
16300: CALL_OW 12
16304: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16305: LD_ADDR_VAR 0 2
16309: PUSH
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 250
16319: PPUSH
16320: LD_VAR 0 4
16324: PPUSH
16325: LD_INT 3
16327: PPUSH
16328: LD_INT 12
16330: PPUSH
16331: CALL_OW 12
16335: PPUSH
16336: CALL_OW 272
16340: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16341: LD_ADDR_VAR 0 3
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 251
16355: PPUSH
16356: LD_VAR 0 4
16360: PPUSH
16361: LD_INT 3
16363: PPUSH
16364: LD_INT 12
16366: PPUSH
16367: CALL_OW 12
16371: PPUSH
16372: CALL_OW 273
16376: ST_TO_ADDR
// if ValidHex ( x , y ) then
16377: LD_VAR 0 2
16381: PPUSH
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 488
16391: IFFALSE 16426
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: LD_INT 3
16410: PPUSH
16411: LD_INT 6
16413: PPUSH
16414: CALL_OW 12
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 483
// end ;
16426: GO 16286
16428: POP
16429: POP
// end ;
16430: PPOPN 5
16432: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16433: LD_EXP 19
16437: PUSH
16438: LD_EXP 54
16442: AND
16443: IFFALSE 16537
16445: GO 16447
16447: DISABLE
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: LD_INT 22
16459: PUSH
16460: LD_OWVAR 2
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 32
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 21
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// if not tmp then
16499: LD_VAR 0 2
16503: NOT
16504: IFFALSE 16508
// exit ;
16506: GO 16537
// for i in tmp do
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16535
// SetFuel ( i , 0 ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 0
16528: PPUSH
16529: CALL_OW 240
16533: GO 16518
16535: POP
16536: POP
// end ;
16537: PPOPN 2
16539: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16540: LD_EXP 19
16544: PUSH
16545: LD_EXP 55
16549: AND
16550: IFFALSE 16616
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: LD_INT 22
16565: PUSH
16566: LD_OWVAR 2
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 30
16577: PUSH
16578: LD_INT 29
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: ST_TO_ADDR
// if not tmp then
16594: LD_VAR 0 1
16598: NOT
16599: IFFALSE 16603
// exit ;
16601: GO 16616
// DestroyUnit ( tmp [ 1 ] ) ;
16603: LD_VAR 0 1
16607: PUSH
16608: LD_INT 1
16610: ARRAY
16611: PPUSH
16612: CALL_OW 65
// end ;
16616: PPOPN 1
16618: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16619: LD_EXP 19
16623: PUSH
16624: LD_EXP 57
16628: AND
16629: IFFALSE 16758
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
// begin uc_side := 0 ;
16637: LD_ADDR_OWVAR 20
16641: PUSH
16642: LD_INT 0
16644: ST_TO_ADDR
// uc_nation := nation_arabian ;
16645: LD_ADDR_OWVAR 21
16649: PUSH
16650: LD_INT 2
16652: ST_TO_ADDR
// hc_gallery :=  ;
16653: LD_ADDR_OWVAR 33
16657: PUSH
16658: LD_STRING 
16660: ST_TO_ADDR
// hc_name :=  ;
16661: LD_ADDR_OWVAR 26
16665: PUSH
16666: LD_STRING 
16668: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16669: LD_INT 1
16671: PPUSH
16672: LD_INT 11
16674: PPUSH
16675: LD_INT 10
16677: PPUSH
16678: CALL_OW 380
// un := CreateHuman ;
16682: LD_ADDR_VAR 0 1
16686: PUSH
16687: CALL_OW 44
16691: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16704: LD_INT 35
16706: PPUSH
16707: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16711: LD_VAR 0 1
16715: PPUSH
16716: LD_INT 22
16718: PUSH
16719: LD_OWVAR 2
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PPUSH
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 74
16742: PPUSH
16743: CALL_OW 115
// until IsDead ( un ) ;
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 301
16756: IFFALSE 16704
// end ;
16758: PPOPN 1
16760: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16761: LD_EXP 19
16765: PUSH
16766: LD_EXP 59
16770: AND
16771: IFFALSE 16783
16773: GO 16775
16775: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16776: LD_STRING earthquake(getX(game), 0, 32)
16778: PPUSH
16779: CALL_OW 559
16783: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16784: LD_EXP 19
16788: PUSH
16789: LD_EXP 60
16793: AND
16794: IFFALSE 16885
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin enable ;
16802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_OWVAR 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 33
16832: PUSH
16833: LD_INT 3
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 69
16849: ST_TO_ADDR
// if not tmp then
16850: LD_VAR 0 1
16854: NOT
16855: IFFALSE 16859
// exit ;
16857: GO 16885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16859: LD_VAR 0 1
16863: PUSH
16864: LD_INT 1
16866: PPUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 12
16876: ARRAY
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 234
// end ;
16885: PPOPN 1
16887: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16888: LD_EXP 19
16892: PUSH
16893: LD_EXP 61
16897: AND
16898: IFFALSE 17039
16900: GO 16902
16902: DISABLE
16903: LD_INT 0
16905: PPUSH
16906: PPUSH
16907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16908: LD_ADDR_VAR 0 3
16912: PUSH
16913: LD_INT 22
16915: PUSH
16916: LD_OWVAR 2
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 25
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: ST_TO_ADDR
// if not tmp then
16944: LD_VAR 0 3
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 17039
// un := tmp [ rand ( 1 , tmp ) ] ;
16953: LD_ADDR_VAR 0 2
16957: PUSH
16958: LD_VAR 0 3
16962: PUSH
16963: LD_INT 1
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: CALL_OW 12
16975: ARRAY
16976: ST_TO_ADDR
// if Crawls ( un ) then
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 318
16986: IFFALSE 16997
// ComWalk ( un ) ;
16988: LD_VAR 0 2
16992: PPUSH
16993: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16997: LD_VAR 0 2
17001: PPUSH
17002: LD_INT 9
17004: PPUSH
17005: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17009: LD_INT 28
17011: PPUSH
17012: LD_OWVAR 2
17016: PPUSH
17017: LD_INT 2
17019: PPUSH
17020: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17024: LD_INT 29
17026: PPUSH
17027: LD_OWVAR 2
17031: PPUSH
17032: LD_INT 2
17034: PPUSH
17035: CALL_OW 322
// end ;
17039: PPOPN 3
17041: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17042: LD_EXP 19
17046: PUSH
17047: LD_EXP 62
17051: AND
17052: IFFALSE 17163
17054: GO 17056
17056: DISABLE
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
17061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17062: LD_ADDR_VAR 0 3
17066: PUSH
17067: LD_INT 22
17069: PUSH
17070: LD_OWVAR 2
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 25
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: ST_TO_ADDR
// if not tmp then
17098: LD_VAR 0 3
17102: NOT
17103: IFFALSE 17107
// exit ;
17105: GO 17163
// un := tmp [ rand ( 1 , tmp ) ] ;
17107: LD_ADDR_VAR 0 2
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 1
17119: PPUSH
17120: LD_VAR 0 3
17124: PPUSH
17125: CALL_OW 12
17129: ARRAY
17130: ST_TO_ADDR
// if Crawls ( un ) then
17131: LD_VAR 0 2
17135: PPUSH
17136: CALL_OW 318
17140: IFFALSE 17151
// ComWalk ( un ) ;
17142: LD_VAR 0 2
17146: PPUSH
17147: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17151: LD_VAR 0 2
17155: PPUSH
17156: LD_INT 8
17158: PPUSH
17159: CALL_OW 336
// end ;
17163: PPOPN 3
17165: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17166: LD_EXP 19
17170: PUSH
17171: LD_EXP 63
17175: AND
17176: IFFALSE 17320
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
17184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_INT 22
17192: PUSH
17193: LD_OWVAR 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: LD_INT 34
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 34
17227: PUSH
17228: LD_INT 51
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 34
17237: PUSH
17238: LD_INT 32
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if not tmp then
17261: LD_VAR 0 2
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17320
// for i in tmp do
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: LD_VAR 0 2
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17318
// if GetCargo ( i , mat_artifact ) = 0 then
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 4
17290: PPUSH
17291: CALL_OW 289
17295: PUSH
17296: LD_INT 0
17298: EQUAL
17299: IFFALSE 17316
// SetCargo ( i , mat_siberit , 100 ) ;
17301: LD_VAR 0 1
17305: PPUSH
17306: LD_INT 3
17308: PPUSH
17309: LD_INT 100
17311: PPUSH
17312: CALL_OW 290
17316: GO 17280
17318: POP
17319: POP
// end ;
17320: PPOPN 2
17322: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17323: LD_EXP 19
17327: PUSH
17328: LD_EXP 64
17332: AND
17333: IFFALSE 17516
17335: GO 17337
17337: DISABLE
17338: LD_INT 0
17340: PPUSH
17341: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_OWVAR 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 69
17363: ST_TO_ADDR
// if not tmp then
17364: LD_VAR 0 2
17368: NOT
17369: IFFALSE 17373
// exit ;
17371: GO 17516
// for i := 1 to 2 do
17373: LD_ADDR_VAR 0 1
17377: PUSH
17378: DOUBLE
17379: LD_INT 1
17381: DEC
17382: ST_TO_ADDR
17383: LD_INT 2
17385: PUSH
17386: FOR_TO
17387: IFFALSE 17514
// begin uc_side := your_side ;
17389: LD_ADDR_OWVAR 20
17393: PUSH
17394: LD_OWVAR 2
17398: ST_TO_ADDR
// uc_nation := nation_american ;
17399: LD_ADDR_OWVAR 21
17403: PUSH
17404: LD_INT 1
17406: ST_TO_ADDR
// vc_chassis := us_morphling ;
17407: LD_ADDR_OWVAR 37
17411: PUSH
17412: LD_INT 5
17414: ST_TO_ADDR
// vc_engine := engine_siberite ;
17415: LD_ADDR_OWVAR 39
17419: PUSH
17420: LD_INT 3
17422: ST_TO_ADDR
// vc_control := control_computer ;
17423: LD_ADDR_OWVAR 38
17427: PUSH
17428: LD_INT 3
17430: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17431: LD_ADDR_OWVAR 40
17435: PUSH
17436: LD_INT 10
17438: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17439: LD_VAR 0 2
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PPUSH
17448: CALL_OW 310
17452: NOT
17453: IFFALSE 17500
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17455: CALL_OW 45
17459: PPUSH
17460: LD_VAR 0 2
17464: PUSH
17465: LD_INT 1
17467: ARRAY
17468: PPUSH
17469: CALL_OW 250
17473: PPUSH
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 1
17481: ARRAY
17482: PPUSH
17483: CALL_OW 251
17487: PPUSH
17488: LD_INT 12
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: CALL_OW 50
17498: GO 17512
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17500: CALL_OW 45
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: CALL_OW 51
// end ;
17512: GO 17386
17514: POP
17515: POP
// end ;
17516: PPOPN 2
17518: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17519: LD_EXP 19
17523: PUSH
17524: LD_EXP 65
17528: AND
17529: IFFALSE 17751
17531: GO 17533
17533: DISABLE
17534: LD_INT 0
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17542: LD_ADDR_VAR 0 6
17546: PUSH
17547: LD_INT 22
17549: PUSH
17550: LD_OWVAR 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 21
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: LD_INT 23
17574: PUSH
17575: LD_INT 0
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 6
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17751
// s1 := rand ( 1 , 4 ) ;
17605: LD_ADDR_VAR 0 2
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_INT 4
17615: PPUSH
17616: CALL_OW 12
17620: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17621: LD_ADDR_VAR 0 4
17625: PUSH
17626: LD_VAR 0 6
17630: PUSH
17631: LD_INT 1
17633: ARRAY
17634: PPUSH
17635: LD_VAR 0 2
17639: PPUSH
17640: CALL_OW 259
17644: ST_TO_ADDR
// if s1 = 1 then
17645: LD_VAR 0 2
17649: PUSH
17650: LD_INT 1
17652: EQUAL
17653: IFFALSE 17673
// s2 := rand ( 2 , 4 ) else
17655: LD_ADDR_VAR 0 3
17659: PUSH
17660: LD_INT 2
17662: PPUSH
17663: LD_INT 4
17665: PPUSH
17666: CALL_OW 12
17670: ST_TO_ADDR
17671: GO 17681
// s2 := 1 ;
17673: LD_ADDR_VAR 0 3
17677: PUSH
17678: LD_INT 1
17680: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17681: LD_ADDR_VAR 0 5
17685: PUSH
17686: LD_VAR 0 6
17690: PUSH
17691: LD_INT 1
17693: ARRAY
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: CALL_OW 259
17704: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17705: LD_VAR 0 6
17709: PUSH
17710: LD_INT 1
17712: ARRAY
17713: PPUSH
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_VAR 0 5
17723: PPUSH
17724: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17728: LD_VAR 0 6
17732: PUSH
17733: LD_INT 1
17735: ARRAY
17736: PPUSH
17737: LD_VAR 0 3
17741: PPUSH
17742: LD_VAR 0 4
17746: PPUSH
17747: CALL_OW 237
// end ;
17751: PPOPN 6
17753: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17754: LD_EXP 19
17758: PUSH
17759: LD_EXP 66
17763: AND
17764: IFFALSE 17843
17766: GO 17768
17768: DISABLE
17769: LD_INT 0
17771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17772: LD_ADDR_VAR 0 1
17776: PUSH
17777: LD_INT 22
17779: PUSH
17780: LD_OWVAR 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 30
17791: PUSH
17792: LD_INT 3
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: ST_TO_ADDR
// if not tmp then
17808: LD_VAR 0 1
17812: NOT
17813: IFFALSE 17817
// exit ;
17815: GO 17843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17817: LD_VAR 0 1
17821: PUSH
17822: LD_INT 1
17824: PPUSH
17825: LD_VAR 0 1
17829: PPUSH
17830: CALL_OW 12
17834: ARRAY
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 234
// end ;
17843: PPOPN 1
17845: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17846: LD_EXP 19
17850: PUSH
17851: LD_EXP 67
17855: AND
17856: IFFALSE 17968
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
17864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17865: LD_ADDR_VAR 0 2
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_OWVAR 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 2
17884: PUSH
17885: LD_INT 30
17887: PUSH
17888: LD_INT 27
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 30
17897: PUSH
17898: LD_INT 26
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 30
17907: PUSH
17908: LD_INT 28
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: ST_TO_ADDR
// if not tmp then
17930: LD_VAR 0 2
17934: NOT
17935: IFFALSE 17939
// exit ;
17937: GO 17968
// for i in tmp do
17939: LD_ADDR_VAR 0 1
17943: PUSH
17944: LD_VAR 0 2
17948: PUSH
17949: FOR_IN
17950: IFFALSE 17966
// SetLives ( i , 1 ) ;
17952: LD_VAR 0 1
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 234
17964: GO 17949
17966: POP
17967: POP
// end ;
17968: PPOPN 2
17970: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17971: LD_EXP 19
17975: PUSH
17976: LD_EXP 68
17980: AND
17981: IFFALSE 18255
17983: GO 17985
17985: DISABLE
17986: LD_INT 0
17988: PPUSH
17989: PPUSH
17990: PPUSH
// begin i := rand ( 1 , 7 ) ;
17991: LD_ADDR_VAR 0 1
17995: PUSH
17996: LD_INT 1
17998: PPUSH
17999: LD_INT 7
18001: PPUSH
18002: CALL_OW 12
18006: ST_TO_ADDR
// case i of 1 :
18007: LD_VAR 0 1
18011: PUSH
18012: LD_INT 1
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18020
18018: GO 18030
18020: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18021: LD_STRING earthquake(getX(game), 0, 32)
18023: PPUSH
18024: CALL_OW 559
18028: GO 18255
18030: LD_INT 2
18032: DOUBLE
18033: EQUAL
18034: IFTRUE 18038
18036: GO 18052
18038: POP
// begin ToLua ( displayStucuk(); ) ;
18039: LD_STRING displayStucuk();
18041: PPUSH
18042: CALL_OW 559
// ResetFog ;
18046: CALL_OW 335
// end ; 3 :
18050: GO 18255
18052: LD_INT 3
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18164
18060: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 25
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// if not tmp then
18097: LD_VAR 0 2
18101: NOT
18102: IFFALSE 18106
// exit ;
18104: GO 18255
// un := tmp [ rand ( 1 , tmp ) ] ;
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: LD_VAR 0 2
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// if Crawls ( un ) then
18130: LD_VAR 0 3
18134: PPUSH
18135: CALL_OW 318
18139: IFFALSE 18150
// ComWalk ( un ) ;
18141: LD_VAR 0 3
18145: PPUSH
18146: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18150: LD_VAR 0 3
18154: PPUSH
18155: LD_INT 8
18157: PPUSH
18158: CALL_OW 336
// end ; 4 :
18162: GO 18255
18164: LD_INT 4
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18172
18170: GO 18233
18172: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18173: LD_ADDR_VAR 0 2
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_OWVAR 2
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 30
18192: PUSH
18193: LD_INT 29
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PPUSH
18204: CALL_OW 69
18208: ST_TO_ADDR
// if not tmp then
18209: LD_VAR 0 2
18213: NOT
18214: IFFALSE 18218
// exit ;
18216: GO 18255
// DestroyUnit ( tmp [ 1 ] ) ;
18218: LD_VAR 0 2
18222: PUSH
18223: LD_INT 1
18225: ARRAY
18226: PPUSH
18227: CALL_OW 65
// end ; 5 .. 7 :
18231: GO 18255
18233: LD_INT 5
18235: DOUBLE
18236: GREATEREQUAL
18237: IFFALSE 18245
18239: LD_INT 7
18241: DOUBLE
18242: LESSEQUAL
18243: IFTRUE 18247
18245: GO 18254
18247: POP
// StreamSibBomb ; end ;
18248: CALL 14505 0 0
18252: GO 18255
18254: POP
// end ;
18255: PPOPN 3
18257: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18258: LD_EXP 19
18262: PUSH
18263: LD_EXP 69
18267: AND
18268: IFFALSE 18424
18270: GO 18272
18272: DISABLE
18273: LD_INT 0
18275: PPUSH
18276: PPUSH
18277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_INT 81
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 21
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 21
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: ST_TO_ADDR
// if not tmp then
18332: LD_VAR 0 2
18336: NOT
18337: IFFALSE 18341
// exit ;
18339: GO 18424
// p := 0 ;
18341: LD_ADDR_VAR 0 3
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18349: LD_INT 35
18351: PPUSH
18352: CALL_OW 67
// p := p + 1 ;
18356: LD_ADDR_VAR 0 3
18360: PUSH
18361: LD_VAR 0 3
18365: PUSH
18366: LD_INT 1
18368: PLUS
18369: ST_TO_ADDR
// for i in tmp do
18370: LD_ADDR_VAR 0 1
18374: PUSH
18375: LD_VAR 0 2
18379: PUSH
18380: FOR_IN
18381: IFFALSE 18412
// if GetLives ( i ) < 1000 then
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 256
18392: PUSH
18393: LD_INT 1000
18395: LESS
18396: IFFALSE 18410
// SetLives ( i , 1000 ) ;
18398: LD_VAR 0 1
18402: PPUSH
18403: LD_INT 1000
18405: PPUSH
18406: CALL_OW 234
18410: GO 18380
18412: POP
18413: POP
// until p > 20 ;
18414: LD_VAR 0 3
18418: PUSH
18419: LD_INT 20
18421: GREATER
18422: IFFALSE 18349
// end ;
18424: PPOPN 3
18426: END
// every 0 0$1 trigger StreamModeActive and sTime do
18427: LD_EXP 19
18431: PUSH
18432: LD_EXP 70
18436: AND
18437: IFFALSE 18472
18439: GO 18441
18441: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18442: LD_INT 28
18444: PPUSH
18445: LD_OWVAR 2
18449: PPUSH
18450: LD_INT 2
18452: PPUSH
18453: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18457: LD_INT 30
18459: PPUSH
18460: LD_OWVAR 2
18464: PPUSH
18465: LD_INT 2
18467: PPUSH
18468: CALL_OW 322
// end ;
18472: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18473: LD_EXP 19
18477: PUSH
18478: LD_EXP 71
18482: AND
18483: IFFALSE 18604
18485: GO 18487
18487: DISABLE
18488: LD_INT 0
18490: PPUSH
18491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_OWVAR 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: LD_INT 23
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: PPUSH
18541: CALL_OW 69
18545: ST_TO_ADDR
// if not tmp then
18546: LD_VAR 0 2
18550: NOT
18551: IFFALSE 18555
// exit ;
18553: GO 18604
// for i in tmp do
18555: LD_ADDR_VAR 0 1
18559: PUSH
18560: LD_VAR 0 2
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18602
// begin if Crawls ( i ) then
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 318
18577: IFFALSE 18588
// ComWalk ( i ) ;
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 138
// SetClass ( i , 2 ) ;
18588: LD_VAR 0 1
18592: PPUSH
18593: LD_INT 2
18595: PPUSH
18596: CALL_OW 336
// end ;
18600: GO 18565
18602: POP
18603: POP
// end ;
18604: PPOPN 2
18606: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18607: LD_EXP 19
18611: PUSH
18612: LD_EXP 72
18616: AND
18617: IFFALSE 18898
18619: GO 18621
18621: DISABLE
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
18626: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18627: LD_OWVAR 2
18631: PPUSH
18632: LD_INT 9
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18645: LD_INT 9
18647: PPUSH
18648: LD_OWVAR 2
18652: PPUSH
18653: CALL_OW 343
// uc_side := 9 ;
18657: LD_ADDR_OWVAR 20
18661: PUSH
18662: LD_INT 9
18664: ST_TO_ADDR
// uc_nation := 2 ;
18665: LD_ADDR_OWVAR 21
18669: PUSH
18670: LD_INT 2
18672: ST_TO_ADDR
// hc_name := Dark Warrior ;
18673: LD_ADDR_OWVAR 26
18677: PUSH
18678: LD_STRING Dark Warrior
18680: ST_TO_ADDR
// hc_gallery :=  ;
18681: LD_ADDR_OWVAR 33
18685: PUSH
18686: LD_STRING 
18688: ST_TO_ADDR
// hc_noskilllimit := true ;
18689: LD_ADDR_OWVAR 76
18693: PUSH
18694: LD_INT 1
18696: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18697: LD_ADDR_OWVAR 31
18701: PUSH
18702: LD_INT 30
18704: PUSH
18705: LD_INT 30
18707: PUSH
18708: LD_INT 30
18710: PUSH
18711: LD_INT 30
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: ST_TO_ADDR
// un := CreateHuman ;
18720: LD_ADDR_VAR 0 3
18724: PUSH
18725: CALL_OW 44
18729: ST_TO_ADDR
// hc_noskilllimit := false ;
18730: LD_ADDR_OWVAR 76
18734: PUSH
18735: LD_INT 0
18737: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18738: LD_VAR 0 3
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL_OW 51
// p := 0 ;
18750: LD_ADDR_VAR 0 2
18754: PUSH
18755: LD_INT 0
18757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18758: LD_INT 35
18760: PPUSH
18761: CALL_OW 67
// p := p + 1 ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_VAR 0 2
18774: PUSH
18775: LD_INT 1
18777: PLUS
18778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18779: LD_VAR 0 3
18783: PPUSH
18784: CALL_OW 256
18788: PUSH
18789: LD_INT 1000
18791: LESS
18792: IFFALSE 18806
// SetLives ( un , 1000 ) ;
18794: LD_VAR 0 3
18798: PPUSH
18799: LD_INT 1000
18801: PPUSH
18802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18806: LD_VAR 0 3
18810: PPUSH
18811: LD_INT 81
18813: PUSH
18814: LD_OWVAR 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 91
18825: PUSH
18826: LD_VAR 0 3
18830: PUSH
18831: LD_INT 30
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 69
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: CALL_OW 74
18857: PPUSH
18858: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18862: LD_VAR 0 2
18866: PUSH
18867: LD_INT 60
18869: GREATER
18870: PUSH
18871: LD_VAR 0 3
18875: PPUSH
18876: CALL_OW 301
18880: OR
18881: IFFALSE 18758
// if un then
18883: LD_VAR 0 3
18887: IFFALSE 18898
// RemoveUnit ( un ) ;
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL_OW 64
// end ;
18898: PPOPN 3
18900: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18901: LD_INT 0
18903: PPUSH
// case cmd of 301 :
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 301
18911: DOUBLE
18912: EQUAL
18913: IFTRUE 18917
18915: GO 18949
18917: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18918: LD_VAR 0 6
18922: PPUSH
18923: LD_VAR 0 7
18927: PPUSH
18928: LD_VAR 0 8
18932: PPUSH
18933: LD_VAR 0 4
18937: PPUSH
18938: LD_VAR 0 5
18942: PPUSH
18943: CALL 20150 0 5
18947: GO 19070
18949: LD_INT 302
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18994
18957: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18958: LD_VAR 0 6
18962: PPUSH
18963: LD_VAR 0 7
18967: PPUSH
18968: LD_VAR 0 8
18972: PPUSH
18973: LD_VAR 0 9
18977: PPUSH
18978: LD_VAR 0 4
18982: PPUSH
18983: LD_VAR 0 5
18987: PPUSH
18988: CALL 20241 0 6
18992: GO 19070
18994: LD_INT 303
18996: DOUBLE
18997: EQUAL
18998: IFTRUE 19002
19000: GO 19039
19002: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19003: LD_VAR 0 6
19007: PPUSH
19008: LD_VAR 0 7
19012: PPUSH
19013: LD_VAR 0 8
19017: PPUSH
19018: LD_VAR 0 9
19022: PPUSH
19023: LD_VAR 0 4
19027: PPUSH
19028: LD_VAR 0 5
19032: PPUSH
19033: CALL 19075 0 6
19037: GO 19070
19039: LD_INT 304
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19069
19047: POP
// hHackTeleport ( unit , x , y ) ; end ;
19048: LD_VAR 0 2
19052: PPUSH
19053: LD_VAR 0 4
19057: PPUSH
19058: LD_VAR 0 5
19062: PPUSH
19063: CALL 20834 0 3
19067: GO 19070
19069: POP
// end ;
19070: LD_VAR 0 12
19074: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19075: LD_INT 0
19077: PPUSH
19078: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 1
19086: LESS
19087: PUSH
19088: LD_VAR 0 1
19092: PUSH
19093: LD_INT 3
19095: GREATER
19096: OR
19097: PUSH
19098: LD_VAR 0 5
19102: PPUSH
19103: LD_VAR 0 6
19107: PPUSH
19108: CALL_OW 428
19112: OR
19113: IFFALSE 19117
// exit ;
19115: GO 19837
// uc_side := your_side ;
19117: LD_ADDR_OWVAR 20
19121: PUSH
19122: LD_OWVAR 2
19126: ST_TO_ADDR
// uc_nation := nation ;
19127: LD_ADDR_OWVAR 21
19131: PUSH
19132: LD_VAR 0 1
19136: ST_TO_ADDR
// bc_level = 1 ;
19137: LD_ADDR_OWVAR 43
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// case btype of 1 :
19145: LD_VAR 0 2
19149: PUSH
19150: LD_INT 1
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19169
19158: POP
// bc_type := b_depot ; 2 :
19159: LD_ADDR_OWVAR 42
19163: PUSH
19164: LD_INT 0
19166: ST_TO_ADDR
19167: GO 19781
19169: LD_INT 2
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19188
19177: POP
// bc_type := b_warehouse ; 3 :
19178: LD_ADDR_OWVAR 42
19182: PUSH
19183: LD_INT 1
19185: ST_TO_ADDR
19186: GO 19781
19188: LD_INT 3
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19207
19196: POP
// bc_type := b_lab ; 4 .. 9 :
19197: LD_ADDR_OWVAR 42
19201: PUSH
19202: LD_INT 6
19204: ST_TO_ADDR
19205: GO 19781
19207: LD_INT 4
19209: DOUBLE
19210: GREATEREQUAL
19211: IFFALSE 19219
19213: LD_INT 9
19215: DOUBLE
19216: LESSEQUAL
19217: IFTRUE 19221
19219: GO 19273
19221: POP
// begin bc_type := b_lab_half ;
19222: LD_ADDR_OWVAR 42
19226: PUSH
19227: LD_INT 7
19229: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19230: LD_ADDR_OWVAR 44
19234: PUSH
19235: LD_INT 10
19237: PUSH
19238: LD_INT 11
19240: PUSH
19241: LD_INT 12
19243: PUSH
19244: LD_INT 15
19246: PUSH
19247: LD_INT 14
19249: PUSH
19250: LD_INT 13
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: PUSH
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 3
19268: MINUS
19269: ARRAY
19270: ST_TO_ADDR
// end ; 10 .. 13 :
19271: GO 19781
19273: LD_INT 10
19275: DOUBLE
19276: GREATEREQUAL
19277: IFFALSE 19285
19279: LD_INT 13
19281: DOUBLE
19282: LESSEQUAL
19283: IFTRUE 19287
19285: GO 19364
19287: POP
// begin bc_type := b_lab_full ;
19288: LD_ADDR_OWVAR 42
19292: PUSH
19293: LD_INT 8
19295: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19296: LD_ADDR_OWVAR 44
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 12
19306: PUSH
19307: LD_INT 14
19309: PUSH
19310: LD_INT 13
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: LD_INT 9
19326: MINUS
19327: ARRAY
19328: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19329: LD_ADDR_OWVAR 45
19333: PUSH
19334: LD_INT 11
19336: PUSH
19337: LD_INT 15
19339: PUSH
19340: LD_INT 12
19342: PUSH
19343: LD_INT 15
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: LD_VAR 0 2
19356: PUSH
19357: LD_INT 9
19359: MINUS
19360: ARRAY
19361: ST_TO_ADDR
// end ; 14 :
19362: GO 19781
19364: LD_INT 14
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19383
19372: POP
// bc_type := b_workshop ; 15 :
19373: LD_ADDR_OWVAR 42
19377: PUSH
19378: LD_INT 2
19380: ST_TO_ADDR
19381: GO 19781
19383: LD_INT 15
19385: DOUBLE
19386: EQUAL
19387: IFTRUE 19391
19389: GO 19402
19391: POP
// bc_type := b_factory ; 16 :
19392: LD_ADDR_OWVAR 42
19396: PUSH
19397: LD_INT 3
19399: ST_TO_ADDR
19400: GO 19781
19402: LD_INT 16
19404: DOUBLE
19405: EQUAL
19406: IFTRUE 19410
19408: GO 19421
19410: POP
// bc_type := b_ext_gun ; 17 :
19411: LD_ADDR_OWVAR 42
19415: PUSH
19416: LD_INT 17
19418: ST_TO_ADDR
19419: GO 19781
19421: LD_INT 17
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19457
19429: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19430: LD_ADDR_OWVAR 42
19434: PUSH
19435: LD_INT 19
19437: PUSH
19438: LD_INT 23
19440: PUSH
19441: LD_INT 19
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: LD_VAR 0 1
19453: ARRAY
19454: ST_TO_ADDR
19455: GO 19781
19457: LD_INT 18
19459: DOUBLE
19460: EQUAL
19461: IFTRUE 19465
19463: GO 19476
19465: POP
// bc_type := b_ext_radar ; 19 :
19466: LD_ADDR_OWVAR 42
19470: PUSH
19471: LD_INT 20
19473: ST_TO_ADDR
19474: GO 19781
19476: LD_INT 19
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19495
19484: POP
// bc_type := b_ext_radio ; 20 :
19485: LD_ADDR_OWVAR 42
19489: PUSH
19490: LD_INT 22
19492: ST_TO_ADDR
19493: GO 19781
19495: LD_INT 20
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19514
19503: POP
// bc_type := b_ext_siberium ; 21 :
19504: LD_ADDR_OWVAR 42
19508: PUSH
19509: LD_INT 21
19511: ST_TO_ADDR
19512: GO 19781
19514: LD_INT 21
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19533
19522: POP
// bc_type := b_ext_computer ; 22 :
19523: LD_ADDR_OWVAR 42
19527: PUSH
19528: LD_INT 24
19530: ST_TO_ADDR
19531: GO 19781
19533: LD_INT 22
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19552
19541: POP
// bc_type := b_ext_track ; 23 :
19542: LD_ADDR_OWVAR 42
19546: PUSH
19547: LD_INT 16
19549: ST_TO_ADDR
19550: GO 19781
19552: LD_INT 23
19554: DOUBLE
19555: EQUAL
19556: IFTRUE 19560
19558: GO 19571
19560: POP
// bc_type := b_ext_laser ; 24 :
19561: LD_ADDR_OWVAR 42
19565: PUSH
19566: LD_INT 25
19568: ST_TO_ADDR
19569: GO 19781
19571: LD_INT 24
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19590
19579: POP
// bc_type := b_control_tower ; 25 :
19580: LD_ADDR_OWVAR 42
19584: PUSH
19585: LD_INT 36
19587: ST_TO_ADDR
19588: GO 19781
19590: LD_INT 25
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19609
19598: POP
// bc_type := b_breastwork ; 26 :
19599: LD_ADDR_OWVAR 42
19603: PUSH
19604: LD_INT 31
19606: ST_TO_ADDR
19607: GO 19781
19609: LD_INT 26
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19628
19617: POP
// bc_type := b_bunker ; 27 :
19618: LD_ADDR_OWVAR 42
19622: PUSH
19623: LD_INT 32
19625: ST_TO_ADDR
19626: GO 19781
19628: LD_INT 27
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19647
19636: POP
// bc_type := b_turret ; 28 :
19637: LD_ADDR_OWVAR 42
19641: PUSH
19642: LD_INT 33
19644: ST_TO_ADDR
19645: GO 19781
19647: LD_INT 28
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19666
19655: POP
// bc_type := b_armoury ; 29 :
19656: LD_ADDR_OWVAR 42
19660: PUSH
19661: LD_INT 4
19663: ST_TO_ADDR
19664: GO 19781
19666: LD_INT 29
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19685
19674: POP
// bc_type := b_barracks ; 30 :
19675: LD_ADDR_OWVAR 42
19679: PUSH
19680: LD_INT 5
19682: ST_TO_ADDR
19683: GO 19781
19685: LD_INT 30
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19704
19693: POP
// bc_type := b_solar_power ; 31 :
19694: LD_ADDR_OWVAR 42
19698: PUSH
19699: LD_INT 27
19701: ST_TO_ADDR
19702: GO 19781
19704: LD_INT 31
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19723
19712: POP
// bc_type := b_oil_power ; 32 :
19713: LD_ADDR_OWVAR 42
19717: PUSH
19718: LD_INT 26
19720: ST_TO_ADDR
19721: GO 19781
19723: LD_INT 32
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19742
19731: POP
// bc_type := b_siberite_power ; 33 :
19732: LD_ADDR_OWVAR 42
19736: PUSH
19737: LD_INT 28
19739: ST_TO_ADDR
19740: GO 19781
19742: LD_INT 33
19744: DOUBLE
19745: EQUAL
19746: IFTRUE 19750
19748: GO 19761
19750: POP
// bc_type := b_oil_mine ; 34 :
19751: LD_ADDR_OWVAR 42
19755: PUSH
19756: LD_INT 29
19758: ST_TO_ADDR
19759: GO 19781
19761: LD_INT 34
19763: DOUBLE
19764: EQUAL
19765: IFTRUE 19769
19767: GO 19780
19769: POP
// bc_type := b_siberite_mine ; end ;
19770: LD_ADDR_OWVAR 42
19774: PUSH
19775: LD_INT 30
19777: ST_TO_ADDR
19778: GO 19781
19780: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19781: LD_ADDR_VAR 0 8
19785: PUSH
19786: LD_VAR 0 5
19790: PPUSH
19791: LD_VAR 0 6
19795: PPUSH
19796: LD_VAR 0 3
19800: PPUSH
19801: CALL_OW 47
19805: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19806: LD_OWVAR 42
19810: PUSH
19811: LD_INT 32
19813: PUSH
19814: LD_INT 33
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: IN
19821: IFFALSE 19837
// PlaceWeaponTurret ( b , weapon ) ;
19823: LD_VAR 0 8
19827: PPUSH
19828: LD_VAR 0 4
19832: PPUSH
19833: CALL_OW 431
// end ;
19837: LD_VAR 0 7
19841: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19848: LD_ADDR_VAR 0 4
19852: PUSH
19853: LD_INT 22
19855: PUSH
19856: LD_OWVAR 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: LD_INT 30
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 30
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PPUSH
19897: CALL_OW 69
19901: ST_TO_ADDR
// if not tmp then
19902: LD_VAR 0 4
19906: NOT
19907: IFFALSE 19911
// exit ;
19909: GO 19970
// for i in tmp do
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: LD_VAR 0 4
19920: PUSH
19921: FOR_IN
19922: IFFALSE 19968
// for j = 1 to 3 do
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: DOUBLE
19930: LD_INT 1
19932: DEC
19933: ST_TO_ADDR
19934: LD_INT 3
19936: PUSH
19937: FOR_TO
19938: IFFALSE 19964
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19940: LD_VAR 0 2
19944: PPUSH
19945: CALL_OW 274
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_INT 99999
19957: PPUSH
19958: CALL_OW 277
19962: GO 19937
19964: POP
19965: POP
19966: GO 19921
19968: POP
19969: POP
// end ;
19970: LD_VAR 0 1
19974: RET
// export function hHackSetLevel10 ; var i , j ; begin
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: LD_INT 21
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PPUSH
19995: CALL_OW 69
19999: PUSH
20000: FOR_IN
20001: IFFALSE 20053
// if IsSelected ( i ) then
20003: LD_VAR 0 2
20007: PPUSH
20008: CALL_OW 306
20012: IFFALSE 20051
// begin for j := 1 to 4 do
20014: LD_ADDR_VAR 0 3
20018: PUSH
20019: DOUBLE
20020: LD_INT 1
20022: DEC
20023: ST_TO_ADDR
20024: LD_INT 4
20026: PUSH
20027: FOR_TO
20028: IFFALSE 20049
// SetSkill ( i , j , 10 ) ;
20030: LD_VAR 0 2
20034: PPUSH
20035: LD_VAR 0 3
20039: PPUSH
20040: LD_INT 10
20042: PPUSH
20043: CALL_OW 237
20047: GO 20027
20049: POP
20050: POP
// end ;
20051: GO 20000
20053: POP
20054: POP
// end ;
20055: LD_VAR 0 1
20059: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20065: LD_ADDR_VAR 0 2
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_OWVAR 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 21
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PPUSH
20096: CALL_OW 69
20100: PUSH
20101: FOR_IN
20102: IFFALSE 20143
// begin for j := 1 to 4 do
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: DOUBLE
20110: LD_INT 1
20112: DEC
20113: ST_TO_ADDR
20114: LD_INT 4
20116: PUSH
20117: FOR_TO
20118: IFFALSE 20139
// SetSkill ( i , j , 10 ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: LD_INT 10
20132: PPUSH
20133: CALL_OW 237
20137: GO 20117
20139: POP
20140: POP
// end ;
20141: GO 20101
20143: POP
20144: POP
// end ;
20145: LD_VAR 0 1
20149: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20150: LD_INT 0
20152: PPUSH
// uc_side := your_side ;
20153: LD_ADDR_OWVAR 20
20157: PUSH
20158: LD_OWVAR 2
20162: ST_TO_ADDR
// uc_nation := nation ;
20163: LD_ADDR_OWVAR 21
20167: PUSH
20168: LD_VAR 0 1
20172: ST_TO_ADDR
// InitHc ;
20173: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20177: LD_INT 0
20179: PPUSH
20180: LD_VAR 0 2
20184: PPUSH
20185: LD_VAR 0 3
20189: PPUSH
20190: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_VAR 0 5
20203: PPUSH
20204: CALL_OW 428
20208: PUSH
20209: LD_INT 0
20211: EQUAL
20212: IFFALSE 20236
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20214: CALL_OW 44
20218: PPUSH
20219: LD_VAR 0 4
20223: PPUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: CALL_OW 48
// end ;
20236: LD_VAR 0 6
20240: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20241: LD_INT 0
20243: PPUSH
20244: PPUSH
// uc_side := your_side ;
20245: LD_ADDR_OWVAR 20
20249: PUSH
20250: LD_OWVAR 2
20254: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20255: LD_VAR 0 1
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: IN
20282: IFFALSE 20294
// uc_nation := nation_american else
20284: LD_ADDR_OWVAR 21
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
20292: GO 20337
// if chassis in [ 11 , 12 , 13 , 14 ] then
20294: LD_VAR 0 1
20298: PUSH
20299: LD_INT 11
20301: PUSH
20302: LD_INT 12
20304: PUSH
20305: LD_INT 13
20307: PUSH
20308: LD_INT 14
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: IN
20317: IFFALSE 20329
// uc_nation := nation_arabian else
20319: LD_ADDR_OWVAR 21
20323: PUSH
20324: LD_INT 2
20326: ST_TO_ADDR
20327: GO 20337
// uc_nation := nation_russian ;
20329: LD_ADDR_OWVAR 21
20333: PUSH
20334: LD_INT 3
20336: ST_TO_ADDR
// vc_chassis := chassis ;
20337: LD_ADDR_OWVAR 37
20341: PUSH
20342: LD_VAR 0 1
20346: ST_TO_ADDR
// vc_engine := engine ;
20347: LD_ADDR_OWVAR 39
20351: PUSH
20352: LD_VAR 0 2
20356: ST_TO_ADDR
// vc_control := control ;
20357: LD_ADDR_OWVAR 38
20361: PUSH
20362: LD_VAR 0 3
20366: ST_TO_ADDR
// vc_weapon := weapon ;
20367: LD_ADDR_OWVAR 40
20371: PUSH
20372: LD_VAR 0 4
20376: ST_TO_ADDR
// un := CreateVehicle ;
20377: LD_ADDR_VAR 0 8
20381: PUSH
20382: CALL_OW 45
20386: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20387: LD_VAR 0 8
20391: PPUSH
20392: LD_INT 0
20394: PPUSH
20395: LD_INT 5
20397: PPUSH
20398: CALL_OW 12
20402: PPUSH
20403: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20407: LD_VAR 0 8
20411: PPUSH
20412: LD_VAR 0 5
20416: PPUSH
20417: LD_VAR 0 6
20421: PPUSH
20422: LD_INT 1
20424: PPUSH
20425: CALL_OW 48
// end ;
20429: LD_VAR 0 7
20433: RET
// export hInvincible ; every 1 do
20434: GO 20436
20436: DISABLE
// hInvincible := [ ] ;
20437: LD_ADDR_EXP 73
20441: PUSH
20442: EMPTY
20443: ST_TO_ADDR
20444: END
// every 10 do var i ;
20445: GO 20447
20447: DISABLE
20448: LD_INT 0
20450: PPUSH
// begin enable ;
20451: ENABLE
// if not hInvincible then
20452: LD_EXP 73
20456: NOT
20457: IFFALSE 20461
// exit ;
20459: GO 20505
// for i in hInvincible do
20461: LD_ADDR_VAR 0 1
20465: PUSH
20466: LD_EXP 73
20470: PUSH
20471: FOR_IN
20472: IFFALSE 20503
// if GetLives ( i ) < 1000 then
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 256
20483: PUSH
20484: LD_INT 1000
20486: LESS
20487: IFFALSE 20501
// SetLives ( i , 1000 ) ;
20489: LD_VAR 0 1
20493: PPUSH
20494: LD_INT 1000
20496: PPUSH
20497: CALL_OW 234
20501: GO 20471
20503: POP
20504: POP
// end ;
20505: PPOPN 1
20507: END
// export function hHackInvincible ; var i ; begin
20508: LD_INT 0
20510: PPUSH
20511: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20512: LD_ADDR_VAR 0 2
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 21
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: PUSH
20550: FOR_IN
20551: IFFALSE 20612
// if IsSelected ( i ) then
20553: LD_VAR 0 2
20557: PPUSH
20558: CALL_OW 306
20562: IFFALSE 20610
// begin if i in hInvincible then
20564: LD_VAR 0 2
20568: PUSH
20569: LD_EXP 73
20573: IN
20574: IFFALSE 20594
// hInvincible := hInvincible diff i else
20576: LD_ADDR_EXP 73
20580: PUSH
20581: LD_EXP 73
20585: PUSH
20586: LD_VAR 0 2
20590: DIFF
20591: ST_TO_ADDR
20592: GO 20610
// hInvincible := hInvincible union i ;
20594: LD_ADDR_EXP 73
20598: PUSH
20599: LD_EXP 73
20603: PUSH
20604: LD_VAR 0 2
20608: UNION
20609: ST_TO_ADDR
// end ;
20610: GO 20550
20612: POP
20613: POP
// end ;
20614: LD_VAR 0 1
20618: RET
// export function hHackInvisible ; var i , j ; begin
20619: LD_INT 0
20621: PPUSH
20622: PPUSH
20623: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20624: LD_ADDR_VAR 0 2
20628: PUSH
20629: LD_INT 21
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PPUSH
20639: CALL_OW 69
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20669
// if IsSelected ( i ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 306
20656: IFFALSE 20667
// ComForceInvisible ( i ) ;
20658: LD_VAR 0 2
20662: PPUSH
20663: CALL_OW 496
20667: GO 20644
20669: POP
20670: POP
// end ;
20671: LD_VAR 0 1
20675: RET
// export function hHackChangeYourSide ; begin
20676: LD_INT 0
20678: PPUSH
// if your_side = 8 then
20679: LD_OWVAR 2
20683: PUSH
20684: LD_INT 8
20686: EQUAL
20687: IFFALSE 20699
// your_side := 0 else
20689: LD_ADDR_OWVAR 2
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
20697: GO 20713
// your_side := your_side + 1 ;
20699: LD_ADDR_OWVAR 2
20703: PUSH
20704: LD_OWVAR 2
20708: PUSH
20709: LD_INT 1
20711: PLUS
20712: ST_TO_ADDR
// end ;
20713: LD_VAR 0 1
20717: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20718: LD_INT 0
20720: PPUSH
20721: PPUSH
20722: PPUSH
// for i in all_units do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: LD_OWVAR 3
20732: PUSH
20733: FOR_IN
20734: IFFALSE 20812
// if IsSelected ( i ) then
20736: LD_VAR 0 2
20740: PPUSH
20741: CALL_OW 306
20745: IFFALSE 20810
// begin j := GetSide ( i ) ;
20747: LD_ADDR_VAR 0 3
20751: PUSH
20752: LD_VAR 0 2
20756: PPUSH
20757: CALL_OW 255
20761: ST_TO_ADDR
// if j = 8 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 8
20769: EQUAL
20770: IFFALSE 20782
// j := 0 else
20772: LD_ADDR_VAR 0 3
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
20780: GO 20796
// j := j + 1 ;
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 1
20794: PLUS
20795: ST_TO_ADDR
// SetSide ( i , j ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_VAR 0 3
20805: PPUSH
20806: CALL_OW 235
// end ;
20810: GO 20733
20812: POP
20813: POP
// end ;
20814: LD_VAR 0 1
20818: RET
// export function hHackFog ; begin
20819: LD_INT 0
20821: PPUSH
// FogOff ( true ) ;
20822: LD_INT 1
20824: PPUSH
20825: CALL_OW 344
// end ;
20829: LD_VAR 0 1
20833: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20834: LD_INT 0
20836: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20837: LD_VAR 0 1
20841: PPUSH
20842: LD_VAR 0 2
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: LD_INT 1
20857: PPUSH
20858: CALL_OW 483
// CenterOnXY ( x , y ) ;
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: CALL_OW 84
// end ; end_of_file
20876: LD_VAR 0 4
20880: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
// if exist_mode then
20885: LD_VAR 0 2
20889: IFFALSE 20914
// unit := CreateCharacter ( prefix & ident ) else
20891: LD_ADDR_VAR 0 5
20895: PUSH
20896: LD_VAR 0 3
20900: PUSH
20901: LD_VAR 0 1
20905: STR
20906: PPUSH
20907: CALL_OW 34
20911: ST_TO_ADDR
20912: GO 20929
// unit := NewCharacter ( ident ) ;
20914: LD_ADDR_VAR 0 5
20918: PUSH
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 25
20928: ST_TO_ADDR
// result := unit ;
20929: LD_ADDR_VAR 0 4
20933: PUSH
20934: LD_VAR 0 5
20938: ST_TO_ADDR
// end ;
20939: LD_VAR 0 4
20943: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20944: LD_INT 0
20946: PPUSH
20947: PPUSH
// if not side or not nation then
20948: LD_VAR 0 1
20952: NOT
20953: PUSH
20954: LD_VAR 0 2
20958: NOT
20959: OR
20960: IFFALSE 20964
// exit ;
20962: GO 21728
// case nation of nation_american :
20964: LD_VAR 0 2
20968: PUSH
20969: LD_INT 1
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 21191
20977: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20978: LD_ADDR_VAR 0 4
20982: PUSH
20983: LD_INT 35
20985: PUSH
20986: LD_INT 45
20988: PUSH
20989: LD_INT 46
20991: PUSH
20992: LD_INT 47
20994: PUSH
20995: LD_INT 82
20997: PUSH
20998: LD_INT 83
21000: PUSH
21001: LD_INT 84
21003: PUSH
21004: LD_INT 85
21006: PUSH
21007: LD_INT 86
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 6
21018: PUSH
21019: LD_INT 15
21021: PUSH
21022: LD_INT 16
21024: PUSH
21025: LD_INT 7
21027: PUSH
21028: LD_INT 12
21030: PUSH
21031: LD_INT 13
21033: PUSH
21034: LD_INT 10
21036: PUSH
21037: LD_INT 14
21039: PUSH
21040: LD_INT 20
21042: PUSH
21043: LD_INT 21
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_INT 25
21051: PUSH
21052: LD_INT 32
21054: PUSH
21055: LD_INT 27
21057: PUSH
21058: LD_INT 36
21060: PUSH
21061: LD_INT 69
21063: PUSH
21064: LD_INT 39
21066: PUSH
21067: LD_INT 34
21069: PUSH
21070: LD_INT 40
21072: PUSH
21073: LD_INT 48
21075: PUSH
21076: LD_INT 49
21078: PUSH
21079: LD_INT 50
21081: PUSH
21082: LD_INT 51
21084: PUSH
21085: LD_INT 52
21087: PUSH
21088: LD_INT 53
21090: PUSH
21091: LD_INT 54
21093: PUSH
21094: LD_INT 55
21096: PUSH
21097: LD_INT 56
21099: PUSH
21100: LD_INT 57
21102: PUSH
21103: LD_INT 58
21105: PUSH
21106: LD_INT 59
21108: PUSH
21109: LD_INT 60
21111: PUSH
21112: LD_INT 61
21114: PUSH
21115: LD_INT 62
21117: PUSH
21118: LD_INT 80
21120: PUSH
21121: LD_INT 82
21123: PUSH
21124: LD_INT 83
21126: PUSH
21127: LD_INT 84
21129: PUSH
21130: LD_INT 85
21132: PUSH
21133: LD_INT 86
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 21652
21191: LD_INT 2
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21421
21199: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21200: LD_ADDR_VAR 0 4
21204: PUSH
21205: LD_INT 35
21207: PUSH
21208: LD_INT 45
21210: PUSH
21211: LD_INT 46
21213: PUSH
21214: LD_INT 47
21216: PUSH
21217: LD_INT 82
21219: PUSH
21220: LD_INT 83
21222: PUSH
21223: LD_INT 84
21225: PUSH
21226: LD_INT 85
21228: PUSH
21229: LD_INT 87
21231: PUSH
21232: LD_INT 70
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: LD_INT 11
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: LD_INT 4
21246: PUSH
21247: LD_INT 5
21249: PUSH
21250: LD_INT 6
21252: PUSH
21253: LD_INT 15
21255: PUSH
21256: LD_INT 18
21258: PUSH
21259: LD_INT 7
21261: PUSH
21262: LD_INT 17
21264: PUSH
21265: LD_INT 8
21267: PUSH
21268: LD_INT 20
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 72
21279: PUSH
21280: LD_INT 26
21282: PUSH
21283: LD_INT 69
21285: PUSH
21286: LD_INT 39
21288: PUSH
21289: LD_INT 40
21291: PUSH
21292: LD_INT 41
21294: PUSH
21295: LD_INT 42
21297: PUSH
21298: LD_INT 43
21300: PUSH
21301: LD_INT 48
21303: PUSH
21304: LD_INT 49
21306: PUSH
21307: LD_INT 50
21309: PUSH
21310: LD_INT 51
21312: PUSH
21313: LD_INT 52
21315: PUSH
21316: LD_INT 53
21318: PUSH
21319: LD_INT 54
21321: PUSH
21322: LD_INT 55
21324: PUSH
21325: LD_INT 56
21327: PUSH
21328: LD_INT 60
21330: PUSH
21331: LD_INT 61
21333: PUSH
21334: LD_INT 62
21336: PUSH
21337: LD_INT 66
21339: PUSH
21340: LD_INT 67
21342: PUSH
21343: LD_INT 68
21345: PUSH
21346: LD_INT 81
21348: PUSH
21349: LD_INT 82
21351: PUSH
21352: LD_INT 83
21354: PUSH
21355: LD_INT 84
21357: PUSH
21358: LD_INT 85
21360: PUSH
21361: LD_INT 87
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
21419: GO 21652
21421: LD_INT 3
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21651
21429: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21430: LD_ADDR_VAR 0 4
21434: PUSH
21435: LD_INT 46
21437: PUSH
21438: LD_INT 47
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: LD_INT 2
21446: PUSH
21447: LD_INT 82
21449: PUSH
21450: LD_INT 83
21452: PUSH
21453: LD_INT 84
21455: PUSH
21456: LD_INT 85
21458: PUSH
21459: LD_INT 86
21461: PUSH
21462: LD_INT 11
21464: PUSH
21465: LD_INT 9
21467: PUSH
21468: LD_INT 20
21470: PUSH
21471: LD_INT 19
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 24
21479: PUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 25
21485: PUSH
21486: LD_INT 28
21488: PUSH
21489: LD_INT 29
21491: PUSH
21492: LD_INT 30
21494: PUSH
21495: LD_INT 31
21497: PUSH
21498: LD_INT 37
21500: PUSH
21501: LD_INT 38
21503: PUSH
21504: LD_INT 32
21506: PUSH
21507: LD_INT 27
21509: PUSH
21510: LD_INT 33
21512: PUSH
21513: LD_INT 69
21515: PUSH
21516: LD_INT 39
21518: PUSH
21519: LD_INT 34
21521: PUSH
21522: LD_INT 40
21524: PUSH
21525: LD_INT 71
21527: PUSH
21528: LD_INT 23
21530: PUSH
21531: LD_INT 44
21533: PUSH
21534: LD_INT 48
21536: PUSH
21537: LD_INT 49
21539: PUSH
21540: LD_INT 50
21542: PUSH
21543: LD_INT 51
21545: PUSH
21546: LD_INT 52
21548: PUSH
21549: LD_INT 53
21551: PUSH
21552: LD_INT 54
21554: PUSH
21555: LD_INT 55
21557: PUSH
21558: LD_INT 56
21560: PUSH
21561: LD_INT 57
21563: PUSH
21564: LD_INT 58
21566: PUSH
21567: LD_INT 59
21569: PUSH
21570: LD_INT 63
21572: PUSH
21573: LD_INT 64
21575: PUSH
21576: LD_INT 65
21578: PUSH
21579: LD_INT 82
21581: PUSH
21582: LD_INT 83
21584: PUSH
21585: LD_INT 84
21587: PUSH
21588: LD_INT 85
21590: PUSH
21591: LD_INT 86
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: ST_TO_ADDR
21649: GO 21652
21651: POP
// if state > - 1 and state < 3 then
21652: LD_VAR 0 3
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: GREATER
21661: PUSH
21662: LD_VAR 0 3
21666: PUSH
21667: LD_INT 3
21669: LESS
21670: AND
21671: IFFALSE 21728
// for i in result do
21673: LD_ADDR_VAR 0 5
21677: PUSH
21678: LD_VAR 0 4
21682: PUSH
21683: FOR_IN
21684: IFFALSE 21726
// if GetTech ( i , side ) <> state then
21686: LD_VAR 0 5
21690: PPUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 321
21700: PUSH
21701: LD_VAR 0 3
21705: NONEQUAL
21706: IFFALSE 21724
// result := result diff i ;
21708: LD_ADDR_VAR 0 4
21712: PUSH
21713: LD_VAR 0 4
21717: PUSH
21718: LD_VAR 0 5
21722: DIFF
21723: ST_TO_ADDR
21724: GO 21683
21726: POP
21727: POP
// end ;
21728: LD_VAR 0 4
21732: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21733: LD_INT 0
21735: PPUSH
21736: PPUSH
21737: PPUSH
// result := true ;
21738: LD_ADDR_VAR 0 3
21742: PUSH
21743: LD_INT 1
21745: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21746: LD_ADDR_VAR 0 5
21750: PUSH
21751: LD_VAR 0 2
21755: PPUSH
21756: CALL_OW 480
21760: ST_TO_ADDR
// if not tmp then
21761: LD_VAR 0 5
21765: NOT
21766: IFFALSE 21770
// exit ;
21768: GO 21819
// for i in tmp do
21770: LD_ADDR_VAR 0 4
21774: PUSH
21775: LD_VAR 0 5
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21817
// if GetTech ( i , side ) <> state_researched then
21783: LD_VAR 0 4
21787: PPUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 321
21797: PUSH
21798: LD_INT 2
21800: NONEQUAL
21801: IFFALSE 21815
// begin result := false ;
21803: LD_ADDR_VAR 0 3
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// exit ;
21811: POP
21812: POP
21813: GO 21819
// end ;
21815: GO 21780
21817: POP
21818: POP
// end ;
21819: LD_VAR 0 3
21823: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21824: LD_INT 0
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21839: LD_VAR 0 1
21843: NOT
21844: PUSH
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 257
21854: PUSH
21855: LD_INT 9
21857: NONEQUAL
21858: OR
21859: IFFALSE 21863
// exit ;
21861: GO 22436
// side := GetSide ( unit ) ;
21863: LD_ADDR_VAR 0 9
21867: PUSH
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 255
21877: ST_TO_ADDR
// tech_space := tech_spacanom ;
21878: LD_ADDR_VAR 0 12
21882: PUSH
21883: LD_INT 29
21885: ST_TO_ADDR
// tech_time := tech_taurad ;
21886: LD_ADDR_VAR 0 13
21890: PUSH
21891: LD_INT 28
21893: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21894: LD_ADDR_VAR 0 11
21898: PUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 310
21908: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21909: LD_VAR 0 11
21913: PPUSH
21914: CALL_OW 247
21918: PUSH
21919: LD_INT 2
21921: EQUAL
21922: IFFALSE 21926
// exit ;
21924: GO 22436
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21926: LD_ADDR_VAR 0 8
21930: PUSH
21931: LD_INT 81
21933: PUSH
21934: LD_VAR 0 9
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 3
21945: PUSH
21946: LD_INT 21
21948: PUSH
21949: LD_INT 3
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PPUSH
21964: CALL_OW 69
21968: ST_TO_ADDR
// if not tmp then
21969: LD_VAR 0 8
21973: NOT
21974: IFFALSE 21978
// exit ;
21976: GO 22436
// if in_unit then
21978: LD_VAR 0 11
21982: IFFALSE 22006
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21984: LD_ADDR_VAR 0 10
21988: PUSH
21989: LD_VAR 0 8
21993: PPUSH
21994: LD_VAR 0 11
21998: PPUSH
21999: CALL_OW 74
22003: ST_TO_ADDR
22004: GO 22026
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22006: LD_ADDR_VAR 0 10
22010: PUSH
22011: LD_VAR 0 8
22015: PPUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 74
22025: ST_TO_ADDR
// if not enemy then
22026: LD_VAR 0 10
22030: NOT
22031: IFFALSE 22035
// exit ;
22033: GO 22436
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22035: LD_VAR 0 11
22039: PUSH
22040: LD_VAR 0 11
22044: PPUSH
22045: LD_VAR 0 10
22049: PPUSH
22050: CALL_OW 296
22054: PUSH
22055: LD_INT 13
22057: GREATER
22058: AND
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: LD_VAR 0 10
22069: PPUSH
22070: CALL_OW 296
22074: PUSH
22075: LD_INT 12
22077: GREATER
22078: OR
22079: IFFALSE 22083
// exit ;
22081: GO 22436
// missile := [ 1 ] ;
22083: LD_ADDR_VAR 0 14
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22094: LD_VAR 0 9
22098: PPUSH
22099: LD_VAR 0 12
22103: PPUSH
22104: CALL_OW 325
22108: IFFALSE 22137
// missile := Insert ( missile , missile + 1 , 2 ) ;
22110: LD_ADDR_VAR 0 14
22114: PUSH
22115: LD_VAR 0 14
22119: PPUSH
22120: LD_VAR 0 14
22124: PUSH
22125: LD_INT 1
22127: PLUS
22128: PPUSH
22129: LD_INT 2
22131: PPUSH
22132: CALL_OW 2
22136: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22137: LD_VAR 0 9
22141: PPUSH
22142: LD_VAR 0 13
22146: PPUSH
22147: CALL_OW 325
22151: PUSH
22152: LD_VAR 0 10
22156: PPUSH
22157: CALL_OW 255
22161: PPUSH
22162: LD_VAR 0 13
22166: PPUSH
22167: CALL_OW 325
22171: NOT
22172: AND
22173: IFFALSE 22202
// missile := Insert ( missile , missile + 1 , 3 ) ;
22175: LD_ADDR_VAR 0 14
22179: PUSH
22180: LD_VAR 0 14
22184: PPUSH
22185: LD_VAR 0 14
22189: PUSH
22190: LD_INT 1
22192: PLUS
22193: PPUSH
22194: LD_INT 3
22196: PPUSH
22197: CALL_OW 2
22201: ST_TO_ADDR
// if missile < 2 then
22202: LD_VAR 0 14
22206: PUSH
22207: LD_INT 2
22209: LESS
22210: IFFALSE 22214
// exit ;
22212: GO 22436
// x := GetX ( enemy ) ;
22214: LD_ADDR_VAR 0 4
22218: PUSH
22219: LD_VAR 0 10
22223: PPUSH
22224: CALL_OW 250
22228: ST_TO_ADDR
// y := GetY ( enemy ) ;
22229: LD_ADDR_VAR 0 5
22233: PUSH
22234: LD_VAR 0 10
22238: PPUSH
22239: CALL_OW 251
22243: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22244: LD_ADDR_VAR 0 6
22248: PUSH
22249: LD_VAR 0 4
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 12
22265: PLUS
22266: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22267: LD_ADDR_VAR 0 7
22271: PUSH
22272: LD_VAR 0 5
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PPUSH
22281: LD_INT 1
22283: PPUSH
22284: CALL_OW 12
22288: PLUS
22289: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22290: LD_VAR 0 6
22294: PPUSH
22295: LD_VAR 0 7
22299: PPUSH
22300: CALL_OW 488
22304: NOT
22305: IFFALSE 22327
// begin _x := x ;
22307: LD_ADDR_VAR 0 6
22311: PUSH
22312: LD_VAR 0 4
22316: ST_TO_ADDR
// _y := y ;
22317: LD_ADDR_VAR 0 7
22321: PUSH
22322: LD_VAR 0 5
22326: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22327: LD_ADDR_VAR 0 3
22331: PUSH
22332: LD_INT 1
22334: PPUSH
22335: LD_VAR 0 14
22339: PPUSH
22340: CALL_OW 12
22344: ST_TO_ADDR
// case i of 1 :
22345: LD_VAR 0 3
22349: PUSH
22350: LD_INT 1
22352: DOUBLE
22353: EQUAL
22354: IFTRUE 22358
22356: GO 22375
22358: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_VAR 0 10
22368: PPUSH
22369: CALL_OW 115
22373: GO 22436
22375: LD_INT 2
22377: DOUBLE
22378: EQUAL
22379: IFTRUE 22383
22381: GO 22405
22383: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22384: LD_VAR 0 1
22388: PPUSH
22389: LD_VAR 0 6
22393: PPUSH
22394: LD_VAR 0 7
22398: PPUSH
22399: CALL_OW 153
22403: GO 22436
22405: LD_INT 3
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22435
22413: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22414: LD_VAR 0 1
22418: PPUSH
22419: LD_VAR 0 6
22423: PPUSH
22424: LD_VAR 0 7
22428: PPUSH
22429: CALL_OW 154
22433: GO 22436
22435: POP
// end ;
22436: LD_VAR 0 2
22440: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22441: LD_INT 0
22443: PPUSH
22444: PPUSH
22445: PPUSH
22446: PPUSH
22447: PPUSH
22448: PPUSH
// if not unit or not building then
22449: LD_VAR 0 1
22453: NOT
22454: PUSH
22455: LD_VAR 0 2
22459: NOT
22460: OR
22461: IFFALSE 22465
// exit ;
22463: GO 22623
// x := GetX ( building ) ;
22465: LD_ADDR_VAR 0 5
22469: PUSH
22470: LD_VAR 0 2
22474: PPUSH
22475: CALL_OW 250
22479: ST_TO_ADDR
// y := GetY ( building ) ;
22480: LD_ADDR_VAR 0 6
22484: PUSH
22485: LD_VAR 0 2
22489: PPUSH
22490: CALL_OW 251
22494: ST_TO_ADDR
// for i = 0 to 5 do
22495: LD_ADDR_VAR 0 4
22499: PUSH
22500: DOUBLE
22501: LD_INT 0
22503: DEC
22504: ST_TO_ADDR
22505: LD_INT 5
22507: PUSH
22508: FOR_TO
22509: IFFALSE 22621
// begin _x := ShiftX ( x , i , 3 ) ;
22511: LD_ADDR_VAR 0 7
22515: PUSH
22516: LD_VAR 0 5
22520: PPUSH
22521: LD_VAR 0 4
22525: PPUSH
22526: LD_INT 3
22528: PPUSH
22529: CALL_OW 272
22533: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22534: LD_ADDR_VAR 0 8
22538: PUSH
22539: LD_VAR 0 6
22543: PPUSH
22544: LD_VAR 0 4
22548: PPUSH
22549: LD_INT 3
22551: PPUSH
22552: CALL_OW 273
22556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22557: LD_VAR 0 7
22561: PPUSH
22562: LD_VAR 0 8
22566: PPUSH
22567: CALL_OW 488
22571: NOT
22572: IFFALSE 22576
// continue ;
22574: GO 22508
// if HexInfo ( _x , _y ) = 0 then
22576: LD_VAR 0 7
22580: PPUSH
22581: LD_VAR 0 8
22585: PPUSH
22586: CALL_OW 428
22590: PUSH
22591: LD_INT 0
22593: EQUAL
22594: IFFALSE 22619
// begin ComMoveXY ( unit , _x , _y ) ;
22596: LD_VAR 0 1
22600: PPUSH
22601: LD_VAR 0 7
22605: PPUSH
22606: LD_VAR 0 8
22610: PPUSH
22611: CALL_OW 111
// exit ;
22615: POP
22616: POP
22617: GO 22623
// end ; end ;
22619: GO 22508
22621: POP
22622: POP
// end ;
22623: LD_VAR 0 3
22627: RET
// export function ScanBase ( side , base_area ) ; begin
22628: LD_INT 0
22630: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22631: LD_ADDR_VAR 0 3
22635: PUSH
22636: LD_VAR 0 2
22640: PPUSH
22641: LD_INT 81
22643: PUSH
22644: LD_VAR 0 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 70
22657: ST_TO_ADDR
// end ;
22658: LD_VAR 0 3
22662: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22663: LD_INT 0
22665: PPUSH
22666: PPUSH
22667: PPUSH
22668: PPUSH
// result := false ;
22669: LD_ADDR_VAR 0 2
22673: PUSH
22674: LD_INT 0
22676: ST_TO_ADDR
// side := GetSide ( unit ) ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 1
22686: PPUSH
22687: CALL_OW 255
22691: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22692: LD_ADDR_VAR 0 4
22696: PUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 248
22706: ST_TO_ADDR
// case nat of 1 :
22707: LD_VAR 0 4
22711: PUSH
22712: LD_INT 1
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 22731
22720: POP
// tech := tech_lassight ; 2 :
22721: LD_ADDR_VAR 0 5
22725: PUSH
22726: LD_INT 12
22728: ST_TO_ADDR
22729: GO 22770
22731: LD_INT 2
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22750
22739: POP
// tech := tech_mortar ; 3 :
22740: LD_ADDR_VAR 0 5
22744: PUSH
22745: LD_INT 41
22747: ST_TO_ADDR
22748: GO 22770
22750: LD_INT 3
22752: DOUBLE
22753: EQUAL
22754: IFTRUE 22758
22756: GO 22769
22758: POP
// tech := tech_bazooka ; end ;
22759: LD_ADDR_VAR 0 5
22763: PUSH
22764: LD_INT 44
22766: ST_TO_ADDR
22767: GO 22770
22769: POP
// if Researched ( side , tech ) then
22770: LD_VAR 0 3
22774: PPUSH
22775: LD_VAR 0 5
22779: PPUSH
22780: CALL_OW 325
22784: IFFALSE 22811
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22786: LD_ADDR_VAR 0 2
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 8
22796: PUSH
22797: LD_INT 9
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: LD_VAR 0 4
22809: ARRAY
22810: ST_TO_ADDR
// end ;
22811: LD_VAR 0 2
22815: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22816: LD_INT 0
22818: PPUSH
22819: PPUSH
22820: PPUSH
// if not mines then
22821: LD_VAR 0 2
22825: NOT
22826: IFFALSE 22830
// exit ;
22828: GO 22974
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22830: LD_ADDR_VAR 0 5
22834: PUSH
22835: LD_INT 81
22837: PUSH
22838: LD_VAR 0 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: LD_INT 21
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 69
22872: ST_TO_ADDR
// for i in mines do
22873: LD_ADDR_VAR 0 4
22877: PUSH
22878: LD_VAR 0 2
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22972
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22886: LD_VAR 0 4
22890: PUSH
22891: LD_INT 1
22893: ARRAY
22894: PPUSH
22895: LD_VAR 0 4
22899: PUSH
22900: LD_INT 2
22902: ARRAY
22903: PPUSH
22904: CALL_OW 458
22908: NOT
22909: IFFALSE 22913
// continue ;
22911: GO 22883
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22913: LD_VAR 0 4
22917: PUSH
22918: LD_INT 1
22920: ARRAY
22921: PPUSH
22922: LD_VAR 0 4
22926: PUSH
22927: LD_INT 2
22929: ARRAY
22930: PPUSH
22931: CALL_OW 428
22935: PUSH
22936: LD_VAR 0 5
22940: IN
22941: IFFALSE 22970
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22943: LD_VAR 0 4
22947: PUSH
22948: LD_INT 1
22950: ARRAY
22951: PPUSH
22952: LD_VAR 0 4
22956: PUSH
22957: LD_INT 2
22959: ARRAY
22960: PPUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 456
// end ;
22970: GO 22883
22972: POP
22973: POP
// end ;
22974: LD_VAR 0 3
22978: RET
// export function Count ( array ) ; var i ; begin
22979: LD_INT 0
22981: PPUSH
22982: PPUSH
// result := 0 ;
22983: LD_ADDR_VAR 0 2
22987: PUSH
22988: LD_INT 0
22990: ST_TO_ADDR
// for i in array do
22991: LD_ADDR_VAR 0 3
22995: PUSH
22996: LD_VAR 0 1
23000: PUSH
23001: FOR_IN
23002: IFFALSE 23026
// if i then
23004: LD_VAR 0 3
23008: IFFALSE 23024
// result := result + 1 ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_VAR 0 2
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: ST_TO_ADDR
23024: GO 23001
23026: POP
23027: POP
// end ;
23028: LD_VAR 0 2
23032: RET
// export function IsEmpty ( building ) ; begin
23033: LD_INT 0
23035: PPUSH
// if not building then
23036: LD_VAR 0 1
23040: NOT
23041: IFFALSE 23045
// exit ;
23043: GO 23088
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_VAR 0 1
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 255
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 58
23074: PUSH
23075: EMPTY
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PPUSH
23082: CALL_OW 69
23086: IN
23087: ST_TO_ADDR
// end ;
23088: LD_VAR 0 2
23092: RET
// export function IsNotFull ( building ) ; begin
23093: LD_INT 0
23095: PPUSH
// if not building then
23096: LD_VAR 0 1
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23124
// result := UnitsInside ( building ) < 6 ;
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: LD_VAR 0 1
23114: PPUSH
23115: CALL_OW 313
23119: PUSH
23120: LD_INT 6
23122: LESS
23123: ST_TO_ADDR
// end ;
23124: LD_VAR 0 2
23128: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23129: LD_INT 0
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
// tmp := [ ] ;
23135: LD_ADDR_VAR 0 3
23139: PUSH
23140: EMPTY
23141: ST_TO_ADDR
// list := [ ] ;
23142: LD_ADDR_VAR 0 5
23146: PUSH
23147: EMPTY
23148: ST_TO_ADDR
// for i = 16 to 25 do
23149: LD_ADDR_VAR 0 4
23153: PUSH
23154: DOUBLE
23155: LD_INT 16
23157: DEC
23158: ST_TO_ADDR
23159: LD_INT 25
23161: PUSH
23162: FOR_TO
23163: IFFALSE 23236
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23165: LD_ADDR_VAR 0 3
23169: PUSH
23170: LD_VAR 0 3
23174: PUSH
23175: LD_INT 22
23177: PUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 255
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 91
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: LD_INT 6
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 30
23210: PUSH
23211: LD_VAR 0 4
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: PPUSH
23228: CALL_OW 69
23232: ADD
23233: ST_TO_ADDR
23234: GO 23162
23236: POP
23237: POP
// for i = 1 to tmp do
23238: LD_ADDR_VAR 0 4
23242: PUSH
23243: DOUBLE
23244: LD_INT 1
23246: DEC
23247: ST_TO_ADDR
23248: LD_VAR 0 3
23252: PUSH
23253: FOR_TO
23254: IFFALSE 23342
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23256: LD_ADDR_VAR 0 5
23260: PUSH
23261: LD_VAR 0 5
23265: PUSH
23266: LD_VAR 0 3
23270: PUSH
23271: LD_VAR 0 4
23275: ARRAY
23276: PPUSH
23277: CALL_OW 266
23281: PUSH
23282: LD_VAR 0 3
23286: PUSH
23287: LD_VAR 0 4
23291: ARRAY
23292: PPUSH
23293: CALL_OW 250
23297: PUSH
23298: LD_VAR 0 3
23302: PUSH
23303: LD_VAR 0 4
23307: ARRAY
23308: PPUSH
23309: CALL_OW 251
23313: PUSH
23314: LD_VAR 0 3
23318: PUSH
23319: LD_VAR 0 4
23323: ARRAY
23324: PPUSH
23325: CALL_OW 254
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: ADD
23339: ST_TO_ADDR
23340: GO 23253
23342: POP
23343: POP
// result := list ;
23344: LD_ADDR_VAR 0 2
23348: PUSH
23349: LD_VAR 0 5
23353: ST_TO_ADDR
// end ;
23354: LD_VAR 0 2
23358: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23359: LD_INT 0
23361: PPUSH
23362: PPUSH
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
23367: PPUSH
// if not factory then
23368: LD_VAR 0 1
23372: NOT
23373: IFFALSE 23377
// exit ;
23375: GO 23970
// if control = control_apeman then
23377: LD_VAR 0 4
23381: PUSH
23382: LD_INT 5
23384: EQUAL
23385: IFFALSE 23494
// begin tmp := UnitsInside ( factory ) ;
23387: LD_ADDR_VAR 0 8
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 313
23401: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23402: LD_VAR 0 8
23406: PPUSH
23407: LD_INT 25
23409: PUSH
23410: LD_INT 12
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PPUSH
23417: CALL_OW 72
23421: NOT
23422: IFFALSE 23432
// control := control_manual ;
23424: LD_ADDR_VAR 0 4
23428: PUSH
23429: LD_INT 1
23431: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23432: LD_ADDR_VAR 0 8
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL 23129 0 1
23446: ST_TO_ADDR
// if tmp then
23447: LD_VAR 0 8
23451: IFFALSE 23494
// begin for i in tmp do
23453: LD_ADDR_VAR 0 7
23457: PUSH
23458: LD_VAR 0 8
23462: PUSH
23463: FOR_IN
23464: IFFALSE 23492
// if i [ 1 ] = b_ext_radio then
23466: LD_VAR 0 7
23470: PUSH
23471: LD_INT 1
23473: ARRAY
23474: PUSH
23475: LD_INT 22
23477: EQUAL
23478: IFFALSE 23490
// begin control := control_remote ;
23480: LD_ADDR_VAR 0 4
23484: PUSH
23485: LD_INT 2
23487: ST_TO_ADDR
// break ;
23488: GO 23492
// end ;
23490: GO 23463
23492: POP
23493: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23494: LD_VAR 0 1
23498: PPUSH
23499: LD_VAR 0 2
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: LD_VAR 0 4
23513: PPUSH
23514: LD_VAR 0 5
23518: PPUSH
23519: CALL_OW 448
23523: IFFALSE 23558
// begin result := [ chassis , engine , control , weapon ] ;
23525: LD_ADDR_VAR 0 6
23529: PUSH
23530: LD_VAR 0 2
23534: PUSH
23535: LD_VAR 0 3
23539: PUSH
23540: LD_VAR 0 4
23544: PUSH
23545: LD_VAR 0 5
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: ST_TO_ADDR
// exit ;
23556: GO 23970
// end ; _chassis := AvailableChassisList ( factory ) ;
23558: LD_ADDR_VAR 0 9
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL_OW 475
23572: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23573: LD_ADDR_VAR 0 11
23577: PUSH
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 476
23587: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23588: LD_ADDR_VAR 0 12
23592: PUSH
23593: LD_VAR 0 1
23597: PPUSH
23598: CALL_OW 477
23602: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23603: LD_ADDR_VAR 0 10
23607: PUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 478
23617: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23618: LD_VAR 0 9
23622: NOT
23623: PUSH
23624: LD_VAR 0 11
23628: NOT
23629: OR
23630: PUSH
23631: LD_VAR 0 12
23635: NOT
23636: OR
23637: PUSH
23638: LD_VAR 0 10
23642: NOT
23643: OR
23644: IFFALSE 23679
// begin result := [ chassis , engine , control , weapon ] ;
23646: LD_ADDR_VAR 0 6
23650: PUSH
23651: LD_VAR 0 2
23655: PUSH
23656: LD_VAR 0 3
23660: PUSH
23661: LD_VAR 0 4
23665: PUSH
23666: LD_VAR 0 5
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: ST_TO_ADDR
// exit ;
23677: GO 23970
// end ; if not chassis in _chassis then
23679: LD_VAR 0 2
23683: PUSH
23684: LD_VAR 0 9
23688: IN
23689: NOT
23690: IFFALSE 23716
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23692: LD_ADDR_VAR 0 2
23696: PUSH
23697: LD_VAR 0 9
23701: PUSH
23702: LD_INT 1
23704: PPUSH
23705: LD_VAR 0 9
23709: PPUSH
23710: CALL_OW 12
23714: ARRAY
23715: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_VAR 0 3
23725: PPUSH
23726: CALL 23975 0 2
23730: NOT
23731: IFFALSE 23790
// repeat engine := _engine [ 1 ] ;
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_VAR 0 11
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23747: LD_ADDR_VAR 0 11
23751: PUSH
23752: LD_VAR 0 11
23756: PPUSH
23757: LD_INT 1
23759: PPUSH
23760: CALL_OW 3
23764: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_VAR 0 3
23774: PPUSH
23775: CALL 23975 0 2
23779: PUSH
23780: LD_VAR 0 11
23784: PUSH
23785: EMPTY
23786: EQUAL
23787: OR
23788: IFFALSE 23733
// if not control in _control then
23790: LD_VAR 0 4
23794: PUSH
23795: LD_VAR 0 12
23799: IN
23800: NOT
23801: IFFALSE 23827
// control := _control [ rand ( 1 , _control ) ] ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_VAR 0 12
23812: PUSH
23813: LD_INT 1
23815: PPUSH
23816: LD_VAR 0 12
23820: PPUSH
23821: CALL_OW 12
23825: ARRAY
23826: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23827: LD_VAR 0 2
23831: PPUSH
23832: LD_VAR 0 5
23836: PPUSH
23837: CALL 24195 0 2
23841: NOT
23842: IFFALSE 23901
// repeat weapon := _weapon [ 1 ] ;
23844: LD_ADDR_VAR 0 5
23848: PUSH
23849: LD_VAR 0 10
23853: PUSH
23854: LD_INT 1
23856: ARRAY
23857: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23858: LD_ADDR_VAR 0 10
23862: PUSH
23863: LD_VAR 0 10
23867: PPUSH
23868: LD_INT 1
23870: PPUSH
23871: CALL_OW 3
23875: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23876: LD_VAR 0 2
23880: PPUSH
23881: LD_VAR 0 5
23885: PPUSH
23886: CALL 24195 0 2
23890: PUSH
23891: LD_VAR 0 10
23895: PUSH
23896: EMPTY
23897: EQUAL
23898: OR
23899: IFFALSE 23844
// result := [ ] ;
23901: LD_ADDR_VAR 0 6
23905: PUSH
23906: EMPTY
23907: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_VAR 0 2
23917: PPUSH
23918: LD_VAR 0 3
23922: PPUSH
23923: LD_VAR 0 4
23927: PPUSH
23928: LD_VAR 0 5
23932: PPUSH
23933: CALL_OW 448
23937: IFFALSE 23970
// result := [ chassis , engine , control , weapon ] ;
23939: LD_ADDR_VAR 0 6
23943: PUSH
23944: LD_VAR 0 2
23948: PUSH
23949: LD_VAR 0 3
23953: PUSH
23954: LD_VAR 0 4
23958: PUSH
23959: LD_VAR 0 5
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: ST_TO_ADDR
// end ;
23970: LD_VAR 0 6
23974: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23975: LD_INT 0
23977: PPUSH
// if not chassis or not engine then
23978: LD_VAR 0 1
23982: NOT
23983: PUSH
23984: LD_VAR 0 2
23988: NOT
23989: OR
23990: IFFALSE 23994
// exit ;
23992: GO 24190
// case engine of engine_solar :
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 2
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24045
24007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24008: LD_ADDR_VAR 0 3
24012: PUSH
24013: LD_INT 11
24015: PUSH
24016: LD_INT 12
24018: PUSH
24019: LD_INT 13
24021: PUSH
24022: LD_INT 14
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 3
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: ST_TO_ADDR
24043: GO 24174
24045: LD_INT 1
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24115
24053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24054: LD_ADDR_VAR 0 3
24058: PUSH
24059: LD_INT 11
24061: PUSH
24062: LD_INT 12
24064: PUSH
24065: LD_INT 13
24067: PUSH
24068: LD_INT 14
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: LD_INT 4
24082: PUSH
24083: LD_INT 5
24085: PUSH
24086: LD_INT 21
24088: PUSH
24089: LD_INT 23
24091: PUSH
24092: LD_INT 22
24094: PUSH
24095: LD_INT 24
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
24113: GO 24174
24115: LD_INT 3
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24173
24123: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24124: LD_ADDR_VAR 0 3
24128: PUSH
24129: LD_INT 13
24131: PUSH
24132: LD_INT 14
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: LD_INT 21
24149: PUSH
24150: LD_INT 22
24152: PUSH
24153: LD_INT 23
24155: PUSH
24156: LD_INT 24
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: ST_TO_ADDR
24171: GO 24174
24173: POP
// result := ( chassis in result ) ;
24174: LD_ADDR_VAR 0 3
24178: PUSH
24179: LD_VAR 0 1
24183: PUSH
24184: LD_VAR 0 3
24188: IN
24189: ST_TO_ADDR
// end ;
24190: LD_VAR 0 3
24194: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24195: LD_INT 0
24197: PPUSH
// if not chassis or not weapon then
24198: LD_VAR 0 1
24202: NOT
24203: PUSH
24204: LD_VAR 0 2
24208: NOT
24209: OR
24210: IFFALSE 24214
// exit ;
24212: GO 25240
// case weapon of us_machine_gun :
24214: LD_VAR 0 2
24218: PUSH
24219: LD_INT 2
24221: DOUBLE
24222: EQUAL
24223: IFTRUE 24227
24225: GO 24257
24227: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24228: LD_ADDR_VAR 0 3
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 3
24241: PUSH
24242: LD_INT 4
24244: PUSH
24245: LD_INT 5
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: ST_TO_ADDR
24255: GO 25224
24257: LD_INT 3
24259: DOUBLE
24260: EQUAL
24261: IFTRUE 24265
24263: GO 24295
24265: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24266: LD_ADDR_VAR 0 3
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 3
24279: PUSH
24280: LD_INT 4
24282: PUSH
24283: LD_INT 5
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: ST_TO_ADDR
24293: GO 25224
24295: LD_INT 11
24297: DOUBLE
24298: EQUAL
24299: IFTRUE 24303
24301: GO 24333
24303: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: LD_INT 4
24320: PUSH
24321: LD_INT 5
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: ST_TO_ADDR
24331: GO 25224
24333: LD_INT 4
24335: DOUBLE
24336: EQUAL
24337: IFTRUE 24341
24339: GO 24367
24341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: LD_INT 4
24355: PUSH
24356: LD_INT 5
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: ST_TO_ADDR
24365: GO 25224
24367: LD_INT 5
24369: DOUBLE
24370: EQUAL
24371: IFTRUE 24375
24373: GO 24401
24375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_INT 2
24383: PUSH
24384: LD_INT 3
24386: PUSH
24387: LD_INT 4
24389: PUSH
24390: LD_INT 5
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: ST_TO_ADDR
24399: GO 25224
24401: LD_INT 9
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24435
24409: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24410: LD_ADDR_VAR 0 3
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 4
24423: PUSH
24424: LD_INT 5
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 25224
24435: LD_INT 7
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24469
24443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 3
24454: PUSH
24455: LD_INT 4
24457: PUSH
24458: LD_INT 5
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: ST_TO_ADDR
24467: GO 25224
24469: LD_INT 12
24471: DOUBLE
24472: EQUAL
24473: IFTRUE 24477
24475: GO 24503
24477: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24478: LD_ADDR_VAR 0 3
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: LD_INT 4
24491: PUSH
24492: LD_INT 5
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 25224
24503: LD_INT 13
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24537
24511: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 3
24522: PUSH
24523: LD_INT 4
24525: PUSH
24526: LD_INT 5
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
24535: GO 25224
24537: LD_INT 14
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24563
24545: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24546: LD_ADDR_VAR 0 3
24550: PUSH
24551: LD_INT 4
24553: PUSH
24554: LD_INT 5
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: ST_TO_ADDR
24561: GO 25224
24563: LD_INT 6
24565: DOUBLE
24566: EQUAL
24567: IFTRUE 24571
24569: GO 24589
24571: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24572: LD_ADDR_VAR 0 3
24576: PUSH
24577: LD_INT 4
24579: PUSH
24580: LD_INT 5
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: ST_TO_ADDR
24587: GO 25224
24589: LD_INT 10
24591: DOUBLE
24592: EQUAL
24593: IFTRUE 24597
24595: GO 24615
24597: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24598: LD_ADDR_VAR 0 3
24602: PUSH
24603: LD_INT 4
24605: PUSH
24606: LD_INT 5
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: ST_TO_ADDR
24613: GO 25224
24615: LD_INT 22
24617: DOUBLE
24618: EQUAL
24619: IFTRUE 24623
24621: GO 24649
24623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24624: LD_ADDR_VAR 0 3
24628: PUSH
24629: LD_INT 11
24631: PUSH
24632: LD_INT 12
24634: PUSH
24635: LD_INT 13
24637: PUSH
24638: LD_INT 14
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: ST_TO_ADDR
24647: GO 25224
24649: LD_INT 23
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24683
24657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24658: LD_ADDR_VAR 0 3
24662: PUSH
24663: LD_INT 11
24665: PUSH
24666: LD_INT 12
24668: PUSH
24669: LD_INT 13
24671: PUSH
24672: LD_INT 14
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: ST_TO_ADDR
24681: GO 25224
24683: LD_INT 24
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24691
24689: GO 24717
24691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24692: LD_ADDR_VAR 0 3
24696: PUSH
24697: LD_INT 11
24699: PUSH
24700: LD_INT 12
24702: PUSH
24703: LD_INT 13
24705: PUSH
24706: LD_INT 14
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: ST_TO_ADDR
24715: GO 25224
24717: LD_INT 30
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24751
24725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 11
24733: PUSH
24734: LD_INT 12
24736: PUSH
24737: LD_INT 13
24739: PUSH
24740: LD_INT 14
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 25224
24751: LD_INT 25
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24777
24759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_INT 13
24767: PUSH
24768: LD_INT 14
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: ST_TO_ADDR
24775: GO 25224
24777: LD_INT 27
24779: DOUBLE
24780: EQUAL
24781: IFTRUE 24785
24783: GO 24803
24785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24786: LD_ADDR_VAR 0 3
24790: PUSH
24791: LD_INT 13
24793: PUSH
24794: LD_INT 14
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: ST_TO_ADDR
24801: GO 25224
24803: LD_INT 28
24805: DOUBLE
24806: EQUAL
24807: IFTRUE 24811
24809: GO 24829
24811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_INT 13
24819: PUSH
24820: LD_INT 14
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: ST_TO_ADDR
24827: GO 25224
24829: LD_INT 29
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24855
24837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24838: LD_ADDR_VAR 0 3
24842: PUSH
24843: LD_INT 13
24845: PUSH
24846: LD_INT 14
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: ST_TO_ADDR
24853: GO 25224
24855: LD_INT 31
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 24881
24863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24864: LD_ADDR_VAR 0 3
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: LD_INT 14
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: ST_TO_ADDR
24879: GO 25224
24881: LD_INT 26
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 24907
24889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24890: LD_ADDR_VAR 0 3
24894: PUSH
24895: LD_INT 13
24897: PUSH
24898: LD_INT 14
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: ST_TO_ADDR
24905: GO 25224
24907: LD_INT 42
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 24941
24915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: LD_INT 21
24923: PUSH
24924: LD_INT 22
24926: PUSH
24927: LD_INT 23
24929: PUSH
24930: LD_INT 24
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25224
24941: LD_INT 43
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 24975
24949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_INT 21
24957: PUSH
24958: LD_INT 22
24960: PUSH
24961: LD_INT 23
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: ST_TO_ADDR
24973: GO 25224
24975: LD_INT 44
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25009
24983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_INT 21
24991: PUSH
24992: LD_INT 22
24994: PUSH
24995: LD_INT 23
24997: PUSH
24998: LD_INT 24
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: ST_TO_ADDR
25007: GO 25224
25009: LD_INT 45
25011: DOUBLE
25012: EQUAL
25013: IFTRUE 25017
25015: GO 25043
25017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25018: LD_ADDR_VAR 0 3
25022: PUSH
25023: LD_INT 21
25025: PUSH
25026: LD_INT 22
25028: PUSH
25029: LD_INT 23
25031: PUSH
25032: LD_INT 24
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: ST_TO_ADDR
25041: GO 25224
25043: LD_INT 49
25045: DOUBLE
25046: EQUAL
25047: IFTRUE 25051
25049: GO 25077
25051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25052: LD_ADDR_VAR 0 3
25056: PUSH
25057: LD_INT 21
25059: PUSH
25060: LD_INT 22
25062: PUSH
25063: LD_INT 23
25065: PUSH
25066: LD_INT 24
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: ST_TO_ADDR
25075: GO 25224
25077: LD_INT 51
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25111
25085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25086: LD_ADDR_VAR 0 3
25090: PUSH
25091: LD_INT 21
25093: PUSH
25094: LD_INT 22
25096: PUSH
25097: LD_INT 23
25099: PUSH
25100: LD_INT 24
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: ST_TO_ADDR
25109: GO 25224
25111: LD_INT 52
25113: DOUBLE
25114: EQUAL
25115: IFTRUE 25119
25117: GO 25145
25119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25120: LD_ADDR_VAR 0 3
25124: PUSH
25125: LD_INT 21
25127: PUSH
25128: LD_INT 22
25130: PUSH
25131: LD_INT 23
25133: PUSH
25134: LD_INT 24
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: ST_TO_ADDR
25143: GO 25224
25145: LD_INT 53
25147: DOUBLE
25148: EQUAL
25149: IFTRUE 25153
25151: GO 25171
25153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: LD_INT 23
25161: PUSH
25162: LD_INT 24
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: ST_TO_ADDR
25169: GO 25224
25171: LD_INT 46
25173: DOUBLE
25174: EQUAL
25175: IFTRUE 25179
25177: GO 25197
25179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_INT 23
25187: PUSH
25188: LD_INT 24
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: ST_TO_ADDR
25195: GO 25224
25197: LD_INT 47
25199: DOUBLE
25200: EQUAL
25201: IFTRUE 25205
25203: GO 25223
25205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25206: LD_ADDR_VAR 0 3
25210: PUSH
25211: LD_INT 23
25213: PUSH
25214: LD_INT 24
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: ST_TO_ADDR
25221: GO 25224
25223: POP
// result := ( chassis in result ) ;
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_VAR 0 1
25233: PUSH
25234: LD_VAR 0 3
25238: IN
25239: ST_TO_ADDR
// end ;
25240: LD_VAR 0 3
25244: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25245: LD_INT 0
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
// result := array ;
25254: LD_ADDR_VAR 0 5
25258: PUSH
25259: LD_VAR 0 1
25263: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25264: LD_VAR 0 1
25268: NOT
25269: PUSH
25270: LD_VAR 0 2
25274: NOT
25275: OR
25276: PUSH
25277: LD_VAR 0 3
25281: NOT
25282: OR
25283: PUSH
25284: LD_VAR 0 2
25288: PUSH
25289: LD_VAR 0 1
25293: GREATER
25294: OR
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_VAR 0 1
25305: GREATER
25306: OR
25307: IFFALSE 25311
// exit ;
25309: GO 25607
// if direction then
25311: LD_VAR 0 4
25315: IFFALSE 25379
// begin d := 1 ;
25317: LD_ADDR_VAR 0 9
25321: PUSH
25322: LD_INT 1
25324: ST_TO_ADDR
// if i_from > i_to then
25325: LD_VAR 0 2
25329: PUSH
25330: LD_VAR 0 3
25334: GREATER
25335: IFFALSE 25361
// length := ( array - i_from ) + i_to else
25337: LD_ADDR_VAR 0 11
25341: PUSH
25342: LD_VAR 0 1
25346: PUSH
25347: LD_VAR 0 2
25351: MINUS
25352: PUSH
25353: LD_VAR 0 3
25357: PLUS
25358: ST_TO_ADDR
25359: GO 25377
// length := i_to - i_from ;
25361: LD_ADDR_VAR 0 11
25365: PUSH
25366: LD_VAR 0 3
25370: PUSH
25371: LD_VAR 0 2
25375: MINUS
25376: ST_TO_ADDR
// end else
25377: GO 25440
// begin d := - 1 ;
25379: LD_ADDR_VAR 0 9
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: ST_TO_ADDR
// if i_from > i_to then
25388: LD_VAR 0 2
25392: PUSH
25393: LD_VAR 0 3
25397: GREATER
25398: IFFALSE 25418
// length := i_from - i_to else
25400: LD_ADDR_VAR 0 11
25404: PUSH
25405: LD_VAR 0 2
25409: PUSH
25410: LD_VAR 0 3
25414: MINUS
25415: ST_TO_ADDR
25416: GO 25440
// length := ( array - i_to ) + i_from ;
25418: LD_ADDR_VAR 0 11
25422: PUSH
25423: LD_VAR 0 1
25427: PUSH
25428: LD_VAR 0 3
25432: MINUS
25433: PUSH
25434: LD_VAR 0 2
25438: PLUS
25439: ST_TO_ADDR
// end ; if not length then
25440: LD_VAR 0 11
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25607
// tmp := array ;
25449: LD_ADDR_VAR 0 10
25453: PUSH
25454: LD_VAR 0 1
25458: ST_TO_ADDR
// for i = 1 to length do
25459: LD_ADDR_VAR 0 6
25463: PUSH
25464: DOUBLE
25465: LD_INT 1
25467: DEC
25468: ST_TO_ADDR
25469: LD_VAR 0 11
25473: PUSH
25474: FOR_TO
25475: IFFALSE 25595
// begin for j = 1 to array do
25477: LD_ADDR_VAR 0 7
25481: PUSH
25482: DOUBLE
25483: LD_INT 1
25485: DEC
25486: ST_TO_ADDR
25487: LD_VAR 0 1
25491: PUSH
25492: FOR_TO
25493: IFFALSE 25581
// begin k := j + d ;
25495: LD_ADDR_VAR 0 8
25499: PUSH
25500: LD_VAR 0 7
25504: PUSH
25505: LD_VAR 0 9
25509: PLUS
25510: ST_TO_ADDR
// if k > array then
25511: LD_VAR 0 8
25515: PUSH
25516: LD_VAR 0 1
25520: GREATER
25521: IFFALSE 25531
// k := 1 ;
25523: LD_ADDR_VAR 0 8
25527: PUSH
25528: LD_INT 1
25530: ST_TO_ADDR
// if not k then
25531: LD_VAR 0 8
25535: NOT
25536: IFFALSE 25548
// k := array ;
25538: LD_ADDR_VAR 0 8
25542: PUSH
25543: LD_VAR 0 1
25547: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25548: LD_ADDR_VAR 0 10
25552: PUSH
25553: LD_VAR 0 10
25557: PPUSH
25558: LD_VAR 0 8
25562: PPUSH
25563: LD_VAR 0 1
25567: PUSH
25568: LD_VAR 0 7
25572: ARRAY
25573: PPUSH
25574: CALL_OW 1
25578: ST_TO_ADDR
// end ;
25579: GO 25492
25581: POP
25582: POP
// array := tmp ;
25583: LD_ADDR_VAR 0 1
25587: PUSH
25588: LD_VAR 0 10
25592: ST_TO_ADDR
// end ;
25593: GO 25474
25595: POP
25596: POP
// result := array ;
25597: LD_ADDR_VAR 0 5
25601: PUSH
25602: LD_VAR 0 1
25606: ST_TO_ADDR
// end ;
25607: LD_VAR 0 5
25611: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25612: LD_INT 0
25614: PPUSH
25615: PPUSH
// result := 0 ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_INT 0
25623: ST_TO_ADDR
// if not array or not value in array then
25624: LD_VAR 0 1
25628: NOT
25629: PUSH
25630: LD_VAR 0 2
25634: PUSH
25635: LD_VAR 0 1
25639: IN
25640: NOT
25641: OR
25642: IFFALSE 25646
// exit ;
25644: GO 25700
// for i = 1 to array do
25646: LD_ADDR_VAR 0 4
25650: PUSH
25651: DOUBLE
25652: LD_INT 1
25654: DEC
25655: ST_TO_ADDR
25656: LD_VAR 0 1
25660: PUSH
25661: FOR_TO
25662: IFFALSE 25698
// if value = array [ i ] then
25664: LD_VAR 0 2
25668: PUSH
25669: LD_VAR 0 1
25673: PUSH
25674: LD_VAR 0 4
25678: ARRAY
25679: EQUAL
25680: IFFALSE 25696
// begin result := i ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_VAR 0 4
25691: ST_TO_ADDR
// exit ;
25692: POP
25693: POP
25694: GO 25700
// end ;
25696: GO 25661
25698: POP
25699: POP
// end ;
25700: LD_VAR 0 3
25704: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25705: LD_INT 0
25707: PPUSH
// vc_chassis := chassis ;
25708: LD_ADDR_OWVAR 37
25712: PUSH
25713: LD_VAR 0 1
25717: ST_TO_ADDR
// vc_engine := engine ;
25718: LD_ADDR_OWVAR 39
25722: PUSH
25723: LD_VAR 0 2
25727: ST_TO_ADDR
// vc_control := control ;
25728: LD_ADDR_OWVAR 38
25732: PUSH
25733: LD_VAR 0 3
25737: ST_TO_ADDR
// vc_weapon := weapon ;
25738: LD_ADDR_OWVAR 40
25742: PUSH
25743: LD_VAR 0 4
25747: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25748: LD_ADDR_OWVAR 41
25752: PUSH
25753: LD_VAR 0 5
25757: ST_TO_ADDR
// end ;
25758: LD_VAR 0 6
25762: RET
// export function WantPlant ( unit ) ; var task ; begin
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// result := false ;
25767: LD_ADDR_VAR 0 2
25771: PUSH
25772: LD_INT 0
25774: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25775: LD_ADDR_VAR 0 3
25779: PUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 437
25789: ST_TO_ADDR
// if task then
25790: LD_VAR 0 3
25794: IFFALSE 25822
// if task [ 1 ] [ 1 ] = p then
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 1
25803: ARRAY
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: PUSH
25809: LD_STRING p
25811: EQUAL
25812: IFFALSE 25822
// result := true ;
25814: LD_ADDR_VAR 0 2
25818: PUSH
25819: LD_INT 1
25821: ST_TO_ADDR
// end ;
25822: LD_VAR 0 2
25826: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
// if pos < 1 then
25833: LD_VAR 0 2
25837: PUSH
25838: LD_INT 1
25840: LESS
25841: IFFALSE 25845
// exit ;
25843: GO 26148
// if pos = 1 then
25845: LD_VAR 0 2
25849: PUSH
25850: LD_INT 1
25852: EQUAL
25853: IFFALSE 25886
// result := Replace ( arr , pos [ 1 ] , value ) else
25855: LD_ADDR_VAR 0 4
25859: PUSH
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_VAR 0 2
25869: PUSH
25870: LD_INT 1
25872: ARRAY
25873: PPUSH
25874: LD_VAR 0 3
25878: PPUSH
25879: CALL_OW 1
25883: ST_TO_ADDR
25884: GO 26148
// begin tmp := arr ;
25886: LD_ADDR_VAR 0 6
25890: PUSH
25891: LD_VAR 0 1
25895: ST_TO_ADDR
// s_arr := [ tmp ] ;
25896: LD_ADDR_VAR 0 7
25900: PUSH
25901: LD_VAR 0 6
25905: PUSH
25906: EMPTY
25907: LIST
25908: ST_TO_ADDR
// for i = 1 to pos - 1 do
25909: LD_ADDR_VAR 0 5
25913: PUSH
25914: DOUBLE
25915: LD_INT 1
25917: DEC
25918: ST_TO_ADDR
25919: LD_VAR 0 2
25923: PUSH
25924: LD_INT 1
25926: MINUS
25927: PUSH
25928: FOR_TO
25929: IFFALSE 25974
// begin tmp := tmp [ pos [ i ] ] ;
25931: LD_ADDR_VAR 0 6
25935: PUSH
25936: LD_VAR 0 6
25940: PUSH
25941: LD_VAR 0 2
25945: PUSH
25946: LD_VAR 0 5
25950: ARRAY
25951: ARRAY
25952: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25953: LD_ADDR_VAR 0 7
25957: PUSH
25958: LD_VAR 0 7
25962: PUSH
25963: LD_VAR 0 6
25967: PUSH
25968: EMPTY
25969: LIST
25970: ADD
25971: ST_TO_ADDR
// end ;
25972: GO 25928
25974: POP
25975: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25976: LD_ADDR_VAR 0 6
25980: PUSH
25981: LD_VAR 0 6
25985: PPUSH
25986: LD_VAR 0 2
25990: PUSH
25991: LD_VAR 0 2
25995: ARRAY
25996: PPUSH
25997: LD_VAR 0 3
26001: PPUSH
26002: CALL_OW 1
26006: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26007: LD_ADDR_VAR 0 7
26011: PUSH
26012: LD_VAR 0 7
26016: PPUSH
26017: LD_VAR 0 7
26021: PPUSH
26022: LD_VAR 0 6
26026: PPUSH
26027: CALL_OW 1
26031: ST_TO_ADDR
// for i = s_arr downto 2 do
26032: LD_ADDR_VAR 0 5
26036: PUSH
26037: DOUBLE
26038: LD_VAR 0 7
26042: INC
26043: ST_TO_ADDR
26044: LD_INT 2
26046: PUSH
26047: FOR_DOWNTO
26048: IFFALSE 26132
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26050: LD_ADDR_VAR 0 6
26054: PUSH
26055: LD_VAR 0 7
26059: PUSH
26060: LD_VAR 0 5
26064: PUSH
26065: LD_INT 1
26067: MINUS
26068: ARRAY
26069: PPUSH
26070: LD_VAR 0 2
26074: PUSH
26075: LD_VAR 0 5
26079: PUSH
26080: LD_INT 1
26082: MINUS
26083: ARRAY
26084: PPUSH
26085: LD_VAR 0 7
26089: PUSH
26090: LD_VAR 0 5
26094: ARRAY
26095: PPUSH
26096: CALL_OW 1
26100: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26101: LD_ADDR_VAR 0 7
26105: PUSH
26106: LD_VAR 0 7
26110: PPUSH
26111: LD_VAR 0 5
26115: PUSH
26116: LD_INT 1
26118: MINUS
26119: PPUSH
26120: LD_VAR 0 6
26124: PPUSH
26125: CALL_OW 1
26129: ST_TO_ADDR
// end ;
26130: GO 26047
26132: POP
26133: POP
// result := s_arr [ 1 ] ;
26134: LD_ADDR_VAR 0 4
26138: PUSH
26139: LD_VAR 0 7
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: ST_TO_ADDR
// end ; end ;
26148: LD_VAR 0 4
26152: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
// if not list then
26157: LD_VAR 0 1
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26257
// i := list [ pos1 ] ;
26166: LD_ADDR_VAR 0 5
26170: PUSH
26171: LD_VAR 0 1
26175: PUSH
26176: LD_VAR 0 2
26180: ARRAY
26181: ST_TO_ADDR
// if not i then
26182: LD_VAR 0 5
26186: NOT
26187: IFFALSE 26191
// exit ;
26189: GO 26257
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26191: LD_ADDR_VAR 0 1
26195: PUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_VAR 0 2
26205: PPUSH
26206: LD_VAR 0 1
26210: PUSH
26211: LD_VAR 0 3
26215: ARRAY
26216: PPUSH
26217: CALL_OW 1
26221: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26222: LD_ADDR_VAR 0 1
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_VAR 0 3
26236: PPUSH
26237: LD_VAR 0 5
26241: PPUSH
26242: CALL_OW 1
26246: ST_TO_ADDR
// result := list ;
26247: LD_ADDR_VAR 0 4
26251: PUSH
26252: LD_VAR 0 1
26256: ST_TO_ADDR
// end ;
26257: LD_VAR 0 4
26261: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26262: LD_INT 0
26264: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26265: LD_ADDR_VAR 0 5
26269: PUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 250
26279: PPUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 251
26289: PPUSH
26290: LD_VAR 0 2
26294: PPUSH
26295: LD_VAR 0 3
26299: PPUSH
26300: LD_VAR 0 4
26304: PPUSH
26305: CALL 26315 0 5
26309: ST_TO_ADDR
// end ;
26310: LD_VAR 0 5
26314: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26315: LD_INT 0
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
// if not list then
26321: LD_VAR 0 3
26325: NOT
26326: IFFALSE 26330
// exit ;
26328: GO 26718
// result := [ ] ;
26330: LD_ADDR_VAR 0 6
26334: PUSH
26335: EMPTY
26336: ST_TO_ADDR
// for i in list do
26337: LD_ADDR_VAR 0 7
26341: PUSH
26342: LD_VAR 0 3
26346: PUSH
26347: FOR_IN
26348: IFFALSE 26550
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26350: LD_ADDR_VAR 0 9
26354: PUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: LD_VAR 0 2
26369: PPUSH
26370: CALL_OW 297
26374: ST_TO_ADDR
// if not result then
26375: LD_VAR 0 6
26379: NOT
26380: IFFALSE 26406
// result := [ [ i , tmp ] ] else
26382: LD_ADDR_VAR 0 6
26386: PUSH
26387: LD_VAR 0 7
26391: PUSH
26392: LD_VAR 0 9
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: EMPTY
26402: LIST
26403: ST_TO_ADDR
26404: GO 26548
// begin if result [ result ] [ 2 ] < tmp then
26406: LD_VAR 0 6
26410: PUSH
26411: LD_VAR 0 6
26415: ARRAY
26416: PUSH
26417: LD_INT 2
26419: ARRAY
26420: PUSH
26421: LD_VAR 0 9
26425: LESS
26426: IFFALSE 26468
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26428: LD_ADDR_VAR 0 6
26432: PUSH
26433: LD_VAR 0 6
26437: PPUSH
26438: LD_VAR 0 6
26442: PUSH
26443: LD_INT 1
26445: PLUS
26446: PPUSH
26447: LD_VAR 0 7
26451: PUSH
26452: LD_VAR 0 9
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PPUSH
26461: CALL_OW 2
26465: ST_TO_ADDR
26466: GO 26548
// for j = 1 to result do
26468: LD_ADDR_VAR 0 8
26472: PUSH
26473: DOUBLE
26474: LD_INT 1
26476: DEC
26477: ST_TO_ADDR
26478: LD_VAR 0 6
26482: PUSH
26483: FOR_TO
26484: IFFALSE 26546
// begin if tmp < result [ j ] [ 2 ] then
26486: LD_VAR 0 9
26490: PUSH
26491: LD_VAR 0 6
26495: PUSH
26496: LD_VAR 0 8
26500: ARRAY
26501: PUSH
26502: LD_INT 2
26504: ARRAY
26505: LESS
26506: IFFALSE 26544
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26508: LD_ADDR_VAR 0 6
26512: PUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: LD_VAR 0 8
26522: PPUSH
26523: LD_VAR 0 7
26527: PUSH
26528: LD_VAR 0 9
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PPUSH
26537: CALL_OW 2
26541: ST_TO_ADDR
// break ;
26542: GO 26546
// end ; end ;
26544: GO 26483
26546: POP
26547: POP
// end ; end ;
26548: GO 26347
26550: POP
26551: POP
// if result and not asc then
26552: LD_VAR 0 6
26556: PUSH
26557: LD_VAR 0 4
26561: NOT
26562: AND
26563: IFFALSE 26638
// begin tmp := result ;
26565: LD_ADDR_VAR 0 9
26569: PUSH
26570: LD_VAR 0 6
26574: ST_TO_ADDR
// for i = tmp downto 1 do
26575: LD_ADDR_VAR 0 7
26579: PUSH
26580: DOUBLE
26581: LD_VAR 0 9
26585: INC
26586: ST_TO_ADDR
26587: LD_INT 1
26589: PUSH
26590: FOR_DOWNTO
26591: IFFALSE 26636
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26593: LD_ADDR_VAR 0 6
26597: PUSH
26598: LD_VAR 0 6
26602: PPUSH
26603: LD_VAR 0 9
26607: PUSH
26608: LD_VAR 0 7
26612: MINUS
26613: PUSH
26614: LD_INT 1
26616: PLUS
26617: PPUSH
26618: LD_VAR 0 9
26622: PUSH
26623: LD_VAR 0 7
26627: ARRAY
26628: PPUSH
26629: CALL_OW 1
26633: ST_TO_ADDR
26634: GO 26590
26636: POP
26637: POP
// end ; tmp := [ ] ;
26638: LD_ADDR_VAR 0 9
26642: PUSH
26643: EMPTY
26644: ST_TO_ADDR
// if mode then
26645: LD_VAR 0 5
26649: IFFALSE 26718
// begin for i = 1 to result do
26651: LD_ADDR_VAR 0 7
26655: PUSH
26656: DOUBLE
26657: LD_INT 1
26659: DEC
26660: ST_TO_ADDR
26661: LD_VAR 0 6
26665: PUSH
26666: FOR_TO
26667: IFFALSE 26706
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26669: LD_ADDR_VAR 0 9
26673: PUSH
26674: LD_VAR 0 9
26678: PPUSH
26679: LD_VAR 0 7
26683: PPUSH
26684: LD_VAR 0 6
26688: PUSH
26689: LD_VAR 0 7
26693: ARRAY
26694: PUSH
26695: LD_INT 1
26697: ARRAY
26698: PPUSH
26699: CALL_OW 1
26703: ST_TO_ADDR
26704: GO 26666
26706: POP
26707: POP
// result := tmp ;
26708: LD_ADDR_VAR 0 6
26712: PUSH
26713: LD_VAR 0 9
26717: ST_TO_ADDR
// end ; end ;
26718: LD_VAR 0 6
26722: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: ST_TO_ADDR
// if not x or not y then
26753: LD_VAR 0 2
26757: NOT
26758: PUSH
26759: LD_VAR 0 3
26763: NOT
26764: OR
26765: IFFALSE 26769
// exit ;
26767: GO 28415
// if not range then
26769: LD_VAR 0 4
26773: NOT
26774: IFFALSE 26784
// range := 10 ;
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: LD_INT 10
26783: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26784: LD_ADDR_VAR 0 8
26788: PUSH
26789: LD_INT 81
26791: PUSH
26792: LD_VAR 0 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 92
26803: PUSH
26804: LD_VAR 0 2
26808: PUSH
26809: LD_VAR 0 3
26813: PUSH
26814: LD_VAR 0 4
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 3
26827: PUSH
26828: LD_INT 21
26830: PUSH
26831: LD_INT 3
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if not tmp then
26852: LD_VAR 0 8
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 28415
// for i in tmp do
26861: LD_ADDR_VAR 0 6
26865: PUSH
26866: LD_VAR 0 8
26870: PUSH
26871: FOR_IN
26872: IFFALSE 28390
// begin points := [ 0 , 0 , 0 ] ;
26874: LD_ADDR_VAR 0 9
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// bpoints := 1 ;
26893: LD_ADDR_VAR 0 10
26897: PUSH
26898: LD_INT 1
26900: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26901: LD_VAR 0 6
26905: PPUSH
26906: CALL_OW 247
26910: PUSH
26911: LD_INT 1
26913: DOUBLE
26914: EQUAL
26915: IFTRUE 26919
26917: GO 27497
26919: POP
// begin if GetClass ( i ) = 1 then
26920: LD_VAR 0 6
26924: PPUSH
26925: CALL_OW 257
26929: PUSH
26930: LD_INT 1
26932: EQUAL
26933: IFFALSE 26954
// points := [ 10 , 5 , 3 ] ;
26935: LD_ADDR_VAR 0 9
26939: PUSH
26940: LD_INT 10
26942: PUSH
26943: LD_INT 5
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26954: LD_VAR 0 6
26958: PPUSH
26959: CALL_OW 257
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: LD_INT 4
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: IN
26978: IFFALSE 26999
// points := [ 3 , 2 , 1 ] ;
26980: LD_ADDR_VAR 0 9
26984: PUSH
26985: LD_INT 3
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26999: LD_VAR 0 6
27003: PPUSH
27004: CALL_OW 257
27008: PUSH
27009: LD_INT 5
27011: EQUAL
27012: IFFALSE 27033
// points := [ 130 , 5 , 2 ] ;
27014: LD_ADDR_VAR 0 9
27018: PUSH
27019: LD_INT 130
27021: PUSH
27022: LD_INT 5
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27033: LD_VAR 0 6
27037: PPUSH
27038: CALL_OW 257
27042: PUSH
27043: LD_INT 8
27045: EQUAL
27046: IFFALSE 27067
// points := [ 35 , 35 , 30 ] ;
27048: LD_ADDR_VAR 0 9
27052: PUSH
27053: LD_INT 35
27055: PUSH
27056: LD_INT 35
27058: PUSH
27059: LD_INT 30
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27067: LD_VAR 0 6
27071: PPUSH
27072: CALL_OW 257
27076: PUSH
27077: LD_INT 9
27079: EQUAL
27080: IFFALSE 27101
// points := [ 20 , 55 , 40 ] ;
27082: LD_ADDR_VAR 0 9
27086: PUSH
27087: LD_INT 20
27089: PUSH
27090: LD_INT 55
27092: PUSH
27093: LD_INT 40
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27101: LD_VAR 0 6
27105: PPUSH
27106: CALL_OW 257
27110: PUSH
27111: LD_INT 12
27113: PUSH
27114: LD_INT 16
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: IN
27121: IFFALSE 27142
// points := [ 5 , 3 , 2 ] ;
27123: LD_ADDR_VAR 0 9
27127: PUSH
27128: LD_INT 5
27130: PUSH
27131: LD_INT 3
27133: PUSH
27134: LD_INT 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27142: LD_VAR 0 6
27146: PPUSH
27147: CALL_OW 257
27151: PUSH
27152: LD_INT 17
27154: EQUAL
27155: IFFALSE 27176
// points := [ 100 , 50 , 75 ] ;
27157: LD_ADDR_VAR 0 9
27161: PUSH
27162: LD_INT 100
27164: PUSH
27165: LD_INT 50
27167: PUSH
27168: LD_INT 75
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27176: LD_VAR 0 6
27180: PPUSH
27181: CALL_OW 257
27185: PUSH
27186: LD_INT 15
27188: EQUAL
27189: IFFALSE 27210
// points := [ 10 , 5 , 3 ] ;
27191: LD_ADDR_VAR 0 9
27195: PUSH
27196: LD_INT 10
27198: PUSH
27199: LD_INT 5
27201: PUSH
27202: LD_INT 3
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27210: LD_VAR 0 6
27214: PPUSH
27215: CALL_OW 257
27219: PUSH
27220: LD_INT 14
27222: EQUAL
27223: IFFALSE 27244
// points := [ 10 , 0 , 0 ] ;
27225: LD_ADDR_VAR 0 9
27229: PUSH
27230: LD_INT 10
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27244: LD_VAR 0 6
27248: PPUSH
27249: CALL_OW 257
27253: PUSH
27254: LD_INT 11
27256: EQUAL
27257: IFFALSE 27278
// points := [ 30 , 10 , 5 ] ;
27259: LD_ADDR_VAR 0 9
27263: PUSH
27264: LD_INT 30
27266: PUSH
27267: LD_INT 10
27269: PUSH
27270: LD_INT 5
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27278: LD_VAR 0 1
27282: PPUSH
27283: LD_INT 5
27285: PPUSH
27286: CALL_OW 321
27290: PUSH
27291: LD_INT 2
27293: EQUAL
27294: IFFALSE 27311
// bpoints := bpoints * 1.8 ;
27296: LD_ADDR_VAR 0 10
27300: PUSH
27301: LD_VAR 0 10
27305: PUSH
27306: LD_REAL  1.80000000000000E+0000
27309: MUL
27310: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27311: LD_VAR 0 6
27315: PPUSH
27316: CALL_OW 257
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: LD_INT 4
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: IN
27339: PUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_INT 51
27347: PPUSH
27348: CALL_OW 321
27352: PUSH
27353: LD_INT 2
27355: EQUAL
27356: AND
27357: IFFALSE 27374
// bpoints := bpoints * 1.2 ;
27359: LD_ADDR_VAR 0 10
27363: PUSH
27364: LD_VAR 0 10
27368: PUSH
27369: LD_REAL  1.20000000000000E+0000
27372: MUL
27373: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27374: LD_VAR 0 6
27378: PPUSH
27379: CALL_OW 257
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: LD_INT 7
27389: PUSH
27390: LD_INT 9
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: IN
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_INT 52
27406: PPUSH
27407: CALL_OW 321
27411: PUSH
27412: LD_INT 2
27414: EQUAL
27415: AND
27416: IFFALSE 27433
// bpoints := bpoints * 1.5 ;
27418: LD_ADDR_VAR 0 10
27422: PUSH
27423: LD_VAR 0 10
27427: PUSH
27428: LD_REAL  1.50000000000000E+0000
27431: MUL
27432: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27433: LD_VAR 0 1
27437: PPUSH
27438: LD_INT 66
27440: PPUSH
27441: CALL_OW 321
27445: PUSH
27446: LD_INT 2
27448: EQUAL
27449: IFFALSE 27466
// bpoints := bpoints * 1.1 ;
27451: LD_ADDR_VAR 0 10
27455: PUSH
27456: LD_VAR 0 10
27460: PUSH
27461: LD_REAL  1.10000000000000E+0000
27464: MUL
27465: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27466: LD_ADDR_VAR 0 10
27470: PUSH
27471: LD_VAR 0 10
27475: PUSH
27476: LD_VAR 0 6
27480: PPUSH
27481: LD_INT 1
27483: PPUSH
27484: CALL_OW 259
27488: PUSH
27489: LD_REAL  1.15000000000000E+0000
27492: MUL
27493: MUL
27494: ST_TO_ADDR
// end ; unit_vehicle :
27495: GO 28319
27497: LD_INT 2
27499: DOUBLE
27500: EQUAL
27501: IFTRUE 27505
27503: GO 28307
27505: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27506: LD_VAR 0 6
27510: PPUSH
27511: CALL_OW 264
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 42
27521: PUSH
27522: LD_INT 24
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: IN
27530: IFFALSE 27551
// points := [ 25 , 5 , 3 ] ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_INT 25
27539: PUSH
27540: LD_INT 5
27542: PUSH
27543: LD_INT 3
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27551: LD_VAR 0 6
27555: PPUSH
27556: CALL_OW 264
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: LD_INT 43
27566: PUSH
27567: LD_INT 25
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: IN
27575: IFFALSE 27596
// points := [ 40 , 15 , 5 ] ;
27577: LD_ADDR_VAR 0 9
27581: PUSH
27582: LD_INT 40
27584: PUSH
27585: LD_INT 15
27587: PUSH
27588: LD_INT 5
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: LIST
27595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27596: LD_VAR 0 6
27600: PPUSH
27601: CALL_OW 264
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 23
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: IN
27616: IFFALSE 27637
// points := [ 7 , 25 , 8 ] ;
27618: LD_ADDR_VAR 0 9
27622: PUSH
27623: LD_INT 7
27625: PUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 8
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27637: LD_VAR 0 6
27641: PPUSH
27642: CALL_OW 264
27646: PUSH
27647: LD_INT 5
27649: PUSH
27650: LD_INT 27
27652: PUSH
27653: LD_INT 44
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: IN
27661: IFFALSE 27682
// points := [ 14 , 50 , 16 ] ;
27663: LD_ADDR_VAR 0 9
27667: PUSH
27668: LD_INT 14
27670: PUSH
27671: LD_INT 50
27673: PUSH
27674: LD_INT 16
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27682: LD_VAR 0 6
27686: PPUSH
27687: CALL_OW 264
27691: PUSH
27692: LD_INT 6
27694: PUSH
27695: LD_INT 46
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: IN
27702: IFFALSE 27723
// points := [ 32 , 120 , 70 ] ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 32
27711: PUSH
27712: LD_INT 120
27714: PUSH
27715: LD_INT 70
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27723: LD_VAR 0 6
27727: PPUSH
27728: CALL_OW 264
27732: PUSH
27733: LD_INT 7
27735: PUSH
27736: LD_INT 28
27738: PUSH
27739: LD_INT 45
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: IN
27747: IFFALSE 27768
// points := [ 35 , 20 , 45 ] ;
27749: LD_ADDR_VAR 0 9
27753: PUSH
27754: LD_INT 35
27756: PUSH
27757: LD_INT 20
27759: PUSH
27760: LD_INT 45
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27768: LD_VAR 0 6
27772: PPUSH
27773: CALL_OW 264
27777: PUSH
27778: LD_INT 47
27780: PUSH
27781: EMPTY
27782: LIST
27783: IN
27784: IFFALSE 27805
// points := [ 67 , 45 , 75 ] ;
27786: LD_ADDR_VAR 0 9
27790: PUSH
27791: LD_INT 67
27793: PUSH
27794: LD_INT 45
27796: PUSH
27797: LD_INT 75
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 264
27814: PUSH
27815: LD_INT 26
27817: PUSH
27818: EMPTY
27819: LIST
27820: IN
27821: IFFALSE 27842
// points := [ 120 , 30 , 80 ] ;
27823: LD_ADDR_VAR 0 9
27827: PUSH
27828: LD_INT 120
27830: PUSH
27831: LD_INT 30
27833: PUSH
27834: LD_INT 80
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27842: LD_VAR 0 6
27846: PPUSH
27847: CALL_OW 264
27851: PUSH
27852: LD_INT 22
27854: PUSH
27855: EMPTY
27856: LIST
27857: IN
27858: IFFALSE 27879
// points := [ 40 , 1 , 1 ] ;
27860: LD_ADDR_VAR 0 9
27864: PUSH
27865: LD_INT 40
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27879: LD_VAR 0 6
27883: PPUSH
27884: CALL_OW 264
27888: PUSH
27889: LD_INT 29
27891: PUSH
27892: EMPTY
27893: LIST
27894: IN
27895: IFFALSE 27916
// points := [ 70 , 200 , 400 ] ;
27897: LD_ADDR_VAR 0 9
27901: PUSH
27902: LD_INT 70
27904: PUSH
27905: LD_INT 200
27907: PUSH
27908: LD_INT 400
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27916: LD_VAR 0 6
27920: PPUSH
27921: CALL_OW 264
27925: PUSH
27926: LD_INT 14
27928: PUSH
27929: LD_INT 53
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: IN
27936: IFFALSE 27957
// points := [ 40 , 10 , 20 ] ;
27938: LD_ADDR_VAR 0 9
27942: PUSH
27943: LD_INT 40
27945: PUSH
27946: LD_INT 10
27948: PUSH
27949: LD_INT 20
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27957: LD_VAR 0 6
27961: PPUSH
27962: CALL_OW 264
27966: PUSH
27967: LD_INT 9
27969: PUSH
27970: EMPTY
27971: LIST
27972: IN
27973: IFFALSE 27994
// points := [ 5 , 70 , 20 ] ;
27975: LD_ADDR_VAR 0 9
27979: PUSH
27980: LD_INT 5
27982: PUSH
27983: LD_INT 70
27985: PUSH
27986: LD_INT 20
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27994: LD_VAR 0 6
27998: PPUSH
27999: CALL_OW 264
28003: PUSH
28004: LD_INT 10
28006: PUSH
28007: EMPTY
28008: LIST
28009: IN
28010: IFFALSE 28031
// points := [ 35 , 110 , 70 ] ;
28012: LD_ADDR_VAR 0 9
28016: PUSH
28017: LD_INT 35
28019: PUSH
28020: LD_INT 110
28022: PUSH
28023: LD_INT 70
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28031: LD_VAR 0 6
28035: PPUSH
28036: CALL_OW 265
28040: PUSH
28041: LD_INT 25
28043: EQUAL
28044: IFFALSE 28065
// points := [ 80 , 65 , 100 ] ;
28046: LD_ADDR_VAR 0 9
28050: PUSH
28051: LD_INT 80
28053: PUSH
28054: LD_INT 65
28056: PUSH
28057: LD_INT 100
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 263
28074: PUSH
28075: LD_INT 1
28077: EQUAL
28078: IFFALSE 28113
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28080: LD_ADDR_VAR 0 10
28084: PUSH
28085: LD_VAR 0 10
28089: PUSH
28090: LD_VAR 0 6
28094: PPUSH
28095: CALL_OW 311
28099: PPUSH
28100: LD_INT 3
28102: PPUSH
28103: CALL_OW 259
28107: PUSH
28108: LD_INT 4
28110: MUL
28111: MUL
28112: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 263
28122: PUSH
28123: LD_INT 2
28125: EQUAL
28126: IFFALSE 28177
// begin j := IsControledBy ( i ) ;
28128: LD_ADDR_VAR 0 7
28132: PUSH
28133: LD_VAR 0 6
28137: PPUSH
28138: CALL_OW 312
28142: ST_TO_ADDR
// if j then
28143: LD_VAR 0 7
28147: IFFALSE 28177
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28149: LD_ADDR_VAR 0 10
28153: PUSH
28154: LD_VAR 0 10
28158: PUSH
28159: LD_VAR 0 7
28163: PPUSH
28164: LD_INT 3
28166: PPUSH
28167: CALL_OW 259
28171: PUSH
28172: LD_INT 3
28174: MUL
28175: MUL
28176: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28177: LD_VAR 0 6
28181: PPUSH
28182: CALL_OW 264
28186: PUSH
28187: LD_INT 5
28189: PUSH
28190: LD_INT 6
28192: PUSH
28193: LD_INT 46
28195: PUSH
28196: LD_INT 44
28198: PUSH
28199: LD_INT 47
28201: PUSH
28202: LD_INT 45
28204: PUSH
28205: LD_INT 28
28207: PUSH
28208: LD_INT 7
28210: PUSH
28211: LD_INT 27
28213: PUSH
28214: LD_INT 29
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: IN
28229: PUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: LD_INT 52
28237: PPUSH
28238: CALL_OW 321
28242: PUSH
28243: LD_INT 2
28245: EQUAL
28246: AND
28247: IFFALSE 28264
// bpoints := bpoints * 1.2 ;
28249: LD_ADDR_VAR 0 10
28253: PUSH
28254: LD_VAR 0 10
28258: PUSH
28259: LD_REAL  1.20000000000000E+0000
28262: MUL
28263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28264: LD_VAR 0 6
28268: PPUSH
28269: CALL_OW 264
28273: PUSH
28274: LD_INT 6
28276: PUSH
28277: LD_INT 46
28279: PUSH
28280: LD_INT 47
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: IN
28288: IFFALSE 28305
// bpoints := bpoints * 1.2 ;
28290: LD_ADDR_VAR 0 10
28294: PUSH
28295: LD_VAR 0 10
28299: PUSH
28300: LD_REAL  1.20000000000000E+0000
28303: MUL
28304: ST_TO_ADDR
// end ; unit_building :
28305: GO 28319
28307: LD_INT 3
28309: DOUBLE
28310: EQUAL
28311: IFTRUE 28315
28313: GO 28318
28315: POP
// ; end ;
28316: GO 28319
28318: POP
// for j = 1 to 3 do
28319: LD_ADDR_VAR 0 7
28323: PUSH
28324: DOUBLE
28325: LD_INT 1
28327: DEC
28328: ST_TO_ADDR
28329: LD_INT 3
28331: PUSH
28332: FOR_TO
28333: IFFALSE 28386
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28335: LD_ADDR_VAR 0 5
28339: PUSH
28340: LD_VAR 0 5
28344: PPUSH
28345: LD_VAR 0 7
28349: PPUSH
28350: LD_VAR 0 5
28354: PUSH
28355: LD_VAR 0 7
28359: ARRAY
28360: PUSH
28361: LD_VAR 0 9
28365: PUSH
28366: LD_VAR 0 7
28370: ARRAY
28371: PUSH
28372: LD_VAR 0 10
28376: MUL
28377: PLUS
28378: PPUSH
28379: CALL_OW 1
28383: ST_TO_ADDR
28384: GO 28332
28386: POP
28387: POP
// end ;
28388: GO 26871
28390: POP
28391: POP
// result := Replace ( result , 4 , tmp ) ;
28392: LD_ADDR_VAR 0 5
28396: PUSH
28397: LD_VAR 0 5
28401: PPUSH
28402: LD_INT 4
28404: PPUSH
28405: LD_VAR 0 8
28409: PPUSH
28410: CALL_OW 1
28414: ST_TO_ADDR
// end ;
28415: LD_VAR 0 5
28419: RET
// export function DangerAtRange ( unit , range ) ; begin
28420: LD_INT 0
28422: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28423: LD_ADDR_VAR 0 3
28427: PUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 255
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 250
28447: PPUSH
28448: LD_VAR 0 1
28452: PPUSH
28453: CALL_OW 251
28457: PPUSH
28458: LD_VAR 0 2
28462: PPUSH
28463: CALL 26723 0 4
28467: ST_TO_ADDR
// end ;
28468: LD_VAR 0 3
28472: RET
// export function DangerInArea ( side , area ) ; begin
28473: LD_INT 0
28475: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28476: LD_ADDR_VAR 0 3
28480: PUSH
28481: LD_VAR 0 2
28485: PPUSH
28486: LD_INT 81
28488: PUSH
28489: LD_VAR 0 1
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PPUSH
28498: CALL_OW 70
28502: ST_TO_ADDR
// end ;
28503: LD_VAR 0 3
28507: RET
// export function IsExtension ( b ) ; begin
28508: LD_INT 0
28510: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28511: LD_ADDR_VAR 0 2
28515: PUSH
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 23
28523: PUSH
28524: LD_INT 20
28526: PUSH
28527: LD_INT 22
28529: PUSH
28530: LD_INT 17
28532: PUSH
28533: LD_INT 24
28535: PUSH
28536: LD_INT 21
28538: PUSH
28539: LD_INT 19
28541: PUSH
28542: LD_INT 16
28544: PUSH
28545: LD_INT 25
28547: PUSH
28548: LD_INT 18
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: IN
28563: ST_TO_ADDR
// end ;
28564: LD_VAR 0 2
28568: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
// result := [ ] ;
28574: LD_ADDR_VAR 0 4
28578: PUSH
28579: EMPTY
28580: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28581: LD_ADDR_VAR 0 5
28585: PUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: LD_INT 21
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 70
28605: ST_TO_ADDR
// if not tmp then
28606: LD_VAR 0 5
28610: NOT
28611: IFFALSE 28615
// exit ;
28613: GO 28679
// if checkLink then
28615: LD_VAR 0 3
28619: IFFALSE 28669
// begin for i in tmp do
28621: LD_ADDR_VAR 0 6
28625: PUSH
28626: LD_VAR 0 5
28630: PUSH
28631: FOR_IN
28632: IFFALSE 28667
// if GetBase ( i ) <> base then
28634: LD_VAR 0 6
28638: PPUSH
28639: CALL_OW 274
28643: PUSH
28644: LD_VAR 0 1
28648: NONEQUAL
28649: IFFALSE 28665
// ComLinkToBase ( base , i ) ;
28651: LD_VAR 0 1
28655: PPUSH
28656: LD_VAR 0 6
28660: PPUSH
28661: CALL_OW 169
28665: GO 28631
28667: POP
28668: POP
// end ; result := tmp ;
28669: LD_ADDR_VAR 0 4
28673: PUSH
28674: LD_VAR 0 5
28678: ST_TO_ADDR
// end ;
28679: LD_VAR 0 4
28683: RET
// export function ComComplete ( units , b ) ; var i ; begin
28684: LD_INT 0
28686: PPUSH
28687: PPUSH
// if not units then
28688: LD_VAR 0 1
28692: NOT
28693: IFFALSE 28697
// exit ;
28695: GO 28787
// for i in units do
28697: LD_ADDR_VAR 0 4
28701: PUSH
28702: LD_VAR 0 1
28706: PUSH
28707: FOR_IN
28708: IFFALSE 28785
// if BuildingStatus ( b ) = bs_build then
28710: LD_VAR 0 2
28714: PPUSH
28715: CALL_OW 461
28719: PUSH
28720: LD_INT 1
28722: EQUAL
28723: IFFALSE 28783
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28725: LD_VAR 0 4
28729: PPUSH
28730: LD_STRING h
28732: PUSH
28733: LD_VAR 0 2
28737: PPUSH
28738: CALL_OW 250
28742: PUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: CALL_OW 251
28752: PUSH
28753: LD_VAR 0 2
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: PPUSH
28779: CALL_OW 446
28783: GO 28707
28785: POP
28786: POP
// end ;
28787: LD_VAR 0 3
28791: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28792: LD_INT 0
28794: PPUSH
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28800: LD_VAR 0 1
28804: NOT
28805: PUSH
28806: LD_VAR 0 1
28810: PPUSH
28811: CALL_OW 263
28815: PUSH
28816: LD_INT 2
28818: EQUAL
28819: NOT
28820: OR
28821: IFFALSE 28825
// exit ;
28823: GO 29141
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28825: LD_ADDR_VAR 0 6
28829: PUSH
28830: LD_INT 22
28832: PUSH
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 255
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 30
28852: PUSH
28853: LD_INT 36
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 34
28862: PUSH
28863: LD_INT 31
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PPUSH
28879: CALL_OW 69
28883: ST_TO_ADDR
// if not tmp then
28884: LD_VAR 0 6
28888: NOT
28889: IFFALSE 28893
// exit ;
28891: GO 29141
// result := [ ] ;
28893: LD_ADDR_VAR 0 2
28897: PUSH
28898: EMPTY
28899: ST_TO_ADDR
// for i in tmp do
28900: LD_ADDR_VAR 0 3
28904: PUSH
28905: LD_VAR 0 6
28909: PUSH
28910: FOR_IN
28911: IFFALSE 28982
// begin t := UnitsInside ( i ) ;
28913: LD_ADDR_VAR 0 4
28917: PUSH
28918: LD_VAR 0 3
28922: PPUSH
28923: CALL_OW 313
28927: ST_TO_ADDR
// if t then
28928: LD_VAR 0 4
28932: IFFALSE 28980
// for j in t do
28934: LD_ADDR_VAR 0 7
28938: PUSH
28939: LD_VAR 0 4
28943: PUSH
28944: FOR_IN
28945: IFFALSE 28978
// result := Insert ( result , result + 1 , j ) ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_VAR 0 2
28956: PPUSH
28957: LD_VAR 0 2
28961: PUSH
28962: LD_INT 1
28964: PLUS
28965: PPUSH
28966: LD_VAR 0 7
28970: PPUSH
28971: CALL_OW 2
28975: ST_TO_ADDR
28976: GO 28944
28978: POP
28979: POP
// end ;
28980: GO 28910
28982: POP
28983: POP
// if not result then
28984: LD_VAR 0 2
28988: NOT
28989: IFFALSE 28993
// exit ;
28991: GO 29141
// mech := result [ 1 ] ;
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: LD_VAR 0 2
29002: PUSH
29003: LD_INT 1
29005: ARRAY
29006: ST_TO_ADDR
// if result > 1 then
29007: LD_VAR 0 2
29011: PUSH
29012: LD_INT 1
29014: GREATER
29015: IFFALSE 29127
// for i = 2 to result do
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: DOUBLE
29023: LD_INT 2
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 2
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29125
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29035: LD_ADDR_VAR 0 4
29039: PUSH
29040: LD_VAR 0 2
29044: PUSH
29045: LD_VAR 0 3
29049: ARRAY
29050: PPUSH
29051: LD_INT 3
29053: PPUSH
29054: CALL_OW 259
29058: PUSH
29059: LD_VAR 0 2
29063: PUSH
29064: LD_VAR 0 3
29068: ARRAY
29069: PPUSH
29070: CALL_OW 432
29074: MINUS
29075: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29076: LD_VAR 0 4
29080: PUSH
29081: LD_VAR 0 5
29085: PPUSH
29086: LD_INT 3
29088: PPUSH
29089: CALL_OW 259
29093: PUSH
29094: LD_VAR 0 5
29098: PPUSH
29099: CALL_OW 432
29103: MINUS
29104: GREATEREQUAL
29105: IFFALSE 29123
// mech := result [ i ] ;
29107: LD_ADDR_VAR 0 5
29111: PUSH
29112: LD_VAR 0 2
29116: PUSH
29117: LD_VAR 0 3
29121: ARRAY
29122: ST_TO_ADDR
// end ;
29123: GO 29032
29125: POP
29126: POP
// ComLinkTo ( vehicle , mech ) ;
29127: LD_VAR 0 1
29131: PPUSH
29132: LD_VAR 0 5
29136: PPUSH
29137: CALL_OW 135
// end ;
29141: LD_VAR 0 2
29145: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
// result := [ ] ;
29161: LD_ADDR_VAR 0 7
29165: PUSH
29166: EMPTY
29167: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL_OW 266
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: IN
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 30827
// if name then
29193: LD_VAR 0 3
29197: IFFALSE 29213
// SetBName ( base_dep , name ) ;
29199: LD_VAR 0 1
29203: PPUSH
29204: LD_VAR 0 3
29208: PPUSH
29209: CALL_OW 500
// base := GetBase ( base_dep ) ;
29213: LD_ADDR_VAR 0 15
29217: PUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 274
29227: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29228: LD_ADDR_VAR 0 16
29232: PUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 255
29242: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29243: LD_ADDR_VAR 0 17
29247: PUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 248
29257: ST_TO_ADDR
// if sources then
29258: LD_VAR 0 5
29262: IFFALSE 29309
// for i = 1 to 3 do
29264: LD_ADDR_VAR 0 8
29268: PUSH
29269: DOUBLE
29270: LD_INT 1
29272: DEC
29273: ST_TO_ADDR
29274: LD_INT 3
29276: PUSH
29277: FOR_TO
29278: IFFALSE 29307
// AddResourceType ( base , i , sources [ i ] ) ;
29280: LD_VAR 0 15
29284: PPUSH
29285: LD_VAR 0 8
29289: PPUSH
29290: LD_VAR 0 5
29294: PUSH
29295: LD_VAR 0 8
29299: ARRAY
29300: PPUSH
29301: CALL_OW 276
29305: GO 29277
29307: POP
29308: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29309: LD_ADDR_VAR 0 18
29313: PUSH
29314: LD_VAR 0 15
29318: PPUSH
29319: LD_VAR 0 2
29323: PPUSH
29324: LD_INT 1
29326: PPUSH
29327: CALL 28569 0 3
29331: ST_TO_ADDR
// InitHc ;
29332: CALL_OW 19
// InitUc ;
29336: CALL_OW 18
// uc_side := side ;
29340: LD_ADDR_OWVAR 20
29344: PUSH
29345: LD_VAR 0 16
29349: ST_TO_ADDR
// uc_nation := nation ;
29350: LD_ADDR_OWVAR 21
29354: PUSH
29355: LD_VAR 0 17
29359: ST_TO_ADDR
// if buildings then
29360: LD_VAR 0 18
29364: IFFALSE 30686
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29366: LD_ADDR_VAR 0 19
29370: PUSH
29371: LD_VAR 0 18
29375: PPUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 30
29381: PUSH
29382: LD_INT 29
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 30
29391: PUSH
29392: LD_INT 30
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: LIST
29403: PPUSH
29404: CALL_OW 72
29408: ST_TO_ADDR
// if tmp then
29409: LD_VAR 0 19
29413: IFFALSE 29461
// for i in tmp do
29415: LD_ADDR_VAR 0 8
29419: PUSH
29420: LD_VAR 0 19
29424: PUSH
29425: FOR_IN
29426: IFFALSE 29459
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29428: LD_VAR 0 8
29432: PPUSH
29433: CALL_OW 250
29437: PPUSH
29438: LD_VAR 0 8
29442: PPUSH
29443: CALL_OW 251
29447: PPUSH
29448: LD_VAR 0 16
29452: PPUSH
29453: CALL_OW 441
29457: GO 29425
29459: POP
29460: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29461: LD_VAR 0 18
29465: PPUSH
29466: LD_INT 2
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 32
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 30
29481: PUSH
29482: LD_INT 33
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: PPUSH
29494: CALL_OW 72
29498: IFFALSE 29586
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29500: LD_ADDR_VAR 0 8
29504: PUSH
29505: LD_VAR 0 18
29509: PPUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 30
29515: PUSH
29516: LD_INT 32
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 30
29525: PUSH
29526: LD_INT 33
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: PPUSH
29538: CALL_OW 72
29542: PUSH
29543: FOR_IN
29544: IFFALSE 29584
// begin if not GetBWeapon ( i ) then
29546: LD_VAR 0 8
29550: PPUSH
29551: CALL_OW 269
29555: NOT
29556: IFFALSE 29582
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29558: LD_VAR 0 8
29562: PPUSH
29563: LD_VAR 0 8
29567: PPUSH
29568: LD_VAR 0 2
29572: PPUSH
29573: CALL 30832 0 2
29577: PPUSH
29578: CALL_OW 431
// end ;
29582: GO 29543
29584: POP
29585: POP
// end ; for i = 1 to personel do
29586: LD_ADDR_VAR 0 8
29590: PUSH
29591: DOUBLE
29592: LD_INT 1
29594: DEC
29595: ST_TO_ADDR
29596: LD_VAR 0 6
29600: PUSH
29601: FOR_TO
29602: IFFALSE 30666
// begin if i > 4 then
29604: LD_VAR 0 8
29608: PUSH
29609: LD_INT 4
29611: GREATER
29612: IFFALSE 29616
// break ;
29614: GO 30666
// case i of 1 :
29616: LD_VAR 0 8
29620: PUSH
29621: LD_INT 1
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29709
29629: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29630: LD_ADDR_VAR 0 12
29634: PUSH
29635: LD_VAR 0 18
29639: PPUSH
29640: LD_INT 22
29642: PUSH
29643: LD_VAR 0 16
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 58
29654: PUSH
29655: EMPTY
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 30
29663: PUSH
29664: LD_INT 32
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 30
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 30
29683: PUSH
29684: LD_INT 5
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: PPUSH
29702: CALL_OW 72
29706: ST_TO_ADDR
29707: GO 29931
29709: LD_INT 2
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29779
29717: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29718: LD_ADDR_VAR 0 12
29722: PUSH
29723: LD_VAR 0 18
29727: PPUSH
29728: LD_INT 22
29730: PUSH
29731: LD_VAR 0 16
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 30
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 30
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PPUSH
29772: CALL_OW 72
29776: ST_TO_ADDR
29777: GO 29931
29779: LD_INT 3
29781: DOUBLE
29782: EQUAL
29783: IFTRUE 29787
29785: GO 29849
29787: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29788: LD_ADDR_VAR 0 12
29792: PUSH
29793: LD_VAR 0 18
29797: PPUSH
29798: LD_INT 22
29800: PUSH
29801: LD_VAR 0 16
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: LD_INT 30
29815: PUSH
29816: LD_INT 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 30
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: LIST
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PPUSH
29842: CALL_OW 72
29846: ST_TO_ADDR
29847: GO 29931
29849: LD_INT 4
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29930
29857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29858: LD_ADDR_VAR 0 12
29862: PUSH
29863: LD_VAR 0 18
29867: PPUSH
29868: LD_INT 22
29870: PUSH
29871: LD_VAR 0 16
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 30
29885: PUSH
29886: LD_INT 6
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 30
29895: PUSH
29896: LD_INT 7
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 30
29905: PUSH
29906: LD_INT 8
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 72
29927: ST_TO_ADDR
29928: GO 29931
29930: POP
// if i = 1 then
29931: LD_VAR 0 8
29935: PUSH
29936: LD_INT 1
29938: EQUAL
29939: IFFALSE 30050
// begin tmp := [ ] ;
29941: LD_ADDR_VAR 0 19
29945: PUSH
29946: EMPTY
29947: ST_TO_ADDR
// for j in f do
29948: LD_ADDR_VAR 0 9
29952: PUSH
29953: LD_VAR 0 12
29957: PUSH
29958: FOR_IN
29959: IFFALSE 30032
// if GetBType ( j ) = b_bunker then
29961: LD_VAR 0 9
29965: PPUSH
29966: CALL_OW 266
29970: PUSH
29971: LD_INT 32
29973: EQUAL
29974: IFFALSE 30001
// tmp := Insert ( tmp , 1 , j ) else
29976: LD_ADDR_VAR 0 19
29980: PUSH
29981: LD_VAR 0 19
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: LD_VAR 0 9
29993: PPUSH
29994: CALL_OW 2
29998: ST_TO_ADDR
29999: GO 30030
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30001: LD_ADDR_VAR 0 19
30005: PUSH
30006: LD_VAR 0 19
30010: PPUSH
30011: LD_VAR 0 19
30015: PUSH
30016: LD_INT 1
30018: PLUS
30019: PPUSH
30020: LD_VAR 0 9
30024: PPUSH
30025: CALL_OW 2
30029: ST_TO_ADDR
30030: GO 29958
30032: POP
30033: POP
// if tmp then
30034: LD_VAR 0 19
30038: IFFALSE 30050
// f := tmp ;
30040: LD_ADDR_VAR 0 12
30044: PUSH
30045: LD_VAR 0 19
30049: ST_TO_ADDR
// end ; x := personel [ i ] ;
30050: LD_ADDR_VAR 0 13
30054: PUSH
30055: LD_VAR 0 6
30059: PUSH
30060: LD_VAR 0 8
30064: ARRAY
30065: ST_TO_ADDR
// if x = - 1 then
30066: LD_VAR 0 13
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: EQUAL
30075: IFFALSE 30284
// begin for j in f do
30077: LD_ADDR_VAR 0 9
30081: PUSH
30082: LD_VAR 0 12
30086: PUSH
30087: FOR_IN
30088: IFFALSE 30280
// repeat InitHc ;
30090: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30094: LD_VAR 0 9
30098: PPUSH
30099: CALL_OW 266
30103: PUSH
30104: LD_INT 5
30106: EQUAL
30107: IFFALSE 30177
// begin if UnitsInside ( j ) < 3 then
30109: LD_VAR 0 9
30113: PPUSH
30114: CALL_OW 313
30118: PUSH
30119: LD_INT 3
30121: LESS
30122: IFFALSE 30158
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30124: LD_INT 0
30126: PPUSH
30127: LD_INT 5
30129: PUSH
30130: LD_INT 8
30132: PUSH
30133: LD_INT 9
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: PUSH
30141: LD_VAR 0 17
30145: ARRAY
30146: PPUSH
30147: LD_VAR 0 4
30151: PPUSH
30152: CALL_OW 380
30156: GO 30175
// PrepareHuman ( false , i , skill ) ;
30158: LD_INT 0
30160: PPUSH
30161: LD_VAR 0 8
30165: PPUSH
30166: LD_VAR 0 4
30170: PPUSH
30171: CALL_OW 380
// end else
30175: GO 30194
// PrepareHuman ( false , i , skill ) ;
30177: LD_INT 0
30179: PPUSH
30180: LD_VAR 0 8
30184: PPUSH
30185: LD_VAR 0 4
30189: PPUSH
30190: CALL_OW 380
// un := CreateHuman ;
30194: LD_ADDR_VAR 0 14
30198: PUSH
30199: CALL_OW 44
30203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30204: LD_ADDR_VAR 0 7
30208: PUSH
30209: LD_VAR 0 7
30213: PPUSH
30214: LD_INT 1
30216: PPUSH
30217: LD_VAR 0 14
30221: PPUSH
30222: CALL_OW 2
30226: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30227: LD_VAR 0 14
30231: PPUSH
30232: LD_VAR 0 9
30236: PPUSH
30237: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30241: LD_VAR 0 9
30245: PPUSH
30246: CALL_OW 313
30250: PUSH
30251: LD_INT 6
30253: EQUAL
30254: PUSH
30255: LD_VAR 0 9
30259: PPUSH
30260: CALL_OW 266
30264: PUSH
30265: LD_INT 32
30267: PUSH
30268: LD_INT 31
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: IN
30275: OR
30276: IFFALSE 30090
30278: GO 30087
30280: POP
30281: POP
// end else
30282: GO 30664
// for j = 1 to x do
30284: LD_ADDR_VAR 0 9
30288: PUSH
30289: DOUBLE
30290: LD_INT 1
30292: DEC
30293: ST_TO_ADDR
30294: LD_VAR 0 13
30298: PUSH
30299: FOR_TO
30300: IFFALSE 30662
// begin InitHc ;
30302: CALL_OW 19
// if not f then
30306: LD_VAR 0 12
30310: NOT
30311: IFFALSE 30400
// begin PrepareHuman ( false , i , skill ) ;
30313: LD_INT 0
30315: PPUSH
30316: LD_VAR 0 8
30320: PPUSH
30321: LD_VAR 0 4
30325: PPUSH
30326: CALL_OW 380
// un := CreateHuman ;
30330: LD_ADDR_VAR 0 14
30334: PUSH
30335: CALL_OW 44
30339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30340: LD_ADDR_VAR 0 7
30344: PUSH
30345: LD_VAR 0 7
30349: PPUSH
30350: LD_INT 1
30352: PPUSH
30353: LD_VAR 0 14
30357: PPUSH
30358: CALL_OW 2
30362: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30363: LD_VAR 0 14
30367: PPUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: CALL_OW 250
30377: PPUSH
30378: LD_VAR 0 1
30382: PPUSH
30383: CALL_OW 251
30387: PPUSH
30388: LD_INT 10
30390: PPUSH
30391: LD_INT 0
30393: PPUSH
30394: CALL_OW 50
// continue ;
30398: GO 30299
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30400: LD_VAR 0 12
30404: PUSH
30405: LD_INT 1
30407: ARRAY
30408: PPUSH
30409: CALL_OW 313
30413: PUSH
30414: LD_VAR 0 12
30418: PUSH
30419: LD_INT 1
30421: ARRAY
30422: PPUSH
30423: CALL_OW 266
30427: PUSH
30428: LD_INT 32
30430: PUSH
30431: LD_INT 31
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: IN
30438: AND
30439: PUSH
30440: LD_VAR 0 12
30444: PUSH
30445: LD_INT 1
30447: ARRAY
30448: PPUSH
30449: CALL_OW 313
30453: PUSH
30454: LD_INT 6
30456: EQUAL
30457: OR
30458: IFFALSE 30478
// f := Delete ( f , 1 ) ;
30460: LD_ADDR_VAR 0 12
30464: PUSH
30465: LD_VAR 0 12
30469: PPUSH
30470: LD_INT 1
30472: PPUSH
30473: CALL_OW 3
30477: ST_TO_ADDR
// if not f then
30478: LD_VAR 0 12
30482: NOT
30483: IFFALSE 30501
// begin x := x + 2 ;
30485: LD_ADDR_VAR 0 13
30489: PUSH
30490: LD_VAR 0 13
30494: PUSH
30495: LD_INT 2
30497: PLUS
30498: ST_TO_ADDR
// continue ;
30499: GO 30299
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30501: LD_VAR 0 12
30505: PUSH
30506: LD_INT 1
30508: ARRAY
30509: PPUSH
30510: CALL_OW 266
30514: PUSH
30515: LD_INT 5
30517: EQUAL
30518: IFFALSE 30592
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30520: LD_VAR 0 12
30524: PUSH
30525: LD_INT 1
30527: ARRAY
30528: PPUSH
30529: CALL_OW 313
30533: PUSH
30534: LD_INT 3
30536: LESS
30537: IFFALSE 30573
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30539: LD_INT 0
30541: PPUSH
30542: LD_INT 5
30544: PUSH
30545: LD_INT 8
30547: PUSH
30548: LD_INT 9
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: PUSH
30556: LD_VAR 0 17
30560: ARRAY
30561: PPUSH
30562: LD_VAR 0 4
30566: PPUSH
30567: CALL_OW 380
30571: GO 30590
// PrepareHuman ( false , i , skill ) ;
30573: LD_INT 0
30575: PPUSH
30576: LD_VAR 0 8
30580: PPUSH
30581: LD_VAR 0 4
30585: PPUSH
30586: CALL_OW 380
// end else
30590: GO 30609
// PrepareHuman ( false , i , skill ) ;
30592: LD_INT 0
30594: PPUSH
30595: LD_VAR 0 8
30599: PPUSH
30600: LD_VAR 0 4
30604: PPUSH
30605: CALL_OW 380
// un := CreateHuman ;
30609: LD_ADDR_VAR 0 14
30613: PUSH
30614: CALL_OW 44
30618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30619: LD_ADDR_VAR 0 7
30623: PUSH
30624: LD_VAR 0 7
30628: PPUSH
30629: LD_INT 1
30631: PPUSH
30632: LD_VAR 0 14
30636: PPUSH
30637: CALL_OW 2
30641: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30642: LD_VAR 0 14
30646: PPUSH
30647: LD_VAR 0 12
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PPUSH
30656: CALL_OW 52
// end ;
30660: GO 30299
30662: POP
30663: POP
// end ;
30664: GO 29601
30666: POP
30667: POP
// result := result ^ buildings ;
30668: LD_ADDR_VAR 0 7
30672: PUSH
30673: LD_VAR 0 7
30677: PUSH
30678: LD_VAR 0 18
30682: ADD
30683: ST_TO_ADDR
// end else
30684: GO 30827
// begin for i = 1 to personel do
30686: LD_ADDR_VAR 0 8
30690: PUSH
30691: DOUBLE
30692: LD_INT 1
30694: DEC
30695: ST_TO_ADDR
30696: LD_VAR 0 6
30700: PUSH
30701: FOR_TO
30702: IFFALSE 30825
// begin if i > 4 then
30704: LD_VAR 0 8
30708: PUSH
30709: LD_INT 4
30711: GREATER
30712: IFFALSE 30716
// break ;
30714: GO 30825
// x := personel [ i ] ;
30716: LD_ADDR_VAR 0 13
30720: PUSH
30721: LD_VAR 0 6
30725: PUSH
30726: LD_VAR 0 8
30730: ARRAY
30731: ST_TO_ADDR
// if x = - 1 then
30732: LD_VAR 0 13
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: EQUAL
30741: IFFALSE 30745
// continue ;
30743: GO 30701
// PrepareHuman ( false , i , skill ) ;
30745: LD_INT 0
30747: PPUSH
30748: LD_VAR 0 8
30752: PPUSH
30753: LD_VAR 0 4
30757: PPUSH
30758: CALL_OW 380
// un := CreateHuman ;
30762: LD_ADDR_VAR 0 14
30766: PUSH
30767: CALL_OW 44
30771: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30772: LD_VAR 0 14
30776: PPUSH
30777: LD_VAR 0 1
30781: PPUSH
30782: CALL_OW 250
30786: PPUSH
30787: LD_VAR 0 1
30791: PPUSH
30792: CALL_OW 251
30796: PPUSH
30797: LD_INT 10
30799: PPUSH
30800: LD_INT 0
30802: PPUSH
30803: CALL_OW 50
// result := result ^ un ;
30807: LD_ADDR_VAR 0 7
30811: PUSH
30812: LD_VAR 0 7
30816: PUSH
30817: LD_VAR 0 14
30821: ADD
30822: ST_TO_ADDR
// end ;
30823: GO 30701
30825: POP
30826: POP
// end ; end ;
30827: LD_VAR 0 7
30831: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30832: LD_INT 0
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
// result := false ;
30850: LD_ADDR_VAR 0 3
30854: PUSH
30855: LD_INT 0
30857: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30858: LD_VAR 0 1
30862: NOT
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 266
30873: PUSH
30874: LD_INT 32
30876: PUSH
30877: LD_INT 33
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: IN
30884: NOT
30885: OR
30886: IFFALSE 30890
// exit ;
30888: GO 32029
// nat := GetNation ( tower ) ;
30890: LD_ADDR_VAR 0 12
30894: PUSH
30895: LD_VAR 0 1
30899: PPUSH
30900: CALL_OW 248
30904: ST_TO_ADDR
// side := GetSide ( tower ) ;
30905: LD_ADDR_VAR 0 16
30909: PUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: CALL_OW 255
30919: ST_TO_ADDR
// x := GetX ( tower ) ;
30920: LD_ADDR_VAR 0 10
30924: PUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 250
30934: ST_TO_ADDR
// y := GetY ( tower ) ;
30935: LD_ADDR_VAR 0 11
30939: PUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: CALL_OW 251
30949: ST_TO_ADDR
// if not x or not y then
30950: LD_VAR 0 10
30954: NOT
30955: PUSH
30956: LD_VAR 0 11
30960: NOT
30961: OR
30962: IFFALSE 30966
// exit ;
30964: GO 32029
// weapon := 0 ;
30966: LD_ADDR_VAR 0 18
30970: PUSH
30971: LD_INT 0
30973: ST_TO_ADDR
// fac_list := [ ] ;
30974: LD_ADDR_VAR 0 17
30978: PUSH
30979: EMPTY
30980: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30981: LD_ADDR_VAR 0 6
30985: PUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 274
30995: PPUSH
30996: LD_VAR 0 2
31000: PPUSH
31001: LD_INT 0
31003: PPUSH
31004: CALL 28569 0 3
31008: PPUSH
31009: LD_INT 30
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PPUSH
31019: CALL_OW 72
31023: ST_TO_ADDR
// if not factories then
31024: LD_VAR 0 6
31028: NOT
31029: IFFALSE 31033
// exit ;
31031: GO 32029
// for i in factories do
31033: LD_ADDR_VAR 0 8
31037: PUSH
31038: LD_VAR 0 6
31042: PUSH
31043: FOR_IN
31044: IFFALSE 31069
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31046: LD_ADDR_VAR 0 17
31050: PUSH
31051: LD_VAR 0 17
31055: PUSH
31056: LD_VAR 0 8
31060: PPUSH
31061: CALL_OW 478
31065: UNION
31066: ST_TO_ADDR
31067: GO 31043
31069: POP
31070: POP
// if not fac_list then
31071: LD_VAR 0 17
31075: NOT
31076: IFFALSE 31080
// exit ;
31078: GO 32029
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31080: LD_ADDR_VAR 0 5
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: LD_INT 5
31090: PUSH
31091: LD_INT 9
31093: PUSH
31094: LD_INT 10
31096: PUSH
31097: LD_INT 6
31099: PUSH
31100: LD_INT 7
31102: PUSH
31103: LD_INT 11
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 27
31117: PUSH
31118: LD_INT 28
31120: PUSH
31121: LD_INT 26
31123: PUSH
31124: LD_INT 30
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 43
31135: PUSH
31136: LD_INT 44
31138: PUSH
31139: LD_INT 46
31141: PUSH
31142: LD_INT 45
31144: PUSH
31145: LD_INT 47
31147: PUSH
31148: LD_INT 49
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: PUSH
31164: LD_VAR 0 12
31168: ARRAY
31169: ST_TO_ADDR
// for i in list do
31170: LD_ADDR_VAR 0 8
31174: PUSH
31175: LD_VAR 0 5
31179: PUSH
31180: FOR_IN
31181: IFFALSE 31214
// if not i in fac_list then
31183: LD_VAR 0 8
31187: PUSH
31188: LD_VAR 0 17
31192: IN
31193: NOT
31194: IFFALSE 31212
// list := list diff i ;
31196: LD_ADDR_VAR 0 5
31200: PUSH
31201: LD_VAR 0 5
31205: PUSH
31206: LD_VAR 0 8
31210: DIFF
31211: ST_TO_ADDR
31212: GO 31180
31214: POP
31215: POP
// if not list then
31216: LD_VAR 0 5
31220: NOT
31221: IFFALSE 31225
// exit ;
31223: GO 32029
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31225: LD_VAR 0 12
31229: PUSH
31230: LD_INT 3
31232: EQUAL
31233: PUSH
31234: LD_INT 49
31236: PUSH
31237: LD_VAR 0 5
31241: IN
31242: AND
31243: PUSH
31244: LD_INT 31
31246: PPUSH
31247: LD_VAR 0 16
31251: PPUSH
31252: CALL_OW 321
31256: PUSH
31257: LD_INT 2
31259: EQUAL
31260: AND
31261: IFFALSE 31321
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31263: LD_INT 22
31265: PUSH
31266: LD_VAR 0 16
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 35
31277: PUSH
31278: LD_INT 49
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 91
31287: PUSH
31288: LD_VAR 0 1
31292: PUSH
31293: LD_INT 10
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: PPUSH
31306: CALL_OW 69
31310: NOT
31311: IFFALSE 31321
// weapon := ru_time_lapser ;
31313: LD_ADDR_VAR 0 18
31317: PUSH
31318: LD_INT 49
31320: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31321: LD_VAR 0 12
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: IN
31336: PUSH
31337: LD_INT 11
31339: PUSH
31340: LD_VAR 0 5
31344: IN
31345: PUSH
31346: LD_INT 30
31348: PUSH
31349: LD_VAR 0 5
31353: IN
31354: OR
31355: AND
31356: PUSH
31357: LD_INT 6
31359: PPUSH
31360: LD_VAR 0 16
31364: PPUSH
31365: CALL_OW 321
31369: PUSH
31370: LD_INT 2
31372: EQUAL
31373: AND
31374: IFFALSE 31539
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31376: LD_INT 22
31378: PUSH
31379: LD_VAR 0 16
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 35
31393: PUSH
31394: LD_INT 11
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 35
31403: PUSH
31404: LD_INT 30
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 91
31418: PUSH
31419: LD_VAR 0 1
31423: PUSH
31424: LD_INT 18
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 69
31441: NOT
31442: PUSH
31443: LD_INT 22
31445: PUSH
31446: LD_VAR 0 16
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: LD_INT 30
31460: PUSH
31461: LD_INT 32
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 30
31470: PUSH
31471: LD_INT 33
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 91
31485: PUSH
31486: LD_VAR 0 1
31490: PUSH
31491: LD_INT 12
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: PUSH
31512: LD_INT 2
31514: GREATER
31515: AND
31516: IFFALSE 31539
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31518: LD_ADDR_VAR 0 18
31522: PUSH
31523: LD_INT 11
31525: PUSH
31526: LD_INT 30
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_VAR 0 12
31537: ARRAY
31538: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31539: LD_VAR 0 18
31543: NOT
31544: PUSH
31545: LD_INT 40
31547: PPUSH
31548: LD_VAR 0 16
31552: PPUSH
31553: CALL_OW 321
31557: PUSH
31558: LD_INT 2
31560: EQUAL
31561: AND
31562: PUSH
31563: LD_INT 7
31565: PUSH
31566: LD_VAR 0 5
31570: IN
31571: PUSH
31572: LD_INT 28
31574: PUSH
31575: LD_VAR 0 5
31579: IN
31580: OR
31581: PUSH
31582: LD_INT 45
31584: PUSH
31585: LD_VAR 0 5
31589: IN
31590: OR
31591: AND
31592: IFFALSE 31846
// begin hex := GetHexInfo ( x , y ) ;
31594: LD_ADDR_VAR 0 4
31598: PUSH
31599: LD_VAR 0 10
31603: PPUSH
31604: LD_VAR 0 11
31608: PPUSH
31609: CALL_OW 546
31613: ST_TO_ADDR
// if hex [ 1 ] then
31614: LD_VAR 0 4
31618: PUSH
31619: LD_INT 1
31621: ARRAY
31622: IFFALSE 31626
// exit ;
31624: GO 32029
// height := hex [ 2 ] ;
31626: LD_ADDR_VAR 0 15
31630: PUSH
31631: LD_VAR 0 4
31635: PUSH
31636: LD_INT 2
31638: ARRAY
31639: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31640: LD_ADDR_VAR 0 14
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: LD_INT 3
31653: PUSH
31654: LD_INT 5
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// for i in tmp do
31663: LD_ADDR_VAR 0 8
31667: PUSH
31668: LD_VAR 0 14
31672: PUSH
31673: FOR_IN
31674: IFFALSE 31844
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31676: LD_ADDR_VAR 0 9
31680: PUSH
31681: LD_VAR 0 10
31685: PPUSH
31686: LD_VAR 0 8
31690: PPUSH
31691: LD_INT 5
31693: PPUSH
31694: CALL_OW 272
31698: PUSH
31699: LD_VAR 0 11
31703: PPUSH
31704: LD_VAR 0 8
31708: PPUSH
31709: LD_INT 5
31711: PPUSH
31712: CALL_OW 273
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31721: LD_VAR 0 9
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: LD_VAR 0 9
31734: PUSH
31735: LD_INT 2
31737: ARRAY
31738: PPUSH
31739: CALL_OW 488
31743: IFFALSE 31842
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31745: LD_ADDR_VAR 0 4
31749: PUSH
31750: LD_VAR 0 9
31754: PUSH
31755: LD_INT 1
31757: ARRAY
31758: PPUSH
31759: LD_VAR 0 9
31763: PUSH
31764: LD_INT 2
31766: ARRAY
31767: PPUSH
31768: CALL_OW 546
31772: ST_TO_ADDR
// if hex [ 1 ] then
31773: LD_VAR 0 4
31777: PUSH
31778: LD_INT 1
31780: ARRAY
31781: IFFALSE 31785
// continue ;
31783: GO 31673
// h := hex [ 2 ] ;
31785: LD_ADDR_VAR 0 13
31789: PUSH
31790: LD_VAR 0 4
31794: PUSH
31795: LD_INT 2
31797: ARRAY
31798: ST_TO_ADDR
// if h + 7 < height then
31799: LD_VAR 0 13
31803: PUSH
31804: LD_INT 7
31806: PLUS
31807: PUSH
31808: LD_VAR 0 15
31812: LESS
31813: IFFALSE 31842
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31815: LD_ADDR_VAR 0 18
31819: PUSH
31820: LD_INT 7
31822: PUSH
31823: LD_INT 28
31825: PUSH
31826: LD_INT 45
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: PUSH
31834: LD_VAR 0 12
31838: ARRAY
31839: ST_TO_ADDR
// break ;
31840: GO 31844
// end ; end ; end ;
31842: GO 31673
31844: POP
31845: POP
// end ; if not weapon then
31846: LD_VAR 0 18
31850: NOT
31851: IFFALSE 31911
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31853: LD_ADDR_VAR 0 5
31857: PUSH
31858: LD_VAR 0 5
31862: PUSH
31863: LD_INT 11
31865: PUSH
31866: LD_INT 30
31868: PUSH
31869: LD_INT 49
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: DIFF
31877: ST_TO_ADDR
// if not list then
31878: LD_VAR 0 5
31882: NOT
31883: IFFALSE 31887
// exit ;
31885: GO 32029
// weapon := list [ rand ( 1 , list ) ] ;
31887: LD_ADDR_VAR 0 18
31891: PUSH
31892: LD_VAR 0 5
31896: PUSH
31897: LD_INT 1
31899: PPUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: CALL_OW 12
31909: ARRAY
31910: ST_TO_ADDR
// end ; if weapon then
31911: LD_VAR 0 18
31915: IFFALSE 32029
// begin tmp := CostOfWeapon ( weapon ) ;
31917: LD_ADDR_VAR 0 14
31921: PUSH
31922: LD_VAR 0 18
31926: PPUSH
31927: CALL_OW 451
31931: ST_TO_ADDR
// j := GetBase ( tower ) ;
31932: LD_ADDR_VAR 0 9
31936: PUSH
31937: LD_VAR 0 1
31941: PPUSH
31942: CALL_OW 274
31946: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31947: LD_VAR 0 9
31951: PPUSH
31952: LD_INT 1
31954: PPUSH
31955: CALL_OW 275
31959: PUSH
31960: LD_VAR 0 14
31964: PUSH
31965: LD_INT 1
31967: ARRAY
31968: GREATEREQUAL
31969: PUSH
31970: LD_VAR 0 9
31974: PPUSH
31975: LD_INT 2
31977: PPUSH
31978: CALL_OW 275
31982: PUSH
31983: LD_VAR 0 14
31987: PUSH
31988: LD_INT 2
31990: ARRAY
31991: GREATEREQUAL
31992: AND
31993: PUSH
31994: LD_VAR 0 9
31998: PPUSH
31999: LD_INT 3
32001: PPUSH
32002: CALL_OW 275
32006: PUSH
32007: LD_VAR 0 14
32011: PUSH
32012: LD_INT 3
32014: ARRAY
32015: GREATEREQUAL
32016: AND
32017: IFFALSE 32029
// result := weapon ;
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_VAR 0 18
32028: ST_TO_ADDR
// end ; end ;
32029: LD_VAR 0 3
32033: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32034: LD_INT 0
32036: PPUSH
32037: PPUSH
// result := true ;
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: LD_INT 1
32045: ST_TO_ADDR
// if array1 = array2 then
32046: LD_VAR 0 1
32050: PUSH
32051: LD_VAR 0 2
32055: EQUAL
32056: IFFALSE 32116
// begin for i = 1 to array1 do
32058: LD_ADDR_VAR 0 4
32062: PUSH
32063: DOUBLE
32064: LD_INT 1
32066: DEC
32067: ST_TO_ADDR
32068: LD_VAR 0 1
32072: PUSH
32073: FOR_TO
32074: IFFALSE 32112
// if array1 [ i ] <> array2 [ i ] then
32076: LD_VAR 0 1
32080: PUSH
32081: LD_VAR 0 4
32085: ARRAY
32086: PUSH
32087: LD_VAR 0 2
32091: PUSH
32092: LD_VAR 0 4
32096: ARRAY
32097: NONEQUAL
32098: IFFALSE 32110
// begin result := false ;
32100: LD_ADDR_VAR 0 3
32104: PUSH
32105: LD_INT 0
32107: ST_TO_ADDR
// break ;
32108: GO 32112
// end ;
32110: GO 32073
32112: POP
32113: POP
// end else
32114: GO 32124
// result := false ;
32116: LD_ADDR_VAR 0 3
32120: PUSH
32121: LD_INT 0
32123: ST_TO_ADDR
// end ;
32124: LD_VAR 0 3
32128: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32129: LD_INT 0
32131: PPUSH
32132: PPUSH
// if not array1 or not array2 then
32133: LD_VAR 0 1
32137: NOT
32138: PUSH
32139: LD_VAR 0 2
32143: NOT
32144: OR
32145: IFFALSE 32149
// exit ;
32147: GO 32213
// result := true ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 1
32156: ST_TO_ADDR
// for i = 1 to array1 do
32157: LD_ADDR_VAR 0 4
32161: PUSH
32162: DOUBLE
32163: LD_INT 1
32165: DEC
32166: ST_TO_ADDR
32167: LD_VAR 0 1
32171: PUSH
32172: FOR_TO
32173: IFFALSE 32211
// if array1 [ i ] <> array2 [ i ] then
32175: LD_VAR 0 1
32179: PUSH
32180: LD_VAR 0 4
32184: ARRAY
32185: PUSH
32186: LD_VAR 0 2
32190: PUSH
32191: LD_VAR 0 4
32195: ARRAY
32196: NONEQUAL
32197: IFFALSE 32209
// begin result := false ;
32199: LD_ADDR_VAR 0 3
32203: PUSH
32204: LD_INT 0
32206: ST_TO_ADDR
// break ;
32207: GO 32211
// end ;
32209: GO 32172
32211: POP
32212: POP
// end ;
32213: LD_VAR 0 3
32217: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32218: LD_INT 0
32220: PPUSH
32221: PPUSH
32222: PPUSH
// pom := GetBase ( fac ) ;
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 274
32237: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32238: LD_ADDR_VAR 0 4
32242: PUSH
32243: LD_VAR 0 2
32247: PUSH
32248: LD_INT 1
32250: ARRAY
32251: PPUSH
32252: LD_VAR 0 2
32256: PUSH
32257: LD_INT 2
32259: ARRAY
32260: PPUSH
32261: LD_VAR 0 2
32265: PUSH
32266: LD_INT 3
32268: ARRAY
32269: PPUSH
32270: LD_VAR 0 2
32274: PUSH
32275: LD_INT 4
32277: ARRAY
32278: PPUSH
32279: CALL_OW 449
32283: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32284: LD_ADDR_VAR 0 3
32288: PUSH
32289: LD_VAR 0 5
32293: PPUSH
32294: LD_INT 1
32296: PPUSH
32297: CALL_OW 275
32301: PUSH
32302: LD_VAR 0 4
32306: PUSH
32307: LD_INT 1
32309: ARRAY
32310: GREATEREQUAL
32311: PUSH
32312: LD_VAR 0 5
32316: PPUSH
32317: LD_INT 2
32319: PPUSH
32320: CALL_OW 275
32324: PUSH
32325: LD_VAR 0 4
32329: PUSH
32330: LD_INT 2
32332: ARRAY
32333: GREATEREQUAL
32334: AND
32335: PUSH
32336: LD_VAR 0 5
32340: PPUSH
32341: LD_INT 3
32343: PPUSH
32344: CALL_OW 275
32348: PUSH
32349: LD_VAR 0 4
32353: PUSH
32354: LD_INT 3
32356: ARRAY
32357: GREATEREQUAL
32358: AND
32359: ST_TO_ADDR
// end ;
32360: LD_VAR 0 3
32364: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
32369: PPUSH
32370: PPUSH
// pom := GetBase ( building ) ;
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 274
32385: ST_TO_ADDR
// if not pom then
32386: LD_VAR 0 3
32390: NOT
32391: IFFALSE 32395
// exit ;
32393: GO 32565
// btype := GetBType ( building ) ;
32395: LD_ADDR_VAR 0 5
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 266
32409: ST_TO_ADDR
// if btype = b_armoury then
32410: LD_VAR 0 5
32414: PUSH
32415: LD_INT 4
32417: EQUAL
32418: IFFALSE 32428
// btype := b_barracks ;
32420: LD_ADDR_VAR 0 5
32424: PUSH
32425: LD_INT 5
32427: ST_TO_ADDR
// if btype = b_depot then
32428: LD_VAR 0 5
32432: PUSH
32433: LD_INT 0
32435: EQUAL
32436: IFFALSE 32446
// btype := b_warehouse ;
32438: LD_ADDR_VAR 0 5
32442: PUSH
32443: LD_INT 1
32445: ST_TO_ADDR
// if btype = b_workshop then
32446: LD_VAR 0 5
32450: PUSH
32451: LD_INT 2
32453: EQUAL
32454: IFFALSE 32464
// btype := b_factory ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_INT 3
32463: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: LD_VAR 0 5
32473: PPUSH
32474: LD_VAR 0 1
32478: PPUSH
32479: CALL_OW 248
32483: PPUSH
32484: CALL_OW 450
32488: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32489: LD_ADDR_VAR 0 2
32493: PUSH
32494: LD_VAR 0 3
32498: PPUSH
32499: LD_INT 1
32501: PPUSH
32502: CALL_OW 275
32506: PUSH
32507: LD_VAR 0 4
32511: PUSH
32512: LD_INT 1
32514: ARRAY
32515: GREATEREQUAL
32516: PUSH
32517: LD_VAR 0 3
32521: PPUSH
32522: LD_INT 2
32524: PPUSH
32525: CALL_OW 275
32529: PUSH
32530: LD_VAR 0 4
32534: PUSH
32535: LD_INT 2
32537: ARRAY
32538: GREATEREQUAL
32539: AND
32540: PUSH
32541: LD_VAR 0 3
32545: PPUSH
32546: LD_INT 3
32548: PPUSH
32549: CALL_OW 275
32553: PUSH
32554: LD_VAR 0 4
32558: PUSH
32559: LD_INT 3
32561: ARRAY
32562: GREATEREQUAL
32563: AND
32564: ST_TO_ADDR
// end ;
32565: LD_VAR 0 2
32569: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
32574: PPUSH
// pom := GetBase ( building ) ;
32575: LD_ADDR_VAR 0 4
32579: PUSH
32580: LD_VAR 0 1
32584: PPUSH
32585: CALL_OW 274
32589: ST_TO_ADDR
// if not pom then
32590: LD_VAR 0 4
32594: NOT
32595: IFFALSE 32599
// exit ;
32597: GO 32700
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_VAR 0 2
32608: PPUSH
32609: LD_VAR 0 1
32613: PPUSH
32614: CALL_OW 248
32618: PPUSH
32619: CALL_OW 450
32623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_VAR 0 4
32633: PPUSH
32634: LD_INT 1
32636: PPUSH
32637: CALL_OW 275
32641: PUSH
32642: LD_VAR 0 5
32646: PUSH
32647: LD_INT 1
32649: ARRAY
32650: GREATEREQUAL
32651: PUSH
32652: LD_VAR 0 4
32656: PPUSH
32657: LD_INT 2
32659: PPUSH
32660: CALL_OW 275
32664: PUSH
32665: LD_VAR 0 5
32669: PUSH
32670: LD_INT 2
32672: ARRAY
32673: GREATEREQUAL
32674: AND
32675: PUSH
32676: LD_VAR 0 4
32680: PPUSH
32681: LD_INT 3
32683: PPUSH
32684: CALL_OW 275
32688: PUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_INT 3
32696: ARRAY
32697: GREATEREQUAL
32698: AND
32699: ST_TO_ADDR
// end ;
32700: LD_VAR 0 3
32704: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
// result := false ;
32718: LD_ADDR_VAR 0 8
32722: PUSH
32723: LD_INT 0
32725: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32726: LD_VAR 0 5
32730: NOT
32731: PUSH
32732: LD_VAR 0 1
32736: NOT
32737: OR
32738: PUSH
32739: LD_VAR 0 2
32743: NOT
32744: OR
32745: PUSH
32746: LD_VAR 0 3
32750: NOT
32751: OR
32752: IFFALSE 32756
// exit ;
32754: GO 33570
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32756: LD_ADDR_VAR 0 14
32760: PUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_VAR 0 2
32770: PPUSH
32771: LD_VAR 0 3
32775: PPUSH
32776: LD_VAR 0 4
32780: PPUSH
32781: LD_VAR 0 5
32785: PUSH
32786: LD_INT 1
32788: ARRAY
32789: PPUSH
32790: CALL_OW 248
32794: PPUSH
32795: LD_INT 0
32797: PPUSH
32798: CALL 34407 0 6
32802: ST_TO_ADDR
// if not hexes then
32803: LD_VAR 0 14
32807: NOT
32808: IFFALSE 32812
// exit ;
32810: GO 33570
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32812: LD_ADDR_VAR 0 17
32816: PUSH
32817: LD_VAR 0 5
32821: PPUSH
32822: LD_INT 22
32824: PUSH
32825: LD_VAR 0 13
32829: PPUSH
32830: CALL_OW 255
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 30
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 30
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PPUSH
32871: CALL_OW 72
32875: ST_TO_ADDR
// for i = 1 to hexes do
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: DOUBLE
32882: LD_INT 1
32884: DEC
32885: ST_TO_ADDR
32886: LD_VAR 0 14
32890: PUSH
32891: FOR_TO
32892: IFFALSE 33568
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32894: LD_ADDR_VAR 0 13
32898: PUSH
32899: LD_VAR 0 14
32903: PUSH
32904: LD_VAR 0 9
32908: ARRAY
32909: PUSH
32910: LD_INT 1
32912: ARRAY
32913: PPUSH
32914: LD_VAR 0 14
32918: PUSH
32919: LD_VAR 0 9
32923: ARRAY
32924: PUSH
32925: LD_INT 2
32927: ARRAY
32928: PPUSH
32929: CALL_OW 428
32933: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32934: LD_VAR 0 14
32938: PUSH
32939: LD_VAR 0 9
32943: ARRAY
32944: PUSH
32945: LD_INT 1
32947: ARRAY
32948: PPUSH
32949: LD_VAR 0 14
32953: PUSH
32954: LD_VAR 0 9
32958: ARRAY
32959: PUSH
32960: LD_INT 2
32962: ARRAY
32963: PPUSH
32964: CALL_OW 351
32968: PUSH
32969: LD_VAR 0 14
32973: PUSH
32974: LD_VAR 0 9
32978: ARRAY
32979: PUSH
32980: LD_INT 1
32982: ARRAY
32983: PPUSH
32984: LD_VAR 0 14
32988: PUSH
32989: LD_VAR 0 9
32993: ARRAY
32994: PUSH
32995: LD_INT 2
32997: ARRAY
32998: PPUSH
32999: CALL_OW 488
33003: NOT
33004: OR
33005: PUSH
33006: LD_VAR 0 13
33010: PPUSH
33011: CALL_OW 247
33015: PUSH
33016: LD_INT 3
33018: EQUAL
33019: OR
33020: IFFALSE 33026
// exit ;
33022: POP
33023: POP
33024: GO 33570
// if not tmp then
33026: LD_VAR 0 13
33030: NOT
33031: IFFALSE 33035
// continue ;
33033: GO 32891
// result := true ;
33035: LD_ADDR_VAR 0 8
33039: PUSH
33040: LD_INT 1
33042: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33043: LD_VAR 0 6
33047: PUSH
33048: LD_VAR 0 13
33052: PPUSH
33053: CALL_OW 247
33057: PUSH
33058: LD_INT 2
33060: EQUAL
33061: AND
33062: PUSH
33063: LD_VAR 0 13
33067: PPUSH
33068: CALL_OW 263
33072: PUSH
33073: LD_INT 1
33075: EQUAL
33076: AND
33077: IFFALSE 33241
// begin if IsDrivenBy ( tmp ) then
33079: LD_VAR 0 13
33083: PPUSH
33084: CALL_OW 311
33088: IFFALSE 33092
// continue ;
33090: GO 32891
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33092: LD_VAR 0 6
33096: PPUSH
33097: LD_INT 3
33099: PUSH
33100: LD_INT 60
33102: PUSH
33103: EMPTY
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: LD_INT 55
33115: PUSH
33116: EMPTY
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PPUSH
33127: CALL_OW 72
33131: IFFALSE 33239
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33133: LD_ADDR_VAR 0 18
33137: PUSH
33138: LD_VAR 0 6
33142: PPUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 60
33148: PUSH
33149: EMPTY
33150: LIST
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 3
33158: PUSH
33159: LD_INT 55
33161: PUSH
33162: EMPTY
33163: LIST
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 72
33177: PUSH
33178: LD_INT 1
33180: ARRAY
33181: ST_TO_ADDR
// if IsInUnit ( driver ) then
33182: LD_VAR 0 18
33186: PPUSH
33187: CALL_OW 310
33191: IFFALSE 33202
// ComExit ( driver ) ;
33193: LD_VAR 0 18
33197: PPUSH
33198: CALL 57591 0 1
// AddComEnterUnit ( driver , tmp ) ;
33202: LD_VAR 0 18
33206: PPUSH
33207: LD_VAR 0 13
33211: PPUSH
33212: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33216: LD_VAR 0 18
33220: PPUSH
33221: LD_VAR 0 7
33225: PPUSH
33226: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33230: LD_VAR 0 18
33234: PPUSH
33235: CALL_OW 181
// end ; continue ;
33239: GO 32891
// end ; if not cleaners or not tmp in cleaners then
33241: LD_VAR 0 6
33245: NOT
33246: PUSH
33247: LD_VAR 0 13
33251: PUSH
33252: LD_VAR 0 6
33256: IN
33257: NOT
33258: OR
33259: IFFALSE 33566
// begin if dep then
33261: LD_VAR 0 17
33265: IFFALSE 33401
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33267: LD_ADDR_VAR 0 16
33271: PUSH
33272: LD_VAR 0 17
33276: PUSH
33277: LD_INT 1
33279: ARRAY
33280: PPUSH
33281: CALL_OW 250
33285: PPUSH
33286: LD_VAR 0 17
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: PPUSH
33295: CALL_OW 254
33299: PPUSH
33300: LD_INT 5
33302: PPUSH
33303: CALL_OW 272
33307: PUSH
33308: LD_VAR 0 17
33312: PUSH
33313: LD_INT 1
33315: ARRAY
33316: PPUSH
33317: CALL_OW 251
33321: PPUSH
33322: LD_VAR 0 17
33326: PUSH
33327: LD_INT 1
33329: ARRAY
33330: PPUSH
33331: CALL_OW 254
33335: PPUSH
33336: LD_INT 5
33338: PPUSH
33339: CALL_OW 273
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33348: LD_VAR 0 16
33352: PUSH
33353: LD_INT 1
33355: ARRAY
33356: PPUSH
33357: LD_VAR 0 16
33361: PUSH
33362: LD_INT 2
33364: ARRAY
33365: PPUSH
33366: CALL_OW 488
33370: IFFALSE 33401
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33372: LD_VAR 0 13
33376: PPUSH
33377: LD_VAR 0 16
33381: PUSH
33382: LD_INT 1
33384: ARRAY
33385: PPUSH
33386: LD_VAR 0 16
33390: PUSH
33391: LD_INT 2
33393: ARRAY
33394: PPUSH
33395: CALL_OW 111
// continue ;
33399: GO 32891
// end ; end ; r := GetDir ( tmp ) ;
33401: LD_ADDR_VAR 0 15
33405: PUSH
33406: LD_VAR 0 13
33410: PPUSH
33411: CALL_OW 254
33415: ST_TO_ADDR
// if r = 5 then
33416: LD_VAR 0 15
33420: PUSH
33421: LD_INT 5
33423: EQUAL
33424: IFFALSE 33434
// r := 0 ;
33426: LD_ADDR_VAR 0 15
33430: PUSH
33431: LD_INT 0
33433: ST_TO_ADDR
// for j = r to 5 do
33434: LD_ADDR_VAR 0 10
33438: PUSH
33439: DOUBLE
33440: LD_VAR 0 15
33444: DEC
33445: ST_TO_ADDR
33446: LD_INT 5
33448: PUSH
33449: FOR_TO
33450: IFFALSE 33564
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33452: LD_ADDR_VAR 0 11
33456: PUSH
33457: LD_VAR 0 13
33461: PPUSH
33462: CALL_OW 250
33466: PPUSH
33467: LD_VAR 0 10
33471: PPUSH
33472: LD_INT 2
33474: PPUSH
33475: CALL_OW 272
33479: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33480: LD_ADDR_VAR 0 12
33484: PUSH
33485: LD_VAR 0 13
33489: PPUSH
33490: CALL_OW 251
33494: PPUSH
33495: LD_VAR 0 10
33499: PPUSH
33500: LD_INT 2
33502: PPUSH
33503: CALL_OW 273
33507: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33508: LD_VAR 0 11
33512: PPUSH
33513: LD_VAR 0 12
33517: PPUSH
33518: CALL_OW 488
33522: PUSH
33523: LD_VAR 0 11
33527: PPUSH
33528: LD_VAR 0 12
33532: PPUSH
33533: CALL_OW 428
33537: NOT
33538: AND
33539: IFFALSE 33562
// begin ComMoveXY ( tmp , _x , _y ) ;
33541: LD_VAR 0 13
33545: PPUSH
33546: LD_VAR 0 11
33550: PPUSH
33551: LD_VAR 0 12
33555: PPUSH
33556: CALL_OW 111
// break ;
33560: GO 33564
// end ; end ;
33562: GO 33449
33564: POP
33565: POP
// end ; end ;
33566: GO 32891
33568: POP
33569: POP
// end ;
33570: LD_VAR 0 8
33574: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33575: LD_INT 0
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
// result := false ;
33587: LD_ADDR_VAR 0 6
33591: PUSH
33592: LD_INT 0
33594: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33595: LD_VAR 0 1
33599: NOT
33600: PUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 266
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: IN
33621: NOT
33622: OR
33623: PUSH
33624: LD_VAR 0 2
33628: NOT
33629: OR
33630: PUSH
33631: LD_VAR 0 5
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: LD_INT 4
33650: PUSH
33651: LD_INT 5
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: IN
33662: NOT
33663: OR
33664: PUSH
33665: LD_VAR 0 3
33669: PPUSH
33670: LD_VAR 0 4
33674: PPUSH
33675: CALL_OW 488
33679: NOT
33680: OR
33681: IFFALSE 33685
// exit ;
33683: GO 34402
// pom := GetBase ( depot ) ;
33685: LD_ADDR_VAR 0 10
33689: PUSH
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 274
33699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33700: LD_ADDR_VAR 0 11
33704: PUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 248
33719: PPUSH
33720: CALL_OW 450
33724: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33725: LD_VAR 0 10
33729: PPUSH
33730: LD_INT 1
33732: PPUSH
33733: CALL_OW 275
33737: PUSH
33738: LD_VAR 0 11
33742: PUSH
33743: LD_INT 1
33745: ARRAY
33746: GREATEREQUAL
33747: PUSH
33748: LD_VAR 0 10
33752: PPUSH
33753: LD_INT 2
33755: PPUSH
33756: CALL_OW 275
33760: PUSH
33761: LD_VAR 0 11
33765: PUSH
33766: LD_INT 2
33768: ARRAY
33769: GREATEREQUAL
33770: AND
33771: PUSH
33772: LD_VAR 0 10
33776: PPUSH
33777: LD_INT 3
33779: PPUSH
33780: CALL_OW 275
33784: PUSH
33785: LD_VAR 0 11
33789: PUSH
33790: LD_INT 3
33792: ARRAY
33793: GREATEREQUAL
33794: AND
33795: NOT
33796: IFFALSE 33800
// exit ;
33798: GO 34402
// if GetBType ( depot ) = b_depot then
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 266
33809: PUSH
33810: LD_INT 0
33812: EQUAL
33813: IFFALSE 33825
// dist := 28 else
33815: LD_ADDR_VAR 0 14
33819: PUSH
33820: LD_INT 28
33822: ST_TO_ADDR
33823: GO 33833
// dist := 36 ;
33825: LD_ADDR_VAR 0 14
33829: PUSH
33830: LD_INT 36
33832: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33833: LD_VAR 0 1
33837: PPUSH
33838: LD_VAR 0 3
33842: PPUSH
33843: LD_VAR 0 4
33847: PPUSH
33848: CALL_OW 297
33852: PUSH
33853: LD_VAR 0 14
33857: GREATER
33858: IFFALSE 33862
// exit ;
33860: GO 34402
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33862: LD_ADDR_VAR 0 12
33866: PUSH
33867: LD_VAR 0 2
33871: PPUSH
33872: LD_VAR 0 3
33876: PPUSH
33877: LD_VAR 0 4
33881: PPUSH
33882: LD_VAR 0 5
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 248
33896: PPUSH
33897: LD_INT 0
33899: PPUSH
33900: CALL 34407 0 6
33904: ST_TO_ADDR
// if not hexes then
33905: LD_VAR 0 12
33909: NOT
33910: IFFALSE 33914
// exit ;
33912: GO 34402
// hex := GetHexInfo ( x , y ) ;
33914: LD_ADDR_VAR 0 15
33918: PUSH
33919: LD_VAR 0 3
33923: PPUSH
33924: LD_VAR 0 4
33928: PPUSH
33929: CALL_OW 546
33933: ST_TO_ADDR
// if hex [ 1 ] then
33934: LD_VAR 0 15
33938: PUSH
33939: LD_INT 1
33941: ARRAY
33942: IFFALSE 33946
// exit ;
33944: GO 34402
// height := hex [ 2 ] ;
33946: LD_ADDR_VAR 0 13
33950: PUSH
33951: LD_VAR 0 15
33955: PUSH
33956: LD_INT 2
33958: ARRAY
33959: ST_TO_ADDR
// for i = 1 to hexes do
33960: LD_ADDR_VAR 0 7
33964: PUSH
33965: DOUBLE
33966: LD_INT 1
33968: DEC
33969: ST_TO_ADDR
33970: LD_VAR 0 12
33974: PUSH
33975: FOR_TO
33976: IFFALSE 34306
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33978: LD_VAR 0 12
33982: PUSH
33983: LD_VAR 0 7
33987: ARRAY
33988: PUSH
33989: LD_INT 1
33991: ARRAY
33992: PPUSH
33993: LD_VAR 0 12
33997: PUSH
33998: LD_VAR 0 7
34002: ARRAY
34003: PUSH
34004: LD_INT 2
34006: ARRAY
34007: PPUSH
34008: CALL_OW 488
34012: NOT
34013: PUSH
34014: LD_VAR 0 12
34018: PUSH
34019: LD_VAR 0 7
34023: ARRAY
34024: PUSH
34025: LD_INT 1
34027: ARRAY
34028: PPUSH
34029: LD_VAR 0 12
34033: PUSH
34034: LD_VAR 0 7
34038: ARRAY
34039: PUSH
34040: LD_INT 2
34042: ARRAY
34043: PPUSH
34044: CALL_OW 428
34048: PUSH
34049: LD_INT 0
34051: GREATER
34052: OR
34053: PUSH
34054: LD_VAR 0 12
34058: PUSH
34059: LD_VAR 0 7
34063: ARRAY
34064: PUSH
34065: LD_INT 1
34067: ARRAY
34068: PPUSH
34069: LD_VAR 0 12
34073: PUSH
34074: LD_VAR 0 7
34078: ARRAY
34079: PUSH
34080: LD_INT 2
34082: ARRAY
34083: PPUSH
34084: CALL_OW 351
34088: OR
34089: IFFALSE 34095
// exit ;
34091: POP
34092: POP
34093: GO 34402
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34095: LD_ADDR_VAR 0 8
34099: PUSH
34100: LD_VAR 0 12
34104: PUSH
34105: LD_VAR 0 7
34109: ARRAY
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PPUSH
34115: LD_VAR 0 12
34119: PUSH
34120: LD_VAR 0 7
34124: ARRAY
34125: PUSH
34126: LD_INT 2
34128: ARRAY
34129: PPUSH
34130: CALL_OW 546
34134: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34135: LD_VAR 0 8
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: PUSH
34144: LD_VAR 0 8
34148: PUSH
34149: LD_INT 2
34151: ARRAY
34152: PUSH
34153: LD_VAR 0 13
34157: PUSH
34158: LD_INT 2
34160: PLUS
34161: GREATER
34162: OR
34163: PUSH
34164: LD_VAR 0 8
34168: PUSH
34169: LD_INT 2
34171: ARRAY
34172: PUSH
34173: LD_VAR 0 13
34177: PUSH
34178: LD_INT 2
34180: MINUS
34181: LESS
34182: OR
34183: PUSH
34184: LD_VAR 0 8
34188: PUSH
34189: LD_INT 3
34191: ARRAY
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: LD_INT 8
34198: PUSH
34199: LD_INT 9
34201: PUSH
34202: LD_INT 10
34204: PUSH
34205: LD_INT 11
34207: PUSH
34208: LD_INT 12
34210: PUSH
34211: LD_INT 13
34213: PUSH
34214: LD_INT 16
34216: PUSH
34217: LD_INT 17
34219: PUSH
34220: LD_INT 18
34222: PUSH
34223: LD_INT 19
34225: PUSH
34226: LD_INT 20
34228: PUSH
34229: LD_INT 21
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: IN
34247: NOT
34248: OR
34249: PUSH
34250: LD_VAR 0 8
34254: PUSH
34255: LD_INT 5
34257: ARRAY
34258: NOT
34259: OR
34260: PUSH
34261: LD_VAR 0 8
34265: PUSH
34266: LD_INT 6
34268: ARRAY
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 7
34278: PUSH
34279: LD_INT 9
34281: PUSH
34282: LD_INT 10
34284: PUSH
34285: LD_INT 11
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: IN
34296: NOT
34297: OR
34298: IFFALSE 34304
// exit ;
34300: POP
34301: POP
34302: GO 34402
// end ;
34304: GO 33975
34306: POP
34307: POP
// side := GetSide ( depot ) ;
34308: LD_ADDR_VAR 0 9
34312: PUSH
34313: LD_VAR 0 1
34317: PPUSH
34318: CALL_OW 255
34322: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34323: LD_VAR 0 9
34327: PPUSH
34328: LD_VAR 0 3
34332: PPUSH
34333: LD_VAR 0 4
34337: PPUSH
34338: LD_INT 20
34340: PPUSH
34341: CALL 26723 0 4
34345: PUSH
34346: LD_INT 4
34348: ARRAY
34349: IFFALSE 34353
// exit ;
34351: GO 34402
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34353: LD_VAR 0 2
34357: PUSH
34358: LD_INT 29
34360: PUSH
34361: LD_INT 30
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: IN
34368: PUSH
34369: LD_VAR 0 3
34373: PPUSH
34374: LD_VAR 0 4
34378: PPUSH
34379: LD_VAR 0 9
34383: PPUSH
34384: CALL_OW 440
34388: NOT
34389: AND
34390: IFFALSE 34394
// exit ;
34392: GO 34402
// result := true ;
34394: LD_ADDR_VAR 0 6
34398: PUSH
34399: LD_INT 1
34401: ST_TO_ADDR
// end ;
34402: LD_VAR 0 6
34406: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34407: LD_INT 0
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
// result = [ ] ;
34467: LD_ADDR_VAR 0 7
34471: PUSH
34472: EMPTY
34473: ST_TO_ADDR
// temp_list = [ ] ;
34474: LD_ADDR_VAR 0 9
34478: PUSH
34479: EMPTY
34480: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34481: LD_VAR 0 4
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: LD_INT 5
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: IN
34512: NOT
34513: PUSH
34514: LD_VAR 0 1
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: IN
34529: PUSH
34530: LD_VAR 0 5
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: IN
34549: NOT
34550: AND
34551: OR
34552: IFFALSE 34556
// exit ;
34554: GO 52947
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34556: LD_VAR 0 1
34560: PUSH
34561: LD_INT 6
34563: PUSH
34564: LD_INT 7
34566: PUSH
34567: LD_INT 8
34569: PUSH
34570: LD_INT 13
34572: PUSH
34573: LD_INT 12
34575: PUSH
34576: LD_INT 15
34578: PUSH
34579: LD_INT 11
34581: PUSH
34582: LD_INT 14
34584: PUSH
34585: LD_INT 10
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: IN
34599: IFFALSE 34609
// btype = b_lab ;
34601: LD_ADDR_VAR 0 1
34605: PUSH
34606: LD_INT 6
34608: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34609: LD_VAR 0 6
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: IN
34628: NOT
34629: PUSH
34630: LD_VAR 0 1
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: LD_INT 6
34649: PUSH
34650: LD_INT 36
34652: PUSH
34653: LD_INT 4
34655: PUSH
34656: LD_INT 5
34658: PUSH
34659: LD_INT 31
34661: PUSH
34662: LD_INT 32
34664: PUSH
34665: LD_INT 33
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: IN
34681: NOT
34682: PUSH
34683: LD_VAR 0 6
34687: PUSH
34688: LD_INT 1
34690: EQUAL
34691: AND
34692: OR
34693: PUSH
34694: LD_VAR 0 1
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: IN
34709: NOT
34710: PUSH
34711: LD_VAR 0 6
34715: PUSH
34716: LD_INT 2
34718: EQUAL
34719: AND
34720: OR
34721: IFFALSE 34731
// mode = 0 ;
34723: LD_ADDR_VAR 0 6
34727: PUSH
34728: LD_INT 0
34730: ST_TO_ADDR
// case mode of 0 :
34731: LD_VAR 0 6
34735: PUSH
34736: LD_INT 0
34738: DOUBLE
34739: EQUAL
34740: IFTRUE 34744
34742: GO 46197
34744: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34745: LD_ADDR_VAR 0 11
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34938: LD_ADDR_VAR 0 12
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 3
35106: NEG
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35134: LD_ADDR_VAR 0 13
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: LD_INT 2
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: LD_INT 3
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 3
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: NEG
35306: PUSH
35307: LD_INT 3
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35333: LD_ADDR_VAR 0 14
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 3
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 3
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35529: LD_ADDR_VAR 0 15
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 3
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35722: LD_ADDR_VAR 0 16
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 2
35845: NEG
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 2
35857: NEG
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 3
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35915: LD_ADDR_VAR 0 17
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: NEG
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: LD_INT 2
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36145: LD_ADDR_VAR 0 18
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: LD_INT 2
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36375: LD_ADDR_VAR 0 19
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: NEG
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: NEG
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36605: LD_ADDR_VAR 0 20
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 2
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36835: LD_ADDR_VAR 0 21
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: LD_INT 2
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37065: LD_ADDR_VAR 0 22
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 2
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37295: LD_ADDR_VAR 0 23
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 2
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: LD_INT 3
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: LD_INT 3
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37575: LD_ADDR_VAR 0 24
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37851: LD_ADDR_VAR 0 25
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38125: LD_ADDR_VAR 0 26
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38401: LD_ADDR_VAR 0 27
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: NEG
38601: PUSH
38602: LD_INT 2
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 3
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38681: LD_ADDR_VAR 0 28
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: NEG
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: LD_INT 3
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 3
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 3
38916: NEG
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: NEG
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38963: LD_ADDR_VAR 0 29
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 3
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39242: LD_ADDR_VAR 0 30
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: LD_INT 3
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39520: LD_ADDR_VAR 0 31
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: LD_INT 3
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 3
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39798: LD_ADDR_VAR 0 32
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 3
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40076: LD_ADDR_VAR 0 33
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 3
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 3
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 3
40320: NEG
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40355: LD_ADDR_VAR 0 34
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: NEG
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 3
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40635: LD_ADDR_VAR 0 35
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40747: LD_ADDR_VAR 0 36
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40859: LD_ADDR_VAR 0 37
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40971: LD_ADDR_VAR 0 38
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41083: LD_ADDR_VAR 0 39
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41195: LD_ADDR_VAR 0 40
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41307: LD_ADDR_VAR 0 41
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 3
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 3
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 3
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 3
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 3
41616: NEG
41617: PUSH
41618: LD_INT 3
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41657: LD_ADDR_VAR 0 42
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 3
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 3
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 3
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: NEG
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42007: LD_ADDR_VAR 0 43
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 3
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: NEG
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42355: LD_ADDR_VAR 0 44
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 2
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 3
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42705: LD_ADDR_VAR 0 45
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 3
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 3
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 3
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 3
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43055: LD_ADDR_VAR 0 46
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 3
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 3
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 3
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 3
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43403: LD_ADDR_VAR 0 47
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43554: LD_ADDR_VAR 0 48
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43701: LD_ADDR_VAR 0 49
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43845: LD_ADDR_VAR 0 50
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43989: LD_ADDR_VAR 0 51
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44136: LD_ADDR_VAR 0 52
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44287: LD_ADDR_VAR 0 53
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44517: LD_ADDR_VAR 0 54
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44747: LD_ADDR_VAR 0 55
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44977: LD_ADDR_VAR 0 56
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45207: LD_ADDR_VAR 0 57
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45437: LD_ADDR_VAR 0 58
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45667: LD_ADDR_VAR 0 59
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45755: LD_ADDR_VAR 0 60
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45843: LD_ADDR_VAR 0 61
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45931: LD_ADDR_VAR 0 62
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46019: LD_ADDR_VAR 0 63
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46107: LD_ADDR_VAR 0 64
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// end ; 1 :
46195: GO 52092
46197: LD_INT 1
46199: DOUBLE
46200: EQUAL
46201: IFTRUE 46205
46203: GO 48828
46205: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46206: LD_ADDR_VAR 0 11
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 3
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 3
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46250: LD_ADDR_VAR 0 12
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46291: LD_ADDR_VAR 0 13
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46331: LD_ADDR_VAR 0 14
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46372: LD_ADDR_VAR 0 15
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46416: LD_ADDR_VAR 0 16
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46462: LD_ADDR_VAR 0 17
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 3
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46506: LD_ADDR_VAR 0 18
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46547: LD_ADDR_VAR 0 19
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46587: LD_ADDR_VAR 0 20
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46628: LD_ADDR_VAR 0 21
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 3
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46672: LD_ADDR_VAR 0 22
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 3
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 3
46703: NEG
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46718: LD_ADDR_VAR 0 23
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 4
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46762: LD_ADDR_VAR 0 24
46766: PUSH
46767: LD_INT 3
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 4
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46803: LD_ADDR_VAR 0 25
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 4
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 4
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46843: LD_ADDR_VAR 0 26
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 4
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46884: LD_ADDR_VAR 0 27
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 4
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46928: LD_ADDR_VAR 0 28
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: LD_INT 4
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 4
46959: NEG
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46974: LD_ADDR_VAR 0 29
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 3
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 4
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 4
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 5
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 5
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 4
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 6
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 6
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 5
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47129: LD_ADDR_VAR 0 30
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 4
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 5
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 5
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 5
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 6
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 6
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47272: LD_ADDR_VAR 0 31
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 4
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 4
47319: PUSH
47320: LD_INT 4
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 4
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 5
47339: PUSH
47340: LD_INT 4
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 5
47349: PUSH
47350: LD_INT 5
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 4
47359: PUSH
47360: LD_INT 5
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 6
47369: PUSH
47370: LD_INT 5
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 6
47379: PUSH
47380: LD_INT 6
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 5
47389: PUSH
47390: LD_INT 6
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47411: LD_ADDR_VAR 0 32
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 4
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 4
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 5
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 5
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 4
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 6
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 6
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 5
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47554: LD_ADDR_VAR 0 33
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 4
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 4
47629: NEG
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 5
47640: NEG
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 5
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 5
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 6
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 6
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47709: LD_ADDR_VAR 0 34
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: LD_INT 4
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 4
47764: NEG
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 4
47776: NEG
47777: PUSH
47778: LD_INT 4
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 4
47788: NEG
47789: PUSH
47790: LD_INT 5
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 5
47800: NEG
47801: PUSH
47802: LD_INT 4
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 5
47812: NEG
47813: PUSH
47814: LD_INT 5
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 5
47824: NEG
47825: PUSH
47826: LD_INT 6
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 6
47836: NEG
47837: PUSH
47838: LD_INT 5
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 6
47848: NEG
47849: PUSH
47850: LD_INT 6
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47872: LD_ADDR_VAR 0 41
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47916: LD_ADDR_VAR 0 42
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 3
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47957: LD_ADDR_VAR 0 43
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47997: LD_ADDR_VAR 0 44
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 3
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48038: LD_ADDR_VAR 0 45
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48082: LD_ADDR_VAR 0 46
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48128: LD_ADDR_VAR 0 47
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48161: LD_ADDR_VAR 0 48
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48192: LD_ADDR_VAR 0 49
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48221: LD_ADDR_VAR 0 50
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48250: LD_ADDR_VAR 0 51
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48281: LD_ADDR_VAR 0 52
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48314: LD_ADDR_VAR 0 53
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48358: LD_ADDR_VAR 0 54
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48399: LD_ADDR_VAR 0 55
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48439: LD_ADDR_VAR 0 56
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48480: LD_ADDR_VAR 0 57
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48524: LD_ADDR_VAR 0 58
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48570: LD_ADDR_VAR 0 59
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48614: LD_ADDR_VAR 0 60
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48655: LD_ADDR_VAR 0 61
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48695: LD_ADDR_VAR 0 62
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48736: LD_ADDR_VAR 0 63
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48780: LD_ADDR_VAR 0 64
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// end ; 2 :
48826: GO 52092
48828: LD_INT 2
48830: DOUBLE
48831: EQUAL
48832: IFTRUE 48836
48834: GO 52091
48836: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48837: LD_ADDR_VAR 0 29
48841: PUSH
48842: LD_INT 4
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 4
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 5
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 5
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 4
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 3
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 5
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 4
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 4
48967: PUSH
48968: LD_INT 4
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: LD_INT 4
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 4
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 4
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 4
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 4
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 5
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 5
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 4
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 5
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: NEG
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 4
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 4
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 4
49222: NEG
49223: PUSH
49224: LD_INT 4
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 4
49234: NEG
49235: PUSH
49236: LD_INT 5
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: LD_INT 4
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: LD_INT 3
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 4
49270: NEG
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 5
49282: NEG
49283: PUSH
49284: LD_INT 4
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 5
49294: NEG
49295: PUSH
49296: LD_INT 5
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: LD_INT 5
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 5
49318: NEG
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49375: LD_ADDR_VAR 0 30
49379: PUSH
49380: LD_INT 4
49382: PUSH
49383: LD_INT 4
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 4
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 5
49402: PUSH
49403: LD_INT 4
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 5
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 4
49422: PUSH
49423: LD_INT 5
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: PUSH
49433: LD_INT 4
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 5
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: LD_INT 5
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 3
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: LD_INT 4
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 4
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 3
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 4
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 4
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 4
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 4
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 5
49621: NEG
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 5
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 5
49644: NEG
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: LD_INT 4
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 4
49727: NEG
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 4
49739: NEG
49740: PUSH
49741: LD_INT 4
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 4
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 4
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 4
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 5
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 4
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 3
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 3
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 4
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 5
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 5
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49922: LD_ADDR_VAR 0 31
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 4
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 4
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 5
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 5
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 4
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 4
50078: NEG
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 4
50124: NEG
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 4
50136: NEG
50137: PUSH
50138: LD_INT 5
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: LD_INT 4
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 4
50172: NEG
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: NEG
50185: PUSH
50186: LD_INT 4
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 5
50196: NEG
50197: PUSH
50198: LD_INT 5
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 5
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 5
50220: NEG
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 3
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 4
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 4
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 4
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 4
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 4
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 5
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 5
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 5
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50472: LD_ADDR_VAR 0 32
50476: PUSH
50477: LD_INT 4
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 4
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 4
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 5
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 5
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 5
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: LD_INT 4
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 3
50629: NEG
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: NEG
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: LD_INT 4
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 4
50677: NEG
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 4
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 5
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 4
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 4
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 5
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 5
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 4
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 4
50884: PUSH
50885: LD_INT 4
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 4
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 5
50904: PUSH
50905: LD_INT 4
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 5
50914: PUSH
50915: LD_INT 5
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 4
50924: PUSH
50925: LD_INT 5
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: LD_INT 4
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 3
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: LD_INT 5
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51019: LD_ADDR_VAR 0 33
51023: PUSH
51024: LD_INT 4
51026: NEG
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 4
51038: NEG
51039: PUSH
51040: LD_INT 5
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 4
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 4
51074: NEG
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 5
51086: NEG
51087: PUSH
51088: LD_INT 4
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 5
51098: NEG
51099: PUSH
51100: LD_INT 5
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: LD_INT 5
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 5
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 4
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 4
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 4
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 4
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 5
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 5
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 4
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 4
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 4
51359: PUSH
51360: LD_INT 4
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 4
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 4
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 4
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 5
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 4
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 5
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51557: LD_ADDR_VAR 0 34
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 4
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 5
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 4
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 4
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 5
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 5
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 4
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 4
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 4
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 4
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 5
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 5
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 5
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 4
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 4
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 4
51942: NEG
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 4
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 4
51987: NEG
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 5
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 5
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 5
52021: NEG
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// end ; end ;
52089: GO 52092
52091: POP
// case btype of b_depot , b_warehouse :
52092: LD_VAR 0 1
52096: PUSH
52097: LD_INT 0
52099: DOUBLE
52100: EQUAL
52101: IFTRUE 52111
52103: LD_INT 1
52105: DOUBLE
52106: EQUAL
52107: IFTRUE 52111
52109: GO 52312
52111: POP
// case nation of nation_american :
52112: LD_VAR 0 5
52116: PUSH
52117: LD_INT 1
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52125
52123: GO 52181
52125: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52126: LD_ADDR_VAR 0 9
52130: PUSH
52131: LD_VAR 0 11
52135: PUSH
52136: LD_VAR 0 12
52140: PUSH
52141: LD_VAR 0 13
52145: PUSH
52146: LD_VAR 0 14
52150: PUSH
52151: LD_VAR 0 15
52155: PUSH
52156: LD_VAR 0 16
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: PUSH
52169: LD_VAR 0 4
52173: PUSH
52174: LD_INT 1
52176: PLUS
52177: ARRAY
52178: ST_TO_ADDR
52179: GO 52310
52181: LD_INT 2
52183: DOUBLE
52184: EQUAL
52185: IFTRUE 52189
52187: GO 52245
52189: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52190: LD_ADDR_VAR 0 9
52194: PUSH
52195: LD_VAR 0 17
52199: PUSH
52200: LD_VAR 0 18
52204: PUSH
52205: LD_VAR 0 19
52209: PUSH
52210: LD_VAR 0 20
52214: PUSH
52215: LD_VAR 0 21
52219: PUSH
52220: LD_VAR 0 22
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: PUSH
52233: LD_VAR 0 4
52237: PUSH
52238: LD_INT 1
52240: PLUS
52241: ARRAY
52242: ST_TO_ADDR
52243: GO 52310
52245: LD_INT 3
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 52309
52253: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52254: LD_ADDR_VAR 0 9
52258: PUSH
52259: LD_VAR 0 23
52263: PUSH
52264: LD_VAR 0 24
52268: PUSH
52269: LD_VAR 0 25
52273: PUSH
52274: LD_VAR 0 26
52278: PUSH
52279: LD_VAR 0 27
52283: PUSH
52284: LD_VAR 0 28
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: PUSH
52297: LD_VAR 0 4
52301: PUSH
52302: LD_INT 1
52304: PLUS
52305: ARRAY
52306: ST_TO_ADDR
52307: GO 52310
52309: POP
52310: GO 52865
52312: LD_INT 2
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52326
52318: LD_INT 3
52320: DOUBLE
52321: EQUAL
52322: IFTRUE 52326
52324: GO 52382
52326: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52327: LD_ADDR_VAR 0 9
52331: PUSH
52332: LD_VAR 0 29
52336: PUSH
52337: LD_VAR 0 30
52341: PUSH
52342: LD_VAR 0 31
52346: PUSH
52347: LD_VAR 0 32
52351: PUSH
52352: LD_VAR 0 33
52356: PUSH
52357: LD_VAR 0 34
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: PUSH
52370: LD_VAR 0 4
52374: PUSH
52375: LD_INT 1
52377: PLUS
52378: ARRAY
52379: ST_TO_ADDR
52380: GO 52865
52382: LD_INT 16
52384: DOUBLE
52385: EQUAL
52386: IFTRUE 52444
52388: LD_INT 17
52390: DOUBLE
52391: EQUAL
52392: IFTRUE 52444
52394: LD_INT 18
52396: DOUBLE
52397: EQUAL
52398: IFTRUE 52444
52400: LD_INT 19
52402: DOUBLE
52403: EQUAL
52404: IFTRUE 52444
52406: LD_INT 22
52408: DOUBLE
52409: EQUAL
52410: IFTRUE 52444
52412: LD_INT 20
52414: DOUBLE
52415: EQUAL
52416: IFTRUE 52444
52418: LD_INT 21
52420: DOUBLE
52421: EQUAL
52422: IFTRUE 52444
52424: LD_INT 23
52426: DOUBLE
52427: EQUAL
52428: IFTRUE 52444
52430: LD_INT 24
52432: DOUBLE
52433: EQUAL
52434: IFTRUE 52444
52436: LD_INT 25
52438: DOUBLE
52439: EQUAL
52440: IFTRUE 52444
52442: GO 52500
52444: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52445: LD_ADDR_VAR 0 9
52449: PUSH
52450: LD_VAR 0 35
52454: PUSH
52455: LD_VAR 0 36
52459: PUSH
52460: LD_VAR 0 37
52464: PUSH
52465: LD_VAR 0 38
52469: PUSH
52470: LD_VAR 0 39
52474: PUSH
52475: LD_VAR 0 40
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: PUSH
52488: LD_VAR 0 4
52492: PUSH
52493: LD_INT 1
52495: PLUS
52496: ARRAY
52497: ST_TO_ADDR
52498: GO 52865
52500: LD_INT 6
52502: DOUBLE
52503: EQUAL
52504: IFTRUE 52556
52506: LD_INT 7
52508: DOUBLE
52509: EQUAL
52510: IFTRUE 52556
52512: LD_INT 8
52514: DOUBLE
52515: EQUAL
52516: IFTRUE 52556
52518: LD_INT 13
52520: DOUBLE
52521: EQUAL
52522: IFTRUE 52556
52524: LD_INT 12
52526: DOUBLE
52527: EQUAL
52528: IFTRUE 52556
52530: LD_INT 15
52532: DOUBLE
52533: EQUAL
52534: IFTRUE 52556
52536: LD_INT 11
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52556
52542: LD_INT 14
52544: DOUBLE
52545: EQUAL
52546: IFTRUE 52556
52548: LD_INT 10
52550: DOUBLE
52551: EQUAL
52552: IFTRUE 52556
52554: GO 52612
52556: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52557: LD_ADDR_VAR 0 9
52561: PUSH
52562: LD_VAR 0 41
52566: PUSH
52567: LD_VAR 0 42
52571: PUSH
52572: LD_VAR 0 43
52576: PUSH
52577: LD_VAR 0 44
52581: PUSH
52582: LD_VAR 0 45
52586: PUSH
52587: LD_VAR 0 46
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: PUSH
52600: LD_VAR 0 4
52604: PUSH
52605: LD_INT 1
52607: PLUS
52608: ARRAY
52609: ST_TO_ADDR
52610: GO 52865
52612: LD_INT 36
52614: DOUBLE
52615: EQUAL
52616: IFTRUE 52620
52618: GO 52676
52620: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52621: LD_ADDR_VAR 0 9
52625: PUSH
52626: LD_VAR 0 47
52630: PUSH
52631: LD_VAR 0 48
52635: PUSH
52636: LD_VAR 0 49
52640: PUSH
52641: LD_VAR 0 50
52645: PUSH
52646: LD_VAR 0 51
52650: PUSH
52651: LD_VAR 0 52
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: PUSH
52664: LD_VAR 0 4
52668: PUSH
52669: LD_INT 1
52671: PLUS
52672: ARRAY
52673: ST_TO_ADDR
52674: GO 52865
52676: LD_INT 4
52678: DOUBLE
52679: EQUAL
52680: IFTRUE 52702
52682: LD_INT 5
52684: DOUBLE
52685: EQUAL
52686: IFTRUE 52702
52688: LD_INT 34
52690: DOUBLE
52691: EQUAL
52692: IFTRUE 52702
52694: LD_INT 37
52696: DOUBLE
52697: EQUAL
52698: IFTRUE 52702
52700: GO 52758
52702: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52703: LD_ADDR_VAR 0 9
52707: PUSH
52708: LD_VAR 0 53
52712: PUSH
52713: LD_VAR 0 54
52717: PUSH
52718: LD_VAR 0 55
52722: PUSH
52723: LD_VAR 0 56
52727: PUSH
52728: LD_VAR 0 57
52732: PUSH
52733: LD_VAR 0 58
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 4
52750: PUSH
52751: LD_INT 1
52753: PLUS
52754: ARRAY
52755: ST_TO_ADDR
52756: GO 52865
52758: LD_INT 31
52760: DOUBLE
52761: EQUAL
52762: IFTRUE 52808
52764: LD_INT 32
52766: DOUBLE
52767: EQUAL
52768: IFTRUE 52808
52770: LD_INT 33
52772: DOUBLE
52773: EQUAL
52774: IFTRUE 52808
52776: LD_INT 27
52778: DOUBLE
52779: EQUAL
52780: IFTRUE 52808
52782: LD_INT 26
52784: DOUBLE
52785: EQUAL
52786: IFTRUE 52808
52788: LD_INT 28
52790: DOUBLE
52791: EQUAL
52792: IFTRUE 52808
52794: LD_INT 29
52796: DOUBLE
52797: EQUAL
52798: IFTRUE 52808
52800: LD_INT 30
52802: DOUBLE
52803: EQUAL
52804: IFTRUE 52808
52806: GO 52864
52808: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52809: LD_ADDR_VAR 0 9
52813: PUSH
52814: LD_VAR 0 59
52818: PUSH
52819: LD_VAR 0 60
52823: PUSH
52824: LD_VAR 0 61
52828: PUSH
52829: LD_VAR 0 62
52833: PUSH
52834: LD_VAR 0 63
52838: PUSH
52839: LD_VAR 0 64
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: PUSH
52852: LD_VAR 0 4
52856: PUSH
52857: LD_INT 1
52859: PLUS
52860: ARRAY
52861: ST_TO_ADDR
52862: GO 52865
52864: POP
// temp_list2 = [ ] ;
52865: LD_ADDR_VAR 0 10
52869: PUSH
52870: EMPTY
52871: ST_TO_ADDR
// for i in temp_list do
52872: LD_ADDR_VAR 0 8
52876: PUSH
52877: LD_VAR 0 9
52881: PUSH
52882: FOR_IN
52883: IFFALSE 52935
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52885: LD_ADDR_VAR 0 10
52889: PUSH
52890: LD_VAR 0 10
52894: PUSH
52895: LD_VAR 0 8
52899: PUSH
52900: LD_INT 1
52902: ARRAY
52903: PUSH
52904: LD_VAR 0 2
52908: PLUS
52909: PUSH
52910: LD_VAR 0 8
52914: PUSH
52915: LD_INT 2
52917: ARRAY
52918: PUSH
52919: LD_VAR 0 3
52923: PLUS
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: ADD
52932: ST_TO_ADDR
52933: GO 52882
52935: POP
52936: POP
// result = temp_list2 ;
52937: LD_ADDR_VAR 0 7
52941: PUSH
52942: LD_VAR 0 10
52946: ST_TO_ADDR
// end ;
52947: LD_VAR 0 7
52951: RET
// export function EnemyInRange ( unit , dist ) ; begin
52952: LD_INT 0
52954: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52955: LD_ADDR_VAR 0 3
52959: PUSH
52960: LD_VAR 0 1
52964: PPUSH
52965: CALL_OW 255
52969: PPUSH
52970: LD_VAR 0 1
52974: PPUSH
52975: CALL_OW 250
52979: PPUSH
52980: LD_VAR 0 1
52984: PPUSH
52985: CALL_OW 251
52989: PPUSH
52990: LD_VAR 0 2
52994: PPUSH
52995: CALL 26723 0 4
52999: PUSH
53000: LD_INT 4
53002: ARRAY
53003: ST_TO_ADDR
// end ;
53004: LD_VAR 0 3
53008: RET
// export function PlayerSeeMe ( unit ) ; begin
53009: LD_INT 0
53011: PPUSH
// result := See ( your_side , unit ) ;
53012: LD_ADDR_VAR 0 2
53016: PUSH
53017: LD_OWVAR 2
53021: PPUSH
53022: LD_VAR 0 1
53026: PPUSH
53027: CALL_OW 292
53031: ST_TO_ADDR
// end ;
53032: LD_VAR 0 2
53036: RET
// export function ReverseDir ( unit ) ; begin
53037: LD_INT 0
53039: PPUSH
// if not unit then
53040: LD_VAR 0 1
53044: NOT
53045: IFFALSE 53049
// exit ;
53047: GO 53072
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53049: LD_ADDR_VAR 0 2
53053: PUSH
53054: LD_VAR 0 1
53058: PPUSH
53059: CALL_OW 254
53063: PUSH
53064: LD_INT 3
53066: PLUS
53067: PUSH
53068: LD_INT 6
53070: MOD
53071: ST_TO_ADDR
// end ;
53072: LD_VAR 0 2
53076: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53077: LD_INT 0
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
// if not hexes then
53084: LD_VAR 0 2
53088: NOT
53089: IFFALSE 53093
// exit ;
53091: GO 53241
// dist := 9999 ;
53093: LD_ADDR_VAR 0 5
53097: PUSH
53098: LD_INT 9999
53100: ST_TO_ADDR
// for i = 1 to hexes do
53101: LD_ADDR_VAR 0 4
53105: PUSH
53106: DOUBLE
53107: LD_INT 1
53109: DEC
53110: ST_TO_ADDR
53111: LD_VAR 0 2
53115: PUSH
53116: FOR_TO
53117: IFFALSE 53229
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53119: LD_VAR 0 1
53123: PPUSH
53124: LD_VAR 0 2
53128: PUSH
53129: LD_VAR 0 4
53133: ARRAY
53134: PUSH
53135: LD_INT 1
53137: ARRAY
53138: PPUSH
53139: LD_VAR 0 2
53143: PUSH
53144: LD_VAR 0 4
53148: ARRAY
53149: PUSH
53150: LD_INT 2
53152: ARRAY
53153: PPUSH
53154: CALL_OW 297
53158: PUSH
53159: LD_VAR 0 5
53163: LESS
53164: IFFALSE 53227
// begin hex := hexes [ i ] ;
53166: LD_ADDR_VAR 0 7
53170: PUSH
53171: LD_VAR 0 2
53175: PUSH
53176: LD_VAR 0 4
53180: ARRAY
53181: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53182: LD_ADDR_VAR 0 5
53186: PUSH
53187: LD_VAR 0 1
53191: PPUSH
53192: LD_VAR 0 2
53196: PUSH
53197: LD_VAR 0 4
53201: ARRAY
53202: PUSH
53203: LD_INT 1
53205: ARRAY
53206: PPUSH
53207: LD_VAR 0 2
53211: PUSH
53212: LD_VAR 0 4
53216: ARRAY
53217: PUSH
53218: LD_INT 2
53220: ARRAY
53221: PPUSH
53222: CALL_OW 297
53226: ST_TO_ADDR
// end ; end ;
53227: GO 53116
53229: POP
53230: POP
// result := hex ;
53231: LD_ADDR_VAR 0 3
53235: PUSH
53236: LD_VAR 0 7
53240: ST_TO_ADDR
// end ;
53241: LD_VAR 0 3
53245: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53246: LD_INT 0
53248: PPUSH
53249: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53250: LD_VAR 0 1
53254: NOT
53255: PUSH
53256: LD_VAR 0 1
53260: PUSH
53261: LD_INT 21
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 23
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PPUSH
53285: CALL_OW 69
53289: IN
53290: NOT
53291: OR
53292: IFFALSE 53296
// exit ;
53294: GO 53343
// for i = 1 to 3 do
53296: LD_ADDR_VAR 0 3
53300: PUSH
53301: DOUBLE
53302: LD_INT 1
53304: DEC
53305: ST_TO_ADDR
53306: LD_INT 3
53308: PUSH
53309: FOR_TO
53310: IFFALSE 53341
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53312: LD_VAR 0 1
53316: PPUSH
53317: CALL_OW 250
53321: PPUSH
53322: LD_VAR 0 1
53326: PPUSH
53327: CALL_OW 251
53331: PPUSH
53332: LD_INT 1
53334: PPUSH
53335: CALL_OW 453
53339: GO 53309
53341: POP
53342: POP
// end ;
53343: LD_VAR 0 2
53347: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53348: LD_INT 0
53350: PPUSH
53351: PPUSH
53352: PPUSH
53353: PPUSH
53354: PPUSH
53355: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53356: LD_VAR 0 1
53360: NOT
53361: PUSH
53362: LD_VAR 0 2
53366: NOT
53367: OR
53368: PUSH
53369: LD_VAR 0 1
53373: PPUSH
53374: CALL_OW 314
53378: OR
53379: IFFALSE 53383
// exit ;
53381: GO 53824
// x := GetX ( enemy_unit ) ;
53383: LD_ADDR_VAR 0 7
53387: PUSH
53388: LD_VAR 0 2
53392: PPUSH
53393: CALL_OW 250
53397: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53398: LD_ADDR_VAR 0 8
53402: PUSH
53403: LD_VAR 0 2
53407: PPUSH
53408: CALL_OW 251
53412: ST_TO_ADDR
// if not x or not y then
53413: LD_VAR 0 7
53417: NOT
53418: PUSH
53419: LD_VAR 0 8
53423: NOT
53424: OR
53425: IFFALSE 53429
// exit ;
53427: GO 53824
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53429: LD_ADDR_VAR 0 6
53433: PUSH
53434: LD_VAR 0 7
53438: PPUSH
53439: LD_INT 0
53441: PPUSH
53442: LD_INT 4
53444: PPUSH
53445: CALL_OW 272
53449: PUSH
53450: LD_VAR 0 8
53454: PPUSH
53455: LD_INT 0
53457: PPUSH
53458: LD_INT 4
53460: PPUSH
53461: CALL_OW 273
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_VAR 0 7
53474: PPUSH
53475: LD_INT 1
53477: PPUSH
53478: LD_INT 4
53480: PPUSH
53481: CALL_OW 272
53485: PUSH
53486: LD_VAR 0 8
53490: PPUSH
53491: LD_INT 1
53493: PPUSH
53494: LD_INT 4
53496: PPUSH
53497: CALL_OW 273
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_VAR 0 7
53510: PPUSH
53511: LD_INT 2
53513: PPUSH
53514: LD_INT 4
53516: PPUSH
53517: CALL_OW 272
53521: PUSH
53522: LD_VAR 0 8
53526: PPUSH
53527: LD_INT 2
53529: PPUSH
53530: LD_INT 4
53532: PPUSH
53533: CALL_OW 273
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_VAR 0 7
53546: PPUSH
53547: LD_INT 3
53549: PPUSH
53550: LD_INT 4
53552: PPUSH
53553: CALL_OW 272
53557: PUSH
53558: LD_VAR 0 8
53562: PPUSH
53563: LD_INT 3
53565: PPUSH
53566: LD_INT 4
53568: PPUSH
53569: CALL_OW 273
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_VAR 0 7
53582: PPUSH
53583: LD_INT 4
53585: PPUSH
53586: LD_INT 4
53588: PPUSH
53589: CALL_OW 272
53593: PUSH
53594: LD_VAR 0 8
53598: PPUSH
53599: LD_INT 4
53601: PPUSH
53602: LD_INT 4
53604: PPUSH
53605: CALL_OW 273
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_VAR 0 7
53618: PPUSH
53619: LD_INT 5
53621: PPUSH
53622: LD_INT 4
53624: PPUSH
53625: CALL_OW 272
53629: PUSH
53630: LD_VAR 0 8
53634: PPUSH
53635: LD_INT 5
53637: PPUSH
53638: LD_INT 4
53640: PPUSH
53641: CALL_OW 273
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// for i = tmp downto 1 do
53658: LD_ADDR_VAR 0 4
53662: PUSH
53663: DOUBLE
53664: LD_VAR 0 6
53668: INC
53669: ST_TO_ADDR
53670: LD_INT 1
53672: PUSH
53673: FOR_DOWNTO
53674: IFFALSE 53775
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53676: LD_VAR 0 6
53680: PUSH
53681: LD_VAR 0 4
53685: ARRAY
53686: PUSH
53687: LD_INT 1
53689: ARRAY
53690: PPUSH
53691: LD_VAR 0 6
53695: PUSH
53696: LD_VAR 0 4
53700: ARRAY
53701: PUSH
53702: LD_INT 2
53704: ARRAY
53705: PPUSH
53706: CALL_OW 488
53710: NOT
53711: PUSH
53712: LD_VAR 0 6
53716: PUSH
53717: LD_VAR 0 4
53721: ARRAY
53722: PUSH
53723: LD_INT 1
53725: ARRAY
53726: PPUSH
53727: LD_VAR 0 6
53731: PUSH
53732: LD_VAR 0 4
53736: ARRAY
53737: PUSH
53738: LD_INT 2
53740: ARRAY
53741: PPUSH
53742: CALL_OW 428
53746: PUSH
53747: LD_INT 0
53749: NONEQUAL
53750: OR
53751: IFFALSE 53773
// tmp := Delete ( tmp , i ) ;
53753: LD_ADDR_VAR 0 6
53757: PUSH
53758: LD_VAR 0 6
53762: PPUSH
53763: LD_VAR 0 4
53767: PPUSH
53768: CALL_OW 3
53772: ST_TO_ADDR
53773: GO 53673
53775: POP
53776: POP
// j := GetClosestHex ( unit , tmp ) ;
53777: LD_ADDR_VAR 0 5
53781: PUSH
53782: LD_VAR 0 1
53786: PPUSH
53787: LD_VAR 0 6
53791: PPUSH
53792: CALL 53077 0 2
53796: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53797: LD_VAR 0 1
53801: PPUSH
53802: LD_VAR 0 5
53806: PUSH
53807: LD_INT 1
53809: ARRAY
53810: PPUSH
53811: LD_VAR 0 5
53815: PUSH
53816: LD_INT 2
53818: ARRAY
53819: PPUSH
53820: CALL_OW 111
// end ;
53824: LD_VAR 0 3
53828: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53829: LD_INT 0
53831: PPUSH
53832: PPUSH
53833: PPUSH
// uc_side = 0 ;
53834: LD_ADDR_OWVAR 20
53838: PUSH
53839: LD_INT 0
53841: ST_TO_ADDR
// uc_nation = 0 ;
53842: LD_ADDR_OWVAR 21
53846: PUSH
53847: LD_INT 0
53849: ST_TO_ADDR
// InitHc_All ( ) ;
53850: CALL_OW 584
// InitVc ;
53854: CALL_OW 20
// if mastodonts then
53858: LD_VAR 0 6
53862: IFFALSE 53929
// for i = 1 to mastodonts do
53864: LD_ADDR_VAR 0 11
53868: PUSH
53869: DOUBLE
53870: LD_INT 1
53872: DEC
53873: ST_TO_ADDR
53874: LD_VAR 0 6
53878: PUSH
53879: FOR_TO
53880: IFFALSE 53927
// begin vc_chassis := 31 ;
53882: LD_ADDR_OWVAR 37
53886: PUSH
53887: LD_INT 31
53889: ST_TO_ADDR
// vc_control := control_rider ;
53890: LD_ADDR_OWVAR 38
53894: PUSH
53895: LD_INT 4
53897: ST_TO_ADDR
// animal := CreateVehicle ;
53898: LD_ADDR_VAR 0 12
53902: PUSH
53903: CALL_OW 45
53907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53908: LD_VAR 0 12
53912: PPUSH
53913: LD_VAR 0 8
53917: PPUSH
53918: LD_INT 0
53920: PPUSH
53921: CALL 56117 0 3
// end ;
53925: GO 53879
53927: POP
53928: POP
// if horses then
53929: LD_VAR 0 5
53933: IFFALSE 54000
// for i = 1 to horses do
53935: LD_ADDR_VAR 0 11
53939: PUSH
53940: DOUBLE
53941: LD_INT 1
53943: DEC
53944: ST_TO_ADDR
53945: LD_VAR 0 5
53949: PUSH
53950: FOR_TO
53951: IFFALSE 53998
// begin hc_class := 21 ;
53953: LD_ADDR_OWVAR 28
53957: PUSH
53958: LD_INT 21
53960: ST_TO_ADDR
// hc_gallery :=  ;
53961: LD_ADDR_OWVAR 33
53965: PUSH
53966: LD_STRING 
53968: ST_TO_ADDR
// animal := CreateHuman ;
53969: LD_ADDR_VAR 0 12
53973: PUSH
53974: CALL_OW 44
53978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53979: LD_VAR 0 12
53983: PPUSH
53984: LD_VAR 0 8
53988: PPUSH
53989: LD_INT 0
53991: PPUSH
53992: CALL 56117 0 3
// end ;
53996: GO 53950
53998: POP
53999: POP
// if birds then
54000: LD_VAR 0 1
54004: IFFALSE 54071
// for i = 1 to birds do
54006: LD_ADDR_VAR 0 11
54010: PUSH
54011: DOUBLE
54012: LD_INT 1
54014: DEC
54015: ST_TO_ADDR
54016: LD_VAR 0 1
54020: PUSH
54021: FOR_TO
54022: IFFALSE 54069
// begin hc_class = 18 ;
54024: LD_ADDR_OWVAR 28
54028: PUSH
54029: LD_INT 18
54031: ST_TO_ADDR
// hc_gallery =  ;
54032: LD_ADDR_OWVAR 33
54036: PUSH
54037: LD_STRING 
54039: ST_TO_ADDR
// animal := CreateHuman ;
54040: LD_ADDR_VAR 0 12
54044: PUSH
54045: CALL_OW 44
54049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54050: LD_VAR 0 12
54054: PPUSH
54055: LD_VAR 0 8
54059: PPUSH
54060: LD_INT 0
54062: PPUSH
54063: CALL 56117 0 3
// end ;
54067: GO 54021
54069: POP
54070: POP
// if tigers then
54071: LD_VAR 0 2
54075: IFFALSE 54159
// for i = 1 to tigers do
54077: LD_ADDR_VAR 0 11
54081: PUSH
54082: DOUBLE
54083: LD_INT 1
54085: DEC
54086: ST_TO_ADDR
54087: LD_VAR 0 2
54091: PUSH
54092: FOR_TO
54093: IFFALSE 54157
// begin hc_class = class_tiger ;
54095: LD_ADDR_OWVAR 28
54099: PUSH
54100: LD_INT 14
54102: ST_TO_ADDR
// hc_gallery =  ;
54103: LD_ADDR_OWVAR 33
54107: PUSH
54108: LD_STRING 
54110: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54111: LD_ADDR_OWVAR 35
54115: PUSH
54116: LD_INT 7
54118: NEG
54119: PPUSH
54120: LD_INT 7
54122: PPUSH
54123: CALL_OW 12
54127: ST_TO_ADDR
// animal := CreateHuman ;
54128: LD_ADDR_VAR 0 12
54132: PUSH
54133: CALL_OW 44
54137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54138: LD_VAR 0 12
54142: PPUSH
54143: LD_VAR 0 8
54147: PPUSH
54148: LD_INT 0
54150: PPUSH
54151: CALL 56117 0 3
// end ;
54155: GO 54092
54157: POP
54158: POP
// if apemans then
54159: LD_VAR 0 3
54163: IFFALSE 54286
// for i = 1 to apemans do
54165: LD_ADDR_VAR 0 11
54169: PUSH
54170: DOUBLE
54171: LD_INT 1
54173: DEC
54174: ST_TO_ADDR
54175: LD_VAR 0 3
54179: PUSH
54180: FOR_TO
54181: IFFALSE 54284
// begin hc_class = class_apeman ;
54183: LD_ADDR_OWVAR 28
54187: PUSH
54188: LD_INT 12
54190: ST_TO_ADDR
// hc_gallery =  ;
54191: LD_ADDR_OWVAR 33
54195: PUSH
54196: LD_STRING 
54198: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54199: LD_ADDR_OWVAR 35
54203: PUSH
54204: LD_INT 5
54206: NEG
54207: PPUSH
54208: LD_INT 5
54210: PPUSH
54211: CALL_OW 12
54215: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54216: LD_ADDR_OWVAR 31
54220: PUSH
54221: LD_INT 1
54223: PPUSH
54224: LD_INT 3
54226: PPUSH
54227: CALL_OW 12
54231: PUSH
54232: LD_INT 1
54234: PPUSH
54235: LD_INT 3
54237: PPUSH
54238: CALL_OW 12
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// animal := CreateHuman ;
54255: LD_ADDR_VAR 0 12
54259: PUSH
54260: CALL_OW 44
54264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54265: LD_VAR 0 12
54269: PPUSH
54270: LD_VAR 0 8
54274: PPUSH
54275: LD_INT 0
54277: PPUSH
54278: CALL 56117 0 3
// end ;
54282: GO 54180
54284: POP
54285: POP
// if enchidnas then
54286: LD_VAR 0 4
54290: IFFALSE 54357
// for i = 1 to enchidnas do
54292: LD_ADDR_VAR 0 11
54296: PUSH
54297: DOUBLE
54298: LD_INT 1
54300: DEC
54301: ST_TO_ADDR
54302: LD_VAR 0 4
54306: PUSH
54307: FOR_TO
54308: IFFALSE 54355
// begin hc_class = 13 ;
54310: LD_ADDR_OWVAR 28
54314: PUSH
54315: LD_INT 13
54317: ST_TO_ADDR
// hc_gallery =  ;
54318: LD_ADDR_OWVAR 33
54322: PUSH
54323: LD_STRING 
54325: ST_TO_ADDR
// animal := CreateHuman ;
54326: LD_ADDR_VAR 0 12
54330: PUSH
54331: CALL_OW 44
54335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54336: LD_VAR 0 12
54340: PPUSH
54341: LD_VAR 0 8
54345: PPUSH
54346: LD_INT 0
54348: PPUSH
54349: CALL 56117 0 3
// end ;
54353: GO 54307
54355: POP
54356: POP
// if fishes then
54357: LD_VAR 0 7
54361: IFFALSE 54428
// for i = 1 to fishes do
54363: LD_ADDR_VAR 0 11
54367: PUSH
54368: DOUBLE
54369: LD_INT 1
54371: DEC
54372: ST_TO_ADDR
54373: LD_VAR 0 7
54377: PUSH
54378: FOR_TO
54379: IFFALSE 54426
// begin hc_class = 20 ;
54381: LD_ADDR_OWVAR 28
54385: PUSH
54386: LD_INT 20
54388: ST_TO_ADDR
// hc_gallery =  ;
54389: LD_ADDR_OWVAR 33
54393: PUSH
54394: LD_STRING 
54396: ST_TO_ADDR
// animal := CreateHuman ;
54397: LD_ADDR_VAR 0 12
54401: PUSH
54402: CALL_OW 44
54406: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54407: LD_VAR 0 12
54411: PPUSH
54412: LD_VAR 0 9
54416: PPUSH
54417: LD_INT 0
54419: PPUSH
54420: CALL 56117 0 3
// end ;
54424: GO 54378
54426: POP
54427: POP
// end ;
54428: LD_VAR 0 10
54432: RET
// export function WantHeal ( sci , unit ) ; begin
54433: LD_INT 0
54435: PPUSH
// if GetTaskList ( sci ) > 0 then
54436: LD_VAR 0 1
54440: PPUSH
54441: CALL_OW 437
54445: PUSH
54446: LD_INT 0
54448: GREATER
54449: IFFALSE 54519
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54451: LD_VAR 0 1
54455: PPUSH
54456: CALL_OW 437
54460: PUSH
54461: LD_INT 1
54463: ARRAY
54464: PUSH
54465: LD_INT 1
54467: ARRAY
54468: PUSH
54469: LD_STRING l
54471: EQUAL
54472: PUSH
54473: LD_VAR 0 1
54477: PPUSH
54478: CALL_OW 437
54482: PUSH
54483: LD_INT 1
54485: ARRAY
54486: PUSH
54487: LD_INT 4
54489: ARRAY
54490: PUSH
54491: LD_VAR 0 2
54495: EQUAL
54496: AND
54497: IFFALSE 54509
// result := true else
54499: LD_ADDR_VAR 0 3
54503: PUSH
54504: LD_INT 1
54506: ST_TO_ADDR
54507: GO 54517
// result := false ;
54509: LD_ADDR_VAR 0 3
54513: PUSH
54514: LD_INT 0
54516: ST_TO_ADDR
// end else
54517: GO 54527
// result := false ;
54519: LD_ADDR_VAR 0 3
54523: PUSH
54524: LD_INT 0
54526: ST_TO_ADDR
// end ;
54527: LD_VAR 0 3
54531: RET
// export function HealTarget ( sci ) ; begin
54532: LD_INT 0
54534: PPUSH
// if not sci then
54535: LD_VAR 0 1
54539: NOT
54540: IFFALSE 54544
// exit ;
54542: GO 54609
// result := 0 ;
54544: LD_ADDR_VAR 0 2
54548: PUSH
54549: LD_INT 0
54551: ST_TO_ADDR
// if GetTaskList ( sci ) then
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 437
54561: IFFALSE 54609
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54563: LD_VAR 0 1
54567: PPUSH
54568: CALL_OW 437
54572: PUSH
54573: LD_INT 1
54575: ARRAY
54576: PUSH
54577: LD_INT 1
54579: ARRAY
54580: PUSH
54581: LD_STRING l
54583: EQUAL
54584: IFFALSE 54609
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54586: LD_ADDR_VAR 0 2
54590: PUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: CALL_OW 437
54600: PUSH
54601: LD_INT 1
54603: ARRAY
54604: PUSH
54605: LD_INT 4
54607: ARRAY
54608: ST_TO_ADDR
// end ;
54609: LD_VAR 0 2
54613: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54614: LD_INT 0
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
// if not base_units then
54620: LD_VAR 0 1
54624: NOT
54625: IFFALSE 54629
// exit ;
54627: GO 54716
// result := false ;
54629: LD_ADDR_VAR 0 2
54633: PUSH
54634: LD_INT 0
54636: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54637: LD_ADDR_VAR 0 5
54641: PUSH
54642: LD_VAR 0 1
54646: PPUSH
54647: LD_INT 21
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PPUSH
54657: CALL_OW 72
54661: ST_TO_ADDR
// if not tmp then
54662: LD_VAR 0 5
54666: NOT
54667: IFFALSE 54671
// exit ;
54669: GO 54716
// for i in tmp do
54671: LD_ADDR_VAR 0 3
54675: PUSH
54676: LD_VAR 0 5
54680: PUSH
54681: FOR_IN
54682: IFFALSE 54714
// begin result := EnemyInRange ( i , 22 ) ;
54684: LD_ADDR_VAR 0 2
54688: PUSH
54689: LD_VAR 0 3
54693: PPUSH
54694: LD_INT 22
54696: PPUSH
54697: CALL 52952 0 2
54701: ST_TO_ADDR
// if result then
54702: LD_VAR 0 2
54706: IFFALSE 54712
// exit ;
54708: POP
54709: POP
54710: GO 54716
// end ;
54712: GO 54681
54714: POP
54715: POP
// end ;
54716: LD_VAR 0 2
54720: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54721: LD_INT 0
54723: PPUSH
54724: PPUSH
// if not units then
54725: LD_VAR 0 1
54729: NOT
54730: IFFALSE 54734
// exit ;
54732: GO 54804
// result := [ ] ;
54734: LD_ADDR_VAR 0 3
54738: PUSH
54739: EMPTY
54740: ST_TO_ADDR
// for i in units do
54741: LD_ADDR_VAR 0 4
54745: PUSH
54746: LD_VAR 0 1
54750: PUSH
54751: FOR_IN
54752: IFFALSE 54802
// if GetTag ( i ) = tag then
54754: LD_VAR 0 4
54758: PPUSH
54759: CALL_OW 110
54763: PUSH
54764: LD_VAR 0 2
54768: EQUAL
54769: IFFALSE 54800
// result := Insert ( result , result + 1 , i ) ;
54771: LD_ADDR_VAR 0 3
54775: PUSH
54776: LD_VAR 0 3
54780: PPUSH
54781: LD_VAR 0 3
54785: PUSH
54786: LD_INT 1
54788: PLUS
54789: PPUSH
54790: LD_VAR 0 4
54794: PPUSH
54795: CALL_OW 2
54799: ST_TO_ADDR
54800: GO 54751
54802: POP
54803: POP
// end ;
54804: LD_VAR 0 3
54808: RET
// export function IsDriver ( un ) ; begin
54809: LD_INT 0
54811: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54812: LD_ADDR_VAR 0 2
54816: PUSH
54817: LD_VAR 0 1
54821: PUSH
54822: LD_INT 55
54824: PUSH
54825: EMPTY
54826: LIST
54827: PPUSH
54828: CALL_OW 69
54832: IN
54833: ST_TO_ADDR
// end ;
54834: LD_VAR 0 2
54838: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54839: LD_INT 0
54841: PPUSH
54842: PPUSH
// list := [ ] ;
54843: LD_ADDR_VAR 0 5
54847: PUSH
54848: EMPTY
54849: ST_TO_ADDR
// case d of 0 :
54850: LD_VAR 0 3
54854: PUSH
54855: LD_INT 0
54857: DOUBLE
54858: EQUAL
54859: IFTRUE 54863
54861: GO 54996
54863: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54864: LD_ADDR_VAR 0 5
54868: PUSH
54869: LD_VAR 0 1
54873: PUSH
54874: LD_INT 4
54876: MINUS
54877: PUSH
54878: LD_VAR 0 2
54882: PUSH
54883: LD_INT 4
54885: MINUS
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: PUSH
54895: LD_VAR 0 1
54899: PUSH
54900: LD_INT 3
54902: MINUS
54903: PUSH
54904: LD_VAR 0 2
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: PUSH
54917: LD_VAR 0 1
54921: PUSH
54922: LD_INT 4
54924: PLUS
54925: PUSH
54926: LD_VAR 0 2
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: PUSH
54939: LD_VAR 0 1
54943: PUSH
54944: LD_INT 3
54946: PLUS
54947: PUSH
54948: LD_VAR 0 2
54952: PUSH
54953: LD_INT 3
54955: PLUS
54956: PUSH
54957: LD_INT 5
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: PUSH
54965: LD_VAR 0 1
54969: PUSH
54970: LD_VAR 0 2
54974: PUSH
54975: LD_INT 4
54977: PLUS
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// end ; 1 :
54994: GO 55694
54996: LD_INT 1
54998: DOUBLE
54999: EQUAL
55000: IFTRUE 55004
55002: GO 55137
55004: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55005: LD_ADDR_VAR 0 5
55009: PUSH
55010: LD_VAR 0 1
55014: PUSH
55015: LD_VAR 0 2
55019: PUSH
55020: LD_INT 4
55022: MINUS
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: PUSH
55032: LD_VAR 0 1
55036: PUSH
55037: LD_INT 3
55039: MINUS
55040: PUSH
55041: LD_VAR 0 2
55045: PUSH
55046: LD_INT 3
55048: MINUS
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: PUSH
55058: LD_VAR 0 1
55062: PUSH
55063: LD_INT 4
55065: MINUS
55066: PUSH
55067: LD_VAR 0 2
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: LIST
55079: PUSH
55080: LD_VAR 0 1
55084: PUSH
55085: LD_VAR 0 2
55089: PUSH
55090: LD_INT 3
55092: PLUS
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: PUSH
55102: LD_VAR 0 1
55106: PUSH
55107: LD_INT 4
55109: PLUS
55110: PUSH
55111: LD_VAR 0 2
55115: PUSH
55116: LD_INT 4
55118: PLUS
55119: PUSH
55120: LD_INT 5
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: ST_TO_ADDR
// end ; 2 :
55135: GO 55694
55137: LD_INT 2
55139: DOUBLE
55140: EQUAL
55141: IFTRUE 55145
55143: GO 55274
55145: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55146: LD_ADDR_VAR 0 5
55150: PUSH
55151: LD_VAR 0 1
55155: PUSH
55156: LD_VAR 0 2
55160: PUSH
55161: LD_INT 3
55163: MINUS
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: PUSH
55173: LD_VAR 0 1
55177: PUSH
55178: LD_INT 4
55180: PLUS
55181: PUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 4
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: PUSH
55195: LD_VAR 0 1
55199: PUSH
55200: LD_VAR 0 2
55204: PUSH
55205: LD_INT 4
55207: PLUS
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: PUSH
55217: LD_VAR 0 1
55221: PUSH
55222: LD_INT 3
55224: MINUS
55225: PUSH
55226: LD_VAR 0 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: PUSH
55239: LD_VAR 0 1
55243: PUSH
55244: LD_INT 4
55246: MINUS
55247: PUSH
55248: LD_VAR 0 2
55252: PUSH
55253: LD_INT 4
55255: MINUS
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// end ; 3 :
55272: GO 55694
55274: LD_INT 3
55276: DOUBLE
55277: EQUAL
55278: IFTRUE 55282
55280: GO 55415
55282: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55283: LD_ADDR_VAR 0 5
55287: PUSH
55288: LD_VAR 0 1
55292: PUSH
55293: LD_INT 3
55295: PLUS
55296: PUSH
55297: LD_VAR 0 2
55301: PUSH
55302: LD_INT 4
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: PUSH
55310: LD_VAR 0 1
55314: PUSH
55315: LD_INT 4
55317: PLUS
55318: PUSH
55319: LD_VAR 0 2
55323: PUSH
55324: LD_INT 4
55326: PLUS
55327: PUSH
55328: LD_INT 5
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: PUSH
55336: LD_VAR 0 1
55340: PUSH
55341: LD_INT 4
55343: MINUS
55344: PUSH
55345: LD_VAR 0 2
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: PUSH
55358: LD_VAR 0 1
55362: PUSH
55363: LD_VAR 0 2
55367: PUSH
55368: LD_INT 4
55370: MINUS
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: PUSH
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 3
55387: MINUS
55388: PUSH
55389: LD_VAR 0 2
55393: PUSH
55394: LD_INT 3
55396: MINUS
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// end ; 4 :
55413: GO 55694
55415: LD_INT 4
55417: DOUBLE
55418: EQUAL
55419: IFTRUE 55423
55421: GO 55556
55423: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55424: LD_ADDR_VAR 0 5
55428: PUSH
55429: LD_VAR 0 1
55433: PUSH
55434: LD_VAR 0 2
55438: PUSH
55439: LD_INT 4
55441: PLUS
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: LIST
55450: PUSH
55451: LD_VAR 0 1
55455: PUSH
55456: LD_INT 3
55458: PLUS
55459: PUSH
55460: LD_VAR 0 2
55464: PUSH
55465: LD_INT 3
55467: PLUS
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: PUSH
55477: LD_VAR 0 1
55481: PUSH
55482: LD_INT 4
55484: PLUS
55485: PUSH
55486: LD_VAR 0 2
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: PUSH
55499: LD_VAR 0 1
55503: PUSH
55504: LD_VAR 0 2
55508: PUSH
55509: LD_INT 3
55511: MINUS
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: LIST
55520: PUSH
55521: LD_VAR 0 1
55525: PUSH
55526: LD_INT 4
55528: MINUS
55529: PUSH
55530: LD_VAR 0 2
55534: PUSH
55535: LD_INT 4
55537: MINUS
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: ST_TO_ADDR
// end ; 5 :
55554: GO 55694
55556: LD_INT 5
55558: DOUBLE
55559: EQUAL
55560: IFTRUE 55564
55562: GO 55693
55564: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55565: LD_ADDR_VAR 0 5
55569: PUSH
55570: LD_VAR 0 1
55574: PUSH
55575: LD_INT 4
55577: MINUS
55578: PUSH
55579: LD_VAR 0 2
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_VAR 0 2
55601: PUSH
55602: LD_INT 4
55604: MINUS
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: PUSH
55614: LD_VAR 0 1
55618: PUSH
55619: LD_INT 4
55621: PLUS
55622: PUSH
55623: LD_VAR 0 2
55627: PUSH
55628: LD_INT 4
55630: PLUS
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: PUSH
55640: LD_VAR 0 1
55644: PUSH
55645: LD_INT 3
55647: PLUS
55648: PUSH
55649: LD_VAR 0 2
55653: PUSH
55654: LD_INT 4
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: PUSH
55662: LD_VAR 0 1
55666: PUSH
55667: LD_VAR 0 2
55671: PUSH
55672: LD_INT 3
55674: PLUS
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: ST_TO_ADDR
// end ; end ;
55691: GO 55694
55693: POP
// result := list ;
55694: LD_ADDR_VAR 0 4
55698: PUSH
55699: LD_VAR 0 5
55703: ST_TO_ADDR
// end ;
55704: LD_VAR 0 4
55708: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55709: LD_INT 0
55711: PPUSH
55712: PPUSH
55713: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55714: LD_VAR 0 1
55718: NOT
55719: PUSH
55720: LD_VAR 0 2
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: LD_INT 4
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: IN
55743: NOT
55744: OR
55745: IFFALSE 55749
// exit ;
55747: GO 55841
// tmp := [ ] ;
55749: LD_ADDR_VAR 0 5
55753: PUSH
55754: EMPTY
55755: ST_TO_ADDR
// for i in units do
55756: LD_ADDR_VAR 0 4
55760: PUSH
55761: LD_VAR 0 1
55765: PUSH
55766: FOR_IN
55767: IFFALSE 55810
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55769: LD_ADDR_VAR 0 5
55773: PUSH
55774: LD_VAR 0 5
55778: PPUSH
55779: LD_VAR 0 5
55783: PUSH
55784: LD_INT 1
55786: PLUS
55787: PPUSH
55788: LD_VAR 0 4
55792: PPUSH
55793: LD_VAR 0 2
55797: PPUSH
55798: CALL_OW 259
55802: PPUSH
55803: CALL_OW 2
55807: ST_TO_ADDR
55808: GO 55766
55810: POP
55811: POP
// if not tmp then
55812: LD_VAR 0 5
55816: NOT
55817: IFFALSE 55821
// exit ;
55819: GO 55841
// result := SortListByListDesc ( units , tmp ) ;
55821: LD_ADDR_VAR 0 3
55825: PUSH
55826: LD_VAR 0 1
55830: PPUSH
55831: LD_VAR 0 5
55835: PPUSH
55836: CALL_OW 77
55840: ST_TO_ADDR
// end ;
55841: LD_VAR 0 3
55845: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55846: LD_INT 0
55848: PPUSH
55849: PPUSH
55850: PPUSH
// result := false ;
55851: LD_ADDR_VAR 0 3
55855: PUSH
55856: LD_INT 0
55858: ST_TO_ADDR
// x := GetX ( building ) ;
55859: LD_ADDR_VAR 0 4
55863: PUSH
55864: LD_VAR 0 2
55868: PPUSH
55869: CALL_OW 250
55873: ST_TO_ADDR
// y := GetY ( building ) ;
55874: LD_ADDR_VAR 0 5
55878: PUSH
55879: LD_VAR 0 2
55883: PPUSH
55884: CALL_OW 251
55888: ST_TO_ADDR
// if not building or not x or not y then
55889: LD_VAR 0 2
55893: NOT
55894: PUSH
55895: LD_VAR 0 4
55899: NOT
55900: OR
55901: PUSH
55902: LD_VAR 0 5
55906: NOT
55907: OR
55908: IFFALSE 55912
// exit ;
55910: GO 56004
// if GetTaskList ( unit ) then
55912: LD_VAR 0 1
55916: PPUSH
55917: CALL_OW 437
55921: IFFALSE 56004
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55923: LD_STRING e
55925: PUSH
55926: LD_VAR 0 1
55930: PPUSH
55931: CALL_OW 437
55935: PUSH
55936: LD_INT 1
55938: ARRAY
55939: PUSH
55940: LD_INT 1
55942: ARRAY
55943: EQUAL
55944: PUSH
55945: LD_VAR 0 4
55949: PUSH
55950: LD_VAR 0 1
55954: PPUSH
55955: CALL_OW 437
55959: PUSH
55960: LD_INT 1
55962: ARRAY
55963: PUSH
55964: LD_INT 2
55966: ARRAY
55967: EQUAL
55968: AND
55969: PUSH
55970: LD_VAR 0 5
55974: PUSH
55975: LD_VAR 0 1
55979: PPUSH
55980: CALL_OW 437
55984: PUSH
55985: LD_INT 1
55987: ARRAY
55988: PUSH
55989: LD_INT 3
55991: ARRAY
55992: EQUAL
55993: AND
55994: IFFALSE 56004
// result := true end ;
55996: LD_ADDR_VAR 0 3
56000: PUSH
56001: LD_INT 1
56003: ST_TO_ADDR
// end ;
56004: LD_VAR 0 3
56008: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56009: LD_INT 0
56011: PPUSH
// result := false ;
56012: LD_ADDR_VAR 0 4
56016: PUSH
56017: LD_INT 0
56019: ST_TO_ADDR
// if GetTaskList ( unit ) then
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 437
56029: IFFALSE 56112
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56031: LD_STRING M
56033: PUSH
56034: LD_VAR 0 1
56038: PPUSH
56039: CALL_OW 437
56043: PUSH
56044: LD_INT 1
56046: ARRAY
56047: PUSH
56048: LD_INT 1
56050: ARRAY
56051: EQUAL
56052: PUSH
56053: LD_VAR 0 2
56057: PUSH
56058: LD_VAR 0 1
56062: PPUSH
56063: CALL_OW 437
56067: PUSH
56068: LD_INT 1
56070: ARRAY
56071: PUSH
56072: LD_INT 2
56074: ARRAY
56075: EQUAL
56076: AND
56077: PUSH
56078: LD_VAR 0 3
56082: PUSH
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL_OW 437
56092: PUSH
56093: LD_INT 1
56095: ARRAY
56096: PUSH
56097: LD_INT 3
56099: ARRAY
56100: EQUAL
56101: AND
56102: IFFALSE 56112
// result := true ;
56104: LD_ADDR_VAR 0 4
56108: PUSH
56109: LD_INT 1
56111: ST_TO_ADDR
// end ; end ;
56112: LD_VAR 0 4
56116: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56117: LD_INT 0
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
// if not unit or not area then
56123: LD_VAR 0 1
56127: NOT
56128: PUSH
56129: LD_VAR 0 2
56133: NOT
56134: OR
56135: IFFALSE 56139
// exit ;
56137: GO 56303
// tmp := AreaToList ( area , i ) ;
56139: LD_ADDR_VAR 0 6
56143: PUSH
56144: LD_VAR 0 2
56148: PPUSH
56149: LD_VAR 0 5
56153: PPUSH
56154: CALL_OW 517
56158: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56159: LD_ADDR_VAR 0 5
56163: PUSH
56164: DOUBLE
56165: LD_INT 1
56167: DEC
56168: ST_TO_ADDR
56169: LD_VAR 0 6
56173: PUSH
56174: LD_INT 1
56176: ARRAY
56177: PUSH
56178: FOR_TO
56179: IFFALSE 56301
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56181: LD_ADDR_VAR 0 7
56185: PUSH
56186: LD_VAR 0 6
56190: PUSH
56191: LD_INT 1
56193: ARRAY
56194: PUSH
56195: LD_VAR 0 5
56199: ARRAY
56200: PUSH
56201: LD_VAR 0 6
56205: PUSH
56206: LD_INT 2
56208: ARRAY
56209: PUSH
56210: LD_VAR 0 5
56214: ARRAY
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56220: LD_VAR 0 7
56224: PUSH
56225: LD_INT 1
56227: ARRAY
56228: PPUSH
56229: LD_VAR 0 7
56233: PUSH
56234: LD_INT 2
56236: ARRAY
56237: PPUSH
56238: CALL_OW 428
56242: PUSH
56243: LD_INT 0
56245: EQUAL
56246: IFFALSE 56299
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56248: LD_VAR 0 1
56252: PPUSH
56253: LD_VAR 0 7
56257: PUSH
56258: LD_INT 1
56260: ARRAY
56261: PPUSH
56262: LD_VAR 0 7
56266: PUSH
56267: LD_INT 2
56269: ARRAY
56270: PPUSH
56271: LD_VAR 0 3
56275: PPUSH
56276: CALL_OW 48
// result := IsPlaced ( unit ) ;
56280: LD_ADDR_VAR 0 4
56284: PUSH
56285: LD_VAR 0 1
56289: PPUSH
56290: CALL_OW 305
56294: ST_TO_ADDR
// exit ;
56295: POP
56296: POP
56297: GO 56303
// end ; end ;
56299: GO 56178
56301: POP
56302: POP
// end ;
56303: LD_VAR 0 4
56307: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56308: LD_INT 0
56310: PPUSH
56311: PPUSH
56312: PPUSH
// if not side or side > 8 then
56313: LD_VAR 0 1
56317: NOT
56318: PUSH
56319: LD_VAR 0 1
56323: PUSH
56324: LD_INT 8
56326: GREATER
56327: OR
56328: IFFALSE 56332
// exit ;
56330: GO 56519
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56332: LD_ADDR_VAR 0 4
56336: PUSH
56337: LD_INT 22
56339: PUSH
56340: LD_VAR 0 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 21
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PPUSH
56363: CALL_OW 69
56367: ST_TO_ADDR
// if not tmp then
56368: LD_VAR 0 4
56372: NOT
56373: IFFALSE 56377
// exit ;
56375: GO 56519
// enable_addtolog := true ;
56377: LD_ADDR_OWVAR 81
56381: PUSH
56382: LD_INT 1
56384: ST_TO_ADDR
// AddToLog ( [ ) ;
56385: LD_STRING [
56387: PPUSH
56388: CALL_OW 561
// for i in tmp do
56392: LD_ADDR_VAR 0 3
56396: PUSH
56397: LD_VAR 0 4
56401: PUSH
56402: FOR_IN
56403: IFFALSE 56510
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56405: LD_STRING [
56407: PUSH
56408: LD_VAR 0 3
56412: PPUSH
56413: CALL_OW 266
56417: STR
56418: PUSH
56419: LD_STRING , 
56421: STR
56422: PUSH
56423: LD_VAR 0 3
56427: PPUSH
56428: CALL_OW 250
56432: STR
56433: PUSH
56434: LD_STRING , 
56436: STR
56437: PUSH
56438: LD_VAR 0 3
56442: PPUSH
56443: CALL_OW 251
56447: STR
56448: PUSH
56449: LD_STRING , 
56451: STR
56452: PUSH
56453: LD_VAR 0 3
56457: PPUSH
56458: CALL_OW 254
56462: STR
56463: PUSH
56464: LD_STRING , 
56466: STR
56467: PUSH
56468: LD_VAR 0 3
56472: PPUSH
56473: LD_INT 1
56475: PPUSH
56476: CALL_OW 268
56480: STR
56481: PUSH
56482: LD_STRING , 
56484: STR
56485: PUSH
56486: LD_VAR 0 3
56490: PPUSH
56491: LD_INT 2
56493: PPUSH
56494: CALL_OW 268
56498: STR
56499: PUSH
56500: LD_STRING ],
56502: STR
56503: PPUSH
56504: CALL_OW 561
// end ;
56508: GO 56402
56510: POP
56511: POP
// AddToLog ( ]; ) ;
56512: LD_STRING ];
56514: PPUSH
56515: CALL_OW 561
// end ;
56519: LD_VAR 0 2
56523: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56524: LD_INT 0
56526: PPUSH
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
// if not area or not rate or not max then
56531: LD_VAR 0 1
56535: NOT
56536: PUSH
56537: LD_VAR 0 2
56541: NOT
56542: OR
56543: PUSH
56544: LD_VAR 0 4
56548: NOT
56549: OR
56550: IFFALSE 56554
// exit ;
56552: GO 56746
// while 1 do
56554: LD_INT 1
56556: IFFALSE 56746
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56558: LD_ADDR_VAR 0 9
56562: PUSH
56563: LD_VAR 0 1
56567: PPUSH
56568: LD_INT 1
56570: PPUSH
56571: CALL_OW 287
56575: PUSH
56576: LD_INT 10
56578: MUL
56579: ST_TO_ADDR
// r := rate / 10 ;
56580: LD_ADDR_VAR 0 7
56584: PUSH
56585: LD_VAR 0 2
56589: PUSH
56590: LD_INT 10
56592: DIVREAL
56593: ST_TO_ADDR
// time := 1 1$00 ;
56594: LD_ADDR_VAR 0 8
56598: PUSH
56599: LD_INT 2100
56601: ST_TO_ADDR
// if amount < min then
56602: LD_VAR 0 9
56606: PUSH
56607: LD_VAR 0 3
56611: LESS
56612: IFFALSE 56630
// r := r * 2 else
56614: LD_ADDR_VAR 0 7
56618: PUSH
56619: LD_VAR 0 7
56623: PUSH
56624: LD_INT 2
56626: MUL
56627: ST_TO_ADDR
56628: GO 56656
// if amount > max then
56630: LD_VAR 0 9
56634: PUSH
56635: LD_VAR 0 4
56639: GREATER
56640: IFFALSE 56656
// r := r / 2 ;
56642: LD_ADDR_VAR 0 7
56646: PUSH
56647: LD_VAR 0 7
56651: PUSH
56652: LD_INT 2
56654: DIVREAL
56655: ST_TO_ADDR
// time := time / r ;
56656: LD_ADDR_VAR 0 8
56660: PUSH
56661: LD_VAR 0 8
56665: PUSH
56666: LD_VAR 0 7
56670: DIVREAL
56671: ST_TO_ADDR
// if time < 0 then
56672: LD_VAR 0 8
56676: PUSH
56677: LD_INT 0
56679: LESS
56680: IFFALSE 56697
// time := time * - 1 ;
56682: LD_ADDR_VAR 0 8
56686: PUSH
56687: LD_VAR 0 8
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: MUL
56696: ST_TO_ADDR
// wait ( time ) ;
56697: LD_VAR 0 8
56701: PPUSH
56702: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56706: LD_INT 35
56708: PPUSH
56709: LD_INT 875
56711: PPUSH
56712: CALL_OW 12
56716: PPUSH
56717: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56721: LD_INT 1
56723: PPUSH
56724: LD_INT 5
56726: PPUSH
56727: CALL_OW 12
56731: PPUSH
56732: LD_VAR 0 1
56736: PPUSH
56737: LD_INT 1
56739: PPUSH
56740: CALL_OW 55
// end ;
56744: GO 56554
// end ;
56746: LD_VAR 0 5
56750: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56751: LD_INT 0
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
// if not turrets or not factories then
56761: LD_VAR 0 1
56765: NOT
56766: PUSH
56767: LD_VAR 0 2
56771: NOT
56772: OR
56773: IFFALSE 56777
// exit ;
56775: GO 57084
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56777: LD_ADDR_VAR 0 10
56781: PUSH
56782: LD_INT 5
56784: PUSH
56785: LD_INT 6
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 4
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: LD_INT 5
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 24
56819: PUSH
56820: LD_INT 25
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 23
56829: PUSH
56830: LD_INT 27
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 42
56843: PUSH
56844: LD_INT 43
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 44
56853: PUSH
56854: LD_INT 46
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 45
56863: PUSH
56864: LD_INT 47
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// result := [ ] ;
56881: LD_ADDR_VAR 0 3
56885: PUSH
56886: EMPTY
56887: ST_TO_ADDR
// for i in turrets do
56888: LD_ADDR_VAR 0 4
56892: PUSH
56893: LD_VAR 0 1
56897: PUSH
56898: FOR_IN
56899: IFFALSE 57082
// begin nat := GetNation ( i ) ;
56901: LD_ADDR_VAR 0 7
56905: PUSH
56906: LD_VAR 0 4
56910: PPUSH
56911: CALL_OW 248
56915: ST_TO_ADDR
// weapon := 0 ;
56916: LD_ADDR_VAR 0 8
56920: PUSH
56921: LD_INT 0
56923: ST_TO_ADDR
// if not nat then
56924: LD_VAR 0 7
56928: NOT
56929: IFFALSE 56933
// continue ;
56931: GO 56898
// for j in list [ nat ] do
56933: LD_ADDR_VAR 0 5
56937: PUSH
56938: LD_VAR 0 10
56942: PUSH
56943: LD_VAR 0 7
56947: ARRAY
56948: PUSH
56949: FOR_IN
56950: IFFALSE 56991
// if GetBWeapon ( i ) = j [ 1 ] then
56952: LD_VAR 0 4
56956: PPUSH
56957: CALL_OW 269
56961: PUSH
56962: LD_VAR 0 5
56966: PUSH
56967: LD_INT 1
56969: ARRAY
56970: EQUAL
56971: IFFALSE 56989
// begin weapon := j [ 2 ] ;
56973: LD_ADDR_VAR 0 8
56977: PUSH
56978: LD_VAR 0 5
56982: PUSH
56983: LD_INT 2
56985: ARRAY
56986: ST_TO_ADDR
// break ;
56987: GO 56991
// end ;
56989: GO 56949
56991: POP
56992: POP
// if not weapon then
56993: LD_VAR 0 8
56997: NOT
56998: IFFALSE 57002
// continue ;
57000: GO 56898
// for k in factories do
57002: LD_ADDR_VAR 0 6
57006: PUSH
57007: LD_VAR 0 2
57011: PUSH
57012: FOR_IN
57013: IFFALSE 57078
// begin weapons := AvailableWeaponList ( k ) ;
57015: LD_ADDR_VAR 0 9
57019: PUSH
57020: LD_VAR 0 6
57024: PPUSH
57025: CALL_OW 478
57029: ST_TO_ADDR
// if not weapons then
57030: LD_VAR 0 9
57034: NOT
57035: IFFALSE 57039
// continue ;
57037: GO 57012
// if weapon in weapons then
57039: LD_VAR 0 8
57043: PUSH
57044: LD_VAR 0 9
57048: IN
57049: IFFALSE 57076
// begin result := [ i , weapon ] ;
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: LD_VAR 0 4
57060: PUSH
57061: LD_VAR 0 8
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// exit ;
57070: POP
57071: POP
57072: POP
57073: POP
57074: GO 57084
// end ; end ;
57076: GO 57012
57078: POP
57079: POP
// end ;
57080: GO 56898
57082: POP
57083: POP
// end ;
57084: LD_VAR 0 3
57088: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57089: LD_INT 0
57091: PPUSH
// if not side or side > 8 then
57092: LD_VAR 0 3
57096: NOT
57097: PUSH
57098: LD_VAR 0 3
57102: PUSH
57103: LD_INT 8
57105: GREATER
57106: OR
57107: IFFALSE 57111
// exit ;
57109: GO 57170
// if not range then
57111: LD_VAR 0 4
57115: NOT
57116: IFFALSE 57127
// range := - 12 ;
57118: LD_ADDR_VAR 0 4
57122: PUSH
57123: LD_INT 12
57125: NEG
57126: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57127: LD_VAR 0 1
57131: PPUSH
57132: LD_VAR 0 2
57136: PPUSH
57137: LD_VAR 0 3
57141: PPUSH
57142: LD_VAR 0 4
57146: PPUSH
57147: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57151: LD_VAR 0 1
57155: PPUSH
57156: LD_VAR 0 2
57160: PPUSH
57161: LD_VAR 0 3
57165: PPUSH
57166: CALL_OW 331
// end ;
57170: LD_VAR 0 5
57174: RET
// export function Video ( mode ) ; begin
57175: LD_INT 0
57177: PPUSH
// ingame_video = mode ;
57178: LD_ADDR_OWVAR 52
57182: PUSH
57183: LD_VAR 0 1
57187: ST_TO_ADDR
// interface_hidden = mode ;
57188: LD_ADDR_OWVAR 54
57192: PUSH
57193: LD_VAR 0 1
57197: ST_TO_ADDR
// end ;
57198: LD_VAR 0 2
57202: RET
// export function Join ( array , element ) ; begin
57203: LD_INT 0
57205: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57206: LD_ADDR_VAR 0 3
57210: PUSH
57211: LD_VAR 0 1
57215: PPUSH
57216: LD_VAR 0 1
57220: PUSH
57221: LD_INT 1
57223: PLUS
57224: PPUSH
57225: LD_VAR 0 2
57229: PPUSH
57230: CALL_OW 1
57234: ST_TO_ADDR
// end ;
57235: LD_VAR 0 3
57239: RET
// export function JoinUnion ( array , element ) ; begin
57240: LD_INT 0
57242: PPUSH
// result := array union element ;
57243: LD_ADDR_VAR 0 3
57247: PUSH
57248: LD_VAR 0 1
57252: PUSH
57253: LD_VAR 0 2
57257: UNION
57258: ST_TO_ADDR
// end ;
57259: LD_VAR 0 3
57263: RET
// export function GetBehemoths ( side ) ; begin
57264: LD_INT 0
57266: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57267: LD_ADDR_VAR 0 2
57271: PUSH
57272: LD_INT 22
57274: PUSH
57275: LD_VAR 0 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 31
57286: PUSH
57287: LD_INT 25
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PPUSH
57298: CALL_OW 69
57302: ST_TO_ADDR
// end ;
57303: LD_VAR 0 2
57307: RET
// export function Shuffle ( array ) ; var i , index ; begin
57308: LD_INT 0
57310: PPUSH
57311: PPUSH
57312: PPUSH
// result := [ ] ;
57313: LD_ADDR_VAR 0 2
57317: PUSH
57318: EMPTY
57319: ST_TO_ADDR
// if not array then
57320: LD_VAR 0 1
57324: NOT
57325: IFFALSE 57329
// exit ;
57327: GO 57428
// Randomize ;
57329: CALL_OW 10
// for i = array downto 1 do
57333: LD_ADDR_VAR 0 3
57337: PUSH
57338: DOUBLE
57339: LD_VAR 0 1
57343: INC
57344: ST_TO_ADDR
57345: LD_INT 1
57347: PUSH
57348: FOR_DOWNTO
57349: IFFALSE 57426
// begin index := rand ( 1 , array ) ;
57351: LD_ADDR_VAR 0 4
57355: PUSH
57356: LD_INT 1
57358: PPUSH
57359: LD_VAR 0 1
57363: PPUSH
57364: CALL_OW 12
57368: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57369: LD_ADDR_VAR 0 2
57373: PUSH
57374: LD_VAR 0 2
57378: PPUSH
57379: LD_VAR 0 2
57383: PUSH
57384: LD_INT 1
57386: PLUS
57387: PPUSH
57388: LD_VAR 0 1
57392: PUSH
57393: LD_VAR 0 4
57397: ARRAY
57398: PPUSH
57399: CALL_OW 2
57403: ST_TO_ADDR
// array := Delete ( array , index ) ;
57404: LD_ADDR_VAR 0 1
57408: PUSH
57409: LD_VAR 0 1
57413: PPUSH
57414: LD_VAR 0 4
57418: PPUSH
57419: CALL_OW 3
57423: ST_TO_ADDR
// end ;
57424: GO 57348
57426: POP
57427: POP
// end ;
57428: LD_VAR 0 2
57432: RET
// export function GetBaseMaterials ( base ) ; begin
57433: LD_INT 0
57435: PPUSH
// result := [ 0 , 0 , 0 ] ;
57436: LD_ADDR_VAR 0 2
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// if not base then
57455: LD_VAR 0 1
57459: NOT
57460: IFFALSE 57464
// exit ;
57462: GO 57513
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57464: LD_ADDR_VAR 0 2
57468: PUSH
57469: LD_VAR 0 1
57473: PPUSH
57474: LD_INT 1
57476: PPUSH
57477: CALL_OW 275
57481: PUSH
57482: LD_VAR 0 1
57486: PPUSH
57487: LD_INT 2
57489: PPUSH
57490: CALL_OW 275
57494: PUSH
57495: LD_VAR 0 1
57499: PPUSH
57500: LD_INT 3
57502: PPUSH
57503: CALL_OW 275
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// end ;
57513: LD_VAR 0 2
57517: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57518: LD_INT 0
57520: PPUSH
57521: PPUSH
// result := array ;
57522: LD_ADDR_VAR 0 3
57526: PUSH
57527: LD_VAR 0 1
57531: ST_TO_ADDR
// if size > 0 then
57532: LD_VAR 0 2
57536: PUSH
57537: LD_INT 0
57539: GREATER
57540: IFFALSE 57586
// for i := array downto size do
57542: LD_ADDR_VAR 0 4
57546: PUSH
57547: DOUBLE
57548: LD_VAR 0 1
57552: INC
57553: ST_TO_ADDR
57554: LD_VAR 0 2
57558: PUSH
57559: FOR_DOWNTO
57560: IFFALSE 57584
// result := Delete ( result , result ) ;
57562: LD_ADDR_VAR 0 3
57566: PUSH
57567: LD_VAR 0 3
57571: PPUSH
57572: LD_VAR 0 3
57576: PPUSH
57577: CALL_OW 3
57581: ST_TO_ADDR
57582: GO 57559
57584: POP
57585: POP
// end ;
57586: LD_VAR 0 3
57590: RET
// export function ComExit ( unit ) ; var tmp ; begin
57591: LD_INT 0
57593: PPUSH
57594: PPUSH
// if not IsInUnit ( unit ) then
57595: LD_VAR 0 1
57599: PPUSH
57600: CALL_OW 310
57604: NOT
57605: IFFALSE 57609
// exit ;
57607: GO 57669
// tmp := IsInUnit ( unit ) ;
57609: LD_ADDR_VAR 0 3
57613: PUSH
57614: LD_VAR 0 1
57618: PPUSH
57619: CALL_OW 310
57623: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57624: LD_VAR 0 3
57628: PPUSH
57629: CALL_OW 247
57633: PUSH
57634: LD_INT 2
57636: EQUAL
57637: IFFALSE 57650
// ComExitVehicle ( unit ) else
57639: LD_VAR 0 1
57643: PPUSH
57644: CALL_OW 121
57648: GO 57659
// ComExitBuilding ( unit ) ;
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 122
// result := tmp ;
57659: LD_ADDR_VAR 0 2
57663: PUSH
57664: LD_VAR 0 3
57668: ST_TO_ADDR
// end ;
57669: LD_VAR 0 2
57673: RET
// export function ComExitAll ( units ) ; var i ; begin
57674: LD_INT 0
57676: PPUSH
57677: PPUSH
// if not units then
57678: LD_VAR 0 1
57682: NOT
57683: IFFALSE 57687
// exit ;
57685: GO 57713
// for i in units do
57687: LD_ADDR_VAR 0 3
57691: PUSH
57692: LD_VAR 0 1
57696: PUSH
57697: FOR_IN
57698: IFFALSE 57711
// ComExit ( i ) ;
57700: LD_VAR 0 3
57704: PPUSH
57705: CALL 57591 0 1
57709: GO 57697
57711: POP
57712: POP
// end ;
57713: LD_VAR 0 2
57717: RET
// export function ResetHc ; begin
57718: LD_INT 0
57720: PPUSH
// InitHc ;
57721: CALL_OW 19
// hc_importance := 0 ;
57725: LD_ADDR_OWVAR 32
57729: PUSH
57730: LD_INT 0
57732: ST_TO_ADDR
// end ;
57733: LD_VAR 0 1
57737: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57738: LD_INT 0
57740: PPUSH
57741: PPUSH
57742: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57743: LD_ADDR_VAR 0 6
57747: PUSH
57748: LD_VAR 0 1
57752: PUSH
57753: LD_VAR 0 3
57757: PLUS
57758: PUSH
57759: LD_INT 2
57761: DIV
57762: ST_TO_ADDR
// if _x < 0 then
57763: LD_VAR 0 6
57767: PUSH
57768: LD_INT 0
57770: LESS
57771: IFFALSE 57788
// _x := _x * - 1 ;
57773: LD_ADDR_VAR 0 6
57777: PUSH
57778: LD_VAR 0 6
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: MUL
57787: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57788: LD_ADDR_VAR 0 7
57792: PUSH
57793: LD_VAR 0 2
57797: PUSH
57798: LD_VAR 0 4
57802: PLUS
57803: PUSH
57804: LD_INT 2
57806: DIV
57807: ST_TO_ADDR
// if _y < 0 then
57808: LD_VAR 0 7
57812: PUSH
57813: LD_INT 0
57815: LESS
57816: IFFALSE 57833
// _y := _y * - 1 ;
57818: LD_ADDR_VAR 0 7
57822: PUSH
57823: LD_VAR 0 7
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: MUL
57832: ST_TO_ADDR
// result := [ _x , _y ] ;
57833: LD_ADDR_VAR 0 5
57837: PUSH
57838: LD_VAR 0 6
57842: PUSH
57843: LD_VAR 0 7
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: ST_TO_ADDR
// end ;
57852: LD_VAR 0 5
57856: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57857: LD_INT 0
57859: PPUSH
57860: PPUSH
57861: PPUSH
57862: PPUSH
// task := GetTaskList ( unit ) ;
57863: LD_ADDR_VAR 0 7
57867: PUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL_OW 437
57877: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57878: LD_VAR 0 7
57882: NOT
57883: PUSH
57884: LD_VAR 0 1
57888: PPUSH
57889: LD_VAR 0 2
57893: PPUSH
57894: CALL_OW 308
57898: NOT
57899: AND
57900: IFFALSE 57904
// exit ;
57902: GO 58022
// if IsInArea ( unit , area ) then
57904: LD_VAR 0 1
57908: PPUSH
57909: LD_VAR 0 2
57913: PPUSH
57914: CALL_OW 308
57918: IFFALSE 57936
// begin ComMoveToArea ( unit , goAway ) ;
57920: LD_VAR 0 1
57924: PPUSH
57925: LD_VAR 0 3
57929: PPUSH
57930: CALL_OW 113
// exit ;
57934: GO 58022
// end ; if task [ 1 ] [ 1 ] <> M then
57936: LD_VAR 0 7
57940: PUSH
57941: LD_INT 1
57943: ARRAY
57944: PUSH
57945: LD_INT 1
57947: ARRAY
57948: PUSH
57949: LD_STRING M
57951: NONEQUAL
57952: IFFALSE 57956
// exit ;
57954: GO 58022
// x := task [ 1 ] [ 2 ] ;
57956: LD_ADDR_VAR 0 5
57960: PUSH
57961: LD_VAR 0 7
57965: PUSH
57966: LD_INT 1
57968: ARRAY
57969: PUSH
57970: LD_INT 2
57972: ARRAY
57973: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57974: LD_ADDR_VAR 0 6
57978: PUSH
57979: LD_VAR 0 7
57983: PUSH
57984: LD_INT 1
57986: ARRAY
57987: PUSH
57988: LD_INT 3
57990: ARRAY
57991: ST_TO_ADDR
// if InArea ( x , y , area ) then
57992: LD_VAR 0 5
57996: PPUSH
57997: LD_VAR 0 6
58001: PPUSH
58002: LD_VAR 0 2
58006: PPUSH
58007: CALL_OW 309
58011: IFFALSE 58022
// ComStop ( unit ) ;
58013: LD_VAR 0 1
58017: PPUSH
58018: CALL_OW 141
// end ;
58022: LD_VAR 0 4
58026: RET
// export function Abs ( value ) ; begin
58027: LD_INT 0
58029: PPUSH
// result := value ;
58030: LD_ADDR_VAR 0 2
58034: PUSH
58035: LD_VAR 0 1
58039: ST_TO_ADDR
// if value < 0 then
58040: LD_VAR 0 1
58044: PUSH
58045: LD_INT 0
58047: LESS
58048: IFFALSE 58065
// result := value * - 1 ;
58050: LD_ADDR_VAR 0 2
58054: PUSH
58055: LD_VAR 0 1
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: MUL
58064: ST_TO_ADDR
// end ;
58065: LD_VAR 0 2
58069: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58070: LD_INT 0
58072: PPUSH
58073: PPUSH
58074: PPUSH
58075: PPUSH
58076: PPUSH
58077: PPUSH
58078: PPUSH
58079: PPUSH
// if not unit or not building then
58080: LD_VAR 0 1
58084: NOT
58085: PUSH
58086: LD_VAR 0 2
58090: NOT
58091: OR
58092: IFFALSE 58096
// exit ;
58094: GO 58322
// x := GetX ( building ) ;
58096: LD_ADDR_VAR 0 4
58100: PUSH
58101: LD_VAR 0 2
58105: PPUSH
58106: CALL_OW 250
58110: ST_TO_ADDR
// y := GetY ( building ) ;
58111: LD_ADDR_VAR 0 6
58115: PUSH
58116: LD_VAR 0 2
58120: PPUSH
58121: CALL_OW 251
58125: ST_TO_ADDR
// d := GetDir ( building ) ;
58126: LD_ADDR_VAR 0 8
58130: PUSH
58131: LD_VAR 0 2
58135: PPUSH
58136: CALL_OW 254
58140: ST_TO_ADDR
// r := 4 ;
58141: LD_ADDR_VAR 0 9
58145: PUSH
58146: LD_INT 4
58148: ST_TO_ADDR
// for i := 1 to 5 do
58149: LD_ADDR_VAR 0 10
58153: PUSH
58154: DOUBLE
58155: LD_INT 1
58157: DEC
58158: ST_TO_ADDR
58159: LD_INT 5
58161: PUSH
58162: FOR_TO
58163: IFFALSE 58320
// begin _x := ShiftX ( x , d , r + i ) ;
58165: LD_ADDR_VAR 0 5
58169: PUSH
58170: LD_VAR 0 4
58174: PPUSH
58175: LD_VAR 0 8
58179: PPUSH
58180: LD_VAR 0 9
58184: PUSH
58185: LD_VAR 0 10
58189: PLUS
58190: PPUSH
58191: CALL_OW 272
58195: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58196: LD_ADDR_VAR 0 7
58200: PUSH
58201: LD_VAR 0 6
58205: PPUSH
58206: LD_VAR 0 8
58210: PPUSH
58211: LD_VAR 0 9
58215: PUSH
58216: LD_VAR 0 10
58220: PLUS
58221: PPUSH
58222: CALL_OW 273
58226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58227: LD_VAR 0 5
58231: PPUSH
58232: LD_VAR 0 7
58236: PPUSH
58237: CALL_OW 488
58241: PUSH
58242: LD_VAR 0 5
58246: PPUSH
58247: LD_VAR 0 7
58251: PPUSH
58252: CALL_OW 428
58256: PPUSH
58257: CALL_OW 247
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: IN
58272: NOT
58273: AND
58274: IFFALSE 58318
// begin ComMoveXY ( unit , _x , _y ) ;
58276: LD_VAR 0 1
58280: PPUSH
58281: LD_VAR 0 5
58285: PPUSH
58286: LD_VAR 0 7
58290: PPUSH
58291: CALL_OW 111
// result := [ _x , _y ] ;
58295: LD_ADDR_VAR 0 3
58299: PUSH
58300: LD_VAR 0 5
58304: PUSH
58305: LD_VAR 0 7
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// exit ;
58314: POP
58315: POP
58316: GO 58322
// end ; end ;
58318: GO 58162
58320: POP
58321: POP
// end ;
58322: LD_VAR 0 3
58326: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58327: LD_INT 0
58329: PPUSH
58330: PPUSH
58331: PPUSH
// result := 0 ;
58332: LD_ADDR_VAR 0 3
58336: PUSH
58337: LD_INT 0
58339: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58340: LD_VAR 0 1
58344: PUSH
58345: LD_INT 0
58347: LESS
58348: PUSH
58349: LD_VAR 0 1
58353: PUSH
58354: LD_INT 8
58356: GREATER
58357: OR
58358: PUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_INT 0
58366: LESS
58367: OR
58368: PUSH
58369: LD_VAR 0 2
58373: PUSH
58374: LD_INT 8
58376: GREATER
58377: OR
58378: IFFALSE 58382
// exit ;
58380: GO 58457
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58382: LD_ADDR_VAR 0 4
58386: PUSH
58387: LD_INT 22
58389: PUSH
58390: LD_VAR 0 2
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PPUSH
58399: CALL_OW 69
58403: PUSH
58404: FOR_IN
58405: IFFALSE 58455
// begin un := UnitShoot ( i ) ;
58407: LD_ADDR_VAR 0 5
58411: PUSH
58412: LD_VAR 0 4
58416: PPUSH
58417: CALL_OW 504
58421: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58422: LD_VAR 0 5
58426: PPUSH
58427: CALL_OW 255
58431: PUSH
58432: LD_VAR 0 1
58436: EQUAL
58437: IFFALSE 58453
// begin result := un ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: LD_VAR 0 5
58448: ST_TO_ADDR
// exit ;
58449: POP
58450: POP
58451: GO 58457
// end ; end ;
58453: GO 58404
58455: POP
58456: POP
// end ;
58457: LD_VAR 0 3
58461: RET
// export function GetCargoBay ( units ) ; begin
58462: LD_INT 0
58464: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58465: LD_ADDR_VAR 0 2
58469: PUSH
58470: LD_VAR 0 1
58474: PPUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 34
58480: PUSH
58481: LD_INT 12
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 34
58490: PUSH
58491: LD_INT 51
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 34
58500: PUSH
58501: LD_INT 32
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 34
58510: PUSH
58511: LD_EXP 75
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: PPUSH
58527: CALL_OW 72
58531: ST_TO_ADDR
// end ; end_of_file
58532: LD_VAR 0 2
58536: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
58537: LD_INT 0
58539: PPUSH
// ar_miner := 81 ;
58540: LD_ADDR_EXP 81
58544: PUSH
58545: LD_INT 81
58547: ST_TO_ADDR
// ar_crane := 88 ;
58548: LD_ADDR_EXP 80
58552: PUSH
58553: LD_INT 88
58555: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
58556: LD_ADDR_EXP 75
58560: PUSH
58561: LD_INT 89
58563: ST_TO_ADDR
// us_hack := 99 ;
58564: LD_ADDR_EXP 76
58568: PUSH
58569: LD_INT 99
58571: ST_TO_ADDR
// us_artillery := 97 ;
58572: LD_ADDR_EXP 77
58576: PUSH
58577: LD_INT 97
58579: ST_TO_ADDR
// ar_bio_bomb := 91 ;
58580: LD_ADDR_EXP 78
58584: PUSH
58585: LD_INT 91
58587: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
58588: LD_ADDR_EXP 79
58592: PUSH
58593: LD_INT 92
58595: ST_TO_ADDR
// ru_radar := 98 ;
58596: LD_ADDR_EXP 74
58600: PUSH
58601: LD_INT 98
58603: ST_TO_ADDR
// tech_Artillery := 80 ;
58604: LD_ADDR_EXP 82
58608: PUSH
58609: LD_INT 80
58611: ST_TO_ADDR
// tech_RadMat := 81 ;
58612: LD_ADDR_EXP 83
58616: PUSH
58617: LD_INT 81
58619: ST_TO_ADDR
// tech_BasicTools := 82 ;
58620: LD_ADDR_EXP 84
58624: PUSH
58625: LD_INT 82
58627: ST_TO_ADDR
// tech_Cargo := 83 ;
58628: LD_ADDR_EXP 85
58632: PUSH
58633: LD_INT 83
58635: ST_TO_ADDR
// tech_Track := 84 ;
58636: LD_ADDR_EXP 86
58640: PUSH
58641: LD_INT 84
58643: ST_TO_ADDR
// tech_Crane := 85 ;
58644: LD_ADDR_EXP 87
58648: PUSH
58649: LD_INT 85
58651: ST_TO_ADDR
// tech_Bulldozer := 86 ;
58652: LD_ADDR_EXP 88
58656: PUSH
58657: LD_INT 86
58659: ST_TO_ADDR
// tech_Hovercraft := 87 ;
58660: LD_ADDR_EXP 89
58664: PUSH
58665: LD_INT 87
58667: ST_TO_ADDR
// end ;
58668: LD_VAR 0 1
58672: RET
// every 1 do
58673: GO 58675
58675: DISABLE
// InitGlobalVariables ;
58676: CALL 58537 0 0
58680: END
